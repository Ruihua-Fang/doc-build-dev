import{S as UCt,i as JCt,s as YCt,e as a,k as l,w as F,t as o,M as KCt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as ZCt,L as I}from"../../chunks/vendor-6b77c823.js";import{T as KPr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function e3t(L){let g,v,p,m,u,d,h,Mo,oi,rf,Kr,ri,ti,CA,tf,qe,Xe,ai,Mn,wA,En,Cn,AA,ni,wn,yA,si,af,va;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),oi=a("code"),rf=o("model_type"),Kr=o(" attribute is set to the same key you use when registering the config (here "),ri=a("code"),ti=o('"new-model"'),CA=o(")."),tf=l(),qe=a("p"),Xe=o("Likewise, if your "),ai=a("code"),Mn=o("NewModel"),wA=o(" is a subclass of "),En=a("a"),Cn=o("PreTrainedModel"),AA=o(`, make sure its
`),ni=a("code"),wn=o("config_class"),yA=o(` attribute is set to the same class you use when registering the model (here
`),si=a("code"),af=o("NewModelConfig"),va=o(")."),this.h()},l(ze){g=n(ze,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var j9=s(p);m=r(j9,"NewModelConfig"),j9.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var li=s(d);h=r(li,"PretrainedConfig"),li.forEach(t),Mo=r(Ae,`, make sure its
`),oi=n(Ae,"CODE",{});var D9=s(oi);rf=r(D9,"model_type"),D9.forEach(t),Kr=r(Ae," attribute is set to the same key you use when registering the config (here "),ri=n(Ae,"CODE",{});var G9=s(ri);ti=r(G9,'"new-model"'),G9.forEach(t),CA=r(Ae,")."),Ae.forEach(t),tf=i(ze),qe=n(ze,"P",{});var Eo=s(qe);Xe=r(Eo,"Likewise, if your "),ai=n(Eo,"CODE",{});var Fa=s(ai);Mn=r(Fa,"NewModel"),Fa.forEach(t),wA=r(Eo," is a subclass of "),En=n(Eo,"A",{href:!0});var O9=s(En);Cn=r(O9,"PreTrainedModel"),O9.forEach(t),AA=r(Eo,`, make sure its
`),ni=n(Eo,"CODE",{});var nf=s(ni);wn=r(nf,"config_class"),nf.forEach(t),yA=r(Eo,` attribute is set to the same class you use when registering the model (here
`),si=n(Eo,"CODE",{});var V9=s(si);af=r(V9,"NewModelConfig"),V9.forEach(t),va=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(En,"href","/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel")},m(ze,Ae){b(ze,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,oi),e(oi,rf),e(g,Kr),e(g,ri),e(ri,ti),e(g,CA),b(ze,tf,Ae),b(ze,qe,Ae),e(qe,Xe),e(qe,ai),e(ai,Mn),e(qe,wA),e(qe,En),e(En,Cn),e(qe,AA),e(qe,ni),e(ni,wn),e(qe,yA),e(qe,si),e(si,af),e(qe,va)},d(ze){ze&&t(g),ze&&t(tf),ze&&t(qe)}}}function o3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t3t(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function a3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n3t(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function s3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ewt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function owt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function twt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function awt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function swt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _wt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Twt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ewt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Awt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ywt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $wt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Swt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Iwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Owt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uwt(L){let g,v,p,m,u,d,h,Mo,oi,rf,Kr,ri,ti,CA,tf,qe,Xe,ai,Mn,wA,En,Cn,AA,ni,wn,yA,si,af,va,ze,Ae,j9,li,D9,G9,Eo,Fa,O9,nf,V9,INe,$Be,ii,sf,gZ,LA,qNe,hZ,NNe,kBe,An,jNe,pZ,DNe,GNe,uZ,ONe,VNe,SBe,xA,RBe,X9,XNe,BBe,lf,PBe,di,df,_Z,$A,zNe,bZ,QNe,IBe,Co,kA,WNe,SA,HNe,z9,UNe,JNe,YNe,RA,KNe,vZ,ZNe,eje,oje,Mr,BA,rje,FZ,tje,aje,ci,nje,TZ,sje,lje,MZ,ije,dje,cje,A,cf,EZ,fje,mje,Q9,gje,hje,pje,ff,CZ,uje,_je,W9,bje,vje,Fje,mf,wZ,Tje,Mje,H9,Eje,Cje,wje,gf,AZ,Aje,yje,U9,Lje,xje,$je,hf,yZ,kje,Sje,J9,Rje,Bje,Pje,pf,LZ,Ije,qje,Y9,Nje,jje,Dje,uf,xZ,Gje,Oje,K9,Vje,Xje,zje,_f,$Z,Qje,Wje,Z9,Hje,Uje,Jje,bf,kZ,Yje,Kje,e$,Zje,eDe,oDe,vf,SZ,rDe,tDe,o$,aDe,nDe,sDe,Ff,RZ,lDe,iDe,r$,dDe,cDe,fDe,Tf,BZ,mDe,gDe,t$,hDe,pDe,uDe,Mf,PZ,_De,bDe,a$,vDe,FDe,TDe,Ef,IZ,MDe,EDe,n$,CDe,wDe,ADe,Cf,qZ,yDe,LDe,s$,xDe,$De,kDe,wf,NZ,SDe,RDe,l$,BDe,PDe,IDe,Af,jZ,qDe,NDe,i$,jDe,DDe,GDe,yf,DZ,ODe,VDe,d$,XDe,zDe,QDe,Lf,GZ,WDe,HDe,c$,UDe,JDe,YDe,xf,OZ,KDe,ZDe,f$,eGe,oGe,rGe,$f,VZ,tGe,aGe,m$,nGe,sGe,lGe,kf,XZ,iGe,dGe,g$,cGe,fGe,mGe,Sf,zZ,gGe,hGe,h$,pGe,uGe,_Ge,Rf,QZ,bGe,vGe,p$,FGe,TGe,MGe,Bf,WZ,EGe,CGe,u$,wGe,AGe,yGe,Pf,HZ,LGe,xGe,_$,$Ge,kGe,SGe,If,UZ,RGe,BGe,b$,PGe,IGe,qGe,qf,JZ,NGe,jGe,v$,DGe,GGe,OGe,Nf,YZ,VGe,XGe,F$,zGe,QGe,WGe,jf,KZ,HGe,UGe,T$,JGe,YGe,KGe,Df,ZZ,ZGe,eOe,M$,oOe,rOe,tOe,Gf,eee,aOe,nOe,E$,sOe,lOe,iOe,Of,oee,dOe,cOe,C$,fOe,mOe,gOe,Vf,ree,hOe,pOe,w$,uOe,_Oe,bOe,Xf,tee,vOe,FOe,A$,TOe,MOe,EOe,zf,aee,COe,wOe,y$,AOe,yOe,LOe,Qf,nee,xOe,$Oe,L$,kOe,SOe,ROe,Wf,see,BOe,POe,x$,IOe,qOe,NOe,Hf,lee,jOe,DOe,$$,GOe,OOe,VOe,Uf,iee,XOe,zOe,k$,QOe,WOe,HOe,Jf,dee,UOe,JOe,S$,YOe,KOe,ZOe,Yf,cee,eVe,oVe,R$,rVe,tVe,aVe,Kf,fee,nVe,sVe,B$,lVe,iVe,dVe,Zf,mee,cVe,fVe,P$,mVe,gVe,hVe,em,gee,pVe,uVe,I$,_Ve,bVe,vVe,om,hee,FVe,TVe,q$,MVe,EVe,CVe,rm,pee,wVe,AVe,N$,yVe,LVe,xVe,tm,uee,$Ve,kVe,j$,SVe,RVe,BVe,am,_ee,PVe,IVe,D$,qVe,NVe,jVe,nm,bee,DVe,GVe,G$,OVe,VVe,XVe,sm,vee,zVe,QVe,O$,WVe,HVe,UVe,lm,Fee,JVe,YVe,V$,KVe,ZVe,eXe,im,Tee,oXe,rXe,X$,tXe,aXe,nXe,dm,Mee,sXe,lXe,z$,iXe,dXe,cXe,cm,Eee,fXe,mXe,Q$,gXe,hXe,pXe,fm,Cee,uXe,_Xe,W$,bXe,vXe,FXe,mm,wee,TXe,MXe,H$,EXe,CXe,wXe,gm,Aee,AXe,yXe,U$,LXe,xXe,$Xe,hm,yee,kXe,SXe,J$,RXe,BXe,PXe,pm,Lee,IXe,qXe,Y$,NXe,jXe,DXe,um,xee,GXe,OXe,K$,VXe,XXe,zXe,_m,$ee,QXe,WXe,Z$,HXe,UXe,JXe,bm,kee,YXe,KXe,ek,ZXe,eze,oze,vm,See,rze,tze,ok,aze,nze,sze,Fm,Ree,lze,ize,rk,dze,cze,fze,Tm,Bee,mze,gze,tk,hze,pze,uze,Mm,Pee,_ze,bze,ak,vze,Fze,Tze,Em,Iee,Mze,Eze,nk,Cze,wze,Aze,Cm,qee,yze,Lze,sk,xze,$ze,kze,wm,Nee,Sze,Rze,lk,Bze,Pze,Ize,Am,jee,qze,Nze,ik,jze,Dze,Gze,ym,Dee,Oze,Vze,dk,Xze,zze,Qze,Lm,Gee,Wze,Hze,ck,Uze,Jze,Yze,xm,Oee,Kze,Zze,fk,eQe,oQe,rQe,$m,Vee,tQe,aQe,mk,nQe,sQe,lQe,km,Xee,iQe,dQe,gk,cQe,fQe,mQe,Sm,zee,gQe,hQe,hk,pQe,uQe,_Qe,Rm,Qee,bQe,vQe,pk,FQe,TQe,MQe,Bm,Wee,EQe,CQe,uk,wQe,AQe,yQe,Pm,Hee,LQe,xQe,_k,$Qe,kQe,SQe,Im,Uee,RQe,BQe,bk,PQe,IQe,qQe,qm,Jee,NQe,jQe,vk,DQe,GQe,OQe,Nm,Yee,VQe,XQe,Fk,zQe,QQe,WQe,jm,Kee,HQe,UQe,Tk,JQe,YQe,KQe,Dm,Zee,ZQe,eWe,Mk,oWe,rWe,tWe,Gm,eoe,aWe,nWe,Ek,sWe,lWe,iWe,Om,ooe,dWe,cWe,Ck,fWe,mWe,gWe,Vm,roe,hWe,pWe,wk,uWe,_We,bWe,Xm,toe,vWe,FWe,Ak,TWe,MWe,EWe,zm,aoe,CWe,wWe,yk,AWe,yWe,LWe,Qm,noe,xWe,$We,Lk,kWe,SWe,RWe,Wm,soe,BWe,PWe,xk,IWe,qWe,NWe,Hm,loe,jWe,DWe,$k,GWe,OWe,VWe,Um,ioe,XWe,zWe,kk,QWe,WWe,HWe,Jm,doe,UWe,JWe,Sk,YWe,KWe,ZWe,Ym,coe,eHe,oHe,Rk,rHe,tHe,aHe,Km,foe,nHe,sHe,Bk,lHe,iHe,dHe,Zm,moe,cHe,fHe,Pk,mHe,gHe,hHe,eg,goe,pHe,uHe,Ik,_He,bHe,vHe,og,hoe,FHe,THe,qk,MHe,EHe,CHe,rg,poe,wHe,AHe,Nk,yHe,LHe,xHe,tg,uoe,$He,kHe,jk,SHe,RHe,BHe,ag,_oe,PHe,IHe,Dk,qHe,NHe,jHe,ng,boe,DHe,GHe,Gk,OHe,VHe,XHe,sg,zHe,lg,PA,QHe,voe,WHe,qBe,fi,ig,Foe,IA,HHe,Toe,UHe,NBe,wo,qA,JHe,NA,YHe,Ok,KHe,ZHe,eUe,jA,oUe,Moe,rUe,tUe,aUe,Er,DA,nUe,Eoe,sUe,lUe,Ta,iUe,Coe,dUe,cUe,woe,fUe,mUe,Aoe,gUe,hUe,pUe,k,yn,yoe,uUe,_Ue,Vk,bUe,vUe,Xk,FUe,TUe,MUe,Ln,Loe,EUe,CUe,zk,wUe,AUe,Qk,yUe,LUe,xUe,xn,xoe,$Ue,kUe,Wk,SUe,RUe,Hk,BUe,PUe,IUe,dg,$oe,qUe,NUe,Uk,jUe,DUe,GUe,$n,koe,OUe,VUe,Jk,XUe,zUe,Yk,QUe,WUe,HUe,cg,Soe,UUe,JUe,Kk,YUe,KUe,ZUe,fg,Roe,eJe,oJe,Zk,rJe,tJe,aJe,mg,Boe,nJe,sJe,eS,lJe,iJe,dJe,kn,Poe,cJe,fJe,oS,mJe,gJe,rS,hJe,pJe,uJe,Sn,Ioe,_Je,bJe,tS,vJe,FJe,aS,TJe,MJe,EJe,Rn,qoe,CJe,wJe,nS,AJe,yJe,sS,LJe,xJe,$Je,gg,Noe,kJe,SJe,lS,RJe,BJe,PJe,hg,joe,IJe,qJe,iS,NJe,jJe,DJe,Bn,Doe,GJe,OJe,dS,VJe,XJe,cS,zJe,QJe,WJe,pg,Goe,HJe,UJe,fS,JJe,YJe,KJe,Pn,Ooe,ZJe,eYe,mS,oYe,rYe,gS,tYe,aYe,nYe,In,Voe,sYe,lYe,hS,iYe,dYe,pS,cYe,fYe,mYe,qn,Xoe,gYe,hYe,uS,pYe,uYe,_S,_Ye,bYe,vYe,ug,zoe,FYe,TYe,bS,MYe,EYe,CYe,Nn,Qoe,wYe,AYe,vS,yYe,LYe,FS,xYe,$Ye,kYe,jn,Woe,SYe,RYe,TS,BYe,PYe,MS,IYe,qYe,NYe,Dn,Hoe,jYe,DYe,ES,GYe,OYe,CS,VYe,XYe,zYe,Gn,Uoe,QYe,WYe,wS,HYe,UYe,AS,JYe,YYe,KYe,On,Joe,ZYe,eKe,yS,oKe,rKe,LS,tKe,aKe,nKe,Vn,Yoe,sKe,lKe,xS,iKe,dKe,$S,cKe,fKe,mKe,_g,Koe,gKe,hKe,kS,pKe,uKe,_Ke,Xn,Zoe,bKe,vKe,SS,FKe,TKe,RS,MKe,EKe,CKe,bg,ere,wKe,AKe,BS,yKe,LKe,xKe,zn,ore,$Ke,kKe,PS,SKe,RKe,IS,BKe,PKe,IKe,Qn,rre,qKe,NKe,qS,jKe,DKe,NS,GKe,OKe,VKe,Wn,tre,XKe,zKe,jS,QKe,WKe,DS,HKe,UKe,JKe,Hn,are,YKe,KKe,GS,ZKe,eZe,OS,oZe,rZe,tZe,Un,nre,aZe,nZe,VS,sZe,lZe,XS,iZe,dZe,cZe,vg,sre,fZe,mZe,zS,gZe,hZe,pZe,Jn,lre,uZe,_Ze,QS,bZe,vZe,WS,FZe,TZe,MZe,Yn,ire,EZe,CZe,HS,wZe,AZe,US,yZe,LZe,xZe,Kn,dre,$Ze,kZe,JS,SZe,RZe,YS,BZe,PZe,IZe,Zn,cre,qZe,NZe,KS,jZe,DZe,ZS,GZe,OZe,VZe,es,fre,XZe,zZe,eR,QZe,WZe,oR,HZe,UZe,JZe,os,mre,YZe,KZe,rR,ZZe,eeo,tR,oeo,reo,teo,Fg,gre,aeo,neo,aR,seo,leo,ieo,rs,hre,deo,ceo,nR,feo,meo,sR,geo,heo,peo,Tg,pre,ueo,_eo,lR,beo,veo,Feo,Mg,ure,Teo,Meo,iR,Eeo,Ceo,weo,ts,_re,Aeo,yeo,dR,Leo,xeo,cR,$eo,keo,Seo,as,bre,Reo,Beo,fR,Peo,Ieo,mR,qeo,Neo,jeo,ns,vre,Deo,Geo,gR,Oeo,Veo,hR,Xeo,zeo,Qeo,Eg,Fre,Weo,Heo,pR,Ueo,Jeo,Yeo,ss,Tre,Keo,Zeo,uR,eoo,ooo,_R,roo,too,aoo,ls,Mre,noo,soo,bR,loo,ioo,vR,doo,coo,foo,is,Ere,moo,goo,FR,hoo,poo,TR,uoo,_oo,boo,ds,Cre,voo,Foo,MR,Too,Moo,ER,Eoo,Coo,woo,cs,wre,Aoo,yoo,CR,Loo,xoo,wR,$oo,koo,Soo,fs,Are,Roo,Boo,AR,Poo,Ioo,yR,qoo,Noo,joo,Cg,yre,Doo,Goo,LR,Ooo,Voo,Xoo,wg,Lre,zoo,Qoo,xR,Woo,Hoo,Uoo,Ag,xre,Joo,Yoo,$R,Koo,Zoo,ero,yg,$re,oro,rro,kR,tro,aro,nro,ms,kre,sro,lro,SR,iro,dro,RR,cro,fro,mro,Lg,Sre,gro,hro,BR,pro,uro,_ro,gs,Rre,bro,vro,PR,Fro,Tro,IR,Mro,Ero,Cro,hs,Bre,wro,Aro,qR,yro,Lro,NR,xro,$ro,kro,ps,Pre,Sro,Rro,jR,Bro,Pro,DR,Iro,qro,Nro,us,Ire,jro,Dro,GR,Gro,Oro,OR,Vro,Xro,zro,_s,qre,Qro,Wro,VR,Hro,Uro,XR,Jro,Yro,Kro,bs,Nre,Zro,eto,zR,oto,rto,QR,tto,ato,nto,xg,jre,sto,lto,WR,ito,dto,cto,$g,Dre,fto,mto,HR,gto,hto,pto,vs,Gre,uto,_to,UR,bto,vto,JR,Fto,Tto,Mto,Fs,Ore,Eto,Cto,YR,wto,Ato,KR,yto,Lto,xto,Ts,Vre,$to,kto,ZR,Sto,Rto,eB,Bto,Pto,Ito,kg,Xre,qto,Nto,oB,jto,Dto,Gto,Sg,zre,Oto,Vto,rB,Xto,zto,Qto,Rg,Qre,Wto,Hto,tB,Uto,Jto,Yto,Ms,Wre,Kto,Zto,aB,eao,oao,nB,rao,tao,aao,Bg,Hre,nao,sao,sB,lao,iao,dao,Pg,Ure,cao,fao,lB,mao,gao,hao,Es,Jre,pao,uao,iB,_ao,bao,dB,vao,Fao,Tao,Ig,Yre,Mao,Eao,cB,Cao,wao,Aao,qg,Kre,yao,Lao,fB,xao,$ao,kao,Cs,Zre,Sao,Rao,mB,Bao,Pao,gB,Iao,qao,Nao,ws,ete,jao,Dao,hB,Gao,Oao,pB,Vao,Xao,zao,As,ote,Qao,Wao,uB,Hao,Uao,_B,Jao,Yao,Kao,ys,rte,Zao,eno,bB,ono,rno,vB,tno,ano,nno,Ng,sno,jg,GA,lno,tte,ino,jBe,mi,Dg,ate,OA,dno,nte,cno,DBe,Ao,VA,fno,XA,mno,FB,gno,hno,pno,zA,uno,ste,_no,bno,vno,Qe,QA,Fno,lte,Tno,Mno,Ma,Eno,ite,Cno,wno,dte,Ano,yno,cte,Lno,xno,$no,oe,Gg,fte,kno,Sno,TB,Rno,Bno,Pno,Og,mte,Ino,qno,MB,Nno,jno,Dno,Vg,gte,Gno,Ono,EB,Vno,Xno,zno,Xg,hte,Qno,Wno,CB,Hno,Uno,Jno,zg,pte,Yno,Kno,wB,Zno,eso,oso,Qg,ute,rso,tso,AB,aso,nso,sso,Wg,_te,lso,iso,yB,dso,cso,fso,Hg,bte,mso,gso,LB,hso,pso,uso,Ug,vte,_so,bso,xB,vso,Fso,Tso,Jg,Fte,Mso,Eso,$B,Cso,wso,Aso,Yg,Tte,yso,Lso,kB,xso,$so,kso,Kg,Mte,Sso,Rso,SB,Bso,Pso,Iso,Zg,Ete,qso,Nso,RB,jso,Dso,Gso,eh,Cte,Oso,Vso,BB,Xso,zso,Qso,oh,wte,Wso,Hso,PB,Uso,Jso,Yso,rh,Ate,Kso,Zso,IB,elo,olo,rlo,th,yte,tlo,alo,qB,nlo,slo,llo,ah,Lte,ilo,dlo,NB,clo,flo,mlo,nh,xte,glo,hlo,jB,plo,ulo,_lo,sh,$te,blo,vlo,DB,Flo,Tlo,Mlo,lh,kte,Elo,Clo,GB,wlo,Alo,ylo,ih,Ste,Llo,xlo,OB,$lo,klo,Slo,dh,Rte,Rlo,Blo,VB,Plo,Ilo,qlo,ch,Bte,Nlo,jlo,XB,Dlo,Glo,Olo,fh,Pte,Vlo,Xlo,zB,zlo,Qlo,Wlo,mh,Hlo,gh,Ulo,hh,WA,Jlo,Ite,Ylo,GBe,gi,ph,qte,HA,Klo,Nte,Zlo,OBe,yo,UA,eio,JA,oio,QB,rio,tio,aio,YA,nio,jte,sio,lio,iio,We,KA,dio,Dte,cio,fio,hi,mio,Gte,gio,hio,Ote,pio,uio,_io,be,uh,Vte,bio,vio,WB,Fio,Tio,Mio,_h,Xte,Eio,Cio,HB,wio,Aio,yio,bh,zte,Lio,xio,UB,$io,kio,Sio,vh,Qte,Rio,Bio,JB,Pio,Iio,qio,Fh,Wte,Nio,jio,YB,Dio,Gio,Oio,Th,Hte,Vio,Xio,KB,zio,Qio,Wio,Mh,Ute,Hio,Uio,ZB,Jio,Yio,Kio,Eh,Jte,Zio,edo,eP,odo,rdo,tdo,Ch,Yte,ado,ndo,oP,sdo,ldo,ido,wh,Kte,ddo,cdo,rP,fdo,mdo,gdo,Ah,Zte,hdo,pdo,tP,udo,_do,bdo,yh,eae,vdo,Fdo,aP,Tdo,Mdo,Edo,Lh,oae,Cdo,wdo,nP,Ado,ydo,Ldo,xh,rae,xdo,$do,sP,kdo,Sdo,Rdo,$h,Bdo,kh,Pdo,Sh,ZA,Ido,tae,qdo,VBe,pi,Rh,aae,e0,Ndo,nae,jdo,XBe,Lo,o0,Ddo,ui,Gdo,lP,Odo,Vdo,iP,Xdo,zdo,Qdo,r0,Wdo,sae,Hdo,Udo,Jdo,Zr,t0,Ydo,lae,Kdo,Zdo,_i,eco,iae,oco,rco,dP,tco,aco,nco,Bh,sco,He,a0,lco,dae,ico,dco,Ea,cco,cae,fco,mco,fae,gco,hco,mae,pco,uco,_co,x,Ph,gae,bco,vco,cP,Fco,Tco,Mco,Ih,hae,Eco,Cco,fP,wco,Aco,yco,qh,pae,Lco,xco,mP,$co,kco,Sco,Nh,uae,Rco,Bco,gP,Pco,Ico,qco,jh,_ae,Nco,jco,hP,Dco,Gco,Oco,Dh,bae,Vco,Xco,pP,zco,Qco,Wco,Gh,vae,Hco,Uco,uP,Jco,Yco,Kco,Oh,Fae,Zco,efo,_P,ofo,rfo,tfo,Vh,Tae,afo,nfo,bP,sfo,lfo,ifo,Xh,Mae,dfo,cfo,vP,ffo,mfo,gfo,zh,Eae,hfo,pfo,FP,ufo,_fo,bfo,Qh,Cae,vfo,Ffo,TP,Tfo,Mfo,Efo,Wh,wae,Cfo,wfo,MP,Afo,yfo,Lfo,Hh,Aae,xfo,$fo,EP,kfo,Sfo,Rfo,Uh,yae,Bfo,Pfo,CP,Ifo,qfo,Nfo,Jh,Lae,jfo,Dfo,wP,Gfo,Ofo,Vfo,Yh,xae,Xfo,zfo,AP,Qfo,Wfo,Hfo,Kh,$ae,Ufo,Jfo,yP,Yfo,Kfo,Zfo,Zh,kae,emo,omo,LP,rmo,tmo,amo,ep,Sae,nmo,smo,xP,lmo,imo,dmo,op,Rae,cmo,fmo,$P,mmo,gmo,hmo,rp,Bae,pmo,umo,kP,_mo,bmo,vmo,tp,Pae,Fmo,Tmo,SP,Mmo,Emo,Cmo,ap,Iae,wmo,Amo,RP,ymo,Lmo,xmo,np,qae,$mo,kmo,BP,Smo,Rmo,Bmo,sp,Nae,Pmo,Imo,PP,qmo,Nmo,jmo,lp,jae,Dmo,Gmo,IP,Omo,Vmo,Xmo,ip,Dae,zmo,Qmo,qP,Wmo,Hmo,Umo,dp,Gae,Jmo,Ymo,NP,Kmo,Zmo,ego,cp,Oae,ogo,rgo,jP,tgo,ago,ngo,fp,Vae,sgo,lgo,DP,igo,dgo,cgo,Ls,Xae,fgo,mgo,GP,ggo,hgo,OP,pgo,ugo,_go,mp,zae,bgo,vgo,VP,Fgo,Tgo,Mgo,gp,Qae,Ego,Cgo,XP,wgo,Ago,ygo,hp,Wae,Lgo,xgo,zP,$go,kgo,Sgo,pp,Hae,Rgo,Bgo,QP,Pgo,Igo,qgo,up,Uae,Ngo,jgo,WP,Dgo,Ggo,Ogo,_p,Jae,Vgo,Xgo,HP,zgo,Qgo,Wgo,bp,Yae,Hgo,Ugo,UP,Jgo,Ygo,Kgo,vp,Kae,Zgo,eho,JP,oho,rho,tho,Fp,Zae,aho,nho,YP,sho,lho,iho,Tp,ene,dho,cho,KP,fho,mho,gho,Mp,one,hho,pho,ZP,uho,_ho,bho,Ep,rne,vho,Fho,eI,Tho,Mho,Eho,Cp,tne,Cho,who,oI,Aho,yho,Lho,wp,ane,xho,$ho,rI,kho,Sho,Rho,Ap,nne,Bho,Pho,tI,Iho,qho,Nho,yp,sne,jho,Dho,aI,Gho,Oho,Vho,Lp,lne,Xho,zho,nI,Qho,Who,Hho,xp,ine,Uho,Jho,sI,Yho,Kho,Zho,$p,dne,epo,opo,lI,rpo,tpo,apo,kp,cne,npo,spo,iI,lpo,ipo,dpo,Sp,fne,cpo,fpo,dI,mpo,gpo,hpo,Rp,mne,ppo,upo,cI,_po,bpo,vpo,Bp,gne,Fpo,Tpo,fI,Mpo,Epo,Cpo,Pp,hne,wpo,Apo,mI,ypo,Lpo,xpo,Ip,pne,$po,kpo,gI,Spo,Rpo,Bpo,qp,une,Ppo,Ipo,hI,qpo,Npo,jpo,Np,_ne,Dpo,Gpo,pI,Opo,Vpo,Xpo,jp,bne,zpo,Qpo,uI,Wpo,Hpo,Upo,Dp,vne,Jpo,Ypo,_I,Kpo,Zpo,euo,Gp,Fne,ouo,ruo,bI,tuo,auo,nuo,Op,Tne,suo,luo,vI,iuo,duo,cuo,Vp,Mne,fuo,muo,FI,guo,huo,puo,Xp,Ene,uuo,_uo,TI,buo,vuo,Fuo,zp,Cne,Tuo,Muo,MI,Euo,Cuo,wuo,Qp,wne,Auo,yuo,EI,Luo,xuo,$uo,Wp,Ane,kuo,Suo,CI,Ruo,Buo,Puo,Hp,yne,Iuo,quo,wI,Nuo,juo,Duo,Up,Lne,Guo,Ouo,AI,Vuo,Xuo,zuo,Jp,xne,Quo,Wuo,yI,Huo,Uuo,Juo,Yp,$ne,Yuo,Kuo,LI,Zuo,e_o,o_o,Kp,kne,r_o,t_o,xI,a_o,n_o,s_o,Zp,Sne,l_o,i_o,$I,d_o,c_o,f_o,eu,Rne,m_o,g_o,kI,h_o,p_o,u_o,ou,Bne,__o,b_o,SI,v_o,F_o,T_o,ru,Pne,M_o,E_o,RI,C_o,w_o,A_o,tu,Ine,y_o,L_o,BI,x_o,$_o,k_o,au,qne,S_o,R_o,PI,B_o,P_o,I_o,nu,Nne,q_o,N_o,II,j_o,D_o,G_o,su,jne,O_o,V_o,qI,X_o,z_o,Q_o,lu,Dne,W_o,H_o,NI,U_o,J_o,Y_o,iu,Gne,K_o,Z_o,jI,e5o,o5o,r5o,du,One,t5o,a5o,DI,n5o,s5o,l5o,cu,Vne,i5o,d5o,GI,c5o,f5o,m5o,fu,Xne,g5o,h5o,OI,p5o,u5o,_5o,mu,zne,b5o,v5o,VI,F5o,T5o,M5o,gu,Qne,E5o,C5o,XI,w5o,A5o,y5o,hu,Wne,L5o,x5o,zI,$5o,k5o,S5o,pu,Hne,R5o,B5o,QI,P5o,I5o,q5o,uu,Une,N5o,j5o,WI,D5o,G5o,O5o,_u,Jne,V5o,X5o,HI,z5o,Q5o,W5o,bu,Yne,H5o,U5o,UI,J5o,Y5o,K5o,vu,Kne,Z5o,e1o,JI,o1o,r1o,t1o,Fu,Zne,a1o,n1o,YI,s1o,l1o,i1o,Tu,ese,d1o,c1o,KI,f1o,m1o,g1o,Mu,h1o,ose,p1o,u1o,rse,_1o,b1o,Eu,zBe,bi,Cu,tse,n0,v1o,ase,F1o,QBe,xo,s0,T1o,vi,M1o,ZI,E1o,C1o,eq,w1o,A1o,y1o,l0,L1o,nse,x1o,$1o,k1o,et,i0,S1o,sse,R1o,B1o,Fi,P1o,lse,I1o,q1o,oq,N1o,j1o,D1o,wu,G1o,Ue,d0,O1o,ise,V1o,X1o,Ca,z1o,dse,Q1o,W1o,cse,H1o,U1o,fse,J1o,Y1o,K1o,G,Au,mse,Z1o,ebo,rq,obo,rbo,tbo,yu,gse,abo,nbo,tq,sbo,lbo,ibo,Lu,hse,dbo,cbo,aq,fbo,mbo,gbo,xu,pse,hbo,pbo,nq,ubo,_bo,bbo,$u,use,vbo,Fbo,sq,Tbo,Mbo,Ebo,ku,_se,Cbo,wbo,lq,Abo,ybo,Lbo,Su,bse,xbo,$bo,iq,kbo,Sbo,Rbo,Ru,vse,Bbo,Pbo,dq,Ibo,qbo,Nbo,Bu,Fse,jbo,Dbo,cq,Gbo,Obo,Vbo,Pu,Tse,Xbo,zbo,fq,Qbo,Wbo,Hbo,Iu,Mse,Ubo,Jbo,mq,Ybo,Kbo,Zbo,qu,Ese,e2o,o2o,gq,r2o,t2o,a2o,Nu,Cse,n2o,s2o,hq,l2o,i2o,d2o,ju,wse,c2o,f2o,pq,m2o,g2o,h2o,Du,Ase,p2o,u2o,uq,_2o,b2o,v2o,Gu,yse,F2o,T2o,_q,M2o,E2o,C2o,Ou,Lse,w2o,A2o,bq,y2o,L2o,x2o,Vu,xse,$2o,k2o,vq,S2o,R2o,B2o,Xu,$se,P2o,I2o,Fq,q2o,N2o,j2o,zu,kse,D2o,G2o,Tq,O2o,V2o,X2o,Qu,Sse,z2o,Q2o,Mq,W2o,H2o,U2o,Wu,Rse,J2o,Y2o,Eq,K2o,Z2o,evo,Hu,Bse,ovo,rvo,Cq,tvo,avo,nvo,Uu,Pse,svo,lvo,wq,ivo,dvo,cvo,Ju,Ise,fvo,mvo,Aq,gvo,hvo,pvo,Yu,qse,uvo,_vo,yq,bvo,vvo,Fvo,Ku,Nse,Tvo,Mvo,Lq,Evo,Cvo,wvo,Zu,jse,Avo,yvo,xq,Lvo,xvo,$vo,e_,Dse,kvo,Svo,$q,Rvo,Bvo,Pvo,o_,Gse,Ivo,qvo,kq,Nvo,jvo,Dvo,r_,Ose,Gvo,Ovo,Sq,Vvo,Xvo,zvo,t_,Vse,Qvo,Wvo,Rq,Hvo,Uvo,Jvo,a_,Xse,Yvo,Kvo,Bq,Zvo,eFo,oFo,n_,zse,rFo,tFo,Pq,aFo,nFo,sFo,s_,Qse,lFo,iFo,Iq,dFo,cFo,fFo,l_,Wse,mFo,gFo,qq,hFo,pFo,uFo,i_,Hse,_Fo,bFo,Nq,vFo,FFo,TFo,d_,Use,MFo,EFo,jq,CFo,wFo,AFo,c_,Jse,yFo,LFo,Dq,xFo,$Fo,kFo,f_,SFo,Yse,RFo,BFo,Kse,PFo,IFo,m_,WBe,Ti,g_,Zse,c0,qFo,ele,NFo,HBe,$o,f0,jFo,Mi,DFo,Gq,GFo,OFo,Oq,VFo,XFo,zFo,m0,QFo,ole,WFo,HFo,UFo,ot,g0,JFo,rle,YFo,KFo,Ei,ZFo,tle,e6o,o6o,Vq,r6o,t6o,a6o,h_,n6o,Je,h0,s6o,ale,l6o,i6o,wa,d6o,nle,c6o,f6o,sle,m6o,g6o,lle,h6o,p6o,u6o,z,p_,ile,_6o,b6o,Xq,v6o,F6o,T6o,u_,dle,M6o,E6o,zq,C6o,w6o,A6o,__,cle,y6o,L6o,Qq,x6o,$6o,k6o,b_,fle,S6o,R6o,Wq,B6o,P6o,I6o,v_,mle,q6o,N6o,Hq,j6o,D6o,G6o,F_,gle,O6o,V6o,Uq,X6o,z6o,Q6o,T_,hle,W6o,H6o,Jq,U6o,J6o,Y6o,M_,ple,K6o,Z6o,Yq,eTo,oTo,rTo,E_,ule,tTo,aTo,Kq,nTo,sTo,lTo,C_,_le,iTo,dTo,Zq,cTo,fTo,mTo,w_,ble,gTo,hTo,eN,pTo,uTo,_To,A_,vle,bTo,vTo,oN,FTo,TTo,MTo,y_,Fle,ETo,CTo,rN,wTo,ATo,yTo,L_,Tle,LTo,xTo,tN,$To,kTo,STo,x_,Mle,RTo,BTo,aN,PTo,ITo,qTo,$_,Ele,NTo,jTo,nN,DTo,GTo,OTo,k_,Cle,VTo,XTo,sN,zTo,QTo,WTo,S_,wle,HTo,UTo,lN,JTo,YTo,KTo,R_,Ale,ZTo,e7o,iN,o7o,r7o,t7o,B_,yle,a7o,n7o,dN,s7o,l7o,i7o,P_,Lle,d7o,c7o,cN,f7o,m7o,g7o,I_,xle,h7o,p7o,fN,u7o,_7o,b7o,q_,$le,v7o,F7o,mN,T7o,M7o,E7o,N_,kle,C7o,w7o,gN,A7o,y7o,L7o,j_,Sle,x7o,$7o,hN,k7o,S7o,R7o,D_,Rle,B7o,P7o,pN,I7o,q7o,N7o,G_,Ble,j7o,D7o,uN,G7o,O7o,V7o,O_,Ple,X7o,z7o,_N,Q7o,W7o,H7o,V_,Ile,U7o,J7o,bN,Y7o,K7o,Z7o,X_,qle,eMo,oMo,vN,rMo,tMo,aMo,z_,Nle,nMo,sMo,FN,lMo,iMo,dMo,Q_,jle,cMo,fMo,TN,mMo,gMo,hMo,W_,Dle,pMo,uMo,MN,_Mo,bMo,vMo,H_,Gle,FMo,TMo,EN,MMo,EMo,CMo,U_,Ole,wMo,AMo,CN,yMo,LMo,xMo,J_,$Mo,Vle,kMo,SMo,Xle,RMo,BMo,Y_,UBe,Ci,K_,zle,p0,PMo,Qle,IMo,JBe,ko,u0,qMo,wi,NMo,wN,jMo,DMo,AN,GMo,OMo,VMo,_0,XMo,Wle,zMo,QMo,WMo,rt,b0,HMo,Hle,UMo,JMo,Ai,YMo,Ule,KMo,ZMo,yN,e4o,o4o,r4o,Z_,t4o,Ye,v0,a4o,Jle,n4o,s4o,Aa,l4o,Yle,i4o,d4o,Kle,c4o,f4o,Zle,m4o,g4o,h4o,Q,e5,eie,p4o,u4o,LN,_4o,b4o,v4o,o5,oie,F4o,T4o,xN,M4o,E4o,C4o,r5,rie,w4o,A4o,$N,y4o,L4o,x4o,t5,tie,$4o,k4o,kN,S4o,R4o,B4o,a5,aie,P4o,I4o,SN,q4o,N4o,j4o,n5,nie,D4o,G4o,RN,O4o,V4o,X4o,s5,sie,z4o,Q4o,BN,W4o,H4o,U4o,l5,lie,J4o,Y4o,PN,K4o,Z4o,eEo,i5,iie,oEo,rEo,IN,tEo,aEo,nEo,d5,die,sEo,lEo,qN,iEo,dEo,cEo,c5,cie,fEo,mEo,NN,gEo,hEo,pEo,f5,fie,uEo,_Eo,jN,bEo,vEo,FEo,m5,mie,TEo,MEo,DN,EEo,CEo,wEo,g5,gie,AEo,yEo,GN,LEo,xEo,$Eo,h5,hie,kEo,SEo,ON,REo,BEo,PEo,p5,pie,IEo,qEo,VN,NEo,jEo,DEo,u5,uie,GEo,OEo,XN,VEo,XEo,zEo,_5,_ie,QEo,WEo,zN,HEo,UEo,JEo,b5,bie,YEo,KEo,QN,ZEo,eCo,oCo,v5,vie,rCo,tCo,WN,aCo,nCo,sCo,F5,Fie,lCo,iCo,HN,dCo,cCo,fCo,T5,Tie,mCo,gCo,UN,hCo,pCo,uCo,M5,Mie,_Co,bCo,JN,vCo,FCo,TCo,E5,Eie,MCo,ECo,YN,CCo,wCo,ACo,C5,Cie,yCo,LCo,KN,xCo,$Co,kCo,w5,wie,SCo,RCo,ZN,BCo,PCo,ICo,A5,Aie,qCo,NCo,ej,jCo,DCo,GCo,y5,yie,OCo,VCo,oj,XCo,zCo,QCo,L5,Lie,WCo,HCo,rj,UCo,JCo,YCo,x5,xie,KCo,ZCo,tj,e3o,o3o,r3o,$5,$ie,t3o,a3o,kie,n3o,s3o,l3o,k5,Sie,i3o,d3o,aj,c3o,f3o,m3o,S5,Rie,g3o,h3o,nj,p3o,u3o,_3o,R5,Bie,b3o,v3o,sj,F3o,T3o,M3o,B5,Pie,E3o,C3o,lj,w3o,A3o,y3o,P5,L3o,Iie,x3o,$3o,qie,k3o,S3o,I5,YBe,yi,q5,Nie,F0,R3o,jie,B3o,KBe,So,T0,P3o,Li,I3o,ij,q3o,N3o,dj,j3o,D3o,G3o,M0,O3o,Die,V3o,X3o,z3o,tt,E0,Q3o,Gie,W3o,H3o,xi,U3o,Oie,J3o,Y3o,cj,K3o,Z3o,ewo,N5,owo,Ke,C0,rwo,Vie,two,awo,ya,nwo,Xie,swo,lwo,zie,iwo,dwo,Qie,cwo,fwo,mwo,he,j5,Wie,gwo,hwo,fj,pwo,uwo,_wo,D5,Hie,bwo,vwo,mj,Fwo,Two,Mwo,G5,Uie,Ewo,Cwo,gj,wwo,Awo,ywo,O5,Jie,Lwo,xwo,hj,$wo,kwo,Swo,V5,Yie,Rwo,Bwo,pj,Pwo,Iwo,qwo,X5,Kie,Nwo,jwo,uj,Dwo,Gwo,Owo,z5,Zie,Vwo,Xwo,_j,zwo,Qwo,Wwo,Q5,ede,Hwo,Uwo,bj,Jwo,Ywo,Kwo,W5,ode,Zwo,eAo,vj,oAo,rAo,tAo,H5,rde,aAo,nAo,Fj,sAo,lAo,iAo,U5,tde,dAo,cAo,Tj,fAo,mAo,gAo,J5,ade,hAo,pAo,Mj,uAo,_Ao,bAo,Y5,nde,vAo,FAo,Ej,TAo,MAo,EAo,K5,sde,CAo,wAo,Cj,AAo,yAo,LAo,Z5,lde,xAo,$Ao,wj,kAo,SAo,RAo,e1,ide,BAo,PAo,Aj,IAo,qAo,NAo,o1,dde,jAo,DAo,yj,GAo,OAo,VAo,r1,XAo,cde,zAo,QAo,fde,WAo,HAo,t1,ZBe,$i,a1,mde,w0,UAo,gde,JAo,ePe,Ro,A0,YAo,ki,KAo,Lj,ZAo,e0o,xj,o0o,r0o,t0o,y0,a0o,hde,n0o,s0o,l0o,at,L0,i0o,pde,d0o,c0o,Si,f0o,ude,m0o,g0o,$j,h0o,p0o,u0o,n1,_0o,Ze,x0,b0o,_de,v0o,F0o,La,T0o,bde,M0o,E0o,vde,C0o,w0o,Fde,A0o,y0o,L0o,q,s1,Tde,x0o,$0o,kj,k0o,S0o,R0o,l1,Mde,B0o,P0o,Sj,I0o,q0o,N0o,i1,Ede,j0o,D0o,Rj,G0o,O0o,V0o,d1,Cde,X0o,z0o,Bj,Q0o,W0o,H0o,c1,wde,U0o,J0o,Pj,Y0o,K0o,Z0o,f1,Ade,eyo,oyo,Ij,ryo,tyo,ayo,m1,yde,nyo,syo,qj,lyo,iyo,dyo,g1,Lde,cyo,fyo,Nj,myo,gyo,hyo,h1,xde,pyo,uyo,jj,_yo,byo,vyo,p1,$de,Fyo,Tyo,Dj,Myo,Eyo,Cyo,u1,kde,wyo,Ayo,Gj,yyo,Lyo,xyo,_1,Sde,$yo,kyo,Oj,Syo,Ryo,Byo,b1,Rde,Pyo,Iyo,Vj,qyo,Nyo,jyo,v1,Bde,Dyo,Gyo,Xj,Oyo,Vyo,Xyo,F1,Pde,zyo,Qyo,zj,Wyo,Hyo,Uyo,T1,Ide,Jyo,Yyo,Qj,Kyo,Zyo,eLo,M1,qde,oLo,rLo,Wj,tLo,aLo,nLo,E1,Nde,sLo,lLo,Hj,iLo,dLo,cLo,C1,jde,fLo,mLo,Uj,gLo,hLo,pLo,w1,Dde,uLo,_Lo,Jj,bLo,vLo,FLo,A1,Gde,TLo,MLo,Yj,ELo,CLo,wLo,y1,Ode,ALo,yLo,Kj,LLo,xLo,$Lo,L1,Vde,kLo,SLo,Zj,RLo,BLo,PLo,x1,Xde,ILo,qLo,eD,NLo,jLo,DLo,$1,zde,GLo,OLo,oD,VLo,XLo,zLo,k1,Qde,QLo,WLo,rD,HLo,ULo,JLo,S1,Wde,YLo,KLo,tD,ZLo,e8o,o8o,R1,Hde,r8o,t8o,aD,a8o,n8o,s8o,B1,Ude,l8o,i8o,nD,d8o,c8o,f8o,P1,Jde,m8o,g8o,sD,h8o,p8o,u8o,I1,Yde,_8o,b8o,lD,v8o,F8o,T8o,q1,Kde,M8o,E8o,iD,C8o,w8o,A8o,N1,Zde,y8o,L8o,dD,x8o,$8o,k8o,j1,ece,S8o,R8o,cD,B8o,P8o,I8o,D1,oce,q8o,N8o,fD,j8o,D8o,G8o,G1,rce,O8o,V8o,mD,X8o,z8o,Q8o,O1,tce,W8o,H8o,gD,U8o,J8o,Y8o,V1,ace,K8o,Z8o,hD,exo,oxo,rxo,X1,nce,txo,axo,pD,nxo,sxo,lxo,z1,sce,ixo,dxo,uD,cxo,fxo,mxo,Q1,lce,gxo,hxo,_D,pxo,uxo,_xo,W1,ice,bxo,vxo,bD,Fxo,Txo,Mxo,H1,dce,Exo,Cxo,vD,wxo,Axo,yxo,U1,cce,Lxo,xxo,FD,$xo,kxo,Sxo,J1,fce,Rxo,Bxo,TD,Pxo,Ixo,qxo,Y1,mce,Nxo,jxo,MD,Dxo,Gxo,Oxo,K1,gce,Vxo,Xxo,ED,zxo,Qxo,Wxo,Z1,Hxo,hce,Uxo,Jxo,pce,Yxo,Kxo,eb,oPe,Ri,ob,uce,$0,Zxo,_ce,e9o,rPe,Bo,k0,o9o,Bi,r9o,CD,t9o,a9o,wD,n9o,s9o,l9o,S0,i9o,bce,d9o,c9o,f9o,nt,R0,m9o,vce,g9o,h9o,Pi,p9o,Fce,u9o,_9o,AD,b9o,v9o,F9o,rb,T9o,eo,B0,M9o,Tce,E9o,C9o,xa,w9o,Mce,A9o,y9o,Ece,L9o,x9o,Cce,$9o,k9o,S9o,Y,tb,wce,R9o,B9o,yD,P9o,I9o,q9o,ab,Ace,N9o,j9o,LD,D9o,G9o,O9o,nb,yce,V9o,X9o,xD,z9o,Q9o,W9o,sb,Lce,H9o,U9o,$D,J9o,Y9o,K9o,lb,xce,Z9o,e$o,kD,o$o,r$o,t$o,ib,$ce,a$o,n$o,SD,s$o,l$o,i$o,db,kce,d$o,c$o,RD,f$o,m$o,g$o,cb,Sce,h$o,p$o,BD,u$o,_$o,b$o,fb,Rce,v$o,F$o,PD,T$o,M$o,E$o,mb,Bce,C$o,w$o,ID,A$o,y$o,L$o,gb,Pce,x$o,$$o,qD,k$o,S$o,R$o,hb,Ice,B$o,P$o,ND,I$o,q$o,N$o,pb,qce,j$o,D$o,jD,G$o,O$o,V$o,ub,Nce,X$o,z$o,DD,Q$o,W$o,H$o,_b,jce,U$o,J$o,GD,Y$o,K$o,Z$o,bb,Dce,eko,oko,OD,rko,tko,ako,vb,Gce,nko,sko,VD,lko,iko,dko,Fb,Oce,cko,fko,XD,mko,gko,hko,Tb,Vce,pko,uko,zD,_ko,bko,vko,Mb,Xce,Fko,Tko,QD,Mko,Eko,Cko,Eb,zce,wko,Ako,WD,yko,Lko,xko,Cb,Qce,$ko,kko,HD,Sko,Rko,Bko,wb,Wce,Pko,Iko,UD,qko,Nko,jko,Ab,Hce,Dko,Gko,JD,Oko,Vko,Xko,yb,Uce,zko,Qko,YD,Wko,Hko,Uko,Lb,Jce,Jko,Yko,KD,Kko,Zko,eSo,xb,Yce,oSo,rSo,ZD,tSo,aSo,nSo,$b,Kce,sSo,lSo,eG,iSo,dSo,cSo,kb,fSo,Zce,mSo,gSo,efe,hSo,pSo,Sb,tPe,Ii,Rb,ofe,P0,uSo,rfe,_So,aPe,Po,I0,bSo,qi,vSo,oG,FSo,TSo,rG,MSo,ESo,CSo,q0,wSo,tfe,ASo,ySo,LSo,st,N0,xSo,afe,$So,kSo,Ni,SSo,nfe,RSo,BSo,tG,PSo,ISo,qSo,Bb,NSo,oo,j0,jSo,sfe,DSo,GSo,$a,OSo,lfe,VSo,XSo,ife,zSo,QSo,dfe,WSo,HSo,USo,Ur,Pb,cfe,JSo,YSo,aG,KSo,ZSo,eRo,Ib,ffe,oRo,rRo,nG,tRo,aRo,nRo,qb,mfe,sRo,lRo,sG,iRo,dRo,cRo,Nb,gfe,fRo,mRo,lG,gRo,hRo,pRo,jb,hfe,uRo,_Ro,iG,bRo,vRo,FRo,Db,TRo,pfe,MRo,ERo,ufe,CRo,wRo,Gb,nPe,ji,Ob,_fe,D0,ARo,bfe,yRo,sPe,Io,G0,LRo,Di,xRo,dG,$Ro,kRo,cG,SRo,RRo,BRo,O0,PRo,vfe,IRo,qRo,NRo,lt,V0,jRo,Ffe,DRo,GRo,Gi,ORo,Tfe,VRo,XRo,fG,zRo,QRo,WRo,Vb,HRo,ro,X0,URo,Mfe,JRo,YRo,ka,KRo,Efe,ZRo,eBo,Cfe,oBo,rBo,wfe,tBo,aBo,nBo,U,Xb,Afe,sBo,lBo,mG,iBo,dBo,cBo,zb,yfe,fBo,mBo,gG,gBo,hBo,pBo,Qb,Lfe,uBo,_Bo,hG,bBo,vBo,FBo,Wb,xfe,TBo,MBo,pG,EBo,CBo,wBo,Hb,$fe,ABo,yBo,uG,LBo,xBo,$Bo,Ub,kfe,kBo,SBo,_G,RBo,BBo,PBo,Jb,Sfe,IBo,qBo,bG,NBo,jBo,DBo,Yb,Rfe,GBo,OBo,vG,VBo,XBo,zBo,Kb,Bfe,QBo,WBo,FG,HBo,UBo,JBo,Zb,Pfe,YBo,KBo,TG,ZBo,ePo,oPo,e2,Ife,rPo,tPo,MG,aPo,nPo,sPo,o2,qfe,lPo,iPo,EG,dPo,cPo,fPo,r2,Nfe,mPo,gPo,CG,hPo,pPo,uPo,t2,jfe,_Po,bPo,wG,vPo,FPo,TPo,a2,Dfe,MPo,EPo,AG,CPo,wPo,APo,n2,Gfe,yPo,LPo,yG,xPo,$Po,kPo,s2,Ofe,SPo,RPo,LG,BPo,PPo,IPo,l2,Vfe,qPo,NPo,xG,jPo,DPo,GPo,i2,Xfe,OPo,VPo,$G,XPo,zPo,QPo,d2,zfe,WPo,HPo,kG,UPo,JPo,YPo,c2,Qfe,KPo,ZPo,SG,eIo,oIo,rIo,f2,Wfe,tIo,aIo,RG,nIo,sIo,lIo,m2,Hfe,iIo,dIo,BG,cIo,fIo,mIo,g2,Ufe,gIo,hIo,PG,pIo,uIo,_Io,h2,Jfe,bIo,vIo,IG,FIo,TIo,MIo,p2,Yfe,EIo,CIo,qG,wIo,AIo,yIo,u2,Kfe,LIo,xIo,NG,$Io,kIo,SIo,_2,Zfe,RIo,BIo,jG,PIo,IIo,qIo,b2,eme,NIo,jIo,DG,DIo,GIo,OIo,v2,ome,VIo,XIo,GG,zIo,QIo,WIo,F2,rme,HIo,UIo,OG,JIo,YIo,KIo,T2,tme,ZIo,eqo,VG,oqo,rqo,tqo,M2,ame,aqo,nqo,XG,sqo,lqo,iqo,E2,dqo,nme,cqo,fqo,sme,mqo,gqo,C2,lPe,Oi,w2,lme,z0,hqo,ime,pqo,iPe,qo,Q0,uqo,Vi,_qo,zG,bqo,vqo,QG,Fqo,Tqo,Mqo,W0,Eqo,dme,Cqo,wqo,Aqo,it,H0,yqo,cme,Lqo,xqo,Xi,$qo,fme,kqo,Sqo,WG,Rqo,Bqo,Pqo,A2,Iqo,to,U0,qqo,mme,Nqo,jqo,Sa,Dqo,gme,Gqo,Oqo,hme,Vqo,Xqo,pme,zqo,Qqo,Wqo,O,y2,ume,Hqo,Uqo,HG,Jqo,Yqo,Kqo,L2,_me,Zqo,eNo,UG,oNo,rNo,tNo,x2,bme,aNo,nNo,JG,sNo,lNo,iNo,$2,vme,dNo,cNo,YG,fNo,mNo,gNo,k2,Fme,hNo,pNo,KG,uNo,_No,bNo,S2,Tme,vNo,FNo,ZG,TNo,MNo,ENo,R2,Mme,CNo,wNo,eO,ANo,yNo,LNo,B2,Eme,xNo,$No,oO,kNo,SNo,RNo,P2,Cme,BNo,PNo,rO,INo,qNo,NNo,I2,wme,jNo,DNo,tO,GNo,ONo,VNo,q2,Ame,XNo,zNo,aO,QNo,WNo,HNo,N2,yme,UNo,JNo,nO,YNo,KNo,ZNo,j2,Lme,ejo,ojo,sO,rjo,tjo,ajo,D2,xme,njo,sjo,lO,ljo,ijo,djo,G2,$me,cjo,fjo,iO,mjo,gjo,hjo,O2,kme,pjo,ujo,dO,_jo,bjo,vjo,V2,Sme,Fjo,Tjo,cO,Mjo,Ejo,Cjo,X2,Rme,wjo,Ajo,fO,yjo,Ljo,xjo,z2,Bme,$jo,kjo,mO,Sjo,Rjo,Bjo,Q2,Pme,Pjo,Ijo,gO,qjo,Njo,jjo,W2,Ime,Djo,Gjo,hO,Ojo,Vjo,Xjo,H2,qme,zjo,Qjo,pO,Wjo,Hjo,Ujo,U2,Nme,Jjo,Yjo,uO,Kjo,Zjo,eDo,J2,jme,oDo,rDo,_O,tDo,aDo,nDo,Y2,Dme,sDo,lDo,bO,iDo,dDo,cDo,K2,Gme,fDo,mDo,vO,gDo,hDo,pDo,Z2,Ome,uDo,_Do,FO,bDo,vDo,FDo,ev,Vme,TDo,MDo,TO,EDo,CDo,wDo,ov,Xme,ADo,yDo,MO,LDo,xDo,$Do,rv,zme,kDo,SDo,EO,RDo,BDo,PDo,tv,Qme,IDo,qDo,CO,NDo,jDo,DDo,av,Wme,GDo,ODo,wO,VDo,XDo,zDo,nv,Hme,QDo,WDo,AO,HDo,UDo,JDo,sv,Ume,YDo,KDo,yO,ZDo,eGo,oGo,lv,Jme,rGo,tGo,LO,aGo,nGo,sGo,iv,Yme,lGo,iGo,xO,dGo,cGo,fGo,dv,Kme,mGo,gGo,$O,hGo,pGo,uGo,cv,Zme,_Go,bGo,kO,vGo,FGo,TGo,fv,ege,MGo,EGo,SO,CGo,wGo,AGo,mv,yGo,oge,LGo,xGo,rge,$Go,kGo,gv,dPe,zi,hv,tge,J0,SGo,age,RGo,cPe,No,Y0,BGo,Qi,PGo,RO,IGo,qGo,BO,NGo,jGo,DGo,K0,GGo,nge,OGo,VGo,XGo,dt,Z0,zGo,sge,QGo,WGo,Wi,HGo,lge,UGo,JGo,PO,YGo,KGo,ZGo,pv,eOo,ao,ey,oOo,ige,rOo,tOo,Ra,aOo,dge,nOo,sOo,cge,lOo,iOo,fge,dOo,cOo,fOo,mge,uv,gge,mOo,gOo,IO,hOo,pOo,uOo,_v,_Oo,hge,bOo,vOo,pge,FOo,TOo,bv,fPe,Hi,vv,uge,oy,MOo,_ge,EOo,mPe,jo,ry,COo,Ui,wOo,qO,AOo,yOo,NO,LOo,xOo,$Oo,ty,kOo,bge,SOo,ROo,BOo,ct,ay,POo,vge,IOo,qOo,Ji,NOo,Fge,jOo,DOo,jO,GOo,OOo,VOo,Fv,XOo,no,ny,zOo,Tge,QOo,WOo,Ba,HOo,Mge,UOo,JOo,Ege,YOo,KOo,Cge,ZOo,eVo,oVo,ve,Tv,wge,rVo,tVo,DO,aVo,nVo,sVo,Mv,Age,lVo,iVo,GO,dVo,cVo,fVo,Ev,yge,mVo,gVo,OO,hVo,pVo,uVo,Cv,Lge,_Vo,bVo,VO,vVo,FVo,TVo,xs,xge,MVo,EVo,XO,CVo,wVo,zO,AVo,yVo,LVo,wv,$ge,xVo,$Vo,QO,kVo,SVo,RVo,ft,kge,BVo,PVo,WO,IVo,qVo,HO,NVo,jVo,UO,DVo,GVo,OVo,Av,Sge,VVo,XVo,JO,zVo,QVo,WVo,yv,Rge,HVo,UVo,YO,JVo,YVo,KVo,Lv,Bge,ZVo,eXo,KO,oXo,rXo,tXo,xv,Pge,aXo,nXo,ZO,sXo,lXo,iXo,$v,Ige,dXo,cXo,eV,fXo,mXo,gXo,kv,qge,hXo,pXo,oV,uXo,_Xo,bXo,Sv,Nge,vXo,FXo,rV,TXo,MXo,EXo,Rv,CXo,jge,wXo,AXo,Dge,yXo,LXo,Bv,gPe,Yi,Pv,Gge,sy,xXo,Oge,$Xo,hPe,Do,ly,kXo,Ki,SXo,tV,RXo,BXo,aV,PXo,IXo,qXo,iy,NXo,Vge,jXo,DXo,GXo,mt,dy,OXo,Xge,VXo,XXo,Zi,zXo,zge,QXo,WXo,nV,HXo,UXo,JXo,Iv,YXo,so,cy,KXo,Qge,ZXo,ezo,Pa,ozo,Wge,rzo,tzo,Hge,azo,nzo,Uge,szo,lzo,izo,Jge,qv,Yge,dzo,czo,sV,fzo,mzo,gzo,Nv,hzo,Kge,pzo,uzo,Zge,_zo,bzo,jv,pPe,ed,Dv,ehe,fy,vzo,ohe,Fzo,uPe,Go,my,Tzo,od,Mzo,lV,Ezo,Czo,iV,wzo,Azo,yzo,gy,Lzo,rhe,xzo,$zo,kzo,gt,hy,Szo,the,Rzo,Bzo,rd,Pzo,ahe,Izo,qzo,dV,Nzo,jzo,Dzo,Gv,Gzo,lo,py,Ozo,nhe,Vzo,Xzo,Ia,zzo,she,Qzo,Wzo,lhe,Hzo,Uzo,ihe,Jzo,Yzo,Kzo,Ne,Ov,dhe,Zzo,eQo,cV,oQo,rQo,tQo,Vv,che,aQo,nQo,fV,sQo,lQo,iQo,Xv,fhe,dQo,cQo,mV,fQo,mQo,gQo,zv,mhe,hQo,pQo,gV,uQo,_Qo,bQo,Qv,ghe,vQo,FQo,hV,TQo,MQo,EQo,Wv,hhe,CQo,wQo,pV,AQo,yQo,LQo,Hv,phe,xQo,$Qo,uV,kQo,SQo,RQo,Uv,uhe,BQo,PQo,_V,IQo,qQo,NQo,Jv,jQo,_he,DQo,GQo,bhe,OQo,VQo,Yv,_Pe,td,Kv,vhe,uy,XQo,Fhe,zQo,bPe,Oo,_y,QQo,ad,WQo,bV,HQo,UQo,vV,JQo,YQo,KQo,by,ZQo,The,eWo,oWo,rWo,ht,vy,tWo,Mhe,aWo,nWo,nd,sWo,Ehe,lWo,iWo,FV,dWo,cWo,fWo,Zv,mWo,io,Fy,gWo,Che,hWo,pWo,qa,uWo,whe,_Wo,bWo,Ahe,vWo,FWo,yhe,TWo,MWo,EWo,Na,eF,Lhe,CWo,wWo,TV,AWo,yWo,LWo,oF,xhe,xWo,$Wo,MV,kWo,SWo,RWo,rF,$he,BWo,PWo,EV,IWo,qWo,NWo,tF,khe,jWo,DWo,CV,GWo,OWo,VWo,aF,XWo,She,zWo,QWo,Rhe,WWo,HWo,nF,vPe,sd,sF,Bhe,Ty,UWo,Phe,JWo,FPe,Vo,My,YWo,ld,KWo,wV,ZWo,eHo,AV,oHo,rHo,tHo,Ey,aHo,Ihe,nHo,sHo,lHo,pt,Cy,iHo,qhe,dHo,cHo,id,fHo,Nhe,mHo,gHo,yV,hHo,pHo,uHo,lF,_Ho,co,wy,bHo,jhe,vHo,FHo,ja,THo,Dhe,MHo,EHo,Ghe,CHo,wHo,Ohe,AHo,yHo,LHo,je,iF,Vhe,xHo,$Ho,LV,kHo,SHo,RHo,dF,Xhe,BHo,PHo,xV,IHo,qHo,NHo,cF,zhe,jHo,DHo,$V,GHo,OHo,VHo,fF,Qhe,XHo,zHo,kV,QHo,WHo,HHo,mF,Whe,UHo,JHo,SV,YHo,KHo,ZHo,gF,Hhe,eUo,oUo,RV,rUo,tUo,aUo,hF,Uhe,nUo,sUo,BV,lUo,iUo,dUo,pF,Jhe,cUo,fUo,PV,mUo,gUo,hUo,uF,pUo,Yhe,uUo,_Uo,Khe,bUo,vUo,_F,TPe,dd,bF,Zhe,Ay,FUo,epe,TUo,MPe,Xo,yy,MUo,cd,EUo,IV,CUo,wUo,qV,AUo,yUo,LUo,Ly,xUo,ope,$Uo,kUo,SUo,ut,xy,RUo,rpe,BUo,PUo,fd,IUo,tpe,qUo,NUo,NV,jUo,DUo,GUo,vF,OUo,fo,$y,VUo,ape,XUo,zUo,Da,QUo,npe,WUo,HUo,spe,UUo,JUo,lpe,YUo,KUo,ZUo,ky,FF,ipe,eJo,oJo,jV,rJo,tJo,aJo,TF,dpe,nJo,sJo,DV,lJo,iJo,dJo,MF,cJo,cpe,fJo,mJo,fpe,gJo,hJo,EF,EPe,md,CF,mpe,Sy,pJo,gpe,uJo,CPe,zo,Ry,_Jo,gd,bJo,GV,vJo,FJo,OV,TJo,MJo,EJo,By,CJo,hpe,wJo,AJo,yJo,_t,Py,LJo,ppe,xJo,$Jo,hd,kJo,upe,SJo,RJo,VV,BJo,PJo,IJo,wF,qJo,mo,Iy,NJo,_pe,jJo,DJo,Ga,GJo,bpe,OJo,VJo,vpe,XJo,zJo,Fpe,QJo,WJo,HJo,Oa,AF,Tpe,UJo,JJo,XV,YJo,KJo,ZJo,yF,Mpe,eYo,oYo,zV,rYo,tYo,aYo,LF,Epe,nYo,sYo,QV,lYo,iYo,dYo,xF,Cpe,cYo,fYo,WV,mYo,gYo,hYo,$F,pYo,wpe,uYo,_Yo,Ape,bYo,vYo,kF,wPe,pd,SF,ype,qy,FYo,Lpe,TYo,APe,Qo,Ny,MYo,ud,EYo,HV,CYo,wYo,UV,AYo,yYo,LYo,jy,xYo,xpe,$Yo,kYo,SYo,bt,Dy,RYo,$pe,BYo,PYo,_d,IYo,kpe,qYo,NYo,JV,jYo,DYo,GYo,RF,OYo,go,Gy,VYo,Spe,XYo,zYo,Va,QYo,Rpe,WYo,HYo,Bpe,UYo,JYo,Ppe,YYo,KYo,ZYo,bd,BF,Ipe,eKo,oKo,YV,rKo,tKo,aKo,PF,qpe,nKo,sKo,KV,lKo,iKo,dKo,IF,Npe,cKo,fKo,ZV,mKo,gKo,hKo,qF,pKo,jpe,uKo,_Ko,Dpe,bKo,vKo,NF,yPe,vd,jF,Gpe,Oy,FKo,Ope,TKo,LPe,Wo,Vy,MKo,Fd,EKo,eX,CKo,wKo,oX,AKo,yKo,LKo,Xy,xKo,Vpe,$Ko,kKo,SKo,vt,zy,RKo,Xpe,BKo,PKo,Td,IKo,zpe,qKo,NKo,rX,jKo,DKo,GKo,DF,OKo,ho,Qy,VKo,Qpe,XKo,zKo,Xa,QKo,Wpe,WKo,HKo,Hpe,UKo,JKo,Upe,YKo,KKo,ZKo,Wy,GF,Jpe,eZo,oZo,tX,rZo,tZo,aZo,OF,Ype,nZo,sZo,aX,lZo,iZo,dZo,VF,cZo,Kpe,fZo,mZo,Zpe,gZo,hZo,XF,xPe,Md,zF,eue,Hy,pZo,oue,uZo,$Pe,Ho,Uy,_Zo,Ed,bZo,nX,vZo,FZo,sX,TZo,MZo,EZo,Jy,CZo,rue,wZo,AZo,yZo,Ft,Yy,LZo,tue,xZo,$Zo,Cd,kZo,aue,SZo,RZo,lX,BZo,PZo,IZo,QF,qZo,po,Ky,NZo,nue,jZo,DZo,za,GZo,sue,OZo,VZo,lue,XZo,zZo,iue,QZo,WZo,HZo,due,WF,cue,UZo,JZo,iX,YZo,KZo,ZZo,HF,eer,fue,oer,rer,mue,ter,aer,UF,kPe,wd,JF,gue,Zy,ner,hue,ser,SPe,Uo,eL,ler,Ad,ier,dX,der,cer,cX,fer,mer,ger,oL,her,pue,per,uer,_er,Tt,rL,ber,uue,ver,Fer,yd,Ter,_ue,Mer,Eer,fX,Cer,wer,Aer,YF,yer,uo,tL,Ler,bue,xer,$er,Qa,ker,vue,Ser,Rer,Fue,Ber,Per,Tue,Ier,qer,Ner,Wa,KF,Mue,jer,Der,mX,Ger,Oer,Ver,ZF,Eue,Xer,zer,gX,Qer,Wer,Her,e6,Cue,Uer,Jer,hX,Yer,Ker,Zer,o6,wue,eor,oor,pX,ror,tor,aor,r6,nor,Aue,sor,lor,yue,ior,dor,t6,RPe,Ld,a6,Lue,aL,cor,xue,mor,BPe,Jo,nL,gor,xd,hor,uX,por,uor,_X,_or,bor,vor,sL,For,$ue,Tor,Mor,Eor,Mt,lL,Cor,kue,wor,Aor,$d,yor,Sue,Lor,xor,bX,$or,kor,Sor,n6,Ror,_o,iL,Bor,Rue,Por,Ior,Ha,qor,Bue,Nor,jor,Pue,Dor,Gor,Iue,Oor,Vor,Xor,que,s6,Nue,zor,Qor,vX,Wor,Hor,Uor,l6,Jor,jue,Yor,Kor,Due,Zor,err,i6,PPe,kd,d6,Gue,dL,orr,Oue,rrr,IPe,Yo,cL,trr,Sd,arr,FX,nrr,srr,TX,lrr,irr,drr,fL,crr,Vue,frr,mrr,grr,Et,mL,hrr,Xue,prr,urr,Rd,_rr,zue,brr,vrr,MX,Frr,Trr,Mrr,c6,Err,Cr,gL,Crr,Que,wrr,Arr,Ua,yrr,Wue,Lrr,xrr,Hue,$rr,krr,Uue,Srr,Rrr,Brr,j,f6,Jue,Prr,Irr,EX,qrr,Nrr,jrr,m6,Yue,Drr,Grr,CX,Orr,Vrr,Xrr,g6,Kue,zrr,Qrr,wX,Wrr,Hrr,Urr,h6,Zue,Jrr,Yrr,AX,Krr,Zrr,etr,p6,e_e,otr,rtr,yX,ttr,atr,ntr,u6,o_e,str,ltr,LX,itr,dtr,ctr,_6,r_e,ftr,mtr,xX,gtr,htr,ptr,b6,t_e,utr,_tr,$X,btr,vtr,Ftr,v6,a_e,Ttr,Mtr,kX,Etr,Ctr,wtr,F6,n_e,Atr,ytr,SX,Ltr,xtr,$tr,T6,s_e,ktr,Str,RX,Rtr,Btr,Ptr,M6,l_e,Itr,qtr,BX,Ntr,jtr,Dtr,E6,i_e,Gtr,Otr,PX,Vtr,Xtr,ztr,C6,d_e,Qtr,Wtr,IX,Htr,Utr,Jtr,w6,c_e,Ytr,Ktr,qX,Ztr,ear,oar,A6,f_e,rar,tar,NX,aar,nar,sar,y6,m_e,lar,iar,jX,dar,car,far,$s,g_e,mar,gar,DX,har,par,GX,uar,_ar,bar,L6,h_e,Far,Tar,OX,Mar,Ear,Car,x6,p_e,war,Aar,VX,yar,Lar,xar,$6,u_e,$ar,kar,XX,Sar,Rar,Bar,k6,__e,Par,Iar,zX,qar,Nar,jar,S6,b_e,Dar,Gar,QX,Oar,Var,Xar,R6,v_e,zar,Qar,WX,War,Har,Uar,B6,F_e,Jar,Yar,HX,Kar,Zar,enr,P6,T_e,onr,rnr,UX,tnr,anr,nnr,I6,M_e,snr,lnr,JX,inr,dnr,cnr,q6,E_e,fnr,mnr,YX,gnr,hnr,pnr,N6,C_e,unr,_nr,KX,bnr,vnr,Fnr,j6,w_e,Tnr,Mnr,ZX,Enr,Cnr,wnr,D6,A_e,Anr,ynr,ez,Lnr,xnr,$nr,G6,y_e,knr,Snr,oz,Rnr,Bnr,Pnr,O6,L_e,Inr,qnr,rz,Nnr,jnr,Dnr,V6,x_e,Gnr,Onr,tz,Vnr,Xnr,znr,X6,$_e,Qnr,Wnr,az,Hnr,Unr,Jnr,z6,k_e,Ynr,Knr,nz,Znr,esr,osr,Q6,S_e,rsr,tsr,sz,asr,nsr,ssr,W6,R_e,lsr,isr,lz,dsr,csr,fsr,H6,B_e,msr,gsr,iz,hsr,psr,usr,U6,P_e,_sr,bsr,dz,vsr,Fsr,Tsr,J6,I_e,Msr,Esr,cz,Csr,wsr,Asr,Y6,q_e,ysr,Lsr,fz,xsr,$sr,ksr,K6,N_e,Ssr,Rsr,mz,Bsr,Psr,Isr,Z6,j_e,qsr,Nsr,gz,jsr,Dsr,Gsr,eT,D_e,Osr,Vsr,hz,Xsr,zsr,Qsr,oT,qPe,Bd,rT,G_e,hL,Wsr,O_e,Hsr,NPe,Ko,pL,Usr,Pd,Jsr,pz,Ysr,Ksr,uz,Zsr,elr,olr,uL,rlr,V_e,tlr,alr,nlr,Ct,_L,slr,X_e,llr,ilr,Id,dlr,z_e,clr,flr,_z,mlr,glr,hlr,tT,plr,wr,bL,ulr,Q_e,_lr,blr,Ja,vlr,W_e,Flr,Tlr,H_e,Mlr,Elr,U_e,Clr,wlr,Alr,se,aT,J_e,ylr,Llr,bz,xlr,$lr,klr,nT,Y_e,Slr,Rlr,vz,Blr,Plr,Ilr,sT,K_e,qlr,Nlr,Fz,jlr,Dlr,Glr,lT,Z_e,Olr,Vlr,Tz,Xlr,zlr,Qlr,iT,e5e,Wlr,Hlr,Mz,Ulr,Jlr,Ylr,dT,o5e,Klr,Zlr,Ez,eir,oir,rir,cT,r5e,tir,air,Cz,nir,sir,lir,fT,t5e,iir,dir,wz,cir,fir,mir,mT,a5e,gir,hir,Az,pir,uir,_ir,gT,n5e,bir,vir,yz,Fir,Tir,Mir,hT,s5e,Eir,Cir,Lz,wir,Air,yir,pT,l5e,Lir,xir,xz,$ir,kir,Sir,uT,i5e,Rir,Bir,$z,Pir,Iir,qir,_T,d5e,Nir,jir,kz,Dir,Gir,Oir,bT,c5e,Vir,Xir,Sz,zir,Qir,Wir,vT,f5e,Hir,Uir,Rz,Jir,Yir,Kir,FT,m5e,Zir,edr,Bz,odr,rdr,tdr,TT,g5e,adr,ndr,Pz,sdr,ldr,idr,MT,h5e,ddr,cdr,Iz,fdr,mdr,gdr,ET,p5e,hdr,pdr,qz,udr,_dr,bdr,CT,u5e,vdr,Fdr,Nz,Tdr,Mdr,Edr,wT,_5e,Cdr,wdr,jz,Adr,ydr,Ldr,AT,b5e,xdr,$dr,Dz,kdr,Sdr,Rdr,yT,jPe,qd,LT,v5e,vL,Bdr,F5e,Pdr,DPe,Zo,FL,Idr,Nd,qdr,Gz,Ndr,jdr,Oz,Ddr,Gdr,Odr,TL,Vdr,T5e,Xdr,zdr,Qdr,wt,ML,Wdr,M5e,Hdr,Udr,jd,Jdr,E5e,Ydr,Kdr,Vz,Zdr,ecr,ocr,xT,rcr,Ar,EL,tcr,C5e,acr,ncr,Ya,scr,w5e,lcr,icr,A5e,dcr,ccr,y5e,fcr,mcr,gcr,Me,$T,L5e,hcr,pcr,Xz,ucr,_cr,bcr,kT,x5e,vcr,Fcr,zz,Tcr,Mcr,Ecr,ST,$5e,Ccr,wcr,Qz,Acr,ycr,Lcr,RT,k5e,xcr,$cr,Wz,kcr,Scr,Rcr,BT,S5e,Bcr,Pcr,Hz,Icr,qcr,Ncr,PT,R5e,jcr,Dcr,Uz,Gcr,Ocr,Vcr,IT,B5e,Xcr,zcr,Jz,Qcr,Wcr,Hcr,qT,P5e,Ucr,Jcr,Yz,Ycr,Kcr,Zcr,NT,I5e,efr,ofr,Kz,rfr,tfr,afr,jT,q5e,nfr,sfr,Zz,lfr,ifr,dfr,DT,N5e,cfr,ffr,eQ,mfr,gfr,hfr,GT,j5e,pfr,ufr,oQ,_fr,bfr,vfr,OT,GPe,Dd,VT,D5e,CL,Ffr,G5e,Tfr,OPe,er,wL,Mfr,Gd,Efr,rQ,Cfr,wfr,tQ,Afr,yfr,Lfr,AL,xfr,O5e,$fr,kfr,Sfr,At,yL,Rfr,V5e,Bfr,Pfr,Od,Ifr,X5e,qfr,Nfr,aQ,jfr,Dfr,Gfr,XT,Ofr,yr,LL,Vfr,z5e,Xfr,zfr,Ka,Qfr,Q5e,Wfr,Hfr,W5e,Ufr,Jfr,H5e,Yfr,Kfr,Zfr,Vd,zT,U5e,emr,omr,nQ,rmr,tmr,amr,QT,J5e,nmr,smr,sQ,lmr,imr,dmr,WT,Y5e,cmr,fmr,lQ,mmr,gmr,hmr,HT,VPe,Xd,UT,K5e,xL,pmr,Z5e,umr,XPe,or,$L,_mr,zd,bmr,iQ,vmr,Fmr,dQ,Tmr,Mmr,Emr,kL,Cmr,e1e,wmr,Amr,ymr,yt,SL,Lmr,o1e,xmr,$mr,Qd,kmr,r1e,Smr,Rmr,cQ,Bmr,Pmr,Imr,JT,qmr,Lr,RL,Nmr,t1e,jmr,Dmr,Za,Gmr,a1e,Omr,Vmr,n1e,Xmr,zmr,s1e,Qmr,Wmr,Hmr,ie,YT,l1e,Umr,Jmr,fQ,Ymr,Kmr,Zmr,KT,i1e,egr,ogr,mQ,rgr,tgr,agr,ZT,d1e,ngr,sgr,gQ,lgr,igr,dgr,e7,c1e,cgr,fgr,hQ,mgr,ggr,hgr,o7,f1e,pgr,ugr,pQ,_gr,bgr,vgr,r7,m1e,Fgr,Tgr,uQ,Mgr,Egr,Cgr,t7,g1e,wgr,Agr,_Q,ygr,Lgr,xgr,a7,h1e,$gr,kgr,bQ,Sgr,Rgr,Bgr,n7,p1e,Pgr,Igr,vQ,qgr,Ngr,jgr,s7,u1e,Dgr,Ggr,FQ,Ogr,Vgr,Xgr,l7,_1e,zgr,Qgr,TQ,Wgr,Hgr,Ugr,i7,b1e,Jgr,Ygr,MQ,Kgr,Zgr,ehr,d7,v1e,ohr,rhr,EQ,thr,ahr,nhr,c7,F1e,shr,lhr,CQ,ihr,dhr,chr,f7,T1e,fhr,mhr,wQ,ghr,hhr,phr,m7,M1e,uhr,_hr,AQ,bhr,vhr,Fhr,g7,E1e,Thr,Mhr,yQ,Ehr,Chr,whr,h7,C1e,Ahr,yhr,LQ,Lhr,xhr,$hr,p7,w1e,khr,Shr,xQ,Rhr,Bhr,Phr,u7,A1e,Ihr,qhr,$Q,Nhr,jhr,Dhr,_7,zPe,Wd,b7,y1e,BL,Ghr,L1e,Ohr,QPe,rr,PL,Vhr,Hd,Xhr,kQ,zhr,Qhr,SQ,Whr,Hhr,Uhr,IL,Jhr,x1e,Yhr,Khr,Zhr,Lt,qL,epr,$1e,opr,rpr,Ud,tpr,k1e,apr,npr,RQ,spr,lpr,ipr,v7,dpr,xr,NL,cpr,S1e,fpr,mpr,en,gpr,R1e,hpr,ppr,B1e,upr,_pr,P1e,bpr,vpr,Fpr,ye,F7,I1e,Tpr,Mpr,BQ,Epr,Cpr,wpr,T7,q1e,Apr,ypr,PQ,Lpr,xpr,$pr,M7,N1e,kpr,Spr,IQ,Rpr,Bpr,Ppr,E7,j1e,Ipr,qpr,qQ,Npr,jpr,Dpr,C7,D1e,Gpr,Opr,NQ,Vpr,Xpr,zpr,w7,G1e,Qpr,Wpr,jQ,Hpr,Upr,Jpr,A7,O1e,Ypr,Kpr,DQ,Zpr,eur,our,y7,V1e,rur,tur,GQ,aur,nur,sur,L7,X1e,lur,iur,OQ,dur,cur,fur,x7,z1e,mur,gur,VQ,hur,pur,uur,$7,WPe,Jd,k7,Q1e,jL,_ur,W1e,bur,HPe,tr,DL,vur,Yd,Fur,XQ,Tur,Mur,zQ,Eur,Cur,wur,GL,Aur,H1e,yur,Lur,xur,xt,OL,$ur,U1e,kur,Sur,Kd,Rur,J1e,Bur,Pur,QQ,Iur,qur,Nur,S7,jur,$r,VL,Dur,Y1e,Gur,Our,on,Vur,K1e,Xur,zur,Z1e,Qur,Wur,ebe,Hur,Uur,Jur,Z,R7,obe,Yur,Kur,WQ,Zur,e_r,o_r,B7,rbe,r_r,t_r,HQ,a_r,n_r,s_r,P7,tbe,l_r,i_r,UQ,d_r,c_r,f_r,I7,abe,m_r,g_r,JQ,h_r,p_r,u_r,q7,nbe,__r,b_r,YQ,v_r,F_r,T_r,N7,sbe,M_r,E_r,KQ,C_r,w_r,A_r,j7,lbe,y_r,L_r,ZQ,x_r,$_r,k_r,D7,ibe,S_r,R_r,eW,B_r,P_r,I_r,G7,dbe,q_r,N_r,oW,j_r,D_r,G_r,O7,cbe,O_r,V_r,rW,X_r,z_r,Q_r,V7,fbe,W_r,H_r,tW,U_r,J_r,Y_r,X7,mbe,K_r,Z_r,aW,e5r,o5r,r5r,z7,gbe,t5r,a5r,nW,n5r,s5r,l5r,Q7,hbe,i5r,d5r,sW,c5r,f5r,m5r,W7,pbe,g5r,h5r,lW,p5r,u5r,_5r,H7,ube,b5r,v5r,iW,F5r,T5r,M5r,U7,_be,E5r,C5r,dW,w5r,A5r,y5r,J7,bbe,L5r,x5r,cW,$5r,k5r,S5r,Y7,vbe,R5r,B5r,fW,P5r,I5r,q5r,K7,Fbe,N5r,j5r,mW,D5r,G5r,O5r,Z7,Tbe,V5r,X5r,gW,z5r,Q5r,W5r,eM,Mbe,H5r,U5r,hW,J5r,Y5r,K5r,oM,Ebe,Z5r,e1r,pW,o1r,r1r,t1r,rM,Cbe,a1r,n1r,uW,s1r,l1r,i1r,tM,wbe,d1r,c1r,_W,f1r,m1r,g1r,aM,Abe,h1r,p1r,bW,u1r,_1r,b1r,nM,UPe,Zd,sM,ybe,XL,v1r,Lbe,F1r,JPe,ar,zL,T1r,ec,M1r,vW,E1r,C1r,FW,w1r,A1r,y1r,QL,L1r,xbe,x1r,$1r,k1r,$t,WL,S1r,$be,R1r,B1r,oc,P1r,kbe,I1r,q1r,TW,N1r,j1r,D1r,lM,G1r,kr,HL,O1r,Sbe,V1r,X1r,rn,z1r,Rbe,Q1r,W1r,Bbe,H1r,U1r,Pbe,J1r,Y1r,K1r,pe,iM,Ibe,Z1r,ebr,MW,obr,rbr,tbr,dM,qbe,abr,nbr,EW,sbr,lbr,ibr,cM,Nbe,dbr,cbr,CW,fbr,mbr,gbr,fM,jbe,hbr,pbr,wW,ubr,_br,bbr,mM,Dbe,vbr,Fbr,AW,Tbr,Mbr,Ebr,gM,Gbe,Cbr,wbr,yW,Abr,ybr,Lbr,hM,Obe,xbr,$br,LW,kbr,Sbr,Rbr,pM,Vbe,Bbr,Pbr,xW,Ibr,qbr,Nbr,uM,Xbe,jbr,Dbr,$W,Gbr,Obr,Vbr,_M,zbe,Xbr,zbr,kW,Qbr,Wbr,Hbr,bM,Qbe,Ubr,Jbr,SW,Ybr,Kbr,Zbr,vM,Wbe,e2r,o2r,RW,r2r,t2r,a2r,FM,Hbe,n2r,s2r,BW,l2r,i2r,d2r,TM,Ube,c2r,f2r,PW,m2r,g2r,h2r,MM,Jbe,p2r,u2r,IW,_2r,b2r,v2r,EM,Ybe,F2r,T2r,qW,M2r,E2r,C2r,CM,Kbe,w2r,A2r,NW,y2r,L2r,x2r,wM,YPe,rc,AM,Zbe,UL,$2r,e2e,k2r,KPe,nr,JL,S2r,tc,R2r,jW,B2r,P2r,DW,I2r,q2r,N2r,YL,j2r,o2e,D2r,G2r,O2r,kt,KL,V2r,r2e,X2r,z2r,ac,Q2r,t2e,W2r,H2r,GW,U2r,J2r,Y2r,yM,K2r,Sr,ZL,Z2r,a2e,evr,ovr,tn,rvr,n2e,tvr,avr,s2e,nvr,svr,l2e,lvr,ivr,dvr,i2e,LM,d2e,cvr,fvr,OW,mvr,gvr,hvr,xM,ZPe,nc,$M,c2e,e8,pvr,f2e,uvr,eIe,sr,o8,_vr,sc,bvr,VW,vvr,Fvr,XW,Tvr,Mvr,Evr,r8,Cvr,m2e,wvr,Avr,yvr,St,t8,Lvr,g2e,xvr,$vr,lc,kvr,h2e,Svr,Rvr,zW,Bvr,Pvr,Ivr,kM,qvr,Rr,a8,Nvr,p2e,jvr,Dvr,an,Gvr,u2e,Ovr,Vvr,_2e,Xvr,zvr,b2e,Qvr,Wvr,Hvr,de,SM,v2e,Uvr,Jvr,QW,Yvr,Kvr,Zvr,RM,F2e,eFr,oFr,WW,rFr,tFr,aFr,BM,T2e,nFr,sFr,HW,lFr,iFr,dFr,PM,M2e,cFr,fFr,UW,mFr,gFr,hFr,IM,E2e,pFr,uFr,JW,_Fr,bFr,vFr,qM,C2e,FFr,TFr,YW,MFr,EFr,CFr,NM,w2e,wFr,AFr,KW,yFr,LFr,xFr,jM,A2e,$Fr,kFr,ZW,SFr,RFr,BFr,DM,y2e,PFr,IFr,eH,qFr,NFr,jFr,GM,L2e,DFr,GFr,oH,OFr,VFr,XFr,OM,x2e,zFr,QFr,rH,WFr,HFr,UFr,VM,$2e,JFr,YFr,tH,KFr,ZFr,e6r,XM,k2e,o6r,r6r,aH,t6r,a6r,n6r,zM,S2e,s6r,l6r,nH,i6r,d6r,c6r,QM,R2e,f6r,m6r,sH,g6r,h6r,p6r,WM,B2e,u6r,_6r,lH,b6r,v6r,F6r,HM,P2e,T6r,M6r,iH,E6r,C6r,w6r,UM,I2e,A6r,y6r,dH,L6r,x6r,$6r,JM,q2e,k6r,S6r,cH,R6r,B6r,P6r,YM,N2e,I6r,q6r,fH,N6r,j6r,D6r,KM,oIe,ic,ZM,j2e,n8,G6r,D2e,O6r,rIe,lr,s8,V6r,dc,X6r,mH,z6r,Q6r,gH,W6r,H6r,U6r,l8,J6r,G2e,Y6r,K6r,Z6r,Rt,i8,eTr,O2e,oTr,rTr,cc,tTr,V2e,aTr,nTr,hH,sTr,lTr,iTr,e4,dTr,Br,d8,cTr,X2e,fTr,mTr,nn,gTr,z2e,hTr,pTr,Q2e,uTr,_Tr,W2e,bTr,vTr,FTr,ce,o4,H2e,TTr,MTr,pH,ETr,CTr,wTr,r4,U2e,ATr,yTr,uH,LTr,xTr,$Tr,t4,J2e,kTr,STr,_H,RTr,BTr,PTr,a4,Y2e,ITr,qTr,bH,NTr,jTr,DTr,n4,K2e,GTr,OTr,vH,VTr,XTr,zTr,s4,Z2e,QTr,WTr,FH,HTr,UTr,JTr,l4,eve,YTr,KTr,TH,ZTr,e7r,o7r,i4,ove,r7r,t7r,MH,a7r,n7r,s7r,d4,rve,l7r,i7r,EH,d7r,c7r,f7r,c4,tve,m7r,g7r,CH,h7r,p7r,u7r,f4,ave,_7r,b7r,wH,v7r,F7r,T7r,m4,nve,M7r,E7r,AH,C7r,w7r,A7r,g4,sve,y7r,L7r,yH,x7r,$7r,k7r,h4,lve,S7r,R7r,LH,B7r,P7r,I7r,p4,ive,q7r,N7r,xH,j7r,D7r,G7r,u4,dve,O7r,V7r,$H,X7r,z7r,Q7r,_4,cve,W7r,H7r,kH,U7r,J7r,Y7r,b4,fve,K7r,Z7r,SH,eMr,oMr,rMr,v4,mve,tMr,aMr,RH,nMr,sMr,lMr,F4,gve,iMr,dMr,BH,cMr,fMr,mMr,T4,tIe,fc,M4,hve,c8,gMr,pve,hMr,aIe,ir,f8,pMr,mc,uMr,PH,_Mr,bMr,IH,vMr,FMr,TMr,m8,MMr,uve,EMr,CMr,wMr,Bt,g8,AMr,_ve,yMr,LMr,gc,xMr,bve,$Mr,kMr,qH,SMr,RMr,BMr,E4,PMr,Pr,h8,IMr,vve,qMr,NMr,sn,jMr,Fve,DMr,GMr,Tve,OMr,VMr,Mve,XMr,zMr,QMr,Eve,C4,Cve,WMr,HMr,NH,UMr,JMr,YMr,w4,nIe,hc,A4,wve,p8,KMr,Ave,ZMr,sIe,dr,u8,e4r,pc,o4r,jH,r4r,t4r,DH,a4r,n4r,s4r,_8,l4r,yve,i4r,d4r,c4r,Pt,b8,f4r,Lve,m4r,g4r,uc,h4r,xve,p4r,u4r,GH,_4r,b4r,v4r,y4,F4r,Ir,v8,T4r,$ve,M4r,E4r,ln,C4r,kve,w4r,A4r,Sve,y4r,L4r,Rve,x4r,$4r,k4r,Bve,L4,Pve,S4r,R4r,OH,B4r,P4r,I4r,x4,lIe,_c,$4,Ive,F8,q4r,qve,N4r,iIe,cr,T8,j4r,bc,D4r,VH,G4r,O4r,XH,V4r,X4r,z4r,M8,Q4r,Nve,W4r,H4r,U4r,It,E8,J4r,jve,Y4r,K4r,vc,Z4r,Dve,eEr,oEr,zH,rEr,tEr,aEr,k4,nEr,qr,C8,sEr,Gve,lEr,iEr,dn,dEr,Ove,cEr,fEr,Vve,mEr,gEr,Xve,hEr,pEr,uEr,re,S4,zve,_Er,bEr,QH,vEr,FEr,TEr,R4,Qve,MEr,EEr,WH,CEr,wEr,AEr,B4,Wve,yEr,LEr,HH,xEr,$Er,kEr,P4,Hve,SEr,REr,UH,BEr,PEr,IEr,I4,Uve,qEr,NEr,JH,jEr,DEr,GEr,q4,Jve,OEr,VEr,YH,XEr,zEr,QEr,N4,Yve,WEr,HEr,KH,UEr,JEr,YEr,j4,Kve,KEr,ZEr,ZH,eCr,oCr,rCr,D4,Zve,tCr,aCr,eU,nCr,sCr,lCr,G4,eFe,iCr,dCr,oU,cCr,fCr,mCr,O4,oFe,gCr,hCr,rU,pCr,uCr,_Cr,V4,rFe,bCr,vCr,tU,FCr,TCr,MCr,X4,tFe,ECr,CCr,aU,wCr,ACr,yCr,z4,aFe,LCr,xCr,nU,$Cr,kCr,SCr,Q4,nFe,RCr,BCr,sU,PCr,ICr,qCr,W4,sFe,NCr,jCr,lU,DCr,GCr,OCr,H4,lFe,VCr,XCr,iU,zCr,QCr,WCr,U4,iFe,HCr,UCr,dU,JCr,YCr,KCr,J4,dFe,ZCr,e3r,cU,o3r,r3r,t3r,Y4,cFe,a3r,n3r,fU,s3r,l3r,i3r,K4,fFe,d3r,c3r,mU,f3r,m3r,g3r,Z4,mFe,h3r,p3r,gU,u3r,_3r,b3r,eE,gFe,v3r,F3r,hU,T3r,M3r,E3r,oE,hFe,C3r,w3r,pU,A3r,y3r,L3r,rE,pFe,x3r,$3r,uU,k3r,S3r,R3r,tE,dIe,Fc,aE,uFe,w8,B3r,_Fe,P3r,cIe,fr,A8,I3r,Tc,q3r,_U,N3r,j3r,bU,D3r,G3r,O3r,y8,V3r,bFe,X3r,z3r,Q3r,qt,L8,W3r,vFe,H3r,U3r,Mc,J3r,FFe,Y3r,K3r,vU,Z3r,ewr,owr,nE,rwr,Nr,x8,twr,TFe,awr,nwr,cn,swr,MFe,lwr,iwr,EFe,dwr,cwr,CFe,fwr,mwr,gwr,ke,sE,wFe,hwr,pwr,FU,uwr,_wr,bwr,lE,AFe,vwr,Fwr,TU,Twr,Mwr,Ewr,iE,yFe,Cwr,wwr,MU,Awr,ywr,Lwr,dE,LFe,xwr,$wr,EU,kwr,Swr,Rwr,cE,xFe,Bwr,Pwr,CU,Iwr,qwr,Nwr,fE,$Fe,jwr,Dwr,wU,Gwr,Owr,Vwr,mE,kFe,Xwr,zwr,AU,Qwr,Wwr,Hwr,gE,SFe,Uwr,Jwr,yU,Ywr,Kwr,Zwr,hE,RFe,eAr,oAr,LU,rAr,tAr,aAr,pE,fIe,Ec,uE,BFe,$8,nAr,PFe,sAr,mIe,mr,k8,lAr,Cc,iAr,xU,dAr,cAr,$U,fAr,mAr,gAr,S8,hAr,IFe,pAr,uAr,_Ar,Nt,R8,bAr,qFe,vAr,FAr,wc,TAr,NFe,MAr,EAr,kU,CAr,wAr,AAr,_E,yAr,jr,B8,LAr,jFe,xAr,$Ar,fn,kAr,DFe,SAr,RAr,GFe,BAr,PAr,OFe,IAr,qAr,NAr,Ee,bE,VFe,jAr,DAr,SU,GAr,OAr,VAr,vE,XFe,XAr,zAr,RU,QAr,WAr,HAr,FE,zFe,UAr,JAr,BU,YAr,KAr,ZAr,TE,QFe,e0r,o0r,PU,r0r,t0r,a0r,ME,WFe,n0r,s0r,IU,l0r,i0r,d0r,EE,HFe,c0r,f0r,qU,m0r,g0r,h0r,CE,UFe,p0r,u0r,NU,_0r,b0r,v0r,wE,JFe,F0r,T0r,jU,M0r,E0r,C0r,AE,YFe,w0r,A0r,DU,y0r,L0r,x0r,yE,KFe,$0r,k0r,GU,S0r,R0r,B0r,LE,ZFe,P0r,I0r,OU,q0r,N0r,j0r,xE,e6e,D0r,G0r,VU,O0r,V0r,X0r,$E,gIe,Ac,kE,o6e,P8,z0r,r6e,Q0r,hIe,gr,I8,W0r,yc,H0r,XU,U0r,J0r,zU,Y0r,K0r,Z0r,q8,eyr,t6e,oyr,ryr,tyr,jt,N8,ayr,a6e,nyr,syr,Lc,lyr,n6e,iyr,dyr,QU,cyr,fyr,myr,SE,gyr,Dr,j8,hyr,s6e,pyr,uyr,mn,_yr,l6e,byr,vyr,i6e,Fyr,Tyr,d6e,Myr,Eyr,Cyr,Le,RE,c6e,wyr,Ayr,WU,yyr,Lyr,xyr,BE,f6e,$yr,kyr,HU,Syr,Ryr,Byr,PE,m6e,Pyr,Iyr,UU,qyr,Nyr,jyr,IE,g6e,Dyr,Gyr,JU,Oyr,Vyr,Xyr,qE,h6e,zyr,Qyr,YU,Wyr,Hyr,Uyr,NE,p6e,Jyr,Yyr,KU,Kyr,Zyr,eLr,jE,u6e,oLr,rLr,ZU,tLr,aLr,nLr,DE,_6e,sLr,lLr,eJ,iLr,dLr,cLr,GE,b6e,fLr,mLr,oJ,gLr,hLr,pLr,OE,v6e,uLr,_Lr,rJ,bLr,vLr,FLr,VE,pIe,xc,XE,F6e,D8,TLr,T6e,MLr,uIe,hr,G8,ELr,$c,CLr,tJ,wLr,ALr,aJ,yLr,LLr,xLr,O8,$Lr,M6e,kLr,SLr,RLr,Dt,V8,BLr,E6e,PLr,ILr,kc,qLr,C6e,NLr,jLr,nJ,DLr,GLr,OLr,zE,VLr,Gr,X8,XLr,w6e,zLr,QLr,gn,WLr,A6e,HLr,ULr,y6e,JLr,YLr,L6e,KLr,ZLr,e8r,Se,QE,x6e,o8r,r8r,sJ,t8r,a8r,n8r,WE,$6e,s8r,l8r,lJ,i8r,d8r,c8r,HE,k6e,f8r,m8r,iJ,g8r,h8r,p8r,UE,S6e,u8r,_8r,dJ,b8r,v8r,F8r,JE,R6e,T8r,M8r,cJ,E8r,C8r,w8r,YE,B6e,A8r,y8r,fJ,L8r,x8r,$8r,KE,P6e,k8r,S8r,mJ,R8r,B8r,P8r,ZE,I6e,I8r,q8r,gJ,N8r,j8r,D8r,eC,q6e,G8r,O8r,hJ,V8r,X8r,z8r,oC,_Ie,Sc,rC,N6e,z8,Q8r,j6e,W8r,bIe,pr,Q8,H8r,Rc,U8r,pJ,J8r,Y8r,uJ,K8r,Z8r,exr,W8,oxr,D6e,rxr,txr,axr,Gt,H8,nxr,G6e,sxr,lxr,Bc,ixr,O6e,dxr,cxr,_J,fxr,mxr,gxr,tC,hxr,Or,U8,pxr,V6e,uxr,_xr,hn,bxr,X6e,vxr,Fxr,z6e,Txr,Mxr,Q6e,Exr,Cxr,wxr,xe,aC,W6e,Axr,yxr,bJ,Lxr,xxr,$xr,nC,H6e,kxr,Sxr,vJ,Rxr,Bxr,Pxr,sC,U6e,Ixr,qxr,FJ,Nxr,jxr,Dxr,lC,J6e,Gxr,Oxr,TJ,Vxr,Xxr,zxr,iC,Y6e,Qxr,Wxr,MJ,Hxr,Uxr,Jxr,dC,K6e,Yxr,Kxr,EJ,Zxr,e9r,o9r,cC,Z6e,r9r,t9r,CJ,a9r,n9r,s9r,fC,eTe,l9r,i9r,wJ,d9r,c9r,f9r,mC,oTe,m9r,g9r,AJ,h9r,p9r,u9r,gC,rTe,_9r,b9r,yJ,v9r,F9r,T9r,hC,vIe,Pc,pC,tTe,J8,M9r,aTe,E9r,FIe,ur,Y8,C9r,Ic,w9r,LJ,A9r,y9r,xJ,L9r,x9r,$9r,K8,k9r,nTe,S9r,R9r,B9r,Ot,Z8,P9r,sTe,I9r,q9r,qc,N9r,lTe,j9r,D9r,$J,G9r,O9r,V9r,uC,X9r,Vr,ex,z9r,iTe,Q9r,W9r,pn,H9r,dTe,U9r,J9r,cTe,Y9r,K9r,fTe,Z9r,e$r,o$r,$e,_C,mTe,r$r,t$r,kJ,a$r,n$r,s$r,bC,gTe,l$r,i$r,SJ,d$r,c$r,f$r,vC,hTe,m$r,g$r,RJ,h$r,p$r,u$r,FC,pTe,_$r,b$r,BJ,v$r,F$r,T$r,TC,uTe,M$r,E$r,PJ,C$r,w$r,A$r,MC,_Te,y$r,L$r,IJ,x$r,$$r,k$r,EC,bTe,S$r,R$r,qJ,B$r,P$r,I$r,CC,vTe,q$r,N$r,NJ,j$r,D$r,G$r,wC,FTe,O$r,V$r,jJ,X$r,z$r,Q$r,AC,TTe,W$r,H$r,DJ,U$r,J$r,Y$r,yC,TIe,Nc,LC,MTe,ox,K$r,ETe,Z$r,MIe,_r,rx,ekr,jc,okr,GJ,rkr,tkr,OJ,akr,nkr,skr,tx,lkr,CTe,ikr,dkr,ckr,Vt,ax,fkr,wTe,mkr,gkr,Dc,hkr,ATe,pkr,ukr,VJ,_kr,bkr,vkr,xC,Fkr,Xr,nx,Tkr,yTe,Mkr,Ekr,un,Ckr,LTe,wkr,Akr,xTe,ykr,Lkr,$Te,xkr,$kr,kkr,De,$C,kTe,Skr,Rkr,XJ,Bkr,Pkr,Ikr,kC,STe,qkr,Nkr,zJ,jkr,Dkr,Gkr,SC,RTe,Okr,Vkr,QJ,Xkr,zkr,Qkr,RC,BTe,Wkr,Hkr,WJ,Ukr,Jkr,Ykr,BC,PTe,Kkr,Zkr,HJ,eSr,oSr,rSr,PC,ITe,tSr,aSr,UJ,nSr,sSr,lSr,IC,qTe,iSr,dSr,JJ,cSr,fSr,mSr,qC,NTe,gSr,hSr,YJ,pSr,uSr,_Sr,NC,EIe,Gc,jC,jTe,sx,bSr,DTe,vSr,CIe,br,lx,FSr,Oc,TSr,KJ,MSr,ESr,ZJ,CSr,wSr,ASr,ix,ySr,GTe,LSr,xSr,$Sr,Xt,dx,kSr,OTe,SSr,RSr,Vc,BSr,VTe,PSr,ISr,eY,qSr,NSr,jSr,DC,DSr,zr,cx,GSr,XTe,OSr,VSr,_n,XSr,zTe,zSr,QSr,QTe,WSr,HSr,WTe,USr,JSr,YSr,Ge,GC,HTe,KSr,ZSr,oY,eRr,oRr,rRr,OC,UTe,tRr,aRr,rY,nRr,sRr,lRr,VC,JTe,iRr,dRr,tY,cRr,fRr,mRr,XC,YTe,gRr,hRr,aY,pRr,uRr,_Rr,zC,KTe,bRr,vRr,nY,FRr,TRr,MRr,QC,ZTe,ERr,CRr,sY,wRr,ARr,yRr,WC,e7e,LRr,xRr,lY,$Rr,kRr,SRr,HC,o7e,RRr,BRr,iY,PRr,IRr,qRr,UC,wIe,Xc,JC,r7e,fx,NRr,t7e,jRr,AIe,vr,mx,DRr,zc,GRr,dY,ORr,VRr,cY,XRr,zRr,QRr,gx,WRr,a7e,HRr,URr,JRr,zt,hx,YRr,n7e,KRr,ZRr,Qc,eBr,s7e,oBr,rBr,fY,tBr,aBr,nBr,YC,sBr,Qr,px,lBr,l7e,iBr,dBr,bn,cBr,i7e,fBr,mBr,d7e,gBr,hBr,c7e,pBr,uBr,_Br,f7e,KC,m7e,bBr,vBr,mY,FBr,TBr,MBr,ZC,yIe,Wc,e3,g7e,ux,EBr,h7e,CBr,LIe,Fr,_x,wBr,Hc,ABr,gY,yBr,LBr,hY,xBr,$Br,kBr,bx,SBr,p7e,RBr,BBr,PBr,Qt,vx,IBr,u7e,qBr,NBr,Uc,jBr,_7e,DBr,GBr,pY,OBr,VBr,XBr,o3,zBr,Wr,Fx,QBr,b7e,WBr,HBr,vn,UBr,v7e,JBr,YBr,F7e,KBr,ZBr,T7e,ePr,oPr,rPr,Tx,r3,M7e,tPr,aPr,uY,nPr,sPr,lPr,t3,E7e,iPr,dPr,_Y,cPr,fPr,mPr,a3,xIe,Jc,n3,C7e,Mx,gPr,w7e,hPr,$Ie,Tr,Ex,pPr,Yc,uPr,bY,_Pr,bPr,vY,vPr,FPr,TPr,Cx,MPr,A7e,EPr,CPr,wPr,Wt,wx,APr,y7e,yPr,LPr,Kc,xPr,L7e,$Pr,kPr,FY,SPr,RPr,BPr,s3,PPr,Hr,Ax,IPr,x7e,qPr,NPr,Fn,jPr,$7e,DPr,GPr,k7e,OPr,VPr,S7e,XPr,zPr,QPr,R7e,l3,B7e,WPr,HPr,TY,UPr,JPr,YPr,i3,kIe;return d=new ee({}),va=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),LA=new ee({}),xA=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),lf=new KPr({props:{warning:!0,$$slots:{default:[e3t]},$$scope:{ctx:L}}}),$A=new ee({}),kA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/configuration_auto.py#L566"}}),BA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/configuration_auto.py#L589"}}),sg=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[o3t]},$$scope:{ctx:L}}}),PA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/configuration_auto.py#L711"}}),IA=new ee({}),qA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/tokenization_auto.py#L377"}}),DA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16575/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/tokenization_auto.py#L391"}}),Ng=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[r3t]},$$scope:{ctx:L}}}),GA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/tokenization_auto.py#L587"}}),OA=new ee({}),VA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/feature_extraction_auto.py#L178"}}),QA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16575/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/feature_extraction_auto.py#L192"}}),mh=new KPr({props:{$$slots:{default:[t3t]},$$scope:{ctx:L}}}),gh=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[a3t]},$$scope:{ctx:L}}}),WA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/feature_extraction_auto.py#L319"}}),HA=new ee({}),UA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/processing_auto.py#L76"}}),KA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/processing_auto.py#L90"}}),$h=new KPr({props:{$$slots:{default:[n3t]},$$scope:{ctx:L}}}),kh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[s3t]},$$scope:{ctx:L}}}),ZA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/processing_auto.py#L243"}}),e0=new ee({}),o0=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/modeling_auto.py#L718"}}),t0=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16575/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (Cvt model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16575/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L389"}}),Bh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[l3t]},$$scope:{ctx:L}}}),a0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L417"}}),Eu=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[i3t]},$$scope:{ctx:L}}}),n0=new ee({}),s0=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/modeling_auto.py#L725"}}),i0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16575/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L389"}}),wu=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[d3t]},$$scope:{ctx:L}}}),d0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L417"}}),m_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[c3t]},$$scope:{ctx:L}}}),c0=new ee({}),f0=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/modeling_auto.py#L740"}}),g0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L389"}}),h_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[f3t]},$$scope:{ctx:L}}}),h0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L417"}}),Y_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[m3t]},$$scope:{ctx:L}}}),p0=new ee({}),u0=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/modeling_auto.py#L747"}}),b0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16575/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L389"}}),Z_=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[g3t]},$$scope:{ctx:L}}}),v0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L417"}}),I5=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[h3t]},$$scope:{ctx:L}}}),F0=new ee({}),T0=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/modeling_auto.py#L754"}}),E0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L389"}}),N5=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[p3t]},$$scope:{ctx:L}}}),C0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L417"}}),t1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[u3t]},$$scope:{ctx:L}}}),w0=new ee({}),A0=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/modeling_auto.py#L763"}}),L0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16575/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L389"}}),n1=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[_3t]},$$scope:{ctx:L}}}),x0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L417"}}),eb=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[b3t]},$$scope:{ctx:L}}}),$0=new ee({}),k0=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/modeling_auto.py#L797"}}),R0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16575/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L389"}}),rb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[v3t]},$$scope:{ctx:L}}}),B0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L417"}}),Sb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[F3t]},$$scope:{ctx:L}}}),P0=new ee({}),I0=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/modeling_auto.py#L804"}}),N0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L389"}}),Bb=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[T3t]},$$scope:{ctx:L}}}),j0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L417"}}),Gb=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[M3t]},$$scope:{ctx:L}}}),D0=new ee({}),G0=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/modeling_auto.py#L790"}}),V0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16575/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L389"}}),Vb=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[E3t]},$$scope:{ctx:L}}}),X0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L417"}}),C2=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[C3t]},$$scope:{ctx:L}}}),z0=new ee({}),Q0=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/modeling_auto.py#L772"}}),H0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16575/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L389"}}),A2=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[w3t]},$$scope:{ctx:L}}}),U0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L417"}}),gv=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[A3t]},$$scope:{ctx:L}}}),J0=new ee({}),Y0=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/modeling_auto.py#L779"}}),Z0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16575/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L389"}}),pv=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[y3t]},$$scope:{ctx:L}}}),ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L417"}}),bv=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[L3t]},$$scope:{ctx:L}}}),oy=new ee({}),ry=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/modeling_auto.py#L813"}}),ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16575/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (Cvt model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16575/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16575/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16575/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L389"}}),Fv=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[x3t]},$$scope:{ctx:L}}}),ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L417"}}),Bv=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[$3t]},$$scope:{ctx:L}}}),sy=new ee({}),ly=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/modeling_auto.py#L852"}}),dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16575/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L389"}}),Iv=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[k3t]},$$scope:{ctx:L}}}),cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L417"}}),jv=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[S3t]},$$scope:{ctx:L}}}),fy=new ee({}),my=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/modeling_auto.py#L859"}}),hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L389"}}),Gv=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[R3t]},$$scope:{ctx:L}}}),py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L417"}}),Yv=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[B3t]},$$scope:{ctx:L}}}),uy=new ee({}),_y=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/modeling_auto.py#L882"}}),vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L389"}}),Zv=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[P3t]},$$scope:{ctx:L}}}),Fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L417"}}),nF=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[I3t]},$$scope:{ctx:L}}}),Ty=new ee({}),My=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/modeling_auto.py#L866"}}),Cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L389"}}),lF=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[q3t]},$$scope:{ctx:L}}}),wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L417"}}),_F=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[N3t]},$$scope:{ctx:L}}}),Ay=new ee({}),yy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/modeling_auto.py#L873"}}),xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16575/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L389"}}),vF=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[j3t]},$$scope:{ctx:L}}}),$y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L417"}}),EF=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[D3t]},$$scope:{ctx:L}}}),Sy=new ee({}),Ry=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/modeling_auto.py#L891"}}),Py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L389"}}),wF=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[G3t]},$$scope:{ctx:L}}}),Iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L417"}}),kF=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[O3t]},$$scope:{ctx:L}}}),qy=new ee({}),Ny=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/modeling_auto.py#L898"}}),Dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16575/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L389"}}),RF=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[V3t]},$$scope:{ctx:L}}}),Gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L417"}}),NF=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[X3t]},$$scope:{ctx:L}}}),Oy=new ee({}),Vy=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/modeling_auto.py#L845"}}),zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16575/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L389"}}),DF=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[z3t]},$$scope:{ctx:L}}}),Qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L417"}}),XF=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[Q3t]},$$scope:{ctx:L}}}),Hy=new ee({}),Uy=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/modeling_auto.py#L820"}}),Yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16575/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L389"}}),QF=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[W3t]},$$scope:{ctx:L}}}),Ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L417"}}),UF=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[H3t]},$$scope:{ctx:L}}}),Zy=new ee({}),eL=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/modeling_auto.py#L827"}}),rL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16575/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L389"}}),YF=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[U3t]},$$scope:{ctx:L}}}),tL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L417"}}),t6=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[J3t]},$$scope:{ctx:L}}}),aL=new ee({}),nL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/modeling_auto.py#L836"}}),lL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16575/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L389"}}),n6=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[Y3t]},$$scope:{ctx:L}}}),iL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L417"}}),i6=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[K3t]},$$scope:{ctx:L}}}),dL=new ee({}),cL=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/modeling_tf_auto.py#L383"}}),mL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16575/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16575/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L389"}}),c6=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[Z3t]},$$scope:{ctx:L}}}),gL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L417"}}),oT=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[ewt]},$$scope:{ctx:L}}}),hL=new ee({}),pL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/modeling_tf_auto.py#L390"}}),_L=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16575/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L389"}}),tT=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[owt]},$$scope:{ctx:L}}}),bL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L417"}}),yT=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[rwt]},$$scope:{ctx:L}}}),vL=new ee({}),FL=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/modeling_tf_auto.py#L405"}}),ML=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L389"}}),xT=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[twt]},$$scope:{ctx:L}}}),EL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L417"}}),OT=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[awt]},$$scope:{ctx:L}}}),CL=new ee({}),wL=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/modeling_tf_auto.py#L412"}}),yL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16575/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L389"}}),XT=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[nwt]},$$scope:{ctx:L}}}),LL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L417"}}),HT=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[swt]},$$scope:{ctx:L}}}),xL=new ee({}),$L=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),SL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16575/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L389"}}),JT=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[lwt]},$$scope:{ctx:L}}}),RL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L417"}}),_7=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[iwt]},$$scope:{ctx:L}}}),BL=new ee({}),PL=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),qL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L389"}}),v7=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[dwt]},$$scope:{ctx:L}}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L417"}}),$7=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[cwt]},$$scope:{ctx:L}}}),jL=new ee({}),DL=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),OL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16575/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L389"}}),S7=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[fwt]},$$scope:{ctx:L}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L417"}}),nM=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[mwt]},$$scope:{ctx:L}}}),XL=new ee({}),zL=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),WL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16575/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L389"}}),lM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[gwt]},$$scope:{ctx:L}}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L417"}}),wM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[hwt]},$$scope:{ctx:L}}}),UL=new ee({}),JL=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),KL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16575/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L389"}}),yM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[pwt]},$$scope:{ctx:L}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L417"}}),xM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[uwt]},$$scope:{ctx:L}}}),e8=new ee({}),o8=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),t8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16575/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L389"}}),kM=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[_wt]},$$scope:{ctx:L}}}),a8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L417"}}),KM=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[bwt]},$$scope:{ctx:L}}}),n8=new ee({}),s8=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/modeling_tf_auto.py#L453"}}),i8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16575/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L389"}}),e4=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[vwt]},$$scope:{ctx:L}}}),d8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L417"}}),T4=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Fwt]},$$scope:{ctx:L}}}),c8=new ee({}),f8=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/modeling_tf_auto.py#L421"}}),g8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16575/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L389"}}),E4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[Twt]},$$scope:{ctx:L}}}),h8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L417"}}),w4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Mwt]},$$scope:{ctx:L}}}),p8=new ee({}),u8=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),b8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16575/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L389"}}),y4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Ewt]},$$scope:{ctx:L}}}),v8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L417"}}),x4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Cwt]},$$scope:{ctx:L}}}),F8=new ee({}),T8=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),E8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16575/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L389"}}),k4=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[wwt]},$$scope:{ctx:L}}}),C8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L417"}}),tE=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[Awt]},$$scope:{ctx:L}}}),w8=new ee({}),A8=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),L8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L389"}}),nE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[ywt]},$$scope:{ctx:L}}}),x8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L417"}}),pE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Lwt]},$$scope:{ctx:L}}}),$8=new ee({}),k8=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),R8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16575/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L389"}}),_E=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[xwt]},$$scope:{ctx:L}}}),B8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L417"}}),$E=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[$wt]},$$scope:{ctx:L}}}),P8=new ee({}),I8=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),N8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16575/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L389"}}),SE=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[kwt]},$$scope:{ctx:L}}}),j8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L417"}}),VE=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Swt]},$$scope:{ctx:L}}}),D8=new ee({}),G8=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),V8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L389"}}),zE=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Rwt]},$$scope:{ctx:L}}}),X8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L417"}}),oC=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Bwt]},$$scope:{ctx:L}}}),z8=new ee({}),Q8=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),H8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16575/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L389"}}),tC=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Pwt]},$$scope:{ctx:L}}}),U8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L417"}}),hC=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Iwt]},$$scope:{ctx:L}}}),J8=new ee({}),Y8=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),Z8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16575/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L389"}}),uC=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[qwt]},$$scope:{ctx:L}}}),ex=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L417"}}),yC=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Nwt]},$$scope:{ctx:L}}}),ox=new ee({}),rx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),ax=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16575/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L389"}}),xC=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[jwt]},$$scope:{ctx:L}}}),nx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L417"}}),NC=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Dwt]},$$scope:{ctx:L}}}),sx=new ee({}),lx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),dx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16575/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L389"}}),DC=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Gwt]},$$scope:{ctx:L}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L417"}}),UC=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Owt]},$$scope:{ctx:L}}}),fx=new ee({}),mx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),hx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L389"}}),YC=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Vwt]},$$scope:{ctx:L}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L417"}}),ZC=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Xwt]},$$scope:{ctx:L}}}),ux=new ee({}),_x=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),vx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16575/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16575/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L389"}}),o3=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[zwt]},$$scope:{ctx:L}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L417"}}),a3=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Qwt]},$$scope:{ctx:L}}}),Mx=new ee({}),Ex=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),wx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16575/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16575/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L389"}}),s3=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[Wwt]},$$scope:{ctx:L}}}),Ax=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16575/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16575/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16575/src/transformers/models/auto/auto_factory.py#L417"}}),i3=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Hwt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),oi=o("Auto Classes"),rf=l(),Kr=a("p"),ri=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ti=a("code"),CA=o("from_pretrained()"),tf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qe=l(),Xe=a("p"),ai=o("Instantiating one of "),Mn=a("a"),wA=o("AutoConfig"),En=o(", "),Cn=a("a"),AA=o("AutoModel"),ni=o(`, and
`),wn=a("a"),yA=o("AutoTokenizer"),si=o(" will directly create a class of the relevant architecture. For instance"),af=l(),F(va.$$.fragment),ze=l(),Ae=a("p"),j9=o("will create a model that is an instance of "),li=a("a"),D9=o("BertModel"),G9=o("."),Eo=l(),Fa=a("p"),O9=o("There is one class of "),nf=a("code"),V9=o("AutoModel"),INe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),$Be=l(),ii=a("h2"),sf=a("a"),gZ=a("span"),F(LA.$$.fragment),qNe=l(),hZ=a("span"),NNe=o("Extending the Auto Classes"),kBe=l(),An=a("p"),jNe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),pZ=a("code"),DNe=o("NewModel"),GNe=o(", make sure you have a "),uZ=a("code"),ONe=o("NewModelConfig"),VNe=o(` then you can add those to the auto
classes like this:`),SBe=l(),F(xA.$$.fragment),RBe=l(),X9=a("p"),XNe=o("You will then be able to use the auto classes like you would usually do!"),BBe=l(),F(lf.$$.fragment),PBe=l(),di=a("h2"),df=a("a"),_Z=a("span"),F($A.$$.fragment),zNe=l(),bZ=a("span"),QNe=o("AutoConfig"),IBe=l(),Co=a("div"),F(kA.$$.fragment),WNe=l(),SA=a("p"),HNe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),z9=a("a"),UNe=o("from_pretrained()"),JNe=o(" class method."),YNe=l(),RA=a("p"),KNe=o("This class cannot be instantiated directly using "),vZ=a("code"),ZNe=o("__init__()"),eje=o(" (throws an error)."),oje=l(),Mr=a("div"),F(BA.$$.fragment),rje=l(),FZ=a("p"),tje=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),aje=l(),ci=a("p"),nje=o("The configuration class to instantiate is selected based on the "),TZ=a("code"),sje=o("model_type"),lje=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),MZ=a("code"),ije=o("pretrained_model_name_or_path"),dje=o(":"),cje=l(),A=a("ul"),cf=a("li"),EZ=a("strong"),fje=o("albert"),mje=o(" \u2014 "),Q9=a("a"),gje=o("AlbertConfig"),hje=o(" (ALBERT model)"),pje=l(),ff=a("li"),CZ=a("strong"),uje=o("bart"),_je=o(" \u2014 "),W9=a("a"),bje=o("BartConfig"),vje=o(" (BART model)"),Fje=l(),mf=a("li"),wZ=a("strong"),Tje=o("beit"),Mje=o(" \u2014 "),H9=a("a"),Eje=o("BeitConfig"),Cje=o(" (BEiT model)"),wje=l(),gf=a("li"),AZ=a("strong"),Aje=o("bert"),yje=o(" \u2014 "),U9=a("a"),Lje=o("BertConfig"),xje=o(" (BERT model)"),$je=l(),hf=a("li"),yZ=a("strong"),kje=o("bert-generation"),Sje=o(" \u2014 "),J9=a("a"),Rje=o("BertGenerationConfig"),Bje=o(" (Bert Generation model)"),Pje=l(),pf=a("li"),LZ=a("strong"),Ije=o("big_bird"),qje=o(" \u2014 "),Y9=a("a"),Nje=o("BigBirdConfig"),jje=o(" (BigBird model)"),Dje=l(),uf=a("li"),xZ=a("strong"),Gje=o("bigbird_pegasus"),Oje=o(" \u2014 "),K9=a("a"),Vje=o("BigBirdPegasusConfig"),Xje=o(" (BigBirdPegasus model)"),zje=l(),_f=a("li"),$Z=a("strong"),Qje=o("blenderbot"),Wje=o(" \u2014 "),Z9=a("a"),Hje=o("BlenderbotConfig"),Uje=o(" (Blenderbot model)"),Jje=l(),bf=a("li"),kZ=a("strong"),Yje=o("blenderbot-small"),Kje=o(" \u2014 "),e$=a("a"),Zje=o("BlenderbotSmallConfig"),eDe=o(" (BlenderbotSmall model)"),oDe=l(),vf=a("li"),SZ=a("strong"),rDe=o("camembert"),tDe=o(" \u2014 "),o$=a("a"),aDe=o("CamembertConfig"),nDe=o(" (CamemBERT model)"),sDe=l(),Ff=a("li"),RZ=a("strong"),lDe=o("canine"),iDe=o(" \u2014 "),r$=a("a"),dDe=o("CanineConfig"),cDe=o(" (Canine model)"),fDe=l(),Tf=a("li"),BZ=a("strong"),mDe=o("clip"),gDe=o(" \u2014 "),t$=a("a"),hDe=o("CLIPConfig"),pDe=o(" (CLIP model)"),uDe=l(),Mf=a("li"),PZ=a("strong"),_De=o("convbert"),bDe=o(" \u2014 "),a$=a("a"),vDe=o("ConvBertConfig"),FDe=o(" (ConvBERT model)"),TDe=l(),Ef=a("li"),IZ=a("strong"),MDe=o("convnext"),EDe=o(" \u2014 "),n$=a("a"),CDe=o("ConvNextConfig"),wDe=o(" (ConvNext model)"),ADe=l(),Cf=a("li"),qZ=a("strong"),yDe=o("ctrl"),LDe=o(" \u2014 "),s$=a("a"),xDe=o("CTRLConfig"),$De=o(" (CTRL model)"),kDe=l(),wf=a("li"),NZ=a("strong"),SDe=o("cvt"),RDe=o(" \u2014 "),l$=a("a"),BDe=o("CvtConfig"),PDe=o(" (Cvt model)"),IDe=l(),Af=a("li"),jZ=a("strong"),qDe=o("data2vec-audio"),NDe=o(" \u2014 "),i$=a("a"),jDe=o("Data2VecAudioConfig"),DDe=o(" (Data2VecAudio model)"),GDe=l(),yf=a("li"),DZ=a("strong"),ODe=o("data2vec-text"),VDe=o(" \u2014 "),d$=a("a"),XDe=o("Data2VecTextConfig"),zDe=o(" (Data2VecText model)"),QDe=l(),Lf=a("li"),GZ=a("strong"),WDe=o("data2vec-vision"),HDe=o(" \u2014 "),c$=a("a"),UDe=o("Data2VecVisionConfig"),JDe=o(" (Data2VecVision model)"),YDe=l(),xf=a("li"),OZ=a("strong"),KDe=o("deberta"),ZDe=o(" \u2014 "),f$=a("a"),eGe=o("DebertaConfig"),oGe=o(" (DeBERTa model)"),rGe=l(),$f=a("li"),VZ=a("strong"),tGe=o("deberta-v2"),aGe=o(" \u2014 "),m$=a("a"),nGe=o("DebertaV2Config"),sGe=o(" (DeBERTa-v2 model)"),lGe=l(),kf=a("li"),XZ=a("strong"),iGe=o("decision_transformer"),dGe=o(" \u2014 "),g$=a("a"),cGe=o("DecisionTransformerConfig"),fGe=o(" (Decision Transformer model)"),mGe=l(),Sf=a("li"),zZ=a("strong"),gGe=o("deit"),hGe=o(" \u2014 "),h$=a("a"),pGe=o("DeiTConfig"),uGe=o(" (DeiT model)"),_Ge=l(),Rf=a("li"),QZ=a("strong"),bGe=o("detr"),vGe=o(" \u2014 "),p$=a("a"),FGe=o("DetrConfig"),TGe=o(" (DETR model)"),MGe=l(),Bf=a("li"),WZ=a("strong"),EGe=o("distilbert"),CGe=o(" \u2014 "),u$=a("a"),wGe=o("DistilBertConfig"),AGe=o(" (DistilBERT model)"),yGe=l(),Pf=a("li"),HZ=a("strong"),LGe=o("dpr"),xGe=o(" \u2014 "),_$=a("a"),$Ge=o("DPRConfig"),kGe=o(" (DPR model)"),SGe=l(),If=a("li"),UZ=a("strong"),RGe=o("dpt"),BGe=o(" \u2014 "),b$=a("a"),PGe=o("DPTConfig"),IGe=o(" (DPT model)"),qGe=l(),qf=a("li"),JZ=a("strong"),NGe=o("electra"),jGe=o(" \u2014 "),v$=a("a"),DGe=o("ElectraConfig"),GGe=o(" (ELECTRA model)"),OGe=l(),Nf=a("li"),YZ=a("strong"),VGe=o("encoder-decoder"),XGe=o(" \u2014 "),F$=a("a"),zGe=o("EncoderDecoderConfig"),QGe=o(" (Encoder decoder model)"),WGe=l(),jf=a("li"),KZ=a("strong"),HGe=o("flaubert"),UGe=o(" \u2014 "),T$=a("a"),JGe=o("FlaubertConfig"),YGe=o(" (FlauBERT model)"),KGe=l(),Df=a("li"),ZZ=a("strong"),ZGe=o("fnet"),eOe=o(" \u2014 "),M$=a("a"),oOe=o("FNetConfig"),rOe=o(" (FNet model)"),tOe=l(),Gf=a("li"),eee=a("strong"),aOe=o("fsmt"),nOe=o(" \u2014 "),E$=a("a"),sOe=o("FSMTConfig"),lOe=o(" (FairSeq Machine-Translation model)"),iOe=l(),Of=a("li"),oee=a("strong"),dOe=o("funnel"),cOe=o(" \u2014 "),C$=a("a"),fOe=o("FunnelConfig"),mOe=o(" (Funnel Transformer model)"),gOe=l(),Vf=a("li"),ree=a("strong"),hOe=o("glpn"),pOe=o(" \u2014 "),w$=a("a"),uOe=o("GLPNConfig"),_Oe=o(" (GLPN model)"),bOe=l(),Xf=a("li"),tee=a("strong"),vOe=o("gpt2"),FOe=o(" \u2014 "),A$=a("a"),TOe=o("GPT2Config"),MOe=o(" (OpenAI GPT-2 model)"),EOe=l(),zf=a("li"),aee=a("strong"),COe=o("gpt_neo"),wOe=o(" \u2014 "),y$=a("a"),AOe=o("GPTNeoConfig"),yOe=o(" (GPT Neo model)"),LOe=l(),Qf=a("li"),nee=a("strong"),xOe=o("gptj"),$Oe=o(" \u2014 "),L$=a("a"),kOe=o("GPTJConfig"),SOe=o(" (GPT-J model)"),ROe=l(),Wf=a("li"),see=a("strong"),BOe=o("hubert"),POe=o(" \u2014 "),x$=a("a"),IOe=o("HubertConfig"),qOe=o(" (Hubert model)"),NOe=l(),Hf=a("li"),lee=a("strong"),jOe=o("ibert"),DOe=o(" \u2014 "),$$=a("a"),GOe=o("IBertConfig"),OOe=o(" (I-BERT model)"),VOe=l(),Uf=a("li"),iee=a("strong"),XOe=o("imagegpt"),zOe=o(" \u2014 "),k$=a("a"),QOe=o("ImageGPTConfig"),WOe=o(" (ImageGPT model)"),HOe=l(),Jf=a("li"),dee=a("strong"),UOe=o("layoutlm"),JOe=o(" \u2014 "),S$=a("a"),YOe=o("LayoutLMConfig"),KOe=o(" (LayoutLM model)"),ZOe=l(),Yf=a("li"),cee=a("strong"),eVe=o("layoutlmv2"),oVe=o(" \u2014 "),R$=a("a"),rVe=o("LayoutLMv2Config"),tVe=o(" (LayoutLMv2 model)"),aVe=l(),Kf=a("li"),fee=a("strong"),nVe=o("led"),sVe=o(" \u2014 "),B$=a("a"),lVe=o("LEDConfig"),iVe=o(" (LED model)"),dVe=l(),Zf=a("li"),mee=a("strong"),cVe=o("longformer"),fVe=o(" \u2014 "),P$=a("a"),mVe=o("LongformerConfig"),gVe=o(" (Longformer model)"),hVe=l(),em=a("li"),gee=a("strong"),pVe=o("luke"),uVe=o(" \u2014 "),I$=a("a"),_Ve=o("LukeConfig"),bVe=o(" (LUKE model)"),vVe=l(),om=a("li"),hee=a("strong"),FVe=o("lxmert"),TVe=o(" \u2014 "),q$=a("a"),MVe=o("LxmertConfig"),EVe=o(" (LXMERT model)"),CVe=l(),rm=a("li"),pee=a("strong"),wVe=o("m2m_100"),AVe=o(" \u2014 "),N$=a("a"),yVe=o("M2M100Config"),LVe=o(" (M2M100 model)"),xVe=l(),tm=a("li"),uee=a("strong"),$Ve=o("marian"),kVe=o(" \u2014 "),j$=a("a"),SVe=o("MarianConfig"),RVe=o(" (Marian model)"),BVe=l(),am=a("li"),_ee=a("strong"),PVe=o("maskformer"),IVe=o(" \u2014 "),D$=a("a"),qVe=o("MaskFormerConfig"),NVe=o(" (MaskFormer model)"),jVe=l(),nm=a("li"),bee=a("strong"),DVe=o("mbart"),GVe=o(" \u2014 "),G$=a("a"),OVe=o("MBartConfig"),VVe=o(" (mBART model)"),XVe=l(),sm=a("li"),vee=a("strong"),zVe=o("megatron-bert"),QVe=o(" \u2014 "),O$=a("a"),WVe=o("MegatronBertConfig"),HVe=o(" (MegatronBert model)"),UVe=l(),lm=a("li"),Fee=a("strong"),JVe=o("mobilebert"),YVe=o(" \u2014 "),V$=a("a"),KVe=o("MobileBertConfig"),ZVe=o(" (MobileBERT model)"),eXe=l(),im=a("li"),Tee=a("strong"),oXe=o("mpnet"),rXe=o(" \u2014 "),X$=a("a"),tXe=o("MPNetConfig"),aXe=o(" (MPNet model)"),nXe=l(),dm=a("li"),Mee=a("strong"),sXe=o("mt5"),lXe=o(" \u2014 "),z$=a("a"),iXe=o("MT5Config"),dXe=o(" (mT5 model)"),cXe=l(),cm=a("li"),Eee=a("strong"),fXe=o("nystromformer"),mXe=o(" \u2014 "),Q$=a("a"),gXe=o("NystromformerConfig"),hXe=o(" (Nystromformer model)"),pXe=l(),fm=a("li"),Cee=a("strong"),uXe=o("openai-gpt"),_Xe=o(" \u2014 "),W$=a("a"),bXe=o("OpenAIGPTConfig"),vXe=o(" (OpenAI GPT model)"),FXe=l(),mm=a("li"),wee=a("strong"),TXe=o("pegasus"),MXe=o(" \u2014 "),H$=a("a"),EXe=o("PegasusConfig"),CXe=o(" (Pegasus model)"),wXe=l(),gm=a("li"),Aee=a("strong"),AXe=o("perceiver"),yXe=o(" \u2014 "),U$=a("a"),LXe=o("PerceiverConfig"),xXe=o(" (Perceiver model)"),$Xe=l(),hm=a("li"),yee=a("strong"),kXe=o("plbart"),SXe=o(" \u2014 "),J$=a("a"),RXe=o("PLBartConfig"),BXe=o(" (PLBart model)"),PXe=l(),pm=a("li"),Lee=a("strong"),IXe=o("poolformer"),qXe=o(" \u2014 "),Y$=a("a"),NXe=o("PoolFormerConfig"),jXe=o(" (PoolFormer model)"),DXe=l(),um=a("li"),xee=a("strong"),GXe=o("prophetnet"),OXe=o(" \u2014 "),K$=a("a"),VXe=o("ProphetNetConfig"),XXe=o(" (ProphetNet model)"),zXe=l(),_m=a("li"),$ee=a("strong"),QXe=o("qdqbert"),WXe=o(" \u2014 "),Z$=a("a"),HXe=o("QDQBertConfig"),UXe=o(" (QDQBert model)"),JXe=l(),bm=a("li"),kee=a("strong"),YXe=o("rag"),KXe=o(" \u2014 "),ek=a("a"),ZXe=o("RagConfig"),eze=o(" (RAG model)"),oze=l(),vm=a("li"),See=a("strong"),rze=o("realm"),tze=o(" \u2014 "),ok=a("a"),aze=o("RealmConfig"),nze=o(" (Realm model)"),sze=l(),Fm=a("li"),Ree=a("strong"),lze=o("reformer"),ize=o(" \u2014 "),rk=a("a"),dze=o("ReformerConfig"),cze=o(" (Reformer model)"),fze=l(),Tm=a("li"),Bee=a("strong"),mze=o("regnet"),gze=o(" \u2014 "),tk=a("a"),hze=o("RegNetConfig"),pze=o(" (RegNet model)"),uze=l(),Mm=a("li"),Pee=a("strong"),_ze=o("rembert"),bze=o(" \u2014 "),ak=a("a"),vze=o("RemBertConfig"),Fze=o(" (RemBERT model)"),Tze=l(),Em=a("li"),Iee=a("strong"),Mze=o("resnet"),Eze=o(" \u2014 "),nk=a("a"),Cze=o("ResNetConfig"),wze=o(" (ResNet model)"),Aze=l(),Cm=a("li"),qee=a("strong"),yze=o("retribert"),Lze=o(" \u2014 "),sk=a("a"),xze=o("RetriBertConfig"),$ze=o(" (RetriBERT model)"),kze=l(),wm=a("li"),Nee=a("strong"),Sze=o("roberta"),Rze=o(" \u2014 "),lk=a("a"),Bze=o("RobertaConfig"),Pze=o(" (RoBERTa model)"),Ize=l(),Am=a("li"),jee=a("strong"),qze=o("roformer"),Nze=o(" \u2014 "),ik=a("a"),jze=o("RoFormerConfig"),Dze=o(" (RoFormer model)"),Gze=l(),ym=a("li"),Dee=a("strong"),Oze=o("segformer"),Vze=o(" \u2014 "),dk=a("a"),Xze=o("SegformerConfig"),zze=o(" (SegFormer model)"),Qze=l(),Lm=a("li"),Gee=a("strong"),Wze=o("sew"),Hze=o(" \u2014 "),ck=a("a"),Uze=o("SEWConfig"),Jze=o(" (SEW model)"),Yze=l(),xm=a("li"),Oee=a("strong"),Kze=o("sew-d"),Zze=o(" \u2014 "),fk=a("a"),eQe=o("SEWDConfig"),oQe=o(" (SEW-D model)"),rQe=l(),$m=a("li"),Vee=a("strong"),tQe=o("speech-encoder-decoder"),aQe=o(" \u2014 "),mk=a("a"),nQe=o("SpeechEncoderDecoderConfig"),sQe=o(" (Speech Encoder decoder model)"),lQe=l(),km=a("li"),Xee=a("strong"),iQe=o("speech_to_text"),dQe=o(" \u2014 "),gk=a("a"),cQe=o("Speech2TextConfig"),fQe=o(" (Speech2Text model)"),mQe=l(),Sm=a("li"),zee=a("strong"),gQe=o("speech_to_text_2"),hQe=o(" \u2014 "),hk=a("a"),pQe=o("Speech2Text2Config"),uQe=o(" (Speech2Text2 model)"),_Qe=l(),Rm=a("li"),Qee=a("strong"),bQe=o("splinter"),vQe=o(" \u2014 "),pk=a("a"),FQe=o("SplinterConfig"),TQe=o(" (Splinter model)"),MQe=l(),Bm=a("li"),Wee=a("strong"),EQe=o("squeezebert"),CQe=o(" \u2014 "),uk=a("a"),wQe=o("SqueezeBertConfig"),AQe=o(" (SqueezeBERT model)"),yQe=l(),Pm=a("li"),Hee=a("strong"),LQe=o("swin"),xQe=o(" \u2014 "),_k=a("a"),$Qe=o("SwinConfig"),kQe=o(" (Swin model)"),SQe=l(),Im=a("li"),Uee=a("strong"),RQe=o("t5"),BQe=o(" \u2014 "),bk=a("a"),PQe=o("T5Config"),IQe=o(" (T5 model)"),qQe=l(),qm=a("li"),Jee=a("strong"),NQe=o("tapas"),jQe=o(" \u2014 "),vk=a("a"),DQe=o("TapasConfig"),GQe=o(" (TAPAS model)"),OQe=l(),Nm=a("li"),Yee=a("strong"),VQe=o("tapex"),XQe=o(" \u2014 "),Fk=a("a"),zQe=o("BartConfig"),QQe=o(" (TAPEX model)"),WQe=l(),jm=a("li"),Kee=a("strong"),HQe=o("transfo-xl"),UQe=o(" \u2014 "),Tk=a("a"),JQe=o("TransfoXLConfig"),YQe=o(" (Transformer-XL model)"),KQe=l(),Dm=a("li"),Zee=a("strong"),ZQe=o("trocr"),eWe=o(" \u2014 "),Mk=a("a"),oWe=o("TrOCRConfig"),rWe=o(" (TrOCR model)"),tWe=l(),Gm=a("li"),eoe=a("strong"),aWe=o("unispeech"),nWe=o(" \u2014 "),Ek=a("a"),sWe=o("UniSpeechConfig"),lWe=o(" (UniSpeech model)"),iWe=l(),Om=a("li"),ooe=a("strong"),dWe=o("unispeech-sat"),cWe=o(" \u2014 "),Ck=a("a"),fWe=o("UniSpeechSatConfig"),mWe=o(" (UniSpeechSat model)"),gWe=l(),Vm=a("li"),roe=a("strong"),hWe=o("van"),pWe=o(" \u2014 "),wk=a("a"),uWe=o("VanConfig"),_We=o(" (VAN model)"),bWe=l(),Xm=a("li"),toe=a("strong"),vWe=o("vilt"),FWe=o(" \u2014 "),Ak=a("a"),TWe=o("ViltConfig"),MWe=o(" (ViLT model)"),EWe=l(),zm=a("li"),aoe=a("strong"),CWe=o("vision-encoder-decoder"),wWe=o(" \u2014 "),yk=a("a"),AWe=o("VisionEncoderDecoderConfig"),yWe=o(" (Vision Encoder decoder model)"),LWe=l(),Qm=a("li"),noe=a("strong"),xWe=o("vision-text-dual-encoder"),$We=o(" \u2014 "),Lk=a("a"),kWe=o("VisionTextDualEncoderConfig"),SWe=o(" (VisionTextDualEncoder model)"),RWe=l(),Wm=a("li"),soe=a("strong"),BWe=o("visual_bert"),PWe=o(" \u2014 "),xk=a("a"),IWe=o("VisualBertConfig"),qWe=o(" (VisualBert model)"),NWe=l(),Hm=a("li"),loe=a("strong"),jWe=o("vit"),DWe=o(" \u2014 "),$k=a("a"),GWe=o("ViTConfig"),OWe=o(" (ViT model)"),VWe=l(),Um=a("li"),ioe=a("strong"),XWe=o("vit_mae"),zWe=o(" \u2014 "),kk=a("a"),QWe=o("ViTMAEConfig"),WWe=o(" (ViTMAE model)"),HWe=l(),Jm=a("li"),doe=a("strong"),UWe=o("wav2vec2"),JWe=o(" \u2014 "),Sk=a("a"),YWe=o("Wav2Vec2Config"),KWe=o(" (Wav2Vec2 model)"),ZWe=l(),Ym=a("li"),coe=a("strong"),eHe=o("wavlm"),oHe=o(" \u2014 "),Rk=a("a"),rHe=o("WavLMConfig"),tHe=o(" (WavLM model)"),aHe=l(),Km=a("li"),foe=a("strong"),nHe=o("xglm"),sHe=o(" \u2014 "),Bk=a("a"),lHe=o("XGLMConfig"),iHe=o(" (XGLM model)"),dHe=l(),Zm=a("li"),moe=a("strong"),cHe=o("xlm"),fHe=o(" \u2014 "),Pk=a("a"),mHe=o("XLMConfig"),gHe=o(" (XLM model)"),hHe=l(),eg=a("li"),goe=a("strong"),pHe=o("xlm-prophetnet"),uHe=o(" \u2014 "),Ik=a("a"),_He=o("XLMProphetNetConfig"),bHe=o(" (XLMProphetNet model)"),vHe=l(),og=a("li"),hoe=a("strong"),FHe=o("xlm-roberta"),THe=o(" \u2014 "),qk=a("a"),MHe=o("XLMRobertaConfig"),EHe=o(" (XLM-RoBERTa model)"),CHe=l(),rg=a("li"),poe=a("strong"),wHe=o("xlm-roberta-xl"),AHe=o(" \u2014 "),Nk=a("a"),yHe=o("XLMRobertaXLConfig"),LHe=o(" (XLM-RoBERTa-XL model)"),xHe=l(),tg=a("li"),uoe=a("strong"),$He=o("xlnet"),kHe=o(" \u2014 "),jk=a("a"),SHe=o("XLNetConfig"),RHe=o(" (XLNet model)"),BHe=l(),ag=a("li"),_oe=a("strong"),PHe=o("yolos"),IHe=o(" \u2014 "),Dk=a("a"),qHe=o("YolosConfig"),NHe=o(" (YOLOS model)"),jHe=l(),ng=a("li"),boe=a("strong"),DHe=o("yoso"),GHe=o(" \u2014 "),Gk=a("a"),OHe=o("YosoConfig"),VHe=o(" (YOSO model)"),XHe=l(),F(sg.$$.fragment),zHe=l(),lg=a("div"),F(PA.$$.fragment),QHe=l(),voe=a("p"),WHe=o("Register a new configuration for this class."),qBe=l(),fi=a("h2"),ig=a("a"),Foe=a("span"),F(IA.$$.fragment),HHe=l(),Toe=a("span"),UHe=o("AutoTokenizer"),NBe=l(),wo=a("div"),F(qA.$$.fragment),JHe=l(),NA=a("p"),YHe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Ok=a("a"),KHe=o("AutoTokenizer.from_pretrained()"),ZHe=o(" class method."),eUe=l(),jA=a("p"),oUe=o("This class cannot be instantiated directly using "),Moe=a("code"),rUe=o("__init__()"),tUe=o(" (throws an error)."),aUe=l(),Er=a("div"),F(DA.$$.fragment),nUe=l(),Eoe=a("p"),sUe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),lUe=l(),Ta=a("p"),iUe=o("The tokenizer class to instantiate is selected based on the "),Coe=a("code"),dUe=o("model_type"),cUe=o(` property of the config object (either
passed as an argument or loaded from `),woe=a("code"),fUe=o("pretrained_model_name_or_path"),mUe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aoe=a("code"),gUe=o("pretrained_model_name_or_path"),hUe=o(":"),pUe=l(),k=a("ul"),yn=a("li"),yoe=a("strong"),uUe=o("albert"),_Ue=o(" \u2014 "),Vk=a("a"),bUe=o("AlbertTokenizer"),vUe=o(" or "),Xk=a("a"),FUe=o("AlbertTokenizerFast"),TUe=o(" (ALBERT model)"),MUe=l(),Ln=a("li"),Loe=a("strong"),EUe=o("bart"),CUe=o(" \u2014 "),zk=a("a"),wUe=o("BartTokenizer"),AUe=o(" or "),Qk=a("a"),yUe=o("BartTokenizerFast"),LUe=o(" (BART model)"),xUe=l(),xn=a("li"),xoe=a("strong"),$Ue=o("barthez"),kUe=o(" \u2014 "),Wk=a("a"),SUe=o("BarthezTokenizer"),RUe=o(" or "),Hk=a("a"),BUe=o("BarthezTokenizerFast"),PUe=o(" (BARThez model)"),IUe=l(),dg=a("li"),$oe=a("strong"),qUe=o("bartpho"),NUe=o(" \u2014 "),Uk=a("a"),jUe=o("BartphoTokenizer"),DUe=o(" (BARTpho model)"),GUe=l(),$n=a("li"),koe=a("strong"),OUe=o("bert"),VUe=o(" \u2014 "),Jk=a("a"),XUe=o("BertTokenizer"),zUe=o(" or "),Yk=a("a"),QUe=o("BertTokenizerFast"),WUe=o(" (BERT model)"),HUe=l(),cg=a("li"),Soe=a("strong"),UUe=o("bert-generation"),JUe=o(" \u2014 "),Kk=a("a"),YUe=o("BertGenerationTokenizer"),KUe=o(" (Bert Generation model)"),ZUe=l(),fg=a("li"),Roe=a("strong"),eJe=o("bert-japanese"),oJe=o(" \u2014 "),Zk=a("a"),rJe=o("BertJapaneseTokenizer"),tJe=o(" (BertJapanese model)"),aJe=l(),mg=a("li"),Boe=a("strong"),nJe=o("bertweet"),sJe=o(" \u2014 "),eS=a("a"),lJe=o("BertweetTokenizer"),iJe=o(" (Bertweet model)"),dJe=l(),kn=a("li"),Poe=a("strong"),cJe=o("big_bird"),fJe=o(" \u2014 "),oS=a("a"),mJe=o("BigBirdTokenizer"),gJe=o(" or "),rS=a("a"),hJe=o("BigBirdTokenizerFast"),pJe=o(" (BigBird model)"),uJe=l(),Sn=a("li"),Ioe=a("strong"),_Je=o("bigbird_pegasus"),bJe=o(" \u2014 "),tS=a("a"),vJe=o("PegasusTokenizer"),FJe=o(" or "),aS=a("a"),TJe=o("PegasusTokenizerFast"),MJe=o(" (BigBirdPegasus model)"),EJe=l(),Rn=a("li"),qoe=a("strong"),CJe=o("blenderbot"),wJe=o(" \u2014 "),nS=a("a"),AJe=o("BlenderbotTokenizer"),yJe=o(" or "),sS=a("a"),LJe=o("BlenderbotTokenizerFast"),xJe=o(" (Blenderbot model)"),$Je=l(),gg=a("li"),Noe=a("strong"),kJe=o("blenderbot-small"),SJe=o(" \u2014 "),lS=a("a"),RJe=o("BlenderbotSmallTokenizer"),BJe=o(" (BlenderbotSmall model)"),PJe=l(),hg=a("li"),joe=a("strong"),IJe=o("byt5"),qJe=o(" \u2014 "),iS=a("a"),NJe=o("ByT5Tokenizer"),jJe=o(" (ByT5 model)"),DJe=l(),Bn=a("li"),Doe=a("strong"),GJe=o("camembert"),OJe=o(" \u2014 "),dS=a("a"),VJe=o("CamembertTokenizer"),XJe=o(" or "),cS=a("a"),zJe=o("CamembertTokenizerFast"),QJe=o(" (CamemBERT model)"),WJe=l(),pg=a("li"),Goe=a("strong"),HJe=o("canine"),UJe=o(" \u2014 "),fS=a("a"),JJe=o("CanineTokenizer"),YJe=o(" (Canine model)"),KJe=l(),Pn=a("li"),Ooe=a("strong"),ZJe=o("clip"),eYe=o(" \u2014 "),mS=a("a"),oYe=o("CLIPTokenizer"),rYe=o(" or "),gS=a("a"),tYe=o("CLIPTokenizerFast"),aYe=o(" (CLIP model)"),nYe=l(),In=a("li"),Voe=a("strong"),sYe=o("convbert"),lYe=o(" \u2014 "),hS=a("a"),iYe=o("ConvBertTokenizer"),dYe=o(" or "),pS=a("a"),cYe=o("ConvBertTokenizerFast"),fYe=o(" (ConvBERT model)"),mYe=l(),qn=a("li"),Xoe=a("strong"),gYe=o("cpm"),hYe=o(" \u2014 "),uS=a("a"),pYe=o("CpmTokenizer"),uYe=o(" or "),_S=a("a"),_Ye=o("CpmTokenizerFast"),bYe=o(" (CPM model)"),vYe=l(),ug=a("li"),zoe=a("strong"),FYe=o("ctrl"),TYe=o(" \u2014 "),bS=a("a"),MYe=o("CTRLTokenizer"),EYe=o(" (CTRL model)"),CYe=l(),Nn=a("li"),Qoe=a("strong"),wYe=o("data2vec-text"),AYe=o(" \u2014 "),vS=a("a"),yYe=o("RobertaTokenizer"),LYe=o(" or "),FS=a("a"),xYe=o("RobertaTokenizerFast"),$Ye=o(" (Data2VecText model)"),kYe=l(),jn=a("li"),Woe=a("strong"),SYe=o("deberta"),RYe=o(" \u2014 "),TS=a("a"),BYe=o("DebertaTokenizer"),PYe=o(" or "),MS=a("a"),IYe=o("DebertaTokenizerFast"),qYe=o(" (DeBERTa model)"),NYe=l(),Dn=a("li"),Hoe=a("strong"),jYe=o("deberta-v2"),DYe=o(" \u2014 "),ES=a("a"),GYe=o("DebertaV2Tokenizer"),OYe=o(" or "),CS=a("a"),VYe=o("DebertaV2TokenizerFast"),XYe=o(" (DeBERTa-v2 model)"),zYe=l(),Gn=a("li"),Uoe=a("strong"),QYe=o("distilbert"),WYe=o(" \u2014 "),wS=a("a"),HYe=o("DistilBertTokenizer"),UYe=o(" or "),AS=a("a"),JYe=o("DistilBertTokenizerFast"),YYe=o(" (DistilBERT model)"),KYe=l(),On=a("li"),Joe=a("strong"),ZYe=o("dpr"),eKe=o(" \u2014 "),yS=a("a"),oKe=o("DPRQuestionEncoderTokenizer"),rKe=o(" or "),LS=a("a"),tKe=o("DPRQuestionEncoderTokenizerFast"),aKe=o(" (DPR model)"),nKe=l(),Vn=a("li"),Yoe=a("strong"),sKe=o("electra"),lKe=o(" \u2014 "),xS=a("a"),iKe=o("ElectraTokenizer"),dKe=o(" or "),$S=a("a"),cKe=o("ElectraTokenizerFast"),fKe=o(" (ELECTRA model)"),mKe=l(),_g=a("li"),Koe=a("strong"),gKe=o("flaubert"),hKe=o(" \u2014 "),kS=a("a"),pKe=o("FlaubertTokenizer"),uKe=o(" (FlauBERT model)"),_Ke=l(),Xn=a("li"),Zoe=a("strong"),bKe=o("fnet"),vKe=o(" \u2014 "),SS=a("a"),FKe=o("FNetTokenizer"),TKe=o(" or "),RS=a("a"),MKe=o("FNetTokenizerFast"),EKe=o(" (FNet model)"),CKe=l(),bg=a("li"),ere=a("strong"),wKe=o("fsmt"),AKe=o(" \u2014 "),BS=a("a"),yKe=o("FSMTTokenizer"),LKe=o(" (FairSeq Machine-Translation model)"),xKe=l(),zn=a("li"),ore=a("strong"),$Ke=o("funnel"),kKe=o(" \u2014 "),PS=a("a"),SKe=o("FunnelTokenizer"),RKe=o(" or "),IS=a("a"),BKe=o("FunnelTokenizerFast"),PKe=o(" (Funnel Transformer model)"),IKe=l(),Qn=a("li"),rre=a("strong"),qKe=o("gpt2"),NKe=o(" \u2014 "),qS=a("a"),jKe=o("GPT2Tokenizer"),DKe=o(" or "),NS=a("a"),GKe=o("GPT2TokenizerFast"),OKe=o(" (OpenAI GPT-2 model)"),VKe=l(),Wn=a("li"),tre=a("strong"),XKe=o("gpt_neo"),zKe=o(" \u2014 "),jS=a("a"),QKe=o("GPT2Tokenizer"),WKe=o(" or "),DS=a("a"),HKe=o("GPT2TokenizerFast"),UKe=o(" (GPT Neo model)"),JKe=l(),Hn=a("li"),are=a("strong"),YKe=o("gptj"),KKe=o(" \u2014 "),GS=a("a"),ZKe=o("GPT2Tokenizer"),eZe=o(" or "),OS=a("a"),oZe=o("GPT2TokenizerFast"),rZe=o(" (GPT-J model)"),tZe=l(),Un=a("li"),nre=a("strong"),aZe=o("herbert"),nZe=o(" \u2014 "),VS=a("a"),sZe=o("HerbertTokenizer"),lZe=o(" or "),XS=a("a"),iZe=o("HerbertTokenizerFast"),dZe=o(" (HerBERT model)"),cZe=l(),vg=a("li"),sre=a("strong"),fZe=o("hubert"),mZe=o(" \u2014 "),zS=a("a"),gZe=o("Wav2Vec2CTCTokenizer"),hZe=o(" (Hubert model)"),pZe=l(),Jn=a("li"),lre=a("strong"),uZe=o("ibert"),_Ze=o(" \u2014 "),QS=a("a"),bZe=o("RobertaTokenizer"),vZe=o(" or "),WS=a("a"),FZe=o("RobertaTokenizerFast"),TZe=o(" (I-BERT model)"),MZe=l(),Yn=a("li"),ire=a("strong"),EZe=o("layoutlm"),CZe=o(" \u2014 "),HS=a("a"),wZe=o("LayoutLMTokenizer"),AZe=o(" or "),US=a("a"),yZe=o("LayoutLMTokenizerFast"),LZe=o(" (LayoutLM model)"),xZe=l(),Kn=a("li"),dre=a("strong"),$Ze=o("layoutlmv2"),kZe=o(" \u2014 "),JS=a("a"),SZe=o("LayoutLMv2Tokenizer"),RZe=o(" or "),YS=a("a"),BZe=o("LayoutLMv2TokenizerFast"),PZe=o(" (LayoutLMv2 model)"),IZe=l(),Zn=a("li"),cre=a("strong"),qZe=o("layoutxlm"),NZe=o(" \u2014 "),KS=a("a"),jZe=o("LayoutXLMTokenizer"),DZe=o(" or "),ZS=a("a"),GZe=o("LayoutXLMTokenizerFast"),OZe=o(" (LayoutXLM model)"),VZe=l(),es=a("li"),fre=a("strong"),XZe=o("led"),zZe=o(" \u2014 "),eR=a("a"),QZe=o("LEDTokenizer"),WZe=o(" or "),oR=a("a"),HZe=o("LEDTokenizerFast"),UZe=o(" (LED model)"),JZe=l(),os=a("li"),mre=a("strong"),YZe=o("longformer"),KZe=o(" \u2014 "),rR=a("a"),ZZe=o("LongformerTokenizer"),eeo=o(" or "),tR=a("a"),oeo=o("LongformerTokenizerFast"),reo=o(" (Longformer model)"),teo=l(),Fg=a("li"),gre=a("strong"),aeo=o("luke"),neo=o(" \u2014 "),aR=a("a"),seo=o("LukeTokenizer"),leo=o(" (LUKE model)"),ieo=l(),rs=a("li"),hre=a("strong"),deo=o("lxmert"),ceo=o(" \u2014 "),nR=a("a"),feo=o("LxmertTokenizer"),meo=o(" or "),sR=a("a"),geo=o("LxmertTokenizerFast"),heo=o(" (LXMERT model)"),peo=l(),Tg=a("li"),pre=a("strong"),ueo=o("m2m_100"),_eo=o(" \u2014 "),lR=a("a"),beo=o("M2M100Tokenizer"),veo=o(" (M2M100 model)"),Feo=l(),Mg=a("li"),ure=a("strong"),Teo=o("marian"),Meo=o(" \u2014 "),iR=a("a"),Eeo=o("MarianTokenizer"),Ceo=o(" (Marian model)"),weo=l(),ts=a("li"),_re=a("strong"),Aeo=o("mbart"),yeo=o(" \u2014 "),dR=a("a"),Leo=o("MBartTokenizer"),xeo=o(" or "),cR=a("a"),$eo=o("MBartTokenizerFast"),keo=o(" (mBART model)"),Seo=l(),as=a("li"),bre=a("strong"),Reo=o("mbart50"),Beo=o(" \u2014 "),fR=a("a"),Peo=o("MBart50Tokenizer"),Ieo=o(" or "),mR=a("a"),qeo=o("MBart50TokenizerFast"),Neo=o(" (mBART-50 model)"),jeo=l(),ns=a("li"),vre=a("strong"),Deo=o("megatron-bert"),Geo=o(" \u2014 "),gR=a("a"),Oeo=o("BertTokenizer"),Veo=o(" or "),hR=a("a"),Xeo=o("BertTokenizerFast"),zeo=o(" (MegatronBert model)"),Qeo=l(),Eg=a("li"),Fre=a("strong"),Weo=o("mluke"),Heo=o(" \u2014 "),pR=a("a"),Ueo=o("MLukeTokenizer"),Jeo=o(" (mLUKE model)"),Yeo=l(),ss=a("li"),Tre=a("strong"),Keo=o("mobilebert"),Zeo=o(" \u2014 "),uR=a("a"),eoo=o("MobileBertTokenizer"),ooo=o(" or "),_R=a("a"),roo=o("MobileBertTokenizerFast"),too=o(" (MobileBERT model)"),aoo=l(),ls=a("li"),Mre=a("strong"),noo=o("mpnet"),soo=o(" \u2014 "),bR=a("a"),loo=o("MPNetTokenizer"),ioo=o(" or "),vR=a("a"),doo=o("MPNetTokenizerFast"),coo=o(" (MPNet model)"),foo=l(),is=a("li"),Ere=a("strong"),moo=o("mt5"),goo=o(" \u2014 "),FR=a("a"),hoo=o("MT5Tokenizer"),poo=o(" or "),TR=a("a"),uoo=o("MT5TokenizerFast"),_oo=o(" (mT5 model)"),boo=l(),ds=a("li"),Cre=a("strong"),voo=o("nystromformer"),Foo=o(" \u2014 "),MR=a("a"),Too=o("AlbertTokenizer"),Moo=o(" or "),ER=a("a"),Eoo=o("AlbertTokenizerFast"),Coo=o(" (Nystromformer model)"),woo=l(),cs=a("li"),wre=a("strong"),Aoo=o("openai-gpt"),yoo=o(" \u2014 "),CR=a("a"),Loo=o("OpenAIGPTTokenizer"),xoo=o(" or "),wR=a("a"),$oo=o("OpenAIGPTTokenizerFast"),koo=o(" (OpenAI GPT model)"),Soo=l(),fs=a("li"),Are=a("strong"),Roo=o("pegasus"),Boo=o(" \u2014 "),AR=a("a"),Poo=o("PegasusTokenizer"),Ioo=o(" or "),yR=a("a"),qoo=o("PegasusTokenizerFast"),Noo=o(" (Pegasus model)"),joo=l(),Cg=a("li"),yre=a("strong"),Doo=o("perceiver"),Goo=o(" \u2014 "),LR=a("a"),Ooo=o("PerceiverTokenizer"),Voo=o(" (Perceiver model)"),Xoo=l(),wg=a("li"),Lre=a("strong"),zoo=o("phobert"),Qoo=o(" \u2014 "),xR=a("a"),Woo=o("PhobertTokenizer"),Hoo=o(" (PhoBERT model)"),Uoo=l(),Ag=a("li"),xre=a("strong"),Joo=o("plbart"),Yoo=o(" \u2014 "),$R=a("a"),Koo=o("PLBartTokenizer"),Zoo=o(" (PLBart model)"),ero=l(),yg=a("li"),$re=a("strong"),oro=o("prophetnet"),rro=o(" \u2014 "),kR=a("a"),tro=o("ProphetNetTokenizer"),aro=o(" (ProphetNet model)"),nro=l(),ms=a("li"),kre=a("strong"),sro=o("qdqbert"),lro=o(" \u2014 "),SR=a("a"),iro=o("BertTokenizer"),dro=o(" or "),RR=a("a"),cro=o("BertTokenizerFast"),fro=o(" (QDQBert model)"),mro=l(),Lg=a("li"),Sre=a("strong"),gro=o("rag"),hro=o(" \u2014 "),BR=a("a"),pro=o("RagTokenizer"),uro=o(" (RAG model)"),_ro=l(),gs=a("li"),Rre=a("strong"),bro=o("realm"),vro=o(" \u2014 "),PR=a("a"),Fro=o("RealmTokenizer"),Tro=o(" or "),IR=a("a"),Mro=o("RealmTokenizerFast"),Ero=o(" (Realm model)"),Cro=l(),hs=a("li"),Bre=a("strong"),wro=o("reformer"),Aro=o(" \u2014 "),qR=a("a"),yro=o("ReformerTokenizer"),Lro=o(" or "),NR=a("a"),xro=o("ReformerTokenizerFast"),$ro=o(" (Reformer model)"),kro=l(),ps=a("li"),Pre=a("strong"),Sro=o("rembert"),Rro=o(" \u2014 "),jR=a("a"),Bro=o("RemBertTokenizer"),Pro=o(" or "),DR=a("a"),Iro=o("RemBertTokenizerFast"),qro=o(" (RemBERT model)"),Nro=l(),us=a("li"),Ire=a("strong"),jro=o("retribert"),Dro=o(" \u2014 "),GR=a("a"),Gro=o("RetriBertTokenizer"),Oro=o(" or "),OR=a("a"),Vro=o("RetriBertTokenizerFast"),Xro=o(" (RetriBERT model)"),zro=l(),_s=a("li"),qre=a("strong"),Qro=o("roberta"),Wro=o(" \u2014 "),VR=a("a"),Hro=o("RobertaTokenizer"),Uro=o(" or "),XR=a("a"),Jro=o("RobertaTokenizerFast"),Yro=o(" (RoBERTa model)"),Kro=l(),bs=a("li"),Nre=a("strong"),Zro=o("roformer"),eto=o(" \u2014 "),zR=a("a"),oto=o("RoFormerTokenizer"),rto=o(" or "),QR=a("a"),tto=o("RoFormerTokenizerFast"),ato=o(" (RoFormer model)"),nto=l(),xg=a("li"),jre=a("strong"),sto=o("speech_to_text"),lto=o(" \u2014 "),WR=a("a"),ito=o("Speech2TextTokenizer"),dto=o(" (Speech2Text model)"),cto=l(),$g=a("li"),Dre=a("strong"),fto=o("speech_to_text_2"),mto=o(" \u2014 "),HR=a("a"),gto=o("Speech2Text2Tokenizer"),hto=o(" (Speech2Text2 model)"),pto=l(),vs=a("li"),Gre=a("strong"),uto=o("splinter"),_to=o(" \u2014 "),UR=a("a"),bto=o("SplinterTokenizer"),vto=o(" or "),JR=a("a"),Fto=o("SplinterTokenizerFast"),Tto=o(" (Splinter model)"),Mto=l(),Fs=a("li"),Ore=a("strong"),Eto=o("squeezebert"),Cto=o(" \u2014 "),YR=a("a"),wto=o("SqueezeBertTokenizer"),Ato=o(" or "),KR=a("a"),yto=o("SqueezeBertTokenizerFast"),Lto=o(" (SqueezeBERT model)"),xto=l(),Ts=a("li"),Vre=a("strong"),$to=o("t5"),kto=o(" \u2014 "),ZR=a("a"),Sto=o("T5Tokenizer"),Rto=o(" or "),eB=a("a"),Bto=o("T5TokenizerFast"),Pto=o(" (T5 model)"),Ito=l(),kg=a("li"),Xre=a("strong"),qto=o("tapas"),Nto=o(" \u2014 "),oB=a("a"),jto=o("TapasTokenizer"),Dto=o(" (TAPAS model)"),Gto=l(),Sg=a("li"),zre=a("strong"),Oto=o("tapex"),Vto=o(" \u2014 "),rB=a("a"),Xto=o("TapexTokenizer"),zto=o(" (TAPEX model)"),Qto=l(),Rg=a("li"),Qre=a("strong"),Wto=o("transfo-xl"),Hto=o(" \u2014 "),tB=a("a"),Uto=o("TransfoXLTokenizer"),Jto=o(" (Transformer-XL model)"),Yto=l(),Ms=a("li"),Wre=a("strong"),Kto=o("visual_bert"),Zto=o(" \u2014 "),aB=a("a"),eao=o("BertTokenizer"),oao=o(" or "),nB=a("a"),rao=o("BertTokenizerFast"),tao=o(" (VisualBert model)"),aao=l(),Bg=a("li"),Hre=a("strong"),nao=o("wav2vec2"),sao=o(" \u2014 "),sB=a("a"),lao=o("Wav2Vec2CTCTokenizer"),iao=o(" (Wav2Vec2 model)"),dao=l(),Pg=a("li"),Ure=a("strong"),cao=o("wav2vec2_phoneme"),fao=o(" \u2014 "),lB=a("a"),mao=o("Wav2Vec2PhonemeCTCTokenizer"),gao=o(" (Wav2Vec2Phoneme model)"),hao=l(),Es=a("li"),Jre=a("strong"),pao=o("xglm"),uao=o(" \u2014 "),iB=a("a"),_ao=o("XGLMTokenizer"),bao=o(" or "),dB=a("a"),vao=o("XGLMTokenizerFast"),Fao=o(" (XGLM model)"),Tao=l(),Ig=a("li"),Yre=a("strong"),Mao=o("xlm"),Eao=o(" \u2014 "),cB=a("a"),Cao=o("XLMTokenizer"),wao=o(" (XLM model)"),Aao=l(),qg=a("li"),Kre=a("strong"),yao=o("xlm-prophetnet"),Lao=o(" \u2014 "),fB=a("a"),xao=o("XLMProphetNetTokenizer"),$ao=o(" (XLMProphetNet model)"),kao=l(),Cs=a("li"),Zre=a("strong"),Sao=o("xlm-roberta"),Rao=o(" \u2014 "),mB=a("a"),Bao=o("XLMRobertaTokenizer"),Pao=o(" or "),gB=a("a"),Iao=o("XLMRobertaTokenizerFast"),qao=o(" (XLM-RoBERTa model)"),Nao=l(),ws=a("li"),ete=a("strong"),jao=o("xlm-roberta-xl"),Dao=o(" \u2014 "),hB=a("a"),Gao=o("RobertaTokenizer"),Oao=o(" or "),pB=a("a"),Vao=o("RobertaTokenizerFast"),Xao=o(" (XLM-RoBERTa-XL model)"),zao=l(),As=a("li"),ote=a("strong"),Qao=o("xlnet"),Wao=o(" \u2014 "),uB=a("a"),Hao=o("XLNetTokenizer"),Uao=o(" or "),_B=a("a"),Jao=o("XLNetTokenizerFast"),Yao=o(" (XLNet model)"),Kao=l(),ys=a("li"),rte=a("strong"),Zao=o("yoso"),eno=o(" \u2014 "),bB=a("a"),ono=o("AlbertTokenizer"),rno=o(" or "),vB=a("a"),tno=o("AlbertTokenizerFast"),ano=o(" (YOSO model)"),nno=l(),F(Ng.$$.fragment),sno=l(),jg=a("div"),F(GA.$$.fragment),lno=l(),tte=a("p"),ino=o("Register a new tokenizer in this mapping."),jBe=l(),mi=a("h2"),Dg=a("a"),ate=a("span"),F(OA.$$.fragment),dno=l(),nte=a("span"),cno=o("AutoFeatureExtractor"),DBe=l(),Ao=a("div"),F(VA.$$.fragment),fno=l(),XA=a("p"),mno=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),FB=a("a"),gno=o("AutoFeatureExtractor.from_pretrained()"),hno=o(" class method."),pno=l(),zA=a("p"),uno=o("This class cannot be instantiated directly using "),ste=a("code"),_no=o("__init__()"),bno=o(" (throws an error)."),vno=l(),Qe=a("div"),F(QA.$$.fragment),Fno=l(),lte=a("p"),Tno=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Mno=l(),Ma=a("p"),Eno=o("The feature extractor class to instantiate is selected based on the "),ite=a("code"),Cno=o("model_type"),wno=o(` property of the config object
(either passed as an argument or loaded from `),dte=a("code"),Ano=o("pretrained_model_name_or_path"),yno=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),cte=a("code"),Lno=o("pretrained_model_name_or_path"),xno=o(":"),$no=l(),oe=a("ul"),Gg=a("li"),fte=a("strong"),kno=o("beit"),Sno=o(" \u2014 "),TB=a("a"),Rno=o("BeitFeatureExtractor"),Bno=o(" (BEiT model)"),Pno=l(),Og=a("li"),mte=a("strong"),Ino=o("clip"),qno=o(" \u2014 "),MB=a("a"),Nno=o("CLIPFeatureExtractor"),jno=o(" (CLIP model)"),Dno=l(),Vg=a("li"),gte=a("strong"),Gno=o("convnext"),Ono=o(" \u2014 "),EB=a("a"),Vno=o("ConvNextFeatureExtractor"),Xno=o(" (ConvNext model)"),zno=l(),Xg=a("li"),hte=a("strong"),Qno=o("cvt"),Wno=o(" \u2014 "),CB=a("a"),Hno=o("ConvNextFeatureExtractor"),Uno=o(" (Cvt model)"),Jno=l(),zg=a("li"),pte=a("strong"),Yno=o("data2vec-audio"),Kno=o(" \u2014 "),wB=a("a"),Zno=o("Wav2Vec2FeatureExtractor"),eso=o(" (Data2VecAudio model)"),oso=l(),Qg=a("li"),ute=a("strong"),rso=o("data2vec-vision"),tso=o(" \u2014 "),AB=a("a"),aso=o("BeitFeatureExtractor"),nso=o(" (Data2VecVision model)"),sso=l(),Wg=a("li"),_te=a("strong"),lso=o("deit"),iso=o(" \u2014 "),yB=a("a"),dso=o("DeiTFeatureExtractor"),cso=o(" (DeiT model)"),fso=l(),Hg=a("li"),bte=a("strong"),mso=o("detr"),gso=o(" \u2014 "),LB=a("a"),hso=o("DetrFeatureExtractor"),pso=o(" (DETR model)"),uso=l(),Ug=a("li"),vte=a("strong"),_so=o("dpt"),bso=o(" \u2014 "),xB=a("a"),vso=o("DPTFeatureExtractor"),Fso=o(" (DPT model)"),Tso=l(),Jg=a("li"),Fte=a("strong"),Mso=o("glpn"),Eso=o(" \u2014 "),$B=a("a"),Cso=o("GLPNFeatureExtractor"),wso=o(" (GLPN model)"),Aso=l(),Yg=a("li"),Tte=a("strong"),yso=o("hubert"),Lso=o(" \u2014 "),kB=a("a"),xso=o("Wav2Vec2FeatureExtractor"),$so=o(" (Hubert model)"),kso=l(),Kg=a("li"),Mte=a("strong"),Sso=o("layoutlmv2"),Rso=o(" \u2014 "),SB=a("a"),Bso=o("LayoutLMv2FeatureExtractor"),Pso=o(" (LayoutLMv2 model)"),Iso=l(),Zg=a("li"),Ete=a("strong"),qso=o("maskformer"),Nso=o(" \u2014 "),RB=a("a"),jso=o("MaskFormerFeatureExtractor"),Dso=o(" (MaskFormer model)"),Gso=l(),eh=a("li"),Cte=a("strong"),Oso=o("perceiver"),Vso=o(" \u2014 "),BB=a("a"),Xso=o("PerceiverFeatureExtractor"),zso=o(" (Perceiver model)"),Qso=l(),oh=a("li"),wte=a("strong"),Wso=o("poolformer"),Hso=o(" \u2014 "),PB=a("a"),Uso=o("PoolFormerFeatureExtractor"),Jso=o(" (PoolFormer model)"),Yso=l(),rh=a("li"),Ate=a("strong"),Kso=o("regnet"),Zso=o(" \u2014 "),IB=a("a"),elo=o("ConvNextFeatureExtractor"),olo=o(" (RegNet model)"),rlo=l(),th=a("li"),yte=a("strong"),tlo=o("resnet"),alo=o(" \u2014 "),qB=a("a"),nlo=o("ConvNextFeatureExtractor"),slo=o(" (ResNet model)"),llo=l(),ah=a("li"),Lte=a("strong"),ilo=o("segformer"),dlo=o(" \u2014 "),NB=a("a"),clo=o("SegformerFeatureExtractor"),flo=o(" (SegFormer model)"),mlo=l(),nh=a("li"),xte=a("strong"),glo=o("speech_to_text"),hlo=o(" \u2014 "),jB=a("a"),plo=o("Speech2TextFeatureExtractor"),ulo=o(" (Speech2Text model)"),_lo=l(),sh=a("li"),$te=a("strong"),blo=o("swin"),vlo=o(" \u2014 "),DB=a("a"),Flo=o("ViTFeatureExtractor"),Tlo=o(" (Swin model)"),Mlo=l(),lh=a("li"),kte=a("strong"),Elo=o("van"),Clo=o(" \u2014 "),GB=a("a"),wlo=o("ConvNextFeatureExtractor"),Alo=o(" (VAN model)"),ylo=l(),ih=a("li"),Ste=a("strong"),Llo=o("vit"),xlo=o(" \u2014 "),OB=a("a"),$lo=o("ViTFeatureExtractor"),klo=o(" (ViT model)"),Slo=l(),dh=a("li"),Rte=a("strong"),Rlo=o("vit_mae"),Blo=o(" \u2014 "),VB=a("a"),Plo=o("ViTFeatureExtractor"),Ilo=o(" (ViTMAE model)"),qlo=l(),ch=a("li"),Bte=a("strong"),Nlo=o("wav2vec2"),jlo=o(" \u2014 "),XB=a("a"),Dlo=o("Wav2Vec2FeatureExtractor"),Glo=o(" (Wav2Vec2 model)"),Olo=l(),fh=a("li"),Pte=a("strong"),Vlo=o("yolos"),Xlo=o(" \u2014 "),zB=a("a"),zlo=o("YolosFeatureExtractor"),Qlo=o(" (YOLOS model)"),Wlo=l(),F(mh.$$.fragment),Hlo=l(),F(gh.$$.fragment),Ulo=l(),hh=a("div"),F(WA.$$.fragment),Jlo=l(),Ite=a("p"),Ylo=o("Register a new feature extractor for this class."),GBe=l(),gi=a("h2"),ph=a("a"),qte=a("span"),F(HA.$$.fragment),Klo=l(),Nte=a("span"),Zlo=o("AutoProcessor"),OBe=l(),yo=a("div"),F(UA.$$.fragment),eio=l(),JA=a("p"),oio=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),QB=a("a"),rio=o("AutoProcessor.from_pretrained()"),tio=o(" class method."),aio=l(),YA=a("p"),nio=o("This class cannot be instantiated directly using "),jte=a("code"),sio=o("__init__()"),lio=o(" (throws an error)."),iio=l(),We=a("div"),F(KA.$$.fragment),dio=l(),Dte=a("p"),cio=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),fio=l(),hi=a("p"),mio=o("The processor class to instantiate is selected based on the "),Gte=a("code"),gio=o("model_type"),hio=o(` property of the config object (either
passed as an argument or loaded from `),Ote=a("code"),pio=o("pretrained_model_name_or_path"),uio=o(" if possible):"),_io=l(),be=a("ul"),uh=a("li"),Vte=a("strong"),bio=o("clip"),vio=o(" \u2014 "),WB=a("a"),Fio=o("CLIPProcessor"),Tio=o(" (CLIP model)"),Mio=l(),_h=a("li"),Xte=a("strong"),Eio=o("layoutlmv2"),Cio=o(" \u2014 "),HB=a("a"),wio=o("LayoutLMv2Processor"),Aio=o(" (LayoutLMv2 model)"),yio=l(),bh=a("li"),zte=a("strong"),Lio=o("layoutxlm"),xio=o(" \u2014 "),UB=a("a"),$io=o("LayoutXLMProcessor"),kio=o(" (LayoutXLM model)"),Sio=l(),vh=a("li"),Qte=a("strong"),Rio=o("sew"),Bio=o(" \u2014 "),JB=a("a"),Pio=o("Wav2Vec2Processor"),Iio=o(" (SEW model)"),qio=l(),Fh=a("li"),Wte=a("strong"),Nio=o("sew-d"),jio=o(" \u2014 "),YB=a("a"),Dio=o("Wav2Vec2Processor"),Gio=o(" (SEW-D model)"),Oio=l(),Th=a("li"),Hte=a("strong"),Vio=o("speech_to_text"),Xio=o(" \u2014 "),KB=a("a"),zio=o("Speech2TextProcessor"),Qio=o(" (Speech2Text model)"),Wio=l(),Mh=a("li"),Ute=a("strong"),Hio=o("speech_to_text_2"),Uio=o(" \u2014 "),ZB=a("a"),Jio=o("Speech2Text2Processor"),Yio=o(" (Speech2Text2 model)"),Kio=l(),Eh=a("li"),Jte=a("strong"),Zio=o("trocr"),edo=o(" \u2014 "),eP=a("a"),odo=o("TrOCRProcessor"),rdo=o(" (TrOCR model)"),tdo=l(),Ch=a("li"),Yte=a("strong"),ado=o("unispeech"),ndo=o(" \u2014 "),oP=a("a"),sdo=o("Wav2Vec2Processor"),ldo=o(" (UniSpeech model)"),ido=l(),wh=a("li"),Kte=a("strong"),ddo=o("unispeech-sat"),cdo=o(" \u2014 "),rP=a("a"),fdo=o("Wav2Vec2Processor"),mdo=o(" (UniSpeechSat model)"),gdo=l(),Ah=a("li"),Zte=a("strong"),hdo=o("vilt"),pdo=o(" \u2014 "),tP=a("a"),udo=o("ViltProcessor"),_do=o(" (ViLT model)"),bdo=l(),yh=a("li"),eae=a("strong"),vdo=o("vision-text-dual-encoder"),Fdo=o(" \u2014 "),aP=a("a"),Tdo=o("VisionTextDualEncoderProcessor"),Mdo=o(" (VisionTextDualEncoder model)"),Edo=l(),Lh=a("li"),oae=a("strong"),Cdo=o("wav2vec2"),wdo=o(" \u2014 "),nP=a("a"),Ado=o("Wav2Vec2Processor"),ydo=o(" (Wav2Vec2 model)"),Ldo=l(),xh=a("li"),rae=a("strong"),xdo=o("wavlm"),$do=o(" \u2014 "),sP=a("a"),kdo=o("Wav2Vec2Processor"),Sdo=o(" (WavLM model)"),Rdo=l(),F($h.$$.fragment),Bdo=l(),F(kh.$$.fragment),Pdo=l(),Sh=a("div"),F(ZA.$$.fragment),Ido=l(),tae=a("p"),qdo=o("Register a new processor for this class."),VBe=l(),pi=a("h2"),Rh=a("a"),aae=a("span"),F(e0.$$.fragment),Ndo=l(),nae=a("span"),jdo=o("AutoModel"),XBe=l(),Lo=a("div"),F(o0.$$.fragment),Ddo=l(),ui=a("p"),Gdo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),lP=a("a"),Odo=o("from_pretrained()"),Vdo=o(" class method or the "),iP=a("a"),Xdo=o("from_config()"),zdo=o(` class
method.`),Qdo=l(),r0=a("p"),Wdo=o("This class cannot be instantiated directly using "),sae=a("code"),Hdo=o("__init__()"),Udo=o(" (throws an error)."),Jdo=l(),Zr=a("div"),F(t0.$$.fragment),Ydo=l(),lae=a("p"),Kdo=o("Instantiates one of the base model classes of the library from a configuration."),Zdo=l(),_i=a("p"),eco=o(`Note:
Loading a model from its configuration file does `),iae=a("strong"),oco=o("not"),rco=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dP=a("a"),tco=o("from_pretrained()"),aco=o(" to load the model weights."),nco=l(),F(Bh.$$.fragment),sco=l(),He=a("div"),F(a0.$$.fragment),lco=l(),dae=a("p"),ico=o("Instantiate one of the base model classes of the library from a pretrained model."),dco=l(),Ea=a("p"),cco=o("The model class to instantiate is selected based on the "),cae=a("code"),fco=o("model_type"),mco=o(` property of the config object (either
passed as an argument or loaded from `),fae=a("code"),gco=o("pretrained_model_name_or_path"),hco=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mae=a("code"),pco=o("pretrained_model_name_or_path"),uco=o(":"),_co=l(),x=a("ul"),Ph=a("li"),gae=a("strong"),bco=o("albert"),vco=o(" \u2014 "),cP=a("a"),Fco=o("AlbertModel"),Tco=o(" (ALBERT model)"),Mco=l(),Ih=a("li"),hae=a("strong"),Eco=o("bart"),Cco=o(" \u2014 "),fP=a("a"),wco=o("BartModel"),Aco=o(" (BART model)"),yco=l(),qh=a("li"),pae=a("strong"),Lco=o("beit"),xco=o(" \u2014 "),mP=a("a"),$co=o("BeitModel"),kco=o(" (BEiT model)"),Sco=l(),Nh=a("li"),uae=a("strong"),Rco=o("bert"),Bco=o(" \u2014 "),gP=a("a"),Pco=o("BertModel"),Ico=o(" (BERT model)"),qco=l(),jh=a("li"),_ae=a("strong"),Nco=o("bert-generation"),jco=o(" \u2014 "),hP=a("a"),Dco=o("BertGenerationEncoder"),Gco=o(" (Bert Generation model)"),Oco=l(),Dh=a("li"),bae=a("strong"),Vco=o("big_bird"),Xco=o(" \u2014 "),pP=a("a"),zco=o("BigBirdModel"),Qco=o(" (BigBird model)"),Wco=l(),Gh=a("li"),vae=a("strong"),Hco=o("bigbird_pegasus"),Uco=o(" \u2014 "),uP=a("a"),Jco=o("BigBirdPegasusModel"),Yco=o(" (BigBirdPegasus model)"),Kco=l(),Oh=a("li"),Fae=a("strong"),Zco=o("blenderbot"),efo=o(" \u2014 "),_P=a("a"),ofo=o("BlenderbotModel"),rfo=o(" (Blenderbot model)"),tfo=l(),Vh=a("li"),Tae=a("strong"),afo=o("blenderbot-small"),nfo=o(" \u2014 "),bP=a("a"),sfo=o("BlenderbotSmallModel"),lfo=o(" (BlenderbotSmall model)"),ifo=l(),Xh=a("li"),Mae=a("strong"),dfo=o("camembert"),cfo=o(" \u2014 "),vP=a("a"),ffo=o("CamembertModel"),mfo=o(" (CamemBERT model)"),gfo=l(),zh=a("li"),Eae=a("strong"),hfo=o("canine"),pfo=o(" \u2014 "),FP=a("a"),ufo=o("CanineModel"),_fo=o(" (Canine model)"),bfo=l(),Qh=a("li"),Cae=a("strong"),vfo=o("clip"),Ffo=o(" \u2014 "),TP=a("a"),Tfo=o("CLIPModel"),Mfo=o(" (CLIP model)"),Efo=l(),Wh=a("li"),wae=a("strong"),Cfo=o("convbert"),wfo=o(" \u2014 "),MP=a("a"),Afo=o("ConvBertModel"),yfo=o(" (ConvBERT model)"),Lfo=l(),Hh=a("li"),Aae=a("strong"),xfo=o("convnext"),$fo=o(" \u2014 "),EP=a("a"),kfo=o("ConvNextModel"),Sfo=o(" (ConvNext model)"),Rfo=l(),Uh=a("li"),yae=a("strong"),Bfo=o("ctrl"),Pfo=o(" \u2014 "),CP=a("a"),Ifo=o("CTRLModel"),qfo=o(" (CTRL model)"),Nfo=l(),Jh=a("li"),Lae=a("strong"),jfo=o("cvt"),Dfo=o(" \u2014 "),wP=a("a"),Gfo=o("CvtModel"),Ofo=o(" (Cvt model)"),Vfo=l(),Yh=a("li"),xae=a("strong"),Xfo=o("data2vec-audio"),zfo=o(" \u2014 "),AP=a("a"),Qfo=o("Data2VecAudioModel"),Wfo=o(" (Data2VecAudio model)"),Hfo=l(),Kh=a("li"),$ae=a("strong"),Ufo=o("data2vec-text"),Jfo=o(" \u2014 "),yP=a("a"),Yfo=o("Data2VecTextModel"),Kfo=o(" (Data2VecText model)"),Zfo=l(),Zh=a("li"),kae=a("strong"),emo=o("data2vec-vision"),omo=o(" \u2014 "),LP=a("a"),rmo=o("Data2VecVisionModel"),tmo=o(" (Data2VecVision model)"),amo=l(),ep=a("li"),Sae=a("strong"),nmo=o("deberta"),smo=o(" \u2014 "),xP=a("a"),lmo=o("DebertaModel"),imo=o(" (DeBERTa model)"),dmo=l(),op=a("li"),Rae=a("strong"),cmo=o("deberta-v2"),fmo=o(" \u2014 "),$P=a("a"),mmo=o("DebertaV2Model"),gmo=o(" (DeBERTa-v2 model)"),hmo=l(),rp=a("li"),Bae=a("strong"),pmo=o("decision_transformer"),umo=o(" \u2014 "),kP=a("a"),_mo=o("DecisionTransformerModel"),bmo=o(" (Decision Transformer model)"),vmo=l(),tp=a("li"),Pae=a("strong"),Fmo=o("deit"),Tmo=o(" \u2014 "),SP=a("a"),Mmo=o("DeiTModel"),Emo=o(" (DeiT model)"),Cmo=l(),ap=a("li"),Iae=a("strong"),wmo=o("detr"),Amo=o(" \u2014 "),RP=a("a"),ymo=o("DetrModel"),Lmo=o(" (DETR model)"),xmo=l(),np=a("li"),qae=a("strong"),$mo=o("distilbert"),kmo=o(" \u2014 "),BP=a("a"),Smo=o("DistilBertModel"),Rmo=o(" (DistilBERT model)"),Bmo=l(),sp=a("li"),Nae=a("strong"),Pmo=o("dpr"),Imo=o(" \u2014 "),PP=a("a"),qmo=o("DPRQuestionEncoder"),Nmo=o(" (DPR model)"),jmo=l(),lp=a("li"),jae=a("strong"),Dmo=o("dpt"),Gmo=o(" \u2014 "),IP=a("a"),Omo=o("DPTModel"),Vmo=o(" (DPT model)"),Xmo=l(),ip=a("li"),Dae=a("strong"),zmo=o("electra"),Qmo=o(" \u2014 "),qP=a("a"),Wmo=o("ElectraModel"),Hmo=o(" (ELECTRA model)"),Umo=l(),dp=a("li"),Gae=a("strong"),Jmo=o("flaubert"),Ymo=o(" \u2014 "),NP=a("a"),Kmo=o("FlaubertModel"),Zmo=o(" (FlauBERT model)"),ego=l(),cp=a("li"),Oae=a("strong"),ogo=o("fnet"),rgo=o(" \u2014 "),jP=a("a"),tgo=o("FNetModel"),ago=o(" (FNet model)"),ngo=l(),fp=a("li"),Vae=a("strong"),sgo=o("fsmt"),lgo=o(" \u2014 "),DP=a("a"),igo=o("FSMTModel"),dgo=o(" (FairSeq Machine-Translation model)"),cgo=l(),Ls=a("li"),Xae=a("strong"),fgo=o("funnel"),mgo=o(" \u2014 "),GP=a("a"),ggo=o("FunnelModel"),hgo=o(" or "),OP=a("a"),pgo=o("FunnelBaseModel"),ugo=o(" (Funnel Transformer model)"),_go=l(),mp=a("li"),zae=a("strong"),bgo=o("glpn"),vgo=o(" \u2014 "),VP=a("a"),Fgo=o("GLPNModel"),Tgo=o(" (GLPN model)"),Mgo=l(),gp=a("li"),Qae=a("strong"),Ego=o("gpt2"),Cgo=o(" \u2014 "),XP=a("a"),wgo=o("GPT2Model"),Ago=o(" (OpenAI GPT-2 model)"),ygo=l(),hp=a("li"),Wae=a("strong"),Lgo=o("gpt_neo"),xgo=o(" \u2014 "),zP=a("a"),$go=o("GPTNeoModel"),kgo=o(" (GPT Neo model)"),Sgo=l(),pp=a("li"),Hae=a("strong"),Rgo=o("gptj"),Bgo=o(" \u2014 "),QP=a("a"),Pgo=o("GPTJModel"),Igo=o(" (GPT-J model)"),qgo=l(),up=a("li"),Uae=a("strong"),Ngo=o("hubert"),jgo=o(" \u2014 "),WP=a("a"),Dgo=o("HubertModel"),Ggo=o(" (Hubert model)"),Ogo=l(),_p=a("li"),Jae=a("strong"),Vgo=o("ibert"),Xgo=o(" \u2014 "),HP=a("a"),zgo=o("IBertModel"),Qgo=o(" (I-BERT model)"),Wgo=l(),bp=a("li"),Yae=a("strong"),Hgo=o("imagegpt"),Ugo=o(" \u2014 "),UP=a("a"),Jgo=o("ImageGPTModel"),Ygo=o(" (ImageGPT model)"),Kgo=l(),vp=a("li"),Kae=a("strong"),Zgo=o("layoutlm"),eho=o(" \u2014 "),JP=a("a"),oho=o("LayoutLMModel"),rho=o(" (LayoutLM model)"),tho=l(),Fp=a("li"),Zae=a("strong"),aho=o("layoutlmv2"),nho=o(" \u2014 "),YP=a("a"),sho=o("LayoutLMv2Model"),lho=o(" (LayoutLMv2 model)"),iho=l(),Tp=a("li"),ene=a("strong"),dho=o("led"),cho=o(" \u2014 "),KP=a("a"),fho=o("LEDModel"),mho=o(" (LED model)"),gho=l(),Mp=a("li"),one=a("strong"),hho=o("longformer"),pho=o(" \u2014 "),ZP=a("a"),uho=o("LongformerModel"),_ho=o(" (Longformer model)"),bho=l(),Ep=a("li"),rne=a("strong"),vho=o("luke"),Fho=o(" \u2014 "),eI=a("a"),Tho=o("LukeModel"),Mho=o(" (LUKE model)"),Eho=l(),Cp=a("li"),tne=a("strong"),Cho=o("lxmert"),who=o(" \u2014 "),oI=a("a"),Aho=o("LxmertModel"),yho=o(" (LXMERT model)"),Lho=l(),wp=a("li"),ane=a("strong"),xho=o("m2m_100"),$ho=o(" \u2014 "),rI=a("a"),kho=o("M2M100Model"),Sho=o(" (M2M100 model)"),Rho=l(),Ap=a("li"),nne=a("strong"),Bho=o("marian"),Pho=o(" \u2014 "),tI=a("a"),Iho=o("MarianModel"),qho=o(" (Marian model)"),Nho=l(),yp=a("li"),sne=a("strong"),jho=o("maskformer"),Dho=o(" \u2014 "),aI=a("a"),Gho=o("MaskFormerModel"),Oho=o(" (MaskFormer model)"),Vho=l(),Lp=a("li"),lne=a("strong"),Xho=o("mbart"),zho=o(" \u2014 "),nI=a("a"),Qho=o("MBartModel"),Who=o(" (mBART model)"),Hho=l(),xp=a("li"),ine=a("strong"),Uho=o("megatron-bert"),Jho=o(" \u2014 "),sI=a("a"),Yho=o("MegatronBertModel"),Kho=o(" (MegatronBert model)"),Zho=l(),$p=a("li"),dne=a("strong"),epo=o("mobilebert"),opo=o(" \u2014 "),lI=a("a"),rpo=o("MobileBertModel"),tpo=o(" (MobileBERT model)"),apo=l(),kp=a("li"),cne=a("strong"),npo=o("mpnet"),spo=o(" \u2014 "),iI=a("a"),lpo=o("MPNetModel"),ipo=o(" (MPNet model)"),dpo=l(),Sp=a("li"),fne=a("strong"),cpo=o("mt5"),fpo=o(" \u2014 "),dI=a("a"),mpo=o("MT5Model"),gpo=o(" (mT5 model)"),hpo=l(),Rp=a("li"),mne=a("strong"),ppo=o("nystromformer"),upo=o(" \u2014 "),cI=a("a"),_po=o("NystromformerModel"),bpo=o(" (Nystromformer model)"),vpo=l(),Bp=a("li"),gne=a("strong"),Fpo=o("openai-gpt"),Tpo=o(" \u2014 "),fI=a("a"),Mpo=o("OpenAIGPTModel"),Epo=o(" (OpenAI GPT model)"),Cpo=l(),Pp=a("li"),hne=a("strong"),wpo=o("pegasus"),Apo=o(" \u2014 "),mI=a("a"),ypo=o("PegasusModel"),Lpo=o(" (Pegasus model)"),xpo=l(),Ip=a("li"),pne=a("strong"),$po=o("perceiver"),kpo=o(" \u2014 "),gI=a("a"),Spo=o("PerceiverModel"),Rpo=o(" (Perceiver model)"),Bpo=l(),qp=a("li"),une=a("strong"),Ppo=o("plbart"),Ipo=o(" \u2014 "),hI=a("a"),qpo=o("PLBartModel"),Npo=o(" (PLBart model)"),jpo=l(),Np=a("li"),_ne=a("strong"),Dpo=o("poolformer"),Gpo=o(" \u2014 "),pI=a("a"),Opo=o("PoolFormerModel"),Vpo=o(" (PoolFormer model)"),Xpo=l(),jp=a("li"),bne=a("strong"),zpo=o("prophetnet"),Qpo=o(" \u2014 "),uI=a("a"),Wpo=o("ProphetNetModel"),Hpo=o(" (ProphetNet model)"),Upo=l(),Dp=a("li"),vne=a("strong"),Jpo=o("qdqbert"),Ypo=o(" \u2014 "),_I=a("a"),Kpo=o("QDQBertModel"),Zpo=o(" (QDQBert model)"),euo=l(),Gp=a("li"),Fne=a("strong"),ouo=o("reformer"),ruo=o(" \u2014 "),bI=a("a"),tuo=o("ReformerModel"),auo=o(" (Reformer model)"),nuo=l(),Op=a("li"),Tne=a("strong"),suo=o("regnet"),luo=o(" \u2014 "),vI=a("a"),iuo=o("RegNetModel"),duo=o(" (RegNet model)"),cuo=l(),Vp=a("li"),Mne=a("strong"),fuo=o("rembert"),muo=o(" \u2014 "),FI=a("a"),guo=o("RemBertModel"),huo=o(" (RemBERT model)"),puo=l(),Xp=a("li"),Ene=a("strong"),uuo=o("resnet"),_uo=o(" \u2014 "),TI=a("a"),buo=o("ResNetModel"),vuo=o(" (ResNet model)"),Fuo=l(),zp=a("li"),Cne=a("strong"),Tuo=o("retribert"),Muo=o(" \u2014 "),MI=a("a"),Euo=o("RetriBertModel"),Cuo=o(" (RetriBERT model)"),wuo=l(),Qp=a("li"),wne=a("strong"),Auo=o("roberta"),yuo=o(" \u2014 "),EI=a("a"),Luo=o("RobertaModel"),xuo=o(" (RoBERTa model)"),$uo=l(),Wp=a("li"),Ane=a("strong"),kuo=o("roformer"),Suo=o(" \u2014 "),CI=a("a"),Ruo=o("RoFormerModel"),Buo=o(" (RoFormer model)"),Puo=l(),Hp=a("li"),yne=a("strong"),Iuo=o("segformer"),quo=o(" \u2014 "),wI=a("a"),Nuo=o("SegformerModel"),juo=o(" (SegFormer model)"),Duo=l(),Up=a("li"),Lne=a("strong"),Guo=o("sew"),Ouo=o(" \u2014 "),AI=a("a"),Vuo=o("SEWModel"),Xuo=o(" (SEW model)"),zuo=l(),Jp=a("li"),xne=a("strong"),Quo=o("sew-d"),Wuo=o(" \u2014 "),yI=a("a"),Huo=o("SEWDModel"),Uuo=o(" (SEW-D model)"),Juo=l(),Yp=a("li"),$ne=a("strong"),Yuo=o("speech_to_text"),Kuo=o(" \u2014 "),LI=a("a"),Zuo=o("Speech2TextModel"),e_o=o(" (Speech2Text model)"),o_o=l(),Kp=a("li"),kne=a("strong"),r_o=o("splinter"),t_o=o(" \u2014 "),xI=a("a"),a_o=o("SplinterModel"),n_o=o(" (Splinter model)"),s_o=l(),Zp=a("li"),Sne=a("strong"),l_o=o("squeezebert"),i_o=o(" \u2014 "),$I=a("a"),d_o=o("SqueezeBertModel"),c_o=o(" (SqueezeBERT model)"),f_o=l(),eu=a("li"),Rne=a("strong"),m_o=o("swin"),g_o=o(" \u2014 "),kI=a("a"),h_o=o("SwinModel"),p_o=o(" (Swin model)"),u_o=l(),ou=a("li"),Bne=a("strong"),__o=o("t5"),b_o=o(" \u2014 "),SI=a("a"),v_o=o("T5Model"),F_o=o(" (T5 model)"),T_o=l(),ru=a("li"),Pne=a("strong"),M_o=o("tapas"),E_o=o(" \u2014 "),RI=a("a"),C_o=o("TapasModel"),w_o=o(" (TAPAS model)"),A_o=l(),tu=a("li"),Ine=a("strong"),y_o=o("transfo-xl"),L_o=o(" \u2014 "),BI=a("a"),x_o=o("TransfoXLModel"),$_o=o(" (Transformer-XL model)"),k_o=l(),au=a("li"),qne=a("strong"),S_o=o("unispeech"),R_o=o(" \u2014 "),PI=a("a"),B_o=o("UniSpeechModel"),P_o=o(" (UniSpeech model)"),I_o=l(),nu=a("li"),Nne=a("strong"),q_o=o("unispeech-sat"),N_o=o(" \u2014 "),II=a("a"),j_o=o("UniSpeechSatModel"),D_o=o(" (UniSpeechSat model)"),G_o=l(),su=a("li"),jne=a("strong"),O_o=o("van"),V_o=o(" \u2014 "),qI=a("a"),X_o=o("VanModel"),z_o=o(" (VAN model)"),Q_o=l(),lu=a("li"),Dne=a("strong"),W_o=o("vilt"),H_o=o(" \u2014 "),NI=a("a"),U_o=o("ViltModel"),J_o=o(" (ViLT model)"),Y_o=l(),iu=a("li"),Gne=a("strong"),K_o=o("vision-text-dual-encoder"),Z_o=o(" \u2014 "),jI=a("a"),e5o=o("VisionTextDualEncoderModel"),o5o=o(" (VisionTextDualEncoder model)"),r5o=l(),du=a("li"),One=a("strong"),t5o=o("visual_bert"),a5o=o(" \u2014 "),DI=a("a"),n5o=o("VisualBertModel"),s5o=o(" (VisualBert model)"),l5o=l(),cu=a("li"),Vne=a("strong"),i5o=o("vit"),d5o=o(" \u2014 "),GI=a("a"),c5o=o("ViTModel"),f5o=o(" (ViT model)"),m5o=l(),fu=a("li"),Xne=a("strong"),g5o=o("vit_mae"),h5o=o(" \u2014 "),OI=a("a"),p5o=o("ViTMAEModel"),u5o=o(" (ViTMAE model)"),_5o=l(),mu=a("li"),zne=a("strong"),b5o=o("wav2vec2"),v5o=o(" \u2014 "),VI=a("a"),F5o=o("Wav2Vec2Model"),T5o=o(" (Wav2Vec2 model)"),M5o=l(),gu=a("li"),Qne=a("strong"),E5o=o("wavlm"),C5o=o(" \u2014 "),XI=a("a"),w5o=o("WavLMModel"),A5o=o(" (WavLM model)"),y5o=l(),hu=a("li"),Wne=a("strong"),L5o=o("xglm"),x5o=o(" \u2014 "),zI=a("a"),$5o=o("XGLMModel"),k5o=o(" (XGLM model)"),S5o=l(),pu=a("li"),Hne=a("strong"),R5o=o("xlm"),B5o=o(" \u2014 "),QI=a("a"),P5o=o("XLMModel"),I5o=o(" (XLM model)"),q5o=l(),uu=a("li"),Une=a("strong"),N5o=o("xlm-prophetnet"),j5o=o(" \u2014 "),WI=a("a"),D5o=o("XLMProphetNetModel"),G5o=o(" (XLMProphetNet model)"),O5o=l(),_u=a("li"),Jne=a("strong"),V5o=o("xlm-roberta"),X5o=o(" \u2014 "),HI=a("a"),z5o=o("XLMRobertaModel"),Q5o=o(" (XLM-RoBERTa model)"),W5o=l(),bu=a("li"),Yne=a("strong"),H5o=o("xlm-roberta-xl"),U5o=o(" \u2014 "),UI=a("a"),J5o=o("XLMRobertaXLModel"),Y5o=o(" (XLM-RoBERTa-XL model)"),K5o=l(),vu=a("li"),Kne=a("strong"),Z5o=o("xlnet"),e1o=o(" \u2014 "),JI=a("a"),o1o=o("XLNetModel"),r1o=o(" (XLNet model)"),t1o=l(),Fu=a("li"),Zne=a("strong"),a1o=o("yolos"),n1o=o(" \u2014 "),YI=a("a"),s1o=o("YolosModel"),l1o=o(" (YOLOS model)"),i1o=l(),Tu=a("li"),ese=a("strong"),d1o=o("yoso"),c1o=o(" \u2014 "),KI=a("a"),f1o=o("YosoModel"),m1o=o(" (YOSO model)"),g1o=l(),Mu=a("p"),h1o=o("The model is set in evaluation mode by default using "),ose=a("code"),p1o=o("model.eval()"),u1o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rse=a("code"),_1o=o("model.train()"),b1o=l(),F(Eu.$$.fragment),zBe=l(),bi=a("h2"),Cu=a("a"),tse=a("span"),F(n0.$$.fragment),v1o=l(),ase=a("span"),F1o=o("AutoModelForPreTraining"),QBe=l(),xo=a("div"),F(s0.$$.fragment),T1o=l(),vi=a("p"),M1o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ZI=a("a"),E1o=o("from_pretrained()"),C1o=o(" class method or the "),eq=a("a"),w1o=o("from_config()"),A1o=o(` class
method.`),y1o=l(),l0=a("p"),L1o=o("This class cannot be instantiated directly using "),nse=a("code"),x1o=o("__init__()"),$1o=o(" (throws an error)."),k1o=l(),et=a("div"),F(i0.$$.fragment),S1o=l(),sse=a("p"),R1o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),B1o=l(),Fi=a("p"),P1o=o(`Note:
Loading a model from its configuration file does `),lse=a("strong"),I1o=o("not"),q1o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oq=a("a"),N1o=o("from_pretrained()"),j1o=o(" to load the model weights."),D1o=l(),F(wu.$$.fragment),G1o=l(),Ue=a("div"),F(d0.$$.fragment),O1o=l(),ise=a("p"),V1o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),X1o=l(),Ca=a("p"),z1o=o("The model class to instantiate is selected based on the "),dse=a("code"),Q1o=o("model_type"),W1o=o(` property of the config object (either
passed as an argument or loaded from `),cse=a("code"),H1o=o("pretrained_model_name_or_path"),U1o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fse=a("code"),J1o=o("pretrained_model_name_or_path"),Y1o=o(":"),K1o=l(),G=a("ul"),Au=a("li"),mse=a("strong"),Z1o=o("albert"),ebo=o(" \u2014 "),rq=a("a"),obo=o("AlbertForPreTraining"),rbo=o(" (ALBERT model)"),tbo=l(),yu=a("li"),gse=a("strong"),abo=o("bart"),nbo=o(" \u2014 "),tq=a("a"),sbo=o("BartForConditionalGeneration"),lbo=o(" (BART model)"),ibo=l(),Lu=a("li"),hse=a("strong"),dbo=o("bert"),cbo=o(" \u2014 "),aq=a("a"),fbo=o("BertForPreTraining"),mbo=o(" (BERT model)"),gbo=l(),xu=a("li"),pse=a("strong"),hbo=o("big_bird"),pbo=o(" \u2014 "),nq=a("a"),ubo=o("BigBirdForPreTraining"),_bo=o(" (BigBird model)"),bbo=l(),$u=a("li"),use=a("strong"),vbo=o("camembert"),Fbo=o(" \u2014 "),sq=a("a"),Tbo=o("CamembertForMaskedLM"),Mbo=o(" (CamemBERT model)"),Ebo=l(),ku=a("li"),_se=a("strong"),Cbo=o("ctrl"),wbo=o(" \u2014 "),lq=a("a"),Abo=o("CTRLLMHeadModel"),ybo=o(" (CTRL model)"),Lbo=l(),Su=a("li"),bse=a("strong"),xbo=o("data2vec-text"),$bo=o(" \u2014 "),iq=a("a"),kbo=o("Data2VecTextForMaskedLM"),Sbo=o(" (Data2VecText model)"),Rbo=l(),Ru=a("li"),vse=a("strong"),Bbo=o("deberta"),Pbo=o(" \u2014 "),dq=a("a"),Ibo=o("DebertaForMaskedLM"),qbo=o(" (DeBERTa model)"),Nbo=l(),Bu=a("li"),Fse=a("strong"),jbo=o("deberta-v2"),Dbo=o(" \u2014 "),cq=a("a"),Gbo=o("DebertaV2ForMaskedLM"),Obo=o(" (DeBERTa-v2 model)"),Vbo=l(),Pu=a("li"),Tse=a("strong"),Xbo=o("distilbert"),zbo=o(" \u2014 "),fq=a("a"),Qbo=o("DistilBertForMaskedLM"),Wbo=o(" (DistilBERT model)"),Hbo=l(),Iu=a("li"),Mse=a("strong"),Ubo=o("electra"),Jbo=o(" \u2014 "),mq=a("a"),Ybo=o("ElectraForPreTraining"),Kbo=o(" (ELECTRA model)"),Zbo=l(),qu=a("li"),Ese=a("strong"),e2o=o("flaubert"),o2o=o(" \u2014 "),gq=a("a"),r2o=o("FlaubertWithLMHeadModel"),t2o=o(" (FlauBERT model)"),a2o=l(),Nu=a("li"),Cse=a("strong"),n2o=o("fnet"),s2o=o(" \u2014 "),hq=a("a"),l2o=o("FNetForPreTraining"),i2o=o(" (FNet model)"),d2o=l(),ju=a("li"),wse=a("strong"),c2o=o("fsmt"),f2o=o(" \u2014 "),pq=a("a"),m2o=o("FSMTForConditionalGeneration"),g2o=o(" (FairSeq Machine-Translation model)"),h2o=l(),Du=a("li"),Ase=a("strong"),p2o=o("funnel"),u2o=o(" \u2014 "),uq=a("a"),_2o=o("FunnelForPreTraining"),b2o=o(" (Funnel Transformer model)"),v2o=l(),Gu=a("li"),yse=a("strong"),F2o=o("gpt2"),T2o=o(" \u2014 "),_q=a("a"),M2o=o("GPT2LMHeadModel"),E2o=o(" (OpenAI GPT-2 model)"),C2o=l(),Ou=a("li"),Lse=a("strong"),w2o=o("ibert"),A2o=o(" \u2014 "),bq=a("a"),y2o=o("IBertForMaskedLM"),L2o=o(" (I-BERT model)"),x2o=l(),Vu=a("li"),xse=a("strong"),$2o=o("layoutlm"),k2o=o(" \u2014 "),vq=a("a"),S2o=o("LayoutLMForMaskedLM"),R2o=o(" (LayoutLM model)"),B2o=l(),Xu=a("li"),$se=a("strong"),P2o=o("longformer"),I2o=o(" \u2014 "),Fq=a("a"),q2o=o("LongformerForMaskedLM"),N2o=o(" (Longformer model)"),j2o=l(),zu=a("li"),kse=a("strong"),D2o=o("lxmert"),G2o=o(" \u2014 "),Tq=a("a"),O2o=o("LxmertForPreTraining"),V2o=o(" (LXMERT model)"),X2o=l(),Qu=a("li"),Sse=a("strong"),z2o=o("megatron-bert"),Q2o=o(" \u2014 "),Mq=a("a"),W2o=o("MegatronBertForPreTraining"),H2o=o(" (MegatronBert model)"),U2o=l(),Wu=a("li"),Rse=a("strong"),J2o=o("mobilebert"),Y2o=o(" \u2014 "),Eq=a("a"),K2o=o("MobileBertForPreTraining"),Z2o=o(" (MobileBERT model)"),evo=l(),Hu=a("li"),Bse=a("strong"),ovo=o("mpnet"),rvo=o(" \u2014 "),Cq=a("a"),tvo=o("MPNetForMaskedLM"),avo=o(" (MPNet model)"),nvo=l(),Uu=a("li"),Pse=a("strong"),svo=o("openai-gpt"),lvo=o(" \u2014 "),wq=a("a"),ivo=o("OpenAIGPTLMHeadModel"),dvo=o(" (OpenAI GPT model)"),cvo=l(),Ju=a("li"),Ise=a("strong"),fvo=o("retribert"),mvo=o(" \u2014 "),Aq=a("a"),gvo=o("RetriBertModel"),hvo=o(" (RetriBERT model)"),pvo=l(),Yu=a("li"),qse=a("strong"),uvo=o("roberta"),_vo=o(" \u2014 "),yq=a("a"),bvo=o("RobertaForMaskedLM"),vvo=o(" (RoBERTa model)"),Fvo=l(),Ku=a("li"),Nse=a("strong"),Tvo=o("squeezebert"),Mvo=o(" \u2014 "),Lq=a("a"),Evo=o("SqueezeBertForMaskedLM"),Cvo=o(" (SqueezeBERT model)"),wvo=l(),Zu=a("li"),jse=a("strong"),Avo=o("t5"),yvo=o(" \u2014 "),xq=a("a"),Lvo=o("T5ForConditionalGeneration"),xvo=o(" (T5 model)"),$vo=l(),e_=a("li"),Dse=a("strong"),kvo=o("tapas"),Svo=o(" \u2014 "),$q=a("a"),Rvo=o("TapasForMaskedLM"),Bvo=o(" (TAPAS model)"),Pvo=l(),o_=a("li"),Gse=a("strong"),Ivo=o("transfo-xl"),qvo=o(" \u2014 "),kq=a("a"),Nvo=o("TransfoXLLMHeadModel"),jvo=o(" (Transformer-XL model)"),Dvo=l(),r_=a("li"),Ose=a("strong"),Gvo=o("unispeech"),Ovo=o(" \u2014 "),Sq=a("a"),Vvo=o("UniSpeechForPreTraining"),Xvo=o(" (UniSpeech model)"),zvo=l(),t_=a("li"),Vse=a("strong"),Qvo=o("unispeech-sat"),Wvo=o(" \u2014 "),Rq=a("a"),Hvo=o("UniSpeechSatForPreTraining"),Uvo=o(" (UniSpeechSat model)"),Jvo=l(),a_=a("li"),Xse=a("strong"),Yvo=o("visual_bert"),Kvo=o(" \u2014 "),Bq=a("a"),Zvo=o("VisualBertForPreTraining"),eFo=o(" (VisualBert model)"),oFo=l(),n_=a("li"),zse=a("strong"),rFo=o("vit_mae"),tFo=o(" \u2014 "),Pq=a("a"),aFo=o("ViTMAEForPreTraining"),nFo=o(" (ViTMAE model)"),sFo=l(),s_=a("li"),Qse=a("strong"),lFo=o("wav2vec2"),iFo=o(" \u2014 "),Iq=a("a"),dFo=o("Wav2Vec2ForPreTraining"),cFo=o(" (Wav2Vec2 model)"),fFo=l(),l_=a("li"),Wse=a("strong"),mFo=o("xlm"),gFo=o(" \u2014 "),qq=a("a"),hFo=o("XLMWithLMHeadModel"),pFo=o(" (XLM model)"),uFo=l(),i_=a("li"),Hse=a("strong"),_Fo=o("xlm-roberta"),bFo=o(" \u2014 "),Nq=a("a"),vFo=o("XLMRobertaForMaskedLM"),FFo=o(" (XLM-RoBERTa model)"),TFo=l(),d_=a("li"),Use=a("strong"),MFo=o("xlm-roberta-xl"),EFo=o(" \u2014 "),jq=a("a"),CFo=o("XLMRobertaXLForMaskedLM"),wFo=o(" (XLM-RoBERTa-XL model)"),AFo=l(),c_=a("li"),Jse=a("strong"),yFo=o("xlnet"),LFo=o(" \u2014 "),Dq=a("a"),xFo=o("XLNetLMHeadModel"),$Fo=o(" (XLNet model)"),kFo=l(),f_=a("p"),SFo=o("The model is set in evaluation mode by default using "),Yse=a("code"),RFo=o("model.eval()"),BFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kse=a("code"),PFo=o("model.train()"),IFo=l(),F(m_.$$.fragment),WBe=l(),Ti=a("h2"),g_=a("a"),Zse=a("span"),F(c0.$$.fragment),qFo=l(),ele=a("span"),NFo=o("AutoModelForCausalLM"),HBe=l(),$o=a("div"),F(f0.$$.fragment),jFo=l(),Mi=a("p"),DFo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Gq=a("a"),GFo=o("from_pretrained()"),OFo=o(" class method or the "),Oq=a("a"),VFo=o("from_config()"),XFo=o(` class
method.`),zFo=l(),m0=a("p"),QFo=o("This class cannot be instantiated directly using "),ole=a("code"),WFo=o("__init__()"),HFo=o(" (throws an error)."),UFo=l(),ot=a("div"),F(g0.$$.fragment),JFo=l(),rle=a("p"),YFo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),KFo=l(),Ei=a("p"),ZFo=o(`Note:
Loading a model from its configuration file does `),tle=a("strong"),e6o=o("not"),o6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vq=a("a"),r6o=o("from_pretrained()"),t6o=o(" to load the model weights."),a6o=l(),F(h_.$$.fragment),n6o=l(),Je=a("div"),F(h0.$$.fragment),s6o=l(),ale=a("p"),l6o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),i6o=l(),wa=a("p"),d6o=o("The model class to instantiate is selected based on the "),nle=a("code"),c6o=o("model_type"),f6o=o(` property of the config object (either
passed as an argument or loaded from `),sle=a("code"),m6o=o("pretrained_model_name_or_path"),g6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lle=a("code"),h6o=o("pretrained_model_name_or_path"),p6o=o(":"),u6o=l(),z=a("ul"),p_=a("li"),ile=a("strong"),_6o=o("bart"),b6o=o(" \u2014 "),Xq=a("a"),v6o=o("BartForCausalLM"),F6o=o(" (BART model)"),T6o=l(),u_=a("li"),dle=a("strong"),M6o=o("bert"),E6o=o(" \u2014 "),zq=a("a"),C6o=o("BertLMHeadModel"),w6o=o(" (BERT model)"),A6o=l(),__=a("li"),cle=a("strong"),y6o=o("bert-generation"),L6o=o(" \u2014 "),Qq=a("a"),x6o=o("BertGenerationDecoder"),$6o=o(" (Bert Generation model)"),k6o=l(),b_=a("li"),fle=a("strong"),S6o=o("big_bird"),R6o=o(" \u2014 "),Wq=a("a"),B6o=o("BigBirdForCausalLM"),P6o=o(" (BigBird model)"),I6o=l(),v_=a("li"),mle=a("strong"),q6o=o("bigbird_pegasus"),N6o=o(" \u2014 "),Hq=a("a"),j6o=o("BigBirdPegasusForCausalLM"),D6o=o(" (BigBirdPegasus model)"),G6o=l(),F_=a("li"),gle=a("strong"),O6o=o("blenderbot"),V6o=o(" \u2014 "),Uq=a("a"),X6o=o("BlenderbotForCausalLM"),z6o=o(" (Blenderbot model)"),Q6o=l(),T_=a("li"),hle=a("strong"),W6o=o("blenderbot-small"),H6o=o(" \u2014 "),Jq=a("a"),U6o=o("BlenderbotSmallForCausalLM"),J6o=o(" (BlenderbotSmall model)"),Y6o=l(),M_=a("li"),ple=a("strong"),K6o=o("camembert"),Z6o=o(" \u2014 "),Yq=a("a"),eTo=o("CamembertForCausalLM"),oTo=o(" (CamemBERT model)"),rTo=l(),E_=a("li"),ule=a("strong"),tTo=o("ctrl"),aTo=o(" \u2014 "),Kq=a("a"),nTo=o("CTRLLMHeadModel"),sTo=o(" (CTRL model)"),lTo=l(),C_=a("li"),_le=a("strong"),iTo=o("data2vec-text"),dTo=o(" \u2014 "),Zq=a("a"),cTo=o("Data2VecTextForCausalLM"),fTo=o(" (Data2VecText model)"),mTo=l(),w_=a("li"),ble=a("strong"),gTo=o("electra"),hTo=o(" \u2014 "),eN=a("a"),pTo=o("ElectraForCausalLM"),uTo=o(" (ELECTRA model)"),_To=l(),A_=a("li"),vle=a("strong"),bTo=o("gpt2"),vTo=o(" \u2014 "),oN=a("a"),FTo=o("GPT2LMHeadModel"),TTo=o(" (OpenAI GPT-2 model)"),MTo=l(),y_=a("li"),Fle=a("strong"),ETo=o("gpt_neo"),CTo=o(" \u2014 "),rN=a("a"),wTo=o("GPTNeoForCausalLM"),ATo=o(" (GPT Neo model)"),yTo=l(),L_=a("li"),Tle=a("strong"),LTo=o("gptj"),xTo=o(" \u2014 "),tN=a("a"),$To=o("GPTJForCausalLM"),kTo=o(" (GPT-J model)"),STo=l(),x_=a("li"),Mle=a("strong"),RTo=o("marian"),BTo=o(" \u2014 "),aN=a("a"),PTo=o("MarianForCausalLM"),ITo=o(" (Marian model)"),qTo=l(),$_=a("li"),Ele=a("strong"),NTo=o("mbart"),jTo=o(" \u2014 "),nN=a("a"),DTo=o("MBartForCausalLM"),GTo=o(" (mBART model)"),OTo=l(),k_=a("li"),Cle=a("strong"),VTo=o("megatron-bert"),XTo=o(" \u2014 "),sN=a("a"),zTo=o("MegatronBertForCausalLM"),QTo=o(" (MegatronBert model)"),WTo=l(),S_=a("li"),wle=a("strong"),HTo=o("openai-gpt"),UTo=o(" \u2014 "),lN=a("a"),JTo=o("OpenAIGPTLMHeadModel"),YTo=o(" (OpenAI GPT model)"),KTo=l(),R_=a("li"),Ale=a("strong"),ZTo=o("pegasus"),e7o=o(" \u2014 "),iN=a("a"),o7o=o("PegasusForCausalLM"),r7o=o(" (Pegasus model)"),t7o=l(),B_=a("li"),yle=a("strong"),a7o=o("plbart"),n7o=o(" \u2014 "),dN=a("a"),s7o=o("PLBartForCausalLM"),l7o=o(" (PLBart model)"),i7o=l(),P_=a("li"),Lle=a("strong"),d7o=o("prophetnet"),c7o=o(" \u2014 "),cN=a("a"),f7o=o("ProphetNetForCausalLM"),m7o=o(" (ProphetNet model)"),g7o=l(),I_=a("li"),xle=a("strong"),h7o=o("qdqbert"),p7o=o(" \u2014 "),fN=a("a"),u7o=o("QDQBertLMHeadModel"),_7o=o(" (QDQBert model)"),b7o=l(),q_=a("li"),$le=a("strong"),v7o=o("reformer"),F7o=o(" \u2014 "),mN=a("a"),T7o=o("ReformerModelWithLMHead"),M7o=o(" (Reformer model)"),E7o=l(),N_=a("li"),kle=a("strong"),C7o=o("rembert"),w7o=o(" \u2014 "),gN=a("a"),A7o=o("RemBertForCausalLM"),y7o=o(" (RemBERT model)"),L7o=l(),j_=a("li"),Sle=a("strong"),x7o=o("roberta"),$7o=o(" \u2014 "),hN=a("a"),k7o=o("RobertaForCausalLM"),S7o=o(" (RoBERTa model)"),R7o=l(),D_=a("li"),Rle=a("strong"),B7o=o("roformer"),P7o=o(" \u2014 "),pN=a("a"),I7o=o("RoFormerForCausalLM"),q7o=o(" (RoFormer model)"),N7o=l(),G_=a("li"),Ble=a("strong"),j7o=o("speech_to_text_2"),D7o=o(" \u2014 "),uN=a("a"),G7o=o("Speech2Text2ForCausalLM"),O7o=o(" (Speech2Text2 model)"),V7o=l(),O_=a("li"),Ple=a("strong"),X7o=o("transfo-xl"),z7o=o(" \u2014 "),_N=a("a"),Q7o=o("TransfoXLLMHeadModel"),W7o=o(" (Transformer-XL model)"),H7o=l(),V_=a("li"),Ile=a("strong"),U7o=o("trocr"),J7o=o(" \u2014 "),bN=a("a"),Y7o=o("TrOCRForCausalLM"),K7o=o(" (TrOCR model)"),Z7o=l(),X_=a("li"),qle=a("strong"),eMo=o("xglm"),oMo=o(" \u2014 "),vN=a("a"),rMo=o("XGLMForCausalLM"),tMo=o(" (XGLM model)"),aMo=l(),z_=a("li"),Nle=a("strong"),nMo=o("xlm"),sMo=o(" \u2014 "),FN=a("a"),lMo=o("XLMWithLMHeadModel"),iMo=o(" (XLM model)"),dMo=l(),Q_=a("li"),jle=a("strong"),cMo=o("xlm-prophetnet"),fMo=o(" \u2014 "),TN=a("a"),mMo=o("XLMProphetNetForCausalLM"),gMo=o(" (XLMProphetNet model)"),hMo=l(),W_=a("li"),Dle=a("strong"),pMo=o("xlm-roberta"),uMo=o(" \u2014 "),MN=a("a"),_Mo=o("XLMRobertaForCausalLM"),bMo=o(" (XLM-RoBERTa model)"),vMo=l(),H_=a("li"),Gle=a("strong"),FMo=o("xlm-roberta-xl"),TMo=o(" \u2014 "),EN=a("a"),MMo=o("XLMRobertaXLForCausalLM"),EMo=o(" (XLM-RoBERTa-XL model)"),CMo=l(),U_=a("li"),Ole=a("strong"),wMo=o("xlnet"),AMo=o(" \u2014 "),CN=a("a"),yMo=o("XLNetLMHeadModel"),LMo=o(" (XLNet model)"),xMo=l(),J_=a("p"),$Mo=o("The model is set in evaluation mode by default using "),Vle=a("code"),kMo=o("model.eval()"),SMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xle=a("code"),RMo=o("model.train()"),BMo=l(),F(Y_.$$.fragment),UBe=l(),Ci=a("h2"),K_=a("a"),zle=a("span"),F(p0.$$.fragment),PMo=l(),Qle=a("span"),IMo=o("AutoModelForMaskedLM"),JBe=l(),ko=a("div"),F(u0.$$.fragment),qMo=l(),wi=a("p"),NMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),wN=a("a"),jMo=o("from_pretrained()"),DMo=o(" class method or the "),AN=a("a"),GMo=o("from_config()"),OMo=o(` class
method.`),VMo=l(),_0=a("p"),XMo=o("This class cannot be instantiated directly using "),Wle=a("code"),zMo=o("__init__()"),QMo=o(" (throws an error)."),WMo=l(),rt=a("div"),F(b0.$$.fragment),HMo=l(),Hle=a("p"),UMo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),JMo=l(),Ai=a("p"),YMo=o(`Note:
Loading a model from its configuration file does `),Ule=a("strong"),KMo=o("not"),ZMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yN=a("a"),e4o=o("from_pretrained()"),o4o=o(" to load the model weights."),r4o=l(),F(Z_.$$.fragment),t4o=l(),Ye=a("div"),F(v0.$$.fragment),a4o=l(),Jle=a("p"),n4o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),s4o=l(),Aa=a("p"),l4o=o("The model class to instantiate is selected based on the "),Yle=a("code"),i4o=o("model_type"),d4o=o(` property of the config object (either
passed as an argument or loaded from `),Kle=a("code"),c4o=o("pretrained_model_name_or_path"),f4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zle=a("code"),m4o=o("pretrained_model_name_or_path"),g4o=o(":"),h4o=l(),Q=a("ul"),e5=a("li"),eie=a("strong"),p4o=o("albert"),u4o=o(" \u2014 "),LN=a("a"),_4o=o("AlbertForMaskedLM"),b4o=o(" (ALBERT model)"),v4o=l(),o5=a("li"),oie=a("strong"),F4o=o("bart"),T4o=o(" \u2014 "),xN=a("a"),M4o=o("BartForConditionalGeneration"),E4o=o(" (BART model)"),C4o=l(),r5=a("li"),rie=a("strong"),w4o=o("bert"),A4o=o(" \u2014 "),$N=a("a"),y4o=o("BertForMaskedLM"),L4o=o(" (BERT model)"),x4o=l(),t5=a("li"),tie=a("strong"),$4o=o("big_bird"),k4o=o(" \u2014 "),kN=a("a"),S4o=o("BigBirdForMaskedLM"),R4o=o(" (BigBird model)"),B4o=l(),a5=a("li"),aie=a("strong"),P4o=o("camembert"),I4o=o(" \u2014 "),SN=a("a"),q4o=o("CamembertForMaskedLM"),N4o=o(" (CamemBERT model)"),j4o=l(),n5=a("li"),nie=a("strong"),D4o=o("convbert"),G4o=o(" \u2014 "),RN=a("a"),O4o=o("ConvBertForMaskedLM"),V4o=o(" (ConvBERT model)"),X4o=l(),s5=a("li"),sie=a("strong"),z4o=o("data2vec-text"),Q4o=o(" \u2014 "),BN=a("a"),W4o=o("Data2VecTextForMaskedLM"),H4o=o(" (Data2VecText model)"),U4o=l(),l5=a("li"),lie=a("strong"),J4o=o("deberta"),Y4o=o(" \u2014 "),PN=a("a"),K4o=o("DebertaForMaskedLM"),Z4o=o(" (DeBERTa model)"),eEo=l(),i5=a("li"),iie=a("strong"),oEo=o("deberta-v2"),rEo=o(" \u2014 "),IN=a("a"),tEo=o("DebertaV2ForMaskedLM"),aEo=o(" (DeBERTa-v2 model)"),nEo=l(),d5=a("li"),die=a("strong"),sEo=o("distilbert"),lEo=o(" \u2014 "),qN=a("a"),iEo=o("DistilBertForMaskedLM"),dEo=o(" (DistilBERT model)"),cEo=l(),c5=a("li"),cie=a("strong"),fEo=o("electra"),mEo=o(" \u2014 "),NN=a("a"),gEo=o("ElectraForMaskedLM"),hEo=o(" (ELECTRA model)"),pEo=l(),f5=a("li"),fie=a("strong"),uEo=o("flaubert"),_Eo=o(" \u2014 "),jN=a("a"),bEo=o("FlaubertWithLMHeadModel"),vEo=o(" (FlauBERT model)"),FEo=l(),m5=a("li"),mie=a("strong"),TEo=o("fnet"),MEo=o(" \u2014 "),DN=a("a"),EEo=o("FNetForMaskedLM"),CEo=o(" (FNet model)"),wEo=l(),g5=a("li"),gie=a("strong"),AEo=o("funnel"),yEo=o(" \u2014 "),GN=a("a"),LEo=o("FunnelForMaskedLM"),xEo=o(" (Funnel Transformer model)"),$Eo=l(),h5=a("li"),hie=a("strong"),kEo=o("ibert"),SEo=o(" \u2014 "),ON=a("a"),REo=o("IBertForMaskedLM"),BEo=o(" (I-BERT model)"),PEo=l(),p5=a("li"),pie=a("strong"),IEo=o("layoutlm"),qEo=o(" \u2014 "),VN=a("a"),NEo=o("LayoutLMForMaskedLM"),jEo=o(" (LayoutLM model)"),DEo=l(),u5=a("li"),uie=a("strong"),GEo=o("longformer"),OEo=o(" \u2014 "),XN=a("a"),VEo=o("LongformerForMaskedLM"),XEo=o(" (Longformer model)"),zEo=l(),_5=a("li"),_ie=a("strong"),QEo=o("mbart"),WEo=o(" \u2014 "),zN=a("a"),HEo=o("MBartForConditionalGeneration"),UEo=o(" (mBART model)"),JEo=l(),b5=a("li"),bie=a("strong"),YEo=o("megatron-bert"),KEo=o(" \u2014 "),QN=a("a"),ZEo=o("MegatronBertForMaskedLM"),eCo=o(" (MegatronBert model)"),oCo=l(),v5=a("li"),vie=a("strong"),rCo=o("mobilebert"),tCo=o(" \u2014 "),WN=a("a"),aCo=o("MobileBertForMaskedLM"),nCo=o(" (MobileBERT model)"),sCo=l(),F5=a("li"),Fie=a("strong"),lCo=o("mpnet"),iCo=o(" \u2014 "),HN=a("a"),dCo=o("MPNetForMaskedLM"),cCo=o(" (MPNet model)"),fCo=l(),T5=a("li"),Tie=a("strong"),mCo=o("nystromformer"),gCo=o(" \u2014 "),UN=a("a"),hCo=o("NystromformerForMaskedLM"),pCo=o(" (Nystromformer model)"),uCo=l(),M5=a("li"),Mie=a("strong"),_Co=o("perceiver"),bCo=o(" \u2014 "),JN=a("a"),vCo=o("PerceiverForMaskedLM"),FCo=o(" (Perceiver model)"),TCo=l(),E5=a("li"),Eie=a("strong"),MCo=o("qdqbert"),ECo=o(" \u2014 "),YN=a("a"),CCo=o("QDQBertForMaskedLM"),wCo=o(" (QDQBert model)"),ACo=l(),C5=a("li"),Cie=a("strong"),yCo=o("reformer"),LCo=o(" \u2014 "),KN=a("a"),xCo=o("ReformerForMaskedLM"),$Co=o(" (Reformer model)"),kCo=l(),w5=a("li"),wie=a("strong"),SCo=o("rembert"),RCo=o(" \u2014 "),ZN=a("a"),BCo=o("RemBertForMaskedLM"),PCo=o(" (RemBERT model)"),ICo=l(),A5=a("li"),Aie=a("strong"),qCo=o("roberta"),NCo=o(" \u2014 "),ej=a("a"),jCo=o("RobertaForMaskedLM"),DCo=o(" (RoBERTa model)"),GCo=l(),y5=a("li"),yie=a("strong"),OCo=o("roformer"),VCo=o(" \u2014 "),oj=a("a"),XCo=o("RoFormerForMaskedLM"),zCo=o(" (RoFormer model)"),QCo=l(),L5=a("li"),Lie=a("strong"),WCo=o("squeezebert"),HCo=o(" \u2014 "),rj=a("a"),UCo=o("SqueezeBertForMaskedLM"),JCo=o(" (SqueezeBERT model)"),YCo=l(),x5=a("li"),xie=a("strong"),KCo=o("tapas"),ZCo=o(" \u2014 "),tj=a("a"),e3o=o("TapasForMaskedLM"),o3o=o(" (TAPAS model)"),r3o=l(),$5=a("li"),$ie=a("strong"),t3o=o("wav2vec2"),a3o=o(" \u2014 "),kie=a("code"),n3o=o("Wav2Vec2ForMaskedLM"),s3o=o(" (Wav2Vec2 model)"),l3o=l(),k5=a("li"),Sie=a("strong"),i3o=o("xlm"),d3o=o(" \u2014 "),aj=a("a"),c3o=o("XLMWithLMHeadModel"),f3o=o(" (XLM model)"),m3o=l(),S5=a("li"),Rie=a("strong"),g3o=o("xlm-roberta"),h3o=o(" \u2014 "),nj=a("a"),p3o=o("XLMRobertaForMaskedLM"),u3o=o(" (XLM-RoBERTa model)"),_3o=l(),R5=a("li"),Bie=a("strong"),b3o=o("xlm-roberta-xl"),v3o=o(" \u2014 "),sj=a("a"),F3o=o("XLMRobertaXLForMaskedLM"),T3o=o(" (XLM-RoBERTa-XL model)"),M3o=l(),B5=a("li"),Pie=a("strong"),E3o=o("yoso"),C3o=o(" \u2014 "),lj=a("a"),w3o=o("YosoForMaskedLM"),A3o=o(" (YOSO model)"),y3o=l(),P5=a("p"),L3o=o("The model is set in evaluation mode by default using "),Iie=a("code"),x3o=o("model.eval()"),$3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qie=a("code"),k3o=o("model.train()"),S3o=l(),F(I5.$$.fragment),YBe=l(),yi=a("h2"),q5=a("a"),Nie=a("span"),F(F0.$$.fragment),R3o=l(),jie=a("span"),B3o=o("AutoModelForSeq2SeqLM"),KBe=l(),So=a("div"),F(T0.$$.fragment),P3o=l(),Li=a("p"),I3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ij=a("a"),q3o=o("from_pretrained()"),N3o=o(" class method or the "),dj=a("a"),j3o=o("from_config()"),D3o=o(` class
method.`),G3o=l(),M0=a("p"),O3o=o("This class cannot be instantiated directly using "),Die=a("code"),V3o=o("__init__()"),X3o=o(" (throws an error)."),z3o=l(),tt=a("div"),F(E0.$$.fragment),Q3o=l(),Gie=a("p"),W3o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),H3o=l(),xi=a("p"),U3o=o(`Note:
Loading a model from its configuration file does `),Oie=a("strong"),J3o=o("not"),Y3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cj=a("a"),K3o=o("from_pretrained()"),Z3o=o(" to load the model weights."),ewo=l(),F(N5.$$.fragment),owo=l(),Ke=a("div"),F(C0.$$.fragment),rwo=l(),Vie=a("p"),two=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),awo=l(),ya=a("p"),nwo=o("The model class to instantiate is selected based on the "),Xie=a("code"),swo=o("model_type"),lwo=o(` property of the config object (either
passed as an argument or loaded from `),zie=a("code"),iwo=o("pretrained_model_name_or_path"),dwo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qie=a("code"),cwo=o("pretrained_model_name_or_path"),fwo=o(":"),mwo=l(),he=a("ul"),j5=a("li"),Wie=a("strong"),gwo=o("bart"),hwo=o(" \u2014 "),fj=a("a"),pwo=o("BartForConditionalGeneration"),uwo=o(" (BART model)"),_wo=l(),D5=a("li"),Hie=a("strong"),bwo=o("bigbird_pegasus"),vwo=o(" \u2014 "),mj=a("a"),Fwo=o("BigBirdPegasusForConditionalGeneration"),Two=o(" (BigBirdPegasus model)"),Mwo=l(),G5=a("li"),Uie=a("strong"),Ewo=o("blenderbot"),Cwo=o(" \u2014 "),gj=a("a"),wwo=o("BlenderbotForConditionalGeneration"),Awo=o(" (Blenderbot model)"),ywo=l(),O5=a("li"),Jie=a("strong"),Lwo=o("blenderbot-small"),xwo=o(" \u2014 "),hj=a("a"),$wo=o("BlenderbotSmallForConditionalGeneration"),kwo=o(" (BlenderbotSmall model)"),Swo=l(),V5=a("li"),Yie=a("strong"),Rwo=o("encoder-decoder"),Bwo=o(" \u2014 "),pj=a("a"),Pwo=o("EncoderDecoderModel"),Iwo=o(" (Encoder decoder model)"),qwo=l(),X5=a("li"),Kie=a("strong"),Nwo=o("fsmt"),jwo=o(" \u2014 "),uj=a("a"),Dwo=o("FSMTForConditionalGeneration"),Gwo=o(" (FairSeq Machine-Translation model)"),Owo=l(),z5=a("li"),Zie=a("strong"),Vwo=o("led"),Xwo=o(" \u2014 "),_j=a("a"),zwo=o("LEDForConditionalGeneration"),Qwo=o(" (LED model)"),Wwo=l(),Q5=a("li"),ede=a("strong"),Hwo=o("m2m_100"),Uwo=o(" \u2014 "),bj=a("a"),Jwo=o("M2M100ForConditionalGeneration"),Ywo=o(" (M2M100 model)"),Kwo=l(),W5=a("li"),ode=a("strong"),Zwo=o("marian"),eAo=o(" \u2014 "),vj=a("a"),oAo=o("MarianMTModel"),rAo=o(" (Marian model)"),tAo=l(),H5=a("li"),rde=a("strong"),aAo=o("mbart"),nAo=o(" \u2014 "),Fj=a("a"),sAo=o("MBartForConditionalGeneration"),lAo=o(" (mBART model)"),iAo=l(),U5=a("li"),tde=a("strong"),dAo=o("mt5"),cAo=o(" \u2014 "),Tj=a("a"),fAo=o("MT5ForConditionalGeneration"),mAo=o(" (mT5 model)"),gAo=l(),J5=a("li"),ade=a("strong"),hAo=o("pegasus"),pAo=o(" \u2014 "),Mj=a("a"),uAo=o("PegasusForConditionalGeneration"),_Ao=o(" (Pegasus model)"),bAo=l(),Y5=a("li"),nde=a("strong"),vAo=o("plbart"),FAo=o(" \u2014 "),Ej=a("a"),TAo=o("PLBartForConditionalGeneration"),MAo=o(" (PLBart model)"),EAo=l(),K5=a("li"),sde=a("strong"),CAo=o("prophetnet"),wAo=o(" \u2014 "),Cj=a("a"),AAo=o("ProphetNetForConditionalGeneration"),yAo=o(" (ProphetNet model)"),LAo=l(),Z5=a("li"),lde=a("strong"),xAo=o("t5"),$Ao=o(" \u2014 "),wj=a("a"),kAo=o("T5ForConditionalGeneration"),SAo=o(" (T5 model)"),RAo=l(),e1=a("li"),ide=a("strong"),BAo=o("tapex"),PAo=o(" \u2014 "),Aj=a("a"),IAo=o("BartForConditionalGeneration"),qAo=o(" (TAPEX model)"),NAo=l(),o1=a("li"),dde=a("strong"),jAo=o("xlm-prophetnet"),DAo=o(" \u2014 "),yj=a("a"),GAo=o("XLMProphetNetForConditionalGeneration"),OAo=o(" (XLMProphetNet model)"),VAo=l(),r1=a("p"),XAo=o("The model is set in evaluation mode by default using "),cde=a("code"),zAo=o("model.eval()"),QAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fde=a("code"),WAo=o("model.train()"),HAo=l(),F(t1.$$.fragment),ZBe=l(),$i=a("h2"),a1=a("a"),mde=a("span"),F(w0.$$.fragment),UAo=l(),gde=a("span"),JAo=o("AutoModelForSequenceClassification"),ePe=l(),Ro=a("div"),F(A0.$$.fragment),YAo=l(),ki=a("p"),KAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Lj=a("a"),ZAo=o("from_pretrained()"),e0o=o(" class method or the "),xj=a("a"),o0o=o("from_config()"),r0o=o(` class
method.`),t0o=l(),y0=a("p"),a0o=o("This class cannot be instantiated directly using "),hde=a("code"),n0o=o("__init__()"),s0o=o(" (throws an error)."),l0o=l(),at=a("div"),F(L0.$$.fragment),i0o=l(),pde=a("p"),d0o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),c0o=l(),Si=a("p"),f0o=o(`Note:
Loading a model from its configuration file does `),ude=a("strong"),m0o=o("not"),g0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$j=a("a"),h0o=o("from_pretrained()"),p0o=o(" to load the model weights."),u0o=l(),F(n1.$$.fragment),_0o=l(),Ze=a("div"),F(x0.$$.fragment),b0o=l(),_de=a("p"),v0o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),F0o=l(),La=a("p"),T0o=o("The model class to instantiate is selected based on the "),bde=a("code"),M0o=o("model_type"),E0o=o(` property of the config object (either
passed as an argument or loaded from `),vde=a("code"),C0o=o("pretrained_model_name_or_path"),w0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fde=a("code"),A0o=o("pretrained_model_name_or_path"),y0o=o(":"),L0o=l(),q=a("ul"),s1=a("li"),Tde=a("strong"),x0o=o("albert"),$0o=o(" \u2014 "),kj=a("a"),k0o=o("AlbertForSequenceClassification"),S0o=o(" (ALBERT model)"),R0o=l(),l1=a("li"),Mde=a("strong"),B0o=o("bart"),P0o=o(" \u2014 "),Sj=a("a"),I0o=o("BartForSequenceClassification"),q0o=o(" (BART model)"),N0o=l(),i1=a("li"),Ede=a("strong"),j0o=o("bert"),D0o=o(" \u2014 "),Rj=a("a"),G0o=o("BertForSequenceClassification"),O0o=o(" (BERT model)"),V0o=l(),d1=a("li"),Cde=a("strong"),X0o=o("big_bird"),z0o=o(" \u2014 "),Bj=a("a"),Q0o=o("BigBirdForSequenceClassification"),W0o=o(" (BigBird model)"),H0o=l(),c1=a("li"),wde=a("strong"),U0o=o("bigbird_pegasus"),J0o=o(" \u2014 "),Pj=a("a"),Y0o=o("BigBirdPegasusForSequenceClassification"),K0o=o(" (BigBirdPegasus model)"),Z0o=l(),f1=a("li"),Ade=a("strong"),eyo=o("camembert"),oyo=o(" \u2014 "),Ij=a("a"),ryo=o("CamembertForSequenceClassification"),tyo=o(" (CamemBERT model)"),ayo=l(),m1=a("li"),yde=a("strong"),nyo=o("canine"),syo=o(" \u2014 "),qj=a("a"),lyo=o("CanineForSequenceClassification"),iyo=o(" (Canine model)"),dyo=l(),g1=a("li"),Lde=a("strong"),cyo=o("convbert"),fyo=o(" \u2014 "),Nj=a("a"),myo=o("ConvBertForSequenceClassification"),gyo=o(" (ConvBERT model)"),hyo=l(),h1=a("li"),xde=a("strong"),pyo=o("ctrl"),uyo=o(" \u2014 "),jj=a("a"),_yo=o("CTRLForSequenceClassification"),byo=o(" (CTRL model)"),vyo=l(),p1=a("li"),$de=a("strong"),Fyo=o("data2vec-text"),Tyo=o(" \u2014 "),Dj=a("a"),Myo=o("Data2VecTextForSequenceClassification"),Eyo=o(" (Data2VecText model)"),Cyo=l(),u1=a("li"),kde=a("strong"),wyo=o("deberta"),Ayo=o(" \u2014 "),Gj=a("a"),yyo=o("DebertaForSequenceClassification"),Lyo=o(" (DeBERTa model)"),xyo=l(),_1=a("li"),Sde=a("strong"),$yo=o("deberta-v2"),kyo=o(" \u2014 "),Oj=a("a"),Syo=o("DebertaV2ForSequenceClassification"),Ryo=o(" (DeBERTa-v2 model)"),Byo=l(),b1=a("li"),Rde=a("strong"),Pyo=o("distilbert"),Iyo=o(" \u2014 "),Vj=a("a"),qyo=o("DistilBertForSequenceClassification"),Nyo=o(" (DistilBERT model)"),jyo=l(),v1=a("li"),Bde=a("strong"),Dyo=o("electra"),Gyo=o(" \u2014 "),Xj=a("a"),Oyo=o("ElectraForSequenceClassification"),Vyo=o(" (ELECTRA model)"),Xyo=l(),F1=a("li"),Pde=a("strong"),zyo=o("flaubert"),Qyo=o(" \u2014 "),zj=a("a"),Wyo=o("FlaubertForSequenceClassification"),Hyo=o(" (FlauBERT model)"),Uyo=l(),T1=a("li"),Ide=a("strong"),Jyo=o("fnet"),Yyo=o(" \u2014 "),Qj=a("a"),Kyo=o("FNetForSequenceClassification"),Zyo=o(" (FNet model)"),eLo=l(),M1=a("li"),qde=a("strong"),oLo=o("funnel"),rLo=o(" \u2014 "),Wj=a("a"),tLo=o("FunnelForSequenceClassification"),aLo=o(" (Funnel Transformer model)"),nLo=l(),E1=a("li"),Nde=a("strong"),sLo=o("gpt2"),lLo=o(" \u2014 "),Hj=a("a"),iLo=o("GPT2ForSequenceClassification"),dLo=o(" (OpenAI GPT-2 model)"),cLo=l(),C1=a("li"),jde=a("strong"),fLo=o("gpt_neo"),mLo=o(" \u2014 "),Uj=a("a"),gLo=o("GPTNeoForSequenceClassification"),hLo=o(" (GPT Neo model)"),pLo=l(),w1=a("li"),Dde=a("strong"),uLo=o("gptj"),_Lo=o(" \u2014 "),Jj=a("a"),bLo=o("GPTJForSequenceClassification"),vLo=o(" (GPT-J model)"),FLo=l(),A1=a("li"),Gde=a("strong"),TLo=o("ibert"),MLo=o(" \u2014 "),Yj=a("a"),ELo=o("IBertForSequenceClassification"),CLo=o(" (I-BERT model)"),wLo=l(),y1=a("li"),Ode=a("strong"),ALo=o("layoutlm"),yLo=o(" \u2014 "),Kj=a("a"),LLo=o("LayoutLMForSequenceClassification"),xLo=o(" (LayoutLM model)"),$Lo=l(),L1=a("li"),Vde=a("strong"),kLo=o("layoutlmv2"),SLo=o(" \u2014 "),Zj=a("a"),RLo=o("LayoutLMv2ForSequenceClassification"),BLo=o(" (LayoutLMv2 model)"),PLo=l(),x1=a("li"),Xde=a("strong"),ILo=o("led"),qLo=o(" \u2014 "),eD=a("a"),NLo=o("LEDForSequenceClassification"),jLo=o(" (LED model)"),DLo=l(),$1=a("li"),zde=a("strong"),GLo=o("longformer"),OLo=o(" \u2014 "),oD=a("a"),VLo=o("LongformerForSequenceClassification"),XLo=o(" (Longformer model)"),zLo=l(),k1=a("li"),Qde=a("strong"),QLo=o("mbart"),WLo=o(" \u2014 "),rD=a("a"),HLo=o("MBartForSequenceClassification"),ULo=o(" (mBART model)"),JLo=l(),S1=a("li"),Wde=a("strong"),YLo=o("megatron-bert"),KLo=o(" \u2014 "),tD=a("a"),ZLo=o("MegatronBertForSequenceClassification"),e8o=o(" (MegatronBert model)"),o8o=l(),R1=a("li"),Hde=a("strong"),r8o=o("mobilebert"),t8o=o(" \u2014 "),aD=a("a"),a8o=o("MobileBertForSequenceClassification"),n8o=o(" (MobileBERT model)"),s8o=l(),B1=a("li"),Ude=a("strong"),l8o=o("mpnet"),i8o=o(" \u2014 "),nD=a("a"),d8o=o("MPNetForSequenceClassification"),c8o=o(" (MPNet model)"),f8o=l(),P1=a("li"),Jde=a("strong"),m8o=o("nystromformer"),g8o=o(" \u2014 "),sD=a("a"),h8o=o("NystromformerForSequenceClassification"),p8o=o(" (Nystromformer model)"),u8o=l(),I1=a("li"),Yde=a("strong"),_8o=o("openai-gpt"),b8o=o(" \u2014 "),lD=a("a"),v8o=o("OpenAIGPTForSequenceClassification"),F8o=o(" (OpenAI GPT model)"),T8o=l(),q1=a("li"),Kde=a("strong"),M8o=o("perceiver"),E8o=o(" \u2014 "),iD=a("a"),C8o=o("PerceiverForSequenceClassification"),w8o=o(" (Perceiver model)"),A8o=l(),N1=a("li"),Zde=a("strong"),y8o=o("plbart"),L8o=o(" \u2014 "),dD=a("a"),x8o=o("PLBartForSequenceClassification"),$8o=o(" (PLBart model)"),k8o=l(),j1=a("li"),ece=a("strong"),S8o=o("qdqbert"),R8o=o(" \u2014 "),cD=a("a"),B8o=o("QDQBertForSequenceClassification"),P8o=o(" (QDQBert model)"),I8o=l(),D1=a("li"),oce=a("strong"),q8o=o("reformer"),N8o=o(" \u2014 "),fD=a("a"),j8o=o("ReformerForSequenceClassification"),D8o=o(" (Reformer model)"),G8o=l(),G1=a("li"),rce=a("strong"),O8o=o("rembert"),V8o=o(" \u2014 "),mD=a("a"),X8o=o("RemBertForSequenceClassification"),z8o=o(" (RemBERT model)"),Q8o=l(),O1=a("li"),tce=a("strong"),W8o=o("roberta"),H8o=o(" \u2014 "),gD=a("a"),U8o=o("RobertaForSequenceClassification"),J8o=o(" (RoBERTa model)"),Y8o=l(),V1=a("li"),ace=a("strong"),K8o=o("roformer"),Z8o=o(" \u2014 "),hD=a("a"),exo=o("RoFormerForSequenceClassification"),oxo=o(" (RoFormer model)"),rxo=l(),X1=a("li"),nce=a("strong"),txo=o("squeezebert"),axo=o(" \u2014 "),pD=a("a"),nxo=o("SqueezeBertForSequenceClassification"),sxo=o(" (SqueezeBERT model)"),lxo=l(),z1=a("li"),sce=a("strong"),ixo=o("tapas"),dxo=o(" \u2014 "),uD=a("a"),cxo=o("TapasForSequenceClassification"),fxo=o(" (TAPAS model)"),mxo=l(),Q1=a("li"),lce=a("strong"),gxo=o("tapex"),hxo=o(" \u2014 "),_D=a("a"),pxo=o("BartForSequenceClassification"),uxo=o(" (TAPEX model)"),_xo=l(),W1=a("li"),ice=a("strong"),bxo=o("transfo-xl"),vxo=o(" \u2014 "),bD=a("a"),Fxo=o("TransfoXLForSequenceClassification"),Txo=o(" (Transformer-XL model)"),Mxo=l(),H1=a("li"),dce=a("strong"),Exo=o("xlm"),Cxo=o(" \u2014 "),vD=a("a"),wxo=o("XLMForSequenceClassification"),Axo=o(" (XLM model)"),yxo=l(),U1=a("li"),cce=a("strong"),Lxo=o("xlm-roberta"),xxo=o(" \u2014 "),FD=a("a"),$xo=o("XLMRobertaForSequenceClassification"),kxo=o(" (XLM-RoBERTa model)"),Sxo=l(),J1=a("li"),fce=a("strong"),Rxo=o("xlm-roberta-xl"),Bxo=o(" \u2014 "),TD=a("a"),Pxo=o("XLMRobertaXLForSequenceClassification"),Ixo=o(" (XLM-RoBERTa-XL model)"),qxo=l(),Y1=a("li"),mce=a("strong"),Nxo=o("xlnet"),jxo=o(" \u2014 "),MD=a("a"),Dxo=o("XLNetForSequenceClassification"),Gxo=o(" (XLNet model)"),Oxo=l(),K1=a("li"),gce=a("strong"),Vxo=o("yoso"),Xxo=o(" \u2014 "),ED=a("a"),zxo=o("YosoForSequenceClassification"),Qxo=o(" (YOSO model)"),Wxo=l(),Z1=a("p"),Hxo=o("The model is set in evaluation mode by default using "),hce=a("code"),Uxo=o("model.eval()"),Jxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pce=a("code"),Yxo=o("model.train()"),Kxo=l(),F(eb.$$.fragment),oPe=l(),Ri=a("h2"),ob=a("a"),uce=a("span"),F($0.$$.fragment),Zxo=l(),_ce=a("span"),e9o=o("AutoModelForMultipleChoice"),rPe=l(),Bo=a("div"),F(k0.$$.fragment),o9o=l(),Bi=a("p"),r9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),CD=a("a"),t9o=o("from_pretrained()"),a9o=o(" class method or the "),wD=a("a"),n9o=o("from_config()"),s9o=o(` class
method.`),l9o=l(),S0=a("p"),i9o=o("This class cannot be instantiated directly using "),bce=a("code"),d9o=o("__init__()"),c9o=o(" (throws an error)."),f9o=l(),nt=a("div"),F(R0.$$.fragment),m9o=l(),vce=a("p"),g9o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),h9o=l(),Pi=a("p"),p9o=o(`Note:
Loading a model from its configuration file does `),Fce=a("strong"),u9o=o("not"),_9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AD=a("a"),b9o=o("from_pretrained()"),v9o=o(" to load the model weights."),F9o=l(),F(rb.$$.fragment),T9o=l(),eo=a("div"),F(B0.$$.fragment),M9o=l(),Tce=a("p"),E9o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),C9o=l(),xa=a("p"),w9o=o("The model class to instantiate is selected based on the "),Mce=a("code"),A9o=o("model_type"),y9o=o(` property of the config object (either
passed as an argument or loaded from `),Ece=a("code"),L9o=o("pretrained_model_name_or_path"),x9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cce=a("code"),$9o=o("pretrained_model_name_or_path"),k9o=o(":"),S9o=l(),Y=a("ul"),tb=a("li"),wce=a("strong"),R9o=o("albert"),B9o=o(" \u2014 "),yD=a("a"),P9o=o("AlbertForMultipleChoice"),I9o=o(" (ALBERT model)"),q9o=l(),ab=a("li"),Ace=a("strong"),N9o=o("bert"),j9o=o(" \u2014 "),LD=a("a"),D9o=o("BertForMultipleChoice"),G9o=o(" (BERT model)"),O9o=l(),nb=a("li"),yce=a("strong"),V9o=o("big_bird"),X9o=o(" \u2014 "),xD=a("a"),z9o=o("BigBirdForMultipleChoice"),Q9o=o(" (BigBird model)"),W9o=l(),sb=a("li"),Lce=a("strong"),H9o=o("camembert"),U9o=o(" \u2014 "),$D=a("a"),J9o=o("CamembertForMultipleChoice"),Y9o=o(" (CamemBERT model)"),K9o=l(),lb=a("li"),xce=a("strong"),Z9o=o("canine"),e$o=o(" \u2014 "),kD=a("a"),o$o=o("CanineForMultipleChoice"),r$o=o(" (Canine model)"),t$o=l(),ib=a("li"),$ce=a("strong"),a$o=o("convbert"),n$o=o(" \u2014 "),SD=a("a"),s$o=o("ConvBertForMultipleChoice"),l$o=o(" (ConvBERT model)"),i$o=l(),db=a("li"),kce=a("strong"),d$o=o("data2vec-text"),c$o=o(" \u2014 "),RD=a("a"),f$o=o("Data2VecTextForMultipleChoice"),m$o=o(" (Data2VecText model)"),g$o=l(),cb=a("li"),Sce=a("strong"),h$o=o("distilbert"),p$o=o(" \u2014 "),BD=a("a"),u$o=o("DistilBertForMultipleChoice"),_$o=o(" (DistilBERT model)"),b$o=l(),fb=a("li"),Rce=a("strong"),v$o=o("electra"),F$o=o(" \u2014 "),PD=a("a"),T$o=o("ElectraForMultipleChoice"),M$o=o(" (ELECTRA model)"),E$o=l(),mb=a("li"),Bce=a("strong"),C$o=o("flaubert"),w$o=o(" \u2014 "),ID=a("a"),A$o=o("FlaubertForMultipleChoice"),y$o=o(" (FlauBERT model)"),L$o=l(),gb=a("li"),Pce=a("strong"),x$o=o("fnet"),$$o=o(" \u2014 "),qD=a("a"),k$o=o("FNetForMultipleChoice"),S$o=o(" (FNet model)"),R$o=l(),hb=a("li"),Ice=a("strong"),B$o=o("funnel"),P$o=o(" \u2014 "),ND=a("a"),I$o=o("FunnelForMultipleChoice"),q$o=o(" (Funnel Transformer model)"),N$o=l(),pb=a("li"),qce=a("strong"),j$o=o("ibert"),D$o=o(" \u2014 "),jD=a("a"),G$o=o("IBertForMultipleChoice"),O$o=o(" (I-BERT model)"),V$o=l(),ub=a("li"),Nce=a("strong"),X$o=o("longformer"),z$o=o(" \u2014 "),DD=a("a"),Q$o=o("LongformerForMultipleChoice"),W$o=o(" (Longformer model)"),H$o=l(),_b=a("li"),jce=a("strong"),U$o=o("megatron-bert"),J$o=o(" \u2014 "),GD=a("a"),Y$o=o("MegatronBertForMultipleChoice"),K$o=o(" (MegatronBert model)"),Z$o=l(),bb=a("li"),Dce=a("strong"),eko=o("mobilebert"),oko=o(" \u2014 "),OD=a("a"),rko=o("MobileBertForMultipleChoice"),tko=o(" (MobileBERT model)"),ako=l(),vb=a("li"),Gce=a("strong"),nko=o("mpnet"),sko=o(" \u2014 "),VD=a("a"),lko=o("MPNetForMultipleChoice"),iko=o(" (MPNet model)"),dko=l(),Fb=a("li"),Oce=a("strong"),cko=o("nystromformer"),fko=o(" \u2014 "),XD=a("a"),mko=o("NystromformerForMultipleChoice"),gko=o(" (Nystromformer model)"),hko=l(),Tb=a("li"),Vce=a("strong"),pko=o("qdqbert"),uko=o(" \u2014 "),zD=a("a"),_ko=o("QDQBertForMultipleChoice"),bko=o(" (QDQBert model)"),vko=l(),Mb=a("li"),Xce=a("strong"),Fko=o("rembert"),Tko=o(" \u2014 "),QD=a("a"),Mko=o("RemBertForMultipleChoice"),Eko=o(" (RemBERT model)"),Cko=l(),Eb=a("li"),zce=a("strong"),wko=o("roberta"),Ako=o(" \u2014 "),WD=a("a"),yko=o("RobertaForMultipleChoice"),Lko=o(" (RoBERTa model)"),xko=l(),Cb=a("li"),Qce=a("strong"),$ko=o("roformer"),kko=o(" \u2014 "),HD=a("a"),Sko=o("RoFormerForMultipleChoice"),Rko=o(" (RoFormer model)"),Bko=l(),wb=a("li"),Wce=a("strong"),Pko=o("squeezebert"),Iko=o(" \u2014 "),UD=a("a"),qko=o("SqueezeBertForMultipleChoice"),Nko=o(" (SqueezeBERT model)"),jko=l(),Ab=a("li"),Hce=a("strong"),Dko=o("xlm"),Gko=o(" \u2014 "),JD=a("a"),Oko=o("XLMForMultipleChoice"),Vko=o(" (XLM model)"),Xko=l(),yb=a("li"),Uce=a("strong"),zko=o("xlm-roberta"),Qko=o(" \u2014 "),YD=a("a"),Wko=o("XLMRobertaForMultipleChoice"),Hko=o(" (XLM-RoBERTa model)"),Uko=l(),Lb=a("li"),Jce=a("strong"),Jko=o("xlm-roberta-xl"),Yko=o(" \u2014 "),KD=a("a"),Kko=o("XLMRobertaXLForMultipleChoice"),Zko=o(" (XLM-RoBERTa-XL model)"),eSo=l(),xb=a("li"),Yce=a("strong"),oSo=o("xlnet"),rSo=o(" \u2014 "),ZD=a("a"),tSo=o("XLNetForMultipleChoice"),aSo=o(" (XLNet model)"),nSo=l(),$b=a("li"),Kce=a("strong"),sSo=o("yoso"),lSo=o(" \u2014 "),eG=a("a"),iSo=o("YosoForMultipleChoice"),dSo=o(" (YOSO model)"),cSo=l(),kb=a("p"),fSo=o("The model is set in evaluation mode by default using "),Zce=a("code"),mSo=o("model.eval()"),gSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),efe=a("code"),hSo=o("model.train()"),pSo=l(),F(Sb.$$.fragment),tPe=l(),Ii=a("h2"),Rb=a("a"),ofe=a("span"),F(P0.$$.fragment),uSo=l(),rfe=a("span"),_So=o("AutoModelForNextSentencePrediction"),aPe=l(),Po=a("div"),F(I0.$$.fragment),bSo=l(),qi=a("p"),vSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),oG=a("a"),FSo=o("from_pretrained()"),TSo=o(" class method or the "),rG=a("a"),MSo=o("from_config()"),ESo=o(` class
method.`),CSo=l(),q0=a("p"),wSo=o("This class cannot be instantiated directly using "),tfe=a("code"),ASo=o("__init__()"),ySo=o(" (throws an error)."),LSo=l(),st=a("div"),F(N0.$$.fragment),xSo=l(),afe=a("p"),$So=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),kSo=l(),Ni=a("p"),SSo=o(`Note:
Loading a model from its configuration file does `),nfe=a("strong"),RSo=o("not"),BSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tG=a("a"),PSo=o("from_pretrained()"),ISo=o(" to load the model weights."),qSo=l(),F(Bb.$$.fragment),NSo=l(),oo=a("div"),F(j0.$$.fragment),jSo=l(),sfe=a("p"),DSo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),GSo=l(),$a=a("p"),OSo=o("The model class to instantiate is selected based on the "),lfe=a("code"),VSo=o("model_type"),XSo=o(` property of the config object (either
passed as an argument or loaded from `),ife=a("code"),zSo=o("pretrained_model_name_or_path"),QSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dfe=a("code"),WSo=o("pretrained_model_name_or_path"),HSo=o(":"),USo=l(),Ur=a("ul"),Pb=a("li"),cfe=a("strong"),JSo=o("bert"),YSo=o(" \u2014 "),aG=a("a"),KSo=o("BertForNextSentencePrediction"),ZSo=o(" (BERT model)"),eRo=l(),Ib=a("li"),ffe=a("strong"),oRo=o("fnet"),rRo=o(" \u2014 "),nG=a("a"),tRo=o("FNetForNextSentencePrediction"),aRo=o(" (FNet model)"),nRo=l(),qb=a("li"),mfe=a("strong"),sRo=o("megatron-bert"),lRo=o(" \u2014 "),sG=a("a"),iRo=o("MegatronBertForNextSentencePrediction"),dRo=o(" (MegatronBert model)"),cRo=l(),Nb=a("li"),gfe=a("strong"),fRo=o("mobilebert"),mRo=o(" \u2014 "),lG=a("a"),gRo=o("MobileBertForNextSentencePrediction"),hRo=o(" (MobileBERT model)"),pRo=l(),jb=a("li"),hfe=a("strong"),uRo=o("qdqbert"),_Ro=o(" \u2014 "),iG=a("a"),bRo=o("QDQBertForNextSentencePrediction"),vRo=o(" (QDQBert model)"),FRo=l(),Db=a("p"),TRo=o("The model is set in evaluation mode by default using "),pfe=a("code"),MRo=o("model.eval()"),ERo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ufe=a("code"),CRo=o("model.train()"),wRo=l(),F(Gb.$$.fragment),nPe=l(),ji=a("h2"),Ob=a("a"),_fe=a("span"),F(D0.$$.fragment),ARo=l(),bfe=a("span"),yRo=o("AutoModelForTokenClassification"),sPe=l(),Io=a("div"),F(G0.$$.fragment),LRo=l(),Di=a("p"),xRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dG=a("a"),$Ro=o("from_pretrained()"),kRo=o(" class method or the "),cG=a("a"),SRo=o("from_config()"),RRo=o(` class
method.`),BRo=l(),O0=a("p"),PRo=o("This class cannot be instantiated directly using "),vfe=a("code"),IRo=o("__init__()"),qRo=o(" (throws an error)."),NRo=l(),lt=a("div"),F(V0.$$.fragment),jRo=l(),Ffe=a("p"),DRo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),GRo=l(),Gi=a("p"),ORo=o(`Note:
Loading a model from its configuration file does `),Tfe=a("strong"),VRo=o("not"),XRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fG=a("a"),zRo=o("from_pretrained()"),QRo=o(" to load the model weights."),WRo=l(),F(Vb.$$.fragment),HRo=l(),ro=a("div"),F(X0.$$.fragment),URo=l(),Mfe=a("p"),JRo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),YRo=l(),ka=a("p"),KRo=o("The model class to instantiate is selected based on the "),Efe=a("code"),ZRo=o("model_type"),eBo=o(` property of the config object (either
passed as an argument or loaded from `),Cfe=a("code"),oBo=o("pretrained_model_name_or_path"),rBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wfe=a("code"),tBo=o("pretrained_model_name_or_path"),aBo=o(":"),nBo=l(),U=a("ul"),Xb=a("li"),Afe=a("strong"),sBo=o("albert"),lBo=o(" \u2014 "),mG=a("a"),iBo=o("AlbertForTokenClassification"),dBo=o(" (ALBERT model)"),cBo=l(),zb=a("li"),yfe=a("strong"),fBo=o("bert"),mBo=o(" \u2014 "),gG=a("a"),gBo=o("BertForTokenClassification"),hBo=o(" (BERT model)"),pBo=l(),Qb=a("li"),Lfe=a("strong"),uBo=o("big_bird"),_Bo=o(" \u2014 "),hG=a("a"),bBo=o("BigBirdForTokenClassification"),vBo=o(" (BigBird model)"),FBo=l(),Wb=a("li"),xfe=a("strong"),TBo=o("camembert"),MBo=o(" \u2014 "),pG=a("a"),EBo=o("CamembertForTokenClassification"),CBo=o(" (CamemBERT model)"),wBo=l(),Hb=a("li"),$fe=a("strong"),ABo=o("canine"),yBo=o(" \u2014 "),uG=a("a"),LBo=o("CanineForTokenClassification"),xBo=o(" (Canine model)"),$Bo=l(),Ub=a("li"),kfe=a("strong"),kBo=o("convbert"),SBo=o(" \u2014 "),_G=a("a"),RBo=o("ConvBertForTokenClassification"),BBo=o(" (ConvBERT model)"),PBo=l(),Jb=a("li"),Sfe=a("strong"),IBo=o("data2vec-text"),qBo=o(" \u2014 "),bG=a("a"),NBo=o("Data2VecTextForTokenClassification"),jBo=o(" (Data2VecText model)"),DBo=l(),Yb=a("li"),Rfe=a("strong"),GBo=o("deberta"),OBo=o(" \u2014 "),vG=a("a"),VBo=o("DebertaForTokenClassification"),XBo=o(" (DeBERTa model)"),zBo=l(),Kb=a("li"),Bfe=a("strong"),QBo=o("deberta-v2"),WBo=o(" \u2014 "),FG=a("a"),HBo=o("DebertaV2ForTokenClassification"),UBo=o(" (DeBERTa-v2 model)"),JBo=l(),Zb=a("li"),Pfe=a("strong"),YBo=o("distilbert"),KBo=o(" \u2014 "),TG=a("a"),ZBo=o("DistilBertForTokenClassification"),ePo=o(" (DistilBERT model)"),oPo=l(),e2=a("li"),Ife=a("strong"),rPo=o("electra"),tPo=o(" \u2014 "),MG=a("a"),aPo=o("ElectraForTokenClassification"),nPo=o(" (ELECTRA model)"),sPo=l(),o2=a("li"),qfe=a("strong"),lPo=o("flaubert"),iPo=o(" \u2014 "),EG=a("a"),dPo=o("FlaubertForTokenClassification"),cPo=o(" (FlauBERT model)"),fPo=l(),r2=a("li"),Nfe=a("strong"),mPo=o("fnet"),gPo=o(" \u2014 "),CG=a("a"),hPo=o("FNetForTokenClassification"),pPo=o(" (FNet model)"),uPo=l(),t2=a("li"),jfe=a("strong"),_Po=o("funnel"),bPo=o(" \u2014 "),wG=a("a"),vPo=o("FunnelForTokenClassification"),FPo=o(" (Funnel Transformer model)"),TPo=l(),a2=a("li"),Dfe=a("strong"),MPo=o("gpt2"),EPo=o(" \u2014 "),AG=a("a"),CPo=o("GPT2ForTokenClassification"),wPo=o(" (OpenAI GPT-2 model)"),APo=l(),n2=a("li"),Gfe=a("strong"),yPo=o("ibert"),LPo=o(" \u2014 "),yG=a("a"),xPo=o("IBertForTokenClassification"),$Po=o(" (I-BERT model)"),kPo=l(),s2=a("li"),Ofe=a("strong"),SPo=o("layoutlm"),RPo=o(" \u2014 "),LG=a("a"),BPo=o("LayoutLMForTokenClassification"),PPo=o(" (LayoutLM model)"),IPo=l(),l2=a("li"),Vfe=a("strong"),qPo=o("layoutlmv2"),NPo=o(" \u2014 "),xG=a("a"),jPo=o("LayoutLMv2ForTokenClassification"),DPo=o(" (LayoutLMv2 model)"),GPo=l(),i2=a("li"),Xfe=a("strong"),OPo=o("longformer"),VPo=o(" \u2014 "),$G=a("a"),XPo=o("LongformerForTokenClassification"),zPo=o(" (Longformer model)"),QPo=l(),d2=a("li"),zfe=a("strong"),WPo=o("megatron-bert"),HPo=o(" \u2014 "),kG=a("a"),UPo=o("MegatronBertForTokenClassification"),JPo=o(" (MegatronBert model)"),YPo=l(),c2=a("li"),Qfe=a("strong"),KPo=o("mobilebert"),ZPo=o(" \u2014 "),SG=a("a"),eIo=o("MobileBertForTokenClassification"),oIo=o(" (MobileBERT model)"),rIo=l(),f2=a("li"),Wfe=a("strong"),tIo=o("mpnet"),aIo=o(" \u2014 "),RG=a("a"),nIo=o("MPNetForTokenClassification"),sIo=o(" (MPNet model)"),lIo=l(),m2=a("li"),Hfe=a("strong"),iIo=o("nystromformer"),dIo=o(" \u2014 "),BG=a("a"),cIo=o("NystromformerForTokenClassification"),fIo=o(" (Nystromformer model)"),mIo=l(),g2=a("li"),Ufe=a("strong"),gIo=o("qdqbert"),hIo=o(" \u2014 "),PG=a("a"),pIo=o("QDQBertForTokenClassification"),uIo=o(" (QDQBert model)"),_Io=l(),h2=a("li"),Jfe=a("strong"),bIo=o("rembert"),vIo=o(" \u2014 "),IG=a("a"),FIo=o("RemBertForTokenClassification"),TIo=o(" (RemBERT model)"),MIo=l(),p2=a("li"),Yfe=a("strong"),EIo=o("roberta"),CIo=o(" \u2014 "),qG=a("a"),wIo=o("RobertaForTokenClassification"),AIo=o(" (RoBERTa model)"),yIo=l(),u2=a("li"),Kfe=a("strong"),LIo=o("roformer"),xIo=o(" \u2014 "),NG=a("a"),$Io=o("RoFormerForTokenClassification"),kIo=o(" (RoFormer model)"),SIo=l(),_2=a("li"),Zfe=a("strong"),RIo=o("squeezebert"),BIo=o(" \u2014 "),jG=a("a"),PIo=o("SqueezeBertForTokenClassification"),IIo=o(" (SqueezeBERT model)"),qIo=l(),b2=a("li"),eme=a("strong"),NIo=o("xlm"),jIo=o(" \u2014 "),DG=a("a"),DIo=o("XLMForTokenClassification"),GIo=o(" (XLM model)"),OIo=l(),v2=a("li"),ome=a("strong"),VIo=o("xlm-roberta"),XIo=o(" \u2014 "),GG=a("a"),zIo=o("XLMRobertaForTokenClassification"),QIo=o(" (XLM-RoBERTa model)"),WIo=l(),F2=a("li"),rme=a("strong"),HIo=o("xlm-roberta-xl"),UIo=o(" \u2014 "),OG=a("a"),JIo=o("XLMRobertaXLForTokenClassification"),YIo=o(" (XLM-RoBERTa-XL model)"),KIo=l(),T2=a("li"),tme=a("strong"),ZIo=o("xlnet"),eqo=o(" \u2014 "),VG=a("a"),oqo=o("XLNetForTokenClassification"),rqo=o(" (XLNet model)"),tqo=l(),M2=a("li"),ame=a("strong"),aqo=o("yoso"),nqo=o(" \u2014 "),XG=a("a"),sqo=o("YosoForTokenClassification"),lqo=o(" (YOSO model)"),iqo=l(),E2=a("p"),dqo=o("The model is set in evaluation mode by default using "),nme=a("code"),cqo=o("model.eval()"),fqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sme=a("code"),mqo=o("model.train()"),gqo=l(),F(C2.$$.fragment),lPe=l(),Oi=a("h2"),w2=a("a"),lme=a("span"),F(z0.$$.fragment),hqo=l(),ime=a("span"),pqo=o("AutoModelForQuestionAnswering"),iPe=l(),qo=a("div"),F(Q0.$$.fragment),uqo=l(),Vi=a("p"),_qo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),zG=a("a"),bqo=o("from_pretrained()"),vqo=o(" class method or the "),QG=a("a"),Fqo=o("from_config()"),Tqo=o(` class
method.`),Mqo=l(),W0=a("p"),Eqo=o("This class cannot be instantiated directly using "),dme=a("code"),Cqo=o("__init__()"),wqo=o(" (throws an error)."),Aqo=l(),it=a("div"),F(H0.$$.fragment),yqo=l(),cme=a("p"),Lqo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),xqo=l(),Xi=a("p"),$qo=o(`Note:
Loading a model from its configuration file does `),fme=a("strong"),kqo=o("not"),Sqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WG=a("a"),Rqo=o("from_pretrained()"),Bqo=o(" to load the model weights."),Pqo=l(),F(A2.$$.fragment),Iqo=l(),to=a("div"),F(U0.$$.fragment),qqo=l(),mme=a("p"),Nqo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),jqo=l(),Sa=a("p"),Dqo=o("The model class to instantiate is selected based on the "),gme=a("code"),Gqo=o("model_type"),Oqo=o(` property of the config object (either
passed as an argument or loaded from `),hme=a("code"),Vqo=o("pretrained_model_name_or_path"),Xqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pme=a("code"),zqo=o("pretrained_model_name_or_path"),Qqo=o(":"),Wqo=l(),O=a("ul"),y2=a("li"),ume=a("strong"),Hqo=o("albert"),Uqo=o(" \u2014 "),HG=a("a"),Jqo=o("AlbertForQuestionAnswering"),Yqo=o(" (ALBERT model)"),Kqo=l(),L2=a("li"),_me=a("strong"),Zqo=o("bart"),eNo=o(" \u2014 "),UG=a("a"),oNo=o("BartForQuestionAnswering"),rNo=o(" (BART model)"),tNo=l(),x2=a("li"),bme=a("strong"),aNo=o("bert"),nNo=o(" \u2014 "),JG=a("a"),sNo=o("BertForQuestionAnswering"),lNo=o(" (BERT model)"),iNo=l(),$2=a("li"),vme=a("strong"),dNo=o("big_bird"),cNo=o(" \u2014 "),YG=a("a"),fNo=o("BigBirdForQuestionAnswering"),mNo=o(" (BigBird model)"),gNo=l(),k2=a("li"),Fme=a("strong"),hNo=o("bigbird_pegasus"),pNo=o(" \u2014 "),KG=a("a"),uNo=o("BigBirdPegasusForQuestionAnswering"),_No=o(" (BigBirdPegasus model)"),bNo=l(),S2=a("li"),Tme=a("strong"),vNo=o("camembert"),FNo=o(" \u2014 "),ZG=a("a"),TNo=o("CamembertForQuestionAnswering"),MNo=o(" (CamemBERT model)"),ENo=l(),R2=a("li"),Mme=a("strong"),CNo=o("canine"),wNo=o(" \u2014 "),eO=a("a"),ANo=o("CanineForQuestionAnswering"),yNo=o(" (Canine model)"),LNo=l(),B2=a("li"),Eme=a("strong"),xNo=o("convbert"),$No=o(" \u2014 "),oO=a("a"),kNo=o("ConvBertForQuestionAnswering"),SNo=o(" (ConvBERT model)"),RNo=l(),P2=a("li"),Cme=a("strong"),BNo=o("data2vec-text"),PNo=o(" \u2014 "),rO=a("a"),INo=o("Data2VecTextForQuestionAnswering"),qNo=o(" (Data2VecText model)"),NNo=l(),I2=a("li"),wme=a("strong"),jNo=o("deberta"),DNo=o(" \u2014 "),tO=a("a"),GNo=o("DebertaForQuestionAnswering"),ONo=o(" (DeBERTa model)"),VNo=l(),q2=a("li"),Ame=a("strong"),XNo=o("deberta-v2"),zNo=o(" \u2014 "),aO=a("a"),QNo=o("DebertaV2ForQuestionAnswering"),WNo=o(" (DeBERTa-v2 model)"),HNo=l(),N2=a("li"),yme=a("strong"),UNo=o("distilbert"),JNo=o(" \u2014 "),nO=a("a"),YNo=o("DistilBertForQuestionAnswering"),KNo=o(" (DistilBERT model)"),ZNo=l(),j2=a("li"),Lme=a("strong"),ejo=o("electra"),ojo=o(" \u2014 "),sO=a("a"),rjo=o("ElectraForQuestionAnswering"),tjo=o(" (ELECTRA model)"),ajo=l(),D2=a("li"),xme=a("strong"),njo=o("flaubert"),sjo=o(" \u2014 "),lO=a("a"),ljo=o("FlaubertForQuestionAnsweringSimple"),ijo=o(" (FlauBERT model)"),djo=l(),G2=a("li"),$me=a("strong"),cjo=o("fnet"),fjo=o(" \u2014 "),iO=a("a"),mjo=o("FNetForQuestionAnswering"),gjo=o(" (FNet model)"),hjo=l(),O2=a("li"),kme=a("strong"),pjo=o("funnel"),ujo=o(" \u2014 "),dO=a("a"),_jo=o("FunnelForQuestionAnswering"),bjo=o(" (Funnel Transformer model)"),vjo=l(),V2=a("li"),Sme=a("strong"),Fjo=o("gptj"),Tjo=o(" \u2014 "),cO=a("a"),Mjo=o("GPTJForQuestionAnswering"),Ejo=o(" (GPT-J model)"),Cjo=l(),X2=a("li"),Rme=a("strong"),wjo=o("ibert"),Ajo=o(" \u2014 "),fO=a("a"),yjo=o("IBertForQuestionAnswering"),Ljo=o(" (I-BERT model)"),xjo=l(),z2=a("li"),Bme=a("strong"),$jo=o("layoutlmv2"),kjo=o(" \u2014 "),mO=a("a"),Sjo=o("LayoutLMv2ForQuestionAnswering"),Rjo=o(" (LayoutLMv2 model)"),Bjo=l(),Q2=a("li"),Pme=a("strong"),Pjo=o("led"),Ijo=o(" \u2014 "),gO=a("a"),qjo=o("LEDForQuestionAnswering"),Njo=o(" (LED model)"),jjo=l(),W2=a("li"),Ime=a("strong"),Djo=o("longformer"),Gjo=o(" \u2014 "),hO=a("a"),Ojo=o("LongformerForQuestionAnswering"),Vjo=o(" (Longformer model)"),Xjo=l(),H2=a("li"),qme=a("strong"),zjo=o("lxmert"),Qjo=o(" \u2014 "),pO=a("a"),Wjo=o("LxmertForQuestionAnswering"),Hjo=o(" (LXMERT model)"),Ujo=l(),U2=a("li"),Nme=a("strong"),Jjo=o("mbart"),Yjo=o(" \u2014 "),uO=a("a"),Kjo=o("MBartForQuestionAnswering"),Zjo=o(" (mBART model)"),eDo=l(),J2=a("li"),jme=a("strong"),oDo=o("megatron-bert"),rDo=o(" \u2014 "),_O=a("a"),tDo=o("MegatronBertForQuestionAnswering"),aDo=o(" (MegatronBert model)"),nDo=l(),Y2=a("li"),Dme=a("strong"),sDo=o("mobilebert"),lDo=o(" \u2014 "),bO=a("a"),iDo=o("MobileBertForQuestionAnswering"),dDo=o(" (MobileBERT model)"),cDo=l(),K2=a("li"),Gme=a("strong"),fDo=o("mpnet"),mDo=o(" \u2014 "),vO=a("a"),gDo=o("MPNetForQuestionAnswering"),hDo=o(" (MPNet model)"),pDo=l(),Z2=a("li"),Ome=a("strong"),uDo=o("nystromformer"),_Do=o(" \u2014 "),FO=a("a"),bDo=o("NystromformerForQuestionAnswering"),vDo=o(" (Nystromformer model)"),FDo=l(),ev=a("li"),Vme=a("strong"),TDo=o("qdqbert"),MDo=o(" \u2014 "),TO=a("a"),EDo=o("QDQBertForQuestionAnswering"),CDo=o(" (QDQBert model)"),wDo=l(),ov=a("li"),Xme=a("strong"),ADo=o("reformer"),yDo=o(" \u2014 "),MO=a("a"),LDo=o("ReformerForQuestionAnswering"),xDo=o(" (Reformer model)"),$Do=l(),rv=a("li"),zme=a("strong"),kDo=o("rembert"),SDo=o(" \u2014 "),EO=a("a"),RDo=o("RemBertForQuestionAnswering"),BDo=o(" (RemBERT model)"),PDo=l(),tv=a("li"),Qme=a("strong"),IDo=o("roberta"),qDo=o(" \u2014 "),CO=a("a"),NDo=o("RobertaForQuestionAnswering"),jDo=o(" (RoBERTa model)"),DDo=l(),av=a("li"),Wme=a("strong"),GDo=o("roformer"),ODo=o(" \u2014 "),wO=a("a"),VDo=o("RoFormerForQuestionAnswering"),XDo=o(" (RoFormer model)"),zDo=l(),nv=a("li"),Hme=a("strong"),QDo=o("splinter"),WDo=o(" \u2014 "),AO=a("a"),HDo=o("SplinterForQuestionAnswering"),UDo=o(" (Splinter model)"),JDo=l(),sv=a("li"),Ume=a("strong"),YDo=o("squeezebert"),KDo=o(" \u2014 "),yO=a("a"),ZDo=o("SqueezeBertForQuestionAnswering"),eGo=o(" (SqueezeBERT model)"),oGo=l(),lv=a("li"),Jme=a("strong"),rGo=o("xlm"),tGo=o(" \u2014 "),LO=a("a"),aGo=o("XLMForQuestionAnsweringSimple"),nGo=o(" (XLM model)"),sGo=l(),iv=a("li"),Yme=a("strong"),lGo=o("xlm-roberta"),iGo=o(" \u2014 "),xO=a("a"),dGo=o("XLMRobertaForQuestionAnswering"),cGo=o(" (XLM-RoBERTa model)"),fGo=l(),dv=a("li"),Kme=a("strong"),mGo=o("xlm-roberta-xl"),gGo=o(" \u2014 "),$O=a("a"),hGo=o("XLMRobertaXLForQuestionAnswering"),pGo=o(" (XLM-RoBERTa-XL model)"),uGo=l(),cv=a("li"),Zme=a("strong"),_Go=o("xlnet"),bGo=o(" \u2014 "),kO=a("a"),vGo=o("XLNetForQuestionAnsweringSimple"),FGo=o(" (XLNet model)"),TGo=l(),fv=a("li"),ege=a("strong"),MGo=o("yoso"),EGo=o(" \u2014 "),SO=a("a"),CGo=o("YosoForQuestionAnswering"),wGo=o(" (YOSO model)"),AGo=l(),mv=a("p"),yGo=o("The model is set in evaluation mode by default using "),oge=a("code"),LGo=o("model.eval()"),xGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rge=a("code"),$Go=o("model.train()"),kGo=l(),F(gv.$$.fragment),dPe=l(),zi=a("h2"),hv=a("a"),tge=a("span"),F(J0.$$.fragment),SGo=l(),age=a("span"),RGo=o("AutoModelForTableQuestionAnswering"),cPe=l(),No=a("div"),F(Y0.$$.fragment),BGo=l(),Qi=a("p"),PGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),RO=a("a"),IGo=o("from_pretrained()"),qGo=o(" class method or the "),BO=a("a"),NGo=o("from_config()"),jGo=o(` class
method.`),DGo=l(),K0=a("p"),GGo=o("This class cannot be instantiated directly using "),nge=a("code"),OGo=o("__init__()"),VGo=o(" (throws an error)."),XGo=l(),dt=a("div"),F(Z0.$$.fragment),zGo=l(),sge=a("p"),QGo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),WGo=l(),Wi=a("p"),HGo=o(`Note:
Loading a model from its configuration file does `),lge=a("strong"),UGo=o("not"),JGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PO=a("a"),YGo=o("from_pretrained()"),KGo=o(" to load the model weights."),ZGo=l(),F(pv.$$.fragment),eOo=l(),ao=a("div"),F(ey.$$.fragment),oOo=l(),ige=a("p"),rOo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),tOo=l(),Ra=a("p"),aOo=o("The model class to instantiate is selected based on the "),dge=a("code"),nOo=o("model_type"),sOo=o(` property of the config object (either
passed as an argument or loaded from `),cge=a("code"),lOo=o("pretrained_model_name_or_path"),iOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fge=a("code"),dOo=o("pretrained_model_name_or_path"),cOo=o(":"),fOo=l(),mge=a("ul"),uv=a("li"),gge=a("strong"),mOo=o("tapas"),gOo=o(" \u2014 "),IO=a("a"),hOo=o("TapasForQuestionAnswering"),pOo=o(" (TAPAS model)"),uOo=l(),_v=a("p"),_Oo=o("The model is set in evaluation mode by default using "),hge=a("code"),bOo=o("model.eval()"),vOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pge=a("code"),FOo=o("model.train()"),TOo=l(),F(bv.$$.fragment),fPe=l(),Hi=a("h2"),vv=a("a"),uge=a("span"),F(oy.$$.fragment),MOo=l(),_ge=a("span"),EOo=o("AutoModelForImageClassification"),mPe=l(),jo=a("div"),F(ry.$$.fragment),COo=l(),Ui=a("p"),wOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),qO=a("a"),AOo=o("from_pretrained()"),yOo=o(" class method or the "),NO=a("a"),LOo=o("from_config()"),xOo=o(` class
method.`),$Oo=l(),ty=a("p"),kOo=o("This class cannot be instantiated directly using "),bge=a("code"),SOo=o("__init__()"),ROo=o(" (throws an error)."),BOo=l(),ct=a("div"),F(ay.$$.fragment),POo=l(),vge=a("p"),IOo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),qOo=l(),Ji=a("p"),NOo=o(`Note:
Loading a model from its configuration file does `),Fge=a("strong"),jOo=o("not"),DOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jO=a("a"),GOo=o("from_pretrained()"),OOo=o(" to load the model weights."),VOo=l(),F(Fv.$$.fragment),XOo=l(),no=a("div"),F(ny.$$.fragment),zOo=l(),Tge=a("p"),QOo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),WOo=l(),Ba=a("p"),HOo=o("The model class to instantiate is selected based on the "),Mge=a("code"),UOo=o("model_type"),JOo=o(` property of the config object (either
passed as an argument or loaded from `),Ege=a("code"),YOo=o("pretrained_model_name_or_path"),KOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cge=a("code"),ZOo=o("pretrained_model_name_or_path"),eVo=o(":"),oVo=l(),ve=a("ul"),Tv=a("li"),wge=a("strong"),rVo=o("beit"),tVo=o(" \u2014 "),DO=a("a"),aVo=o("BeitForImageClassification"),nVo=o(" (BEiT model)"),sVo=l(),Mv=a("li"),Age=a("strong"),lVo=o("convnext"),iVo=o(" \u2014 "),GO=a("a"),dVo=o("ConvNextForImageClassification"),cVo=o(" (ConvNext model)"),fVo=l(),Ev=a("li"),yge=a("strong"),mVo=o("cvt"),gVo=o(" \u2014 "),OO=a("a"),hVo=o("CvtForImageClassification"),pVo=o(" (Cvt model)"),uVo=l(),Cv=a("li"),Lge=a("strong"),_Vo=o("data2vec-vision"),bVo=o(" \u2014 "),VO=a("a"),vVo=o("Data2VecVisionForImageClassification"),FVo=o(" (Data2VecVision model)"),TVo=l(),xs=a("li"),xge=a("strong"),MVo=o("deit"),EVo=o(" \u2014 "),XO=a("a"),CVo=o("DeiTForImageClassification"),wVo=o(" or "),zO=a("a"),AVo=o("DeiTForImageClassificationWithTeacher"),yVo=o(" (DeiT model)"),LVo=l(),wv=a("li"),$ge=a("strong"),xVo=o("imagegpt"),$Vo=o(" \u2014 "),QO=a("a"),kVo=o("ImageGPTForImageClassification"),SVo=o(" (ImageGPT model)"),RVo=l(),ft=a("li"),kge=a("strong"),BVo=o("perceiver"),PVo=o(" \u2014 "),WO=a("a"),IVo=o("PerceiverForImageClassificationLearned"),qVo=o(" or "),HO=a("a"),NVo=o("PerceiverForImageClassificationFourier"),jVo=o(" or "),UO=a("a"),DVo=o("PerceiverForImageClassificationConvProcessing"),GVo=o(" (Perceiver model)"),OVo=l(),Av=a("li"),Sge=a("strong"),VVo=o("poolformer"),XVo=o(" \u2014 "),JO=a("a"),zVo=o("PoolFormerForImageClassification"),QVo=o(" (PoolFormer model)"),WVo=l(),yv=a("li"),Rge=a("strong"),HVo=o("regnet"),UVo=o(" \u2014 "),YO=a("a"),JVo=o("RegNetForImageClassification"),YVo=o(" (RegNet model)"),KVo=l(),Lv=a("li"),Bge=a("strong"),ZVo=o("resnet"),eXo=o(" \u2014 "),KO=a("a"),oXo=o("ResNetForImageClassification"),rXo=o(" (ResNet model)"),tXo=l(),xv=a("li"),Pge=a("strong"),aXo=o("segformer"),nXo=o(" \u2014 "),ZO=a("a"),sXo=o("SegformerForImageClassification"),lXo=o(" (SegFormer model)"),iXo=l(),$v=a("li"),Ige=a("strong"),dXo=o("swin"),cXo=o(" \u2014 "),eV=a("a"),fXo=o("SwinForImageClassification"),mXo=o(" (Swin model)"),gXo=l(),kv=a("li"),qge=a("strong"),hXo=o("van"),pXo=o(" \u2014 "),oV=a("a"),uXo=o("VanForImageClassification"),_Xo=o(" (VAN model)"),bXo=l(),Sv=a("li"),Nge=a("strong"),vXo=o("vit"),FXo=o(" \u2014 "),rV=a("a"),TXo=o("ViTForImageClassification"),MXo=o(" (ViT model)"),EXo=l(),Rv=a("p"),CXo=o("The model is set in evaluation mode by default using "),jge=a("code"),wXo=o("model.eval()"),AXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dge=a("code"),yXo=o("model.train()"),LXo=l(),F(Bv.$$.fragment),gPe=l(),Yi=a("h2"),Pv=a("a"),Gge=a("span"),F(sy.$$.fragment),xXo=l(),Oge=a("span"),$Xo=o("AutoModelForVision2Seq"),hPe=l(),Do=a("div"),F(ly.$$.fragment),kXo=l(),Ki=a("p"),SXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),tV=a("a"),RXo=o("from_pretrained()"),BXo=o(" class method or the "),aV=a("a"),PXo=o("from_config()"),IXo=o(` class
method.`),qXo=l(),iy=a("p"),NXo=o("This class cannot be instantiated directly using "),Vge=a("code"),jXo=o("__init__()"),DXo=o(" (throws an error)."),GXo=l(),mt=a("div"),F(dy.$$.fragment),OXo=l(),Xge=a("p"),VXo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),XXo=l(),Zi=a("p"),zXo=o(`Note:
Loading a model from its configuration file does `),zge=a("strong"),QXo=o("not"),WXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nV=a("a"),HXo=o("from_pretrained()"),UXo=o(" to load the model weights."),JXo=l(),F(Iv.$$.fragment),YXo=l(),so=a("div"),F(cy.$$.fragment),KXo=l(),Qge=a("p"),ZXo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ezo=l(),Pa=a("p"),ozo=o("The model class to instantiate is selected based on the "),Wge=a("code"),rzo=o("model_type"),tzo=o(` property of the config object (either
passed as an argument or loaded from `),Hge=a("code"),azo=o("pretrained_model_name_or_path"),nzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uge=a("code"),szo=o("pretrained_model_name_or_path"),lzo=o(":"),izo=l(),Jge=a("ul"),qv=a("li"),Yge=a("strong"),dzo=o("vision-encoder-decoder"),czo=o(" \u2014 "),sV=a("a"),fzo=o("VisionEncoderDecoderModel"),mzo=o(" (Vision Encoder decoder model)"),gzo=l(),Nv=a("p"),hzo=o("The model is set in evaluation mode by default using "),Kge=a("code"),pzo=o("model.eval()"),uzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zge=a("code"),_zo=o("model.train()"),bzo=l(),F(jv.$$.fragment),pPe=l(),ed=a("h2"),Dv=a("a"),ehe=a("span"),F(fy.$$.fragment),vzo=l(),ohe=a("span"),Fzo=o("AutoModelForAudioClassification"),uPe=l(),Go=a("div"),F(my.$$.fragment),Tzo=l(),od=a("p"),Mzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),lV=a("a"),Ezo=o("from_pretrained()"),Czo=o(" class method or the "),iV=a("a"),wzo=o("from_config()"),Azo=o(` class
method.`),yzo=l(),gy=a("p"),Lzo=o("This class cannot be instantiated directly using "),rhe=a("code"),xzo=o("__init__()"),$zo=o(" (throws an error)."),kzo=l(),gt=a("div"),F(hy.$$.fragment),Szo=l(),the=a("p"),Rzo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Bzo=l(),rd=a("p"),Pzo=o(`Note:
Loading a model from its configuration file does `),ahe=a("strong"),Izo=o("not"),qzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dV=a("a"),Nzo=o("from_pretrained()"),jzo=o(" to load the model weights."),Dzo=l(),F(Gv.$$.fragment),Gzo=l(),lo=a("div"),F(py.$$.fragment),Ozo=l(),nhe=a("p"),Vzo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Xzo=l(),Ia=a("p"),zzo=o("The model class to instantiate is selected based on the "),she=a("code"),Qzo=o("model_type"),Wzo=o(` property of the config object (either
passed as an argument or loaded from `),lhe=a("code"),Hzo=o("pretrained_model_name_or_path"),Uzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ihe=a("code"),Jzo=o("pretrained_model_name_or_path"),Yzo=o(":"),Kzo=l(),Ne=a("ul"),Ov=a("li"),dhe=a("strong"),Zzo=o("data2vec-audio"),eQo=o(" \u2014 "),cV=a("a"),oQo=o("Data2VecAudioForSequenceClassification"),rQo=o(" (Data2VecAudio model)"),tQo=l(),Vv=a("li"),che=a("strong"),aQo=o("hubert"),nQo=o(" \u2014 "),fV=a("a"),sQo=o("HubertForSequenceClassification"),lQo=o(" (Hubert model)"),iQo=l(),Xv=a("li"),fhe=a("strong"),dQo=o("sew"),cQo=o(" \u2014 "),mV=a("a"),fQo=o("SEWForSequenceClassification"),mQo=o(" (SEW model)"),gQo=l(),zv=a("li"),mhe=a("strong"),hQo=o("sew-d"),pQo=o(" \u2014 "),gV=a("a"),uQo=o("SEWDForSequenceClassification"),_Qo=o(" (SEW-D model)"),bQo=l(),Qv=a("li"),ghe=a("strong"),vQo=o("unispeech"),FQo=o(" \u2014 "),hV=a("a"),TQo=o("UniSpeechForSequenceClassification"),MQo=o(" (UniSpeech model)"),EQo=l(),Wv=a("li"),hhe=a("strong"),CQo=o("unispeech-sat"),wQo=o(" \u2014 "),pV=a("a"),AQo=o("UniSpeechSatForSequenceClassification"),yQo=o(" (UniSpeechSat model)"),LQo=l(),Hv=a("li"),phe=a("strong"),xQo=o("wav2vec2"),$Qo=o(" \u2014 "),uV=a("a"),kQo=o("Wav2Vec2ForSequenceClassification"),SQo=o(" (Wav2Vec2 model)"),RQo=l(),Uv=a("li"),uhe=a("strong"),BQo=o("wavlm"),PQo=o(" \u2014 "),_V=a("a"),IQo=o("WavLMForSequenceClassification"),qQo=o(" (WavLM model)"),NQo=l(),Jv=a("p"),jQo=o("The model is set in evaluation mode by default using "),_he=a("code"),DQo=o("model.eval()"),GQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bhe=a("code"),OQo=o("model.train()"),VQo=l(),F(Yv.$$.fragment),_Pe=l(),td=a("h2"),Kv=a("a"),vhe=a("span"),F(uy.$$.fragment),XQo=l(),Fhe=a("span"),zQo=o("AutoModelForAudioFrameClassification"),bPe=l(),Oo=a("div"),F(_y.$$.fragment),QQo=l(),ad=a("p"),WQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),bV=a("a"),HQo=o("from_pretrained()"),UQo=o(" class method or the "),vV=a("a"),JQo=o("from_config()"),YQo=o(` class
method.`),KQo=l(),by=a("p"),ZQo=o("This class cannot be instantiated directly using "),The=a("code"),eWo=o("__init__()"),oWo=o(" (throws an error)."),rWo=l(),ht=a("div"),F(vy.$$.fragment),tWo=l(),Mhe=a("p"),aWo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),nWo=l(),nd=a("p"),sWo=o(`Note:
Loading a model from its configuration file does `),Ehe=a("strong"),lWo=o("not"),iWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FV=a("a"),dWo=o("from_pretrained()"),cWo=o(" to load the model weights."),fWo=l(),F(Zv.$$.fragment),mWo=l(),io=a("div"),F(Fy.$$.fragment),gWo=l(),Che=a("p"),hWo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),pWo=l(),qa=a("p"),uWo=o("The model class to instantiate is selected based on the "),whe=a("code"),_Wo=o("model_type"),bWo=o(` property of the config object (either
passed as an argument or loaded from `),Ahe=a("code"),vWo=o("pretrained_model_name_or_path"),FWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yhe=a("code"),TWo=o("pretrained_model_name_or_path"),MWo=o(":"),EWo=l(),Na=a("ul"),eF=a("li"),Lhe=a("strong"),CWo=o("data2vec-audio"),wWo=o(" \u2014 "),TV=a("a"),AWo=o("Data2VecAudioForAudioFrameClassification"),yWo=o(" (Data2VecAudio model)"),LWo=l(),oF=a("li"),xhe=a("strong"),xWo=o("unispeech-sat"),$Wo=o(" \u2014 "),MV=a("a"),kWo=o("UniSpeechSatForAudioFrameClassification"),SWo=o(" (UniSpeechSat model)"),RWo=l(),rF=a("li"),$he=a("strong"),BWo=o("wav2vec2"),PWo=o(" \u2014 "),EV=a("a"),IWo=o("Wav2Vec2ForAudioFrameClassification"),qWo=o(" (Wav2Vec2 model)"),NWo=l(),tF=a("li"),khe=a("strong"),jWo=o("wavlm"),DWo=o(" \u2014 "),CV=a("a"),GWo=o("WavLMForAudioFrameClassification"),OWo=o(" (WavLM model)"),VWo=l(),aF=a("p"),XWo=o("The model is set in evaluation mode by default using "),She=a("code"),zWo=o("model.eval()"),QWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rhe=a("code"),WWo=o("model.train()"),HWo=l(),F(nF.$$.fragment),vPe=l(),sd=a("h2"),sF=a("a"),Bhe=a("span"),F(Ty.$$.fragment),UWo=l(),Phe=a("span"),JWo=o("AutoModelForCTC"),FPe=l(),Vo=a("div"),F(My.$$.fragment),YWo=l(),ld=a("p"),KWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),wV=a("a"),ZWo=o("from_pretrained()"),eHo=o(" class method or the "),AV=a("a"),oHo=o("from_config()"),rHo=o(` class
method.`),tHo=l(),Ey=a("p"),aHo=o("This class cannot be instantiated directly using "),Ihe=a("code"),nHo=o("__init__()"),sHo=o(" (throws an error)."),lHo=l(),pt=a("div"),F(Cy.$$.fragment),iHo=l(),qhe=a("p"),dHo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),cHo=l(),id=a("p"),fHo=o(`Note:
Loading a model from its configuration file does `),Nhe=a("strong"),mHo=o("not"),gHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yV=a("a"),hHo=o("from_pretrained()"),pHo=o(" to load the model weights."),uHo=l(),F(lF.$$.fragment),_Ho=l(),co=a("div"),F(wy.$$.fragment),bHo=l(),jhe=a("p"),vHo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),FHo=l(),ja=a("p"),THo=o("The model class to instantiate is selected based on the "),Dhe=a("code"),MHo=o("model_type"),EHo=o(` property of the config object (either
passed as an argument or loaded from `),Ghe=a("code"),CHo=o("pretrained_model_name_or_path"),wHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ohe=a("code"),AHo=o("pretrained_model_name_or_path"),yHo=o(":"),LHo=l(),je=a("ul"),iF=a("li"),Vhe=a("strong"),xHo=o("data2vec-audio"),$Ho=o(" \u2014 "),LV=a("a"),kHo=o("Data2VecAudioForCTC"),SHo=o(" (Data2VecAudio model)"),RHo=l(),dF=a("li"),Xhe=a("strong"),BHo=o("hubert"),PHo=o(" \u2014 "),xV=a("a"),IHo=o("HubertForCTC"),qHo=o(" (Hubert model)"),NHo=l(),cF=a("li"),zhe=a("strong"),jHo=o("sew"),DHo=o(" \u2014 "),$V=a("a"),GHo=o("SEWForCTC"),OHo=o(" (SEW model)"),VHo=l(),fF=a("li"),Qhe=a("strong"),XHo=o("sew-d"),zHo=o(" \u2014 "),kV=a("a"),QHo=o("SEWDForCTC"),WHo=o(" (SEW-D model)"),HHo=l(),mF=a("li"),Whe=a("strong"),UHo=o("unispeech"),JHo=o(" \u2014 "),SV=a("a"),YHo=o("UniSpeechForCTC"),KHo=o(" (UniSpeech model)"),ZHo=l(),gF=a("li"),Hhe=a("strong"),eUo=o("unispeech-sat"),oUo=o(" \u2014 "),RV=a("a"),rUo=o("UniSpeechSatForCTC"),tUo=o(" (UniSpeechSat model)"),aUo=l(),hF=a("li"),Uhe=a("strong"),nUo=o("wav2vec2"),sUo=o(" \u2014 "),BV=a("a"),lUo=o("Wav2Vec2ForCTC"),iUo=o(" (Wav2Vec2 model)"),dUo=l(),pF=a("li"),Jhe=a("strong"),cUo=o("wavlm"),fUo=o(" \u2014 "),PV=a("a"),mUo=o("WavLMForCTC"),gUo=o(" (WavLM model)"),hUo=l(),uF=a("p"),pUo=o("The model is set in evaluation mode by default using "),Yhe=a("code"),uUo=o("model.eval()"),_Uo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Khe=a("code"),bUo=o("model.train()"),vUo=l(),F(_F.$$.fragment),TPe=l(),dd=a("h2"),bF=a("a"),Zhe=a("span"),F(Ay.$$.fragment),FUo=l(),epe=a("span"),TUo=o("AutoModelForSpeechSeq2Seq"),MPe=l(),Xo=a("div"),F(yy.$$.fragment),MUo=l(),cd=a("p"),EUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),IV=a("a"),CUo=o("from_pretrained()"),wUo=o(" class method or the "),qV=a("a"),AUo=o("from_config()"),yUo=o(` class
method.`),LUo=l(),Ly=a("p"),xUo=o("This class cannot be instantiated directly using "),ope=a("code"),$Uo=o("__init__()"),kUo=o(" (throws an error)."),SUo=l(),ut=a("div"),F(xy.$$.fragment),RUo=l(),rpe=a("p"),BUo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),PUo=l(),fd=a("p"),IUo=o(`Note:
Loading a model from its configuration file does `),tpe=a("strong"),qUo=o("not"),NUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NV=a("a"),jUo=o("from_pretrained()"),DUo=o(" to load the model weights."),GUo=l(),F(vF.$$.fragment),OUo=l(),fo=a("div"),F($y.$$.fragment),VUo=l(),ape=a("p"),XUo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),zUo=l(),Da=a("p"),QUo=o("The model class to instantiate is selected based on the "),npe=a("code"),WUo=o("model_type"),HUo=o(` property of the config object (either
passed as an argument or loaded from `),spe=a("code"),UUo=o("pretrained_model_name_or_path"),JUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lpe=a("code"),YUo=o("pretrained_model_name_or_path"),KUo=o(":"),ZUo=l(),ky=a("ul"),FF=a("li"),ipe=a("strong"),eJo=o("speech-encoder-decoder"),oJo=o(" \u2014 "),jV=a("a"),rJo=o("SpeechEncoderDecoderModel"),tJo=o(" (Speech Encoder decoder model)"),aJo=l(),TF=a("li"),dpe=a("strong"),nJo=o("speech_to_text"),sJo=o(" \u2014 "),DV=a("a"),lJo=o("Speech2TextForConditionalGeneration"),iJo=o(" (Speech2Text model)"),dJo=l(),MF=a("p"),cJo=o("The model is set in evaluation mode by default using "),cpe=a("code"),fJo=o("model.eval()"),mJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fpe=a("code"),gJo=o("model.train()"),hJo=l(),F(EF.$$.fragment),EPe=l(),md=a("h2"),CF=a("a"),mpe=a("span"),F(Sy.$$.fragment),pJo=l(),gpe=a("span"),uJo=o("AutoModelForAudioXVector"),CPe=l(),zo=a("div"),F(Ry.$$.fragment),_Jo=l(),gd=a("p"),bJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),GV=a("a"),vJo=o("from_pretrained()"),FJo=o(" class method or the "),OV=a("a"),TJo=o("from_config()"),MJo=o(` class
method.`),EJo=l(),By=a("p"),CJo=o("This class cannot be instantiated directly using "),hpe=a("code"),wJo=o("__init__()"),AJo=o(" (throws an error)."),yJo=l(),_t=a("div"),F(Py.$$.fragment),LJo=l(),ppe=a("p"),xJo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),$Jo=l(),hd=a("p"),kJo=o(`Note:
Loading a model from its configuration file does `),upe=a("strong"),SJo=o("not"),RJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VV=a("a"),BJo=o("from_pretrained()"),PJo=o(" to load the model weights."),IJo=l(),F(wF.$$.fragment),qJo=l(),mo=a("div"),F(Iy.$$.fragment),NJo=l(),_pe=a("p"),jJo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),DJo=l(),Ga=a("p"),GJo=o("The model class to instantiate is selected based on the "),bpe=a("code"),OJo=o("model_type"),VJo=o(` property of the config object (either
passed as an argument or loaded from `),vpe=a("code"),XJo=o("pretrained_model_name_or_path"),zJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fpe=a("code"),QJo=o("pretrained_model_name_or_path"),WJo=o(":"),HJo=l(),Oa=a("ul"),AF=a("li"),Tpe=a("strong"),UJo=o("data2vec-audio"),JJo=o(" \u2014 "),XV=a("a"),YJo=o("Data2VecAudioForXVector"),KJo=o(" (Data2VecAudio model)"),ZJo=l(),yF=a("li"),Mpe=a("strong"),eYo=o("unispeech-sat"),oYo=o(" \u2014 "),zV=a("a"),rYo=o("UniSpeechSatForXVector"),tYo=o(" (UniSpeechSat model)"),aYo=l(),LF=a("li"),Epe=a("strong"),nYo=o("wav2vec2"),sYo=o(" \u2014 "),QV=a("a"),lYo=o("Wav2Vec2ForXVector"),iYo=o(" (Wav2Vec2 model)"),dYo=l(),xF=a("li"),Cpe=a("strong"),cYo=o("wavlm"),fYo=o(" \u2014 "),WV=a("a"),mYo=o("WavLMForXVector"),gYo=o(" (WavLM model)"),hYo=l(),$F=a("p"),pYo=o("The model is set in evaluation mode by default using "),wpe=a("code"),uYo=o("model.eval()"),_Yo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ape=a("code"),bYo=o("model.train()"),vYo=l(),F(kF.$$.fragment),wPe=l(),pd=a("h2"),SF=a("a"),ype=a("span"),F(qy.$$.fragment),FYo=l(),Lpe=a("span"),TYo=o("AutoModelForMaskedImageModeling"),APe=l(),Qo=a("div"),F(Ny.$$.fragment),MYo=l(),ud=a("p"),EYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),HV=a("a"),CYo=o("from_pretrained()"),wYo=o(" class method or the "),UV=a("a"),AYo=o("from_config()"),yYo=o(` class
method.`),LYo=l(),jy=a("p"),xYo=o("This class cannot be instantiated directly using "),xpe=a("code"),$Yo=o("__init__()"),kYo=o(" (throws an error)."),SYo=l(),bt=a("div"),F(Dy.$$.fragment),RYo=l(),$pe=a("p"),BYo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),PYo=l(),_d=a("p"),IYo=o(`Note:
Loading a model from its configuration file does `),kpe=a("strong"),qYo=o("not"),NYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JV=a("a"),jYo=o("from_pretrained()"),DYo=o(" to load the model weights."),GYo=l(),F(RF.$$.fragment),OYo=l(),go=a("div"),F(Gy.$$.fragment),VYo=l(),Spe=a("p"),XYo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),zYo=l(),Va=a("p"),QYo=o("The model class to instantiate is selected based on the "),Rpe=a("code"),WYo=o("model_type"),HYo=o(` property of the config object (either
passed as an argument or loaded from `),Bpe=a("code"),UYo=o("pretrained_model_name_or_path"),JYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ppe=a("code"),YYo=o("pretrained_model_name_or_path"),KYo=o(":"),ZYo=l(),bd=a("ul"),BF=a("li"),Ipe=a("strong"),eKo=o("deit"),oKo=o(" \u2014 "),YV=a("a"),rKo=o("DeiTForMaskedImageModeling"),tKo=o(" (DeiT model)"),aKo=l(),PF=a("li"),qpe=a("strong"),nKo=o("swin"),sKo=o(" \u2014 "),KV=a("a"),lKo=o("SwinForMaskedImageModeling"),iKo=o(" (Swin model)"),dKo=l(),IF=a("li"),Npe=a("strong"),cKo=o("vit"),fKo=o(" \u2014 "),ZV=a("a"),mKo=o("ViTForMaskedImageModeling"),gKo=o(" (ViT model)"),hKo=l(),qF=a("p"),pKo=o("The model is set in evaluation mode by default using "),jpe=a("code"),uKo=o("model.eval()"),_Ko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dpe=a("code"),bKo=o("model.train()"),vKo=l(),F(NF.$$.fragment),yPe=l(),vd=a("h2"),jF=a("a"),Gpe=a("span"),F(Oy.$$.fragment),FKo=l(),Ope=a("span"),TKo=o("AutoModelForObjectDetection"),LPe=l(),Wo=a("div"),F(Vy.$$.fragment),MKo=l(),Fd=a("p"),EKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),eX=a("a"),CKo=o("from_pretrained()"),wKo=o(" class method or the "),oX=a("a"),AKo=o("from_config()"),yKo=o(` class
method.`),LKo=l(),Xy=a("p"),xKo=o("This class cannot be instantiated directly using "),Vpe=a("code"),$Ko=o("__init__()"),kKo=o(" (throws an error)."),SKo=l(),vt=a("div"),F(zy.$$.fragment),RKo=l(),Xpe=a("p"),BKo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),PKo=l(),Td=a("p"),IKo=o(`Note:
Loading a model from its configuration file does `),zpe=a("strong"),qKo=o("not"),NKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rX=a("a"),jKo=o("from_pretrained()"),DKo=o(" to load the model weights."),GKo=l(),F(DF.$$.fragment),OKo=l(),ho=a("div"),F(Qy.$$.fragment),VKo=l(),Qpe=a("p"),XKo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),zKo=l(),Xa=a("p"),QKo=o("The model class to instantiate is selected based on the "),Wpe=a("code"),WKo=o("model_type"),HKo=o(` property of the config object (either
passed as an argument or loaded from `),Hpe=a("code"),UKo=o("pretrained_model_name_or_path"),JKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Upe=a("code"),YKo=o("pretrained_model_name_or_path"),KKo=o(":"),ZKo=l(),Wy=a("ul"),GF=a("li"),Jpe=a("strong"),eZo=o("detr"),oZo=o(" \u2014 "),tX=a("a"),rZo=o("DetrForObjectDetection"),tZo=o(" (DETR model)"),aZo=l(),OF=a("li"),Ype=a("strong"),nZo=o("yolos"),sZo=o(" \u2014 "),aX=a("a"),lZo=o("YolosForObjectDetection"),iZo=o(" (YOLOS model)"),dZo=l(),VF=a("p"),cZo=o("The model is set in evaluation mode by default using "),Kpe=a("code"),fZo=o("model.eval()"),mZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zpe=a("code"),gZo=o("model.train()"),hZo=l(),F(XF.$$.fragment),xPe=l(),Md=a("h2"),zF=a("a"),eue=a("span"),F(Hy.$$.fragment),pZo=l(),oue=a("span"),uZo=o("AutoModelForImageSegmentation"),$Pe=l(),Ho=a("div"),F(Uy.$$.fragment),_Zo=l(),Ed=a("p"),bZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),nX=a("a"),vZo=o("from_pretrained()"),FZo=o(" class method or the "),sX=a("a"),TZo=o("from_config()"),MZo=o(` class
method.`),EZo=l(),Jy=a("p"),CZo=o("This class cannot be instantiated directly using "),rue=a("code"),wZo=o("__init__()"),AZo=o(" (throws an error)."),yZo=l(),Ft=a("div"),F(Yy.$$.fragment),LZo=l(),tue=a("p"),xZo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),$Zo=l(),Cd=a("p"),kZo=o(`Note:
Loading a model from its configuration file does `),aue=a("strong"),SZo=o("not"),RZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lX=a("a"),BZo=o("from_pretrained()"),PZo=o(" to load the model weights."),IZo=l(),F(QF.$$.fragment),qZo=l(),po=a("div"),F(Ky.$$.fragment),NZo=l(),nue=a("p"),jZo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),DZo=l(),za=a("p"),GZo=o("The model class to instantiate is selected based on the "),sue=a("code"),OZo=o("model_type"),VZo=o(` property of the config object (either
passed as an argument or loaded from `),lue=a("code"),XZo=o("pretrained_model_name_or_path"),zZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iue=a("code"),QZo=o("pretrained_model_name_or_path"),WZo=o(":"),HZo=l(),due=a("ul"),WF=a("li"),cue=a("strong"),UZo=o("detr"),JZo=o(" \u2014 "),iX=a("a"),YZo=o("DetrForSegmentation"),KZo=o(" (DETR model)"),ZZo=l(),HF=a("p"),eer=o("The model is set in evaluation mode by default using "),fue=a("code"),oer=o("model.eval()"),rer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mue=a("code"),ter=o("model.train()"),aer=l(),F(UF.$$.fragment),kPe=l(),wd=a("h2"),JF=a("a"),gue=a("span"),F(Zy.$$.fragment),ner=l(),hue=a("span"),ser=o("AutoModelForSemanticSegmentation"),SPe=l(),Uo=a("div"),F(eL.$$.fragment),ler=l(),Ad=a("p"),ier=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),dX=a("a"),der=o("from_pretrained()"),cer=o(" class method or the "),cX=a("a"),fer=o("from_config()"),mer=o(` class
method.`),ger=l(),oL=a("p"),her=o("This class cannot be instantiated directly using "),pue=a("code"),per=o("__init__()"),uer=o(" (throws an error)."),_er=l(),Tt=a("div"),F(rL.$$.fragment),ber=l(),uue=a("p"),ver=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Fer=l(),yd=a("p"),Ter=o(`Note:
Loading a model from its configuration file does `),_ue=a("strong"),Mer=o("not"),Eer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fX=a("a"),Cer=o("from_pretrained()"),wer=o(" to load the model weights."),Aer=l(),F(YF.$$.fragment),yer=l(),uo=a("div"),F(tL.$$.fragment),Ler=l(),bue=a("p"),xer=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),$er=l(),Qa=a("p"),ker=o("The model class to instantiate is selected based on the "),vue=a("code"),Ser=o("model_type"),Rer=o(` property of the config object (either
passed as an argument or loaded from `),Fue=a("code"),Ber=o("pretrained_model_name_or_path"),Per=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tue=a("code"),Ier=o("pretrained_model_name_or_path"),qer=o(":"),Ner=l(),Wa=a("ul"),KF=a("li"),Mue=a("strong"),jer=o("beit"),Der=o(" \u2014 "),mX=a("a"),Ger=o("BeitForSemanticSegmentation"),Oer=o(" (BEiT model)"),Ver=l(),ZF=a("li"),Eue=a("strong"),Xer=o("data2vec-vision"),zer=o(" \u2014 "),gX=a("a"),Qer=o("Data2VecVisionForSemanticSegmentation"),Wer=o(" (Data2VecVision model)"),Her=l(),e6=a("li"),Cue=a("strong"),Uer=o("dpt"),Jer=o(" \u2014 "),hX=a("a"),Yer=o("DPTForSemanticSegmentation"),Ker=o(" (DPT model)"),Zer=l(),o6=a("li"),wue=a("strong"),eor=o("segformer"),oor=o(" \u2014 "),pX=a("a"),ror=o("SegformerForSemanticSegmentation"),tor=o(" (SegFormer model)"),aor=l(),r6=a("p"),nor=o("The model is set in evaluation mode by default using "),Aue=a("code"),sor=o("model.eval()"),lor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yue=a("code"),ior=o("model.train()"),dor=l(),F(t6.$$.fragment),RPe=l(),Ld=a("h2"),a6=a("a"),Lue=a("span"),F(aL.$$.fragment),cor=l(),xue=a("span"),mor=o("AutoModelForInstanceSegmentation"),BPe=l(),Jo=a("div"),F(nL.$$.fragment),gor=l(),xd=a("p"),hor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),uX=a("a"),por=o("from_pretrained()"),uor=o(" class method or the "),_X=a("a"),_or=o("from_config()"),bor=o(` class
method.`),vor=l(),sL=a("p"),For=o("This class cannot be instantiated directly using "),$ue=a("code"),Tor=o("__init__()"),Mor=o(" (throws an error)."),Eor=l(),Mt=a("div"),F(lL.$$.fragment),Cor=l(),kue=a("p"),wor=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Aor=l(),$d=a("p"),yor=o(`Note:
Loading a model from its configuration file does `),Sue=a("strong"),Lor=o("not"),xor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bX=a("a"),$or=o("from_pretrained()"),kor=o(" to load the model weights."),Sor=l(),F(n6.$$.fragment),Ror=l(),_o=a("div"),F(iL.$$.fragment),Bor=l(),Rue=a("p"),Por=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Ior=l(),Ha=a("p"),qor=o("The model class to instantiate is selected based on the "),Bue=a("code"),Nor=o("model_type"),jor=o(` property of the config object (either
passed as an argument or loaded from `),Pue=a("code"),Dor=o("pretrained_model_name_or_path"),Gor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iue=a("code"),Oor=o("pretrained_model_name_or_path"),Vor=o(":"),Xor=l(),que=a("ul"),s6=a("li"),Nue=a("strong"),zor=o("maskformer"),Qor=o(" \u2014 "),vX=a("a"),Wor=o("MaskFormerForInstanceSegmentation"),Hor=o(" (MaskFormer model)"),Uor=l(),l6=a("p"),Jor=o("The model is set in evaluation mode by default using "),jue=a("code"),Yor=o("model.eval()"),Kor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Due=a("code"),Zor=o("model.train()"),err=l(),F(i6.$$.fragment),PPe=l(),kd=a("h2"),d6=a("a"),Gue=a("span"),F(dL.$$.fragment),orr=l(),Oue=a("span"),rrr=o("TFAutoModel"),IPe=l(),Yo=a("div"),F(cL.$$.fragment),trr=l(),Sd=a("p"),arr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),FX=a("a"),nrr=o("from_pretrained()"),srr=o(" class method or the "),TX=a("a"),lrr=o("from_config()"),irr=o(` class
method.`),drr=l(),fL=a("p"),crr=o("This class cannot be instantiated directly using "),Vue=a("code"),frr=o("__init__()"),mrr=o(" (throws an error)."),grr=l(),Et=a("div"),F(mL.$$.fragment),hrr=l(),Xue=a("p"),prr=o("Instantiates one of the base model classes of the library from a configuration."),urr=l(),Rd=a("p"),_rr=o(`Note:
Loading a model from its configuration file does `),zue=a("strong"),brr=o("not"),vrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=a("a"),Frr=o("from_pretrained()"),Trr=o(" to load the model weights."),Mrr=l(),F(c6.$$.fragment),Err=l(),Cr=a("div"),F(gL.$$.fragment),Crr=l(),Que=a("p"),wrr=o("Instantiate one of the base model classes of the library from a pretrained model."),Arr=l(),Ua=a("p"),yrr=o("The model class to instantiate is selected based on the "),Wue=a("code"),Lrr=o("model_type"),xrr=o(` property of the config object (either
passed as an argument or loaded from `),Hue=a("code"),$rr=o("pretrained_model_name_or_path"),krr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uue=a("code"),Srr=o("pretrained_model_name_or_path"),Rrr=o(":"),Brr=l(),j=a("ul"),f6=a("li"),Jue=a("strong"),Prr=o("albert"),Irr=o(" \u2014 "),EX=a("a"),qrr=o("TFAlbertModel"),Nrr=o(" (ALBERT model)"),jrr=l(),m6=a("li"),Yue=a("strong"),Drr=o("bart"),Grr=o(" \u2014 "),CX=a("a"),Orr=o("TFBartModel"),Vrr=o(" (BART model)"),Xrr=l(),g6=a("li"),Kue=a("strong"),zrr=o("bert"),Qrr=o(" \u2014 "),wX=a("a"),Wrr=o("TFBertModel"),Hrr=o(" (BERT model)"),Urr=l(),h6=a("li"),Zue=a("strong"),Jrr=o("blenderbot"),Yrr=o(" \u2014 "),AX=a("a"),Krr=o("TFBlenderbotModel"),Zrr=o(" (Blenderbot model)"),etr=l(),p6=a("li"),e_e=a("strong"),otr=o("blenderbot-small"),rtr=o(" \u2014 "),yX=a("a"),ttr=o("TFBlenderbotSmallModel"),atr=o(" (BlenderbotSmall model)"),ntr=l(),u6=a("li"),o_e=a("strong"),str=o("camembert"),ltr=o(" \u2014 "),LX=a("a"),itr=o("TFCamembertModel"),dtr=o(" (CamemBERT model)"),ctr=l(),_6=a("li"),r_e=a("strong"),ftr=o("clip"),mtr=o(" \u2014 "),xX=a("a"),gtr=o("TFCLIPModel"),htr=o(" (CLIP model)"),ptr=l(),b6=a("li"),t_e=a("strong"),utr=o("convbert"),_tr=o(" \u2014 "),$X=a("a"),btr=o("TFConvBertModel"),vtr=o(" (ConvBERT model)"),Ftr=l(),v6=a("li"),a_e=a("strong"),Ttr=o("convnext"),Mtr=o(" \u2014 "),kX=a("a"),Etr=o("TFConvNextModel"),Ctr=o(" (ConvNext model)"),wtr=l(),F6=a("li"),n_e=a("strong"),Atr=o("ctrl"),ytr=o(" \u2014 "),SX=a("a"),Ltr=o("TFCTRLModel"),xtr=o(" (CTRL model)"),$tr=l(),T6=a("li"),s_e=a("strong"),ktr=o("data2vec-vision"),Str=o(" \u2014 "),RX=a("a"),Rtr=o("TFData2VecVisionModel"),Btr=o(" (Data2VecVision model)"),Ptr=l(),M6=a("li"),l_e=a("strong"),Itr=o("deberta"),qtr=o(" \u2014 "),BX=a("a"),Ntr=o("TFDebertaModel"),jtr=o(" (DeBERTa model)"),Dtr=l(),E6=a("li"),i_e=a("strong"),Gtr=o("deberta-v2"),Otr=o(" \u2014 "),PX=a("a"),Vtr=o("TFDebertaV2Model"),Xtr=o(" (DeBERTa-v2 model)"),ztr=l(),C6=a("li"),d_e=a("strong"),Qtr=o("distilbert"),Wtr=o(" \u2014 "),IX=a("a"),Htr=o("TFDistilBertModel"),Utr=o(" (DistilBERT model)"),Jtr=l(),w6=a("li"),c_e=a("strong"),Ytr=o("dpr"),Ktr=o(" \u2014 "),qX=a("a"),Ztr=o("TFDPRQuestionEncoder"),ear=o(" (DPR model)"),oar=l(),A6=a("li"),f_e=a("strong"),rar=o("electra"),tar=o(" \u2014 "),NX=a("a"),aar=o("TFElectraModel"),nar=o(" (ELECTRA model)"),sar=l(),y6=a("li"),m_e=a("strong"),lar=o("flaubert"),iar=o(" \u2014 "),jX=a("a"),dar=o("TFFlaubertModel"),car=o(" (FlauBERT model)"),far=l(),$s=a("li"),g_e=a("strong"),mar=o("funnel"),gar=o(" \u2014 "),DX=a("a"),har=o("TFFunnelModel"),par=o(" or "),GX=a("a"),uar=o("TFFunnelBaseModel"),_ar=o(" (Funnel Transformer model)"),bar=l(),L6=a("li"),h_e=a("strong"),Far=o("gpt2"),Tar=o(" \u2014 "),OX=a("a"),Mar=o("TFGPT2Model"),Ear=o(" (OpenAI GPT-2 model)"),Car=l(),x6=a("li"),p_e=a("strong"),war=o("gptj"),Aar=o(" \u2014 "),VX=a("a"),yar=o("TFGPTJModel"),Lar=o(" (GPT-J model)"),xar=l(),$6=a("li"),u_e=a("strong"),$ar=o("hubert"),kar=o(" \u2014 "),XX=a("a"),Sar=o("TFHubertModel"),Rar=o(" (Hubert model)"),Bar=l(),k6=a("li"),__e=a("strong"),Par=o("layoutlm"),Iar=o(" \u2014 "),zX=a("a"),qar=o("TFLayoutLMModel"),Nar=o(" (LayoutLM model)"),jar=l(),S6=a("li"),b_e=a("strong"),Dar=o("led"),Gar=o(" \u2014 "),QX=a("a"),Oar=o("TFLEDModel"),Var=o(" (LED model)"),Xar=l(),R6=a("li"),v_e=a("strong"),zar=o("longformer"),Qar=o(" \u2014 "),WX=a("a"),War=o("TFLongformerModel"),Har=o(" (Longformer model)"),Uar=l(),B6=a("li"),F_e=a("strong"),Jar=o("lxmert"),Yar=o(" \u2014 "),HX=a("a"),Kar=o("TFLxmertModel"),Zar=o(" (LXMERT model)"),enr=l(),P6=a("li"),T_e=a("strong"),onr=o("marian"),rnr=o(" \u2014 "),UX=a("a"),tnr=o("TFMarianModel"),anr=o(" (Marian model)"),nnr=l(),I6=a("li"),M_e=a("strong"),snr=o("mbart"),lnr=o(" \u2014 "),JX=a("a"),inr=o("TFMBartModel"),dnr=o(" (mBART model)"),cnr=l(),q6=a("li"),E_e=a("strong"),fnr=o("mobilebert"),mnr=o(" \u2014 "),YX=a("a"),gnr=o("TFMobileBertModel"),hnr=o(" (MobileBERT model)"),pnr=l(),N6=a("li"),C_e=a("strong"),unr=o("mpnet"),_nr=o(" \u2014 "),KX=a("a"),bnr=o("TFMPNetModel"),vnr=o(" (MPNet model)"),Fnr=l(),j6=a("li"),w_e=a("strong"),Tnr=o("mt5"),Mnr=o(" \u2014 "),ZX=a("a"),Enr=o("TFMT5Model"),Cnr=o(" (mT5 model)"),wnr=l(),D6=a("li"),A_e=a("strong"),Anr=o("openai-gpt"),ynr=o(" \u2014 "),ez=a("a"),Lnr=o("TFOpenAIGPTModel"),xnr=o(" (OpenAI GPT model)"),$nr=l(),G6=a("li"),y_e=a("strong"),knr=o("pegasus"),Snr=o(" \u2014 "),oz=a("a"),Rnr=o("TFPegasusModel"),Bnr=o(" (Pegasus model)"),Pnr=l(),O6=a("li"),L_e=a("strong"),Inr=o("rembert"),qnr=o(" \u2014 "),rz=a("a"),Nnr=o("TFRemBertModel"),jnr=o(" (RemBERT model)"),Dnr=l(),V6=a("li"),x_e=a("strong"),Gnr=o("roberta"),Onr=o(" \u2014 "),tz=a("a"),Vnr=o("TFRobertaModel"),Xnr=o(" (RoBERTa model)"),znr=l(),X6=a("li"),$_e=a("strong"),Qnr=o("roformer"),Wnr=o(" \u2014 "),az=a("a"),Hnr=o("TFRoFormerModel"),Unr=o(" (RoFormer model)"),Jnr=l(),z6=a("li"),k_e=a("strong"),Ynr=o("speech_to_text"),Knr=o(" \u2014 "),nz=a("a"),Znr=o("TFSpeech2TextModel"),esr=o(" (Speech2Text model)"),osr=l(),Q6=a("li"),S_e=a("strong"),rsr=o("t5"),tsr=o(" \u2014 "),sz=a("a"),asr=o("TFT5Model"),nsr=o(" (T5 model)"),ssr=l(),W6=a("li"),R_e=a("strong"),lsr=o("tapas"),isr=o(" \u2014 "),lz=a("a"),dsr=o("TFTapasModel"),csr=o(" (TAPAS model)"),fsr=l(),H6=a("li"),B_e=a("strong"),msr=o("transfo-xl"),gsr=o(" \u2014 "),iz=a("a"),hsr=o("TFTransfoXLModel"),psr=o(" (Transformer-XL model)"),usr=l(),U6=a("li"),P_e=a("strong"),_sr=o("vit"),bsr=o(" \u2014 "),dz=a("a"),vsr=o("TFViTModel"),Fsr=o(" (ViT model)"),Tsr=l(),J6=a("li"),I_e=a("strong"),Msr=o("vit_mae"),Esr=o(" \u2014 "),cz=a("a"),Csr=o("TFViTMAEModel"),wsr=o(" (ViTMAE model)"),Asr=l(),Y6=a("li"),q_e=a("strong"),ysr=o("wav2vec2"),Lsr=o(" \u2014 "),fz=a("a"),xsr=o("TFWav2Vec2Model"),$sr=o(" (Wav2Vec2 model)"),ksr=l(),K6=a("li"),N_e=a("strong"),Ssr=o("xlm"),Rsr=o(" \u2014 "),mz=a("a"),Bsr=o("TFXLMModel"),Psr=o(" (XLM model)"),Isr=l(),Z6=a("li"),j_e=a("strong"),qsr=o("xlm-roberta"),Nsr=o(" \u2014 "),gz=a("a"),jsr=o("TFXLMRobertaModel"),Dsr=o(" (XLM-RoBERTa model)"),Gsr=l(),eT=a("li"),D_e=a("strong"),Osr=o("xlnet"),Vsr=o(" \u2014 "),hz=a("a"),Xsr=o("TFXLNetModel"),zsr=o(" (XLNet model)"),Qsr=l(),F(oT.$$.fragment),qPe=l(),Bd=a("h2"),rT=a("a"),G_e=a("span"),F(hL.$$.fragment),Wsr=l(),O_e=a("span"),Hsr=o("TFAutoModelForPreTraining"),NPe=l(),Ko=a("div"),F(pL.$$.fragment),Usr=l(),Pd=a("p"),Jsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),pz=a("a"),Ysr=o("from_pretrained()"),Ksr=o(" class method or the "),uz=a("a"),Zsr=o("from_config()"),elr=o(` class
method.`),olr=l(),uL=a("p"),rlr=o("This class cannot be instantiated directly using "),V_e=a("code"),tlr=o("__init__()"),alr=o(" (throws an error)."),nlr=l(),Ct=a("div"),F(_L.$$.fragment),slr=l(),X_e=a("p"),llr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ilr=l(),Id=a("p"),dlr=o(`Note:
Loading a model from its configuration file does `),z_e=a("strong"),clr=o("not"),flr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=a("a"),mlr=o("from_pretrained()"),glr=o(" to load the model weights."),hlr=l(),F(tT.$$.fragment),plr=l(),wr=a("div"),F(bL.$$.fragment),ulr=l(),Q_e=a("p"),_lr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),blr=l(),Ja=a("p"),vlr=o("The model class to instantiate is selected based on the "),W_e=a("code"),Flr=o("model_type"),Tlr=o(` property of the config object (either
passed as an argument or loaded from `),H_e=a("code"),Mlr=o("pretrained_model_name_or_path"),Elr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U_e=a("code"),Clr=o("pretrained_model_name_or_path"),wlr=o(":"),Alr=l(),se=a("ul"),aT=a("li"),J_e=a("strong"),ylr=o("albert"),Llr=o(" \u2014 "),bz=a("a"),xlr=o("TFAlbertForPreTraining"),$lr=o(" (ALBERT model)"),klr=l(),nT=a("li"),Y_e=a("strong"),Slr=o("bart"),Rlr=o(" \u2014 "),vz=a("a"),Blr=o("TFBartForConditionalGeneration"),Plr=o(" (BART model)"),Ilr=l(),sT=a("li"),K_e=a("strong"),qlr=o("bert"),Nlr=o(" \u2014 "),Fz=a("a"),jlr=o("TFBertForPreTraining"),Dlr=o(" (BERT model)"),Glr=l(),lT=a("li"),Z_e=a("strong"),Olr=o("camembert"),Vlr=o(" \u2014 "),Tz=a("a"),Xlr=o("TFCamembertForMaskedLM"),zlr=o(" (CamemBERT model)"),Qlr=l(),iT=a("li"),e5e=a("strong"),Wlr=o("ctrl"),Hlr=o(" \u2014 "),Mz=a("a"),Ulr=o("TFCTRLLMHeadModel"),Jlr=o(" (CTRL model)"),Ylr=l(),dT=a("li"),o5e=a("strong"),Klr=o("distilbert"),Zlr=o(" \u2014 "),Ez=a("a"),eir=o("TFDistilBertForMaskedLM"),oir=o(" (DistilBERT model)"),rir=l(),cT=a("li"),r5e=a("strong"),tir=o("electra"),air=o(" \u2014 "),Cz=a("a"),nir=o("TFElectraForPreTraining"),sir=o(" (ELECTRA model)"),lir=l(),fT=a("li"),t5e=a("strong"),iir=o("flaubert"),dir=o(" \u2014 "),wz=a("a"),cir=o("TFFlaubertWithLMHeadModel"),fir=o(" (FlauBERT model)"),mir=l(),mT=a("li"),a5e=a("strong"),gir=o("funnel"),hir=o(" \u2014 "),Az=a("a"),pir=o("TFFunnelForPreTraining"),uir=o(" (Funnel Transformer model)"),_ir=l(),gT=a("li"),n5e=a("strong"),bir=o("gpt2"),vir=o(" \u2014 "),yz=a("a"),Fir=o("TFGPT2LMHeadModel"),Tir=o(" (OpenAI GPT-2 model)"),Mir=l(),hT=a("li"),s5e=a("strong"),Eir=o("layoutlm"),Cir=o(" \u2014 "),Lz=a("a"),wir=o("TFLayoutLMForMaskedLM"),Air=o(" (LayoutLM model)"),yir=l(),pT=a("li"),l5e=a("strong"),Lir=o("lxmert"),xir=o(" \u2014 "),xz=a("a"),$ir=o("TFLxmertForPreTraining"),kir=o(" (LXMERT model)"),Sir=l(),uT=a("li"),i5e=a("strong"),Rir=o("mobilebert"),Bir=o(" \u2014 "),$z=a("a"),Pir=o("TFMobileBertForPreTraining"),Iir=o(" (MobileBERT model)"),qir=l(),_T=a("li"),d5e=a("strong"),Nir=o("mpnet"),jir=o(" \u2014 "),kz=a("a"),Dir=o("TFMPNetForMaskedLM"),Gir=o(" (MPNet model)"),Oir=l(),bT=a("li"),c5e=a("strong"),Vir=o("openai-gpt"),Xir=o(" \u2014 "),Sz=a("a"),zir=o("TFOpenAIGPTLMHeadModel"),Qir=o(" (OpenAI GPT model)"),Wir=l(),vT=a("li"),f5e=a("strong"),Hir=o("roberta"),Uir=o(" \u2014 "),Rz=a("a"),Jir=o("TFRobertaForMaskedLM"),Yir=o(" (RoBERTa model)"),Kir=l(),FT=a("li"),m5e=a("strong"),Zir=o("t5"),edr=o(" \u2014 "),Bz=a("a"),odr=o("TFT5ForConditionalGeneration"),rdr=o(" (T5 model)"),tdr=l(),TT=a("li"),g5e=a("strong"),adr=o("tapas"),ndr=o(" \u2014 "),Pz=a("a"),sdr=o("TFTapasForMaskedLM"),ldr=o(" (TAPAS model)"),idr=l(),MT=a("li"),h5e=a("strong"),ddr=o("transfo-xl"),cdr=o(" \u2014 "),Iz=a("a"),fdr=o("TFTransfoXLLMHeadModel"),mdr=o(" (Transformer-XL model)"),gdr=l(),ET=a("li"),p5e=a("strong"),hdr=o("vit_mae"),pdr=o(" \u2014 "),qz=a("a"),udr=o("TFViTMAEForPreTraining"),_dr=o(" (ViTMAE model)"),bdr=l(),CT=a("li"),u5e=a("strong"),vdr=o("xlm"),Fdr=o(" \u2014 "),Nz=a("a"),Tdr=o("TFXLMWithLMHeadModel"),Mdr=o(" (XLM model)"),Edr=l(),wT=a("li"),_5e=a("strong"),Cdr=o("xlm-roberta"),wdr=o(" \u2014 "),jz=a("a"),Adr=o("TFXLMRobertaForMaskedLM"),ydr=o(" (XLM-RoBERTa model)"),Ldr=l(),AT=a("li"),b5e=a("strong"),xdr=o("xlnet"),$dr=o(" \u2014 "),Dz=a("a"),kdr=o("TFXLNetLMHeadModel"),Sdr=o(" (XLNet model)"),Rdr=l(),F(yT.$$.fragment),jPe=l(),qd=a("h2"),LT=a("a"),v5e=a("span"),F(vL.$$.fragment),Bdr=l(),F5e=a("span"),Pdr=o("TFAutoModelForCausalLM"),DPe=l(),Zo=a("div"),F(FL.$$.fragment),Idr=l(),Nd=a("p"),qdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Gz=a("a"),Ndr=o("from_pretrained()"),jdr=o(" class method or the "),Oz=a("a"),Ddr=o("from_config()"),Gdr=o(` class
method.`),Odr=l(),TL=a("p"),Vdr=o("This class cannot be instantiated directly using "),T5e=a("code"),Xdr=o("__init__()"),zdr=o(" (throws an error)."),Qdr=l(),wt=a("div"),F(ML.$$.fragment),Wdr=l(),M5e=a("p"),Hdr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Udr=l(),jd=a("p"),Jdr=o(`Note:
Loading a model from its configuration file does `),E5e=a("strong"),Ydr=o("not"),Kdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=a("a"),Zdr=o("from_pretrained()"),ecr=o(" to load the model weights."),ocr=l(),F(xT.$$.fragment),rcr=l(),Ar=a("div"),F(EL.$$.fragment),tcr=l(),C5e=a("p"),acr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ncr=l(),Ya=a("p"),scr=o("The model class to instantiate is selected based on the "),w5e=a("code"),lcr=o("model_type"),icr=o(` property of the config object (either
passed as an argument or loaded from `),A5e=a("code"),dcr=o("pretrained_model_name_or_path"),ccr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y5e=a("code"),fcr=o("pretrained_model_name_or_path"),mcr=o(":"),gcr=l(),Me=a("ul"),$T=a("li"),L5e=a("strong"),hcr=o("bert"),pcr=o(" \u2014 "),Xz=a("a"),ucr=o("TFBertLMHeadModel"),_cr=o(" (BERT model)"),bcr=l(),kT=a("li"),x5e=a("strong"),vcr=o("camembert"),Fcr=o(" \u2014 "),zz=a("a"),Tcr=o("TFCamembertForCausalLM"),Mcr=o(" (CamemBERT model)"),Ecr=l(),ST=a("li"),$5e=a("strong"),Ccr=o("ctrl"),wcr=o(" \u2014 "),Qz=a("a"),Acr=o("TFCTRLLMHeadModel"),ycr=o(" (CTRL model)"),Lcr=l(),RT=a("li"),k5e=a("strong"),xcr=o("gpt2"),$cr=o(" \u2014 "),Wz=a("a"),kcr=o("TFGPT2LMHeadModel"),Scr=o(" (OpenAI GPT-2 model)"),Rcr=l(),BT=a("li"),S5e=a("strong"),Bcr=o("gptj"),Pcr=o(" \u2014 "),Hz=a("a"),Icr=o("TFGPTJForCausalLM"),qcr=o(" (GPT-J model)"),Ncr=l(),PT=a("li"),R5e=a("strong"),jcr=o("openai-gpt"),Dcr=o(" \u2014 "),Uz=a("a"),Gcr=o("TFOpenAIGPTLMHeadModel"),Ocr=o(" (OpenAI GPT model)"),Vcr=l(),IT=a("li"),B5e=a("strong"),Xcr=o("rembert"),zcr=o(" \u2014 "),Jz=a("a"),Qcr=o("TFRemBertForCausalLM"),Wcr=o(" (RemBERT model)"),Hcr=l(),qT=a("li"),P5e=a("strong"),Ucr=o("roberta"),Jcr=o(" \u2014 "),Yz=a("a"),Ycr=o("TFRobertaForCausalLM"),Kcr=o(" (RoBERTa model)"),Zcr=l(),NT=a("li"),I5e=a("strong"),efr=o("roformer"),ofr=o(" \u2014 "),Kz=a("a"),rfr=o("TFRoFormerForCausalLM"),tfr=o(" (RoFormer model)"),afr=l(),jT=a("li"),q5e=a("strong"),nfr=o("transfo-xl"),sfr=o(" \u2014 "),Zz=a("a"),lfr=o("TFTransfoXLLMHeadModel"),ifr=o(" (Transformer-XL model)"),dfr=l(),DT=a("li"),N5e=a("strong"),cfr=o("xlm"),ffr=o(" \u2014 "),eQ=a("a"),mfr=o("TFXLMWithLMHeadModel"),gfr=o(" (XLM model)"),hfr=l(),GT=a("li"),j5e=a("strong"),pfr=o("xlnet"),ufr=o(" \u2014 "),oQ=a("a"),_fr=o("TFXLNetLMHeadModel"),bfr=o(" (XLNet model)"),vfr=l(),F(OT.$$.fragment),GPe=l(),Dd=a("h2"),VT=a("a"),D5e=a("span"),F(CL.$$.fragment),Ffr=l(),G5e=a("span"),Tfr=o("TFAutoModelForImageClassification"),OPe=l(),er=a("div"),F(wL.$$.fragment),Mfr=l(),Gd=a("p"),Efr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rQ=a("a"),Cfr=o("from_pretrained()"),wfr=o(" class method or the "),tQ=a("a"),Afr=o("from_config()"),yfr=o(` class
method.`),Lfr=l(),AL=a("p"),xfr=o("This class cannot be instantiated directly using "),O5e=a("code"),$fr=o("__init__()"),kfr=o(" (throws an error)."),Sfr=l(),At=a("div"),F(yL.$$.fragment),Rfr=l(),V5e=a("p"),Bfr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Pfr=l(),Od=a("p"),Ifr=o(`Note:
Loading a model from its configuration file does `),X5e=a("strong"),qfr=o("not"),Nfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aQ=a("a"),jfr=o("from_pretrained()"),Dfr=o(" to load the model weights."),Gfr=l(),F(XT.$$.fragment),Ofr=l(),yr=a("div"),F(LL.$$.fragment),Vfr=l(),z5e=a("p"),Xfr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),zfr=l(),Ka=a("p"),Qfr=o("The model class to instantiate is selected based on the "),Q5e=a("code"),Wfr=o("model_type"),Hfr=o(` property of the config object (either
passed as an argument or loaded from `),W5e=a("code"),Ufr=o("pretrained_model_name_or_path"),Jfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H5e=a("code"),Yfr=o("pretrained_model_name_or_path"),Kfr=o(":"),Zfr=l(),Vd=a("ul"),zT=a("li"),U5e=a("strong"),emr=o("convnext"),omr=o(" \u2014 "),nQ=a("a"),rmr=o("TFConvNextForImageClassification"),tmr=o(" (ConvNext model)"),amr=l(),QT=a("li"),J5e=a("strong"),nmr=o("data2vec-vision"),smr=o(" \u2014 "),sQ=a("a"),lmr=o("TFData2VecVisionForImageClassification"),imr=o(" (Data2VecVision model)"),dmr=l(),WT=a("li"),Y5e=a("strong"),cmr=o("vit"),fmr=o(" \u2014 "),lQ=a("a"),mmr=o("TFViTForImageClassification"),gmr=o(" (ViT model)"),hmr=l(),F(HT.$$.fragment),VPe=l(),Xd=a("h2"),UT=a("a"),K5e=a("span"),F(xL.$$.fragment),pmr=l(),Z5e=a("span"),umr=o("TFAutoModelForMaskedLM"),XPe=l(),or=a("div"),F($L.$$.fragment),_mr=l(),zd=a("p"),bmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),iQ=a("a"),vmr=o("from_pretrained()"),Fmr=o(" class method or the "),dQ=a("a"),Tmr=o("from_config()"),Mmr=o(` class
method.`),Emr=l(),kL=a("p"),Cmr=o("This class cannot be instantiated directly using "),e1e=a("code"),wmr=o("__init__()"),Amr=o(" (throws an error)."),ymr=l(),yt=a("div"),F(SL.$$.fragment),Lmr=l(),o1e=a("p"),xmr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),$mr=l(),Qd=a("p"),kmr=o(`Note:
Loading a model from its configuration file does `),r1e=a("strong"),Smr=o("not"),Rmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cQ=a("a"),Bmr=o("from_pretrained()"),Pmr=o(" to load the model weights."),Imr=l(),F(JT.$$.fragment),qmr=l(),Lr=a("div"),F(RL.$$.fragment),Nmr=l(),t1e=a("p"),jmr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Dmr=l(),Za=a("p"),Gmr=o("The model class to instantiate is selected based on the "),a1e=a("code"),Omr=o("model_type"),Vmr=o(` property of the config object (either
passed as an argument or loaded from `),n1e=a("code"),Xmr=o("pretrained_model_name_or_path"),zmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s1e=a("code"),Qmr=o("pretrained_model_name_or_path"),Wmr=o(":"),Hmr=l(),ie=a("ul"),YT=a("li"),l1e=a("strong"),Umr=o("albert"),Jmr=o(" \u2014 "),fQ=a("a"),Ymr=o("TFAlbertForMaskedLM"),Kmr=o(" (ALBERT model)"),Zmr=l(),KT=a("li"),i1e=a("strong"),egr=o("bert"),ogr=o(" \u2014 "),mQ=a("a"),rgr=o("TFBertForMaskedLM"),tgr=o(" (BERT model)"),agr=l(),ZT=a("li"),d1e=a("strong"),ngr=o("camembert"),sgr=o(" \u2014 "),gQ=a("a"),lgr=o("TFCamembertForMaskedLM"),igr=o(" (CamemBERT model)"),dgr=l(),e7=a("li"),c1e=a("strong"),cgr=o("convbert"),fgr=o(" \u2014 "),hQ=a("a"),mgr=o("TFConvBertForMaskedLM"),ggr=o(" (ConvBERT model)"),hgr=l(),o7=a("li"),f1e=a("strong"),pgr=o("deberta"),ugr=o(" \u2014 "),pQ=a("a"),_gr=o("TFDebertaForMaskedLM"),bgr=o(" (DeBERTa model)"),vgr=l(),r7=a("li"),m1e=a("strong"),Fgr=o("deberta-v2"),Tgr=o(" \u2014 "),uQ=a("a"),Mgr=o("TFDebertaV2ForMaskedLM"),Egr=o(" (DeBERTa-v2 model)"),Cgr=l(),t7=a("li"),g1e=a("strong"),wgr=o("distilbert"),Agr=o(" \u2014 "),_Q=a("a"),ygr=o("TFDistilBertForMaskedLM"),Lgr=o(" (DistilBERT model)"),xgr=l(),a7=a("li"),h1e=a("strong"),$gr=o("electra"),kgr=o(" \u2014 "),bQ=a("a"),Sgr=o("TFElectraForMaskedLM"),Rgr=o(" (ELECTRA model)"),Bgr=l(),n7=a("li"),p1e=a("strong"),Pgr=o("flaubert"),Igr=o(" \u2014 "),vQ=a("a"),qgr=o("TFFlaubertWithLMHeadModel"),Ngr=o(" (FlauBERT model)"),jgr=l(),s7=a("li"),u1e=a("strong"),Dgr=o("funnel"),Ggr=o(" \u2014 "),FQ=a("a"),Ogr=o("TFFunnelForMaskedLM"),Vgr=o(" (Funnel Transformer model)"),Xgr=l(),l7=a("li"),_1e=a("strong"),zgr=o("layoutlm"),Qgr=o(" \u2014 "),TQ=a("a"),Wgr=o("TFLayoutLMForMaskedLM"),Hgr=o(" (LayoutLM model)"),Ugr=l(),i7=a("li"),b1e=a("strong"),Jgr=o("longformer"),Ygr=o(" \u2014 "),MQ=a("a"),Kgr=o("TFLongformerForMaskedLM"),Zgr=o(" (Longformer model)"),ehr=l(),d7=a("li"),v1e=a("strong"),ohr=o("mobilebert"),rhr=o(" \u2014 "),EQ=a("a"),thr=o("TFMobileBertForMaskedLM"),ahr=o(" (MobileBERT model)"),nhr=l(),c7=a("li"),F1e=a("strong"),shr=o("mpnet"),lhr=o(" \u2014 "),CQ=a("a"),ihr=o("TFMPNetForMaskedLM"),dhr=o(" (MPNet model)"),chr=l(),f7=a("li"),T1e=a("strong"),fhr=o("rembert"),mhr=o(" \u2014 "),wQ=a("a"),ghr=o("TFRemBertForMaskedLM"),hhr=o(" (RemBERT model)"),phr=l(),m7=a("li"),M1e=a("strong"),uhr=o("roberta"),_hr=o(" \u2014 "),AQ=a("a"),bhr=o("TFRobertaForMaskedLM"),vhr=o(" (RoBERTa model)"),Fhr=l(),g7=a("li"),E1e=a("strong"),Thr=o("roformer"),Mhr=o(" \u2014 "),yQ=a("a"),Ehr=o("TFRoFormerForMaskedLM"),Chr=o(" (RoFormer model)"),whr=l(),h7=a("li"),C1e=a("strong"),Ahr=o("tapas"),yhr=o(" \u2014 "),LQ=a("a"),Lhr=o("TFTapasForMaskedLM"),xhr=o(" (TAPAS model)"),$hr=l(),p7=a("li"),w1e=a("strong"),khr=o("xlm"),Shr=o(" \u2014 "),xQ=a("a"),Rhr=o("TFXLMWithLMHeadModel"),Bhr=o(" (XLM model)"),Phr=l(),u7=a("li"),A1e=a("strong"),Ihr=o("xlm-roberta"),qhr=o(" \u2014 "),$Q=a("a"),Nhr=o("TFXLMRobertaForMaskedLM"),jhr=o(" (XLM-RoBERTa model)"),Dhr=l(),F(_7.$$.fragment),zPe=l(),Wd=a("h2"),b7=a("a"),y1e=a("span"),F(BL.$$.fragment),Ghr=l(),L1e=a("span"),Ohr=o("TFAutoModelForSeq2SeqLM"),QPe=l(),rr=a("div"),F(PL.$$.fragment),Vhr=l(),Hd=a("p"),Xhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kQ=a("a"),zhr=o("from_pretrained()"),Qhr=o(" class method or the "),SQ=a("a"),Whr=o("from_config()"),Hhr=o(` class
method.`),Uhr=l(),IL=a("p"),Jhr=o("This class cannot be instantiated directly using "),x1e=a("code"),Yhr=o("__init__()"),Khr=o(" (throws an error)."),Zhr=l(),Lt=a("div"),F(qL.$$.fragment),epr=l(),$1e=a("p"),opr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),rpr=l(),Ud=a("p"),tpr=o(`Note:
Loading a model from its configuration file does `),k1e=a("strong"),apr=o("not"),npr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RQ=a("a"),spr=o("from_pretrained()"),lpr=o(" to load the model weights."),ipr=l(),F(v7.$$.fragment),dpr=l(),xr=a("div"),F(NL.$$.fragment),cpr=l(),S1e=a("p"),fpr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),mpr=l(),en=a("p"),gpr=o("The model class to instantiate is selected based on the "),R1e=a("code"),hpr=o("model_type"),ppr=o(` property of the config object (either
passed as an argument or loaded from `),B1e=a("code"),upr=o("pretrained_model_name_or_path"),_pr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P1e=a("code"),bpr=o("pretrained_model_name_or_path"),vpr=o(":"),Fpr=l(),ye=a("ul"),F7=a("li"),I1e=a("strong"),Tpr=o("bart"),Mpr=o(" \u2014 "),BQ=a("a"),Epr=o("TFBartForConditionalGeneration"),Cpr=o(" (BART model)"),wpr=l(),T7=a("li"),q1e=a("strong"),Apr=o("blenderbot"),ypr=o(" \u2014 "),PQ=a("a"),Lpr=o("TFBlenderbotForConditionalGeneration"),xpr=o(" (Blenderbot model)"),$pr=l(),M7=a("li"),N1e=a("strong"),kpr=o("blenderbot-small"),Spr=o(" \u2014 "),IQ=a("a"),Rpr=o("TFBlenderbotSmallForConditionalGeneration"),Bpr=o(" (BlenderbotSmall model)"),Ppr=l(),E7=a("li"),j1e=a("strong"),Ipr=o("encoder-decoder"),qpr=o(" \u2014 "),qQ=a("a"),Npr=o("TFEncoderDecoderModel"),jpr=o(" (Encoder decoder model)"),Dpr=l(),C7=a("li"),D1e=a("strong"),Gpr=o("led"),Opr=o(" \u2014 "),NQ=a("a"),Vpr=o("TFLEDForConditionalGeneration"),Xpr=o(" (LED model)"),zpr=l(),w7=a("li"),G1e=a("strong"),Qpr=o("marian"),Wpr=o(" \u2014 "),jQ=a("a"),Hpr=o("TFMarianMTModel"),Upr=o(" (Marian model)"),Jpr=l(),A7=a("li"),O1e=a("strong"),Ypr=o("mbart"),Kpr=o(" \u2014 "),DQ=a("a"),Zpr=o("TFMBartForConditionalGeneration"),eur=o(" (mBART model)"),our=l(),y7=a("li"),V1e=a("strong"),rur=o("mt5"),tur=o(" \u2014 "),GQ=a("a"),aur=o("TFMT5ForConditionalGeneration"),nur=o(" (mT5 model)"),sur=l(),L7=a("li"),X1e=a("strong"),lur=o("pegasus"),iur=o(" \u2014 "),OQ=a("a"),dur=o("TFPegasusForConditionalGeneration"),cur=o(" (Pegasus model)"),fur=l(),x7=a("li"),z1e=a("strong"),mur=o("t5"),gur=o(" \u2014 "),VQ=a("a"),hur=o("TFT5ForConditionalGeneration"),pur=o(" (T5 model)"),uur=l(),F($7.$$.fragment),WPe=l(),Jd=a("h2"),k7=a("a"),Q1e=a("span"),F(jL.$$.fragment),_ur=l(),W1e=a("span"),bur=o("TFAutoModelForSequenceClassification"),HPe=l(),tr=a("div"),F(DL.$$.fragment),vur=l(),Yd=a("p"),Fur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),XQ=a("a"),Tur=o("from_pretrained()"),Mur=o(" class method or the "),zQ=a("a"),Eur=o("from_config()"),Cur=o(` class
method.`),wur=l(),GL=a("p"),Aur=o("This class cannot be instantiated directly using "),H1e=a("code"),yur=o("__init__()"),Lur=o(" (throws an error)."),xur=l(),xt=a("div"),F(OL.$$.fragment),$ur=l(),U1e=a("p"),kur=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Sur=l(),Kd=a("p"),Rur=o(`Note:
Loading a model from its configuration file does `),J1e=a("strong"),Bur=o("not"),Pur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QQ=a("a"),Iur=o("from_pretrained()"),qur=o(" to load the model weights."),Nur=l(),F(S7.$$.fragment),jur=l(),$r=a("div"),F(VL.$$.fragment),Dur=l(),Y1e=a("p"),Gur=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Our=l(),on=a("p"),Vur=o("The model class to instantiate is selected based on the "),K1e=a("code"),Xur=o("model_type"),zur=o(` property of the config object (either
passed as an argument or loaded from `),Z1e=a("code"),Qur=o("pretrained_model_name_or_path"),Wur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ebe=a("code"),Hur=o("pretrained_model_name_or_path"),Uur=o(":"),Jur=l(),Z=a("ul"),R7=a("li"),obe=a("strong"),Yur=o("albert"),Kur=o(" \u2014 "),WQ=a("a"),Zur=o("TFAlbertForSequenceClassification"),e_r=o(" (ALBERT model)"),o_r=l(),B7=a("li"),rbe=a("strong"),r_r=o("bert"),t_r=o(" \u2014 "),HQ=a("a"),a_r=o("TFBertForSequenceClassification"),n_r=o(" (BERT model)"),s_r=l(),P7=a("li"),tbe=a("strong"),l_r=o("camembert"),i_r=o(" \u2014 "),UQ=a("a"),d_r=o("TFCamembertForSequenceClassification"),c_r=o(" (CamemBERT model)"),f_r=l(),I7=a("li"),abe=a("strong"),m_r=o("convbert"),g_r=o(" \u2014 "),JQ=a("a"),h_r=o("TFConvBertForSequenceClassification"),p_r=o(" (ConvBERT model)"),u_r=l(),q7=a("li"),nbe=a("strong"),__r=o("ctrl"),b_r=o(" \u2014 "),YQ=a("a"),v_r=o("TFCTRLForSequenceClassification"),F_r=o(" (CTRL model)"),T_r=l(),N7=a("li"),sbe=a("strong"),M_r=o("deberta"),E_r=o(" \u2014 "),KQ=a("a"),C_r=o("TFDebertaForSequenceClassification"),w_r=o(" (DeBERTa model)"),A_r=l(),j7=a("li"),lbe=a("strong"),y_r=o("deberta-v2"),L_r=o(" \u2014 "),ZQ=a("a"),x_r=o("TFDebertaV2ForSequenceClassification"),$_r=o(" (DeBERTa-v2 model)"),k_r=l(),D7=a("li"),ibe=a("strong"),S_r=o("distilbert"),R_r=o(" \u2014 "),eW=a("a"),B_r=o("TFDistilBertForSequenceClassification"),P_r=o(" (DistilBERT model)"),I_r=l(),G7=a("li"),dbe=a("strong"),q_r=o("electra"),N_r=o(" \u2014 "),oW=a("a"),j_r=o("TFElectraForSequenceClassification"),D_r=o(" (ELECTRA model)"),G_r=l(),O7=a("li"),cbe=a("strong"),O_r=o("flaubert"),V_r=o(" \u2014 "),rW=a("a"),X_r=o("TFFlaubertForSequenceClassification"),z_r=o(" (FlauBERT model)"),Q_r=l(),V7=a("li"),fbe=a("strong"),W_r=o("funnel"),H_r=o(" \u2014 "),tW=a("a"),U_r=o("TFFunnelForSequenceClassification"),J_r=o(" (Funnel Transformer model)"),Y_r=l(),X7=a("li"),mbe=a("strong"),K_r=o("gpt2"),Z_r=o(" \u2014 "),aW=a("a"),e5r=o("TFGPT2ForSequenceClassification"),o5r=o(" (OpenAI GPT-2 model)"),r5r=l(),z7=a("li"),gbe=a("strong"),t5r=o("gptj"),a5r=o(" \u2014 "),nW=a("a"),n5r=o("TFGPTJForSequenceClassification"),s5r=o(" (GPT-J model)"),l5r=l(),Q7=a("li"),hbe=a("strong"),i5r=o("layoutlm"),d5r=o(" \u2014 "),sW=a("a"),c5r=o("TFLayoutLMForSequenceClassification"),f5r=o(" (LayoutLM model)"),m5r=l(),W7=a("li"),pbe=a("strong"),g5r=o("longformer"),h5r=o(" \u2014 "),lW=a("a"),p5r=o("TFLongformerForSequenceClassification"),u5r=o(" (Longformer model)"),_5r=l(),H7=a("li"),ube=a("strong"),b5r=o("mobilebert"),v5r=o(" \u2014 "),iW=a("a"),F5r=o("TFMobileBertForSequenceClassification"),T5r=o(" (MobileBERT model)"),M5r=l(),U7=a("li"),_be=a("strong"),E5r=o("mpnet"),C5r=o(" \u2014 "),dW=a("a"),w5r=o("TFMPNetForSequenceClassification"),A5r=o(" (MPNet model)"),y5r=l(),J7=a("li"),bbe=a("strong"),L5r=o("openai-gpt"),x5r=o(" \u2014 "),cW=a("a"),$5r=o("TFOpenAIGPTForSequenceClassification"),k5r=o(" (OpenAI GPT model)"),S5r=l(),Y7=a("li"),vbe=a("strong"),R5r=o("rembert"),B5r=o(" \u2014 "),fW=a("a"),P5r=o("TFRemBertForSequenceClassification"),I5r=o(" (RemBERT model)"),q5r=l(),K7=a("li"),Fbe=a("strong"),N5r=o("roberta"),j5r=o(" \u2014 "),mW=a("a"),D5r=o("TFRobertaForSequenceClassification"),G5r=o(" (RoBERTa model)"),O5r=l(),Z7=a("li"),Tbe=a("strong"),V5r=o("roformer"),X5r=o(" \u2014 "),gW=a("a"),z5r=o("TFRoFormerForSequenceClassification"),Q5r=o(" (RoFormer model)"),W5r=l(),eM=a("li"),Mbe=a("strong"),H5r=o("tapas"),U5r=o(" \u2014 "),hW=a("a"),J5r=o("TFTapasForSequenceClassification"),Y5r=o(" (TAPAS model)"),K5r=l(),oM=a("li"),Ebe=a("strong"),Z5r=o("transfo-xl"),e1r=o(" \u2014 "),pW=a("a"),o1r=o("TFTransfoXLForSequenceClassification"),r1r=o(" (Transformer-XL model)"),t1r=l(),rM=a("li"),Cbe=a("strong"),a1r=o("xlm"),n1r=o(" \u2014 "),uW=a("a"),s1r=o("TFXLMForSequenceClassification"),l1r=o(" (XLM model)"),i1r=l(),tM=a("li"),wbe=a("strong"),d1r=o("xlm-roberta"),c1r=o(" \u2014 "),_W=a("a"),f1r=o("TFXLMRobertaForSequenceClassification"),m1r=o(" (XLM-RoBERTa model)"),g1r=l(),aM=a("li"),Abe=a("strong"),h1r=o("xlnet"),p1r=o(" \u2014 "),bW=a("a"),u1r=o("TFXLNetForSequenceClassification"),_1r=o(" (XLNet model)"),b1r=l(),F(nM.$$.fragment),UPe=l(),Zd=a("h2"),sM=a("a"),ybe=a("span"),F(XL.$$.fragment),v1r=l(),Lbe=a("span"),F1r=o("TFAutoModelForMultipleChoice"),JPe=l(),ar=a("div"),F(zL.$$.fragment),T1r=l(),ec=a("p"),M1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vW=a("a"),E1r=o("from_pretrained()"),C1r=o(" class method or the "),FW=a("a"),w1r=o("from_config()"),A1r=o(` class
method.`),y1r=l(),QL=a("p"),L1r=o("This class cannot be instantiated directly using "),xbe=a("code"),x1r=o("__init__()"),$1r=o(" (throws an error)."),k1r=l(),$t=a("div"),F(WL.$$.fragment),S1r=l(),$be=a("p"),R1r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),B1r=l(),oc=a("p"),P1r=o(`Note:
Loading a model from its configuration file does `),kbe=a("strong"),I1r=o("not"),q1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=a("a"),N1r=o("from_pretrained()"),j1r=o(" to load the model weights."),D1r=l(),F(lM.$$.fragment),G1r=l(),kr=a("div"),F(HL.$$.fragment),O1r=l(),Sbe=a("p"),V1r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),X1r=l(),rn=a("p"),z1r=o("The model class to instantiate is selected based on the "),Rbe=a("code"),Q1r=o("model_type"),W1r=o(` property of the config object (either
passed as an argument or loaded from `),Bbe=a("code"),H1r=o("pretrained_model_name_or_path"),U1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pbe=a("code"),J1r=o("pretrained_model_name_or_path"),Y1r=o(":"),K1r=l(),pe=a("ul"),iM=a("li"),Ibe=a("strong"),Z1r=o("albert"),ebr=o(" \u2014 "),MW=a("a"),obr=o("TFAlbertForMultipleChoice"),rbr=o(" (ALBERT model)"),tbr=l(),dM=a("li"),qbe=a("strong"),abr=o("bert"),nbr=o(" \u2014 "),EW=a("a"),sbr=o("TFBertForMultipleChoice"),lbr=o(" (BERT model)"),ibr=l(),cM=a("li"),Nbe=a("strong"),dbr=o("camembert"),cbr=o(" \u2014 "),CW=a("a"),fbr=o("TFCamembertForMultipleChoice"),mbr=o(" (CamemBERT model)"),gbr=l(),fM=a("li"),jbe=a("strong"),hbr=o("convbert"),pbr=o(" \u2014 "),wW=a("a"),ubr=o("TFConvBertForMultipleChoice"),_br=o(" (ConvBERT model)"),bbr=l(),mM=a("li"),Dbe=a("strong"),vbr=o("distilbert"),Fbr=o(" \u2014 "),AW=a("a"),Tbr=o("TFDistilBertForMultipleChoice"),Mbr=o(" (DistilBERT model)"),Ebr=l(),gM=a("li"),Gbe=a("strong"),Cbr=o("electra"),wbr=o(" \u2014 "),yW=a("a"),Abr=o("TFElectraForMultipleChoice"),ybr=o(" (ELECTRA model)"),Lbr=l(),hM=a("li"),Obe=a("strong"),xbr=o("flaubert"),$br=o(" \u2014 "),LW=a("a"),kbr=o("TFFlaubertForMultipleChoice"),Sbr=o(" (FlauBERT model)"),Rbr=l(),pM=a("li"),Vbe=a("strong"),Bbr=o("funnel"),Pbr=o(" \u2014 "),xW=a("a"),Ibr=o("TFFunnelForMultipleChoice"),qbr=o(" (Funnel Transformer model)"),Nbr=l(),uM=a("li"),Xbe=a("strong"),jbr=o("longformer"),Dbr=o(" \u2014 "),$W=a("a"),Gbr=o("TFLongformerForMultipleChoice"),Obr=o(" (Longformer model)"),Vbr=l(),_M=a("li"),zbe=a("strong"),Xbr=o("mobilebert"),zbr=o(" \u2014 "),kW=a("a"),Qbr=o("TFMobileBertForMultipleChoice"),Wbr=o(" (MobileBERT model)"),Hbr=l(),bM=a("li"),Qbe=a("strong"),Ubr=o("mpnet"),Jbr=o(" \u2014 "),SW=a("a"),Ybr=o("TFMPNetForMultipleChoice"),Kbr=o(" (MPNet model)"),Zbr=l(),vM=a("li"),Wbe=a("strong"),e2r=o("rembert"),o2r=o(" \u2014 "),RW=a("a"),r2r=o("TFRemBertForMultipleChoice"),t2r=o(" (RemBERT model)"),a2r=l(),FM=a("li"),Hbe=a("strong"),n2r=o("roberta"),s2r=o(" \u2014 "),BW=a("a"),l2r=o("TFRobertaForMultipleChoice"),i2r=o(" (RoBERTa model)"),d2r=l(),TM=a("li"),Ube=a("strong"),c2r=o("roformer"),f2r=o(" \u2014 "),PW=a("a"),m2r=o("TFRoFormerForMultipleChoice"),g2r=o(" (RoFormer model)"),h2r=l(),MM=a("li"),Jbe=a("strong"),p2r=o("xlm"),u2r=o(" \u2014 "),IW=a("a"),_2r=o("TFXLMForMultipleChoice"),b2r=o(" (XLM model)"),v2r=l(),EM=a("li"),Ybe=a("strong"),F2r=o("xlm-roberta"),T2r=o(" \u2014 "),qW=a("a"),M2r=o("TFXLMRobertaForMultipleChoice"),E2r=o(" (XLM-RoBERTa model)"),C2r=l(),CM=a("li"),Kbe=a("strong"),w2r=o("xlnet"),A2r=o(" \u2014 "),NW=a("a"),y2r=o("TFXLNetForMultipleChoice"),L2r=o(" (XLNet model)"),x2r=l(),F(wM.$$.fragment),YPe=l(),rc=a("h2"),AM=a("a"),Zbe=a("span"),F(UL.$$.fragment),$2r=l(),e2e=a("span"),k2r=o("TFAutoModelForTableQuestionAnswering"),KPe=l(),nr=a("div"),F(JL.$$.fragment),S2r=l(),tc=a("p"),R2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),jW=a("a"),B2r=o("from_pretrained()"),P2r=o(" class method or the "),DW=a("a"),I2r=o("from_config()"),q2r=o(` class
method.`),N2r=l(),YL=a("p"),j2r=o("This class cannot be instantiated directly using "),o2e=a("code"),D2r=o("__init__()"),G2r=o(" (throws an error)."),O2r=l(),kt=a("div"),F(KL.$$.fragment),V2r=l(),r2e=a("p"),X2r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),z2r=l(),ac=a("p"),Q2r=o(`Note:
Loading a model from its configuration file does `),t2e=a("strong"),W2r=o("not"),H2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=a("a"),U2r=o("from_pretrained()"),J2r=o(" to load the model weights."),Y2r=l(),F(yM.$$.fragment),K2r=l(),Sr=a("div"),F(ZL.$$.fragment),Z2r=l(),a2e=a("p"),evr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),ovr=l(),tn=a("p"),rvr=o("The model class to instantiate is selected based on the "),n2e=a("code"),tvr=o("model_type"),avr=o(` property of the config object (either
passed as an argument or loaded from `),s2e=a("code"),nvr=o("pretrained_model_name_or_path"),svr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l2e=a("code"),lvr=o("pretrained_model_name_or_path"),ivr=o(":"),dvr=l(),i2e=a("ul"),LM=a("li"),d2e=a("strong"),cvr=o("tapas"),fvr=o(" \u2014 "),OW=a("a"),mvr=o("TFTapasForQuestionAnswering"),gvr=o(" (TAPAS model)"),hvr=l(),F(xM.$$.fragment),ZPe=l(),nc=a("h2"),$M=a("a"),c2e=a("span"),F(e8.$$.fragment),pvr=l(),f2e=a("span"),uvr=o("TFAutoModelForTokenClassification"),eIe=l(),sr=a("div"),F(o8.$$.fragment),_vr=l(),sc=a("p"),bvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),VW=a("a"),vvr=o("from_pretrained()"),Fvr=o(" class method or the "),XW=a("a"),Tvr=o("from_config()"),Mvr=o(` class
method.`),Evr=l(),r8=a("p"),Cvr=o("This class cannot be instantiated directly using "),m2e=a("code"),wvr=o("__init__()"),Avr=o(" (throws an error)."),yvr=l(),St=a("div"),F(t8.$$.fragment),Lvr=l(),g2e=a("p"),xvr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),$vr=l(),lc=a("p"),kvr=o(`Note:
Loading a model from its configuration file does `),h2e=a("strong"),Svr=o("not"),Rvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zW=a("a"),Bvr=o("from_pretrained()"),Pvr=o(" to load the model weights."),Ivr=l(),F(kM.$$.fragment),qvr=l(),Rr=a("div"),F(a8.$$.fragment),Nvr=l(),p2e=a("p"),jvr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Dvr=l(),an=a("p"),Gvr=o("The model class to instantiate is selected based on the "),u2e=a("code"),Ovr=o("model_type"),Vvr=o(` property of the config object (either
passed as an argument or loaded from `),_2e=a("code"),Xvr=o("pretrained_model_name_or_path"),zvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b2e=a("code"),Qvr=o("pretrained_model_name_or_path"),Wvr=o(":"),Hvr=l(),de=a("ul"),SM=a("li"),v2e=a("strong"),Uvr=o("albert"),Jvr=o(" \u2014 "),QW=a("a"),Yvr=o("TFAlbertForTokenClassification"),Kvr=o(" (ALBERT model)"),Zvr=l(),RM=a("li"),F2e=a("strong"),eFr=o("bert"),oFr=o(" \u2014 "),WW=a("a"),rFr=o("TFBertForTokenClassification"),tFr=o(" (BERT model)"),aFr=l(),BM=a("li"),T2e=a("strong"),nFr=o("camembert"),sFr=o(" \u2014 "),HW=a("a"),lFr=o("TFCamembertForTokenClassification"),iFr=o(" (CamemBERT model)"),dFr=l(),PM=a("li"),M2e=a("strong"),cFr=o("convbert"),fFr=o(" \u2014 "),UW=a("a"),mFr=o("TFConvBertForTokenClassification"),gFr=o(" (ConvBERT model)"),hFr=l(),IM=a("li"),E2e=a("strong"),pFr=o("deberta"),uFr=o(" \u2014 "),JW=a("a"),_Fr=o("TFDebertaForTokenClassification"),bFr=o(" (DeBERTa model)"),vFr=l(),qM=a("li"),C2e=a("strong"),FFr=o("deberta-v2"),TFr=o(" \u2014 "),YW=a("a"),MFr=o("TFDebertaV2ForTokenClassification"),EFr=o(" (DeBERTa-v2 model)"),CFr=l(),NM=a("li"),w2e=a("strong"),wFr=o("distilbert"),AFr=o(" \u2014 "),KW=a("a"),yFr=o("TFDistilBertForTokenClassification"),LFr=o(" (DistilBERT model)"),xFr=l(),jM=a("li"),A2e=a("strong"),$Fr=o("electra"),kFr=o(" \u2014 "),ZW=a("a"),SFr=o("TFElectraForTokenClassification"),RFr=o(" (ELECTRA model)"),BFr=l(),DM=a("li"),y2e=a("strong"),PFr=o("flaubert"),IFr=o(" \u2014 "),eH=a("a"),qFr=o("TFFlaubertForTokenClassification"),NFr=o(" (FlauBERT model)"),jFr=l(),GM=a("li"),L2e=a("strong"),DFr=o("funnel"),GFr=o(" \u2014 "),oH=a("a"),OFr=o("TFFunnelForTokenClassification"),VFr=o(" (Funnel Transformer model)"),XFr=l(),OM=a("li"),x2e=a("strong"),zFr=o("layoutlm"),QFr=o(" \u2014 "),rH=a("a"),WFr=o("TFLayoutLMForTokenClassification"),HFr=o(" (LayoutLM model)"),UFr=l(),VM=a("li"),$2e=a("strong"),JFr=o("longformer"),YFr=o(" \u2014 "),tH=a("a"),KFr=o("TFLongformerForTokenClassification"),ZFr=o(" (Longformer model)"),e6r=l(),XM=a("li"),k2e=a("strong"),o6r=o("mobilebert"),r6r=o(" \u2014 "),aH=a("a"),t6r=o("TFMobileBertForTokenClassification"),a6r=o(" (MobileBERT model)"),n6r=l(),zM=a("li"),S2e=a("strong"),s6r=o("mpnet"),l6r=o(" \u2014 "),nH=a("a"),i6r=o("TFMPNetForTokenClassification"),d6r=o(" (MPNet model)"),c6r=l(),QM=a("li"),R2e=a("strong"),f6r=o("rembert"),m6r=o(" \u2014 "),sH=a("a"),g6r=o("TFRemBertForTokenClassification"),h6r=o(" (RemBERT model)"),p6r=l(),WM=a("li"),B2e=a("strong"),u6r=o("roberta"),_6r=o(" \u2014 "),lH=a("a"),b6r=o("TFRobertaForTokenClassification"),v6r=o(" (RoBERTa model)"),F6r=l(),HM=a("li"),P2e=a("strong"),T6r=o("roformer"),M6r=o(" \u2014 "),iH=a("a"),E6r=o("TFRoFormerForTokenClassification"),C6r=o(" (RoFormer model)"),w6r=l(),UM=a("li"),I2e=a("strong"),A6r=o("xlm"),y6r=o(" \u2014 "),dH=a("a"),L6r=o("TFXLMForTokenClassification"),x6r=o(" (XLM model)"),$6r=l(),JM=a("li"),q2e=a("strong"),k6r=o("xlm-roberta"),S6r=o(" \u2014 "),cH=a("a"),R6r=o("TFXLMRobertaForTokenClassification"),B6r=o(" (XLM-RoBERTa model)"),P6r=l(),YM=a("li"),N2e=a("strong"),I6r=o("xlnet"),q6r=o(" \u2014 "),fH=a("a"),N6r=o("TFXLNetForTokenClassification"),j6r=o(" (XLNet model)"),D6r=l(),F(KM.$$.fragment),oIe=l(),ic=a("h2"),ZM=a("a"),j2e=a("span"),F(n8.$$.fragment),G6r=l(),D2e=a("span"),O6r=o("TFAutoModelForQuestionAnswering"),rIe=l(),lr=a("div"),F(s8.$$.fragment),V6r=l(),dc=a("p"),X6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),mH=a("a"),z6r=o("from_pretrained()"),Q6r=o(" class method or the "),gH=a("a"),W6r=o("from_config()"),H6r=o(` class
method.`),U6r=l(),l8=a("p"),J6r=o("This class cannot be instantiated directly using "),G2e=a("code"),Y6r=o("__init__()"),K6r=o(" (throws an error)."),Z6r=l(),Rt=a("div"),F(i8.$$.fragment),eTr=l(),O2e=a("p"),oTr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),rTr=l(),cc=a("p"),tTr=o(`Note:
Loading a model from its configuration file does `),V2e=a("strong"),aTr=o("not"),nTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=a("a"),sTr=o("from_pretrained()"),lTr=o(" to load the model weights."),iTr=l(),F(e4.$$.fragment),dTr=l(),Br=a("div"),F(d8.$$.fragment),cTr=l(),X2e=a("p"),fTr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),mTr=l(),nn=a("p"),gTr=o("The model class to instantiate is selected based on the "),z2e=a("code"),hTr=o("model_type"),pTr=o(` property of the config object (either
passed as an argument or loaded from `),Q2e=a("code"),uTr=o("pretrained_model_name_or_path"),_Tr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W2e=a("code"),bTr=o("pretrained_model_name_or_path"),vTr=o(":"),FTr=l(),ce=a("ul"),o4=a("li"),H2e=a("strong"),TTr=o("albert"),MTr=o(" \u2014 "),pH=a("a"),ETr=o("TFAlbertForQuestionAnswering"),CTr=o(" (ALBERT model)"),wTr=l(),r4=a("li"),U2e=a("strong"),ATr=o("bert"),yTr=o(" \u2014 "),uH=a("a"),LTr=o("TFBertForQuestionAnswering"),xTr=o(" (BERT model)"),$Tr=l(),t4=a("li"),J2e=a("strong"),kTr=o("camembert"),STr=o(" \u2014 "),_H=a("a"),RTr=o("TFCamembertForQuestionAnswering"),BTr=o(" (CamemBERT model)"),PTr=l(),a4=a("li"),Y2e=a("strong"),ITr=o("convbert"),qTr=o(" \u2014 "),bH=a("a"),NTr=o("TFConvBertForQuestionAnswering"),jTr=o(" (ConvBERT model)"),DTr=l(),n4=a("li"),K2e=a("strong"),GTr=o("deberta"),OTr=o(" \u2014 "),vH=a("a"),VTr=o("TFDebertaForQuestionAnswering"),XTr=o(" (DeBERTa model)"),zTr=l(),s4=a("li"),Z2e=a("strong"),QTr=o("deberta-v2"),WTr=o(" \u2014 "),FH=a("a"),HTr=o("TFDebertaV2ForQuestionAnswering"),UTr=o(" (DeBERTa-v2 model)"),JTr=l(),l4=a("li"),eve=a("strong"),YTr=o("distilbert"),KTr=o(" \u2014 "),TH=a("a"),ZTr=o("TFDistilBertForQuestionAnswering"),e7r=o(" (DistilBERT model)"),o7r=l(),i4=a("li"),ove=a("strong"),r7r=o("electra"),t7r=o(" \u2014 "),MH=a("a"),a7r=o("TFElectraForQuestionAnswering"),n7r=o(" (ELECTRA model)"),s7r=l(),d4=a("li"),rve=a("strong"),l7r=o("flaubert"),i7r=o(" \u2014 "),EH=a("a"),d7r=o("TFFlaubertForQuestionAnsweringSimple"),c7r=o(" (FlauBERT model)"),f7r=l(),c4=a("li"),tve=a("strong"),m7r=o("funnel"),g7r=o(" \u2014 "),CH=a("a"),h7r=o("TFFunnelForQuestionAnswering"),p7r=o(" (Funnel Transformer model)"),u7r=l(),f4=a("li"),ave=a("strong"),_7r=o("gptj"),b7r=o(" \u2014 "),wH=a("a"),v7r=o("TFGPTJForQuestionAnswering"),F7r=o(" (GPT-J model)"),T7r=l(),m4=a("li"),nve=a("strong"),M7r=o("longformer"),E7r=o(" \u2014 "),AH=a("a"),C7r=o("TFLongformerForQuestionAnswering"),w7r=o(" (Longformer model)"),A7r=l(),g4=a("li"),sve=a("strong"),y7r=o("mobilebert"),L7r=o(" \u2014 "),yH=a("a"),x7r=o("TFMobileBertForQuestionAnswering"),$7r=o(" (MobileBERT model)"),k7r=l(),h4=a("li"),lve=a("strong"),S7r=o("mpnet"),R7r=o(" \u2014 "),LH=a("a"),B7r=o("TFMPNetForQuestionAnswering"),P7r=o(" (MPNet model)"),I7r=l(),p4=a("li"),ive=a("strong"),q7r=o("rembert"),N7r=o(" \u2014 "),xH=a("a"),j7r=o("TFRemBertForQuestionAnswering"),D7r=o(" (RemBERT model)"),G7r=l(),u4=a("li"),dve=a("strong"),O7r=o("roberta"),V7r=o(" \u2014 "),$H=a("a"),X7r=o("TFRobertaForQuestionAnswering"),z7r=o(" (RoBERTa model)"),Q7r=l(),_4=a("li"),cve=a("strong"),W7r=o("roformer"),H7r=o(" \u2014 "),kH=a("a"),U7r=o("TFRoFormerForQuestionAnswering"),J7r=o(" (RoFormer model)"),Y7r=l(),b4=a("li"),fve=a("strong"),K7r=o("xlm"),Z7r=o(" \u2014 "),SH=a("a"),eMr=o("TFXLMForQuestionAnsweringSimple"),oMr=o(" (XLM model)"),rMr=l(),v4=a("li"),mve=a("strong"),tMr=o("xlm-roberta"),aMr=o(" \u2014 "),RH=a("a"),nMr=o("TFXLMRobertaForQuestionAnswering"),sMr=o(" (XLM-RoBERTa model)"),lMr=l(),F4=a("li"),gve=a("strong"),iMr=o("xlnet"),dMr=o(" \u2014 "),BH=a("a"),cMr=o("TFXLNetForQuestionAnsweringSimple"),fMr=o(" (XLNet model)"),mMr=l(),F(T4.$$.fragment),tIe=l(),fc=a("h2"),M4=a("a"),hve=a("span"),F(c8.$$.fragment),gMr=l(),pve=a("span"),hMr=o("TFAutoModelForVision2Seq"),aIe=l(),ir=a("div"),F(f8.$$.fragment),pMr=l(),mc=a("p"),uMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),PH=a("a"),_Mr=o("from_pretrained()"),bMr=o(" class method or the "),IH=a("a"),vMr=o("from_config()"),FMr=o(` class
method.`),TMr=l(),m8=a("p"),MMr=o("This class cannot be instantiated directly using "),uve=a("code"),EMr=o("__init__()"),CMr=o(" (throws an error)."),wMr=l(),Bt=a("div"),F(g8.$$.fragment),AMr=l(),_ve=a("p"),yMr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),LMr=l(),gc=a("p"),xMr=o(`Note:
Loading a model from its configuration file does `),bve=a("strong"),$Mr=o("not"),kMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qH=a("a"),SMr=o("from_pretrained()"),RMr=o(" to load the model weights."),BMr=l(),F(E4.$$.fragment),PMr=l(),Pr=a("div"),F(h8.$$.fragment),IMr=l(),vve=a("p"),qMr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),NMr=l(),sn=a("p"),jMr=o("The model class to instantiate is selected based on the "),Fve=a("code"),DMr=o("model_type"),GMr=o(` property of the config object (either
passed as an argument or loaded from `),Tve=a("code"),OMr=o("pretrained_model_name_or_path"),VMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mve=a("code"),XMr=o("pretrained_model_name_or_path"),zMr=o(":"),QMr=l(),Eve=a("ul"),C4=a("li"),Cve=a("strong"),WMr=o("vision-encoder-decoder"),HMr=o(" \u2014 "),NH=a("a"),UMr=o("TFVisionEncoderDecoderModel"),JMr=o(" (Vision Encoder decoder model)"),YMr=l(),F(w4.$$.fragment),nIe=l(),hc=a("h2"),A4=a("a"),wve=a("span"),F(p8.$$.fragment),KMr=l(),Ave=a("span"),ZMr=o("TFAutoModelForSpeechSeq2Seq"),sIe=l(),dr=a("div"),F(u8.$$.fragment),e4r=l(),pc=a("p"),o4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),jH=a("a"),r4r=o("from_pretrained()"),t4r=o(" class method or the "),DH=a("a"),a4r=o("from_config()"),n4r=o(` class
method.`),s4r=l(),_8=a("p"),l4r=o("This class cannot be instantiated directly using "),yve=a("code"),i4r=o("__init__()"),d4r=o(" (throws an error)."),c4r=l(),Pt=a("div"),F(b8.$$.fragment),f4r=l(),Lve=a("p"),m4r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),g4r=l(),uc=a("p"),h4r=o(`Note:
Loading a model from its configuration file does `),xve=a("strong"),p4r=o("not"),u4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GH=a("a"),_4r=o("from_pretrained()"),b4r=o(" to load the model weights."),v4r=l(),F(y4.$$.fragment),F4r=l(),Ir=a("div"),F(v8.$$.fragment),T4r=l(),$ve=a("p"),M4r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),E4r=l(),ln=a("p"),C4r=o("The model class to instantiate is selected based on the "),kve=a("code"),w4r=o("model_type"),A4r=o(` property of the config object (either
passed as an argument or loaded from `),Sve=a("code"),y4r=o("pretrained_model_name_or_path"),L4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rve=a("code"),x4r=o("pretrained_model_name_or_path"),$4r=o(":"),k4r=l(),Bve=a("ul"),L4=a("li"),Pve=a("strong"),S4r=o("speech_to_text"),R4r=o(" \u2014 "),OH=a("a"),B4r=o("TFSpeech2TextForConditionalGeneration"),P4r=o(" (Speech2Text model)"),I4r=l(),F(x4.$$.fragment),lIe=l(),_c=a("h2"),$4=a("a"),Ive=a("span"),F(F8.$$.fragment),q4r=l(),qve=a("span"),N4r=o("FlaxAutoModel"),iIe=l(),cr=a("div"),F(T8.$$.fragment),j4r=l(),bc=a("p"),D4r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),VH=a("a"),G4r=o("from_pretrained()"),O4r=o(" class method or the "),XH=a("a"),V4r=o("from_config()"),X4r=o(` class
method.`),z4r=l(),M8=a("p"),Q4r=o("This class cannot be instantiated directly using "),Nve=a("code"),W4r=o("__init__()"),H4r=o(" (throws an error)."),U4r=l(),It=a("div"),F(E8.$$.fragment),J4r=l(),jve=a("p"),Y4r=o("Instantiates one of the base model classes of the library from a configuration."),K4r=l(),vc=a("p"),Z4r=o(`Note:
Loading a model from its configuration file does `),Dve=a("strong"),eEr=o("not"),oEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zH=a("a"),rEr=o("from_pretrained()"),tEr=o(" to load the model weights."),aEr=l(),F(k4.$$.fragment),nEr=l(),qr=a("div"),F(C8.$$.fragment),sEr=l(),Gve=a("p"),lEr=o("Instantiate one of the base model classes of the library from a pretrained model."),iEr=l(),dn=a("p"),dEr=o("The model class to instantiate is selected based on the "),Ove=a("code"),cEr=o("model_type"),fEr=o(` property of the config object (either
passed as an argument or loaded from `),Vve=a("code"),mEr=o("pretrained_model_name_or_path"),gEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xve=a("code"),hEr=o("pretrained_model_name_or_path"),pEr=o(":"),uEr=l(),re=a("ul"),S4=a("li"),zve=a("strong"),_Er=o("albert"),bEr=o(" \u2014 "),QH=a("a"),vEr=o("FlaxAlbertModel"),FEr=o(" (ALBERT model)"),TEr=l(),R4=a("li"),Qve=a("strong"),MEr=o("bart"),EEr=o(" \u2014 "),WH=a("a"),CEr=o("FlaxBartModel"),wEr=o(" (BART model)"),AEr=l(),B4=a("li"),Wve=a("strong"),yEr=o("beit"),LEr=o(" \u2014 "),HH=a("a"),xEr=o("FlaxBeitModel"),$Er=o(" (BEiT model)"),kEr=l(),P4=a("li"),Hve=a("strong"),SEr=o("bert"),REr=o(" \u2014 "),UH=a("a"),BEr=o("FlaxBertModel"),PEr=o(" (BERT model)"),IEr=l(),I4=a("li"),Uve=a("strong"),qEr=o("big_bird"),NEr=o(" \u2014 "),JH=a("a"),jEr=o("FlaxBigBirdModel"),DEr=o(" (BigBird model)"),GEr=l(),q4=a("li"),Jve=a("strong"),OEr=o("blenderbot"),VEr=o(" \u2014 "),YH=a("a"),XEr=o("FlaxBlenderbotModel"),zEr=o(" (Blenderbot model)"),QEr=l(),N4=a("li"),Yve=a("strong"),WEr=o("blenderbot-small"),HEr=o(" \u2014 "),KH=a("a"),UEr=o("FlaxBlenderbotSmallModel"),JEr=o(" (BlenderbotSmall model)"),YEr=l(),j4=a("li"),Kve=a("strong"),KEr=o("clip"),ZEr=o(" \u2014 "),ZH=a("a"),eCr=o("FlaxCLIPModel"),oCr=o(" (CLIP model)"),rCr=l(),D4=a("li"),Zve=a("strong"),tCr=o("distilbert"),aCr=o(" \u2014 "),eU=a("a"),nCr=o("FlaxDistilBertModel"),sCr=o(" (DistilBERT model)"),lCr=l(),G4=a("li"),eFe=a("strong"),iCr=o("electra"),dCr=o(" \u2014 "),oU=a("a"),cCr=o("FlaxElectraModel"),fCr=o(" (ELECTRA model)"),mCr=l(),O4=a("li"),oFe=a("strong"),gCr=o("gpt2"),hCr=o(" \u2014 "),rU=a("a"),pCr=o("FlaxGPT2Model"),uCr=o(" (OpenAI GPT-2 model)"),_Cr=l(),V4=a("li"),rFe=a("strong"),bCr=o("gpt_neo"),vCr=o(" \u2014 "),tU=a("a"),FCr=o("FlaxGPTNeoModel"),TCr=o(" (GPT Neo model)"),MCr=l(),X4=a("li"),tFe=a("strong"),ECr=o("gptj"),CCr=o(" \u2014 "),aU=a("a"),wCr=o("FlaxGPTJModel"),ACr=o(" (GPT-J model)"),yCr=l(),z4=a("li"),aFe=a("strong"),LCr=o("marian"),xCr=o(" \u2014 "),nU=a("a"),$Cr=o("FlaxMarianModel"),kCr=o(" (Marian model)"),SCr=l(),Q4=a("li"),nFe=a("strong"),RCr=o("mbart"),BCr=o(" \u2014 "),sU=a("a"),PCr=o("FlaxMBartModel"),ICr=o(" (mBART model)"),qCr=l(),W4=a("li"),sFe=a("strong"),NCr=o("mt5"),jCr=o(" \u2014 "),lU=a("a"),DCr=o("FlaxMT5Model"),GCr=o(" (mT5 model)"),OCr=l(),H4=a("li"),lFe=a("strong"),VCr=o("pegasus"),XCr=o(" \u2014 "),iU=a("a"),zCr=o("FlaxPegasusModel"),QCr=o(" (Pegasus model)"),WCr=l(),U4=a("li"),iFe=a("strong"),HCr=o("roberta"),UCr=o(" \u2014 "),dU=a("a"),JCr=o("FlaxRobertaModel"),YCr=o(" (RoBERTa model)"),KCr=l(),J4=a("li"),dFe=a("strong"),ZCr=o("roformer"),e3r=o(" \u2014 "),cU=a("a"),o3r=o("FlaxRoFormerModel"),r3r=o(" (RoFormer model)"),t3r=l(),Y4=a("li"),cFe=a("strong"),a3r=o("t5"),n3r=o(" \u2014 "),fU=a("a"),s3r=o("FlaxT5Model"),l3r=o(" (T5 model)"),i3r=l(),K4=a("li"),fFe=a("strong"),d3r=o("vision-text-dual-encoder"),c3r=o(" \u2014 "),mU=a("a"),f3r=o("FlaxVisionTextDualEncoderModel"),m3r=o(" (VisionTextDualEncoder model)"),g3r=l(),Z4=a("li"),mFe=a("strong"),h3r=o("vit"),p3r=o(" \u2014 "),gU=a("a"),u3r=o("FlaxViTModel"),_3r=o(" (ViT model)"),b3r=l(),eE=a("li"),gFe=a("strong"),v3r=o("wav2vec2"),F3r=o(" \u2014 "),hU=a("a"),T3r=o("FlaxWav2Vec2Model"),M3r=o(" (Wav2Vec2 model)"),E3r=l(),oE=a("li"),hFe=a("strong"),C3r=o("xglm"),w3r=o(" \u2014 "),pU=a("a"),A3r=o("FlaxXGLMModel"),y3r=o(" (XGLM model)"),L3r=l(),rE=a("li"),pFe=a("strong"),x3r=o("xlm-roberta"),$3r=o(" \u2014 "),uU=a("a"),k3r=o("FlaxXLMRobertaModel"),S3r=o(" (XLM-RoBERTa model)"),R3r=l(),F(tE.$$.fragment),dIe=l(),Fc=a("h2"),aE=a("a"),uFe=a("span"),F(w8.$$.fragment),B3r=l(),_Fe=a("span"),P3r=o("FlaxAutoModelForCausalLM"),cIe=l(),fr=a("div"),F(A8.$$.fragment),I3r=l(),Tc=a("p"),q3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_U=a("a"),N3r=o("from_pretrained()"),j3r=o(" class method or the "),bU=a("a"),D3r=o("from_config()"),G3r=o(` class
method.`),O3r=l(),y8=a("p"),V3r=o("This class cannot be instantiated directly using "),bFe=a("code"),X3r=o("__init__()"),z3r=o(" (throws an error)."),Q3r=l(),qt=a("div"),F(L8.$$.fragment),W3r=l(),vFe=a("p"),H3r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),U3r=l(),Mc=a("p"),J3r=o(`Note:
Loading a model from its configuration file does `),FFe=a("strong"),Y3r=o("not"),K3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=a("a"),Z3r=o("from_pretrained()"),ewr=o(" to load the model weights."),owr=l(),F(nE.$$.fragment),rwr=l(),Nr=a("div"),F(x8.$$.fragment),twr=l(),TFe=a("p"),awr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),nwr=l(),cn=a("p"),swr=o("The model class to instantiate is selected based on the "),MFe=a("code"),lwr=o("model_type"),iwr=o(` property of the config object (either
passed as an argument or loaded from `),EFe=a("code"),dwr=o("pretrained_model_name_or_path"),cwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CFe=a("code"),fwr=o("pretrained_model_name_or_path"),mwr=o(":"),gwr=l(),ke=a("ul"),sE=a("li"),wFe=a("strong"),hwr=o("bart"),pwr=o(" \u2014 "),FU=a("a"),uwr=o("FlaxBartForCausalLM"),_wr=o(" (BART model)"),bwr=l(),lE=a("li"),AFe=a("strong"),vwr=o("bert"),Fwr=o(" \u2014 "),TU=a("a"),Twr=o("FlaxBertForCausalLM"),Mwr=o(" (BERT model)"),Ewr=l(),iE=a("li"),yFe=a("strong"),Cwr=o("big_bird"),wwr=o(" \u2014 "),MU=a("a"),Awr=o("FlaxBigBirdForCausalLM"),ywr=o(" (BigBird model)"),Lwr=l(),dE=a("li"),LFe=a("strong"),xwr=o("electra"),$wr=o(" \u2014 "),EU=a("a"),kwr=o("FlaxElectraForCausalLM"),Swr=o(" (ELECTRA model)"),Rwr=l(),cE=a("li"),xFe=a("strong"),Bwr=o("gpt2"),Pwr=o(" \u2014 "),CU=a("a"),Iwr=o("FlaxGPT2LMHeadModel"),qwr=o(" (OpenAI GPT-2 model)"),Nwr=l(),fE=a("li"),$Fe=a("strong"),jwr=o("gpt_neo"),Dwr=o(" \u2014 "),wU=a("a"),Gwr=o("FlaxGPTNeoForCausalLM"),Owr=o(" (GPT Neo model)"),Vwr=l(),mE=a("li"),kFe=a("strong"),Xwr=o("gptj"),zwr=o(" \u2014 "),AU=a("a"),Qwr=o("FlaxGPTJForCausalLM"),Wwr=o(" (GPT-J model)"),Hwr=l(),gE=a("li"),SFe=a("strong"),Uwr=o("roberta"),Jwr=o(" \u2014 "),yU=a("a"),Ywr=o("FlaxRobertaForCausalLM"),Kwr=o(" (RoBERTa model)"),Zwr=l(),hE=a("li"),RFe=a("strong"),eAr=o("xglm"),oAr=o(" \u2014 "),LU=a("a"),rAr=o("FlaxXGLMForCausalLM"),tAr=o(" (XGLM model)"),aAr=l(),F(pE.$$.fragment),fIe=l(),Ec=a("h2"),uE=a("a"),BFe=a("span"),F($8.$$.fragment),nAr=l(),PFe=a("span"),sAr=o("FlaxAutoModelForPreTraining"),mIe=l(),mr=a("div"),F(k8.$$.fragment),lAr=l(),Cc=a("p"),iAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xU=a("a"),dAr=o("from_pretrained()"),cAr=o(" class method or the "),$U=a("a"),fAr=o("from_config()"),mAr=o(` class
method.`),gAr=l(),S8=a("p"),hAr=o("This class cannot be instantiated directly using "),IFe=a("code"),pAr=o("__init__()"),uAr=o(" (throws an error)."),_Ar=l(),Nt=a("div"),F(R8.$$.fragment),bAr=l(),qFe=a("p"),vAr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),FAr=l(),wc=a("p"),TAr=o(`Note:
Loading a model from its configuration file does `),NFe=a("strong"),MAr=o("not"),EAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kU=a("a"),CAr=o("from_pretrained()"),wAr=o(" to load the model weights."),AAr=l(),F(_E.$$.fragment),yAr=l(),jr=a("div"),F(B8.$$.fragment),LAr=l(),jFe=a("p"),xAr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),$Ar=l(),fn=a("p"),kAr=o("The model class to instantiate is selected based on the "),DFe=a("code"),SAr=o("model_type"),RAr=o(` property of the config object (either
passed as an argument or loaded from `),GFe=a("code"),BAr=o("pretrained_model_name_or_path"),PAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OFe=a("code"),IAr=o("pretrained_model_name_or_path"),qAr=o(":"),NAr=l(),Ee=a("ul"),bE=a("li"),VFe=a("strong"),jAr=o("albert"),DAr=o(" \u2014 "),SU=a("a"),GAr=o("FlaxAlbertForPreTraining"),OAr=o(" (ALBERT model)"),VAr=l(),vE=a("li"),XFe=a("strong"),XAr=o("bart"),zAr=o(" \u2014 "),RU=a("a"),QAr=o("FlaxBartForConditionalGeneration"),WAr=o(" (BART model)"),HAr=l(),FE=a("li"),zFe=a("strong"),UAr=o("bert"),JAr=o(" \u2014 "),BU=a("a"),YAr=o("FlaxBertForPreTraining"),KAr=o(" (BERT model)"),ZAr=l(),TE=a("li"),QFe=a("strong"),e0r=o("big_bird"),o0r=o(" \u2014 "),PU=a("a"),r0r=o("FlaxBigBirdForPreTraining"),t0r=o(" (BigBird model)"),a0r=l(),ME=a("li"),WFe=a("strong"),n0r=o("electra"),s0r=o(" \u2014 "),IU=a("a"),l0r=o("FlaxElectraForPreTraining"),i0r=o(" (ELECTRA model)"),d0r=l(),EE=a("li"),HFe=a("strong"),c0r=o("mbart"),f0r=o(" \u2014 "),qU=a("a"),m0r=o("FlaxMBartForConditionalGeneration"),g0r=o(" (mBART model)"),h0r=l(),CE=a("li"),UFe=a("strong"),p0r=o("mt5"),u0r=o(" \u2014 "),NU=a("a"),_0r=o("FlaxMT5ForConditionalGeneration"),b0r=o(" (mT5 model)"),v0r=l(),wE=a("li"),JFe=a("strong"),F0r=o("roberta"),T0r=o(" \u2014 "),jU=a("a"),M0r=o("FlaxRobertaForMaskedLM"),E0r=o(" (RoBERTa model)"),C0r=l(),AE=a("li"),YFe=a("strong"),w0r=o("roformer"),A0r=o(" \u2014 "),DU=a("a"),y0r=o("FlaxRoFormerForMaskedLM"),L0r=o(" (RoFormer model)"),x0r=l(),yE=a("li"),KFe=a("strong"),$0r=o("t5"),k0r=o(" \u2014 "),GU=a("a"),S0r=o("FlaxT5ForConditionalGeneration"),R0r=o(" (T5 model)"),B0r=l(),LE=a("li"),ZFe=a("strong"),P0r=o("wav2vec2"),I0r=o(" \u2014 "),OU=a("a"),q0r=o("FlaxWav2Vec2ForPreTraining"),N0r=o(" (Wav2Vec2 model)"),j0r=l(),xE=a("li"),e6e=a("strong"),D0r=o("xlm-roberta"),G0r=o(" \u2014 "),VU=a("a"),O0r=o("FlaxXLMRobertaForMaskedLM"),V0r=o(" (XLM-RoBERTa model)"),X0r=l(),F($E.$$.fragment),gIe=l(),Ac=a("h2"),kE=a("a"),o6e=a("span"),F(P8.$$.fragment),z0r=l(),r6e=a("span"),Q0r=o("FlaxAutoModelForMaskedLM"),hIe=l(),gr=a("div"),F(I8.$$.fragment),W0r=l(),yc=a("p"),H0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),XU=a("a"),U0r=o("from_pretrained()"),J0r=o(" class method or the "),zU=a("a"),Y0r=o("from_config()"),K0r=o(` class
method.`),Z0r=l(),q8=a("p"),eyr=o("This class cannot be instantiated directly using "),t6e=a("code"),oyr=o("__init__()"),ryr=o(" (throws an error)."),tyr=l(),jt=a("div"),F(N8.$$.fragment),ayr=l(),a6e=a("p"),nyr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),syr=l(),Lc=a("p"),lyr=o(`Note:
Loading a model from its configuration file does `),n6e=a("strong"),iyr=o("not"),dyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QU=a("a"),cyr=o("from_pretrained()"),fyr=o(" to load the model weights."),myr=l(),F(SE.$$.fragment),gyr=l(),Dr=a("div"),F(j8.$$.fragment),hyr=l(),s6e=a("p"),pyr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),uyr=l(),mn=a("p"),_yr=o("The model class to instantiate is selected based on the "),l6e=a("code"),byr=o("model_type"),vyr=o(` property of the config object (either
passed as an argument or loaded from `),i6e=a("code"),Fyr=o("pretrained_model_name_or_path"),Tyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d6e=a("code"),Myr=o("pretrained_model_name_or_path"),Eyr=o(":"),Cyr=l(),Le=a("ul"),RE=a("li"),c6e=a("strong"),wyr=o("albert"),Ayr=o(" \u2014 "),WU=a("a"),yyr=o("FlaxAlbertForMaskedLM"),Lyr=o(" (ALBERT model)"),xyr=l(),BE=a("li"),f6e=a("strong"),$yr=o("bart"),kyr=o(" \u2014 "),HU=a("a"),Syr=o("FlaxBartForConditionalGeneration"),Ryr=o(" (BART model)"),Byr=l(),PE=a("li"),m6e=a("strong"),Pyr=o("bert"),Iyr=o(" \u2014 "),UU=a("a"),qyr=o("FlaxBertForMaskedLM"),Nyr=o(" (BERT model)"),jyr=l(),IE=a("li"),g6e=a("strong"),Dyr=o("big_bird"),Gyr=o(" \u2014 "),JU=a("a"),Oyr=o("FlaxBigBirdForMaskedLM"),Vyr=o(" (BigBird model)"),Xyr=l(),qE=a("li"),h6e=a("strong"),zyr=o("distilbert"),Qyr=o(" \u2014 "),YU=a("a"),Wyr=o("FlaxDistilBertForMaskedLM"),Hyr=o(" (DistilBERT model)"),Uyr=l(),NE=a("li"),p6e=a("strong"),Jyr=o("electra"),Yyr=o(" \u2014 "),KU=a("a"),Kyr=o("FlaxElectraForMaskedLM"),Zyr=o(" (ELECTRA model)"),eLr=l(),jE=a("li"),u6e=a("strong"),oLr=o("mbart"),rLr=o(" \u2014 "),ZU=a("a"),tLr=o("FlaxMBartForConditionalGeneration"),aLr=o(" (mBART model)"),nLr=l(),DE=a("li"),_6e=a("strong"),sLr=o("roberta"),lLr=o(" \u2014 "),eJ=a("a"),iLr=o("FlaxRobertaForMaskedLM"),dLr=o(" (RoBERTa model)"),cLr=l(),GE=a("li"),b6e=a("strong"),fLr=o("roformer"),mLr=o(" \u2014 "),oJ=a("a"),gLr=o("FlaxRoFormerForMaskedLM"),hLr=o(" (RoFormer model)"),pLr=l(),OE=a("li"),v6e=a("strong"),uLr=o("xlm-roberta"),_Lr=o(" \u2014 "),rJ=a("a"),bLr=o("FlaxXLMRobertaForMaskedLM"),vLr=o(" (XLM-RoBERTa model)"),FLr=l(),F(VE.$$.fragment),pIe=l(),xc=a("h2"),XE=a("a"),F6e=a("span"),F(D8.$$.fragment),TLr=l(),T6e=a("span"),MLr=o("FlaxAutoModelForSeq2SeqLM"),uIe=l(),hr=a("div"),F(G8.$$.fragment),ELr=l(),$c=a("p"),CLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),tJ=a("a"),wLr=o("from_pretrained()"),ALr=o(" class method or the "),aJ=a("a"),yLr=o("from_config()"),LLr=o(` class
method.`),xLr=l(),O8=a("p"),$Lr=o("This class cannot be instantiated directly using "),M6e=a("code"),kLr=o("__init__()"),SLr=o(" (throws an error)."),RLr=l(),Dt=a("div"),F(V8.$$.fragment),BLr=l(),E6e=a("p"),PLr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ILr=l(),kc=a("p"),qLr=o(`Note:
Loading a model from its configuration file does `),C6e=a("strong"),NLr=o("not"),jLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nJ=a("a"),DLr=o("from_pretrained()"),GLr=o(" to load the model weights."),OLr=l(),F(zE.$$.fragment),VLr=l(),Gr=a("div"),F(X8.$$.fragment),XLr=l(),w6e=a("p"),zLr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),QLr=l(),gn=a("p"),WLr=o("The model class to instantiate is selected based on the "),A6e=a("code"),HLr=o("model_type"),ULr=o(` property of the config object (either
passed as an argument or loaded from `),y6e=a("code"),JLr=o("pretrained_model_name_or_path"),YLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L6e=a("code"),KLr=o("pretrained_model_name_or_path"),ZLr=o(":"),e8r=l(),Se=a("ul"),QE=a("li"),x6e=a("strong"),o8r=o("bart"),r8r=o(" \u2014 "),sJ=a("a"),t8r=o("FlaxBartForConditionalGeneration"),a8r=o(" (BART model)"),n8r=l(),WE=a("li"),$6e=a("strong"),s8r=o("blenderbot"),l8r=o(" \u2014 "),lJ=a("a"),i8r=o("FlaxBlenderbotForConditionalGeneration"),d8r=o(" (Blenderbot model)"),c8r=l(),HE=a("li"),k6e=a("strong"),f8r=o("blenderbot-small"),m8r=o(" \u2014 "),iJ=a("a"),g8r=o("FlaxBlenderbotSmallForConditionalGeneration"),h8r=o(" (BlenderbotSmall model)"),p8r=l(),UE=a("li"),S6e=a("strong"),u8r=o("encoder-decoder"),_8r=o(" \u2014 "),dJ=a("a"),b8r=o("FlaxEncoderDecoderModel"),v8r=o(" (Encoder decoder model)"),F8r=l(),JE=a("li"),R6e=a("strong"),T8r=o("marian"),M8r=o(" \u2014 "),cJ=a("a"),E8r=o("FlaxMarianMTModel"),C8r=o(" (Marian model)"),w8r=l(),YE=a("li"),B6e=a("strong"),A8r=o("mbart"),y8r=o(" \u2014 "),fJ=a("a"),L8r=o("FlaxMBartForConditionalGeneration"),x8r=o(" (mBART model)"),$8r=l(),KE=a("li"),P6e=a("strong"),k8r=o("mt5"),S8r=o(" \u2014 "),mJ=a("a"),R8r=o("FlaxMT5ForConditionalGeneration"),B8r=o(" (mT5 model)"),P8r=l(),ZE=a("li"),I6e=a("strong"),I8r=o("pegasus"),q8r=o(" \u2014 "),gJ=a("a"),N8r=o("FlaxPegasusForConditionalGeneration"),j8r=o(" (Pegasus model)"),D8r=l(),eC=a("li"),q6e=a("strong"),G8r=o("t5"),O8r=o(" \u2014 "),hJ=a("a"),V8r=o("FlaxT5ForConditionalGeneration"),X8r=o(" (T5 model)"),z8r=l(),F(oC.$$.fragment),_Ie=l(),Sc=a("h2"),rC=a("a"),N6e=a("span"),F(z8.$$.fragment),Q8r=l(),j6e=a("span"),W8r=o("FlaxAutoModelForSequenceClassification"),bIe=l(),pr=a("div"),F(Q8.$$.fragment),H8r=l(),Rc=a("p"),U8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),pJ=a("a"),J8r=o("from_pretrained()"),Y8r=o(" class method or the "),uJ=a("a"),K8r=o("from_config()"),Z8r=o(` class
method.`),exr=l(),W8=a("p"),oxr=o("This class cannot be instantiated directly using "),D6e=a("code"),rxr=o("__init__()"),txr=o(" (throws an error)."),axr=l(),Gt=a("div"),F(H8.$$.fragment),nxr=l(),G6e=a("p"),sxr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),lxr=l(),Bc=a("p"),ixr=o(`Note:
Loading a model from its configuration file does `),O6e=a("strong"),dxr=o("not"),cxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_J=a("a"),fxr=o("from_pretrained()"),mxr=o(" to load the model weights."),gxr=l(),F(tC.$$.fragment),hxr=l(),Or=a("div"),F(U8.$$.fragment),pxr=l(),V6e=a("p"),uxr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),_xr=l(),hn=a("p"),bxr=o("The model class to instantiate is selected based on the "),X6e=a("code"),vxr=o("model_type"),Fxr=o(` property of the config object (either
passed as an argument or loaded from `),z6e=a("code"),Txr=o("pretrained_model_name_or_path"),Mxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q6e=a("code"),Exr=o("pretrained_model_name_or_path"),Cxr=o(":"),wxr=l(),xe=a("ul"),aC=a("li"),W6e=a("strong"),Axr=o("albert"),yxr=o(" \u2014 "),bJ=a("a"),Lxr=o("FlaxAlbertForSequenceClassification"),xxr=o(" (ALBERT model)"),$xr=l(),nC=a("li"),H6e=a("strong"),kxr=o("bart"),Sxr=o(" \u2014 "),vJ=a("a"),Rxr=o("FlaxBartForSequenceClassification"),Bxr=o(" (BART model)"),Pxr=l(),sC=a("li"),U6e=a("strong"),Ixr=o("bert"),qxr=o(" \u2014 "),FJ=a("a"),Nxr=o("FlaxBertForSequenceClassification"),jxr=o(" (BERT model)"),Dxr=l(),lC=a("li"),J6e=a("strong"),Gxr=o("big_bird"),Oxr=o(" \u2014 "),TJ=a("a"),Vxr=o("FlaxBigBirdForSequenceClassification"),Xxr=o(" (BigBird model)"),zxr=l(),iC=a("li"),Y6e=a("strong"),Qxr=o("distilbert"),Wxr=o(" \u2014 "),MJ=a("a"),Hxr=o("FlaxDistilBertForSequenceClassification"),Uxr=o(" (DistilBERT model)"),Jxr=l(),dC=a("li"),K6e=a("strong"),Yxr=o("electra"),Kxr=o(" \u2014 "),EJ=a("a"),Zxr=o("FlaxElectraForSequenceClassification"),e9r=o(" (ELECTRA model)"),o9r=l(),cC=a("li"),Z6e=a("strong"),r9r=o("mbart"),t9r=o(" \u2014 "),CJ=a("a"),a9r=o("FlaxMBartForSequenceClassification"),n9r=o(" (mBART model)"),s9r=l(),fC=a("li"),eTe=a("strong"),l9r=o("roberta"),i9r=o(" \u2014 "),wJ=a("a"),d9r=o("FlaxRobertaForSequenceClassification"),c9r=o(" (RoBERTa model)"),f9r=l(),mC=a("li"),oTe=a("strong"),m9r=o("roformer"),g9r=o(" \u2014 "),AJ=a("a"),h9r=o("FlaxRoFormerForSequenceClassification"),p9r=o(" (RoFormer model)"),u9r=l(),gC=a("li"),rTe=a("strong"),_9r=o("xlm-roberta"),b9r=o(" \u2014 "),yJ=a("a"),v9r=o("FlaxXLMRobertaForSequenceClassification"),F9r=o(" (XLM-RoBERTa model)"),T9r=l(),F(hC.$$.fragment),vIe=l(),Pc=a("h2"),pC=a("a"),tTe=a("span"),F(J8.$$.fragment),M9r=l(),aTe=a("span"),E9r=o("FlaxAutoModelForQuestionAnswering"),FIe=l(),ur=a("div"),F(Y8.$$.fragment),C9r=l(),Ic=a("p"),w9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),LJ=a("a"),A9r=o("from_pretrained()"),y9r=o(" class method or the "),xJ=a("a"),L9r=o("from_config()"),x9r=o(` class
method.`),$9r=l(),K8=a("p"),k9r=o("This class cannot be instantiated directly using "),nTe=a("code"),S9r=o("__init__()"),R9r=o(" (throws an error)."),B9r=l(),Ot=a("div"),F(Z8.$$.fragment),P9r=l(),sTe=a("p"),I9r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),q9r=l(),qc=a("p"),N9r=o(`Note:
Loading a model from its configuration file does `),lTe=a("strong"),j9r=o("not"),D9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$J=a("a"),G9r=o("from_pretrained()"),O9r=o(" to load the model weights."),V9r=l(),F(uC.$$.fragment),X9r=l(),Vr=a("div"),F(ex.$$.fragment),z9r=l(),iTe=a("p"),Q9r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),W9r=l(),pn=a("p"),H9r=o("The model class to instantiate is selected based on the "),dTe=a("code"),U9r=o("model_type"),J9r=o(` property of the config object (either
passed as an argument or loaded from `),cTe=a("code"),Y9r=o("pretrained_model_name_or_path"),K9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fTe=a("code"),Z9r=o("pretrained_model_name_or_path"),e$r=o(":"),o$r=l(),$e=a("ul"),_C=a("li"),mTe=a("strong"),r$r=o("albert"),t$r=o(" \u2014 "),kJ=a("a"),a$r=o("FlaxAlbertForQuestionAnswering"),n$r=o(" (ALBERT model)"),s$r=l(),bC=a("li"),gTe=a("strong"),l$r=o("bart"),i$r=o(" \u2014 "),SJ=a("a"),d$r=o("FlaxBartForQuestionAnswering"),c$r=o(" (BART model)"),f$r=l(),vC=a("li"),hTe=a("strong"),m$r=o("bert"),g$r=o(" \u2014 "),RJ=a("a"),h$r=o("FlaxBertForQuestionAnswering"),p$r=o(" (BERT model)"),u$r=l(),FC=a("li"),pTe=a("strong"),_$r=o("big_bird"),b$r=o(" \u2014 "),BJ=a("a"),v$r=o("FlaxBigBirdForQuestionAnswering"),F$r=o(" (BigBird model)"),T$r=l(),TC=a("li"),uTe=a("strong"),M$r=o("distilbert"),E$r=o(" \u2014 "),PJ=a("a"),C$r=o("FlaxDistilBertForQuestionAnswering"),w$r=o(" (DistilBERT model)"),A$r=l(),MC=a("li"),_Te=a("strong"),y$r=o("electra"),L$r=o(" \u2014 "),IJ=a("a"),x$r=o("FlaxElectraForQuestionAnswering"),$$r=o(" (ELECTRA model)"),k$r=l(),EC=a("li"),bTe=a("strong"),S$r=o("mbart"),R$r=o(" \u2014 "),qJ=a("a"),B$r=o("FlaxMBartForQuestionAnswering"),P$r=o(" (mBART model)"),I$r=l(),CC=a("li"),vTe=a("strong"),q$r=o("roberta"),N$r=o(" \u2014 "),NJ=a("a"),j$r=o("FlaxRobertaForQuestionAnswering"),D$r=o(" (RoBERTa model)"),G$r=l(),wC=a("li"),FTe=a("strong"),O$r=o("roformer"),V$r=o(" \u2014 "),jJ=a("a"),X$r=o("FlaxRoFormerForQuestionAnswering"),z$r=o(" (RoFormer model)"),Q$r=l(),AC=a("li"),TTe=a("strong"),W$r=o("xlm-roberta"),H$r=o(" \u2014 "),DJ=a("a"),U$r=o("FlaxXLMRobertaForQuestionAnswering"),J$r=o(" (XLM-RoBERTa model)"),Y$r=l(),F(yC.$$.fragment),TIe=l(),Nc=a("h2"),LC=a("a"),MTe=a("span"),F(ox.$$.fragment),K$r=l(),ETe=a("span"),Z$r=o("FlaxAutoModelForTokenClassification"),MIe=l(),_r=a("div"),F(rx.$$.fragment),ekr=l(),jc=a("p"),okr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),GJ=a("a"),rkr=o("from_pretrained()"),tkr=o(" class method or the "),OJ=a("a"),akr=o("from_config()"),nkr=o(` class
method.`),skr=l(),tx=a("p"),lkr=o("This class cannot be instantiated directly using "),CTe=a("code"),ikr=o("__init__()"),dkr=o(" (throws an error)."),ckr=l(),Vt=a("div"),F(ax.$$.fragment),fkr=l(),wTe=a("p"),mkr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),gkr=l(),Dc=a("p"),hkr=o(`Note:
Loading a model from its configuration file does `),ATe=a("strong"),pkr=o("not"),ukr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=a("a"),_kr=o("from_pretrained()"),bkr=o(" to load the model weights."),vkr=l(),F(xC.$$.fragment),Fkr=l(),Xr=a("div"),F(nx.$$.fragment),Tkr=l(),yTe=a("p"),Mkr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Ekr=l(),un=a("p"),Ckr=o("The model class to instantiate is selected based on the "),LTe=a("code"),wkr=o("model_type"),Akr=o(` property of the config object (either
passed as an argument or loaded from `),xTe=a("code"),ykr=o("pretrained_model_name_or_path"),Lkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Te=a("code"),xkr=o("pretrained_model_name_or_path"),$kr=o(":"),kkr=l(),De=a("ul"),$C=a("li"),kTe=a("strong"),Skr=o("albert"),Rkr=o(" \u2014 "),XJ=a("a"),Bkr=o("FlaxAlbertForTokenClassification"),Pkr=o(" (ALBERT model)"),Ikr=l(),kC=a("li"),STe=a("strong"),qkr=o("bert"),Nkr=o(" \u2014 "),zJ=a("a"),jkr=o("FlaxBertForTokenClassification"),Dkr=o(" (BERT model)"),Gkr=l(),SC=a("li"),RTe=a("strong"),Okr=o("big_bird"),Vkr=o(" \u2014 "),QJ=a("a"),Xkr=o("FlaxBigBirdForTokenClassification"),zkr=o(" (BigBird model)"),Qkr=l(),RC=a("li"),BTe=a("strong"),Wkr=o("distilbert"),Hkr=o(" \u2014 "),WJ=a("a"),Ukr=o("FlaxDistilBertForTokenClassification"),Jkr=o(" (DistilBERT model)"),Ykr=l(),BC=a("li"),PTe=a("strong"),Kkr=o("electra"),Zkr=o(" \u2014 "),HJ=a("a"),eSr=o("FlaxElectraForTokenClassification"),oSr=o(" (ELECTRA model)"),rSr=l(),PC=a("li"),ITe=a("strong"),tSr=o("roberta"),aSr=o(" \u2014 "),UJ=a("a"),nSr=o("FlaxRobertaForTokenClassification"),sSr=o(" (RoBERTa model)"),lSr=l(),IC=a("li"),qTe=a("strong"),iSr=o("roformer"),dSr=o(" \u2014 "),JJ=a("a"),cSr=o("FlaxRoFormerForTokenClassification"),fSr=o(" (RoFormer model)"),mSr=l(),qC=a("li"),NTe=a("strong"),gSr=o("xlm-roberta"),hSr=o(" \u2014 "),YJ=a("a"),pSr=o("FlaxXLMRobertaForTokenClassification"),uSr=o(" (XLM-RoBERTa model)"),_Sr=l(),F(NC.$$.fragment),EIe=l(),Gc=a("h2"),jC=a("a"),jTe=a("span"),F(sx.$$.fragment),bSr=l(),DTe=a("span"),vSr=o("FlaxAutoModelForMultipleChoice"),CIe=l(),br=a("div"),F(lx.$$.fragment),FSr=l(),Oc=a("p"),TSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),KJ=a("a"),MSr=o("from_pretrained()"),ESr=o(" class method or the "),ZJ=a("a"),CSr=o("from_config()"),wSr=o(` class
method.`),ASr=l(),ix=a("p"),ySr=o("This class cannot be instantiated directly using "),GTe=a("code"),LSr=o("__init__()"),xSr=o(" (throws an error)."),$Sr=l(),Xt=a("div"),F(dx.$$.fragment),kSr=l(),OTe=a("p"),SSr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),RSr=l(),Vc=a("p"),BSr=o(`Note:
Loading a model from its configuration file does `),VTe=a("strong"),PSr=o("not"),ISr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eY=a("a"),qSr=o("from_pretrained()"),NSr=o(" to load the model weights."),jSr=l(),F(DC.$$.fragment),DSr=l(),zr=a("div"),F(cx.$$.fragment),GSr=l(),XTe=a("p"),OSr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),VSr=l(),_n=a("p"),XSr=o("The model class to instantiate is selected based on the "),zTe=a("code"),zSr=o("model_type"),QSr=o(` property of the config object (either
passed as an argument or loaded from `),QTe=a("code"),WSr=o("pretrained_model_name_or_path"),HSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WTe=a("code"),USr=o("pretrained_model_name_or_path"),JSr=o(":"),YSr=l(),Ge=a("ul"),GC=a("li"),HTe=a("strong"),KSr=o("albert"),ZSr=o(" \u2014 "),oY=a("a"),eRr=o("FlaxAlbertForMultipleChoice"),oRr=o(" (ALBERT model)"),rRr=l(),OC=a("li"),UTe=a("strong"),tRr=o("bert"),aRr=o(" \u2014 "),rY=a("a"),nRr=o("FlaxBertForMultipleChoice"),sRr=o(" (BERT model)"),lRr=l(),VC=a("li"),JTe=a("strong"),iRr=o("big_bird"),dRr=o(" \u2014 "),tY=a("a"),cRr=o("FlaxBigBirdForMultipleChoice"),fRr=o(" (BigBird model)"),mRr=l(),XC=a("li"),YTe=a("strong"),gRr=o("distilbert"),hRr=o(" \u2014 "),aY=a("a"),pRr=o("FlaxDistilBertForMultipleChoice"),uRr=o(" (DistilBERT model)"),_Rr=l(),zC=a("li"),KTe=a("strong"),bRr=o("electra"),vRr=o(" \u2014 "),nY=a("a"),FRr=o("FlaxElectraForMultipleChoice"),TRr=o(" (ELECTRA model)"),MRr=l(),QC=a("li"),ZTe=a("strong"),ERr=o("roberta"),CRr=o(" \u2014 "),sY=a("a"),wRr=o("FlaxRobertaForMultipleChoice"),ARr=o(" (RoBERTa model)"),yRr=l(),WC=a("li"),e7e=a("strong"),LRr=o("roformer"),xRr=o(" \u2014 "),lY=a("a"),$Rr=o("FlaxRoFormerForMultipleChoice"),kRr=o(" (RoFormer model)"),SRr=l(),HC=a("li"),o7e=a("strong"),RRr=o("xlm-roberta"),BRr=o(" \u2014 "),iY=a("a"),PRr=o("FlaxXLMRobertaForMultipleChoice"),IRr=o(" (XLM-RoBERTa model)"),qRr=l(),F(UC.$$.fragment),wIe=l(),Xc=a("h2"),JC=a("a"),r7e=a("span"),F(fx.$$.fragment),NRr=l(),t7e=a("span"),jRr=o("FlaxAutoModelForNextSentencePrediction"),AIe=l(),vr=a("div"),F(mx.$$.fragment),DRr=l(),zc=a("p"),GRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),dY=a("a"),ORr=o("from_pretrained()"),VRr=o(" class method or the "),cY=a("a"),XRr=o("from_config()"),zRr=o(` class
method.`),QRr=l(),gx=a("p"),WRr=o("This class cannot be instantiated directly using "),a7e=a("code"),HRr=o("__init__()"),URr=o(" (throws an error)."),JRr=l(),zt=a("div"),F(hx.$$.fragment),YRr=l(),n7e=a("p"),KRr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ZRr=l(),Qc=a("p"),eBr=o(`Note:
Loading a model from its configuration file does `),s7e=a("strong"),oBr=o("not"),rBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=a("a"),tBr=o("from_pretrained()"),aBr=o(" to load the model weights."),nBr=l(),F(YC.$$.fragment),sBr=l(),Qr=a("div"),F(px.$$.fragment),lBr=l(),l7e=a("p"),iBr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),dBr=l(),bn=a("p"),cBr=o("The model class to instantiate is selected based on the "),i7e=a("code"),fBr=o("model_type"),mBr=o(` property of the config object (either
passed as an argument or loaded from `),d7e=a("code"),gBr=o("pretrained_model_name_or_path"),hBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c7e=a("code"),pBr=o("pretrained_model_name_or_path"),uBr=o(":"),_Br=l(),f7e=a("ul"),KC=a("li"),m7e=a("strong"),bBr=o("bert"),vBr=o(" \u2014 "),mY=a("a"),FBr=o("FlaxBertForNextSentencePrediction"),TBr=o(" (BERT model)"),MBr=l(),F(ZC.$$.fragment),yIe=l(),Wc=a("h2"),e3=a("a"),g7e=a("span"),F(ux.$$.fragment),EBr=l(),h7e=a("span"),CBr=o("FlaxAutoModelForImageClassification"),LIe=l(),Fr=a("div"),F(_x.$$.fragment),wBr=l(),Hc=a("p"),ABr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),gY=a("a"),yBr=o("from_pretrained()"),LBr=o(" class method or the "),hY=a("a"),xBr=o("from_config()"),$Br=o(` class
method.`),kBr=l(),bx=a("p"),SBr=o("This class cannot be instantiated directly using "),p7e=a("code"),RBr=o("__init__()"),BBr=o(" (throws an error)."),PBr=l(),Qt=a("div"),F(vx.$$.fragment),IBr=l(),u7e=a("p"),qBr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),NBr=l(),Uc=a("p"),jBr=o(`Note:
Loading a model from its configuration file does `),_7e=a("strong"),DBr=o("not"),GBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pY=a("a"),OBr=o("from_pretrained()"),VBr=o(" to load the model weights."),XBr=l(),F(o3.$$.fragment),zBr=l(),Wr=a("div"),F(Fx.$$.fragment),QBr=l(),b7e=a("p"),WBr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),HBr=l(),vn=a("p"),UBr=o("The model class to instantiate is selected based on the "),v7e=a("code"),JBr=o("model_type"),YBr=o(` property of the config object (either
passed as an argument or loaded from `),F7e=a("code"),KBr=o("pretrained_model_name_or_path"),ZBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T7e=a("code"),ePr=o("pretrained_model_name_or_path"),oPr=o(":"),rPr=l(),Tx=a("ul"),r3=a("li"),M7e=a("strong"),tPr=o("beit"),aPr=o(" \u2014 "),uY=a("a"),nPr=o("FlaxBeitForImageClassification"),sPr=o(" (BEiT model)"),lPr=l(),t3=a("li"),E7e=a("strong"),iPr=o("vit"),dPr=o(" \u2014 "),_Y=a("a"),cPr=o("FlaxViTForImageClassification"),fPr=o(" (ViT model)"),mPr=l(),F(a3.$$.fragment),xIe=l(),Jc=a("h2"),n3=a("a"),C7e=a("span"),F(Mx.$$.fragment),gPr=l(),w7e=a("span"),hPr=o("FlaxAutoModelForVision2Seq"),$Ie=l(),Tr=a("div"),F(Ex.$$.fragment),pPr=l(),Yc=a("p"),uPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),bY=a("a"),_Pr=o("from_pretrained()"),bPr=o(" class method or the "),vY=a("a"),vPr=o("from_config()"),FPr=o(` class
method.`),TPr=l(),Cx=a("p"),MPr=o("This class cannot be instantiated directly using "),A7e=a("code"),EPr=o("__init__()"),CPr=o(" (throws an error)."),wPr=l(),Wt=a("div"),F(wx.$$.fragment),APr=l(),y7e=a("p"),yPr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),LPr=l(),Kc=a("p"),xPr=o(`Note:
Loading a model from its configuration file does `),L7e=a("strong"),$Pr=o("not"),kPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FY=a("a"),SPr=o("from_pretrained()"),RPr=o(" to load the model weights."),BPr=l(),F(s3.$$.fragment),PPr=l(),Hr=a("div"),F(Ax.$$.fragment),IPr=l(),x7e=a("p"),qPr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),NPr=l(),Fn=a("p"),jPr=o("The model class to instantiate is selected based on the "),$7e=a("code"),DPr=o("model_type"),GPr=o(` property of the config object (either
passed as an argument or loaded from `),k7e=a("code"),OPr=o("pretrained_model_name_or_path"),VPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S7e=a("code"),XPr=o("pretrained_model_name_or_path"),zPr=o(":"),QPr=l(),R7e=a("ul"),l3=a("li"),B7e=a("strong"),WPr=o("vision-encoder-decoder"),HPr=o(" \u2014 "),TY=a("a"),UPr=o("FlaxVisionEncoderDecoderModel"),JPr=o(" (Vision Encoder decoder model)"),YPr=l(),F(i3.$$.fragment),this.h()},l(f){const _=KCt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var yx=s(p);m=n(yx,"A",{id:!0,class:!0,href:!0});var P7e=s(m);u=n(P7e,"SPAN",{});var I7e=s(u);T(d.$$.fragment,I7e),I7e.forEach(t),P7e.forEach(t),h=i(yx),Mo=n(yx,"SPAN",{});var q7e=s(Mo);oi=r(q7e,"Auto Classes"),q7e.forEach(t),yx.forEach(t),rf=i(f),Kr=n(f,"P",{});var Lx=s(Kr);ri=r(Lx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ti=n(Lx,"CODE",{});var N7e=s(ti);CA=r(N7e,"from_pretrained()"),N7e.forEach(t),tf=r(Lx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Lx.forEach(t),qe=i(f),Xe=n(f,"P",{});var Tn=s(Xe);ai=r(Tn,"Instantiating one of "),Mn=n(Tn,"A",{href:!0});var j7e=s(Mn);wA=r(j7e,"AutoConfig"),j7e.forEach(t),En=r(Tn,", "),Cn=n(Tn,"A",{href:!0});var D7e=s(Cn);AA=r(D7e,"AutoModel"),D7e.forEach(t),ni=r(Tn,`, and
`),wn=n(Tn,"A",{href:!0});var G7e=s(wn);yA=r(G7e,"AutoTokenizer"),G7e.forEach(t),si=r(Tn," will directly create a class of the relevant architecture. For instance"),Tn.forEach(t),af=i(f),T(va.$$.fragment,f),ze=i(f),Ae=n(f,"P",{});var xx=s(Ae);j9=r(xx,"will create a model that is an instance of "),li=n(xx,"A",{href:!0});var O7e=s(li);D9=r(O7e,"BertModel"),O7e.forEach(t),G9=r(xx,"."),xx.forEach(t),Eo=i(f),Fa=n(f,"P",{});var $x=s(Fa);O9=r($x,"There is one class of "),nf=n($x,"CODE",{});var V7e=s(nf);V9=r(V7e,"AutoModel"),V7e.forEach(t),INe=r($x," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),$x.forEach(t),$Be=i(f),ii=n(f,"H2",{class:!0});var kx=s(ii);sf=n(kx,"A",{id:!0,class:!0,href:!0});var X7e=s(sf);gZ=n(X7e,"SPAN",{});var z7e=s(gZ);T(LA.$$.fragment,z7e),z7e.forEach(t),X7e.forEach(t),qNe=i(kx),hZ=n(kx,"SPAN",{});var Q7e=s(hZ);NNe=r(Q7e,"Extending the Auto Classes"),Q7e.forEach(t),kx.forEach(t),kBe=i(f),An=n(f,"P",{});var Zc=s(An);jNe=r(Zc,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),pZ=n(Zc,"CODE",{});var W7e=s(pZ);DNe=r(W7e,"NewModel"),W7e.forEach(t),GNe=r(Zc,", make sure you have a "),uZ=n(Zc,"CODE",{});var H7e=s(uZ);ONe=r(H7e,"NewModelConfig"),H7e.forEach(t),VNe=r(Zc,` then you can add those to the auto
classes like this:`),Zc.forEach(t),SBe=i(f),T(xA.$$.fragment,f),RBe=i(f),X9=n(f,"P",{});var U7e=s(X9);XNe=r(U7e,"You will then be able to use the auto classes like you would usually do!"),U7e.forEach(t),BBe=i(f),T(lf.$$.fragment,f),PBe=i(f),di=n(f,"H2",{class:!0});var Sx=s(di);df=n(Sx,"A",{id:!0,class:!0,href:!0});var J7e=s(df);_Z=n(J7e,"SPAN",{});var Y7e=s(_Z);T($A.$$.fragment,Y7e),Y7e.forEach(t),J7e.forEach(t),zNe=i(Sx),bZ=n(Sx,"SPAN",{});var K7e=s(bZ);QNe=r(K7e,"AutoConfig"),K7e.forEach(t),Sx.forEach(t),IBe=i(f),Co=n(f,"DIV",{class:!0});var Jr=s(Co);T(kA.$$.fragment,Jr),WNe=i(Jr),SA=n(Jr,"P",{});var Rx=s(SA);HNe=r(Rx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),z9=n(Rx,"A",{href:!0});var Z7e=s(z9);UNe=r(Z7e,"from_pretrained()"),Z7e.forEach(t),JNe=r(Rx," class method."),Rx.forEach(t),YNe=i(Jr),RA=n(Jr,"P",{});var Bx=s(RA);KNe=r(Bx,"This class cannot be instantiated directly using "),vZ=n(Bx,"CODE",{});var eMe=s(vZ);ZNe=r(eMe,"__init__()"),eMe.forEach(t),eje=r(Bx," (throws an error)."),Bx.forEach(t),oje=i(Jr),Mr=n(Jr,"DIV",{class:!0});var Yr=s(Mr);T(BA.$$.fragment,Yr),rje=i(Yr),FZ=n(Yr,"P",{});var oMe=s(FZ);tje=r(oMe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),oMe.forEach(t),aje=i(Yr),ci=n(Yr,"P",{});var ef=s(ci);nje=r(ef,"The configuration class to instantiate is selected based on the "),TZ=n(ef,"CODE",{});var rMe=s(TZ);sje=r(rMe,"model_type"),rMe.forEach(t),lje=r(ef,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),MZ=n(ef,"CODE",{});var tMe=s(MZ);ije=r(tMe,"pretrained_model_name_or_path"),tMe.forEach(t),dje=r(ef,":"),ef.forEach(t),cje=i(Yr),A=n(Yr,"UL",{});var y=s(A);cf=n(y,"LI",{});var d3=s(cf);EZ=n(d3,"STRONG",{});var aMe=s(EZ);fje=r(aMe,"albert"),aMe.forEach(t),mje=r(d3," \u2014 "),Q9=n(d3,"A",{href:!0});var nMe=s(Q9);gje=r(nMe,"AlbertConfig"),nMe.forEach(t),hje=r(d3," (ALBERT model)"),d3.forEach(t),pje=i(y),ff=n(y,"LI",{});var c3=s(ff);CZ=n(c3,"STRONG",{});var sMe=s(CZ);uje=r(sMe,"bart"),sMe.forEach(t),_je=r(c3," \u2014 "),W9=n(c3,"A",{href:!0});var lMe=s(W9);bje=r(lMe,"BartConfig"),lMe.forEach(t),vje=r(c3," (BART model)"),c3.forEach(t),Fje=i(y),mf=n(y,"LI",{});var f3=s(mf);wZ=n(f3,"STRONG",{});var iMe=s(wZ);Tje=r(iMe,"beit"),iMe.forEach(t),Mje=r(f3," \u2014 "),H9=n(f3,"A",{href:!0});var dMe=s(H9);Eje=r(dMe,"BeitConfig"),dMe.forEach(t),Cje=r(f3," (BEiT model)"),f3.forEach(t),wje=i(y),gf=n(y,"LI",{});var m3=s(gf);AZ=n(m3,"STRONG",{});var cMe=s(AZ);Aje=r(cMe,"bert"),cMe.forEach(t),yje=r(m3," \u2014 "),U9=n(m3,"A",{href:!0});var fMe=s(U9);Lje=r(fMe,"BertConfig"),fMe.forEach(t),xje=r(m3," (BERT model)"),m3.forEach(t),$je=i(y),hf=n(y,"LI",{});var g3=s(hf);yZ=n(g3,"STRONG",{});var mMe=s(yZ);kje=r(mMe,"bert-generation"),mMe.forEach(t),Sje=r(g3," \u2014 "),J9=n(g3,"A",{href:!0});var gMe=s(J9);Rje=r(gMe,"BertGenerationConfig"),gMe.forEach(t),Bje=r(g3," (Bert Generation model)"),g3.forEach(t),Pje=i(y),pf=n(y,"LI",{});var h3=s(pf);LZ=n(h3,"STRONG",{});var hMe=s(LZ);Ije=r(hMe,"big_bird"),hMe.forEach(t),qje=r(h3," \u2014 "),Y9=n(h3,"A",{href:!0});var pMe=s(Y9);Nje=r(pMe,"BigBirdConfig"),pMe.forEach(t),jje=r(h3," (BigBird model)"),h3.forEach(t),Dje=i(y),uf=n(y,"LI",{});var p3=s(uf);xZ=n(p3,"STRONG",{});var uMe=s(xZ);Gje=r(uMe,"bigbird_pegasus"),uMe.forEach(t),Oje=r(p3," \u2014 "),K9=n(p3,"A",{href:!0});var _Me=s(K9);Vje=r(_Me,"BigBirdPegasusConfig"),_Me.forEach(t),Xje=r(p3," (BigBirdPegasus model)"),p3.forEach(t),zje=i(y),_f=n(y,"LI",{});var u3=s(_f);$Z=n(u3,"STRONG",{});var bMe=s($Z);Qje=r(bMe,"blenderbot"),bMe.forEach(t),Wje=r(u3," \u2014 "),Z9=n(u3,"A",{href:!0});var vMe=s(Z9);Hje=r(vMe,"BlenderbotConfig"),vMe.forEach(t),Uje=r(u3," (Blenderbot model)"),u3.forEach(t),Jje=i(y),bf=n(y,"LI",{});var _3=s(bf);kZ=n(_3,"STRONG",{});var FMe=s(kZ);Yje=r(FMe,"blenderbot-small"),FMe.forEach(t),Kje=r(_3," \u2014 "),e$=n(_3,"A",{href:!0});var TMe=s(e$);Zje=r(TMe,"BlenderbotSmallConfig"),TMe.forEach(t),eDe=r(_3," (BlenderbotSmall model)"),_3.forEach(t),oDe=i(y),vf=n(y,"LI",{});var b3=s(vf);SZ=n(b3,"STRONG",{});var MMe=s(SZ);rDe=r(MMe,"camembert"),MMe.forEach(t),tDe=r(b3," \u2014 "),o$=n(b3,"A",{href:!0});var EMe=s(o$);aDe=r(EMe,"CamembertConfig"),EMe.forEach(t),nDe=r(b3," (CamemBERT model)"),b3.forEach(t),sDe=i(y),Ff=n(y,"LI",{});var v3=s(Ff);RZ=n(v3,"STRONG",{});var CMe=s(RZ);lDe=r(CMe,"canine"),CMe.forEach(t),iDe=r(v3," \u2014 "),r$=n(v3,"A",{href:!0});var wMe=s(r$);dDe=r(wMe,"CanineConfig"),wMe.forEach(t),cDe=r(v3," (Canine model)"),v3.forEach(t),fDe=i(y),Tf=n(y,"LI",{});var F3=s(Tf);BZ=n(F3,"STRONG",{});var AMe=s(BZ);mDe=r(AMe,"clip"),AMe.forEach(t),gDe=r(F3," \u2014 "),t$=n(F3,"A",{href:!0});var yMe=s(t$);hDe=r(yMe,"CLIPConfig"),yMe.forEach(t),pDe=r(F3," (CLIP model)"),F3.forEach(t),uDe=i(y),Mf=n(y,"LI",{});var T3=s(Mf);PZ=n(T3,"STRONG",{});var LMe=s(PZ);_De=r(LMe,"convbert"),LMe.forEach(t),bDe=r(T3," \u2014 "),a$=n(T3,"A",{href:!0});var xMe=s(a$);vDe=r(xMe,"ConvBertConfig"),xMe.forEach(t),FDe=r(T3," (ConvBERT model)"),T3.forEach(t),TDe=i(y),Ef=n(y,"LI",{});var M3=s(Ef);IZ=n(M3,"STRONG",{});var $Me=s(IZ);MDe=r($Me,"convnext"),$Me.forEach(t),EDe=r(M3," \u2014 "),n$=n(M3,"A",{href:!0});var kMe=s(n$);CDe=r(kMe,"ConvNextConfig"),kMe.forEach(t),wDe=r(M3," (ConvNext model)"),M3.forEach(t),ADe=i(y),Cf=n(y,"LI",{});var E3=s(Cf);qZ=n(E3,"STRONG",{});var SMe=s(qZ);yDe=r(SMe,"ctrl"),SMe.forEach(t),LDe=r(E3," \u2014 "),s$=n(E3,"A",{href:!0});var RMe=s(s$);xDe=r(RMe,"CTRLConfig"),RMe.forEach(t),$De=r(E3," (CTRL model)"),E3.forEach(t),kDe=i(y),wf=n(y,"LI",{});var C3=s(wf);NZ=n(C3,"STRONG",{});var BMe=s(NZ);SDe=r(BMe,"cvt"),BMe.forEach(t),RDe=r(C3," \u2014 "),l$=n(C3,"A",{href:!0});var PMe=s(l$);BDe=r(PMe,"CvtConfig"),PMe.forEach(t),PDe=r(C3," (Cvt model)"),C3.forEach(t),IDe=i(y),Af=n(y,"LI",{});var w3=s(Af);jZ=n(w3,"STRONG",{});var IMe=s(jZ);qDe=r(IMe,"data2vec-audio"),IMe.forEach(t),NDe=r(w3," \u2014 "),i$=n(w3,"A",{href:!0});var qMe=s(i$);jDe=r(qMe,"Data2VecAudioConfig"),qMe.forEach(t),DDe=r(w3," (Data2VecAudio model)"),w3.forEach(t),GDe=i(y),yf=n(y,"LI",{});var A3=s(yf);DZ=n(A3,"STRONG",{});var NMe=s(DZ);ODe=r(NMe,"data2vec-text"),NMe.forEach(t),VDe=r(A3," \u2014 "),d$=n(A3,"A",{href:!0});var jMe=s(d$);XDe=r(jMe,"Data2VecTextConfig"),jMe.forEach(t),zDe=r(A3," (Data2VecText model)"),A3.forEach(t),QDe=i(y),Lf=n(y,"LI",{});var y3=s(Lf);GZ=n(y3,"STRONG",{});var DMe=s(GZ);WDe=r(DMe,"data2vec-vision"),DMe.forEach(t),HDe=r(y3," \u2014 "),c$=n(y3,"A",{href:!0});var GMe=s(c$);UDe=r(GMe,"Data2VecVisionConfig"),GMe.forEach(t),JDe=r(y3," (Data2VecVision model)"),y3.forEach(t),YDe=i(y),xf=n(y,"LI",{});var L3=s(xf);OZ=n(L3,"STRONG",{});var OMe=s(OZ);KDe=r(OMe,"deberta"),OMe.forEach(t),ZDe=r(L3," \u2014 "),f$=n(L3,"A",{href:!0});var VMe=s(f$);eGe=r(VMe,"DebertaConfig"),VMe.forEach(t),oGe=r(L3," (DeBERTa model)"),L3.forEach(t),rGe=i(y),$f=n(y,"LI",{});var x3=s($f);VZ=n(x3,"STRONG",{});var XMe=s(VZ);tGe=r(XMe,"deberta-v2"),XMe.forEach(t),aGe=r(x3," \u2014 "),m$=n(x3,"A",{href:!0});var zMe=s(m$);nGe=r(zMe,"DebertaV2Config"),zMe.forEach(t),sGe=r(x3," (DeBERTa-v2 model)"),x3.forEach(t),lGe=i(y),kf=n(y,"LI",{});var $3=s(kf);XZ=n($3,"STRONG",{});var QMe=s(XZ);iGe=r(QMe,"decision_transformer"),QMe.forEach(t),dGe=r($3," \u2014 "),g$=n($3,"A",{href:!0});var WMe=s(g$);cGe=r(WMe,"DecisionTransformerConfig"),WMe.forEach(t),fGe=r($3," (Decision Transformer model)"),$3.forEach(t),mGe=i(y),Sf=n(y,"LI",{});var HMe=s(Sf);zZ=n(HMe,"STRONG",{});var ZPr=s(zZ);gGe=r(ZPr,"deit"),ZPr.forEach(t),hGe=r(HMe," \u2014 "),h$=n(HMe,"A",{href:!0});var eIr=s(h$);pGe=r(eIr,"DeiTConfig"),eIr.forEach(t),uGe=r(HMe," (DeiT model)"),HMe.forEach(t),_Ge=i(y),Rf=n(y,"LI",{});var UMe=s(Rf);QZ=n(UMe,"STRONG",{});var oIr=s(QZ);bGe=r(oIr,"detr"),oIr.forEach(t),vGe=r(UMe," \u2014 "),p$=n(UMe,"A",{href:!0});var rIr=s(p$);FGe=r(rIr,"DetrConfig"),rIr.forEach(t),TGe=r(UMe," (DETR model)"),UMe.forEach(t),MGe=i(y),Bf=n(y,"LI",{});var JMe=s(Bf);WZ=n(JMe,"STRONG",{});var tIr=s(WZ);EGe=r(tIr,"distilbert"),tIr.forEach(t),CGe=r(JMe," \u2014 "),u$=n(JMe,"A",{href:!0});var aIr=s(u$);wGe=r(aIr,"DistilBertConfig"),aIr.forEach(t),AGe=r(JMe," (DistilBERT model)"),JMe.forEach(t),yGe=i(y),Pf=n(y,"LI",{});var YMe=s(Pf);HZ=n(YMe,"STRONG",{});var nIr=s(HZ);LGe=r(nIr,"dpr"),nIr.forEach(t),xGe=r(YMe," \u2014 "),_$=n(YMe,"A",{href:!0});var sIr=s(_$);$Ge=r(sIr,"DPRConfig"),sIr.forEach(t),kGe=r(YMe," (DPR model)"),YMe.forEach(t),SGe=i(y),If=n(y,"LI",{});var KMe=s(If);UZ=n(KMe,"STRONG",{});var lIr=s(UZ);RGe=r(lIr,"dpt"),lIr.forEach(t),BGe=r(KMe," \u2014 "),b$=n(KMe,"A",{href:!0});var iIr=s(b$);PGe=r(iIr,"DPTConfig"),iIr.forEach(t),IGe=r(KMe," (DPT model)"),KMe.forEach(t),qGe=i(y),qf=n(y,"LI",{});var ZMe=s(qf);JZ=n(ZMe,"STRONG",{});var dIr=s(JZ);NGe=r(dIr,"electra"),dIr.forEach(t),jGe=r(ZMe," \u2014 "),v$=n(ZMe,"A",{href:!0});var cIr=s(v$);DGe=r(cIr,"ElectraConfig"),cIr.forEach(t),GGe=r(ZMe," (ELECTRA model)"),ZMe.forEach(t),OGe=i(y),Nf=n(y,"LI",{});var e4e=s(Nf);YZ=n(e4e,"STRONG",{});var fIr=s(YZ);VGe=r(fIr,"encoder-decoder"),fIr.forEach(t),XGe=r(e4e," \u2014 "),F$=n(e4e,"A",{href:!0});var mIr=s(F$);zGe=r(mIr,"EncoderDecoderConfig"),mIr.forEach(t),QGe=r(e4e," (Encoder decoder model)"),e4e.forEach(t),WGe=i(y),jf=n(y,"LI",{});var o4e=s(jf);KZ=n(o4e,"STRONG",{});var gIr=s(KZ);HGe=r(gIr,"flaubert"),gIr.forEach(t),UGe=r(o4e," \u2014 "),T$=n(o4e,"A",{href:!0});var hIr=s(T$);JGe=r(hIr,"FlaubertConfig"),hIr.forEach(t),YGe=r(o4e," (FlauBERT model)"),o4e.forEach(t),KGe=i(y),Df=n(y,"LI",{});var r4e=s(Df);ZZ=n(r4e,"STRONG",{});var pIr=s(ZZ);ZGe=r(pIr,"fnet"),pIr.forEach(t),eOe=r(r4e," \u2014 "),M$=n(r4e,"A",{href:!0});var uIr=s(M$);oOe=r(uIr,"FNetConfig"),uIr.forEach(t),rOe=r(r4e," (FNet model)"),r4e.forEach(t),tOe=i(y),Gf=n(y,"LI",{});var t4e=s(Gf);eee=n(t4e,"STRONG",{});var _Ir=s(eee);aOe=r(_Ir,"fsmt"),_Ir.forEach(t),nOe=r(t4e," \u2014 "),E$=n(t4e,"A",{href:!0});var bIr=s(E$);sOe=r(bIr,"FSMTConfig"),bIr.forEach(t),lOe=r(t4e," (FairSeq Machine-Translation model)"),t4e.forEach(t),iOe=i(y),Of=n(y,"LI",{});var a4e=s(Of);oee=n(a4e,"STRONG",{});var vIr=s(oee);dOe=r(vIr,"funnel"),vIr.forEach(t),cOe=r(a4e," \u2014 "),C$=n(a4e,"A",{href:!0});var FIr=s(C$);fOe=r(FIr,"FunnelConfig"),FIr.forEach(t),mOe=r(a4e," (Funnel Transformer model)"),a4e.forEach(t),gOe=i(y),Vf=n(y,"LI",{});var n4e=s(Vf);ree=n(n4e,"STRONG",{});var TIr=s(ree);hOe=r(TIr,"glpn"),TIr.forEach(t),pOe=r(n4e," \u2014 "),w$=n(n4e,"A",{href:!0});var MIr=s(w$);uOe=r(MIr,"GLPNConfig"),MIr.forEach(t),_Oe=r(n4e," (GLPN model)"),n4e.forEach(t),bOe=i(y),Xf=n(y,"LI",{});var s4e=s(Xf);tee=n(s4e,"STRONG",{});var EIr=s(tee);vOe=r(EIr,"gpt2"),EIr.forEach(t),FOe=r(s4e," \u2014 "),A$=n(s4e,"A",{href:!0});var CIr=s(A$);TOe=r(CIr,"GPT2Config"),CIr.forEach(t),MOe=r(s4e," (OpenAI GPT-2 model)"),s4e.forEach(t),EOe=i(y),zf=n(y,"LI",{});var l4e=s(zf);aee=n(l4e,"STRONG",{});var wIr=s(aee);COe=r(wIr,"gpt_neo"),wIr.forEach(t),wOe=r(l4e," \u2014 "),y$=n(l4e,"A",{href:!0});var AIr=s(y$);AOe=r(AIr,"GPTNeoConfig"),AIr.forEach(t),yOe=r(l4e," (GPT Neo model)"),l4e.forEach(t),LOe=i(y),Qf=n(y,"LI",{});var i4e=s(Qf);nee=n(i4e,"STRONG",{});var yIr=s(nee);xOe=r(yIr,"gptj"),yIr.forEach(t),$Oe=r(i4e," \u2014 "),L$=n(i4e,"A",{href:!0});var LIr=s(L$);kOe=r(LIr,"GPTJConfig"),LIr.forEach(t),SOe=r(i4e," (GPT-J model)"),i4e.forEach(t),ROe=i(y),Wf=n(y,"LI",{});var d4e=s(Wf);see=n(d4e,"STRONG",{});var xIr=s(see);BOe=r(xIr,"hubert"),xIr.forEach(t),POe=r(d4e," \u2014 "),x$=n(d4e,"A",{href:!0});var $Ir=s(x$);IOe=r($Ir,"HubertConfig"),$Ir.forEach(t),qOe=r(d4e," (Hubert model)"),d4e.forEach(t),NOe=i(y),Hf=n(y,"LI",{});var c4e=s(Hf);lee=n(c4e,"STRONG",{});var kIr=s(lee);jOe=r(kIr,"ibert"),kIr.forEach(t),DOe=r(c4e," \u2014 "),$$=n(c4e,"A",{href:!0});var SIr=s($$);GOe=r(SIr,"IBertConfig"),SIr.forEach(t),OOe=r(c4e," (I-BERT model)"),c4e.forEach(t),VOe=i(y),Uf=n(y,"LI",{});var f4e=s(Uf);iee=n(f4e,"STRONG",{});var RIr=s(iee);XOe=r(RIr,"imagegpt"),RIr.forEach(t),zOe=r(f4e," \u2014 "),k$=n(f4e,"A",{href:!0});var BIr=s(k$);QOe=r(BIr,"ImageGPTConfig"),BIr.forEach(t),WOe=r(f4e," (ImageGPT model)"),f4e.forEach(t),HOe=i(y),Jf=n(y,"LI",{});var m4e=s(Jf);dee=n(m4e,"STRONG",{});var PIr=s(dee);UOe=r(PIr,"layoutlm"),PIr.forEach(t),JOe=r(m4e," \u2014 "),S$=n(m4e,"A",{href:!0});var IIr=s(S$);YOe=r(IIr,"LayoutLMConfig"),IIr.forEach(t),KOe=r(m4e," (LayoutLM model)"),m4e.forEach(t),ZOe=i(y),Yf=n(y,"LI",{});var g4e=s(Yf);cee=n(g4e,"STRONG",{});var qIr=s(cee);eVe=r(qIr,"layoutlmv2"),qIr.forEach(t),oVe=r(g4e," \u2014 "),R$=n(g4e,"A",{href:!0});var NIr=s(R$);rVe=r(NIr,"LayoutLMv2Config"),NIr.forEach(t),tVe=r(g4e," (LayoutLMv2 model)"),g4e.forEach(t),aVe=i(y),Kf=n(y,"LI",{});var h4e=s(Kf);fee=n(h4e,"STRONG",{});var jIr=s(fee);nVe=r(jIr,"led"),jIr.forEach(t),sVe=r(h4e," \u2014 "),B$=n(h4e,"A",{href:!0});var DIr=s(B$);lVe=r(DIr,"LEDConfig"),DIr.forEach(t),iVe=r(h4e," (LED model)"),h4e.forEach(t),dVe=i(y),Zf=n(y,"LI",{});var p4e=s(Zf);mee=n(p4e,"STRONG",{});var GIr=s(mee);cVe=r(GIr,"longformer"),GIr.forEach(t),fVe=r(p4e," \u2014 "),P$=n(p4e,"A",{href:!0});var OIr=s(P$);mVe=r(OIr,"LongformerConfig"),OIr.forEach(t),gVe=r(p4e," (Longformer model)"),p4e.forEach(t),hVe=i(y),em=n(y,"LI",{});var u4e=s(em);gee=n(u4e,"STRONG",{});var VIr=s(gee);pVe=r(VIr,"luke"),VIr.forEach(t),uVe=r(u4e," \u2014 "),I$=n(u4e,"A",{href:!0});var XIr=s(I$);_Ve=r(XIr,"LukeConfig"),XIr.forEach(t),bVe=r(u4e," (LUKE model)"),u4e.forEach(t),vVe=i(y),om=n(y,"LI",{});var _4e=s(om);hee=n(_4e,"STRONG",{});var zIr=s(hee);FVe=r(zIr,"lxmert"),zIr.forEach(t),TVe=r(_4e," \u2014 "),q$=n(_4e,"A",{href:!0});var QIr=s(q$);MVe=r(QIr,"LxmertConfig"),QIr.forEach(t),EVe=r(_4e," (LXMERT model)"),_4e.forEach(t),CVe=i(y),rm=n(y,"LI",{});var b4e=s(rm);pee=n(b4e,"STRONG",{});var WIr=s(pee);wVe=r(WIr,"m2m_100"),WIr.forEach(t),AVe=r(b4e," \u2014 "),N$=n(b4e,"A",{href:!0});var HIr=s(N$);yVe=r(HIr,"M2M100Config"),HIr.forEach(t),LVe=r(b4e," (M2M100 model)"),b4e.forEach(t),xVe=i(y),tm=n(y,"LI",{});var v4e=s(tm);uee=n(v4e,"STRONG",{});var UIr=s(uee);$Ve=r(UIr,"marian"),UIr.forEach(t),kVe=r(v4e," \u2014 "),j$=n(v4e,"A",{href:!0});var JIr=s(j$);SVe=r(JIr,"MarianConfig"),JIr.forEach(t),RVe=r(v4e," (Marian model)"),v4e.forEach(t),BVe=i(y),am=n(y,"LI",{});var F4e=s(am);_ee=n(F4e,"STRONG",{});var YIr=s(_ee);PVe=r(YIr,"maskformer"),YIr.forEach(t),IVe=r(F4e," \u2014 "),D$=n(F4e,"A",{href:!0});var KIr=s(D$);qVe=r(KIr,"MaskFormerConfig"),KIr.forEach(t),NVe=r(F4e," (MaskFormer model)"),F4e.forEach(t),jVe=i(y),nm=n(y,"LI",{});var T4e=s(nm);bee=n(T4e,"STRONG",{});var ZIr=s(bee);DVe=r(ZIr,"mbart"),ZIr.forEach(t),GVe=r(T4e," \u2014 "),G$=n(T4e,"A",{href:!0});var eqr=s(G$);OVe=r(eqr,"MBartConfig"),eqr.forEach(t),VVe=r(T4e," (mBART model)"),T4e.forEach(t),XVe=i(y),sm=n(y,"LI",{});var M4e=s(sm);vee=n(M4e,"STRONG",{});var oqr=s(vee);zVe=r(oqr,"megatron-bert"),oqr.forEach(t),QVe=r(M4e," \u2014 "),O$=n(M4e,"A",{href:!0});var rqr=s(O$);WVe=r(rqr,"MegatronBertConfig"),rqr.forEach(t),HVe=r(M4e," (MegatronBert model)"),M4e.forEach(t),UVe=i(y),lm=n(y,"LI",{});var E4e=s(lm);Fee=n(E4e,"STRONG",{});var tqr=s(Fee);JVe=r(tqr,"mobilebert"),tqr.forEach(t),YVe=r(E4e," \u2014 "),V$=n(E4e,"A",{href:!0});var aqr=s(V$);KVe=r(aqr,"MobileBertConfig"),aqr.forEach(t),ZVe=r(E4e," (MobileBERT model)"),E4e.forEach(t),eXe=i(y),im=n(y,"LI",{});var C4e=s(im);Tee=n(C4e,"STRONG",{});var nqr=s(Tee);oXe=r(nqr,"mpnet"),nqr.forEach(t),rXe=r(C4e," \u2014 "),X$=n(C4e,"A",{href:!0});var sqr=s(X$);tXe=r(sqr,"MPNetConfig"),sqr.forEach(t),aXe=r(C4e," (MPNet model)"),C4e.forEach(t),nXe=i(y),dm=n(y,"LI",{});var w4e=s(dm);Mee=n(w4e,"STRONG",{});var lqr=s(Mee);sXe=r(lqr,"mt5"),lqr.forEach(t),lXe=r(w4e," \u2014 "),z$=n(w4e,"A",{href:!0});var iqr=s(z$);iXe=r(iqr,"MT5Config"),iqr.forEach(t),dXe=r(w4e," (mT5 model)"),w4e.forEach(t),cXe=i(y),cm=n(y,"LI",{});var A4e=s(cm);Eee=n(A4e,"STRONG",{});var dqr=s(Eee);fXe=r(dqr,"nystromformer"),dqr.forEach(t),mXe=r(A4e," \u2014 "),Q$=n(A4e,"A",{href:!0});var cqr=s(Q$);gXe=r(cqr,"NystromformerConfig"),cqr.forEach(t),hXe=r(A4e," (Nystromformer model)"),A4e.forEach(t),pXe=i(y),fm=n(y,"LI",{});var y4e=s(fm);Cee=n(y4e,"STRONG",{});var fqr=s(Cee);uXe=r(fqr,"openai-gpt"),fqr.forEach(t),_Xe=r(y4e," \u2014 "),W$=n(y4e,"A",{href:!0});var mqr=s(W$);bXe=r(mqr,"OpenAIGPTConfig"),mqr.forEach(t),vXe=r(y4e," (OpenAI GPT model)"),y4e.forEach(t),FXe=i(y),mm=n(y,"LI",{});var L4e=s(mm);wee=n(L4e,"STRONG",{});var gqr=s(wee);TXe=r(gqr,"pegasus"),gqr.forEach(t),MXe=r(L4e," \u2014 "),H$=n(L4e,"A",{href:!0});var hqr=s(H$);EXe=r(hqr,"PegasusConfig"),hqr.forEach(t),CXe=r(L4e," (Pegasus model)"),L4e.forEach(t),wXe=i(y),gm=n(y,"LI",{});var x4e=s(gm);Aee=n(x4e,"STRONG",{});var pqr=s(Aee);AXe=r(pqr,"perceiver"),pqr.forEach(t),yXe=r(x4e," \u2014 "),U$=n(x4e,"A",{href:!0});var uqr=s(U$);LXe=r(uqr,"PerceiverConfig"),uqr.forEach(t),xXe=r(x4e," (Perceiver model)"),x4e.forEach(t),$Xe=i(y),hm=n(y,"LI",{});var $4e=s(hm);yee=n($4e,"STRONG",{});var _qr=s(yee);kXe=r(_qr,"plbart"),_qr.forEach(t),SXe=r($4e," \u2014 "),J$=n($4e,"A",{href:!0});var bqr=s(J$);RXe=r(bqr,"PLBartConfig"),bqr.forEach(t),BXe=r($4e," (PLBart model)"),$4e.forEach(t),PXe=i(y),pm=n(y,"LI",{});var k4e=s(pm);Lee=n(k4e,"STRONG",{});var vqr=s(Lee);IXe=r(vqr,"poolformer"),vqr.forEach(t),qXe=r(k4e," \u2014 "),Y$=n(k4e,"A",{href:!0});var Fqr=s(Y$);NXe=r(Fqr,"PoolFormerConfig"),Fqr.forEach(t),jXe=r(k4e," (PoolFormer model)"),k4e.forEach(t),DXe=i(y),um=n(y,"LI",{});var S4e=s(um);xee=n(S4e,"STRONG",{});var Tqr=s(xee);GXe=r(Tqr,"prophetnet"),Tqr.forEach(t),OXe=r(S4e," \u2014 "),K$=n(S4e,"A",{href:!0});var Mqr=s(K$);VXe=r(Mqr,"ProphetNetConfig"),Mqr.forEach(t),XXe=r(S4e," (ProphetNet model)"),S4e.forEach(t),zXe=i(y),_m=n(y,"LI",{});var R4e=s(_m);$ee=n(R4e,"STRONG",{});var Eqr=s($ee);QXe=r(Eqr,"qdqbert"),Eqr.forEach(t),WXe=r(R4e," \u2014 "),Z$=n(R4e,"A",{href:!0});var Cqr=s(Z$);HXe=r(Cqr,"QDQBertConfig"),Cqr.forEach(t),UXe=r(R4e," (QDQBert model)"),R4e.forEach(t),JXe=i(y),bm=n(y,"LI",{});var B4e=s(bm);kee=n(B4e,"STRONG",{});var wqr=s(kee);YXe=r(wqr,"rag"),wqr.forEach(t),KXe=r(B4e," \u2014 "),ek=n(B4e,"A",{href:!0});var Aqr=s(ek);ZXe=r(Aqr,"RagConfig"),Aqr.forEach(t),eze=r(B4e," (RAG model)"),B4e.forEach(t),oze=i(y),vm=n(y,"LI",{});var P4e=s(vm);See=n(P4e,"STRONG",{});var yqr=s(See);rze=r(yqr,"realm"),yqr.forEach(t),tze=r(P4e," \u2014 "),ok=n(P4e,"A",{href:!0});var Lqr=s(ok);aze=r(Lqr,"RealmConfig"),Lqr.forEach(t),nze=r(P4e," (Realm model)"),P4e.forEach(t),sze=i(y),Fm=n(y,"LI",{});var I4e=s(Fm);Ree=n(I4e,"STRONG",{});var xqr=s(Ree);lze=r(xqr,"reformer"),xqr.forEach(t),ize=r(I4e," \u2014 "),rk=n(I4e,"A",{href:!0});var $qr=s(rk);dze=r($qr,"ReformerConfig"),$qr.forEach(t),cze=r(I4e," (Reformer model)"),I4e.forEach(t),fze=i(y),Tm=n(y,"LI",{});var q4e=s(Tm);Bee=n(q4e,"STRONG",{});var kqr=s(Bee);mze=r(kqr,"regnet"),kqr.forEach(t),gze=r(q4e," \u2014 "),tk=n(q4e,"A",{href:!0});var Sqr=s(tk);hze=r(Sqr,"RegNetConfig"),Sqr.forEach(t),pze=r(q4e," (RegNet model)"),q4e.forEach(t),uze=i(y),Mm=n(y,"LI",{});var N4e=s(Mm);Pee=n(N4e,"STRONG",{});var Rqr=s(Pee);_ze=r(Rqr,"rembert"),Rqr.forEach(t),bze=r(N4e," \u2014 "),ak=n(N4e,"A",{href:!0});var Bqr=s(ak);vze=r(Bqr,"RemBertConfig"),Bqr.forEach(t),Fze=r(N4e," (RemBERT model)"),N4e.forEach(t),Tze=i(y),Em=n(y,"LI",{});var j4e=s(Em);Iee=n(j4e,"STRONG",{});var Pqr=s(Iee);Mze=r(Pqr,"resnet"),Pqr.forEach(t),Eze=r(j4e," \u2014 "),nk=n(j4e,"A",{href:!0});var Iqr=s(nk);Cze=r(Iqr,"ResNetConfig"),Iqr.forEach(t),wze=r(j4e," (ResNet model)"),j4e.forEach(t),Aze=i(y),Cm=n(y,"LI",{});var D4e=s(Cm);qee=n(D4e,"STRONG",{});var qqr=s(qee);yze=r(qqr,"retribert"),qqr.forEach(t),Lze=r(D4e," \u2014 "),sk=n(D4e,"A",{href:!0});var Nqr=s(sk);xze=r(Nqr,"RetriBertConfig"),Nqr.forEach(t),$ze=r(D4e," (RetriBERT model)"),D4e.forEach(t),kze=i(y),wm=n(y,"LI",{});var G4e=s(wm);Nee=n(G4e,"STRONG",{});var jqr=s(Nee);Sze=r(jqr,"roberta"),jqr.forEach(t),Rze=r(G4e," \u2014 "),lk=n(G4e,"A",{href:!0});var Dqr=s(lk);Bze=r(Dqr,"RobertaConfig"),Dqr.forEach(t),Pze=r(G4e," (RoBERTa model)"),G4e.forEach(t),Ize=i(y),Am=n(y,"LI",{});var O4e=s(Am);jee=n(O4e,"STRONG",{});var Gqr=s(jee);qze=r(Gqr,"roformer"),Gqr.forEach(t),Nze=r(O4e," \u2014 "),ik=n(O4e,"A",{href:!0});var Oqr=s(ik);jze=r(Oqr,"RoFormerConfig"),Oqr.forEach(t),Dze=r(O4e," (RoFormer model)"),O4e.forEach(t),Gze=i(y),ym=n(y,"LI",{});var V4e=s(ym);Dee=n(V4e,"STRONG",{});var Vqr=s(Dee);Oze=r(Vqr,"segformer"),Vqr.forEach(t),Vze=r(V4e," \u2014 "),dk=n(V4e,"A",{href:!0});var Xqr=s(dk);Xze=r(Xqr,"SegformerConfig"),Xqr.forEach(t),zze=r(V4e," (SegFormer model)"),V4e.forEach(t),Qze=i(y),Lm=n(y,"LI",{});var X4e=s(Lm);Gee=n(X4e,"STRONG",{});var zqr=s(Gee);Wze=r(zqr,"sew"),zqr.forEach(t),Hze=r(X4e," \u2014 "),ck=n(X4e,"A",{href:!0});var Qqr=s(ck);Uze=r(Qqr,"SEWConfig"),Qqr.forEach(t),Jze=r(X4e," (SEW model)"),X4e.forEach(t),Yze=i(y),xm=n(y,"LI",{});var z4e=s(xm);Oee=n(z4e,"STRONG",{});var Wqr=s(Oee);Kze=r(Wqr,"sew-d"),Wqr.forEach(t),Zze=r(z4e," \u2014 "),fk=n(z4e,"A",{href:!0});var Hqr=s(fk);eQe=r(Hqr,"SEWDConfig"),Hqr.forEach(t),oQe=r(z4e," (SEW-D model)"),z4e.forEach(t),rQe=i(y),$m=n(y,"LI",{});var Q4e=s($m);Vee=n(Q4e,"STRONG",{});var Uqr=s(Vee);tQe=r(Uqr,"speech-encoder-decoder"),Uqr.forEach(t),aQe=r(Q4e," \u2014 "),mk=n(Q4e,"A",{href:!0});var Jqr=s(mk);nQe=r(Jqr,"SpeechEncoderDecoderConfig"),Jqr.forEach(t),sQe=r(Q4e," (Speech Encoder decoder model)"),Q4e.forEach(t),lQe=i(y),km=n(y,"LI",{});var W4e=s(km);Xee=n(W4e,"STRONG",{});var Yqr=s(Xee);iQe=r(Yqr,"speech_to_text"),Yqr.forEach(t),dQe=r(W4e," \u2014 "),gk=n(W4e,"A",{href:!0});var Kqr=s(gk);cQe=r(Kqr,"Speech2TextConfig"),Kqr.forEach(t),fQe=r(W4e," (Speech2Text model)"),W4e.forEach(t),mQe=i(y),Sm=n(y,"LI",{});var H4e=s(Sm);zee=n(H4e,"STRONG",{});var Zqr=s(zee);gQe=r(Zqr,"speech_to_text_2"),Zqr.forEach(t),hQe=r(H4e," \u2014 "),hk=n(H4e,"A",{href:!0});var eNr=s(hk);pQe=r(eNr,"Speech2Text2Config"),eNr.forEach(t),uQe=r(H4e," (Speech2Text2 model)"),H4e.forEach(t),_Qe=i(y),Rm=n(y,"LI",{});var U4e=s(Rm);Qee=n(U4e,"STRONG",{});var oNr=s(Qee);bQe=r(oNr,"splinter"),oNr.forEach(t),vQe=r(U4e," \u2014 "),pk=n(U4e,"A",{href:!0});var rNr=s(pk);FQe=r(rNr,"SplinterConfig"),rNr.forEach(t),TQe=r(U4e," (Splinter model)"),U4e.forEach(t),MQe=i(y),Bm=n(y,"LI",{});var J4e=s(Bm);Wee=n(J4e,"STRONG",{});var tNr=s(Wee);EQe=r(tNr,"squeezebert"),tNr.forEach(t),CQe=r(J4e," \u2014 "),uk=n(J4e,"A",{href:!0});var aNr=s(uk);wQe=r(aNr,"SqueezeBertConfig"),aNr.forEach(t),AQe=r(J4e," (SqueezeBERT model)"),J4e.forEach(t),yQe=i(y),Pm=n(y,"LI",{});var Y4e=s(Pm);Hee=n(Y4e,"STRONG",{});var nNr=s(Hee);LQe=r(nNr,"swin"),nNr.forEach(t),xQe=r(Y4e," \u2014 "),_k=n(Y4e,"A",{href:!0});var sNr=s(_k);$Qe=r(sNr,"SwinConfig"),sNr.forEach(t),kQe=r(Y4e," (Swin model)"),Y4e.forEach(t),SQe=i(y),Im=n(y,"LI",{});var K4e=s(Im);Uee=n(K4e,"STRONG",{});var lNr=s(Uee);RQe=r(lNr,"t5"),lNr.forEach(t),BQe=r(K4e," \u2014 "),bk=n(K4e,"A",{href:!0});var iNr=s(bk);PQe=r(iNr,"T5Config"),iNr.forEach(t),IQe=r(K4e," (T5 model)"),K4e.forEach(t),qQe=i(y),qm=n(y,"LI",{});var Z4e=s(qm);Jee=n(Z4e,"STRONG",{});var dNr=s(Jee);NQe=r(dNr,"tapas"),dNr.forEach(t),jQe=r(Z4e," \u2014 "),vk=n(Z4e,"A",{href:!0});var cNr=s(vk);DQe=r(cNr,"TapasConfig"),cNr.forEach(t),GQe=r(Z4e," (TAPAS model)"),Z4e.forEach(t),OQe=i(y),Nm=n(y,"LI",{});var eEe=s(Nm);Yee=n(eEe,"STRONG",{});var fNr=s(Yee);VQe=r(fNr,"tapex"),fNr.forEach(t),XQe=r(eEe," \u2014 "),Fk=n(eEe,"A",{href:!0});var mNr=s(Fk);zQe=r(mNr,"BartConfig"),mNr.forEach(t),QQe=r(eEe," (TAPEX model)"),eEe.forEach(t),WQe=i(y),jm=n(y,"LI",{});var oEe=s(jm);Kee=n(oEe,"STRONG",{});var gNr=s(Kee);HQe=r(gNr,"transfo-xl"),gNr.forEach(t),UQe=r(oEe," \u2014 "),Tk=n(oEe,"A",{href:!0});var hNr=s(Tk);JQe=r(hNr,"TransfoXLConfig"),hNr.forEach(t),YQe=r(oEe," (Transformer-XL model)"),oEe.forEach(t),KQe=i(y),Dm=n(y,"LI",{});var rEe=s(Dm);Zee=n(rEe,"STRONG",{});var pNr=s(Zee);ZQe=r(pNr,"trocr"),pNr.forEach(t),eWe=r(rEe," \u2014 "),Mk=n(rEe,"A",{href:!0});var uNr=s(Mk);oWe=r(uNr,"TrOCRConfig"),uNr.forEach(t),rWe=r(rEe," (TrOCR model)"),rEe.forEach(t),tWe=i(y),Gm=n(y,"LI",{});var tEe=s(Gm);eoe=n(tEe,"STRONG",{});var _Nr=s(eoe);aWe=r(_Nr,"unispeech"),_Nr.forEach(t),nWe=r(tEe," \u2014 "),Ek=n(tEe,"A",{href:!0});var bNr=s(Ek);sWe=r(bNr,"UniSpeechConfig"),bNr.forEach(t),lWe=r(tEe," (UniSpeech model)"),tEe.forEach(t),iWe=i(y),Om=n(y,"LI",{});var aEe=s(Om);ooe=n(aEe,"STRONG",{});var vNr=s(ooe);dWe=r(vNr,"unispeech-sat"),vNr.forEach(t),cWe=r(aEe," \u2014 "),Ck=n(aEe,"A",{href:!0});var FNr=s(Ck);fWe=r(FNr,"UniSpeechSatConfig"),FNr.forEach(t),mWe=r(aEe," (UniSpeechSat model)"),aEe.forEach(t),gWe=i(y),Vm=n(y,"LI",{});var nEe=s(Vm);roe=n(nEe,"STRONG",{});var TNr=s(roe);hWe=r(TNr,"van"),TNr.forEach(t),pWe=r(nEe," \u2014 "),wk=n(nEe,"A",{href:!0});var MNr=s(wk);uWe=r(MNr,"VanConfig"),MNr.forEach(t),_We=r(nEe," (VAN model)"),nEe.forEach(t),bWe=i(y),Xm=n(y,"LI",{});var sEe=s(Xm);toe=n(sEe,"STRONG",{});var ENr=s(toe);vWe=r(ENr,"vilt"),ENr.forEach(t),FWe=r(sEe," \u2014 "),Ak=n(sEe,"A",{href:!0});var CNr=s(Ak);TWe=r(CNr,"ViltConfig"),CNr.forEach(t),MWe=r(sEe," (ViLT model)"),sEe.forEach(t),EWe=i(y),zm=n(y,"LI",{});var lEe=s(zm);aoe=n(lEe,"STRONG",{});var wNr=s(aoe);CWe=r(wNr,"vision-encoder-decoder"),wNr.forEach(t),wWe=r(lEe," \u2014 "),yk=n(lEe,"A",{href:!0});var ANr=s(yk);AWe=r(ANr,"VisionEncoderDecoderConfig"),ANr.forEach(t),yWe=r(lEe," (Vision Encoder decoder model)"),lEe.forEach(t),LWe=i(y),Qm=n(y,"LI",{});var iEe=s(Qm);noe=n(iEe,"STRONG",{});var yNr=s(noe);xWe=r(yNr,"vision-text-dual-encoder"),yNr.forEach(t),$We=r(iEe," \u2014 "),Lk=n(iEe,"A",{href:!0});var LNr=s(Lk);kWe=r(LNr,"VisionTextDualEncoderConfig"),LNr.forEach(t),SWe=r(iEe," (VisionTextDualEncoder model)"),iEe.forEach(t),RWe=i(y),Wm=n(y,"LI",{});var dEe=s(Wm);soe=n(dEe,"STRONG",{});var xNr=s(soe);BWe=r(xNr,"visual_bert"),xNr.forEach(t),PWe=r(dEe," \u2014 "),xk=n(dEe,"A",{href:!0});var $Nr=s(xk);IWe=r($Nr,"VisualBertConfig"),$Nr.forEach(t),qWe=r(dEe," (VisualBert model)"),dEe.forEach(t),NWe=i(y),Hm=n(y,"LI",{});var cEe=s(Hm);loe=n(cEe,"STRONG",{});var kNr=s(loe);jWe=r(kNr,"vit"),kNr.forEach(t),DWe=r(cEe," \u2014 "),$k=n(cEe,"A",{href:!0});var SNr=s($k);GWe=r(SNr,"ViTConfig"),SNr.forEach(t),OWe=r(cEe," (ViT model)"),cEe.forEach(t),VWe=i(y),Um=n(y,"LI",{});var fEe=s(Um);ioe=n(fEe,"STRONG",{});var RNr=s(ioe);XWe=r(RNr,"vit_mae"),RNr.forEach(t),zWe=r(fEe," \u2014 "),kk=n(fEe,"A",{href:!0});var BNr=s(kk);QWe=r(BNr,"ViTMAEConfig"),BNr.forEach(t),WWe=r(fEe," (ViTMAE model)"),fEe.forEach(t),HWe=i(y),Jm=n(y,"LI",{});var mEe=s(Jm);doe=n(mEe,"STRONG",{});var PNr=s(doe);UWe=r(PNr,"wav2vec2"),PNr.forEach(t),JWe=r(mEe," \u2014 "),Sk=n(mEe,"A",{href:!0});var INr=s(Sk);YWe=r(INr,"Wav2Vec2Config"),INr.forEach(t),KWe=r(mEe," (Wav2Vec2 model)"),mEe.forEach(t),ZWe=i(y),Ym=n(y,"LI",{});var gEe=s(Ym);coe=n(gEe,"STRONG",{});var qNr=s(coe);eHe=r(qNr,"wavlm"),qNr.forEach(t),oHe=r(gEe," \u2014 "),Rk=n(gEe,"A",{href:!0});var NNr=s(Rk);rHe=r(NNr,"WavLMConfig"),NNr.forEach(t),tHe=r(gEe," (WavLM model)"),gEe.forEach(t),aHe=i(y),Km=n(y,"LI",{});var hEe=s(Km);foe=n(hEe,"STRONG",{});var jNr=s(foe);nHe=r(jNr,"xglm"),jNr.forEach(t),sHe=r(hEe," \u2014 "),Bk=n(hEe,"A",{href:!0});var DNr=s(Bk);lHe=r(DNr,"XGLMConfig"),DNr.forEach(t),iHe=r(hEe," (XGLM model)"),hEe.forEach(t),dHe=i(y),Zm=n(y,"LI",{});var pEe=s(Zm);moe=n(pEe,"STRONG",{});var GNr=s(moe);cHe=r(GNr,"xlm"),GNr.forEach(t),fHe=r(pEe," \u2014 "),Pk=n(pEe,"A",{href:!0});var ONr=s(Pk);mHe=r(ONr,"XLMConfig"),ONr.forEach(t),gHe=r(pEe," (XLM model)"),pEe.forEach(t),hHe=i(y),eg=n(y,"LI",{});var uEe=s(eg);goe=n(uEe,"STRONG",{});var VNr=s(goe);pHe=r(VNr,"xlm-prophetnet"),VNr.forEach(t),uHe=r(uEe," \u2014 "),Ik=n(uEe,"A",{href:!0});var XNr=s(Ik);_He=r(XNr,"XLMProphetNetConfig"),XNr.forEach(t),bHe=r(uEe," (XLMProphetNet model)"),uEe.forEach(t),vHe=i(y),og=n(y,"LI",{});var _Ee=s(og);hoe=n(_Ee,"STRONG",{});var zNr=s(hoe);FHe=r(zNr,"xlm-roberta"),zNr.forEach(t),THe=r(_Ee," \u2014 "),qk=n(_Ee,"A",{href:!0});var QNr=s(qk);MHe=r(QNr,"XLMRobertaConfig"),QNr.forEach(t),EHe=r(_Ee," (XLM-RoBERTa model)"),_Ee.forEach(t),CHe=i(y),rg=n(y,"LI",{});var bEe=s(rg);poe=n(bEe,"STRONG",{});var WNr=s(poe);wHe=r(WNr,"xlm-roberta-xl"),WNr.forEach(t),AHe=r(bEe," \u2014 "),Nk=n(bEe,"A",{href:!0});var HNr=s(Nk);yHe=r(HNr,"XLMRobertaXLConfig"),HNr.forEach(t),LHe=r(bEe," (XLM-RoBERTa-XL model)"),bEe.forEach(t),xHe=i(y),tg=n(y,"LI",{});var vEe=s(tg);uoe=n(vEe,"STRONG",{});var UNr=s(uoe);$He=r(UNr,"xlnet"),UNr.forEach(t),kHe=r(vEe," \u2014 "),jk=n(vEe,"A",{href:!0});var JNr=s(jk);SHe=r(JNr,"XLNetConfig"),JNr.forEach(t),RHe=r(vEe," (XLNet model)"),vEe.forEach(t),BHe=i(y),ag=n(y,"LI",{});var FEe=s(ag);_oe=n(FEe,"STRONG",{});var YNr=s(_oe);PHe=r(YNr,"yolos"),YNr.forEach(t),IHe=r(FEe," \u2014 "),Dk=n(FEe,"A",{href:!0});var KNr=s(Dk);qHe=r(KNr,"YolosConfig"),KNr.forEach(t),NHe=r(FEe," (YOLOS model)"),FEe.forEach(t),jHe=i(y),ng=n(y,"LI",{});var TEe=s(ng);boe=n(TEe,"STRONG",{});var ZNr=s(boe);DHe=r(ZNr,"yoso"),ZNr.forEach(t),GHe=r(TEe," \u2014 "),Gk=n(TEe,"A",{href:!0});var ejr=s(Gk);OHe=r(ejr,"YosoConfig"),ejr.forEach(t),VHe=r(TEe," (YOSO model)"),TEe.forEach(t),y.forEach(t),XHe=i(Yr),T(sg.$$.fragment,Yr),Yr.forEach(t),zHe=i(Jr),lg=n(Jr,"DIV",{class:!0});var SIe=s(lg);T(PA.$$.fragment,SIe),QHe=i(SIe),voe=n(SIe,"P",{});var ojr=s(voe);WHe=r(ojr,"Register a new configuration for this class."),ojr.forEach(t),SIe.forEach(t),Jr.forEach(t),qBe=i(f),fi=n(f,"H2",{class:!0});var RIe=s(fi);ig=n(RIe,"A",{id:!0,class:!0,href:!0});var rjr=s(ig);Foe=n(rjr,"SPAN",{});var tjr=s(Foe);T(IA.$$.fragment,tjr),tjr.forEach(t),rjr.forEach(t),HHe=i(RIe),Toe=n(RIe,"SPAN",{});var ajr=s(Toe);UHe=r(ajr,"AutoTokenizer"),ajr.forEach(t),RIe.forEach(t),NBe=i(f),wo=n(f,"DIV",{class:!0});var ks=s(wo);T(qA.$$.fragment,ks),JHe=i(ks),NA=n(ks,"P",{});var BIe=s(NA);YHe=r(BIe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Ok=n(BIe,"A",{href:!0});var njr=s(Ok);KHe=r(njr,"AutoTokenizer.from_pretrained()"),njr.forEach(t),ZHe=r(BIe," class method."),BIe.forEach(t),eUe=i(ks),jA=n(ks,"P",{});var PIe=s(jA);oUe=r(PIe,"This class cannot be instantiated directly using "),Moe=n(PIe,"CODE",{});var sjr=s(Moe);rUe=r(sjr,"__init__()"),sjr.forEach(t),tUe=r(PIe," (throws an error)."),PIe.forEach(t),aUe=i(ks),Er=n(ks,"DIV",{class:!0});var Ss=s(Er);T(DA.$$.fragment,Ss),nUe=i(Ss),Eoe=n(Ss,"P",{});var ljr=s(Eoe);sUe=r(ljr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),ljr.forEach(t),lUe=i(Ss),Ta=n(Ss,"P",{});var k3=s(Ta);iUe=r(k3,"The tokenizer class to instantiate is selected based on the "),Coe=n(k3,"CODE",{});var ijr=s(Coe);dUe=r(ijr,"model_type"),ijr.forEach(t),cUe=r(k3,` property of the config object (either
passed as an argument or loaded from `),woe=n(k3,"CODE",{});var djr=s(woe);fUe=r(djr,"pretrained_model_name_or_path"),djr.forEach(t),mUe=r(k3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aoe=n(k3,"CODE",{});var cjr=s(Aoe);gUe=r(cjr,"pretrained_model_name_or_path"),cjr.forEach(t),hUe=r(k3,":"),k3.forEach(t),pUe=i(Ss),k=n(Ss,"UL",{});var S=s(k);yn=n(S,"LI",{});var Px=s(yn);yoe=n(Px,"STRONG",{});var fjr=s(yoe);uUe=r(fjr,"albert"),fjr.forEach(t),_Ue=r(Px," \u2014 "),Vk=n(Px,"A",{href:!0});var mjr=s(Vk);bUe=r(mjr,"AlbertTokenizer"),mjr.forEach(t),vUe=r(Px," or "),Xk=n(Px,"A",{href:!0});var gjr=s(Xk);FUe=r(gjr,"AlbertTokenizerFast"),gjr.forEach(t),TUe=r(Px," (ALBERT model)"),Px.forEach(t),MUe=i(S),Ln=n(S,"LI",{});var Ix=s(Ln);Loe=n(Ix,"STRONG",{});var hjr=s(Loe);EUe=r(hjr,"bart"),hjr.forEach(t),CUe=r(Ix," \u2014 "),zk=n(Ix,"A",{href:!0});var pjr=s(zk);wUe=r(pjr,"BartTokenizer"),pjr.forEach(t),AUe=r(Ix," or "),Qk=n(Ix,"A",{href:!0});var ujr=s(Qk);yUe=r(ujr,"BartTokenizerFast"),ujr.forEach(t),LUe=r(Ix," (BART model)"),Ix.forEach(t),xUe=i(S),xn=n(S,"LI",{});var qx=s(xn);xoe=n(qx,"STRONG",{});var _jr=s(xoe);$Ue=r(_jr,"barthez"),_jr.forEach(t),kUe=r(qx," \u2014 "),Wk=n(qx,"A",{href:!0});var bjr=s(Wk);SUe=r(bjr,"BarthezTokenizer"),bjr.forEach(t),RUe=r(qx," or "),Hk=n(qx,"A",{href:!0});var vjr=s(Hk);BUe=r(vjr,"BarthezTokenizerFast"),vjr.forEach(t),PUe=r(qx," (BARThez model)"),qx.forEach(t),IUe=i(S),dg=n(S,"LI",{});var MEe=s(dg);$oe=n(MEe,"STRONG",{});var Fjr=s($oe);qUe=r(Fjr,"bartpho"),Fjr.forEach(t),NUe=r(MEe," \u2014 "),Uk=n(MEe,"A",{href:!0});var Tjr=s(Uk);jUe=r(Tjr,"BartphoTokenizer"),Tjr.forEach(t),DUe=r(MEe," (BARTpho model)"),MEe.forEach(t),GUe=i(S),$n=n(S,"LI",{});var Nx=s($n);koe=n(Nx,"STRONG",{});var Mjr=s(koe);OUe=r(Mjr,"bert"),Mjr.forEach(t),VUe=r(Nx," \u2014 "),Jk=n(Nx,"A",{href:!0});var Ejr=s(Jk);XUe=r(Ejr,"BertTokenizer"),Ejr.forEach(t),zUe=r(Nx," or "),Yk=n(Nx,"A",{href:!0});var Cjr=s(Yk);QUe=r(Cjr,"BertTokenizerFast"),Cjr.forEach(t),WUe=r(Nx," (BERT model)"),Nx.forEach(t),HUe=i(S),cg=n(S,"LI",{});var EEe=s(cg);Soe=n(EEe,"STRONG",{});var wjr=s(Soe);UUe=r(wjr,"bert-generation"),wjr.forEach(t),JUe=r(EEe," \u2014 "),Kk=n(EEe,"A",{href:!0});var Ajr=s(Kk);YUe=r(Ajr,"BertGenerationTokenizer"),Ajr.forEach(t),KUe=r(EEe," (Bert Generation model)"),EEe.forEach(t),ZUe=i(S),fg=n(S,"LI",{});var CEe=s(fg);Roe=n(CEe,"STRONG",{});var yjr=s(Roe);eJe=r(yjr,"bert-japanese"),yjr.forEach(t),oJe=r(CEe," \u2014 "),Zk=n(CEe,"A",{href:!0});var Ljr=s(Zk);rJe=r(Ljr,"BertJapaneseTokenizer"),Ljr.forEach(t),tJe=r(CEe," (BertJapanese model)"),CEe.forEach(t),aJe=i(S),mg=n(S,"LI",{});var wEe=s(mg);Boe=n(wEe,"STRONG",{});var xjr=s(Boe);nJe=r(xjr,"bertweet"),xjr.forEach(t),sJe=r(wEe," \u2014 "),eS=n(wEe,"A",{href:!0});var $jr=s(eS);lJe=r($jr,"BertweetTokenizer"),$jr.forEach(t),iJe=r(wEe," (Bertweet model)"),wEe.forEach(t),dJe=i(S),kn=n(S,"LI",{});var jx=s(kn);Poe=n(jx,"STRONG",{});var kjr=s(Poe);cJe=r(kjr,"big_bird"),kjr.forEach(t),fJe=r(jx," \u2014 "),oS=n(jx,"A",{href:!0});var Sjr=s(oS);mJe=r(Sjr,"BigBirdTokenizer"),Sjr.forEach(t),gJe=r(jx," or "),rS=n(jx,"A",{href:!0});var Rjr=s(rS);hJe=r(Rjr,"BigBirdTokenizerFast"),Rjr.forEach(t),pJe=r(jx," (BigBird model)"),jx.forEach(t),uJe=i(S),Sn=n(S,"LI",{});var Dx=s(Sn);Ioe=n(Dx,"STRONG",{});var Bjr=s(Ioe);_Je=r(Bjr,"bigbird_pegasus"),Bjr.forEach(t),bJe=r(Dx," \u2014 "),tS=n(Dx,"A",{href:!0});var Pjr=s(tS);vJe=r(Pjr,"PegasusTokenizer"),Pjr.forEach(t),FJe=r(Dx," or "),aS=n(Dx,"A",{href:!0});var Ijr=s(aS);TJe=r(Ijr,"PegasusTokenizerFast"),Ijr.forEach(t),MJe=r(Dx," (BigBirdPegasus model)"),Dx.forEach(t),EJe=i(S),Rn=n(S,"LI",{});var Gx=s(Rn);qoe=n(Gx,"STRONG",{});var qjr=s(qoe);CJe=r(qjr,"blenderbot"),qjr.forEach(t),wJe=r(Gx," \u2014 "),nS=n(Gx,"A",{href:!0});var Njr=s(nS);AJe=r(Njr,"BlenderbotTokenizer"),Njr.forEach(t),yJe=r(Gx," or "),sS=n(Gx,"A",{href:!0});var jjr=s(sS);LJe=r(jjr,"BlenderbotTokenizerFast"),jjr.forEach(t),xJe=r(Gx," (Blenderbot model)"),Gx.forEach(t),$Je=i(S),gg=n(S,"LI",{});var AEe=s(gg);Noe=n(AEe,"STRONG",{});var Djr=s(Noe);kJe=r(Djr,"blenderbot-small"),Djr.forEach(t),SJe=r(AEe," \u2014 "),lS=n(AEe,"A",{href:!0});var Gjr=s(lS);RJe=r(Gjr,"BlenderbotSmallTokenizer"),Gjr.forEach(t),BJe=r(AEe," (BlenderbotSmall model)"),AEe.forEach(t),PJe=i(S),hg=n(S,"LI",{});var yEe=s(hg);joe=n(yEe,"STRONG",{});var Ojr=s(joe);IJe=r(Ojr,"byt5"),Ojr.forEach(t),qJe=r(yEe," \u2014 "),iS=n(yEe,"A",{href:!0});var Vjr=s(iS);NJe=r(Vjr,"ByT5Tokenizer"),Vjr.forEach(t),jJe=r(yEe," (ByT5 model)"),yEe.forEach(t),DJe=i(S),Bn=n(S,"LI",{});var Ox=s(Bn);Doe=n(Ox,"STRONG",{});var Xjr=s(Doe);GJe=r(Xjr,"camembert"),Xjr.forEach(t),OJe=r(Ox," \u2014 "),dS=n(Ox,"A",{href:!0});var zjr=s(dS);VJe=r(zjr,"CamembertTokenizer"),zjr.forEach(t),XJe=r(Ox," or "),cS=n(Ox,"A",{href:!0});var Qjr=s(cS);zJe=r(Qjr,"CamembertTokenizerFast"),Qjr.forEach(t),QJe=r(Ox," (CamemBERT model)"),Ox.forEach(t),WJe=i(S),pg=n(S,"LI",{});var LEe=s(pg);Goe=n(LEe,"STRONG",{});var Wjr=s(Goe);HJe=r(Wjr,"canine"),Wjr.forEach(t),UJe=r(LEe," \u2014 "),fS=n(LEe,"A",{href:!0});var Hjr=s(fS);JJe=r(Hjr,"CanineTokenizer"),Hjr.forEach(t),YJe=r(LEe," (Canine model)"),LEe.forEach(t),KJe=i(S),Pn=n(S,"LI",{});var Vx=s(Pn);Ooe=n(Vx,"STRONG",{});var Ujr=s(Ooe);ZJe=r(Ujr,"clip"),Ujr.forEach(t),eYe=r(Vx," \u2014 "),mS=n(Vx,"A",{href:!0});var Jjr=s(mS);oYe=r(Jjr,"CLIPTokenizer"),Jjr.forEach(t),rYe=r(Vx," or "),gS=n(Vx,"A",{href:!0});var Yjr=s(gS);tYe=r(Yjr,"CLIPTokenizerFast"),Yjr.forEach(t),aYe=r(Vx," (CLIP model)"),Vx.forEach(t),nYe=i(S),In=n(S,"LI",{});var Xx=s(In);Voe=n(Xx,"STRONG",{});var Kjr=s(Voe);sYe=r(Kjr,"convbert"),Kjr.forEach(t),lYe=r(Xx," \u2014 "),hS=n(Xx,"A",{href:!0});var Zjr=s(hS);iYe=r(Zjr,"ConvBertTokenizer"),Zjr.forEach(t),dYe=r(Xx," or "),pS=n(Xx,"A",{href:!0});var eDr=s(pS);cYe=r(eDr,"ConvBertTokenizerFast"),eDr.forEach(t),fYe=r(Xx," (ConvBERT model)"),Xx.forEach(t),mYe=i(S),qn=n(S,"LI",{});var zx=s(qn);Xoe=n(zx,"STRONG",{});var oDr=s(Xoe);gYe=r(oDr,"cpm"),oDr.forEach(t),hYe=r(zx," \u2014 "),uS=n(zx,"A",{href:!0});var rDr=s(uS);pYe=r(rDr,"CpmTokenizer"),rDr.forEach(t),uYe=r(zx," or "),_S=n(zx,"A",{href:!0});var tDr=s(_S);_Ye=r(tDr,"CpmTokenizerFast"),tDr.forEach(t),bYe=r(zx," (CPM model)"),zx.forEach(t),vYe=i(S),ug=n(S,"LI",{});var xEe=s(ug);zoe=n(xEe,"STRONG",{});var aDr=s(zoe);FYe=r(aDr,"ctrl"),aDr.forEach(t),TYe=r(xEe," \u2014 "),bS=n(xEe,"A",{href:!0});var nDr=s(bS);MYe=r(nDr,"CTRLTokenizer"),nDr.forEach(t),EYe=r(xEe," (CTRL model)"),xEe.forEach(t),CYe=i(S),Nn=n(S,"LI",{});var Qx=s(Nn);Qoe=n(Qx,"STRONG",{});var sDr=s(Qoe);wYe=r(sDr,"data2vec-text"),sDr.forEach(t),AYe=r(Qx," \u2014 "),vS=n(Qx,"A",{href:!0});var lDr=s(vS);yYe=r(lDr,"RobertaTokenizer"),lDr.forEach(t),LYe=r(Qx," or "),FS=n(Qx,"A",{href:!0});var iDr=s(FS);xYe=r(iDr,"RobertaTokenizerFast"),iDr.forEach(t),$Ye=r(Qx," (Data2VecText model)"),Qx.forEach(t),kYe=i(S),jn=n(S,"LI",{});var Wx=s(jn);Woe=n(Wx,"STRONG",{});var dDr=s(Woe);SYe=r(dDr,"deberta"),dDr.forEach(t),RYe=r(Wx," \u2014 "),TS=n(Wx,"A",{href:!0});var cDr=s(TS);BYe=r(cDr,"DebertaTokenizer"),cDr.forEach(t),PYe=r(Wx," or "),MS=n(Wx,"A",{href:!0});var fDr=s(MS);IYe=r(fDr,"DebertaTokenizerFast"),fDr.forEach(t),qYe=r(Wx," (DeBERTa model)"),Wx.forEach(t),NYe=i(S),Dn=n(S,"LI",{});var Hx=s(Dn);Hoe=n(Hx,"STRONG",{});var mDr=s(Hoe);jYe=r(mDr,"deberta-v2"),mDr.forEach(t),DYe=r(Hx," \u2014 "),ES=n(Hx,"A",{href:!0});var gDr=s(ES);GYe=r(gDr,"DebertaV2Tokenizer"),gDr.forEach(t),OYe=r(Hx," or "),CS=n(Hx,"A",{href:!0});var hDr=s(CS);VYe=r(hDr,"DebertaV2TokenizerFast"),hDr.forEach(t),XYe=r(Hx," (DeBERTa-v2 model)"),Hx.forEach(t),zYe=i(S),Gn=n(S,"LI",{});var Ux=s(Gn);Uoe=n(Ux,"STRONG",{});var pDr=s(Uoe);QYe=r(pDr,"distilbert"),pDr.forEach(t),WYe=r(Ux," \u2014 "),wS=n(Ux,"A",{href:!0});var uDr=s(wS);HYe=r(uDr,"DistilBertTokenizer"),uDr.forEach(t),UYe=r(Ux," or "),AS=n(Ux,"A",{href:!0});var _Dr=s(AS);JYe=r(_Dr,"DistilBertTokenizerFast"),_Dr.forEach(t),YYe=r(Ux," (DistilBERT model)"),Ux.forEach(t),KYe=i(S),On=n(S,"LI",{});var Jx=s(On);Joe=n(Jx,"STRONG",{});var bDr=s(Joe);ZYe=r(bDr,"dpr"),bDr.forEach(t),eKe=r(Jx," \u2014 "),yS=n(Jx,"A",{href:!0});var vDr=s(yS);oKe=r(vDr,"DPRQuestionEncoderTokenizer"),vDr.forEach(t),rKe=r(Jx," or "),LS=n(Jx,"A",{href:!0});var FDr=s(LS);tKe=r(FDr,"DPRQuestionEncoderTokenizerFast"),FDr.forEach(t),aKe=r(Jx," (DPR model)"),Jx.forEach(t),nKe=i(S),Vn=n(S,"LI",{});var Yx=s(Vn);Yoe=n(Yx,"STRONG",{});var TDr=s(Yoe);sKe=r(TDr,"electra"),TDr.forEach(t),lKe=r(Yx," \u2014 "),xS=n(Yx,"A",{href:!0});var MDr=s(xS);iKe=r(MDr,"ElectraTokenizer"),MDr.forEach(t),dKe=r(Yx," or "),$S=n(Yx,"A",{href:!0});var EDr=s($S);cKe=r(EDr,"ElectraTokenizerFast"),EDr.forEach(t),fKe=r(Yx," (ELECTRA model)"),Yx.forEach(t),mKe=i(S),_g=n(S,"LI",{});var $Ee=s(_g);Koe=n($Ee,"STRONG",{});var CDr=s(Koe);gKe=r(CDr,"flaubert"),CDr.forEach(t),hKe=r($Ee," \u2014 "),kS=n($Ee,"A",{href:!0});var wDr=s(kS);pKe=r(wDr,"FlaubertTokenizer"),wDr.forEach(t),uKe=r($Ee," (FlauBERT model)"),$Ee.forEach(t),_Ke=i(S),Xn=n(S,"LI",{});var Kx=s(Xn);Zoe=n(Kx,"STRONG",{});var ADr=s(Zoe);bKe=r(ADr,"fnet"),ADr.forEach(t),vKe=r(Kx," \u2014 "),SS=n(Kx,"A",{href:!0});var yDr=s(SS);FKe=r(yDr,"FNetTokenizer"),yDr.forEach(t),TKe=r(Kx," or "),RS=n(Kx,"A",{href:!0});var LDr=s(RS);MKe=r(LDr,"FNetTokenizerFast"),LDr.forEach(t),EKe=r(Kx," (FNet model)"),Kx.forEach(t),CKe=i(S),bg=n(S,"LI",{});var kEe=s(bg);ere=n(kEe,"STRONG",{});var xDr=s(ere);wKe=r(xDr,"fsmt"),xDr.forEach(t),AKe=r(kEe," \u2014 "),BS=n(kEe,"A",{href:!0});var $Dr=s(BS);yKe=r($Dr,"FSMTTokenizer"),$Dr.forEach(t),LKe=r(kEe," (FairSeq Machine-Translation model)"),kEe.forEach(t),xKe=i(S),zn=n(S,"LI",{});var Zx=s(zn);ore=n(Zx,"STRONG",{});var kDr=s(ore);$Ke=r(kDr,"funnel"),kDr.forEach(t),kKe=r(Zx," \u2014 "),PS=n(Zx,"A",{href:!0});var SDr=s(PS);SKe=r(SDr,"FunnelTokenizer"),SDr.forEach(t),RKe=r(Zx," or "),IS=n(Zx,"A",{href:!0});var RDr=s(IS);BKe=r(RDr,"FunnelTokenizerFast"),RDr.forEach(t),PKe=r(Zx," (Funnel Transformer model)"),Zx.forEach(t),IKe=i(S),Qn=n(S,"LI",{});var e9=s(Qn);rre=n(e9,"STRONG",{});var BDr=s(rre);qKe=r(BDr,"gpt2"),BDr.forEach(t),NKe=r(e9," \u2014 "),qS=n(e9,"A",{href:!0});var PDr=s(qS);jKe=r(PDr,"GPT2Tokenizer"),PDr.forEach(t),DKe=r(e9," or "),NS=n(e9,"A",{href:!0});var IDr=s(NS);GKe=r(IDr,"GPT2TokenizerFast"),IDr.forEach(t),OKe=r(e9," (OpenAI GPT-2 model)"),e9.forEach(t),VKe=i(S),Wn=n(S,"LI",{});var o9=s(Wn);tre=n(o9,"STRONG",{});var qDr=s(tre);XKe=r(qDr,"gpt_neo"),qDr.forEach(t),zKe=r(o9," \u2014 "),jS=n(o9,"A",{href:!0});var NDr=s(jS);QKe=r(NDr,"GPT2Tokenizer"),NDr.forEach(t),WKe=r(o9," or "),DS=n(o9,"A",{href:!0});var jDr=s(DS);HKe=r(jDr,"GPT2TokenizerFast"),jDr.forEach(t),UKe=r(o9," (GPT Neo model)"),o9.forEach(t),JKe=i(S),Hn=n(S,"LI",{});var r9=s(Hn);are=n(r9,"STRONG",{});var DDr=s(are);YKe=r(DDr,"gptj"),DDr.forEach(t),KKe=r(r9," \u2014 "),GS=n(r9,"A",{href:!0});var GDr=s(GS);ZKe=r(GDr,"GPT2Tokenizer"),GDr.forEach(t),eZe=r(r9," or "),OS=n(r9,"A",{href:!0});var ODr=s(OS);oZe=r(ODr,"GPT2TokenizerFast"),ODr.forEach(t),rZe=r(r9," (GPT-J model)"),r9.forEach(t),tZe=i(S),Un=n(S,"LI",{});var t9=s(Un);nre=n(t9,"STRONG",{});var VDr=s(nre);aZe=r(VDr,"herbert"),VDr.forEach(t),nZe=r(t9," \u2014 "),VS=n(t9,"A",{href:!0});var XDr=s(VS);sZe=r(XDr,"HerbertTokenizer"),XDr.forEach(t),lZe=r(t9," or "),XS=n(t9,"A",{href:!0});var zDr=s(XS);iZe=r(zDr,"HerbertTokenizerFast"),zDr.forEach(t),dZe=r(t9," (HerBERT model)"),t9.forEach(t),cZe=i(S),vg=n(S,"LI",{});var SEe=s(vg);sre=n(SEe,"STRONG",{});var QDr=s(sre);fZe=r(QDr,"hubert"),QDr.forEach(t),mZe=r(SEe," \u2014 "),zS=n(SEe,"A",{href:!0});var WDr=s(zS);gZe=r(WDr,"Wav2Vec2CTCTokenizer"),WDr.forEach(t),hZe=r(SEe," (Hubert model)"),SEe.forEach(t),pZe=i(S),Jn=n(S,"LI",{});var a9=s(Jn);lre=n(a9,"STRONG",{});var HDr=s(lre);uZe=r(HDr,"ibert"),HDr.forEach(t),_Ze=r(a9," \u2014 "),QS=n(a9,"A",{href:!0});var UDr=s(QS);bZe=r(UDr,"RobertaTokenizer"),UDr.forEach(t),vZe=r(a9," or "),WS=n(a9,"A",{href:!0});var JDr=s(WS);FZe=r(JDr,"RobertaTokenizerFast"),JDr.forEach(t),TZe=r(a9," (I-BERT model)"),a9.forEach(t),MZe=i(S),Yn=n(S,"LI",{});var n9=s(Yn);ire=n(n9,"STRONG",{});var YDr=s(ire);EZe=r(YDr,"layoutlm"),YDr.forEach(t),CZe=r(n9," \u2014 "),HS=n(n9,"A",{href:!0});var KDr=s(HS);wZe=r(KDr,"LayoutLMTokenizer"),KDr.forEach(t),AZe=r(n9," or "),US=n(n9,"A",{href:!0});var ZDr=s(US);yZe=r(ZDr,"LayoutLMTokenizerFast"),ZDr.forEach(t),LZe=r(n9," (LayoutLM model)"),n9.forEach(t),xZe=i(S),Kn=n(S,"LI",{});var s9=s(Kn);dre=n(s9,"STRONG",{});var eGr=s(dre);$Ze=r(eGr,"layoutlmv2"),eGr.forEach(t),kZe=r(s9," \u2014 "),JS=n(s9,"A",{href:!0});var oGr=s(JS);SZe=r(oGr,"LayoutLMv2Tokenizer"),oGr.forEach(t),RZe=r(s9," or "),YS=n(s9,"A",{href:!0});var rGr=s(YS);BZe=r(rGr,"LayoutLMv2TokenizerFast"),rGr.forEach(t),PZe=r(s9," (LayoutLMv2 model)"),s9.forEach(t),IZe=i(S),Zn=n(S,"LI",{});var l9=s(Zn);cre=n(l9,"STRONG",{});var tGr=s(cre);qZe=r(tGr,"layoutxlm"),tGr.forEach(t),NZe=r(l9," \u2014 "),KS=n(l9,"A",{href:!0});var aGr=s(KS);jZe=r(aGr,"LayoutXLMTokenizer"),aGr.forEach(t),DZe=r(l9," or "),ZS=n(l9,"A",{href:!0});var nGr=s(ZS);GZe=r(nGr,"LayoutXLMTokenizerFast"),nGr.forEach(t),OZe=r(l9," (LayoutXLM model)"),l9.forEach(t),VZe=i(S),es=n(S,"LI",{});var i9=s(es);fre=n(i9,"STRONG",{});var sGr=s(fre);XZe=r(sGr,"led"),sGr.forEach(t),zZe=r(i9," \u2014 "),eR=n(i9,"A",{href:!0});var lGr=s(eR);QZe=r(lGr,"LEDTokenizer"),lGr.forEach(t),WZe=r(i9," or "),oR=n(i9,"A",{href:!0});var iGr=s(oR);HZe=r(iGr,"LEDTokenizerFast"),iGr.forEach(t),UZe=r(i9," (LED model)"),i9.forEach(t),JZe=i(S),os=n(S,"LI",{});var d9=s(os);mre=n(d9,"STRONG",{});var dGr=s(mre);YZe=r(dGr,"longformer"),dGr.forEach(t),KZe=r(d9," \u2014 "),rR=n(d9,"A",{href:!0});var cGr=s(rR);ZZe=r(cGr,"LongformerTokenizer"),cGr.forEach(t),eeo=r(d9," or "),tR=n(d9,"A",{href:!0});var fGr=s(tR);oeo=r(fGr,"LongformerTokenizerFast"),fGr.forEach(t),reo=r(d9," (Longformer model)"),d9.forEach(t),teo=i(S),Fg=n(S,"LI",{});var REe=s(Fg);gre=n(REe,"STRONG",{});var mGr=s(gre);aeo=r(mGr,"luke"),mGr.forEach(t),neo=r(REe," \u2014 "),aR=n(REe,"A",{href:!0});var gGr=s(aR);seo=r(gGr,"LukeTokenizer"),gGr.forEach(t),leo=r(REe," (LUKE model)"),REe.forEach(t),ieo=i(S),rs=n(S,"LI",{});var c9=s(rs);hre=n(c9,"STRONG",{});var hGr=s(hre);deo=r(hGr,"lxmert"),hGr.forEach(t),ceo=r(c9," \u2014 "),nR=n(c9,"A",{href:!0});var pGr=s(nR);feo=r(pGr,"LxmertTokenizer"),pGr.forEach(t),meo=r(c9," or "),sR=n(c9,"A",{href:!0});var uGr=s(sR);geo=r(uGr,"LxmertTokenizerFast"),uGr.forEach(t),heo=r(c9," (LXMERT model)"),c9.forEach(t),peo=i(S),Tg=n(S,"LI",{});var BEe=s(Tg);pre=n(BEe,"STRONG",{});var _Gr=s(pre);ueo=r(_Gr,"m2m_100"),_Gr.forEach(t),_eo=r(BEe," \u2014 "),lR=n(BEe,"A",{href:!0});var bGr=s(lR);beo=r(bGr,"M2M100Tokenizer"),bGr.forEach(t),veo=r(BEe," (M2M100 model)"),BEe.forEach(t),Feo=i(S),Mg=n(S,"LI",{});var PEe=s(Mg);ure=n(PEe,"STRONG",{});var vGr=s(ure);Teo=r(vGr,"marian"),vGr.forEach(t),Meo=r(PEe," \u2014 "),iR=n(PEe,"A",{href:!0});var FGr=s(iR);Eeo=r(FGr,"MarianTokenizer"),FGr.forEach(t),Ceo=r(PEe," (Marian model)"),PEe.forEach(t),weo=i(S),ts=n(S,"LI",{});var f9=s(ts);_re=n(f9,"STRONG",{});var TGr=s(_re);Aeo=r(TGr,"mbart"),TGr.forEach(t),yeo=r(f9," \u2014 "),dR=n(f9,"A",{href:!0});var MGr=s(dR);Leo=r(MGr,"MBartTokenizer"),MGr.forEach(t),xeo=r(f9," or "),cR=n(f9,"A",{href:!0});var EGr=s(cR);$eo=r(EGr,"MBartTokenizerFast"),EGr.forEach(t),keo=r(f9," (mBART model)"),f9.forEach(t),Seo=i(S),as=n(S,"LI",{});var m9=s(as);bre=n(m9,"STRONG",{});var CGr=s(bre);Reo=r(CGr,"mbart50"),CGr.forEach(t),Beo=r(m9," \u2014 "),fR=n(m9,"A",{href:!0});var wGr=s(fR);Peo=r(wGr,"MBart50Tokenizer"),wGr.forEach(t),Ieo=r(m9," or "),mR=n(m9,"A",{href:!0});var AGr=s(mR);qeo=r(AGr,"MBart50TokenizerFast"),AGr.forEach(t),Neo=r(m9," (mBART-50 model)"),m9.forEach(t),jeo=i(S),ns=n(S,"LI",{});var g9=s(ns);vre=n(g9,"STRONG",{});var yGr=s(vre);Deo=r(yGr,"megatron-bert"),yGr.forEach(t),Geo=r(g9," \u2014 "),gR=n(g9,"A",{href:!0});var LGr=s(gR);Oeo=r(LGr,"BertTokenizer"),LGr.forEach(t),Veo=r(g9," or "),hR=n(g9,"A",{href:!0});var xGr=s(hR);Xeo=r(xGr,"BertTokenizerFast"),xGr.forEach(t),zeo=r(g9," (MegatronBert model)"),g9.forEach(t),Qeo=i(S),Eg=n(S,"LI",{});var IEe=s(Eg);Fre=n(IEe,"STRONG",{});var $Gr=s(Fre);Weo=r($Gr,"mluke"),$Gr.forEach(t),Heo=r(IEe," \u2014 "),pR=n(IEe,"A",{href:!0});var kGr=s(pR);Ueo=r(kGr,"MLukeTokenizer"),kGr.forEach(t),Jeo=r(IEe," (mLUKE model)"),IEe.forEach(t),Yeo=i(S),ss=n(S,"LI",{});var h9=s(ss);Tre=n(h9,"STRONG",{});var SGr=s(Tre);Keo=r(SGr,"mobilebert"),SGr.forEach(t),Zeo=r(h9," \u2014 "),uR=n(h9,"A",{href:!0});var RGr=s(uR);eoo=r(RGr,"MobileBertTokenizer"),RGr.forEach(t),ooo=r(h9," or "),_R=n(h9,"A",{href:!0});var BGr=s(_R);roo=r(BGr,"MobileBertTokenizerFast"),BGr.forEach(t),too=r(h9," (MobileBERT model)"),h9.forEach(t),aoo=i(S),ls=n(S,"LI",{});var p9=s(ls);Mre=n(p9,"STRONG",{});var PGr=s(Mre);noo=r(PGr,"mpnet"),PGr.forEach(t),soo=r(p9," \u2014 "),bR=n(p9,"A",{href:!0});var IGr=s(bR);loo=r(IGr,"MPNetTokenizer"),IGr.forEach(t),ioo=r(p9," or "),vR=n(p9,"A",{href:!0});var qGr=s(vR);doo=r(qGr,"MPNetTokenizerFast"),qGr.forEach(t),coo=r(p9," (MPNet model)"),p9.forEach(t),foo=i(S),is=n(S,"LI",{});var u9=s(is);Ere=n(u9,"STRONG",{});var NGr=s(Ere);moo=r(NGr,"mt5"),NGr.forEach(t),goo=r(u9," \u2014 "),FR=n(u9,"A",{href:!0});var jGr=s(FR);hoo=r(jGr,"MT5Tokenizer"),jGr.forEach(t),poo=r(u9," or "),TR=n(u9,"A",{href:!0});var DGr=s(TR);uoo=r(DGr,"MT5TokenizerFast"),DGr.forEach(t),_oo=r(u9," (mT5 model)"),u9.forEach(t),boo=i(S),ds=n(S,"LI",{});var _9=s(ds);Cre=n(_9,"STRONG",{});var GGr=s(Cre);voo=r(GGr,"nystromformer"),GGr.forEach(t),Foo=r(_9," \u2014 "),MR=n(_9,"A",{href:!0});var OGr=s(MR);Too=r(OGr,"AlbertTokenizer"),OGr.forEach(t),Moo=r(_9," or "),ER=n(_9,"A",{href:!0});var VGr=s(ER);Eoo=r(VGr,"AlbertTokenizerFast"),VGr.forEach(t),Coo=r(_9," (Nystromformer model)"),_9.forEach(t),woo=i(S),cs=n(S,"LI",{});var b9=s(cs);wre=n(b9,"STRONG",{});var XGr=s(wre);Aoo=r(XGr,"openai-gpt"),XGr.forEach(t),yoo=r(b9," \u2014 "),CR=n(b9,"A",{href:!0});var zGr=s(CR);Loo=r(zGr,"OpenAIGPTTokenizer"),zGr.forEach(t),xoo=r(b9," or "),wR=n(b9,"A",{href:!0});var QGr=s(wR);$oo=r(QGr,"OpenAIGPTTokenizerFast"),QGr.forEach(t),koo=r(b9," (OpenAI GPT model)"),b9.forEach(t),Soo=i(S),fs=n(S,"LI",{});var v9=s(fs);Are=n(v9,"STRONG",{});var WGr=s(Are);Roo=r(WGr,"pegasus"),WGr.forEach(t),Boo=r(v9," \u2014 "),AR=n(v9,"A",{href:!0});var HGr=s(AR);Poo=r(HGr,"PegasusTokenizer"),HGr.forEach(t),Ioo=r(v9," or "),yR=n(v9,"A",{href:!0});var UGr=s(yR);qoo=r(UGr,"PegasusTokenizerFast"),UGr.forEach(t),Noo=r(v9," (Pegasus model)"),v9.forEach(t),joo=i(S),Cg=n(S,"LI",{});var qEe=s(Cg);yre=n(qEe,"STRONG",{});var JGr=s(yre);Doo=r(JGr,"perceiver"),JGr.forEach(t),Goo=r(qEe," \u2014 "),LR=n(qEe,"A",{href:!0});var YGr=s(LR);Ooo=r(YGr,"PerceiverTokenizer"),YGr.forEach(t),Voo=r(qEe," (Perceiver model)"),qEe.forEach(t),Xoo=i(S),wg=n(S,"LI",{});var NEe=s(wg);Lre=n(NEe,"STRONG",{});var KGr=s(Lre);zoo=r(KGr,"phobert"),KGr.forEach(t),Qoo=r(NEe," \u2014 "),xR=n(NEe,"A",{href:!0});var ZGr=s(xR);Woo=r(ZGr,"PhobertTokenizer"),ZGr.forEach(t),Hoo=r(NEe," (PhoBERT model)"),NEe.forEach(t),Uoo=i(S),Ag=n(S,"LI",{});var jEe=s(Ag);xre=n(jEe,"STRONG",{});var eOr=s(xre);Joo=r(eOr,"plbart"),eOr.forEach(t),Yoo=r(jEe," \u2014 "),$R=n(jEe,"A",{href:!0});var oOr=s($R);Koo=r(oOr,"PLBartTokenizer"),oOr.forEach(t),Zoo=r(jEe," (PLBart model)"),jEe.forEach(t),ero=i(S),yg=n(S,"LI",{});var DEe=s(yg);$re=n(DEe,"STRONG",{});var rOr=s($re);oro=r(rOr,"prophetnet"),rOr.forEach(t),rro=r(DEe," \u2014 "),kR=n(DEe,"A",{href:!0});var tOr=s(kR);tro=r(tOr,"ProphetNetTokenizer"),tOr.forEach(t),aro=r(DEe," (ProphetNet model)"),DEe.forEach(t),nro=i(S),ms=n(S,"LI",{});var F9=s(ms);kre=n(F9,"STRONG",{});var aOr=s(kre);sro=r(aOr,"qdqbert"),aOr.forEach(t),lro=r(F9," \u2014 "),SR=n(F9,"A",{href:!0});var nOr=s(SR);iro=r(nOr,"BertTokenizer"),nOr.forEach(t),dro=r(F9," or "),RR=n(F9,"A",{href:!0});var sOr=s(RR);cro=r(sOr,"BertTokenizerFast"),sOr.forEach(t),fro=r(F9," (QDQBert model)"),F9.forEach(t),mro=i(S),Lg=n(S,"LI",{});var GEe=s(Lg);Sre=n(GEe,"STRONG",{});var lOr=s(Sre);gro=r(lOr,"rag"),lOr.forEach(t),hro=r(GEe," \u2014 "),BR=n(GEe,"A",{href:!0});var iOr=s(BR);pro=r(iOr,"RagTokenizer"),iOr.forEach(t),uro=r(GEe," (RAG model)"),GEe.forEach(t),_ro=i(S),gs=n(S,"LI",{});var T9=s(gs);Rre=n(T9,"STRONG",{});var dOr=s(Rre);bro=r(dOr,"realm"),dOr.forEach(t),vro=r(T9," \u2014 "),PR=n(T9,"A",{href:!0});var cOr=s(PR);Fro=r(cOr,"RealmTokenizer"),cOr.forEach(t),Tro=r(T9," or "),IR=n(T9,"A",{href:!0});var fOr=s(IR);Mro=r(fOr,"RealmTokenizerFast"),fOr.forEach(t),Ero=r(T9," (Realm model)"),T9.forEach(t),Cro=i(S),hs=n(S,"LI",{});var M9=s(hs);Bre=n(M9,"STRONG",{});var mOr=s(Bre);wro=r(mOr,"reformer"),mOr.forEach(t),Aro=r(M9," \u2014 "),qR=n(M9,"A",{href:!0});var gOr=s(qR);yro=r(gOr,"ReformerTokenizer"),gOr.forEach(t),Lro=r(M9," or "),NR=n(M9,"A",{href:!0});var hOr=s(NR);xro=r(hOr,"ReformerTokenizerFast"),hOr.forEach(t),$ro=r(M9," (Reformer model)"),M9.forEach(t),kro=i(S),ps=n(S,"LI",{});var E9=s(ps);Pre=n(E9,"STRONG",{});var pOr=s(Pre);Sro=r(pOr,"rembert"),pOr.forEach(t),Rro=r(E9," \u2014 "),jR=n(E9,"A",{href:!0});var uOr=s(jR);Bro=r(uOr,"RemBertTokenizer"),uOr.forEach(t),Pro=r(E9," or "),DR=n(E9,"A",{href:!0});var _Or=s(DR);Iro=r(_Or,"RemBertTokenizerFast"),_Or.forEach(t),qro=r(E9," (RemBERT model)"),E9.forEach(t),Nro=i(S),us=n(S,"LI",{});var C9=s(us);Ire=n(C9,"STRONG",{});var bOr=s(Ire);jro=r(bOr,"retribert"),bOr.forEach(t),Dro=r(C9," \u2014 "),GR=n(C9,"A",{href:!0});var vOr=s(GR);Gro=r(vOr,"RetriBertTokenizer"),vOr.forEach(t),Oro=r(C9," or "),OR=n(C9,"A",{href:!0});var FOr=s(OR);Vro=r(FOr,"RetriBertTokenizerFast"),FOr.forEach(t),Xro=r(C9," (RetriBERT model)"),C9.forEach(t),zro=i(S),_s=n(S,"LI",{});var w9=s(_s);qre=n(w9,"STRONG",{});var TOr=s(qre);Qro=r(TOr,"roberta"),TOr.forEach(t),Wro=r(w9," \u2014 "),VR=n(w9,"A",{href:!0});var MOr=s(VR);Hro=r(MOr,"RobertaTokenizer"),MOr.forEach(t),Uro=r(w9," or "),XR=n(w9,"A",{href:!0});var EOr=s(XR);Jro=r(EOr,"RobertaTokenizerFast"),EOr.forEach(t),Yro=r(w9," (RoBERTa model)"),w9.forEach(t),Kro=i(S),bs=n(S,"LI",{});var A9=s(bs);Nre=n(A9,"STRONG",{});var COr=s(Nre);Zro=r(COr,"roformer"),COr.forEach(t),eto=r(A9," \u2014 "),zR=n(A9,"A",{href:!0});var wOr=s(zR);oto=r(wOr,"RoFormerTokenizer"),wOr.forEach(t),rto=r(A9," or "),QR=n(A9,"A",{href:!0});var AOr=s(QR);tto=r(AOr,"RoFormerTokenizerFast"),AOr.forEach(t),ato=r(A9," (RoFormer model)"),A9.forEach(t),nto=i(S),xg=n(S,"LI",{});var OEe=s(xg);jre=n(OEe,"STRONG",{});var yOr=s(jre);sto=r(yOr,"speech_to_text"),yOr.forEach(t),lto=r(OEe," \u2014 "),WR=n(OEe,"A",{href:!0});var LOr=s(WR);ito=r(LOr,"Speech2TextTokenizer"),LOr.forEach(t),dto=r(OEe," (Speech2Text model)"),OEe.forEach(t),cto=i(S),$g=n(S,"LI",{});var VEe=s($g);Dre=n(VEe,"STRONG",{});var xOr=s(Dre);fto=r(xOr,"speech_to_text_2"),xOr.forEach(t),mto=r(VEe," \u2014 "),HR=n(VEe,"A",{href:!0});var $Or=s(HR);gto=r($Or,"Speech2Text2Tokenizer"),$Or.forEach(t),hto=r(VEe," (Speech2Text2 model)"),VEe.forEach(t),pto=i(S),vs=n(S,"LI",{});var y9=s(vs);Gre=n(y9,"STRONG",{});var kOr=s(Gre);uto=r(kOr,"splinter"),kOr.forEach(t),_to=r(y9," \u2014 "),UR=n(y9,"A",{href:!0});var SOr=s(UR);bto=r(SOr,"SplinterTokenizer"),SOr.forEach(t),vto=r(y9," or "),JR=n(y9,"A",{href:!0});var ROr=s(JR);Fto=r(ROr,"SplinterTokenizerFast"),ROr.forEach(t),Tto=r(y9," (Splinter model)"),y9.forEach(t),Mto=i(S),Fs=n(S,"LI",{});var L9=s(Fs);Ore=n(L9,"STRONG",{});var BOr=s(Ore);Eto=r(BOr,"squeezebert"),BOr.forEach(t),Cto=r(L9," \u2014 "),YR=n(L9,"A",{href:!0});var POr=s(YR);wto=r(POr,"SqueezeBertTokenizer"),POr.forEach(t),Ato=r(L9," or "),KR=n(L9,"A",{href:!0});var IOr=s(KR);yto=r(IOr,"SqueezeBertTokenizerFast"),IOr.forEach(t),Lto=r(L9," (SqueezeBERT model)"),L9.forEach(t),xto=i(S),Ts=n(S,"LI",{});var x9=s(Ts);Vre=n(x9,"STRONG",{});var qOr=s(Vre);$to=r(qOr,"t5"),qOr.forEach(t),kto=r(x9," \u2014 "),ZR=n(x9,"A",{href:!0});var NOr=s(ZR);Sto=r(NOr,"T5Tokenizer"),NOr.forEach(t),Rto=r(x9," or "),eB=n(x9,"A",{href:!0});var jOr=s(eB);Bto=r(jOr,"T5TokenizerFast"),jOr.forEach(t),Pto=r(x9," (T5 model)"),x9.forEach(t),Ito=i(S),kg=n(S,"LI",{});var XEe=s(kg);Xre=n(XEe,"STRONG",{});var DOr=s(Xre);qto=r(DOr,"tapas"),DOr.forEach(t),Nto=r(XEe," \u2014 "),oB=n(XEe,"A",{href:!0});var GOr=s(oB);jto=r(GOr,"TapasTokenizer"),GOr.forEach(t),Dto=r(XEe," (TAPAS model)"),XEe.forEach(t),Gto=i(S),Sg=n(S,"LI",{});var zEe=s(Sg);zre=n(zEe,"STRONG",{});var OOr=s(zre);Oto=r(OOr,"tapex"),OOr.forEach(t),Vto=r(zEe," \u2014 "),rB=n(zEe,"A",{href:!0});var VOr=s(rB);Xto=r(VOr,"TapexTokenizer"),VOr.forEach(t),zto=r(zEe," (TAPEX model)"),zEe.forEach(t),Qto=i(S),Rg=n(S,"LI",{});var QEe=s(Rg);Qre=n(QEe,"STRONG",{});var XOr=s(Qre);Wto=r(XOr,"transfo-xl"),XOr.forEach(t),Hto=r(QEe," \u2014 "),tB=n(QEe,"A",{href:!0});var zOr=s(tB);Uto=r(zOr,"TransfoXLTokenizer"),zOr.forEach(t),Jto=r(QEe," (Transformer-XL model)"),QEe.forEach(t),Yto=i(S),Ms=n(S,"LI",{});var $9=s(Ms);Wre=n($9,"STRONG",{});var QOr=s(Wre);Kto=r(QOr,"visual_bert"),QOr.forEach(t),Zto=r($9," \u2014 "),aB=n($9,"A",{href:!0});var WOr=s(aB);eao=r(WOr,"BertTokenizer"),WOr.forEach(t),oao=r($9," or "),nB=n($9,"A",{href:!0});var HOr=s(nB);rao=r(HOr,"BertTokenizerFast"),HOr.forEach(t),tao=r($9," (VisualBert model)"),$9.forEach(t),aao=i(S),Bg=n(S,"LI",{});var WEe=s(Bg);Hre=n(WEe,"STRONG",{});var UOr=s(Hre);nao=r(UOr,"wav2vec2"),UOr.forEach(t),sao=r(WEe," \u2014 "),sB=n(WEe,"A",{href:!0});var JOr=s(sB);lao=r(JOr,"Wav2Vec2CTCTokenizer"),JOr.forEach(t),iao=r(WEe," (Wav2Vec2 model)"),WEe.forEach(t),dao=i(S),Pg=n(S,"LI",{});var HEe=s(Pg);Ure=n(HEe,"STRONG",{});var YOr=s(Ure);cao=r(YOr,"wav2vec2_phoneme"),YOr.forEach(t),fao=r(HEe," \u2014 "),lB=n(HEe,"A",{href:!0});var KOr=s(lB);mao=r(KOr,"Wav2Vec2PhonemeCTCTokenizer"),KOr.forEach(t),gao=r(HEe," (Wav2Vec2Phoneme model)"),HEe.forEach(t),hao=i(S),Es=n(S,"LI",{});var k9=s(Es);Jre=n(k9,"STRONG",{});var ZOr=s(Jre);pao=r(ZOr,"xglm"),ZOr.forEach(t),uao=r(k9," \u2014 "),iB=n(k9,"A",{href:!0});var eVr=s(iB);_ao=r(eVr,"XGLMTokenizer"),eVr.forEach(t),bao=r(k9," or "),dB=n(k9,"A",{href:!0});var oVr=s(dB);vao=r(oVr,"XGLMTokenizerFast"),oVr.forEach(t),Fao=r(k9," (XGLM model)"),k9.forEach(t),Tao=i(S),Ig=n(S,"LI",{});var UEe=s(Ig);Yre=n(UEe,"STRONG",{});var rVr=s(Yre);Mao=r(rVr,"xlm"),rVr.forEach(t),Eao=r(UEe," \u2014 "),cB=n(UEe,"A",{href:!0});var tVr=s(cB);Cao=r(tVr,"XLMTokenizer"),tVr.forEach(t),wao=r(UEe," (XLM model)"),UEe.forEach(t),Aao=i(S),qg=n(S,"LI",{});var JEe=s(qg);Kre=n(JEe,"STRONG",{});var aVr=s(Kre);yao=r(aVr,"xlm-prophetnet"),aVr.forEach(t),Lao=r(JEe," \u2014 "),fB=n(JEe,"A",{href:!0});var nVr=s(fB);xao=r(nVr,"XLMProphetNetTokenizer"),nVr.forEach(t),$ao=r(JEe," (XLMProphetNet model)"),JEe.forEach(t),kao=i(S),Cs=n(S,"LI",{});var S9=s(Cs);Zre=n(S9,"STRONG",{});var sVr=s(Zre);Sao=r(sVr,"xlm-roberta"),sVr.forEach(t),Rao=r(S9," \u2014 "),mB=n(S9,"A",{href:!0});var lVr=s(mB);Bao=r(lVr,"XLMRobertaTokenizer"),lVr.forEach(t),Pao=r(S9," or "),gB=n(S9,"A",{href:!0});var iVr=s(gB);Iao=r(iVr,"XLMRobertaTokenizerFast"),iVr.forEach(t),qao=r(S9," (XLM-RoBERTa model)"),S9.forEach(t),Nao=i(S),ws=n(S,"LI",{});var R9=s(ws);ete=n(R9,"STRONG",{});var dVr=s(ete);jao=r(dVr,"xlm-roberta-xl"),dVr.forEach(t),Dao=r(R9," \u2014 "),hB=n(R9,"A",{href:!0});var cVr=s(hB);Gao=r(cVr,"RobertaTokenizer"),cVr.forEach(t),Oao=r(R9," or "),pB=n(R9,"A",{href:!0});var fVr=s(pB);Vao=r(fVr,"RobertaTokenizerFast"),fVr.forEach(t),Xao=r(R9," (XLM-RoBERTa-XL model)"),R9.forEach(t),zao=i(S),As=n(S,"LI",{});var B9=s(As);ote=n(B9,"STRONG",{});var mVr=s(ote);Qao=r(mVr,"xlnet"),mVr.forEach(t),Wao=r(B9," \u2014 "),uB=n(B9,"A",{href:!0});var gVr=s(uB);Hao=r(gVr,"XLNetTokenizer"),gVr.forEach(t),Uao=r(B9," or "),_B=n(B9,"A",{href:!0});var hVr=s(_B);Jao=r(hVr,"XLNetTokenizerFast"),hVr.forEach(t),Yao=r(B9," (XLNet model)"),B9.forEach(t),Kao=i(S),ys=n(S,"LI",{});var P9=s(ys);rte=n(P9,"STRONG",{});var pVr=s(rte);Zao=r(pVr,"yoso"),pVr.forEach(t),eno=r(P9," \u2014 "),bB=n(P9,"A",{href:!0});var uVr=s(bB);ono=r(uVr,"AlbertTokenizer"),uVr.forEach(t),rno=r(P9," or "),vB=n(P9,"A",{href:!0});var _Vr=s(vB);tno=r(_Vr,"AlbertTokenizerFast"),_Vr.forEach(t),ano=r(P9," (YOSO model)"),P9.forEach(t),S.forEach(t),nno=i(Ss),T(Ng.$$.fragment,Ss),Ss.forEach(t),sno=i(ks),jg=n(ks,"DIV",{class:!0});var IIe=s(jg);T(GA.$$.fragment,IIe),lno=i(IIe),tte=n(IIe,"P",{});var bVr=s(tte);ino=r(bVr,"Register a new tokenizer in this mapping."),bVr.forEach(t),IIe.forEach(t),ks.forEach(t),jBe=i(f),mi=n(f,"H2",{class:!0});var qIe=s(mi);Dg=n(qIe,"A",{id:!0,class:!0,href:!0});var vVr=s(Dg);ate=n(vVr,"SPAN",{});var FVr=s(ate);T(OA.$$.fragment,FVr),FVr.forEach(t),vVr.forEach(t),dno=i(qIe),nte=n(qIe,"SPAN",{});var TVr=s(nte);cno=r(TVr,"AutoFeatureExtractor"),TVr.forEach(t),qIe.forEach(t),DBe=i(f),Ao=n(f,"DIV",{class:!0});var Rs=s(Ao);T(VA.$$.fragment,Rs),fno=i(Rs),XA=n(Rs,"P",{});var NIe=s(XA);mno=r(NIe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),FB=n(NIe,"A",{href:!0});var MVr=s(FB);gno=r(MVr,"AutoFeatureExtractor.from_pretrained()"),MVr.forEach(t),hno=r(NIe," class method."),NIe.forEach(t),pno=i(Rs),zA=n(Rs,"P",{});var jIe=s(zA);uno=r(jIe,"This class cannot be instantiated directly using "),ste=n(jIe,"CODE",{});var EVr=s(ste);_no=r(EVr,"__init__()"),EVr.forEach(t),bno=r(jIe," (throws an error)."),jIe.forEach(t),vno=i(Rs),Qe=n(Rs,"DIV",{class:!0});var Ht=s(Qe);T(QA.$$.fragment,Ht),Fno=i(Ht),lte=n(Ht,"P",{});var CVr=s(lte);Tno=r(CVr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),CVr.forEach(t),Mno=i(Ht),Ma=n(Ht,"P",{});var S3=s(Ma);Eno=r(S3,"The feature extractor class to instantiate is selected based on the "),ite=n(S3,"CODE",{});var wVr=s(ite);Cno=r(wVr,"model_type"),wVr.forEach(t),wno=r(S3,` property of the config object
(either passed as an argument or loaded from `),dte=n(S3,"CODE",{});var AVr=s(dte);Ano=r(AVr,"pretrained_model_name_or_path"),AVr.forEach(t),yno=r(S3,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),cte=n(S3,"CODE",{});var yVr=s(cte);Lno=r(yVr,"pretrained_model_name_or_path"),yVr.forEach(t),xno=r(S3,":"),S3.forEach(t),$no=i(Ht),oe=n(Ht,"UL",{});var ae=s(oe);Gg=n(ae,"LI",{});var YEe=s(Gg);fte=n(YEe,"STRONG",{});var LVr=s(fte);kno=r(LVr,"beit"),LVr.forEach(t),Sno=r(YEe," \u2014 "),TB=n(YEe,"A",{href:!0});var xVr=s(TB);Rno=r(xVr,"BeitFeatureExtractor"),xVr.forEach(t),Bno=r(YEe," (BEiT model)"),YEe.forEach(t),Pno=i(ae),Og=n(ae,"LI",{});var KEe=s(Og);mte=n(KEe,"STRONG",{});var $Vr=s(mte);Ino=r($Vr,"clip"),$Vr.forEach(t),qno=r(KEe," \u2014 "),MB=n(KEe,"A",{href:!0});var kVr=s(MB);Nno=r(kVr,"CLIPFeatureExtractor"),kVr.forEach(t),jno=r(KEe," (CLIP model)"),KEe.forEach(t),Dno=i(ae),Vg=n(ae,"LI",{});var ZEe=s(Vg);gte=n(ZEe,"STRONG",{});var SVr=s(gte);Gno=r(SVr,"convnext"),SVr.forEach(t),Ono=r(ZEe," \u2014 "),EB=n(ZEe,"A",{href:!0});var RVr=s(EB);Vno=r(RVr,"ConvNextFeatureExtractor"),RVr.forEach(t),Xno=r(ZEe," (ConvNext model)"),ZEe.forEach(t),zno=i(ae),Xg=n(ae,"LI",{});var eCe=s(Xg);hte=n(eCe,"STRONG",{});var BVr=s(hte);Qno=r(BVr,"cvt"),BVr.forEach(t),Wno=r(eCe," \u2014 "),CB=n(eCe,"A",{href:!0});var PVr=s(CB);Hno=r(PVr,"ConvNextFeatureExtractor"),PVr.forEach(t),Uno=r(eCe," (Cvt model)"),eCe.forEach(t),Jno=i(ae),zg=n(ae,"LI",{});var oCe=s(zg);pte=n(oCe,"STRONG",{});var IVr=s(pte);Yno=r(IVr,"data2vec-audio"),IVr.forEach(t),Kno=r(oCe," \u2014 "),wB=n(oCe,"A",{href:!0});var qVr=s(wB);Zno=r(qVr,"Wav2Vec2FeatureExtractor"),qVr.forEach(t),eso=r(oCe," (Data2VecAudio model)"),oCe.forEach(t),oso=i(ae),Qg=n(ae,"LI",{});var rCe=s(Qg);ute=n(rCe,"STRONG",{});var NVr=s(ute);rso=r(NVr,"data2vec-vision"),NVr.forEach(t),tso=r(rCe," \u2014 "),AB=n(rCe,"A",{href:!0});var jVr=s(AB);aso=r(jVr,"BeitFeatureExtractor"),jVr.forEach(t),nso=r(rCe," (Data2VecVision model)"),rCe.forEach(t),sso=i(ae),Wg=n(ae,"LI",{});var tCe=s(Wg);_te=n(tCe,"STRONG",{});var DVr=s(_te);lso=r(DVr,"deit"),DVr.forEach(t),iso=r(tCe," \u2014 "),yB=n(tCe,"A",{href:!0});var GVr=s(yB);dso=r(GVr,"DeiTFeatureExtractor"),GVr.forEach(t),cso=r(tCe," (DeiT model)"),tCe.forEach(t),fso=i(ae),Hg=n(ae,"LI",{});var aCe=s(Hg);bte=n(aCe,"STRONG",{});var OVr=s(bte);mso=r(OVr,"detr"),OVr.forEach(t),gso=r(aCe," \u2014 "),LB=n(aCe,"A",{href:!0});var VVr=s(LB);hso=r(VVr,"DetrFeatureExtractor"),VVr.forEach(t),pso=r(aCe," (DETR model)"),aCe.forEach(t),uso=i(ae),Ug=n(ae,"LI",{});var nCe=s(Ug);vte=n(nCe,"STRONG",{});var XVr=s(vte);_so=r(XVr,"dpt"),XVr.forEach(t),bso=r(nCe," \u2014 "),xB=n(nCe,"A",{href:!0});var zVr=s(xB);vso=r(zVr,"DPTFeatureExtractor"),zVr.forEach(t),Fso=r(nCe," (DPT model)"),nCe.forEach(t),Tso=i(ae),Jg=n(ae,"LI",{});var sCe=s(Jg);Fte=n(sCe,"STRONG",{});var QVr=s(Fte);Mso=r(QVr,"glpn"),QVr.forEach(t),Eso=r(sCe," \u2014 "),$B=n(sCe,"A",{href:!0});var WVr=s($B);Cso=r(WVr,"GLPNFeatureExtractor"),WVr.forEach(t),wso=r(sCe," (GLPN model)"),sCe.forEach(t),Aso=i(ae),Yg=n(ae,"LI",{});var lCe=s(Yg);Tte=n(lCe,"STRONG",{});var HVr=s(Tte);yso=r(HVr,"hubert"),HVr.forEach(t),Lso=r(lCe," \u2014 "),kB=n(lCe,"A",{href:!0});var UVr=s(kB);xso=r(UVr,"Wav2Vec2FeatureExtractor"),UVr.forEach(t),$so=r(lCe," (Hubert model)"),lCe.forEach(t),kso=i(ae),Kg=n(ae,"LI",{});var iCe=s(Kg);Mte=n(iCe,"STRONG",{});var JVr=s(Mte);Sso=r(JVr,"layoutlmv2"),JVr.forEach(t),Rso=r(iCe," \u2014 "),SB=n(iCe,"A",{href:!0});var YVr=s(SB);Bso=r(YVr,"LayoutLMv2FeatureExtractor"),YVr.forEach(t),Pso=r(iCe," (LayoutLMv2 model)"),iCe.forEach(t),Iso=i(ae),Zg=n(ae,"LI",{});var dCe=s(Zg);Ete=n(dCe,"STRONG",{});var KVr=s(Ete);qso=r(KVr,"maskformer"),KVr.forEach(t),Nso=r(dCe," \u2014 "),RB=n(dCe,"A",{href:!0});var ZVr=s(RB);jso=r(ZVr,"MaskFormerFeatureExtractor"),ZVr.forEach(t),Dso=r(dCe," (MaskFormer model)"),dCe.forEach(t),Gso=i(ae),eh=n(ae,"LI",{});var cCe=s(eh);Cte=n(cCe,"STRONG",{});var eXr=s(Cte);Oso=r(eXr,"perceiver"),eXr.forEach(t),Vso=r(cCe," \u2014 "),BB=n(cCe,"A",{href:!0});var oXr=s(BB);Xso=r(oXr,"PerceiverFeatureExtractor"),oXr.forEach(t),zso=r(cCe," (Perceiver model)"),cCe.forEach(t),Qso=i(ae),oh=n(ae,"LI",{});var fCe=s(oh);wte=n(fCe,"STRONG",{});var rXr=s(wte);Wso=r(rXr,"poolformer"),rXr.forEach(t),Hso=r(fCe," \u2014 "),PB=n(fCe,"A",{href:!0});var tXr=s(PB);Uso=r(tXr,"PoolFormerFeatureExtractor"),tXr.forEach(t),Jso=r(fCe," (PoolFormer model)"),fCe.forEach(t),Yso=i(ae),rh=n(ae,"LI",{});var mCe=s(rh);Ate=n(mCe,"STRONG",{});var aXr=s(Ate);Kso=r(aXr,"regnet"),aXr.forEach(t),Zso=r(mCe," \u2014 "),IB=n(mCe,"A",{href:!0});var nXr=s(IB);elo=r(nXr,"ConvNextFeatureExtractor"),nXr.forEach(t),olo=r(mCe," (RegNet model)"),mCe.forEach(t),rlo=i(ae),th=n(ae,"LI",{});var gCe=s(th);yte=n(gCe,"STRONG",{});var sXr=s(yte);tlo=r(sXr,"resnet"),sXr.forEach(t),alo=r(gCe," \u2014 "),qB=n(gCe,"A",{href:!0});var lXr=s(qB);nlo=r(lXr,"ConvNextFeatureExtractor"),lXr.forEach(t),slo=r(gCe," (ResNet model)"),gCe.forEach(t),llo=i(ae),ah=n(ae,"LI",{});var hCe=s(ah);Lte=n(hCe,"STRONG",{});var iXr=s(Lte);ilo=r(iXr,"segformer"),iXr.forEach(t),dlo=r(hCe," \u2014 "),NB=n(hCe,"A",{href:!0});var dXr=s(NB);clo=r(dXr,"SegformerFeatureExtractor"),dXr.forEach(t),flo=r(hCe," (SegFormer model)"),hCe.forEach(t),mlo=i(ae),nh=n(ae,"LI",{});var pCe=s(nh);xte=n(pCe,"STRONG",{});var cXr=s(xte);glo=r(cXr,"speech_to_text"),cXr.forEach(t),hlo=r(pCe," \u2014 "),jB=n(pCe,"A",{href:!0});var fXr=s(jB);plo=r(fXr,"Speech2TextFeatureExtractor"),fXr.forEach(t),ulo=r(pCe," (Speech2Text model)"),pCe.forEach(t),_lo=i(ae),sh=n(ae,"LI",{});var uCe=s(sh);$te=n(uCe,"STRONG",{});var mXr=s($te);blo=r(mXr,"swin"),mXr.forEach(t),vlo=r(uCe," \u2014 "),DB=n(uCe,"A",{href:!0});var gXr=s(DB);Flo=r(gXr,"ViTFeatureExtractor"),gXr.forEach(t),Tlo=r(uCe," (Swin model)"),uCe.forEach(t),Mlo=i(ae),lh=n(ae,"LI",{});var _Ce=s(lh);kte=n(_Ce,"STRONG",{});var hXr=s(kte);Elo=r(hXr,"van"),hXr.forEach(t),Clo=r(_Ce," \u2014 "),GB=n(_Ce,"A",{href:!0});var pXr=s(GB);wlo=r(pXr,"ConvNextFeatureExtractor"),pXr.forEach(t),Alo=r(_Ce," (VAN model)"),_Ce.forEach(t),ylo=i(ae),ih=n(ae,"LI",{});var bCe=s(ih);Ste=n(bCe,"STRONG",{});var uXr=s(Ste);Llo=r(uXr,"vit"),uXr.forEach(t),xlo=r(bCe," \u2014 "),OB=n(bCe,"A",{href:!0});var _Xr=s(OB);$lo=r(_Xr,"ViTFeatureExtractor"),_Xr.forEach(t),klo=r(bCe," (ViT model)"),bCe.forEach(t),Slo=i(ae),dh=n(ae,"LI",{});var vCe=s(dh);Rte=n(vCe,"STRONG",{});var bXr=s(Rte);Rlo=r(bXr,"vit_mae"),bXr.forEach(t),Blo=r(vCe," \u2014 "),VB=n(vCe,"A",{href:!0});var vXr=s(VB);Plo=r(vXr,"ViTFeatureExtractor"),vXr.forEach(t),Ilo=r(vCe," (ViTMAE model)"),vCe.forEach(t),qlo=i(ae),ch=n(ae,"LI",{});var FCe=s(ch);Bte=n(FCe,"STRONG",{});var FXr=s(Bte);Nlo=r(FXr,"wav2vec2"),FXr.forEach(t),jlo=r(FCe," \u2014 "),XB=n(FCe,"A",{href:!0});var TXr=s(XB);Dlo=r(TXr,"Wav2Vec2FeatureExtractor"),TXr.forEach(t),Glo=r(FCe," (Wav2Vec2 model)"),FCe.forEach(t),Olo=i(ae),fh=n(ae,"LI",{});var TCe=s(fh);Pte=n(TCe,"STRONG",{});var MXr=s(Pte);Vlo=r(MXr,"yolos"),MXr.forEach(t),Xlo=r(TCe," \u2014 "),zB=n(TCe,"A",{href:!0});var EXr=s(zB);zlo=r(EXr,"YolosFeatureExtractor"),EXr.forEach(t),Qlo=r(TCe," (YOLOS model)"),TCe.forEach(t),ae.forEach(t),Wlo=i(Ht),T(mh.$$.fragment,Ht),Hlo=i(Ht),T(gh.$$.fragment,Ht),Ht.forEach(t),Ulo=i(Rs),hh=n(Rs,"DIV",{class:!0});var DIe=s(hh);T(WA.$$.fragment,DIe),Jlo=i(DIe),Ite=n(DIe,"P",{});var CXr=s(Ite);Ylo=r(CXr,"Register a new feature extractor for this class."),CXr.forEach(t),DIe.forEach(t),Rs.forEach(t),GBe=i(f),gi=n(f,"H2",{class:!0});var GIe=s(gi);ph=n(GIe,"A",{id:!0,class:!0,href:!0});var wXr=s(ph);qte=n(wXr,"SPAN",{});var AXr=s(qte);T(HA.$$.fragment,AXr),AXr.forEach(t),wXr.forEach(t),Klo=i(GIe),Nte=n(GIe,"SPAN",{});var yXr=s(Nte);Zlo=r(yXr,"AutoProcessor"),yXr.forEach(t),GIe.forEach(t),OBe=i(f),yo=n(f,"DIV",{class:!0});var Bs=s(yo);T(UA.$$.fragment,Bs),eio=i(Bs),JA=n(Bs,"P",{});var OIe=s(JA);oio=r(OIe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),QB=n(OIe,"A",{href:!0});var LXr=s(QB);rio=r(LXr,"AutoProcessor.from_pretrained()"),LXr.forEach(t),tio=r(OIe," class method."),OIe.forEach(t),aio=i(Bs),YA=n(Bs,"P",{});var VIe=s(YA);nio=r(VIe,"This class cannot be instantiated directly using "),jte=n(VIe,"CODE",{});var xXr=s(jte);sio=r(xXr,"__init__()"),xXr.forEach(t),lio=r(VIe," (throws an error)."),VIe.forEach(t),iio=i(Bs),We=n(Bs,"DIV",{class:!0});var Ut=s(We);T(KA.$$.fragment,Ut),dio=i(Ut),Dte=n(Ut,"P",{});var $Xr=s(Dte);cio=r($Xr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),$Xr.forEach(t),fio=i(Ut),hi=n(Ut,"P",{});var MY=s(hi);mio=r(MY,"The processor class to instantiate is selected based on the "),Gte=n(MY,"CODE",{});var kXr=s(Gte);gio=r(kXr,"model_type"),kXr.forEach(t),hio=r(MY,` property of the config object (either
passed as an argument or loaded from `),Ote=n(MY,"CODE",{});var SXr=s(Ote);pio=r(SXr,"pretrained_model_name_or_path"),SXr.forEach(t),uio=r(MY," if possible):"),MY.forEach(t),_io=i(Ut),be=n(Ut,"UL",{});var Fe=s(be);uh=n(Fe,"LI",{});var MCe=s(uh);Vte=n(MCe,"STRONG",{});var RXr=s(Vte);bio=r(RXr,"clip"),RXr.forEach(t),vio=r(MCe," \u2014 "),WB=n(MCe,"A",{href:!0});var BXr=s(WB);Fio=r(BXr,"CLIPProcessor"),BXr.forEach(t),Tio=r(MCe," (CLIP model)"),MCe.forEach(t),Mio=i(Fe),_h=n(Fe,"LI",{});var ECe=s(_h);Xte=n(ECe,"STRONG",{});var PXr=s(Xte);Eio=r(PXr,"layoutlmv2"),PXr.forEach(t),Cio=r(ECe," \u2014 "),HB=n(ECe,"A",{href:!0});var IXr=s(HB);wio=r(IXr,"LayoutLMv2Processor"),IXr.forEach(t),Aio=r(ECe," (LayoutLMv2 model)"),ECe.forEach(t),yio=i(Fe),bh=n(Fe,"LI",{});var CCe=s(bh);zte=n(CCe,"STRONG",{});var qXr=s(zte);Lio=r(qXr,"layoutxlm"),qXr.forEach(t),xio=r(CCe," \u2014 "),UB=n(CCe,"A",{href:!0});var NXr=s(UB);$io=r(NXr,"LayoutXLMProcessor"),NXr.forEach(t),kio=r(CCe," (LayoutXLM model)"),CCe.forEach(t),Sio=i(Fe),vh=n(Fe,"LI",{});var wCe=s(vh);Qte=n(wCe,"STRONG",{});var jXr=s(Qte);Rio=r(jXr,"sew"),jXr.forEach(t),Bio=r(wCe," \u2014 "),JB=n(wCe,"A",{href:!0});var DXr=s(JB);Pio=r(DXr,"Wav2Vec2Processor"),DXr.forEach(t),Iio=r(wCe," (SEW model)"),wCe.forEach(t),qio=i(Fe),Fh=n(Fe,"LI",{});var ACe=s(Fh);Wte=n(ACe,"STRONG",{});var GXr=s(Wte);Nio=r(GXr,"sew-d"),GXr.forEach(t),jio=r(ACe," \u2014 "),YB=n(ACe,"A",{href:!0});var OXr=s(YB);Dio=r(OXr,"Wav2Vec2Processor"),OXr.forEach(t),Gio=r(ACe," (SEW-D model)"),ACe.forEach(t),Oio=i(Fe),Th=n(Fe,"LI",{});var yCe=s(Th);Hte=n(yCe,"STRONG",{});var VXr=s(Hte);Vio=r(VXr,"speech_to_text"),VXr.forEach(t),Xio=r(yCe," \u2014 "),KB=n(yCe,"A",{href:!0});var XXr=s(KB);zio=r(XXr,"Speech2TextProcessor"),XXr.forEach(t),Qio=r(yCe," (Speech2Text model)"),yCe.forEach(t),Wio=i(Fe),Mh=n(Fe,"LI",{});var LCe=s(Mh);Ute=n(LCe,"STRONG",{});var zXr=s(Ute);Hio=r(zXr,"speech_to_text_2"),zXr.forEach(t),Uio=r(LCe," \u2014 "),ZB=n(LCe,"A",{href:!0});var QXr=s(ZB);Jio=r(QXr,"Speech2Text2Processor"),QXr.forEach(t),Yio=r(LCe," (Speech2Text2 model)"),LCe.forEach(t),Kio=i(Fe),Eh=n(Fe,"LI",{});var xCe=s(Eh);Jte=n(xCe,"STRONG",{});var WXr=s(Jte);Zio=r(WXr,"trocr"),WXr.forEach(t),edo=r(xCe," \u2014 "),eP=n(xCe,"A",{href:!0});var HXr=s(eP);odo=r(HXr,"TrOCRProcessor"),HXr.forEach(t),rdo=r(xCe," (TrOCR model)"),xCe.forEach(t),tdo=i(Fe),Ch=n(Fe,"LI",{});var $Ce=s(Ch);Yte=n($Ce,"STRONG",{});var UXr=s(Yte);ado=r(UXr,"unispeech"),UXr.forEach(t),ndo=r($Ce," \u2014 "),oP=n($Ce,"A",{href:!0});var JXr=s(oP);sdo=r(JXr,"Wav2Vec2Processor"),JXr.forEach(t),ldo=r($Ce," (UniSpeech model)"),$Ce.forEach(t),ido=i(Fe),wh=n(Fe,"LI",{});var kCe=s(wh);Kte=n(kCe,"STRONG",{});var YXr=s(Kte);ddo=r(YXr,"unispeech-sat"),YXr.forEach(t),cdo=r(kCe," \u2014 "),rP=n(kCe,"A",{href:!0});var KXr=s(rP);fdo=r(KXr,"Wav2Vec2Processor"),KXr.forEach(t),mdo=r(kCe," (UniSpeechSat model)"),kCe.forEach(t),gdo=i(Fe),Ah=n(Fe,"LI",{});var SCe=s(Ah);Zte=n(SCe,"STRONG",{});var ZXr=s(Zte);hdo=r(ZXr,"vilt"),ZXr.forEach(t),pdo=r(SCe," \u2014 "),tP=n(SCe,"A",{href:!0});var ezr=s(tP);udo=r(ezr,"ViltProcessor"),ezr.forEach(t),_do=r(SCe," (ViLT model)"),SCe.forEach(t),bdo=i(Fe),yh=n(Fe,"LI",{});var RCe=s(yh);eae=n(RCe,"STRONG",{});var ozr=s(eae);vdo=r(ozr,"vision-text-dual-encoder"),ozr.forEach(t),Fdo=r(RCe," \u2014 "),aP=n(RCe,"A",{href:!0});var rzr=s(aP);Tdo=r(rzr,"VisionTextDualEncoderProcessor"),rzr.forEach(t),Mdo=r(RCe," (VisionTextDualEncoder model)"),RCe.forEach(t),Edo=i(Fe),Lh=n(Fe,"LI",{});var BCe=s(Lh);oae=n(BCe,"STRONG",{});var tzr=s(oae);Cdo=r(tzr,"wav2vec2"),tzr.forEach(t),wdo=r(BCe," \u2014 "),nP=n(BCe,"A",{href:!0});var azr=s(nP);Ado=r(azr,"Wav2Vec2Processor"),azr.forEach(t),ydo=r(BCe," (Wav2Vec2 model)"),BCe.forEach(t),Ldo=i(Fe),xh=n(Fe,"LI",{});var PCe=s(xh);rae=n(PCe,"STRONG",{});var nzr=s(rae);xdo=r(nzr,"wavlm"),nzr.forEach(t),$do=r(PCe," \u2014 "),sP=n(PCe,"A",{href:!0});var szr=s(sP);kdo=r(szr,"Wav2Vec2Processor"),szr.forEach(t),Sdo=r(PCe," (WavLM model)"),PCe.forEach(t),Fe.forEach(t),Rdo=i(Ut),T($h.$$.fragment,Ut),Bdo=i(Ut),T(kh.$$.fragment,Ut),Ut.forEach(t),Pdo=i(Bs),Sh=n(Bs,"DIV",{class:!0});var XIe=s(Sh);T(ZA.$$.fragment,XIe),Ido=i(XIe),tae=n(XIe,"P",{});var lzr=s(tae);qdo=r(lzr,"Register a new processor for this class."),lzr.forEach(t),XIe.forEach(t),Bs.forEach(t),VBe=i(f),pi=n(f,"H2",{class:!0});var zIe=s(pi);Rh=n(zIe,"A",{id:!0,class:!0,href:!0});var izr=s(Rh);aae=n(izr,"SPAN",{});var dzr=s(aae);T(e0.$$.fragment,dzr),dzr.forEach(t),izr.forEach(t),Ndo=i(zIe),nae=n(zIe,"SPAN",{});var czr=s(nae);jdo=r(czr,"AutoModel"),czr.forEach(t),zIe.forEach(t),XBe=i(f),Lo=n(f,"DIV",{class:!0});var Ps=s(Lo);T(o0.$$.fragment,Ps),Ddo=i(Ps),ui=n(Ps,"P",{});var EY=s(ui);Gdo=r(EY,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),lP=n(EY,"A",{href:!0});var fzr=s(lP);Odo=r(fzr,"from_pretrained()"),fzr.forEach(t),Vdo=r(EY," class method or the "),iP=n(EY,"A",{href:!0});var mzr=s(iP);Xdo=r(mzr,"from_config()"),mzr.forEach(t),zdo=r(EY,` class
method.`),EY.forEach(t),Qdo=i(Ps),r0=n(Ps,"P",{});var QIe=s(r0);Wdo=r(QIe,"This class cannot be instantiated directly using "),sae=n(QIe,"CODE",{});var gzr=s(sae);Hdo=r(gzr,"__init__()"),gzr.forEach(t),Udo=r(QIe," (throws an error)."),QIe.forEach(t),Jdo=i(Ps),Zr=n(Ps,"DIV",{class:!0});var R3=s(Zr);T(t0.$$.fragment,R3),Ydo=i(R3),lae=n(R3,"P",{});var hzr=s(lae);Kdo=r(hzr,"Instantiates one of the base model classes of the library from a configuration."),hzr.forEach(t),Zdo=i(R3),_i=n(R3,"P",{});var CY=s(_i);eco=r(CY,`Note:
Loading a model from its configuration file does `),iae=n(CY,"STRONG",{});var pzr=s(iae);oco=r(pzr,"not"),pzr.forEach(t),rco=r(CY,` load the model weights. It only affects the
model\u2019s configuration. Use `),dP=n(CY,"A",{href:!0});var uzr=s(dP);tco=r(uzr,"from_pretrained()"),uzr.forEach(t),aco=r(CY," to load the model weights."),CY.forEach(t),nco=i(R3),T(Bh.$$.fragment,R3),R3.forEach(t),sco=i(Ps),He=n(Ps,"DIV",{class:!0});var Jt=s(He);T(a0.$$.fragment,Jt),lco=i(Jt),dae=n(Jt,"P",{});var _zr=s(dae);ico=r(_zr,"Instantiate one of the base model classes of the library from a pretrained model."),_zr.forEach(t),dco=i(Jt),Ea=n(Jt,"P",{});var B3=s(Ea);cco=r(B3,"The model class to instantiate is selected based on the "),cae=n(B3,"CODE",{});var bzr=s(cae);fco=r(bzr,"model_type"),bzr.forEach(t),mco=r(B3,` property of the config object (either
passed as an argument or loaded from `),fae=n(B3,"CODE",{});var vzr=s(fae);gco=r(vzr,"pretrained_model_name_or_path"),vzr.forEach(t),hco=r(B3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mae=n(B3,"CODE",{});var Fzr=s(mae);pco=r(Fzr,"pretrained_model_name_or_path"),Fzr.forEach(t),uco=r(B3,":"),B3.forEach(t),_co=i(Jt),x=n(Jt,"UL",{});var $=s(x);Ph=n($,"LI",{});var ICe=s(Ph);gae=n(ICe,"STRONG",{});var Tzr=s(gae);bco=r(Tzr,"albert"),Tzr.forEach(t),vco=r(ICe," \u2014 "),cP=n(ICe,"A",{href:!0});var Mzr=s(cP);Fco=r(Mzr,"AlbertModel"),Mzr.forEach(t),Tco=r(ICe," (ALBERT model)"),ICe.forEach(t),Mco=i($),Ih=n($,"LI",{});var qCe=s(Ih);hae=n(qCe,"STRONG",{});var Ezr=s(hae);Eco=r(Ezr,"bart"),Ezr.forEach(t),Cco=r(qCe," \u2014 "),fP=n(qCe,"A",{href:!0});var Czr=s(fP);wco=r(Czr,"BartModel"),Czr.forEach(t),Aco=r(qCe," (BART model)"),qCe.forEach(t),yco=i($),qh=n($,"LI",{});var NCe=s(qh);pae=n(NCe,"STRONG",{});var wzr=s(pae);Lco=r(wzr,"beit"),wzr.forEach(t),xco=r(NCe," \u2014 "),mP=n(NCe,"A",{href:!0});var Azr=s(mP);$co=r(Azr,"BeitModel"),Azr.forEach(t),kco=r(NCe," (BEiT model)"),NCe.forEach(t),Sco=i($),Nh=n($,"LI",{});var jCe=s(Nh);uae=n(jCe,"STRONG",{});var yzr=s(uae);Rco=r(yzr,"bert"),yzr.forEach(t),Bco=r(jCe," \u2014 "),gP=n(jCe,"A",{href:!0});var Lzr=s(gP);Pco=r(Lzr,"BertModel"),Lzr.forEach(t),Ico=r(jCe," (BERT model)"),jCe.forEach(t),qco=i($),jh=n($,"LI",{});var DCe=s(jh);_ae=n(DCe,"STRONG",{});var xzr=s(_ae);Nco=r(xzr,"bert-generation"),xzr.forEach(t),jco=r(DCe," \u2014 "),hP=n(DCe,"A",{href:!0});var $zr=s(hP);Dco=r($zr,"BertGenerationEncoder"),$zr.forEach(t),Gco=r(DCe," (Bert Generation model)"),DCe.forEach(t),Oco=i($),Dh=n($,"LI",{});var GCe=s(Dh);bae=n(GCe,"STRONG",{});var kzr=s(bae);Vco=r(kzr,"big_bird"),kzr.forEach(t),Xco=r(GCe," \u2014 "),pP=n(GCe,"A",{href:!0});var Szr=s(pP);zco=r(Szr,"BigBirdModel"),Szr.forEach(t),Qco=r(GCe," (BigBird model)"),GCe.forEach(t),Wco=i($),Gh=n($,"LI",{});var OCe=s(Gh);vae=n(OCe,"STRONG",{});var Rzr=s(vae);Hco=r(Rzr,"bigbird_pegasus"),Rzr.forEach(t),Uco=r(OCe," \u2014 "),uP=n(OCe,"A",{href:!0});var Bzr=s(uP);Jco=r(Bzr,"BigBirdPegasusModel"),Bzr.forEach(t),Yco=r(OCe," (BigBirdPegasus model)"),OCe.forEach(t),Kco=i($),Oh=n($,"LI",{});var VCe=s(Oh);Fae=n(VCe,"STRONG",{});var Pzr=s(Fae);Zco=r(Pzr,"blenderbot"),Pzr.forEach(t),efo=r(VCe," \u2014 "),_P=n(VCe,"A",{href:!0});var Izr=s(_P);ofo=r(Izr,"BlenderbotModel"),Izr.forEach(t),rfo=r(VCe," (Blenderbot model)"),VCe.forEach(t),tfo=i($),Vh=n($,"LI",{});var XCe=s(Vh);Tae=n(XCe,"STRONG",{});var qzr=s(Tae);afo=r(qzr,"blenderbot-small"),qzr.forEach(t),nfo=r(XCe," \u2014 "),bP=n(XCe,"A",{href:!0});var Nzr=s(bP);sfo=r(Nzr,"BlenderbotSmallModel"),Nzr.forEach(t),lfo=r(XCe," (BlenderbotSmall model)"),XCe.forEach(t),ifo=i($),Xh=n($,"LI",{});var zCe=s(Xh);Mae=n(zCe,"STRONG",{});var jzr=s(Mae);dfo=r(jzr,"camembert"),jzr.forEach(t),cfo=r(zCe," \u2014 "),vP=n(zCe,"A",{href:!0});var Dzr=s(vP);ffo=r(Dzr,"CamembertModel"),Dzr.forEach(t),mfo=r(zCe," (CamemBERT model)"),zCe.forEach(t),gfo=i($),zh=n($,"LI",{});var QCe=s(zh);Eae=n(QCe,"STRONG",{});var Gzr=s(Eae);hfo=r(Gzr,"canine"),Gzr.forEach(t),pfo=r(QCe," \u2014 "),FP=n(QCe,"A",{href:!0});var Ozr=s(FP);ufo=r(Ozr,"CanineModel"),Ozr.forEach(t),_fo=r(QCe," (Canine model)"),QCe.forEach(t),bfo=i($),Qh=n($,"LI",{});var WCe=s(Qh);Cae=n(WCe,"STRONG",{});var Vzr=s(Cae);vfo=r(Vzr,"clip"),Vzr.forEach(t),Ffo=r(WCe," \u2014 "),TP=n(WCe,"A",{href:!0});var Xzr=s(TP);Tfo=r(Xzr,"CLIPModel"),Xzr.forEach(t),Mfo=r(WCe," (CLIP model)"),WCe.forEach(t),Efo=i($),Wh=n($,"LI",{});var HCe=s(Wh);wae=n(HCe,"STRONG",{});var zzr=s(wae);Cfo=r(zzr,"convbert"),zzr.forEach(t),wfo=r(HCe," \u2014 "),MP=n(HCe,"A",{href:!0});var Qzr=s(MP);Afo=r(Qzr,"ConvBertModel"),Qzr.forEach(t),yfo=r(HCe," (ConvBERT model)"),HCe.forEach(t),Lfo=i($),Hh=n($,"LI",{});var UCe=s(Hh);Aae=n(UCe,"STRONG",{});var Wzr=s(Aae);xfo=r(Wzr,"convnext"),Wzr.forEach(t),$fo=r(UCe," \u2014 "),EP=n(UCe,"A",{href:!0});var Hzr=s(EP);kfo=r(Hzr,"ConvNextModel"),Hzr.forEach(t),Sfo=r(UCe," (ConvNext model)"),UCe.forEach(t),Rfo=i($),Uh=n($,"LI",{});var JCe=s(Uh);yae=n(JCe,"STRONG",{});var Uzr=s(yae);Bfo=r(Uzr,"ctrl"),Uzr.forEach(t),Pfo=r(JCe," \u2014 "),CP=n(JCe,"A",{href:!0});var Jzr=s(CP);Ifo=r(Jzr,"CTRLModel"),Jzr.forEach(t),qfo=r(JCe," (CTRL model)"),JCe.forEach(t),Nfo=i($),Jh=n($,"LI",{});var YCe=s(Jh);Lae=n(YCe,"STRONG",{});var Yzr=s(Lae);jfo=r(Yzr,"cvt"),Yzr.forEach(t),Dfo=r(YCe," \u2014 "),wP=n(YCe,"A",{href:!0});var Kzr=s(wP);Gfo=r(Kzr,"CvtModel"),Kzr.forEach(t),Ofo=r(YCe," (Cvt model)"),YCe.forEach(t),Vfo=i($),Yh=n($,"LI",{});var KCe=s(Yh);xae=n(KCe,"STRONG",{});var Zzr=s(xae);Xfo=r(Zzr,"data2vec-audio"),Zzr.forEach(t),zfo=r(KCe," \u2014 "),AP=n(KCe,"A",{href:!0});var eQr=s(AP);Qfo=r(eQr,"Data2VecAudioModel"),eQr.forEach(t),Wfo=r(KCe," (Data2VecAudio model)"),KCe.forEach(t),Hfo=i($),Kh=n($,"LI",{});var ZCe=s(Kh);$ae=n(ZCe,"STRONG",{});var oQr=s($ae);Ufo=r(oQr,"data2vec-text"),oQr.forEach(t),Jfo=r(ZCe," \u2014 "),yP=n(ZCe,"A",{href:!0});var rQr=s(yP);Yfo=r(rQr,"Data2VecTextModel"),rQr.forEach(t),Kfo=r(ZCe," (Data2VecText model)"),ZCe.forEach(t),Zfo=i($),Zh=n($,"LI",{});var e3e=s(Zh);kae=n(e3e,"STRONG",{});var tQr=s(kae);emo=r(tQr,"data2vec-vision"),tQr.forEach(t),omo=r(e3e," \u2014 "),LP=n(e3e,"A",{href:!0});var aQr=s(LP);rmo=r(aQr,"Data2VecVisionModel"),aQr.forEach(t),tmo=r(e3e," (Data2VecVision model)"),e3e.forEach(t),amo=i($),ep=n($,"LI",{});var o3e=s(ep);Sae=n(o3e,"STRONG",{});var nQr=s(Sae);nmo=r(nQr,"deberta"),nQr.forEach(t),smo=r(o3e," \u2014 "),xP=n(o3e,"A",{href:!0});var sQr=s(xP);lmo=r(sQr,"DebertaModel"),sQr.forEach(t),imo=r(o3e," (DeBERTa model)"),o3e.forEach(t),dmo=i($),op=n($,"LI",{});var r3e=s(op);Rae=n(r3e,"STRONG",{});var lQr=s(Rae);cmo=r(lQr,"deberta-v2"),lQr.forEach(t),fmo=r(r3e," \u2014 "),$P=n(r3e,"A",{href:!0});var iQr=s($P);mmo=r(iQr,"DebertaV2Model"),iQr.forEach(t),gmo=r(r3e," (DeBERTa-v2 model)"),r3e.forEach(t),hmo=i($),rp=n($,"LI",{});var t3e=s(rp);Bae=n(t3e,"STRONG",{});var dQr=s(Bae);pmo=r(dQr,"decision_transformer"),dQr.forEach(t),umo=r(t3e," \u2014 "),kP=n(t3e,"A",{href:!0});var cQr=s(kP);_mo=r(cQr,"DecisionTransformerModel"),cQr.forEach(t),bmo=r(t3e," (Decision Transformer model)"),t3e.forEach(t),vmo=i($),tp=n($,"LI",{});var a3e=s(tp);Pae=n(a3e,"STRONG",{});var fQr=s(Pae);Fmo=r(fQr,"deit"),fQr.forEach(t),Tmo=r(a3e," \u2014 "),SP=n(a3e,"A",{href:!0});var mQr=s(SP);Mmo=r(mQr,"DeiTModel"),mQr.forEach(t),Emo=r(a3e," (DeiT model)"),a3e.forEach(t),Cmo=i($),ap=n($,"LI",{});var n3e=s(ap);Iae=n(n3e,"STRONG",{});var gQr=s(Iae);wmo=r(gQr,"detr"),gQr.forEach(t),Amo=r(n3e," \u2014 "),RP=n(n3e,"A",{href:!0});var hQr=s(RP);ymo=r(hQr,"DetrModel"),hQr.forEach(t),Lmo=r(n3e," (DETR model)"),n3e.forEach(t),xmo=i($),np=n($,"LI",{});var s3e=s(np);qae=n(s3e,"STRONG",{});var pQr=s(qae);$mo=r(pQr,"distilbert"),pQr.forEach(t),kmo=r(s3e," \u2014 "),BP=n(s3e,"A",{href:!0});var uQr=s(BP);Smo=r(uQr,"DistilBertModel"),uQr.forEach(t),Rmo=r(s3e," (DistilBERT model)"),s3e.forEach(t),Bmo=i($),sp=n($,"LI",{});var l3e=s(sp);Nae=n(l3e,"STRONG",{});var _Qr=s(Nae);Pmo=r(_Qr,"dpr"),_Qr.forEach(t),Imo=r(l3e," \u2014 "),PP=n(l3e,"A",{href:!0});var bQr=s(PP);qmo=r(bQr,"DPRQuestionEncoder"),bQr.forEach(t),Nmo=r(l3e," (DPR model)"),l3e.forEach(t),jmo=i($),lp=n($,"LI",{});var i3e=s(lp);jae=n(i3e,"STRONG",{});var vQr=s(jae);Dmo=r(vQr,"dpt"),vQr.forEach(t),Gmo=r(i3e," \u2014 "),IP=n(i3e,"A",{href:!0});var FQr=s(IP);Omo=r(FQr,"DPTModel"),FQr.forEach(t),Vmo=r(i3e," (DPT model)"),i3e.forEach(t),Xmo=i($),ip=n($,"LI",{});var d3e=s(ip);Dae=n(d3e,"STRONG",{});var TQr=s(Dae);zmo=r(TQr,"electra"),TQr.forEach(t),Qmo=r(d3e," \u2014 "),qP=n(d3e,"A",{href:!0});var MQr=s(qP);Wmo=r(MQr,"ElectraModel"),MQr.forEach(t),Hmo=r(d3e," (ELECTRA model)"),d3e.forEach(t),Umo=i($),dp=n($,"LI",{});var c3e=s(dp);Gae=n(c3e,"STRONG",{});var EQr=s(Gae);Jmo=r(EQr,"flaubert"),EQr.forEach(t),Ymo=r(c3e," \u2014 "),NP=n(c3e,"A",{href:!0});var CQr=s(NP);Kmo=r(CQr,"FlaubertModel"),CQr.forEach(t),Zmo=r(c3e," (FlauBERT model)"),c3e.forEach(t),ego=i($),cp=n($,"LI",{});var f3e=s(cp);Oae=n(f3e,"STRONG",{});var wQr=s(Oae);ogo=r(wQr,"fnet"),wQr.forEach(t),rgo=r(f3e," \u2014 "),jP=n(f3e,"A",{href:!0});var AQr=s(jP);tgo=r(AQr,"FNetModel"),AQr.forEach(t),ago=r(f3e," (FNet model)"),f3e.forEach(t),ngo=i($),fp=n($,"LI",{});var m3e=s(fp);Vae=n(m3e,"STRONG",{});var yQr=s(Vae);sgo=r(yQr,"fsmt"),yQr.forEach(t),lgo=r(m3e," \u2014 "),DP=n(m3e,"A",{href:!0});var LQr=s(DP);igo=r(LQr,"FSMTModel"),LQr.forEach(t),dgo=r(m3e," (FairSeq Machine-Translation model)"),m3e.forEach(t),cgo=i($),Ls=n($,"LI",{});var I9=s(Ls);Xae=n(I9,"STRONG",{});var xQr=s(Xae);fgo=r(xQr,"funnel"),xQr.forEach(t),mgo=r(I9," \u2014 "),GP=n(I9,"A",{href:!0});var $Qr=s(GP);ggo=r($Qr,"FunnelModel"),$Qr.forEach(t),hgo=r(I9," or "),OP=n(I9,"A",{href:!0});var kQr=s(OP);pgo=r(kQr,"FunnelBaseModel"),kQr.forEach(t),ugo=r(I9," (Funnel Transformer model)"),I9.forEach(t),_go=i($),mp=n($,"LI",{});var g3e=s(mp);zae=n(g3e,"STRONG",{});var SQr=s(zae);bgo=r(SQr,"glpn"),SQr.forEach(t),vgo=r(g3e," \u2014 "),VP=n(g3e,"A",{href:!0});var RQr=s(VP);Fgo=r(RQr,"GLPNModel"),RQr.forEach(t),Tgo=r(g3e," (GLPN model)"),g3e.forEach(t),Mgo=i($),gp=n($,"LI",{});var h3e=s(gp);Qae=n(h3e,"STRONG",{});var BQr=s(Qae);Ego=r(BQr,"gpt2"),BQr.forEach(t),Cgo=r(h3e," \u2014 "),XP=n(h3e,"A",{href:!0});var PQr=s(XP);wgo=r(PQr,"GPT2Model"),PQr.forEach(t),Ago=r(h3e," (OpenAI GPT-2 model)"),h3e.forEach(t),ygo=i($),hp=n($,"LI",{});var p3e=s(hp);Wae=n(p3e,"STRONG",{});var IQr=s(Wae);Lgo=r(IQr,"gpt_neo"),IQr.forEach(t),xgo=r(p3e," \u2014 "),zP=n(p3e,"A",{href:!0});var qQr=s(zP);$go=r(qQr,"GPTNeoModel"),qQr.forEach(t),kgo=r(p3e," (GPT Neo model)"),p3e.forEach(t),Sgo=i($),pp=n($,"LI",{});var u3e=s(pp);Hae=n(u3e,"STRONG",{});var NQr=s(Hae);Rgo=r(NQr,"gptj"),NQr.forEach(t),Bgo=r(u3e," \u2014 "),QP=n(u3e,"A",{href:!0});var jQr=s(QP);Pgo=r(jQr,"GPTJModel"),jQr.forEach(t),Igo=r(u3e," (GPT-J model)"),u3e.forEach(t),qgo=i($),up=n($,"LI",{});var _3e=s(up);Uae=n(_3e,"STRONG",{});var DQr=s(Uae);Ngo=r(DQr,"hubert"),DQr.forEach(t),jgo=r(_3e," \u2014 "),WP=n(_3e,"A",{href:!0});var GQr=s(WP);Dgo=r(GQr,"HubertModel"),GQr.forEach(t),Ggo=r(_3e," (Hubert model)"),_3e.forEach(t),Ogo=i($),_p=n($,"LI",{});var b3e=s(_p);Jae=n(b3e,"STRONG",{});var OQr=s(Jae);Vgo=r(OQr,"ibert"),OQr.forEach(t),Xgo=r(b3e," \u2014 "),HP=n(b3e,"A",{href:!0});var VQr=s(HP);zgo=r(VQr,"IBertModel"),VQr.forEach(t),Qgo=r(b3e," (I-BERT model)"),b3e.forEach(t),Wgo=i($),bp=n($,"LI",{});var v3e=s(bp);Yae=n(v3e,"STRONG",{});var XQr=s(Yae);Hgo=r(XQr,"imagegpt"),XQr.forEach(t),Ugo=r(v3e," \u2014 "),UP=n(v3e,"A",{href:!0});var zQr=s(UP);Jgo=r(zQr,"ImageGPTModel"),zQr.forEach(t),Ygo=r(v3e," (ImageGPT model)"),v3e.forEach(t),Kgo=i($),vp=n($,"LI",{});var F3e=s(vp);Kae=n(F3e,"STRONG",{});var QQr=s(Kae);Zgo=r(QQr,"layoutlm"),QQr.forEach(t),eho=r(F3e," \u2014 "),JP=n(F3e,"A",{href:!0});var WQr=s(JP);oho=r(WQr,"LayoutLMModel"),WQr.forEach(t),rho=r(F3e," (LayoutLM model)"),F3e.forEach(t),tho=i($),Fp=n($,"LI",{});var T3e=s(Fp);Zae=n(T3e,"STRONG",{});var HQr=s(Zae);aho=r(HQr,"layoutlmv2"),HQr.forEach(t),nho=r(T3e," \u2014 "),YP=n(T3e,"A",{href:!0});var UQr=s(YP);sho=r(UQr,"LayoutLMv2Model"),UQr.forEach(t),lho=r(T3e," (LayoutLMv2 model)"),T3e.forEach(t),iho=i($),Tp=n($,"LI",{});var M3e=s(Tp);ene=n(M3e,"STRONG",{});var JQr=s(ene);dho=r(JQr,"led"),JQr.forEach(t),cho=r(M3e," \u2014 "),KP=n(M3e,"A",{href:!0});var YQr=s(KP);fho=r(YQr,"LEDModel"),YQr.forEach(t),mho=r(M3e," (LED model)"),M3e.forEach(t),gho=i($),Mp=n($,"LI",{});var E3e=s(Mp);one=n(E3e,"STRONG",{});var KQr=s(one);hho=r(KQr,"longformer"),KQr.forEach(t),pho=r(E3e," \u2014 "),ZP=n(E3e,"A",{href:!0});var ZQr=s(ZP);uho=r(ZQr,"LongformerModel"),ZQr.forEach(t),_ho=r(E3e," (Longformer model)"),E3e.forEach(t),bho=i($),Ep=n($,"LI",{});var C3e=s(Ep);rne=n(C3e,"STRONG",{});var eWr=s(rne);vho=r(eWr,"luke"),eWr.forEach(t),Fho=r(C3e," \u2014 "),eI=n(C3e,"A",{href:!0});var oWr=s(eI);Tho=r(oWr,"LukeModel"),oWr.forEach(t),Mho=r(C3e," (LUKE model)"),C3e.forEach(t),Eho=i($),Cp=n($,"LI",{});var w3e=s(Cp);tne=n(w3e,"STRONG",{});var rWr=s(tne);Cho=r(rWr,"lxmert"),rWr.forEach(t),who=r(w3e," \u2014 "),oI=n(w3e,"A",{href:!0});var tWr=s(oI);Aho=r(tWr,"LxmertModel"),tWr.forEach(t),yho=r(w3e," (LXMERT model)"),w3e.forEach(t),Lho=i($),wp=n($,"LI",{});var A3e=s(wp);ane=n(A3e,"STRONG",{});var aWr=s(ane);xho=r(aWr,"m2m_100"),aWr.forEach(t),$ho=r(A3e," \u2014 "),rI=n(A3e,"A",{href:!0});var nWr=s(rI);kho=r(nWr,"M2M100Model"),nWr.forEach(t),Sho=r(A3e," (M2M100 model)"),A3e.forEach(t),Rho=i($),Ap=n($,"LI",{});var y3e=s(Ap);nne=n(y3e,"STRONG",{});var sWr=s(nne);Bho=r(sWr,"marian"),sWr.forEach(t),Pho=r(y3e," \u2014 "),tI=n(y3e,"A",{href:!0});var lWr=s(tI);Iho=r(lWr,"MarianModel"),lWr.forEach(t),qho=r(y3e," (Marian model)"),y3e.forEach(t),Nho=i($),yp=n($,"LI",{});var L3e=s(yp);sne=n(L3e,"STRONG",{});var iWr=s(sne);jho=r(iWr,"maskformer"),iWr.forEach(t),Dho=r(L3e," \u2014 "),aI=n(L3e,"A",{href:!0});var dWr=s(aI);Gho=r(dWr,"MaskFormerModel"),dWr.forEach(t),Oho=r(L3e," (MaskFormer model)"),L3e.forEach(t),Vho=i($),Lp=n($,"LI",{});var x3e=s(Lp);lne=n(x3e,"STRONG",{});var cWr=s(lne);Xho=r(cWr,"mbart"),cWr.forEach(t),zho=r(x3e," \u2014 "),nI=n(x3e,"A",{href:!0});var fWr=s(nI);Qho=r(fWr,"MBartModel"),fWr.forEach(t),Who=r(x3e," (mBART model)"),x3e.forEach(t),Hho=i($),xp=n($,"LI",{});var $3e=s(xp);ine=n($3e,"STRONG",{});var mWr=s(ine);Uho=r(mWr,"megatron-bert"),mWr.forEach(t),Jho=r($3e," \u2014 "),sI=n($3e,"A",{href:!0});var gWr=s(sI);Yho=r(gWr,"MegatronBertModel"),gWr.forEach(t),Kho=r($3e," (MegatronBert model)"),$3e.forEach(t),Zho=i($),$p=n($,"LI",{});var k3e=s($p);dne=n(k3e,"STRONG",{});var hWr=s(dne);epo=r(hWr,"mobilebert"),hWr.forEach(t),opo=r(k3e," \u2014 "),lI=n(k3e,"A",{href:!0});var pWr=s(lI);rpo=r(pWr,"MobileBertModel"),pWr.forEach(t),tpo=r(k3e," (MobileBERT model)"),k3e.forEach(t),apo=i($),kp=n($,"LI",{});var S3e=s(kp);cne=n(S3e,"STRONG",{});var uWr=s(cne);npo=r(uWr,"mpnet"),uWr.forEach(t),spo=r(S3e," \u2014 "),iI=n(S3e,"A",{href:!0});var _Wr=s(iI);lpo=r(_Wr,"MPNetModel"),_Wr.forEach(t),ipo=r(S3e," (MPNet model)"),S3e.forEach(t),dpo=i($),Sp=n($,"LI",{});var R3e=s(Sp);fne=n(R3e,"STRONG",{});var bWr=s(fne);cpo=r(bWr,"mt5"),bWr.forEach(t),fpo=r(R3e," \u2014 "),dI=n(R3e,"A",{href:!0});var vWr=s(dI);mpo=r(vWr,"MT5Model"),vWr.forEach(t),gpo=r(R3e," (mT5 model)"),R3e.forEach(t),hpo=i($),Rp=n($,"LI",{});var B3e=s(Rp);mne=n(B3e,"STRONG",{});var FWr=s(mne);ppo=r(FWr,"nystromformer"),FWr.forEach(t),upo=r(B3e," \u2014 "),cI=n(B3e,"A",{href:!0});var TWr=s(cI);_po=r(TWr,"NystromformerModel"),TWr.forEach(t),bpo=r(B3e," (Nystromformer model)"),B3e.forEach(t),vpo=i($),Bp=n($,"LI",{});var P3e=s(Bp);gne=n(P3e,"STRONG",{});var MWr=s(gne);Fpo=r(MWr,"openai-gpt"),MWr.forEach(t),Tpo=r(P3e," \u2014 "),fI=n(P3e,"A",{href:!0});var EWr=s(fI);Mpo=r(EWr,"OpenAIGPTModel"),EWr.forEach(t),Epo=r(P3e," (OpenAI GPT model)"),P3e.forEach(t),Cpo=i($),Pp=n($,"LI",{});var I3e=s(Pp);hne=n(I3e,"STRONG",{});var CWr=s(hne);wpo=r(CWr,"pegasus"),CWr.forEach(t),Apo=r(I3e," \u2014 "),mI=n(I3e,"A",{href:!0});var wWr=s(mI);ypo=r(wWr,"PegasusModel"),wWr.forEach(t),Lpo=r(I3e," (Pegasus model)"),I3e.forEach(t),xpo=i($),Ip=n($,"LI",{});var q3e=s(Ip);pne=n(q3e,"STRONG",{});var AWr=s(pne);$po=r(AWr,"perceiver"),AWr.forEach(t),kpo=r(q3e," \u2014 "),gI=n(q3e,"A",{href:!0});var yWr=s(gI);Spo=r(yWr,"PerceiverModel"),yWr.forEach(t),Rpo=r(q3e," (Perceiver model)"),q3e.forEach(t),Bpo=i($),qp=n($,"LI",{});var N3e=s(qp);une=n(N3e,"STRONG",{});var LWr=s(une);Ppo=r(LWr,"plbart"),LWr.forEach(t),Ipo=r(N3e," \u2014 "),hI=n(N3e,"A",{href:!0});var xWr=s(hI);qpo=r(xWr,"PLBartModel"),xWr.forEach(t),Npo=r(N3e," (PLBart model)"),N3e.forEach(t),jpo=i($),Np=n($,"LI",{});var j3e=s(Np);_ne=n(j3e,"STRONG",{});var $Wr=s(_ne);Dpo=r($Wr,"poolformer"),$Wr.forEach(t),Gpo=r(j3e," \u2014 "),pI=n(j3e,"A",{href:!0});var kWr=s(pI);Opo=r(kWr,"PoolFormerModel"),kWr.forEach(t),Vpo=r(j3e," (PoolFormer model)"),j3e.forEach(t),Xpo=i($),jp=n($,"LI",{});var D3e=s(jp);bne=n(D3e,"STRONG",{});var SWr=s(bne);zpo=r(SWr,"prophetnet"),SWr.forEach(t),Qpo=r(D3e," \u2014 "),uI=n(D3e,"A",{href:!0});var RWr=s(uI);Wpo=r(RWr,"ProphetNetModel"),RWr.forEach(t),Hpo=r(D3e," (ProphetNet model)"),D3e.forEach(t),Upo=i($),Dp=n($,"LI",{});var G3e=s(Dp);vne=n(G3e,"STRONG",{});var BWr=s(vne);Jpo=r(BWr,"qdqbert"),BWr.forEach(t),Ypo=r(G3e," \u2014 "),_I=n(G3e,"A",{href:!0});var PWr=s(_I);Kpo=r(PWr,"QDQBertModel"),PWr.forEach(t),Zpo=r(G3e," (QDQBert model)"),G3e.forEach(t),euo=i($),Gp=n($,"LI",{});var O3e=s(Gp);Fne=n(O3e,"STRONG",{});var IWr=s(Fne);ouo=r(IWr,"reformer"),IWr.forEach(t),ruo=r(O3e," \u2014 "),bI=n(O3e,"A",{href:!0});var qWr=s(bI);tuo=r(qWr,"ReformerModel"),qWr.forEach(t),auo=r(O3e," (Reformer model)"),O3e.forEach(t),nuo=i($),Op=n($,"LI",{});var V3e=s(Op);Tne=n(V3e,"STRONG",{});var NWr=s(Tne);suo=r(NWr,"regnet"),NWr.forEach(t),luo=r(V3e," \u2014 "),vI=n(V3e,"A",{href:!0});var jWr=s(vI);iuo=r(jWr,"RegNetModel"),jWr.forEach(t),duo=r(V3e," (RegNet model)"),V3e.forEach(t),cuo=i($),Vp=n($,"LI",{});var X3e=s(Vp);Mne=n(X3e,"STRONG",{});var DWr=s(Mne);fuo=r(DWr,"rembert"),DWr.forEach(t),muo=r(X3e," \u2014 "),FI=n(X3e,"A",{href:!0});var GWr=s(FI);guo=r(GWr,"RemBertModel"),GWr.forEach(t),huo=r(X3e," (RemBERT model)"),X3e.forEach(t),puo=i($),Xp=n($,"LI",{});var z3e=s(Xp);Ene=n(z3e,"STRONG",{});var OWr=s(Ene);uuo=r(OWr,"resnet"),OWr.forEach(t),_uo=r(z3e," \u2014 "),TI=n(z3e,"A",{href:!0});var VWr=s(TI);buo=r(VWr,"ResNetModel"),VWr.forEach(t),vuo=r(z3e," (ResNet model)"),z3e.forEach(t),Fuo=i($),zp=n($,"LI",{});var Q3e=s(zp);Cne=n(Q3e,"STRONG",{});var XWr=s(Cne);Tuo=r(XWr,"retribert"),XWr.forEach(t),Muo=r(Q3e," \u2014 "),MI=n(Q3e,"A",{href:!0});var zWr=s(MI);Euo=r(zWr,"RetriBertModel"),zWr.forEach(t),Cuo=r(Q3e," (RetriBERT model)"),Q3e.forEach(t),wuo=i($),Qp=n($,"LI",{});var W3e=s(Qp);wne=n(W3e,"STRONG",{});var QWr=s(wne);Auo=r(QWr,"roberta"),QWr.forEach(t),yuo=r(W3e," \u2014 "),EI=n(W3e,"A",{href:!0});var WWr=s(EI);Luo=r(WWr,"RobertaModel"),WWr.forEach(t),xuo=r(W3e," (RoBERTa model)"),W3e.forEach(t),$uo=i($),Wp=n($,"LI",{});var H3e=s(Wp);Ane=n(H3e,"STRONG",{});var HWr=s(Ane);kuo=r(HWr,"roformer"),HWr.forEach(t),Suo=r(H3e," \u2014 "),CI=n(H3e,"A",{href:!0});var UWr=s(CI);Ruo=r(UWr,"RoFormerModel"),UWr.forEach(t),Buo=r(H3e," (RoFormer model)"),H3e.forEach(t),Puo=i($),Hp=n($,"LI",{});var U3e=s(Hp);yne=n(U3e,"STRONG",{});var JWr=s(yne);Iuo=r(JWr,"segformer"),JWr.forEach(t),quo=r(U3e," \u2014 "),wI=n(U3e,"A",{href:!0});var YWr=s(wI);Nuo=r(YWr,"SegformerModel"),YWr.forEach(t),juo=r(U3e," (SegFormer model)"),U3e.forEach(t),Duo=i($),Up=n($,"LI",{});var J3e=s(Up);Lne=n(J3e,"STRONG",{});var KWr=s(Lne);Guo=r(KWr,"sew"),KWr.forEach(t),Ouo=r(J3e," \u2014 "),AI=n(J3e,"A",{href:!0});var ZWr=s(AI);Vuo=r(ZWr,"SEWModel"),ZWr.forEach(t),Xuo=r(J3e," (SEW model)"),J3e.forEach(t),zuo=i($),Jp=n($,"LI",{});var Y3e=s(Jp);xne=n(Y3e,"STRONG",{});var eHr=s(xne);Quo=r(eHr,"sew-d"),eHr.forEach(t),Wuo=r(Y3e," \u2014 "),yI=n(Y3e,"A",{href:!0});var oHr=s(yI);Huo=r(oHr,"SEWDModel"),oHr.forEach(t),Uuo=r(Y3e," (SEW-D model)"),Y3e.forEach(t),Juo=i($),Yp=n($,"LI",{});var K3e=s(Yp);$ne=n(K3e,"STRONG",{});var rHr=s($ne);Yuo=r(rHr,"speech_to_text"),rHr.forEach(t),Kuo=r(K3e," \u2014 "),LI=n(K3e,"A",{href:!0});var tHr=s(LI);Zuo=r(tHr,"Speech2TextModel"),tHr.forEach(t),e_o=r(K3e," (Speech2Text model)"),K3e.forEach(t),o_o=i($),Kp=n($,"LI",{});var Z3e=s(Kp);kne=n(Z3e,"STRONG",{});var aHr=s(kne);r_o=r(aHr,"splinter"),aHr.forEach(t),t_o=r(Z3e," \u2014 "),xI=n(Z3e,"A",{href:!0});var nHr=s(xI);a_o=r(nHr,"SplinterModel"),nHr.forEach(t),n_o=r(Z3e," (Splinter model)"),Z3e.forEach(t),s_o=i($),Zp=n($,"LI",{});var ewe=s(Zp);Sne=n(ewe,"STRONG",{});var sHr=s(Sne);l_o=r(sHr,"squeezebert"),sHr.forEach(t),i_o=r(ewe," \u2014 "),$I=n(ewe,"A",{href:!0});var lHr=s($I);d_o=r(lHr,"SqueezeBertModel"),lHr.forEach(t),c_o=r(ewe," (SqueezeBERT model)"),ewe.forEach(t),f_o=i($),eu=n($,"LI",{});var owe=s(eu);Rne=n(owe,"STRONG",{});var iHr=s(Rne);m_o=r(iHr,"swin"),iHr.forEach(t),g_o=r(owe," \u2014 "),kI=n(owe,"A",{href:!0});var dHr=s(kI);h_o=r(dHr,"SwinModel"),dHr.forEach(t),p_o=r(owe," (Swin model)"),owe.forEach(t),u_o=i($),ou=n($,"LI",{});var rwe=s(ou);Bne=n(rwe,"STRONG",{});var cHr=s(Bne);__o=r(cHr,"t5"),cHr.forEach(t),b_o=r(rwe," \u2014 "),SI=n(rwe,"A",{href:!0});var fHr=s(SI);v_o=r(fHr,"T5Model"),fHr.forEach(t),F_o=r(rwe," (T5 model)"),rwe.forEach(t),T_o=i($),ru=n($,"LI",{});var twe=s(ru);Pne=n(twe,"STRONG",{});var mHr=s(Pne);M_o=r(mHr,"tapas"),mHr.forEach(t),E_o=r(twe," \u2014 "),RI=n(twe,"A",{href:!0});var gHr=s(RI);C_o=r(gHr,"TapasModel"),gHr.forEach(t),w_o=r(twe," (TAPAS model)"),twe.forEach(t),A_o=i($),tu=n($,"LI",{});var awe=s(tu);Ine=n(awe,"STRONG",{});var hHr=s(Ine);y_o=r(hHr,"transfo-xl"),hHr.forEach(t),L_o=r(awe," \u2014 "),BI=n(awe,"A",{href:!0});var pHr=s(BI);x_o=r(pHr,"TransfoXLModel"),pHr.forEach(t),$_o=r(awe," (Transformer-XL model)"),awe.forEach(t),k_o=i($),au=n($,"LI",{});var nwe=s(au);qne=n(nwe,"STRONG",{});var uHr=s(qne);S_o=r(uHr,"unispeech"),uHr.forEach(t),R_o=r(nwe," \u2014 "),PI=n(nwe,"A",{href:!0});var _Hr=s(PI);B_o=r(_Hr,"UniSpeechModel"),_Hr.forEach(t),P_o=r(nwe," (UniSpeech model)"),nwe.forEach(t),I_o=i($),nu=n($,"LI",{});var swe=s(nu);Nne=n(swe,"STRONG",{});var bHr=s(Nne);q_o=r(bHr,"unispeech-sat"),bHr.forEach(t),N_o=r(swe," \u2014 "),II=n(swe,"A",{href:!0});var vHr=s(II);j_o=r(vHr,"UniSpeechSatModel"),vHr.forEach(t),D_o=r(swe," (UniSpeechSat model)"),swe.forEach(t),G_o=i($),su=n($,"LI",{});var lwe=s(su);jne=n(lwe,"STRONG",{});var FHr=s(jne);O_o=r(FHr,"van"),FHr.forEach(t),V_o=r(lwe," \u2014 "),qI=n(lwe,"A",{href:!0});var THr=s(qI);X_o=r(THr,"VanModel"),THr.forEach(t),z_o=r(lwe," (VAN model)"),lwe.forEach(t),Q_o=i($),lu=n($,"LI",{});var iwe=s(lu);Dne=n(iwe,"STRONG",{});var MHr=s(Dne);W_o=r(MHr,"vilt"),MHr.forEach(t),H_o=r(iwe," \u2014 "),NI=n(iwe,"A",{href:!0});var EHr=s(NI);U_o=r(EHr,"ViltModel"),EHr.forEach(t),J_o=r(iwe," (ViLT model)"),iwe.forEach(t),Y_o=i($),iu=n($,"LI",{});var dwe=s(iu);Gne=n(dwe,"STRONG",{});var CHr=s(Gne);K_o=r(CHr,"vision-text-dual-encoder"),CHr.forEach(t),Z_o=r(dwe," \u2014 "),jI=n(dwe,"A",{href:!0});var wHr=s(jI);e5o=r(wHr,"VisionTextDualEncoderModel"),wHr.forEach(t),o5o=r(dwe," (VisionTextDualEncoder model)"),dwe.forEach(t),r5o=i($),du=n($,"LI",{});var cwe=s(du);One=n(cwe,"STRONG",{});var AHr=s(One);t5o=r(AHr,"visual_bert"),AHr.forEach(t),a5o=r(cwe," \u2014 "),DI=n(cwe,"A",{href:!0});var yHr=s(DI);n5o=r(yHr,"VisualBertModel"),yHr.forEach(t),s5o=r(cwe," (VisualBert model)"),cwe.forEach(t),l5o=i($),cu=n($,"LI",{});var fwe=s(cu);Vne=n(fwe,"STRONG",{});var LHr=s(Vne);i5o=r(LHr,"vit"),LHr.forEach(t),d5o=r(fwe," \u2014 "),GI=n(fwe,"A",{href:!0});var xHr=s(GI);c5o=r(xHr,"ViTModel"),xHr.forEach(t),f5o=r(fwe," (ViT model)"),fwe.forEach(t),m5o=i($),fu=n($,"LI",{});var mwe=s(fu);Xne=n(mwe,"STRONG",{});var $Hr=s(Xne);g5o=r($Hr,"vit_mae"),$Hr.forEach(t),h5o=r(mwe," \u2014 "),OI=n(mwe,"A",{href:!0});var kHr=s(OI);p5o=r(kHr,"ViTMAEModel"),kHr.forEach(t),u5o=r(mwe," (ViTMAE model)"),mwe.forEach(t),_5o=i($),mu=n($,"LI",{});var gwe=s(mu);zne=n(gwe,"STRONG",{});var SHr=s(zne);b5o=r(SHr,"wav2vec2"),SHr.forEach(t),v5o=r(gwe," \u2014 "),VI=n(gwe,"A",{href:!0});var RHr=s(VI);F5o=r(RHr,"Wav2Vec2Model"),RHr.forEach(t),T5o=r(gwe," (Wav2Vec2 model)"),gwe.forEach(t),M5o=i($),gu=n($,"LI",{});var hwe=s(gu);Qne=n(hwe,"STRONG",{});var BHr=s(Qne);E5o=r(BHr,"wavlm"),BHr.forEach(t),C5o=r(hwe," \u2014 "),XI=n(hwe,"A",{href:!0});var PHr=s(XI);w5o=r(PHr,"WavLMModel"),PHr.forEach(t),A5o=r(hwe," (WavLM model)"),hwe.forEach(t),y5o=i($),hu=n($,"LI",{});var pwe=s(hu);Wne=n(pwe,"STRONG",{});var IHr=s(Wne);L5o=r(IHr,"xglm"),IHr.forEach(t),x5o=r(pwe," \u2014 "),zI=n(pwe,"A",{href:!0});var qHr=s(zI);$5o=r(qHr,"XGLMModel"),qHr.forEach(t),k5o=r(pwe," (XGLM model)"),pwe.forEach(t),S5o=i($),pu=n($,"LI",{});var uwe=s(pu);Hne=n(uwe,"STRONG",{});var NHr=s(Hne);R5o=r(NHr,"xlm"),NHr.forEach(t),B5o=r(uwe," \u2014 "),QI=n(uwe,"A",{href:!0});var jHr=s(QI);P5o=r(jHr,"XLMModel"),jHr.forEach(t),I5o=r(uwe," (XLM model)"),uwe.forEach(t),q5o=i($),uu=n($,"LI",{});var _we=s(uu);Une=n(_we,"STRONG",{});var DHr=s(Une);N5o=r(DHr,"xlm-prophetnet"),DHr.forEach(t),j5o=r(_we," \u2014 "),WI=n(_we,"A",{href:!0});var GHr=s(WI);D5o=r(GHr,"XLMProphetNetModel"),GHr.forEach(t),G5o=r(_we," (XLMProphetNet model)"),_we.forEach(t),O5o=i($),_u=n($,"LI",{});var bwe=s(_u);Jne=n(bwe,"STRONG",{});var OHr=s(Jne);V5o=r(OHr,"xlm-roberta"),OHr.forEach(t),X5o=r(bwe," \u2014 "),HI=n(bwe,"A",{href:!0});var VHr=s(HI);z5o=r(VHr,"XLMRobertaModel"),VHr.forEach(t),Q5o=r(bwe," (XLM-RoBERTa model)"),bwe.forEach(t),W5o=i($),bu=n($,"LI",{});var vwe=s(bu);Yne=n(vwe,"STRONG",{});var XHr=s(Yne);H5o=r(XHr,"xlm-roberta-xl"),XHr.forEach(t),U5o=r(vwe," \u2014 "),UI=n(vwe,"A",{href:!0});var zHr=s(UI);J5o=r(zHr,"XLMRobertaXLModel"),zHr.forEach(t),Y5o=r(vwe," (XLM-RoBERTa-XL model)"),vwe.forEach(t),K5o=i($),vu=n($,"LI",{});var Fwe=s(vu);Kne=n(Fwe,"STRONG",{});var QHr=s(Kne);Z5o=r(QHr,"xlnet"),QHr.forEach(t),e1o=r(Fwe," \u2014 "),JI=n(Fwe,"A",{href:!0});var WHr=s(JI);o1o=r(WHr,"XLNetModel"),WHr.forEach(t),r1o=r(Fwe," (XLNet model)"),Fwe.forEach(t),t1o=i($),Fu=n($,"LI",{});var Twe=s(Fu);Zne=n(Twe,"STRONG",{});var HHr=s(Zne);a1o=r(HHr,"yolos"),HHr.forEach(t),n1o=r(Twe," \u2014 "),YI=n(Twe,"A",{href:!0});var UHr=s(YI);s1o=r(UHr,"YolosModel"),UHr.forEach(t),l1o=r(Twe," (YOLOS model)"),Twe.forEach(t),i1o=i($),Tu=n($,"LI",{});var Mwe=s(Tu);ese=n(Mwe,"STRONG",{});var JHr=s(ese);d1o=r(JHr,"yoso"),JHr.forEach(t),c1o=r(Mwe," \u2014 "),KI=n(Mwe,"A",{href:!0});var YHr=s(KI);f1o=r(YHr,"YosoModel"),YHr.forEach(t),m1o=r(Mwe," (YOSO model)"),Mwe.forEach(t),$.forEach(t),g1o=i(Jt),Mu=n(Jt,"P",{});var Ewe=s(Mu);h1o=r(Ewe,"The model is set in evaluation mode by default using "),ose=n(Ewe,"CODE",{});var KHr=s(ose);p1o=r(KHr,"model.eval()"),KHr.forEach(t),u1o=r(Ewe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rse=n(Ewe,"CODE",{});var ZHr=s(rse);_1o=r(ZHr,"model.train()"),ZHr.forEach(t),Ewe.forEach(t),b1o=i(Jt),T(Eu.$$.fragment,Jt),Jt.forEach(t),Ps.forEach(t),zBe=i(f),bi=n(f,"H2",{class:!0});var WIe=s(bi);Cu=n(WIe,"A",{id:!0,class:!0,href:!0});var eUr=s(Cu);tse=n(eUr,"SPAN",{});var oUr=s(tse);T(n0.$$.fragment,oUr),oUr.forEach(t),eUr.forEach(t),v1o=i(WIe),ase=n(WIe,"SPAN",{});var rUr=s(ase);F1o=r(rUr,"AutoModelForPreTraining"),rUr.forEach(t),WIe.forEach(t),QBe=i(f),xo=n(f,"DIV",{class:!0});var Is=s(xo);T(s0.$$.fragment,Is),T1o=i(Is),vi=n(Is,"P",{});var wY=s(vi);M1o=r(wY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ZI=n(wY,"A",{href:!0});var tUr=s(ZI);E1o=r(tUr,"from_pretrained()"),tUr.forEach(t),C1o=r(wY," class method or the "),eq=n(wY,"A",{href:!0});var aUr=s(eq);w1o=r(aUr,"from_config()"),aUr.forEach(t),A1o=r(wY,` class
method.`),wY.forEach(t),y1o=i(Is),l0=n(Is,"P",{});var HIe=s(l0);L1o=r(HIe,"This class cannot be instantiated directly using "),nse=n(HIe,"CODE",{});var nUr=s(nse);x1o=r(nUr,"__init__()"),nUr.forEach(t),$1o=r(HIe," (throws an error)."),HIe.forEach(t),k1o=i(Is),et=n(Is,"DIV",{class:!0});var P3=s(et);T(i0.$$.fragment,P3),S1o=i(P3),sse=n(P3,"P",{});var sUr=s(sse);R1o=r(sUr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),sUr.forEach(t),B1o=i(P3),Fi=n(P3,"P",{});var AY=s(Fi);P1o=r(AY,`Note:
Loading a model from its configuration file does `),lse=n(AY,"STRONG",{});var lUr=s(lse);I1o=r(lUr,"not"),lUr.forEach(t),q1o=r(AY,` load the model weights. It only affects the
model\u2019s configuration. Use `),oq=n(AY,"A",{href:!0});var iUr=s(oq);N1o=r(iUr,"from_pretrained()"),iUr.forEach(t),j1o=r(AY," to load the model weights."),AY.forEach(t),D1o=i(P3),T(wu.$$.fragment,P3),P3.forEach(t),G1o=i(Is),Ue=n(Is,"DIV",{class:!0});var Yt=s(Ue);T(d0.$$.fragment,Yt),O1o=i(Yt),ise=n(Yt,"P",{});var dUr=s(ise);V1o=r(dUr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),dUr.forEach(t),X1o=i(Yt),Ca=n(Yt,"P",{});var I3=s(Ca);z1o=r(I3,"The model class to instantiate is selected based on the "),dse=n(I3,"CODE",{});var cUr=s(dse);Q1o=r(cUr,"model_type"),cUr.forEach(t),W1o=r(I3,` property of the config object (either
passed as an argument or loaded from `),cse=n(I3,"CODE",{});var fUr=s(cse);H1o=r(fUr,"pretrained_model_name_or_path"),fUr.forEach(t),U1o=r(I3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fse=n(I3,"CODE",{});var mUr=s(fse);J1o=r(mUr,"pretrained_model_name_or_path"),mUr.forEach(t),Y1o=r(I3,":"),I3.forEach(t),K1o=i(Yt),G=n(Yt,"UL",{});var V=s(G);Au=n(V,"LI",{});var Cwe=s(Au);mse=n(Cwe,"STRONG",{});var gUr=s(mse);Z1o=r(gUr,"albert"),gUr.forEach(t),ebo=r(Cwe," \u2014 "),rq=n(Cwe,"A",{href:!0});var hUr=s(rq);obo=r(hUr,"AlbertForPreTraining"),hUr.forEach(t),rbo=r(Cwe," (ALBERT model)"),Cwe.forEach(t),tbo=i(V),yu=n(V,"LI",{});var wwe=s(yu);gse=n(wwe,"STRONG",{});var pUr=s(gse);abo=r(pUr,"bart"),pUr.forEach(t),nbo=r(wwe," \u2014 "),tq=n(wwe,"A",{href:!0});var uUr=s(tq);sbo=r(uUr,"BartForConditionalGeneration"),uUr.forEach(t),lbo=r(wwe," (BART model)"),wwe.forEach(t),ibo=i(V),Lu=n(V,"LI",{});var Awe=s(Lu);hse=n(Awe,"STRONG",{});var _Ur=s(hse);dbo=r(_Ur,"bert"),_Ur.forEach(t),cbo=r(Awe," \u2014 "),aq=n(Awe,"A",{href:!0});var bUr=s(aq);fbo=r(bUr,"BertForPreTraining"),bUr.forEach(t),mbo=r(Awe," (BERT model)"),Awe.forEach(t),gbo=i(V),xu=n(V,"LI",{});var ywe=s(xu);pse=n(ywe,"STRONG",{});var vUr=s(pse);hbo=r(vUr,"big_bird"),vUr.forEach(t),pbo=r(ywe," \u2014 "),nq=n(ywe,"A",{href:!0});var FUr=s(nq);ubo=r(FUr,"BigBirdForPreTraining"),FUr.forEach(t),_bo=r(ywe," (BigBird model)"),ywe.forEach(t),bbo=i(V),$u=n(V,"LI",{});var Lwe=s($u);use=n(Lwe,"STRONG",{});var TUr=s(use);vbo=r(TUr,"camembert"),TUr.forEach(t),Fbo=r(Lwe," \u2014 "),sq=n(Lwe,"A",{href:!0});var MUr=s(sq);Tbo=r(MUr,"CamembertForMaskedLM"),MUr.forEach(t),Mbo=r(Lwe," (CamemBERT model)"),Lwe.forEach(t),Ebo=i(V),ku=n(V,"LI",{});var xwe=s(ku);_se=n(xwe,"STRONG",{});var EUr=s(_se);Cbo=r(EUr,"ctrl"),EUr.forEach(t),wbo=r(xwe," \u2014 "),lq=n(xwe,"A",{href:!0});var CUr=s(lq);Abo=r(CUr,"CTRLLMHeadModel"),CUr.forEach(t),ybo=r(xwe," (CTRL model)"),xwe.forEach(t),Lbo=i(V),Su=n(V,"LI",{});var $we=s(Su);bse=n($we,"STRONG",{});var wUr=s(bse);xbo=r(wUr,"data2vec-text"),wUr.forEach(t),$bo=r($we," \u2014 "),iq=n($we,"A",{href:!0});var AUr=s(iq);kbo=r(AUr,"Data2VecTextForMaskedLM"),AUr.forEach(t),Sbo=r($we," (Data2VecText model)"),$we.forEach(t),Rbo=i(V),Ru=n(V,"LI",{});var kwe=s(Ru);vse=n(kwe,"STRONG",{});var yUr=s(vse);Bbo=r(yUr,"deberta"),yUr.forEach(t),Pbo=r(kwe," \u2014 "),dq=n(kwe,"A",{href:!0});var LUr=s(dq);Ibo=r(LUr,"DebertaForMaskedLM"),LUr.forEach(t),qbo=r(kwe," (DeBERTa model)"),kwe.forEach(t),Nbo=i(V),Bu=n(V,"LI",{});var Swe=s(Bu);Fse=n(Swe,"STRONG",{});var xUr=s(Fse);jbo=r(xUr,"deberta-v2"),xUr.forEach(t),Dbo=r(Swe," \u2014 "),cq=n(Swe,"A",{href:!0});var $Ur=s(cq);Gbo=r($Ur,"DebertaV2ForMaskedLM"),$Ur.forEach(t),Obo=r(Swe," (DeBERTa-v2 model)"),Swe.forEach(t),Vbo=i(V),Pu=n(V,"LI",{});var Rwe=s(Pu);Tse=n(Rwe,"STRONG",{});var kUr=s(Tse);Xbo=r(kUr,"distilbert"),kUr.forEach(t),zbo=r(Rwe," \u2014 "),fq=n(Rwe,"A",{href:!0});var SUr=s(fq);Qbo=r(SUr,"DistilBertForMaskedLM"),SUr.forEach(t),Wbo=r(Rwe," (DistilBERT model)"),Rwe.forEach(t),Hbo=i(V),Iu=n(V,"LI",{});var Bwe=s(Iu);Mse=n(Bwe,"STRONG",{});var RUr=s(Mse);Ubo=r(RUr,"electra"),RUr.forEach(t),Jbo=r(Bwe," \u2014 "),mq=n(Bwe,"A",{href:!0});var BUr=s(mq);Ybo=r(BUr,"ElectraForPreTraining"),BUr.forEach(t),Kbo=r(Bwe," (ELECTRA model)"),Bwe.forEach(t),Zbo=i(V),qu=n(V,"LI",{});var Pwe=s(qu);Ese=n(Pwe,"STRONG",{});var PUr=s(Ese);e2o=r(PUr,"flaubert"),PUr.forEach(t),o2o=r(Pwe," \u2014 "),gq=n(Pwe,"A",{href:!0});var IUr=s(gq);r2o=r(IUr,"FlaubertWithLMHeadModel"),IUr.forEach(t),t2o=r(Pwe," (FlauBERT model)"),Pwe.forEach(t),a2o=i(V),Nu=n(V,"LI",{});var Iwe=s(Nu);Cse=n(Iwe,"STRONG",{});var qUr=s(Cse);n2o=r(qUr,"fnet"),qUr.forEach(t),s2o=r(Iwe," \u2014 "),hq=n(Iwe,"A",{href:!0});var NUr=s(hq);l2o=r(NUr,"FNetForPreTraining"),NUr.forEach(t),i2o=r(Iwe," (FNet model)"),Iwe.forEach(t),d2o=i(V),ju=n(V,"LI",{});var qwe=s(ju);wse=n(qwe,"STRONG",{});var jUr=s(wse);c2o=r(jUr,"fsmt"),jUr.forEach(t),f2o=r(qwe," \u2014 "),pq=n(qwe,"A",{href:!0});var DUr=s(pq);m2o=r(DUr,"FSMTForConditionalGeneration"),DUr.forEach(t),g2o=r(qwe," (FairSeq Machine-Translation model)"),qwe.forEach(t),h2o=i(V),Du=n(V,"LI",{});var Nwe=s(Du);Ase=n(Nwe,"STRONG",{});var GUr=s(Ase);p2o=r(GUr,"funnel"),GUr.forEach(t),u2o=r(Nwe," \u2014 "),uq=n(Nwe,"A",{href:!0});var OUr=s(uq);_2o=r(OUr,"FunnelForPreTraining"),OUr.forEach(t),b2o=r(Nwe," (Funnel Transformer model)"),Nwe.forEach(t),v2o=i(V),Gu=n(V,"LI",{});var jwe=s(Gu);yse=n(jwe,"STRONG",{});var VUr=s(yse);F2o=r(VUr,"gpt2"),VUr.forEach(t),T2o=r(jwe," \u2014 "),_q=n(jwe,"A",{href:!0});var XUr=s(_q);M2o=r(XUr,"GPT2LMHeadModel"),XUr.forEach(t),E2o=r(jwe," (OpenAI GPT-2 model)"),jwe.forEach(t),C2o=i(V),Ou=n(V,"LI",{});var Dwe=s(Ou);Lse=n(Dwe,"STRONG",{});var zUr=s(Lse);w2o=r(zUr,"ibert"),zUr.forEach(t),A2o=r(Dwe," \u2014 "),bq=n(Dwe,"A",{href:!0});var QUr=s(bq);y2o=r(QUr,"IBertForMaskedLM"),QUr.forEach(t),L2o=r(Dwe," (I-BERT model)"),Dwe.forEach(t),x2o=i(V),Vu=n(V,"LI",{});var Gwe=s(Vu);xse=n(Gwe,"STRONG",{});var WUr=s(xse);$2o=r(WUr,"layoutlm"),WUr.forEach(t),k2o=r(Gwe," \u2014 "),vq=n(Gwe,"A",{href:!0});var HUr=s(vq);S2o=r(HUr,"LayoutLMForMaskedLM"),HUr.forEach(t),R2o=r(Gwe," (LayoutLM model)"),Gwe.forEach(t),B2o=i(V),Xu=n(V,"LI",{});var Owe=s(Xu);$se=n(Owe,"STRONG",{});var UUr=s($se);P2o=r(UUr,"longformer"),UUr.forEach(t),I2o=r(Owe," \u2014 "),Fq=n(Owe,"A",{href:!0});var JUr=s(Fq);q2o=r(JUr,"LongformerForMaskedLM"),JUr.forEach(t),N2o=r(Owe," (Longformer model)"),Owe.forEach(t),j2o=i(V),zu=n(V,"LI",{});var Vwe=s(zu);kse=n(Vwe,"STRONG",{});var YUr=s(kse);D2o=r(YUr,"lxmert"),YUr.forEach(t),G2o=r(Vwe," \u2014 "),Tq=n(Vwe,"A",{href:!0});var KUr=s(Tq);O2o=r(KUr,"LxmertForPreTraining"),KUr.forEach(t),V2o=r(Vwe," (LXMERT model)"),Vwe.forEach(t),X2o=i(V),Qu=n(V,"LI",{});var Xwe=s(Qu);Sse=n(Xwe,"STRONG",{});var ZUr=s(Sse);z2o=r(ZUr,"megatron-bert"),ZUr.forEach(t),Q2o=r(Xwe," \u2014 "),Mq=n(Xwe,"A",{href:!0});var eJr=s(Mq);W2o=r(eJr,"MegatronBertForPreTraining"),eJr.forEach(t),H2o=r(Xwe," (MegatronBert model)"),Xwe.forEach(t),U2o=i(V),Wu=n(V,"LI",{});var zwe=s(Wu);Rse=n(zwe,"STRONG",{});var oJr=s(Rse);J2o=r(oJr,"mobilebert"),oJr.forEach(t),Y2o=r(zwe," \u2014 "),Eq=n(zwe,"A",{href:!0});var rJr=s(Eq);K2o=r(rJr,"MobileBertForPreTraining"),rJr.forEach(t),Z2o=r(zwe," (MobileBERT model)"),zwe.forEach(t),evo=i(V),Hu=n(V,"LI",{});var Qwe=s(Hu);Bse=n(Qwe,"STRONG",{});var tJr=s(Bse);ovo=r(tJr,"mpnet"),tJr.forEach(t),rvo=r(Qwe," \u2014 "),Cq=n(Qwe,"A",{href:!0});var aJr=s(Cq);tvo=r(aJr,"MPNetForMaskedLM"),aJr.forEach(t),avo=r(Qwe," (MPNet model)"),Qwe.forEach(t),nvo=i(V),Uu=n(V,"LI",{});var Wwe=s(Uu);Pse=n(Wwe,"STRONG",{});var nJr=s(Pse);svo=r(nJr,"openai-gpt"),nJr.forEach(t),lvo=r(Wwe," \u2014 "),wq=n(Wwe,"A",{href:!0});var sJr=s(wq);ivo=r(sJr,"OpenAIGPTLMHeadModel"),sJr.forEach(t),dvo=r(Wwe," (OpenAI GPT model)"),Wwe.forEach(t),cvo=i(V),Ju=n(V,"LI",{});var Hwe=s(Ju);Ise=n(Hwe,"STRONG",{});var lJr=s(Ise);fvo=r(lJr,"retribert"),lJr.forEach(t),mvo=r(Hwe," \u2014 "),Aq=n(Hwe,"A",{href:!0});var iJr=s(Aq);gvo=r(iJr,"RetriBertModel"),iJr.forEach(t),hvo=r(Hwe," (RetriBERT model)"),Hwe.forEach(t),pvo=i(V),Yu=n(V,"LI",{});var Uwe=s(Yu);qse=n(Uwe,"STRONG",{});var dJr=s(qse);uvo=r(dJr,"roberta"),dJr.forEach(t),_vo=r(Uwe," \u2014 "),yq=n(Uwe,"A",{href:!0});var cJr=s(yq);bvo=r(cJr,"RobertaForMaskedLM"),cJr.forEach(t),vvo=r(Uwe," (RoBERTa model)"),Uwe.forEach(t),Fvo=i(V),Ku=n(V,"LI",{});var Jwe=s(Ku);Nse=n(Jwe,"STRONG",{});var fJr=s(Nse);Tvo=r(fJr,"squeezebert"),fJr.forEach(t),Mvo=r(Jwe," \u2014 "),Lq=n(Jwe,"A",{href:!0});var mJr=s(Lq);Evo=r(mJr,"SqueezeBertForMaskedLM"),mJr.forEach(t),Cvo=r(Jwe," (SqueezeBERT model)"),Jwe.forEach(t),wvo=i(V),Zu=n(V,"LI",{});var Ywe=s(Zu);jse=n(Ywe,"STRONG",{});var gJr=s(jse);Avo=r(gJr,"t5"),gJr.forEach(t),yvo=r(Ywe," \u2014 "),xq=n(Ywe,"A",{href:!0});var hJr=s(xq);Lvo=r(hJr,"T5ForConditionalGeneration"),hJr.forEach(t),xvo=r(Ywe," (T5 model)"),Ywe.forEach(t),$vo=i(V),e_=n(V,"LI",{});var Kwe=s(e_);Dse=n(Kwe,"STRONG",{});var pJr=s(Dse);kvo=r(pJr,"tapas"),pJr.forEach(t),Svo=r(Kwe," \u2014 "),$q=n(Kwe,"A",{href:!0});var uJr=s($q);Rvo=r(uJr,"TapasForMaskedLM"),uJr.forEach(t),Bvo=r(Kwe," (TAPAS model)"),Kwe.forEach(t),Pvo=i(V),o_=n(V,"LI",{});var Zwe=s(o_);Gse=n(Zwe,"STRONG",{});var _Jr=s(Gse);Ivo=r(_Jr,"transfo-xl"),_Jr.forEach(t),qvo=r(Zwe," \u2014 "),kq=n(Zwe,"A",{href:!0});var bJr=s(kq);Nvo=r(bJr,"TransfoXLLMHeadModel"),bJr.forEach(t),jvo=r(Zwe," (Transformer-XL model)"),Zwe.forEach(t),Dvo=i(V),r_=n(V,"LI",{});var eAe=s(r_);Ose=n(eAe,"STRONG",{});var vJr=s(Ose);Gvo=r(vJr,"unispeech"),vJr.forEach(t),Ovo=r(eAe," \u2014 "),Sq=n(eAe,"A",{href:!0});var FJr=s(Sq);Vvo=r(FJr,"UniSpeechForPreTraining"),FJr.forEach(t),Xvo=r(eAe," (UniSpeech model)"),eAe.forEach(t),zvo=i(V),t_=n(V,"LI",{});var oAe=s(t_);Vse=n(oAe,"STRONG",{});var TJr=s(Vse);Qvo=r(TJr,"unispeech-sat"),TJr.forEach(t),Wvo=r(oAe," \u2014 "),Rq=n(oAe,"A",{href:!0});var MJr=s(Rq);Hvo=r(MJr,"UniSpeechSatForPreTraining"),MJr.forEach(t),Uvo=r(oAe," (UniSpeechSat model)"),oAe.forEach(t),Jvo=i(V),a_=n(V,"LI",{});var rAe=s(a_);Xse=n(rAe,"STRONG",{});var EJr=s(Xse);Yvo=r(EJr,"visual_bert"),EJr.forEach(t),Kvo=r(rAe," \u2014 "),Bq=n(rAe,"A",{href:!0});var CJr=s(Bq);Zvo=r(CJr,"VisualBertForPreTraining"),CJr.forEach(t),eFo=r(rAe," (VisualBert model)"),rAe.forEach(t),oFo=i(V),n_=n(V,"LI",{});var tAe=s(n_);zse=n(tAe,"STRONG",{});var wJr=s(zse);rFo=r(wJr,"vit_mae"),wJr.forEach(t),tFo=r(tAe," \u2014 "),Pq=n(tAe,"A",{href:!0});var AJr=s(Pq);aFo=r(AJr,"ViTMAEForPreTraining"),AJr.forEach(t),nFo=r(tAe," (ViTMAE model)"),tAe.forEach(t),sFo=i(V),s_=n(V,"LI",{});var aAe=s(s_);Qse=n(aAe,"STRONG",{});var yJr=s(Qse);lFo=r(yJr,"wav2vec2"),yJr.forEach(t),iFo=r(aAe," \u2014 "),Iq=n(aAe,"A",{href:!0});var LJr=s(Iq);dFo=r(LJr,"Wav2Vec2ForPreTraining"),LJr.forEach(t),cFo=r(aAe," (Wav2Vec2 model)"),aAe.forEach(t),fFo=i(V),l_=n(V,"LI",{});var nAe=s(l_);Wse=n(nAe,"STRONG",{});var xJr=s(Wse);mFo=r(xJr,"xlm"),xJr.forEach(t),gFo=r(nAe," \u2014 "),qq=n(nAe,"A",{href:!0});var $Jr=s(qq);hFo=r($Jr,"XLMWithLMHeadModel"),$Jr.forEach(t),pFo=r(nAe," (XLM model)"),nAe.forEach(t),uFo=i(V),i_=n(V,"LI",{});var sAe=s(i_);Hse=n(sAe,"STRONG",{});var kJr=s(Hse);_Fo=r(kJr,"xlm-roberta"),kJr.forEach(t),bFo=r(sAe," \u2014 "),Nq=n(sAe,"A",{href:!0});var SJr=s(Nq);vFo=r(SJr,"XLMRobertaForMaskedLM"),SJr.forEach(t),FFo=r(sAe," (XLM-RoBERTa model)"),sAe.forEach(t),TFo=i(V),d_=n(V,"LI",{});var lAe=s(d_);Use=n(lAe,"STRONG",{});var RJr=s(Use);MFo=r(RJr,"xlm-roberta-xl"),RJr.forEach(t),EFo=r(lAe," \u2014 "),jq=n(lAe,"A",{href:!0});var BJr=s(jq);CFo=r(BJr,"XLMRobertaXLForMaskedLM"),BJr.forEach(t),wFo=r(lAe," (XLM-RoBERTa-XL model)"),lAe.forEach(t),AFo=i(V),c_=n(V,"LI",{});var iAe=s(c_);Jse=n(iAe,"STRONG",{});var PJr=s(Jse);yFo=r(PJr,"xlnet"),PJr.forEach(t),LFo=r(iAe," \u2014 "),Dq=n(iAe,"A",{href:!0});var IJr=s(Dq);xFo=r(IJr,"XLNetLMHeadModel"),IJr.forEach(t),$Fo=r(iAe," (XLNet model)"),iAe.forEach(t),V.forEach(t),kFo=i(Yt),f_=n(Yt,"P",{});var dAe=s(f_);SFo=r(dAe,"The model is set in evaluation mode by default using "),Yse=n(dAe,"CODE",{});var qJr=s(Yse);RFo=r(qJr,"model.eval()"),qJr.forEach(t),BFo=r(dAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kse=n(dAe,"CODE",{});var NJr=s(Kse);PFo=r(NJr,"model.train()"),NJr.forEach(t),dAe.forEach(t),IFo=i(Yt),T(m_.$$.fragment,Yt),Yt.forEach(t),Is.forEach(t),WBe=i(f),Ti=n(f,"H2",{class:!0});var UIe=s(Ti);g_=n(UIe,"A",{id:!0,class:!0,href:!0});var jJr=s(g_);Zse=n(jJr,"SPAN",{});var DJr=s(Zse);T(c0.$$.fragment,DJr),DJr.forEach(t),jJr.forEach(t),qFo=i(UIe),ele=n(UIe,"SPAN",{});var GJr=s(ele);NFo=r(GJr,"AutoModelForCausalLM"),GJr.forEach(t),UIe.forEach(t),HBe=i(f),$o=n(f,"DIV",{class:!0});var qs=s($o);T(f0.$$.fragment,qs),jFo=i(qs),Mi=n(qs,"P",{});var yY=s(Mi);DFo=r(yY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Gq=n(yY,"A",{href:!0});var OJr=s(Gq);GFo=r(OJr,"from_pretrained()"),OJr.forEach(t),OFo=r(yY," class method or the "),Oq=n(yY,"A",{href:!0});var VJr=s(Oq);VFo=r(VJr,"from_config()"),VJr.forEach(t),XFo=r(yY,` class
method.`),yY.forEach(t),zFo=i(qs),m0=n(qs,"P",{});var JIe=s(m0);QFo=r(JIe,"This class cannot be instantiated directly using "),ole=n(JIe,"CODE",{});var XJr=s(ole);WFo=r(XJr,"__init__()"),XJr.forEach(t),HFo=r(JIe," (throws an error)."),JIe.forEach(t),UFo=i(qs),ot=n(qs,"DIV",{class:!0});var q3=s(ot);T(g0.$$.fragment,q3),JFo=i(q3),rle=n(q3,"P",{});var zJr=s(rle);YFo=r(zJr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),zJr.forEach(t),KFo=i(q3),Ei=n(q3,"P",{});var LY=s(Ei);ZFo=r(LY,`Note:
Loading a model from its configuration file does `),tle=n(LY,"STRONG",{});var QJr=s(tle);e6o=r(QJr,"not"),QJr.forEach(t),o6o=r(LY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vq=n(LY,"A",{href:!0});var WJr=s(Vq);r6o=r(WJr,"from_pretrained()"),WJr.forEach(t),t6o=r(LY," to load the model weights."),LY.forEach(t),a6o=i(q3),T(h_.$$.fragment,q3),q3.forEach(t),n6o=i(qs),Je=n(qs,"DIV",{class:!0});var Kt=s(Je);T(h0.$$.fragment,Kt),s6o=i(Kt),ale=n(Kt,"P",{});var HJr=s(ale);l6o=r(HJr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),HJr.forEach(t),i6o=i(Kt),wa=n(Kt,"P",{});var N3=s(wa);d6o=r(N3,"The model class to instantiate is selected based on the "),nle=n(N3,"CODE",{});var UJr=s(nle);c6o=r(UJr,"model_type"),UJr.forEach(t),f6o=r(N3,` property of the config object (either
passed as an argument or loaded from `),sle=n(N3,"CODE",{});var JJr=s(sle);m6o=r(JJr,"pretrained_model_name_or_path"),JJr.forEach(t),g6o=r(N3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lle=n(N3,"CODE",{});var YJr=s(lle);h6o=r(YJr,"pretrained_model_name_or_path"),YJr.forEach(t),p6o=r(N3,":"),N3.forEach(t),u6o=i(Kt),z=n(Kt,"UL",{});var W=s(z);p_=n(W,"LI",{});var cAe=s(p_);ile=n(cAe,"STRONG",{});var KJr=s(ile);_6o=r(KJr,"bart"),KJr.forEach(t),b6o=r(cAe," \u2014 "),Xq=n(cAe,"A",{href:!0});var ZJr=s(Xq);v6o=r(ZJr,"BartForCausalLM"),ZJr.forEach(t),F6o=r(cAe," (BART model)"),cAe.forEach(t),T6o=i(W),u_=n(W,"LI",{});var fAe=s(u_);dle=n(fAe,"STRONG",{});var eYr=s(dle);M6o=r(eYr,"bert"),eYr.forEach(t),E6o=r(fAe," \u2014 "),zq=n(fAe,"A",{href:!0});var oYr=s(zq);C6o=r(oYr,"BertLMHeadModel"),oYr.forEach(t),w6o=r(fAe," (BERT model)"),fAe.forEach(t),A6o=i(W),__=n(W,"LI",{});var mAe=s(__);cle=n(mAe,"STRONG",{});var rYr=s(cle);y6o=r(rYr,"bert-generation"),rYr.forEach(t),L6o=r(mAe," \u2014 "),Qq=n(mAe,"A",{href:!0});var tYr=s(Qq);x6o=r(tYr,"BertGenerationDecoder"),tYr.forEach(t),$6o=r(mAe," (Bert Generation model)"),mAe.forEach(t),k6o=i(W),b_=n(W,"LI",{});var gAe=s(b_);fle=n(gAe,"STRONG",{});var aYr=s(fle);S6o=r(aYr,"big_bird"),aYr.forEach(t),R6o=r(gAe," \u2014 "),Wq=n(gAe,"A",{href:!0});var nYr=s(Wq);B6o=r(nYr,"BigBirdForCausalLM"),nYr.forEach(t),P6o=r(gAe," (BigBird model)"),gAe.forEach(t),I6o=i(W),v_=n(W,"LI",{});var hAe=s(v_);mle=n(hAe,"STRONG",{});var sYr=s(mle);q6o=r(sYr,"bigbird_pegasus"),sYr.forEach(t),N6o=r(hAe," \u2014 "),Hq=n(hAe,"A",{href:!0});var lYr=s(Hq);j6o=r(lYr,"BigBirdPegasusForCausalLM"),lYr.forEach(t),D6o=r(hAe," (BigBirdPegasus model)"),hAe.forEach(t),G6o=i(W),F_=n(W,"LI",{});var pAe=s(F_);gle=n(pAe,"STRONG",{});var iYr=s(gle);O6o=r(iYr,"blenderbot"),iYr.forEach(t),V6o=r(pAe," \u2014 "),Uq=n(pAe,"A",{href:!0});var dYr=s(Uq);X6o=r(dYr,"BlenderbotForCausalLM"),dYr.forEach(t),z6o=r(pAe," (Blenderbot model)"),pAe.forEach(t),Q6o=i(W),T_=n(W,"LI",{});var uAe=s(T_);hle=n(uAe,"STRONG",{});var cYr=s(hle);W6o=r(cYr,"blenderbot-small"),cYr.forEach(t),H6o=r(uAe," \u2014 "),Jq=n(uAe,"A",{href:!0});var fYr=s(Jq);U6o=r(fYr,"BlenderbotSmallForCausalLM"),fYr.forEach(t),J6o=r(uAe," (BlenderbotSmall model)"),uAe.forEach(t),Y6o=i(W),M_=n(W,"LI",{});var _Ae=s(M_);ple=n(_Ae,"STRONG",{});var mYr=s(ple);K6o=r(mYr,"camembert"),mYr.forEach(t),Z6o=r(_Ae," \u2014 "),Yq=n(_Ae,"A",{href:!0});var gYr=s(Yq);eTo=r(gYr,"CamembertForCausalLM"),gYr.forEach(t),oTo=r(_Ae," (CamemBERT model)"),_Ae.forEach(t),rTo=i(W),E_=n(W,"LI",{});var bAe=s(E_);ule=n(bAe,"STRONG",{});var hYr=s(ule);tTo=r(hYr,"ctrl"),hYr.forEach(t),aTo=r(bAe," \u2014 "),Kq=n(bAe,"A",{href:!0});var pYr=s(Kq);nTo=r(pYr,"CTRLLMHeadModel"),pYr.forEach(t),sTo=r(bAe," (CTRL model)"),bAe.forEach(t),lTo=i(W),C_=n(W,"LI",{});var vAe=s(C_);_le=n(vAe,"STRONG",{});var uYr=s(_le);iTo=r(uYr,"data2vec-text"),uYr.forEach(t),dTo=r(vAe," \u2014 "),Zq=n(vAe,"A",{href:!0});var _Yr=s(Zq);cTo=r(_Yr,"Data2VecTextForCausalLM"),_Yr.forEach(t),fTo=r(vAe," (Data2VecText model)"),vAe.forEach(t),mTo=i(W),w_=n(W,"LI",{});var FAe=s(w_);ble=n(FAe,"STRONG",{});var bYr=s(ble);gTo=r(bYr,"electra"),bYr.forEach(t),hTo=r(FAe," \u2014 "),eN=n(FAe,"A",{href:!0});var vYr=s(eN);pTo=r(vYr,"ElectraForCausalLM"),vYr.forEach(t),uTo=r(FAe," (ELECTRA model)"),FAe.forEach(t),_To=i(W),A_=n(W,"LI",{});var TAe=s(A_);vle=n(TAe,"STRONG",{});var FYr=s(vle);bTo=r(FYr,"gpt2"),FYr.forEach(t),vTo=r(TAe," \u2014 "),oN=n(TAe,"A",{href:!0});var TYr=s(oN);FTo=r(TYr,"GPT2LMHeadModel"),TYr.forEach(t),TTo=r(TAe," (OpenAI GPT-2 model)"),TAe.forEach(t),MTo=i(W),y_=n(W,"LI",{});var MAe=s(y_);Fle=n(MAe,"STRONG",{});var MYr=s(Fle);ETo=r(MYr,"gpt_neo"),MYr.forEach(t),CTo=r(MAe," \u2014 "),rN=n(MAe,"A",{href:!0});var EYr=s(rN);wTo=r(EYr,"GPTNeoForCausalLM"),EYr.forEach(t),ATo=r(MAe," (GPT Neo model)"),MAe.forEach(t),yTo=i(W),L_=n(W,"LI",{});var EAe=s(L_);Tle=n(EAe,"STRONG",{});var CYr=s(Tle);LTo=r(CYr,"gptj"),CYr.forEach(t),xTo=r(EAe," \u2014 "),tN=n(EAe,"A",{href:!0});var wYr=s(tN);$To=r(wYr,"GPTJForCausalLM"),wYr.forEach(t),kTo=r(EAe," (GPT-J model)"),EAe.forEach(t),STo=i(W),x_=n(W,"LI",{});var CAe=s(x_);Mle=n(CAe,"STRONG",{});var AYr=s(Mle);RTo=r(AYr,"marian"),AYr.forEach(t),BTo=r(CAe," \u2014 "),aN=n(CAe,"A",{href:!0});var yYr=s(aN);PTo=r(yYr,"MarianForCausalLM"),yYr.forEach(t),ITo=r(CAe," (Marian model)"),CAe.forEach(t),qTo=i(W),$_=n(W,"LI",{});var wAe=s($_);Ele=n(wAe,"STRONG",{});var LYr=s(Ele);NTo=r(LYr,"mbart"),LYr.forEach(t),jTo=r(wAe," \u2014 "),nN=n(wAe,"A",{href:!0});var xYr=s(nN);DTo=r(xYr,"MBartForCausalLM"),xYr.forEach(t),GTo=r(wAe," (mBART model)"),wAe.forEach(t),OTo=i(W),k_=n(W,"LI",{});var AAe=s(k_);Cle=n(AAe,"STRONG",{});var $Yr=s(Cle);VTo=r($Yr,"megatron-bert"),$Yr.forEach(t),XTo=r(AAe," \u2014 "),sN=n(AAe,"A",{href:!0});var kYr=s(sN);zTo=r(kYr,"MegatronBertForCausalLM"),kYr.forEach(t),QTo=r(AAe," (MegatronBert model)"),AAe.forEach(t),WTo=i(W),S_=n(W,"LI",{});var yAe=s(S_);wle=n(yAe,"STRONG",{});var SYr=s(wle);HTo=r(SYr,"openai-gpt"),SYr.forEach(t),UTo=r(yAe," \u2014 "),lN=n(yAe,"A",{href:!0});var RYr=s(lN);JTo=r(RYr,"OpenAIGPTLMHeadModel"),RYr.forEach(t),YTo=r(yAe," (OpenAI GPT model)"),yAe.forEach(t),KTo=i(W),R_=n(W,"LI",{});var LAe=s(R_);Ale=n(LAe,"STRONG",{});var BYr=s(Ale);ZTo=r(BYr,"pegasus"),BYr.forEach(t),e7o=r(LAe," \u2014 "),iN=n(LAe,"A",{href:!0});var PYr=s(iN);o7o=r(PYr,"PegasusForCausalLM"),PYr.forEach(t),r7o=r(LAe," (Pegasus model)"),LAe.forEach(t),t7o=i(W),B_=n(W,"LI",{});var xAe=s(B_);yle=n(xAe,"STRONG",{});var IYr=s(yle);a7o=r(IYr,"plbart"),IYr.forEach(t),n7o=r(xAe," \u2014 "),dN=n(xAe,"A",{href:!0});var qYr=s(dN);s7o=r(qYr,"PLBartForCausalLM"),qYr.forEach(t),l7o=r(xAe," (PLBart model)"),xAe.forEach(t),i7o=i(W),P_=n(W,"LI",{});var $Ae=s(P_);Lle=n($Ae,"STRONG",{});var NYr=s(Lle);d7o=r(NYr,"prophetnet"),NYr.forEach(t),c7o=r($Ae," \u2014 "),cN=n($Ae,"A",{href:!0});var jYr=s(cN);f7o=r(jYr,"ProphetNetForCausalLM"),jYr.forEach(t),m7o=r($Ae," (ProphetNet model)"),$Ae.forEach(t),g7o=i(W),I_=n(W,"LI",{});var kAe=s(I_);xle=n(kAe,"STRONG",{});var DYr=s(xle);h7o=r(DYr,"qdqbert"),DYr.forEach(t),p7o=r(kAe," \u2014 "),fN=n(kAe,"A",{href:!0});var GYr=s(fN);u7o=r(GYr,"QDQBertLMHeadModel"),GYr.forEach(t),_7o=r(kAe," (QDQBert model)"),kAe.forEach(t),b7o=i(W),q_=n(W,"LI",{});var SAe=s(q_);$le=n(SAe,"STRONG",{});var OYr=s($le);v7o=r(OYr,"reformer"),OYr.forEach(t),F7o=r(SAe," \u2014 "),mN=n(SAe,"A",{href:!0});var VYr=s(mN);T7o=r(VYr,"ReformerModelWithLMHead"),VYr.forEach(t),M7o=r(SAe," (Reformer model)"),SAe.forEach(t),E7o=i(W),N_=n(W,"LI",{});var RAe=s(N_);kle=n(RAe,"STRONG",{});var XYr=s(kle);C7o=r(XYr,"rembert"),XYr.forEach(t),w7o=r(RAe," \u2014 "),gN=n(RAe,"A",{href:!0});var zYr=s(gN);A7o=r(zYr,"RemBertForCausalLM"),zYr.forEach(t),y7o=r(RAe," (RemBERT model)"),RAe.forEach(t),L7o=i(W),j_=n(W,"LI",{});var BAe=s(j_);Sle=n(BAe,"STRONG",{});var QYr=s(Sle);x7o=r(QYr,"roberta"),QYr.forEach(t),$7o=r(BAe," \u2014 "),hN=n(BAe,"A",{href:!0});var WYr=s(hN);k7o=r(WYr,"RobertaForCausalLM"),WYr.forEach(t),S7o=r(BAe," (RoBERTa model)"),BAe.forEach(t),R7o=i(W),D_=n(W,"LI",{});var PAe=s(D_);Rle=n(PAe,"STRONG",{});var HYr=s(Rle);B7o=r(HYr,"roformer"),HYr.forEach(t),P7o=r(PAe," \u2014 "),pN=n(PAe,"A",{href:!0});var UYr=s(pN);I7o=r(UYr,"RoFormerForCausalLM"),UYr.forEach(t),q7o=r(PAe," (RoFormer model)"),PAe.forEach(t),N7o=i(W),G_=n(W,"LI",{});var IAe=s(G_);Ble=n(IAe,"STRONG",{});var JYr=s(Ble);j7o=r(JYr,"speech_to_text_2"),JYr.forEach(t),D7o=r(IAe," \u2014 "),uN=n(IAe,"A",{href:!0});var YYr=s(uN);G7o=r(YYr,"Speech2Text2ForCausalLM"),YYr.forEach(t),O7o=r(IAe," (Speech2Text2 model)"),IAe.forEach(t),V7o=i(W),O_=n(W,"LI",{});var qAe=s(O_);Ple=n(qAe,"STRONG",{});var KYr=s(Ple);X7o=r(KYr,"transfo-xl"),KYr.forEach(t),z7o=r(qAe," \u2014 "),_N=n(qAe,"A",{href:!0});var ZYr=s(_N);Q7o=r(ZYr,"TransfoXLLMHeadModel"),ZYr.forEach(t),W7o=r(qAe," (Transformer-XL model)"),qAe.forEach(t),H7o=i(W),V_=n(W,"LI",{});var NAe=s(V_);Ile=n(NAe,"STRONG",{});var eKr=s(Ile);U7o=r(eKr,"trocr"),eKr.forEach(t),J7o=r(NAe," \u2014 "),bN=n(NAe,"A",{href:!0});var oKr=s(bN);Y7o=r(oKr,"TrOCRForCausalLM"),oKr.forEach(t),K7o=r(NAe," (TrOCR model)"),NAe.forEach(t),Z7o=i(W),X_=n(W,"LI",{});var jAe=s(X_);qle=n(jAe,"STRONG",{});var rKr=s(qle);eMo=r(rKr,"xglm"),rKr.forEach(t),oMo=r(jAe," \u2014 "),vN=n(jAe,"A",{href:!0});var tKr=s(vN);rMo=r(tKr,"XGLMForCausalLM"),tKr.forEach(t),tMo=r(jAe," (XGLM model)"),jAe.forEach(t),aMo=i(W),z_=n(W,"LI",{});var DAe=s(z_);Nle=n(DAe,"STRONG",{});var aKr=s(Nle);nMo=r(aKr,"xlm"),aKr.forEach(t),sMo=r(DAe," \u2014 "),FN=n(DAe,"A",{href:!0});var nKr=s(FN);lMo=r(nKr,"XLMWithLMHeadModel"),nKr.forEach(t),iMo=r(DAe," (XLM model)"),DAe.forEach(t),dMo=i(W),Q_=n(W,"LI",{});var GAe=s(Q_);jle=n(GAe,"STRONG",{});var sKr=s(jle);cMo=r(sKr,"xlm-prophetnet"),sKr.forEach(t),fMo=r(GAe," \u2014 "),TN=n(GAe,"A",{href:!0});var lKr=s(TN);mMo=r(lKr,"XLMProphetNetForCausalLM"),lKr.forEach(t),gMo=r(GAe," (XLMProphetNet model)"),GAe.forEach(t),hMo=i(W),W_=n(W,"LI",{});var OAe=s(W_);Dle=n(OAe,"STRONG",{});var iKr=s(Dle);pMo=r(iKr,"xlm-roberta"),iKr.forEach(t),uMo=r(OAe," \u2014 "),MN=n(OAe,"A",{href:!0});var dKr=s(MN);_Mo=r(dKr,"XLMRobertaForCausalLM"),dKr.forEach(t),bMo=r(OAe," (XLM-RoBERTa model)"),OAe.forEach(t),vMo=i(W),H_=n(W,"LI",{});var VAe=s(H_);Gle=n(VAe,"STRONG",{});var cKr=s(Gle);FMo=r(cKr,"xlm-roberta-xl"),cKr.forEach(t),TMo=r(VAe," \u2014 "),EN=n(VAe,"A",{href:!0});var fKr=s(EN);MMo=r(fKr,"XLMRobertaXLForCausalLM"),fKr.forEach(t),EMo=r(VAe," (XLM-RoBERTa-XL model)"),VAe.forEach(t),CMo=i(W),U_=n(W,"LI",{});var XAe=s(U_);Ole=n(XAe,"STRONG",{});var mKr=s(Ole);wMo=r(mKr,"xlnet"),mKr.forEach(t),AMo=r(XAe," \u2014 "),CN=n(XAe,"A",{href:!0});var gKr=s(CN);yMo=r(gKr,"XLNetLMHeadModel"),gKr.forEach(t),LMo=r(XAe," (XLNet model)"),XAe.forEach(t),W.forEach(t),xMo=i(Kt),J_=n(Kt,"P",{});var zAe=s(J_);$Mo=r(zAe,"The model is set in evaluation mode by default using "),Vle=n(zAe,"CODE",{});var hKr=s(Vle);kMo=r(hKr,"model.eval()"),hKr.forEach(t),SMo=r(zAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xle=n(zAe,"CODE",{});var pKr=s(Xle);RMo=r(pKr,"model.train()"),pKr.forEach(t),zAe.forEach(t),BMo=i(Kt),T(Y_.$$.fragment,Kt),Kt.forEach(t),qs.forEach(t),UBe=i(f),Ci=n(f,"H2",{class:!0});var YIe=s(Ci);K_=n(YIe,"A",{id:!0,class:!0,href:!0});var uKr=s(K_);zle=n(uKr,"SPAN",{});var _Kr=s(zle);T(p0.$$.fragment,_Kr),_Kr.forEach(t),uKr.forEach(t),PMo=i(YIe),Qle=n(YIe,"SPAN",{});var bKr=s(Qle);IMo=r(bKr,"AutoModelForMaskedLM"),bKr.forEach(t),YIe.forEach(t),JBe=i(f),ko=n(f,"DIV",{class:!0});var Ns=s(ko);T(u0.$$.fragment,Ns),qMo=i(Ns),wi=n(Ns,"P",{});var xY=s(wi);NMo=r(xY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),wN=n(xY,"A",{href:!0});var vKr=s(wN);jMo=r(vKr,"from_pretrained()"),vKr.forEach(t),DMo=r(xY," class method or the "),AN=n(xY,"A",{href:!0});var FKr=s(AN);GMo=r(FKr,"from_config()"),FKr.forEach(t),OMo=r(xY,` class
method.`),xY.forEach(t),VMo=i(Ns),_0=n(Ns,"P",{});var KIe=s(_0);XMo=r(KIe,"This class cannot be instantiated directly using "),Wle=n(KIe,"CODE",{});var TKr=s(Wle);zMo=r(TKr,"__init__()"),TKr.forEach(t),QMo=r(KIe," (throws an error)."),KIe.forEach(t),WMo=i(Ns),rt=n(Ns,"DIV",{class:!0});var j3=s(rt);T(b0.$$.fragment,j3),HMo=i(j3),Hle=n(j3,"P",{});var MKr=s(Hle);UMo=r(MKr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),MKr.forEach(t),JMo=i(j3),Ai=n(j3,"P",{});var $Y=s(Ai);YMo=r($Y,`Note:
Loading a model from its configuration file does `),Ule=n($Y,"STRONG",{});var EKr=s(Ule);KMo=r(EKr,"not"),EKr.forEach(t),ZMo=r($Y,` load the model weights. It only affects the
model\u2019s configuration. Use `),yN=n($Y,"A",{href:!0});var CKr=s(yN);e4o=r(CKr,"from_pretrained()"),CKr.forEach(t),o4o=r($Y," to load the model weights."),$Y.forEach(t),r4o=i(j3),T(Z_.$$.fragment,j3),j3.forEach(t),t4o=i(Ns),Ye=n(Ns,"DIV",{class:!0});var Zt=s(Ye);T(v0.$$.fragment,Zt),a4o=i(Zt),Jle=n(Zt,"P",{});var wKr=s(Jle);n4o=r(wKr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),wKr.forEach(t),s4o=i(Zt),Aa=n(Zt,"P",{});var D3=s(Aa);l4o=r(D3,"The model class to instantiate is selected based on the "),Yle=n(D3,"CODE",{});var AKr=s(Yle);i4o=r(AKr,"model_type"),AKr.forEach(t),d4o=r(D3,` property of the config object (either
passed as an argument or loaded from `),Kle=n(D3,"CODE",{});var yKr=s(Kle);c4o=r(yKr,"pretrained_model_name_or_path"),yKr.forEach(t),f4o=r(D3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zle=n(D3,"CODE",{});var LKr=s(Zle);m4o=r(LKr,"pretrained_model_name_or_path"),LKr.forEach(t),g4o=r(D3,":"),D3.forEach(t),h4o=i(Zt),Q=n(Zt,"UL",{});var H=s(Q);e5=n(H,"LI",{});var QAe=s(e5);eie=n(QAe,"STRONG",{});var xKr=s(eie);p4o=r(xKr,"albert"),xKr.forEach(t),u4o=r(QAe," \u2014 "),LN=n(QAe,"A",{href:!0});var $Kr=s(LN);_4o=r($Kr,"AlbertForMaskedLM"),$Kr.forEach(t),b4o=r(QAe," (ALBERT model)"),QAe.forEach(t),v4o=i(H),o5=n(H,"LI",{});var WAe=s(o5);oie=n(WAe,"STRONG",{});var kKr=s(oie);F4o=r(kKr,"bart"),kKr.forEach(t),T4o=r(WAe," \u2014 "),xN=n(WAe,"A",{href:!0});var SKr=s(xN);M4o=r(SKr,"BartForConditionalGeneration"),SKr.forEach(t),E4o=r(WAe," (BART model)"),WAe.forEach(t),C4o=i(H),r5=n(H,"LI",{});var HAe=s(r5);rie=n(HAe,"STRONG",{});var RKr=s(rie);w4o=r(RKr,"bert"),RKr.forEach(t),A4o=r(HAe," \u2014 "),$N=n(HAe,"A",{href:!0});var BKr=s($N);y4o=r(BKr,"BertForMaskedLM"),BKr.forEach(t),L4o=r(HAe," (BERT model)"),HAe.forEach(t),x4o=i(H),t5=n(H,"LI",{});var UAe=s(t5);tie=n(UAe,"STRONG",{});var PKr=s(tie);$4o=r(PKr,"big_bird"),PKr.forEach(t),k4o=r(UAe," \u2014 "),kN=n(UAe,"A",{href:!0});var IKr=s(kN);S4o=r(IKr,"BigBirdForMaskedLM"),IKr.forEach(t),R4o=r(UAe," (BigBird model)"),UAe.forEach(t),B4o=i(H),a5=n(H,"LI",{});var JAe=s(a5);aie=n(JAe,"STRONG",{});var qKr=s(aie);P4o=r(qKr,"camembert"),qKr.forEach(t),I4o=r(JAe," \u2014 "),SN=n(JAe,"A",{href:!0});var NKr=s(SN);q4o=r(NKr,"CamembertForMaskedLM"),NKr.forEach(t),N4o=r(JAe," (CamemBERT model)"),JAe.forEach(t),j4o=i(H),n5=n(H,"LI",{});var YAe=s(n5);nie=n(YAe,"STRONG",{});var jKr=s(nie);D4o=r(jKr,"convbert"),jKr.forEach(t),G4o=r(YAe," \u2014 "),RN=n(YAe,"A",{href:!0});var DKr=s(RN);O4o=r(DKr,"ConvBertForMaskedLM"),DKr.forEach(t),V4o=r(YAe," (ConvBERT model)"),YAe.forEach(t),X4o=i(H),s5=n(H,"LI",{});var KAe=s(s5);sie=n(KAe,"STRONG",{});var GKr=s(sie);z4o=r(GKr,"data2vec-text"),GKr.forEach(t),Q4o=r(KAe," \u2014 "),BN=n(KAe,"A",{href:!0});var OKr=s(BN);W4o=r(OKr,"Data2VecTextForMaskedLM"),OKr.forEach(t),H4o=r(KAe," (Data2VecText model)"),KAe.forEach(t),U4o=i(H),l5=n(H,"LI",{});var ZAe=s(l5);lie=n(ZAe,"STRONG",{});var VKr=s(lie);J4o=r(VKr,"deberta"),VKr.forEach(t),Y4o=r(ZAe," \u2014 "),PN=n(ZAe,"A",{href:!0});var XKr=s(PN);K4o=r(XKr,"DebertaForMaskedLM"),XKr.forEach(t),Z4o=r(ZAe," (DeBERTa model)"),ZAe.forEach(t),eEo=i(H),i5=n(H,"LI",{});var e0e=s(i5);iie=n(e0e,"STRONG",{});var zKr=s(iie);oEo=r(zKr,"deberta-v2"),zKr.forEach(t),rEo=r(e0e," \u2014 "),IN=n(e0e,"A",{href:!0});var QKr=s(IN);tEo=r(QKr,"DebertaV2ForMaskedLM"),QKr.forEach(t),aEo=r(e0e," (DeBERTa-v2 model)"),e0e.forEach(t),nEo=i(H),d5=n(H,"LI",{});var o0e=s(d5);die=n(o0e,"STRONG",{});var WKr=s(die);sEo=r(WKr,"distilbert"),WKr.forEach(t),lEo=r(o0e," \u2014 "),qN=n(o0e,"A",{href:!0});var HKr=s(qN);iEo=r(HKr,"DistilBertForMaskedLM"),HKr.forEach(t),dEo=r(o0e," (DistilBERT model)"),o0e.forEach(t),cEo=i(H),c5=n(H,"LI",{});var r0e=s(c5);cie=n(r0e,"STRONG",{});var UKr=s(cie);fEo=r(UKr,"electra"),UKr.forEach(t),mEo=r(r0e," \u2014 "),NN=n(r0e,"A",{href:!0});var JKr=s(NN);gEo=r(JKr,"ElectraForMaskedLM"),JKr.forEach(t),hEo=r(r0e," (ELECTRA model)"),r0e.forEach(t),pEo=i(H),f5=n(H,"LI",{});var t0e=s(f5);fie=n(t0e,"STRONG",{});var YKr=s(fie);uEo=r(YKr,"flaubert"),YKr.forEach(t),_Eo=r(t0e," \u2014 "),jN=n(t0e,"A",{href:!0});var KKr=s(jN);bEo=r(KKr,"FlaubertWithLMHeadModel"),KKr.forEach(t),vEo=r(t0e," (FlauBERT model)"),t0e.forEach(t),FEo=i(H),m5=n(H,"LI",{});var a0e=s(m5);mie=n(a0e,"STRONG",{});var ZKr=s(mie);TEo=r(ZKr,"fnet"),ZKr.forEach(t),MEo=r(a0e," \u2014 "),DN=n(a0e,"A",{href:!0});var eZr=s(DN);EEo=r(eZr,"FNetForMaskedLM"),eZr.forEach(t),CEo=r(a0e," (FNet model)"),a0e.forEach(t),wEo=i(H),g5=n(H,"LI",{});var n0e=s(g5);gie=n(n0e,"STRONG",{});var oZr=s(gie);AEo=r(oZr,"funnel"),oZr.forEach(t),yEo=r(n0e," \u2014 "),GN=n(n0e,"A",{href:!0});var rZr=s(GN);LEo=r(rZr,"FunnelForMaskedLM"),rZr.forEach(t),xEo=r(n0e," (Funnel Transformer model)"),n0e.forEach(t),$Eo=i(H),h5=n(H,"LI",{});var s0e=s(h5);hie=n(s0e,"STRONG",{});var tZr=s(hie);kEo=r(tZr,"ibert"),tZr.forEach(t),SEo=r(s0e," \u2014 "),ON=n(s0e,"A",{href:!0});var aZr=s(ON);REo=r(aZr,"IBertForMaskedLM"),aZr.forEach(t),BEo=r(s0e," (I-BERT model)"),s0e.forEach(t),PEo=i(H),p5=n(H,"LI",{});var l0e=s(p5);pie=n(l0e,"STRONG",{});var nZr=s(pie);IEo=r(nZr,"layoutlm"),nZr.forEach(t),qEo=r(l0e," \u2014 "),VN=n(l0e,"A",{href:!0});var sZr=s(VN);NEo=r(sZr,"LayoutLMForMaskedLM"),sZr.forEach(t),jEo=r(l0e," (LayoutLM model)"),l0e.forEach(t),DEo=i(H),u5=n(H,"LI",{});var i0e=s(u5);uie=n(i0e,"STRONG",{});var lZr=s(uie);GEo=r(lZr,"longformer"),lZr.forEach(t),OEo=r(i0e," \u2014 "),XN=n(i0e,"A",{href:!0});var iZr=s(XN);VEo=r(iZr,"LongformerForMaskedLM"),iZr.forEach(t),XEo=r(i0e," (Longformer model)"),i0e.forEach(t),zEo=i(H),_5=n(H,"LI",{});var d0e=s(_5);_ie=n(d0e,"STRONG",{});var dZr=s(_ie);QEo=r(dZr,"mbart"),dZr.forEach(t),WEo=r(d0e," \u2014 "),zN=n(d0e,"A",{href:!0});var cZr=s(zN);HEo=r(cZr,"MBartForConditionalGeneration"),cZr.forEach(t),UEo=r(d0e," (mBART model)"),d0e.forEach(t),JEo=i(H),b5=n(H,"LI",{});var c0e=s(b5);bie=n(c0e,"STRONG",{});var fZr=s(bie);YEo=r(fZr,"megatron-bert"),fZr.forEach(t),KEo=r(c0e," \u2014 "),QN=n(c0e,"A",{href:!0});var mZr=s(QN);ZEo=r(mZr,"MegatronBertForMaskedLM"),mZr.forEach(t),eCo=r(c0e," (MegatronBert model)"),c0e.forEach(t),oCo=i(H),v5=n(H,"LI",{});var f0e=s(v5);vie=n(f0e,"STRONG",{});var gZr=s(vie);rCo=r(gZr,"mobilebert"),gZr.forEach(t),tCo=r(f0e," \u2014 "),WN=n(f0e,"A",{href:!0});var hZr=s(WN);aCo=r(hZr,"MobileBertForMaskedLM"),hZr.forEach(t),nCo=r(f0e," (MobileBERT model)"),f0e.forEach(t),sCo=i(H),F5=n(H,"LI",{});var m0e=s(F5);Fie=n(m0e,"STRONG",{});var pZr=s(Fie);lCo=r(pZr,"mpnet"),pZr.forEach(t),iCo=r(m0e," \u2014 "),HN=n(m0e,"A",{href:!0});var uZr=s(HN);dCo=r(uZr,"MPNetForMaskedLM"),uZr.forEach(t),cCo=r(m0e," (MPNet model)"),m0e.forEach(t),fCo=i(H),T5=n(H,"LI",{});var g0e=s(T5);Tie=n(g0e,"STRONG",{});var _Zr=s(Tie);mCo=r(_Zr,"nystromformer"),_Zr.forEach(t),gCo=r(g0e," \u2014 "),UN=n(g0e,"A",{href:!0});var bZr=s(UN);hCo=r(bZr,"NystromformerForMaskedLM"),bZr.forEach(t),pCo=r(g0e," (Nystromformer model)"),g0e.forEach(t),uCo=i(H),M5=n(H,"LI",{});var h0e=s(M5);Mie=n(h0e,"STRONG",{});var vZr=s(Mie);_Co=r(vZr,"perceiver"),vZr.forEach(t),bCo=r(h0e," \u2014 "),JN=n(h0e,"A",{href:!0});var FZr=s(JN);vCo=r(FZr,"PerceiverForMaskedLM"),FZr.forEach(t),FCo=r(h0e," (Perceiver model)"),h0e.forEach(t),TCo=i(H),E5=n(H,"LI",{});var p0e=s(E5);Eie=n(p0e,"STRONG",{});var TZr=s(Eie);MCo=r(TZr,"qdqbert"),TZr.forEach(t),ECo=r(p0e," \u2014 "),YN=n(p0e,"A",{href:!0});var MZr=s(YN);CCo=r(MZr,"QDQBertForMaskedLM"),MZr.forEach(t),wCo=r(p0e," (QDQBert model)"),p0e.forEach(t),ACo=i(H),C5=n(H,"LI",{});var u0e=s(C5);Cie=n(u0e,"STRONG",{});var EZr=s(Cie);yCo=r(EZr,"reformer"),EZr.forEach(t),LCo=r(u0e," \u2014 "),KN=n(u0e,"A",{href:!0});var CZr=s(KN);xCo=r(CZr,"ReformerForMaskedLM"),CZr.forEach(t),$Co=r(u0e," (Reformer model)"),u0e.forEach(t),kCo=i(H),w5=n(H,"LI",{});var _0e=s(w5);wie=n(_0e,"STRONG",{});var wZr=s(wie);SCo=r(wZr,"rembert"),wZr.forEach(t),RCo=r(_0e," \u2014 "),ZN=n(_0e,"A",{href:!0});var AZr=s(ZN);BCo=r(AZr,"RemBertForMaskedLM"),AZr.forEach(t),PCo=r(_0e," (RemBERT model)"),_0e.forEach(t),ICo=i(H),A5=n(H,"LI",{});var b0e=s(A5);Aie=n(b0e,"STRONG",{});var yZr=s(Aie);qCo=r(yZr,"roberta"),yZr.forEach(t),NCo=r(b0e," \u2014 "),ej=n(b0e,"A",{href:!0});var LZr=s(ej);jCo=r(LZr,"RobertaForMaskedLM"),LZr.forEach(t),DCo=r(b0e," (RoBERTa model)"),b0e.forEach(t),GCo=i(H),y5=n(H,"LI",{});var v0e=s(y5);yie=n(v0e,"STRONG",{});var xZr=s(yie);OCo=r(xZr,"roformer"),xZr.forEach(t),VCo=r(v0e," \u2014 "),oj=n(v0e,"A",{href:!0});var $Zr=s(oj);XCo=r($Zr,"RoFormerForMaskedLM"),$Zr.forEach(t),zCo=r(v0e," (RoFormer model)"),v0e.forEach(t),QCo=i(H),L5=n(H,"LI",{});var F0e=s(L5);Lie=n(F0e,"STRONG",{});var kZr=s(Lie);WCo=r(kZr,"squeezebert"),kZr.forEach(t),HCo=r(F0e," \u2014 "),rj=n(F0e,"A",{href:!0});var SZr=s(rj);UCo=r(SZr,"SqueezeBertForMaskedLM"),SZr.forEach(t),JCo=r(F0e," (SqueezeBERT model)"),F0e.forEach(t),YCo=i(H),x5=n(H,"LI",{});var T0e=s(x5);xie=n(T0e,"STRONG",{});var RZr=s(xie);KCo=r(RZr,"tapas"),RZr.forEach(t),ZCo=r(T0e," \u2014 "),tj=n(T0e,"A",{href:!0});var BZr=s(tj);e3o=r(BZr,"TapasForMaskedLM"),BZr.forEach(t),o3o=r(T0e," (TAPAS model)"),T0e.forEach(t),r3o=i(H),$5=n(H,"LI",{});var M0e=s($5);$ie=n(M0e,"STRONG",{});var PZr=s($ie);t3o=r(PZr,"wav2vec2"),PZr.forEach(t),a3o=r(M0e," \u2014 "),kie=n(M0e,"CODE",{});var IZr=s(kie);n3o=r(IZr,"Wav2Vec2ForMaskedLM"),IZr.forEach(t),s3o=r(M0e," (Wav2Vec2 model)"),M0e.forEach(t),l3o=i(H),k5=n(H,"LI",{});var E0e=s(k5);Sie=n(E0e,"STRONG",{});var qZr=s(Sie);i3o=r(qZr,"xlm"),qZr.forEach(t),d3o=r(E0e," \u2014 "),aj=n(E0e,"A",{href:!0});var NZr=s(aj);c3o=r(NZr,"XLMWithLMHeadModel"),NZr.forEach(t),f3o=r(E0e," (XLM model)"),E0e.forEach(t),m3o=i(H),S5=n(H,"LI",{});var C0e=s(S5);Rie=n(C0e,"STRONG",{});var jZr=s(Rie);g3o=r(jZr,"xlm-roberta"),jZr.forEach(t),h3o=r(C0e," \u2014 "),nj=n(C0e,"A",{href:!0});var DZr=s(nj);p3o=r(DZr,"XLMRobertaForMaskedLM"),DZr.forEach(t),u3o=r(C0e," (XLM-RoBERTa model)"),C0e.forEach(t),_3o=i(H),R5=n(H,"LI",{});var w0e=s(R5);Bie=n(w0e,"STRONG",{});var GZr=s(Bie);b3o=r(GZr,"xlm-roberta-xl"),GZr.forEach(t),v3o=r(w0e," \u2014 "),sj=n(w0e,"A",{href:!0});var OZr=s(sj);F3o=r(OZr,"XLMRobertaXLForMaskedLM"),OZr.forEach(t),T3o=r(w0e," (XLM-RoBERTa-XL model)"),w0e.forEach(t),M3o=i(H),B5=n(H,"LI",{});var A0e=s(B5);Pie=n(A0e,"STRONG",{});var VZr=s(Pie);E3o=r(VZr,"yoso"),VZr.forEach(t),C3o=r(A0e," \u2014 "),lj=n(A0e,"A",{href:!0});var XZr=s(lj);w3o=r(XZr,"YosoForMaskedLM"),XZr.forEach(t),A3o=r(A0e," (YOSO model)"),A0e.forEach(t),H.forEach(t),y3o=i(Zt),P5=n(Zt,"P",{});var y0e=s(P5);L3o=r(y0e,"The model is set in evaluation mode by default using "),Iie=n(y0e,"CODE",{});var zZr=s(Iie);x3o=r(zZr,"model.eval()"),zZr.forEach(t),$3o=r(y0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qie=n(y0e,"CODE",{});var QZr=s(qie);k3o=r(QZr,"model.train()"),QZr.forEach(t),y0e.forEach(t),S3o=i(Zt),T(I5.$$.fragment,Zt),Zt.forEach(t),Ns.forEach(t),YBe=i(f),yi=n(f,"H2",{class:!0});var ZIe=s(yi);q5=n(ZIe,"A",{id:!0,class:!0,href:!0});var WZr=s(q5);Nie=n(WZr,"SPAN",{});var HZr=s(Nie);T(F0.$$.fragment,HZr),HZr.forEach(t),WZr.forEach(t),R3o=i(ZIe),jie=n(ZIe,"SPAN",{});var UZr=s(jie);B3o=r(UZr,"AutoModelForSeq2SeqLM"),UZr.forEach(t),ZIe.forEach(t),KBe=i(f),So=n(f,"DIV",{class:!0});var js=s(So);T(T0.$$.fragment,js),P3o=i(js),Li=n(js,"P",{});var kY=s(Li);I3o=r(kY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ij=n(kY,"A",{href:!0});var JZr=s(ij);q3o=r(JZr,"from_pretrained()"),JZr.forEach(t),N3o=r(kY," class method or the "),dj=n(kY,"A",{href:!0});var YZr=s(dj);j3o=r(YZr,"from_config()"),YZr.forEach(t),D3o=r(kY,` class
method.`),kY.forEach(t),G3o=i(js),M0=n(js,"P",{});var eqe=s(M0);O3o=r(eqe,"This class cannot be instantiated directly using "),Die=n(eqe,"CODE",{});var KZr=s(Die);V3o=r(KZr,"__init__()"),KZr.forEach(t),X3o=r(eqe," (throws an error)."),eqe.forEach(t),z3o=i(js),tt=n(js,"DIV",{class:!0});var G3=s(tt);T(E0.$$.fragment,G3),Q3o=i(G3),Gie=n(G3,"P",{});var ZZr=s(Gie);W3o=r(ZZr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ZZr.forEach(t),H3o=i(G3),xi=n(G3,"P",{});var SY=s(xi);U3o=r(SY,`Note:
Loading a model from its configuration file does `),Oie=n(SY,"STRONG",{});var eet=s(Oie);J3o=r(eet,"not"),eet.forEach(t),Y3o=r(SY,` load the model weights. It only affects the
model\u2019s configuration. Use `),cj=n(SY,"A",{href:!0});var oet=s(cj);K3o=r(oet,"from_pretrained()"),oet.forEach(t),Z3o=r(SY," to load the model weights."),SY.forEach(t),ewo=i(G3),T(N5.$$.fragment,G3),G3.forEach(t),owo=i(js),Ke=n(js,"DIV",{class:!0});var ea=s(Ke);T(C0.$$.fragment,ea),rwo=i(ea),Vie=n(ea,"P",{});var ret=s(Vie);two=r(ret,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ret.forEach(t),awo=i(ea),ya=n(ea,"P",{});var O3=s(ya);nwo=r(O3,"The model class to instantiate is selected based on the "),Xie=n(O3,"CODE",{});var tet=s(Xie);swo=r(tet,"model_type"),tet.forEach(t),lwo=r(O3,` property of the config object (either
passed as an argument or loaded from `),zie=n(O3,"CODE",{});var aet=s(zie);iwo=r(aet,"pretrained_model_name_or_path"),aet.forEach(t),dwo=r(O3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qie=n(O3,"CODE",{});var net=s(Qie);cwo=r(net,"pretrained_model_name_or_path"),net.forEach(t),fwo=r(O3,":"),O3.forEach(t),mwo=i(ea),he=n(ea,"UL",{});var ue=s(he);j5=n(ue,"LI",{});var L0e=s(j5);Wie=n(L0e,"STRONG",{});var set=s(Wie);gwo=r(set,"bart"),set.forEach(t),hwo=r(L0e," \u2014 "),fj=n(L0e,"A",{href:!0});var iet=s(fj);pwo=r(iet,"BartForConditionalGeneration"),iet.forEach(t),uwo=r(L0e," (BART model)"),L0e.forEach(t),_wo=i(ue),D5=n(ue,"LI",{});var x0e=s(D5);Hie=n(x0e,"STRONG",{});var det=s(Hie);bwo=r(det,"bigbird_pegasus"),det.forEach(t),vwo=r(x0e," \u2014 "),mj=n(x0e,"A",{href:!0});var cet=s(mj);Fwo=r(cet,"BigBirdPegasusForConditionalGeneration"),cet.forEach(t),Two=r(x0e," (BigBirdPegasus model)"),x0e.forEach(t),Mwo=i(ue),G5=n(ue,"LI",{});var $0e=s(G5);Uie=n($0e,"STRONG",{});var fet=s(Uie);Ewo=r(fet,"blenderbot"),fet.forEach(t),Cwo=r($0e," \u2014 "),gj=n($0e,"A",{href:!0});var met=s(gj);wwo=r(met,"BlenderbotForConditionalGeneration"),met.forEach(t),Awo=r($0e," (Blenderbot model)"),$0e.forEach(t),ywo=i(ue),O5=n(ue,"LI",{});var k0e=s(O5);Jie=n(k0e,"STRONG",{});var get=s(Jie);Lwo=r(get,"blenderbot-small"),get.forEach(t),xwo=r(k0e," \u2014 "),hj=n(k0e,"A",{href:!0});var het=s(hj);$wo=r(het,"BlenderbotSmallForConditionalGeneration"),het.forEach(t),kwo=r(k0e," (BlenderbotSmall model)"),k0e.forEach(t),Swo=i(ue),V5=n(ue,"LI",{});var S0e=s(V5);Yie=n(S0e,"STRONG",{});var pet=s(Yie);Rwo=r(pet,"encoder-decoder"),pet.forEach(t),Bwo=r(S0e," \u2014 "),pj=n(S0e,"A",{href:!0});var uet=s(pj);Pwo=r(uet,"EncoderDecoderModel"),uet.forEach(t),Iwo=r(S0e," (Encoder decoder model)"),S0e.forEach(t),qwo=i(ue),X5=n(ue,"LI",{});var R0e=s(X5);Kie=n(R0e,"STRONG",{});var _et=s(Kie);Nwo=r(_et,"fsmt"),_et.forEach(t),jwo=r(R0e," \u2014 "),uj=n(R0e,"A",{href:!0});var bet=s(uj);Dwo=r(bet,"FSMTForConditionalGeneration"),bet.forEach(t),Gwo=r(R0e," (FairSeq Machine-Translation model)"),R0e.forEach(t),Owo=i(ue),z5=n(ue,"LI",{});var B0e=s(z5);Zie=n(B0e,"STRONG",{});var vet=s(Zie);Vwo=r(vet,"led"),vet.forEach(t),Xwo=r(B0e," \u2014 "),_j=n(B0e,"A",{href:!0});var Fet=s(_j);zwo=r(Fet,"LEDForConditionalGeneration"),Fet.forEach(t),Qwo=r(B0e," (LED model)"),B0e.forEach(t),Wwo=i(ue),Q5=n(ue,"LI",{});var P0e=s(Q5);ede=n(P0e,"STRONG",{});var Tet=s(ede);Hwo=r(Tet,"m2m_100"),Tet.forEach(t),Uwo=r(P0e," \u2014 "),bj=n(P0e,"A",{href:!0});var Met=s(bj);Jwo=r(Met,"M2M100ForConditionalGeneration"),Met.forEach(t),Ywo=r(P0e," (M2M100 model)"),P0e.forEach(t),Kwo=i(ue),W5=n(ue,"LI",{});var I0e=s(W5);ode=n(I0e,"STRONG",{});var Eet=s(ode);Zwo=r(Eet,"marian"),Eet.forEach(t),eAo=r(I0e," \u2014 "),vj=n(I0e,"A",{href:!0});var Cet=s(vj);oAo=r(Cet,"MarianMTModel"),Cet.forEach(t),rAo=r(I0e," (Marian model)"),I0e.forEach(t),tAo=i(ue),H5=n(ue,"LI",{});var q0e=s(H5);rde=n(q0e,"STRONG",{});var wet=s(rde);aAo=r(wet,"mbart"),wet.forEach(t),nAo=r(q0e," \u2014 "),Fj=n(q0e,"A",{href:!0});var Aet=s(Fj);sAo=r(Aet,"MBartForConditionalGeneration"),Aet.forEach(t),lAo=r(q0e," (mBART model)"),q0e.forEach(t),iAo=i(ue),U5=n(ue,"LI",{});var N0e=s(U5);tde=n(N0e,"STRONG",{});var yet=s(tde);dAo=r(yet,"mt5"),yet.forEach(t),cAo=r(N0e," \u2014 "),Tj=n(N0e,"A",{href:!0});var Let=s(Tj);fAo=r(Let,"MT5ForConditionalGeneration"),Let.forEach(t),mAo=r(N0e," (mT5 model)"),N0e.forEach(t),gAo=i(ue),J5=n(ue,"LI",{});var j0e=s(J5);ade=n(j0e,"STRONG",{});var xet=s(ade);hAo=r(xet,"pegasus"),xet.forEach(t),pAo=r(j0e," \u2014 "),Mj=n(j0e,"A",{href:!0});var $et=s(Mj);uAo=r($et,"PegasusForConditionalGeneration"),$et.forEach(t),_Ao=r(j0e," (Pegasus model)"),j0e.forEach(t),bAo=i(ue),Y5=n(ue,"LI",{});var D0e=s(Y5);nde=n(D0e,"STRONG",{});var ket=s(nde);vAo=r(ket,"plbart"),ket.forEach(t),FAo=r(D0e," \u2014 "),Ej=n(D0e,"A",{href:!0});var Set=s(Ej);TAo=r(Set,"PLBartForConditionalGeneration"),Set.forEach(t),MAo=r(D0e," (PLBart model)"),D0e.forEach(t),EAo=i(ue),K5=n(ue,"LI",{});var G0e=s(K5);sde=n(G0e,"STRONG",{});var Ret=s(sde);CAo=r(Ret,"prophetnet"),Ret.forEach(t),wAo=r(G0e," \u2014 "),Cj=n(G0e,"A",{href:!0});var Bet=s(Cj);AAo=r(Bet,"ProphetNetForConditionalGeneration"),Bet.forEach(t),yAo=r(G0e," (ProphetNet model)"),G0e.forEach(t),LAo=i(ue),Z5=n(ue,"LI",{});var O0e=s(Z5);lde=n(O0e,"STRONG",{});var Pet=s(lde);xAo=r(Pet,"t5"),Pet.forEach(t),$Ao=r(O0e," \u2014 "),wj=n(O0e,"A",{href:!0});var Iet=s(wj);kAo=r(Iet,"T5ForConditionalGeneration"),Iet.forEach(t),SAo=r(O0e," (T5 model)"),O0e.forEach(t),RAo=i(ue),e1=n(ue,"LI",{});var V0e=s(e1);ide=n(V0e,"STRONG",{});var qet=s(ide);BAo=r(qet,"tapex"),qet.forEach(t),PAo=r(V0e," \u2014 "),Aj=n(V0e,"A",{href:!0});var Net=s(Aj);IAo=r(Net,"BartForConditionalGeneration"),Net.forEach(t),qAo=r(V0e," (TAPEX model)"),V0e.forEach(t),NAo=i(ue),o1=n(ue,"LI",{});var X0e=s(o1);dde=n(X0e,"STRONG",{});var jet=s(dde);jAo=r(jet,"xlm-prophetnet"),jet.forEach(t),DAo=r(X0e," \u2014 "),yj=n(X0e,"A",{href:!0});var Det=s(yj);GAo=r(Det,"XLMProphetNetForConditionalGeneration"),Det.forEach(t),OAo=r(X0e," (XLMProphetNet model)"),X0e.forEach(t),ue.forEach(t),VAo=i(ea),r1=n(ea,"P",{});var z0e=s(r1);XAo=r(z0e,"The model is set in evaluation mode by default using "),cde=n(z0e,"CODE",{});var Get=s(cde);zAo=r(Get,"model.eval()"),Get.forEach(t),QAo=r(z0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fde=n(z0e,"CODE",{});var Oet=s(fde);WAo=r(Oet,"model.train()"),Oet.forEach(t),z0e.forEach(t),HAo=i(ea),T(t1.$$.fragment,ea),ea.forEach(t),js.forEach(t),ZBe=i(f),$i=n(f,"H2",{class:!0});var oqe=s($i);a1=n(oqe,"A",{id:!0,class:!0,href:!0});var Vet=s(a1);mde=n(Vet,"SPAN",{});var Xet=s(mde);T(w0.$$.fragment,Xet),Xet.forEach(t),Vet.forEach(t),UAo=i(oqe),gde=n(oqe,"SPAN",{});var zet=s(gde);JAo=r(zet,"AutoModelForSequenceClassification"),zet.forEach(t),oqe.forEach(t),ePe=i(f),Ro=n(f,"DIV",{class:!0});var Ds=s(Ro);T(A0.$$.fragment,Ds),YAo=i(Ds),ki=n(Ds,"P",{});var RY=s(ki);KAo=r(RY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Lj=n(RY,"A",{href:!0});var Qet=s(Lj);ZAo=r(Qet,"from_pretrained()"),Qet.forEach(t),e0o=r(RY," class method or the "),xj=n(RY,"A",{href:!0});var Wet=s(xj);o0o=r(Wet,"from_config()"),Wet.forEach(t),r0o=r(RY,` class
method.`),RY.forEach(t),t0o=i(Ds),y0=n(Ds,"P",{});var rqe=s(y0);a0o=r(rqe,"This class cannot be instantiated directly using "),hde=n(rqe,"CODE",{});var Het=s(hde);n0o=r(Het,"__init__()"),Het.forEach(t),s0o=r(rqe," (throws an error)."),rqe.forEach(t),l0o=i(Ds),at=n(Ds,"DIV",{class:!0});var V3=s(at);T(L0.$$.fragment,V3),i0o=i(V3),pde=n(V3,"P",{});var Uet=s(pde);d0o=r(Uet,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Uet.forEach(t),c0o=i(V3),Si=n(V3,"P",{});var BY=s(Si);f0o=r(BY,`Note:
Loading a model from its configuration file does `),ude=n(BY,"STRONG",{});var Jet=s(ude);m0o=r(Jet,"not"),Jet.forEach(t),g0o=r(BY,` load the model weights. It only affects the
model\u2019s configuration. Use `),$j=n(BY,"A",{href:!0});var Yet=s($j);h0o=r(Yet,"from_pretrained()"),Yet.forEach(t),p0o=r(BY," to load the model weights."),BY.forEach(t),u0o=i(V3),T(n1.$$.fragment,V3),V3.forEach(t),_0o=i(Ds),Ze=n(Ds,"DIV",{class:!0});var oa=s(Ze);T(x0.$$.fragment,oa),b0o=i(oa),_de=n(oa,"P",{});var Ket=s(_de);v0o=r(Ket,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Ket.forEach(t),F0o=i(oa),La=n(oa,"P",{});var X3=s(La);T0o=r(X3,"The model class to instantiate is selected based on the "),bde=n(X3,"CODE",{});var Zet=s(bde);M0o=r(Zet,"model_type"),Zet.forEach(t),E0o=r(X3,` property of the config object (either
passed as an argument or loaded from `),vde=n(X3,"CODE",{});var eot=s(vde);C0o=r(eot,"pretrained_model_name_or_path"),eot.forEach(t),w0o=r(X3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fde=n(X3,"CODE",{});var oot=s(Fde);A0o=r(oot,"pretrained_model_name_or_path"),oot.forEach(t),y0o=r(X3,":"),X3.forEach(t),L0o=i(oa),q=n(oa,"UL",{});var N=s(q);s1=n(N,"LI",{});var Q0e=s(s1);Tde=n(Q0e,"STRONG",{});var rot=s(Tde);x0o=r(rot,"albert"),rot.forEach(t),$0o=r(Q0e," \u2014 "),kj=n(Q0e,"A",{href:!0});var tot=s(kj);k0o=r(tot,"AlbertForSequenceClassification"),tot.forEach(t),S0o=r(Q0e," (ALBERT model)"),Q0e.forEach(t),R0o=i(N),l1=n(N,"LI",{});var W0e=s(l1);Mde=n(W0e,"STRONG",{});var aot=s(Mde);B0o=r(aot,"bart"),aot.forEach(t),P0o=r(W0e," \u2014 "),Sj=n(W0e,"A",{href:!0});var not=s(Sj);I0o=r(not,"BartForSequenceClassification"),not.forEach(t),q0o=r(W0e," (BART model)"),W0e.forEach(t),N0o=i(N),i1=n(N,"LI",{});var H0e=s(i1);Ede=n(H0e,"STRONG",{});var sot=s(Ede);j0o=r(sot,"bert"),sot.forEach(t),D0o=r(H0e," \u2014 "),Rj=n(H0e,"A",{href:!0});var lot=s(Rj);G0o=r(lot,"BertForSequenceClassification"),lot.forEach(t),O0o=r(H0e," (BERT model)"),H0e.forEach(t),V0o=i(N),d1=n(N,"LI",{});var U0e=s(d1);Cde=n(U0e,"STRONG",{});var iot=s(Cde);X0o=r(iot,"big_bird"),iot.forEach(t),z0o=r(U0e," \u2014 "),Bj=n(U0e,"A",{href:!0});var dot=s(Bj);Q0o=r(dot,"BigBirdForSequenceClassification"),dot.forEach(t),W0o=r(U0e," (BigBird model)"),U0e.forEach(t),H0o=i(N),c1=n(N,"LI",{});var J0e=s(c1);wde=n(J0e,"STRONG",{});var cot=s(wde);U0o=r(cot,"bigbird_pegasus"),cot.forEach(t),J0o=r(J0e," \u2014 "),Pj=n(J0e,"A",{href:!0});var fot=s(Pj);Y0o=r(fot,"BigBirdPegasusForSequenceClassification"),fot.forEach(t),K0o=r(J0e," (BigBirdPegasus model)"),J0e.forEach(t),Z0o=i(N),f1=n(N,"LI",{});var Y0e=s(f1);Ade=n(Y0e,"STRONG",{});var mot=s(Ade);eyo=r(mot,"camembert"),mot.forEach(t),oyo=r(Y0e," \u2014 "),Ij=n(Y0e,"A",{href:!0});var got=s(Ij);ryo=r(got,"CamembertForSequenceClassification"),got.forEach(t),tyo=r(Y0e," (CamemBERT model)"),Y0e.forEach(t),ayo=i(N),m1=n(N,"LI",{});var K0e=s(m1);yde=n(K0e,"STRONG",{});var hot=s(yde);nyo=r(hot,"canine"),hot.forEach(t),syo=r(K0e," \u2014 "),qj=n(K0e,"A",{href:!0});var pot=s(qj);lyo=r(pot,"CanineForSequenceClassification"),pot.forEach(t),iyo=r(K0e," (Canine model)"),K0e.forEach(t),dyo=i(N),g1=n(N,"LI",{});var Z0e=s(g1);Lde=n(Z0e,"STRONG",{});var uot=s(Lde);cyo=r(uot,"convbert"),uot.forEach(t),fyo=r(Z0e," \u2014 "),Nj=n(Z0e,"A",{href:!0});var _ot=s(Nj);myo=r(_ot,"ConvBertForSequenceClassification"),_ot.forEach(t),gyo=r(Z0e," (ConvBERT model)"),Z0e.forEach(t),hyo=i(N),h1=n(N,"LI",{});var eye=s(h1);xde=n(eye,"STRONG",{});var bot=s(xde);pyo=r(bot,"ctrl"),bot.forEach(t),uyo=r(eye," \u2014 "),jj=n(eye,"A",{href:!0});var vot=s(jj);_yo=r(vot,"CTRLForSequenceClassification"),vot.forEach(t),byo=r(eye," (CTRL model)"),eye.forEach(t),vyo=i(N),p1=n(N,"LI",{});var oye=s(p1);$de=n(oye,"STRONG",{});var Fot=s($de);Fyo=r(Fot,"data2vec-text"),Fot.forEach(t),Tyo=r(oye," \u2014 "),Dj=n(oye,"A",{href:!0});var Tot=s(Dj);Myo=r(Tot,"Data2VecTextForSequenceClassification"),Tot.forEach(t),Eyo=r(oye," (Data2VecText model)"),oye.forEach(t),Cyo=i(N),u1=n(N,"LI",{});var rye=s(u1);kde=n(rye,"STRONG",{});var Mot=s(kde);wyo=r(Mot,"deberta"),Mot.forEach(t),Ayo=r(rye," \u2014 "),Gj=n(rye,"A",{href:!0});var Eot=s(Gj);yyo=r(Eot,"DebertaForSequenceClassification"),Eot.forEach(t),Lyo=r(rye," (DeBERTa model)"),rye.forEach(t),xyo=i(N),_1=n(N,"LI",{});var tye=s(_1);Sde=n(tye,"STRONG",{});var Cot=s(Sde);$yo=r(Cot,"deberta-v2"),Cot.forEach(t),kyo=r(tye," \u2014 "),Oj=n(tye,"A",{href:!0});var wot=s(Oj);Syo=r(wot,"DebertaV2ForSequenceClassification"),wot.forEach(t),Ryo=r(tye," (DeBERTa-v2 model)"),tye.forEach(t),Byo=i(N),b1=n(N,"LI",{});var aye=s(b1);Rde=n(aye,"STRONG",{});var Aot=s(Rde);Pyo=r(Aot,"distilbert"),Aot.forEach(t),Iyo=r(aye," \u2014 "),Vj=n(aye,"A",{href:!0});var yot=s(Vj);qyo=r(yot,"DistilBertForSequenceClassification"),yot.forEach(t),Nyo=r(aye," (DistilBERT model)"),aye.forEach(t),jyo=i(N),v1=n(N,"LI",{});var nye=s(v1);Bde=n(nye,"STRONG",{});var Lot=s(Bde);Dyo=r(Lot,"electra"),Lot.forEach(t),Gyo=r(nye," \u2014 "),Xj=n(nye,"A",{href:!0});var xot=s(Xj);Oyo=r(xot,"ElectraForSequenceClassification"),xot.forEach(t),Vyo=r(nye," (ELECTRA model)"),nye.forEach(t),Xyo=i(N),F1=n(N,"LI",{});var sye=s(F1);Pde=n(sye,"STRONG",{});var $ot=s(Pde);zyo=r($ot,"flaubert"),$ot.forEach(t),Qyo=r(sye," \u2014 "),zj=n(sye,"A",{href:!0});var kot=s(zj);Wyo=r(kot,"FlaubertForSequenceClassification"),kot.forEach(t),Hyo=r(sye," (FlauBERT model)"),sye.forEach(t),Uyo=i(N),T1=n(N,"LI",{});var lye=s(T1);Ide=n(lye,"STRONG",{});var Sot=s(Ide);Jyo=r(Sot,"fnet"),Sot.forEach(t),Yyo=r(lye," \u2014 "),Qj=n(lye,"A",{href:!0});var Rot=s(Qj);Kyo=r(Rot,"FNetForSequenceClassification"),Rot.forEach(t),Zyo=r(lye," (FNet model)"),lye.forEach(t),eLo=i(N),M1=n(N,"LI",{});var iye=s(M1);qde=n(iye,"STRONG",{});var Bot=s(qde);oLo=r(Bot,"funnel"),Bot.forEach(t),rLo=r(iye," \u2014 "),Wj=n(iye,"A",{href:!0});var Pot=s(Wj);tLo=r(Pot,"FunnelForSequenceClassification"),Pot.forEach(t),aLo=r(iye," (Funnel Transformer model)"),iye.forEach(t),nLo=i(N),E1=n(N,"LI",{});var dye=s(E1);Nde=n(dye,"STRONG",{});var Iot=s(Nde);sLo=r(Iot,"gpt2"),Iot.forEach(t),lLo=r(dye," \u2014 "),Hj=n(dye,"A",{href:!0});var qot=s(Hj);iLo=r(qot,"GPT2ForSequenceClassification"),qot.forEach(t),dLo=r(dye," (OpenAI GPT-2 model)"),dye.forEach(t),cLo=i(N),C1=n(N,"LI",{});var cye=s(C1);jde=n(cye,"STRONG",{});var Not=s(jde);fLo=r(Not,"gpt_neo"),Not.forEach(t),mLo=r(cye," \u2014 "),Uj=n(cye,"A",{href:!0});var jot=s(Uj);gLo=r(jot,"GPTNeoForSequenceClassification"),jot.forEach(t),hLo=r(cye," (GPT Neo model)"),cye.forEach(t),pLo=i(N),w1=n(N,"LI",{});var fye=s(w1);Dde=n(fye,"STRONG",{});var Dot=s(Dde);uLo=r(Dot,"gptj"),Dot.forEach(t),_Lo=r(fye," \u2014 "),Jj=n(fye,"A",{href:!0});var Got=s(Jj);bLo=r(Got,"GPTJForSequenceClassification"),Got.forEach(t),vLo=r(fye," (GPT-J model)"),fye.forEach(t),FLo=i(N),A1=n(N,"LI",{});var mye=s(A1);Gde=n(mye,"STRONG",{});var Oot=s(Gde);TLo=r(Oot,"ibert"),Oot.forEach(t),MLo=r(mye," \u2014 "),Yj=n(mye,"A",{href:!0});var Vot=s(Yj);ELo=r(Vot,"IBertForSequenceClassification"),Vot.forEach(t),CLo=r(mye," (I-BERT model)"),mye.forEach(t),wLo=i(N),y1=n(N,"LI",{});var gye=s(y1);Ode=n(gye,"STRONG",{});var Xot=s(Ode);ALo=r(Xot,"layoutlm"),Xot.forEach(t),yLo=r(gye," \u2014 "),Kj=n(gye,"A",{href:!0});var zot=s(Kj);LLo=r(zot,"LayoutLMForSequenceClassification"),zot.forEach(t),xLo=r(gye," (LayoutLM model)"),gye.forEach(t),$Lo=i(N),L1=n(N,"LI",{});var hye=s(L1);Vde=n(hye,"STRONG",{});var Qot=s(Vde);kLo=r(Qot,"layoutlmv2"),Qot.forEach(t),SLo=r(hye," \u2014 "),Zj=n(hye,"A",{href:!0});var Wot=s(Zj);RLo=r(Wot,"LayoutLMv2ForSequenceClassification"),Wot.forEach(t),BLo=r(hye," (LayoutLMv2 model)"),hye.forEach(t),PLo=i(N),x1=n(N,"LI",{});var pye=s(x1);Xde=n(pye,"STRONG",{});var Hot=s(Xde);ILo=r(Hot,"led"),Hot.forEach(t),qLo=r(pye," \u2014 "),eD=n(pye,"A",{href:!0});var Uot=s(eD);NLo=r(Uot,"LEDForSequenceClassification"),Uot.forEach(t),jLo=r(pye," (LED model)"),pye.forEach(t),DLo=i(N),$1=n(N,"LI",{});var uye=s($1);zde=n(uye,"STRONG",{});var Jot=s(zde);GLo=r(Jot,"longformer"),Jot.forEach(t),OLo=r(uye," \u2014 "),oD=n(uye,"A",{href:!0});var Yot=s(oD);VLo=r(Yot,"LongformerForSequenceClassification"),Yot.forEach(t),XLo=r(uye," (Longformer model)"),uye.forEach(t),zLo=i(N),k1=n(N,"LI",{});var _ye=s(k1);Qde=n(_ye,"STRONG",{});var Kot=s(Qde);QLo=r(Kot,"mbart"),Kot.forEach(t),WLo=r(_ye," \u2014 "),rD=n(_ye,"A",{href:!0});var Zot=s(rD);HLo=r(Zot,"MBartForSequenceClassification"),Zot.forEach(t),ULo=r(_ye," (mBART model)"),_ye.forEach(t),JLo=i(N),S1=n(N,"LI",{});var bye=s(S1);Wde=n(bye,"STRONG",{});var ert=s(Wde);YLo=r(ert,"megatron-bert"),ert.forEach(t),KLo=r(bye," \u2014 "),tD=n(bye,"A",{href:!0});var ort=s(tD);ZLo=r(ort,"MegatronBertForSequenceClassification"),ort.forEach(t),e8o=r(bye," (MegatronBert model)"),bye.forEach(t),o8o=i(N),R1=n(N,"LI",{});var vye=s(R1);Hde=n(vye,"STRONG",{});var rrt=s(Hde);r8o=r(rrt,"mobilebert"),rrt.forEach(t),t8o=r(vye," \u2014 "),aD=n(vye,"A",{href:!0});var trt=s(aD);a8o=r(trt,"MobileBertForSequenceClassification"),trt.forEach(t),n8o=r(vye," (MobileBERT model)"),vye.forEach(t),s8o=i(N),B1=n(N,"LI",{});var Fye=s(B1);Ude=n(Fye,"STRONG",{});var art=s(Ude);l8o=r(art,"mpnet"),art.forEach(t),i8o=r(Fye," \u2014 "),nD=n(Fye,"A",{href:!0});var nrt=s(nD);d8o=r(nrt,"MPNetForSequenceClassification"),nrt.forEach(t),c8o=r(Fye," (MPNet model)"),Fye.forEach(t),f8o=i(N),P1=n(N,"LI",{});var Tye=s(P1);Jde=n(Tye,"STRONG",{});var srt=s(Jde);m8o=r(srt,"nystromformer"),srt.forEach(t),g8o=r(Tye," \u2014 "),sD=n(Tye,"A",{href:!0});var lrt=s(sD);h8o=r(lrt,"NystromformerForSequenceClassification"),lrt.forEach(t),p8o=r(Tye," (Nystromformer model)"),Tye.forEach(t),u8o=i(N),I1=n(N,"LI",{});var Mye=s(I1);Yde=n(Mye,"STRONG",{});var irt=s(Yde);_8o=r(irt,"openai-gpt"),irt.forEach(t),b8o=r(Mye," \u2014 "),lD=n(Mye,"A",{href:!0});var drt=s(lD);v8o=r(drt,"OpenAIGPTForSequenceClassification"),drt.forEach(t),F8o=r(Mye," (OpenAI GPT model)"),Mye.forEach(t),T8o=i(N),q1=n(N,"LI",{});var Eye=s(q1);Kde=n(Eye,"STRONG",{});var crt=s(Kde);M8o=r(crt,"perceiver"),crt.forEach(t),E8o=r(Eye," \u2014 "),iD=n(Eye,"A",{href:!0});var frt=s(iD);C8o=r(frt,"PerceiverForSequenceClassification"),frt.forEach(t),w8o=r(Eye," (Perceiver model)"),Eye.forEach(t),A8o=i(N),N1=n(N,"LI",{});var Cye=s(N1);Zde=n(Cye,"STRONG",{});var mrt=s(Zde);y8o=r(mrt,"plbart"),mrt.forEach(t),L8o=r(Cye," \u2014 "),dD=n(Cye,"A",{href:!0});var grt=s(dD);x8o=r(grt,"PLBartForSequenceClassification"),grt.forEach(t),$8o=r(Cye," (PLBart model)"),Cye.forEach(t),k8o=i(N),j1=n(N,"LI",{});var wye=s(j1);ece=n(wye,"STRONG",{});var hrt=s(ece);S8o=r(hrt,"qdqbert"),hrt.forEach(t),R8o=r(wye," \u2014 "),cD=n(wye,"A",{href:!0});var prt=s(cD);B8o=r(prt,"QDQBertForSequenceClassification"),prt.forEach(t),P8o=r(wye," (QDQBert model)"),wye.forEach(t),I8o=i(N),D1=n(N,"LI",{});var Aye=s(D1);oce=n(Aye,"STRONG",{});var urt=s(oce);q8o=r(urt,"reformer"),urt.forEach(t),N8o=r(Aye," \u2014 "),fD=n(Aye,"A",{href:!0});var _rt=s(fD);j8o=r(_rt,"ReformerForSequenceClassification"),_rt.forEach(t),D8o=r(Aye," (Reformer model)"),Aye.forEach(t),G8o=i(N),G1=n(N,"LI",{});var yye=s(G1);rce=n(yye,"STRONG",{});var brt=s(rce);O8o=r(brt,"rembert"),brt.forEach(t),V8o=r(yye," \u2014 "),mD=n(yye,"A",{href:!0});var vrt=s(mD);X8o=r(vrt,"RemBertForSequenceClassification"),vrt.forEach(t),z8o=r(yye," (RemBERT model)"),yye.forEach(t),Q8o=i(N),O1=n(N,"LI",{});var Lye=s(O1);tce=n(Lye,"STRONG",{});var Frt=s(tce);W8o=r(Frt,"roberta"),Frt.forEach(t),H8o=r(Lye," \u2014 "),gD=n(Lye,"A",{href:!0});var Trt=s(gD);U8o=r(Trt,"RobertaForSequenceClassification"),Trt.forEach(t),J8o=r(Lye," (RoBERTa model)"),Lye.forEach(t),Y8o=i(N),V1=n(N,"LI",{});var xye=s(V1);ace=n(xye,"STRONG",{});var Mrt=s(ace);K8o=r(Mrt,"roformer"),Mrt.forEach(t),Z8o=r(xye," \u2014 "),hD=n(xye,"A",{href:!0});var Ert=s(hD);exo=r(Ert,"RoFormerForSequenceClassification"),Ert.forEach(t),oxo=r(xye," (RoFormer model)"),xye.forEach(t),rxo=i(N),X1=n(N,"LI",{});var $ye=s(X1);nce=n($ye,"STRONG",{});var Crt=s(nce);txo=r(Crt,"squeezebert"),Crt.forEach(t),axo=r($ye," \u2014 "),pD=n($ye,"A",{href:!0});var wrt=s(pD);nxo=r(wrt,"SqueezeBertForSequenceClassification"),wrt.forEach(t),sxo=r($ye," (SqueezeBERT model)"),$ye.forEach(t),lxo=i(N),z1=n(N,"LI",{});var kye=s(z1);sce=n(kye,"STRONG",{});var Art=s(sce);ixo=r(Art,"tapas"),Art.forEach(t),dxo=r(kye," \u2014 "),uD=n(kye,"A",{href:!0});var yrt=s(uD);cxo=r(yrt,"TapasForSequenceClassification"),yrt.forEach(t),fxo=r(kye," (TAPAS model)"),kye.forEach(t),mxo=i(N),Q1=n(N,"LI",{});var Sye=s(Q1);lce=n(Sye,"STRONG",{});var Lrt=s(lce);gxo=r(Lrt,"tapex"),Lrt.forEach(t),hxo=r(Sye," \u2014 "),_D=n(Sye,"A",{href:!0});var xrt=s(_D);pxo=r(xrt,"BartForSequenceClassification"),xrt.forEach(t),uxo=r(Sye," (TAPEX model)"),Sye.forEach(t),_xo=i(N),W1=n(N,"LI",{});var Rye=s(W1);ice=n(Rye,"STRONG",{});var $rt=s(ice);bxo=r($rt,"transfo-xl"),$rt.forEach(t),vxo=r(Rye," \u2014 "),bD=n(Rye,"A",{href:!0});var krt=s(bD);Fxo=r(krt,"TransfoXLForSequenceClassification"),krt.forEach(t),Txo=r(Rye," (Transformer-XL model)"),Rye.forEach(t),Mxo=i(N),H1=n(N,"LI",{});var Bye=s(H1);dce=n(Bye,"STRONG",{});var Srt=s(dce);Exo=r(Srt,"xlm"),Srt.forEach(t),Cxo=r(Bye," \u2014 "),vD=n(Bye,"A",{href:!0});var Rrt=s(vD);wxo=r(Rrt,"XLMForSequenceClassification"),Rrt.forEach(t),Axo=r(Bye," (XLM model)"),Bye.forEach(t),yxo=i(N),U1=n(N,"LI",{});var Pye=s(U1);cce=n(Pye,"STRONG",{});var Brt=s(cce);Lxo=r(Brt,"xlm-roberta"),Brt.forEach(t),xxo=r(Pye," \u2014 "),FD=n(Pye,"A",{href:!0});var Prt=s(FD);$xo=r(Prt,"XLMRobertaForSequenceClassification"),Prt.forEach(t),kxo=r(Pye," (XLM-RoBERTa model)"),Pye.forEach(t),Sxo=i(N),J1=n(N,"LI",{});var Iye=s(J1);fce=n(Iye,"STRONG",{});var Irt=s(fce);Rxo=r(Irt,"xlm-roberta-xl"),Irt.forEach(t),Bxo=r(Iye," \u2014 "),TD=n(Iye,"A",{href:!0});var qrt=s(TD);Pxo=r(qrt,"XLMRobertaXLForSequenceClassification"),qrt.forEach(t),Ixo=r(Iye," (XLM-RoBERTa-XL model)"),Iye.forEach(t),qxo=i(N),Y1=n(N,"LI",{});var qye=s(Y1);mce=n(qye,"STRONG",{});var Nrt=s(mce);Nxo=r(Nrt,"xlnet"),Nrt.forEach(t),jxo=r(qye," \u2014 "),MD=n(qye,"A",{href:!0});var jrt=s(MD);Dxo=r(jrt,"XLNetForSequenceClassification"),jrt.forEach(t),Gxo=r(qye," (XLNet model)"),qye.forEach(t),Oxo=i(N),K1=n(N,"LI",{});var Nye=s(K1);gce=n(Nye,"STRONG",{});var Drt=s(gce);Vxo=r(Drt,"yoso"),Drt.forEach(t),Xxo=r(Nye," \u2014 "),ED=n(Nye,"A",{href:!0});var Grt=s(ED);zxo=r(Grt,"YosoForSequenceClassification"),Grt.forEach(t),Qxo=r(Nye," (YOSO model)"),Nye.forEach(t),N.forEach(t),Wxo=i(oa),Z1=n(oa,"P",{});var jye=s(Z1);Hxo=r(jye,"The model is set in evaluation mode by default using "),hce=n(jye,"CODE",{});var Ort=s(hce);Uxo=r(Ort,"model.eval()"),Ort.forEach(t),Jxo=r(jye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pce=n(jye,"CODE",{});var Vrt=s(pce);Yxo=r(Vrt,"model.train()"),Vrt.forEach(t),jye.forEach(t),Kxo=i(oa),T(eb.$$.fragment,oa),oa.forEach(t),Ds.forEach(t),oPe=i(f),Ri=n(f,"H2",{class:!0});var tqe=s(Ri);ob=n(tqe,"A",{id:!0,class:!0,href:!0});var Xrt=s(ob);uce=n(Xrt,"SPAN",{});var zrt=s(uce);T($0.$$.fragment,zrt),zrt.forEach(t),Xrt.forEach(t),Zxo=i(tqe),_ce=n(tqe,"SPAN",{});var Qrt=s(_ce);e9o=r(Qrt,"AutoModelForMultipleChoice"),Qrt.forEach(t),tqe.forEach(t),rPe=i(f),Bo=n(f,"DIV",{class:!0});var Gs=s(Bo);T(k0.$$.fragment,Gs),o9o=i(Gs),Bi=n(Gs,"P",{});var PY=s(Bi);r9o=r(PY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),CD=n(PY,"A",{href:!0});var Wrt=s(CD);t9o=r(Wrt,"from_pretrained()"),Wrt.forEach(t),a9o=r(PY," class method or the "),wD=n(PY,"A",{href:!0});var Hrt=s(wD);n9o=r(Hrt,"from_config()"),Hrt.forEach(t),s9o=r(PY,` class
method.`),PY.forEach(t),l9o=i(Gs),S0=n(Gs,"P",{});var aqe=s(S0);i9o=r(aqe,"This class cannot be instantiated directly using "),bce=n(aqe,"CODE",{});var Urt=s(bce);d9o=r(Urt,"__init__()"),Urt.forEach(t),c9o=r(aqe," (throws an error)."),aqe.forEach(t),f9o=i(Gs),nt=n(Gs,"DIV",{class:!0});var z3=s(nt);T(R0.$$.fragment,z3),m9o=i(z3),vce=n(z3,"P",{});var Jrt=s(vce);g9o=r(Jrt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Jrt.forEach(t),h9o=i(z3),Pi=n(z3,"P",{});var IY=s(Pi);p9o=r(IY,`Note:
Loading a model from its configuration file does `),Fce=n(IY,"STRONG",{});var Yrt=s(Fce);u9o=r(Yrt,"not"),Yrt.forEach(t),_9o=r(IY,` load the model weights. It only affects the
model\u2019s configuration. Use `),AD=n(IY,"A",{href:!0});var Krt=s(AD);b9o=r(Krt,"from_pretrained()"),Krt.forEach(t),v9o=r(IY," to load the model weights."),IY.forEach(t),F9o=i(z3),T(rb.$$.fragment,z3),z3.forEach(t),T9o=i(Gs),eo=n(Gs,"DIV",{class:!0});var ra=s(eo);T(B0.$$.fragment,ra),M9o=i(ra),Tce=n(ra,"P",{});var Zrt=s(Tce);E9o=r(Zrt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Zrt.forEach(t),C9o=i(ra),xa=n(ra,"P",{});var Q3=s(xa);w9o=r(Q3,"The model class to instantiate is selected based on the "),Mce=n(Q3,"CODE",{});var ett=s(Mce);A9o=r(ett,"model_type"),ett.forEach(t),y9o=r(Q3,` property of the config object (either
passed as an argument or loaded from `),Ece=n(Q3,"CODE",{});var ott=s(Ece);L9o=r(ott,"pretrained_model_name_or_path"),ott.forEach(t),x9o=r(Q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cce=n(Q3,"CODE",{});var rtt=s(Cce);$9o=r(rtt,"pretrained_model_name_or_path"),rtt.forEach(t),k9o=r(Q3,":"),Q3.forEach(t),S9o=i(ra),Y=n(ra,"UL",{});var K=s(Y);tb=n(K,"LI",{});var Dye=s(tb);wce=n(Dye,"STRONG",{});var ttt=s(wce);R9o=r(ttt,"albert"),ttt.forEach(t),B9o=r(Dye," \u2014 "),yD=n(Dye,"A",{href:!0});var att=s(yD);P9o=r(att,"AlbertForMultipleChoice"),att.forEach(t),I9o=r(Dye," (ALBERT model)"),Dye.forEach(t),q9o=i(K),ab=n(K,"LI",{});var Gye=s(ab);Ace=n(Gye,"STRONG",{});var ntt=s(Ace);N9o=r(ntt,"bert"),ntt.forEach(t),j9o=r(Gye," \u2014 "),LD=n(Gye,"A",{href:!0});var stt=s(LD);D9o=r(stt,"BertForMultipleChoice"),stt.forEach(t),G9o=r(Gye," (BERT model)"),Gye.forEach(t),O9o=i(K),nb=n(K,"LI",{});var Oye=s(nb);yce=n(Oye,"STRONG",{});var ltt=s(yce);V9o=r(ltt,"big_bird"),ltt.forEach(t),X9o=r(Oye," \u2014 "),xD=n(Oye,"A",{href:!0});var itt=s(xD);z9o=r(itt,"BigBirdForMultipleChoice"),itt.forEach(t),Q9o=r(Oye," (BigBird model)"),Oye.forEach(t),W9o=i(K),sb=n(K,"LI",{});var Vye=s(sb);Lce=n(Vye,"STRONG",{});var dtt=s(Lce);H9o=r(dtt,"camembert"),dtt.forEach(t),U9o=r(Vye," \u2014 "),$D=n(Vye,"A",{href:!0});var ctt=s($D);J9o=r(ctt,"CamembertForMultipleChoice"),ctt.forEach(t),Y9o=r(Vye," (CamemBERT model)"),Vye.forEach(t),K9o=i(K),lb=n(K,"LI",{});var Xye=s(lb);xce=n(Xye,"STRONG",{});var ftt=s(xce);Z9o=r(ftt,"canine"),ftt.forEach(t),e$o=r(Xye," \u2014 "),kD=n(Xye,"A",{href:!0});var mtt=s(kD);o$o=r(mtt,"CanineForMultipleChoice"),mtt.forEach(t),r$o=r(Xye," (Canine model)"),Xye.forEach(t),t$o=i(K),ib=n(K,"LI",{});var zye=s(ib);$ce=n(zye,"STRONG",{});var gtt=s($ce);a$o=r(gtt,"convbert"),gtt.forEach(t),n$o=r(zye," \u2014 "),SD=n(zye,"A",{href:!0});var htt=s(SD);s$o=r(htt,"ConvBertForMultipleChoice"),htt.forEach(t),l$o=r(zye," (ConvBERT model)"),zye.forEach(t),i$o=i(K),db=n(K,"LI",{});var Qye=s(db);kce=n(Qye,"STRONG",{});var ptt=s(kce);d$o=r(ptt,"data2vec-text"),ptt.forEach(t),c$o=r(Qye," \u2014 "),RD=n(Qye,"A",{href:!0});var utt=s(RD);f$o=r(utt,"Data2VecTextForMultipleChoice"),utt.forEach(t),m$o=r(Qye," (Data2VecText model)"),Qye.forEach(t),g$o=i(K),cb=n(K,"LI",{});var Wye=s(cb);Sce=n(Wye,"STRONG",{});var _tt=s(Sce);h$o=r(_tt,"distilbert"),_tt.forEach(t),p$o=r(Wye," \u2014 "),BD=n(Wye,"A",{href:!0});var btt=s(BD);u$o=r(btt,"DistilBertForMultipleChoice"),btt.forEach(t),_$o=r(Wye," (DistilBERT model)"),Wye.forEach(t),b$o=i(K),fb=n(K,"LI",{});var Hye=s(fb);Rce=n(Hye,"STRONG",{});var vtt=s(Rce);v$o=r(vtt,"electra"),vtt.forEach(t),F$o=r(Hye," \u2014 "),PD=n(Hye,"A",{href:!0});var Ftt=s(PD);T$o=r(Ftt,"ElectraForMultipleChoice"),Ftt.forEach(t),M$o=r(Hye," (ELECTRA model)"),Hye.forEach(t),E$o=i(K),mb=n(K,"LI",{});var Uye=s(mb);Bce=n(Uye,"STRONG",{});var Ttt=s(Bce);C$o=r(Ttt,"flaubert"),Ttt.forEach(t),w$o=r(Uye," \u2014 "),ID=n(Uye,"A",{href:!0});var Mtt=s(ID);A$o=r(Mtt,"FlaubertForMultipleChoice"),Mtt.forEach(t),y$o=r(Uye," (FlauBERT model)"),Uye.forEach(t),L$o=i(K),gb=n(K,"LI",{});var Jye=s(gb);Pce=n(Jye,"STRONG",{});var Ett=s(Pce);x$o=r(Ett,"fnet"),Ett.forEach(t),$$o=r(Jye," \u2014 "),qD=n(Jye,"A",{href:!0});var Ctt=s(qD);k$o=r(Ctt,"FNetForMultipleChoice"),Ctt.forEach(t),S$o=r(Jye," (FNet model)"),Jye.forEach(t),R$o=i(K),hb=n(K,"LI",{});var Yye=s(hb);Ice=n(Yye,"STRONG",{});var wtt=s(Ice);B$o=r(wtt,"funnel"),wtt.forEach(t),P$o=r(Yye," \u2014 "),ND=n(Yye,"A",{href:!0});var Att=s(ND);I$o=r(Att,"FunnelForMultipleChoice"),Att.forEach(t),q$o=r(Yye," (Funnel Transformer model)"),Yye.forEach(t),N$o=i(K),pb=n(K,"LI",{});var Kye=s(pb);qce=n(Kye,"STRONG",{});var ytt=s(qce);j$o=r(ytt,"ibert"),ytt.forEach(t),D$o=r(Kye," \u2014 "),jD=n(Kye,"A",{href:!0});var Ltt=s(jD);G$o=r(Ltt,"IBertForMultipleChoice"),Ltt.forEach(t),O$o=r(Kye," (I-BERT model)"),Kye.forEach(t),V$o=i(K),ub=n(K,"LI",{});var Zye=s(ub);Nce=n(Zye,"STRONG",{});var xtt=s(Nce);X$o=r(xtt,"longformer"),xtt.forEach(t),z$o=r(Zye," \u2014 "),DD=n(Zye,"A",{href:!0});var $tt=s(DD);Q$o=r($tt,"LongformerForMultipleChoice"),$tt.forEach(t),W$o=r(Zye," (Longformer model)"),Zye.forEach(t),H$o=i(K),_b=n(K,"LI",{});var eLe=s(_b);jce=n(eLe,"STRONG",{});var ktt=s(jce);U$o=r(ktt,"megatron-bert"),ktt.forEach(t),J$o=r(eLe," \u2014 "),GD=n(eLe,"A",{href:!0});var Stt=s(GD);Y$o=r(Stt,"MegatronBertForMultipleChoice"),Stt.forEach(t),K$o=r(eLe," (MegatronBert model)"),eLe.forEach(t),Z$o=i(K),bb=n(K,"LI",{});var oLe=s(bb);Dce=n(oLe,"STRONG",{});var Rtt=s(Dce);eko=r(Rtt,"mobilebert"),Rtt.forEach(t),oko=r(oLe," \u2014 "),OD=n(oLe,"A",{href:!0});var Btt=s(OD);rko=r(Btt,"MobileBertForMultipleChoice"),Btt.forEach(t),tko=r(oLe," (MobileBERT model)"),oLe.forEach(t),ako=i(K),vb=n(K,"LI",{});var rLe=s(vb);Gce=n(rLe,"STRONG",{});var Ptt=s(Gce);nko=r(Ptt,"mpnet"),Ptt.forEach(t),sko=r(rLe," \u2014 "),VD=n(rLe,"A",{href:!0});var Itt=s(VD);lko=r(Itt,"MPNetForMultipleChoice"),Itt.forEach(t),iko=r(rLe," (MPNet model)"),rLe.forEach(t),dko=i(K),Fb=n(K,"LI",{});var tLe=s(Fb);Oce=n(tLe,"STRONG",{});var qtt=s(Oce);cko=r(qtt,"nystromformer"),qtt.forEach(t),fko=r(tLe," \u2014 "),XD=n(tLe,"A",{href:!0});var Ntt=s(XD);mko=r(Ntt,"NystromformerForMultipleChoice"),Ntt.forEach(t),gko=r(tLe," (Nystromformer model)"),tLe.forEach(t),hko=i(K),Tb=n(K,"LI",{});var aLe=s(Tb);Vce=n(aLe,"STRONG",{});var jtt=s(Vce);pko=r(jtt,"qdqbert"),jtt.forEach(t),uko=r(aLe," \u2014 "),zD=n(aLe,"A",{href:!0});var Dtt=s(zD);_ko=r(Dtt,"QDQBertForMultipleChoice"),Dtt.forEach(t),bko=r(aLe," (QDQBert model)"),aLe.forEach(t),vko=i(K),Mb=n(K,"LI",{});var nLe=s(Mb);Xce=n(nLe,"STRONG",{});var Gtt=s(Xce);Fko=r(Gtt,"rembert"),Gtt.forEach(t),Tko=r(nLe," \u2014 "),QD=n(nLe,"A",{href:!0});var Ott=s(QD);Mko=r(Ott,"RemBertForMultipleChoice"),Ott.forEach(t),Eko=r(nLe," (RemBERT model)"),nLe.forEach(t),Cko=i(K),Eb=n(K,"LI",{});var sLe=s(Eb);zce=n(sLe,"STRONG",{});var Vtt=s(zce);wko=r(Vtt,"roberta"),Vtt.forEach(t),Ako=r(sLe," \u2014 "),WD=n(sLe,"A",{href:!0});var Xtt=s(WD);yko=r(Xtt,"RobertaForMultipleChoice"),Xtt.forEach(t),Lko=r(sLe," (RoBERTa model)"),sLe.forEach(t),xko=i(K),Cb=n(K,"LI",{});var lLe=s(Cb);Qce=n(lLe,"STRONG",{});var ztt=s(Qce);$ko=r(ztt,"roformer"),ztt.forEach(t),kko=r(lLe," \u2014 "),HD=n(lLe,"A",{href:!0});var Qtt=s(HD);Sko=r(Qtt,"RoFormerForMultipleChoice"),Qtt.forEach(t),Rko=r(lLe," (RoFormer model)"),lLe.forEach(t),Bko=i(K),wb=n(K,"LI",{});var iLe=s(wb);Wce=n(iLe,"STRONG",{});var Wtt=s(Wce);Pko=r(Wtt,"squeezebert"),Wtt.forEach(t),Iko=r(iLe," \u2014 "),UD=n(iLe,"A",{href:!0});var Htt=s(UD);qko=r(Htt,"SqueezeBertForMultipleChoice"),Htt.forEach(t),Nko=r(iLe," (SqueezeBERT model)"),iLe.forEach(t),jko=i(K),Ab=n(K,"LI",{});var dLe=s(Ab);Hce=n(dLe,"STRONG",{});var Utt=s(Hce);Dko=r(Utt,"xlm"),Utt.forEach(t),Gko=r(dLe," \u2014 "),JD=n(dLe,"A",{href:!0});var Jtt=s(JD);Oko=r(Jtt,"XLMForMultipleChoice"),Jtt.forEach(t),Vko=r(dLe," (XLM model)"),dLe.forEach(t),Xko=i(K),yb=n(K,"LI",{});var cLe=s(yb);Uce=n(cLe,"STRONG",{});var Ytt=s(Uce);zko=r(Ytt,"xlm-roberta"),Ytt.forEach(t),Qko=r(cLe," \u2014 "),YD=n(cLe,"A",{href:!0});var Ktt=s(YD);Wko=r(Ktt,"XLMRobertaForMultipleChoice"),Ktt.forEach(t),Hko=r(cLe," (XLM-RoBERTa model)"),cLe.forEach(t),Uko=i(K),Lb=n(K,"LI",{});var fLe=s(Lb);Jce=n(fLe,"STRONG",{});var Ztt=s(Jce);Jko=r(Ztt,"xlm-roberta-xl"),Ztt.forEach(t),Yko=r(fLe," \u2014 "),KD=n(fLe,"A",{href:!0});var eat=s(KD);Kko=r(eat,"XLMRobertaXLForMultipleChoice"),eat.forEach(t),Zko=r(fLe," (XLM-RoBERTa-XL model)"),fLe.forEach(t),eSo=i(K),xb=n(K,"LI",{});var mLe=s(xb);Yce=n(mLe,"STRONG",{});var oat=s(Yce);oSo=r(oat,"xlnet"),oat.forEach(t),rSo=r(mLe," \u2014 "),ZD=n(mLe,"A",{href:!0});var rat=s(ZD);tSo=r(rat,"XLNetForMultipleChoice"),rat.forEach(t),aSo=r(mLe," (XLNet model)"),mLe.forEach(t),nSo=i(K),$b=n(K,"LI",{});var gLe=s($b);Kce=n(gLe,"STRONG",{});var tat=s(Kce);sSo=r(tat,"yoso"),tat.forEach(t),lSo=r(gLe," \u2014 "),eG=n(gLe,"A",{href:!0});var aat=s(eG);iSo=r(aat,"YosoForMultipleChoice"),aat.forEach(t),dSo=r(gLe," (YOSO model)"),gLe.forEach(t),K.forEach(t),cSo=i(ra),kb=n(ra,"P",{});var hLe=s(kb);fSo=r(hLe,"The model is set in evaluation mode by default using "),Zce=n(hLe,"CODE",{});var nat=s(Zce);mSo=r(nat,"model.eval()"),nat.forEach(t),gSo=r(hLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),efe=n(hLe,"CODE",{});var sat=s(efe);hSo=r(sat,"model.train()"),sat.forEach(t),hLe.forEach(t),pSo=i(ra),T(Sb.$$.fragment,ra),ra.forEach(t),Gs.forEach(t),tPe=i(f),Ii=n(f,"H2",{class:!0});var nqe=s(Ii);Rb=n(nqe,"A",{id:!0,class:!0,href:!0});var lat=s(Rb);ofe=n(lat,"SPAN",{});var iat=s(ofe);T(P0.$$.fragment,iat),iat.forEach(t),lat.forEach(t),uSo=i(nqe),rfe=n(nqe,"SPAN",{});var dat=s(rfe);_So=r(dat,"AutoModelForNextSentencePrediction"),dat.forEach(t),nqe.forEach(t),aPe=i(f),Po=n(f,"DIV",{class:!0});var Os=s(Po);T(I0.$$.fragment,Os),bSo=i(Os),qi=n(Os,"P",{});var qY=s(qi);vSo=r(qY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),oG=n(qY,"A",{href:!0});var cat=s(oG);FSo=r(cat,"from_pretrained()"),cat.forEach(t),TSo=r(qY," class method or the "),rG=n(qY,"A",{href:!0});var fat=s(rG);MSo=r(fat,"from_config()"),fat.forEach(t),ESo=r(qY,` class
method.`),qY.forEach(t),CSo=i(Os),q0=n(Os,"P",{});var sqe=s(q0);wSo=r(sqe,"This class cannot be instantiated directly using "),tfe=n(sqe,"CODE",{});var mat=s(tfe);ASo=r(mat,"__init__()"),mat.forEach(t),ySo=r(sqe," (throws an error)."),sqe.forEach(t),LSo=i(Os),st=n(Os,"DIV",{class:!0});var W3=s(st);T(N0.$$.fragment,W3),xSo=i(W3),afe=n(W3,"P",{});var gat=s(afe);$So=r(gat,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),gat.forEach(t),kSo=i(W3),Ni=n(W3,"P",{});var NY=s(Ni);SSo=r(NY,`Note:
Loading a model from its configuration file does `),nfe=n(NY,"STRONG",{});var hat=s(nfe);RSo=r(hat,"not"),hat.forEach(t),BSo=r(NY,` load the model weights. It only affects the
model\u2019s configuration. Use `),tG=n(NY,"A",{href:!0});var pat=s(tG);PSo=r(pat,"from_pretrained()"),pat.forEach(t),ISo=r(NY," to load the model weights."),NY.forEach(t),qSo=i(W3),T(Bb.$$.fragment,W3),W3.forEach(t),NSo=i(Os),oo=n(Os,"DIV",{class:!0});var ta=s(oo);T(j0.$$.fragment,ta),jSo=i(ta),sfe=n(ta,"P",{});var uat=s(sfe);DSo=r(uat,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),uat.forEach(t),GSo=i(ta),$a=n(ta,"P",{});var H3=s($a);OSo=r(H3,"The model class to instantiate is selected based on the "),lfe=n(H3,"CODE",{});var _at=s(lfe);VSo=r(_at,"model_type"),_at.forEach(t),XSo=r(H3,` property of the config object (either
passed as an argument or loaded from `),ife=n(H3,"CODE",{});var bat=s(ife);zSo=r(bat,"pretrained_model_name_or_path"),bat.forEach(t),QSo=r(H3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dfe=n(H3,"CODE",{});var vat=s(dfe);WSo=r(vat,"pretrained_model_name_or_path"),vat.forEach(t),HSo=r(H3,":"),H3.forEach(t),USo=i(ta),Ur=n(ta,"UL",{});var Vs=s(Ur);Pb=n(Vs,"LI",{});var pLe=s(Pb);cfe=n(pLe,"STRONG",{});var Fat=s(cfe);JSo=r(Fat,"bert"),Fat.forEach(t),YSo=r(pLe," \u2014 "),aG=n(pLe,"A",{href:!0});var Tat=s(aG);KSo=r(Tat,"BertForNextSentencePrediction"),Tat.forEach(t),ZSo=r(pLe," (BERT model)"),pLe.forEach(t),eRo=i(Vs),Ib=n(Vs,"LI",{});var uLe=s(Ib);ffe=n(uLe,"STRONG",{});var Mat=s(ffe);oRo=r(Mat,"fnet"),Mat.forEach(t),rRo=r(uLe," \u2014 "),nG=n(uLe,"A",{href:!0});var Eat=s(nG);tRo=r(Eat,"FNetForNextSentencePrediction"),Eat.forEach(t),aRo=r(uLe," (FNet model)"),uLe.forEach(t),nRo=i(Vs),qb=n(Vs,"LI",{});var _Le=s(qb);mfe=n(_Le,"STRONG",{});var Cat=s(mfe);sRo=r(Cat,"megatron-bert"),Cat.forEach(t),lRo=r(_Le," \u2014 "),sG=n(_Le,"A",{href:!0});var wat=s(sG);iRo=r(wat,"MegatronBertForNextSentencePrediction"),wat.forEach(t),dRo=r(_Le," (MegatronBert model)"),_Le.forEach(t),cRo=i(Vs),Nb=n(Vs,"LI",{});var bLe=s(Nb);gfe=n(bLe,"STRONG",{});var Aat=s(gfe);fRo=r(Aat,"mobilebert"),Aat.forEach(t),mRo=r(bLe," \u2014 "),lG=n(bLe,"A",{href:!0});var yat=s(lG);gRo=r(yat,"MobileBertForNextSentencePrediction"),yat.forEach(t),hRo=r(bLe," (MobileBERT model)"),bLe.forEach(t),pRo=i(Vs),jb=n(Vs,"LI",{});var vLe=s(jb);hfe=n(vLe,"STRONG",{});var Lat=s(hfe);uRo=r(Lat,"qdqbert"),Lat.forEach(t),_Ro=r(vLe," \u2014 "),iG=n(vLe,"A",{href:!0});var xat=s(iG);bRo=r(xat,"QDQBertForNextSentencePrediction"),xat.forEach(t),vRo=r(vLe," (QDQBert model)"),vLe.forEach(t),Vs.forEach(t),FRo=i(ta),Db=n(ta,"P",{});var FLe=s(Db);TRo=r(FLe,"The model is set in evaluation mode by default using "),pfe=n(FLe,"CODE",{});var $at=s(pfe);MRo=r($at,"model.eval()"),$at.forEach(t),ERo=r(FLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ufe=n(FLe,"CODE",{});var kat=s(ufe);CRo=r(kat,"model.train()"),kat.forEach(t),FLe.forEach(t),wRo=i(ta),T(Gb.$$.fragment,ta),ta.forEach(t),Os.forEach(t),nPe=i(f),ji=n(f,"H2",{class:!0});var lqe=s(ji);Ob=n(lqe,"A",{id:!0,class:!0,href:!0});var Sat=s(Ob);_fe=n(Sat,"SPAN",{});var Rat=s(_fe);T(D0.$$.fragment,Rat),Rat.forEach(t),Sat.forEach(t),ARo=i(lqe),bfe=n(lqe,"SPAN",{});var Bat=s(bfe);yRo=r(Bat,"AutoModelForTokenClassification"),Bat.forEach(t),lqe.forEach(t),sPe=i(f),Io=n(f,"DIV",{class:!0});var Xs=s(Io);T(G0.$$.fragment,Xs),LRo=i(Xs),Di=n(Xs,"P",{});var jY=s(Di);xRo=r(jY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dG=n(jY,"A",{href:!0});var Pat=s(dG);$Ro=r(Pat,"from_pretrained()"),Pat.forEach(t),kRo=r(jY," class method or the "),cG=n(jY,"A",{href:!0});var Iat=s(cG);SRo=r(Iat,"from_config()"),Iat.forEach(t),RRo=r(jY,` class
method.`),jY.forEach(t),BRo=i(Xs),O0=n(Xs,"P",{});var iqe=s(O0);PRo=r(iqe,"This class cannot be instantiated directly using "),vfe=n(iqe,"CODE",{});var qat=s(vfe);IRo=r(qat,"__init__()"),qat.forEach(t),qRo=r(iqe," (throws an error)."),iqe.forEach(t),NRo=i(Xs),lt=n(Xs,"DIV",{class:!0});var U3=s(lt);T(V0.$$.fragment,U3),jRo=i(U3),Ffe=n(U3,"P",{});var Nat=s(Ffe);DRo=r(Nat,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Nat.forEach(t),GRo=i(U3),Gi=n(U3,"P",{});var DY=s(Gi);ORo=r(DY,`Note:
Loading a model from its configuration file does `),Tfe=n(DY,"STRONG",{});var jat=s(Tfe);VRo=r(jat,"not"),jat.forEach(t),XRo=r(DY,` load the model weights. It only affects the
model\u2019s configuration. Use `),fG=n(DY,"A",{href:!0});var Dat=s(fG);zRo=r(Dat,"from_pretrained()"),Dat.forEach(t),QRo=r(DY," to load the model weights."),DY.forEach(t),WRo=i(U3),T(Vb.$$.fragment,U3),U3.forEach(t),HRo=i(Xs),ro=n(Xs,"DIV",{class:!0});var aa=s(ro);T(X0.$$.fragment,aa),URo=i(aa),Mfe=n(aa,"P",{});var Gat=s(Mfe);JRo=r(Gat,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Gat.forEach(t),YRo=i(aa),ka=n(aa,"P",{});var J3=s(ka);KRo=r(J3,"The model class to instantiate is selected based on the "),Efe=n(J3,"CODE",{});var Oat=s(Efe);ZRo=r(Oat,"model_type"),Oat.forEach(t),eBo=r(J3,` property of the config object (either
passed as an argument or loaded from `),Cfe=n(J3,"CODE",{});var Vat=s(Cfe);oBo=r(Vat,"pretrained_model_name_or_path"),Vat.forEach(t),rBo=r(J3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wfe=n(J3,"CODE",{});var Xat=s(wfe);tBo=r(Xat,"pretrained_model_name_or_path"),Xat.forEach(t),aBo=r(J3,":"),J3.forEach(t),nBo=i(aa),U=n(aa,"UL",{});var J=s(U);Xb=n(J,"LI",{});var TLe=s(Xb);Afe=n(TLe,"STRONG",{});var zat=s(Afe);sBo=r(zat,"albert"),zat.forEach(t),lBo=r(TLe," \u2014 "),mG=n(TLe,"A",{href:!0});var Qat=s(mG);iBo=r(Qat,"AlbertForTokenClassification"),Qat.forEach(t),dBo=r(TLe," (ALBERT model)"),TLe.forEach(t),cBo=i(J),zb=n(J,"LI",{});var MLe=s(zb);yfe=n(MLe,"STRONG",{});var Wat=s(yfe);fBo=r(Wat,"bert"),Wat.forEach(t),mBo=r(MLe," \u2014 "),gG=n(MLe,"A",{href:!0});var Hat=s(gG);gBo=r(Hat,"BertForTokenClassification"),Hat.forEach(t),hBo=r(MLe," (BERT model)"),MLe.forEach(t),pBo=i(J),Qb=n(J,"LI",{});var ELe=s(Qb);Lfe=n(ELe,"STRONG",{});var Uat=s(Lfe);uBo=r(Uat,"big_bird"),Uat.forEach(t),_Bo=r(ELe," \u2014 "),hG=n(ELe,"A",{href:!0});var Jat=s(hG);bBo=r(Jat,"BigBirdForTokenClassification"),Jat.forEach(t),vBo=r(ELe," (BigBird model)"),ELe.forEach(t),FBo=i(J),Wb=n(J,"LI",{});var CLe=s(Wb);xfe=n(CLe,"STRONG",{});var Yat=s(xfe);TBo=r(Yat,"camembert"),Yat.forEach(t),MBo=r(CLe," \u2014 "),pG=n(CLe,"A",{href:!0});var Kat=s(pG);EBo=r(Kat,"CamembertForTokenClassification"),Kat.forEach(t),CBo=r(CLe," (CamemBERT model)"),CLe.forEach(t),wBo=i(J),Hb=n(J,"LI",{});var wLe=s(Hb);$fe=n(wLe,"STRONG",{});var Zat=s($fe);ABo=r(Zat,"canine"),Zat.forEach(t),yBo=r(wLe," \u2014 "),uG=n(wLe,"A",{href:!0});var ent=s(uG);LBo=r(ent,"CanineForTokenClassification"),ent.forEach(t),xBo=r(wLe," (Canine model)"),wLe.forEach(t),$Bo=i(J),Ub=n(J,"LI",{});var ALe=s(Ub);kfe=n(ALe,"STRONG",{});var ont=s(kfe);kBo=r(ont,"convbert"),ont.forEach(t),SBo=r(ALe," \u2014 "),_G=n(ALe,"A",{href:!0});var rnt=s(_G);RBo=r(rnt,"ConvBertForTokenClassification"),rnt.forEach(t),BBo=r(ALe," (ConvBERT model)"),ALe.forEach(t),PBo=i(J),Jb=n(J,"LI",{});var yLe=s(Jb);Sfe=n(yLe,"STRONG",{});var tnt=s(Sfe);IBo=r(tnt,"data2vec-text"),tnt.forEach(t),qBo=r(yLe," \u2014 "),bG=n(yLe,"A",{href:!0});var ant=s(bG);NBo=r(ant,"Data2VecTextForTokenClassification"),ant.forEach(t),jBo=r(yLe," (Data2VecText model)"),yLe.forEach(t),DBo=i(J),Yb=n(J,"LI",{});var LLe=s(Yb);Rfe=n(LLe,"STRONG",{});var nnt=s(Rfe);GBo=r(nnt,"deberta"),nnt.forEach(t),OBo=r(LLe," \u2014 "),vG=n(LLe,"A",{href:!0});var snt=s(vG);VBo=r(snt,"DebertaForTokenClassification"),snt.forEach(t),XBo=r(LLe," (DeBERTa model)"),LLe.forEach(t),zBo=i(J),Kb=n(J,"LI",{});var xLe=s(Kb);Bfe=n(xLe,"STRONG",{});var lnt=s(Bfe);QBo=r(lnt,"deberta-v2"),lnt.forEach(t),WBo=r(xLe," \u2014 "),FG=n(xLe,"A",{href:!0});var int=s(FG);HBo=r(int,"DebertaV2ForTokenClassification"),int.forEach(t),UBo=r(xLe," (DeBERTa-v2 model)"),xLe.forEach(t),JBo=i(J),Zb=n(J,"LI",{});var $Le=s(Zb);Pfe=n($Le,"STRONG",{});var dnt=s(Pfe);YBo=r(dnt,"distilbert"),dnt.forEach(t),KBo=r($Le," \u2014 "),TG=n($Le,"A",{href:!0});var cnt=s(TG);ZBo=r(cnt,"DistilBertForTokenClassification"),cnt.forEach(t),ePo=r($Le," (DistilBERT model)"),$Le.forEach(t),oPo=i(J),e2=n(J,"LI",{});var kLe=s(e2);Ife=n(kLe,"STRONG",{});var fnt=s(Ife);rPo=r(fnt,"electra"),fnt.forEach(t),tPo=r(kLe," \u2014 "),MG=n(kLe,"A",{href:!0});var mnt=s(MG);aPo=r(mnt,"ElectraForTokenClassification"),mnt.forEach(t),nPo=r(kLe," (ELECTRA model)"),kLe.forEach(t),sPo=i(J),o2=n(J,"LI",{});var SLe=s(o2);qfe=n(SLe,"STRONG",{});var gnt=s(qfe);lPo=r(gnt,"flaubert"),gnt.forEach(t),iPo=r(SLe," \u2014 "),EG=n(SLe,"A",{href:!0});var hnt=s(EG);dPo=r(hnt,"FlaubertForTokenClassification"),hnt.forEach(t),cPo=r(SLe," (FlauBERT model)"),SLe.forEach(t),fPo=i(J),r2=n(J,"LI",{});var RLe=s(r2);Nfe=n(RLe,"STRONG",{});var pnt=s(Nfe);mPo=r(pnt,"fnet"),pnt.forEach(t),gPo=r(RLe," \u2014 "),CG=n(RLe,"A",{href:!0});var unt=s(CG);hPo=r(unt,"FNetForTokenClassification"),unt.forEach(t),pPo=r(RLe," (FNet model)"),RLe.forEach(t),uPo=i(J),t2=n(J,"LI",{});var BLe=s(t2);jfe=n(BLe,"STRONG",{});var _nt=s(jfe);_Po=r(_nt,"funnel"),_nt.forEach(t),bPo=r(BLe," \u2014 "),wG=n(BLe,"A",{href:!0});var bnt=s(wG);vPo=r(bnt,"FunnelForTokenClassification"),bnt.forEach(t),FPo=r(BLe," (Funnel Transformer model)"),BLe.forEach(t),TPo=i(J),a2=n(J,"LI",{});var PLe=s(a2);Dfe=n(PLe,"STRONG",{});var vnt=s(Dfe);MPo=r(vnt,"gpt2"),vnt.forEach(t),EPo=r(PLe," \u2014 "),AG=n(PLe,"A",{href:!0});var Fnt=s(AG);CPo=r(Fnt,"GPT2ForTokenClassification"),Fnt.forEach(t),wPo=r(PLe," (OpenAI GPT-2 model)"),PLe.forEach(t),APo=i(J),n2=n(J,"LI",{});var ILe=s(n2);Gfe=n(ILe,"STRONG",{});var Tnt=s(Gfe);yPo=r(Tnt,"ibert"),Tnt.forEach(t),LPo=r(ILe," \u2014 "),yG=n(ILe,"A",{href:!0});var Mnt=s(yG);xPo=r(Mnt,"IBertForTokenClassification"),Mnt.forEach(t),$Po=r(ILe," (I-BERT model)"),ILe.forEach(t),kPo=i(J),s2=n(J,"LI",{});var qLe=s(s2);Ofe=n(qLe,"STRONG",{});var Ent=s(Ofe);SPo=r(Ent,"layoutlm"),Ent.forEach(t),RPo=r(qLe," \u2014 "),LG=n(qLe,"A",{href:!0});var Cnt=s(LG);BPo=r(Cnt,"LayoutLMForTokenClassification"),Cnt.forEach(t),PPo=r(qLe," (LayoutLM model)"),qLe.forEach(t),IPo=i(J),l2=n(J,"LI",{});var NLe=s(l2);Vfe=n(NLe,"STRONG",{});var wnt=s(Vfe);qPo=r(wnt,"layoutlmv2"),wnt.forEach(t),NPo=r(NLe," \u2014 "),xG=n(NLe,"A",{href:!0});var Ant=s(xG);jPo=r(Ant,"LayoutLMv2ForTokenClassification"),Ant.forEach(t),DPo=r(NLe," (LayoutLMv2 model)"),NLe.forEach(t),GPo=i(J),i2=n(J,"LI",{});var jLe=s(i2);Xfe=n(jLe,"STRONG",{});var ynt=s(Xfe);OPo=r(ynt,"longformer"),ynt.forEach(t),VPo=r(jLe," \u2014 "),$G=n(jLe,"A",{href:!0});var Lnt=s($G);XPo=r(Lnt,"LongformerForTokenClassification"),Lnt.forEach(t),zPo=r(jLe," (Longformer model)"),jLe.forEach(t),QPo=i(J),d2=n(J,"LI",{});var DLe=s(d2);zfe=n(DLe,"STRONG",{});var xnt=s(zfe);WPo=r(xnt,"megatron-bert"),xnt.forEach(t),HPo=r(DLe," \u2014 "),kG=n(DLe,"A",{href:!0});var $nt=s(kG);UPo=r($nt,"MegatronBertForTokenClassification"),$nt.forEach(t),JPo=r(DLe," (MegatronBert model)"),DLe.forEach(t),YPo=i(J),c2=n(J,"LI",{});var GLe=s(c2);Qfe=n(GLe,"STRONG",{});var knt=s(Qfe);KPo=r(knt,"mobilebert"),knt.forEach(t),ZPo=r(GLe," \u2014 "),SG=n(GLe,"A",{href:!0});var Snt=s(SG);eIo=r(Snt,"MobileBertForTokenClassification"),Snt.forEach(t),oIo=r(GLe," (MobileBERT model)"),GLe.forEach(t),rIo=i(J),f2=n(J,"LI",{});var OLe=s(f2);Wfe=n(OLe,"STRONG",{});var Rnt=s(Wfe);tIo=r(Rnt,"mpnet"),Rnt.forEach(t),aIo=r(OLe," \u2014 "),RG=n(OLe,"A",{href:!0});var Bnt=s(RG);nIo=r(Bnt,"MPNetForTokenClassification"),Bnt.forEach(t),sIo=r(OLe," (MPNet model)"),OLe.forEach(t),lIo=i(J),m2=n(J,"LI",{});var VLe=s(m2);Hfe=n(VLe,"STRONG",{});var Pnt=s(Hfe);iIo=r(Pnt,"nystromformer"),Pnt.forEach(t),dIo=r(VLe," \u2014 "),BG=n(VLe,"A",{href:!0});var Int=s(BG);cIo=r(Int,"NystromformerForTokenClassification"),Int.forEach(t),fIo=r(VLe," (Nystromformer model)"),VLe.forEach(t),mIo=i(J),g2=n(J,"LI",{});var XLe=s(g2);Ufe=n(XLe,"STRONG",{});var qnt=s(Ufe);gIo=r(qnt,"qdqbert"),qnt.forEach(t),hIo=r(XLe," \u2014 "),PG=n(XLe,"A",{href:!0});var Nnt=s(PG);pIo=r(Nnt,"QDQBertForTokenClassification"),Nnt.forEach(t),uIo=r(XLe," (QDQBert model)"),XLe.forEach(t),_Io=i(J),h2=n(J,"LI",{});var zLe=s(h2);Jfe=n(zLe,"STRONG",{});var jnt=s(Jfe);bIo=r(jnt,"rembert"),jnt.forEach(t),vIo=r(zLe," \u2014 "),IG=n(zLe,"A",{href:!0});var Dnt=s(IG);FIo=r(Dnt,"RemBertForTokenClassification"),Dnt.forEach(t),TIo=r(zLe," (RemBERT model)"),zLe.forEach(t),MIo=i(J),p2=n(J,"LI",{});var QLe=s(p2);Yfe=n(QLe,"STRONG",{});var Gnt=s(Yfe);EIo=r(Gnt,"roberta"),Gnt.forEach(t),CIo=r(QLe," \u2014 "),qG=n(QLe,"A",{href:!0});var Ont=s(qG);wIo=r(Ont,"RobertaForTokenClassification"),Ont.forEach(t),AIo=r(QLe," (RoBERTa model)"),QLe.forEach(t),yIo=i(J),u2=n(J,"LI",{});var WLe=s(u2);Kfe=n(WLe,"STRONG",{});var Vnt=s(Kfe);LIo=r(Vnt,"roformer"),Vnt.forEach(t),xIo=r(WLe," \u2014 "),NG=n(WLe,"A",{href:!0});var Xnt=s(NG);$Io=r(Xnt,"RoFormerForTokenClassification"),Xnt.forEach(t),kIo=r(WLe," (RoFormer model)"),WLe.forEach(t),SIo=i(J),_2=n(J,"LI",{});var HLe=s(_2);Zfe=n(HLe,"STRONG",{});var znt=s(Zfe);RIo=r(znt,"squeezebert"),znt.forEach(t),BIo=r(HLe," \u2014 "),jG=n(HLe,"A",{href:!0});var Qnt=s(jG);PIo=r(Qnt,"SqueezeBertForTokenClassification"),Qnt.forEach(t),IIo=r(HLe," (SqueezeBERT model)"),HLe.forEach(t),qIo=i(J),b2=n(J,"LI",{});var ULe=s(b2);eme=n(ULe,"STRONG",{});var Wnt=s(eme);NIo=r(Wnt,"xlm"),Wnt.forEach(t),jIo=r(ULe," \u2014 "),DG=n(ULe,"A",{href:!0});var Hnt=s(DG);DIo=r(Hnt,"XLMForTokenClassification"),Hnt.forEach(t),GIo=r(ULe," (XLM model)"),ULe.forEach(t),OIo=i(J),v2=n(J,"LI",{});var JLe=s(v2);ome=n(JLe,"STRONG",{});var Unt=s(ome);VIo=r(Unt,"xlm-roberta"),Unt.forEach(t),XIo=r(JLe," \u2014 "),GG=n(JLe,"A",{href:!0});var Jnt=s(GG);zIo=r(Jnt,"XLMRobertaForTokenClassification"),Jnt.forEach(t),QIo=r(JLe," (XLM-RoBERTa model)"),JLe.forEach(t),WIo=i(J),F2=n(J,"LI",{});var YLe=s(F2);rme=n(YLe,"STRONG",{});var Ynt=s(rme);HIo=r(Ynt,"xlm-roberta-xl"),Ynt.forEach(t),UIo=r(YLe," \u2014 "),OG=n(YLe,"A",{href:!0});var Knt=s(OG);JIo=r(Knt,"XLMRobertaXLForTokenClassification"),Knt.forEach(t),YIo=r(YLe," (XLM-RoBERTa-XL model)"),YLe.forEach(t),KIo=i(J),T2=n(J,"LI",{});var KLe=s(T2);tme=n(KLe,"STRONG",{});var Znt=s(tme);ZIo=r(Znt,"xlnet"),Znt.forEach(t),eqo=r(KLe," \u2014 "),VG=n(KLe,"A",{href:!0});var est=s(VG);oqo=r(est,"XLNetForTokenClassification"),est.forEach(t),rqo=r(KLe," (XLNet model)"),KLe.forEach(t),tqo=i(J),M2=n(J,"LI",{});var ZLe=s(M2);ame=n(ZLe,"STRONG",{});var ost=s(ame);aqo=r(ost,"yoso"),ost.forEach(t),nqo=r(ZLe," \u2014 "),XG=n(ZLe,"A",{href:!0});var rst=s(XG);sqo=r(rst,"YosoForTokenClassification"),rst.forEach(t),lqo=r(ZLe," (YOSO model)"),ZLe.forEach(t),J.forEach(t),iqo=i(aa),E2=n(aa,"P",{});var e8e=s(E2);dqo=r(e8e,"The model is set in evaluation mode by default using "),nme=n(e8e,"CODE",{});var tst=s(nme);cqo=r(tst,"model.eval()"),tst.forEach(t),fqo=r(e8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sme=n(e8e,"CODE",{});var ast=s(sme);mqo=r(ast,"model.train()"),ast.forEach(t),e8e.forEach(t),gqo=i(aa),T(C2.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),lPe=i(f),Oi=n(f,"H2",{class:!0});var dqe=s(Oi);w2=n(dqe,"A",{id:!0,class:!0,href:!0});var nst=s(w2);lme=n(nst,"SPAN",{});var sst=s(lme);T(z0.$$.fragment,sst),sst.forEach(t),nst.forEach(t),hqo=i(dqe),ime=n(dqe,"SPAN",{});var lst=s(ime);pqo=r(lst,"AutoModelForQuestionAnswering"),lst.forEach(t),dqe.forEach(t),iPe=i(f),qo=n(f,"DIV",{class:!0});var zs=s(qo);T(Q0.$$.fragment,zs),uqo=i(zs),Vi=n(zs,"P",{});var GY=s(Vi);_qo=r(GY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),zG=n(GY,"A",{href:!0});var ist=s(zG);bqo=r(ist,"from_pretrained()"),ist.forEach(t),vqo=r(GY," class method or the "),QG=n(GY,"A",{href:!0});var dst=s(QG);Fqo=r(dst,"from_config()"),dst.forEach(t),Tqo=r(GY,` class
method.`),GY.forEach(t),Mqo=i(zs),W0=n(zs,"P",{});var cqe=s(W0);Eqo=r(cqe,"This class cannot be instantiated directly using "),dme=n(cqe,"CODE",{});var cst=s(dme);Cqo=r(cst,"__init__()"),cst.forEach(t),wqo=r(cqe," (throws an error)."),cqe.forEach(t),Aqo=i(zs),it=n(zs,"DIV",{class:!0});var Y3=s(it);T(H0.$$.fragment,Y3),yqo=i(Y3),cme=n(Y3,"P",{});var fst=s(cme);Lqo=r(fst,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),fst.forEach(t),xqo=i(Y3),Xi=n(Y3,"P",{});var OY=s(Xi);$qo=r(OY,`Note:
Loading a model from its configuration file does `),fme=n(OY,"STRONG",{});var mst=s(fme);kqo=r(mst,"not"),mst.forEach(t),Sqo=r(OY,` load the model weights. It only affects the
model\u2019s configuration. Use `),WG=n(OY,"A",{href:!0});var gst=s(WG);Rqo=r(gst,"from_pretrained()"),gst.forEach(t),Bqo=r(OY," to load the model weights."),OY.forEach(t),Pqo=i(Y3),T(A2.$$.fragment,Y3),Y3.forEach(t),Iqo=i(zs),to=n(zs,"DIV",{class:!0});var na=s(to);T(U0.$$.fragment,na),qqo=i(na),mme=n(na,"P",{});var hst=s(mme);Nqo=r(hst,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),hst.forEach(t),jqo=i(na),Sa=n(na,"P",{});var K3=s(Sa);Dqo=r(K3,"The model class to instantiate is selected based on the "),gme=n(K3,"CODE",{});var pst=s(gme);Gqo=r(pst,"model_type"),pst.forEach(t),Oqo=r(K3,` property of the config object (either
passed as an argument or loaded from `),hme=n(K3,"CODE",{});var ust=s(hme);Vqo=r(ust,"pretrained_model_name_or_path"),ust.forEach(t),Xqo=r(K3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pme=n(K3,"CODE",{});var _st=s(pme);zqo=r(_st,"pretrained_model_name_or_path"),_st.forEach(t),Qqo=r(K3,":"),K3.forEach(t),Wqo=i(na),O=n(na,"UL",{});var X=s(O);y2=n(X,"LI",{});var o8e=s(y2);ume=n(o8e,"STRONG",{});var bst=s(ume);Hqo=r(bst,"albert"),bst.forEach(t),Uqo=r(o8e," \u2014 "),HG=n(o8e,"A",{href:!0});var vst=s(HG);Jqo=r(vst,"AlbertForQuestionAnswering"),vst.forEach(t),Yqo=r(o8e," (ALBERT model)"),o8e.forEach(t),Kqo=i(X),L2=n(X,"LI",{});var r8e=s(L2);_me=n(r8e,"STRONG",{});var Fst=s(_me);Zqo=r(Fst,"bart"),Fst.forEach(t),eNo=r(r8e," \u2014 "),UG=n(r8e,"A",{href:!0});var Tst=s(UG);oNo=r(Tst,"BartForQuestionAnswering"),Tst.forEach(t),rNo=r(r8e," (BART model)"),r8e.forEach(t),tNo=i(X),x2=n(X,"LI",{});var t8e=s(x2);bme=n(t8e,"STRONG",{});var Mst=s(bme);aNo=r(Mst,"bert"),Mst.forEach(t),nNo=r(t8e," \u2014 "),JG=n(t8e,"A",{href:!0});var Est=s(JG);sNo=r(Est,"BertForQuestionAnswering"),Est.forEach(t),lNo=r(t8e," (BERT model)"),t8e.forEach(t),iNo=i(X),$2=n(X,"LI",{});var a8e=s($2);vme=n(a8e,"STRONG",{});var Cst=s(vme);dNo=r(Cst,"big_bird"),Cst.forEach(t),cNo=r(a8e," \u2014 "),YG=n(a8e,"A",{href:!0});var wst=s(YG);fNo=r(wst,"BigBirdForQuestionAnswering"),wst.forEach(t),mNo=r(a8e," (BigBird model)"),a8e.forEach(t),gNo=i(X),k2=n(X,"LI",{});var n8e=s(k2);Fme=n(n8e,"STRONG",{});var Ast=s(Fme);hNo=r(Ast,"bigbird_pegasus"),Ast.forEach(t),pNo=r(n8e," \u2014 "),KG=n(n8e,"A",{href:!0});var yst=s(KG);uNo=r(yst,"BigBirdPegasusForQuestionAnswering"),yst.forEach(t),_No=r(n8e," (BigBirdPegasus model)"),n8e.forEach(t),bNo=i(X),S2=n(X,"LI",{});var s8e=s(S2);Tme=n(s8e,"STRONG",{});var Lst=s(Tme);vNo=r(Lst,"camembert"),Lst.forEach(t),FNo=r(s8e," \u2014 "),ZG=n(s8e,"A",{href:!0});var xst=s(ZG);TNo=r(xst,"CamembertForQuestionAnswering"),xst.forEach(t),MNo=r(s8e," (CamemBERT model)"),s8e.forEach(t),ENo=i(X),R2=n(X,"LI",{});var l8e=s(R2);Mme=n(l8e,"STRONG",{});var $st=s(Mme);CNo=r($st,"canine"),$st.forEach(t),wNo=r(l8e," \u2014 "),eO=n(l8e,"A",{href:!0});var kst=s(eO);ANo=r(kst,"CanineForQuestionAnswering"),kst.forEach(t),yNo=r(l8e," (Canine model)"),l8e.forEach(t),LNo=i(X),B2=n(X,"LI",{});var i8e=s(B2);Eme=n(i8e,"STRONG",{});var Sst=s(Eme);xNo=r(Sst,"convbert"),Sst.forEach(t),$No=r(i8e," \u2014 "),oO=n(i8e,"A",{href:!0});var Rst=s(oO);kNo=r(Rst,"ConvBertForQuestionAnswering"),Rst.forEach(t),SNo=r(i8e," (ConvBERT model)"),i8e.forEach(t),RNo=i(X),P2=n(X,"LI",{});var d8e=s(P2);Cme=n(d8e,"STRONG",{});var Bst=s(Cme);BNo=r(Bst,"data2vec-text"),Bst.forEach(t),PNo=r(d8e," \u2014 "),rO=n(d8e,"A",{href:!0});var Pst=s(rO);INo=r(Pst,"Data2VecTextForQuestionAnswering"),Pst.forEach(t),qNo=r(d8e," (Data2VecText model)"),d8e.forEach(t),NNo=i(X),I2=n(X,"LI",{});var c8e=s(I2);wme=n(c8e,"STRONG",{});var Ist=s(wme);jNo=r(Ist,"deberta"),Ist.forEach(t),DNo=r(c8e," \u2014 "),tO=n(c8e,"A",{href:!0});var qst=s(tO);GNo=r(qst,"DebertaForQuestionAnswering"),qst.forEach(t),ONo=r(c8e," (DeBERTa model)"),c8e.forEach(t),VNo=i(X),q2=n(X,"LI",{});var f8e=s(q2);Ame=n(f8e,"STRONG",{});var Nst=s(Ame);XNo=r(Nst,"deberta-v2"),Nst.forEach(t),zNo=r(f8e," \u2014 "),aO=n(f8e,"A",{href:!0});var jst=s(aO);QNo=r(jst,"DebertaV2ForQuestionAnswering"),jst.forEach(t),WNo=r(f8e," (DeBERTa-v2 model)"),f8e.forEach(t),HNo=i(X),N2=n(X,"LI",{});var m8e=s(N2);yme=n(m8e,"STRONG",{});var Dst=s(yme);UNo=r(Dst,"distilbert"),Dst.forEach(t),JNo=r(m8e," \u2014 "),nO=n(m8e,"A",{href:!0});var Gst=s(nO);YNo=r(Gst,"DistilBertForQuestionAnswering"),Gst.forEach(t),KNo=r(m8e," (DistilBERT model)"),m8e.forEach(t),ZNo=i(X),j2=n(X,"LI",{});var g8e=s(j2);Lme=n(g8e,"STRONG",{});var Ost=s(Lme);ejo=r(Ost,"electra"),Ost.forEach(t),ojo=r(g8e," \u2014 "),sO=n(g8e,"A",{href:!0});var Vst=s(sO);rjo=r(Vst,"ElectraForQuestionAnswering"),Vst.forEach(t),tjo=r(g8e," (ELECTRA model)"),g8e.forEach(t),ajo=i(X),D2=n(X,"LI",{});var h8e=s(D2);xme=n(h8e,"STRONG",{});var Xst=s(xme);njo=r(Xst,"flaubert"),Xst.forEach(t),sjo=r(h8e," \u2014 "),lO=n(h8e,"A",{href:!0});var zst=s(lO);ljo=r(zst,"FlaubertForQuestionAnsweringSimple"),zst.forEach(t),ijo=r(h8e," (FlauBERT model)"),h8e.forEach(t),djo=i(X),G2=n(X,"LI",{});var p8e=s(G2);$me=n(p8e,"STRONG",{});var Qst=s($me);cjo=r(Qst,"fnet"),Qst.forEach(t),fjo=r(p8e," \u2014 "),iO=n(p8e,"A",{href:!0});var Wst=s(iO);mjo=r(Wst,"FNetForQuestionAnswering"),Wst.forEach(t),gjo=r(p8e," (FNet model)"),p8e.forEach(t),hjo=i(X),O2=n(X,"LI",{});var u8e=s(O2);kme=n(u8e,"STRONG",{});var Hst=s(kme);pjo=r(Hst,"funnel"),Hst.forEach(t),ujo=r(u8e," \u2014 "),dO=n(u8e,"A",{href:!0});var Ust=s(dO);_jo=r(Ust,"FunnelForQuestionAnswering"),Ust.forEach(t),bjo=r(u8e," (Funnel Transformer model)"),u8e.forEach(t),vjo=i(X),V2=n(X,"LI",{});var _8e=s(V2);Sme=n(_8e,"STRONG",{});var Jst=s(Sme);Fjo=r(Jst,"gptj"),Jst.forEach(t),Tjo=r(_8e," \u2014 "),cO=n(_8e,"A",{href:!0});var Yst=s(cO);Mjo=r(Yst,"GPTJForQuestionAnswering"),Yst.forEach(t),Ejo=r(_8e," (GPT-J model)"),_8e.forEach(t),Cjo=i(X),X2=n(X,"LI",{});var b8e=s(X2);Rme=n(b8e,"STRONG",{});var Kst=s(Rme);wjo=r(Kst,"ibert"),Kst.forEach(t),Ajo=r(b8e," \u2014 "),fO=n(b8e,"A",{href:!0});var Zst=s(fO);yjo=r(Zst,"IBertForQuestionAnswering"),Zst.forEach(t),Ljo=r(b8e," (I-BERT model)"),b8e.forEach(t),xjo=i(X),z2=n(X,"LI",{});var v8e=s(z2);Bme=n(v8e,"STRONG",{});var elt=s(Bme);$jo=r(elt,"layoutlmv2"),elt.forEach(t),kjo=r(v8e," \u2014 "),mO=n(v8e,"A",{href:!0});var olt=s(mO);Sjo=r(olt,"LayoutLMv2ForQuestionAnswering"),olt.forEach(t),Rjo=r(v8e," (LayoutLMv2 model)"),v8e.forEach(t),Bjo=i(X),Q2=n(X,"LI",{});var F8e=s(Q2);Pme=n(F8e,"STRONG",{});var rlt=s(Pme);Pjo=r(rlt,"led"),rlt.forEach(t),Ijo=r(F8e," \u2014 "),gO=n(F8e,"A",{href:!0});var tlt=s(gO);qjo=r(tlt,"LEDForQuestionAnswering"),tlt.forEach(t),Njo=r(F8e," (LED model)"),F8e.forEach(t),jjo=i(X),W2=n(X,"LI",{});var T8e=s(W2);Ime=n(T8e,"STRONG",{});var alt=s(Ime);Djo=r(alt,"longformer"),alt.forEach(t),Gjo=r(T8e," \u2014 "),hO=n(T8e,"A",{href:!0});var nlt=s(hO);Ojo=r(nlt,"LongformerForQuestionAnswering"),nlt.forEach(t),Vjo=r(T8e," (Longformer model)"),T8e.forEach(t),Xjo=i(X),H2=n(X,"LI",{});var M8e=s(H2);qme=n(M8e,"STRONG",{});var slt=s(qme);zjo=r(slt,"lxmert"),slt.forEach(t),Qjo=r(M8e," \u2014 "),pO=n(M8e,"A",{href:!0});var llt=s(pO);Wjo=r(llt,"LxmertForQuestionAnswering"),llt.forEach(t),Hjo=r(M8e," (LXMERT model)"),M8e.forEach(t),Ujo=i(X),U2=n(X,"LI",{});var E8e=s(U2);Nme=n(E8e,"STRONG",{});var ilt=s(Nme);Jjo=r(ilt,"mbart"),ilt.forEach(t),Yjo=r(E8e," \u2014 "),uO=n(E8e,"A",{href:!0});var dlt=s(uO);Kjo=r(dlt,"MBartForQuestionAnswering"),dlt.forEach(t),Zjo=r(E8e," (mBART model)"),E8e.forEach(t),eDo=i(X),J2=n(X,"LI",{});var C8e=s(J2);jme=n(C8e,"STRONG",{});var clt=s(jme);oDo=r(clt,"megatron-bert"),clt.forEach(t),rDo=r(C8e," \u2014 "),_O=n(C8e,"A",{href:!0});var flt=s(_O);tDo=r(flt,"MegatronBertForQuestionAnswering"),flt.forEach(t),aDo=r(C8e," (MegatronBert model)"),C8e.forEach(t),nDo=i(X),Y2=n(X,"LI",{});var w8e=s(Y2);Dme=n(w8e,"STRONG",{});var mlt=s(Dme);sDo=r(mlt,"mobilebert"),mlt.forEach(t),lDo=r(w8e," \u2014 "),bO=n(w8e,"A",{href:!0});var glt=s(bO);iDo=r(glt,"MobileBertForQuestionAnswering"),glt.forEach(t),dDo=r(w8e," (MobileBERT model)"),w8e.forEach(t),cDo=i(X),K2=n(X,"LI",{});var A8e=s(K2);Gme=n(A8e,"STRONG",{});var hlt=s(Gme);fDo=r(hlt,"mpnet"),hlt.forEach(t),mDo=r(A8e," \u2014 "),vO=n(A8e,"A",{href:!0});var plt=s(vO);gDo=r(plt,"MPNetForQuestionAnswering"),plt.forEach(t),hDo=r(A8e," (MPNet model)"),A8e.forEach(t),pDo=i(X),Z2=n(X,"LI",{});var y8e=s(Z2);Ome=n(y8e,"STRONG",{});var ult=s(Ome);uDo=r(ult,"nystromformer"),ult.forEach(t),_Do=r(y8e," \u2014 "),FO=n(y8e,"A",{href:!0});var _lt=s(FO);bDo=r(_lt,"NystromformerForQuestionAnswering"),_lt.forEach(t),vDo=r(y8e," (Nystromformer model)"),y8e.forEach(t),FDo=i(X),ev=n(X,"LI",{});var L8e=s(ev);Vme=n(L8e,"STRONG",{});var blt=s(Vme);TDo=r(blt,"qdqbert"),blt.forEach(t),MDo=r(L8e," \u2014 "),TO=n(L8e,"A",{href:!0});var vlt=s(TO);EDo=r(vlt,"QDQBertForQuestionAnswering"),vlt.forEach(t),CDo=r(L8e," (QDQBert model)"),L8e.forEach(t),wDo=i(X),ov=n(X,"LI",{});var x8e=s(ov);Xme=n(x8e,"STRONG",{});var Flt=s(Xme);ADo=r(Flt,"reformer"),Flt.forEach(t),yDo=r(x8e," \u2014 "),MO=n(x8e,"A",{href:!0});var Tlt=s(MO);LDo=r(Tlt,"ReformerForQuestionAnswering"),Tlt.forEach(t),xDo=r(x8e," (Reformer model)"),x8e.forEach(t),$Do=i(X),rv=n(X,"LI",{});var $8e=s(rv);zme=n($8e,"STRONG",{});var Mlt=s(zme);kDo=r(Mlt,"rembert"),Mlt.forEach(t),SDo=r($8e," \u2014 "),EO=n($8e,"A",{href:!0});var Elt=s(EO);RDo=r(Elt,"RemBertForQuestionAnswering"),Elt.forEach(t),BDo=r($8e," (RemBERT model)"),$8e.forEach(t),PDo=i(X),tv=n(X,"LI",{});var k8e=s(tv);Qme=n(k8e,"STRONG",{});var Clt=s(Qme);IDo=r(Clt,"roberta"),Clt.forEach(t),qDo=r(k8e," \u2014 "),CO=n(k8e,"A",{href:!0});var wlt=s(CO);NDo=r(wlt,"RobertaForQuestionAnswering"),wlt.forEach(t),jDo=r(k8e," (RoBERTa model)"),k8e.forEach(t),DDo=i(X),av=n(X,"LI",{});var S8e=s(av);Wme=n(S8e,"STRONG",{});var Alt=s(Wme);GDo=r(Alt,"roformer"),Alt.forEach(t),ODo=r(S8e," \u2014 "),wO=n(S8e,"A",{href:!0});var ylt=s(wO);VDo=r(ylt,"RoFormerForQuestionAnswering"),ylt.forEach(t),XDo=r(S8e," (RoFormer model)"),S8e.forEach(t),zDo=i(X),nv=n(X,"LI",{});var R8e=s(nv);Hme=n(R8e,"STRONG",{});var Llt=s(Hme);QDo=r(Llt,"splinter"),Llt.forEach(t),WDo=r(R8e," \u2014 "),AO=n(R8e,"A",{href:!0});var xlt=s(AO);HDo=r(xlt,"SplinterForQuestionAnswering"),xlt.forEach(t),UDo=r(R8e," (Splinter model)"),R8e.forEach(t),JDo=i(X),sv=n(X,"LI",{});var B8e=s(sv);Ume=n(B8e,"STRONG",{});var $lt=s(Ume);YDo=r($lt,"squeezebert"),$lt.forEach(t),KDo=r(B8e," \u2014 "),yO=n(B8e,"A",{href:!0});var klt=s(yO);ZDo=r(klt,"SqueezeBertForQuestionAnswering"),klt.forEach(t),eGo=r(B8e," (SqueezeBERT model)"),B8e.forEach(t),oGo=i(X),lv=n(X,"LI",{});var P8e=s(lv);Jme=n(P8e,"STRONG",{});var Slt=s(Jme);rGo=r(Slt,"xlm"),Slt.forEach(t),tGo=r(P8e," \u2014 "),LO=n(P8e,"A",{href:!0});var Rlt=s(LO);aGo=r(Rlt,"XLMForQuestionAnsweringSimple"),Rlt.forEach(t),nGo=r(P8e," (XLM model)"),P8e.forEach(t),sGo=i(X),iv=n(X,"LI",{});var I8e=s(iv);Yme=n(I8e,"STRONG",{});var Blt=s(Yme);lGo=r(Blt,"xlm-roberta"),Blt.forEach(t),iGo=r(I8e," \u2014 "),xO=n(I8e,"A",{href:!0});var Plt=s(xO);dGo=r(Plt,"XLMRobertaForQuestionAnswering"),Plt.forEach(t),cGo=r(I8e," (XLM-RoBERTa model)"),I8e.forEach(t),fGo=i(X),dv=n(X,"LI",{});var q8e=s(dv);Kme=n(q8e,"STRONG",{});var Ilt=s(Kme);mGo=r(Ilt,"xlm-roberta-xl"),Ilt.forEach(t),gGo=r(q8e," \u2014 "),$O=n(q8e,"A",{href:!0});var qlt=s($O);hGo=r(qlt,"XLMRobertaXLForQuestionAnswering"),qlt.forEach(t),pGo=r(q8e," (XLM-RoBERTa-XL model)"),q8e.forEach(t),uGo=i(X),cv=n(X,"LI",{});var N8e=s(cv);Zme=n(N8e,"STRONG",{});var Nlt=s(Zme);_Go=r(Nlt,"xlnet"),Nlt.forEach(t),bGo=r(N8e," \u2014 "),kO=n(N8e,"A",{href:!0});var jlt=s(kO);vGo=r(jlt,"XLNetForQuestionAnsweringSimple"),jlt.forEach(t),FGo=r(N8e," (XLNet model)"),N8e.forEach(t),TGo=i(X),fv=n(X,"LI",{});var j8e=s(fv);ege=n(j8e,"STRONG",{});var Dlt=s(ege);MGo=r(Dlt,"yoso"),Dlt.forEach(t),EGo=r(j8e," \u2014 "),SO=n(j8e,"A",{href:!0});var Glt=s(SO);CGo=r(Glt,"YosoForQuestionAnswering"),Glt.forEach(t),wGo=r(j8e," (YOSO model)"),j8e.forEach(t),X.forEach(t),AGo=i(na),mv=n(na,"P",{});var D8e=s(mv);yGo=r(D8e,"The model is set in evaluation mode by default using "),oge=n(D8e,"CODE",{});var Olt=s(oge);LGo=r(Olt,"model.eval()"),Olt.forEach(t),xGo=r(D8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rge=n(D8e,"CODE",{});var Vlt=s(rge);$Go=r(Vlt,"model.train()"),Vlt.forEach(t),D8e.forEach(t),kGo=i(na),T(gv.$$.fragment,na),na.forEach(t),zs.forEach(t),dPe=i(f),zi=n(f,"H2",{class:!0});var fqe=s(zi);hv=n(fqe,"A",{id:!0,class:!0,href:!0});var Xlt=s(hv);tge=n(Xlt,"SPAN",{});var zlt=s(tge);T(J0.$$.fragment,zlt),zlt.forEach(t),Xlt.forEach(t),SGo=i(fqe),age=n(fqe,"SPAN",{});var Qlt=s(age);RGo=r(Qlt,"AutoModelForTableQuestionAnswering"),Qlt.forEach(t),fqe.forEach(t),cPe=i(f),No=n(f,"DIV",{class:!0});var Qs=s(No);T(Y0.$$.fragment,Qs),BGo=i(Qs),Qi=n(Qs,"P",{});var VY=s(Qi);PGo=r(VY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),RO=n(VY,"A",{href:!0});var Wlt=s(RO);IGo=r(Wlt,"from_pretrained()"),Wlt.forEach(t),qGo=r(VY," class method or the "),BO=n(VY,"A",{href:!0});var Hlt=s(BO);NGo=r(Hlt,"from_config()"),Hlt.forEach(t),jGo=r(VY,` class
method.`),VY.forEach(t),DGo=i(Qs),K0=n(Qs,"P",{});var mqe=s(K0);GGo=r(mqe,"This class cannot be instantiated directly using "),nge=n(mqe,"CODE",{});var Ult=s(nge);OGo=r(Ult,"__init__()"),Ult.forEach(t),VGo=r(mqe," (throws an error)."),mqe.forEach(t),XGo=i(Qs),dt=n(Qs,"DIV",{class:!0});var Z3=s(dt);T(Z0.$$.fragment,Z3),zGo=i(Z3),sge=n(Z3,"P",{});var Jlt=s(sge);QGo=r(Jlt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Jlt.forEach(t),WGo=i(Z3),Wi=n(Z3,"P",{});var XY=s(Wi);HGo=r(XY,`Note:
Loading a model from its configuration file does `),lge=n(XY,"STRONG",{});var Ylt=s(lge);UGo=r(Ylt,"not"),Ylt.forEach(t),JGo=r(XY,` load the model weights. It only affects the
model\u2019s configuration. Use `),PO=n(XY,"A",{href:!0});var Klt=s(PO);YGo=r(Klt,"from_pretrained()"),Klt.forEach(t),KGo=r(XY," to load the model weights."),XY.forEach(t),ZGo=i(Z3),T(pv.$$.fragment,Z3),Z3.forEach(t),eOo=i(Qs),ao=n(Qs,"DIV",{class:!0});var sa=s(ao);T(ey.$$.fragment,sa),oOo=i(sa),ige=n(sa,"P",{});var Zlt=s(ige);rOo=r(Zlt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Zlt.forEach(t),tOo=i(sa),Ra=n(sa,"P",{});var ew=s(Ra);aOo=r(ew,"The model class to instantiate is selected based on the "),dge=n(ew,"CODE",{});var eit=s(dge);nOo=r(eit,"model_type"),eit.forEach(t),sOo=r(ew,` property of the config object (either
passed as an argument or loaded from `),cge=n(ew,"CODE",{});var oit=s(cge);lOo=r(oit,"pretrained_model_name_or_path"),oit.forEach(t),iOo=r(ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fge=n(ew,"CODE",{});var rit=s(fge);dOo=r(rit,"pretrained_model_name_or_path"),rit.forEach(t),cOo=r(ew,":"),ew.forEach(t),fOo=i(sa),mge=n(sa,"UL",{});var tit=s(mge);uv=n(tit,"LI",{});var G8e=s(uv);gge=n(G8e,"STRONG",{});var ait=s(gge);mOo=r(ait,"tapas"),ait.forEach(t),gOo=r(G8e," \u2014 "),IO=n(G8e,"A",{href:!0});var nit=s(IO);hOo=r(nit,"TapasForQuestionAnswering"),nit.forEach(t),pOo=r(G8e," (TAPAS model)"),G8e.forEach(t),tit.forEach(t),uOo=i(sa),_v=n(sa,"P",{});var O8e=s(_v);_Oo=r(O8e,"The model is set in evaluation mode by default using "),hge=n(O8e,"CODE",{});var sit=s(hge);bOo=r(sit,"model.eval()"),sit.forEach(t),vOo=r(O8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pge=n(O8e,"CODE",{});var lit=s(pge);FOo=r(lit,"model.train()"),lit.forEach(t),O8e.forEach(t),TOo=i(sa),T(bv.$$.fragment,sa),sa.forEach(t),Qs.forEach(t),fPe=i(f),Hi=n(f,"H2",{class:!0});var gqe=s(Hi);vv=n(gqe,"A",{id:!0,class:!0,href:!0});var iit=s(vv);uge=n(iit,"SPAN",{});var dit=s(uge);T(oy.$$.fragment,dit),dit.forEach(t),iit.forEach(t),MOo=i(gqe),_ge=n(gqe,"SPAN",{});var cit=s(_ge);EOo=r(cit,"AutoModelForImageClassification"),cit.forEach(t),gqe.forEach(t),mPe=i(f),jo=n(f,"DIV",{class:!0});var Ws=s(jo);T(ry.$$.fragment,Ws),COo=i(Ws),Ui=n(Ws,"P",{});var zY=s(Ui);wOo=r(zY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),qO=n(zY,"A",{href:!0});var fit=s(qO);AOo=r(fit,"from_pretrained()"),fit.forEach(t),yOo=r(zY," class method or the "),NO=n(zY,"A",{href:!0});var mit=s(NO);LOo=r(mit,"from_config()"),mit.forEach(t),xOo=r(zY,` class
method.`),zY.forEach(t),$Oo=i(Ws),ty=n(Ws,"P",{});var hqe=s(ty);kOo=r(hqe,"This class cannot be instantiated directly using "),bge=n(hqe,"CODE",{});var git=s(bge);SOo=r(git,"__init__()"),git.forEach(t),ROo=r(hqe," (throws an error)."),hqe.forEach(t),BOo=i(Ws),ct=n(Ws,"DIV",{class:!0});var ow=s(ct);T(ay.$$.fragment,ow),POo=i(ow),vge=n(ow,"P",{});var hit=s(vge);IOo=r(hit,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),hit.forEach(t),qOo=i(ow),Ji=n(ow,"P",{});var QY=s(Ji);NOo=r(QY,`Note:
Loading a model from its configuration file does `),Fge=n(QY,"STRONG",{});var pit=s(Fge);jOo=r(pit,"not"),pit.forEach(t),DOo=r(QY,` load the model weights. It only affects the
model\u2019s configuration. Use `),jO=n(QY,"A",{href:!0});var uit=s(jO);GOo=r(uit,"from_pretrained()"),uit.forEach(t),OOo=r(QY," to load the model weights."),QY.forEach(t),VOo=i(ow),T(Fv.$$.fragment,ow),ow.forEach(t),XOo=i(Ws),no=n(Ws,"DIV",{class:!0});var la=s(no);T(ny.$$.fragment,la),zOo=i(la),Tge=n(la,"P",{});var _it=s(Tge);QOo=r(_it,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),_it.forEach(t),WOo=i(la),Ba=n(la,"P",{});var rw=s(Ba);HOo=r(rw,"The model class to instantiate is selected based on the "),Mge=n(rw,"CODE",{});var bit=s(Mge);UOo=r(bit,"model_type"),bit.forEach(t),JOo=r(rw,` property of the config object (either
passed as an argument or loaded from `),Ege=n(rw,"CODE",{});var vit=s(Ege);YOo=r(vit,"pretrained_model_name_or_path"),vit.forEach(t),KOo=r(rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cge=n(rw,"CODE",{});var Fit=s(Cge);ZOo=r(Fit,"pretrained_model_name_or_path"),Fit.forEach(t),eVo=r(rw,":"),rw.forEach(t),oVo=i(la),ve=n(la,"UL",{});var Te=s(ve);Tv=n(Te,"LI",{});var V8e=s(Tv);wge=n(V8e,"STRONG",{});var Tit=s(wge);rVo=r(Tit,"beit"),Tit.forEach(t),tVo=r(V8e," \u2014 "),DO=n(V8e,"A",{href:!0});var Mit=s(DO);aVo=r(Mit,"BeitForImageClassification"),Mit.forEach(t),nVo=r(V8e," (BEiT model)"),V8e.forEach(t),sVo=i(Te),Mv=n(Te,"LI",{});var X8e=s(Mv);Age=n(X8e,"STRONG",{});var Eit=s(Age);lVo=r(Eit,"convnext"),Eit.forEach(t),iVo=r(X8e," \u2014 "),GO=n(X8e,"A",{href:!0});var Cit=s(GO);dVo=r(Cit,"ConvNextForImageClassification"),Cit.forEach(t),cVo=r(X8e," (ConvNext model)"),X8e.forEach(t),fVo=i(Te),Ev=n(Te,"LI",{});var z8e=s(Ev);yge=n(z8e,"STRONG",{});var wit=s(yge);mVo=r(wit,"cvt"),wit.forEach(t),gVo=r(z8e," \u2014 "),OO=n(z8e,"A",{href:!0});var Ait=s(OO);hVo=r(Ait,"CvtForImageClassification"),Ait.forEach(t),pVo=r(z8e," (Cvt model)"),z8e.forEach(t),uVo=i(Te),Cv=n(Te,"LI",{});var Q8e=s(Cv);Lge=n(Q8e,"STRONG",{});var yit=s(Lge);_Vo=r(yit,"data2vec-vision"),yit.forEach(t),bVo=r(Q8e," \u2014 "),VO=n(Q8e,"A",{href:!0});var Lit=s(VO);vVo=r(Lit,"Data2VecVisionForImageClassification"),Lit.forEach(t),FVo=r(Q8e," (Data2VecVision model)"),Q8e.forEach(t),TVo=i(Te),xs=n(Te,"LI",{});var q9=s(xs);xge=n(q9,"STRONG",{});var xit=s(xge);MVo=r(xit,"deit"),xit.forEach(t),EVo=r(q9," \u2014 "),XO=n(q9,"A",{href:!0});var $it=s(XO);CVo=r($it,"DeiTForImageClassification"),$it.forEach(t),wVo=r(q9," or "),zO=n(q9,"A",{href:!0});var kit=s(zO);AVo=r(kit,"DeiTForImageClassificationWithTeacher"),kit.forEach(t),yVo=r(q9," (DeiT model)"),q9.forEach(t),LVo=i(Te),wv=n(Te,"LI",{});var W8e=s(wv);$ge=n(W8e,"STRONG",{});var Sit=s($ge);xVo=r(Sit,"imagegpt"),Sit.forEach(t),$Vo=r(W8e," \u2014 "),QO=n(W8e,"A",{href:!0});var Rit=s(QO);kVo=r(Rit,"ImageGPTForImageClassification"),Rit.forEach(t),SVo=r(W8e," (ImageGPT model)"),W8e.forEach(t),RVo=i(Te),ft=n(Te,"LI",{});var of=s(ft);kge=n(of,"STRONG",{});var Bit=s(kge);BVo=r(Bit,"perceiver"),Bit.forEach(t),PVo=r(of," \u2014 "),WO=n(of,"A",{href:!0});var Pit=s(WO);IVo=r(Pit,"PerceiverForImageClassificationLearned"),Pit.forEach(t),qVo=r(of," or "),HO=n(of,"A",{href:!0});var Iit=s(HO);NVo=r(Iit,"PerceiverForImageClassificationFourier"),Iit.forEach(t),jVo=r(of," or "),UO=n(of,"A",{href:!0});var qit=s(UO);DVo=r(qit,"PerceiverForImageClassificationConvProcessing"),qit.forEach(t),GVo=r(of," (Perceiver model)"),of.forEach(t),OVo=i(Te),Av=n(Te,"LI",{});var H8e=s(Av);Sge=n(H8e,"STRONG",{});var Nit=s(Sge);VVo=r(Nit,"poolformer"),Nit.forEach(t),XVo=r(H8e," \u2014 "),JO=n(H8e,"A",{href:!0});var jit=s(JO);zVo=r(jit,"PoolFormerForImageClassification"),jit.forEach(t),QVo=r(H8e," (PoolFormer model)"),H8e.forEach(t),WVo=i(Te),yv=n(Te,"LI",{});var U8e=s(yv);Rge=n(U8e,"STRONG",{});var Dit=s(Rge);HVo=r(Dit,"regnet"),Dit.forEach(t),UVo=r(U8e," \u2014 "),YO=n(U8e,"A",{href:!0});var Git=s(YO);JVo=r(Git,"RegNetForImageClassification"),Git.forEach(t),YVo=r(U8e," (RegNet model)"),U8e.forEach(t),KVo=i(Te),Lv=n(Te,"LI",{});var J8e=s(Lv);Bge=n(J8e,"STRONG",{});var Oit=s(Bge);ZVo=r(Oit,"resnet"),Oit.forEach(t),eXo=r(J8e," \u2014 "),KO=n(J8e,"A",{href:!0});var Vit=s(KO);oXo=r(Vit,"ResNetForImageClassification"),Vit.forEach(t),rXo=r(J8e," (ResNet model)"),J8e.forEach(t),tXo=i(Te),xv=n(Te,"LI",{});var Y8e=s(xv);Pge=n(Y8e,"STRONG",{});var Xit=s(Pge);aXo=r(Xit,"segformer"),Xit.forEach(t),nXo=r(Y8e," \u2014 "),ZO=n(Y8e,"A",{href:!0});var zit=s(ZO);sXo=r(zit,"SegformerForImageClassification"),zit.forEach(t),lXo=r(Y8e," (SegFormer model)"),Y8e.forEach(t),iXo=i(Te),$v=n(Te,"LI",{});var K8e=s($v);Ige=n(K8e,"STRONG",{});var Qit=s(Ige);dXo=r(Qit,"swin"),Qit.forEach(t),cXo=r(K8e," \u2014 "),eV=n(K8e,"A",{href:!0});var Wit=s(eV);fXo=r(Wit,"SwinForImageClassification"),Wit.forEach(t),mXo=r(K8e," (Swin model)"),K8e.forEach(t),gXo=i(Te),kv=n(Te,"LI",{});var Z8e=s(kv);qge=n(Z8e,"STRONG",{});var Hit=s(qge);hXo=r(Hit,"van"),Hit.forEach(t),pXo=r(Z8e," \u2014 "),oV=n(Z8e,"A",{href:!0});var Uit=s(oV);uXo=r(Uit,"VanForImageClassification"),Uit.forEach(t),_Xo=r(Z8e," (VAN model)"),Z8e.forEach(t),bXo=i(Te),Sv=n(Te,"LI",{});var exe=s(Sv);Nge=n(exe,"STRONG",{});var Jit=s(Nge);vXo=r(Jit,"vit"),Jit.forEach(t),FXo=r(exe," \u2014 "),rV=n(exe,"A",{href:!0});var Yit=s(rV);TXo=r(Yit,"ViTForImageClassification"),Yit.forEach(t),MXo=r(exe," (ViT model)"),exe.forEach(t),Te.forEach(t),EXo=i(la),Rv=n(la,"P",{});var oxe=s(Rv);CXo=r(oxe,"The model is set in evaluation mode by default using "),jge=n(oxe,"CODE",{});var Kit=s(jge);wXo=r(Kit,"model.eval()"),Kit.forEach(t),AXo=r(oxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dge=n(oxe,"CODE",{});var Zit=s(Dge);yXo=r(Zit,"model.train()"),Zit.forEach(t),oxe.forEach(t),LXo=i(la),T(Bv.$$.fragment,la),la.forEach(t),Ws.forEach(t),gPe=i(f),Yi=n(f,"H2",{class:!0});var pqe=s(Yi);Pv=n(pqe,"A",{id:!0,class:!0,href:!0});var edt=s(Pv);Gge=n(edt,"SPAN",{});var odt=s(Gge);T(sy.$$.fragment,odt),odt.forEach(t),edt.forEach(t),xXo=i(pqe),Oge=n(pqe,"SPAN",{});var rdt=s(Oge);$Xo=r(rdt,"AutoModelForVision2Seq"),rdt.forEach(t),pqe.forEach(t),hPe=i(f),Do=n(f,"DIV",{class:!0});var Hs=s(Do);T(ly.$$.fragment,Hs),kXo=i(Hs),Ki=n(Hs,"P",{});var WY=s(Ki);SXo=r(WY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),tV=n(WY,"A",{href:!0});var tdt=s(tV);RXo=r(tdt,"from_pretrained()"),tdt.forEach(t),BXo=r(WY," class method or the "),aV=n(WY,"A",{href:!0});var adt=s(aV);PXo=r(adt,"from_config()"),adt.forEach(t),IXo=r(WY,` class
method.`),WY.forEach(t),qXo=i(Hs),iy=n(Hs,"P",{});var uqe=s(iy);NXo=r(uqe,"This class cannot be instantiated directly using "),Vge=n(uqe,"CODE",{});var ndt=s(Vge);jXo=r(ndt,"__init__()"),ndt.forEach(t),DXo=r(uqe," (throws an error)."),uqe.forEach(t),GXo=i(Hs),mt=n(Hs,"DIV",{class:!0});var tw=s(mt);T(dy.$$.fragment,tw),OXo=i(tw),Xge=n(tw,"P",{});var sdt=s(Xge);VXo=r(sdt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),sdt.forEach(t),XXo=i(tw),Zi=n(tw,"P",{});var HY=s(Zi);zXo=r(HY,`Note:
Loading a model from its configuration file does `),zge=n(HY,"STRONG",{});var ldt=s(zge);QXo=r(ldt,"not"),ldt.forEach(t),WXo=r(HY,` load the model weights. It only affects the
model\u2019s configuration. Use `),nV=n(HY,"A",{href:!0});var idt=s(nV);HXo=r(idt,"from_pretrained()"),idt.forEach(t),UXo=r(HY," to load the model weights."),HY.forEach(t),JXo=i(tw),T(Iv.$$.fragment,tw),tw.forEach(t),YXo=i(Hs),so=n(Hs,"DIV",{class:!0});var ia=s(so);T(cy.$$.fragment,ia),KXo=i(ia),Qge=n(ia,"P",{});var ddt=s(Qge);ZXo=r(ddt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ddt.forEach(t),ezo=i(ia),Pa=n(ia,"P",{});var aw=s(Pa);ozo=r(aw,"The model class to instantiate is selected based on the "),Wge=n(aw,"CODE",{});var cdt=s(Wge);rzo=r(cdt,"model_type"),cdt.forEach(t),tzo=r(aw,` property of the config object (either
passed as an argument or loaded from `),Hge=n(aw,"CODE",{});var fdt=s(Hge);azo=r(fdt,"pretrained_model_name_or_path"),fdt.forEach(t),nzo=r(aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uge=n(aw,"CODE",{});var mdt=s(Uge);szo=r(mdt,"pretrained_model_name_or_path"),mdt.forEach(t),lzo=r(aw,":"),aw.forEach(t),izo=i(ia),Jge=n(ia,"UL",{});var gdt=s(Jge);qv=n(gdt,"LI",{});var rxe=s(qv);Yge=n(rxe,"STRONG",{});var hdt=s(Yge);dzo=r(hdt,"vision-encoder-decoder"),hdt.forEach(t),czo=r(rxe," \u2014 "),sV=n(rxe,"A",{href:!0});var pdt=s(sV);fzo=r(pdt,"VisionEncoderDecoderModel"),pdt.forEach(t),mzo=r(rxe," (Vision Encoder decoder model)"),rxe.forEach(t),gdt.forEach(t),gzo=i(ia),Nv=n(ia,"P",{});var txe=s(Nv);hzo=r(txe,"The model is set in evaluation mode by default using "),Kge=n(txe,"CODE",{});var udt=s(Kge);pzo=r(udt,"model.eval()"),udt.forEach(t),uzo=r(txe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zge=n(txe,"CODE",{});var _dt=s(Zge);_zo=r(_dt,"model.train()"),_dt.forEach(t),txe.forEach(t),bzo=i(ia),T(jv.$$.fragment,ia),ia.forEach(t),Hs.forEach(t),pPe=i(f),ed=n(f,"H2",{class:!0});var _qe=s(ed);Dv=n(_qe,"A",{id:!0,class:!0,href:!0});var bdt=s(Dv);ehe=n(bdt,"SPAN",{});var vdt=s(ehe);T(fy.$$.fragment,vdt),vdt.forEach(t),bdt.forEach(t),vzo=i(_qe),ohe=n(_qe,"SPAN",{});var Fdt=s(ohe);Fzo=r(Fdt,"AutoModelForAudioClassification"),Fdt.forEach(t),_qe.forEach(t),uPe=i(f),Go=n(f,"DIV",{class:!0});var Us=s(Go);T(my.$$.fragment,Us),Tzo=i(Us),od=n(Us,"P",{});var UY=s(od);Mzo=r(UY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),lV=n(UY,"A",{href:!0});var Tdt=s(lV);Ezo=r(Tdt,"from_pretrained()"),Tdt.forEach(t),Czo=r(UY," class method or the "),iV=n(UY,"A",{href:!0});var Mdt=s(iV);wzo=r(Mdt,"from_config()"),Mdt.forEach(t),Azo=r(UY,` class
method.`),UY.forEach(t),yzo=i(Us),gy=n(Us,"P",{});var bqe=s(gy);Lzo=r(bqe,"This class cannot be instantiated directly using "),rhe=n(bqe,"CODE",{});var Edt=s(rhe);xzo=r(Edt,"__init__()"),Edt.forEach(t),$zo=r(bqe," (throws an error)."),bqe.forEach(t),kzo=i(Us),gt=n(Us,"DIV",{class:!0});var nw=s(gt);T(hy.$$.fragment,nw),Szo=i(nw),the=n(nw,"P",{});var Cdt=s(the);Rzo=r(Cdt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Cdt.forEach(t),Bzo=i(nw),rd=n(nw,"P",{});var JY=s(rd);Pzo=r(JY,`Note:
Loading a model from its configuration file does `),ahe=n(JY,"STRONG",{});var wdt=s(ahe);Izo=r(wdt,"not"),wdt.forEach(t),qzo=r(JY,` load the model weights. It only affects the
model\u2019s configuration. Use `),dV=n(JY,"A",{href:!0});var Adt=s(dV);Nzo=r(Adt,"from_pretrained()"),Adt.forEach(t),jzo=r(JY," to load the model weights."),JY.forEach(t),Dzo=i(nw),T(Gv.$$.fragment,nw),nw.forEach(t),Gzo=i(Us),lo=n(Us,"DIV",{class:!0});var da=s(lo);T(py.$$.fragment,da),Ozo=i(da),nhe=n(da,"P",{});var ydt=s(nhe);Vzo=r(ydt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),ydt.forEach(t),Xzo=i(da),Ia=n(da,"P",{});var sw=s(Ia);zzo=r(sw,"The model class to instantiate is selected based on the "),she=n(sw,"CODE",{});var Ldt=s(she);Qzo=r(Ldt,"model_type"),Ldt.forEach(t),Wzo=r(sw,` property of the config object (either
passed as an argument or loaded from `),lhe=n(sw,"CODE",{});var xdt=s(lhe);Hzo=r(xdt,"pretrained_model_name_or_path"),xdt.forEach(t),Uzo=r(sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ihe=n(sw,"CODE",{});var $dt=s(ihe);Jzo=r($dt,"pretrained_model_name_or_path"),$dt.forEach(t),Yzo=r(sw,":"),sw.forEach(t),Kzo=i(da),Ne=n(da,"UL",{});var bo=s(Ne);Ov=n(bo,"LI",{});var axe=s(Ov);dhe=n(axe,"STRONG",{});var kdt=s(dhe);Zzo=r(kdt,"data2vec-audio"),kdt.forEach(t),eQo=r(axe," \u2014 "),cV=n(axe,"A",{href:!0});var Sdt=s(cV);oQo=r(Sdt,"Data2VecAudioForSequenceClassification"),Sdt.forEach(t),rQo=r(axe," (Data2VecAudio model)"),axe.forEach(t),tQo=i(bo),Vv=n(bo,"LI",{});var nxe=s(Vv);che=n(nxe,"STRONG",{});var Rdt=s(che);aQo=r(Rdt,"hubert"),Rdt.forEach(t),nQo=r(nxe," \u2014 "),fV=n(nxe,"A",{href:!0});var Bdt=s(fV);sQo=r(Bdt,"HubertForSequenceClassification"),Bdt.forEach(t),lQo=r(nxe," (Hubert model)"),nxe.forEach(t),iQo=i(bo),Xv=n(bo,"LI",{});var sxe=s(Xv);fhe=n(sxe,"STRONG",{});var Pdt=s(fhe);dQo=r(Pdt,"sew"),Pdt.forEach(t),cQo=r(sxe," \u2014 "),mV=n(sxe,"A",{href:!0});var Idt=s(mV);fQo=r(Idt,"SEWForSequenceClassification"),Idt.forEach(t),mQo=r(sxe," (SEW model)"),sxe.forEach(t),gQo=i(bo),zv=n(bo,"LI",{});var lxe=s(zv);mhe=n(lxe,"STRONG",{});var qdt=s(mhe);hQo=r(qdt,"sew-d"),qdt.forEach(t),pQo=r(lxe," \u2014 "),gV=n(lxe,"A",{href:!0});var Ndt=s(gV);uQo=r(Ndt,"SEWDForSequenceClassification"),Ndt.forEach(t),_Qo=r(lxe," (SEW-D model)"),lxe.forEach(t),bQo=i(bo),Qv=n(bo,"LI",{});var ixe=s(Qv);ghe=n(ixe,"STRONG",{});var jdt=s(ghe);vQo=r(jdt,"unispeech"),jdt.forEach(t),FQo=r(ixe," \u2014 "),hV=n(ixe,"A",{href:!0});var Ddt=s(hV);TQo=r(Ddt,"UniSpeechForSequenceClassification"),Ddt.forEach(t),MQo=r(ixe," (UniSpeech model)"),ixe.forEach(t),EQo=i(bo),Wv=n(bo,"LI",{});var dxe=s(Wv);hhe=n(dxe,"STRONG",{});var Gdt=s(hhe);CQo=r(Gdt,"unispeech-sat"),Gdt.forEach(t),wQo=r(dxe," \u2014 "),pV=n(dxe,"A",{href:!0});var Odt=s(pV);AQo=r(Odt,"UniSpeechSatForSequenceClassification"),Odt.forEach(t),yQo=r(dxe," (UniSpeechSat model)"),dxe.forEach(t),LQo=i(bo),Hv=n(bo,"LI",{});var cxe=s(Hv);phe=n(cxe,"STRONG",{});var Vdt=s(phe);xQo=r(Vdt,"wav2vec2"),Vdt.forEach(t),$Qo=r(cxe," \u2014 "),uV=n(cxe,"A",{href:!0});var Xdt=s(uV);kQo=r(Xdt,"Wav2Vec2ForSequenceClassification"),Xdt.forEach(t),SQo=r(cxe," (Wav2Vec2 model)"),cxe.forEach(t),RQo=i(bo),Uv=n(bo,"LI",{});var fxe=s(Uv);uhe=n(fxe,"STRONG",{});var zdt=s(uhe);BQo=r(zdt,"wavlm"),zdt.forEach(t),PQo=r(fxe," \u2014 "),_V=n(fxe,"A",{href:!0});var Qdt=s(_V);IQo=r(Qdt,"WavLMForSequenceClassification"),Qdt.forEach(t),qQo=r(fxe," (WavLM model)"),fxe.forEach(t),bo.forEach(t),NQo=i(da),Jv=n(da,"P",{});var mxe=s(Jv);jQo=r(mxe,"The model is set in evaluation mode by default using "),_he=n(mxe,"CODE",{});var Wdt=s(_he);DQo=r(Wdt,"model.eval()"),Wdt.forEach(t),GQo=r(mxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bhe=n(mxe,"CODE",{});var Hdt=s(bhe);OQo=r(Hdt,"model.train()"),Hdt.forEach(t),mxe.forEach(t),VQo=i(da),T(Yv.$$.fragment,da),da.forEach(t),Us.forEach(t),_Pe=i(f),td=n(f,"H2",{class:!0});var vqe=s(td);Kv=n(vqe,"A",{id:!0,class:!0,href:!0});var Udt=s(Kv);vhe=n(Udt,"SPAN",{});var Jdt=s(vhe);T(uy.$$.fragment,Jdt),Jdt.forEach(t),Udt.forEach(t),XQo=i(vqe),Fhe=n(vqe,"SPAN",{});var Ydt=s(Fhe);zQo=r(Ydt,"AutoModelForAudioFrameClassification"),Ydt.forEach(t),vqe.forEach(t),bPe=i(f),Oo=n(f,"DIV",{class:!0});var Js=s(Oo);T(_y.$$.fragment,Js),QQo=i(Js),ad=n(Js,"P",{});var YY=s(ad);WQo=r(YY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),bV=n(YY,"A",{href:!0});var Kdt=s(bV);HQo=r(Kdt,"from_pretrained()"),Kdt.forEach(t),UQo=r(YY," class method or the "),vV=n(YY,"A",{href:!0});var Zdt=s(vV);JQo=r(Zdt,"from_config()"),Zdt.forEach(t),YQo=r(YY,` class
method.`),YY.forEach(t),KQo=i(Js),by=n(Js,"P",{});var Fqe=s(by);ZQo=r(Fqe,"This class cannot be instantiated directly using "),The=n(Fqe,"CODE",{});var ect=s(The);eWo=r(ect,"__init__()"),ect.forEach(t),oWo=r(Fqe," (throws an error)."),Fqe.forEach(t),rWo=i(Js),ht=n(Js,"DIV",{class:!0});var lw=s(ht);T(vy.$$.fragment,lw),tWo=i(lw),Mhe=n(lw,"P",{});var oct=s(Mhe);aWo=r(oct,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),oct.forEach(t),nWo=i(lw),nd=n(lw,"P",{});var KY=s(nd);sWo=r(KY,`Note:
Loading a model from its configuration file does `),Ehe=n(KY,"STRONG",{});var rct=s(Ehe);lWo=r(rct,"not"),rct.forEach(t),iWo=r(KY,` load the model weights. It only affects the
model\u2019s configuration. Use `),FV=n(KY,"A",{href:!0});var tct=s(FV);dWo=r(tct,"from_pretrained()"),tct.forEach(t),cWo=r(KY," to load the model weights."),KY.forEach(t),fWo=i(lw),T(Zv.$$.fragment,lw),lw.forEach(t),mWo=i(Js),io=n(Js,"DIV",{class:!0});var ca=s(io);T(Fy.$$.fragment,ca),gWo=i(ca),Che=n(ca,"P",{});var act=s(Che);hWo=r(act,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),act.forEach(t),pWo=i(ca),qa=n(ca,"P",{});var iw=s(qa);uWo=r(iw,"The model class to instantiate is selected based on the "),whe=n(iw,"CODE",{});var nct=s(whe);_Wo=r(nct,"model_type"),nct.forEach(t),bWo=r(iw,` property of the config object (either
passed as an argument or loaded from `),Ahe=n(iw,"CODE",{});var sct=s(Ahe);vWo=r(sct,"pretrained_model_name_or_path"),sct.forEach(t),FWo=r(iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yhe=n(iw,"CODE",{});var lct=s(yhe);TWo=r(lct,"pretrained_model_name_or_path"),lct.forEach(t),MWo=r(iw,":"),iw.forEach(t),EWo=i(ca),Na=n(ca,"UL",{});var dw=s(Na);eF=n(dw,"LI",{});var gxe=s(eF);Lhe=n(gxe,"STRONG",{});var ict=s(Lhe);CWo=r(ict,"data2vec-audio"),ict.forEach(t),wWo=r(gxe," \u2014 "),TV=n(gxe,"A",{href:!0});var dct=s(TV);AWo=r(dct,"Data2VecAudioForAudioFrameClassification"),dct.forEach(t),yWo=r(gxe," (Data2VecAudio model)"),gxe.forEach(t),LWo=i(dw),oF=n(dw,"LI",{});var hxe=s(oF);xhe=n(hxe,"STRONG",{});var cct=s(xhe);xWo=r(cct,"unispeech-sat"),cct.forEach(t),$Wo=r(hxe," \u2014 "),MV=n(hxe,"A",{href:!0});var fct=s(MV);kWo=r(fct,"UniSpeechSatForAudioFrameClassification"),fct.forEach(t),SWo=r(hxe," (UniSpeechSat model)"),hxe.forEach(t),RWo=i(dw),rF=n(dw,"LI",{});var pxe=s(rF);$he=n(pxe,"STRONG",{});var mct=s($he);BWo=r(mct,"wav2vec2"),mct.forEach(t),PWo=r(pxe," \u2014 "),EV=n(pxe,"A",{href:!0});var gct=s(EV);IWo=r(gct,"Wav2Vec2ForAudioFrameClassification"),gct.forEach(t),qWo=r(pxe," (Wav2Vec2 model)"),pxe.forEach(t),NWo=i(dw),tF=n(dw,"LI",{});var uxe=s(tF);khe=n(uxe,"STRONG",{});var hct=s(khe);jWo=r(hct,"wavlm"),hct.forEach(t),DWo=r(uxe," \u2014 "),CV=n(uxe,"A",{href:!0});var pct=s(CV);GWo=r(pct,"WavLMForAudioFrameClassification"),pct.forEach(t),OWo=r(uxe," (WavLM model)"),uxe.forEach(t),dw.forEach(t),VWo=i(ca),aF=n(ca,"P",{});var _xe=s(aF);XWo=r(_xe,"The model is set in evaluation mode by default using "),She=n(_xe,"CODE",{});var uct=s(She);zWo=r(uct,"model.eval()"),uct.forEach(t),QWo=r(_xe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rhe=n(_xe,"CODE",{});var _ct=s(Rhe);WWo=r(_ct,"model.train()"),_ct.forEach(t),_xe.forEach(t),HWo=i(ca),T(nF.$$.fragment,ca),ca.forEach(t),Js.forEach(t),vPe=i(f),sd=n(f,"H2",{class:!0});var Tqe=s(sd);sF=n(Tqe,"A",{id:!0,class:!0,href:!0});var bct=s(sF);Bhe=n(bct,"SPAN",{});var vct=s(Bhe);T(Ty.$$.fragment,vct),vct.forEach(t),bct.forEach(t),UWo=i(Tqe),Phe=n(Tqe,"SPAN",{});var Fct=s(Phe);JWo=r(Fct,"AutoModelForCTC"),Fct.forEach(t),Tqe.forEach(t),FPe=i(f),Vo=n(f,"DIV",{class:!0});var Ys=s(Vo);T(My.$$.fragment,Ys),YWo=i(Ys),ld=n(Ys,"P",{});var ZY=s(ld);KWo=r(ZY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),wV=n(ZY,"A",{href:!0});var Tct=s(wV);ZWo=r(Tct,"from_pretrained()"),Tct.forEach(t),eHo=r(ZY," class method or the "),AV=n(ZY,"A",{href:!0});var Mct=s(AV);oHo=r(Mct,"from_config()"),Mct.forEach(t),rHo=r(ZY,` class
method.`),ZY.forEach(t),tHo=i(Ys),Ey=n(Ys,"P",{});var Mqe=s(Ey);aHo=r(Mqe,"This class cannot be instantiated directly using "),Ihe=n(Mqe,"CODE",{});var Ect=s(Ihe);nHo=r(Ect,"__init__()"),Ect.forEach(t),sHo=r(Mqe," (throws an error)."),Mqe.forEach(t),lHo=i(Ys),pt=n(Ys,"DIV",{class:!0});var cw=s(pt);T(Cy.$$.fragment,cw),iHo=i(cw),qhe=n(cw,"P",{});var Cct=s(qhe);dHo=r(Cct,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Cct.forEach(t),cHo=i(cw),id=n(cw,"P",{});var eK=s(id);fHo=r(eK,`Note:
Loading a model from its configuration file does `),Nhe=n(eK,"STRONG",{});var wct=s(Nhe);mHo=r(wct,"not"),wct.forEach(t),gHo=r(eK,` load the model weights. It only affects the
model\u2019s configuration. Use `),yV=n(eK,"A",{href:!0});var Act=s(yV);hHo=r(Act,"from_pretrained()"),Act.forEach(t),pHo=r(eK," to load the model weights."),eK.forEach(t),uHo=i(cw),T(lF.$$.fragment,cw),cw.forEach(t),_Ho=i(Ys),co=n(Ys,"DIV",{class:!0});var fa=s(co);T(wy.$$.fragment,fa),bHo=i(fa),jhe=n(fa,"P",{});var yct=s(jhe);vHo=r(yct,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),yct.forEach(t),FHo=i(fa),ja=n(fa,"P",{});var fw=s(ja);THo=r(fw,"The model class to instantiate is selected based on the "),Dhe=n(fw,"CODE",{});var Lct=s(Dhe);MHo=r(Lct,"model_type"),Lct.forEach(t),EHo=r(fw,` property of the config object (either
passed as an argument or loaded from `),Ghe=n(fw,"CODE",{});var xct=s(Ghe);CHo=r(xct,"pretrained_model_name_or_path"),xct.forEach(t),wHo=r(fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ohe=n(fw,"CODE",{});var $ct=s(Ohe);AHo=r($ct,"pretrained_model_name_or_path"),$ct.forEach(t),yHo=r(fw,":"),fw.forEach(t),LHo=i(fa),je=n(fa,"UL",{});var vo=s(je);iF=n(vo,"LI",{});var bxe=s(iF);Vhe=n(bxe,"STRONG",{});var kct=s(Vhe);xHo=r(kct,"data2vec-audio"),kct.forEach(t),$Ho=r(bxe," \u2014 "),LV=n(bxe,"A",{href:!0});var Sct=s(LV);kHo=r(Sct,"Data2VecAudioForCTC"),Sct.forEach(t),SHo=r(bxe," (Data2VecAudio model)"),bxe.forEach(t),RHo=i(vo),dF=n(vo,"LI",{});var vxe=s(dF);Xhe=n(vxe,"STRONG",{});var Rct=s(Xhe);BHo=r(Rct,"hubert"),Rct.forEach(t),PHo=r(vxe," \u2014 "),xV=n(vxe,"A",{href:!0});var Bct=s(xV);IHo=r(Bct,"HubertForCTC"),Bct.forEach(t),qHo=r(vxe," (Hubert model)"),vxe.forEach(t),NHo=i(vo),cF=n(vo,"LI",{});var Fxe=s(cF);zhe=n(Fxe,"STRONG",{});var Pct=s(zhe);jHo=r(Pct,"sew"),Pct.forEach(t),DHo=r(Fxe," \u2014 "),$V=n(Fxe,"A",{href:!0});var Ict=s($V);GHo=r(Ict,"SEWForCTC"),Ict.forEach(t),OHo=r(Fxe," (SEW model)"),Fxe.forEach(t),VHo=i(vo),fF=n(vo,"LI",{});var Txe=s(fF);Qhe=n(Txe,"STRONG",{});var qct=s(Qhe);XHo=r(qct,"sew-d"),qct.forEach(t),zHo=r(Txe," \u2014 "),kV=n(Txe,"A",{href:!0});var Nct=s(kV);QHo=r(Nct,"SEWDForCTC"),Nct.forEach(t),WHo=r(Txe," (SEW-D model)"),Txe.forEach(t),HHo=i(vo),mF=n(vo,"LI",{});var Mxe=s(mF);Whe=n(Mxe,"STRONG",{});var jct=s(Whe);UHo=r(jct,"unispeech"),jct.forEach(t),JHo=r(Mxe," \u2014 "),SV=n(Mxe,"A",{href:!0});var Dct=s(SV);YHo=r(Dct,"UniSpeechForCTC"),Dct.forEach(t),KHo=r(Mxe," (UniSpeech model)"),Mxe.forEach(t),ZHo=i(vo),gF=n(vo,"LI",{});var Exe=s(gF);Hhe=n(Exe,"STRONG",{});var Gct=s(Hhe);eUo=r(Gct,"unispeech-sat"),Gct.forEach(t),oUo=r(Exe," \u2014 "),RV=n(Exe,"A",{href:!0});var Oct=s(RV);rUo=r(Oct,"UniSpeechSatForCTC"),Oct.forEach(t),tUo=r(Exe," (UniSpeechSat model)"),Exe.forEach(t),aUo=i(vo),hF=n(vo,"LI",{});var Cxe=s(hF);Uhe=n(Cxe,"STRONG",{});var Vct=s(Uhe);nUo=r(Vct,"wav2vec2"),Vct.forEach(t),sUo=r(Cxe," \u2014 "),BV=n(Cxe,"A",{href:!0});var Xct=s(BV);lUo=r(Xct,"Wav2Vec2ForCTC"),Xct.forEach(t),iUo=r(Cxe," (Wav2Vec2 model)"),Cxe.forEach(t),dUo=i(vo),pF=n(vo,"LI",{});var wxe=s(pF);Jhe=n(wxe,"STRONG",{});var zct=s(Jhe);cUo=r(zct,"wavlm"),zct.forEach(t),fUo=r(wxe," \u2014 "),PV=n(wxe,"A",{href:!0});var Qct=s(PV);mUo=r(Qct,"WavLMForCTC"),Qct.forEach(t),gUo=r(wxe," (WavLM model)"),wxe.forEach(t),vo.forEach(t),hUo=i(fa),uF=n(fa,"P",{});var Axe=s(uF);pUo=r(Axe,"The model is set in evaluation mode by default using "),Yhe=n(Axe,"CODE",{});var Wct=s(Yhe);uUo=r(Wct,"model.eval()"),Wct.forEach(t),_Uo=r(Axe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Khe=n(Axe,"CODE",{});var Hct=s(Khe);bUo=r(Hct,"model.train()"),Hct.forEach(t),Axe.forEach(t),vUo=i(fa),T(_F.$$.fragment,fa),fa.forEach(t),Ys.forEach(t),TPe=i(f),dd=n(f,"H2",{class:!0});var Eqe=s(dd);bF=n(Eqe,"A",{id:!0,class:!0,href:!0});var Uct=s(bF);Zhe=n(Uct,"SPAN",{});var Jct=s(Zhe);T(Ay.$$.fragment,Jct),Jct.forEach(t),Uct.forEach(t),FUo=i(Eqe),epe=n(Eqe,"SPAN",{});var Yct=s(epe);TUo=r(Yct,"AutoModelForSpeechSeq2Seq"),Yct.forEach(t),Eqe.forEach(t),MPe=i(f),Xo=n(f,"DIV",{class:!0});var Ks=s(Xo);T(yy.$$.fragment,Ks),MUo=i(Ks),cd=n(Ks,"P",{});var oK=s(cd);EUo=r(oK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),IV=n(oK,"A",{href:!0});var Kct=s(IV);CUo=r(Kct,"from_pretrained()"),Kct.forEach(t),wUo=r(oK," class method or the "),qV=n(oK,"A",{href:!0});var Zct=s(qV);AUo=r(Zct,"from_config()"),Zct.forEach(t),yUo=r(oK,` class
method.`),oK.forEach(t),LUo=i(Ks),Ly=n(Ks,"P",{});var Cqe=s(Ly);xUo=r(Cqe,"This class cannot be instantiated directly using "),ope=n(Cqe,"CODE",{});var eft=s(ope);$Uo=r(eft,"__init__()"),eft.forEach(t),kUo=r(Cqe," (throws an error)."),Cqe.forEach(t),SUo=i(Ks),ut=n(Ks,"DIV",{class:!0});var mw=s(ut);T(xy.$$.fragment,mw),RUo=i(mw),rpe=n(mw,"P",{});var oft=s(rpe);BUo=r(oft,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),oft.forEach(t),PUo=i(mw),fd=n(mw,"P",{});var rK=s(fd);IUo=r(rK,`Note:
Loading a model from its configuration file does `),tpe=n(rK,"STRONG",{});var rft=s(tpe);qUo=r(rft,"not"),rft.forEach(t),NUo=r(rK,` load the model weights. It only affects the
model\u2019s configuration. Use `),NV=n(rK,"A",{href:!0});var tft=s(NV);jUo=r(tft,"from_pretrained()"),tft.forEach(t),DUo=r(rK," to load the model weights."),rK.forEach(t),GUo=i(mw),T(vF.$$.fragment,mw),mw.forEach(t),OUo=i(Ks),fo=n(Ks,"DIV",{class:!0});var ma=s(fo);T($y.$$.fragment,ma),VUo=i(ma),ape=n(ma,"P",{});var aft=s(ape);XUo=r(aft,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),aft.forEach(t),zUo=i(ma),Da=n(ma,"P",{});var gw=s(Da);QUo=r(gw,"The model class to instantiate is selected based on the "),npe=n(gw,"CODE",{});var nft=s(npe);WUo=r(nft,"model_type"),nft.forEach(t),HUo=r(gw,` property of the config object (either
passed as an argument or loaded from `),spe=n(gw,"CODE",{});var sft=s(spe);UUo=r(sft,"pretrained_model_name_or_path"),sft.forEach(t),JUo=r(gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lpe=n(gw,"CODE",{});var lft=s(lpe);YUo=r(lft,"pretrained_model_name_or_path"),lft.forEach(t),KUo=r(gw,":"),gw.forEach(t),ZUo=i(ma),ky=n(ma,"UL",{});var wqe=s(ky);FF=n(wqe,"LI",{});var yxe=s(FF);ipe=n(yxe,"STRONG",{});var ift=s(ipe);eJo=r(ift,"speech-encoder-decoder"),ift.forEach(t),oJo=r(yxe," \u2014 "),jV=n(yxe,"A",{href:!0});var dft=s(jV);rJo=r(dft,"SpeechEncoderDecoderModel"),dft.forEach(t),tJo=r(yxe," (Speech Encoder decoder model)"),yxe.forEach(t),aJo=i(wqe),TF=n(wqe,"LI",{});var Lxe=s(TF);dpe=n(Lxe,"STRONG",{});var cft=s(dpe);nJo=r(cft,"speech_to_text"),cft.forEach(t),sJo=r(Lxe," \u2014 "),DV=n(Lxe,"A",{href:!0});var fft=s(DV);lJo=r(fft,"Speech2TextForConditionalGeneration"),fft.forEach(t),iJo=r(Lxe," (Speech2Text model)"),Lxe.forEach(t),wqe.forEach(t),dJo=i(ma),MF=n(ma,"P",{});var xxe=s(MF);cJo=r(xxe,"The model is set in evaluation mode by default using "),cpe=n(xxe,"CODE",{});var mft=s(cpe);fJo=r(mft,"model.eval()"),mft.forEach(t),mJo=r(xxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fpe=n(xxe,"CODE",{});var gft=s(fpe);gJo=r(gft,"model.train()"),gft.forEach(t),xxe.forEach(t),hJo=i(ma),T(EF.$$.fragment,ma),ma.forEach(t),Ks.forEach(t),EPe=i(f),md=n(f,"H2",{class:!0});var Aqe=s(md);CF=n(Aqe,"A",{id:!0,class:!0,href:!0});var hft=s(CF);mpe=n(hft,"SPAN",{});var pft=s(mpe);T(Sy.$$.fragment,pft),pft.forEach(t),hft.forEach(t),pJo=i(Aqe),gpe=n(Aqe,"SPAN",{});var uft=s(gpe);uJo=r(uft,"AutoModelForAudioXVector"),uft.forEach(t),Aqe.forEach(t),CPe=i(f),zo=n(f,"DIV",{class:!0});var Zs=s(zo);T(Ry.$$.fragment,Zs),_Jo=i(Zs),gd=n(Zs,"P",{});var tK=s(gd);bJo=r(tK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),GV=n(tK,"A",{href:!0});var _ft=s(GV);vJo=r(_ft,"from_pretrained()"),_ft.forEach(t),FJo=r(tK," class method or the "),OV=n(tK,"A",{href:!0});var bft=s(OV);TJo=r(bft,"from_config()"),bft.forEach(t),MJo=r(tK,` class
method.`),tK.forEach(t),EJo=i(Zs),By=n(Zs,"P",{});var yqe=s(By);CJo=r(yqe,"This class cannot be instantiated directly using "),hpe=n(yqe,"CODE",{});var vft=s(hpe);wJo=r(vft,"__init__()"),vft.forEach(t),AJo=r(yqe," (throws an error)."),yqe.forEach(t),yJo=i(Zs),_t=n(Zs,"DIV",{class:!0});var hw=s(_t);T(Py.$$.fragment,hw),LJo=i(hw),ppe=n(hw,"P",{});var Fft=s(ppe);xJo=r(Fft,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Fft.forEach(t),$Jo=i(hw),hd=n(hw,"P",{});var aK=s(hd);kJo=r(aK,`Note:
Loading a model from its configuration file does `),upe=n(aK,"STRONG",{});var Tft=s(upe);SJo=r(Tft,"not"),Tft.forEach(t),RJo=r(aK,` load the model weights. It only affects the
model\u2019s configuration. Use `),VV=n(aK,"A",{href:!0});var Mft=s(VV);BJo=r(Mft,"from_pretrained()"),Mft.forEach(t),PJo=r(aK," to load the model weights."),aK.forEach(t),IJo=i(hw),T(wF.$$.fragment,hw),hw.forEach(t),qJo=i(Zs),mo=n(Zs,"DIV",{class:!0});var ga=s(mo);T(Iy.$$.fragment,ga),NJo=i(ga),_pe=n(ga,"P",{});var Eft=s(_pe);jJo=r(Eft,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Eft.forEach(t),DJo=i(ga),Ga=n(ga,"P",{});var pw=s(Ga);GJo=r(pw,"The model class to instantiate is selected based on the "),bpe=n(pw,"CODE",{});var Cft=s(bpe);OJo=r(Cft,"model_type"),Cft.forEach(t),VJo=r(pw,` property of the config object (either
passed as an argument or loaded from `),vpe=n(pw,"CODE",{});var wft=s(vpe);XJo=r(wft,"pretrained_model_name_or_path"),wft.forEach(t),zJo=r(pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fpe=n(pw,"CODE",{});var Aft=s(Fpe);QJo=r(Aft,"pretrained_model_name_or_path"),Aft.forEach(t),WJo=r(pw,":"),pw.forEach(t),HJo=i(ga),Oa=n(ga,"UL",{});var uw=s(Oa);AF=n(uw,"LI",{});var $xe=s(AF);Tpe=n($xe,"STRONG",{});var yft=s(Tpe);UJo=r(yft,"data2vec-audio"),yft.forEach(t),JJo=r($xe," \u2014 "),XV=n($xe,"A",{href:!0});var Lft=s(XV);YJo=r(Lft,"Data2VecAudioForXVector"),Lft.forEach(t),KJo=r($xe," (Data2VecAudio model)"),$xe.forEach(t),ZJo=i(uw),yF=n(uw,"LI",{});var kxe=s(yF);Mpe=n(kxe,"STRONG",{});var xft=s(Mpe);eYo=r(xft,"unispeech-sat"),xft.forEach(t),oYo=r(kxe," \u2014 "),zV=n(kxe,"A",{href:!0});var $ft=s(zV);rYo=r($ft,"UniSpeechSatForXVector"),$ft.forEach(t),tYo=r(kxe," (UniSpeechSat model)"),kxe.forEach(t),aYo=i(uw),LF=n(uw,"LI",{});var Sxe=s(LF);Epe=n(Sxe,"STRONG",{});var kft=s(Epe);nYo=r(kft,"wav2vec2"),kft.forEach(t),sYo=r(Sxe," \u2014 "),QV=n(Sxe,"A",{href:!0});var Sft=s(QV);lYo=r(Sft,"Wav2Vec2ForXVector"),Sft.forEach(t),iYo=r(Sxe," (Wav2Vec2 model)"),Sxe.forEach(t),dYo=i(uw),xF=n(uw,"LI",{});var Rxe=s(xF);Cpe=n(Rxe,"STRONG",{});var Rft=s(Cpe);cYo=r(Rft,"wavlm"),Rft.forEach(t),fYo=r(Rxe," \u2014 "),WV=n(Rxe,"A",{href:!0});var Bft=s(WV);mYo=r(Bft,"WavLMForXVector"),Bft.forEach(t),gYo=r(Rxe," (WavLM model)"),Rxe.forEach(t),uw.forEach(t),hYo=i(ga),$F=n(ga,"P",{});var Bxe=s($F);pYo=r(Bxe,"The model is set in evaluation mode by default using "),wpe=n(Bxe,"CODE",{});var Pft=s(wpe);uYo=r(Pft,"model.eval()"),Pft.forEach(t),_Yo=r(Bxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ape=n(Bxe,"CODE",{});var Ift=s(Ape);bYo=r(Ift,"model.train()"),Ift.forEach(t),Bxe.forEach(t),vYo=i(ga),T(kF.$$.fragment,ga),ga.forEach(t),Zs.forEach(t),wPe=i(f),pd=n(f,"H2",{class:!0});var Lqe=s(pd);SF=n(Lqe,"A",{id:!0,class:!0,href:!0});var qft=s(SF);ype=n(qft,"SPAN",{});var Nft=s(ype);T(qy.$$.fragment,Nft),Nft.forEach(t),qft.forEach(t),FYo=i(Lqe),Lpe=n(Lqe,"SPAN",{});var jft=s(Lpe);TYo=r(jft,"AutoModelForMaskedImageModeling"),jft.forEach(t),Lqe.forEach(t),APe=i(f),Qo=n(f,"DIV",{class:!0});var el=s(Qo);T(Ny.$$.fragment,el),MYo=i(el),ud=n(el,"P",{});var nK=s(ud);EYo=r(nK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),HV=n(nK,"A",{href:!0});var Dft=s(HV);CYo=r(Dft,"from_pretrained()"),Dft.forEach(t),wYo=r(nK," class method or the "),UV=n(nK,"A",{href:!0});var Gft=s(UV);AYo=r(Gft,"from_config()"),Gft.forEach(t),yYo=r(nK,` class
method.`),nK.forEach(t),LYo=i(el),jy=n(el,"P",{});var xqe=s(jy);xYo=r(xqe,"This class cannot be instantiated directly using "),xpe=n(xqe,"CODE",{});var Oft=s(xpe);$Yo=r(Oft,"__init__()"),Oft.forEach(t),kYo=r(xqe," (throws an error)."),xqe.forEach(t),SYo=i(el),bt=n(el,"DIV",{class:!0});var _w=s(bt);T(Dy.$$.fragment,_w),RYo=i(_w),$pe=n(_w,"P",{});var Vft=s($pe);BYo=r(Vft,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Vft.forEach(t),PYo=i(_w),_d=n(_w,"P",{});var sK=s(_d);IYo=r(sK,`Note:
Loading a model from its configuration file does `),kpe=n(sK,"STRONG",{});var Xft=s(kpe);qYo=r(Xft,"not"),Xft.forEach(t),NYo=r(sK,` load the model weights. It only affects the
model\u2019s configuration. Use `),JV=n(sK,"A",{href:!0});var zft=s(JV);jYo=r(zft,"from_pretrained()"),zft.forEach(t),DYo=r(sK," to load the model weights."),sK.forEach(t),GYo=i(_w),T(RF.$$.fragment,_w),_w.forEach(t),OYo=i(el),go=n(el,"DIV",{class:!0});var ha=s(go);T(Gy.$$.fragment,ha),VYo=i(ha),Spe=n(ha,"P",{});var Qft=s(Spe);XYo=r(Qft,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Qft.forEach(t),zYo=i(ha),Va=n(ha,"P",{});var bw=s(Va);QYo=r(bw,"The model class to instantiate is selected based on the "),Rpe=n(bw,"CODE",{});var Wft=s(Rpe);WYo=r(Wft,"model_type"),Wft.forEach(t),HYo=r(bw,` property of the config object (either
passed as an argument or loaded from `),Bpe=n(bw,"CODE",{});var Hft=s(Bpe);UYo=r(Hft,"pretrained_model_name_or_path"),Hft.forEach(t),JYo=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ppe=n(bw,"CODE",{});var Uft=s(Ppe);YYo=r(Uft,"pretrained_model_name_or_path"),Uft.forEach(t),KYo=r(bw,":"),bw.forEach(t),ZYo=i(ha),bd=n(ha,"UL",{});var lK=s(bd);BF=n(lK,"LI",{});var Pxe=s(BF);Ipe=n(Pxe,"STRONG",{});var Jft=s(Ipe);eKo=r(Jft,"deit"),Jft.forEach(t),oKo=r(Pxe," \u2014 "),YV=n(Pxe,"A",{href:!0});var Yft=s(YV);rKo=r(Yft,"DeiTForMaskedImageModeling"),Yft.forEach(t),tKo=r(Pxe," (DeiT model)"),Pxe.forEach(t),aKo=i(lK),PF=n(lK,"LI",{});var Ixe=s(PF);qpe=n(Ixe,"STRONG",{});var Kft=s(qpe);nKo=r(Kft,"swin"),Kft.forEach(t),sKo=r(Ixe," \u2014 "),KV=n(Ixe,"A",{href:!0});var Zft=s(KV);lKo=r(Zft,"SwinForMaskedImageModeling"),Zft.forEach(t),iKo=r(Ixe," (Swin model)"),Ixe.forEach(t),dKo=i(lK),IF=n(lK,"LI",{});var qxe=s(IF);Npe=n(qxe,"STRONG",{});var emt=s(Npe);cKo=r(emt,"vit"),emt.forEach(t),fKo=r(qxe," \u2014 "),ZV=n(qxe,"A",{href:!0});var omt=s(ZV);mKo=r(omt,"ViTForMaskedImageModeling"),omt.forEach(t),gKo=r(qxe," (ViT model)"),qxe.forEach(t),lK.forEach(t),hKo=i(ha),qF=n(ha,"P",{});var Nxe=s(qF);pKo=r(Nxe,"The model is set in evaluation mode by default using "),jpe=n(Nxe,"CODE",{});var rmt=s(jpe);uKo=r(rmt,"model.eval()"),rmt.forEach(t),_Ko=r(Nxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dpe=n(Nxe,"CODE",{});var tmt=s(Dpe);bKo=r(tmt,"model.train()"),tmt.forEach(t),Nxe.forEach(t),vKo=i(ha),T(NF.$$.fragment,ha),ha.forEach(t),el.forEach(t),yPe=i(f),vd=n(f,"H2",{class:!0});var $qe=s(vd);jF=n($qe,"A",{id:!0,class:!0,href:!0});var amt=s(jF);Gpe=n(amt,"SPAN",{});var nmt=s(Gpe);T(Oy.$$.fragment,nmt),nmt.forEach(t),amt.forEach(t),FKo=i($qe),Ope=n($qe,"SPAN",{});var smt=s(Ope);TKo=r(smt,"AutoModelForObjectDetection"),smt.forEach(t),$qe.forEach(t),LPe=i(f),Wo=n(f,"DIV",{class:!0});var ol=s(Wo);T(Vy.$$.fragment,ol),MKo=i(ol),Fd=n(ol,"P",{});var iK=s(Fd);EKo=r(iK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),eX=n(iK,"A",{href:!0});var lmt=s(eX);CKo=r(lmt,"from_pretrained()"),lmt.forEach(t),wKo=r(iK," class method or the "),oX=n(iK,"A",{href:!0});var imt=s(oX);AKo=r(imt,"from_config()"),imt.forEach(t),yKo=r(iK,` class
method.`),iK.forEach(t),LKo=i(ol),Xy=n(ol,"P",{});var kqe=s(Xy);xKo=r(kqe,"This class cannot be instantiated directly using "),Vpe=n(kqe,"CODE",{});var dmt=s(Vpe);$Ko=r(dmt,"__init__()"),dmt.forEach(t),kKo=r(kqe," (throws an error)."),kqe.forEach(t),SKo=i(ol),vt=n(ol,"DIV",{class:!0});var vw=s(vt);T(zy.$$.fragment,vw),RKo=i(vw),Xpe=n(vw,"P",{});var cmt=s(Xpe);BKo=r(cmt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),cmt.forEach(t),PKo=i(vw),Td=n(vw,"P",{});var dK=s(Td);IKo=r(dK,`Note:
Loading a model from its configuration file does `),zpe=n(dK,"STRONG",{});var fmt=s(zpe);qKo=r(fmt,"not"),fmt.forEach(t),NKo=r(dK,` load the model weights. It only affects the
model\u2019s configuration. Use `),rX=n(dK,"A",{href:!0});var mmt=s(rX);jKo=r(mmt,"from_pretrained()"),mmt.forEach(t),DKo=r(dK," to load the model weights."),dK.forEach(t),GKo=i(vw),T(DF.$$.fragment,vw),vw.forEach(t),OKo=i(ol),ho=n(ol,"DIV",{class:!0});var pa=s(ho);T(Qy.$$.fragment,pa),VKo=i(pa),Qpe=n(pa,"P",{});var gmt=s(Qpe);XKo=r(gmt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),gmt.forEach(t),zKo=i(pa),Xa=n(pa,"P",{});var Fw=s(Xa);QKo=r(Fw,"The model class to instantiate is selected based on the "),Wpe=n(Fw,"CODE",{});var hmt=s(Wpe);WKo=r(hmt,"model_type"),hmt.forEach(t),HKo=r(Fw,` property of the config object (either
passed as an argument or loaded from `),Hpe=n(Fw,"CODE",{});var pmt=s(Hpe);UKo=r(pmt,"pretrained_model_name_or_path"),pmt.forEach(t),JKo=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Upe=n(Fw,"CODE",{});var umt=s(Upe);YKo=r(umt,"pretrained_model_name_or_path"),umt.forEach(t),KKo=r(Fw,":"),Fw.forEach(t),ZKo=i(pa),Wy=n(pa,"UL",{});var Sqe=s(Wy);GF=n(Sqe,"LI",{});var jxe=s(GF);Jpe=n(jxe,"STRONG",{});var _mt=s(Jpe);eZo=r(_mt,"detr"),_mt.forEach(t),oZo=r(jxe," \u2014 "),tX=n(jxe,"A",{href:!0});var bmt=s(tX);rZo=r(bmt,"DetrForObjectDetection"),bmt.forEach(t),tZo=r(jxe," (DETR model)"),jxe.forEach(t),aZo=i(Sqe),OF=n(Sqe,"LI",{});var Dxe=s(OF);Ype=n(Dxe,"STRONG",{});var vmt=s(Ype);nZo=r(vmt,"yolos"),vmt.forEach(t),sZo=r(Dxe," \u2014 "),aX=n(Dxe,"A",{href:!0});var Fmt=s(aX);lZo=r(Fmt,"YolosForObjectDetection"),Fmt.forEach(t),iZo=r(Dxe," (YOLOS model)"),Dxe.forEach(t),Sqe.forEach(t),dZo=i(pa),VF=n(pa,"P",{});var Gxe=s(VF);cZo=r(Gxe,"The model is set in evaluation mode by default using "),Kpe=n(Gxe,"CODE",{});var Tmt=s(Kpe);fZo=r(Tmt,"model.eval()"),Tmt.forEach(t),mZo=r(Gxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zpe=n(Gxe,"CODE",{});var Mmt=s(Zpe);gZo=r(Mmt,"model.train()"),Mmt.forEach(t),Gxe.forEach(t),hZo=i(pa),T(XF.$$.fragment,pa),pa.forEach(t),ol.forEach(t),xPe=i(f),Md=n(f,"H2",{class:!0});var Rqe=s(Md);zF=n(Rqe,"A",{id:!0,class:!0,href:!0});var Emt=s(zF);eue=n(Emt,"SPAN",{});var Cmt=s(eue);T(Hy.$$.fragment,Cmt),Cmt.forEach(t),Emt.forEach(t),pZo=i(Rqe),oue=n(Rqe,"SPAN",{});var wmt=s(oue);uZo=r(wmt,"AutoModelForImageSegmentation"),wmt.forEach(t),Rqe.forEach(t),$Pe=i(f),Ho=n(f,"DIV",{class:!0});var rl=s(Ho);T(Uy.$$.fragment,rl),_Zo=i(rl),Ed=n(rl,"P",{});var cK=s(Ed);bZo=r(cK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),nX=n(cK,"A",{href:!0});var Amt=s(nX);vZo=r(Amt,"from_pretrained()"),Amt.forEach(t),FZo=r(cK," class method or the "),sX=n(cK,"A",{href:!0});var ymt=s(sX);TZo=r(ymt,"from_config()"),ymt.forEach(t),MZo=r(cK,` class
method.`),cK.forEach(t),EZo=i(rl),Jy=n(rl,"P",{});var Bqe=s(Jy);CZo=r(Bqe,"This class cannot be instantiated directly using "),rue=n(Bqe,"CODE",{});var Lmt=s(rue);wZo=r(Lmt,"__init__()"),Lmt.forEach(t),AZo=r(Bqe," (throws an error)."),Bqe.forEach(t),yZo=i(rl),Ft=n(rl,"DIV",{class:!0});var Tw=s(Ft);T(Yy.$$.fragment,Tw),LZo=i(Tw),tue=n(Tw,"P",{});var xmt=s(tue);xZo=r(xmt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),xmt.forEach(t),$Zo=i(Tw),Cd=n(Tw,"P",{});var fK=s(Cd);kZo=r(fK,`Note:
Loading a model from its configuration file does `),aue=n(fK,"STRONG",{});var $mt=s(aue);SZo=r($mt,"not"),$mt.forEach(t),RZo=r(fK,` load the model weights. It only affects the
model\u2019s configuration. Use `),lX=n(fK,"A",{href:!0});var kmt=s(lX);BZo=r(kmt,"from_pretrained()"),kmt.forEach(t),PZo=r(fK," to load the model weights."),fK.forEach(t),IZo=i(Tw),T(QF.$$.fragment,Tw),Tw.forEach(t),qZo=i(rl),po=n(rl,"DIV",{class:!0});var ua=s(po);T(Ky.$$.fragment,ua),NZo=i(ua),nue=n(ua,"P",{});var Smt=s(nue);jZo=r(Smt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Smt.forEach(t),DZo=i(ua),za=n(ua,"P",{});var Mw=s(za);GZo=r(Mw,"The model class to instantiate is selected based on the "),sue=n(Mw,"CODE",{});var Rmt=s(sue);OZo=r(Rmt,"model_type"),Rmt.forEach(t),VZo=r(Mw,` property of the config object (either
passed as an argument or loaded from `),lue=n(Mw,"CODE",{});var Bmt=s(lue);XZo=r(Bmt,"pretrained_model_name_or_path"),Bmt.forEach(t),zZo=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iue=n(Mw,"CODE",{});var Pmt=s(iue);QZo=r(Pmt,"pretrained_model_name_or_path"),Pmt.forEach(t),WZo=r(Mw,":"),Mw.forEach(t),HZo=i(ua),due=n(ua,"UL",{});var Imt=s(due);WF=n(Imt,"LI",{});var Oxe=s(WF);cue=n(Oxe,"STRONG",{});var qmt=s(cue);UZo=r(qmt,"detr"),qmt.forEach(t),JZo=r(Oxe," \u2014 "),iX=n(Oxe,"A",{href:!0});var Nmt=s(iX);YZo=r(Nmt,"DetrForSegmentation"),Nmt.forEach(t),KZo=r(Oxe," (DETR model)"),Oxe.forEach(t),Imt.forEach(t),ZZo=i(ua),HF=n(ua,"P",{});var Vxe=s(HF);eer=r(Vxe,"The model is set in evaluation mode by default using "),fue=n(Vxe,"CODE",{});var jmt=s(fue);oer=r(jmt,"model.eval()"),jmt.forEach(t),rer=r(Vxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mue=n(Vxe,"CODE",{});var Dmt=s(mue);ter=r(Dmt,"model.train()"),Dmt.forEach(t),Vxe.forEach(t),aer=i(ua),T(UF.$$.fragment,ua),ua.forEach(t),rl.forEach(t),kPe=i(f),wd=n(f,"H2",{class:!0});var Pqe=s(wd);JF=n(Pqe,"A",{id:!0,class:!0,href:!0});var Gmt=s(JF);gue=n(Gmt,"SPAN",{});var Omt=s(gue);T(Zy.$$.fragment,Omt),Omt.forEach(t),Gmt.forEach(t),ner=i(Pqe),hue=n(Pqe,"SPAN",{});var Vmt=s(hue);ser=r(Vmt,"AutoModelForSemanticSegmentation"),Vmt.forEach(t),Pqe.forEach(t),SPe=i(f),Uo=n(f,"DIV",{class:!0});var tl=s(Uo);T(eL.$$.fragment,tl),ler=i(tl),Ad=n(tl,"P",{});var mK=s(Ad);ier=r(mK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),dX=n(mK,"A",{href:!0});var Xmt=s(dX);der=r(Xmt,"from_pretrained()"),Xmt.forEach(t),cer=r(mK," class method or the "),cX=n(mK,"A",{href:!0});var zmt=s(cX);fer=r(zmt,"from_config()"),zmt.forEach(t),mer=r(mK,` class
method.`),mK.forEach(t),ger=i(tl),oL=n(tl,"P",{});var Iqe=s(oL);her=r(Iqe,"This class cannot be instantiated directly using "),pue=n(Iqe,"CODE",{});var Qmt=s(pue);per=r(Qmt,"__init__()"),Qmt.forEach(t),uer=r(Iqe," (throws an error)."),Iqe.forEach(t),_er=i(tl),Tt=n(tl,"DIV",{class:!0});var Ew=s(Tt);T(rL.$$.fragment,Ew),ber=i(Ew),uue=n(Ew,"P",{});var Wmt=s(uue);ver=r(Wmt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Wmt.forEach(t),Fer=i(Ew),yd=n(Ew,"P",{});var gK=s(yd);Ter=r(gK,`Note:
Loading a model from its configuration file does `),_ue=n(gK,"STRONG",{});var Hmt=s(_ue);Mer=r(Hmt,"not"),Hmt.forEach(t),Eer=r(gK,` load the model weights. It only affects the
model\u2019s configuration. Use `),fX=n(gK,"A",{href:!0});var Umt=s(fX);Cer=r(Umt,"from_pretrained()"),Umt.forEach(t),wer=r(gK," to load the model weights."),gK.forEach(t),Aer=i(Ew),T(YF.$$.fragment,Ew),Ew.forEach(t),yer=i(tl),uo=n(tl,"DIV",{class:!0});var _a=s(uo);T(tL.$$.fragment,_a),Ler=i(_a),bue=n(_a,"P",{});var Jmt=s(bue);xer=r(Jmt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Jmt.forEach(t),$er=i(_a),Qa=n(_a,"P",{});var Cw=s(Qa);ker=r(Cw,"The model class to instantiate is selected based on the "),vue=n(Cw,"CODE",{});var Ymt=s(vue);Ser=r(Ymt,"model_type"),Ymt.forEach(t),Rer=r(Cw,` property of the config object (either
passed as an argument or loaded from `),Fue=n(Cw,"CODE",{});var Kmt=s(Fue);Ber=r(Kmt,"pretrained_model_name_or_path"),Kmt.forEach(t),Per=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tue=n(Cw,"CODE",{});var Zmt=s(Tue);Ier=r(Zmt,"pretrained_model_name_or_path"),Zmt.forEach(t),qer=r(Cw,":"),Cw.forEach(t),Ner=i(_a),Wa=n(_a,"UL",{});var ww=s(Wa);KF=n(ww,"LI",{});var Xxe=s(KF);Mue=n(Xxe,"STRONG",{});var egt=s(Mue);jer=r(egt,"beit"),egt.forEach(t),Der=r(Xxe," \u2014 "),mX=n(Xxe,"A",{href:!0});var ogt=s(mX);Ger=r(ogt,"BeitForSemanticSegmentation"),ogt.forEach(t),Oer=r(Xxe," (BEiT model)"),Xxe.forEach(t),Ver=i(ww),ZF=n(ww,"LI",{});var zxe=s(ZF);Eue=n(zxe,"STRONG",{});var rgt=s(Eue);Xer=r(rgt,"data2vec-vision"),rgt.forEach(t),zer=r(zxe," \u2014 "),gX=n(zxe,"A",{href:!0});var tgt=s(gX);Qer=r(tgt,"Data2VecVisionForSemanticSegmentation"),tgt.forEach(t),Wer=r(zxe," (Data2VecVision model)"),zxe.forEach(t),Her=i(ww),e6=n(ww,"LI",{});var Qxe=s(e6);Cue=n(Qxe,"STRONG",{});var agt=s(Cue);Uer=r(agt,"dpt"),agt.forEach(t),Jer=r(Qxe," \u2014 "),hX=n(Qxe,"A",{href:!0});var ngt=s(hX);Yer=r(ngt,"DPTForSemanticSegmentation"),ngt.forEach(t),Ker=r(Qxe," (DPT model)"),Qxe.forEach(t),Zer=i(ww),o6=n(ww,"LI",{});var Wxe=s(o6);wue=n(Wxe,"STRONG",{});var sgt=s(wue);eor=r(sgt,"segformer"),sgt.forEach(t),oor=r(Wxe," \u2014 "),pX=n(Wxe,"A",{href:!0});var lgt=s(pX);ror=r(lgt,"SegformerForSemanticSegmentation"),lgt.forEach(t),tor=r(Wxe," (SegFormer model)"),Wxe.forEach(t),ww.forEach(t),aor=i(_a),r6=n(_a,"P",{});var Hxe=s(r6);nor=r(Hxe,"The model is set in evaluation mode by default using "),Aue=n(Hxe,"CODE",{});var igt=s(Aue);sor=r(igt,"model.eval()"),igt.forEach(t),lor=r(Hxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yue=n(Hxe,"CODE",{});var dgt=s(yue);ior=r(dgt,"model.train()"),dgt.forEach(t),Hxe.forEach(t),dor=i(_a),T(t6.$$.fragment,_a),_a.forEach(t),tl.forEach(t),RPe=i(f),Ld=n(f,"H2",{class:!0});var qqe=s(Ld);a6=n(qqe,"A",{id:!0,class:!0,href:!0});var cgt=s(a6);Lue=n(cgt,"SPAN",{});var fgt=s(Lue);T(aL.$$.fragment,fgt),fgt.forEach(t),cgt.forEach(t),cor=i(qqe),xue=n(qqe,"SPAN",{});var mgt=s(xue);mor=r(mgt,"AutoModelForInstanceSegmentation"),mgt.forEach(t),qqe.forEach(t),BPe=i(f),Jo=n(f,"DIV",{class:!0});var al=s(Jo);T(nL.$$.fragment,al),gor=i(al),xd=n(al,"P",{});var hK=s(xd);hor=r(hK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),uX=n(hK,"A",{href:!0});var ggt=s(uX);por=r(ggt,"from_pretrained()"),ggt.forEach(t),uor=r(hK," class method or the "),_X=n(hK,"A",{href:!0});var hgt=s(_X);_or=r(hgt,"from_config()"),hgt.forEach(t),bor=r(hK,` class
method.`),hK.forEach(t),vor=i(al),sL=n(al,"P",{});var Nqe=s(sL);For=r(Nqe,"This class cannot be instantiated directly using "),$ue=n(Nqe,"CODE",{});var pgt=s($ue);Tor=r(pgt,"__init__()"),pgt.forEach(t),Mor=r(Nqe," (throws an error)."),Nqe.forEach(t),Eor=i(al),Mt=n(al,"DIV",{class:!0});var Aw=s(Mt);T(lL.$$.fragment,Aw),Cor=i(Aw),kue=n(Aw,"P",{});var ugt=s(kue);wor=r(ugt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),ugt.forEach(t),Aor=i(Aw),$d=n(Aw,"P",{});var pK=s($d);yor=r(pK,`Note:
Loading a model from its configuration file does `),Sue=n(pK,"STRONG",{});var _gt=s(Sue);Lor=r(_gt,"not"),_gt.forEach(t),xor=r(pK,` load the model weights. It only affects the
model\u2019s configuration. Use `),bX=n(pK,"A",{href:!0});var bgt=s(bX);$or=r(bgt,"from_pretrained()"),bgt.forEach(t),kor=r(pK," to load the model weights."),pK.forEach(t),Sor=i(Aw),T(n6.$$.fragment,Aw),Aw.forEach(t),Ror=i(al),_o=n(al,"DIV",{class:!0});var ba=s(_o);T(iL.$$.fragment,ba),Bor=i(ba),Rue=n(ba,"P",{});var vgt=s(Rue);Por=r(vgt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),vgt.forEach(t),Ior=i(ba),Ha=n(ba,"P",{});var yw=s(Ha);qor=r(yw,"The model class to instantiate is selected based on the "),Bue=n(yw,"CODE",{});var Fgt=s(Bue);Nor=r(Fgt,"model_type"),Fgt.forEach(t),jor=r(yw,` property of the config object (either
passed as an argument or loaded from `),Pue=n(yw,"CODE",{});var Tgt=s(Pue);Dor=r(Tgt,"pretrained_model_name_or_path"),Tgt.forEach(t),Gor=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iue=n(yw,"CODE",{});var Mgt=s(Iue);Oor=r(Mgt,"pretrained_model_name_or_path"),Mgt.forEach(t),Vor=r(yw,":"),yw.forEach(t),Xor=i(ba),que=n(ba,"UL",{});var Egt=s(que);s6=n(Egt,"LI",{});var Uxe=s(s6);Nue=n(Uxe,"STRONG",{});var Cgt=s(Nue);zor=r(Cgt,"maskformer"),Cgt.forEach(t),Qor=r(Uxe," \u2014 "),vX=n(Uxe,"A",{href:!0});var wgt=s(vX);Wor=r(wgt,"MaskFormerForInstanceSegmentation"),wgt.forEach(t),Hor=r(Uxe," (MaskFormer model)"),Uxe.forEach(t),Egt.forEach(t),Uor=i(ba),l6=n(ba,"P",{});var Jxe=s(l6);Jor=r(Jxe,"The model is set in evaluation mode by default using "),jue=n(Jxe,"CODE",{});var Agt=s(jue);Yor=r(Agt,"model.eval()"),Agt.forEach(t),Kor=r(Jxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Due=n(Jxe,"CODE",{});var ygt=s(Due);Zor=r(ygt,"model.train()"),ygt.forEach(t),Jxe.forEach(t),err=i(ba),T(i6.$$.fragment,ba),ba.forEach(t),al.forEach(t),PPe=i(f),kd=n(f,"H2",{class:!0});var jqe=s(kd);d6=n(jqe,"A",{id:!0,class:!0,href:!0});var Lgt=s(d6);Gue=n(Lgt,"SPAN",{});var xgt=s(Gue);T(dL.$$.fragment,xgt),xgt.forEach(t),Lgt.forEach(t),orr=i(jqe),Oue=n(jqe,"SPAN",{});var $gt=s(Oue);rrr=r($gt,"TFAutoModel"),$gt.forEach(t),jqe.forEach(t),IPe=i(f),Yo=n(f,"DIV",{class:!0});var nl=s(Yo);T(cL.$$.fragment,nl),trr=i(nl),Sd=n(nl,"P",{});var uK=s(Sd);arr=r(uK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),FX=n(uK,"A",{href:!0});var kgt=s(FX);nrr=r(kgt,"from_pretrained()"),kgt.forEach(t),srr=r(uK," class method or the "),TX=n(uK,"A",{href:!0});var Sgt=s(TX);lrr=r(Sgt,"from_config()"),Sgt.forEach(t),irr=r(uK,` class
method.`),uK.forEach(t),drr=i(nl),fL=n(nl,"P",{});var Dqe=s(fL);crr=r(Dqe,"This class cannot be instantiated directly using "),Vue=n(Dqe,"CODE",{});var Rgt=s(Vue);frr=r(Rgt,"__init__()"),Rgt.forEach(t),mrr=r(Dqe," (throws an error)."),Dqe.forEach(t),grr=i(nl),Et=n(nl,"DIV",{class:!0});var Lw=s(Et);T(mL.$$.fragment,Lw),hrr=i(Lw),Xue=n(Lw,"P",{});var Bgt=s(Xue);prr=r(Bgt,"Instantiates one of the base model classes of the library from a configuration."),Bgt.forEach(t),urr=i(Lw),Rd=n(Lw,"P",{});var _K=s(Rd);_rr=r(_K,`Note:
Loading a model from its configuration file does `),zue=n(_K,"STRONG",{});var Pgt=s(zue);brr=r(Pgt,"not"),Pgt.forEach(t),vrr=r(_K,` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=n(_K,"A",{href:!0});var Igt=s(MX);Frr=r(Igt,"from_pretrained()"),Igt.forEach(t),Trr=r(_K," to load the model weights."),_K.forEach(t),Mrr=i(Lw),T(c6.$$.fragment,Lw),Lw.forEach(t),Err=i(nl),Cr=n(nl,"DIV",{class:!0});var sl=s(Cr);T(gL.$$.fragment,sl),Crr=i(sl),Que=n(sl,"P",{});var qgt=s(Que);wrr=r(qgt,"Instantiate one of the base model classes of the library from a pretrained model."),qgt.forEach(t),Arr=i(sl),Ua=n(sl,"P",{});var xw=s(Ua);yrr=r(xw,"The model class to instantiate is selected based on the "),Wue=n(xw,"CODE",{});var Ngt=s(Wue);Lrr=r(Ngt,"model_type"),Ngt.forEach(t),xrr=r(xw,` property of the config object (either
passed as an argument or loaded from `),Hue=n(xw,"CODE",{});var jgt=s(Hue);$rr=r(jgt,"pretrained_model_name_or_path"),jgt.forEach(t),krr=r(xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uue=n(xw,"CODE",{});var Dgt=s(Uue);Srr=r(Dgt,"pretrained_model_name_or_path"),Dgt.forEach(t),Rrr=r(xw,":"),xw.forEach(t),Brr=i(sl),j=n(sl,"UL",{});var D=s(j);f6=n(D,"LI",{});var Yxe=s(f6);Jue=n(Yxe,"STRONG",{});var Ggt=s(Jue);Prr=r(Ggt,"albert"),Ggt.forEach(t),Irr=r(Yxe," \u2014 "),EX=n(Yxe,"A",{href:!0});var Ogt=s(EX);qrr=r(Ogt,"TFAlbertModel"),Ogt.forEach(t),Nrr=r(Yxe," (ALBERT model)"),Yxe.forEach(t),jrr=i(D),m6=n(D,"LI",{});var Kxe=s(m6);Yue=n(Kxe,"STRONG",{});var Vgt=s(Yue);Drr=r(Vgt,"bart"),Vgt.forEach(t),Grr=r(Kxe," \u2014 "),CX=n(Kxe,"A",{href:!0});var Xgt=s(CX);Orr=r(Xgt,"TFBartModel"),Xgt.forEach(t),Vrr=r(Kxe," (BART model)"),Kxe.forEach(t),Xrr=i(D),g6=n(D,"LI",{});var Zxe=s(g6);Kue=n(Zxe,"STRONG",{});var zgt=s(Kue);zrr=r(zgt,"bert"),zgt.forEach(t),Qrr=r(Zxe," \u2014 "),wX=n(Zxe,"A",{href:!0});var Qgt=s(wX);Wrr=r(Qgt,"TFBertModel"),Qgt.forEach(t),Hrr=r(Zxe," (BERT model)"),Zxe.forEach(t),Urr=i(D),h6=n(D,"LI",{});var e9e=s(h6);Zue=n(e9e,"STRONG",{});var Wgt=s(Zue);Jrr=r(Wgt,"blenderbot"),Wgt.forEach(t),Yrr=r(e9e," \u2014 "),AX=n(e9e,"A",{href:!0});var Hgt=s(AX);Krr=r(Hgt,"TFBlenderbotModel"),Hgt.forEach(t),Zrr=r(e9e," (Blenderbot model)"),e9e.forEach(t),etr=i(D),p6=n(D,"LI",{});var o9e=s(p6);e_e=n(o9e,"STRONG",{});var Ugt=s(e_e);otr=r(Ugt,"blenderbot-small"),Ugt.forEach(t),rtr=r(o9e," \u2014 "),yX=n(o9e,"A",{href:!0});var Jgt=s(yX);ttr=r(Jgt,"TFBlenderbotSmallModel"),Jgt.forEach(t),atr=r(o9e," (BlenderbotSmall model)"),o9e.forEach(t),ntr=i(D),u6=n(D,"LI",{});var r9e=s(u6);o_e=n(r9e,"STRONG",{});var Ygt=s(o_e);str=r(Ygt,"camembert"),Ygt.forEach(t),ltr=r(r9e," \u2014 "),LX=n(r9e,"A",{href:!0});var Kgt=s(LX);itr=r(Kgt,"TFCamembertModel"),Kgt.forEach(t),dtr=r(r9e," (CamemBERT model)"),r9e.forEach(t),ctr=i(D),_6=n(D,"LI",{});var t9e=s(_6);r_e=n(t9e,"STRONG",{});var Zgt=s(r_e);ftr=r(Zgt,"clip"),Zgt.forEach(t),mtr=r(t9e," \u2014 "),xX=n(t9e,"A",{href:!0});var eht=s(xX);gtr=r(eht,"TFCLIPModel"),eht.forEach(t),htr=r(t9e," (CLIP model)"),t9e.forEach(t),ptr=i(D),b6=n(D,"LI",{});var a9e=s(b6);t_e=n(a9e,"STRONG",{});var oht=s(t_e);utr=r(oht,"convbert"),oht.forEach(t),_tr=r(a9e," \u2014 "),$X=n(a9e,"A",{href:!0});var rht=s($X);btr=r(rht,"TFConvBertModel"),rht.forEach(t),vtr=r(a9e," (ConvBERT model)"),a9e.forEach(t),Ftr=i(D),v6=n(D,"LI",{});var n9e=s(v6);a_e=n(n9e,"STRONG",{});var tht=s(a_e);Ttr=r(tht,"convnext"),tht.forEach(t),Mtr=r(n9e," \u2014 "),kX=n(n9e,"A",{href:!0});var aht=s(kX);Etr=r(aht,"TFConvNextModel"),aht.forEach(t),Ctr=r(n9e," (ConvNext model)"),n9e.forEach(t),wtr=i(D),F6=n(D,"LI",{});var s9e=s(F6);n_e=n(s9e,"STRONG",{});var nht=s(n_e);Atr=r(nht,"ctrl"),nht.forEach(t),ytr=r(s9e," \u2014 "),SX=n(s9e,"A",{href:!0});var sht=s(SX);Ltr=r(sht,"TFCTRLModel"),sht.forEach(t),xtr=r(s9e," (CTRL model)"),s9e.forEach(t),$tr=i(D),T6=n(D,"LI",{});var l9e=s(T6);s_e=n(l9e,"STRONG",{});var lht=s(s_e);ktr=r(lht,"data2vec-vision"),lht.forEach(t),Str=r(l9e," \u2014 "),RX=n(l9e,"A",{href:!0});var iht=s(RX);Rtr=r(iht,"TFData2VecVisionModel"),iht.forEach(t),Btr=r(l9e," (Data2VecVision model)"),l9e.forEach(t),Ptr=i(D),M6=n(D,"LI",{});var i9e=s(M6);l_e=n(i9e,"STRONG",{});var dht=s(l_e);Itr=r(dht,"deberta"),dht.forEach(t),qtr=r(i9e," \u2014 "),BX=n(i9e,"A",{href:!0});var cht=s(BX);Ntr=r(cht,"TFDebertaModel"),cht.forEach(t),jtr=r(i9e," (DeBERTa model)"),i9e.forEach(t),Dtr=i(D),E6=n(D,"LI",{});var d9e=s(E6);i_e=n(d9e,"STRONG",{});var fht=s(i_e);Gtr=r(fht,"deberta-v2"),fht.forEach(t),Otr=r(d9e," \u2014 "),PX=n(d9e,"A",{href:!0});var mht=s(PX);Vtr=r(mht,"TFDebertaV2Model"),mht.forEach(t),Xtr=r(d9e," (DeBERTa-v2 model)"),d9e.forEach(t),ztr=i(D),C6=n(D,"LI",{});var c9e=s(C6);d_e=n(c9e,"STRONG",{});var ght=s(d_e);Qtr=r(ght,"distilbert"),ght.forEach(t),Wtr=r(c9e," \u2014 "),IX=n(c9e,"A",{href:!0});var hht=s(IX);Htr=r(hht,"TFDistilBertModel"),hht.forEach(t),Utr=r(c9e," (DistilBERT model)"),c9e.forEach(t),Jtr=i(D),w6=n(D,"LI",{});var f9e=s(w6);c_e=n(f9e,"STRONG",{});var pht=s(c_e);Ytr=r(pht,"dpr"),pht.forEach(t),Ktr=r(f9e," \u2014 "),qX=n(f9e,"A",{href:!0});var uht=s(qX);Ztr=r(uht,"TFDPRQuestionEncoder"),uht.forEach(t),ear=r(f9e," (DPR model)"),f9e.forEach(t),oar=i(D),A6=n(D,"LI",{});var m9e=s(A6);f_e=n(m9e,"STRONG",{});var _ht=s(f_e);rar=r(_ht,"electra"),_ht.forEach(t),tar=r(m9e," \u2014 "),NX=n(m9e,"A",{href:!0});var bht=s(NX);aar=r(bht,"TFElectraModel"),bht.forEach(t),nar=r(m9e," (ELECTRA model)"),m9e.forEach(t),sar=i(D),y6=n(D,"LI",{});var g9e=s(y6);m_e=n(g9e,"STRONG",{});var vht=s(m_e);lar=r(vht,"flaubert"),vht.forEach(t),iar=r(g9e," \u2014 "),jX=n(g9e,"A",{href:!0});var Fht=s(jX);dar=r(Fht,"TFFlaubertModel"),Fht.forEach(t),car=r(g9e," (FlauBERT model)"),g9e.forEach(t),far=i(D),$s=n(D,"LI",{});var N9=s($s);g_e=n(N9,"STRONG",{});var Tht=s(g_e);mar=r(Tht,"funnel"),Tht.forEach(t),gar=r(N9," \u2014 "),DX=n(N9,"A",{href:!0});var Mht=s(DX);har=r(Mht,"TFFunnelModel"),Mht.forEach(t),par=r(N9," or "),GX=n(N9,"A",{href:!0});var Eht=s(GX);uar=r(Eht,"TFFunnelBaseModel"),Eht.forEach(t),_ar=r(N9," (Funnel Transformer model)"),N9.forEach(t),bar=i(D),L6=n(D,"LI",{});var h9e=s(L6);h_e=n(h9e,"STRONG",{});var Cht=s(h_e);Far=r(Cht,"gpt2"),Cht.forEach(t),Tar=r(h9e," \u2014 "),OX=n(h9e,"A",{href:!0});var wht=s(OX);Mar=r(wht,"TFGPT2Model"),wht.forEach(t),Ear=r(h9e," (OpenAI GPT-2 model)"),h9e.forEach(t),Car=i(D),x6=n(D,"LI",{});var p9e=s(x6);p_e=n(p9e,"STRONG",{});var Aht=s(p_e);war=r(Aht,"gptj"),Aht.forEach(t),Aar=r(p9e," \u2014 "),VX=n(p9e,"A",{href:!0});var yht=s(VX);yar=r(yht,"TFGPTJModel"),yht.forEach(t),Lar=r(p9e," (GPT-J model)"),p9e.forEach(t),xar=i(D),$6=n(D,"LI",{});var u9e=s($6);u_e=n(u9e,"STRONG",{});var Lht=s(u_e);$ar=r(Lht,"hubert"),Lht.forEach(t),kar=r(u9e," \u2014 "),XX=n(u9e,"A",{href:!0});var xht=s(XX);Sar=r(xht,"TFHubertModel"),xht.forEach(t),Rar=r(u9e," (Hubert model)"),u9e.forEach(t),Bar=i(D),k6=n(D,"LI",{});var _9e=s(k6);__e=n(_9e,"STRONG",{});var $ht=s(__e);Par=r($ht,"layoutlm"),$ht.forEach(t),Iar=r(_9e," \u2014 "),zX=n(_9e,"A",{href:!0});var kht=s(zX);qar=r(kht,"TFLayoutLMModel"),kht.forEach(t),Nar=r(_9e," (LayoutLM model)"),_9e.forEach(t),jar=i(D),S6=n(D,"LI",{});var b9e=s(S6);b_e=n(b9e,"STRONG",{});var Sht=s(b_e);Dar=r(Sht,"led"),Sht.forEach(t),Gar=r(b9e," \u2014 "),QX=n(b9e,"A",{href:!0});var Rht=s(QX);Oar=r(Rht,"TFLEDModel"),Rht.forEach(t),Var=r(b9e," (LED model)"),b9e.forEach(t),Xar=i(D),R6=n(D,"LI",{});var v9e=s(R6);v_e=n(v9e,"STRONG",{});var Bht=s(v_e);zar=r(Bht,"longformer"),Bht.forEach(t),Qar=r(v9e," \u2014 "),WX=n(v9e,"A",{href:!0});var Pht=s(WX);War=r(Pht,"TFLongformerModel"),Pht.forEach(t),Har=r(v9e," (Longformer model)"),v9e.forEach(t),Uar=i(D),B6=n(D,"LI",{});var F9e=s(B6);F_e=n(F9e,"STRONG",{});var Iht=s(F_e);Jar=r(Iht,"lxmert"),Iht.forEach(t),Yar=r(F9e," \u2014 "),HX=n(F9e,"A",{href:!0});var qht=s(HX);Kar=r(qht,"TFLxmertModel"),qht.forEach(t),Zar=r(F9e," (LXMERT model)"),F9e.forEach(t),enr=i(D),P6=n(D,"LI",{});var T9e=s(P6);T_e=n(T9e,"STRONG",{});var Nht=s(T_e);onr=r(Nht,"marian"),Nht.forEach(t),rnr=r(T9e," \u2014 "),UX=n(T9e,"A",{href:!0});var jht=s(UX);tnr=r(jht,"TFMarianModel"),jht.forEach(t),anr=r(T9e," (Marian model)"),T9e.forEach(t),nnr=i(D),I6=n(D,"LI",{});var M9e=s(I6);M_e=n(M9e,"STRONG",{});var Dht=s(M_e);snr=r(Dht,"mbart"),Dht.forEach(t),lnr=r(M9e," \u2014 "),JX=n(M9e,"A",{href:!0});var Ght=s(JX);inr=r(Ght,"TFMBartModel"),Ght.forEach(t),dnr=r(M9e," (mBART model)"),M9e.forEach(t),cnr=i(D),q6=n(D,"LI",{});var E9e=s(q6);E_e=n(E9e,"STRONG",{});var Oht=s(E_e);fnr=r(Oht,"mobilebert"),Oht.forEach(t),mnr=r(E9e," \u2014 "),YX=n(E9e,"A",{href:!0});var Vht=s(YX);gnr=r(Vht,"TFMobileBertModel"),Vht.forEach(t),hnr=r(E9e," (MobileBERT model)"),E9e.forEach(t),pnr=i(D),N6=n(D,"LI",{});var C9e=s(N6);C_e=n(C9e,"STRONG",{});var Xht=s(C_e);unr=r(Xht,"mpnet"),Xht.forEach(t),_nr=r(C9e," \u2014 "),KX=n(C9e,"A",{href:!0});var zht=s(KX);bnr=r(zht,"TFMPNetModel"),zht.forEach(t),vnr=r(C9e," (MPNet model)"),C9e.forEach(t),Fnr=i(D),j6=n(D,"LI",{});var w9e=s(j6);w_e=n(w9e,"STRONG",{});var Qht=s(w_e);Tnr=r(Qht,"mt5"),Qht.forEach(t),Mnr=r(w9e," \u2014 "),ZX=n(w9e,"A",{href:!0});var Wht=s(ZX);Enr=r(Wht,"TFMT5Model"),Wht.forEach(t),Cnr=r(w9e," (mT5 model)"),w9e.forEach(t),wnr=i(D),D6=n(D,"LI",{});var A9e=s(D6);A_e=n(A9e,"STRONG",{});var Hht=s(A_e);Anr=r(Hht,"openai-gpt"),Hht.forEach(t),ynr=r(A9e," \u2014 "),ez=n(A9e,"A",{href:!0});var Uht=s(ez);Lnr=r(Uht,"TFOpenAIGPTModel"),Uht.forEach(t),xnr=r(A9e," (OpenAI GPT model)"),A9e.forEach(t),$nr=i(D),G6=n(D,"LI",{});var y9e=s(G6);y_e=n(y9e,"STRONG",{});var Jht=s(y_e);knr=r(Jht,"pegasus"),Jht.forEach(t),Snr=r(y9e," \u2014 "),oz=n(y9e,"A",{href:!0});var Yht=s(oz);Rnr=r(Yht,"TFPegasusModel"),Yht.forEach(t),Bnr=r(y9e," (Pegasus model)"),y9e.forEach(t),Pnr=i(D),O6=n(D,"LI",{});var L9e=s(O6);L_e=n(L9e,"STRONG",{});var Kht=s(L_e);Inr=r(Kht,"rembert"),Kht.forEach(t),qnr=r(L9e," \u2014 "),rz=n(L9e,"A",{href:!0});var Zht=s(rz);Nnr=r(Zht,"TFRemBertModel"),Zht.forEach(t),jnr=r(L9e," (RemBERT model)"),L9e.forEach(t),Dnr=i(D),V6=n(D,"LI",{});var x9e=s(V6);x_e=n(x9e,"STRONG",{});var ept=s(x_e);Gnr=r(ept,"roberta"),ept.forEach(t),Onr=r(x9e," \u2014 "),tz=n(x9e,"A",{href:!0});var opt=s(tz);Vnr=r(opt,"TFRobertaModel"),opt.forEach(t),Xnr=r(x9e," (RoBERTa model)"),x9e.forEach(t),znr=i(D),X6=n(D,"LI",{});var $9e=s(X6);$_e=n($9e,"STRONG",{});var rpt=s($_e);Qnr=r(rpt,"roformer"),rpt.forEach(t),Wnr=r($9e," \u2014 "),az=n($9e,"A",{href:!0});var tpt=s(az);Hnr=r(tpt,"TFRoFormerModel"),tpt.forEach(t),Unr=r($9e," (RoFormer model)"),$9e.forEach(t),Jnr=i(D),z6=n(D,"LI",{});var k9e=s(z6);k_e=n(k9e,"STRONG",{});var apt=s(k_e);Ynr=r(apt,"speech_to_text"),apt.forEach(t),Knr=r(k9e," \u2014 "),nz=n(k9e,"A",{href:!0});var npt=s(nz);Znr=r(npt,"TFSpeech2TextModel"),npt.forEach(t),esr=r(k9e," (Speech2Text model)"),k9e.forEach(t),osr=i(D),Q6=n(D,"LI",{});var S9e=s(Q6);S_e=n(S9e,"STRONG",{});var spt=s(S_e);rsr=r(spt,"t5"),spt.forEach(t),tsr=r(S9e," \u2014 "),sz=n(S9e,"A",{href:!0});var lpt=s(sz);asr=r(lpt,"TFT5Model"),lpt.forEach(t),nsr=r(S9e," (T5 model)"),S9e.forEach(t),ssr=i(D),W6=n(D,"LI",{});var R9e=s(W6);R_e=n(R9e,"STRONG",{});var ipt=s(R_e);lsr=r(ipt,"tapas"),ipt.forEach(t),isr=r(R9e," \u2014 "),lz=n(R9e,"A",{href:!0});var dpt=s(lz);dsr=r(dpt,"TFTapasModel"),dpt.forEach(t),csr=r(R9e," (TAPAS model)"),R9e.forEach(t),fsr=i(D),H6=n(D,"LI",{});var B9e=s(H6);B_e=n(B9e,"STRONG",{});var cpt=s(B_e);msr=r(cpt,"transfo-xl"),cpt.forEach(t),gsr=r(B9e," \u2014 "),iz=n(B9e,"A",{href:!0});var fpt=s(iz);hsr=r(fpt,"TFTransfoXLModel"),fpt.forEach(t),psr=r(B9e," (Transformer-XL model)"),B9e.forEach(t),usr=i(D),U6=n(D,"LI",{});var P9e=s(U6);P_e=n(P9e,"STRONG",{});var mpt=s(P_e);_sr=r(mpt,"vit"),mpt.forEach(t),bsr=r(P9e," \u2014 "),dz=n(P9e,"A",{href:!0});var gpt=s(dz);vsr=r(gpt,"TFViTModel"),gpt.forEach(t),Fsr=r(P9e," (ViT model)"),P9e.forEach(t),Tsr=i(D),J6=n(D,"LI",{});var I9e=s(J6);I_e=n(I9e,"STRONG",{});var hpt=s(I_e);Msr=r(hpt,"vit_mae"),hpt.forEach(t),Esr=r(I9e," \u2014 "),cz=n(I9e,"A",{href:!0});var ppt=s(cz);Csr=r(ppt,"TFViTMAEModel"),ppt.forEach(t),wsr=r(I9e," (ViTMAE model)"),I9e.forEach(t),Asr=i(D),Y6=n(D,"LI",{});var q9e=s(Y6);q_e=n(q9e,"STRONG",{});var upt=s(q_e);ysr=r(upt,"wav2vec2"),upt.forEach(t),Lsr=r(q9e," \u2014 "),fz=n(q9e,"A",{href:!0});var _pt=s(fz);xsr=r(_pt,"TFWav2Vec2Model"),_pt.forEach(t),$sr=r(q9e," (Wav2Vec2 model)"),q9e.forEach(t),ksr=i(D),K6=n(D,"LI",{});var N9e=s(K6);N_e=n(N9e,"STRONG",{});var bpt=s(N_e);Ssr=r(bpt,"xlm"),bpt.forEach(t),Rsr=r(N9e," \u2014 "),mz=n(N9e,"A",{href:!0});var vpt=s(mz);Bsr=r(vpt,"TFXLMModel"),vpt.forEach(t),Psr=r(N9e," (XLM model)"),N9e.forEach(t),Isr=i(D),Z6=n(D,"LI",{});var j9e=s(Z6);j_e=n(j9e,"STRONG",{});var Fpt=s(j_e);qsr=r(Fpt,"xlm-roberta"),Fpt.forEach(t),Nsr=r(j9e," \u2014 "),gz=n(j9e,"A",{href:!0});var Tpt=s(gz);jsr=r(Tpt,"TFXLMRobertaModel"),Tpt.forEach(t),Dsr=r(j9e," (XLM-RoBERTa model)"),j9e.forEach(t),Gsr=i(D),eT=n(D,"LI",{});var D9e=s(eT);D_e=n(D9e,"STRONG",{});var Mpt=s(D_e);Osr=r(Mpt,"xlnet"),Mpt.forEach(t),Vsr=r(D9e," \u2014 "),hz=n(D9e,"A",{href:!0});var Ept=s(hz);Xsr=r(Ept,"TFXLNetModel"),Ept.forEach(t),zsr=r(D9e," (XLNet model)"),D9e.forEach(t),D.forEach(t),Qsr=i(sl),T(oT.$$.fragment,sl),sl.forEach(t),nl.forEach(t),qPe=i(f),Bd=n(f,"H2",{class:!0});var Gqe=s(Bd);rT=n(Gqe,"A",{id:!0,class:!0,href:!0});var Cpt=s(rT);G_e=n(Cpt,"SPAN",{});var wpt=s(G_e);T(hL.$$.fragment,wpt),wpt.forEach(t),Cpt.forEach(t),Wsr=i(Gqe),O_e=n(Gqe,"SPAN",{});var Apt=s(O_e);Hsr=r(Apt,"TFAutoModelForPreTraining"),Apt.forEach(t),Gqe.forEach(t),NPe=i(f),Ko=n(f,"DIV",{class:!0});var ll=s(Ko);T(pL.$$.fragment,ll),Usr=i(ll),Pd=n(ll,"P",{});var bK=s(Pd);Jsr=r(bK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),pz=n(bK,"A",{href:!0});var ypt=s(pz);Ysr=r(ypt,"from_pretrained()"),ypt.forEach(t),Ksr=r(bK," class method or the "),uz=n(bK,"A",{href:!0});var Lpt=s(uz);Zsr=r(Lpt,"from_config()"),Lpt.forEach(t),elr=r(bK,` class
method.`),bK.forEach(t),olr=i(ll),uL=n(ll,"P",{});var Oqe=s(uL);rlr=r(Oqe,"This class cannot be instantiated directly using "),V_e=n(Oqe,"CODE",{});var xpt=s(V_e);tlr=r(xpt,"__init__()"),xpt.forEach(t),alr=r(Oqe," (throws an error)."),Oqe.forEach(t),nlr=i(ll),Ct=n(ll,"DIV",{class:!0});var $w=s(Ct);T(_L.$$.fragment,$w),slr=i($w),X_e=n($w,"P",{});var $pt=s(X_e);llr=r($pt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),$pt.forEach(t),ilr=i($w),Id=n($w,"P",{});var vK=s(Id);dlr=r(vK,`Note:
Loading a model from its configuration file does `),z_e=n(vK,"STRONG",{});var kpt=s(z_e);clr=r(kpt,"not"),kpt.forEach(t),flr=r(vK,` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=n(vK,"A",{href:!0});var Spt=s(_z);mlr=r(Spt,"from_pretrained()"),Spt.forEach(t),glr=r(vK," to load the model weights."),vK.forEach(t),hlr=i($w),T(tT.$$.fragment,$w),$w.forEach(t),plr=i(ll),wr=n(ll,"DIV",{class:!0});var il=s(wr);T(bL.$$.fragment,il),ulr=i(il),Q_e=n(il,"P",{});var Rpt=s(Q_e);_lr=r(Rpt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Rpt.forEach(t),blr=i(il),Ja=n(il,"P",{});var kw=s(Ja);vlr=r(kw,"The model class to instantiate is selected based on the "),W_e=n(kw,"CODE",{});var Bpt=s(W_e);Flr=r(Bpt,"model_type"),Bpt.forEach(t),Tlr=r(kw,` property of the config object (either
passed as an argument or loaded from `),H_e=n(kw,"CODE",{});var Ppt=s(H_e);Mlr=r(Ppt,"pretrained_model_name_or_path"),Ppt.forEach(t),Elr=r(kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U_e=n(kw,"CODE",{});var Ipt=s(U_e);Clr=r(Ipt,"pretrained_model_name_or_path"),Ipt.forEach(t),wlr=r(kw,":"),kw.forEach(t),Alr=i(il),se=n(il,"UL",{});var le=s(se);aT=n(le,"LI",{});var G9e=s(aT);J_e=n(G9e,"STRONG",{});var qpt=s(J_e);ylr=r(qpt,"albert"),qpt.forEach(t),Llr=r(G9e," \u2014 "),bz=n(G9e,"A",{href:!0});var Npt=s(bz);xlr=r(Npt,"TFAlbertForPreTraining"),Npt.forEach(t),$lr=r(G9e," (ALBERT model)"),G9e.forEach(t),klr=i(le),nT=n(le,"LI",{});var O9e=s(nT);Y_e=n(O9e,"STRONG",{});var jpt=s(Y_e);Slr=r(jpt,"bart"),jpt.forEach(t),Rlr=r(O9e," \u2014 "),vz=n(O9e,"A",{href:!0});var Dpt=s(vz);Blr=r(Dpt,"TFBartForConditionalGeneration"),Dpt.forEach(t),Plr=r(O9e," (BART model)"),O9e.forEach(t),Ilr=i(le),sT=n(le,"LI",{});var V9e=s(sT);K_e=n(V9e,"STRONG",{});var Gpt=s(K_e);qlr=r(Gpt,"bert"),Gpt.forEach(t),Nlr=r(V9e," \u2014 "),Fz=n(V9e,"A",{href:!0});var Opt=s(Fz);jlr=r(Opt,"TFBertForPreTraining"),Opt.forEach(t),Dlr=r(V9e," (BERT model)"),V9e.forEach(t),Glr=i(le),lT=n(le,"LI",{});var X9e=s(lT);Z_e=n(X9e,"STRONG",{});var Vpt=s(Z_e);Olr=r(Vpt,"camembert"),Vpt.forEach(t),Vlr=r(X9e," \u2014 "),Tz=n(X9e,"A",{href:!0});var Xpt=s(Tz);Xlr=r(Xpt,"TFCamembertForMaskedLM"),Xpt.forEach(t),zlr=r(X9e," (CamemBERT model)"),X9e.forEach(t),Qlr=i(le),iT=n(le,"LI",{});var z9e=s(iT);e5e=n(z9e,"STRONG",{});var zpt=s(e5e);Wlr=r(zpt,"ctrl"),zpt.forEach(t),Hlr=r(z9e," \u2014 "),Mz=n(z9e,"A",{href:!0});var Qpt=s(Mz);Ulr=r(Qpt,"TFCTRLLMHeadModel"),Qpt.forEach(t),Jlr=r(z9e," (CTRL model)"),z9e.forEach(t),Ylr=i(le),dT=n(le,"LI",{});var Q9e=s(dT);o5e=n(Q9e,"STRONG",{});var Wpt=s(o5e);Klr=r(Wpt,"distilbert"),Wpt.forEach(t),Zlr=r(Q9e," \u2014 "),Ez=n(Q9e,"A",{href:!0});var Hpt=s(Ez);eir=r(Hpt,"TFDistilBertForMaskedLM"),Hpt.forEach(t),oir=r(Q9e," (DistilBERT model)"),Q9e.forEach(t),rir=i(le),cT=n(le,"LI",{});var W9e=s(cT);r5e=n(W9e,"STRONG",{});var Upt=s(r5e);tir=r(Upt,"electra"),Upt.forEach(t),air=r(W9e," \u2014 "),Cz=n(W9e,"A",{href:!0});var Jpt=s(Cz);nir=r(Jpt,"TFElectraForPreTraining"),Jpt.forEach(t),sir=r(W9e," (ELECTRA model)"),W9e.forEach(t),lir=i(le),fT=n(le,"LI",{});var H9e=s(fT);t5e=n(H9e,"STRONG",{});var Ypt=s(t5e);iir=r(Ypt,"flaubert"),Ypt.forEach(t),dir=r(H9e," \u2014 "),wz=n(H9e,"A",{href:!0});var Kpt=s(wz);cir=r(Kpt,"TFFlaubertWithLMHeadModel"),Kpt.forEach(t),fir=r(H9e," (FlauBERT model)"),H9e.forEach(t),mir=i(le),mT=n(le,"LI",{});var U9e=s(mT);a5e=n(U9e,"STRONG",{});var Zpt=s(a5e);gir=r(Zpt,"funnel"),Zpt.forEach(t),hir=r(U9e," \u2014 "),Az=n(U9e,"A",{href:!0});var eut=s(Az);pir=r(eut,"TFFunnelForPreTraining"),eut.forEach(t),uir=r(U9e," (Funnel Transformer model)"),U9e.forEach(t),_ir=i(le),gT=n(le,"LI",{});var J9e=s(gT);n5e=n(J9e,"STRONG",{});var out=s(n5e);bir=r(out,"gpt2"),out.forEach(t),vir=r(J9e," \u2014 "),yz=n(J9e,"A",{href:!0});var rut=s(yz);Fir=r(rut,"TFGPT2LMHeadModel"),rut.forEach(t),Tir=r(J9e," (OpenAI GPT-2 model)"),J9e.forEach(t),Mir=i(le),hT=n(le,"LI",{});var Y9e=s(hT);s5e=n(Y9e,"STRONG",{});var tut=s(s5e);Eir=r(tut,"layoutlm"),tut.forEach(t),Cir=r(Y9e," \u2014 "),Lz=n(Y9e,"A",{href:!0});var aut=s(Lz);wir=r(aut,"TFLayoutLMForMaskedLM"),aut.forEach(t),Air=r(Y9e," (LayoutLM model)"),Y9e.forEach(t),yir=i(le),pT=n(le,"LI",{});var K9e=s(pT);l5e=n(K9e,"STRONG",{});var nut=s(l5e);Lir=r(nut,"lxmert"),nut.forEach(t),xir=r(K9e," \u2014 "),xz=n(K9e,"A",{href:!0});var sut=s(xz);$ir=r(sut,"TFLxmertForPreTraining"),sut.forEach(t),kir=r(K9e," (LXMERT model)"),K9e.forEach(t),Sir=i(le),uT=n(le,"LI",{});var Z9e=s(uT);i5e=n(Z9e,"STRONG",{});var lut=s(i5e);Rir=r(lut,"mobilebert"),lut.forEach(t),Bir=r(Z9e," \u2014 "),$z=n(Z9e,"A",{href:!0});var iut=s($z);Pir=r(iut,"TFMobileBertForPreTraining"),iut.forEach(t),Iir=r(Z9e," (MobileBERT model)"),Z9e.forEach(t),qir=i(le),_T=n(le,"LI",{});var e$e=s(_T);d5e=n(e$e,"STRONG",{});var dut=s(d5e);Nir=r(dut,"mpnet"),dut.forEach(t),jir=r(e$e," \u2014 "),kz=n(e$e,"A",{href:!0});var cut=s(kz);Dir=r(cut,"TFMPNetForMaskedLM"),cut.forEach(t),Gir=r(e$e," (MPNet model)"),e$e.forEach(t),Oir=i(le),bT=n(le,"LI",{});var o$e=s(bT);c5e=n(o$e,"STRONG",{});var fut=s(c5e);Vir=r(fut,"openai-gpt"),fut.forEach(t),Xir=r(o$e," \u2014 "),Sz=n(o$e,"A",{href:!0});var mut=s(Sz);zir=r(mut,"TFOpenAIGPTLMHeadModel"),mut.forEach(t),Qir=r(o$e," (OpenAI GPT model)"),o$e.forEach(t),Wir=i(le),vT=n(le,"LI",{});var r$e=s(vT);f5e=n(r$e,"STRONG",{});var gut=s(f5e);Hir=r(gut,"roberta"),gut.forEach(t),Uir=r(r$e," \u2014 "),Rz=n(r$e,"A",{href:!0});var hut=s(Rz);Jir=r(hut,"TFRobertaForMaskedLM"),hut.forEach(t),Yir=r(r$e," (RoBERTa model)"),r$e.forEach(t),Kir=i(le),FT=n(le,"LI",{});var t$e=s(FT);m5e=n(t$e,"STRONG",{});var put=s(m5e);Zir=r(put,"t5"),put.forEach(t),edr=r(t$e," \u2014 "),Bz=n(t$e,"A",{href:!0});var uut=s(Bz);odr=r(uut,"TFT5ForConditionalGeneration"),uut.forEach(t),rdr=r(t$e," (T5 model)"),t$e.forEach(t),tdr=i(le),TT=n(le,"LI",{});var a$e=s(TT);g5e=n(a$e,"STRONG",{});var _ut=s(g5e);adr=r(_ut,"tapas"),_ut.forEach(t),ndr=r(a$e," \u2014 "),Pz=n(a$e,"A",{href:!0});var but=s(Pz);sdr=r(but,"TFTapasForMaskedLM"),but.forEach(t),ldr=r(a$e," (TAPAS model)"),a$e.forEach(t),idr=i(le),MT=n(le,"LI",{});var n$e=s(MT);h5e=n(n$e,"STRONG",{});var vut=s(h5e);ddr=r(vut,"transfo-xl"),vut.forEach(t),cdr=r(n$e," \u2014 "),Iz=n(n$e,"A",{href:!0});var Fut=s(Iz);fdr=r(Fut,"TFTransfoXLLMHeadModel"),Fut.forEach(t),mdr=r(n$e," (Transformer-XL model)"),n$e.forEach(t),gdr=i(le),ET=n(le,"LI",{});var s$e=s(ET);p5e=n(s$e,"STRONG",{});var Tut=s(p5e);hdr=r(Tut,"vit_mae"),Tut.forEach(t),pdr=r(s$e," \u2014 "),qz=n(s$e,"A",{href:!0});var Mut=s(qz);udr=r(Mut,"TFViTMAEForPreTraining"),Mut.forEach(t),_dr=r(s$e," (ViTMAE model)"),s$e.forEach(t),bdr=i(le),CT=n(le,"LI",{});var l$e=s(CT);u5e=n(l$e,"STRONG",{});var Eut=s(u5e);vdr=r(Eut,"xlm"),Eut.forEach(t),Fdr=r(l$e," \u2014 "),Nz=n(l$e,"A",{href:!0});var Cut=s(Nz);Tdr=r(Cut,"TFXLMWithLMHeadModel"),Cut.forEach(t),Mdr=r(l$e," (XLM model)"),l$e.forEach(t),Edr=i(le),wT=n(le,"LI",{});var i$e=s(wT);_5e=n(i$e,"STRONG",{});var wut=s(_5e);Cdr=r(wut,"xlm-roberta"),wut.forEach(t),wdr=r(i$e," \u2014 "),jz=n(i$e,"A",{href:!0});var Aut=s(jz);Adr=r(Aut,"TFXLMRobertaForMaskedLM"),Aut.forEach(t),ydr=r(i$e," (XLM-RoBERTa model)"),i$e.forEach(t),Ldr=i(le),AT=n(le,"LI",{});var d$e=s(AT);b5e=n(d$e,"STRONG",{});var yut=s(b5e);xdr=r(yut,"xlnet"),yut.forEach(t),$dr=r(d$e," \u2014 "),Dz=n(d$e,"A",{href:!0});var Lut=s(Dz);kdr=r(Lut,"TFXLNetLMHeadModel"),Lut.forEach(t),Sdr=r(d$e," (XLNet model)"),d$e.forEach(t),le.forEach(t),Rdr=i(il),T(yT.$$.fragment,il),il.forEach(t),ll.forEach(t),jPe=i(f),qd=n(f,"H2",{class:!0});var Vqe=s(qd);LT=n(Vqe,"A",{id:!0,class:!0,href:!0});var xut=s(LT);v5e=n(xut,"SPAN",{});var $ut=s(v5e);T(vL.$$.fragment,$ut),$ut.forEach(t),xut.forEach(t),Bdr=i(Vqe),F5e=n(Vqe,"SPAN",{});var kut=s(F5e);Pdr=r(kut,"TFAutoModelForCausalLM"),kut.forEach(t),Vqe.forEach(t),DPe=i(f),Zo=n(f,"DIV",{class:!0});var dl=s(Zo);T(FL.$$.fragment,dl),Idr=i(dl),Nd=n(dl,"P",{});var FK=s(Nd);qdr=r(FK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Gz=n(FK,"A",{href:!0});var Sut=s(Gz);Ndr=r(Sut,"from_pretrained()"),Sut.forEach(t),jdr=r(FK," class method or the "),Oz=n(FK,"A",{href:!0});var Rut=s(Oz);Ddr=r(Rut,"from_config()"),Rut.forEach(t),Gdr=r(FK,` class
method.`),FK.forEach(t),Odr=i(dl),TL=n(dl,"P",{});var Xqe=s(TL);Vdr=r(Xqe,"This class cannot be instantiated directly using "),T5e=n(Xqe,"CODE",{});var But=s(T5e);Xdr=r(But,"__init__()"),But.forEach(t),zdr=r(Xqe," (throws an error)."),Xqe.forEach(t),Qdr=i(dl),wt=n(dl,"DIV",{class:!0});var Sw=s(wt);T(ML.$$.fragment,Sw),Wdr=i(Sw),M5e=n(Sw,"P",{});var Put=s(M5e);Hdr=r(Put,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Put.forEach(t),Udr=i(Sw),jd=n(Sw,"P",{});var TK=s(jd);Jdr=r(TK,`Note:
Loading a model from its configuration file does `),E5e=n(TK,"STRONG",{});var Iut=s(E5e);Ydr=r(Iut,"not"),Iut.forEach(t),Kdr=r(TK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=n(TK,"A",{href:!0});var qut=s(Vz);Zdr=r(qut,"from_pretrained()"),qut.forEach(t),ecr=r(TK," to load the model weights."),TK.forEach(t),ocr=i(Sw),T(xT.$$.fragment,Sw),Sw.forEach(t),rcr=i(dl),Ar=n(dl,"DIV",{class:!0});var cl=s(Ar);T(EL.$$.fragment,cl),tcr=i(cl),C5e=n(cl,"P",{});var Nut=s(C5e);acr=r(Nut,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Nut.forEach(t),ncr=i(cl),Ya=n(cl,"P",{});var Rw=s(Ya);scr=r(Rw,"The model class to instantiate is selected based on the "),w5e=n(Rw,"CODE",{});var jut=s(w5e);lcr=r(jut,"model_type"),jut.forEach(t),icr=r(Rw,` property of the config object (either
passed as an argument or loaded from `),A5e=n(Rw,"CODE",{});var Dut=s(A5e);dcr=r(Dut,"pretrained_model_name_or_path"),Dut.forEach(t),ccr=r(Rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y5e=n(Rw,"CODE",{});var Gut=s(y5e);fcr=r(Gut,"pretrained_model_name_or_path"),Gut.forEach(t),mcr=r(Rw,":"),Rw.forEach(t),gcr=i(cl),Me=n(cl,"UL",{});var Ce=s(Me);$T=n(Ce,"LI",{});var c$e=s($T);L5e=n(c$e,"STRONG",{});var Out=s(L5e);hcr=r(Out,"bert"),Out.forEach(t),pcr=r(c$e," \u2014 "),Xz=n(c$e,"A",{href:!0});var Vut=s(Xz);ucr=r(Vut,"TFBertLMHeadModel"),Vut.forEach(t),_cr=r(c$e," (BERT model)"),c$e.forEach(t),bcr=i(Ce),kT=n(Ce,"LI",{});var f$e=s(kT);x5e=n(f$e,"STRONG",{});var Xut=s(x5e);vcr=r(Xut,"camembert"),Xut.forEach(t),Fcr=r(f$e," \u2014 "),zz=n(f$e,"A",{href:!0});var zut=s(zz);Tcr=r(zut,"TFCamembertForCausalLM"),zut.forEach(t),Mcr=r(f$e," (CamemBERT model)"),f$e.forEach(t),Ecr=i(Ce),ST=n(Ce,"LI",{});var m$e=s(ST);$5e=n(m$e,"STRONG",{});var Qut=s($5e);Ccr=r(Qut,"ctrl"),Qut.forEach(t),wcr=r(m$e," \u2014 "),Qz=n(m$e,"A",{href:!0});var Wut=s(Qz);Acr=r(Wut,"TFCTRLLMHeadModel"),Wut.forEach(t),ycr=r(m$e," (CTRL model)"),m$e.forEach(t),Lcr=i(Ce),RT=n(Ce,"LI",{});var g$e=s(RT);k5e=n(g$e,"STRONG",{});var Hut=s(k5e);xcr=r(Hut,"gpt2"),Hut.forEach(t),$cr=r(g$e," \u2014 "),Wz=n(g$e,"A",{href:!0});var Uut=s(Wz);kcr=r(Uut,"TFGPT2LMHeadModel"),Uut.forEach(t),Scr=r(g$e," (OpenAI GPT-2 model)"),g$e.forEach(t),Rcr=i(Ce),BT=n(Ce,"LI",{});var h$e=s(BT);S5e=n(h$e,"STRONG",{});var Jut=s(S5e);Bcr=r(Jut,"gptj"),Jut.forEach(t),Pcr=r(h$e," \u2014 "),Hz=n(h$e,"A",{href:!0});var Yut=s(Hz);Icr=r(Yut,"TFGPTJForCausalLM"),Yut.forEach(t),qcr=r(h$e," (GPT-J model)"),h$e.forEach(t),Ncr=i(Ce),PT=n(Ce,"LI",{});var p$e=s(PT);R5e=n(p$e,"STRONG",{});var Kut=s(R5e);jcr=r(Kut,"openai-gpt"),Kut.forEach(t),Dcr=r(p$e," \u2014 "),Uz=n(p$e,"A",{href:!0});var Zut=s(Uz);Gcr=r(Zut,"TFOpenAIGPTLMHeadModel"),Zut.forEach(t),Ocr=r(p$e," (OpenAI GPT model)"),p$e.forEach(t),Vcr=i(Ce),IT=n(Ce,"LI",{});var u$e=s(IT);B5e=n(u$e,"STRONG",{});var e_t=s(B5e);Xcr=r(e_t,"rembert"),e_t.forEach(t),zcr=r(u$e," \u2014 "),Jz=n(u$e,"A",{href:!0});var o_t=s(Jz);Qcr=r(o_t,"TFRemBertForCausalLM"),o_t.forEach(t),Wcr=r(u$e," (RemBERT model)"),u$e.forEach(t),Hcr=i(Ce),qT=n(Ce,"LI",{});var _$e=s(qT);P5e=n(_$e,"STRONG",{});var r_t=s(P5e);Ucr=r(r_t,"roberta"),r_t.forEach(t),Jcr=r(_$e," \u2014 "),Yz=n(_$e,"A",{href:!0});var t_t=s(Yz);Ycr=r(t_t,"TFRobertaForCausalLM"),t_t.forEach(t),Kcr=r(_$e," (RoBERTa model)"),_$e.forEach(t),Zcr=i(Ce),NT=n(Ce,"LI",{});var b$e=s(NT);I5e=n(b$e,"STRONG",{});var a_t=s(I5e);efr=r(a_t,"roformer"),a_t.forEach(t),ofr=r(b$e," \u2014 "),Kz=n(b$e,"A",{href:!0});var n_t=s(Kz);rfr=r(n_t,"TFRoFormerForCausalLM"),n_t.forEach(t),tfr=r(b$e," (RoFormer model)"),b$e.forEach(t),afr=i(Ce),jT=n(Ce,"LI",{});var v$e=s(jT);q5e=n(v$e,"STRONG",{});var s_t=s(q5e);nfr=r(s_t,"transfo-xl"),s_t.forEach(t),sfr=r(v$e," \u2014 "),Zz=n(v$e,"A",{href:!0});var l_t=s(Zz);lfr=r(l_t,"TFTransfoXLLMHeadModel"),l_t.forEach(t),ifr=r(v$e," (Transformer-XL model)"),v$e.forEach(t),dfr=i(Ce),DT=n(Ce,"LI",{});var F$e=s(DT);N5e=n(F$e,"STRONG",{});var i_t=s(N5e);cfr=r(i_t,"xlm"),i_t.forEach(t),ffr=r(F$e," \u2014 "),eQ=n(F$e,"A",{href:!0});var d_t=s(eQ);mfr=r(d_t,"TFXLMWithLMHeadModel"),d_t.forEach(t),gfr=r(F$e," (XLM model)"),F$e.forEach(t),hfr=i(Ce),GT=n(Ce,"LI",{});var T$e=s(GT);j5e=n(T$e,"STRONG",{});var c_t=s(j5e);pfr=r(c_t,"xlnet"),c_t.forEach(t),ufr=r(T$e," \u2014 "),oQ=n(T$e,"A",{href:!0});var f_t=s(oQ);_fr=r(f_t,"TFXLNetLMHeadModel"),f_t.forEach(t),bfr=r(T$e," (XLNet model)"),T$e.forEach(t),Ce.forEach(t),vfr=i(cl),T(OT.$$.fragment,cl),cl.forEach(t),dl.forEach(t),GPe=i(f),Dd=n(f,"H2",{class:!0});var zqe=s(Dd);VT=n(zqe,"A",{id:!0,class:!0,href:!0});var m_t=s(VT);D5e=n(m_t,"SPAN",{});var g_t=s(D5e);T(CL.$$.fragment,g_t),g_t.forEach(t),m_t.forEach(t),Ffr=i(zqe),G5e=n(zqe,"SPAN",{});var h_t=s(G5e);Tfr=r(h_t,"TFAutoModelForImageClassification"),h_t.forEach(t),zqe.forEach(t),OPe=i(f),er=n(f,"DIV",{class:!0});var fl=s(er);T(wL.$$.fragment,fl),Mfr=i(fl),Gd=n(fl,"P",{});var MK=s(Gd);Efr=r(MK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rQ=n(MK,"A",{href:!0});var p_t=s(rQ);Cfr=r(p_t,"from_pretrained()"),p_t.forEach(t),wfr=r(MK," class method or the "),tQ=n(MK,"A",{href:!0});var u_t=s(tQ);Afr=r(u_t,"from_config()"),u_t.forEach(t),yfr=r(MK,` class
method.`),MK.forEach(t),Lfr=i(fl),AL=n(fl,"P",{});var Qqe=s(AL);xfr=r(Qqe,"This class cannot be instantiated directly using "),O5e=n(Qqe,"CODE",{});var __t=s(O5e);$fr=r(__t,"__init__()"),__t.forEach(t),kfr=r(Qqe," (throws an error)."),Qqe.forEach(t),Sfr=i(fl),At=n(fl,"DIV",{class:!0});var Bw=s(At);T(yL.$$.fragment,Bw),Rfr=i(Bw),V5e=n(Bw,"P",{});var b_t=s(V5e);Bfr=r(b_t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),b_t.forEach(t),Pfr=i(Bw),Od=n(Bw,"P",{});var EK=s(Od);Ifr=r(EK,`Note:
Loading a model from its configuration file does `),X5e=n(EK,"STRONG",{});var v_t=s(X5e);qfr=r(v_t,"not"),v_t.forEach(t),Nfr=r(EK,` load the model weights. It only affects the
model\u2019s configuration. Use `),aQ=n(EK,"A",{href:!0});var F_t=s(aQ);jfr=r(F_t,"from_pretrained()"),F_t.forEach(t),Dfr=r(EK," to load the model weights."),EK.forEach(t),Gfr=i(Bw),T(XT.$$.fragment,Bw),Bw.forEach(t),Ofr=i(fl),yr=n(fl,"DIV",{class:!0});var ml=s(yr);T(LL.$$.fragment,ml),Vfr=i(ml),z5e=n(ml,"P",{});var T_t=s(z5e);Xfr=r(T_t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),T_t.forEach(t),zfr=i(ml),Ka=n(ml,"P",{});var Pw=s(Ka);Qfr=r(Pw,"The model class to instantiate is selected based on the "),Q5e=n(Pw,"CODE",{});var M_t=s(Q5e);Wfr=r(M_t,"model_type"),M_t.forEach(t),Hfr=r(Pw,` property of the config object (either
passed as an argument or loaded from `),W5e=n(Pw,"CODE",{});var E_t=s(W5e);Ufr=r(E_t,"pretrained_model_name_or_path"),E_t.forEach(t),Jfr=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H5e=n(Pw,"CODE",{});var C_t=s(H5e);Yfr=r(C_t,"pretrained_model_name_or_path"),C_t.forEach(t),Kfr=r(Pw,":"),Pw.forEach(t),Zfr=i(ml),Vd=n(ml,"UL",{});var CK=s(Vd);zT=n(CK,"LI",{});var M$e=s(zT);U5e=n(M$e,"STRONG",{});var w_t=s(U5e);emr=r(w_t,"convnext"),w_t.forEach(t),omr=r(M$e," \u2014 "),nQ=n(M$e,"A",{href:!0});var A_t=s(nQ);rmr=r(A_t,"TFConvNextForImageClassification"),A_t.forEach(t),tmr=r(M$e," (ConvNext model)"),M$e.forEach(t),amr=i(CK),QT=n(CK,"LI",{});var E$e=s(QT);J5e=n(E$e,"STRONG",{});var y_t=s(J5e);nmr=r(y_t,"data2vec-vision"),y_t.forEach(t),smr=r(E$e," \u2014 "),sQ=n(E$e,"A",{href:!0});var L_t=s(sQ);lmr=r(L_t,"TFData2VecVisionForImageClassification"),L_t.forEach(t),imr=r(E$e," (Data2VecVision model)"),E$e.forEach(t),dmr=i(CK),WT=n(CK,"LI",{});var C$e=s(WT);Y5e=n(C$e,"STRONG",{});var x_t=s(Y5e);cmr=r(x_t,"vit"),x_t.forEach(t),fmr=r(C$e," \u2014 "),lQ=n(C$e,"A",{href:!0});var $_t=s(lQ);mmr=r($_t,"TFViTForImageClassification"),$_t.forEach(t),gmr=r(C$e," (ViT model)"),C$e.forEach(t),CK.forEach(t),hmr=i(ml),T(HT.$$.fragment,ml),ml.forEach(t),fl.forEach(t),VPe=i(f),Xd=n(f,"H2",{class:!0});var Wqe=s(Xd);UT=n(Wqe,"A",{id:!0,class:!0,href:!0});var k_t=s(UT);K5e=n(k_t,"SPAN",{});var S_t=s(K5e);T(xL.$$.fragment,S_t),S_t.forEach(t),k_t.forEach(t),pmr=i(Wqe),Z5e=n(Wqe,"SPAN",{});var R_t=s(Z5e);umr=r(R_t,"TFAutoModelForMaskedLM"),R_t.forEach(t),Wqe.forEach(t),XPe=i(f),or=n(f,"DIV",{class:!0});var gl=s(or);T($L.$$.fragment,gl),_mr=i(gl),zd=n(gl,"P",{});var wK=s(zd);bmr=r(wK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),iQ=n(wK,"A",{href:!0});var B_t=s(iQ);vmr=r(B_t,"from_pretrained()"),B_t.forEach(t),Fmr=r(wK," class method or the "),dQ=n(wK,"A",{href:!0});var P_t=s(dQ);Tmr=r(P_t,"from_config()"),P_t.forEach(t),Mmr=r(wK,` class
method.`),wK.forEach(t),Emr=i(gl),kL=n(gl,"P",{});var Hqe=s(kL);Cmr=r(Hqe,"This class cannot be instantiated directly using "),e1e=n(Hqe,"CODE",{});var I_t=s(e1e);wmr=r(I_t,"__init__()"),I_t.forEach(t),Amr=r(Hqe," (throws an error)."),Hqe.forEach(t),ymr=i(gl),yt=n(gl,"DIV",{class:!0});var Iw=s(yt);T(SL.$$.fragment,Iw),Lmr=i(Iw),o1e=n(Iw,"P",{});var q_t=s(o1e);xmr=r(q_t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),q_t.forEach(t),$mr=i(Iw),Qd=n(Iw,"P",{});var AK=s(Qd);kmr=r(AK,`Note:
Loading a model from its configuration file does `),r1e=n(AK,"STRONG",{});var N_t=s(r1e);Smr=r(N_t,"not"),N_t.forEach(t),Rmr=r(AK,` load the model weights. It only affects the
model\u2019s configuration. Use `),cQ=n(AK,"A",{href:!0});var j_t=s(cQ);Bmr=r(j_t,"from_pretrained()"),j_t.forEach(t),Pmr=r(AK," to load the model weights."),AK.forEach(t),Imr=i(Iw),T(JT.$$.fragment,Iw),Iw.forEach(t),qmr=i(gl),Lr=n(gl,"DIV",{class:!0});var hl=s(Lr);T(RL.$$.fragment,hl),Nmr=i(hl),t1e=n(hl,"P",{});var D_t=s(t1e);jmr=r(D_t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),D_t.forEach(t),Dmr=i(hl),Za=n(hl,"P",{});var qw=s(Za);Gmr=r(qw,"The model class to instantiate is selected based on the "),a1e=n(qw,"CODE",{});var G_t=s(a1e);Omr=r(G_t,"model_type"),G_t.forEach(t),Vmr=r(qw,` property of the config object (either
passed as an argument or loaded from `),n1e=n(qw,"CODE",{});var O_t=s(n1e);Xmr=r(O_t,"pretrained_model_name_or_path"),O_t.forEach(t),zmr=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s1e=n(qw,"CODE",{});var V_t=s(s1e);Qmr=r(V_t,"pretrained_model_name_or_path"),V_t.forEach(t),Wmr=r(qw,":"),qw.forEach(t),Hmr=i(hl),ie=n(hl,"UL",{});var fe=s(ie);YT=n(fe,"LI",{});var w$e=s(YT);l1e=n(w$e,"STRONG",{});var X_t=s(l1e);Umr=r(X_t,"albert"),X_t.forEach(t),Jmr=r(w$e," \u2014 "),fQ=n(w$e,"A",{href:!0});var z_t=s(fQ);Ymr=r(z_t,"TFAlbertForMaskedLM"),z_t.forEach(t),Kmr=r(w$e," (ALBERT model)"),w$e.forEach(t),Zmr=i(fe),KT=n(fe,"LI",{});var A$e=s(KT);i1e=n(A$e,"STRONG",{});var Q_t=s(i1e);egr=r(Q_t,"bert"),Q_t.forEach(t),ogr=r(A$e," \u2014 "),mQ=n(A$e,"A",{href:!0});var W_t=s(mQ);rgr=r(W_t,"TFBertForMaskedLM"),W_t.forEach(t),tgr=r(A$e," (BERT model)"),A$e.forEach(t),agr=i(fe),ZT=n(fe,"LI",{});var y$e=s(ZT);d1e=n(y$e,"STRONG",{});var H_t=s(d1e);ngr=r(H_t,"camembert"),H_t.forEach(t),sgr=r(y$e," \u2014 "),gQ=n(y$e,"A",{href:!0});var U_t=s(gQ);lgr=r(U_t,"TFCamembertForMaskedLM"),U_t.forEach(t),igr=r(y$e," (CamemBERT model)"),y$e.forEach(t),dgr=i(fe),e7=n(fe,"LI",{});var L$e=s(e7);c1e=n(L$e,"STRONG",{});var J_t=s(c1e);cgr=r(J_t,"convbert"),J_t.forEach(t),fgr=r(L$e," \u2014 "),hQ=n(L$e,"A",{href:!0});var Y_t=s(hQ);mgr=r(Y_t,"TFConvBertForMaskedLM"),Y_t.forEach(t),ggr=r(L$e," (ConvBERT model)"),L$e.forEach(t),hgr=i(fe),o7=n(fe,"LI",{});var x$e=s(o7);f1e=n(x$e,"STRONG",{});var K_t=s(f1e);pgr=r(K_t,"deberta"),K_t.forEach(t),ugr=r(x$e," \u2014 "),pQ=n(x$e,"A",{href:!0});var Z_t=s(pQ);_gr=r(Z_t,"TFDebertaForMaskedLM"),Z_t.forEach(t),bgr=r(x$e," (DeBERTa model)"),x$e.forEach(t),vgr=i(fe),r7=n(fe,"LI",{});var $$e=s(r7);m1e=n($$e,"STRONG",{});var e5t=s(m1e);Fgr=r(e5t,"deberta-v2"),e5t.forEach(t),Tgr=r($$e," \u2014 "),uQ=n($$e,"A",{href:!0});var o5t=s(uQ);Mgr=r(o5t,"TFDebertaV2ForMaskedLM"),o5t.forEach(t),Egr=r($$e," (DeBERTa-v2 model)"),$$e.forEach(t),Cgr=i(fe),t7=n(fe,"LI",{});var k$e=s(t7);g1e=n(k$e,"STRONG",{});var r5t=s(g1e);wgr=r(r5t,"distilbert"),r5t.forEach(t),Agr=r(k$e," \u2014 "),_Q=n(k$e,"A",{href:!0});var t5t=s(_Q);ygr=r(t5t,"TFDistilBertForMaskedLM"),t5t.forEach(t),Lgr=r(k$e," (DistilBERT model)"),k$e.forEach(t),xgr=i(fe),a7=n(fe,"LI",{});var S$e=s(a7);h1e=n(S$e,"STRONG",{});var a5t=s(h1e);$gr=r(a5t,"electra"),a5t.forEach(t),kgr=r(S$e," \u2014 "),bQ=n(S$e,"A",{href:!0});var n5t=s(bQ);Sgr=r(n5t,"TFElectraForMaskedLM"),n5t.forEach(t),Rgr=r(S$e," (ELECTRA model)"),S$e.forEach(t),Bgr=i(fe),n7=n(fe,"LI",{});var R$e=s(n7);p1e=n(R$e,"STRONG",{});var s5t=s(p1e);Pgr=r(s5t,"flaubert"),s5t.forEach(t),Igr=r(R$e," \u2014 "),vQ=n(R$e,"A",{href:!0});var l5t=s(vQ);qgr=r(l5t,"TFFlaubertWithLMHeadModel"),l5t.forEach(t),Ngr=r(R$e," (FlauBERT model)"),R$e.forEach(t),jgr=i(fe),s7=n(fe,"LI",{});var B$e=s(s7);u1e=n(B$e,"STRONG",{});var i5t=s(u1e);Dgr=r(i5t,"funnel"),i5t.forEach(t),Ggr=r(B$e," \u2014 "),FQ=n(B$e,"A",{href:!0});var d5t=s(FQ);Ogr=r(d5t,"TFFunnelForMaskedLM"),d5t.forEach(t),Vgr=r(B$e," (Funnel Transformer model)"),B$e.forEach(t),Xgr=i(fe),l7=n(fe,"LI",{});var P$e=s(l7);_1e=n(P$e,"STRONG",{});var c5t=s(_1e);zgr=r(c5t,"layoutlm"),c5t.forEach(t),Qgr=r(P$e," \u2014 "),TQ=n(P$e,"A",{href:!0});var f5t=s(TQ);Wgr=r(f5t,"TFLayoutLMForMaskedLM"),f5t.forEach(t),Hgr=r(P$e," (LayoutLM model)"),P$e.forEach(t),Ugr=i(fe),i7=n(fe,"LI",{});var I$e=s(i7);b1e=n(I$e,"STRONG",{});var m5t=s(b1e);Jgr=r(m5t,"longformer"),m5t.forEach(t),Ygr=r(I$e," \u2014 "),MQ=n(I$e,"A",{href:!0});var g5t=s(MQ);Kgr=r(g5t,"TFLongformerForMaskedLM"),g5t.forEach(t),Zgr=r(I$e," (Longformer model)"),I$e.forEach(t),ehr=i(fe),d7=n(fe,"LI",{});var q$e=s(d7);v1e=n(q$e,"STRONG",{});var h5t=s(v1e);ohr=r(h5t,"mobilebert"),h5t.forEach(t),rhr=r(q$e," \u2014 "),EQ=n(q$e,"A",{href:!0});var p5t=s(EQ);thr=r(p5t,"TFMobileBertForMaskedLM"),p5t.forEach(t),ahr=r(q$e," (MobileBERT model)"),q$e.forEach(t),nhr=i(fe),c7=n(fe,"LI",{});var N$e=s(c7);F1e=n(N$e,"STRONG",{});var u5t=s(F1e);shr=r(u5t,"mpnet"),u5t.forEach(t),lhr=r(N$e," \u2014 "),CQ=n(N$e,"A",{href:!0});var _5t=s(CQ);ihr=r(_5t,"TFMPNetForMaskedLM"),_5t.forEach(t),dhr=r(N$e," (MPNet model)"),N$e.forEach(t),chr=i(fe),f7=n(fe,"LI",{});var j$e=s(f7);T1e=n(j$e,"STRONG",{});var b5t=s(T1e);fhr=r(b5t,"rembert"),b5t.forEach(t),mhr=r(j$e," \u2014 "),wQ=n(j$e,"A",{href:!0});var v5t=s(wQ);ghr=r(v5t,"TFRemBertForMaskedLM"),v5t.forEach(t),hhr=r(j$e," (RemBERT model)"),j$e.forEach(t),phr=i(fe),m7=n(fe,"LI",{});var D$e=s(m7);M1e=n(D$e,"STRONG",{});var F5t=s(M1e);uhr=r(F5t,"roberta"),F5t.forEach(t),_hr=r(D$e," \u2014 "),AQ=n(D$e,"A",{href:!0});var T5t=s(AQ);bhr=r(T5t,"TFRobertaForMaskedLM"),T5t.forEach(t),vhr=r(D$e," (RoBERTa model)"),D$e.forEach(t),Fhr=i(fe),g7=n(fe,"LI",{});var G$e=s(g7);E1e=n(G$e,"STRONG",{});var M5t=s(E1e);Thr=r(M5t,"roformer"),M5t.forEach(t),Mhr=r(G$e," \u2014 "),yQ=n(G$e,"A",{href:!0});var E5t=s(yQ);Ehr=r(E5t,"TFRoFormerForMaskedLM"),E5t.forEach(t),Chr=r(G$e," (RoFormer model)"),G$e.forEach(t),whr=i(fe),h7=n(fe,"LI",{});var O$e=s(h7);C1e=n(O$e,"STRONG",{});var C5t=s(C1e);Ahr=r(C5t,"tapas"),C5t.forEach(t),yhr=r(O$e," \u2014 "),LQ=n(O$e,"A",{href:!0});var w5t=s(LQ);Lhr=r(w5t,"TFTapasForMaskedLM"),w5t.forEach(t),xhr=r(O$e," (TAPAS model)"),O$e.forEach(t),$hr=i(fe),p7=n(fe,"LI",{});var V$e=s(p7);w1e=n(V$e,"STRONG",{});var A5t=s(w1e);khr=r(A5t,"xlm"),A5t.forEach(t),Shr=r(V$e," \u2014 "),xQ=n(V$e,"A",{href:!0});var y5t=s(xQ);Rhr=r(y5t,"TFXLMWithLMHeadModel"),y5t.forEach(t),Bhr=r(V$e," (XLM model)"),V$e.forEach(t),Phr=i(fe),u7=n(fe,"LI",{});var X$e=s(u7);A1e=n(X$e,"STRONG",{});var L5t=s(A1e);Ihr=r(L5t,"xlm-roberta"),L5t.forEach(t),qhr=r(X$e," \u2014 "),$Q=n(X$e,"A",{href:!0});var x5t=s($Q);Nhr=r(x5t,"TFXLMRobertaForMaskedLM"),x5t.forEach(t),jhr=r(X$e," (XLM-RoBERTa model)"),X$e.forEach(t),fe.forEach(t),Dhr=i(hl),T(_7.$$.fragment,hl),hl.forEach(t),gl.forEach(t),zPe=i(f),Wd=n(f,"H2",{class:!0});var Uqe=s(Wd);b7=n(Uqe,"A",{id:!0,class:!0,href:!0});var $5t=s(b7);y1e=n($5t,"SPAN",{});var k5t=s(y1e);T(BL.$$.fragment,k5t),k5t.forEach(t),$5t.forEach(t),Ghr=i(Uqe),L1e=n(Uqe,"SPAN",{});var S5t=s(L1e);Ohr=r(S5t,"TFAutoModelForSeq2SeqLM"),S5t.forEach(t),Uqe.forEach(t),QPe=i(f),rr=n(f,"DIV",{class:!0});var pl=s(rr);T(PL.$$.fragment,pl),Vhr=i(pl),Hd=n(pl,"P",{});var yK=s(Hd);Xhr=r(yK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kQ=n(yK,"A",{href:!0});var R5t=s(kQ);zhr=r(R5t,"from_pretrained()"),R5t.forEach(t),Qhr=r(yK," class method or the "),SQ=n(yK,"A",{href:!0});var B5t=s(SQ);Whr=r(B5t,"from_config()"),B5t.forEach(t),Hhr=r(yK,` class
method.`),yK.forEach(t),Uhr=i(pl),IL=n(pl,"P",{});var Jqe=s(IL);Jhr=r(Jqe,"This class cannot be instantiated directly using "),x1e=n(Jqe,"CODE",{});var P5t=s(x1e);Yhr=r(P5t,"__init__()"),P5t.forEach(t),Khr=r(Jqe," (throws an error)."),Jqe.forEach(t),Zhr=i(pl),Lt=n(pl,"DIV",{class:!0});var Nw=s(Lt);T(qL.$$.fragment,Nw),epr=i(Nw),$1e=n(Nw,"P",{});var I5t=s($1e);opr=r(I5t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),I5t.forEach(t),rpr=i(Nw),Ud=n(Nw,"P",{});var LK=s(Ud);tpr=r(LK,`Note:
Loading a model from its configuration file does `),k1e=n(LK,"STRONG",{});var q5t=s(k1e);apr=r(q5t,"not"),q5t.forEach(t),npr=r(LK,` load the model weights. It only affects the
model\u2019s configuration. Use `),RQ=n(LK,"A",{href:!0});var N5t=s(RQ);spr=r(N5t,"from_pretrained()"),N5t.forEach(t),lpr=r(LK," to load the model weights."),LK.forEach(t),ipr=i(Nw),T(v7.$$.fragment,Nw),Nw.forEach(t),dpr=i(pl),xr=n(pl,"DIV",{class:!0});var ul=s(xr);T(NL.$$.fragment,ul),cpr=i(ul),S1e=n(ul,"P",{});var j5t=s(S1e);fpr=r(j5t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),j5t.forEach(t),mpr=i(ul),en=n(ul,"P",{});var jw=s(en);gpr=r(jw,"The model class to instantiate is selected based on the "),R1e=n(jw,"CODE",{});var D5t=s(R1e);hpr=r(D5t,"model_type"),D5t.forEach(t),ppr=r(jw,` property of the config object (either
passed as an argument or loaded from `),B1e=n(jw,"CODE",{});var G5t=s(B1e);upr=r(G5t,"pretrained_model_name_or_path"),G5t.forEach(t),_pr=r(jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P1e=n(jw,"CODE",{});var O5t=s(P1e);bpr=r(O5t,"pretrained_model_name_or_path"),O5t.forEach(t),vpr=r(jw,":"),jw.forEach(t),Fpr=i(ul),ye=n(ul,"UL",{});var Re=s(ye);F7=n(Re,"LI",{});var z$e=s(F7);I1e=n(z$e,"STRONG",{});var V5t=s(I1e);Tpr=r(V5t,"bart"),V5t.forEach(t),Mpr=r(z$e," \u2014 "),BQ=n(z$e,"A",{href:!0});var X5t=s(BQ);Epr=r(X5t,"TFBartForConditionalGeneration"),X5t.forEach(t),Cpr=r(z$e," (BART model)"),z$e.forEach(t),wpr=i(Re),T7=n(Re,"LI",{});var Q$e=s(T7);q1e=n(Q$e,"STRONG",{});var z5t=s(q1e);Apr=r(z5t,"blenderbot"),z5t.forEach(t),ypr=r(Q$e," \u2014 "),PQ=n(Q$e,"A",{href:!0});var Q5t=s(PQ);Lpr=r(Q5t,"TFBlenderbotForConditionalGeneration"),Q5t.forEach(t),xpr=r(Q$e," (Blenderbot model)"),Q$e.forEach(t),$pr=i(Re),M7=n(Re,"LI",{});var W$e=s(M7);N1e=n(W$e,"STRONG",{});var W5t=s(N1e);kpr=r(W5t,"blenderbot-small"),W5t.forEach(t),Spr=r(W$e," \u2014 "),IQ=n(W$e,"A",{href:!0});var H5t=s(IQ);Rpr=r(H5t,"TFBlenderbotSmallForConditionalGeneration"),H5t.forEach(t),Bpr=r(W$e," (BlenderbotSmall model)"),W$e.forEach(t),Ppr=i(Re),E7=n(Re,"LI",{});var H$e=s(E7);j1e=n(H$e,"STRONG",{});var U5t=s(j1e);Ipr=r(U5t,"encoder-decoder"),U5t.forEach(t),qpr=r(H$e," \u2014 "),qQ=n(H$e,"A",{href:!0});var J5t=s(qQ);Npr=r(J5t,"TFEncoderDecoderModel"),J5t.forEach(t),jpr=r(H$e," (Encoder decoder model)"),H$e.forEach(t),Dpr=i(Re),C7=n(Re,"LI",{});var U$e=s(C7);D1e=n(U$e,"STRONG",{});var Y5t=s(D1e);Gpr=r(Y5t,"led"),Y5t.forEach(t),Opr=r(U$e," \u2014 "),NQ=n(U$e,"A",{href:!0});var K5t=s(NQ);Vpr=r(K5t,"TFLEDForConditionalGeneration"),K5t.forEach(t),Xpr=r(U$e," (LED model)"),U$e.forEach(t),zpr=i(Re),w7=n(Re,"LI",{});var J$e=s(w7);G1e=n(J$e,"STRONG",{});var Z5t=s(G1e);Qpr=r(Z5t,"marian"),Z5t.forEach(t),Wpr=r(J$e," \u2014 "),jQ=n(J$e,"A",{href:!0});var e1t=s(jQ);Hpr=r(e1t,"TFMarianMTModel"),e1t.forEach(t),Upr=r(J$e," (Marian model)"),J$e.forEach(t),Jpr=i(Re),A7=n(Re,"LI",{});var Y$e=s(A7);O1e=n(Y$e,"STRONG",{});var o1t=s(O1e);Ypr=r(o1t,"mbart"),o1t.forEach(t),Kpr=r(Y$e," \u2014 "),DQ=n(Y$e,"A",{href:!0});var r1t=s(DQ);Zpr=r(r1t,"TFMBartForConditionalGeneration"),r1t.forEach(t),eur=r(Y$e," (mBART model)"),Y$e.forEach(t),our=i(Re),y7=n(Re,"LI",{});var K$e=s(y7);V1e=n(K$e,"STRONG",{});var t1t=s(V1e);rur=r(t1t,"mt5"),t1t.forEach(t),tur=r(K$e," \u2014 "),GQ=n(K$e,"A",{href:!0});var a1t=s(GQ);aur=r(a1t,"TFMT5ForConditionalGeneration"),a1t.forEach(t),nur=r(K$e," (mT5 model)"),K$e.forEach(t),sur=i(Re),L7=n(Re,"LI",{});var Z$e=s(L7);X1e=n(Z$e,"STRONG",{});var n1t=s(X1e);lur=r(n1t,"pegasus"),n1t.forEach(t),iur=r(Z$e," \u2014 "),OQ=n(Z$e,"A",{href:!0});var s1t=s(OQ);dur=r(s1t,"TFPegasusForConditionalGeneration"),s1t.forEach(t),cur=r(Z$e," (Pegasus model)"),Z$e.forEach(t),fur=i(Re),x7=n(Re,"LI",{});var eke=s(x7);z1e=n(eke,"STRONG",{});var l1t=s(z1e);mur=r(l1t,"t5"),l1t.forEach(t),gur=r(eke," \u2014 "),VQ=n(eke,"A",{href:!0});var i1t=s(VQ);hur=r(i1t,"TFT5ForConditionalGeneration"),i1t.forEach(t),pur=r(eke," (T5 model)"),eke.forEach(t),Re.forEach(t),uur=i(ul),T($7.$$.fragment,ul),ul.forEach(t),pl.forEach(t),WPe=i(f),Jd=n(f,"H2",{class:!0});var Yqe=s(Jd);k7=n(Yqe,"A",{id:!0,class:!0,href:!0});var d1t=s(k7);Q1e=n(d1t,"SPAN",{});var c1t=s(Q1e);T(jL.$$.fragment,c1t),c1t.forEach(t),d1t.forEach(t),_ur=i(Yqe),W1e=n(Yqe,"SPAN",{});var f1t=s(W1e);bur=r(f1t,"TFAutoModelForSequenceClassification"),f1t.forEach(t),Yqe.forEach(t),HPe=i(f),tr=n(f,"DIV",{class:!0});var _l=s(tr);T(DL.$$.fragment,_l),vur=i(_l),Yd=n(_l,"P",{});var xK=s(Yd);Fur=r(xK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),XQ=n(xK,"A",{href:!0});var m1t=s(XQ);Tur=r(m1t,"from_pretrained()"),m1t.forEach(t),Mur=r(xK," class method or the "),zQ=n(xK,"A",{href:!0});var g1t=s(zQ);Eur=r(g1t,"from_config()"),g1t.forEach(t),Cur=r(xK,` class
method.`),xK.forEach(t),wur=i(_l),GL=n(_l,"P",{});var Kqe=s(GL);Aur=r(Kqe,"This class cannot be instantiated directly using "),H1e=n(Kqe,"CODE",{});var h1t=s(H1e);yur=r(h1t,"__init__()"),h1t.forEach(t),Lur=r(Kqe," (throws an error)."),Kqe.forEach(t),xur=i(_l),xt=n(_l,"DIV",{class:!0});var Dw=s(xt);T(OL.$$.fragment,Dw),$ur=i(Dw),U1e=n(Dw,"P",{});var p1t=s(U1e);kur=r(p1t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),p1t.forEach(t),Sur=i(Dw),Kd=n(Dw,"P",{});var $K=s(Kd);Rur=r($K,`Note:
Loading a model from its configuration file does `),J1e=n($K,"STRONG",{});var u1t=s(J1e);Bur=r(u1t,"not"),u1t.forEach(t),Pur=r($K,` load the model weights. It only affects the
model\u2019s configuration. Use `),QQ=n($K,"A",{href:!0});var _1t=s(QQ);Iur=r(_1t,"from_pretrained()"),_1t.forEach(t),qur=r($K," to load the model weights."),$K.forEach(t),Nur=i(Dw),T(S7.$$.fragment,Dw),Dw.forEach(t),jur=i(_l),$r=n(_l,"DIV",{class:!0});var bl=s($r);T(VL.$$.fragment,bl),Dur=i(bl),Y1e=n(bl,"P",{});var b1t=s(Y1e);Gur=r(b1t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),b1t.forEach(t),Our=i(bl),on=n(bl,"P",{});var Gw=s(on);Vur=r(Gw,"The model class to instantiate is selected based on the "),K1e=n(Gw,"CODE",{});var v1t=s(K1e);Xur=r(v1t,"model_type"),v1t.forEach(t),zur=r(Gw,` property of the config object (either
passed as an argument or loaded from `),Z1e=n(Gw,"CODE",{});var F1t=s(Z1e);Qur=r(F1t,"pretrained_model_name_or_path"),F1t.forEach(t),Wur=r(Gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ebe=n(Gw,"CODE",{});var T1t=s(ebe);Hur=r(T1t,"pretrained_model_name_or_path"),T1t.forEach(t),Uur=r(Gw,":"),Gw.forEach(t),Jur=i(bl),Z=n(bl,"UL",{});var te=s(Z);R7=n(te,"LI",{});var oke=s(R7);obe=n(oke,"STRONG",{});var M1t=s(obe);Yur=r(M1t,"albert"),M1t.forEach(t),Kur=r(oke," \u2014 "),WQ=n(oke,"A",{href:!0});var E1t=s(WQ);Zur=r(E1t,"TFAlbertForSequenceClassification"),E1t.forEach(t),e_r=r(oke," (ALBERT model)"),oke.forEach(t),o_r=i(te),B7=n(te,"LI",{});var rke=s(B7);rbe=n(rke,"STRONG",{});var C1t=s(rbe);r_r=r(C1t,"bert"),C1t.forEach(t),t_r=r(rke," \u2014 "),HQ=n(rke,"A",{href:!0});var w1t=s(HQ);a_r=r(w1t,"TFBertForSequenceClassification"),w1t.forEach(t),n_r=r(rke," (BERT model)"),rke.forEach(t),s_r=i(te),P7=n(te,"LI",{});var tke=s(P7);tbe=n(tke,"STRONG",{});var A1t=s(tbe);l_r=r(A1t,"camembert"),A1t.forEach(t),i_r=r(tke," \u2014 "),UQ=n(tke,"A",{href:!0});var y1t=s(UQ);d_r=r(y1t,"TFCamembertForSequenceClassification"),y1t.forEach(t),c_r=r(tke," (CamemBERT model)"),tke.forEach(t),f_r=i(te),I7=n(te,"LI",{});var ake=s(I7);abe=n(ake,"STRONG",{});var L1t=s(abe);m_r=r(L1t,"convbert"),L1t.forEach(t),g_r=r(ake," \u2014 "),JQ=n(ake,"A",{href:!0});var x1t=s(JQ);h_r=r(x1t,"TFConvBertForSequenceClassification"),x1t.forEach(t),p_r=r(ake," (ConvBERT model)"),ake.forEach(t),u_r=i(te),q7=n(te,"LI",{});var nke=s(q7);nbe=n(nke,"STRONG",{});var $1t=s(nbe);__r=r($1t,"ctrl"),$1t.forEach(t),b_r=r(nke," \u2014 "),YQ=n(nke,"A",{href:!0});var k1t=s(YQ);v_r=r(k1t,"TFCTRLForSequenceClassification"),k1t.forEach(t),F_r=r(nke," (CTRL model)"),nke.forEach(t),T_r=i(te),N7=n(te,"LI",{});var ske=s(N7);sbe=n(ske,"STRONG",{});var S1t=s(sbe);M_r=r(S1t,"deberta"),S1t.forEach(t),E_r=r(ske," \u2014 "),KQ=n(ske,"A",{href:!0});var R1t=s(KQ);C_r=r(R1t,"TFDebertaForSequenceClassification"),R1t.forEach(t),w_r=r(ske," (DeBERTa model)"),ske.forEach(t),A_r=i(te),j7=n(te,"LI",{});var lke=s(j7);lbe=n(lke,"STRONG",{});var B1t=s(lbe);y_r=r(B1t,"deberta-v2"),B1t.forEach(t),L_r=r(lke," \u2014 "),ZQ=n(lke,"A",{href:!0});var P1t=s(ZQ);x_r=r(P1t,"TFDebertaV2ForSequenceClassification"),P1t.forEach(t),$_r=r(lke," (DeBERTa-v2 model)"),lke.forEach(t),k_r=i(te),D7=n(te,"LI",{});var ike=s(D7);ibe=n(ike,"STRONG",{});var I1t=s(ibe);S_r=r(I1t,"distilbert"),I1t.forEach(t),R_r=r(ike," \u2014 "),eW=n(ike,"A",{href:!0});var q1t=s(eW);B_r=r(q1t,"TFDistilBertForSequenceClassification"),q1t.forEach(t),P_r=r(ike," (DistilBERT model)"),ike.forEach(t),I_r=i(te),G7=n(te,"LI",{});var dke=s(G7);dbe=n(dke,"STRONG",{});var N1t=s(dbe);q_r=r(N1t,"electra"),N1t.forEach(t),N_r=r(dke," \u2014 "),oW=n(dke,"A",{href:!0});var j1t=s(oW);j_r=r(j1t,"TFElectraForSequenceClassification"),j1t.forEach(t),D_r=r(dke," (ELECTRA model)"),dke.forEach(t),G_r=i(te),O7=n(te,"LI",{});var cke=s(O7);cbe=n(cke,"STRONG",{});var D1t=s(cbe);O_r=r(D1t,"flaubert"),D1t.forEach(t),V_r=r(cke," \u2014 "),rW=n(cke,"A",{href:!0});var G1t=s(rW);X_r=r(G1t,"TFFlaubertForSequenceClassification"),G1t.forEach(t),z_r=r(cke," (FlauBERT model)"),cke.forEach(t),Q_r=i(te),V7=n(te,"LI",{});var fke=s(V7);fbe=n(fke,"STRONG",{});var O1t=s(fbe);W_r=r(O1t,"funnel"),O1t.forEach(t),H_r=r(fke," \u2014 "),tW=n(fke,"A",{href:!0});var V1t=s(tW);U_r=r(V1t,"TFFunnelForSequenceClassification"),V1t.forEach(t),J_r=r(fke," (Funnel Transformer model)"),fke.forEach(t),Y_r=i(te),X7=n(te,"LI",{});var mke=s(X7);mbe=n(mke,"STRONG",{});var X1t=s(mbe);K_r=r(X1t,"gpt2"),X1t.forEach(t),Z_r=r(mke," \u2014 "),aW=n(mke,"A",{href:!0});var z1t=s(aW);e5r=r(z1t,"TFGPT2ForSequenceClassification"),z1t.forEach(t),o5r=r(mke," (OpenAI GPT-2 model)"),mke.forEach(t),r5r=i(te),z7=n(te,"LI",{});var gke=s(z7);gbe=n(gke,"STRONG",{});var Q1t=s(gbe);t5r=r(Q1t,"gptj"),Q1t.forEach(t),a5r=r(gke," \u2014 "),nW=n(gke,"A",{href:!0});var W1t=s(nW);n5r=r(W1t,"TFGPTJForSequenceClassification"),W1t.forEach(t),s5r=r(gke," (GPT-J model)"),gke.forEach(t),l5r=i(te),Q7=n(te,"LI",{});var hke=s(Q7);hbe=n(hke,"STRONG",{});var H1t=s(hbe);i5r=r(H1t,"layoutlm"),H1t.forEach(t),d5r=r(hke," \u2014 "),sW=n(hke,"A",{href:!0});var U1t=s(sW);c5r=r(U1t,"TFLayoutLMForSequenceClassification"),U1t.forEach(t),f5r=r(hke," (LayoutLM model)"),hke.forEach(t),m5r=i(te),W7=n(te,"LI",{});var pke=s(W7);pbe=n(pke,"STRONG",{});var J1t=s(pbe);g5r=r(J1t,"longformer"),J1t.forEach(t),h5r=r(pke," \u2014 "),lW=n(pke,"A",{href:!0});var Y1t=s(lW);p5r=r(Y1t,"TFLongformerForSequenceClassification"),Y1t.forEach(t),u5r=r(pke," (Longformer model)"),pke.forEach(t),_5r=i(te),H7=n(te,"LI",{});var uke=s(H7);ube=n(uke,"STRONG",{});var K1t=s(ube);b5r=r(K1t,"mobilebert"),K1t.forEach(t),v5r=r(uke," \u2014 "),iW=n(uke,"A",{href:!0});var Z1t=s(iW);F5r=r(Z1t,"TFMobileBertForSequenceClassification"),Z1t.forEach(t),T5r=r(uke," (MobileBERT model)"),uke.forEach(t),M5r=i(te),U7=n(te,"LI",{});var _ke=s(U7);_be=n(_ke,"STRONG",{});var ebt=s(_be);E5r=r(ebt,"mpnet"),ebt.forEach(t),C5r=r(_ke," \u2014 "),dW=n(_ke,"A",{href:!0});var obt=s(dW);w5r=r(obt,"TFMPNetForSequenceClassification"),obt.forEach(t),A5r=r(_ke," (MPNet model)"),_ke.forEach(t),y5r=i(te),J7=n(te,"LI",{});var bke=s(J7);bbe=n(bke,"STRONG",{});var rbt=s(bbe);L5r=r(rbt,"openai-gpt"),rbt.forEach(t),x5r=r(bke," \u2014 "),cW=n(bke,"A",{href:!0});var tbt=s(cW);$5r=r(tbt,"TFOpenAIGPTForSequenceClassification"),tbt.forEach(t),k5r=r(bke," (OpenAI GPT model)"),bke.forEach(t),S5r=i(te),Y7=n(te,"LI",{});var vke=s(Y7);vbe=n(vke,"STRONG",{});var abt=s(vbe);R5r=r(abt,"rembert"),abt.forEach(t),B5r=r(vke," \u2014 "),fW=n(vke,"A",{href:!0});var nbt=s(fW);P5r=r(nbt,"TFRemBertForSequenceClassification"),nbt.forEach(t),I5r=r(vke," (RemBERT model)"),vke.forEach(t),q5r=i(te),K7=n(te,"LI",{});var Fke=s(K7);Fbe=n(Fke,"STRONG",{});var sbt=s(Fbe);N5r=r(sbt,"roberta"),sbt.forEach(t),j5r=r(Fke," \u2014 "),mW=n(Fke,"A",{href:!0});var lbt=s(mW);D5r=r(lbt,"TFRobertaForSequenceClassification"),lbt.forEach(t),G5r=r(Fke," (RoBERTa model)"),Fke.forEach(t),O5r=i(te),Z7=n(te,"LI",{});var Tke=s(Z7);Tbe=n(Tke,"STRONG",{});var ibt=s(Tbe);V5r=r(ibt,"roformer"),ibt.forEach(t),X5r=r(Tke," \u2014 "),gW=n(Tke,"A",{href:!0});var dbt=s(gW);z5r=r(dbt,"TFRoFormerForSequenceClassification"),dbt.forEach(t),Q5r=r(Tke," (RoFormer model)"),Tke.forEach(t),W5r=i(te),eM=n(te,"LI",{});var Mke=s(eM);Mbe=n(Mke,"STRONG",{});var cbt=s(Mbe);H5r=r(cbt,"tapas"),cbt.forEach(t),U5r=r(Mke," \u2014 "),hW=n(Mke,"A",{href:!0});var fbt=s(hW);J5r=r(fbt,"TFTapasForSequenceClassification"),fbt.forEach(t),Y5r=r(Mke," (TAPAS model)"),Mke.forEach(t),K5r=i(te),oM=n(te,"LI",{});var Eke=s(oM);Ebe=n(Eke,"STRONG",{});var mbt=s(Ebe);Z5r=r(mbt,"transfo-xl"),mbt.forEach(t),e1r=r(Eke," \u2014 "),pW=n(Eke,"A",{href:!0});var gbt=s(pW);o1r=r(gbt,"TFTransfoXLForSequenceClassification"),gbt.forEach(t),r1r=r(Eke," (Transformer-XL model)"),Eke.forEach(t),t1r=i(te),rM=n(te,"LI",{});var Cke=s(rM);Cbe=n(Cke,"STRONG",{});var hbt=s(Cbe);a1r=r(hbt,"xlm"),hbt.forEach(t),n1r=r(Cke," \u2014 "),uW=n(Cke,"A",{href:!0});var pbt=s(uW);s1r=r(pbt,"TFXLMForSequenceClassification"),pbt.forEach(t),l1r=r(Cke," (XLM model)"),Cke.forEach(t),i1r=i(te),tM=n(te,"LI",{});var wke=s(tM);wbe=n(wke,"STRONG",{});var ubt=s(wbe);d1r=r(ubt,"xlm-roberta"),ubt.forEach(t),c1r=r(wke," \u2014 "),_W=n(wke,"A",{href:!0});var _bt=s(_W);f1r=r(_bt,"TFXLMRobertaForSequenceClassification"),_bt.forEach(t),m1r=r(wke," (XLM-RoBERTa model)"),wke.forEach(t),g1r=i(te),aM=n(te,"LI",{});var Ake=s(aM);Abe=n(Ake,"STRONG",{});var bbt=s(Abe);h1r=r(bbt,"xlnet"),bbt.forEach(t),p1r=r(Ake," \u2014 "),bW=n(Ake,"A",{href:!0});var vbt=s(bW);u1r=r(vbt,"TFXLNetForSequenceClassification"),vbt.forEach(t),_1r=r(Ake," (XLNet model)"),Ake.forEach(t),te.forEach(t),b1r=i(bl),T(nM.$$.fragment,bl),bl.forEach(t),_l.forEach(t),UPe=i(f),Zd=n(f,"H2",{class:!0});var Zqe=s(Zd);sM=n(Zqe,"A",{id:!0,class:!0,href:!0});var Fbt=s(sM);ybe=n(Fbt,"SPAN",{});var Tbt=s(ybe);T(XL.$$.fragment,Tbt),Tbt.forEach(t),Fbt.forEach(t),v1r=i(Zqe),Lbe=n(Zqe,"SPAN",{});var Mbt=s(Lbe);F1r=r(Mbt,"TFAutoModelForMultipleChoice"),Mbt.forEach(t),Zqe.forEach(t),JPe=i(f),ar=n(f,"DIV",{class:!0});var vl=s(ar);T(zL.$$.fragment,vl),T1r=i(vl),ec=n(vl,"P",{});var kK=s(ec);M1r=r(kK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vW=n(kK,"A",{href:!0});var Ebt=s(vW);E1r=r(Ebt,"from_pretrained()"),Ebt.forEach(t),C1r=r(kK," class method or the "),FW=n(kK,"A",{href:!0});var Cbt=s(FW);w1r=r(Cbt,"from_config()"),Cbt.forEach(t),A1r=r(kK,` class
method.`),kK.forEach(t),y1r=i(vl),QL=n(vl,"P",{});var eNe=s(QL);L1r=r(eNe,"This class cannot be instantiated directly using "),xbe=n(eNe,"CODE",{});var wbt=s(xbe);x1r=r(wbt,"__init__()"),wbt.forEach(t),$1r=r(eNe," (throws an error)."),eNe.forEach(t),k1r=i(vl),$t=n(vl,"DIV",{class:!0});var Ow=s($t);T(WL.$$.fragment,Ow),S1r=i(Ow),$be=n(Ow,"P",{});var Abt=s($be);R1r=r(Abt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Abt.forEach(t),B1r=i(Ow),oc=n(Ow,"P",{});var SK=s(oc);P1r=r(SK,`Note:
Loading a model from its configuration file does `),kbe=n(SK,"STRONG",{});var ybt=s(kbe);I1r=r(ybt,"not"),ybt.forEach(t),q1r=r(SK,` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=n(SK,"A",{href:!0});var Lbt=s(TW);N1r=r(Lbt,"from_pretrained()"),Lbt.forEach(t),j1r=r(SK," to load the model weights."),SK.forEach(t),D1r=i(Ow),T(lM.$$.fragment,Ow),Ow.forEach(t),G1r=i(vl),kr=n(vl,"DIV",{class:!0});var Fl=s(kr);T(HL.$$.fragment,Fl),O1r=i(Fl),Sbe=n(Fl,"P",{});var xbt=s(Sbe);V1r=r(xbt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),xbt.forEach(t),X1r=i(Fl),rn=n(Fl,"P",{});var Vw=s(rn);z1r=r(Vw,"The model class to instantiate is selected based on the "),Rbe=n(Vw,"CODE",{});var $bt=s(Rbe);Q1r=r($bt,"model_type"),$bt.forEach(t),W1r=r(Vw,` property of the config object (either
passed as an argument or loaded from `),Bbe=n(Vw,"CODE",{});var kbt=s(Bbe);H1r=r(kbt,"pretrained_model_name_or_path"),kbt.forEach(t),U1r=r(Vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pbe=n(Vw,"CODE",{});var Sbt=s(Pbe);J1r=r(Sbt,"pretrained_model_name_or_path"),Sbt.forEach(t),Y1r=r(Vw,":"),Vw.forEach(t),K1r=i(Fl),pe=n(Fl,"UL",{});var _e=s(pe);iM=n(_e,"LI",{});var yke=s(iM);Ibe=n(yke,"STRONG",{});var Rbt=s(Ibe);Z1r=r(Rbt,"albert"),Rbt.forEach(t),ebr=r(yke," \u2014 "),MW=n(yke,"A",{href:!0});var Bbt=s(MW);obr=r(Bbt,"TFAlbertForMultipleChoice"),Bbt.forEach(t),rbr=r(yke," (ALBERT model)"),yke.forEach(t),tbr=i(_e),dM=n(_e,"LI",{});var Lke=s(dM);qbe=n(Lke,"STRONG",{});var Pbt=s(qbe);abr=r(Pbt,"bert"),Pbt.forEach(t),nbr=r(Lke," \u2014 "),EW=n(Lke,"A",{href:!0});var Ibt=s(EW);sbr=r(Ibt,"TFBertForMultipleChoice"),Ibt.forEach(t),lbr=r(Lke," (BERT model)"),Lke.forEach(t),ibr=i(_e),cM=n(_e,"LI",{});var xke=s(cM);Nbe=n(xke,"STRONG",{});var qbt=s(Nbe);dbr=r(qbt,"camembert"),qbt.forEach(t),cbr=r(xke," \u2014 "),CW=n(xke,"A",{href:!0});var Nbt=s(CW);fbr=r(Nbt,"TFCamembertForMultipleChoice"),Nbt.forEach(t),mbr=r(xke," (CamemBERT model)"),xke.forEach(t),gbr=i(_e),fM=n(_e,"LI",{});var $ke=s(fM);jbe=n($ke,"STRONG",{});var jbt=s(jbe);hbr=r(jbt,"convbert"),jbt.forEach(t),pbr=r($ke," \u2014 "),wW=n($ke,"A",{href:!0});var Dbt=s(wW);ubr=r(Dbt,"TFConvBertForMultipleChoice"),Dbt.forEach(t),_br=r($ke," (ConvBERT model)"),$ke.forEach(t),bbr=i(_e),mM=n(_e,"LI",{});var kke=s(mM);Dbe=n(kke,"STRONG",{});var Gbt=s(Dbe);vbr=r(Gbt,"distilbert"),Gbt.forEach(t),Fbr=r(kke," \u2014 "),AW=n(kke,"A",{href:!0});var Obt=s(AW);Tbr=r(Obt,"TFDistilBertForMultipleChoice"),Obt.forEach(t),Mbr=r(kke," (DistilBERT model)"),kke.forEach(t),Ebr=i(_e),gM=n(_e,"LI",{});var Ske=s(gM);Gbe=n(Ske,"STRONG",{});var Vbt=s(Gbe);Cbr=r(Vbt,"electra"),Vbt.forEach(t),wbr=r(Ske," \u2014 "),yW=n(Ske,"A",{href:!0});var Xbt=s(yW);Abr=r(Xbt,"TFElectraForMultipleChoice"),Xbt.forEach(t),ybr=r(Ske," (ELECTRA model)"),Ske.forEach(t),Lbr=i(_e),hM=n(_e,"LI",{});var Rke=s(hM);Obe=n(Rke,"STRONG",{});var zbt=s(Obe);xbr=r(zbt,"flaubert"),zbt.forEach(t),$br=r(Rke," \u2014 "),LW=n(Rke,"A",{href:!0});var Qbt=s(LW);kbr=r(Qbt,"TFFlaubertForMultipleChoice"),Qbt.forEach(t),Sbr=r(Rke," (FlauBERT model)"),Rke.forEach(t),Rbr=i(_e),pM=n(_e,"LI",{});var Bke=s(pM);Vbe=n(Bke,"STRONG",{});var Wbt=s(Vbe);Bbr=r(Wbt,"funnel"),Wbt.forEach(t),Pbr=r(Bke," \u2014 "),xW=n(Bke,"A",{href:!0});var Hbt=s(xW);Ibr=r(Hbt,"TFFunnelForMultipleChoice"),Hbt.forEach(t),qbr=r(Bke," (Funnel Transformer model)"),Bke.forEach(t),Nbr=i(_e),uM=n(_e,"LI",{});var Pke=s(uM);Xbe=n(Pke,"STRONG",{});var Ubt=s(Xbe);jbr=r(Ubt,"longformer"),Ubt.forEach(t),Dbr=r(Pke," \u2014 "),$W=n(Pke,"A",{href:!0});var Jbt=s($W);Gbr=r(Jbt,"TFLongformerForMultipleChoice"),Jbt.forEach(t),Obr=r(Pke," (Longformer model)"),Pke.forEach(t),Vbr=i(_e),_M=n(_e,"LI",{});var Ike=s(_M);zbe=n(Ike,"STRONG",{});var Ybt=s(zbe);Xbr=r(Ybt,"mobilebert"),Ybt.forEach(t),zbr=r(Ike," \u2014 "),kW=n(Ike,"A",{href:!0});var Kbt=s(kW);Qbr=r(Kbt,"TFMobileBertForMultipleChoice"),Kbt.forEach(t),Wbr=r(Ike," (MobileBERT model)"),Ike.forEach(t),Hbr=i(_e),bM=n(_e,"LI",{});var qke=s(bM);Qbe=n(qke,"STRONG",{});var Zbt=s(Qbe);Ubr=r(Zbt,"mpnet"),Zbt.forEach(t),Jbr=r(qke," \u2014 "),SW=n(qke,"A",{href:!0});var e2t=s(SW);Ybr=r(e2t,"TFMPNetForMultipleChoice"),e2t.forEach(t),Kbr=r(qke," (MPNet model)"),qke.forEach(t),Zbr=i(_e),vM=n(_e,"LI",{});var Nke=s(vM);Wbe=n(Nke,"STRONG",{});var o2t=s(Wbe);e2r=r(o2t,"rembert"),o2t.forEach(t),o2r=r(Nke," \u2014 "),RW=n(Nke,"A",{href:!0});var r2t=s(RW);r2r=r(r2t,"TFRemBertForMultipleChoice"),r2t.forEach(t),t2r=r(Nke," (RemBERT model)"),Nke.forEach(t),a2r=i(_e),FM=n(_e,"LI",{});var jke=s(FM);Hbe=n(jke,"STRONG",{});var t2t=s(Hbe);n2r=r(t2t,"roberta"),t2t.forEach(t),s2r=r(jke," \u2014 "),BW=n(jke,"A",{href:!0});var a2t=s(BW);l2r=r(a2t,"TFRobertaForMultipleChoice"),a2t.forEach(t),i2r=r(jke," (RoBERTa model)"),jke.forEach(t),d2r=i(_e),TM=n(_e,"LI",{});var Dke=s(TM);Ube=n(Dke,"STRONG",{});var n2t=s(Ube);c2r=r(n2t,"roformer"),n2t.forEach(t),f2r=r(Dke," \u2014 "),PW=n(Dke,"A",{href:!0});var s2t=s(PW);m2r=r(s2t,"TFRoFormerForMultipleChoice"),s2t.forEach(t),g2r=r(Dke," (RoFormer model)"),Dke.forEach(t),h2r=i(_e),MM=n(_e,"LI",{});var Gke=s(MM);Jbe=n(Gke,"STRONG",{});var l2t=s(Jbe);p2r=r(l2t,"xlm"),l2t.forEach(t),u2r=r(Gke," \u2014 "),IW=n(Gke,"A",{href:!0});var i2t=s(IW);_2r=r(i2t,"TFXLMForMultipleChoice"),i2t.forEach(t),b2r=r(Gke," (XLM model)"),Gke.forEach(t),v2r=i(_e),EM=n(_e,"LI",{});var Oke=s(EM);Ybe=n(Oke,"STRONG",{});var d2t=s(Ybe);F2r=r(d2t,"xlm-roberta"),d2t.forEach(t),T2r=r(Oke," \u2014 "),qW=n(Oke,"A",{href:!0});var c2t=s(qW);M2r=r(c2t,"TFXLMRobertaForMultipleChoice"),c2t.forEach(t),E2r=r(Oke," (XLM-RoBERTa model)"),Oke.forEach(t),C2r=i(_e),CM=n(_e,"LI",{});var Vke=s(CM);Kbe=n(Vke,"STRONG",{});var f2t=s(Kbe);w2r=r(f2t,"xlnet"),f2t.forEach(t),A2r=r(Vke," \u2014 "),NW=n(Vke,"A",{href:!0});var m2t=s(NW);y2r=r(m2t,"TFXLNetForMultipleChoice"),m2t.forEach(t),L2r=r(Vke," (XLNet model)"),Vke.forEach(t),_e.forEach(t),x2r=i(Fl),T(wM.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),YPe=i(f),rc=n(f,"H2",{class:!0});var oNe=s(rc);AM=n(oNe,"A",{id:!0,class:!0,href:!0});var g2t=s(AM);Zbe=n(g2t,"SPAN",{});var h2t=s(Zbe);T(UL.$$.fragment,h2t),h2t.forEach(t),g2t.forEach(t),$2r=i(oNe),e2e=n(oNe,"SPAN",{});var p2t=s(e2e);k2r=r(p2t,"TFAutoModelForTableQuestionAnswering"),p2t.forEach(t),oNe.forEach(t),KPe=i(f),nr=n(f,"DIV",{class:!0});var Tl=s(nr);T(JL.$$.fragment,Tl),S2r=i(Tl),tc=n(Tl,"P",{});var RK=s(tc);R2r=r(RK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),jW=n(RK,"A",{href:!0});var u2t=s(jW);B2r=r(u2t,"from_pretrained()"),u2t.forEach(t),P2r=r(RK," class method or the "),DW=n(RK,"A",{href:!0});var _2t=s(DW);I2r=r(_2t,"from_config()"),_2t.forEach(t),q2r=r(RK,` class
method.`),RK.forEach(t),N2r=i(Tl),YL=n(Tl,"P",{});var rNe=s(YL);j2r=r(rNe,"This class cannot be instantiated directly using "),o2e=n(rNe,"CODE",{});var b2t=s(o2e);D2r=r(b2t,"__init__()"),b2t.forEach(t),G2r=r(rNe," (throws an error)."),rNe.forEach(t),O2r=i(Tl),kt=n(Tl,"DIV",{class:!0});var Xw=s(kt);T(KL.$$.fragment,Xw),V2r=i(Xw),r2e=n(Xw,"P",{});var v2t=s(r2e);X2r=r(v2t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),v2t.forEach(t),z2r=i(Xw),ac=n(Xw,"P",{});var BK=s(ac);Q2r=r(BK,`Note:
Loading a model from its configuration file does `),t2e=n(BK,"STRONG",{});var F2t=s(t2e);W2r=r(F2t,"not"),F2t.forEach(t),H2r=r(BK,` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=n(BK,"A",{href:!0});var T2t=s(GW);U2r=r(T2t,"from_pretrained()"),T2t.forEach(t),J2r=r(BK," to load the model weights."),BK.forEach(t),Y2r=i(Xw),T(yM.$$.fragment,Xw),Xw.forEach(t),K2r=i(Tl),Sr=n(Tl,"DIV",{class:!0});var Ml=s(Sr);T(ZL.$$.fragment,Ml),Z2r=i(Ml),a2e=n(Ml,"P",{});var M2t=s(a2e);evr=r(M2t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),M2t.forEach(t),ovr=i(Ml),tn=n(Ml,"P",{});var zw=s(tn);rvr=r(zw,"The model class to instantiate is selected based on the "),n2e=n(zw,"CODE",{});var E2t=s(n2e);tvr=r(E2t,"model_type"),E2t.forEach(t),avr=r(zw,` property of the config object (either
passed as an argument or loaded from `),s2e=n(zw,"CODE",{});var C2t=s(s2e);nvr=r(C2t,"pretrained_model_name_or_path"),C2t.forEach(t),svr=r(zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l2e=n(zw,"CODE",{});var w2t=s(l2e);lvr=r(w2t,"pretrained_model_name_or_path"),w2t.forEach(t),ivr=r(zw,":"),zw.forEach(t),dvr=i(Ml),i2e=n(Ml,"UL",{});var A2t=s(i2e);LM=n(A2t,"LI",{});var Xke=s(LM);d2e=n(Xke,"STRONG",{});var y2t=s(d2e);cvr=r(y2t,"tapas"),y2t.forEach(t),fvr=r(Xke," \u2014 "),OW=n(Xke,"A",{href:!0});var L2t=s(OW);mvr=r(L2t,"TFTapasForQuestionAnswering"),L2t.forEach(t),gvr=r(Xke," (TAPAS model)"),Xke.forEach(t),A2t.forEach(t),hvr=i(Ml),T(xM.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),ZPe=i(f),nc=n(f,"H2",{class:!0});var tNe=s(nc);$M=n(tNe,"A",{id:!0,class:!0,href:!0});var x2t=s($M);c2e=n(x2t,"SPAN",{});var $2t=s(c2e);T(e8.$$.fragment,$2t),$2t.forEach(t),x2t.forEach(t),pvr=i(tNe),f2e=n(tNe,"SPAN",{});var k2t=s(f2e);uvr=r(k2t,"TFAutoModelForTokenClassification"),k2t.forEach(t),tNe.forEach(t),eIe=i(f),sr=n(f,"DIV",{class:!0});var El=s(sr);T(o8.$$.fragment,El),_vr=i(El),sc=n(El,"P",{});var PK=s(sc);bvr=r(PK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),VW=n(PK,"A",{href:!0});var S2t=s(VW);vvr=r(S2t,"from_pretrained()"),S2t.forEach(t),Fvr=r(PK," class method or the "),XW=n(PK,"A",{href:!0});var R2t=s(XW);Tvr=r(R2t,"from_config()"),R2t.forEach(t),Mvr=r(PK,` class
method.`),PK.forEach(t),Evr=i(El),r8=n(El,"P",{});var aNe=s(r8);Cvr=r(aNe,"This class cannot be instantiated directly using "),m2e=n(aNe,"CODE",{});var B2t=s(m2e);wvr=r(B2t,"__init__()"),B2t.forEach(t),Avr=r(aNe," (throws an error)."),aNe.forEach(t),yvr=i(El),St=n(El,"DIV",{class:!0});var Qw=s(St);T(t8.$$.fragment,Qw),Lvr=i(Qw),g2e=n(Qw,"P",{});var P2t=s(g2e);xvr=r(P2t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),P2t.forEach(t),$vr=i(Qw),lc=n(Qw,"P",{});var IK=s(lc);kvr=r(IK,`Note:
Loading a model from its configuration file does `),h2e=n(IK,"STRONG",{});var I2t=s(h2e);Svr=r(I2t,"not"),I2t.forEach(t),Rvr=r(IK,` load the model weights. It only affects the
model\u2019s configuration. Use `),zW=n(IK,"A",{href:!0});var q2t=s(zW);Bvr=r(q2t,"from_pretrained()"),q2t.forEach(t),Pvr=r(IK," to load the model weights."),IK.forEach(t),Ivr=i(Qw),T(kM.$$.fragment,Qw),Qw.forEach(t),qvr=i(El),Rr=n(El,"DIV",{class:!0});var Cl=s(Rr);T(a8.$$.fragment,Cl),Nvr=i(Cl),p2e=n(Cl,"P",{});var N2t=s(p2e);jvr=r(N2t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),N2t.forEach(t),Dvr=i(Cl),an=n(Cl,"P",{});var Ww=s(an);Gvr=r(Ww,"The model class to instantiate is selected based on the "),u2e=n(Ww,"CODE",{});var j2t=s(u2e);Ovr=r(j2t,"model_type"),j2t.forEach(t),Vvr=r(Ww,` property of the config object (either
passed as an argument or loaded from `),_2e=n(Ww,"CODE",{});var D2t=s(_2e);Xvr=r(D2t,"pretrained_model_name_or_path"),D2t.forEach(t),zvr=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b2e=n(Ww,"CODE",{});var G2t=s(b2e);Qvr=r(G2t,"pretrained_model_name_or_path"),G2t.forEach(t),Wvr=r(Ww,":"),Ww.forEach(t),Hvr=i(Cl),de=n(Cl,"UL",{});var me=s(de);SM=n(me,"LI",{});var zke=s(SM);v2e=n(zke,"STRONG",{});var O2t=s(v2e);Uvr=r(O2t,"albert"),O2t.forEach(t),Jvr=r(zke," \u2014 "),QW=n(zke,"A",{href:!0});var V2t=s(QW);Yvr=r(V2t,"TFAlbertForTokenClassification"),V2t.forEach(t),Kvr=r(zke," (ALBERT model)"),zke.forEach(t),Zvr=i(me),RM=n(me,"LI",{});var Qke=s(RM);F2e=n(Qke,"STRONG",{});var X2t=s(F2e);eFr=r(X2t,"bert"),X2t.forEach(t),oFr=r(Qke," \u2014 "),WW=n(Qke,"A",{href:!0});var z2t=s(WW);rFr=r(z2t,"TFBertForTokenClassification"),z2t.forEach(t),tFr=r(Qke," (BERT model)"),Qke.forEach(t),aFr=i(me),BM=n(me,"LI",{});var Wke=s(BM);T2e=n(Wke,"STRONG",{});var Q2t=s(T2e);nFr=r(Q2t,"camembert"),Q2t.forEach(t),sFr=r(Wke," \u2014 "),HW=n(Wke,"A",{href:!0});var W2t=s(HW);lFr=r(W2t,"TFCamembertForTokenClassification"),W2t.forEach(t),iFr=r(Wke," (CamemBERT model)"),Wke.forEach(t),dFr=i(me),PM=n(me,"LI",{});var Hke=s(PM);M2e=n(Hke,"STRONG",{});var H2t=s(M2e);cFr=r(H2t,"convbert"),H2t.forEach(t),fFr=r(Hke," \u2014 "),UW=n(Hke,"A",{href:!0});var U2t=s(UW);mFr=r(U2t,"TFConvBertForTokenClassification"),U2t.forEach(t),gFr=r(Hke," (ConvBERT model)"),Hke.forEach(t),hFr=i(me),IM=n(me,"LI",{});var Uke=s(IM);E2e=n(Uke,"STRONG",{});var J2t=s(E2e);pFr=r(J2t,"deberta"),J2t.forEach(t),uFr=r(Uke," \u2014 "),JW=n(Uke,"A",{href:!0});var Y2t=s(JW);_Fr=r(Y2t,"TFDebertaForTokenClassification"),Y2t.forEach(t),bFr=r(Uke," (DeBERTa model)"),Uke.forEach(t),vFr=i(me),qM=n(me,"LI",{});var Jke=s(qM);C2e=n(Jke,"STRONG",{});var K2t=s(C2e);FFr=r(K2t,"deberta-v2"),K2t.forEach(t),TFr=r(Jke," \u2014 "),YW=n(Jke,"A",{href:!0});var Z2t=s(YW);MFr=r(Z2t,"TFDebertaV2ForTokenClassification"),Z2t.forEach(t),EFr=r(Jke," (DeBERTa-v2 model)"),Jke.forEach(t),CFr=i(me),NM=n(me,"LI",{});var Yke=s(NM);w2e=n(Yke,"STRONG",{});var evt=s(w2e);wFr=r(evt,"distilbert"),evt.forEach(t),AFr=r(Yke," \u2014 "),KW=n(Yke,"A",{href:!0});var ovt=s(KW);yFr=r(ovt,"TFDistilBertForTokenClassification"),ovt.forEach(t),LFr=r(Yke," (DistilBERT model)"),Yke.forEach(t),xFr=i(me),jM=n(me,"LI",{});var Kke=s(jM);A2e=n(Kke,"STRONG",{});var rvt=s(A2e);$Fr=r(rvt,"electra"),rvt.forEach(t),kFr=r(Kke," \u2014 "),ZW=n(Kke,"A",{href:!0});var tvt=s(ZW);SFr=r(tvt,"TFElectraForTokenClassification"),tvt.forEach(t),RFr=r(Kke," (ELECTRA model)"),Kke.forEach(t),BFr=i(me),DM=n(me,"LI",{});var Zke=s(DM);y2e=n(Zke,"STRONG",{});var avt=s(y2e);PFr=r(avt,"flaubert"),avt.forEach(t),IFr=r(Zke," \u2014 "),eH=n(Zke,"A",{href:!0});var nvt=s(eH);qFr=r(nvt,"TFFlaubertForTokenClassification"),nvt.forEach(t),NFr=r(Zke," (FlauBERT model)"),Zke.forEach(t),jFr=i(me),GM=n(me,"LI",{});var eSe=s(GM);L2e=n(eSe,"STRONG",{});var svt=s(L2e);DFr=r(svt,"funnel"),svt.forEach(t),GFr=r(eSe," \u2014 "),oH=n(eSe,"A",{href:!0});var lvt=s(oH);OFr=r(lvt,"TFFunnelForTokenClassification"),lvt.forEach(t),VFr=r(eSe," (Funnel Transformer model)"),eSe.forEach(t),XFr=i(me),OM=n(me,"LI",{});var oSe=s(OM);x2e=n(oSe,"STRONG",{});var ivt=s(x2e);zFr=r(ivt,"layoutlm"),ivt.forEach(t),QFr=r(oSe," \u2014 "),rH=n(oSe,"A",{href:!0});var dvt=s(rH);WFr=r(dvt,"TFLayoutLMForTokenClassification"),dvt.forEach(t),HFr=r(oSe," (LayoutLM model)"),oSe.forEach(t),UFr=i(me),VM=n(me,"LI",{});var rSe=s(VM);$2e=n(rSe,"STRONG",{});var cvt=s($2e);JFr=r(cvt,"longformer"),cvt.forEach(t),YFr=r(rSe," \u2014 "),tH=n(rSe,"A",{href:!0});var fvt=s(tH);KFr=r(fvt,"TFLongformerForTokenClassification"),fvt.forEach(t),ZFr=r(rSe," (Longformer model)"),rSe.forEach(t),e6r=i(me),XM=n(me,"LI",{});var tSe=s(XM);k2e=n(tSe,"STRONG",{});var mvt=s(k2e);o6r=r(mvt,"mobilebert"),mvt.forEach(t),r6r=r(tSe," \u2014 "),aH=n(tSe,"A",{href:!0});var gvt=s(aH);t6r=r(gvt,"TFMobileBertForTokenClassification"),gvt.forEach(t),a6r=r(tSe," (MobileBERT model)"),tSe.forEach(t),n6r=i(me),zM=n(me,"LI",{});var aSe=s(zM);S2e=n(aSe,"STRONG",{});var hvt=s(S2e);s6r=r(hvt,"mpnet"),hvt.forEach(t),l6r=r(aSe," \u2014 "),nH=n(aSe,"A",{href:!0});var pvt=s(nH);i6r=r(pvt,"TFMPNetForTokenClassification"),pvt.forEach(t),d6r=r(aSe," (MPNet model)"),aSe.forEach(t),c6r=i(me),QM=n(me,"LI",{});var nSe=s(QM);R2e=n(nSe,"STRONG",{});var uvt=s(R2e);f6r=r(uvt,"rembert"),uvt.forEach(t),m6r=r(nSe," \u2014 "),sH=n(nSe,"A",{href:!0});var _vt=s(sH);g6r=r(_vt,"TFRemBertForTokenClassification"),_vt.forEach(t),h6r=r(nSe," (RemBERT model)"),nSe.forEach(t),p6r=i(me),WM=n(me,"LI",{});var sSe=s(WM);B2e=n(sSe,"STRONG",{});var bvt=s(B2e);u6r=r(bvt,"roberta"),bvt.forEach(t),_6r=r(sSe," \u2014 "),lH=n(sSe,"A",{href:!0});var vvt=s(lH);b6r=r(vvt,"TFRobertaForTokenClassification"),vvt.forEach(t),v6r=r(sSe," (RoBERTa model)"),sSe.forEach(t),F6r=i(me),HM=n(me,"LI",{});var lSe=s(HM);P2e=n(lSe,"STRONG",{});var Fvt=s(P2e);T6r=r(Fvt,"roformer"),Fvt.forEach(t),M6r=r(lSe," \u2014 "),iH=n(lSe,"A",{href:!0});var Tvt=s(iH);E6r=r(Tvt,"TFRoFormerForTokenClassification"),Tvt.forEach(t),C6r=r(lSe," (RoFormer model)"),lSe.forEach(t),w6r=i(me),UM=n(me,"LI",{});var iSe=s(UM);I2e=n(iSe,"STRONG",{});var Mvt=s(I2e);A6r=r(Mvt,"xlm"),Mvt.forEach(t),y6r=r(iSe," \u2014 "),dH=n(iSe,"A",{href:!0});var Evt=s(dH);L6r=r(Evt,"TFXLMForTokenClassification"),Evt.forEach(t),x6r=r(iSe," (XLM model)"),iSe.forEach(t),$6r=i(me),JM=n(me,"LI",{});var dSe=s(JM);q2e=n(dSe,"STRONG",{});var Cvt=s(q2e);k6r=r(Cvt,"xlm-roberta"),Cvt.forEach(t),S6r=r(dSe," \u2014 "),cH=n(dSe,"A",{href:!0});var wvt=s(cH);R6r=r(wvt,"TFXLMRobertaForTokenClassification"),wvt.forEach(t),B6r=r(dSe," (XLM-RoBERTa model)"),dSe.forEach(t),P6r=i(me),YM=n(me,"LI",{});var cSe=s(YM);N2e=n(cSe,"STRONG",{});var Avt=s(N2e);I6r=r(Avt,"xlnet"),Avt.forEach(t),q6r=r(cSe," \u2014 "),fH=n(cSe,"A",{href:!0});var yvt=s(fH);N6r=r(yvt,"TFXLNetForTokenClassification"),yvt.forEach(t),j6r=r(cSe," (XLNet model)"),cSe.forEach(t),me.forEach(t),D6r=i(Cl),T(KM.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),oIe=i(f),ic=n(f,"H2",{class:!0});var nNe=s(ic);ZM=n(nNe,"A",{id:!0,class:!0,href:!0});var Lvt=s(ZM);j2e=n(Lvt,"SPAN",{});var xvt=s(j2e);T(n8.$$.fragment,xvt),xvt.forEach(t),Lvt.forEach(t),G6r=i(nNe),D2e=n(nNe,"SPAN",{});var $vt=s(D2e);O6r=r($vt,"TFAutoModelForQuestionAnswering"),$vt.forEach(t),nNe.forEach(t),rIe=i(f),lr=n(f,"DIV",{class:!0});var wl=s(lr);T(s8.$$.fragment,wl),V6r=i(wl),dc=n(wl,"P",{});var qK=s(dc);X6r=r(qK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),mH=n(qK,"A",{href:!0});var kvt=s(mH);z6r=r(kvt,"from_pretrained()"),kvt.forEach(t),Q6r=r(qK," class method or the "),gH=n(qK,"A",{href:!0});var Svt=s(gH);W6r=r(Svt,"from_config()"),Svt.forEach(t),H6r=r(qK,` class
method.`),qK.forEach(t),U6r=i(wl),l8=n(wl,"P",{});var sNe=s(l8);J6r=r(sNe,"This class cannot be instantiated directly using "),G2e=n(sNe,"CODE",{});var Rvt=s(G2e);Y6r=r(Rvt,"__init__()"),Rvt.forEach(t),K6r=r(sNe," (throws an error)."),sNe.forEach(t),Z6r=i(wl),Rt=n(wl,"DIV",{class:!0});var Hw=s(Rt);T(i8.$$.fragment,Hw),eTr=i(Hw),O2e=n(Hw,"P",{});var Bvt=s(O2e);oTr=r(Bvt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Bvt.forEach(t),rTr=i(Hw),cc=n(Hw,"P",{});var NK=s(cc);tTr=r(NK,`Note:
Loading a model from its configuration file does `),V2e=n(NK,"STRONG",{});var Pvt=s(V2e);aTr=r(Pvt,"not"),Pvt.forEach(t),nTr=r(NK,` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=n(NK,"A",{href:!0});var Ivt=s(hH);sTr=r(Ivt,"from_pretrained()"),Ivt.forEach(t),lTr=r(NK," to load the model weights."),NK.forEach(t),iTr=i(Hw),T(e4.$$.fragment,Hw),Hw.forEach(t),dTr=i(wl),Br=n(wl,"DIV",{class:!0});var Al=s(Br);T(d8.$$.fragment,Al),cTr=i(Al),X2e=n(Al,"P",{});var qvt=s(X2e);fTr=r(qvt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),qvt.forEach(t),mTr=i(Al),nn=n(Al,"P",{});var Uw=s(nn);gTr=r(Uw,"The model class to instantiate is selected based on the "),z2e=n(Uw,"CODE",{});var Nvt=s(z2e);hTr=r(Nvt,"model_type"),Nvt.forEach(t),pTr=r(Uw,` property of the config object (either
passed as an argument or loaded from `),Q2e=n(Uw,"CODE",{});var jvt=s(Q2e);uTr=r(jvt,"pretrained_model_name_or_path"),jvt.forEach(t),_Tr=r(Uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W2e=n(Uw,"CODE",{});var Dvt=s(W2e);bTr=r(Dvt,"pretrained_model_name_or_path"),Dvt.forEach(t),vTr=r(Uw,":"),Uw.forEach(t),FTr=i(Al),ce=n(Al,"UL",{});var ge=s(ce);o4=n(ge,"LI",{});var fSe=s(o4);H2e=n(fSe,"STRONG",{});var Gvt=s(H2e);TTr=r(Gvt,"albert"),Gvt.forEach(t),MTr=r(fSe," \u2014 "),pH=n(fSe,"A",{href:!0});var Ovt=s(pH);ETr=r(Ovt,"TFAlbertForQuestionAnswering"),Ovt.forEach(t),CTr=r(fSe," (ALBERT model)"),fSe.forEach(t),wTr=i(ge),r4=n(ge,"LI",{});var mSe=s(r4);U2e=n(mSe,"STRONG",{});var Vvt=s(U2e);ATr=r(Vvt,"bert"),Vvt.forEach(t),yTr=r(mSe," \u2014 "),uH=n(mSe,"A",{href:!0});var Xvt=s(uH);LTr=r(Xvt,"TFBertForQuestionAnswering"),Xvt.forEach(t),xTr=r(mSe," (BERT model)"),mSe.forEach(t),$Tr=i(ge),t4=n(ge,"LI",{});var gSe=s(t4);J2e=n(gSe,"STRONG",{});var zvt=s(J2e);kTr=r(zvt,"camembert"),zvt.forEach(t),STr=r(gSe," \u2014 "),_H=n(gSe,"A",{href:!0});var Qvt=s(_H);RTr=r(Qvt,"TFCamembertForQuestionAnswering"),Qvt.forEach(t),BTr=r(gSe," (CamemBERT model)"),gSe.forEach(t),PTr=i(ge),a4=n(ge,"LI",{});var hSe=s(a4);Y2e=n(hSe,"STRONG",{});var Wvt=s(Y2e);ITr=r(Wvt,"convbert"),Wvt.forEach(t),qTr=r(hSe," \u2014 "),bH=n(hSe,"A",{href:!0});var Hvt=s(bH);NTr=r(Hvt,"TFConvBertForQuestionAnswering"),Hvt.forEach(t),jTr=r(hSe," (ConvBERT model)"),hSe.forEach(t),DTr=i(ge),n4=n(ge,"LI",{});var pSe=s(n4);K2e=n(pSe,"STRONG",{});var Uvt=s(K2e);GTr=r(Uvt,"deberta"),Uvt.forEach(t),OTr=r(pSe," \u2014 "),vH=n(pSe,"A",{href:!0});var Jvt=s(vH);VTr=r(Jvt,"TFDebertaForQuestionAnswering"),Jvt.forEach(t),XTr=r(pSe," (DeBERTa model)"),pSe.forEach(t),zTr=i(ge),s4=n(ge,"LI",{});var uSe=s(s4);Z2e=n(uSe,"STRONG",{});var Yvt=s(Z2e);QTr=r(Yvt,"deberta-v2"),Yvt.forEach(t),WTr=r(uSe," \u2014 "),FH=n(uSe,"A",{href:!0});var Kvt=s(FH);HTr=r(Kvt,"TFDebertaV2ForQuestionAnswering"),Kvt.forEach(t),UTr=r(uSe," (DeBERTa-v2 model)"),uSe.forEach(t),JTr=i(ge),l4=n(ge,"LI",{});var _Se=s(l4);eve=n(_Se,"STRONG",{});var Zvt=s(eve);YTr=r(Zvt,"distilbert"),Zvt.forEach(t),KTr=r(_Se," \u2014 "),TH=n(_Se,"A",{href:!0});var eFt=s(TH);ZTr=r(eFt,"TFDistilBertForQuestionAnswering"),eFt.forEach(t),e7r=r(_Se," (DistilBERT model)"),_Se.forEach(t),o7r=i(ge),i4=n(ge,"LI",{});var bSe=s(i4);ove=n(bSe,"STRONG",{});var oFt=s(ove);r7r=r(oFt,"electra"),oFt.forEach(t),t7r=r(bSe," \u2014 "),MH=n(bSe,"A",{href:!0});var rFt=s(MH);a7r=r(rFt,"TFElectraForQuestionAnswering"),rFt.forEach(t),n7r=r(bSe," (ELECTRA model)"),bSe.forEach(t),s7r=i(ge),d4=n(ge,"LI",{});var vSe=s(d4);rve=n(vSe,"STRONG",{});var tFt=s(rve);l7r=r(tFt,"flaubert"),tFt.forEach(t),i7r=r(vSe," \u2014 "),EH=n(vSe,"A",{href:!0});var aFt=s(EH);d7r=r(aFt,"TFFlaubertForQuestionAnsweringSimple"),aFt.forEach(t),c7r=r(vSe," (FlauBERT model)"),vSe.forEach(t),f7r=i(ge),c4=n(ge,"LI",{});var FSe=s(c4);tve=n(FSe,"STRONG",{});var nFt=s(tve);m7r=r(nFt,"funnel"),nFt.forEach(t),g7r=r(FSe," \u2014 "),CH=n(FSe,"A",{href:!0});var sFt=s(CH);h7r=r(sFt,"TFFunnelForQuestionAnswering"),sFt.forEach(t),p7r=r(FSe," (Funnel Transformer model)"),FSe.forEach(t),u7r=i(ge),f4=n(ge,"LI",{});var TSe=s(f4);ave=n(TSe,"STRONG",{});var lFt=s(ave);_7r=r(lFt,"gptj"),lFt.forEach(t),b7r=r(TSe," \u2014 "),wH=n(TSe,"A",{href:!0});var iFt=s(wH);v7r=r(iFt,"TFGPTJForQuestionAnswering"),iFt.forEach(t),F7r=r(TSe," (GPT-J model)"),TSe.forEach(t),T7r=i(ge),m4=n(ge,"LI",{});var MSe=s(m4);nve=n(MSe,"STRONG",{});var dFt=s(nve);M7r=r(dFt,"longformer"),dFt.forEach(t),E7r=r(MSe," \u2014 "),AH=n(MSe,"A",{href:!0});var cFt=s(AH);C7r=r(cFt,"TFLongformerForQuestionAnswering"),cFt.forEach(t),w7r=r(MSe," (Longformer model)"),MSe.forEach(t),A7r=i(ge),g4=n(ge,"LI",{});var ESe=s(g4);sve=n(ESe,"STRONG",{});var fFt=s(sve);y7r=r(fFt,"mobilebert"),fFt.forEach(t),L7r=r(ESe," \u2014 "),yH=n(ESe,"A",{href:!0});var mFt=s(yH);x7r=r(mFt,"TFMobileBertForQuestionAnswering"),mFt.forEach(t),$7r=r(ESe," (MobileBERT model)"),ESe.forEach(t),k7r=i(ge),h4=n(ge,"LI",{});var CSe=s(h4);lve=n(CSe,"STRONG",{});var gFt=s(lve);S7r=r(gFt,"mpnet"),gFt.forEach(t),R7r=r(CSe," \u2014 "),LH=n(CSe,"A",{href:!0});var hFt=s(LH);B7r=r(hFt,"TFMPNetForQuestionAnswering"),hFt.forEach(t),P7r=r(CSe," (MPNet model)"),CSe.forEach(t),I7r=i(ge),p4=n(ge,"LI",{});var wSe=s(p4);ive=n(wSe,"STRONG",{});var pFt=s(ive);q7r=r(pFt,"rembert"),pFt.forEach(t),N7r=r(wSe," \u2014 "),xH=n(wSe,"A",{href:!0});var uFt=s(xH);j7r=r(uFt,"TFRemBertForQuestionAnswering"),uFt.forEach(t),D7r=r(wSe," (RemBERT model)"),wSe.forEach(t),G7r=i(ge),u4=n(ge,"LI",{});var ASe=s(u4);dve=n(ASe,"STRONG",{});var _Ft=s(dve);O7r=r(_Ft,"roberta"),_Ft.forEach(t),V7r=r(ASe," \u2014 "),$H=n(ASe,"A",{href:!0});var bFt=s($H);X7r=r(bFt,"TFRobertaForQuestionAnswering"),bFt.forEach(t),z7r=r(ASe," (RoBERTa model)"),ASe.forEach(t),Q7r=i(ge),_4=n(ge,"LI",{});var ySe=s(_4);cve=n(ySe,"STRONG",{});var vFt=s(cve);W7r=r(vFt,"roformer"),vFt.forEach(t),H7r=r(ySe," \u2014 "),kH=n(ySe,"A",{href:!0});var FFt=s(kH);U7r=r(FFt,"TFRoFormerForQuestionAnswering"),FFt.forEach(t),J7r=r(ySe," (RoFormer model)"),ySe.forEach(t),Y7r=i(ge),b4=n(ge,"LI",{});var LSe=s(b4);fve=n(LSe,"STRONG",{});var TFt=s(fve);K7r=r(TFt,"xlm"),TFt.forEach(t),Z7r=r(LSe," \u2014 "),SH=n(LSe,"A",{href:!0});var MFt=s(SH);eMr=r(MFt,"TFXLMForQuestionAnsweringSimple"),MFt.forEach(t),oMr=r(LSe," (XLM model)"),LSe.forEach(t),rMr=i(ge),v4=n(ge,"LI",{});var xSe=s(v4);mve=n(xSe,"STRONG",{});var EFt=s(mve);tMr=r(EFt,"xlm-roberta"),EFt.forEach(t),aMr=r(xSe," \u2014 "),RH=n(xSe,"A",{href:!0});var CFt=s(RH);nMr=r(CFt,"TFXLMRobertaForQuestionAnswering"),CFt.forEach(t),sMr=r(xSe," (XLM-RoBERTa model)"),xSe.forEach(t),lMr=i(ge),F4=n(ge,"LI",{});var $Se=s(F4);gve=n($Se,"STRONG",{});var wFt=s(gve);iMr=r(wFt,"xlnet"),wFt.forEach(t),dMr=r($Se," \u2014 "),BH=n($Se,"A",{href:!0});var AFt=s(BH);cMr=r(AFt,"TFXLNetForQuestionAnsweringSimple"),AFt.forEach(t),fMr=r($Se," (XLNet model)"),$Se.forEach(t),ge.forEach(t),mMr=i(Al),T(T4.$$.fragment,Al),Al.forEach(t),wl.forEach(t),tIe=i(f),fc=n(f,"H2",{class:!0});var lNe=s(fc);M4=n(lNe,"A",{id:!0,class:!0,href:!0});var yFt=s(M4);hve=n(yFt,"SPAN",{});var LFt=s(hve);T(c8.$$.fragment,LFt),LFt.forEach(t),yFt.forEach(t),gMr=i(lNe),pve=n(lNe,"SPAN",{});var xFt=s(pve);hMr=r(xFt,"TFAutoModelForVision2Seq"),xFt.forEach(t),lNe.forEach(t),aIe=i(f),ir=n(f,"DIV",{class:!0});var yl=s(ir);T(f8.$$.fragment,yl),pMr=i(yl),mc=n(yl,"P",{});var jK=s(mc);uMr=r(jK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),PH=n(jK,"A",{href:!0});var $Ft=s(PH);_Mr=r($Ft,"from_pretrained()"),$Ft.forEach(t),bMr=r(jK," class method or the "),IH=n(jK,"A",{href:!0});var kFt=s(IH);vMr=r(kFt,"from_config()"),kFt.forEach(t),FMr=r(jK,` class
method.`),jK.forEach(t),TMr=i(yl),m8=n(yl,"P",{});var iNe=s(m8);MMr=r(iNe,"This class cannot be instantiated directly using "),uve=n(iNe,"CODE",{});var SFt=s(uve);EMr=r(SFt,"__init__()"),SFt.forEach(t),CMr=r(iNe," (throws an error)."),iNe.forEach(t),wMr=i(yl),Bt=n(yl,"DIV",{class:!0});var Jw=s(Bt);T(g8.$$.fragment,Jw),AMr=i(Jw),_ve=n(Jw,"P",{});var RFt=s(_ve);yMr=r(RFt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),RFt.forEach(t),LMr=i(Jw),gc=n(Jw,"P",{});var DK=s(gc);xMr=r(DK,`Note:
Loading a model from its configuration file does `),bve=n(DK,"STRONG",{});var BFt=s(bve);$Mr=r(BFt,"not"),BFt.forEach(t),kMr=r(DK,` load the model weights. It only affects the
model\u2019s configuration. Use `),qH=n(DK,"A",{href:!0});var PFt=s(qH);SMr=r(PFt,"from_pretrained()"),PFt.forEach(t),RMr=r(DK," to load the model weights."),DK.forEach(t),BMr=i(Jw),T(E4.$$.fragment,Jw),Jw.forEach(t),PMr=i(yl),Pr=n(yl,"DIV",{class:!0});var Ll=s(Pr);T(h8.$$.fragment,Ll),IMr=i(Ll),vve=n(Ll,"P",{});var IFt=s(vve);qMr=r(IFt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),IFt.forEach(t),NMr=i(Ll),sn=n(Ll,"P",{});var Yw=s(sn);jMr=r(Yw,"The model class to instantiate is selected based on the "),Fve=n(Yw,"CODE",{});var qFt=s(Fve);DMr=r(qFt,"model_type"),qFt.forEach(t),GMr=r(Yw,` property of the config object (either
passed as an argument or loaded from `),Tve=n(Yw,"CODE",{});var NFt=s(Tve);OMr=r(NFt,"pretrained_model_name_or_path"),NFt.forEach(t),VMr=r(Yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mve=n(Yw,"CODE",{});var jFt=s(Mve);XMr=r(jFt,"pretrained_model_name_or_path"),jFt.forEach(t),zMr=r(Yw,":"),Yw.forEach(t),QMr=i(Ll),Eve=n(Ll,"UL",{});var DFt=s(Eve);C4=n(DFt,"LI",{});var kSe=s(C4);Cve=n(kSe,"STRONG",{});var GFt=s(Cve);WMr=r(GFt,"vision-encoder-decoder"),GFt.forEach(t),HMr=r(kSe," \u2014 "),NH=n(kSe,"A",{href:!0});var OFt=s(NH);UMr=r(OFt,"TFVisionEncoderDecoderModel"),OFt.forEach(t),JMr=r(kSe," (Vision Encoder decoder model)"),kSe.forEach(t),DFt.forEach(t),YMr=i(Ll),T(w4.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),nIe=i(f),hc=n(f,"H2",{class:!0});var dNe=s(hc);A4=n(dNe,"A",{id:!0,class:!0,href:!0});var VFt=s(A4);wve=n(VFt,"SPAN",{});var XFt=s(wve);T(p8.$$.fragment,XFt),XFt.forEach(t),VFt.forEach(t),KMr=i(dNe),Ave=n(dNe,"SPAN",{});var zFt=s(Ave);ZMr=r(zFt,"TFAutoModelForSpeechSeq2Seq"),zFt.forEach(t),dNe.forEach(t),sIe=i(f),dr=n(f,"DIV",{class:!0});var xl=s(dr);T(u8.$$.fragment,xl),e4r=i(xl),pc=n(xl,"P",{});var GK=s(pc);o4r=r(GK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),jH=n(GK,"A",{href:!0});var QFt=s(jH);r4r=r(QFt,"from_pretrained()"),QFt.forEach(t),t4r=r(GK," class method or the "),DH=n(GK,"A",{href:!0});var WFt=s(DH);a4r=r(WFt,"from_config()"),WFt.forEach(t),n4r=r(GK,` class
method.`),GK.forEach(t),s4r=i(xl),_8=n(xl,"P",{});var cNe=s(_8);l4r=r(cNe,"This class cannot be instantiated directly using "),yve=n(cNe,"CODE",{});var HFt=s(yve);i4r=r(HFt,"__init__()"),HFt.forEach(t),d4r=r(cNe," (throws an error)."),cNe.forEach(t),c4r=i(xl),Pt=n(xl,"DIV",{class:!0});var Kw=s(Pt);T(b8.$$.fragment,Kw),f4r=i(Kw),Lve=n(Kw,"P",{});var UFt=s(Lve);m4r=r(UFt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),UFt.forEach(t),g4r=i(Kw),uc=n(Kw,"P",{});var OK=s(uc);h4r=r(OK,`Note:
Loading a model from its configuration file does `),xve=n(OK,"STRONG",{});var JFt=s(xve);p4r=r(JFt,"not"),JFt.forEach(t),u4r=r(OK,` load the model weights. It only affects the
model\u2019s configuration. Use `),GH=n(OK,"A",{href:!0});var YFt=s(GH);_4r=r(YFt,"from_pretrained()"),YFt.forEach(t),b4r=r(OK," to load the model weights."),OK.forEach(t),v4r=i(Kw),T(y4.$$.fragment,Kw),Kw.forEach(t),F4r=i(xl),Ir=n(xl,"DIV",{class:!0});var $l=s(Ir);T(v8.$$.fragment,$l),T4r=i($l),$ve=n($l,"P",{});var KFt=s($ve);M4r=r(KFt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),KFt.forEach(t),E4r=i($l),ln=n($l,"P",{});var Zw=s(ln);C4r=r(Zw,"The model class to instantiate is selected based on the "),kve=n(Zw,"CODE",{});var ZFt=s(kve);w4r=r(ZFt,"model_type"),ZFt.forEach(t),A4r=r(Zw,` property of the config object (either
passed as an argument or loaded from `),Sve=n(Zw,"CODE",{});var e6t=s(Sve);y4r=r(e6t,"pretrained_model_name_or_path"),e6t.forEach(t),L4r=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rve=n(Zw,"CODE",{});var o6t=s(Rve);x4r=r(o6t,"pretrained_model_name_or_path"),o6t.forEach(t),$4r=r(Zw,":"),Zw.forEach(t),k4r=i($l),Bve=n($l,"UL",{});var r6t=s(Bve);L4=n(r6t,"LI",{});var SSe=s(L4);Pve=n(SSe,"STRONG",{});var t6t=s(Pve);S4r=r(t6t,"speech_to_text"),t6t.forEach(t),R4r=r(SSe," \u2014 "),OH=n(SSe,"A",{href:!0});var a6t=s(OH);B4r=r(a6t,"TFSpeech2TextForConditionalGeneration"),a6t.forEach(t),P4r=r(SSe," (Speech2Text model)"),SSe.forEach(t),r6t.forEach(t),I4r=i($l),T(x4.$$.fragment,$l),$l.forEach(t),xl.forEach(t),lIe=i(f),_c=n(f,"H2",{class:!0});var fNe=s(_c);$4=n(fNe,"A",{id:!0,class:!0,href:!0});var n6t=s($4);Ive=n(n6t,"SPAN",{});var s6t=s(Ive);T(F8.$$.fragment,s6t),s6t.forEach(t),n6t.forEach(t),q4r=i(fNe),qve=n(fNe,"SPAN",{});var l6t=s(qve);N4r=r(l6t,"FlaxAutoModel"),l6t.forEach(t),fNe.forEach(t),iIe=i(f),cr=n(f,"DIV",{class:!0});var kl=s(cr);T(T8.$$.fragment,kl),j4r=i(kl),bc=n(kl,"P",{});var VK=s(bc);D4r=r(VK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),VH=n(VK,"A",{href:!0});var i6t=s(VH);G4r=r(i6t,"from_pretrained()"),i6t.forEach(t),O4r=r(VK," class method or the "),XH=n(VK,"A",{href:!0});var d6t=s(XH);V4r=r(d6t,"from_config()"),d6t.forEach(t),X4r=r(VK,` class
method.`),VK.forEach(t),z4r=i(kl),M8=n(kl,"P",{});var mNe=s(M8);Q4r=r(mNe,"This class cannot be instantiated directly using "),Nve=n(mNe,"CODE",{});var c6t=s(Nve);W4r=r(c6t,"__init__()"),c6t.forEach(t),H4r=r(mNe," (throws an error)."),mNe.forEach(t),U4r=i(kl),It=n(kl,"DIV",{class:!0});var eA=s(It);T(E8.$$.fragment,eA),J4r=i(eA),jve=n(eA,"P",{});var f6t=s(jve);Y4r=r(f6t,"Instantiates one of the base model classes of the library from a configuration."),f6t.forEach(t),K4r=i(eA),vc=n(eA,"P",{});var XK=s(vc);Z4r=r(XK,`Note:
Loading a model from its configuration file does `),Dve=n(XK,"STRONG",{});var m6t=s(Dve);eEr=r(m6t,"not"),m6t.forEach(t),oEr=r(XK,` load the model weights. It only affects the
model\u2019s configuration. Use `),zH=n(XK,"A",{href:!0});var g6t=s(zH);rEr=r(g6t,"from_pretrained()"),g6t.forEach(t),tEr=r(XK," to load the model weights."),XK.forEach(t),aEr=i(eA),T(k4.$$.fragment,eA),eA.forEach(t),nEr=i(kl),qr=n(kl,"DIV",{class:!0});var Sl=s(qr);T(C8.$$.fragment,Sl),sEr=i(Sl),Gve=n(Sl,"P",{});var h6t=s(Gve);lEr=r(h6t,"Instantiate one of the base model classes of the library from a pretrained model."),h6t.forEach(t),iEr=i(Sl),dn=n(Sl,"P",{});var oA=s(dn);dEr=r(oA,"The model class to instantiate is selected based on the "),Ove=n(oA,"CODE",{});var p6t=s(Ove);cEr=r(p6t,"model_type"),p6t.forEach(t),fEr=r(oA,` property of the config object (either
passed as an argument or loaded from `),Vve=n(oA,"CODE",{});var u6t=s(Vve);mEr=r(u6t,"pretrained_model_name_or_path"),u6t.forEach(t),gEr=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xve=n(oA,"CODE",{});var _6t=s(Xve);hEr=r(_6t,"pretrained_model_name_or_path"),_6t.forEach(t),pEr=r(oA,":"),oA.forEach(t),uEr=i(Sl),re=n(Sl,"UL",{});var ne=s(re);S4=n(ne,"LI",{});var RSe=s(S4);zve=n(RSe,"STRONG",{});var b6t=s(zve);_Er=r(b6t,"albert"),b6t.forEach(t),bEr=r(RSe," \u2014 "),QH=n(RSe,"A",{href:!0});var v6t=s(QH);vEr=r(v6t,"FlaxAlbertModel"),v6t.forEach(t),FEr=r(RSe," (ALBERT model)"),RSe.forEach(t),TEr=i(ne),R4=n(ne,"LI",{});var BSe=s(R4);Qve=n(BSe,"STRONG",{});var F6t=s(Qve);MEr=r(F6t,"bart"),F6t.forEach(t),EEr=r(BSe," \u2014 "),WH=n(BSe,"A",{href:!0});var T6t=s(WH);CEr=r(T6t,"FlaxBartModel"),T6t.forEach(t),wEr=r(BSe," (BART model)"),BSe.forEach(t),AEr=i(ne),B4=n(ne,"LI",{});var PSe=s(B4);Wve=n(PSe,"STRONG",{});var M6t=s(Wve);yEr=r(M6t,"beit"),M6t.forEach(t),LEr=r(PSe," \u2014 "),HH=n(PSe,"A",{href:!0});var E6t=s(HH);xEr=r(E6t,"FlaxBeitModel"),E6t.forEach(t),$Er=r(PSe," (BEiT model)"),PSe.forEach(t),kEr=i(ne),P4=n(ne,"LI",{});var ISe=s(P4);Hve=n(ISe,"STRONG",{});var C6t=s(Hve);SEr=r(C6t,"bert"),C6t.forEach(t),REr=r(ISe," \u2014 "),UH=n(ISe,"A",{href:!0});var w6t=s(UH);BEr=r(w6t,"FlaxBertModel"),w6t.forEach(t),PEr=r(ISe," (BERT model)"),ISe.forEach(t),IEr=i(ne),I4=n(ne,"LI",{});var qSe=s(I4);Uve=n(qSe,"STRONG",{});var A6t=s(Uve);qEr=r(A6t,"big_bird"),A6t.forEach(t),NEr=r(qSe," \u2014 "),JH=n(qSe,"A",{href:!0});var y6t=s(JH);jEr=r(y6t,"FlaxBigBirdModel"),y6t.forEach(t),DEr=r(qSe," (BigBird model)"),qSe.forEach(t),GEr=i(ne),q4=n(ne,"LI",{});var NSe=s(q4);Jve=n(NSe,"STRONG",{});var L6t=s(Jve);OEr=r(L6t,"blenderbot"),L6t.forEach(t),VEr=r(NSe," \u2014 "),YH=n(NSe,"A",{href:!0});var x6t=s(YH);XEr=r(x6t,"FlaxBlenderbotModel"),x6t.forEach(t),zEr=r(NSe," (Blenderbot model)"),NSe.forEach(t),QEr=i(ne),N4=n(ne,"LI",{});var jSe=s(N4);Yve=n(jSe,"STRONG",{});var $6t=s(Yve);WEr=r($6t,"blenderbot-small"),$6t.forEach(t),HEr=r(jSe," \u2014 "),KH=n(jSe,"A",{href:!0});var k6t=s(KH);UEr=r(k6t,"FlaxBlenderbotSmallModel"),k6t.forEach(t),JEr=r(jSe," (BlenderbotSmall model)"),jSe.forEach(t),YEr=i(ne),j4=n(ne,"LI",{});var DSe=s(j4);Kve=n(DSe,"STRONG",{});var S6t=s(Kve);KEr=r(S6t,"clip"),S6t.forEach(t),ZEr=r(DSe," \u2014 "),ZH=n(DSe,"A",{href:!0});var R6t=s(ZH);eCr=r(R6t,"FlaxCLIPModel"),R6t.forEach(t),oCr=r(DSe," (CLIP model)"),DSe.forEach(t),rCr=i(ne),D4=n(ne,"LI",{});var GSe=s(D4);Zve=n(GSe,"STRONG",{});var B6t=s(Zve);tCr=r(B6t,"distilbert"),B6t.forEach(t),aCr=r(GSe," \u2014 "),eU=n(GSe,"A",{href:!0});var P6t=s(eU);nCr=r(P6t,"FlaxDistilBertModel"),P6t.forEach(t),sCr=r(GSe," (DistilBERT model)"),GSe.forEach(t),lCr=i(ne),G4=n(ne,"LI",{});var OSe=s(G4);eFe=n(OSe,"STRONG",{});var I6t=s(eFe);iCr=r(I6t,"electra"),I6t.forEach(t),dCr=r(OSe," \u2014 "),oU=n(OSe,"A",{href:!0});var q6t=s(oU);cCr=r(q6t,"FlaxElectraModel"),q6t.forEach(t),fCr=r(OSe," (ELECTRA model)"),OSe.forEach(t),mCr=i(ne),O4=n(ne,"LI",{});var VSe=s(O4);oFe=n(VSe,"STRONG",{});var N6t=s(oFe);gCr=r(N6t,"gpt2"),N6t.forEach(t),hCr=r(VSe," \u2014 "),rU=n(VSe,"A",{href:!0});var j6t=s(rU);pCr=r(j6t,"FlaxGPT2Model"),j6t.forEach(t),uCr=r(VSe," (OpenAI GPT-2 model)"),VSe.forEach(t),_Cr=i(ne),V4=n(ne,"LI",{});var XSe=s(V4);rFe=n(XSe,"STRONG",{});var D6t=s(rFe);bCr=r(D6t,"gpt_neo"),D6t.forEach(t),vCr=r(XSe," \u2014 "),tU=n(XSe,"A",{href:!0});var G6t=s(tU);FCr=r(G6t,"FlaxGPTNeoModel"),G6t.forEach(t),TCr=r(XSe," (GPT Neo model)"),XSe.forEach(t),MCr=i(ne),X4=n(ne,"LI",{});var zSe=s(X4);tFe=n(zSe,"STRONG",{});var O6t=s(tFe);ECr=r(O6t,"gptj"),O6t.forEach(t),CCr=r(zSe," \u2014 "),aU=n(zSe,"A",{href:!0});var V6t=s(aU);wCr=r(V6t,"FlaxGPTJModel"),V6t.forEach(t),ACr=r(zSe," (GPT-J model)"),zSe.forEach(t),yCr=i(ne),z4=n(ne,"LI",{});var QSe=s(z4);aFe=n(QSe,"STRONG",{});var X6t=s(aFe);LCr=r(X6t,"marian"),X6t.forEach(t),xCr=r(QSe," \u2014 "),nU=n(QSe,"A",{href:!0});var z6t=s(nU);$Cr=r(z6t,"FlaxMarianModel"),z6t.forEach(t),kCr=r(QSe," (Marian model)"),QSe.forEach(t),SCr=i(ne),Q4=n(ne,"LI",{});var WSe=s(Q4);nFe=n(WSe,"STRONG",{});var Q6t=s(nFe);RCr=r(Q6t,"mbart"),Q6t.forEach(t),BCr=r(WSe," \u2014 "),sU=n(WSe,"A",{href:!0});var W6t=s(sU);PCr=r(W6t,"FlaxMBartModel"),W6t.forEach(t),ICr=r(WSe," (mBART model)"),WSe.forEach(t),qCr=i(ne),W4=n(ne,"LI",{});var HSe=s(W4);sFe=n(HSe,"STRONG",{});var H6t=s(sFe);NCr=r(H6t,"mt5"),H6t.forEach(t),jCr=r(HSe," \u2014 "),lU=n(HSe,"A",{href:!0});var U6t=s(lU);DCr=r(U6t,"FlaxMT5Model"),U6t.forEach(t),GCr=r(HSe," (mT5 model)"),HSe.forEach(t),OCr=i(ne),H4=n(ne,"LI",{});var USe=s(H4);lFe=n(USe,"STRONG",{});var J6t=s(lFe);VCr=r(J6t,"pegasus"),J6t.forEach(t),XCr=r(USe," \u2014 "),iU=n(USe,"A",{href:!0});var Y6t=s(iU);zCr=r(Y6t,"FlaxPegasusModel"),Y6t.forEach(t),QCr=r(USe," (Pegasus model)"),USe.forEach(t),WCr=i(ne),U4=n(ne,"LI",{});var JSe=s(U4);iFe=n(JSe,"STRONG",{});var K6t=s(iFe);HCr=r(K6t,"roberta"),K6t.forEach(t),UCr=r(JSe," \u2014 "),dU=n(JSe,"A",{href:!0});var Z6t=s(dU);JCr=r(Z6t,"FlaxRobertaModel"),Z6t.forEach(t),YCr=r(JSe," (RoBERTa model)"),JSe.forEach(t),KCr=i(ne),J4=n(ne,"LI",{});var YSe=s(J4);dFe=n(YSe,"STRONG",{});var eTt=s(dFe);ZCr=r(eTt,"roformer"),eTt.forEach(t),e3r=r(YSe," \u2014 "),cU=n(YSe,"A",{href:!0});var oTt=s(cU);o3r=r(oTt,"FlaxRoFormerModel"),oTt.forEach(t),r3r=r(YSe," (RoFormer model)"),YSe.forEach(t),t3r=i(ne),Y4=n(ne,"LI",{});var KSe=s(Y4);cFe=n(KSe,"STRONG",{});var rTt=s(cFe);a3r=r(rTt,"t5"),rTt.forEach(t),n3r=r(KSe," \u2014 "),fU=n(KSe,"A",{href:!0});var tTt=s(fU);s3r=r(tTt,"FlaxT5Model"),tTt.forEach(t),l3r=r(KSe," (T5 model)"),KSe.forEach(t),i3r=i(ne),K4=n(ne,"LI",{});var ZSe=s(K4);fFe=n(ZSe,"STRONG",{});var aTt=s(fFe);d3r=r(aTt,"vision-text-dual-encoder"),aTt.forEach(t),c3r=r(ZSe," \u2014 "),mU=n(ZSe,"A",{href:!0});var nTt=s(mU);f3r=r(nTt,"FlaxVisionTextDualEncoderModel"),nTt.forEach(t),m3r=r(ZSe," (VisionTextDualEncoder model)"),ZSe.forEach(t),g3r=i(ne),Z4=n(ne,"LI",{});var eRe=s(Z4);mFe=n(eRe,"STRONG",{});var sTt=s(mFe);h3r=r(sTt,"vit"),sTt.forEach(t),p3r=r(eRe," \u2014 "),gU=n(eRe,"A",{href:!0});var lTt=s(gU);u3r=r(lTt,"FlaxViTModel"),lTt.forEach(t),_3r=r(eRe," (ViT model)"),eRe.forEach(t),b3r=i(ne),eE=n(ne,"LI",{});var oRe=s(eE);gFe=n(oRe,"STRONG",{});var iTt=s(gFe);v3r=r(iTt,"wav2vec2"),iTt.forEach(t),F3r=r(oRe," \u2014 "),hU=n(oRe,"A",{href:!0});var dTt=s(hU);T3r=r(dTt,"FlaxWav2Vec2Model"),dTt.forEach(t),M3r=r(oRe," (Wav2Vec2 model)"),oRe.forEach(t),E3r=i(ne),oE=n(ne,"LI",{});var rRe=s(oE);hFe=n(rRe,"STRONG",{});var cTt=s(hFe);C3r=r(cTt,"xglm"),cTt.forEach(t),w3r=r(rRe," \u2014 "),pU=n(rRe,"A",{href:!0});var fTt=s(pU);A3r=r(fTt,"FlaxXGLMModel"),fTt.forEach(t),y3r=r(rRe," (XGLM model)"),rRe.forEach(t),L3r=i(ne),rE=n(ne,"LI",{});var tRe=s(rE);pFe=n(tRe,"STRONG",{});var mTt=s(pFe);x3r=r(mTt,"xlm-roberta"),mTt.forEach(t),$3r=r(tRe," \u2014 "),uU=n(tRe,"A",{href:!0});var gTt=s(uU);k3r=r(gTt,"FlaxXLMRobertaModel"),gTt.forEach(t),S3r=r(tRe," (XLM-RoBERTa model)"),tRe.forEach(t),ne.forEach(t),R3r=i(Sl),T(tE.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),dIe=i(f),Fc=n(f,"H2",{class:!0});var gNe=s(Fc);aE=n(gNe,"A",{id:!0,class:!0,href:!0});var hTt=s(aE);uFe=n(hTt,"SPAN",{});var pTt=s(uFe);T(w8.$$.fragment,pTt),pTt.forEach(t),hTt.forEach(t),B3r=i(gNe),_Fe=n(gNe,"SPAN",{});var uTt=s(_Fe);P3r=r(uTt,"FlaxAutoModelForCausalLM"),uTt.forEach(t),gNe.forEach(t),cIe=i(f),fr=n(f,"DIV",{class:!0});var Rl=s(fr);T(A8.$$.fragment,Rl),I3r=i(Rl),Tc=n(Rl,"P",{});var zK=s(Tc);q3r=r(zK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_U=n(zK,"A",{href:!0});var _Tt=s(_U);N3r=r(_Tt,"from_pretrained()"),_Tt.forEach(t),j3r=r(zK," class method or the "),bU=n(zK,"A",{href:!0});var bTt=s(bU);D3r=r(bTt,"from_config()"),bTt.forEach(t),G3r=r(zK,` class
method.`),zK.forEach(t),O3r=i(Rl),y8=n(Rl,"P",{});var hNe=s(y8);V3r=r(hNe,"This class cannot be instantiated directly using "),bFe=n(hNe,"CODE",{});var vTt=s(bFe);X3r=r(vTt,"__init__()"),vTt.forEach(t),z3r=r(hNe," (throws an error)."),hNe.forEach(t),Q3r=i(Rl),qt=n(Rl,"DIV",{class:!0});var rA=s(qt);T(L8.$$.fragment,rA),W3r=i(rA),vFe=n(rA,"P",{});var FTt=s(vFe);H3r=r(FTt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),FTt.forEach(t),U3r=i(rA),Mc=n(rA,"P",{});var QK=s(Mc);J3r=r(QK,`Note:
Loading a model from its configuration file does `),FFe=n(QK,"STRONG",{});var TTt=s(FFe);Y3r=r(TTt,"not"),TTt.forEach(t),K3r=r(QK,` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=n(QK,"A",{href:!0});var MTt=s(vU);Z3r=r(MTt,"from_pretrained()"),MTt.forEach(t),ewr=r(QK," to load the model weights."),QK.forEach(t),owr=i(rA),T(nE.$$.fragment,rA),rA.forEach(t),rwr=i(Rl),Nr=n(Rl,"DIV",{class:!0});var Bl=s(Nr);T(x8.$$.fragment,Bl),twr=i(Bl),TFe=n(Bl,"P",{});var ETt=s(TFe);awr=r(ETt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ETt.forEach(t),nwr=i(Bl),cn=n(Bl,"P",{});var tA=s(cn);swr=r(tA,"The model class to instantiate is selected based on the "),MFe=n(tA,"CODE",{});var CTt=s(MFe);lwr=r(CTt,"model_type"),CTt.forEach(t),iwr=r(tA,` property of the config object (either
passed as an argument or loaded from `),EFe=n(tA,"CODE",{});var wTt=s(EFe);dwr=r(wTt,"pretrained_model_name_or_path"),wTt.forEach(t),cwr=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CFe=n(tA,"CODE",{});var ATt=s(CFe);fwr=r(ATt,"pretrained_model_name_or_path"),ATt.forEach(t),mwr=r(tA,":"),tA.forEach(t),gwr=i(Bl),ke=n(Bl,"UL",{});var Oe=s(ke);sE=n(Oe,"LI",{});var aRe=s(sE);wFe=n(aRe,"STRONG",{});var yTt=s(wFe);hwr=r(yTt,"bart"),yTt.forEach(t),pwr=r(aRe," \u2014 "),FU=n(aRe,"A",{href:!0});var LTt=s(FU);uwr=r(LTt,"FlaxBartForCausalLM"),LTt.forEach(t),_wr=r(aRe," (BART model)"),aRe.forEach(t),bwr=i(Oe),lE=n(Oe,"LI",{});var nRe=s(lE);AFe=n(nRe,"STRONG",{});var xTt=s(AFe);vwr=r(xTt,"bert"),xTt.forEach(t),Fwr=r(nRe," \u2014 "),TU=n(nRe,"A",{href:!0});var $Tt=s(TU);Twr=r($Tt,"FlaxBertForCausalLM"),$Tt.forEach(t),Mwr=r(nRe," (BERT model)"),nRe.forEach(t),Ewr=i(Oe),iE=n(Oe,"LI",{});var sRe=s(iE);yFe=n(sRe,"STRONG",{});var kTt=s(yFe);Cwr=r(kTt,"big_bird"),kTt.forEach(t),wwr=r(sRe," \u2014 "),MU=n(sRe,"A",{href:!0});var STt=s(MU);Awr=r(STt,"FlaxBigBirdForCausalLM"),STt.forEach(t),ywr=r(sRe," (BigBird model)"),sRe.forEach(t),Lwr=i(Oe),dE=n(Oe,"LI",{});var lRe=s(dE);LFe=n(lRe,"STRONG",{});var RTt=s(LFe);xwr=r(RTt,"electra"),RTt.forEach(t),$wr=r(lRe," \u2014 "),EU=n(lRe,"A",{href:!0});var BTt=s(EU);kwr=r(BTt,"FlaxElectraForCausalLM"),BTt.forEach(t),Swr=r(lRe," (ELECTRA model)"),lRe.forEach(t),Rwr=i(Oe),cE=n(Oe,"LI",{});var iRe=s(cE);xFe=n(iRe,"STRONG",{});var PTt=s(xFe);Bwr=r(PTt,"gpt2"),PTt.forEach(t),Pwr=r(iRe," \u2014 "),CU=n(iRe,"A",{href:!0});var ITt=s(CU);Iwr=r(ITt,"FlaxGPT2LMHeadModel"),ITt.forEach(t),qwr=r(iRe," (OpenAI GPT-2 model)"),iRe.forEach(t),Nwr=i(Oe),fE=n(Oe,"LI",{});var dRe=s(fE);$Fe=n(dRe,"STRONG",{});var qTt=s($Fe);jwr=r(qTt,"gpt_neo"),qTt.forEach(t),Dwr=r(dRe," \u2014 "),wU=n(dRe,"A",{href:!0});var NTt=s(wU);Gwr=r(NTt,"FlaxGPTNeoForCausalLM"),NTt.forEach(t),Owr=r(dRe," (GPT Neo model)"),dRe.forEach(t),Vwr=i(Oe),mE=n(Oe,"LI",{});var cRe=s(mE);kFe=n(cRe,"STRONG",{});var jTt=s(kFe);Xwr=r(jTt,"gptj"),jTt.forEach(t),zwr=r(cRe," \u2014 "),AU=n(cRe,"A",{href:!0});var DTt=s(AU);Qwr=r(DTt,"FlaxGPTJForCausalLM"),DTt.forEach(t),Wwr=r(cRe," (GPT-J model)"),cRe.forEach(t),Hwr=i(Oe),gE=n(Oe,"LI",{});var fRe=s(gE);SFe=n(fRe,"STRONG",{});var GTt=s(SFe);Uwr=r(GTt,"roberta"),GTt.forEach(t),Jwr=r(fRe," \u2014 "),yU=n(fRe,"A",{href:!0});var OTt=s(yU);Ywr=r(OTt,"FlaxRobertaForCausalLM"),OTt.forEach(t),Kwr=r(fRe," (RoBERTa model)"),fRe.forEach(t),Zwr=i(Oe),hE=n(Oe,"LI",{});var mRe=s(hE);RFe=n(mRe,"STRONG",{});var VTt=s(RFe);eAr=r(VTt,"xglm"),VTt.forEach(t),oAr=r(mRe," \u2014 "),LU=n(mRe,"A",{href:!0});var XTt=s(LU);rAr=r(XTt,"FlaxXGLMForCausalLM"),XTt.forEach(t),tAr=r(mRe," (XGLM model)"),mRe.forEach(t),Oe.forEach(t),aAr=i(Bl),T(pE.$$.fragment,Bl),Bl.forEach(t),Rl.forEach(t),fIe=i(f),Ec=n(f,"H2",{class:!0});var pNe=s(Ec);uE=n(pNe,"A",{id:!0,class:!0,href:!0});var zTt=s(uE);BFe=n(zTt,"SPAN",{});var QTt=s(BFe);T($8.$$.fragment,QTt),QTt.forEach(t),zTt.forEach(t),nAr=i(pNe),PFe=n(pNe,"SPAN",{});var WTt=s(PFe);sAr=r(WTt,"FlaxAutoModelForPreTraining"),WTt.forEach(t),pNe.forEach(t),mIe=i(f),mr=n(f,"DIV",{class:!0});var Pl=s(mr);T(k8.$$.fragment,Pl),lAr=i(Pl),Cc=n(Pl,"P",{});var WK=s(Cc);iAr=r(WK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xU=n(WK,"A",{href:!0});var HTt=s(xU);dAr=r(HTt,"from_pretrained()"),HTt.forEach(t),cAr=r(WK," class method or the "),$U=n(WK,"A",{href:!0});var UTt=s($U);fAr=r(UTt,"from_config()"),UTt.forEach(t),mAr=r(WK,` class
method.`),WK.forEach(t),gAr=i(Pl),S8=n(Pl,"P",{});var uNe=s(S8);hAr=r(uNe,"This class cannot be instantiated directly using "),IFe=n(uNe,"CODE",{});var JTt=s(IFe);pAr=r(JTt,"__init__()"),JTt.forEach(t),uAr=r(uNe," (throws an error)."),uNe.forEach(t),_Ar=i(Pl),Nt=n(Pl,"DIV",{class:!0});var aA=s(Nt);T(R8.$$.fragment,aA),bAr=i(aA),qFe=n(aA,"P",{});var YTt=s(qFe);vAr=r(YTt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),YTt.forEach(t),FAr=i(aA),wc=n(aA,"P",{});var HK=s(wc);TAr=r(HK,`Note:
Loading a model from its configuration file does `),NFe=n(HK,"STRONG",{});var KTt=s(NFe);MAr=r(KTt,"not"),KTt.forEach(t),EAr=r(HK,` load the model weights. It only affects the
model\u2019s configuration. Use `),kU=n(HK,"A",{href:!0});var ZTt=s(kU);CAr=r(ZTt,"from_pretrained()"),ZTt.forEach(t),wAr=r(HK," to load the model weights."),HK.forEach(t),AAr=i(aA),T(_E.$$.fragment,aA),aA.forEach(t),yAr=i(Pl),jr=n(Pl,"DIV",{class:!0});var Il=s(jr);T(B8.$$.fragment,Il),LAr=i(Il),jFe=n(Il,"P",{});var e7t=s(jFe);xAr=r(e7t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),e7t.forEach(t),$Ar=i(Il),fn=n(Il,"P",{});var nA=s(fn);kAr=r(nA,"The model class to instantiate is selected based on the "),DFe=n(nA,"CODE",{});var o7t=s(DFe);SAr=r(o7t,"model_type"),o7t.forEach(t),RAr=r(nA,` property of the config object (either
passed as an argument or loaded from `),GFe=n(nA,"CODE",{});var r7t=s(GFe);BAr=r(r7t,"pretrained_model_name_or_path"),r7t.forEach(t),PAr=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OFe=n(nA,"CODE",{});var t7t=s(OFe);IAr=r(t7t,"pretrained_model_name_or_path"),t7t.forEach(t),qAr=r(nA,":"),nA.forEach(t),NAr=i(Il),Ee=n(Il,"UL",{});var we=s(Ee);bE=n(we,"LI",{});var gRe=s(bE);VFe=n(gRe,"STRONG",{});var a7t=s(VFe);jAr=r(a7t,"albert"),a7t.forEach(t),DAr=r(gRe," \u2014 "),SU=n(gRe,"A",{href:!0});var n7t=s(SU);GAr=r(n7t,"FlaxAlbertForPreTraining"),n7t.forEach(t),OAr=r(gRe," (ALBERT model)"),gRe.forEach(t),VAr=i(we),vE=n(we,"LI",{});var hRe=s(vE);XFe=n(hRe,"STRONG",{});var s7t=s(XFe);XAr=r(s7t,"bart"),s7t.forEach(t),zAr=r(hRe," \u2014 "),RU=n(hRe,"A",{href:!0});var l7t=s(RU);QAr=r(l7t,"FlaxBartForConditionalGeneration"),l7t.forEach(t),WAr=r(hRe," (BART model)"),hRe.forEach(t),HAr=i(we),FE=n(we,"LI",{});var pRe=s(FE);zFe=n(pRe,"STRONG",{});var i7t=s(zFe);UAr=r(i7t,"bert"),i7t.forEach(t),JAr=r(pRe," \u2014 "),BU=n(pRe,"A",{href:!0});var d7t=s(BU);YAr=r(d7t,"FlaxBertForPreTraining"),d7t.forEach(t),KAr=r(pRe," (BERT model)"),pRe.forEach(t),ZAr=i(we),TE=n(we,"LI",{});var uRe=s(TE);QFe=n(uRe,"STRONG",{});var c7t=s(QFe);e0r=r(c7t,"big_bird"),c7t.forEach(t),o0r=r(uRe," \u2014 "),PU=n(uRe,"A",{href:!0});var f7t=s(PU);r0r=r(f7t,"FlaxBigBirdForPreTraining"),f7t.forEach(t),t0r=r(uRe," (BigBird model)"),uRe.forEach(t),a0r=i(we),ME=n(we,"LI",{});var _Re=s(ME);WFe=n(_Re,"STRONG",{});var m7t=s(WFe);n0r=r(m7t,"electra"),m7t.forEach(t),s0r=r(_Re," \u2014 "),IU=n(_Re,"A",{href:!0});var g7t=s(IU);l0r=r(g7t,"FlaxElectraForPreTraining"),g7t.forEach(t),i0r=r(_Re," (ELECTRA model)"),_Re.forEach(t),d0r=i(we),EE=n(we,"LI",{});var bRe=s(EE);HFe=n(bRe,"STRONG",{});var h7t=s(HFe);c0r=r(h7t,"mbart"),h7t.forEach(t),f0r=r(bRe," \u2014 "),qU=n(bRe,"A",{href:!0});var p7t=s(qU);m0r=r(p7t,"FlaxMBartForConditionalGeneration"),p7t.forEach(t),g0r=r(bRe," (mBART model)"),bRe.forEach(t),h0r=i(we),CE=n(we,"LI",{});var vRe=s(CE);UFe=n(vRe,"STRONG",{});var u7t=s(UFe);p0r=r(u7t,"mt5"),u7t.forEach(t),u0r=r(vRe," \u2014 "),NU=n(vRe,"A",{href:!0});var _7t=s(NU);_0r=r(_7t,"FlaxMT5ForConditionalGeneration"),_7t.forEach(t),b0r=r(vRe," (mT5 model)"),vRe.forEach(t),v0r=i(we),wE=n(we,"LI",{});var FRe=s(wE);JFe=n(FRe,"STRONG",{});var b7t=s(JFe);F0r=r(b7t,"roberta"),b7t.forEach(t),T0r=r(FRe," \u2014 "),jU=n(FRe,"A",{href:!0});var v7t=s(jU);M0r=r(v7t,"FlaxRobertaForMaskedLM"),v7t.forEach(t),E0r=r(FRe," (RoBERTa model)"),FRe.forEach(t),C0r=i(we),AE=n(we,"LI",{});var TRe=s(AE);YFe=n(TRe,"STRONG",{});var F7t=s(YFe);w0r=r(F7t,"roformer"),F7t.forEach(t),A0r=r(TRe," \u2014 "),DU=n(TRe,"A",{href:!0});var T7t=s(DU);y0r=r(T7t,"FlaxRoFormerForMaskedLM"),T7t.forEach(t),L0r=r(TRe," (RoFormer model)"),TRe.forEach(t),x0r=i(we),yE=n(we,"LI",{});var MRe=s(yE);KFe=n(MRe,"STRONG",{});var M7t=s(KFe);$0r=r(M7t,"t5"),M7t.forEach(t),k0r=r(MRe," \u2014 "),GU=n(MRe,"A",{href:!0});var E7t=s(GU);S0r=r(E7t,"FlaxT5ForConditionalGeneration"),E7t.forEach(t),R0r=r(MRe," (T5 model)"),MRe.forEach(t),B0r=i(we),LE=n(we,"LI",{});var ERe=s(LE);ZFe=n(ERe,"STRONG",{});var C7t=s(ZFe);P0r=r(C7t,"wav2vec2"),C7t.forEach(t),I0r=r(ERe," \u2014 "),OU=n(ERe,"A",{href:!0});var w7t=s(OU);q0r=r(w7t,"FlaxWav2Vec2ForPreTraining"),w7t.forEach(t),N0r=r(ERe," (Wav2Vec2 model)"),ERe.forEach(t),j0r=i(we),xE=n(we,"LI",{});var CRe=s(xE);e6e=n(CRe,"STRONG",{});var A7t=s(e6e);D0r=r(A7t,"xlm-roberta"),A7t.forEach(t),G0r=r(CRe," \u2014 "),VU=n(CRe,"A",{href:!0});var y7t=s(VU);O0r=r(y7t,"FlaxXLMRobertaForMaskedLM"),y7t.forEach(t),V0r=r(CRe," (XLM-RoBERTa model)"),CRe.forEach(t),we.forEach(t),X0r=i(Il),T($E.$$.fragment,Il),Il.forEach(t),Pl.forEach(t),gIe=i(f),Ac=n(f,"H2",{class:!0});var _Ne=s(Ac);kE=n(_Ne,"A",{id:!0,class:!0,href:!0});var L7t=s(kE);o6e=n(L7t,"SPAN",{});var x7t=s(o6e);T(P8.$$.fragment,x7t),x7t.forEach(t),L7t.forEach(t),z0r=i(_Ne),r6e=n(_Ne,"SPAN",{});var $7t=s(r6e);Q0r=r($7t,"FlaxAutoModelForMaskedLM"),$7t.forEach(t),_Ne.forEach(t),hIe=i(f),gr=n(f,"DIV",{class:!0});var ql=s(gr);T(I8.$$.fragment,ql),W0r=i(ql),yc=n(ql,"P",{});var UK=s(yc);H0r=r(UK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),XU=n(UK,"A",{href:!0});var k7t=s(XU);U0r=r(k7t,"from_pretrained()"),k7t.forEach(t),J0r=r(UK," class method or the "),zU=n(UK,"A",{href:!0});var S7t=s(zU);Y0r=r(S7t,"from_config()"),S7t.forEach(t),K0r=r(UK,` class
method.`),UK.forEach(t),Z0r=i(ql),q8=n(ql,"P",{});var bNe=s(q8);eyr=r(bNe,"This class cannot be instantiated directly using "),t6e=n(bNe,"CODE",{});var R7t=s(t6e);oyr=r(R7t,"__init__()"),R7t.forEach(t),ryr=r(bNe," (throws an error)."),bNe.forEach(t),tyr=i(ql),jt=n(ql,"DIV",{class:!0});var sA=s(jt);T(N8.$$.fragment,sA),ayr=i(sA),a6e=n(sA,"P",{});var B7t=s(a6e);nyr=r(B7t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),B7t.forEach(t),syr=i(sA),Lc=n(sA,"P",{});var JK=s(Lc);lyr=r(JK,`Note:
Loading a model from its configuration file does `),n6e=n(JK,"STRONG",{});var P7t=s(n6e);iyr=r(P7t,"not"),P7t.forEach(t),dyr=r(JK,` load the model weights. It only affects the
model\u2019s configuration. Use `),QU=n(JK,"A",{href:!0});var I7t=s(QU);cyr=r(I7t,"from_pretrained()"),I7t.forEach(t),fyr=r(JK," to load the model weights."),JK.forEach(t),myr=i(sA),T(SE.$$.fragment,sA),sA.forEach(t),gyr=i(ql),Dr=n(ql,"DIV",{class:!0});var Nl=s(Dr);T(j8.$$.fragment,Nl),hyr=i(Nl),s6e=n(Nl,"P",{});var q7t=s(s6e);pyr=r(q7t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),q7t.forEach(t),uyr=i(Nl),mn=n(Nl,"P",{});var lA=s(mn);_yr=r(lA,"The model class to instantiate is selected based on the "),l6e=n(lA,"CODE",{});var N7t=s(l6e);byr=r(N7t,"model_type"),N7t.forEach(t),vyr=r(lA,` property of the config object (either
passed as an argument or loaded from `),i6e=n(lA,"CODE",{});var j7t=s(i6e);Fyr=r(j7t,"pretrained_model_name_or_path"),j7t.forEach(t),Tyr=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d6e=n(lA,"CODE",{});var D7t=s(d6e);Myr=r(D7t,"pretrained_model_name_or_path"),D7t.forEach(t),Eyr=r(lA,":"),lA.forEach(t),Cyr=i(Nl),Le=n(Nl,"UL",{});var Be=s(Le);RE=n(Be,"LI",{});var wRe=s(RE);c6e=n(wRe,"STRONG",{});var G7t=s(c6e);wyr=r(G7t,"albert"),G7t.forEach(t),Ayr=r(wRe," \u2014 "),WU=n(wRe,"A",{href:!0});var O7t=s(WU);yyr=r(O7t,"FlaxAlbertForMaskedLM"),O7t.forEach(t),Lyr=r(wRe," (ALBERT model)"),wRe.forEach(t),xyr=i(Be),BE=n(Be,"LI",{});var ARe=s(BE);f6e=n(ARe,"STRONG",{});var V7t=s(f6e);$yr=r(V7t,"bart"),V7t.forEach(t),kyr=r(ARe," \u2014 "),HU=n(ARe,"A",{href:!0});var X7t=s(HU);Syr=r(X7t,"FlaxBartForConditionalGeneration"),X7t.forEach(t),Ryr=r(ARe," (BART model)"),ARe.forEach(t),Byr=i(Be),PE=n(Be,"LI",{});var yRe=s(PE);m6e=n(yRe,"STRONG",{});var z7t=s(m6e);Pyr=r(z7t,"bert"),z7t.forEach(t),Iyr=r(yRe," \u2014 "),UU=n(yRe,"A",{href:!0});var Q7t=s(UU);qyr=r(Q7t,"FlaxBertForMaskedLM"),Q7t.forEach(t),Nyr=r(yRe," (BERT model)"),yRe.forEach(t),jyr=i(Be),IE=n(Be,"LI",{});var LRe=s(IE);g6e=n(LRe,"STRONG",{});var W7t=s(g6e);Dyr=r(W7t,"big_bird"),W7t.forEach(t),Gyr=r(LRe," \u2014 "),JU=n(LRe,"A",{href:!0});var H7t=s(JU);Oyr=r(H7t,"FlaxBigBirdForMaskedLM"),H7t.forEach(t),Vyr=r(LRe," (BigBird model)"),LRe.forEach(t),Xyr=i(Be),qE=n(Be,"LI",{});var xRe=s(qE);h6e=n(xRe,"STRONG",{});var U7t=s(h6e);zyr=r(U7t,"distilbert"),U7t.forEach(t),Qyr=r(xRe," \u2014 "),YU=n(xRe,"A",{href:!0});var J7t=s(YU);Wyr=r(J7t,"FlaxDistilBertForMaskedLM"),J7t.forEach(t),Hyr=r(xRe," (DistilBERT model)"),xRe.forEach(t),Uyr=i(Be),NE=n(Be,"LI",{});var $Re=s(NE);p6e=n($Re,"STRONG",{});var Y7t=s(p6e);Jyr=r(Y7t,"electra"),Y7t.forEach(t),Yyr=r($Re," \u2014 "),KU=n($Re,"A",{href:!0});var K7t=s(KU);Kyr=r(K7t,"FlaxElectraForMaskedLM"),K7t.forEach(t),Zyr=r($Re," (ELECTRA model)"),$Re.forEach(t),eLr=i(Be),jE=n(Be,"LI",{});var kRe=s(jE);u6e=n(kRe,"STRONG",{});var Z7t=s(u6e);oLr=r(Z7t,"mbart"),Z7t.forEach(t),rLr=r(kRe," \u2014 "),ZU=n(kRe,"A",{href:!0});var eMt=s(ZU);tLr=r(eMt,"FlaxMBartForConditionalGeneration"),eMt.forEach(t),aLr=r(kRe," (mBART model)"),kRe.forEach(t),nLr=i(Be),DE=n(Be,"LI",{});var SRe=s(DE);_6e=n(SRe,"STRONG",{});var oMt=s(_6e);sLr=r(oMt,"roberta"),oMt.forEach(t),lLr=r(SRe," \u2014 "),eJ=n(SRe,"A",{href:!0});var rMt=s(eJ);iLr=r(rMt,"FlaxRobertaForMaskedLM"),rMt.forEach(t),dLr=r(SRe," (RoBERTa model)"),SRe.forEach(t),cLr=i(Be),GE=n(Be,"LI",{});var RRe=s(GE);b6e=n(RRe,"STRONG",{});var tMt=s(b6e);fLr=r(tMt,"roformer"),tMt.forEach(t),mLr=r(RRe," \u2014 "),oJ=n(RRe,"A",{href:!0});var aMt=s(oJ);gLr=r(aMt,"FlaxRoFormerForMaskedLM"),aMt.forEach(t),hLr=r(RRe," (RoFormer model)"),RRe.forEach(t),pLr=i(Be),OE=n(Be,"LI",{});var BRe=s(OE);v6e=n(BRe,"STRONG",{});var nMt=s(v6e);uLr=r(nMt,"xlm-roberta"),nMt.forEach(t),_Lr=r(BRe," \u2014 "),rJ=n(BRe,"A",{href:!0});var sMt=s(rJ);bLr=r(sMt,"FlaxXLMRobertaForMaskedLM"),sMt.forEach(t),vLr=r(BRe," (XLM-RoBERTa model)"),BRe.forEach(t),Be.forEach(t),FLr=i(Nl),T(VE.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),pIe=i(f),xc=n(f,"H2",{class:!0});var vNe=s(xc);XE=n(vNe,"A",{id:!0,class:!0,href:!0});var lMt=s(XE);F6e=n(lMt,"SPAN",{});var iMt=s(F6e);T(D8.$$.fragment,iMt),iMt.forEach(t),lMt.forEach(t),TLr=i(vNe),T6e=n(vNe,"SPAN",{});var dMt=s(T6e);MLr=r(dMt,"FlaxAutoModelForSeq2SeqLM"),dMt.forEach(t),vNe.forEach(t),uIe=i(f),hr=n(f,"DIV",{class:!0});var jl=s(hr);T(G8.$$.fragment,jl),ELr=i(jl),$c=n(jl,"P",{});var YK=s($c);CLr=r(YK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),tJ=n(YK,"A",{href:!0});var cMt=s(tJ);wLr=r(cMt,"from_pretrained()"),cMt.forEach(t),ALr=r(YK," class method or the "),aJ=n(YK,"A",{href:!0});var fMt=s(aJ);yLr=r(fMt,"from_config()"),fMt.forEach(t),LLr=r(YK,` class
method.`),YK.forEach(t),xLr=i(jl),O8=n(jl,"P",{});var FNe=s(O8);$Lr=r(FNe,"This class cannot be instantiated directly using "),M6e=n(FNe,"CODE",{});var mMt=s(M6e);kLr=r(mMt,"__init__()"),mMt.forEach(t),SLr=r(FNe," (throws an error)."),FNe.forEach(t),RLr=i(jl),Dt=n(jl,"DIV",{class:!0});var iA=s(Dt);T(V8.$$.fragment,iA),BLr=i(iA),E6e=n(iA,"P",{});var gMt=s(E6e);PLr=r(gMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),gMt.forEach(t),ILr=i(iA),kc=n(iA,"P",{});var KK=s(kc);qLr=r(KK,`Note:
Loading a model from its configuration file does `),C6e=n(KK,"STRONG",{});var hMt=s(C6e);NLr=r(hMt,"not"),hMt.forEach(t),jLr=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),nJ=n(KK,"A",{href:!0});var pMt=s(nJ);DLr=r(pMt,"from_pretrained()"),pMt.forEach(t),GLr=r(KK," to load the model weights."),KK.forEach(t),OLr=i(iA),T(zE.$$.fragment,iA),iA.forEach(t),VLr=i(jl),Gr=n(jl,"DIV",{class:!0});var Dl=s(Gr);T(X8.$$.fragment,Dl),XLr=i(Dl),w6e=n(Dl,"P",{});var uMt=s(w6e);zLr=r(uMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),uMt.forEach(t),QLr=i(Dl),gn=n(Dl,"P",{});var dA=s(gn);WLr=r(dA,"The model class to instantiate is selected based on the "),A6e=n(dA,"CODE",{});var _Mt=s(A6e);HLr=r(_Mt,"model_type"),_Mt.forEach(t),ULr=r(dA,` property of the config object (either
passed as an argument or loaded from `),y6e=n(dA,"CODE",{});var bMt=s(y6e);JLr=r(bMt,"pretrained_model_name_or_path"),bMt.forEach(t),YLr=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L6e=n(dA,"CODE",{});var vMt=s(L6e);KLr=r(vMt,"pretrained_model_name_or_path"),vMt.forEach(t),ZLr=r(dA,":"),dA.forEach(t),e8r=i(Dl),Se=n(Dl,"UL",{});var Ve=s(Se);QE=n(Ve,"LI",{});var PRe=s(QE);x6e=n(PRe,"STRONG",{});var FMt=s(x6e);o8r=r(FMt,"bart"),FMt.forEach(t),r8r=r(PRe," \u2014 "),sJ=n(PRe,"A",{href:!0});var TMt=s(sJ);t8r=r(TMt,"FlaxBartForConditionalGeneration"),TMt.forEach(t),a8r=r(PRe," (BART model)"),PRe.forEach(t),n8r=i(Ve),WE=n(Ve,"LI",{});var IRe=s(WE);$6e=n(IRe,"STRONG",{});var MMt=s($6e);s8r=r(MMt,"blenderbot"),MMt.forEach(t),l8r=r(IRe," \u2014 "),lJ=n(IRe,"A",{href:!0});var EMt=s(lJ);i8r=r(EMt,"FlaxBlenderbotForConditionalGeneration"),EMt.forEach(t),d8r=r(IRe," (Blenderbot model)"),IRe.forEach(t),c8r=i(Ve),HE=n(Ve,"LI",{});var qRe=s(HE);k6e=n(qRe,"STRONG",{});var CMt=s(k6e);f8r=r(CMt,"blenderbot-small"),CMt.forEach(t),m8r=r(qRe," \u2014 "),iJ=n(qRe,"A",{href:!0});var wMt=s(iJ);g8r=r(wMt,"FlaxBlenderbotSmallForConditionalGeneration"),wMt.forEach(t),h8r=r(qRe," (BlenderbotSmall model)"),qRe.forEach(t),p8r=i(Ve),UE=n(Ve,"LI",{});var NRe=s(UE);S6e=n(NRe,"STRONG",{});var AMt=s(S6e);u8r=r(AMt,"encoder-decoder"),AMt.forEach(t),_8r=r(NRe," \u2014 "),dJ=n(NRe,"A",{href:!0});var yMt=s(dJ);b8r=r(yMt,"FlaxEncoderDecoderModel"),yMt.forEach(t),v8r=r(NRe," (Encoder decoder model)"),NRe.forEach(t),F8r=i(Ve),JE=n(Ve,"LI",{});var jRe=s(JE);R6e=n(jRe,"STRONG",{});var LMt=s(R6e);T8r=r(LMt,"marian"),LMt.forEach(t),M8r=r(jRe," \u2014 "),cJ=n(jRe,"A",{href:!0});var xMt=s(cJ);E8r=r(xMt,"FlaxMarianMTModel"),xMt.forEach(t),C8r=r(jRe," (Marian model)"),jRe.forEach(t),w8r=i(Ve),YE=n(Ve,"LI",{});var DRe=s(YE);B6e=n(DRe,"STRONG",{});var $Mt=s(B6e);A8r=r($Mt,"mbart"),$Mt.forEach(t),y8r=r(DRe," \u2014 "),fJ=n(DRe,"A",{href:!0});var kMt=s(fJ);L8r=r(kMt,"FlaxMBartForConditionalGeneration"),kMt.forEach(t),x8r=r(DRe," (mBART model)"),DRe.forEach(t),$8r=i(Ve),KE=n(Ve,"LI",{});var GRe=s(KE);P6e=n(GRe,"STRONG",{});var SMt=s(P6e);k8r=r(SMt,"mt5"),SMt.forEach(t),S8r=r(GRe," \u2014 "),mJ=n(GRe,"A",{href:!0});var RMt=s(mJ);R8r=r(RMt,"FlaxMT5ForConditionalGeneration"),RMt.forEach(t),B8r=r(GRe," (mT5 model)"),GRe.forEach(t),P8r=i(Ve),ZE=n(Ve,"LI",{});var ORe=s(ZE);I6e=n(ORe,"STRONG",{});var BMt=s(I6e);I8r=r(BMt,"pegasus"),BMt.forEach(t),q8r=r(ORe," \u2014 "),gJ=n(ORe,"A",{href:!0});var PMt=s(gJ);N8r=r(PMt,"FlaxPegasusForConditionalGeneration"),PMt.forEach(t),j8r=r(ORe," (Pegasus model)"),ORe.forEach(t),D8r=i(Ve),eC=n(Ve,"LI",{});var VRe=s(eC);q6e=n(VRe,"STRONG",{});var IMt=s(q6e);G8r=r(IMt,"t5"),IMt.forEach(t),O8r=r(VRe," \u2014 "),hJ=n(VRe,"A",{href:!0});var qMt=s(hJ);V8r=r(qMt,"FlaxT5ForConditionalGeneration"),qMt.forEach(t),X8r=r(VRe," (T5 model)"),VRe.forEach(t),Ve.forEach(t),z8r=i(Dl),T(oC.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),_Ie=i(f),Sc=n(f,"H2",{class:!0});var TNe=s(Sc);rC=n(TNe,"A",{id:!0,class:!0,href:!0});var NMt=s(rC);N6e=n(NMt,"SPAN",{});var jMt=s(N6e);T(z8.$$.fragment,jMt),jMt.forEach(t),NMt.forEach(t),Q8r=i(TNe),j6e=n(TNe,"SPAN",{});var DMt=s(j6e);W8r=r(DMt,"FlaxAutoModelForSequenceClassification"),DMt.forEach(t),TNe.forEach(t),bIe=i(f),pr=n(f,"DIV",{class:!0});var Gl=s(pr);T(Q8.$$.fragment,Gl),H8r=i(Gl),Rc=n(Gl,"P",{});var ZK=s(Rc);U8r=r(ZK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),pJ=n(ZK,"A",{href:!0});var GMt=s(pJ);J8r=r(GMt,"from_pretrained()"),GMt.forEach(t),Y8r=r(ZK," class method or the "),uJ=n(ZK,"A",{href:!0});var OMt=s(uJ);K8r=r(OMt,"from_config()"),OMt.forEach(t),Z8r=r(ZK,` class
method.`),ZK.forEach(t),exr=i(Gl),W8=n(Gl,"P",{});var MNe=s(W8);oxr=r(MNe,"This class cannot be instantiated directly using "),D6e=n(MNe,"CODE",{});var VMt=s(D6e);rxr=r(VMt,"__init__()"),VMt.forEach(t),txr=r(MNe," (throws an error)."),MNe.forEach(t),axr=i(Gl),Gt=n(Gl,"DIV",{class:!0});var cA=s(Gt);T(H8.$$.fragment,cA),nxr=i(cA),G6e=n(cA,"P",{});var XMt=s(G6e);sxr=r(XMt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),XMt.forEach(t),lxr=i(cA),Bc=n(cA,"P",{});var eZ=s(Bc);ixr=r(eZ,`Note:
Loading a model from its configuration file does `),O6e=n(eZ,"STRONG",{});var zMt=s(O6e);dxr=r(zMt,"not"),zMt.forEach(t),cxr=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_J=n(eZ,"A",{href:!0});var QMt=s(_J);fxr=r(QMt,"from_pretrained()"),QMt.forEach(t),mxr=r(eZ," to load the model weights."),eZ.forEach(t),gxr=i(cA),T(tC.$$.fragment,cA),cA.forEach(t),hxr=i(Gl),Or=n(Gl,"DIV",{class:!0});var Ol=s(Or);T(U8.$$.fragment,Ol),pxr=i(Ol),V6e=n(Ol,"P",{});var WMt=s(V6e);uxr=r(WMt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),WMt.forEach(t),_xr=i(Ol),hn=n(Ol,"P",{});var fA=s(hn);bxr=r(fA,"The model class to instantiate is selected based on the "),X6e=n(fA,"CODE",{});var HMt=s(X6e);vxr=r(HMt,"model_type"),HMt.forEach(t),Fxr=r(fA,` property of the config object (either
passed as an argument or loaded from `),z6e=n(fA,"CODE",{});var UMt=s(z6e);Txr=r(UMt,"pretrained_model_name_or_path"),UMt.forEach(t),Mxr=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q6e=n(fA,"CODE",{});var JMt=s(Q6e);Exr=r(JMt,"pretrained_model_name_or_path"),JMt.forEach(t),Cxr=r(fA,":"),fA.forEach(t),wxr=i(Ol),xe=n(Ol,"UL",{});var Pe=s(xe);aC=n(Pe,"LI",{});var XRe=s(aC);W6e=n(XRe,"STRONG",{});var YMt=s(W6e);Axr=r(YMt,"albert"),YMt.forEach(t),yxr=r(XRe," \u2014 "),bJ=n(XRe,"A",{href:!0});var KMt=s(bJ);Lxr=r(KMt,"FlaxAlbertForSequenceClassification"),KMt.forEach(t),xxr=r(XRe," (ALBERT model)"),XRe.forEach(t),$xr=i(Pe),nC=n(Pe,"LI",{});var zRe=s(nC);H6e=n(zRe,"STRONG",{});var ZMt=s(H6e);kxr=r(ZMt,"bart"),ZMt.forEach(t),Sxr=r(zRe," \u2014 "),vJ=n(zRe,"A",{href:!0});var e4t=s(vJ);Rxr=r(e4t,"FlaxBartForSequenceClassification"),e4t.forEach(t),Bxr=r(zRe," (BART model)"),zRe.forEach(t),Pxr=i(Pe),sC=n(Pe,"LI",{});var QRe=s(sC);U6e=n(QRe,"STRONG",{});var o4t=s(U6e);Ixr=r(o4t,"bert"),o4t.forEach(t),qxr=r(QRe," \u2014 "),FJ=n(QRe,"A",{href:!0});var r4t=s(FJ);Nxr=r(r4t,"FlaxBertForSequenceClassification"),r4t.forEach(t),jxr=r(QRe," (BERT model)"),QRe.forEach(t),Dxr=i(Pe),lC=n(Pe,"LI",{});var WRe=s(lC);J6e=n(WRe,"STRONG",{});var t4t=s(J6e);Gxr=r(t4t,"big_bird"),t4t.forEach(t),Oxr=r(WRe," \u2014 "),TJ=n(WRe,"A",{href:!0});var a4t=s(TJ);Vxr=r(a4t,"FlaxBigBirdForSequenceClassification"),a4t.forEach(t),Xxr=r(WRe," (BigBird model)"),WRe.forEach(t),zxr=i(Pe),iC=n(Pe,"LI",{});var HRe=s(iC);Y6e=n(HRe,"STRONG",{});var n4t=s(Y6e);Qxr=r(n4t,"distilbert"),n4t.forEach(t),Wxr=r(HRe," \u2014 "),MJ=n(HRe,"A",{href:!0});var s4t=s(MJ);Hxr=r(s4t,"FlaxDistilBertForSequenceClassification"),s4t.forEach(t),Uxr=r(HRe," (DistilBERT model)"),HRe.forEach(t),Jxr=i(Pe),dC=n(Pe,"LI",{});var URe=s(dC);K6e=n(URe,"STRONG",{});var l4t=s(K6e);Yxr=r(l4t,"electra"),l4t.forEach(t),Kxr=r(URe," \u2014 "),EJ=n(URe,"A",{href:!0});var i4t=s(EJ);Zxr=r(i4t,"FlaxElectraForSequenceClassification"),i4t.forEach(t),e9r=r(URe," (ELECTRA model)"),URe.forEach(t),o9r=i(Pe),cC=n(Pe,"LI",{});var JRe=s(cC);Z6e=n(JRe,"STRONG",{});var d4t=s(Z6e);r9r=r(d4t,"mbart"),d4t.forEach(t),t9r=r(JRe," \u2014 "),CJ=n(JRe,"A",{href:!0});var c4t=s(CJ);a9r=r(c4t,"FlaxMBartForSequenceClassification"),c4t.forEach(t),n9r=r(JRe," (mBART model)"),JRe.forEach(t),s9r=i(Pe),fC=n(Pe,"LI",{});var YRe=s(fC);eTe=n(YRe,"STRONG",{});var f4t=s(eTe);l9r=r(f4t,"roberta"),f4t.forEach(t),i9r=r(YRe," \u2014 "),wJ=n(YRe,"A",{href:!0});var m4t=s(wJ);d9r=r(m4t,"FlaxRobertaForSequenceClassification"),m4t.forEach(t),c9r=r(YRe," (RoBERTa model)"),YRe.forEach(t),f9r=i(Pe),mC=n(Pe,"LI",{});var KRe=s(mC);oTe=n(KRe,"STRONG",{});var g4t=s(oTe);m9r=r(g4t,"roformer"),g4t.forEach(t),g9r=r(KRe," \u2014 "),AJ=n(KRe,"A",{href:!0});var h4t=s(AJ);h9r=r(h4t,"FlaxRoFormerForSequenceClassification"),h4t.forEach(t),p9r=r(KRe," (RoFormer model)"),KRe.forEach(t),u9r=i(Pe),gC=n(Pe,"LI",{});var ZRe=s(gC);rTe=n(ZRe,"STRONG",{});var p4t=s(rTe);_9r=r(p4t,"xlm-roberta"),p4t.forEach(t),b9r=r(ZRe," \u2014 "),yJ=n(ZRe,"A",{href:!0});var u4t=s(yJ);v9r=r(u4t,"FlaxXLMRobertaForSequenceClassification"),u4t.forEach(t),F9r=r(ZRe," (XLM-RoBERTa model)"),ZRe.forEach(t),Pe.forEach(t),T9r=i(Ol),T(hC.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),vIe=i(f),Pc=n(f,"H2",{class:!0});var ENe=s(Pc);pC=n(ENe,"A",{id:!0,class:!0,href:!0});var _4t=s(pC);tTe=n(_4t,"SPAN",{});var b4t=s(tTe);T(J8.$$.fragment,b4t),b4t.forEach(t),_4t.forEach(t),M9r=i(ENe),aTe=n(ENe,"SPAN",{});var v4t=s(aTe);E9r=r(v4t,"FlaxAutoModelForQuestionAnswering"),v4t.forEach(t),ENe.forEach(t),FIe=i(f),ur=n(f,"DIV",{class:!0});var Vl=s(ur);T(Y8.$$.fragment,Vl),C9r=i(Vl),Ic=n(Vl,"P",{});var oZ=s(Ic);w9r=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),LJ=n(oZ,"A",{href:!0});var F4t=s(LJ);A9r=r(F4t,"from_pretrained()"),F4t.forEach(t),y9r=r(oZ," class method or the "),xJ=n(oZ,"A",{href:!0});var T4t=s(xJ);L9r=r(T4t,"from_config()"),T4t.forEach(t),x9r=r(oZ,` class
method.`),oZ.forEach(t),$9r=i(Vl),K8=n(Vl,"P",{});var CNe=s(K8);k9r=r(CNe,"This class cannot be instantiated directly using "),nTe=n(CNe,"CODE",{});var M4t=s(nTe);S9r=r(M4t,"__init__()"),M4t.forEach(t),R9r=r(CNe," (throws an error)."),CNe.forEach(t),B9r=i(Vl),Ot=n(Vl,"DIV",{class:!0});var mA=s(Ot);T(Z8.$$.fragment,mA),P9r=i(mA),sTe=n(mA,"P",{});var E4t=s(sTe);I9r=r(E4t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),E4t.forEach(t),q9r=i(mA),qc=n(mA,"P",{});var rZ=s(qc);N9r=r(rZ,`Note:
Loading a model from its configuration file does `),lTe=n(rZ,"STRONG",{});var C4t=s(lTe);j9r=r(C4t,"not"),C4t.forEach(t),D9r=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$J=n(rZ,"A",{href:!0});var w4t=s($J);G9r=r(w4t,"from_pretrained()"),w4t.forEach(t),O9r=r(rZ," to load the model weights."),rZ.forEach(t),V9r=i(mA),T(uC.$$.fragment,mA),mA.forEach(t),X9r=i(Vl),Vr=n(Vl,"DIV",{class:!0});var Xl=s(Vr);T(ex.$$.fragment,Xl),z9r=i(Xl),iTe=n(Xl,"P",{});var A4t=s(iTe);Q9r=r(A4t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),A4t.forEach(t),W9r=i(Xl),pn=n(Xl,"P",{});var gA=s(pn);H9r=r(gA,"The model class to instantiate is selected based on the "),dTe=n(gA,"CODE",{});var y4t=s(dTe);U9r=r(y4t,"model_type"),y4t.forEach(t),J9r=r(gA,` property of the config object (either
passed as an argument or loaded from `),cTe=n(gA,"CODE",{});var L4t=s(cTe);Y9r=r(L4t,"pretrained_model_name_or_path"),L4t.forEach(t),K9r=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fTe=n(gA,"CODE",{});var x4t=s(fTe);Z9r=r(x4t,"pretrained_model_name_or_path"),x4t.forEach(t),e$r=r(gA,":"),gA.forEach(t),o$r=i(Xl),$e=n(Xl,"UL",{});var Ie=s($e);_C=n(Ie,"LI",{});var eBe=s(_C);mTe=n(eBe,"STRONG",{});var $4t=s(mTe);r$r=r($4t,"albert"),$4t.forEach(t),t$r=r(eBe," \u2014 "),kJ=n(eBe,"A",{href:!0});var k4t=s(kJ);a$r=r(k4t,"FlaxAlbertForQuestionAnswering"),k4t.forEach(t),n$r=r(eBe," (ALBERT model)"),eBe.forEach(t),s$r=i(Ie),bC=n(Ie,"LI",{});var oBe=s(bC);gTe=n(oBe,"STRONG",{});var S4t=s(gTe);l$r=r(S4t,"bart"),S4t.forEach(t),i$r=r(oBe," \u2014 "),SJ=n(oBe,"A",{href:!0});var R4t=s(SJ);d$r=r(R4t,"FlaxBartForQuestionAnswering"),R4t.forEach(t),c$r=r(oBe," (BART model)"),oBe.forEach(t),f$r=i(Ie),vC=n(Ie,"LI",{});var rBe=s(vC);hTe=n(rBe,"STRONG",{});var B4t=s(hTe);m$r=r(B4t,"bert"),B4t.forEach(t),g$r=r(rBe," \u2014 "),RJ=n(rBe,"A",{href:!0});var P4t=s(RJ);h$r=r(P4t,"FlaxBertForQuestionAnswering"),P4t.forEach(t),p$r=r(rBe," (BERT model)"),rBe.forEach(t),u$r=i(Ie),FC=n(Ie,"LI",{});var tBe=s(FC);pTe=n(tBe,"STRONG",{});var I4t=s(pTe);_$r=r(I4t,"big_bird"),I4t.forEach(t),b$r=r(tBe," \u2014 "),BJ=n(tBe,"A",{href:!0});var q4t=s(BJ);v$r=r(q4t,"FlaxBigBirdForQuestionAnswering"),q4t.forEach(t),F$r=r(tBe," (BigBird model)"),tBe.forEach(t),T$r=i(Ie),TC=n(Ie,"LI",{});var aBe=s(TC);uTe=n(aBe,"STRONG",{});var N4t=s(uTe);M$r=r(N4t,"distilbert"),N4t.forEach(t),E$r=r(aBe," \u2014 "),PJ=n(aBe,"A",{href:!0});var j4t=s(PJ);C$r=r(j4t,"FlaxDistilBertForQuestionAnswering"),j4t.forEach(t),w$r=r(aBe," (DistilBERT model)"),aBe.forEach(t),A$r=i(Ie),MC=n(Ie,"LI",{});var nBe=s(MC);_Te=n(nBe,"STRONG",{});var D4t=s(_Te);y$r=r(D4t,"electra"),D4t.forEach(t),L$r=r(nBe," \u2014 "),IJ=n(nBe,"A",{href:!0});var G4t=s(IJ);x$r=r(G4t,"FlaxElectraForQuestionAnswering"),G4t.forEach(t),$$r=r(nBe," (ELECTRA model)"),nBe.forEach(t),k$r=i(Ie),EC=n(Ie,"LI",{});var sBe=s(EC);bTe=n(sBe,"STRONG",{});var O4t=s(bTe);S$r=r(O4t,"mbart"),O4t.forEach(t),R$r=r(sBe," \u2014 "),qJ=n(sBe,"A",{href:!0});var V4t=s(qJ);B$r=r(V4t,"FlaxMBartForQuestionAnswering"),V4t.forEach(t),P$r=r(sBe," (mBART model)"),sBe.forEach(t),I$r=i(Ie),CC=n(Ie,"LI",{});var lBe=s(CC);vTe=n(lBe,"STRONG",{});var X4t=s(vTe);q$r=r(X4t,"roberta"),X4t.forEach(t),N$r=r(lBe," \u2014 "),NJ=n(lBe,"A",{href:!0});var z4t=s(NJ);j$r=r(z4t,"FlaxRobertaForQuestionAnswering"),z4t.forEach(t),D$r=r(lBe," (RoBERTa model)"),lBe.forEach(t),G$r=i(Ie),wC=n(Ie,"LI",{});var iBe=s(wC);FTe=n(iBe,"STRONG",{});var Q4t=s(FTe);O$r=r(Q4t,"roformer"),Q4t.forEach(t),V$r=r(iBe," \u2014 "),jJ=n(iBe,"A",{href:!0});var W4t=s(jJ);X$r=r(W4t,"FlaxRoFormerForQuestionAnswering"),W4t.forEach(t),z$r=r(iBe," (RoFormer model)"),iBe.forEach(t),Q$r=i(Ie),AC=n(Ie,"LI",{});var dBe=s(AC);TTe=n(dBe,"STRONG",{});var H4t=s(TTe);W$r=r(H4t,"xlm-roberta"),H4t.forEach(t),H$r=r(dBe," \u2014 "),DJ=n(dBe,"A",{href:!0});var U4t=s(DJ);U$r=r(U4t,"FlaxXLMRobertaForQuestionAnswering"),U4t.forEach(t),J$r=r(dBe," (XLM-RoBERTa model)"),dBe.forEach(t),Ie.forEach(t),Y$r=i(Xl),T(yC.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),TIe=i(f),Nc=n(f,"H2",{class:!0});var wNe=s(Nc);LC=n(wNe,"A",{id:!0,class:!0,href:!0});var J4t=s(LC);MTe=n(J4t,"SPAN",{});var Y4t=s(MTe);T(ox.$$.fragment,Y4t),Y4t.forEach(t),J4t.forEach(t),K$r=i(wNe),ETe=n(wNe,"SPAN",{});var K4t=s(ETe);Z$r=r(K4t,"FlaxAutoModelForTokenClassification"),K4t.forEach(t),wNe.forEach(t),MIe=i(f),_r=n(f,"DIV",{class:!0});var zl=s(_r);T(rx.$$.fragment,zl),ekr=i(zl),jc=n(zl,"P",{});var tZ=s(jc);okr=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),GJ=n(tZ,"A",{href:!0});var Z4t=s(GJ);rkr=r(Z4t,"from_pretrained()"),Z4t.forEach(t),tkr=r(tZ," class method or the "),OJ=n(tZ,"A",{href:!0});var eEt=s(OJ);akr=r(eEt,"from_config()"),eEt.forEach(t),nkr=r(tZ,` class
method.`),tZ.forEach(t),skr=i(zl),tx=n(zl,"P",{});var ANe=s(tx);lkr=r(ANe,"This class cannot be instantiated directly using "),CTe=n(ANe,"CODE",{});var oEt=s(CTe);ikr=r(oEt,"__init__()"),oEt.forEach(t),dkr=r(ANe," (throws an error)."),ANe.forEach(t),ckr=i(zl),Vt=n(zl,"DIV",{class:!0});var hA=s(Vt);T(ax.$$.fragment,hA),fkr=i(hA),wTe=n(hA,"P",{});var rEt=s(wTe);mkr=r(rEt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),rEt.forEach(t),gkr=i(hA),Dc=n(hA,"P",{});var aZ=s(Dc);hkr=r(aZ,`Note:
Loading a model from its configuration file does `),ATe=n(aZ,"STRONG",{});var tEt=s(ATe);pkr=r(tEt,"not"),tEt.forEach(t),ukr=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=n(aZ,"A",{href:!0});var aEt=s(VJ);_kr=r(aEt,"from_pretrained()"),aEt.forEach(t),bkr=r(aZ," to load the model weights."),aZ.forEach(t),vkr=i(hA),T(xC.$$.fragment,hA),hA.forEach(t),Fkr=i(zl),Xr=n(zl,"DIV",{class:!0});var Ql=s(Xr);T(nx.$$.fragment,Ql),Tkr=i(Ql),yTe=n(Ql,"P",{});var nEt=s(yTe);Mkr=r(nEt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),nEt.forEach(t),Ekr=i(Ql),un=n(Ql,"P",{});var pA=s(un);Ckr=r(pA,"The model class to instantiate is selected based on the "),LTe=n(pA,"CODE",{});var sEt=s(LTe);wkr=r(sEt,"model_type"),sEt.forEach(t),Akr=r(pA,` property of the config object (either
passed as an argument or loaded from `),xTe=n(pA,"CODE",{});var lEt=s(xTe);ykr=r(lEt,"pretrained_model_name_or_path"),lEt.forEach(t),Lkr=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Te=n(pA,"CODE",{});var iEt=s($Te);xkr=r(iEt,"pretrained_model_name_or_path"),iEt.forEach(t),$kr=r(pA,":"),pA.forEach(t),kkr=i(Ql),De=n(Ql,"UL",{});var Fo=s(De);$C=n(Fo,"LI",{});var cBe=s($C);kTe=n(cBe,"STRONG",{});var dEt=s(kTe);Skr=r(dEt,"albert"),dEt.forEach(t),Rkr=r(cBe," \u2014 "),XJ=n(cBe,"A",{href:!0});var cEt=s(XJ);Bkr=r(cEt,"FlaxAlbertForTokenClassification"),cEt.forEach(t),Pkr=r(cBe," (ALBERT model)"),cBe.forEach(t),Ikr=i(Fo),kC=n(Fo,"LI",{});var fBe=s(kC);STe=n(fBe,"STRONG",{});var fEt=s(STe);qkr=r(fEt,"bert"),fEt.forEach(t),Nkr=r(fBe," \u2014 "),zJ=n(fBe,"A",{href:!0});var mEt=s(zJ);jkr=r(mEt,"FlaxBertForTokenClassification"),mEt.forEach(t),Dkr=r(fBe," (BERT model)"),fBe.forEach(t),Gkr=i(Fo),SC=n(Fo,"LI",{});var mBe=s(SC);RTe=n(mBe,"STRONG",{});var gEt=s(RTe);Okr=r(gEt,"big_bird"),gEt.forEach(t),Vkr=r(mBe," \u2014 "),QJ=n(mBe,"A",{href:!0});var hEt=s(QJ);Xkr=r(hEt,"FlaxBigBirdForTokenClassification"),hEt.forEach(t),zkr=r(mBe," (BigBird model)"),mBe.forEach(t),Qkr=i(Fo),RC=n(Fo,"LI",{});var gBe=s(RC);BTe=n(gBe,"STRONG",{});var pEt=s(BTe);Wkr=r(pEt,"distilbert"),pEt.forEach(t),Hkr=r(gBe," \u2014 "),WJ=n(gBe,"A",{href:!0});var uEt=s(WJ);Ukr=r(uEt,"FlaxDistilBertForTokenClassification"),uEt.forEach(t),Jkr=r(gBe," (DistilBERT model)"),gBe.forEach(t),Ykr=i(Fo),BC=n(Fo,"LI",{});var hBe=s(BC);PTe=n(hBe,"STRONG",{});var _Et=s(PTe);Kkr=r(_Et,"electra"),_Et.forEach(t),Zkr=r(hBe," \u2014 "),HJ=n(hBe,"A",{href:!0});var bEt=s(HJ);eSr=r(bEt,"FlaxElectraForTokenClassification"),bEt.forEach(t),oSr=r(hBe," (ELECTRA model)"),hBe.forEach(t),rSr=i(Fo),PC=n(Fo,"LI",{});var pBe=s(PC);ITe=n(pBe,"STRONG",{});var vEt=s(ITe);tSr=r(vEt,"roberta"),vEt.forEach(t),aSr=r(pBe," \u2014 "),UJ=n(pBe,"A",{href:!0});var FEt=s(UJ);nSr=r(FEt,"FlaxRobertaForTokenClassification"),FEt.forEach(t),sSr=r(pBe," (RoBERTa model)"),pBe.forEach(t),lSr=i(Fo),IC=n(Fo,"LI",{});var uBe=s(IC);qTe=n(uBe,"STRONG",{});var TEt=s(qTe);iSr=r(TEt,"roformer"),TEt.forEach(t),dSr=r(uBe," \u2014 "),JJ=n(uBe,"A",{href:!0});var MEt=s(JJ);cSr=r(MEt,"FlaxRoFormerForTokenClassification"),MEt.forEach(t),fSr=r(uBe," (RoFormer model)"),uBe.forEach(t),mSr=i(Fo),qC=n(Fo,"LI",{});var _Be=s(qC);NTe=n(_Be,"STRONG",{});var EEt=s(NTe);gSr=r(EEt,"xlm-roberta"),EEt.forEach(t),hSr=r(_Be," \u2014 "),YJ=n(_Be,"A",{href:!0});var CEt=s(YJ);pSr=r(CEt,"FlaxXLMRobertaForTokenClassification"),CEt.forEach(t),uSr=r(_Be," (XLM-RoBERTa model)"),_Be.forEach(t),Fo.forEach(t),_Sr=i(Ql),T(NC.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),EIe=i(f),Gc=n(f,"H2",{class:!0});var yNe=s(Gc);jC=n(yNe,"A",{id:!0,class:!0,href:!0});var wEt=s(jC);jTe=n(wEt,"SPAN",{});var AEt=s(jTe);T(sx.$$.fragment,AEt),AEt.forEach(t),wEt.forEach(t),bSr=i(yNe),DTe=n(yNe,"SPAN",{});var yEt=s(DTe);vSr=r(yEt,"FlaxAutoModelForMultipleChoice"),yEt.forEach(t),yNe.forEach(t),CIe=i(f),br=n(f,"DIV",{class:!0});var Wl=s(br);T(lx.$$.fragment,Wl),FSr=i(Wl),Oc=n(Wl,"P",{});var nZ=s(Oc);TSr=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),KJ=n(nZ,"A",{href:!0});var LEt=s(KJ);MSr=r(LEt,"from_pretrained()"),LEt.forEach(t),ESr=r(nZ," class method or the "),ZJ=n(nZ,"A",{href:!0});var xEt=s(ZJ);CSr=r(xEt,"from_config()"),xEt.forEach(t),wSr=r(nZ,` class
method.`),nZ.forEach(t),ASr=i(Wl),ix=n(Wl,"P",{});var LNe=s(ix);ySr=r(LNe,"This class cannot be instantiated directly using "),GTe=n(LNe,"CODE",{});var $Et=s(GTe);LSr=r($Et,"__init__()"),$Et.forEach(t),xSr=r(LNe," (throws an error)."),LNe.forEach(t),$Sr=i(Wl),Xt=n(Wl,"DIV",{class:!0});var uA=s(Xt);T(dx.$$.fragment,uA),kSr=i(uA),OTe=n(uA,"P",{});var kEt=s(OTe);SSr=r(kEt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),kEt.forEach(t),RSr=i(uA),Vc=n(uA,"P",{});var sZ=s(Vc);BSr=r(sZ,`Note:
Loading a model from its configuration file does `),VTe=n(sZ,"STRONG",{});var SEt=s(VTe);PSr=r(SEt,"not"),SEt.forEach(t),ISr=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eY=n(sZ,"A",{href:!0});var REt=s(eY);qSr=r(REt,"from_pretrained()"),REt.forEach(t),NSr=r(sZ," to load the model weights."),sZ.forEach(t),jSr=i(uA),T(DC.$$.fragment,uA),uA.forEach(t),DSr=i(Wl),zr=n(Wl,"DIV",{class:!0});var Hl=s(zr);T(cx.$$.fragment,Hl),GSr=i(Hl),XTe=n(Hl,"P",{});var BEt=s(XTe);OSr=r(BEt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),BEt.forEach(t),VSr=i(Hl),_n=n(Hl,"P",{});var _A=s(_n);XSr=r(_A,"The model class to instantiate is selected based on the "),zTe=n(_A,"CODE",{});var PEt=s(zTe);zSr=r(PEt,"model_type"),PEt.forEach(t),QSr=r(_A,` property of the config object (either
passed as an argument or loaded from `),QTe=n(_A,"CODE",{});var IEt=s(QTe);WSr=r(IEt,"pretrained_model_name_or_path"),IEt.forEach(t),HSr=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WTe=n(_A,"CODE",{});var qEt=s(WTe);USr=r(qEt,"pretrained_model_name_or_path"),qEt.forEach(t),JSr=r(_A,":"),_A.forEach(t),YSr=i(Hl),Ge=n(Hl,"UL",{});var To=s(Ge);GC=n(To,"LI",{});var bBe=s(GC);HTe=n(bBe,"STRONG",{});var NEt=s(HTe);KSr=r(NEt,"albert"),NEt.forEach(t),ZSr=r(bBe," \u2014 "),oY=n(bBe,"A",{href:!0});var jEt=s(oY);eRr=r(jEt,"FlaxAlbertForMultipleChoice"),jEt.forEach(t),oRr=r(bBe," (ALBERT model)"),bBe.forEach(t),rRr=i(To),OC=n(To,"LI",{});var vBe=s(OC);UTe=n(vBe,"STRONG",{});var DEt=s(UTe);tRr=r(DEt,"bert"),DEt.forEach(t),aRr=r(vBe," \u2014 "),rY=n(vBe,"A",{href:!0});var GEt=s(rY);nRr=r(GEt,"FlaxBertForMultipleChoice"),GEt.forEach(t),sRr=r(vBe," (BERT model)"),vBe.forEach(t),lRr=i(To),VC=n(To,"LI",{});var FBe=s(VC);JTe=n(FBe,"STRONG",{});var OEt=s(JTe);iRr=r(OEt,"big_bird"),OEt.forEach(t),dRr=r(FBe," \u2014 "),tY=n(FBe,"A",{href:!0});var VEt=s(tY);cRr=r(VEt,"FlaxBigBirdForMultipleChoice"),VEt.forEach(t),fRr=r(FBe," (BigBird model)"),FBe.forEach(t),mRr=i(To),XC=n(To,"LI",{});var TBe=s(XC);YTe=n(TBe,"STRONG",{});var XEt=s(YTe);gRr=r(XEt,"distilbert"),XEt.forEach(t),hRr=r(TBe," \u2014 "),aY=n(TBe,"A",{href:!0});var zEt=s(aY);pRr=r(zEt,"FlaxDistilBertForMultipleChoice"),zEt.forEach(t),uRr=r(TBe," (DistilBERT model)"),TBe.forEach(t),_Rr=i(To),zC=n(To,"LI",{});var MBe=s(zC);KTe=n(MBe,"STRONG",{});var QEt=s(KTe);bRr=r(QEt,"electra"),QEt.forEach(t),vRr=r(MBe," \u2014 "),nY=n(MBe,"A",{href:!0});var WEt=s(nY);FRr=r(WEt,"FlaxElectraForMultipleChoice"),WEt.forEach(t),TRr=r(MBe," (ELECTRA model)"),MBe.forEach(t),MRr=i(To),QC=n(To,"LI",{});var EBe=s(QC);ZTe=n(EBe,"STRONG",{});var HEt=s(ZTe);ERr=r(HEt,"roberta"),HEt.forEach(t),CRr=r(EBe," \u2014 "),sY=n(EBe,"A",{href:!0});var UEt=s(sY);wRr=r(UEt,"FlaxRobertaForMultipleChoice"),UEt.forEach(t),ARr=r(EBe," (RoBERTa model)"),EBe.forEach(t),yRr=i(To),WC=n(To,"LI",{});var CBe=s(WC);e7e=n(CBe,"STRONG",{});var JEt=s(e7e);LRr=r(JEt,"roformer"),JEt.forEach(t),xRr=r(CBe," \u2014 "),lY=n(CBe,"A",{href:!0});var YEt=s(lY);$Rr=r(YEt,"FlaxRoFormerForMultipleChoice"),YEt.forEach(t),kRr=r(CBe," (RoFormer model)"),CBe.forEach(t),SRr=i(To),HC=n(To,"LI",{});var wBe=s(HC);o7e=n(wBe,"STRONG",{});var KEt=s(o7e);RRr=r(KEt,"xlm-roberta"),KEt.forEach(t),BRr=r(wBe," \u2014 "),iY=n(wBe,"A",{href:!0});var ZEt=s(iY);PRr=r(ZEt,"FlaxXLMRobertaForMultipleChoice"),ZEt.forEach(t),IRr=r(wBe," (XLM-RoBERTa model)"),wBe.forEach(t),To.forEach(t),qRr=i(Hl),T(UC.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),wIe=i(f),Xc=n(f,"H2",{class:!0});var xNe=s(Xc);JC=n(xNe,"A",{id:!0,class:!0,href:!0});var eCt=s(JC);r7e=n(eCt,"SPAN",{});var oCt=s(r7e);T(fx.$$.fragment,oCt),oCt.forEach(t),eCt.forEach(t),NRr=i(xNe),t7e=n(xNe,"SPAN",{});var rCt=s(t7e);jRr=r(rCt,"FlaxAutoModelForNextSentencePrediction"),rCt.forEach(t),xNe.forEach(t),AIe=i(f),vr=n(f,"DIV",{class:!0});var Ul=s(vr);T(mx.$$.fragment,Ul),DRr=i(Ul),zc=n(Ul,"P",{});var lZ=s(zc);GRr=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),dY=n(lZ,"A",{href:!0});var tCt=s(dY);ORr=r(tCt,"from_pretrained()"),tCt.forEach(t),VRr=r(lZ," class method or the "),cY=n(lZ,"A",{href:!0});var aCt=s(cY);XRr=r(aCt,"from_config()"),aCt.forEach(t),zRr=r(lZ,` class
method.`),lZ.forEach(t),QRr=i(Ul),gx=n(Ul,"P",{});var $Ne=s(gx);WRr=r($Ne,"This class cannot be instantiated directly using "),a7e=n($Ne,"CODE",{});var nCt=s(a7e);HRr=r(nCt,"__init__()"),nCt.forEach(t),URr=r($Ne," (throws an error)."),$Ne.forEach(t),JRr=i(Ul),zt=n(Ul,"DIV",{class:!0});var bA=s(zt);T(hx.$$.fragment,bA),YRr=i(bA),n7e=n(bA,"P",{});var sCt=s(n7e);KRr=r(sCt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),sCt.forEach(t),ZRr=i(bA),Qc=n(bA,"P",{});var iZ=s(Qc);eBr=r(iZ,`Note:
Loading a model from its configuration file does `),s7e=n(iZ,"STRONG",{});var lCt=s(s7e);oBr=r(lCt,"not"),lCt.forEach(t),rBr=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=n(iZ,"A",{href:!0});var iCt=s(fY);tBr=r(iCt,"from_pretrained()"),iCt.forEach(t),aBr=r(iZ," to load the model weights."),iZ.forEach(t),nBr=i(bA),T(YC.$$.fragment,bA),bA.forEach(t),sBr=i(Ul),Qr=n(Ul,"DIV",{class:!0});var Jl=s(Qr);T(px.$$.fragment,Jl),lBr=i(Jl),l7e=n(Jl,"P",{});var dCt=s(l7e);iBr=r(dCt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),dCt.forEach(t),dBr=i(Jl),bn=n(Jl,"P",{});var vA=s(bn);cBr=r(vA,"The model class to instantiate is selected based on the "),i7e=n(vA,"CODE",{});var cCt=s(i7e);fBr=r(cCt,"model_type"),cCt.forEach(t),mBr=r(vA,` property of the config object (either
passed as an argument or loaded from `),d7e=n(vA,"CODE",{});var fCt=s(d7e);gBr=r(fCt,"pretrained_model_name_or_path"),fCt.forEach(t),hBr=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c7e=n(vA,"CODE",{});var mCt=s(c7e);pBr=r(mCt,"pretrained_model_name_or_path"),mCt.forEach(t),uBr=r(vA,":"),vA.forEach(t),_Br=i(Jl),f7e=n(Jl,"UL",{});var gCt=s(f7e);KC=n(gCt,"LI",{});var ABe=s(KC);m7e=n(ABe,"STRONG",{});var hCt=s(m7e);bBr=r(hCt,"bert"),hCt.forEach(t),vBr=r(ABe," \u2014 "),mY=n(ABe,"A",{href:!0});var pCt=s(mY);FBr=r(pCt,"FlaxBertForNextSentencePrediction"),pCt.forEach(t),TBr=r(ABe," (BERT model)"),ABe.forEach(t),gCt.forEach(t),MBr=i(Jl),T(ZC.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),yIe=i(f),Wc=n(f,"H2",{class:!0});var kNe=s(Wc);e3=n(kNe,"A",{id:!0,class:!0,href:!0});var uCt=s(e3);g7e=n(uCt,"SPAN",{});var _Ct=s(g7e);T(ux.$$.fragment,_Ct),_Ct.forEach(t),uCt.forEach(t),EBr=i(kNe),h7e=n(kNe,"SPAN",{});var bCt=s(h7e);CBr=r(bCt,"FlaxAutoModelForImageClassification"),bCt.forEach(t),kNe.forEach(t),LIe=i(f),Fr=n(f,"DIV",{class:!0});var Yl=s(Fr);T(_x.$$.fragment,Yl),wBr=i(Yl),Hc=n(Yl,"P",{});var dZ=s(Hc);ABr=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),gY=n(dZ,"A",{href:!0});var vCt=s(gY);yBr=r(vCt,"from_pretrained()"),vCt.forEach(t),LBr=r(dZ," class method or the "),hY=n(dZ,"A",{href:!0});var FCt=s(hY);xBr=r(FCt,"from_config()"),FCt.forEach(t),$Br=r(dZ,` class
method.`),dZ.forEach(t),kBr=i(Yl),bx=n(Yl,"P",{});var SNe=s(bx);SBr=r(SNe,"This class cannot be instantiated directly using "),p7e=n(SNe,"CODE",{});var TCt=s(p7e);RBr=r(TCt,"__init__()"),TCt.forEach(t),BBr=r(SNe," (throws an error)."),SNe.forEach(t),PBr=i(Yl),Qt=n(Yl,"DIV",{class:!0});var FA=s(Qt);T(vx.$$.fragment,FA),IBr=i(FA),u7e=n(FA,"P",{});var MCt=s(u7e);qBr=r(MCt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),MCt.forEach(t),NBr=i(FA),Uc=n(FA,"P",{});var cZ=s(Uc);jBr=r(cZ,`Note:
Loading a model from its configuration file does `),_7e=n(cZ,"STRONG",{});var ECt=s(_7e);DBr=r(ECt,"not"),ECt.forEach(t),GBr=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pY=n(cZ,"A",{href:!0});var CCt=s(pY);OBr=r(CCt,"from_pretrained()"),CCt.forEach(t),VBr=r(cZ," to load the model weights."),cZ.forEach(t),XBr=i(FA),T(o3.$$.fragment,FA),FA.forEach(t),zBr=i(Yl),Wr=n(Yl,"DIV",{class:!0});var Kl=s(Wr);T(Fx.$$.fragment,Kl),QBr=i(Kl),b7e=n(Kl,"P",{});var wCt=s(b7e);WBr=r(wCt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),wCt.forEach(t),HBr=i(Kl),vn=n(Kl,"P",{});var TA=s(vn);UBr=r(TA,"The model class to instantiate is selected based on the "),v7e=n(TA,"CODE",{});var ACt=s(v7e);JBr=r(ACt,"model_type"),ACt.forEach(t),YBr=r(TA,` property of the config object (either
passed as an argument or loaded from `),F7e=n(TA,"CODE",{});var yCt=s(F7e);KBr=r(yCt,"pretrained_model_name_or_path"),yCt.forEach(t),ZBr=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T7e=n(TA,"CODE",{});var LCt=s(T7e);ePr=r(LCt,"pretrained_model_name_or_path"),LCt.forEach(t),oPr=r(TA,":"),TA.forEach(t),rPr=i(Kl),Tx=n(Kl,"UL",{});var RNe=s(Tx);r3=n(RNe,"LI",{});var yBe=s(r3);M7e=n(yBe,"STRONG",{});var xCt=s(M7e);tPr=r(xCt,"beit"),xCt.forEach(t),aPr=r(yBe," \u2014 "),uY=n(yBe,"A",{href:!0});var $Ct=s(uY);nPr=r($Ct,"FlaxBeitForImageClassification"),$Ct.forEach(t),sPr=r(yBe," (BEiT model)"),yBe.forEach(t),lPr=i(RNe),t3=n(RNe,"LI",{});var LBe=s(t3);E7e=n(LBe,"STRONG",{});var kCt=s(E7e);iPr=r(kCt,"vit"),kCt.forEach(t),dPr=r(LBe," \u2014 "),_Y=n(LBe,"A",{href:!0});var SCt=s(_Y);cPr=r(SCt,"FlaxViTForImageClassification"),SCt.forEach(t),fPr=r(LBe," (ViT model)"),LBe.forEach(t),RNe.forEach(t),mPr=i(Kl),T(a3.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),xIe=i(f),Jc=n(f,"H2",{class:!0});var BNe=s(Jc);n3=n(BNe,"A",{id:!0,class:!0,href:!0});var RCt=s(n3);C7e=n(RCt,"SPAN",{});var BCt=s(C7e);T(Mx.$$.fragment,BCt),BCt.forEach(t),RCt.forEach(t),gPr=i(BNe),w7e=n(BNe,"SPAN",{});var PCt=s(w7e);hPr=r(PCt,"FlaxAutoModelForVision2Seq"),PCt.forEach(t),BNe.forEach(t),$Ie=i(f),Tr=n(f,"DIV",{class:!0});var Zl=s(Tr);T(Ex.$$.fragment,Zl),pPr=i(Zl),Yc=n(Zl,"P",{});var fZ=s(Yc);uPr=r(fZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),bY=n(fZ,"A",{href:!0});var ICt=s(bY);_Pr=r(ICt,"from_pretrained()"),ICt.forEach(t),bPr=r(fZ," class method or the "),vY=n(fZ,"A",{href:!0});var qCt=s(vY);vPr=r(qCt,"from_config()"),qCt.forEach(t),FPr=r(fZ,` class
method.`),fZ.forEach(t),TPr=i(Zl),Cx=n(Zl,"P",{});var PNe=s(Cx);MPr=r(PNe,"This class cannot be instantiated directly using "),A7e=n(PNe,"CODE",{});var NCt=s(A7e);EPr=r(NCt,"__init__()"),NCt.forEach(t),CPr=r(PNe," (throws an error)."),PNe.forEach(t),wPr=i(Zl),Wt=n(Zl,"DIV",{class:!0});var MA=s(Wt);T(wx.$$.fragment,MA),APr=i(MA),y7e=n(MA,"P",{});var jCt=s(y7e);yPr=r(jCt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),jCt.forEach(t),LPr=i(MA),Kc=n(MA,"P",{});var mZ=s(Kc);xPr=r(mZ,`Note:
Loading a model from its configuration file does `),L7e=n(mZ,"STRONG",{});var DCt=s(L7e);$Pr=r(DCt,"not"),DCt.forEach(t),kPr=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FY=n(mZ,"A",{href:!0});var GCt=s(FY);SPr=r(GCt,"from_pretrained()"),GCt.forEach(t),RPr=r(mZ," to load the model weights."),mZ.forEach(t),BPr=i(MA),T(s3.$$.fragment,MA),MA.forEach(t),PPr=i(Zl),Hr=n(Zl,"DIV",{class:!0});var ei=s(Hr);T(Ax.$$.fragment,ei),IPr=i(ei),x7e=n(ei,"P",{});var OCt=s(x7e);qPr=r(OCt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),OCt.forEach(t),NPr=i(ei),Fn=n(ei,"P",{});var EA=s(Fn);jPr=r(EA,"The model class to instantiate is selected based on the "),$7e=n(EA,"CODE",{});var VCt=s($7e);DPr=r(VCt,"model_type"),VCt.forEach(t),GPr=r(EA,` property of the config object (either
passed as an argument or loaded from `),k7e=n(EA,"CODE",{});var XCt=s(k7e);OPr=r(XCt,"pretrained_model_name_or_path"),XCt.forEach(t),VPr=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S7e=n(EA,"CODE",{});var zCt=s(S7e);XPr=r(zCt,"pretrained_model_name_or_path"),zCt.forEach(t),zPr=r(EA,":"),EA.forEach(t),QPr=i(ei),R7e=n(ei,"UL",{});var QCt=s(R7e);l3=n(QCt,"LI",{});var xBe=s(l3);B7e=n(xBe,"STRONG",{});var WCt=s(B7e);WPr=r(WCt,"vision-encoder-decoder"),WCt.forEach(t),HPr=r(xBe," \u2014 "),TY=n(xBe,"A",{href:!0});var HCt=s(TY);UPr=r(HCt,"FlaxVisionEncoderDecoderModel"),HCt.forEach(t),JPr=r(xBe," (Vision Encoder decoder model)"),xBe.forEach(t),QCt.forEach(t),YPr=i(ei),T(i3.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(Jwt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Mn,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.AutoConfig"),c(Cn,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.AutoModel"),c(wn,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.AutoTokenizer"),c(li,"href","/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertModel"),c(sf,"id","extending-the-auto-classes"),c(sf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sf,"href","#extending-the-auto-classes"),c(ii,"class","relative group"),c(df,"id","transformers.AutoConfig"),c(df,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(df,"href","#transformers.AutoConfig"),c(di,"class","relative group"),c(z9,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(Q9,"href","/docs/transformers/pr_16575/en/model_doc/albert#transformers.AlbertConfig"),c(W9,"href","/docs/transformers/pr_16575/en/model_doc/bart#transformers.BartConfig"),c(H9,"href","/docs/transformers/pr_16575/en/model_doc/beit#transformers.BeitConfig"),c(U9,"href","/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertConfig"),c(J9,"href","/docs/transformers/pr_16575/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(Y9,"href","/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.BigBirdConfig"),c(K9,"href","/docs/transformers/pr_16575/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(Z9,"href","/docs/transformers/pr_16575/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(e$,"href","/docs/transformers/pr_16575/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(o$,"href","/docs/transformers/pr_16575/en/model_doc/camembert#transformers.CamembertConfig"),c(r$,"href","/docs/transformers/pr_16575/en/model_doc/canine#transformers.CanineConfig"),c(t$,"href","/docs/transformers/pr_16575/en/model_doc/clip#transformers.CLIPConfig"),c(a$,"href","/docs/transformers/pr_16575/en/model_doc/convbert#transformers.ConvBertConfig"),c(n$,"href","/docs/transformers/pr_16575/en/model_doc/convnext#transformers.ConvNextConfig"),c(s$,"href","/docs/transformers/pr_16575/en/model_doc/ctrl#transformers.CTRLConfig"),c(l$,"href","/docs/transformers/pr_16575/en/model_doc/cvt#transformers.CvtConfig"),c(i$,"href","/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(d$,"href","/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(c$,"href","/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(f$,"href","/docs/transformers/pr_16575/en/model_doc/deberta#transformers.DebertaConfig"),c(m$,"href","/docs/transformers/pr_16575/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(g$,"href","/docs/transformers/pr_16575/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(h$,"href","/docs/transformers/pr_16575/en/model_doc/deit#transformers.DeiTConfig"),c(p$,"href","/docs/transformers/pr_16575/en/model_doc/detr#transformers.DetrConfig"),c(u$,"href","/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.DistilBertConfig"),c(_$,"href","/docs/transformers/pr_16575/en/model_doc/dpr#transformers.DPRConfig"),c(b$,"href","/docs/transformers/pr_16575/en/model_doc/dpt#transformers.DPTConfig"),c(v$,"href","/docs/transformers/pr_16575/en/model_doc/electra#transformers.ElectraConfig"),c(F$,"href","/docs/transformers/pr_16575/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(T$,"href","/docs/transformers/pr_16575/en/model_doc/flaubert#transformers.FlaubertConfig"),c(M$,"href","/docs/transformers/pr_16575/en/model_doc/fnet#transformers.FNetConfig"),c(E$,"href","/docs/transformers/pr_16575/en/model_doc/fsmt#transformers.FSMTConfig"),c(C$,"href","/docs/transformers/pr_16575/en/model_doc/funnel#transformers.FunnelConfig"),c(w$,"href","/docs/transformers/pr_16575/en/model_doc/glpn#transformers.GLPNConfig"),c(A$,"href","/docs/transformers/pr_16575/en/model_doc/gpt2#transformers.GPT2Config"),c(y$,"href","/docs/transformers/pr_16575/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(L$,"href","/docs/transformers/pr_16575/en/model_doc/gptj#transformers.GPTJConfig"),c(x$,"href","/docs/transformers/pr_16575/en/model_doc/hubert#transformers.HubertConfig"),c($$,"href","/docs/transformers/pr_16575/en/model_doc/ibert#transformers.IBertConfig"),c(k$,"href","/docs/transformers/pr_16575/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(S$,"href","/docs/transformers/pr_16575/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(R$,"href","/docs/transformers/pr_16575/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(B$,"href","/docs/transformers/pr_16575/en/model_doc/led#transformers.LEDConfig"),c(P$,"href","/docs/transformers/pr_16575/en/model_doc/longformer#transformers.LongformerConfig"),c(I$,"href","/docs/transformers/pr_16575/en/model_doc/luke#transformers.LukeConfig"),c(q$,"href","/docs/transformers/pr_16575/en/model_doc/lxmert#transformers.LxmertConfig"),c(N$,"href","/docs/transformers/pr_16575/en/model_doc/m2m_100#transformers.M2M100Config"),c(j$,"href","/docs/transformers/pr_16575/en/model_doc/marian#transformers.MarianConfig"),c(D$,"href","/docs/transformers/pr_16575/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(G$,"href","/docs/transformers/pr_16575/en/model_doc/mbart#transformers.MBartConfig"),c(O$,"href","/docs/transformers/pr_16575/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(V$,"href","/docs/transformers/pr_16575/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(X$,"href","/docs/transformers/pr_16575/en/model_doc/mpnet#transformers.MPNetConfig"),c(z$,"href","/docs/transformers/pr_16575/en/model_doc/mt5#transformers.MT5Config"),c(Q$,"href","/docs/transformers/pr_16575/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(W$,"href","/docs/transformers/pr_16575/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(H$,"href","/docs/transformers/pr_16575/en/model_doc/pegasus#transformers.PegasusConfig"),c(U$,"href","/docs/transformers/pr_16575/en/model_doc/perceiver#transformers.PerceiverConfig"),c(J$,"href","/docs/transformers/pr_16575/en/model_doc/plbart#transformers.PLBartConfig"),c(Y$,"href","/docs/transformers/pr_16575/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(K$,"href","/docs/transformers/pr_16575/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(Z$,"href","/docs/transformers/pr_16575/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(ek,"href","/docs/transformers/pr_16575/en/model_doc/rag#transformers.RagConfig"),c(ok,"href","/docs/transformers/pr_16575/en/model_doc/realm#transformers.RealmConfig"),c(rk,"href","/docs/transformers/pr_16575/en/model_doc/reformer#transformers.ReformerConfig"),c(tk,"href","/docs/transformers/pr_16575/en/model_doc/regnet#transformers.RegNetConfig"),c(ak,"href","/docs/transformers/pr_16575/en/model_doc/rembert#transformers.RemBertConfig"),c(nk,"href","/docs/transformers/pr_16575/en/model_doc/resnet#transformers.ResNetConfig"),c(sk,"href","/docs/transformers/pr_16575/en/model_doc/retribert#transformers.RetriBertConfig"),c(lk,"href","/docs/transformers/pr_16575/en/model_doc/roberta#transformers.RobertaConfig"),c(ik,"href","/docs/transformers/pr_16575/en/model_doc/roformer#transformers.RoFormerConfig"),c(dk,"href","/docs/transformers/pr_16575/en/model_doc/segformer#transformers.SegformerConfig"),c(ck,"href","/docs/transformers/pr_16575/en/model_doc/sew#transformers.SEWConfig"),c(fk,"href","/docs/transformers/pr_16575/en/model_doc/sew-d#transformers.SEWDConfig"),c(mk,"href","/docs/transformers/pr_16575/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(gk,"href","/docs/transformers/pr_16575/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(hk,"href","/docs/transformers/pr_16575/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(pk,"href","/docs/transformers/pr_16575/en/model_doc/splinter#transformers.SplinterConfig"),c(uk,"href","/docs/transformers/pr_16575/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(_k,"href","/docs/transformers/pr_16575/en/model_doc/swin#transformers.SwinConfig"),c(bk,"href","/docs/transformers/pr_16575/en/model_doc/t5#transformers.T5Config"),c(vk,"href","/docs/transformers/pr_16575/en/model_doc/tapas#transformers.TapasConfig"),c(Fk,"href","/docs/transformers/pr_16575/en/model_doc/bart#transformers.BartConfig"),c(Tk,"href","/docs/transformers/pr_16575/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(Mk,"href","/docs/transformers/pr_16575/en/model_doc/trocr#transformers.TrOCRConfig"),c(Ek,"href","/docs/transformers/pr_16575/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(Ck,"href","/docs/transformers/pr_16575/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(wk,"href","/docs/transformers/pr_16575/en/model_doc/van#transformers.VanConfig"),c(Ak,"href","/docs/transformers/pr_16575/en/model_doc/vilt#transformers.ViltConfig"),c(yk,"href","/docs/transformers/pr_16575/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(Lk,"href","/docs/transformers/pr_16575/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(xk,"href","/docs/transformers/pr_16575/en/model_doc/visual_bert#transformers.VisualBertConfig"),c($k,"href","/docs/transformers/pr_16575/en/model_doc/vit#transformers.ViTConfig"),c(kk,"href","/docs/transformers/pr_16575/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(Sk,"href","/docs/transformers/pr_16575/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(Rk,"href","/docs/transformers/pr_16575/en/model_doc/wavlm#transformers.WavLMConfig"),c(Bk,"href","/docs/transformers/pr_16575/en/model_doc/xglm#transformers.XGLMConfig"),c(Pk,"href","/docs/transformers/pr_16575/en/model_doc/xlm#transformers.XLMConfig"),c(Ik,"href","/docs/transformers/pr_16575/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(qk,"href","/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(Nk,"href","/docs/transformers/pr_16575/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(jk,"href","/docs/transformers/pr_16575/en/model_doc/xlnet#transformers.XLNetConfig"),c(Dk,"href","/docs/transformers/pr_16575/en/model_doc/yolos#transformers.YolosConfig"),c(Gk,"href","/docs/transformers/pr_16575/en/model_doc/yoso#transformers.YosoConfig"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ig,"id","transformers.AutoTokenizer"),c(ig,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ig,"href","#transformers.AutoTokenizer"),c(fi,"class","relative group"),c(Ok,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(Vk,"href","/docs/transformers/pr_16575/en/model_doc/albert#transformers.AlbertTokenizer"),c(Xk,"href","/docs/transformers/pr_16575/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(zk,"href","/docs/transformers/pr_16575/en/model_doc/bart#transformers.BartTokenizer"),c(Qk,"href","/docs/transformers/pr_16575/en/model_doc/bart#transformers.BartTokenizerFast"),c(Wk,"href","/docs/transformers/pr_16575/en/model_doc/barthez#transformers.BarthezTokenizer"),c(Hk,"href","/docs/transformers/pr_16575/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(Uk,"href","/docs/transformers/pr_16575/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(Jk,"href","/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertTokenizer"),c(Yk,"href","/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertTokenizerFast"),c(Kk,"href","/docs/transformers/pr_16575/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(Zk,"href","/docs/transformers/pr_16575/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(eS,"href","/docs/transformers/pr_16575/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(oS,"href","/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(rS,"href","/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(tS,"href","/docs/transformers/pr_16575/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(aS,"href","/docs/transformers/pr_16575/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(nS,"href","/docs/transformers/pr_16575/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(sS,"href","/docs/transformers/pr_16575/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(lS,"href","/docs/transformers/pr_16575/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(iS,"href","/docs/transformers/pr_16575/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(dS,"href","/docs/transformers/pr_16575/en/model_doc/camembert#transformers.CamembertTokenizer"),c(cS,"href","/docs/transformers/pr_16575/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(fS,"href","/docs/transformers/pr_16575/en/model_doc/canine#transformers.CanineTokenizer"),c(mS,"href","/docs/transformers/pr_16575/en/model_doc/clip#transformers.CLIPTokenizer"),c(gS,"href","/docs/transformers/pr_16575/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(hS,"href","/docs/transformers/pr_16575/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(pS,"href","/docs/transformers/pr_16575/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(uS,"href","/docs/transformers/pr_16575/en/model_doc/cpm#transformers.CpmTokenizer"),c(_S,"href","/docs/transformers/pr_16575/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(bS,"href","/docs/transformers/pr_16575/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(vS,"href","/docs/transformers/pr_16575/en/model_doc/roberta#transformers.RobertaTokenizer"),c(FS,"href","/docs/transformers/pr_16575/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(TS,"href","/docs/transformers/pr_16575/en/model_doc/deberta#transformers.DebertaTokenizer"),c(MS,"href","/docs/transformers/pr_16575/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(ES,"href","/docs/transformers/pr_16575/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(CS,"href","/docs/transformers/pr_16575/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(wS,"href","/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(AS,"href","/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(yS,"href","/docs/transformers/pr_16575/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(LS,"href","/docs/transformers/pr_16575/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(xS,"href","/docs/transformers/pr_16575/en/model_doc/electra#transformers.ElectraTokenizer"),c($S,"href","/docs/transformers/pr_16575/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(kS,"href","/docs/transformers/pr_16575/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(SS,"href","/docs/transformers/pr_16575/en/model_doc/fnet#transformers.FNetTokenizer"),c(RS,"href","/docs/transformers/pr_16575/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(BS,"href","/docs/transformers/pr_16575/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(PS,"href","/docs/transformers/pr_16575/en/model_doc/funnel#transformers.FunnelTokenizer"),c(IS,"href","/docs/transformers/pr_16575/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(qS,"href","/docs/transformers/pr_16575/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(NS,"href","/docs/transformers/pr_16575/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(jS,"href","/docs/transformers/pr_16575/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(DS,"href","/docs/transformers/pr_16575/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(GS,"href","/docs/transformers/pr_16575/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(OS,"href","/docs/transformers/pr_16575/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(VS,"href","/docs/transformers/pr_16575/en/model_doc/herbert#transformers.HerbertTokenizer"),c(XS,"href","/docs/transformers/pr_16575/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(zS,"href","/docs/transformers/pr_16575/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(QS,"href","/docs/transformers/pr_16575/en/model_doc/roberta#transformers.RobertaTokenizer"),c(WS,"href","/docs/transformers/pr_16575/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(HS,"href","/docs/transformers/pr_16575/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(US,"href","/docs/transformers/pr_16575/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(JS,"href","/docs/transformers/pr_16575/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(YS,"href","/docs/transformers/pr_16575/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(KS,"href","/docs/transformers/pr_16575/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(ZS,"href","/docs/transformers/pr_16575/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(eR,"href","/docs/transformers/pr_16575/en/model_doc/led#transformers.LEDTokenizer"),c(oR,"href","/docs/transformers/pr_16575/en/model_doc/led#transformers.LEDTokenizerFast"),c(rR,"href","/docs/transformers/pr_16575/en/model_doc/longformer#transformers.LongformerTokenizer"),c(tR,"href","/docs/transformers/pr_16575/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(aR,"href","/docs/transformers/pr_16575/en/model_doc/luke#transformers.LukeTokenizer"),c(nR,"href","/docs/transformers/pr_16575/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(sR,"href","/docs/transformers/pr_16575/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(lR,"href","/docs/transformers/pr_16575/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(iR,"href","/docs/transformers/pr_16575/en/model_doc/marian#transformers.MarianTokenizer"),c(dR,"href","/docs/transformers/pr_16575/en/model_doc/mbart#transformers.MBartTokenizer"),c(cR,"href","/docs/transformers/pr_16575/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(fR,"href","/docs/transformers/pr_16575/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(mR,"href","/docs/transformers/pr_16575/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(gR,"href","/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertTokenizer"),c(hR,"href","/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertTokenizerFast"),c(pR,"href","/docs/transformers/pr_16575/en/model_doc/mluke#transformers.MLukeTokenizer"),c(uR,"href","/docs/transformers/pr_16575/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(_R,"href","/docs/transformers/pr_16575/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(bR,"href","/docs/transformers/pr_16575/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(vR,"href","/docs/transformers/pr_16575/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(FR,"href","/docs/transformers/pr_16575/en/model_doc/mt5#transformers.T5Tokenizer"),c(TR,"href","/docs/transformers/pr_16575/en/model_doc/mt5#transformers.T5TokenizerFast"),c(MR,"href","/docs/transformers/pr_16575/en/model_doc/albert#transformers.AlbertTokenizer"),c(ER,"href","/docs/transformers/pr_16575/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(CR,"href","/docs/transformers/pr_16575/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(wR,"href","/docs/transformers/pr_16575/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(AR,"href","/docs/transformers/pr_16575/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(yR,"href","/docs/transformers/pr_16575/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(LR,"href","/docs/transformers/pr_16575/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(xR,"href","/docs/transformers/pr_16575/en/model_doc/phobert#transformers.PhobertTokenizer"),c($R,"href","/docs/transformers/pr_16575/en/model_doc/plbart#transformers.PLBartTokenizer"),c(kR,"href","/docs/transformers/pr_16575/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(SR,"href","/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertTokenizer"),c(RR,"href","/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertTokenizerFast"),c(BR,"href","/docs/transformers/pr_16575/en/model_doc/rag#transformers.RagTokenizer"),c(PR,"href","/docs/transformers/pr_16575/en/model_doc/realm#transformers.RealmTokenizer"),c(IR,"href","/docs/transformers/pr_16575/en/model_doc/realm#transformers.RealmTokenizerFast"),c(qR,"href","/docs/transformers/pr_16575/en/model_doc/reformer#transformers.ReformerTokenizer"),c(NR,"href","/docs/transformers/pr_16575/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(jR,"href","/docs/transformers/pr_16575/en/model_doc/rembert#transformers.RemBertTokenizer"),c(DR,"href","/docs/transformers/pr_16575/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(GR,"href","/docs/transformers/pr_16575/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(OR,"href","/docs/transformers/pr_16575/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(VR,"href","/docs/transformers/pr_16575/en/model_doc/roberta#transformers.RobertaTokenizer"),c(XR,"href","/docs/transformers/pr_16575/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(zR,"href","/docs/transformers/pr_16575/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(QR,"href","/docs/transformers/pr_16575/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(WR,"href","/docs/transformers/pr_16575/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(HR,"href","/docs/transformers/pr_16575/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(UR,"href","/docs/transformers/pr_16575/en/model_doc/splinter#transformers.SplinterTokenizer"),c(JR,"href","/docs/transformers/pr_16575/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(YR,"href","/docs/transformers/pr_16575/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(KR,"href","/docs/transformers/pr_16575/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(ZR,"href","/docs/transformers/pr_16575/en/model_doc/mt5#transformers.T5Tokenizer"),c(eB,"href","/docs/transformers/pr_16575/en/model_doc/mt5#transformers.T5TokenizerFast"),c(oB,"href","/docs/transformers/pr_16575/en/model_doc/tapas#transformers.TapasTokenizer"),c(rB,"href","/docs/transformers/pr_16575/en/model_doc/tapex#transformers.TapexTokenizer"),c(tB,"href","/docs/transformers/pr_16575/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(aB,"href","/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertTokenizer"),c(nB,"href","/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertTokenizerFast"),c(sB,"href","/docs/transformers/pr_16575/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(lB,"href","/docs/transformers/pr_16575/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(iB,"href","/docs/transformers/pr_16575/en/model_doc/xglm#transformers.XGLMTokenizer"),c(dB,"href","/docs/transformers/pr_16575/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(cB,"href","/docs/transformers/pr_16575/en/model_doc/xlm#transformers.XLMTokenizer"),c(fB,"href","/docs/transformers/pr_16575/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(mB,"href","/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(gB,"href","/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(hB,"href","/docs/transformers/pr_16575/en/model_doc/roberta#transformers.RobertaTokenizer"),c(pB,"href","/docs/transformers/pr_16575/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(uB,"href","/docs/transformers/pr_16575/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(_B,"href","/docs/transformers/pr_16575/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(bB,"href","/docs/transformers/pr_16575/en/model_doc/albert#transformers.AlbertTokenizer"),c(vB,"href","/docs/transformers/pr_16575/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dg,"id","transformers.AutoFeatureExtractor"),c(Dg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Dg,"href","#transformers.AutoFeatureExtractor"),c(mi,"class","relative group"),c(FB,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(TB,"href","/docs/transformers/pr_16575/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(MB,"href","/docs/transformers/pr_16575/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(EB,"href","/docs/transformers/pr_16575/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(CB,"href","/docs/transformers/pr_16575/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(wB,"href","/docs/transformers/pr_16575/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(AB,"href","/docs/transformers/pr_16575/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(yB,"href","/docs/transformers/pr_16575/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(LB,"href","/docs/transformers/pr_16575/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(xB,"href","/docs/transformers/pr_16575/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c($B,"href","/docs/transformers/pr_16575/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(kB,"href","/docs/transformers/pr_16575/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(SB,"href","/docs/transformers/pr_16575/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(RB,"href","/docs/transformers/pr_16575/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(BB,"href","/docs/transformers/pr_16575/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(PB,"href","/docs/transformers/pr_16575/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(IB,"href","/docs/transformers/pr_16575/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(qB,"href","/docs/transformers/pr_16575/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(NB,"href","/docs/transformers/pr_16575/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(jB,"href","/docs/transformers/pr_16575/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(DB,"href","/docs/transformers/pr_16575/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(GB,"href","/docs/transformers/pr_16575/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(OB,"href","/docs/transformers/pr_16575/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(VB,"href","/docs/transformers/pr_16575/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(XB,"href","/docs/transformers/pr_16575/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(zB,"href","/docs/transformers/pr_16575/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ph,"id","transformers.AutoProcessor"),c(ph,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ph,"href","#transformers.AutoProcessor"),c(gi,"class","relative group"),c(QB,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(WB,"href","/docs/transformers/pr_16575/en/model_doc/clip#transformers.CLIPProcessor"),c(HB,"href","/docs/transformers/pr_16575/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(UB,"href","/docs/transformers/pr_16575/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(JB,"href","/docs/transformers/pr_16575/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(YB,"href","/docs/transformers/pr_16575/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(KB,"href","/docs/transformers/pr_16575/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(ZB,"href","/docs/transformers/pr_16575/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(eP,"href","/docs/transformers/pr_16575/en/model_doc/trocr#transformers.TrOCRProcessor"),c(oP,"href","/docs/transformers/pr_16575/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(rP,"href","/docs/transformers/pr_16575/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(tP,"href","/docs/transformers/pr_16575/en/model_doc/vilt#transformers.ViltProcessor"),c(aP,"href","/docs/transformers/pr_16575/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(nP,"href","/docs/transformers/pr_16575/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(sP,"href","/docs/transformers/pr_16575/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rh,"id","transformers.AutoModel"),c(Rh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rh,"href","#transformers.AutoModel"),c(pi,"class","relative group"),c(lP,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iP,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dP,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cP,"href","/docs/transformers/pr_16575/en/model_doc/albert#transformers.AlbertModel"),c(fP,"href","/docs/transformers/pr_16575/en/model_doc/bart#transformers.BartModel"),c(mP,"href","/docs/transformers/pr_16575/en/model_doc/beit#transformers.BeitModel"),c(gP,"href","/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertModel"),c(hP,"href","/docs/transformers/pr_16575/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(pP,"href","/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.BigBirdModel"),c(uP,"href","/docs/transformers/pr_16575/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(_P,"href","/docs/transformers/pr_16575/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(bP,"href","/docs/transformers/pr_16575/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(vP,"href","/docs/transformers/pr_16575/en/model_doc/camembert#transformers.CamembertModel"),c(FP,"href","/docs/transformers/pr_16575/en/model_doc/canine#transformers.CanineModel"),c(TP,"href","/docs/transformers/pr_16575/en/model_doc/clip#transformers.CLIPModel"),c(MP,"href","/docs/transformers/pr_16575/en/model_doc/convbert#transformers.ConvBertModel"),c(EP,"href","/docs/transformers/pr_16575/en/model_doc/convnext#transformers.ConvNextModel"),c(CP,"href","/docs/transformers/pr_16575/en/model_doc/ctrl#transformers.CTRLModel"),c(wP,"href","/docs/transformers/pr_16575/en/model_doc/cvt#transformers.CvtModel"),c(AP,"href","/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(yP,"href","/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(LP,"href","/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(xP,"href","/docs/transformers/pr_16575/en/model_doc/deberta#transformers.DebertaModel"),c($P,"href","/docs/transformers/pr_16575/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(kP,"href","/docs/transformers/pr_16575/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(SP,"href","/docs/transformers/pr_16575/en/model_doc/deit#transformers.DeiTModel"),c(RP,"href","/docs/transformers/pr_16575/en/model_doc/detr#transformers.DetrModel"),c(BP,"href","/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.DistilBertModel"),c(PP,"href","/docs/transformers/pr_16575/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(IP,"href","/docs/transformers/pr_16575/en/model_doc/dpt#transformers.DPTModel"),c(qP,"href","/docs/transformers/pr_16575/en/model_doc/electra#transformers.ElectraModel"),c(NP,"href","/docs/transformers/pr_16575/en/model_doc/flaubert#transformers.FlaubertModel"),c(jP,"href","/docs/transformers/pr_16575/en/model_doc/fnet#transformers.FNetModel"),c(DP,"href","/docs/transformers/pr_16575/en/model_doc/fsmt#transformers.FSMTModel"),c(GP,"href","/docs/transformers/pr_16575/en/model_doc/funnel#transformers.FunnelModel"),c(OP,"href","/docs/transformers/pr_16575/en/model_doc/funnel#transformers.FunnelBaseModel"),c(VP,"href","/docs/transformers/pr_16575/en/model_doc/glpn#transformers.GLPNModel"),c(XP,"href","/docs/transformers/pr_16575/en/model_doc/gpt2#transformers.GPT2Model"),c(zP,"href","/docs/transformers/pr_16575/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(QP,"href","/docs/transformers/pr_16575/en/model_doc/gptj#transformers.GPTJModel"),c(WP,"href","/docs/transformers/pr_16575/en/model_doc/hubert#transformers.HubertModel"),c(HP,"href","/docs/transformers/pr_16575/en/model_doc/ibert#transformers.IBertModel"),c(UP,"href","/docs/transformers/pr_16575/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(JP,"href","/docs/transformers/pr_16575/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(YP,"href","/docs/transformers/pr_16575/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(KP,"href","/docs/transformers/pr_16575/en/model_doc/led#transformers.LEDModel"),c(ZP,"href","/docs/transformers/pr_16575/en/model_doc/longformer#transformers.LongformerModel"),c(eI,"href","/docs/transformers/pr_16575/en/model_doc/luke#transformers.LukeModel"),c(oI,"href","/docs/transformers/pr_16575/en/model_doc/lxmert#transformers.LxmertModel"),c(rI,"href","/docs/transformers/pr_16575/en/model_doc/m2m_100#transformers.M2M100Model"),c(tI,"href","/docs/transformers/pr_16575/en/model_doc/marian#transformers.MarianModel"),c(aI,"href","/docs/transformers/pr_16575/en/model_doc/maskformer#transformers.MaskFormerModel"),c(nI,"href","/docs/transformers/pr_16575/en/model_doc/mbart#transformers.MBartModel"),c(sI,"href","/docs/transformers/pr_16575/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(lI,"href","/docs/transformers/pr_16575/en/model_doc/mobilebert#transformers.MobileBertModel"),c(iI,"href","/docs/transformers/pr_16575/en/model_doc/mpnet#transformers.MPNetModel"),c(dI,"href","/docs/transformers/pr_16575/en/model_doc/mt5#transformers.MT5Model"),c(cI,"href","/docs/transformers/pr_16575/en/model_doc/nystromformer#transformers.NystromformerModel"),c(fI,"href","/docs/transformers/pr_16575/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(mI,"href","/docs/transformers/pr_16575/en/model_doc/pegasus#transformers.PegasusModel"),c(gI,"href","/docs/transformers/pr_16575/en/model_doc/perceiver#transformers.PerceiverModel"),c(hI,"href","/docs/transformers/pr_16575/en/model_doc/plbart#transformers.PLBartModel"),c(pI,"href","/docs/transformers/pr_16575/en/model_doc/poolformer#transformers.PoolFormerModel"),c(uI,"href","/docs/transformers/pr_16575/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(_I,"href","/docs/transformers/pr_16575/en/model_doc/qdqbert#transformers.QDQBertModel"),c(bI,"href","/docs/transformers/pr_16575/en/model_doc/reformer#transformers.ReformerModel"),c(vI,"href","/docs/transformers/pr_16575/en/model_doc/regnet#transformers.RegNetModel"),c(FI,"href","/docs/transformers/pr_16575/en/model_doc/rembert#transformers.RemBertModel"),c(TI,"href","/docs/transformers/pr_16575/en/model_doc/resnet#transformers.ResNetModel"),c(MI,"href","/docs/transformers/pr_16575/en/model_doc/retribert#transformers.RetriBertModel"),c(EI,"href","/docs/transformers/pr_16575/en/model_doc/roberta#transformers.RobertaModel"),c(CI,"href","/docs/transformers/pr_16575/en/model_doc/roformer#transformers.RoFormerModel"),c(wI,"href","/docs/transformers/pr_16575/en/model_doc/segformer#transformers.SegformerModel"),c(AI,"href","/docs/transformers/pr_16575/en/model_doc/sew#transformers.SEWModel"),c(yI,"href","/docs/transformers/pr_16575/en/model_doc/sew-d#transformers.SEWDModel"),c(LI,"href","/docs/transformers/pr_16575/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(xI,"href","/docs/transformers/pr_16575/en/model_doc/splinter#transformers.SplinterModel"),c($I,"href","/docs/transformers/pr_16575/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(kI,"href","/docs/transformers/pr_16575/en/model_doc/swin#transformers.SwinModel"),c(SI,"href","/docs/transformers/pr_16575/en/model_doc/t5#transformers.T5Model"),c(RI,"href","/docs/transformers/pr_16575/en/model_doc/tapas#transformers.TapasModel"),c(BI,"href","/docs/transformers/pr_16575/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(PI,"href","/docs/transformers/pr_16575/en/model_doc/unispeech#transformers.UniSpeechModel"),c(II,"href","/docs/transformers/pr_16575/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(qI,"href","/docs/transformers/pr_16575/en/model_doc/van#transformers.VanModel"),c(NI,"href","/docs/transformers/pr_16575/en/model_doc/vilt#transformers.ViltModel"),c(jI,"href","/docs/transformers/pr_16575/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(DI,"href","/docs/transformers/pr_16575/en/model_doc/visual_bert#transformers.VisualBertModel"),c(GI,"href","/docs/transformers/pr_16575/en/model_doc/vit#transformers.ViTModel"),c(OI,"href","/docs/transformers/pr_16575/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(VI,"href","/docs/transformers/pr_16575/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(XI,"href","/docs/transformers/pr_16575/en/model_doc/wavlm#transformers.WavLMModel"),c(zI,"href","/docs/transformers/pr_16575/en/model_doc/xglm#transformers.XGLMModel"),c(QI,"href","/docs/transformers/pr_16575/en/model_doc/xlm#transformers.XLMModel"),c(WI,"href","/docs/transformers/pr_16575/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(HI,"href","/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(UI,"href","/docs/transformers/pr_16575/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(JI,"href","/docs/transformers/pr_16575/en/model_doc/xlnet#transformers.XLNetModel"),c(YI,"href","/docs/transformers/pr_16575/en/model_doc/yolos#transformers.YolosModel"),c(KI,"href","/docs/transformers/pr_16575/en/model_doc/yoso#transformers.YosoModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cu,"id","transformers.AutoModelForPreTraining"),c(Cu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Cu,"href","#transformers.AutoModelForPreTraining"),c(bi,"class","relative group"),c(ZI,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eq,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oq,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rq,"href","/docs/transformers/pr_16575/en/model_doc/albert#transformers.AlbertForPreTraining"),c(tq,"href","/docs/transformers/pr_16575/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(aq,"href","/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertForPreTraining"),c(nq,"href","/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(sq,"href","/docs/transformers/pr_16575/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(lq,"href","/docs/transformers/pr_16575/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(iq,"href","/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(dq,"href","/docs/transformers/pr_16575/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(cq,"href","/docs/transformers/pr_16575/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(fq,"href","/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(mq,"href","/docs/transformers/pr_16575/en/model_doc/electra#transformers.ElectraForPreTraining"),c(gq,"href","/docs/transformers/pr_16575/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(hq,"href","/docs/transformers/pr_16575/en/model_doc/fnet#transformers.FNetForPreTraining"),c(pq,"href","/docs/transformers/pr_16575/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(uq,"href","/docs/transformers/pr_16575/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(_q,"href","/docs/transformers/pr_16575/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(bq,"href","/docs/transformers/pr_16575/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(vq,"href","/docs/transformers/pr_16575/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Fq,"href","/docs/transformers/pr_16575/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Tq,"href","/docs/transformers/pr_16575/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(Mq,"href","/docs/transformers/pr_16575/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(Eq,"href","/docs/transformers/pr_16575/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(Cq,"href","/docs/transformers/pr_16575/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(wq,"href","/docs/transformers/pr_16575/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Aq,"href","/docs/transformers/pr_16575/en/model_doc/retribert#transformers.RetriBertModel"),c(yq,"href","/docs/transformers/pr_16575/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Lq,"href","/docs/transformers/pr_16575/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(xq,"href","/docs/transformers/pr_16575/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c($q,"href","/docs/transformers/pr_16575/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(kq,"href","/docs/transformers/pr_16575/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Sq,"href","/docs/transformers/pr_16575/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(Rq,"href","/docs/transformers/pr_16575/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(Bq,"href","/docs/transformers/pr_16575/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(Pq,"href","/docs/transformers/pr_16575/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(Iq,"href","/docs/transformers/pr_16575/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(qq,"href","/docs/transformers/pr_16575/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Nq,"href","/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(jq,"href","/docs/transformers/pr_16575/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Dq,"href","/docs/transformers/pr_16575/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g_,"id","transformers.AutoModelForCausalLM"),c(g_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g_,"href","#transformers.AutoModelForCausalLM"),c(Ti,"class","relative group"),c(Gq,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oq,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vq,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xq,"href","/docs/transformers/pr_16575/en/model_doc/bart#transformers.BartForCausalLM"),c(zq,"href","/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertLMHeadModel"),c(Qq,"href","/docs/transformers/pr_16575/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(Wq,"href","/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(Hq,"href","/docs/transformers/pr_16575/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(Uq,"href","/docs/transformers/pr_16575/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(Jq,"href","/docs/transformers/pr_16575/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Yq,"href","/docs/transformers/pr_16575/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(Kq,"href","/docs/transformers/pr_16575/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Zq,"href","/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(eN,"href","/docs/transformers/pr_16575/en/model_doc/electra#transformers.ElectraForCausalLM"),c(oN,"href","/docs/transformers/pr_16575/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(rN,"href","/docs/transformers/pr_16575/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(tN,"href","/docs/transformers/pr_16575/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(aN,"href","/docs/transformers/pr_16575/en/model_doc/marian#transformers.MarianForCausalLM"),c(nN,"href","/docs/transformers/pr_16575/en/model_doc/mbart#transformers.MBartForCausalLM"),c(sN,"href","/docs/transformers/pr_16575/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(lN,"href","/docs/transformers/pr_16575/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(iN,"href","/docs/transformers/pr_16575/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(dN,"href","/docs/transformers/pr_16575/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(cN,"href","/docs/transformers/pr_16575/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(fN,"href","/docs/transformers/pr_16575/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(mN,"href","/docs/transformers/pr_16575/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(gN,"href","/docs/transformers/pr_16575/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(hN,"href","/docs/transformers/pr_16575/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(pN,"href","/docs/transformers/pr_16575/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(uN,"href","/docs/transformers/pr_16575/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(_N,"href","/docs/transformers/pr_16575/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(bN,"href","/docs/transformers/pr_16575/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(vN,"href","/docs/transformers/pr_16575/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(FN,"href","/docs/transformers/pr_16575/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(TN,"href","/docs/transformers/pr_16575/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(MN,"href","/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(EN,"href","/docs/transformers/pr_16575/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(CN,"href","/docs/transformers/pr_16575/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K_,"id","transformers.AutoModelForMaskedLM"),c(K_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K_,"href","#transformers.AutoModelForMaskedLM"),c(Ci,"class","relative group"),c(wN,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AN,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yN,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LN,"href","/docs/transformers/pr_16575/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(xN,"href","/docs/transformers/pr_16575/en/model_doc/bart#transformers.BartForConditionalGeneration"),c($N,"href","/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertForMaskedLM"),c(kN,"href","/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(SN,"href","/docs/transformers/pr_16575/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(RN,"href","/docs/transformers/pr_16575/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(BN,"href","/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(PN,"href","/docs/transformers/pr_16575/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(IN,"href","/docs/transformers/pr_16575/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(qN,"href","/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(NN,"href","/docs/transformers/pr_16575/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(jN,"href","/docs/transformers/pr_16575/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(DN,"href","/docs/transformers/pr_16575/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(GN,"href","/docs/transformers/pr_16575/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(ON,"href","/docs/transformers/pr_16575/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(VN,"href","/docs/transformers/pr_16575/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(XN,"href","/docs/transformers/pr_16575/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(zN,"href","/docs/transformers/pr_16575/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(QN,"href","/docs/transformers/pr_16575/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(WN,"href","/docs/transformers/pr_16575/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(HN,"href","/docs/transformers/pr_16575/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(UN,"href","/docs/transformers/pr_16575/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(JN,"href","/docs/transformers/pr_16575/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(YN,"href","/docs/transformers/pr_16575/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(KN,"href","/docs/transformers/pr_16575/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(ZN,"href","/docs/transformers/pr_16575/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(ej,"href","/docs/transformers/pr_16575/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(oj,"href","/docs/transformers/pr_16575/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(rj,"href","/docs/transformers/pr_16575/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(tj,"href","/docs/transformers/pr_16575/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(aj,"href","/docs/transformers/pr_16575/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(nj,"href","/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(sj,"href","/docs/transformers/pr_16575/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(lj,"href","/docs/transformers/pr_16575/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q5,"id","transformers.AutoModelForSeq2SeqLM"),c(q5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q5,"href","#transformers.AutoModelForSeq2SeqLM"),c(yi,"class","relative group"),c(ij,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dj,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cj,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fj,"href","/docs/transformers/pr_16575/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(mj,"href","/docs/transformers/pr_16575/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(gj,"href","/docs/transformers/pr_16575/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(hj,"href","/docs/transformers/pr_16575/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(pj,"href","/docs/transformers/pr_16575/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(uj,"href","/docs/transformers/pr_16575/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(_j,"href","/docs/transformers/pr_16575/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(bj,"href","/docs/transformers/pr_16575/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(vj,"href","/docs/transformers/pr_16575/en/model_doc/marian#transformers.MarianMTModel"),c(Fj,"href","/docs/transformers/pr_16575/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Tj,"href","/docs/transformers/pr_16575/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(Mj,"href","/docs/transformers/pr_16575/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(Ej,"href","/docs/transformers/pr_16575/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(Cj,"href","/docs/transformers/pr_16575/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(wj,"href","/docs/transformers/pr_16575/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Aj,"href","/docs/transformers/pr_16575/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(yj,"href","/docs/transformers/pr_16575/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a1,"id","transformers.AutoModelForSequenceClassification"),c(a1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a1,"href","#transformers.AutoModelForSequenceClassification"),c($i,"class","relative group"),c(Lj,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xj,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($j,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kj,"href","/docs/transformers/pr_16575/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(Sj,"href","/docs/transformers/pr_16575/en/model_doc/bart#transformers.BartForSequenceClassification"),c(Rj,"href","/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertForSequenceClassification"),c(Bj,"href","/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(Pj,"href","/docs/transformers/pr_16575/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(Ij,"href","/docs/transformers/pr_16575/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(qj,"href","/docs/transformers/pr_16575/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(Nj,"href","/docs/transformers/pr_16575/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(jj,"href","/docs/transformers/pr_16575/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(Dj,"href","/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(Gj,"href","/docs/transformers/pr_16575/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(Oj,"href","/docs/transformers/pr_16575/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(Vj,"href","/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(Xj,"href","/docs/transformers/pr_16575/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(zj,"href","/docs/transformers/pr_16575/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(Qj,"href","/docs/transformers/pr_16575/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(Wj,"href","/docs/transformers/pr_16575/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(Hj,"href","/docs/transformers/pr_16575/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(Uj,"href","/docs/transformers/pr_16575/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(Jj,"href","/docs/transformers/pr_16575/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(Yj,"href","/docs/transformers/pr_16575/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(Kj,"href","/docs/transformers/pr_16575/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(Zj,"href","/docs/transformers/pr_16575/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(eD,"href","/docs/transformers/pr_16575/en/model_doc/led#transformers.LEDForSequenceClassification"),c(oD,"href","/docs/transformers/pr_16575/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(rD,"href","/docs/transformers/pr_16575/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(tD,"href","/docs/transformers/pr_16575/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(aD,"href","/docs/transformers/pr_16575/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(nD,"href","/docs/transformers/pr_16575/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(sD,"href","/docs/transformers/pr_16575/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(lD,"href","/docs/transformers/pr_16575/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(iD,"href","/docs/transformers/pr_16575/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(dD,"href","/docs/transformers/pr_16575/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(cD,"href","/docs/transformers/pr_16575/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(fD,"href","/docs/transformers/pr_16575/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(mD,"href","/docs/transformers/pr_16575/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(gD,"href","/docs/transformers/pr_16575/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(hD,"href","/docs/transformers/pr_16575/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(pD,"href","/docs/transformers/pr_16575/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(uD,"href","/docs/transformers/pr_16575/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(_D,"href","/docs/transformers/pr_16575/en/model_doc/bart#transformers.BartForSequenceClassification"),c(bD,"href","/docs/transformers/pr_16575/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(vD,"href","/docs/transformers/pr_16575/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(FD,"href","/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(TD,"href","/docs/transformers/pr_16575/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(MD,"href","/docs/transformers/pr_16575/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(ED,"href","/docs/transformers/pr_16575/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ob,"id","transformers.AutoModelForMultipleChoice"),c(ob,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ob,"href","#transformers.AutoModelForMultipleChoice"),c(Ri,"class","relative group"),c(CD,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wD,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AD,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yD,"href","/docs/transformers/pr_16575/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(LD,"href","/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertForMultipleChoice"),c(xD,"href","/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c($D,"href","/docs/transformers/pr_16575/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(kD,"href","/docs/transformers/pr_16575/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(SD,"href","/docs/transformers/pr_16575/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(RD,"href","/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(BD,"href","/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(PD,"href","/docs/transformers/pr_16575/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(ID,"href","/docs/transformers/pr_16575/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(qD,"href","/docs/transformers/pr_16575/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(ND,"href","/docs/transformers/pr_16575/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(jD,"href","/docs/transformers/pr_16575/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(DD,"href","/docs/transformers/pr_16575/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(GD,"href","/docs/transformers/pr_16575/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(OD,"href","/docs/transformers/pr_16575/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(VD,"href","/docs/transformers/pr_16575/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(XD,"href","/docs/transformers/pr_16575/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(zD,"href","/docs/transformers/pr_16575/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(QD,"href","/docs/transformers/pr_16575/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(WD,"href","/docs/transformers/pr_16575/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(HD,"href","/docs/transformers/pr_16575/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(UD,"href","/docs/transformers/pr_16575/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(JD,"href","/docs/transformers/pr_16575/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(YD,"href","/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(KD,"href","/docs/transformers/pr_16575/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(ZD,"href","/docs/transformers/pr_16575/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(eG,"href","/docs/transformers/pr_16575/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rb,"id","transformers.AutoModelForNextSentencePrediction"),c(Rb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rb,"href","#transformers.AutoModelForNextSentencePrediction"),c(Ii,"class","relative group"),c(oG,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rG,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tG,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aG,"href","/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(nG,"href","/docs/transformers/pr_16575/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(sG,"href","/docs/transformers/pr_16575/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(lG,"href","/docs/transformers/pr_16575/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(iG,"href","/docs/transformers/pr_16575/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ob,"id","transformers.AutoModelForTokenClassification"),c(Ob,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ob,"href","#transformers.AutoModelForTokenClassification"),c(ji,"class","relative group"),c(dG,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cG,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fG,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mG,"href","/docs/transformers/pr_16575/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(gG,"href","/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertForTokenClassification"),c(hG,"href","/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(pG,"href","/docs/transformers/pr_16575/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(uG,"href","/docs/transformers/pr_16575/en/model_doc/canine#transformers.CanineForTokenClassification"),c(_G,"href","/docs/transformers/pr_16575/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(bG,"href","/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(vG,"href","/docs/transformers/pr_16575/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(FG,"href","/docs/transformers/pr_16575/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(TG,"href","/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(MG,"href","/docs/transformers/pr_16575/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(EG,"href","/docs/transformers/pr_16575/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(CG,"href","/docs/transformers/pr_16575/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(wG,"href","/docs/transformers/pr_16575/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(AG,"href","/docs/transformers/pr_16575/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(yG,"href","/docs/transformers/pr_16575/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(LG,"href","/docs/transformers/pr_16575/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(xG,"href","/docs/transformers/pr_16575/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c($G,"href","/docs/transformers/pr_16575/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(kG,"href","/docs/transformers/pr_16575/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(SG,"href","/docs/transformers/pr_16575/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(RG,"href","/docs/transformers/pr_16575/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(BG,"href","/docs/transformers/pr_16575/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(PG,"href","/docs/transformers/pr_16575/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(IG,"href","/docs/transformers/pr_16575/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(qG,"href","/docs/transformers/pr_16575/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(NG,"href","/docs/transformers/pr_16575/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(jG,"href","/docs/transformers/pr_16575/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(DG,"href","/docs/transformers/pr_16575/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(GG,"href","/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(OG,"href","/docs/transformers/pr_16575/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(VG,"href","/docs/transformers/pr_16575/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(XG,"href","/docs/transformers/pr_16575/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w2,"id","transformers.AutoModelForQuestionAnswering"),c(w2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w2,"href","#transformers.AutoModelForQuestionAnswering"),c(Oi,"class","relative group"),c(zG,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QG,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WG,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HG,"href","/docs/transformers/pr_16575/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(UG,"href","/docs/transformers/pr_16575/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(JG,"href","/docs/transformers/pr_16575/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(YG,"href","/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(KG,"href","/docs/transformers/pr_16575/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(ZG,"href","/docs/transformers/pr_16575/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(eO,"href","/docs/transformers/pr_16575/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(oO,"href","/docs/transformers/pr_16575/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(rO,"href","/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(tO,"href","/docs/transformers/pr_16575/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(aO,"href","/docs/transformers/pr_16575/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(nO,"href","/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(sO,"href","/docs/transformers/pr_16575/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(lO,"href","/docs/transformers/pr_16575/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(iO,"href","/docs/transformers/pr_16575/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(dO,"href","/docs/transformers/pr_16575/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(cO,"href","/docs/transformers/pr_16575/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(fO,"href","/docs/transformers/pr_16575/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(mO,"href","/docs/transformers/pr_16575/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(gO,"href","/docs/transformers/pr_16575/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(hO,"href","/docs/transformers/pr_16575/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(pO,"href","/docs/transformers/pr_16575/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(uO,"href","/docs/transformers/pr_16575/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(_O,"href","/docs/transformers/pr_16575/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(bO,"href","/docs/transformers/pr_16575/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(vO,"href","/docs/transformers/pr_16575/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(FO,"href","/docs/transformers/pr_16575/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(TO,"href","/docs/transformers/pr_16575/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(MO,"href","/docs/transformers/pr_16575/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(EO,"href","/docs/transformers/pr_16575/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(CO,"href","/docs/transformers/pr_16575/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(wO,"href","/docs/transformers/pr_16575/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(AO,"href","/docs/transformers/pr_16575/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(yO,"href","/docs/transformers/pr_16575/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(LO,"href","/docs/transformers/pr_16575/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(xO,"href","/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c($O,"href","/docs/transformers/pr_16575/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(kO,"href","/docs/transformers/pr_16575/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(SO,"href","/docs/transformers/pr_16575/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hv,"id","transformers.AutoModelForTableQuestionAnswering"),c(hv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(zi,"class","relative group"),c(RO,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BO,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PO,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IO,"href","/docs/transformers/pr_16575/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vv,"id","transformers.AutoModelForImageClassification"),c(vv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vv,"href","#transformers.AutoModelForImageClassification"),c(Hi,"class","relative group"),c(qO,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NO,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jO,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DO,"href","/docs/transformers/pr_16575/en/model_doc/beit#transformers.BeitForImageClassification"),c(GO,"href","/docs/transformers/pr_16575/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(OO,"href","/docs/transformers/pr_16575/en/model_doc/cvt#transformers.CvtForImageClassification"),c(VO,"href","/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(XO,"href","/docs/transformers/pr_16575/en/model_doc/deit#transformers.DeiTForImageClassification"),c(zO,"href","/docs/transformers/pr_16575/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(QO,"href","/docs/transformers/pr_16575/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(WO,"href","/docs/transformers/pr_16575/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(HO,"href","/docs/transformers/pr_16575/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(UO,"href","/docs/transformers/pr_16575/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(JO,"href","/docs/transformers/pr_16575/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(YO,"href","/docs/transformers/pr_16575/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(KO,"href","/docs/transformers/pr_16575/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(ZO,"href","/docs/transformers/pr_16575/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(eV,"href","/docs/transformers/pr_16575/en/model_doc/swin#transformers.SwinForImageClassification"),c(oV,"href","/docs/transformers/pr_16575/en/model_doc/van#transformers.VanForImageClassification"),c(rV,"href","/docs/transformers/pr_16575/en/model_doc/vit#transformers.ViTForImageClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pv,"id","transformers.AutoModelForVision2Seq"),c(Pv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pv,"href","#transformers.AutoModelForVision2Seq"),c(Yi,"class","relative group"),c(tV,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aV,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nV,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sV,"href","/docs/transformers/pr_16575/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dv,"id","transformers.AutoModelForAudioClassification"),c(Dv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Dv,"href","#transformers.AutoModelForAudioClassification"),c(ed,"class","relative group"),c(lV,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iV,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dV,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cV,"href","/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(fV,"href","/docs/transformers/pr_16575/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(mV,"href","/docs/transformers/pr_16575/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(gV,"href","/docs/transformers/pr_16575/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(hV,"href","/docs/transformers/pr_16575/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(pV,"href","/docs/transformers/pr_16575/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(uV,"href","/docs/transformers/pr_16575/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(_V,"href","/docs/transformers/pr_16575/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kv,"id","transformers.AutoModelForAudioFrameClassification"),c(Kv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kv,"href","#transformers.AutoModelForAudioFrameClassification"),c(td,"class","relative group"),c(bV,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vV,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FV,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TV,"href","/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(MV,"href","/docs/transformers/pr_16575/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(EV,"href","/docs/transformers/pr_16575/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(CV,"href","/docs/transformers/pr_16575/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sF,"id","transformers.AutoModelForCTC"),c(sF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sF,"href","#transformers.AutoModelForCTC"),c(sd,"class","relative group"),c(wV,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AV,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yV,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LV,"href","/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(xV,"href","/docs/transformers/pr_16575/en/model_doc/hubert#transformers.HubertForCTC"),c($V,"href","/docs/transformers/pr_16575/en/model_doc/sew#transformers.SEWForCTC"),c(kV,"href","/docs/transformers/pr_16575/en/model_doc/sew-d#transformers.SEWDForCTC"),c(SV,"href","/docs/transformers/pr_16575/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(RV,"href","/docs/transformers/pr_16575/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(BV,"href","/docs/transformers/pr_16575/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(PV,"href","/docs/transformers/pr_16575/en/model_doc/wavlm#transformers.WavLMForCTC"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(bF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(dd,"class","relative group"),c(IV,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qV,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NV,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jV,"href","/docs/transformers/pr_16575/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(DV,"href","/docs/transformers/pr_16575/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CF,"id","transformers.AutoModelForAudioXVector"),c(CF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CF,"href","#transformers.AutoModelForAudioXVector"),c(md,"class","relative group"),c(GV,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OV,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VV,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XV,"href","/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(zV,"href","/docs/transformers/pr_16575/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(QV,"href","/docs/transformers/pr_16575/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(WV,"href","/docs/transformers/pr_16575/en/model_doc/wavlm#transformers.WavLMForXVector"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SF,"id","transformers.AutoModelForMaskedImageModeling"),c(SF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SF,"href","#transformers.AutoModelForMaskedImageModeling"),c(pd,"class","relative group"),c(HV,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UV,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JV,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YV,"href","/docs/transformers/pr_16575/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(KV,"href","/docs/transformers/pr_16575/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(ZV,"href","/docs/transformers/pr_16575/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jF,"id","transformers.AutoModelForObjectDetection"),c(jF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jF,"href","#transformers.AutoModelForObjectDetection"),c(vd,"class","relative group"),c(eX,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oX,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rX,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tX,"href","/docs/transformers/pr_16575/en/model_doc/detr#transformers.DetrForObjectDetection"),c(aX,"href","/docs/transformers/pr_16575/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zF,"id","transformers.AutoModelForImageSegmentation"),c(zF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zF,"href","#transformers.AutoModelForImageSegmentation"),c(Md,"class","relative group"),c(nX,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sX,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lX,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iX,"href","/docs/transformers/pr_16575/en/model_doc/detr#transformers.DetrForSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JF,"id","transformers.AutoModelForSemanticSegmentation"),c(JF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JF,"href","#transformers.AutoModelForSemanticSegmentation"),c(wd,"class","relative group"),c(dX,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cX,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fX,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mX,"href","/docs/transformers/pr_16575/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(gX,"href","/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(hX,"href","/docs/transformers/pr_16575/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(pX,"href","/docs/transformers/pr_16575/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a6,"id","transformers.AutoModelForInstanceSegmentation"),c(a6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a6,"href","#transformers.AutoModelForInstanceSegmentation"),c(Ld,"class","relative group"),c(uX,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_X,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bX,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vX,"href","/docs/transformers/pr_16575/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d6,"id","transformers.TFAutoModel"),c(d6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d6,"href","#transformers.TFAutoModel"),c(kd,"class","relative group"),c(FX,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TX,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MX,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EX,"href","/docs/transformers/pr_16575/en/model_doc/albert#transformers.TFAlbertModel"),c(CX,"href","/docs/transformers/pr_16575/en/model_doc/bart#transformers.TFBartModel"),c(wX,"href","/docs/transformers/pr_16575/en/model_doc/bert#transformers.TFBertModel"),c(AX,"href","/docs/transformers/pr_16575/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(yX,"href","/docs/transformers/pr_16575/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(LX,"href","/docs/transformers/pr_16575/en/model_doc/camembert#transformers.TFCamembertModel"),c(xX,"href","/docs/transformers/pr_16575/en/model_doc/clip#transformers.TFCLIPModel"),c($X,"href","/docs/transformers/pr_16575/en/model_doc/convbert#transformers.TFConvBertModel"),c(kX,"href","/docs/transformers/pr_16575/en/model_doc/convnext#transformers.TFConvNextModel"),c(SX,"href","/docs/transformers/pr_16575/en/model_doc/ctrl#transformers.TFCTRLModel"),c(RX,"href","/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(BX,"href","/docs/transformers/pr_16575/en/model_doc/deberta#transformers.TFDebertaModel"),c(PX,"href","/docs/transformers/pr_16575/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(IX,"href","/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(qX,"href","/docs/transformers/pr_16575/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(NX,"href","/docs/transformers/pr_16575/en/model_doc/electra#transformers.TFElectraModel"),c(jX,"href","/docs/transformers/pr_16575/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(DX,"href","/docs/transformers/pr_16575/en/model_doc/funnel#transformers.TFFunnelModel"),c(GX,"href","/docs/transformers/pr_16575/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(OX,"href","/docs/transformers/pr_16575/en/model_doc/gpt2#transformers.TFGPT2Model"),c(VX,"href","/docs/transformers/pr_16575/en/model_doc/gptj#transformers.TFGPTJModel"),c(XX,"href","/docs/transformers/pr_16575/en/model_doc/hubert#transformers.TFHubertModel"),c(zX,"href","/docs/transformers/pr_16575/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(QX,"href","/docs/transformers/pr_16575/en/model_doc/led#transformers.TFLEDModel"),c(WX,"href","/docs/transformers/pr_16575/en/model_doc/longformer#transformers.TFLongformerModel"),c(HX,"href","/docs/transformers/pr_16575/en/model_doc/lxmert#transformers.TFLxmertModel"),c(UX,"href","/docs/transformers/pr_16575/en/model_doc/marian#transformers.TFMarianModel"),c(JX,"href","/docs/transformers/pr_16575/en/model_doc/mbart#transformers.TFMBartModel"),c(YX,"href","/docs/transformers/pr_16575/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(KX,"href","/docs/transformers/pr_16575/en/model_doc/mpnet#transformers.TFMPNetModel"),c(ZX,"href","/docs/transformers/pr_16575/en/model_doc/mt5#transformers.TFMT5Model"),c(ez,"href","/docs/transformers/pr_16575/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(oz,"href","/docs/transformers/pr_16575/en/model_doc/pegasus#transformers.TFPegasusModel"),c(rz,"href","/docs/transformers/pr_16575/en/model_doc/rembert#transformers.TFRemBertModel"),c(tz,"href","/docs/transformers/pr_16575/en/model_doc/roberta#transformers.TFRobertaModel"),c(az,"href","/docs/transformers/pr_16575/en/model_doc/roformer#transformers.TFRoFormerModel"),c(nz,"href","/docs/transformers/pr_16575/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(sz,"href","/docs/transformers/pr_16575/en/model_doc/t5#transformers.TFT5Model"),c(lz,"href","/docs/transformers/pr_16575/en/model_doc/tapas#transformers.TFTapasModel"),c(iz,"href","/docs/transformers/pr_16575/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(dz,"href","/docs/transformers/pr_16575/en/model_doc/vit#transformers.TFViTModel"),c(cz,"href","/docs/transformers/pr_16575/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(fz,"href","/docs/transformers/pr_16575/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(mz,"href","/docs/transformers/pr_16575/en/model_doc/xlm#transformers.TFXLMModel"),c(gz,"href","/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(hz,"href","/docs/transformers/pr_16575/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rT,"id","transformers.TFAutoModelForPreTraining"),c(rT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rT,"href","#transformers.TFAutoModelForPreTraining"),c(Bd,"class","relative group"),c(pz,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uz,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_z,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bz,"href","/docs/transformers/pr_16575/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(vz,"href","/docs/transformers/pr_16575/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(Fz,"href","/docs/transformers/pr_16575/en/model_doc/bert#transformers.TFBertForPreTraining"),c(Tz,"href","/docs/transformers/pr_16575/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(Mz,"href","/docs/transformers/pr_16575/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Ez,"href","/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(Cz,"href","/docs/transformers/pr_16575/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(wz,"href","/docs/transformers/pr_16575/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(Az,"href","/docs/transformers/pr_16575/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(yz,"href","/docs/transformers/pr_16575/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(Lz,"href","/docs/transformers/pr_16575/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(xz,"href","/docs/transformers/pr_16575/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c($z,"href","/docs/transformers/pr_16575/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(kz,"href","/docs/transformers/pr_16575/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(Sz,"href","/docs/transformers/pr_16575/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(Rz,"href","/docs/transformers/pr_16575/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(Bz,"href","/docs/transformers/pr_16575/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Pz,"href","/docs/transformers/pr_16575/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(Iz,"href","/docs/transformers/pr_16575/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(qz,"href","/docs/transformers/pr_16575/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(Nz,"href","/docs/transformers/pr_16575/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(jz,"href","/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Dz,"href","/docs/transformers/pr_16575/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LT,"id","transformers.TFAutoModelForCausalLM"),c(LT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LT,"href","#transformers.TFAutoModelForCausalLM"),c(qd,"class","relative group"),c(Gz,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oz,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vz,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xz,"href","/docs/transformers/pr_16575/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(zz,"href","/docs/transformers/pr_16575/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(Qz,"href","/docs/transformers/pr_16575/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Wz,"href","/docs/transformers/pr_16575/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(Hz,"href","/docs/transformers/pr_16575/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(Uz,"href","/docs/transformers/pr_16575/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(Jz,"href","/docs/transformers/pr_16575/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(Yz,"href","/docs/transformers/pr_16575/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(Kz,"href","/docs/transformers/pr_16575/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(Zz,"href","/docs/transformers/pr_16575/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(eQ,"href","/docs/transformers/pr_16575/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(oQ,"href","/docs/transformers/pr_16575/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VT,"id","transformers.TFAutoModelForImageClassification"),c(VT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VT,"href","#transformers.TFAutoModelForImageClassification"),c(Dd,"class","relative group"),c(rQ,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tQ,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aQ,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nQ,"href","/docs/transformers/pr_16575/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(sQ,"href","/docs/transformers/pr_16575/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(lQ,"href","/docs/transformers/pr_16575/en/model_doc/vit#transformers.TFViTForImageClassification"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UT,"id","transformers.TFAutoModelForMaskedLM"),c(UT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UT,"href","#transformers.TFAutoModelForMaskedLM"),c(Xd,"class","relative group"),c(iQ,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dQ,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cQ,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fQ,"href","/docs/transformers/pr_16575/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(mQ,"href","/docs/transformers/pr_16575/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(gQ,"href","/docs/transformers/pr_16575/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(hQ,"href","/docs/transformers/pr_16575/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(pQ,"href","/docs/transformers/pr_16575/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(uQ,"href","/docs/transformers/pr_16575/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(_Q,"href","/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(bQ,"href","/docs/transformers/pr_16575/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(vQ,"href","/docs/transformers/pr_16575/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(FQ,"href","/docs/transformers/pr_16575/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(TQ,"href","/docs/transformers/pr_16575/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(MQ,"href","/docs/transformers/pr_16575/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(EQ,"href","/docs/transformers/pr_16575/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(CQ,"href","/docs/transformers/pr_16575/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(wQ,"href","/docs/transformers/pr_16575/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(AQ,"href","/docs/transformers/pr_16575/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(yQ,"href","/docs/transformers/pr_16575/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(LQ,"href","/docs/transformers/pr_16575/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(xQ,"href","/docs/transformers/pr_16575/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c($Q,"href","/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b7,"id","transformers.TFAutoModelForSeq2SeqLM"),c(b7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b7,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Wd,"class","relative group"),c(kQ,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SQ,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RQ,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BQ,"href","/docs/transformers/pr_16575/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(PQ,"href","/docs/transformers/pr_16575/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(IQ,"href","/docs/transformers/pr_16575/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(qQ,"href","/docs/transformers/pr_16575/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(NQ,"href","/docs/transformers/pr_16575/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(jQ,"href","/docs/transformers/pr_16575/en/model_doc/marian#transformers.TFMarianMTModel"),c(DQ,"href","/docs/transformers/pr_16575/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(GQ,"href","/docs/transformers/pr_16575/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(OQ,"href","/docs/transformers/pr_16575/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(VQ,"href","/docs/transformers/pr_16575/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k7,"id","transformers.TFAutoModelForSequenceClassification"),c(k7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k7,"href","#transformers.TFAutoModelForSequenceClassification"),c(Jd,"class","relative group"),c(XQ,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zQ,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QQ,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WQ,"href","/docs/transformers/pr_16575/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(HQ,"href","/docs/transformers/pr_16575/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(UQ,"href","/docs/transformers/pr_16575/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(JQ,"href","/docs/transformers/pr_16575/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(YQ,"href","/docs/transformers/pr_16575/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(KQ,"href","/docs/transformers/pr_16575/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(ZQ,"href","/docs/transformers/pr_16575/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(eW,"href","/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(oW,"href","/docs/transformers/pr_16575/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(rW,"href","/docs/transformers/pr_16575/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(tW,"href","/docs/transformers/pr_16575/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(aW,"href","/docs/transformers/pr_16575/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(nW,"href","/docs/transformers/pr_16575/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(sW,"href","/docs/transformers/pr_16575/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(lW,"href","/docs/transformers/pr_16575/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(iW,"href","/docs/transformers/pr_16575/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(dW,"href","/docs/transformers/pr_16575/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(cW,"href","/docs/transformers/pr_16575/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(fW,"href","/docs/transformers/pr_16575/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(mW,"href","/docs/transformers/pr_16575/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(gW,"href","/docs/transformers/pr_16575/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(hW,"href","/docs/transformers/pr_16575/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(pW,"href","/docs/transformers/pr_16575/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(uW,"href","/docs/transformers/pr_16575/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(_W,"href","/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(bW,"href","/docs/transformers/pr_16575/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sM,"id","transformers.TFAutoModelForMultipleChoice"),c(sM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sM,"href","#transformers.TFAutoModelForMultipleChoice"),c(Zd,"class","relative group"),c(vW,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FW,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TW,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MW,"href","/docs/transformers/pr_16575/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(EW,"href","/docs/transformers/pr_16575/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(CW,"href","/docs/transformers/pr_16575/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(wW,"href","/docs/transformers/pr_16575/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(AW,"href","/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(yW,"href","/docs/transformers/pr_16575/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(LW,"href","/docs/transformers/pr_16575/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(xW,"href","/docs/transformers/pr_16575/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c($W,"href","/docs/transformers/pr_16575/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(kW,"href","/docs/transformers/pr_16575/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(SW,"href","/docs/transformers/pr_16575/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(RW,"href","/docs/transformers/pr_16575/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(BW,"href","/docs/transformers/pr_16575/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(PW,"href","/docs/transformers/pr_16575/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(IW,"href","/docs/transformers/pr_16575/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(qW,"href","/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(NW,"href","/docs/transformers/pr_16575/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AM,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(AM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(rc,"class","relative group"),c(jW,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DW,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GW,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OW,"href","/docs/transformers/pr_16575/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($M,"id","transformers.TFAutoModelForTokenClassification"),c($M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($M,"href","#transformers.TFAutoModelForTokenClassification"),c(nc,"class","relative group"),c(VW,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XW,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zW,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QW,"href","/docs/transformers/pr_16575/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(WW,"href","/docs/transformers/pr_16575/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(HW,"href","/docs/transformers/pr_16575/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(UW,"href","/docs/transformers/pr_16575/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(JW,"href","/docs/transformers/pr_16575/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(YW,"href","/docs/transformers/pr_16575/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(KW,"href","/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(ZW,"href","/docs/transformers/pr_16575/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(eH,"href","/docs/transformers/pr_16575/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(oH,"href","/docs/transformers/pr_16575/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(rH,"href","/docs/transformers/pr_16575/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(tH,"href","/docs/transformers/pr_16575/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(aH,"href","/docs/transformers/pr_16575/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(nH,"href","/docs/transformers/pr_16575/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(sH,"href","/docs/transformers/pr_16575/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(lH,"href","/docs/transformers/pr_16575/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(iH,"href","/docs/transformers/pr_16575/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(dH,"href","/docs/transformers/pr_16575/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(cH,"href","/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(fH,"href","/docs/transformers/pr_16575/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZM,"id","transformers.TFAutoModelForQuestionAnswering"),c(ZM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZM,"href","#transformers.TFAutoModelForQuestionAnswering"),c(ic,"class","relative group"),c(mH,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gH,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hH,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pH,"href","/docs/transformers/pr_16575/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(uH,"href","/docs/transformers/pr_16575/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(_H,"href","/docs/transformers/pr_16575/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(bH,"href","/docs/transformers/pr_16575/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(vH,"href","/docs/transformers/pr_16575/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(FH,"href","/docs/transformers/pr_16575/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(TH,"href","/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(MH,"href","/docs/transformers/pr_16575/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(EH,"href","/docs/transformers/pr_16575/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(CH,"href","/docs/transformers/pr_16575/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(wH,"href","/docs/transformers/pr_16575/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(AH,"href","/docs/transformers/pr_16575/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(yH,"href","/docs/transformers/pr_16575/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(LH,"href","/docs/transformers/pr_16575/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(xH,"href","/docs/transformers/pr_16575/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c($H,"href","/docs/transformers/pr_16575/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(kH,"href","/docs/transformers/pr_16575/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(SH,"href","/docs/transformers/pr_16575/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(RH,"href","/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(BH,"href","/docs/transformers/pr_16575/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M4,"id","transformers.TFAutoModelForVision2Seq"),c(M4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M4,"href","#transformers.TFAutoModelForVision2Seq"),c(fc,"class","relative group"),c(PH,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IH,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qH,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NH,"href","/docs/transformers/pr_16575/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A4,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(A4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A4,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(hc,"class","relative group"),c(jH,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DH,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GH,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OH,"href","/docs/transformers/pr_16575/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($4,"id","transformers.FlaxAutoModel"),c($4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($4,"href","#transformers.FlaxAutoModel"),c(_c,"class","relative group"),c(VH,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XH,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zH,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QH,"href","/docs/transformers/pr_16575/en/model_doc/albert#transformers.FlaxAlbertModel"),c(WH,"href","/docs/transformers/pr_16575/en/model_doc/bart#transformers.FlaxBartModel"),c(HH,"href","/docs/transformers/pr_16575/en/model_doc/beit#transformers.FlaxBeitModel"),c(UH,"href","/docs/transformers/pr_16575/en/model_doc/bert#transformers.FlaxBertModel"),c(JH,"href","/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(YH,"href","/docs/transformers/pr_16575/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(KH,"href","/docs/transformers/pr_16575/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(ZH,"href","/docs/transformers/pr_16575/en/model_doc/clip#transformers.FlaxCLIPModel"),c(eU,"href","/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(oU,"href","/docs/transformers/pr_16575/en/model_doc/electra#transformers.FlaxElectraModel"),c(rU,"href","/docs/transformers/pr_16575/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(tU,"href","/docs/transformers/pr_16575/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(aU,"href","/docs/transformers/pr_16575/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(nU,"href","/docs/transformers/pr_16575/en/model_doc/marian#transformers.FlaxMarianModel"),c(sU,"href","/docs/transformers/pr_16575/en/model_doc/mbart#transformers.FlaxMBartModel"),c(lU,"href","/docs/transformers/pr_16575/en/model_doc/mt5#transformers.FlaxMT5Model"),c(iU,"href","/docs/transformers/pr_16575/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(dU,"href","/docs/transformers/pr_16575/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(cU,"href","/docs/transformers/pr_16575/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(fU,"href","/docs/transformers/pr_16575/en/model_doc/t5#transformers.FlaxT5Model"),c(mU,"href","/docs/transformers/pr_16575/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(gU,"href","/docs/transformers/pr_16575/en/model_doc/vit#transformers.FlaxViTModel"),c(hU,"href","/docs/transformers/pr_16575/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(pU,"href","/docs/transformers/pr_16575/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(uU,"href","/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aE,"id","transformers.FlaxAutoModelForCausalLM"),c(aE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aE,"href","#transformers.FlaxAutoModelForCausalLM"),c(Fc,"class","relative group"),c(_U,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bU,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vU,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FU,"href","/docs/transformers/pr_16575/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(TU,"href","/docs/transformers/pr_16575/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(MU,"href","/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(EU,"href","/docs/transformers/pr_16575/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(CU,"href","/docs/transformers/pr_16575/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(wU,"href","/docs/transformers/pr_16575/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(AU,"href","/docs/transformers/pr_16575/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(yU,"href","/docs/transformers/pr_16575/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(LU,"href","/docs/transformers/pr_16575/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uE,"id","transformers.FlaxAutoModelForPreTraining"),c(uE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uE,"href","#transformers.FlaxAutoModelForPreTraining"),c(Ec,"class","relative group"),c(xU,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($U,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kU,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SU,"href","/docs/transformers/pr_16575/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(RU,"href","/docs/transformers/pr_16575/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(BU,"href","/docs/transformers/pr_16575/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(PU,"href","/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(IU,"href","/docs/transformers/pr_16575/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(qU,"href","/docs/transformers/pr_16575/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(NU,"href","/docs/transformers/pr_16575/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(jU,"href","/docs/transformers/pr_16575/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(DU,"href","/docs/transformers/pr_16575/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(GU,"href","/docs/transformers/pr_16575/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(OU,"href","/docs/transformers/pr_16575/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(VU,"href","/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kE,"id","transformers.FlaxAutoModelForMaskedLM"),c(kE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kE,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Ac,"class","relative group"),c(XU,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zU,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QU,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WU,"href","/docs/transformers/pr_16575/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(HU,"href","/docs/transformers/pr_16575/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(UU,"href","/docs/transformers/pr_16575/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(JU,"href","/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(YU,"href","/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(KU,"href","/docs/transformers/pr_16575/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(ZU,"href","/docs/transformers/pr_16575/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(eJ,"href","/docs/transformers/pr_16575/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(oJ,"href","/docs/transformers/pr_16575/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(rJ,"href","/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XE,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(XE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XE,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(xc,"class","relative group"),c(tJ,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aJ,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nJ,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sJ,"href","/docs/transformers/pr_16575/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(lJ,"href","/docs/transformers/pr_16575/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(iJ,"href","/docs/transformers/pr_16575/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(dJ,"href","/docs/transformers/pr_16575/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(cJ,"href","/docs/transformers/pr_16575/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(fJ,"href","/docs/transformers/pr_16575/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(mJ,"href","/docs/transformers/pr_16575/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(gJ,"href","/docs/transformers/pr_16575/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(hJ,"href","/docs/transformers/pr_16575/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rC,"id","transformers.FlaxAutoModelForSequenceClassification"),c(rC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rC,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Sc,"class","relative group"),c(pJ,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uJ,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_J,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bJ,"href","/docs/transformers/pr_16575/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(vJ,"href","/docs/transformers/pr_16575/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(FJ,"href","/docs/transformers/pr_16575/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(TJ,"href","/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(MJ,"href","/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(EJ,"href","/docs/transformers/pr_16575/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(CJ,"href","/docs/transformers/pr_16575/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(wJ,"href","/docs/transformers/pr_16575/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(AJ,"href","/docs/transformers/pr_16575/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(yJ,"href","/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pC,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(pC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Pc,"class","relative group"),c(LJ,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xJ,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($J,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kJ,"href","/docs/transformers/pr_16575/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(SJ,"href","/docs/transformers/pr_16575/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(RJ,"href","/docs/transformers/pr_16575/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(BJ,"href","/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(PJ,"href","/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(IJ,"href","/docs/transformers/pr_16575/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(qJ,"href","/docs/transformers/pr_16575/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(NJ,"href","/docs/transformers/pr_16575/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(jJ,"href","/docs/transformers/pr_16575/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(DJ,"href","/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LC,"id","transformers.FlaxAutoModelForTokenClassification"),c(LC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LC,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Nc,"class","relative group"),c(GJ,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OJ,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VJ,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XJ,"href","/docs/transformers/pr_16575/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(zJ,"href","/docs/transformers/pr_16575/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(QJ,"href","/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(WJ,"href","/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(HJ,"href","/docs/transformers/pr_16575/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(UJ,"href","/docs/transformers/pr_16575/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(JJ,"href","/docs/transformers/pr_16575/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(YJ,"href","/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jC,"id","transformers.FlaxAutoModelForMultipleChoice"),c(jC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jC,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Gc,"class","relative group"),c(KJ,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZJ,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eY,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oY,"href","/docs/transformers/pr_16575/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(rY,"href","/docs/transformers/pr_16575/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(tY,"href","/docs/transformers/pr_16575/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(aY,"href","/docs/transformers/pr_16575/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(nY,"href","/docs/transformers/pr_16575/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(sY,"href","/docs/transformers/pr_16575/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(lY,"href","/docs/transformers/pr_16575/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(iY,"href","/docs/transformers/pr_16575/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JC,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(JC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JC,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Xc,"class","relative group"),c(dY,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cY,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fY,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mY,"href","/docs/transformers/pr_16575/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e3,"id","transformers.FlaxAutoModelForImageClassification"),c(e3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e3,"href","#transformers.FlaxAutoModelForImageClassification"),c(Wc,"class","relative group"),c(gY,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hY,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pY,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uY,"href","/docs/transformers/pr_16575/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(_Y,"href","/docs/transformers/pr_16575/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n3,"id","transformers.FlaxAutoModelForVision2Seq"),c(n3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n3,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Jc,"class","relative group"),c(bY,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vY,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FY,"href","/docs/transformers/pr_16575/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TY,"href","/docs/transformers/pr_16575/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,oi),b(f,rf,_),b(f,Kr,_),e(Kr,ri),e(Kr,ti),e(ti,CA),e(Kr,tf),b(f,qe,_),b(f,Xe,_),e(Xe,ai),e(Xe,Mn),e(Mn,wA),e(Xe,En),e(Xe,Cn),e(Cn,AA),e(Xe,ni),e(Xe,wn),e(wn,yA),e(Xe,si),b(f,af,_),M(va,f,_),b(f,ze,_),b(f,Ae,_),e(Ae,j9),e(Ae,li),e(li,D9),e(Ae,G9),b(f,Eo,_),b(f,Fa,_),e(Fa,O9),e(Fa,nf),e(nf,V9),e(Fa,INe),b(f,$Be,_),b(f,ii,_),e(ii,sf),e(sf,gZ),M(LA,gZ,null),e(ii,qNe),e(ii,hZ),e(hZ,NNe),b(f,kBe,_),b(f,An,_),e(An,jNe),e(An,pZ),e(pZ,DNe),e(An,GNe),e(An,uZ),e(uZ,ONe),e(An,VNe),b(f,SBe,_),M(xA,f,_),b(f,RBe,_),b(f,X9,_),e(X9,XNe),b(f,BBe,_),M(lf,f,_),b(f,PBe,_),b(f,di,_),e(di,df),e(df,_Z),M($A,_Z,null),e(di,zNe),e(di,bZ),e(bZ,QNe),b(f,IBe,_),b(f,Co,_),M(kA,Co,null),e(Co,WNe),e(Co,SA),e(SA,HNe),e(SA,z9),e(z9,UNe),e(SA,JNe),e(Co,YNe),e(Co,RA),e(RA,KNe),e(RA,vZ),e(vZ,ZNe),e(RA,eje),e(Co,oje),e(Co,Mr),M(BA,Mr,null),e(Mr,rje),e(Mr,FZ),e(FZ,tje),e(Mr,aje),e(Mr,ci),e(ci,nje),e(ci,TZ),e(TZ,sje),e(ci,lje),e(ci,MZ),e(MZ,ije),e(ci,dje),e(Mr,cje),e(Mr,A),e(A,cf),e(cf,EZ),e(EZ,fje),e(cf,mje),e(cf,Q9),e(Q9,gje),e(cf,hje),e(A,pje),e(A,ff),e(ff,CZ),e(CZ,uje),e(ff,_je),e(ff,W9),e(W9,bje),e(ff,vje),e(A,Fje),e(A,mf),e(mf,wZ),e(wZ,Tje),e(mf,Mje),e(mf,H9),e(H9,Eje),e(mf,Cje),e(A,wje),e(A,gf),e(gf,AZ),e(AZ,Aje),e(gf,yje),e(gf,U9),e(U9,Lje),e(gf,xje),e(A,$je),e(A,hf),e(hf,yZ),e(yZ,kje),e(hf,Sje),e(hf,J9),e(J9,Rje),e(hf,Bje),e(A,Pje),e(A,pf),e(pf,LZ),e(LZ,Ije),e(pf,qje),e(pf,Y9),e(Y9,Nje),e(pf,jje),e(A,Dje),e(A,uf),e(uf,xZ),e(xZ,Gje),e(uf,Oje),e(uf,K9),e(K9,Vje),e(uf,Xje),e(A,zje),e(A,_f),e(_f,$Z),e($Z,Qje),e(_f,Wje),e(_f,Z9),e(Z9,Hje),e(_f,Uje),e(A,Jje),e(A,bf),e(bf,kZ),e(kZ,Yje),e(bf,Kje),e(bf,e$),e(e$,Zje),e(bf,eDe),e(A,oDe),e(A,vf),e(vf,SZ),e(SZ,rDe),e(vf,tDe),e(vf,o$),e(o$,aDe),e(vf,nDe),e(A,sDe),e(A,Ff),e(Ff,RZ),e(RZ,lDe),e(Ff,iDe),e(Ff,r$),e(r$,dDe),e(Ff,cDe),e(A,fDe),e(A,Tf),e(Tf,BZ),e(BZ,mDe),e(Tf,gDe),e(Tf,t$),e(t$,hDe),e(Tf,pDe),e(A,uDe),e(A,Mf),e(Mf,PZ),e(PZ,_De),e(Mf,bDe),e(Mf,a$),e(a$,vDe),e(Mf,FDe),e(A,TDe),e(A,Ef),e(Ef,IZ),e(IZ,MDe),e(Ef,EDe),e(Ef,n$),e(n$,CDe),e(Ef,wDe),e(A,ADe),e(A,Cf),e(Cf,qZ),e(qZ,yDe),e(Cf,LDe),e(Cf,s$),e(s$,xDe),e(Cf,$De),e(A,kDe),e(A,wf),e(wf,NZ),e(NZ,SDe),e(wf,RDe),e(wf,l$),e(l$,BDe),e(wf,PDe),e(A,IDe),e(A,Af),e(Af,jZ),e(jZ,qDe),e(Af,NDe),e(Af,i$),e(i$,jDe),e(Af,DDe),e(A,GDe),e(A,yf),e(yf,DZ),e(DZ,ODe),e(yf,VDe),e(yf,d$),e(d$,XDe),e(yf,zDe),e(A,QDe),e(A,Lf),e(Lf,GZ),e(GZ,WDe),e(Lf,HDe),e(Lf,c$),e(c$,UDe),e(Lf,JDe),e(A,YDe),e(A,xf),e(xf,OZ),e(OZ,KDe),e(xf,ZDe),e(xf,f$),e(f$,eGe),e(xf,oGe),e(A,rGe),e(A,$f),e($f,VZ),e(VZ,tGe),e($f,aGe),e($f,m$),e(m$,nGe),e($f,sGe),e(A,lGe),e(A,kf),e(kf,XZ),e(XZ,iGe),e(kf,dGe),e(kf,g$),e(g$,cGe),e(kf,fGe),e(A,mGe),e(A,Sf),e(Sf,zZ),e(zZ,gGe),e(Sf,hGe),e(Sf,h$),e(h$,pGe),e(Sf,uGe),e(A,_Ge),e(A,Rf),e(Rf,QZ),e(QZ,bGe),e(Rf,vGe),e(Rf,p$),e(p$,FGe),e(Rf,TGe),e(A,MGe),e(A,Bf),e(Bf,WZ),e(WZ,EGe),e(Bf,CGe),e(Bf,u$),e(u$,wGe),e(Bf,AGe),e(A,yGe),e(A,Pf),e(Pf,HZ),e(HZ,LGe),e(Pf,xGe),e(Pf,_$),e(_$,$Ge),e(Pf,kGe),e(A,SGe),e(A,If),e(If,UZ),e(UZ,RGe),e(If,BGe),e(If,b$),e(b$,PGe),e(If,IGe),e(A,qGe),e(A,qf),e(qf,JZ),e(JZ,NGe),e(qf,jGe),e(qf,v$),e(v$,DGe),e(qf,GGe),e(A,OGe),e(A,Nf),e(Nf,YZ),e(YZ,VGe),e(Nf,XGe),e(Nf,F$),e(F$,zGe),e(Nf,QGe),e(A,WGe),e(A,jf),e(jf,KZ),e(KZ,HGe),e(jf,UGe),e(jf,T$),e(T$,JGe),e(jf,YGe),e(A,KGe),e(A,Df),e(Df,ZZ),e(ZZ,ZGe),e(Df,eOe),e(Df,M$),e(M$,oOe),e(Df,rOe),e(A,tOe),e(A,Gf),e(Gf,eee),e(eee,aOe),e(Gf,nOe),e(Gf,E$),e(E$,sOe),e(Gf,lOe),e(A,iOe),e(A,Of),e(Of,oee),e(oee,dOe),e(Of,cOe),e(Of,C$),e(C$,fOe),e(Of,mOe),e(A,gOe),e(A,Vf),e(Vf,ree),e(ree,hOe),e(Vf,pOe),e(Vf,w$),e(w$,uOe),e(Vf,_Oe),e(A,bOe),e(A,Xf),e(Xf,tee),e(tee,vOe),e(Xf,FOe),e(Xf,A$),e(A$,TOe),e(Xf,MOe),e(A,EOe),e(A,zf),e(zf,aee),e(aee,COe),e(zf,wOe),e(zf,y$),e(y$,AOe),e(zf,yOe),e(A,LOe),e(A,Qf),e(Qf,nee),e(nee,xOe),e(Qf,$Oe),e(Qf,L$),e(L$,kOe),e(Qf,SOe),e(A,ROe),e(A,Wf),e(Wf,see),e(see,BOe),e(Wf,POe),e(Wf,x$),e(x$,IOe),e(Wf,qOe),e(A,NOe),e(A,Hf),e(Hf,lee),e(lee,jOe),e(Hf,DOe),e(Hf,$$),e($$,GOe),e(Hf,OOe),e(A,VOe),e(A,Uf),e(Uf,iee),e(iee,XOe),e(Uf,zOe),e(Uf,k$),e(k$,QOe),e(Uf,WOe),e(A,HOe),e(A,Jf),e(Jf,dee),e(dee,UOe),e(Jf,JOe),e(Jf,S$),e(S$,YOe),e(Jf,KOe),e(A,ZOe),e(A,Yf),e(Yf,cee),e(cee,eVe),e(Yf,oVe),e(Yf,R$),e(R$,rVe),e(Yf,tVe),e(A,aVe),e(A,Kf),e(Kf,fee),e(fee,nVe),e(Kf,sVe),e(Kf,B$),e(B$,lVe),e(Kf,iVe),e(A,dVe),e(A,Zf),e(Zf,mee),e(mee,cVe),e(Zf,fVe),e(Zf,P$),e(P$,mVe),e(Zf,gVe),e(A,hVe),e(A,em),e(em,gee),e(gee,pVe),e(em,uVe),e(em,I$),e(I$,_Ve),e(em,bVe),e(A,vVe),e(A,om),e(om,hee),e(hee,FVe),e(om,TVe),e(om,q$),e(q$,MVe),e(om,EVe),e(A,CVe),e(A,rm),e(rm,pee),e(pee,wVe),e(rm,AVe),e(rm,N$),e(N$,yVe),e(rm,LVe),e(A,xVe),e(A,tm),e(tm,uee),e(uee,$Ve),e(tm,kVe),e(tm,j$),e(j$,SVe),e(tm,RVe),e(A,BVe),e(A,am),e(am,_ee),e(_ee,PVe),e(am,IVe),e(am,D$),e(D$,qVe),e(am,NVe),e(A,jVe),e(A,nm),e(nm,bee),e(bee,DVe),e(nm,GVe),e(nm,G$),e(G$,OVe),e(nm,VVe),e(A,XVe),e(A,sm),e(sm,vee),e(vee,zVe),e(sm,QVe),e(sm,O$),e(O$,WVe),e(sm,HVe),e(A,UVe),e(A,lm),e(lm,Fee),e(Fee,JVe),e(lm,YVe),e(lm,V$),e(V$,KVe),e(lm,ZVe),e(A,eXe),e(A,im),e(im,Tee),e(Tee,oXe),e(im,rXe),e(im,X$),e(X$,tXe),e(im,aXe),e(A,nXe),e(A,dm),e(dm,Mee),e(Mee,sXe),e(dm,lXe),e(dm,z$),e(z$,iXe),e(dm,dXe),e(A,cXe),e(A,cm),e(cm,Eee),e(Eee,fXe),e(cm,mXe),e(cm,Q$),e(Q$,gXe),e(cm,hXe),e(A,pXe),e(A,fm),e(fm,Cee),e(Cee,uXe),e(fm,_Xe),e(fm,W$),e(W$,bXe),e(fm,vXe),e(A,FXe),e(A,mm),e(mm,wee),e(wee,TXe),e(mm,MXe),e(mm,H$),e(H$,EXe),e(mm,CXe),e(A,wXe),e(A,gm),e(gm,Aee),e(Aee,AXe),e(gm,yXe),e(gm,U$),e(U$,LXe),e(gm,xXe),e(A,$Xe),e(A,hm),e(hm,yee),e(yee,kXe),e(hm,SXe),e(hm,J$),e(J$,RXe),e(hm,BXe),e(A,PXe),e(A,pm),e(pm,Lee),e(Lee,IXe),e(pm,qXe),e(pm,Y$),e(Y$,NXe),e(pm,jXe),e(A,DXe),e(A,um),e(um,xee),e(xee,GXe),e(um,OXe),e(um,K$),e(K$,VXe),e(um,XXe),e(A,zXe),e(A,_m),e(_m,$ee),e($ee,QXe),e(_m,WXe),e(_m,Z$),e(Z$,HXe),e(_m,UXe),e(A,JXe),e(A,bm),e(bm,kee),e(kee,YXe),e(bm,KXe),e(bm,ek),e(ek,ZXe),e(bm,eze),e(A,oze),e(A,vm),e(vm,See),e(See,rze),e(vm,tze),e(vm,ok),e(ok,aze),e(vm,nze),e(A,sze),e(A,Fm),e(Fm,Ree),e(Ree,lze),e(Fm,ize),e(Fm,rk),e(rk,dze),e(Fm,cze),e(A,fze),e(A,Tm),e(Tm,Bee),e(Bee,mze),e(Tm,gze),e(Tm,tk),e(tk,hze),e(Tm,pze),e(A,uze),e(A,Mm),e(Mm,Pee),e(Pee,_ze),e(Mm,bze),e(Mm,ak),e(ak,vze),e(Mm,Fze),e(A,Tze),e(A,Em),e(Em,Iee),e(Iee,Mze),e(Em,Eze),e(Em,nk),e(nk,Cze),e(Em,wze),e(A,Aze),e(A,Cm),e(Cm,qee),e(qee,yze),e(Cm,Lze),e(Cm,sk),e(sk,xze),e(Cm,$ze),e(A,kze),e(A,wm),e(wm,Nee),e(Nee,Sze),e(wm,Rze),e(wm,lk),e(lk,Bze),e(wm,Pze),e(A,Ize),e(A,Am),e(Am,jee),e(jee,qze),e(Am,Nze),e(Am,ik),e(ik,jze),e(Am,Dze),e(A,Gze),e(A,ym),e(ym,Dee),e(Dee,Oze),e(ym,Vze),e(ym,dk),e(dk,Xze),e(ym,zze),e(A,Qze),e(A,Lm),e(Lm,Gee),e(Gee,Wze),e(Lm,Hze),e(Lm,ck),e(ck,Uze),e(Lm,Jze),e(A,Yze),e(A,xm),e(xm,Oee),e(Oee,Kze),e(xm,Zze),e(xm,fk),e(fk,eQe),e(xm,oQe),e(A,rQe),e(A,$m),e($m,Vee),e(Vee,tQe),e($m,aQe),e($m,mk),e(mk,nQe),e($m,sQe),e(A,lQe),e(A,km),e(km,Xee),e(Xee,iQe),e(km,dQe),e(km,gk),e(gk,cQe),e(km,fQe),e(A,mQe),e(A,Sm),e(Sm,zee),e(zee,gQe),e(Sm,hQe),e(Sm,hk),e(hk,pQe),e(Sm,uQe),e(A,_Qe),e(A,Rm),e(Rm,Qee),e(Qee,bQe),e(Rm,vQe),e(Rm,pk),e(pk,FQe),e(Rm,TQe),e(A,MQe),e(A,Bm),e(Bm,Wee),e(Wee,EQe),e(Bm,CQe),e(Bm,uk),e(uk,wQe),e(Bm,AQe),e(A,yQe),e(A,Pm),e(Pm,Hee),e(Hee,LQe),e(Pm,xQe),e(Pm,_k),e(_k,$Qe),e(Pm,kQe),e(A,SQe),e(A,Im),e(Im,Uee),e(Uee,RQe),e(Im,BQe),e(Im,bk),e(bk,PQe),e(Im,IQe),e(A,qQe),e(A,qm),e(qm,Jee),e(Jee,NQe),e(qm,jQe),e(qm,vk),e(vk,DQe),e(qm,GQe),e(A,OQe),e(A,Nm),e(Nm,Yee),e(Yee,VQe),e(Nm,XQe),e(Nm,Fk),e(Fk,zQe),e(Nm,QQe),e(A,WQe),e(A,jm),e(jm,Kee),e(Kee,HQe),e(jm,UQe),e(jm,Tk),e(Tk,JQe),e(jm,YQe),e(A,KQe),e(A,Dm),e(Dm,Zee),e(Zee,ZQe),e(Dm,eWe),e(Dm,Mk),e(Mk,oWe),e(Dm,rWe),e(A,tWe),e(A,Gm),e(Gm,eoe),e(eoe,aWe),e(Gm,nWe),e(Gm,Ek),e(Ek,sWe),e(Gm,lWe),e(A,iWe),e(A,Om),e(Om,ooe),e(ooe,dWe),e(Om,cWe),e(Om,Ck),e(Ck,fWe),e(Om,mWe),e(A,gWe),e(A,Vm),e(Vm,roe),e(roe,hWe),e(Vm,pWe),e(Vm,wk),e(wk,uWe),e(Vm,_We),e(A,bWe),e(A,Xm),e(Xm,toe),e(toe,vWe),e(Xm,FWe),e(Xm,Ak),e(Ak,TWe),e(Xm,MWe),e(A,EWe),e(A,zm),e(zm,aoe),e(aoe,CWe),e(zm,wWe),e(zm,yk),e(yk,AWe),e(zm,yWe),e(A,LWe),e(A,Qm),e(Qm,noe),e(noe,xWe),e(Qm,$We),e(Qm,Lk),e(Lk,kWe),e(Qm,SWe),e(A,RWe),e(A,Wm),e(Wm,soe),e(soe,BWe),e(Wm,PWe),e(Wm,xk),e(xk,IWe),e(Wm,qWe),e(A,NWe),e(A,Hm),e(Hm,loe),e(loe,jWe),e(Hm,DWe),e(Hm,$k),e($k,GWe),e(Hm,OWe),e(A,VWe),e(A,Um),e(Um,ioe),e(ioe,XWe),e(Um,zWe),e(Um,kk),e(kk,QWe),e(Um,WWe),e(A,HWe),e(A,Jm),e(Jm,doe),e(doe,UWe),e(Jm,JWe),e(Jm,Sk),e(Sk,YWe),e(Jm,KWe),e(A,ZWe),e(A,Ym),e(Ym,coe),e(coe,eHe),e(Ym,oHe),e(Ym,Rk),e(Rk,rHe),e(Ym,tHe),e(A,aHe),e(A,Km),e(Km,foe),e(foe,nHe),e(Km,sHe),e(Km,Bk),e(Bk,lHe),e(Km,iHe),e(A,dHe),e(A,Zm),e(Zm,moe),e(moe,cHe),e(Zm,fHe),e(Zm,Pk),e(Pk,mHe),e(Zm,gHe),e(A,hHe),e(A,eg),e(eg,goe),e(goe,pHe),e(eg,uHe),e(eg,Ik),e(Ik,_He),e(eg,bHe),e(A,vHe),e(A,og),e(og,hoe),e(hoe,FHe),e(og,THe),e(og,qk),e(qk,MHe),e(og,EHe),e(A,CHe),e(A,rg),e(rg,poe),e(poe,wHe),e(rg,AHe),e(rg,Nk),e(Nk,yHe),e(rg,LHe),e(A,xHe),e(A,tg),e(tg,uoe),e(uoe,$He),e(tg,kHe),e(tg,jk),e(jk,SHe),e(tg,RHe),e(A,BHe),e(A,ag),e(ag,_oe),e(_oe,PHe),e(ag,IHe),e(ag,Dk),e(Dk,qHe),e(ag,NHe),e(A,jHe),e(A,ng),e(ng,boe),e(boe,DHe),e(ng,GHe),e(ng,Gk),e(Gk,OHe),e(ng,VHe),e(Mr,XHe),M(sg,Mr,null),e(Co,zHe),e(Co,lg),M(PA,lg,null),e(lg,QHe),e(lg,voe),e(voe,WHe),b(f,qBe,_),b(f,fi,_),e(fi,ig),e(ig,Foe),M(IA,Foe,null),e(fi,HHe),e(fi,Toe),e(Toe,UHe),b(f,NBe,_),b(f,wo,_),M(qA,wo,null),e(wo,JHe),e(wo,NA),e(NA,YHe),e(NA,Ok),e(Ok,KHe),e(NA,ZHe),e(wo,eUe),e(wo,jA),e(jA,oUe),e(jA,Moe),e(Moe,rUe),e(jA,tUe),e(wo,aUe),e(wo,Er),M(DA,Er,null),e(Er,nUe),e(Er,Eoe),e(Eoe,sUe),e(Er,lUe),e(Er,Ta),e(Ta,iUe),e(Ta,Coe),e(Coe,dUe),e(Ta,cUe),e(Ta,woe),e(woe,fUe),e(Ta,mUe),e(Ta,Aoe),e(Aoe,gUe),e(Ta,hUe),e(Er,pUe),e(Er,k),e(k,yn),e(yn,yoe),e(yoe,uUe),e(yn,_Ue),e(yn,Vk),e(Vk,bUe),e(yn,vUe),e(yn,Xk),e(Xk,FUe),e(yn,TUe),e(k,MUe),e(k,Ln),e(Ln,Loe),e(Loe,EUe),e(Ln,CUe),e(Ln,zk),e(zk,wUe),e(Ln,AUe),e(Ln,Qk),e(Qk,yUe),e(Ln,LUe),e(k,xUe),e(k,xn),e(xn,xoe),e(xoe,$Ue),e(xn,kUe),e(xn,Wk),e(Wk,SUe),e(xn,RUe),e(xn,Hk),e(Hk,BUe),e(xn,PUe),e(k,IUe),e(k,dg),e(dg,$oe),e($oe,qUe),e(dg,NUe),e(dg,Uk),e(Uk,jUe),e(dg,DUe),e(k,GUe),e(k,$n),e($n,koe),e(koe,OUe),e($n,VUe),e($n,Jk),e(Jk,XUe),e($n,zUe),e($n,Yk),e(Yk,QUe),e($n,WUe),e(k,HUe),e(k,cg),e(cg,Soe),e(Soe,UUe),e(cg,JUe),e(cg,Kk),e(Kk,YUe),e(cg,KUe),e(k,ZUe),e(k,fg),e(fg,Roe),e(Roe,eJe),e(fg,oJe),e(fg,Zk),e(Zk,rJe),e(fg,tJe),e(k,aJe),e(k,mg),e(mg,Boe),e(Boe,nJe),e(mg,sJe),e(mg,eS),e(eS,lJe),e(mg,iJe),e(k,dJe),e(k,kn),e(kn,Poe),e(Poe,cJe),e(kn,fJe),e(kn,oS),e(oS,mJe),e(kn,gJe),e(kn,rS),e(rS,hJe),e(kn,pJe),e(k,uJe),e(k,Sn),e(Sn,Ioe),e(Ioe,_Je),e(Sn,bJe),e(Sn,tS),e(tS,vJe),e(Sn,FJe),e(Sn,aS),e(aS,TJe),e(Sn,MJe),e(k,EJe),e(k,Rn),e(Rn,qoe),e(qoe,CJe),e(Rn,wJe),e(Rn,nS),e(nS,AJe),e(Rn,yJe),e(Rn,sS),e(sS,LJe),e(Rn,xJe),e(k,$Je),e(k,gg),e(gg,Noe),e(Noe,kJe),e(gg,SJe),e(gg,lS),e(lS,RJe),e(gg,BJe),e(k,PJe),e(k,hg),e(hg,joe),e(joe,IJe),e(hg,qJe),e(hg,iS),e(iS,NJe),e(hg,jJe),e(k,DJe),e(k,Bn),e(Bn,Doe),e(Doe,GJe),e(Bn,OJe),e(Bn,dS),e(dS,VJe),e(Bn,XJe),e(Bn,cS),e(cS,zJe),e(Bn,QJe),e(k,WJe),e(k,pg),e(pg,Goe),e(Goe,HJe),e(pg,UJe),e(pg,fS),e(fS,JJe),e(pg,YJe),e(k,KJe),e(k,Pn),e(Pn,Ooe),e(Ooe,ZJe),e(Pn,eYe),e(Pn,mS),e(mS,oYe),e(Pn,rYe),e(Pn,gS),e(gS,tYe),e(Pn,aYe),e(k,nYe),e(k,In),e(In,Voe),e(Voe,sYe),e(In,lYe),e(In,hS),e(hS,iYe),e(In,dYe),e(In,pS),e(pS,cYe),e(In,fYe),e(k,mYe),e(k,qn),e(qn,Xoe),e(Xoe,gYe),e(qn,hYe),e(qn,uS),e(uS,pYe),e(qn,uYe),e(qn,_S),e(_S,_Ye),e(qn,bYe),e(k,vYe),e(k,ug),e(ug,zoe),e(zoe,FYe),e(ug,TYe),e(ug,bS),e(bS,MYe),e(ug,EYe),e(k,CYe),e(k,Nn),e(Nn,Qoe),e(Qoe,wYe),e(Nn,AYe),e(Nn,vS),e(vS,yYe),e(Nn,LYe),e(Nn,FS),e(FS,xYe),e(Nn,$Ye),e(k,kYe),e(k,jn),e(jn,Woe),e(Woe,SYe),e(jn,RYe),e(jn,TS),e(TS,BYe),e(jn,PYe),e(jn,MS),e(MS,IYe),e(jn,qYe),e(k,NYe),e(k,Dn),e(Dn,Hoe),e(Hoe,jYe),e(Dn,DYe),e(Dn,ES),e(ES,GYe),e(Dn,OYe),e(Dn,CS),e(CS,VYe),e(Dn,XYe),e(k,zYe),e(k,Gn),e(Gn,Uoe),e(Uoe,QYe),e(Gn,WYe),e(Gn,wS),e(wS,HYe),e(Gn,UYe),e(Gn,AS),e(AS,JYe),e(Gn,YYe),e(k,KYe),e(k,On),e(On,Joe),e(Joe,ZYe),e(On,eKe),e(On,yS),e(yS,oKe),e(On,rKe),e(On,LS),e(LS,tKe),e(On,aKe),e(k,nKe),e(k,Vn),e(Vn,Yoe),e(Yoe,sKe),e(Vn,lKe),e(Vn,xS),e(xS,iKe),e(Vn,dKe),e(Vn,$S),e($S,cKe),e(Vn,fKe),e(k,mKe),e(k,_g),e(_g,Koe),e(Koe,gKe),e(_g,hKe),e(_g,kS),e(kS,pKe),e(_g,uKe),e(k,_Ke),e(k,Xn),e(Xn,Zoe),e(Zoe,bKe),e(Xn,vKe),e(Xn,SS),e(SS,FKe),e(Xn,TKe),e(Xn,RS),e(RS,MKe),e(Xn,EKe),e(k,CKe),e(k,bg),e(bg,ere),e(ere,wKe),e(bg,AKe),e(bg,BS),e(BS,yKe),e(bg,LKe),e(k,xKe),e(k,zn),e(zn,ore),e(ore,$Ke),e(zn,kKe),e(zn,PS),e(PS,SKe),e(zn,RKe),e(zn,IS),e(IS,BKe),e(zn,PKe),e(k,IKe),e(k,Qn),e(Qn,rre),e(rre,qKe),e(Qn,NKe),e(Qn,qS),e(qS,jKe),e(Qn,DKe),e(Qn,NS),e(NS,GKe),e(Qn,OKe),e(k,VKe),e(k,Wn),e(Wn,tre),e(tre,XKe),e(Wn,zKe),e(Wn,jS),e(jS,QKe),e(Wn,WKe),e(Wn,DS),e(DS,HKe),e(Wn,UKe),e(k,JKe),e(k,Hn),e(Hn,are),e(are,YKe),e(Hn,KKe),e(Hn,GS),e(GS,ZKe),e(Hn,eZe),e(Hn,OS),e(OS,oZe),e(Hn,rZe),e(k,tZe),e(k,Un),e(Un,nre),e(nre,aZe),e(Un,nZe),e(Un,VS),e(VS,sZe),e(Un,lZe),e(Un,XS),e(XS,iZe),e(Un,dZe),e(k,cZe),e(k,vg),e(vg,sre),e(sre,fZe),e(vg,mZe),e(vg,zS),e(zS,gZe),e(vg,hZe),e(k,pZe),e(k,Jn),e(Jn,lre),e(lre,uZe),e(Jn,_Ze),e(Jn,QS),e(QS,bZe),e(Jn,vZe),e(Jn,WS),e(WS,FZe),e(Jn,TZe),e(k,MZe),e(k,Yn),e(Yn,ire),e(ire,EZe),e(Yn,CZe),e(Yn,HS),e(HS,wZe),e(Yn,AZe),e(Yn,US),e(US,yZe),e(Yn,LZe),e(k,xZe),e(k,Kn),e(Kn,dre),e(dre,$Ze),e(Kn,kZe),e(Kn,JS),e(JS,SZe),e(Kn,RZe),e(Kn,YS),e(YS,BZe),e(Kn,PZe),e(k,IZe),e(k,Zn),e(Zn,cre),e(cre,qZe),e(Zn,NZe),e(Zn,KS),e(KS,jZe),e(Zn,DZe),e(Zn,ZS),e(ZS,GZe),e(Zn,OZe),e(k,VZe),e(k,es),e(es,fre),e(fre,XZe),e(es,zZe),e(es,eR),e(eR,QZe),e(es,WZe),e(es,oR),e(oR,HZe),e(es,UZe),e(k,JZe),e(k,os),e(os,mre),e(mre,YZe),e(os,KZe),e(os,rR),e(rR,ZZe),e(os,eeo),e(os,tR),e(tR,oeo),e(os,reo),e(k,teo),e(k,Fg),e(Fg,gre),e(gre,aeo),e(Fg,neo),e(Fg,aR),e(aR,seo),e(Fg,leo),e(k,ieo),e(k,rs),e(rs,hre),e(hre,deo),e(rs,ceo),e(rs,nR),e(nR,feo),e(rs,meo),e(rs,sR),e(sR,geo),e(rs,heo),e(k,peo),e(k,Tg),e(Tg,pre),e(pre,ueo),e(Tg,_eo),e(Tg,lR),e(lR,beo),e(Tg,veo),e(k,Feo),e(k,Mg),e(Mg,ure),e(ure,Teo),e(Mg,Meo),e(Mg,iR),e(iR,Eeo),e(Mg,Ceo),e(k,weo),e(k,ts),e(ts,_re),e(_re,Aeo),e(ts,yeo),e(ts,dR),e(dR,Leo),e(ts,xeo),e(ts,cR),e(cR,$eo),e(ts,keo),e(k,Seo),e(k,as),e(as,bre),e(bre,Reo),e(as,Beo),e(as,fR),e(fR,Peo),e(as,Ieo),e(as,mR),e(mR,qeo),e(as,Neo),e(k,jeo),e(k,ns),e(ns,vre),e(vre,Deo),e(ns,Geo),e(ns,gR),e(gR,Oeo),e(ns,Veo),e(ns,hR),e(hR,Xeo),e(ns,zeo),e(k,Qeo),e(k,Eg),e(Eg,Fre),e(Fre,Weo),e(Eg,Heo),e(Eg,pR),e(pR,Ueo),e(Eg,Jeo),e(k,Yeo),e(k,ss),e(ss,Tre),e(Tre,Keo),e(ss,Zeo),e(ss,uR),e(uR,eoo),e(ss,ooo),e(ss,_R),e(_R,roo),e(ss,too),e(k,aoo),e(k,ls),e(ls,Mre),e(Mre,noo),e(ls,soo),e(ls,bR),e(bR,loo),e(ls,ioo),e(ls,vR),e(vR,doo),e(ls,coo),e(k,foo),e(k,is),e(is,Ere),e(Ere,moo),e(is,goo),e(is,FR),e(FR,hoo),e(is,poo),e(is,TR),e(TR,uoo),e(is,_oo),e(k,boo),e(k,ds),e(ds,Cre),e(Cre,voo),e(ds,Foo),e(ds,MR),e(MR,Too),e(ds,Moo),e(ds,ER),e(ER,Eoo),e(ds,Coo),e(k,woo),e(k,cs),e(cs,wre),e(wre,Aoo),e(cs,yoo),e(cs,CR),e(CR,Loo),e(cs,xoo),e(cs,wR),e(wR,$oo),e(cs,koo),e(k,Soo),e(k,fs),e(fs,Are),e(Are,Roo),e(fs,Boo),e(fs,AR),e(AR,Poo),e(fs,Ioo),e(fs,yR),e(yR,qoo),e(fs,Noo),e(k,joo),e(k,Cg),e(Cg,yre),e(yre,Doo),e(Cg,Goo),e(Cg,LR),e(LR,Ooo),e(Cg,Voo),e(k,Xoo),e(k,wg),e(wg,Lre),e(Lre,zoo),e(wg,Qoo),e(wg,xR),e(xR,Woo),e(wg,Hoo),e(k,Uoo),e(k,Ag),e(Ag,xre),e(xre,Joo),e(Ag,Yoo),e(Ag,$R),e($R,Koo),e(Ag,Zoo),e(k,ero),e(k,yg),e(yg,$re),e($re,oro),e(yg,rro),e(yg,kR),e(kR,tro),e(yg,aro),e(k,nro),e(k,ms),e(ms,kre),e(kre,sro),e(ms,lro),e(ms,SR),e(SR,iro),e(ms,dro),e(ms,RR),e(RR,cro),e(ms,fro),e(k,mro),e(k,Lg),e(Lg,Sre),e(Sre,gro),e(Lg,hro),e(Lg,BR),e(BR,pro),e(Lg,uro),e(k,_ro),e(k,gs),e(gs,Rre),e(Rre,bro),e(gs,vro),e(gs,PR),e(PR,Fro),e(gs,Tro),e(gs,IR),e(IR,Mro),e(gs,Ero),e(k,Cro),e(k,hs),e(hs,Bre),e(Bre,wro),e(hs,Aro),e(hs,qR),e(qR,yro),e(hs,Lro),e(hs,NR),e(NR,xro),e(hs,$ro),e(k,kro),e(k,ps),e(ps,Pre),e(Pre,Sro),e(ps,Rro),e(ps,jR),e(jR,Bro),e(ps,Pro),e(ps,DR),e(DR,Iro),e(ps,qro),e(k,Nro),e(k,us),e(us,Ire),e(Ire,jro),e(us,Dro),e(us,GR),e(GR,Gro),e(us,Oro),e(us,OR),e(OR,Vro),e(us,Xro),e(k,zro),e(k,_s),e(_s,qre),e(qre,Qro),e(_s,Wro),e(_s,VR),e(VR,Hro),e(_s,Uro),e(_s,XR),e(XR,Jro),e(_s,Yro),e(k,Kro),e(k,bs),e(bs,Nre),e(Nre,Zro),e(bs,eto),e(bs,zR),e(zR,oto),e(bs,rto),e(bs,QR),e(QR,tto),e(bs,ato),e(k,nto),e(k,xg),e(xg,jre),e(jre,sto),e(xg,lto),e(xg,WR),e(WR,ito),e(xg,dto),e(k,cto),e(k,$g),e($g,Dre),e(Dre,fto),e($g,mto),e($g,HR),e(HR,gto),e($g,hto),e(k,pto),e(k,vs),e(vs,Gre),e(Gre,uto),e(vs,_to),e(vs,UR),e(UR,bto),e(vs,vto),e(vs,JR),e(JR,Fto),e(vs,Tto),e(k,Mto),e(k,Fs),e(Fs,Ore),e(Ore,Eto),e(Fs,Cto),e(Fs,YR),e(YR,wto),e(Fs,Ato),e(Fs,KR),e(KR,yto),e(Fs,Lto),e(k,xto),e(k,Ts),e(Ts,Vre),e(Vre,$to),e(Ts,kto),e(Ts,ZR),e(ZR,Sto),e(Ts,Rto),e(Ts,eB),e(eB,Bto),e(Ts,Pto),e(k,Ito),e(k,kg),e(kg,Xre),e(Xre,qto),e(kg,Nto),e(kg,oB),e(oB,jto),e(kg,Dto),e(k,Gto),e(k,Sg),e(Sg,zre),e(zre,Oto),e(Sg,Vto),e(Sg,rB),e(rB,Xto),e(Sg,zto),e(k,Qto),e(k,Rg),e(Rg,Qre),e(Qre,Wto),e(Rg,Hto),e(Rg,tB),e(tB,Uto),e(Rg,Jto),e(k,Yto),e(k,Ms),e(Ms,Wre),e(Wre,Kto),e(Ms,Zto),e(Ms,aB),e(aB,eao),e(Ms,oao),e(Ms,nB),e(nB,rao),e(Ms,tao),e(k,aao),e(k,Bg),e(Bg,Hre),e(Hre,nao),e(Bg,sao),e(Bg,sB),e(sB,lao),e(Bg,iao),e(k,dao),e(k,Pg),e(Pg,Ure),e(Ure,cao),e(Pg,fao),e(Pg,lB),e(lB,mao),e(Pg,gao),e(k,hao),e(k,Es),e(Es,Jre),e(Jre,pao),e(Es,uao),e(Es,iB),e(iB,_ao),e(Es,bao),e(Es,dB),e(dB,vao),e(Es,Fao),e(k,Tao),e(k,Ig),e(Ig,Yre),e(Yre,Mao),e(Ig,Eao),e(Ig,cB),e(cB,Cao),e(Ig,wao),e(k,Aao),e(k,qg),e(qg,Kre),e(Kre,yao),e(qg,Lao),e(qg,fB),e(fB,xao),e(qg,$ao),e(k,kao),e(k,Cs),e(Cs,Zre),e(Zre,Sao),e(Cs,Rao),e(Cs,mB),e(mB,Bao),e(Cs,Pao),e(Cs,gB),e(gB,Iao),e(Cs,qao),e(k,Nao),e(k,ws),e(ws,ete),e(ete,jao),e(ws,Dao),e(ws,hB),e(hB,Gao),e(ws,Oao),e(ws,pB),e(pB,Vao),e(ws,Xao),e(k,zao),e(k,As),e(As,ote),e(ote,Qao),e(As,Wao),e(As,uB),e(uB,Hao),e(As,Uao),e(As,_B),e(_B,Jao),e(As,Yao),e(k,Kao),e(k,ys),e(ys,rte),e(rte,Zao),e(ys,eno),e(ys,bB),e(bB,ono),e(ys,rno),e(ys,vB),e(vB,tno),e(ys,ano),e(Er,nno),M(Ng,Er,null),e(wo,sno),e(wo,jg),M(GA,jg,null),e(jg,lno),e(jg,tte),e(tte,ino),b(f,jBe,_),b(f,mi,_),e(mi,Dg),e(Dg,ate),M(OA,ate,null),e(mi,dno),e(mi,nte),e(nte,cno),b(f,DBe,_),b(f,Ao,_),M(VA,Ao,null),e(Ao,fno),e(Ao,XA),e(XA,mno),e(XA,FB),e(FB,gno),e(XA,hno),e(Ao,pno),e(Ao,zA),e(zA,uno),e(zA,ste),e(ste,_no),e(zA,bno),e(Ao,vno),e(Ao,Qe),M(QA,Qe,null),e(Qe,Fno),e(Qe,lte),e(lte,Tno),e(Qe,Mno),e(Qe,Ma),e(Ma,Eno),e(Ma,ite),e(ite,Cno),e(Ma,wno),e(Ma,dte),e(dte,Ano),e(Ma,yno),e(Ma,cte),e(cte,Lno),e(Ma,xno),e(Qe,$no),e(Qe,oe),e(oe,Gg),e(Gg,fte),e(fte,kno),e(Gg,Sno),e(Gg,TB),e(TB,Rno),e(Gg,Bno),e(oe,Pno),e(oe,Og),e(Og,mte),e(mte,Ino),e(Og,qno),e(Og,MB),e(MB,Nno),e(Og,jno),e(oe,Dno),e(oe,Vg),e(Vg,gte),e(gte,Gno),e(Vg,Ono),e(Vg,EB),e(EB,Vno),e(Vg,Xno),e(oe,zno),e(oe,Xg),e(Xg,hte),e(hte,Qno),e(Xg,Wno),e(Xg,CB),e(CB,Hno),e(Xg,Uno),e(oe,Jno),e(oe,zg),e(zg,pte),e(pte,Yno),e(zg,Kno),e(zg,wB),e(wB,Zno),e(zg,eso),e(oe,oso),e(oe,Qg),e(Qg,ute),e(ute,rso),e(Qg,tso),e(Qg,AB),e(AB,aso),e(Qg,nso),e(oe,sso),e(oe,Wg),e(Wg,_te),e(_te,lso),e(Wg,iso),e(Wg,yB),e(yB,dso),e(Wg,cso),e(oe,fso),e(oe,Hg),e(Hg,bte),e(bte,mso),e(Hg,gso),e(Hg,LB),e(LB,hso),e(Hg,pso),e(oe,uso),e(oe,Ug),e(Ug,vte),e(vte,_so),e(Ug,bso),e(Ug,xB),e(xB,vso),e(Ug,Fso),e(oe,Tso),e(oe,Jg),e(Jg,Fte),e(Fte,Mso),e(Jg,Eso),e(Jg,$B),e($B,Cso),e(Jg,wso),e(oe,Aso),e(oe,Yg),e(Yg,Tte),e(Tte,yso),e(Yg,Lso),e(Yg,kB),e(kB,xso),e(Yg,$so),e(oe,kso),e(oe,Kg),e(Kg,Mte),e(Mte,Sso),e(Kg,Rso),e(Kg,SB),e(SB,Bso),e(Kg,Pso),e(oe,Iso),e(oe,Zg),e(Zg,Ete),e(Ete,qso),e(Zg,Nso),e(Zg,RB),e(RB,jso),e(Zg,Dso),e(oe,Gso),e(oe,eh),e(eh,Cte),e(Cte,Oso),e(eh,Vso),e(eh,BB),e(BB,Xso),e(eh,zso),e(oe,Qso),e(oe,oh),e(oh,wte),e(wte,Wso),e(oh,Hso),e(oh,PB),e(PB,Uso),e(oh,Jso),e(oe,Yso),e(oe,rh),e(rh,Ate),e(Ate,Kso),e(rh,Zso),e(rh,IB),e(IB,elo),e(rh,olo),e(oe,rlo),e(oe,th),e(th,yte),e(yte,tlo),e(th,alo),e(th,qB),e(qB,nlo),e(th,slo),e(oe,llo),e(oe,ah),e(ah,Lte),e(Lte,ilo),e(ah,dlo),e(ah,NB),e(NB,clo),e(ah,flo),e(oe,mlo),e(oe,nh),e(nh,xte),e(xte,glo),e(nh,hlo),e(nh,jB),e(jB,plo),e(nh,ulo),e(oe,_lo),e(oe,sh),e(sh,$te),e($te,blo),e(sh,vlo),e(sh,DB),e(DB,Flo),e(sh,Tlo),e(oe,Mlo),e(oe,lh),e(lh,kte),e(kte,Elo),e(lh,Clo),e(lh,GB),e(GB,wlo),e(lh,Alo),e(oe,ylo),e(oe,ih),e(ih,Ste),e(Ste,Llo),e(ih,xlo),e(ih,OB),e(OB,$lo),e(ih,klo),e(oe,Slo),e(oe,dh),e(dh,Rte),e(Rte,Rlo),e(dh,Blo),e(dh,VB),e(VB,Plo),e(dh,Ilo),e(oe,qlo),e(oe,ch),e(ch,Bte),e(Bte,Nlo),e(ch,jlo),e(ch,XB),e(XB,Dlo),e(ch,Glo),e(oe,Olo),e(oe,fh),e(fh,Pte),e(Pte,Vlo),e(fh,Xlo),e(fh,zB),e(zB,zlo),e(fh,Qlo),e(Qe,Wlo),M(mh,Qe,null),e(Qe,Hlo),M(gh,Qe,null),e(Ao,Ulo),e(Ao,hh),M(WA,hh,null),e(hh,Jlo),e(hh,Ite),e(Ite,Ylo),b(f,GBe,_),b(f,gi,_),e(gi,ph),e(ph,qte),M(HA,qte,null),e(gi,Klo),e(gi,Nte),e(Nte,Zlo),b(f,OBe,_),b(f,yo,_),M(UA,yo,null),e(yo,eio),e(yo,JA),e(JA,oio),e(JA,QB),e(QB,rio),e(JA,tio),e(yo,aio),e(yo,YA),e(YA,nio),e(YA,jte),e(jte,sio),e(YA,lio),e(yo,iio),e(yo,We),M(KA,We,null),e(We,dio),e(We,Dte),e(Dte,cio),e(We,fio),e(We,hi),e(hi,mio),e(hi,Gte),e(Gte,gio),e(hi,hio),e(hi,Ote),e(Ote,pio),e(hi,uio),e(We,_io),e(We,be),e(be,uh),e(uh,Vte),e(Vte,bio),e(uh,vio),e(uh,WB),e(WB,Fio),e(uh,Tio),e(be,Mio),e(be,_h),e(_h,Xte),e(Xte,Eio),e(_h,Cio),e(_h,HB),e(HB,wio),e(_h,Aio),e(be,yio),e(be,bh),e(bh,zte),e(zte,Lio),e(bh,xio),e(bh,UB),e(UB,$io),e(bh,kio),e(be,Sio),e(be,vh),e(vh,Qte),e(Qte,Rio),e(vh,Bio),e(vh,JB),e(JB,Pio),e(vh,Iio),e(be,qio),e(be,Fh),e(Fh,Wte),e(Wte,Nio),e(Fh,jio),e(Fh,YB),e(YB,Dio),e(Fh,Gio),e(be,Oio),e(be,Th),e(Th,Hte),e(Hte,Vio),e(Th,Xio),e(Th,KB),e(KB,zio),e(Th,Qio),e(be,Wio),e(be,Mh),e(Mh,Ute),e(Ute,Hio),e(Mh,Uio),e(Mh,ZB),e(ZB,Jio),e(Mh,Yio),e(be,Kio),e(be,Eh),e(Eh,Jte),e(Jte,Zio),e(Eh,edo),e(Eh,eP),e(eP,odo),e(Eh,rdo),e(be,tdo),e(be,Ch),e(Ch,Yte),e(Yte,ado),e(Ch,ndo),e(Ch,oP),e(oP,sdo),e(Ch,ldo),e(be,ido),e(be,wh),e(wh,Kte),e(Kte,ddo),e(wh,cdo),e(wh,rP),e(rP,fdo),e(wh,mdo),e(be,gdo),e(be,Ah),e(Ah,Zte),e(Zte,hdo),e(Ah,pdo),e(Ah,tP),e(tP,udo),e(Ah,_do),e(be,bdo),e(be,yh),e(yh,eae),e(eae,vdo),e(yh,Fdo),e(yh,aP),e(aP,Tdo),e(yh,Mdo),e(be,Edo),e(be,Lh),e(Lh,oae),e(oae,Cdo),e(Lh,wdo),e(Lh,nP),e(nP,Ado),e(Lh,ydo),e(be,Ldo),e(be,xh),e(xh,rae),e(rae,xdo),e(xh,$do),e(xh,sP),e(sP,kdo),e(xh,Sdo),e(We,Rdo),M($h,We,null),e(We,Bdo),M(kh,We,null),e(yo,Pdo),e(yo,Sh),M(ZA,Sh,null),e(Sh,Ido),e(Sh,tae),e(tae,qdo),b(f,VBe,_),b(f,pi,_),e(pi,Rh),e(Rh,aae),M(e0,aae,null),e(pi,Ndo),e(pi,nae),e(nae,jdo),b(f,XBe,_),b(f,Lo,_),M(o0,Lo,null),e(Lo,Ddo),e(Lo,ui),e(ui,Gdo),e(ui,lP),e(lP,Odo),e(ui,Vdo),e(ui,iP),e(iP,Xdo),e(ui,zdo),e(Lo,Qdo),e(Lo,r0),e(r0,Wdo),e(r0,sae),e(sae,Hdo),e(r0,Udo),e(Lo,Jdo),e(Lo,Zr),M(t0,Zr,null),e(Zr,Ydo),e(Zr,lae),e(lae,Kdo),e(Zr,Zdo),e(Zr,_i),e(_i,eco),e(_i,iae),e(iae,oco),e(_i,rco),e(_i,dP),e(dP,tco),e(_i,aco),e(Zr,nco),M(Bh,Zr,null),e(Lo,sco),e(Lo,He),M(a0,He,null),e(He,lco),e(He,dae),e(dae,ico),e(He,dco),e(He,Ea),e(Ea,cco),e(Ea,cae),e(cae,fco),e(Ea,mco),e(Ea,fae),e(fae,gco),e(Ea,hco),e(Ea,mae),e(mae,pco),e(Ea,uco),e(He,_co),e(He,x),e(x,Ph),e(Ph,gae),e(gae,bco),e(Ph,vco),e(Ph,cP),e(cP,Fco),e(Ph,Tco),e(x,Mco),e(x,Ih),e(Ih,hae),e(hae,Eco),e(Ih,Cco),e(Ih,fP),e(fP,wco),e(Ih,Aco),e(x,yco),e(x,qh),e(qh,pae),e(pae,Lco),e(qh,xco),e(qh,mP),e(mP,$co),e(qh,kco),e(x,Sco),e(x,Nh),e(Nh,uae),e(uae,Rco),e(Nh,Bco),e(Nh,gP),e(gP,Pco),e(Nh,Ico),e(x,qco),e(x,jh),e(jh,_ae),e(_ae,Nco),e(jh,jco),e(jh,hP),e(hP,Dco),e(jh,Gco),e(x,Oco),e(x,Dh),e(Dh,bae),e(bae,Vco),e(Dh,Xco),e(Dh,pP),e(pP,zco),e(Dh,Qco),e(x,Wco),e(x,Gh),e(Gh,vae),e(vae,Hco),e(Gh,Uco),e(Gh,uP),e(uP,Jco),e(Gh,Yco),e(x,Kco),e(x,Oh),e(Oh,Fae),e(Fae,Zco),e(Oh,efo),e(Oh,_P),e(_P,ofo),e(Oh,rfo),e(x,tfo),e(x,Vh),e(Vh,Tae),e(Tae,afo),e(Vh,nfo),e(Vh,bP),e(bP,sfo),e(Vh,lfo),e(x,ifo),e(x,Xh),e(Xh,Mae),e(Mae,dfo),e(Xh,cfo),e(Xh,vP),e(vP,ffo),e(Xh,mfo),e(x,gfo),e(x,zh),e(zh,Eae),e(Eae,hfo),e(zh,pfo),e(zh,FP),e(FP,ufo),e(zh,_fo),e(x,bfo),e(x,Qh),e(Qh,Cae),e(Cae,vfo),e(Qh,Ffo),e(Qh,TP),e(TP,Tfo),e(Qh,Mfo),e(x,Efo),e(x,Wh),e(Wh,wae),e(wae,Cfo),e(Wh,wfo),e(Wh,MP),e(MP,Afo),e(Wh,yfo),e(x,Lfo),e(x,Hh),e(Hh,Aae),e(Aae,xfo),e(Hh,$fo),e(Hh,EP),e(EP,kfo),e(Hh,Sfo),e(x,Rfo),e(x,Uh),e(Uh,yae),e(yae,Bfo),e(Uh,Pfo),e(Uh,CP),e(CP,Ifo),e(Uh,qfo),e(x,Nfo),e(x,Jh),e(Jh,Lae),e(Lae,jfo),e(Jh,Dfo),e(Jh,wP),e(wP,Gfo),e(Jh,Ofo),e(x,Vfo),e(x,Yh),e(Yh,xae),e(xae,Xfo),e(Yh,zfo),e(Yh,AP),e(AP,Qfo),e(Yh,Wfo),e(x,Hfo),e(x,Kh),e(Kh,$ae),e($ae,Ufo),e(Kh,Jfo),e(Kh,yP),e(yP,Yfo),e(Kh,Kfo),e(x,Zfo),e(x,Zh),e(Zh,kae),e(kae,emo),e(Zh,omo),e(Zh,LP),e(LP,rmo),e(Zh,tmo),e(x,amo),e(x,ep),e(ep,Sae),e(Sae,nmo),e(ep,smo),e(ep,xP),e(xP,lmo),e(ep,imo),e(x,dmo),e(x,op),e(op,Rae),e(Rae,cmo),e(op,fmo),e(op,$P),e($P,mmo),e(op,gmo),e(x,hmo),e(x,rp),e(rp,Bae),e(Bae,pmo),e(rp,umo),e(rp,kP),e(kP,_mo),e(rp,bmo),e(x,vmo),e(x,tp),e(tp,Pae),e(Pae,Fmo),e(tp,Tmo),e(tp,SP),e(SP,Mmo),e(tp,Emo),e(x,Cmo),e(x,ap),e(ap,Iae),e(Iae,wmo),e(ap,Amo),e(ap,RP),e(RP,ymo),e(ap,Lmo),e(x,xmo),e(x,np),e(np,qae),e(qae,$mo),e(np,kmo),e(np,BP),e(BP,Smo),e(np,Rmo),e(x,Bmo),e(x,sp),e(sp,Nae),e(Nae,Pmo),e(sp,Imo),e(sp,PP),e(PP,qmo),e(sp,Nmo),e(x,jmo),e(x,lp),e(lp,jae),e(jae,Dmo),e(lp,Gmo),e(lp,IP),e(IP,Omo),e(lp,Vmo),e(x,Xmo),e(x,ip),e(ip,Dae),e(Dae,zmo),e(ip,Qmo),e(ip,qP),e(qP,Wmo),e(ip,Hmo),e(x,Umo),e(x,dp),e(dp,Gae),e(Gae,Jmo),e(dp,Ymo),e(dp,NP),e(NP,Kmo),e(dp,Zmo),e(x,ego),e(x,cp),e(cp,Oae),e(Oae,ogo),e(cp,rgo),e(cp,jP),e(jP,tgo),e(cp,ago),e(x,ngo),e(x,fp),e(fp,Vae),e(Vae,sgo),e(fp,lgo),e(fp,DP),e(DP,igo),e(fp,dgo),e(x,cgo),e(x,Ls),e(Ls,Xae),e(Xae,fgo),e(Ls,mgo),e(Ls,GP),e(GP,ggo),e(Ls,hgo),e(Ls,OP),e(OP,pgo),e(Ls,ugo),e(x,_go),e(x,mp),e(mp,zae),e(zae,bgo),e(mp,vgo),e(mp,VP),e(VP,Fgo),e(mp,Tgo),e(x,Mgo),e(x,gp),e(gp,Qae),e(Qae,Ego),e(gp,Cgo),e(gp,XP),e(XP,wgo),e(gp,Ago),e(x,ygo),e(x,hp),e(hp,Wae),e(Wae,Lgo),e(hp,xgo),e(hp,zP),e(zP,$go),e(hp,kgo),e(x,Sgo),e(x,pp),e(pp,Hae),e(Hae,Rgo),e(pp,Bgo),e(pp,QP),e(QP,Pgo),e(pp,Igo),e(x,qgo),e(x,up),e(up,Uae),e(Uae,Ngo),e(up,jgo),e(up,WP),e(WP,Dgo),e(up,Ggo),e(x,Ogo),e(x,_p),e(_p,Jae),e(Jae,Vgo),e(_p,Xgo),e(_p,HP),e(HP,zgo),e(_p,Qgo),e(x,Wgo),e(x,bp),e(bp,Yae),e(Yae,Hgo),e(bp,Ugo),e(bp,UP),e(UP,Jgo),e(bp,Ygo),e(x,Kgo),e(x,vp),e(vp,Kae),e(Kae,Zgo),e(vp,eho),e(vp,JP),e(JP,oho),e(vp,rho),e(x,tho),e(x,Fp),e(Fp,Zae),e(Zae,aho),e(Fp,nho),e(Fp,YP),e(YP,sho),e(Fp,lho),e(x,iho),e(x,Tp),e(Tp,ene),e(ene,dho),e(Tp,cho),e(Tp,KP),e(KP,fho),e(Tp,mho),e(x,gho),e(x,Mp),e(Mp,one),e(one,hho),e(Mp,pho),e(Mp,ZP),e(ZP,uho),e(Mp,_ho),e(x,bho),e(x,Ep),e(Ep,rne),e(rne,vho),e(Ep,Fho),e(Ep,eI),e(eI,Tho),e(Ep,Mho),e(x,Eho),e(x,Cp),e(Cp,tne),e(tne,Cho),e(Cp,who),e(Cp,oI),e(oI,Aho),e(Cp,yho),e(x,Lho),e(x,wp),e(wp,ane),e(ane,xho),e(wp,$ho),e(wp,rI),e(rI,kho),e(wp,Sho),e(x,Rho),e(x,Ap),e(Ap,nne),e(nne,Bho),e(Ap,Pho),e(Ap,tI),e(tI,Iho),e(Ap,qho),e(x,Nho),e(x,yp),e(yp,sne),e(sne,jho),e(yp,Dho),e(yp,aI),e(aI,Gho),e(yp,Oho),e(x,Vho),e(x,Lp),e(Lp,lne),e(lne,Xho),e(Lp,zho),e(Lp,nI),e(nI,Qho),e(Lp,Who),e(x,Hho),e(x,xp),e(xp,ine),e(ine,Uho),e(xp,Jho),e(xp,sI),e(sI,Yho),e(xp,Kho),e(x,Zho),e(x,$p),e($p,dne),e(dne,epo),e($p,opo),e($p,lI),e(lI,rpo),e($p,tpo),e(x,apo),e(x,kp),e(kp,cne),e(cne,npo),e(kp,spo),e(kp,iI),e(iI,lpo),e(kp,ipo),e(x,dpo),e(x,Sp),e(Sp,fne),e(fne,cpo),e(Sp,fpo),e(Sp,dI),e(dI,mpo),e(Sp,gpo),e(x,hpo),e(x,Rp),e(Rp,mne),e(mne,ppo),e(Rp,upo),e(Rp,cI),e(cI,_po),e(Rp,bpo),e(x,vpo),e(x,Bp),e(Bp,gne),e(gne,Fpo),e(Bp,Tpo),e(Bp,fI),e(fI,Mpo),e(Bp,Epo),e(x,Cpo),e(x,Pp),e(Pp,hne),e(hne,wpo),e(Pp,Apo),e(Pp,mI),e(mI,ypo),e(Pp,Lpo),e(x,xpo),e(x,Ip),e(Ip,pne),e(pne,$po),e(Ip,kpo),e(Ip,gI),e(gI,Spo),e(Ip,Rpo),e(x,Bpo),e(x,qp),e(qp,une),e(une,Ppo),e(qp,Ipo),e(qp,hI),e(hI,qpo),e(qp,Npo),e(x,jpo),e(x,Np),e(Np,_ne),e(_ne,Dpo),e(Np,Gpo),e(Np,pI),e(pI,Opo),e(Np,Vpo),e(x,Xpo),e(x,jp),e(jp,bne),e(bne,zpo),e(jp,Qpo),e(jp,uI),e(uI,Wpo),e(jp,Hpo),e(x,Upo),e(x,Dp),e(Dp,vne),e(vne,Jpo),e(Dp,Ypo),e(Dp,_I),e(_I,Kpo),e(Dp,Zpo),e(x,euo),e(x,Gp),e(Gp,Fne),e(Fne,ouo),e(Gp,ruo),e(Gp,bI),e(bI,tuo),e(Gp,auo),e(x,nuo),e(x,Op),e(Op,Tne),e(Tne,suo),e(Op,luo),e(Op,vI),e(vI,iuo),e(Op,duo),e(x,cuo),e(x,Vp),e(Vp,Mne),e(Mne,fuo),e(Vp,muo),e(Vp,FI),e(FI,guo),e(Vp,huo),e(x,puo),e(x,Xp),e(Xp,Ene),e(Ene,uuo),e(Xp,_uo),e(Xp,TI),e(TI,buo),e(Xp,vuo),e(x,Fuo),e(x,zp),e(zp,Cne),e(Cne,Tuo),e(zp,Muo),e(zp,MI),e(MI,Euo),e(zp,Cuo),e(x,wuo),e(x,Qp),e(Qp,wne),e(wne,Auo),e(Qp,yuo),e(Qp,EI),e(EI,Luo),e(Qp,xuo),e(x,$uo),e(x,Wp),e(Wp,Ane),e(Ane,kuo),e(Wp,Suo),e(Wp,CI),e(CI,Ruo),e(Wp,Buo),e(x,Puo),e(x,Hp),e(Hp,yne),e(yne,Iuo),e(Hp,quo),e(Hp,wI),e(wI,Nuo),e(Hp,juo),e(x,Duo),e(x,Up),e(Up,Lne),e(Lne,Guo),e(Up,Ouo),e(Up,AI),e(AI,Vuo),e(Up,Xuo),e(x,zuo),e(x,Jp),e(Jp,xne),e(xne,Quo),e(Jp,Wuo),e(Jp,yI),e(yI,Huo),e(Jp,Uuo),e(x,Juo),e(x,Yp),e(Yp,$ne),e($ne,Yuo),e(Yp,Kuo),e(Yp,LI),e(LI,Zuo),e(Yp,e_o),e(x,o_o),e(x,Kp),e(Kp,kne),e(kne,r_o),e(Kp,t_o),e(Kp,xI),e(xI,a_o),e(Kp,n_o),e(x,s_o),e(x,Zp),e(Zp,Sne),e(Sne,l_o),e(Zp,i_o),e(Zp,$I),e($I,d_o),e(Zp,c_o),e(x,f_o),e(x,eu),e(eu,Rne),e(Rne,m_o),e(eu,g_o),e(eu,kI),e(kI,h_o),e(eu,p_o),e(x,u_o),e(x,ou),e(ou,Bne),e(Bne,__o),e(ou,b_o),e(ou,SI),e(SI,v_o),e(ou,F_o),e(x,T_o),e(x,ru),e(ru,Pne),e(Pne,M_o),e(ru,E_o),e(ru,RI),e(RI,C_o),e(ru,w_o),e(x,A_o),e(x,tu),e(tu,Ine),e(Ine,y_o),e(tu,L_o),e(tu,BI),e(BI,x_o),e(tu,$_o),e(x,k_o),e(x,au),e(au,qne),e(qne,S_o),e(au,R_o),e(au,PI),e(PI,B_o),e(au,P_o),e(x,I_o),e(x,nu),e(nu,Nne),e(Nne,q_o),e(nu,N_o),e(nu,II),e(II,j_o),e(nu,D_o),e(x,G_o),e(x,su),e(su,jne),e(jne,O_o),e(su,V_o),e(su,qI),e(qI,X_o),e(su,z_o),e(x,Q_o),e(x,lu),e(lu,Dne),e(Dne,W_o),e(lu,H_o),e(lu,NI),e(NI,U_o),e(lu,J_o),e(x,Y_o),e(x,iu),e(iu,Gne),e(Gne,K_o),e(iu,Z_o),e(iu,jI),e(jI,e5o),e(iu,o5o),e(x,r5o),e(x,du),e(du,One),e(One,t5o),e(du,a5o),e(du,DI),e(DI,n5o),e(du,s5o),e(x,l5o),e(x,cu),e(cu,Vne),e(Vne,i5o),e(cu,d5o),e(cu,GI),e(GI,c5o),e(cu,f5o),e(x,m5o),e(x,fu),e(fu,Xne),e(Xne,g5o),e(fu,h5o),e(fu,OI),e(OI,p5o),e(fu,u5o),e(x,_5o),e(x,mu),e(mu,zne),e(zne,b5o),e(mu,v5o),e(mu,VI),e(VI,F5o),e(mu,T5o),e(x,M5o),e(x,gu),e(gu,Qne),e(Qne,E5o),e(gu,C5o),e(gu,XI),e(XI,w5o),e(gu,A5o),e(x,y5o),e(x,hu),e(hu,Wne),e(Wne,L5o),e(hu,x5o),e(hu,zI),e(zI,$5o),e(hu,k5o),e(x,S5o),e(x,pu),e(pu,Hne),e(Hne,R5o),e(pu,B5o),e(pu,QI),e(QI,P5o),e(pu,I5o),e(x,q5o),e(x,uu),e(uu,Une),e(Une,N5o),e(uu,j5o),e(uu,WI),e(WI,D5o),e(uu,G5o),e(x,O5o),e(x,_u),e(_u,Jne),e(Jne,V5o),e(_u,X5o),e(_u,HI),e(HI,z5o),e(_u,Q5o),e(x,W5o),e(x,bu),e(bu,Yne),e(Yne,H5o),e(bu,U5o),e(bu,UI),e(UI,J5o),e(bu,Y5o),e(x,K5o),e(x,vu),e(vu,Kne),e(Kne,Z5o),e(vu,e1o),e(vu,JI),e(JI,o1o),e(vu,r1o),e(x,t1o),e(x,Fu),e(Fu,Zne),e(Zne,a1o),e(Fu,n1o),e(Fu,YI),e(YI,s1o),e(Fu,l1o),e(x,i1o),e(x,Tu),e(Tu,ese),e(ese,d1o),e(Tu,c1o),e(Tu,KI),e(KI,f1o),e(Tu,m1o),e(He,g1o),e(He,Mu),e(Mu,h1o),e(Mu,ose),e(ose,p1o),e(Mu,u1o),e(Mu,rse),e(rse,_1o),e(He,b1o),M(Eu,He,null),b(f,zBe,_),b(f,bi,_),e(bi,Cu),e(Cu,tse),M(n0,tse,null),e(bi,v1o),e(bi,ase),e(ase,F1o),b(f,QBe,_),b(f,xo,_),M(s0,xo,null),e(xo,T1o),e(xo,vi),e(vi,M1o),e(vi,ZI),e(ZI,E1o),e(vi,C1o),e(vi,eq),e(eq,w1o),e(vi,A1o),e(xo,y1o),e(xo,l0),e(l0,L1o),e(l0,nse),e(nse,x1o),e(l0,$1o),e(xo,k1o),e(xo,et),M(i0,et,null),e(et,S1o),e(et,sse),e(sse,R1o),e(et,B1o),e(et,Fi),e(Fi,P1o),e(Fi,lse),e(lse,I1o),e(Fi,q1o),e(Fi,oq),e(oq,N1o),e(Fi,j1o),e(et,D1o),M(wu,et,null),e(xo,G1o),e(xo,Ue),M(d0,Ue,null),e(Ue,O1o),e(Ue,ise),e(ise,V1o),e(Ue,X1o),e(Ue,Ca),e(Ca,z1o),e(Ca,dse),e(dse,Q1o),e(Ca,W1o),e(Ca,cse),e(cse,H1o),e(Ca,U1o),e(Ca,fse),e(fse,J1o),e(Ca,Y1o),e(Ue,K1o),e(Ue,G),e(G,Au),e(Au,mse),e(mse,Z1o),e(Au,ebo),e(Au,rq),e(rq,obo),e(Au,rbo),e(G,tbo),e(G,yu),e(yu,gse),e(gse,abo),e(yu,nbo),e(yu,tq),e(tq,sbo),e(yu,lbo),e(G,ibo),e(G,Lu),e(Lu,hse),e(hse,dbo),e(Lu,cbo),e(Lu,aq),e(aq,fbo),e(Lu,mbo),e(G,gbo),e(G,xu),e(xu,pse),e(pse,hbo),e(xu,pbo),e(xu,nq),e(nq,ubo),e(xu,_bo),e(G,bbo),e(G,$u),e($u,use),e(use,vbo),e($u,Fbo),e($u,sq),e(sq,Tbo),e($u,Mbo),e(G,Ebo),e(G,ku),e(ku,_se),e(_se,Cbo),e(ku,wbo),e(ku,lq),e(lq,Abo),e(ku,ybo),e(G,Lbo),e(G,Su),e(Su,bse),e(bse,xbo),e(Su,$bo),e(Su,iq),e(iq,kbo),e(Su,Sbo),e(G,Rbo),e(G,Ru),e(Ru,vse),e(vse,Bbo),e(Ru,Pbo),e(Ru,dq),e(dq,Ibo),e(Ru,qbo),e(G,Nbo),e(G,Bu),e(Bu,Fse),e(Fse,jbo),e(Bu,Dbo),e(Bu,cq),e(cq,Gbo),e(Bu,Obo),e(G,Vbo),e(G,Pu),e(Pu,Tse),e(Tse,Xbo),e(Pu,zbo),e(Pu,fq),e(fq,Qbo),e(Pu,Wbo),e(G,Hbo),e(G,Iu),e(Iu,Mse),e(Mse,Ubo),e(Iu,Jbo),e(Iu,mq),e(mq,Ybo),e(Iu,Kbo),e(G,Zbo),e(G,qu),e(qu,Ese),e(Ese,e2o),e(qu,o2o),e(qu,gq),e(gq,r2o),e(qu,t2o),e(G,a2o),e(G,Nu),e(Nu,Cse),e(Cse,n2o),e(Nu,s2o),e(Nu,hq),e(hq,l2o),e(Nu,i2o),e(G,d2o),e(G,ju),e(ju,wse),e(wse,c2o),e(ju,f2o),e(ju,pq),e(pq,m2o),e(ju,g2o),e(G,h2o),e(G,Du),e(Du,Ase),e(Ase,p2o),e(Du,u2o),e(Du,uq),e(uq,_2o),e(Du,b2o),e(G,v2o),e(G,Gu),e(Gu,yse),e(yse,F2o),e(Gu,T2o),e(Gu,_q),e(_q,M2o),e(Gu,E2o),e(G,C2o),e(G,Ou),e(Ou,Lse),e(Lse,w2o),e(Ou,A2o),e(Ou,bq),e(bq,y2o),e(Ou,L2o),e(G,x2o),e(G,Vu),e(Vu,xse),e(xse,$2o),e(Vu,k2o),e(Vu,vq),e(vq,S2o),e(Vu,R2o),e(G,B2o),e(G,Xu),e(Xu,$se),e($se,P2o),e(Xu,I2o),e(Xu,Fq),e(Fq,q2o),e(Xu,N2o),e(G,j2o),e(G,zu),e(zu,kse),e(kse,D2o),e(zu,G2o),e(zu,Tq),e(Tq,O2o),e(zu,V2o),e(G,X2o),e(G,Qu),e(Qu,Sse),e(Sse,z2o),e(Qu,Q2o),e(Qu,Mq),e(Mq,W2o),e(Qu,H2o),e(G,U2o),e(G,Wu),e(Wu,Rse),e(Rse,J2o),e(Wu,Y2o),e(Wu,Eq),e(Eq,K2o),e(Wu,Z2o),e(G,evo),e(G,Hu),e(Hu,Bse),e(Bse,ovo),e(Hu,rvo),e(Hu,Cq),e(Cq,tvo),e(Hu,avo),e(G,nvo),e(G,Uu),e(Uu,Pse),e(Pse,svo),e(Uu,lvo),e(Uu,wq),e(wq,ivo),e(Uu,dvo),e(G,cvo),e(G,Ju),e(Ju,Ise),e(Ise,fvo),e(Ju,mvo),e(Ju,Aq),e(Aq,gvo),e(Ju,hvo),e(G,pvo),e(G,Yu),e(Yu,qse),e(qse,uvo),e(Yu,_vo),e(Yu,yq),e(yq,bvo),e(Yu,vvo),e(G,Fvo),e(G,Ku),e(Ku,Nse),e(Nse,Tvo),e(Ku,Mvo),e(Ku,Lq),e(Lq,Evo),e(Ku,Cvo),e(G,wvo),e(G,Zu),e(Zu,jse),e(jse,Avo),e(Zu,yvo),e(Zu,xq),e(xq,Lvo),e(Zu,xvo),e(G,$vo),e(G,e_),e(e_,Dse),e(Dse,kvo),e(e_,Svo),e(e_,$q),e($q,Rvo),e(e_,Bvo),e(G,Pvo),e(G,o_),e(o_,Gse),e(Gse,Ivo),e(o_,qvo),e(o_,kq),e(kq,Nvo),e(o_,jvo),e(G,Dvo),e(G,r_),e(r_,Ose),e(Ose,Gvo),e(r_,Ovo),e(r_,Sq),e(Sq,Vvo),e(r_,Xvo),e(G,zvo),e(G,t_),e(t_,Vse),e(Vse,Qvo),e(t_,Wvo),e(t_,Rq),e(Rq,Hvo),e(t_,Uvo),e(G,Jvo),e(G,a_),e(a_,Xse),e(Xse,Yvo),e(a_,Kvo),e(a_,Bq),e(Bq,Zvo),e(a_,eFo),e(G,oFo),e(G,n_),e(n_,zse),e(zse,rFo),e(n_,tFo),e(n_,Pq),e(Pq,aFo),e(n_,nFo),e(G,sFo),e(G,s_),e(s_,Qse),e(Qse,lFo),e(s_,iFo),e(s_,Iq),e(Iq,dFo),e(s_,cFo),e(G,fFo),e(G,l_),e(l_,Wse),e(Wse,mFo),e(l_,gFo),e(l_,qq),e(qq,hFo),e(l_,pFo),e(G,uFo),e(G,i_),e(i_,Hse),e(Hse,_Fo),e(i_,bFo),e(i_,Nq),e(Nq,vFo),e(i_,FFo),e(G,TFo),e(G,d_),e(d_,Use),e(Use,MFo),e(d_,EFo),e(d_,jq),e(jq,CFo),e(d_,wFo),e(G,AFo),e(G,c_),e(c_,Jse),e(Jse,yFo),e(c_,LFo),e(c_,Dq),e(Dq,xFo),e(c_,$Fo),e(Ue,kFo),e(Ue,f_),e(f_,SFo),e(f_,Yse),e(Yse,RFo),e(f_,BFo),e(f_,Kse),e(Kse,PFo),e(Ue,IFo),M(m_,Ue,null),b(f,WBe,_),b(f,Ti,_),e(Ti,g_),e(g_,Zse),M(c0,Zse,null),e(Ti,qFo),e(Ti,ele),e(ele,NFo),b(f,HBe,_),b(f,$o,_),M(f0,$o,null),e($o,jFo),e($o,Mi),e(Mi,DFo),e(Mi,Gq),e(Gq,GFo),e(Mi,OFo),e(Mi,Oq),e(Oq,VFo),e(Mi,XFo),e($o,zFo),e($o,m0),e(m0,QFo),e(m0,ole),e(ole,WFo),e(m0,HFo),e($o,UFo),e($o,ot),M(g0,ot,null),e(ot,JFo),e(ot,rle),e(rle,YFo),e(ot,KFo),e(ot,Ei),e(Ei,ZFo),e(Ei,tle),e(tle,e6o),e(Ei,o6o),e(Ei,Vq),e(Vq,r6o),e(Ei,t6o),e(ot,a6o),M(h_,ot,null),e($o,n6o),e($o,Je),M(h0,Je,null),e(Je,s6o),e(Je,ale),e(ale,l6o),e(Je,i6o),e(Je,wa),e(wa,d6o),e(wa,nle),e(nle,c6o),e(wa,f6o),e(wa,sle),e(sle,m6o),e(wa,g6o),e(wa,lle),e(lle,h6o),e(wa,p6o),e(Je,u6o),e(Je,z),e(z,p_),e(p_,ile),e(ile,_6o),e(p_,b6o),e(p_,Xq),e(Xq,v6o),e(p_,F6o),e(z,T6o),e(z,u_),e(u_,dle),e(dle,M6o),e(u_,E6o),e(u_,zq),e(zq,C6o),e(u_,w6o),e(z,A6o),e(z,__),e(__,cle),e(cle,y6o),e(__,L6o),e(__,Qq),e(Qq,x6o),e(__,$6o),e(z,k6o),e(z,b_),e(b_,fle),e(fle,S6o),e(b_,R6o),e(b_,Wq),e(Wq,B6o),e(b_,P6o),e(z,I6o),e(z,v_),e(v_,mle),e(mle,q6o),e(v_,N6o),e(v_,Hq),e(Hq,j6o),e(v_,D6o),e(z,G6o),e(z,F_),e(F_,gle),e(gle,O6o),e(F_,V6o),e(F_,Uq),e(Uq,X6o),e(F_,z6o),e(z,Q6o),e(z,T_),e(T_,hle),e(hle,W6o),e(T_,H6o),e(T_,Jq),e(Jq,U6o),e(T_,J6o),e(z,Y6o),e(z,M_),e(M_,ple),e(ple,K6o),e(M_,Z6o),e(M_,Yq),e(Yq,eTo),e(M_,oTo),e(z,rTo),e(z,E_),e(E_,ule),e(ule,tTo),e(E_,aTo),e(E_,Kq),e(Kq,nTo),e(E_,sTo),e(z,lTo),e(z,C_),e(C_,_le),e(_le,iTo),e(C_,dTo),e(C_,Zq),e(Zq,cTo),e(C_,fTo),e(z,mTo),e(z,w_),e(w_,ble),e(ble,gTo),e(w_,hTo),e(w_,eN),e(eN,pTo),e(w_,uTo),e(z,_To),e(z,A_),e(A_,vle),e(vle,bTo),e(A_,vTo),e(A_,oN),e(oN,FTo),e(A_,TTo),e(z,MTo),e(z,y_),e(y_,Fle),e(Fle,ETo),e(y_,CTo),e(y_,rN),e(rN,wTo),e(y_,ATo),e(z,yTo),e(z,L_),e(L_,Tle),e(Tle,LTo),e(L_,xTo),e(L_,tN),e(tN,$To),e(L_,kTo),e(z,STo),e(z,x_),e(x_,Mle),e(Mle,RTo),e(x_,BTo),e(x_,aN),e(aN,PTo),e(x_,ITo),e(z,qTo),e(z,$_),e($_,Ele),e(Ele,NTo),e($_,jTo),e($_,nN),e(nN,DTo),e($_,GTo),e(z,OTo),e(z,k_),e(k_,Cle),e(Cle,VTo),e(k_,XTo),e(k_,sN),e(sN,zTo),e(k_,QTo),e(z,WTo),e(z,S_),e(S_,wle),e(wle,HTo),e(S_,UTo),e(S_,lN),e(lN,JTo),e(S_,YTo),e(z,KTo),e(z,R_),e(R_,Ale),e(Ale,ZTo),e(R_,e7o),e(R_,iN),e(iN,o7o),e(R_,r7o),e(z,t7o),e(z,B_),e(B_,yle),e(yle,a7o),e(B_,n7o),e(B_,dN),e(dN,s7o),e(B_,l7o),e(z,i7o),e(z,P_),e(P_,Lle),e(Lle,d7o),e(P_,c7o),e(P_,cN),e(cN,f7o),e(P_,m7o),e(z,g7o),e(z,I_),e(I_,xle),e(xle,h7o),e(I_,p7o),e(I_,fN),e(fN,u7o),e(I_,_7o),e(z,b7o),e(z,q_),e(q_,$le),e($le,v7o),e(q_,F7o),e(q_,mN),e(mN,T7o),e(q_,M7o),e(z,E7o),e(z,N_),e(N_,kle),e(kle,C7o),e(N_,w7o),e(N_,gN),e(gN,A7o),e(N_,y7o),e(z,L7o),e(z,j_),e(j_,Sle),e(Sle,x7o),e(j_,$7o),e(j_,hN),e(hN,k7o),e(j_,S7o),e(z,R7o),e(z,D_),e(D_,Rle),e(Rle,B7o),e(D_,P7o),e(D_,pN),e(pN,I7o),e(D_,q7o),e(z,N7o),e(z,G_),e(G_,Ble),e(Ble,j7o),e(G_,D7o),e(G_,uN),e(uN,G7o),e(G_,O7o),e(z,V7o),e(z,O_),e(O_,Ple),e(Ple,X7o),e(O_,z7o),e(O_,_N),e(_N,Q7o),e(O_,W7o),e(z,H7o),e(z,V_),e(V_,Ile),e(Ile,U7o),e(V_,J7o),e(V_,bN),e(bN,Y7o),e(V_,K7o),e(z,Z7o),e(z,X_),e(X_,qle),e(qle,eMo),e(X_,oMo),e(X_,vN),e(vN,rMo),e(X_,tMo),e(z,aMo),e(z,z_),e(z_,Nle),e(Nle,nMo),e(z_,sMo),e(z_,FN),e(FN,lMo),e(z_,iMo),e(z,dMo),e(z,Q_),e(Q_,jle),e(jle,cMo),e(Q_,fMo),e(Q_,TN),e(TN,mMo),e(Q_,gMo),e(z,hMo),e(z,W_),e(W_,Dle),e(Dle,pMo),e(W_,uMo),e(W_,MN),e(MN,_Mo),e(W_,bMo),e(z,vMo),e(z,H_),e(H_,Gle),e(Gle,FMo),e(H_,TMo),e(H_,EN),e(EN,MMo),e(H_,EMo),e(z,CMo),e(z,U_),e(U_,Ole),e(Ole,wMo),e(U_,AMo),e(U_,CN),e(CN,yMo),e(U_,LMo),e(Je,xMo),e(Je,J_),e(J_,$Mo),e(J_,Vle),e(Vle,kMo),e(J_,SMo),e(J_,Xle),e(Xle,RMo),e(Je,BMo),M(Y_,Je,null),b(f,UBe,_),b(f,Ci,_),e(Ci,K_),e(K_,zle),M(p0,zle,null),e(Ci,PMo),e(Ci,Qle),e(Qle,IMo),b(f,JBe,_),b(f,ko,_),M(u0,ko,null),e(ko,qMo),e(ko,wi),e(wi,NMo),e(wi,wN),e(wN,jMo),e(wi,DMo),e(wi,AN),e(AN,GMo),e(wi,OMo),e(ko,VMo),e(ko,_0),e(_0,XMo),e(_0,Wle),e(Wle,zMo),e(_0,QMo),e(ko,WMo),e(ko,rt),M(b0,rt,null),e(rt,HMo),e(rt,Hle),e(Hle,UMo),e(rt,JMo),e(rt,Ai),e(Ai,YMo),e(Ai,Ule),e(Ule,KMo),e(Ai,ZMo),e(Ai,yN),e(yN,e4o),e(Ai,o4o),e(rt,r4o),M(Z_,rt,null),e(ko,t4o),e(ko,Ye),M(v0,Ye,null),e(Ye,a4o),e(Ye,Jle),e(Jle,n4o),e(Ye,s4o),e(Ye,Aa),e(Aa,l4o),e(Aa,Yle),e(Yle,i4o),e(Aa,d4o),e(Aa,Kle),e(Kle,c4o),e(Aa,f4o),e(Aa,Zle),e(Zle,m4o),e(Aa,g4o),e(Ye,h4o),e(Ye,Q),e(Q,e5),e(e5,eie),e(eie,p4o),e(e5,u4o),e(e5,LN),e(LN,_4o),e(e5,b4o),e(Q,v4o),e(Q,o5),e(o5,oie),e(oie,F4o),e(o5,T4o),e(o5,xN),e(xN,M4o),e(o5,E4o),e(Q,C4o),e(Q,r5),e(r5,rie),e(rie,w4o),e(r5,A4o),e(r5,$N),e($N,y4o),e(r5,L4o),e(Q,x4o),e(Q,t5),e(t5,tie),e(tie,$4o),e(t5,k4o),e(t5,kN),e(kN,S4o),e(t5,R4o),e(Q,B4o),e(Q,a5),e(a5,aie),e(aie,P4o),e(a5,I4o),e(a5,SN),e(SN,q4o),e(a5,N4o),e(Q,j4o),e(Q,n5),e(n5,nie),e(nie,D4o),e(n5,G4o),e(n5,RN),e(RN,O4o),e(n5,V4o),e(Q,X4o),e(Q,s5),e(s5,sie),e(sie,z4o),e(s5,Q4o),e(s5,BN),e(BN,W4o),e(s5,H4o),e(Q,U4o),e(Q,l5),e(l5,lie),e(lie,J4o),e(l5,Y4o),e(l5,PN),e(PN,K4o),e(l5,Z4o),e(Q,eEo),e(Q,i5),e(i5,iie),e(iie,oEo),e(i5,rEo),e(i5,IN),e(IN,tEo),e(i5,aEo),e(Q,nEo),e(Q,d5),e(d5,die),e(die,sEo),e(d5,lEo),e(d5,qN),e(qN,iEo),e(d5,dEo),e(Q,cEo),e(Q,c5),e(c5,cie),e(cie,fEo),e(c5,mEo),e(c5,NN),e(NN,gEo),e(c5,hEo),e(Q,pEo),e(Q,f5),e(f5,fie),e(fie,uEo),e(f5,_Eo),e(f5,jN),e(jN,bEo),e(f5,vEo),e(Q,FEo),e(Q,m5),e(m5,mie),e(mie,TEo),e(m5,MEo),e(m5,DN),e(DN,EEo),e(m5,CEo),e(Q,wEo),e(Q,g5),e(g5,gie),e(gie,AEo),e(g5,yEo),e(g5,GN),e(GN,LEo),e(g5,xEo),e(Q,$Eo),e(Q,h5),e(h5,hie),e(hie,kEo),e(h5,SEo),e(h5,ON),e(ON,REo),e(h5,BEo),e(Q,PEo),e(Q,p5),e(p5,pie),e(pie,IEo),e(p5,qEo),e(p5,VN),e(VN,NEo),e(p5,jEo),e(Q,DEo),e(Q,u5),e(u5,uie),e(uie,GEo),e(u5,OEo),e(u5,XN),e(XN,VEo),e(u5,XEo),e(Q,zEo),e(Q,_5),e(_5,_ie),e(_ie,QEo),e(_5,WEo),e(_5,zN),e(zN,HEo),e(_5,UEo),e(Q,JEo),e(Q,b5),e(b5,bie),e(bie,YEo),e(b5,KEo),e(b5,QN),e(QN,ZEo),e(b5,eCo),e(Q,oCo),e(Q,v5),e(v5,vie),e(vie,rCo),e(v5,tCo),e(v5,WN),e(WN,aCo),e(v5,nCo),e(Q,sCo),e(Q,F5),e(F5,Fie),e(Fie,lCo),e(F5,iCo),e(F5,HN),e(HN,dCo),e(F5,cCo),e(Q,fCo),e(Q,T5),e(T5,Tie),e(Tie,mCo),e(T5,gCo),e(T5,UN),e(UN,hCo),e(T5,pCo),e(Q,uCo),e(Q,M5),e(M5,Mie),e(Mie,_Co),e(M5,bCo),e(M5,JN),e(JN,vCo),e(M5,FCo),e(Q,TCo),e(Q,E5),e(E5,Eie),e(Eie,MCo),e(E5,ECo),e(E5,YN),e(YN,CCo),e(E5,wCo),e(Q,ACo),e(Q,C5),e(C5,Cie),e(Cie,yCo),e(C5,LCo),e(C5,KN),e(KN,xCo),e(C5,$Co),e(Q,kCo),e(Q,w5),e(w5,wie),e(wie,SCo),e(w5,RCo),e(w5,ZN),e(ZN,BCo),e(w5,PCo),e(Q,ICo),e(Q,A5),e(A5,Aie),e(Aie,qCo),e(A5,NCo),e(A5,ej),e(ej,jCo),e(A5,DCo),e(Q,GCo),e(Q,y5),e(y5,yie),e(yie,OCo),e(y5,VCo),e(y5,oj),e(oj,XCo),e(y5,zCo),e(Q,QCo),e(Q,L5),e(L5,Lie),e(Lie,WCo),e(L5,HCo),e(L5,rj),e(rj,UCo),e(L5,JCo),e(Q,YCo),e(Q,x5),e(x5,xie),e(xie,KCo),e(x5,ZCo),e(x5,tj),e(tj,e3o),e(x5,o3o),e(Q,r3o),e(Q,$5),e($5,$ie),e($ie,t3o),e($5,a3o),e($5,kie),e(kie,n3o),e($5,s3o),e(Q,l3o),e(Q,k5),e(k5,Sie),e(Sie,i3o),e(k5,d3o),e(k5,aj),e(aj,c3o),e(k5,f3o),e(Q,m3o),e(Q,S5),e(S5,Rie),e(Rie,g3o),e(S5,h3o),e(S5,nj),e(nj,p3o),e(S5,u3o),e(Q,_3o),e(Q,R5),e(R5,Bie),e(Bie,b3o),e(R5,v3o),e(R5,sj),e(sj,F3o),e(R5,T3o),e(Q,M3o),e(Q,B5),e(B5,Pie),e(Pie,E3o),e(B5,C3o),e(B5,lj),e(lj,w3o),e(B5,A3o),e(Ye,y3o),e(Ye,P5),e(P5,L3o),e(P5,Iie),e(Iie,x3o),e(P5,$3o),e(P5,qie),e(qie,k3o),e(Ye,S3o),M(I5,Ye,null),b(f,YBe,_),b(f,yi,_),e(yi,q5),e(q5,Nie),M(F0,Nie,null),e(yi,R3o),e(yi,jie),e(jie,B3o),b(f,KBe,_),b(f,So,_),M(T0,So,null),e(So,P3o),e(So,Li),e(Li,I3o),e(Li,ij),e(ij,q3o),e(Li,N3o),e(Li,dj),e(dj,j3o),e(Li,D3o),e(So,G3o),e(So,M0),e(M0,O3o),e(M0,Die),e(Die,V3o),e(M0,X3o),e(So,z3o),e(So,tt),M(E0,tt,null),e(tt,Q3o),e(tt,Gie),e(Gie,W3o),e(tt,H3o),e(tt,xi),e(xi,U3o),e(xi,Oie),e(Oie,J3o),e(xi,Y3o),e(xi,cj),e(cj,K3o),e(xi,Z3o),e(tt,ewo),M(N5,tt,null),e(So,owo),e(So,Ke),M(C0,Ke,null),e(Ke,rwo),e(Ke,Vie),e(Vie,two),e(Ke,awo),e(Ke,ya),e(ya,nwo),e(ya,Xie),e(Xie,swo),e(ya,lwo),e(ya,zie),e(zie,iwo),e(ya,dwo),e(ya,Qie),e(Qie,cwo),e(ya,fwo),e(Ke,mwo),e(Ke,he),e(he,j5),e(j5,Wie),e(Wie,gwo),e(j5,hwo),e(j5,fj),e(fj,pwo),e(j5,uwo),e(he,_wo),e(he,D5),e(D5,Hie),e(Hie,bwo),e(D5,vwo),e(D5,mj),e(mj,Fwo),e(D5,Two),e(he,Mwo),e(he,G5),e(G5,Uie),e(Uie,Ewo),e(G5,Cwo),e(G5,gj),e(gj,wwo),e(G5,Awo),e(he,ywo),e(he,O5),e(O5,Jie),e(Jie,Lwo),e(O5,xwo),e(O5,hj),e(hj,$wo),e(O5,kwo),e(he,Swo),e(he,V5),e(V5,Yie),e(Yie,Rwo),e(V5,Bwo),e(V5,pj),e(pj,Pwo),e(V5,Iwo),e(he,qwo),e(he,X5),e(X5,Kie),e(Kie,Nwo),e(X5,jwo),e(X5,uj),e(uj,Dwo),e(X5,Gwo),e(he,Owo),e(he,z5),e(z5,Zie),e(Zie,Vwo),e(z5,Xwo),e(z5,_j),e(_j,zwo),e(z5,Qwo),e(he,Wwo),e(he,Q5),e(Q5,ede),e(ede,Hwo),e(Q5,Uwo),e(Q5,bj),e(bj,Jwo),e(Q5,Ywo),e(he,Kwo),e(he,W5),e(W5,ode),e(ode,Zwo),e(W5,eAo),e(W5,vj),e(vj,oAo),e(W5,rAo),e(he,tAo),e(he,H5),e(H5,rde),e(rde,aAo),e(H5,nAo),e(H5,Fj),e(Fj,sAo),e(H5,lAo),e(he,iAo),e(he,U5),e(U5,tde),e(tde,dAo),e(U5,cAo),e(U5,Tj),e(Tj,fAo),e(U5,mAo),e(he,gAo),e(he,J5),e(J5,ade),e(ade,hAo),e(J5,pAo),e(J5,Mj),e(Mj,uAo),e(J5,_Ao),e(he,bAo),e(he,Y5),e(Y5,nde),e(nde,vAo),e(Y5,FAo),e(Y5,Ej),e(Ej,TAo),e(Y5,MAo),e(he,EAo),e(he,K5),e(K5,sde),e(sde,CAo),e(K5,wAo),e(K5,Cj),e(Cj,AAo),e(K5,yAo),e(he,LAo),e(he,Z5),e(Z5,lde),e(lde,xAo),e(Z5,$Ao),e(Z5,wj),e(wj,kAo),e(Z5,SAo),e(he,RAo),e(he,e1),e(e1,ide),e(ide,BAo),e(e1,PAo),e(e1,Aj),e(Aj,IAo),e(e1,qAo),e(he,NAo),e(he,o1),e(o1,dde),e(dde,jAo),e(o1,DAo),e(o1,yj),e(yj,GAo),e(o1,OAo),e(Ke,VAo),e(Ke,r1),e(r1,XAo),e(r1,cde),e(cde,zAo),e(r1,QAo),e(r1,fde),e(fde,WAo),e(Ke,HAo),M(t1,Ke,null),b(f,ZBe,_),b(f,$i,_),e($i,a1),e(a1,mde),M(w0,mde,null),e($i,UAo),e($i,gde),e(gde,JAo),b(f,ePe,_),b(f,Ro,_),M(A0,Ro,null),e(Ro,YAo),e(Ro,ki),e(ki,KAo),e(ki,Lj),e(Lj,ZAo),e(ki,e0o),e(ki,xj),e(xj,o0o),e(ki,r0o),e(Ro,t0o),e(Ro,y0),e(y0,a0o),e(y0,hde),e(hde,n0o),e(y0,s0o),e(Ro,l0o),e(Ro,at),M(L0,at,null),e(at,i0o),e(at,pde),e(pde,d0o),e(at,c0o),e(at,Si),e(Si,f0o),e(Si,ude),e(ude,m0o),e(Si,g0o),e(Si,$j),e($j,h0o),e(Si,p0o),e(at,u0o),M(n1,at,null),e(Ro,_0o),e(Ro,Ze),M(x0,Ze,null),e(Ze,b0o),e(Ze,_de),e(_de,v0o),e(Ze,F0o),e(Ze,La),e(La,T0o),e(La,bde),e(bde,M0o),e(La,E0o),e(La,vde),e(vde,C0o),e(La,w0o),e(La,Fde),e(Fde,A0o),e(La,y0o),e(Ze,L0o),e(Ze,q),e(q,s1),e(s1,Tde),e(Tde,x0o),e(s1,$0o),e(s1,kj),e(kj,k0o),e(s1,S0o),e(q,R0o),e(q,l1),e(l1,Mde),e(Mde,B0o),e(l1,P0o),e(l1,Sj),e(Sj,I0o),e(l1,q0o),e(q,N0o),e(q,i1),e(i1,Ede),e(Ede,j0o),e(i1,D0o),e(i1,Rj),e(Rj,G0o),e(i1,O0o),e(q,V0o),e(q,d1),e(d1,Cde),e(Cde,X0o),e(d1,z0o),e(d1,Bj),e(Bj,Q0o),e(d1,W0o),e(q,H0o),e(q,c1),e(c1,wde),e(wde,U0o),e(c1,J0o),e(c1,Pj),e(Pj,Y0o),e(c1,K0o),e(q,Z0o),e(q,f1),e(f1,Ade),e(Ade,eyo),e(f1,oyo),e(f1,Ij),e(Ij,ryo),e(f1,tyo),e(q,ayo),e(q,m1),e(m1,yde),e(yde,nyo),e(m1,syo),e(m1,qj),e(qj,lyo),e(m1,iyo),e(q,dyo),e(q,g1),e(g1,Lde),e(Lde,cyo),e(g1,fyo),e(g1,Nj),e(Nj,myo),e(g1,gyo),e(q,hyo),e(q,h1),e(h1,xde),e(xde,pyo),e(h1,uyo),e(h1,jj),e(jj,_yo),e(h1,byo),e(q,vyo),e(q,p1),e(p1,$de),e($de,Fyo),e(p1,Tyo),e(p1,Dj),e(Dj,Myo),e(p1,Eyo),e(q,Cyo),e(q,u1),e(u1,kde),e(kde,wyo),e(u1,Ayo),e(u1,Gj),e(Gj,yyo),e(u1,Lyo),e(q,xyo),e(q,_1),e(_1,Sde),e(Sde,$yo),e(_1,kyo),e(_1,Oj),e(Oj,Syo),e(_1,Ryo),e(q,Byo),e(q,b1),e(b1,Rde),e(Rde,Pyo),e(b1,Iyo),e(b1,Vj),e(Vj,qyo),e(b1,Nyo),e(q,jyo),e(q,v1),e(v1,Bde),e(Bde,Dyo),e(v1,Gyo),e(v1,Xj),e(Xj,Oyo),e(v1,Vyo),e(q,Xyo),e(q,F1),e(F1,Pde),e(Pde,zyo),e(F1,Qyo),e(F1,zj),e(zj,Wyo),e(F1,Hyo),e(q,Uyo),e(q,T1),e(T1,Ide),e(Ide,Jyo),e(T1,Yyo),e(T1,Qj),e(Qj,Kyo),e(T1,Zyo),e(q,eLo),e(q,M1),e(M1,qde),e(qde,oLo),e(M1,rLo),e(M1,Wj),e(Wj,tLo),e(M1,aLo),e(q,nLo),e(q,E1),e(E1,Nde),e(Nde,sLo),e(E1,lLo),e(E1,Hj),e(Hj,iLo),e(E1,dLo),e(q,cLo),e(q,C1),e(C1,jde),e(jde,fLo),e(C1,mLo),e(C1,Uj),e(Uj,gLo),e(C1,hLo),e(q,pLo),e(q,w1),e(w1,Dde),e(Dde,uLo),e(w1,_Lo),e(w1,Jj),e(Jj,bLo),e(w1,vLo),e(q,FLo),e(q,A1),e(A1,Gde),e(Gde,TLo),e(A1,MLo),e(A1,Yj),e(Yj,ELo),e(A1,CLo),e(q,wLo),e(q,y1),e(y1,Ode),e(Ode,ALo),e(y1,yLo),e(y1,Kj),e(Kj,LLo),e(y1,xLo),e(q,$Lo),e(q,L1),e(L1,Vde),e(Vde,kLo),e(L1,SLo),e(L1,Zj),e(Zj,RLo),e(L1,BLo),e(q,PLo),e(q,x1),e(x1,Xde),e(Xde,ILo),e(x1,qLo),e(x1,eD),e(eD,NLo),e(x1,jLo),e(q,DLo),e(q,$1),e($1,zde),e(zde,GLo),e($1,OLo),e($1,oD),e(oD,VLo),e($1,XLo),e(q,zLo),e(q,k1),e(k1,Qde),e(Qde,QLo),e(k1,WLo),e(k1,rD),e(rD,HLo),e(k1,ULo),e(q,JLo),e(q,S1),e(S1,Wde),e(Wde,YLo),e(S1,KLo),e(S1,tD),e(tD,ZLo),e(S1,e8o),e(q,o8o),e(q,R1),e(R1,Hde),e(Hde,r8o),e(R1,t8o),e(R1,aD),e(aD,a8o),e(R1,n8o),e(q,s8o),e(q,B1),e(B1,Ude),e(Ude,l8o),e(B1,i8o),e(B1,nD),e(nD,d8o),e(B1,c8o),e(q,f8o),e(q,P1),e(P1,Jde),e(Jde,m8o),e(P1,g8o),e(P1,sD),e(sD,h8o),e(P1,p8o),e(q,u8o),e(q,I1),e(I1,Yde),e(Yde,_8o),e(I1,b8o),e(I1,lD),e(lD,v8o),e(I1,F8o),e(q,T8o),e(q,q1),e(q1,Kde),e(Kde,M8o),e(q1,E8o),e(q1,iD),e(iD,C8o),e(q1,w8o),e(q,A8o),e(q,N1),e(N1,Zde),e(Zde,y8o),e(N1,L8o),e(N1,dD),e(dD,x8o),e(N1,$8o),e(q,k8o),e(q,j1),e(j1,ece),e(ece,S8o),e(j1,R8o),e(j1,cD),e(cD,B8o),e(j1,P8o),e(q,I8o),e(q,D1),e(D1,oce),e(oce,q8o),e(D1,N8o),e(D1,fD),e(fD,j8o),e(D1,D8o),e(q,G8o),e(q,G1),e(G1,rce),e(rce,O8o),e(G1,V8o),e(G1,mD),e(mD,X8o),e(G1,z8o),e(q,Q8o),e(q,O1),e(O1,tce),e(tce,W8o),e(O1,H8o),e(O1,gD),e(gD,U8o),e(O1,J8o),e(q,Y8o),e(q,V1),e(V1,ace),e(ace,K8o),e(V1,Z8o),e(V1,hD),e(hD,exo),e(V1,oxo),e(q,rxo),e(q,X1),e(X1,nce),e(nce,txo),e(X1,axo),e(X1,pD),e(pD,nxo),e(X1,sxo),e(q,lxo),e(q,z1),e(z1,sce),e(sce,ixo),e(z1,dxo),e(z1,uD),e(uD,cxo),e(z1,fxo),e(q,mxo),e(q,Q1),e(Q1,lce),e(lce,gxo),e(Q1,hxo),e(Q1,_D),e(_D,pxo),e(Q1,uxo),e(q,_xo),e(q,W1),e(W1,ice),e(ice,bxo),e(W1,vxo),e(W1,bD),e(bD,Fxo),e(W1,Txo),e(q,Mxo),e(q,H1),e(H1,dce),e(dce,Exo),e(H1,Cxo),e(H1,vD),e(vD,wxo),e(H1,Axo),e(q,yxo),e(q,U1),e(U1,cce),e(cce,Lxo),e(U1,xxo),e(U1,FD),e(FD,$xo),e(U1,kxo),e(q,Sxo),e(q,J1),e(J1,fce),e(fce,Rxo),e(J1,Bxo),e(J1,TD),e(TD,Pxo),e(J1,Ixo),e(q,qxo),e(q,Y1),e(Y1,mce),e(mce,Nxo),e(Y1,jxo),e(Y1,MD),e(MD,Dxo),e(Y1,Gxo),e(q,Oxo),e(q,K1),e(K1,gce),e(gce,Vxo),e(K1,Xxo),e(K1,ED),e(ED,zxo),e(K1,Qxo),e(Ze,Wxo),e(Ze,Z1),e(Z1,Hxo),e(Z1,hce),e(hce,Uxo),e(Z1,Jxo),e(Z1,pce),e(pce,Yxo),e(Ze,Kxo),M(eb,Ze,null),b(f,oPe,_),b(f,Ri,_),e(Ri,ob),e(ob,uce),M($0,uce,null),e(Ri,Zxo),e(Ri,_ce),e(_ce,e9o),b(f,rPe,_),b(f,Bo,_),M(k0,Bo,null),e(Bo,o9o),e(Bo,Bi),e(Bi,r9o),e(Bi,CD),e(CD,t9o),e(Bi,a9o),e(Bi,wD),e(wD,n9o),e(Bi,s9o),e(Bo,l9o),e(Bo,S0),e(S0,i9o),e(S0,bce),e(bce,d9o),e(S0,c9o),e(Bo,f9o),e(Bo,nt),M(R0,nt,null),e(nt,m9o),e(nt,vce),e(vce,g9o),e(nt,h9o),e(nt,Pi),e(Pi,p9o),e(Pi,Fce),e(Fce,u9o),e(Pi,_9o),e(Pi,AD),e(AD,b9o),e(Pi,v9o),e(nt,F9o),M(rb,nt,null),e(Bo,T9o),e(Bo,eo),M(B0,eo,null),e(eo,M9o),e(eo,Tce),e(Tce,E9o),e(eo,C9o),e(eo,xa),e(xa,w9o),e(xa,Mce),e(Mce,A9o),e(xa,y9o),e(xa,Ece),e(Ece,L9o),e(xa,x9o),e(xa,Cce),e(Cce,$9o),e(xa,k9o),e(eo,S9o),e(eo,Y),e(Y,tb),e(tb,wce),e(wce,R9o),e(tb,B9o),e(tb,yD),e(yD,P9o),e(tb,I9o),e(Y,q9o),e(Y,ab),e(ab,Ace),e(Ace,N9o),e(ab,j9o),e(ab,LD),e(LD,D9o),e(ab,G9o),e(Y,O9o),e(Y,nb),e(nb,yce),e(yce,V9o),e(nb,X9o),e(nb,xD),e(xD,z9o),e(nb,Q9o),e(Y,W9o),e(Y,sb),e(sb,Lce),e(Lce,H9o),e(sb,U9o),e(sb,$D),e($D,J9o),e(sb,Y9o),e(Y,K9o),e(Y,lb),e(lb,xce),e(xce,Z9o),e(lb,e$o),e(lb,kD),e(kD,o$o),e(lb,r$o),e(Y,t$o),e(Y,ib),e(ib,$ce),e($ce,a$o),e(ib,n$o),e(ib,SD),e(SD,s$o),e(ib,l$o),e(Y,i$o),e(Y,db),e(db,kce),e(kce,d$o),e(db,c$o),e(db,RD),e(RD,f$o),e(db,m$o),e(Y,g$o),e(Y,cb),e(cb,Sce),e(Sce,h$o),e(cb,p$o),e(cb,BD),e(BD,u$o),e(cb,_$o),e(Y,b$o),e(Y,fb),e(fb,Rce),e(Rce,v$o),e(fb,F$o),e(fb,PD),e(PD,T$o),e(fb,M$o),e(Y,E$o),e(Y,mb),e(mb,Bce),e(Bce,C$o),e(mb,w$o),e(mb,ID),e(ID,A$o),e(mb,y$o),e(Y,L$o),e(Y,gb),e(gb,Pce),e(Pce,x$o),e(gb,$$o),e(gb,qD),e(qD,k$o),e(gb,S$o),e(Y,R$o),e(Y,hb),e(hb,Ice),e(Ice,B$o),e(hb,P$o),e(hb,ND),e(ND,I$o),e(hb,q$o),e(Y,N$o),e(Y,pb),e(pb,qce),e(qce,j$o),e(pb,D$o),e(pb,jD),e(jD,G$o),e(pb,O$o),e(Y,V$o),e(Y,ub),e(ub,Nce),e(Nce,X$o),e(ub,z$o),e(ub,DD),e(DD,Q$o),e(ub,W$o),e(Y,H$o),e(Y,_b),e(_b,jce),e(jce,U$o),e(_b,J$o),e(_b,GD),e(GD,Y$o),e(_b,K$o),e(Y,Z$o),e(Y,bb),e(bb,Dce),e(Dce,eko),e(bb,oko),e(bb,OD),e(OD,rko),e(bb,tko),e(Y,ako),e(Y,vb),e(vb,Gce),e(Gce,nko),e(vb,sko),e(vb,VD),e(VD,lko),e(vb,iko),e(Y,dko),e(Y,Fb),e(Fb,Oce),e(Oce,cko),e(Fb,fko),e(Fb,XD),e(XD,mko),e(Fb,gko),e(Y,hko),e(Y,Tb),e(Tb,Vce),e(Vce,pko),e(Tb,uko),e(Tb,zD),e(zD,_ko),e(Tb,bko),e(Y,vko),e(Y,Mb),e(Mb,Xce),e(Xce,Fko),e(Mb,Tko),e(Mb,QD),e(QD,Mko),e(Mb,Eko),e(Y,Cko),e(Y,Eb),e(Eb,zce),e(zce,wko),e(Eb,Ako),e(Eb,WD),e(WD,yko),e(Eb,Lko),e(Y,xko),e(Y,Cb),e(Cb,Qce),e(Qce,$ko),e(Cb,kko),e(Cb,HD),e(HD,Sko),e(Cb,Rko),e(Y,Bko),e(Y,wb),e(wb,Wce),e(Wce,Pko),e(wb,Iko),e(wb,UD),e(UD,qko),e(wb,Nko),e(Y,jko),e(Y,Ab),e(Ab,Hce),e(Hce,Dko),e(Ab,Gko),e(Ab,JD),e(JD,Oko),e(Ab,Vko),e(Y,Xko),e(Y,yb),e(yb,Uce),e(Uce,zko),e(yb,Qko),e(yb,YD),e(YD,Wko),e(yb,Hko),e(Y,Uko),e(Y,Lb),e(Lb,Jce),e(Jce,Jko),e(Lb,Yko),e(Lb,KD),e(KD,Kko),e(Lb,Zko),e(Y,eSo),e(Y,xb),e(xb,Yce),e(Yce,oSo),e(xb,rSo),e(xb,ZD),e(ZD,tSo),e(xb,aSo),e(Y,nSo),e(Y,$b),e($b,Kce),e(Kce,sSo),e($b,lSo),e($b,eG),e(eG,iSo),e($b,dSo),e(eo,cSo),e(eo,kb),e(kb,fSo),e(kb,Zce),e(Zce,mSo),e(kb,gSo),e(kb,efe),e(efe,hSo),e(eo,pSo),M(Sb,eo,null),b(f,tPe,_),b(f,Ii,_),e(Ii,Rb),e(Rb,ofe),M(P0,ofe,null),e(Ii,uSo),e(Ii,rfe),e(rfe,_So),b(f,aPe,_),b(f,Po,_),M(I0,Po,null),e(Po,bSo),e(Po,qi),e(qi,vSo),e(qi,oG),e(oG,FSo),e(qi,TSo),e(qi,rG),e(rG,MSo),e(qi,ESo),e(Po,CSo),e(Po,q0),e(q0,wSo),e(q0,tfe),e(tfe,ASo),e(q0,ySo),e(Po,LSo),e(Po,st),M(N0,st,null),e(st,xSo),e(st,afe),e(afe,$So),e(st,kSo),e(st,Ni),e(Ni,SSo),e(Ni,nfe),e(nfe,RSo),e(Ni,BSo),e(Ni,tG),e(tG,PSo),e(Ni,ISo),e(st,qSo),M(Bb,st,null),e(Po,NSo),e(Po,oo),M(j0,oo,null),e(oo,jSo),e(oo,sfe),e(sfe,DSo),e(oo,GSo),e(oo,$a),e($a,OSo),e($a,lfe),e(lfe,VSo),e($a,XSo),e($a,ife),e(ife,zSo),e($a,QSo),e($a,dfe),e(dfe,WSo),e($a,HSo),e(oo,USo),e(oo,Ur),e(Ur,Pb),e(Pb,cfe),e(cfe,JSo),e(Pb,YSo),e(Pb,aG),e(aG,KSo),e(Pb,ZSo),e(Ur,eRo),e(Ur,Ib),e(Ib,ffe),e(ffe,oRo),e(Ib,rRo),e(Ib,nG),e(nG,tRo),e(Ib,aRo),e(Ur,nRo),e(Ur,qb),e(qb,mfe),e(mfe,sRo),e(qb,lRo),e(qb,sG),e(sG,iRo),e(qb,dRo),e(Ur,cRo),e(Ur,Nb),e(Nb,gfe),e(gfe,fRo),e(Nb,mRo),e(Nb,lG),e(lG,gRo),e(Nb,hRo),e(Ur,pRo),e(Ur,jb),e(jb,hfe),e(hfe,uRo),e(jb,_Ro),e(jb,iG),e(iG,bRo),e(jb,vRo),e(oo,FRo),e(oo,Db),e(Db,TRo),e(Db,pfe),e(pfe,MRo),e(Db,ERo),e(Db,ufe),e(ufe,CRo),e(oo,wRo),M(Gb,oo,null),b(f,nPe,_),b(f,ji,_),e(ji,Ob),e(Ob,_fe),M(D0,_fe,null),e(ji,ARo),e(ji,bfe),e(bfe,yRo),b(f,sPe,_),b(f,Io,_),M(G0,Io,null),e(Io,LRo),e(Io,Di),e(Di,xRo),e(Di,dG),e(dG,$Ro),e(Di,kRo),e(Di,cG),e(cG,SRo),e(Di,RRo),e(Io,BRo),e(Io,O0),e(O0,PRo),e(O0,vfe),e(vfe,IRo),e(O0,qRo),e(Io,NRo),e(Io,lt),M(V0,lt,null),e(lt,jRo),e(lt,Ffe),e(Ffe,DRo),e(lt,GRo),e(lt,Gi),e(Gi,ORo),e(Gi,Tfe),e(Tfe,VRo),e(Gi,XRo),e(Gi,fG),e(fG,zRo),e(Gi,QRo),e(lt,WRo),M(Vb,lt,null),e(Io,HRo),e(Io,ro),M(X0,ro,null),e(ro,URo),e(ro,Mfe),e(Mfe,JRo),e(ro,YRo),e(ro,ka),e(ka,KRo),e(ka,Efe),e(Efe,ZRo),e(ka,eBo),e(ka,Cfe),e(Cfe,oBo),e(ka,rBo),e(ka,wfe),e(wfe,tBo),e(ka,aBo),e(ro,nBo),e(ro,U),e(U,Xb),e(Xb,Afe),e(Afe,sBo),e(Xb,lBo),e(Xb,mG),e(mG,iBo),e(Xb,dBo),e(U,cBo),e(U,zb),e(zb,yfe),e(yfe,fBo),e(zb,mBo),e(zb,gG),e(gG,gBo),e(zb,hBo),e(U,pBo),e(U,Qb),e(Qb,Lfe),e(Lfe,uBo),e(Qb,_Bo),e(Qb,hG),e(hG,bBo),e(Qb,vBo),e(U,FBo),e(U,Wb),e(Wb,xfe),e(xfe,TBo),e(Wb,MBo),e(Wb,pG),e(pG,EBo),e(Wb,CBo),e(U,wBo),e(U,Hb),e(Hb,$fe),e($fe,ABo),e(Hb,yBo),e(Hb,uG),e(uG,LBo),e(Hb,xBo),e(U,$Bo),e(U,Ub),e(Ub,kfe),e(kfe,kBo),e(Ub,SBo),e(Ub,_G),e(_G,RBo),e(Ub,BBo),e(U,PBo),e(U,Jb),e(Jb,Sfe),e(Sfe,IBo),e(Jb,qBo),e(Jb,bG),e(bG,NBo),e(Jb,jBo),e(U,DBo),e(U,Yb),e(Yb,Rfe),e(Rfe,GBo),e(Yb,OBo),e(Yb,vG),e(vG,VBo),e(Yb,XBo),e(U,zBo),e(U,Kb),e(Kb,Bfe),e(Bfe,QBo),e(Kb,WBo),e(Kb,FG),e(FG,HBo),e(Kb,UBo),e(U,JBo),e(U,Zb),e(Zb,Pfe),e(Pfe,YBo),e(Zb,KBo),e(Zb,TG),e(TG,ZBo),e(Zb,ePo),e(U,oPo),e(U,e2),e(e2,Ife),e(Ife,rPo),e(e2,tPo),e(e2,MG),e(MG,aPo),e(e2,nPo),e(U,sPo),e(U,o2),e(o2,qfe),e(qfe,lPo),e(o2,iPo),e(o2,EG),e(EG,dPo),e(o2,cPo),e(U,fPo),e(U,r2),e(r2,Nfe),e(Nfe,mPo),e(r2,gPo),e(r2,CG),e(CG,hPo),e(r2,pPo),e(U,uPo),e(U,t2),e(t2,jfe),e(jfe,_Po),e(t2,bPo),e(t2,wG),e(wG,vPo),e(t2,FPo),e(U,TPo),e(U,a2),e(a2,Dfe),e(Dfe,MPo),e(a2,EPo),e(a2,AG),e(AG,CPo),e(a2,wPo),e(U,APo),e(U,n2),e(n2,Gfe),e(Gfe,yPo),e(n2,LPo),e(n2,yG),e(yG,xPo),e(n2,$Po),e(U,kPo),e(U,s2),e(s2,Ofe),e(Ofe,SPo),e(s2,RPo),e(s2,LG),e(LG,BPo),e(s2,PPo),e(U,IPo),e(U,l2),e(l2,Vfe),e(Vfe,qPo),e(l2,NPo),e(l2,xG),e(xG,jPo),e(l2,DPo),e(U,GPo),e(U,i2),e(i2,Xfe),e(Xfe,OPo),e(i2,VPo),e(i2,$G),e($G,XPo),e(i2,zPo),e(U,QPo),e(U,d2),e(d2,zfe),e(zfe,WPo),e(d2,HPo),e(d2,kG),e(kG,UPo),e(d2,JPo),e(U,YPo),e(U,c2),e(c2,Qfe),e(Qfe,KPo),e(c2,ZPo),e(c2,SG),e(SG,eIo),e(c2,oIo),e(U,rIo),e(U,f2),e(f2,Wfe),e(Wfe,tIo),e(f2,aIo),e(f2,RG),e(RG,nIo),e(f2,sIo),e(U,lIo),e(U,m2),e(m2,Hfe),e(Hfe,iIo),e(m2,dIo),e(m2,BG),e(BG,cIo),e(m2,fIo),e(U,mIo),e(U,g2),e(g2,Ufe),e(Ufe,gIo),e(g2,hIo),e(g2,PG),e(PG,pIo),e(g2,uIo),e(U,_Io),e(U,h2),e(h2,Jfe),e(Jfe,bIo),e(h2,vIo),e(h2,IG),e(IG,FIo),e(h2,TIo),e(U,MIo),e(U,p2),e(p2,Yfe),e(Yfe,EIo),e(p2,CIo),e(p2,qG),e(qG,wIo),e(p2,AIo),e(U,yIo),e(U,u2),e(u2,Kfe),e(Kfe,LIo),e(u2,xIo),e(u2,NG),e(NG,$Io),e(u2,kIo),e(U,SIo),e(U,_2),e(_2,Zfe),e(Zfe,RIo),e(_2,BIo),e(_2,jG),e(jG,PIo),e(_2,IIo),e(U,qIo),e(U,b2),e(b2,eme),e(eme,NIo),e(b2,jIo),e(b2,DG),e(DG,DIo),e(b2,GIo),e(U,OIo),e(U,v2),e(v2,ome),e(ome,VIo),e(v2,XIo),e(v2,GG),e(GG,zIo),e(v2,QIo),e(U,WIo),e(U,F2),e(F2,rme),e(rme,HIo),e(F2,UIo),e(F2,OG),e(OG,JIo),e(F2,YIo),e(U,KIo),e(U,T2),e(T2,tme),e(tme,ZIo),e(T2,eqo),e(T2,VG),e(VG,oqo),e(T2,rqo),e(U,tqo),e(U,M2),e(M2,ame),e(ame,aqo),e(M2,nqo),e(M2,XG),e(XG,sqo),e(M2,lqo),e(ro,iqo),e(ro,E2),e(E2,dqo),e(E2,nme),e(nme,cqo),e(E2,fqo),e(E2,sme),e(sme,mqo),e(ro,gqo),M(C2,ro,null),b(f,lPe,_),b(f,Oi,_),e(Oi,w2),e(w2,lme),M(z0,lme,null),e(Oi,hqo),e(Oi,ime),e(ime,pqo),b(f,iPe,_),b(f,qo,_),M(Q0,qo,null),e(qo,uqo),e(qo,Vi),e(Vi,_qo),e(Vi,zG),e(zG,bqo),e(Vi,vqo),e(Vi,QG),e(QG,Fqo),e(Vi,Tqo),e(qo,Mqo),e(qo,W0),e(W0,Eqo),e(W0,dme),e(dme,Cqo),e(W0,wqo),e(qo,Aqo),e(qo,it),M(H0,it,null),e(it,yqo),e(it,cme),e(cme,Lqo),e(it,xqo),e(it,Xi),e(Xi,$qo),e(Xi,fme),e(fme,kqo),e(Xi,Sqo),e(Xi,WG),e(WG,Rqo),e(Xi,Bqo),e(it,Pqo),M(A2,it,null),e(qo,Iqo),e(qo,to),M(U0,to,null),e(to,qqo),e(to,mme),e(mme,Nqo),e(to,jqo),e(to,Sa),e(Sa,Dqo),e(Sa,gme),e(gme,Gqo),e(Sa,Oqo),e(Sa,hme),e(hme,Vqo),e(Sa,Xqo),e(Sa,pme),e(pme,zqo),e(Sa,Qqo),e(to,Wqo),e(to,O),e(O,y2),e(y2,ume),e(ume,Hqo),e(y2,Uqo),e(y2,HG),e(HG,Jqo),e(y2,Yqo),e(O,Kqo),e(O,L2),e(L2,_me),e(_me,Zqo),e(L2,eNo),e(L2,UG),e(UG,oNo),e(L2,rNo),e(O,tNo),e(O,x2),e(x2,bme),e(bme,aNo),e(x2,nNo),e(x2,JG),e(JG,sNo),e(x2,lNo),e(O,iNo),e(O,$2),e($2,vme),e(vme,dNo),e($2,cNo),e($2,YG),e(YG,fNo),e($2,mNo),e(O,gNo),e(O,k2),e(k2,Fme),e(Fme,hNo),e(k2,pNo),e(k2,KG),e(KG,uNo),e(k2,_No),e(O,bNo),e(O,S2),e(S2,Tme),e(Tme,vNo),e(S2,FNo),e(S2,ZG),e(ZG,TNo),e(S2,MNo),e(O,ENo),e(O,R2),e(R2,Mme),e(Mme,CNo),e(R2,wNo),e(R2,eO),e(eO,ANo),e(R2,yNo),e(O,LNo),e(O,B2),e(B2,Eme),e(Eme,xNo),e(B2,$No),e(B2,oO),e(oO,kNo),e(B2,SNo),e(O,RNo),e(O,P2),e(P2,Cme),e(Cme,BNo),e(P2,PNo),e(P2,rO),e(rO,INo),e(P2,qNo),e(O,NNo),e(O,I2),e(I2,wme),e(wme,jNo),e(I2,DNo),e(I2,tO),e(tO,GNo),e(I2,ONo),e(O,VNo),e(O,q2),e(q2,Ame),e(Ame,XNo),e(q2,zNo),e(q2,aO),e(aO,QNo),e(q2,WNo),e(O,HNo),e(O,N2),e(N2,yme),e(yme,UNo),e(N2,JNo),e(N2,nO),e(nO,YNo),e(N2,KNo),e(O,ZNo),e(O,j2),e(j2,Lme),e(Lme,ejo),e(j2,ojo),e(j2,sO),e(sO,rjo),e(j2,tjo),e(O,ajo),e(O,D2),e(D2,xme),e(xme,njo),e(D2,sjo),e(D2,lO),e(lO,ljo),e(D2,ijo),e(O,djo),e(O,G2),e(G2,$me),e($me,cjo),e(G2,fjo),e(G2,iO),e(iO,mjo),e(G2,gjo),e(O,hjo),e(O,O2),e(O2,kme),e(kme,pjo),e(O2,ujo),e(O2,dO),e(dO,_jo),e(O2,bjo),e(O,vjo),e(O,V2),e(V2,Sme),e(Sme,Fjo),e(V2,Tjo),e(V2,cO),e(cO,Mjo),e(V2,Ejo),e(O,Cjo),e(O,X2),e(X2,Rme),e(Rme,wjo),e(X2,Ajo),e(X2,fO),e(fO,yjo),e(X2,Ljo),e(O,xjo),e(O,z2),e(z2,Bme),e(Bme,$jo),e(z2,kjo),e(z2,mO),e(mO,Sjo),e(z2,Rjo),e(O,Bjo),e(O,Q2),e(Q2,Pme),e(Pme,Pjo),e(Q2,Ijo),e(Q2,gO),e(gO,qjo),e(Q2,Njo),e(O,jjo),e(O,W2),e(W2,Ime),e(Ime,Djo),e(W2,Gjo),e(W2,hO),e(hO,Ojo),e(W2,Vjo),e(O,Xjo),e(O,H2),e(H2,qme),e(qme,zjo),e(H2,Qjo),e(H2,pO),e(pO,Wjo),e(H2,Hjo),e(O,Ujo),e(O,U2),e(U2,Nme),e(Nme,Jjo),e(U2,Yjo),e(U2,uO),e(uO,Kjo),e(U2,Zjo),e(O,eDo),e(O,J2),e(J2,jme),e(jme,oDo),e(J2,rDo),e(J2,_O),e(_O,tDo),e(J2,aDo),e(O,nDo),e(O,Y2),e(Y2,Dme),e(Dme,sDo),e(Y2,lDo),e(Y2,bO),e(bO,iDo),e(Y2,dDo),e(O,cDo),e(O,K2),e(K2,Gme),e(Gme,fDo),e(K2,mDo),e(K2,vO),e(vO,gDo),e(K2,hDo),e(O,pDo),e(O,Z2),e(Z2,Ome),e(Ome,uDo),e(Z2,_Do),e(Z2,FO),e(FO,bDo),e(Z2,vDo),e(O,FDo),e(O,ev),e(ev,Vme),e(Vme,TDo),e(ev,MDo),e(ev,TO),e(TO,EDo),e(ev,CDo),e(O,wDo),e(O,ov),e(ov,Xme),e(Xme,ADo),e(ov,yDo),e(ov,MO),e(MO,LDo),e(ov,xDo),e(O,$Do),e(O,rv),e(rv,zme),e(zme,kDo),e(rv,SDo),e(rv,EO),e(EO,RDo),e(rv,BDo),e(O,PDo),e(O,tv),e(tv,Qme),e(Qme,IDo),e(tv,qDo),e(tv,CO),e(CO,NDo),e(tv,jDo),e(O,DDo),e(O,av),e(av,Wme),e(Wme,GDo),e(av,ODo),e(av,wO),e(wO,VDo),e(av,XDo),e(O,zDo),e(O,nv),e(nv,Hme),e(Hme,QDo),e(nv,WDo),e(nv,AO),e(AO,HDo),e(nv,UDo),e(O,JDo),e(O,sv),e(sv,Ume),e(Ume,YDo),e(sv,KDo),e(sv,yO),e(yO,ZDo),e(sv,eGo),e(O,oGo),e(O,lv),e(lv,Jme),e(Jme,rGo),e(lv,tGo),e(lv,LO),e(LO,aGo),e(lv,nGo),e(O,sGo),e(O,iv),e(iv,Yme),e(Yme,lGo),e(iv,iGo),e(iv,xO),e(xO,dGo),e(iv,cGo),e(O,fGo),e(O,dv),e(dv,Kme),e(Kme,mGo),e(dv,gGo),e(dv,$O),e($O,hGo),e(dv,pGo),e(O,uGo),e(O,cv),e(cv,Zme),e(Zme,_Go),e(cv,bGo),e(cv,kO),e(kO,vGo),e(cv,FGo),e(O,TGo),e(O,fv),e(fv,ege),e(ege,MGo),e(fv,EGo),e(fv,SO),e(SO,CGo),e(fv,wGo),e(to,AGo),e(to,mv),e(mv,yGo),e(mv,oge),e(oge,LGo),e(mv,xGo),e(mv,rge),e(rge,$Go),e(to,kGo),M(gv,to,null),b(f,dPe,_),b(f,zi,_),e(zi,hv),e(hv,tge),M(J0,tge,null),e(zi,SGo),e(zi,age),e(age,RGo),b(f,cPe,_),b(f,No,_),M(Y0,No,null),e(No,BGo),e(No,Qi),e(Qi,PGo),e(Qi,RO),e(RO,IGo),e(Qi,qGo),e(Qi,BO),e(BO,NGo),e(Qi,jGo),e(No,DGo),e(No,K0),e(K0,GGo),e(K0,nge),e(nge,OGo),e(K0,VGo),e(No,XGo),e(No,dt),M(Z0,dt,null),e(dt,zGo),e(dt,sge),e(sge,QGo),e(dt,WGo),e(dt,Wi),e(Wi,HGo),e(Wi,lge),e(lge,UGo),e(Wi,JGo),e(Wi,PO),e(PO,YGo),e(Wi,KGo),e(dt,ZGo),M(pv,dt,null),e(No,eOo),e(No,ao),M(ey,ao,null),e(ao,oOo),e(ao,ige),e(ige,rOo),e(ao,tOo),e(ao,Ra),e(Ra,aOo),e(Ra,dge),e(dge,nOo),e(Ra,sOo),e(Ra,cge),e(cge,lOo),e(Ra,iOo),e(Ra,fge),e(fge,dOo),e(Ra,cOo),e(ao,fOo),e(ao,mge),e(mge,uv),e(uv,gge),e(gge,mOo),e(uv,gOo),e(uv,IO),e(IO,hOo),e(uv,pOo),e(ao,uOo),e(ao,_v),e(_v,_Oo),e(_v,hge),e(hge,bOo),e(_v,vOo),e(_v,pge),e(pge,FOo),e(ao,TOo),M(bv,ao,null),b(f,fPe,_),b(f,Hi,_),e(Hi,vv),e(vv,uge),M(oy,uge,null),e(Hi,MOo),e(Hi,_ge),e(_ge,EOo),b(f,mPe,_),b(f,jo,_),M(ry,jo,null),e(jo,COo),e(jo,Ui),e(Ui,wOo),e(Ui,qO),e(qO,AOo),e(Ui,yOo),e(Ui,NO),e(NO,LOo),e(Ui,xOo),e(jo,$Oo),e(jo,ty),e(ty,kOo),e(ty,bge),e(bge,SOo),e(ty,ROo),e(jo,BOo),e(jo,ct),M(ay,ct,null),e(ct,POo),e(ct,vge),e(vge,IOo),e(ct,qOo),e(ct,Ji),e(Ji,NOo),e(Ji,Fge),e(Fge,jOo),e(Ji,DOo),e(Ji,jO),e(jO,GOo),e(Ji,OOo),e(ct,VOo),M(Fv,ct,null),e(jo,XOo),e(jo,no),M(ny,no,null),e(no,zOo),e(no,Tge),e(Tge,QOo),e(no,WOo),e(no,Ba),e(Ba,HOo),e(Ba,Mge),e(Mge,UOo),e(Ba,JOo),e(Ba,Ege),e(Ege,YOo),e(Ba,KOo),e(Ba,Cge),e(Cge,ZOo),e(Ba,eVo),e(no,oVo),e(no,ve),e(ve,Tv),e(Tv,wge),e(wge,rVo),e(Tv,tVo),e(Tv,DO),e(DO,aVo),e(Tv,nVo),e(ve,sVo),e(ve,Mv),e(Mv,Age),e(Age,lVo),e(Mv,iVo),e(Mv,GO),e(GO,dVo),e(Mv,cVo),e(ve,fVo),e(ve,Ev),e(Ev,yge),e(yge,mVo),e(Ev,gVo),e(Ev,OO),e(OO,hVo),e(Ev,pVo),e(ve,uVo),e(ve,Cv),e(Cv,Lge),e(Lge,_Vo),e(Cv,bVo),e(Cv,VO),e(VO,vVo),e(Cv,FVo),e(ve,TVo),e(ve,xs),e(xs,xge),e(xge,MVo),e(xs,EVo),e(xs,XO),e(XO,CVo),e(xs,wVo),e(xs,zO),e(zO,AVo),e(xs,yVo),e(ve,LVo),e(ve,wv),e(wv,$ge),e($ge,xVo),e(wv,$Vo),e(wv,QO),e(QO,kVo),e(wv,SVo),e(ve,RVo),e(ve,ft),e(ft,kge),e(kge,BVo),e(ft,PVo),e(ft,WO),e(WO,IVo),e(ft,qVo),e(ft,HO),e(HO,NVo),e(ft,jVo),e(ft,UO),e(UO,DVo),e(ft,GVo),e(ve,OVo),e(ve,Av),e(Av,Sge),e(Sge,VVo),e(Av,XVo),e(Av,JO),e(JO,zVo),e(Av,QVo),e(ve,WVo),e(ve,yv),e(yv,Rge),e(Rge,HVo),e(yv,UVo),e(yv,YO),e(YO,JVo),e(yv,YVo),e(ve,KVo),e(ve,Lv),e(Lv,Bge),e(Bge,ZVo),e(Lv,eXo),e(Lv,KO),e(KO,oXo),e(Lv,rXo),e(ve,tXo),e(ve,xv),e(xv,Pge),e(Pge,aXo),e(xv,nXo),e(xv,ZO),e(ZO,sXo),e(xv,lXo),e(ve,iXo),e(ve,$v),e($v,Ige),e(Ige,dXo),e($v,cXo),e($v,eV),e(eV,fXo),e($v,mXo),e(ve,gXo),e(ve,kv),e(kv,qge),e(qge,hXo),e(kv,pXo),e(kv,oV),e(oV,uXo),e(kv,_Xo),e(ve,bXo),e(ve,Sv),e(Sv,Nge),e(Nge,vXo),e(Sv,FXo),e(Sv,rV),e(rV,TXo),e(Sv,MXo),e(no,EXo),e(no,Rv),e(Rv,CXo),e(Rv,jge),e(jge,wXo),e(Rv,AXo),e(Rv,Dge),e(Dge,yXo),e(no,LXo),M(Bv,no,null),b(f,gPe,_),b(f,Yi,_),e(Yi,Pv),e(Pv,Gge),M(sy,Gge,null),e(Yi,xXo),e(Yi,Oge),e(Oge,$Xo),b(f,hPe,_),b(f,Do,_),M(ly,Do,null),e(Do,kXo),e(Do,Ki),e(Ki,SXo),e(Ki,tV),e(tV,RXo),e(Ki,BXo),e(Ki,aV),e(aV,PXo),e(Ki,IXo),e(Do,qXo),e(Do,iy),e(iy,NXo),e(iy,Vge),e(Vge,jXo),e(iy,DXo),e(Do,GXo),e(Do,mt),M(dy,mt,null),e(mt,OXo),e(mt,Xge),e(Xge,VXo),e(mt,XXo),e(mt,Zi),e(Zi,zXo),e(Zi,zge),e(zge,QXo),e(Zi,WXo),e(Zi,nV),e(nV,HXo),e(Zi,UXo),e(mt,JXo),M(Iv,mt,null),e(Do,YXo),e(Do,so),M(cy,so,null),e(so,KXo),e(so,Qge),e(Qge,ZXo),e(so,ezo),e(so,Pa),e(Pa,ozo),e(Pa,Wge),e(Wge,rzo),e(Pa,tzo),e(Pa,Hge),e(Hge,azo),e(Pa,nzo),e(Pa,Uge),e(Uge,szo),e(Pa,lzo),e(so,izo),e(so,Jge),e(Jge,qv),e(qv,Yge),e(Yge,dzo),e(qv,czo),e(qv,sV),e(sV,fzo),e(qv,mzo),e(so,gzo),e(so,Nv),e(Nv,hzo),e(Nv,Kge),e(Kge,pzo),e(Nv,uzo),e(Nv,Zge),e(Zge,_zo),e(so,bzo),M(jv,so,null),b(f,pPe,_),b(f,ed,_),e(ed,Dv),e(Dv,ehe),M(fy,ehe,null),e(ed,vzo),e(ed,ohe),e(ohe,Fzo),b(f,uPe,_),b(f,Go,_),M(my,Go,null),e(Go,Tzo),e(Go,od),e(od,Mzo),e(od,lV),e(lV,Ezo),e(od,Czo),e(od,iV),e(iV,wzo),e(od,Azo),e(Go,yzo),e(Go,gy),e(gy,Lzo),e(gy,rhe),e(rhe,xzo),e(gy,$zo),e(Go,kzo),e(Go,gt),M(hy,gt,null),e(gt,Szo),e(gt,the),e(the,Rzo),e(gt,Bzo),e(gt,rd),e(rd,Pzo),e(rd,ahe),e(ahe,Izo),e(rd,qzo),e(rd,dV),e(dV,Nzo),e(rd,jzo),e(gt,Dzo),M(Gv,gt,null),e(Go,Gzo),e(Go,lo),M(py,lo,null),e(lo,Ozo),e(lo,nhe),e(nhe,Vzo),e(lo,Xzo),e(lo,Ia),e(Ia,zzo),e(Ia,she),e(she,Qzo),e(Ia,Wzo),e(Ia,lhe),e(lhe,Hzo),e(Ia,Uzo),e(Ia,ihe),e(ihe,Jzo),e(Ia,Yzo),e(lo,Kzo),e(lo,Ne),e(Ne,Ov),e(Ov,dhe),e(dhe,Zzo),e(Ov,eQo),e(Ov,cV),e(cV,oQo),e(Ov,rQo),e(Ne,tQo),e(Ne,Vv),e(Vv,che),e(che,aQo),e(Vv,nQo),e(Vv,fV),e(fV,sQo),e(Vv,lQo),e(Ne,iQo),e(Ne,Xv),e(Xv,fhe),e(fhe,dQo),e(Xv,cQo),e(Xv,mV),e(mV,fQo),e(Xv,mQo),e(Ne,gQo),e(Ne,zv),e(zv,mhe),e(mhe,hQo),e(zv,pQo),e(zv,gV),e(gV,uQo),e(zv,_Qo),e(Ne,bQo),e(Ne,Qv),e(Qv,ghe),e(ghe,vQo),e(Qv,FQo),e(Qv,hV),e(hV,TQo),e(Qv,MQo),e(Ne,EQo),e(Ne,Wv),e(Wv,hhe),e(hhe,CQo),e(Wv,wQo),e(Wv,pV),e(pV,AQo),e(Wv,yQo),e(Ne,LQo),e(Ne,Hv),e(Hv,phe),e(phe,xQo),e(Hv,$Qo),e(Hv,uV),e(uV,kQo),e(Hv,SQo),e(Ne,RQo),e(Ne,Uv),e(Uv,uhe),e(uhe,BQo),e(Uv,PQo),e(Uv,_V),e(_V,IQo),e(Uv,qQo),e(lo,NQo),e(lo,Jv),e(Jv,jQo),e(Jv,_he),e(_he,DQo),e(Jv,GQo),e(Jv,bhe),e(bhe,OQo),e(lo,VQo),M(Yv,lo,null),b(f,_Pe,_),b(f,td,_),e(td,Kv),e(Kv,vhe),M(uy,vhe,null),e(td,XQo),e(td,Fhe),e(Fhe,zQo),b(f,bPe,_),b(f,Oo,_),M(_y,Oo,null),e(Oo,QQo),e(Oo,ad),e(ad,WQo),e(ad,bV),e(bV,HQo),e(ad,UQo),e(ad,vV),e(vV,JQo),e(ad,YQo),e(Oo,KQo),e(Oo,by),e(by,ZQo),e(by,The),e(The,eWo),e(by,oWo),e(Oo,rWo),e(Oo,ht),M(vy,ht,null),e(ht,tWo),e(ht,Mhe),e(Mhe,aWo),e(ht,nWo),e(ht,nd),e(nd,sWo),e(nd,Ehe),e(Ehe,lWo),e(nd,iWo),e(nd,FV),e(FV,dWo),e(nd,cWo),e(ht,fWo),M(Zv,ht,null),e(Oo,mWo),e(Oo,io),M(Fy,io,null),e(io,gWo),e(io,Che),e(Che,hWo),e(io,pWo),e(io,qa),e(qa,uWo),e(qa,whe),e(whe,_Wo),e(qa,bWo),e(qa,Ahe),e(Ahe,vWo),e(qa,FWo),e(qa,yhe),e(yhe,TWo),e(qa,MWo),e(io,EWo),e(io,Na),e(Na,eF),e(eF,Lhe),e(Lhe,CWo),e(eF,wWo),e(eF,TV),e(TV,AWo),e(eF,yWo),e(Na,LWo),e(Na,oF),e(oF,xhe),e(xhe,xWo),e(oF,$Wo),e(oF,MV),e(MV,kWo),e(oF,SWo),e(Na,RWo),e(Na,rF),e(rF,$he),e($he,BWo),e(rF,PWo),e(rF,EV),e(EV,IWo),e(rF,qWo),e(Na,NWo),e(Na,tF),e(tF,khe),e(khe,jWo),e(tF,DWo),e(tF,CV),e(CV,GWo),e(tF,OWo),e(io,VWo),e(io,aF),e(aF,XWo),e(aF,She),e(She,zWo),e(aF,QWo),e(aF,Rhe),e(Rhe,WWo),e(io,HWo),M(nF,io,null),b(f,vPe,_),b(f,sd,_),e(sd,sF),e(sF,Bhe),M(Ty,Bhe,null),e(sd,UWo),e(sd,Phe),e(Phe,JWo),b(f,FPe,_),b(f,Vo,_),M(My,Vo,null),e(Vo,YWo),e(Vo,ld),e(ld,KWo),e(ld,wV),e(wV,ZWo),e(ld,eHo),e(ld,AV),e(AV,oHo),e(ld,rHo),e(Vo,tHo),e(Vo,Ey),e(Ey,aHo),e(Ey,Ihe),e(Ihe,nHo),e(Ey,sHo),e(Vo,lHo),e(Vo,pt),M(Cy,pt,null),e(pt,iHo),e(pt,qhe),e(qhe,dHo),e(pt,cHo),e(pt,id),e(id,fHo),e(id,Nhe),e(Nhe,mHo),e(id,gHo),e(id,yV),e(yV,hHo),e(id,pHo),e(pt,uHo),M(lF,pt,null),e(Vo,_Ho),e(Vo,co),M(wy,co,null),e(co,bHo),e(co,jhe),e(jhe,vHo),e(co,FHo),e(co,ja),e(ja,THo),e(ja,Dhe),e(Dhe,MHo),e(ja,EHo),e(ja,Ghe),e(Ghe,CHo),e(ja,wHo),e(ja,Ohe),e(Ohe,AHo),e(ja,yHo),e(co,LHo),e(co,je),e(je,iF),e(iF,Vhe),e(Vhe,xHo),e(iF,$Ho),e(iF,LV),e(LV,kHo),e(iF,SHo),e(je,RHo),e(je,dF),e(dF,Xhe),e(Xhe,BHo),e(dF,PHo),e(dF,xV),e(xV,IHo),e(dF,qHo),e(je,NHo),e(je,cF),e(cF,zhe),e(zhe,jHo),e(cF,DHo),e(cF,$V),e($V,GHo),e(cF,OHo),e(je,VHo),e(je,fF),e(fF,Qhe),e(Qhe,XHo),e(fF,zHo),e(fF,kV),e(kV,QHo),e(fF,WHo),e(je,HHo),e(je,mF),e(mF,Whe),e(Whe,UHo),e(mF,JHo),e(mF,SV),e(SV,YHo),e(mF,KHo),e(je,ZHo),e(je,gF),e(gF,Hhe),e(Hhe,eUo),e(gF,oUo),e(gF,RV),e(RV,rUo),e(gF,tUo),e(je,aUo),e(je,hF),e(hF,Uhe),e(Uhe,nUo),e(hF,sUo),e(hF,BV),e(BV,lUo),e(hF,iUo),e(je,dUo),e(je,pF),e(pF,Jhe),e(Jhe,cUo),e(pF,fUo),e(pF,PV),e(PV,mUo),e(pF,gUo),e(co,hUo),e(co,uF),e(uF,pUo),e(uF,Yhe),e(Yhe,uUo),e(uF,_Uo),e(uF,Khe),e(Khe,bUo),e(co,vUo),M(_F,co,null),b(f,TPe,_),b(f,dd,_),e(dd,bF),e(bF,Zhe),M(Ay,Zhe,null),e(dd,FUo),e(dd,epe),e(epe,TUo),b(f,MPe,_),b(f,Xo,_),M(yy,Xo,null),e(Xo,MUo),e(Xo,cd),e(cd,EUo),e(cd,IV),e(IV,CUo),e(cd,wUo),e(cd,qV),e(qV,AUo),e(cd,yUo),e(Xo,LUo),e(Xo,Ly),e(Ly,xUo),e(Ly,ope),e(ope,$Uo),e(Ly,kUo),e(Xo,SUo),e(Xo,ut),M(xy,ut,null),e(ut,RUo),e(ut,rpe),e(rpe,BUo),e(ut,PUo),e(ut,fd),e(fd,IUo),e(fd,tpe),e(tpe,qUo),e(fd,NUo),e(fd,NV),e(NV,jUo),e(fd,DUo),e(ut,GUo),M(vF,ut,null),e(Xo,OUo),e(Xo,fo),M($y,fo,null),e(fo,VUo),e(fo,ape),e(ape,XUo),e(fo,zUo),e(fo,Da),e(Da,QUo),e(Da,npe),e(npe,WUo),e(Da,HUo),e(Da,spe),e(spe,UUo),e(Da,JUo),e(Da,lpe),e(lpe,YUo),e(Da,KUo),e(fo,ZUo),e(fo,ky),e(ky,FF),e(FF,ipe),e(ipe,eJo),e(FF,oJo),e(FF,jV),e(jV,rJo),e(FF,tJo),e(ky,aJo),e(ky,TF),e(TF,dpe),e(dpe,nJo),e(TF,sJo),e(TF,DV),e(DV,lJo),e(TF,iJo),e(fo,dJo),e(fo,MF),e(MF,cJo),e(MF,cpe),e(cpe,fJo),e(MF,mJo),e(MF,fpe),e(fpe,gJo),e(fo,hJo),M(EF,fo,null),b(f,EPe,_),b(f,md,_),e(md,CF),e(CF,mpe),M(Sy,mpe,null),e(md,pJo),e(md,gpe),e(gpe,uJo),b(f,CPe,_),b(f,zo,_),M(Ry,zo,null),e(zo,_Jo),e(zo,gd),e(gd,bJo),e(gd,GV),e(GV,vJo),e(gd,FJo),e(gd,OV),e(OV,TJo),e(gd,MJo),e(zo,EJo),e(zo,By),e(By,CJo),e(By,hpe),e(hpe,wJo),e(By,AJo),e(zo,yJo),e(zo,_t),M(Py,_t,null),e(_t,LJo),e(_t,ppe),e(ppe,xJo),e(_t,$Jo),e(_t,hd),e(hd,kJo),e(hd,upe),e(upe,SJo),e(hd,RJo),e(hd,VV),e(VV,BJo),e(hd,PJo),e(_t,IJo),M(wF,_t,null),e(zo,qJo),e(zo,mo),M(Iy,mo,null),e(mo,NJo),e(mo,_pe),e(_pe,jJo),e(mo,DJo),e(mo,Ga),e(Ga,GJo),e(Ga,bpe),e(bpe,OJo),e(Ga,VJo),e(Ga,vpe),e(vpe,XJo),e(Ga,zJo),e(Ga,Fpe),e(Fpe,QJo),e(Ga,WJo),e(mo,HJo),e(mo,Oa),e(Oa,AF),e(AF,Tpe),e(Tpe,UJo),e(AF,JJo),e(AF,XV),e(XV,YJo),e(AF,KJo),e(Oa,ZJo),e(Oa,yF),e(yF,Mpe),e(Mpe,eYo),e(yF,oYo),e(yF,zV),e(zV,rYo),e(yF,tYo),e(Oa,aYo),e(Oa,LF),e(LF,Epe),e(Epe,nYo),e(LF,sYo),e(LF,QV),e(QV,lYo),e(LF,iYo),e(Oa,dYo),e(Oa,xF),e(xF,Cpe),e(Cpe,cYo),e(xF,fYo),e(xF,WV),e(WV,mYo),e(xF,gYo),e(mo,hYo),e(mo,$F),e($F,pYo),e($F,wpe),e(wpe,uYo),e($F,_Yo),e($F,Ape),e(Ape,bYo),e(mo,vYo),M(kF,mo,null),b(f,wPe,_),b(f,pd,_),e(pd,SF),e(SF,ype),M(qy,ype,null),e(pd,FYo),e(pd,Lpe),e(Lpe,TYo),b(f,APe,_),b(f,Qo,_),M(Ny,Qo,null),e(Qo,MYo),e(Qo,ud),e(ud,EYo),e(ud,HV),e(HV,CYo),e(ud,wYo),e(ud,UV),e(UV,AYo),e(ud,yYo),e(Qo,LYo),e(Qo,jy),e(jy,xYo),e(jy,xpe),e(xpe,$Yo),e(jy,kYo),e(Qo,SYo),e(Qo,bt),M(Dy,bt,null),e(bt,RYo),e(bt,$pe),e($pe,BYo),e(bt,PYo),e(bt,_d),e(_d,IYo),e(_d,kpe),e(kpe,qYo),e(_d,NYo),e(_d,JV),e(JV,jYo),e(_d,DYo),e(bt,GYo),M(RF,bt,null),e(Qo,OYo),e(Qo,go),M(Gy,go,null),e(go,VYo),e(go,Spe),e(Spe,XYo),e(go,zYo),e(go,Va),e(Va,QYo),e(Va,Rpe),e(Rpe,WYo),e(Va,HYo),e(Va,Bpe),e(Bpe,UYo),e(Va,JYo),e(Va,Ppe),e(Ppe,YYo),e(Va,KYo),e(go,ZYo),e(go,bd),e(bd,BF),e(BF,Ipe),e(Ipe,eKo),e(BF,oKo),e(BF,YV),e(YV,rKo),e(BF,tKo),e(bd,aKo),e(bd,PF),e(PF,qpe),e(qpe,nKo),e(PF,sKo),e(PF,KV),e(KV,lKo),e(PF,iKo),e(bd,dKo),e(bd,IF),e(IF,Npe),e(Npe,cKo),e(IF,fKo),e(IF,ZV),e(ZV,mKo),e(IF,gKo),e(go,hKo),e(go,qF),e(qF,pKo),e(qF,jpe),e(jpe,uKo),e(qF,_Ko),e(qF,Dpe),e(Dpe,bKo),e(go,vKo),M(NF,go,null),b(f,yPe,_),b(f,vd,_),e(vd,jF),e(jF,Gpe),M(Oy,Gpe,null),e(vd,FKo),e(vd,Ope),e(Ope,TKo),b(f,LPe,_),b(f,Wo,_),M(Vy,Wo,null),e(Wo,MKo),e(Wo,Fd),e(Fd,EKo),e(Fd,eX),e(eX,CKo),e(Fd,wKo),e(Fd,oX),e(oX,AKo),e(Fd,yKo),e(Wo,LKo),e(Wo,Xy),e(Xy,xKo),e(Xy,Vpe),e(Vpe,$Ko),e(Xy,kKo),e(Wo,SKo),e(Wo,vt),M(zy,vt,null),e(vt,RKo),e(vt,Xpe),e(Xpe,BKo),e(vt,PKo),e(vt,Td),e(Td,IKo),e(Td,zpe),e(zpe,qKo),e(Td,NKo),e(Td,rX),e(rX,jKo),e(Td,DKo),e(vt,GKo),M(DF,vt,null),e(Wo,OKo),e(Wo,ho),M(Qy,ho,null),e(ho,VKo),e(ho,Qpe),e(Qpe,XKo),e(ho,zKo),e(ho,Xa),e(Xa,QKo),e(Xa,Wpe),e(Wpe,WKo),e(Xa,HKo),e(Xa,Hpe),e(Hpe,UKo),e(Xa,JKo),e(Xa,Upe),e(Upe,YKo),e(Xa,KKo),e(ho,ZKo),e(ho,Wy),e(Wy,GF),e(GF,Jpe),e(Jpe,eZo),e(GF,oZo),e(GF,tX),e(tX,rZo),e(GF,tZo),e(Wy,aZo),e(Wy,OF),e(OF,Ype),e(Ype,nZo),e(OF,sZo),e(OF,aX),e(aX,lZo),e(OF,iZo),e(ho,dZo),e(ho,VF),e(VF,cZo),e(VF,Kpe),e(Kpe,fZo),e(VF,mZo),e(VF,Zpe),e(Zpe,gZo),e(ho,hZo),M(XF,ho,null),b(f,xPe,_),b(f,Md,_),e(Md,zF),e(zF,eue),M(Hy,eue,null),e(Md,pZo),e(Md,oue),e(oue,uZo),b(f,$Pe,_),b(f,Ho,_),M(Uy,Ho,null),e(Ho,_Zo),e(Ho,Ed),e(Ed,bZo),e(Ed,nX),e(nX,vZo),e(Ed,FZo),e(Ed,sX),e(sX,TZo),e(Ed,MZo),e(Ho,EZo),e(Ho,Jy),e(Jy,CZo),e(Jy,rue),e(rue,wZo),e(Jy,AZo),e(Ho,yZo),e(Ho,Ft),M(Yy,Ft,null),e(Ft,LZo),e(Ft,tue),e(tue,xZo),e(Ft,$Zo),e(Ft,Cd),e(Cd,kZo),e(Cd,aue),e(aue,SZo),e(Cd,RZo),e(Cd,lX),e(lX,BZo),e(Cd,PZo),e(Ft,IZo),M(QF,Ft,null),e(Ho,qZo),e(Ho,po),M(Ky,po,null),e(po,NZo),e(po,nue),e(nue,jZo),e(po,DZo),e(po,za),e(za,GZo),e(za,sue),e(sue,OZo),e(za,VZo),e(za,lue),e(lue,XZo),e(za,zZo),e(za,iue),e(iue,QZo),e(za,WZo),e(po,HZo),e(po,due),e(due,WF),e(WF,cue),e(cue,UZo),e(WF,JZo),e(WF,iX),e(iX,YZo),e(WF,KZo),e(po,ZZo),e(po,HF),e(HF,eer),e(HF,fue),e(fue,oer),e(HF,rer),e(HF,mue),e(mue,ter),e(po,aer),M(UF,po,null),b(f,kPe,_),b(f,wd,_),e(wd,JF),e(JF,gue),M(Zy,gue,null),e(wd,ner),e(wd,hue),e(hue,ser),b(f,SPe,_),b(f,Uo,_),M(eL,Uo,null),e(Uo,ler),e(Uo,Ad),e(Ad,ier),e(Ad,dX),e(dX,der),e(Ad,cer),e(Ad,cX),e(cX,fer),e(Ad,mer),e(Uo,ger),e(Uo,oL),e(oL,her),e(oL,pue),e(pue,per),e(oL,uer),e(Uo,_er),e(Uo,Tt),M(rL,Tt,null),e(Tt,ber),e(Tt,uue),e(uue,ver),e(Tt,Fer),e(Tt,yd),e(yd,Ter),e(yd,_ue),e(_ue,Mer),e(yd,Eer),e(yd,fX),e(fX,Cer),e(yd,wer),e(Tt,Aer),M(YF,Tt,null),e(Uo,yer),e(Uo,uo),M(tL,uo,null),e(uo,Ler),e(uo,bue),e(bue,xer),e(uo,$er),e(uo,Qa),e(Qa,ker),e(Qa,vue),e(vue,Ser),e(Qa,Rer),e(Qa,Fue),e(Fue,Ber),e(Qa,Per),e(Qa,Tue),e(Tue,Ier),e(Qa,qer),e(uo,Ner),e(uo,Wa),e(Wa,KF),e(KF,Mue),e(Mue,jer),e(KF,Der),e(KF,mX),e(mX,Ger),e(KF,Oer),e(Wa,Ver),e(Wa,ZF),e(ZF,Eue),e(Eue,Xer),e(ZF,zer),e(ZF,gX),e(gX,Qer),e(ZF,Wer),e(Wa,Her),e(Wa,e6),e(e6,Cue),e(Cue,Uer),e(e6,Jer),e(e6,hX),e(hX,Yer),e(e6,Ker),e(Wa,Zer),e(Wa,o6),e(o6,wue),e(wue,eor),e(o6,oor),e(o6,pX),e(pX,ror),e(o6,tor),e(uo,aor),e(uo,r6),e(r6,nor),e(r6,Aue),e(Aue,sor),e(r6,lor),e(r6,yue),e(yue,ior),e(uo,dor),M(t6,uo,null),b(f,RPe,_),b(f,Ld,_),e(Ld,a6),e(a6,Lue),M(aL,Lue,null),e(Ld,cor),e(Ld,xue),e(xue,mor),b(f,BPe,_),b(f,Jo,_),M(nL,Jo,null),e(Jo,gor),e(Jo,xd),e(xd,hor),e(xd,uX),e(uX,por),e(xd,uor),e(xd,_X),e(_X,_or),e(xd,bor),e(Jo,vor),e(Jo,sL),e(sL,For),e(sL,$ue),e($ue,Tor),e(sL,Mor),e(Jo,Eor),e(Jo,Mt),M(lL,Mt,null),e(Mt,Cor),e(Mt,kue),e(kue,wor),e(Mt,Aor),e(Mt,$d),e($d,yor),e($d,Sue),e(Sue,Lor),e($d,xor),e($d,bX),e(bX,$or),e($d,kor),e(Mt,Sor),M(n6,Mt,null),e(Jo,Ror),e(Jo,_o),M(iL,_o,null),e(_o,Bor),e(_o,Rue),e(Rue,Por),e(_o,Ior),e(_o,Ha),e(Ha,qor),e(Ha,Bue),e(Bue,Nor),e(Ha,jor),e(Ha,Pue),e(Pue,Dor),e(Ha,Gor),e(Ha,Iue),e(Iue,Oor),e(Ha,Vor),e(_o,Xor),e(_o,que),e(que,s6),e(s6,Nue),e(Nue,zor),e(s6,Qor),e(s6,vX),e(vX,Wor),e(s6,Hor),e(_o,Uor),e(_o,l6),e(l6,Jor),e(l6,jue),e(jue,Yor),e(l6,Kor),e(l6,Due),e(Due,Zor),e(_o,err),M(i6,_o,null),b(f,PPe,_),b(f,kd,_),e(kd,d6),e(d6,Gue),M(dL,Gue,null),e(kd,orr),e(kd,Oue),e(Oue,rrr),b(f,IPe,_),b(f,Yo,_),M(cL,Yo,null),e(Yo,trr),e(Yo,Sd),e(Sd,arr),e(Sd,FX),e(FX,nrr),e(Sd,srr),e(Sd,TX),e(TX,lrr),e(Sd,irr),e(Yo,drr),e(Yo,fL),e(fL,crr),e(fL,Vue),e(Vue,frr),e(fL,mrr),e(Yo,grr),e(Yo,Et),M(mL,Et,null),e(Et,hrr),e(Et,Xue),e(Xue,prr),e(Et,urr),e(Et,Rd),e(Rd,_rr),e(Rd,zue),e(zue,brr),e(Rd,vrr),e(Rd,MX),e(MX,Frr),e(Rd,Trr),e(Et,Mrr),M(c6,Et,null),e(Yo,Err),e(Yo,Cr),M(gL,Cr,null),e(Cr,Crr),e(Cr,Que),e(Que,wrr),e(Cr,Arr),e(Cr,Ua),e(Ua,yrr),e(Ua,Wue),e(Wue,Lrr),e(Ua,xrr),e(Ua,Hue),e(Hue,$rr),e(Ua,krr),e(Ua,Uue),e(Uue,Srr),e(Ua,Rrr),e(Cr,Brr),e(Cr,j),e(j,f6),e(f6,Jue),e(Jue,Prr),e(f6,Irr),e(f6,EX),e(EX,qrr),e(f6,Nrr),e(j,jrr),e(j,m6),e(m6,Yue),e(Yue,Drr),e(m6,Grr),e(m6,CX),e(CX,Orr),e(m6,Vrr),e(j,Xrr),e(j,g6),e(g6,Kue),e(Kue,zrr),e(g6,Qrr),e(g6,wX),e(wX,Wrr),e(g6,Hrr),e(j,Urr),e(j,h6),e(h6,Zue),e(Zue,Jrr),e(h6,Yrr),e(h6,AX),e(AX,Krr),e(h6,Zrr),e(j,etr),e(j,p6),e(p6,e_e),e(e_e,otr),e(p6,rtr),e(p6,yX),e(yX,ttr),e(p6,atr),e(j,ntr),e(j,u6),e(u6,o_e),e(o_e,str),e(u6,ltr),e(u6,LX),e(LX,itr),e(u6,dtr),e(j,ctr),e(j,_6),e(_6,r_e),e(r_e,ftr),e(_6,mtr),e(_6,xX),e(xX,gtr),e(_6,htr),e(j,ptr),e(j,b6),e(b6,t_e),e(t_e,utr),e(b6,_tr),e(b6,$X),e($X,btr),e(b6,vtr),e(j,Ftr),e(j,v6),e(v6,a_e),e(a_e,Ttr),e(v6,Mtr),e(v6,kX),e(kX,Etr),e(v6,Ctr),e(j,wtr),e(j,F6),e(F6,n_e),e(n_e,Atr),e(F6,ytr),e(F6,SX),e(SX,Ltr),e(F6,xtr),e(j,$tr),e(j,T6),e(T6,s_e),e(s_e,ktr),e(T6,Str),e(T6,RX),e(RX,Rtr),e(T6,Btr),e(j,Ptr),e(j,M6),e(M6,l_e),e(l_e,Itr),e(M6,qtr),e(M6,BX),e(BX,Ntr),e(M6,jtr),e(j,Dtr),e(j,E6),e(E6,i_e),e(i_e,Gtr),e(E6,Otr),e(E6,PX),e(PX,Vtr),e(E6,Xtr),e(j,ztr),e(j,C6),e(C6,d_e),e(d_e,Qtr),e(C6,Wtr),e(C6,IX),e(IX,Htr),e(C6,Utr),e(j,Jtr),e(j,w6),e(w6,c_e),e(c_e,Ytr),e(w6,Ktr),e(w6,qX),e(qX,Ztr),e(w6,ear),e(j,oar),e(j,A6),e(A6,f_e),e(f_e,rar),e(A6,tar),e(A6,NX),e(NX,aar),e(A6,nar),e(j,sar),e(j,y6),e(y6,m_e),e(m_e,lar),e(y6,iar),e(y6,jX),e(jX,dar),e(y6,car),e(j,far),e(j,$s),e($s,g_e),e(g_e,mar),e($s,gar),e($s,DX),e(DX,har),e($s,par),e($s,GX),e(GX,uar),e($s,_ar),e(j,bar),e(j,L6),e(L6,h_e),e(h_e,Far),e(L6,Tar),e(L6,OX),e(OX,Mar),e(L6,Ear),e(j,Car),e(j,x6),e(x6,p_e),e(p_e,war),e(x6,Aar),e(x6,VX),e(VX,yar),e(x6,Lar),e(j,xar),e(j,$6),e($6,u_e),e(u_e,$ar),e($6,kar),e($6,XX),e(XX,Sar),e($6,Rar),e(j,Bar),e(j,k6),e(k6,__e),e(__e,Par),e(k6,Iar),e(k6,zX),e(zX,qar),e(k6,Nar),e(j,jar),e(j,S6),e(S6,b_e),e(b_e,Dar),e(S6,Gar),e(S6,QX),e(QX,Oar),e(S6,Var),e(j,Xar),e(j,R6),e(R6,v_e),e(v_e,zar),e(R6,Qar),e(R6,WX),e(WX,War),e(R6,Har),e(j,Uar),e(j,B6),e(B6,F_e),e(F_e,Jar),e(B6,Yar),e(B6,HX),e(HX,Kar),e(B6,Zar),e(j,enr),e(j,P6),e(P6,T_e),e(T_e,onr),e(P6,rnr),e(P6,UX),e(UX,tnr),e(P6,anr),e(j,nnr),e(j,I6),e(I6,M_e),e(M_e,snr),e(I6,lnr),e(I6,JX),e(JX,inr),e(I6,dnr),e(j,cnr),e(j,q6),e(q6,E_e),e(E_e,fnr),e(q6,mnr),e(q6,YX),e(YX,gnr),e(q6,hnr),e(j,pnr),e(j,N6),e(N6,C_e),e(C_e,unr),e(N6,_nr),e(N6,KX),e(KX,bnr),e(N6,vnr),e(j,Fnr),e(j,j6),e(j6,w_e),e(w_e,Tnr),e(j6,Mnr),e(j6,ZX),e(ZX,Enr),e(j6,Cnr),e(j,wnr),e(j,D6),e(D6,A_e),e(A_e,Anr),e(D6,ynr),e(D6,ez),e(ez,Lnr),e(D6,xnr),e(j,$nr),e(j,G6),e(G6,y_e),e(y_e,knr),e(G6,Snr),e(G6,oz),e(oz,Rnr),e(G6,Bnr),e(j,Pnr),e(j,O6),e(O6,L_e),e(L_e,Inr),e(O6,qnr),e(O6,rz),e(rz,Nnr),e(O6,jnr),e(j,Dnr),e(j,V6),e(V6,x_e),e(x_e,Gnr),e(V6,Onr),e(V6,tz),e(tz,Vnr),e(V6,Xnr),e(j,znr),e(j,X6),e(X6,$_e),e($_e,Qnr),e(X6,Wnr),e(X6,az),e(az,Hnr),e(X6,Unr),e(j,Jnr),e(j,z6),e(z6,k_e),e(k_e,Ynr),e(z6,Knr),e(z6,nz),e(nz,Znr),e(z6,esr),e(j,osr),e(j,Q6),e(Q6,S_e),e(S_e,rsr),e(Q6,tsr),e(Q6,sz),e(sz,asr),e(Q6,nsr),e(j,ssr),e(j,W6),e(W6,R_e),e(R_e,lsr),e(W6,isr),e(W6,lz),e(lz,dsr),e(W6,csr),e(j,fsr),e(j,H6),e(H6,B_e),e(B_e,msr),e(H6,gsr),e(H6,iz),e(iz,hsr),e(H6,psr),e(j,usr),e(j,U6),e(U6,P_e),e(P_e,_sr),e(U6,bsr),e(U6,dz),e(dz,vsr),e(U6,Fsr),e(j,Tsr),e(j,J6),e(J6,I_e),e(I_e,Msr),e(J6,Esr),e(J6,cz),e(cz,Csr),e(J6,wsr),e(j,Asr),e(j,Y6),e(Y6,q_e),e(q_e,ysr),e(Y6,Lsr),e(Y6,fz),e(fz,xsr),e(Y6,$sr),e(j,ksr),e(j,K6),e(K6,N_e),e(N_e,Ssr),e(K6,Rsr),e(K6,mz),e(mz,Bsr),e(K6,Psr),e(j,Isr),e(j,Z6),e(Z6,j_e),e(j_e,qsr),e(Z6,Nsr),e(Z6,gz),e(gz,jsr),e(Z6,Dsr),e(j,Gsr),e(j,eT),e(eT,D_e),e(D_e,Osr),e(eT,Vsr),e(eT,hz),e(hz,Xsr),e(eT,zsr),e(Cr,Qsr),M(oT,Cr,null),b(f,qPe,_),b(f,Bd,_),e(Bd,rT),e(rT,G_e),M(hL,G_e,null),e(Bd,Wsr),e(Bd,O_e),e(O_e,Hsr),b(f,NPe,_),b(f,Ko,_),M(pL,Ko,null),e(Ko,Usr),e(Ko,Pd),e(Pd,Jsr),e(Pd,pz),e(pz,Ysr),e(Pd,Ksr),e(Pd,uz),e(uz,Zsr),e(Pd,elr),e(Ko,olr),e(Ko,uL),e(uL,rlr),e(uL,V_e),e(V_e,tlr),e(uL,alr),e(Ko,nlr),e(Ko,Ct),M(_L,Ct,null),e(Ct,slr),e(Ct,X_e),e(X_e,llr),e(Ct,ilr),e(Ct,Id),e(Id,dlr),e(Id,z_e),e(z_e,clr),e(Id,flr),e(Id,_z),e(_z,mlr),e(Id,glr),e(Ct,hlr),M(tT,Ct,null),e(Ko,plr),e(Ko,wr),M(bL,wr,null),e(wr,ulr),e(wr,Q_e),e(Q_e,_lr),e(wr,blr),e(wr,Ja),e(Ja,vlr),e(Ja,W_e),e(W_e,Flr),e(Ja,Tlr),e(Ja,H_e),e(H_e,Mlr),e(Ja,Elr),e(Ja,U_e),e(U_e,Clr),e(Ja,wlr),e(wr,Alr),e(wr,se),e(se,aT),e(aT,J_e),e(J_e,ylr),e(aT,Llr),e(aT,bz),e(bz,xlr),e(aT,$lr),e(se,klr),e(se,nT),e(nT,Y_e),e(Y_e,Slr),e(nT,Rlr),e(nT,vz),e(vz,Blr),e(nT,Plr),e(se,Ilr),e(se,sT),e(sT,K_e),e(K_e,qlr),e(sT,Nlr),e(sT,Fz),e(Fz,jlr),e(sT,Dlr),e(se,Glr),e(se,lT),e(lT,Z_e),e(Z_e,Olr),e(lT,Vlr),e(lT,Tz),e(Tz,Xlr),e(lT,zlr),e(se,Qlr),e(se,iT),e(iT,e5e),e(e5e,Wlr),e(iT,Hlr),e(iT,Mz),e(Mz,Ulr),e(iT,Jlr),e(se,Ylr),e(se,dT),e(dT,o5e),e(o5e,Klr),e(dT,Zlr),e(dT,Ez),e(Ez,eir),e(dT,oir),e(se,rir),e(se,cT),e(cT,r5e),e(r5e,tir),e(cT,air),e(cT,Cz),e(Cz,nir),e(cT,sir),e(se,lir),e(se,fT),e(fT,t5e),e(t5e,iir),e(fT,dir),e(fT,wz),e(wz,cir),e(fT,fir),e(se,mir),e(se,mT),e(mT,a5e),e(a5e,gir),e(mT,hir),e(mT,Az),e(Az,pir),e(mT,uir),e(se,_ir),e(se,gT),e(gT,n5e),e(n5e,bir),e(gT,vir),e(gT,yz),e(yz,Fir),e(gT,Tir),e(se,Mir),e(se,hT),e(hT,s5e),e(s5e,Eir),e(hT,Cir),e(hT,Lz),e(Lz,wir),e(hT,Air),e(se,yir),e(se,pT),e(pT,l5e),e(l5e,Lir),e(pT,xir),e(pT,xz),e(xz,$ir),e(pT,kir),e(se,Sir),e(se,uT),e(uT,i5e),e(i5e,Rir),e(uT,Bir),e(uT,$z),e($z,Pir),e(uT,Iir),e(se,qir),e(se,_T),e(_T,d5e),e(d5e,Nir),e(_T,jir),e(_T,kz),e(kz,Dir),e(_T,Gir),e(se,Oir),e(se,bT),e(bT,c5e),e(c5e,Vir),e(bT,Xir),e(bT,Sz),e(Sz,zir),e(bT,Qir),e(se,Wir),e(se,vT),e(vT,f5e),e(f5e,Hir),e(vT,Uir),e(vT,Rz),e(Rz,Jir),e(vT,Yir),e(se,Kir),e(se,FT),e(FT,m5e),e(m5e,Zir),e(FT,edr),e(FT,Bz),e(Bz,odr),e(FT,rdr),e(se,tdr),e(se,TT),e(TT,g5e),e(g5e,adr),e(TT,ndr),e(TT,Pz),e(Pz,sdr),e(TT,ldr),e(se,idr),e(se,MT),e(MT,h5e),e(h5e,ddr),e(MT,cdr),e(MT,Iz),e(Iz,fdr),e(MT,mdr),e(se,gdr),e(se,ET),e(ET,p5e),e(p5e,hdr),e(ET,pdr),e(ET,qz),e(qz,udr),e(ET,_dr),e(se,bdr),e(se,CT),e(CT,u5e),e(u5e,vdr),e(CT,Fdr),e(CT,Nz),e(Nz,Tdr),e(CT,Mdr),e(se,Edr),e(se,wT),e(wT,_5e),e(_5e,Cdr),e(wT,wdr),e(wT,jz),e(jz,Adr),e(wT,ydr),e(se,Ldr),e(se,AT),e(AT,b5e),e(b5e,xdr),e(AT,$dr),e(AT,Dz),e(Dz,kdr),e(AT,Sdr),e(wr,Rdr),M(yT,wr,null),b(f,jPe,_),b(f,qd,_),e(qd,LT),e(LT,v5e),M(vL,v5e,null),e(qd,Bdr),e(qd,F5e),e(F5e,Pdr),b(f,DPe,_),b(f,Zo,_),M(FL,Zo,null),e(Zo,Idr),e(Zo,Nd),e(Nd,qdr),e(Nd,Gz),e(Gz,Ndr),e(Nd,jdr),e(Nd,Oz),e(Oz,Ddr),e(Nd,Gdr),e(Zo,Odr),e(Zo,TL),e(TL,Vdr),e(TL,T5e),e(T5e,Xdr),e(TL,zdr),e(Zo,Qdr),e(Zo,wt),M(ML,wt,null),e(wt,Wdr),e(wt,M5e),e(M5e,Hdr),e(wt,Udr),e(wt,jd),e(jd,Jdr),e(jd,E5e),e(E5e,Ydr),e(jd,Kdr),e(jd,Vz),e(Vz,Zdr),e(jd,ecr),e(wt,ocr),M(xT,wt,null),e(Zo,rcr),e(Zo,Ar),M(EL,Ar,null),e(Ar,tcr),e(Ar,C5e),e(C5e,acr),e(Ar,ncr),e(Ar,Ya),e(Ya,scr),e(Ya,w5e),e(w5e,lcr),e(Ya,icr),e(Ya,A5e),e(A5e,dcr),e(Ya,ccr),e(Ya,y5e),e(y5e,fcr),e(Ya,mcr),e(Ar,gcr),e(Ar,Me),e(Me,$T),e($T,L5e),e(L5e,hcr),e($T,pcr),e($T,Xz),e(Xz,ucr),e($T,_cr),e(Me,bcr),e(Me,kT),e(kT,x5e),e(x5e,vcr),e(kT,Fcr),e(kT,zz),e(zz,Tcr),e(kT,Mcr),e(Me,Ecr),e(Me,ST),e(ST,$5e),e($5e,Ccr),e(ST,wcr),e(ST,Qz),e(Qz,Acr),e(ST,ycr),e(Me,Lcr),e(Me,RT),e(RT,k5e),e(k5e,xcr),e(RT,$cr),e(RT,Wz),e(Wz,kcr),e(RT,Scr),e(Me,Rcr),e(Me,BT),e(BT,S5e),e(S5e,Bcr),e(BT,Pcr),e(BT,Hz),e(Hz,Icr),e(BT,qcr),e(Me,Ncr),e(Me,PT),e(PT,R5e),e(R5e,jcr),e(PT,Dcr),e(PT,Uz),e(Uz,Gcr),e(PT,Ocr),e(Me,Vcr),e(Me,IT),e(IT,B5e),e(B5e,Xcr),e(IT,zcr),e(IT,Jz),e(Jz,Qcr),e(IT,Wcr),e(Me,Hcr),e(Me,qT),e(qT,P5e),e(P5e,Ucr),e(qT,Jcr),e(qT,Yz),e(Yz,Ycr),e(qT,Kcr),e(Me,Zcr),e(Me,NT),e(NT,I5e),e(I5e,efr),e(NT,ofr),e(NT,Kz),e(Kz,rfr),e(NT,tfr),e(Me,afr),e(Me,jT),e(jT,q5e),e(q5e,nfr),e(jT,sfr),e(jT,Zz),e(Zz,lfr),e(jT,ifr),e(Me,dfr),e(Me,DT),e(DT,N5e),e(N5e,cfr),e(DT,ffr),e(DT,eQ),e(eQ,mfr),e(DT,gfr),e(Me,hfr),e(Me,GT),e(GT,j5e),e(j5e,pfr),e(GT,ufr),e(GT,oQ),e(oQ,_fr),e(GT,bfr),e(Ar,vfr),M(OT,Ar,null),b(f,GPe,_),b(f,Dd,_),e(Dd,VT),e(VT,D5e),M(CL,D5e,null),e(Dd,Ffr),e(Dd,G5e),e(G5e,Tfr),b(f,OPe,_),b(f,er,_),M(wL,er,null),e(er,Mfr),e(er,Gd),e(Gd,Efr),e(Gd,rQ),e(rQ,Cfr),e(Gd,wfr),e(Gd,tQ),e(tQ,Afr),e(Gd,yfr),e(er,Lfr),e(er,AL),e(AL,xfr),e(AL,O5e),e(O5e,$fr),e(AL,kfr),e(er,Sfr),e(er,At),M(yL,At,null),e(At,Rfr),e(At,V5e),e(V5e,Bfr),e(At,Pfr),e(At,Od),e(Od,Ifr),e(Od,X5e),e(X5e,qfr),e(Od,Nfr),e(Od,aQ),e(aQ,jfr),e(Od,Dfr),e(At,Gfr),M(XT,At,null),e(er,Ofr),e(er,yr),M(LL,yr,null),e(yr,Vfr),e(yr,z5e),e(z5e,Xfr),e(yr,zfr),e(yr,Ka),e(Ka,Qfr),e(Ka,Q5e),e(Q5e,Wfr),e(Ka,Hfr),e(Ka,W5e),e(W5e,Ufr),e(Ka,Jfr),e(Ka,H5e),e(H5e,Yfr),e(Ka,Kfr),e(yr,Zfr),e(yr,Vd),e(Vd,zT),e(zT,U5e),e(U5e,emr),e(zT,omr),e(zT,nQ),e(nQ,rmr),e(zT,tmr),e(Vd,amr),e(Vd,QT),e(QT,J5e),e(J5e,nmr),e(QT,smr),e(QT,sQ),e(sQ,lmr),e(QT,imr),e(Vd,dmr),e(Vd,WT),e(WT,Y5e),e(Y5e,cmr),e(WT,fmr),e(WT,lQ),e(lQ,mmr),e(WT,gmr),e(yr,hmr),M(HT,yr,null),b(f,VPe,_),b(f,Xd,_),e(Xd,UT),e(UT,K5e),M(xL,K5e,null),e(Xd,pmr),e(Xd,Z5e),e(Z5e,umr),b(f,XPe,_),b(f,or,_),M($L,or,null),e(or,_mr),e(or,zd),e(zd,bmr),e(zd,iQ),e(iQ,vmr),e(zd,Fmr),e(zd,dQ),e(dQ,Tmr),e(zd,Mmr),e(or,Emr),e(or,kL),e(kL,Cmr),e(kL,e1e),e(e1e,wmr),e(kL,Amr),e(or,ymr),e(or,yt),M(SL,yt,null),e(yt,Lmr),e(yt,o1e),e(o1e,xmr),e(yt,$mr),e(yt,Qd),e(Qd,kmr),e(Qd,r1e),e(r1e,Smr),e(Qd,Rmr),e(Qd,cQ),e(cQ,Bmr),e(Qd,Pmr),e(yt,Imr),M(JT,yt,null),e(or,qmr),e(or,Lr),M(RL,Lr,null),e(Lr,Nmr),e(Lr,t1e),e(t1e,jmr),e(Lr,Dmr),e(Lr,Za),e(Za,Gmr),e(Za,a1e),e(a1e,Omr),e(Za,Vmr),e(Za,n1e),e(n1e,Xmr),e(Za,zmr),e(Za,s1e),e(s1e,Qmr),e(Za,Wmr),e(Lr,Hmr),e(Lr,ie),e(ie,YT),e(YT,l1e),e(l1e,Umr),e(YT,Jmr),e(YT,fQ),e(fQ,Ymr),e(YT,Kmr),e(ie,Zmr),e(ie,KT),e(KT,i1e),e(i1e,egr),e(KT,ogr),e(KT,mQ),e(mQ,rgr),e(KT,tgr),e(ie,agr),e(ie,ZT),e(ZT,d1e),e(d1e,ngr),e(ZT,sgr),e(ZT,gQ),e(gQ,lgr),e(ZT,igr),e(ie,dgr),e(ie,e7),e(e7,c1e),e(c1e,cgr),e(e7,fgr),e(e7,hQ),e(hQ,mgr),e(e7,ggr),e(ie,hgr),e(ie,o7),e(o7,f1e),e(f1e,pgr),e(o7,ugr),e(o7,pQ),e(pQ,_gr),e(o7,bgr),e(ie,vgr),e(ie,r7),e(r7,m1e),e(m1e,Fgr),e(r7,Tgr),e(r7,uQ),e(uQ,Mgr),e(r7,Egr),e(ie,Cgr),e(ie,t7),e(t7,g1e),e(g1e,wgr),e(t7,Agr),e(t7,_Q),e(_Q,ygr),e(t7,Lgr),e(ie,xgr),e(ie,a7),e(a7,h1e),e(h1e,$gr),e(a7,kgr),e(a7,bQ),e(bQ,Sgr),e(a7,Rgr),e(ie,Bgr),e(ie,n7),e(n7,p1e),e(p1e,Pgr),e(n7,Igr),e(n7,vQ),e(vQ,qgr),e(n7,Ngr),e(ie,jgr),e(ie,s7),e(s7,u1e),e(u1e,Dgr),e(s7,Ggr),e(s7,FQ),e(FQ,Ogr),e(s7,Vgr),e(ie,Xgr),e(ie,l7),e(l7,_1e),e(_1e,zgr),e(l7,Qgr),e(l7,TQ),e(TQ,Wgr),e(l7,Hgr),e(ie,Ugr),e(ie,i7),e(i7,b1e),e(b1e,Jgr),e(i7,Ygr),e(i7,MQ),e(MQ,Kgr),e(i7,Zgr),e(ie,ehr),e(ie,d7),e(d7,v1e),e(v1e,ohr),e(d7,rhr),e(d7,EQ),e(EQ,thr),e(d7,ahr),e(ie,nhr),e(ie,c7),e(c7,F1e),e(F1e,shr),e(c7,lhr),e(c7,CQ),e(CQ,ihr),e(c7,dhr),e(ie,chr),e(ie,f7),e(f7,T1e),e(T1e,fhr),e(f7,mhr),e(f7,wQ),e(wQ,ghr),e(f7,hhr),e(ie,phr),e(ie,m7),e(m7,M1e),e(M1e,uhr),e(m7,_hr),e(m7,AQ),e(AQ,bhr),e(m7,vhr),e(ie,Fhr),e(ie,g7),e(g7,E1e),e(E1e,Thr),e(g7,Mhr),e(g7,yQ),e(yQ,Ehr),e(g7,Chr),e(ie,whr),e(ie,h7),e(h7,C1e),e(C1e,Ahr),e(h7,yhr),e(h7,LQ),e(LQ,Lhr),e(h7,xhr),e(ie,$hr),e(ie,p7),e(p7,w1e),e(w1e,khr),e(p7,Shr),e(p7,xQ),e(xQ,Rhr),e(p7,Bhr),e(ie,Phr),e(ie,u7),e(u7,A1e),e(A1e,Ihr),e(u7,qhr),e(u7,$Q),e($Q,Nhr),e(u7,jhr),e(Lr,Dhr),M(_7,Lr,null),b(f,zPe,_),b(f,Wd,_),e(Wd,b7),e(b7,y1e),M(BL,y1e,null),e(Wd,Ghr),e(Wd,L1e),e(L1e,Ohr),b(f,QPe,_),b(f,rr,_),M(PL,rr,null),e(rr,Vhr),e(rr,Hd),e(Hd,Xhr),e(Hd,kQ),e(kQ,zhr),e(Hd,Qhr),e(Hd,SQ),e(SQ,Whr),e(Hd,Hhr),e(rr,Uhr),e(rr,IL),e(IL,Jhr),e(IL,x1e),e(x1e,Yhr),e(IL,Khr),e(rr,Zhr),e(rr,Lt),M(qL,Lt,null),e(Lt,epr),e(Lt,$1e),e($1e,opr),e(Lt,rpr),e(Lt,Ud),e(Ud,tpr),e(Ud,k1e),e(k1e,apr),e(Ud,npr),e(Ud,RQ),e(RQ,spr),e(Ud,lpr),e(Lt,ipr),M(v7,Lt,null),e(rr,dpr),e(rr,xr),M(NL,xr,null),e(xr,cpr),e(xr,S1e),e(S1e,fpr),e(xr,mpr),e(xr,en),e(en,gpr),e(en,R1e),e(R1e,hpr),e(en,ppr),e(en,B1e),e(B1e,upr),e(en,_pr),e(en,P1e),e(P1e,bpr),e(en,vpr),e(xr,Fpr),e(xr,ye),e(ye,F7),e(F7,I1e),e(I1e,Tpr),e(F7,Mpr),e(F7,BQ),e(BQ,Epr),e(F7,Cpr),e(ye,wpr),e(ye,T7),e(T7,q1e),e(q1e,Apr),e(T7,ypr),e(T7,PQ),e(PQ,Lpr),e(T7,xpr),e(ye,$pr),e(ye,M7),e(M7,N1e),e(N1e,kpr),e(M7,Spr),e(M7,IQ),e(IQ,Rpr),e(M7,Bpr),e(ye,Ppr),e(ye,E7),e(E7,j1e),e(j1e,Ipr),e(E7,qpr),e(E7,qQ),e(qQ,Npr),e(E7,jpr),e(ye,Dpr),e(ye,C7),e(C7,D1e),e(D1e,Gpr),e(C7,Opr),e(C7,NQ),e(NQ,Vpr),e(C7,Xpr),e(ye,zpr),e(ye,w7),e(w7,G1e),e(G1e,Qpr),e(w7,Wpr),e(w7,jQ),e(jQ,Hpr),e(w7,Upr),e(ye,Jpr),e(ye,A7),e(A7,O1e),e(O1e,Ypr),e(A7,Kpr),e(A7,DQ),e(DQ,Zpr),e(A7,eur),e(ye,our),e(ye,y7),e(y7,V1e),e(V1e,rur),e(y7,tur),e(y7,GQ),e(GQ,aur),e(y7,nur),e(ye,sur),e(ye,L7),e(L7,X1e),e(X1e,lur),e(L7,iur),e(L7,OQ),e(OQ,dur),e(L7,cur),e(ye,fur),e(ye,x7),e(x7,z1e),e(z1e,mur),e(x7,gur),e(x7,VQ),e(VQ,hur),e(x7,pur),e(xr,uur),M($7,xr,null),b(f,WPe,_),b(f,Jd,_),e(Jd,k7),e(k7,Q1e),M(jL,Q1e,null),e(Jd,_ur),e(Jd,W1e),e(W1e,bur),b(f,HPe,_),b(f,tr,_),M(DL,tr,null),e(tr,vur),e(tr,Yd),e(Yd,Fur),e(Yd,XQ),e(XQ,Tur),e(Yd,Mur),e(Yd,zQ),e(zQ,Eur),e(Yd,Cur),e(tr,wur),e(tr,GL),e(GL,Aur),e(GL,H1e),e(H1e,yur),e(GL,Lur),e(tr,xur),e(tr,xt),M(OL,xt,null),e(xt,$ur),e(xt,U1e),e(U1e,kur),e(xt,Sur),e(xt,Kd),e(Kd,Rur),e(Kd,J1e),e(J1e,Bur),e(Kd,Pur),e(Kd,QQ),e(QQ,Iur),e(Kd,qur),e(xt,Nur),M(S7,xt,null),e(tr,jur),e(tr,$r),M(VL,$r,null),e($r,Dur),e($r,Y1e),e(Y1e,Gur),e($r,Our),e($r,on),e(on,Vur),e(on,K1e),e(K1e,Xur),e(on,zur),e(on,Z1e),e(Z1e,Qur),e(on,Wur),e(on,ebe),e(ebe,Hur),e(on,Uur),e($r,Jur),e($r,Z),e(Z,R7),e(R7,obe),e(obe,Yur),e(R7,Kur),e(R7,WQ),e(WQ,Zur),e(R7,e_r),e(Z,o_r),e(Z,B7),e(B7,rbe),e(rbe,r_r),e(B7,t_r),e(B7,HQ),e(HQ,a_r),e(B7,n_r),e(Z,s_r),e(Z,P7),e(P7,tbe),e(tbe,l_r),e(P7,i_r),e(P7,UQ),e(UQ,d_r),e(P7,c_r),e(Z,f_r),e(Z,I7),e(I7,abe),e(abe,m_r),e(I7,g_r),e(I7,JQ),e(JQ,h_r),e(I7,p_r),e(Z,u_r),e(Z,q7),e(q7,nbe),e(nbe,__r),e(q7,b_r),e(q7,YQ),e(YQ,v_r),e(q7,F_r),e(Z,T_r),e(Z,N7),e(N7,sbe),e(sbe,M_r),e(N7,E_r),e(N7,KQ),e(KQ,C_r),e(N7,w_r),e(Z,A_r),e(Z,j7),e(j7,lbe),e(lbe,y_r),e(j7,L_r),e(j7,ZQ),e(ZQ,x_r),e(j7,$_r),e(Z,k_r),e(Z,D7),e(D7,ibe),e(ibe,S_r),e(D7,R_r),e(D7,eW),e(eW,B_r),e(D7,P_r),e(Z,I_r),e(Z,G7),e(G7,dbe),e(dbe,q_r),e(G7,N_r),e(G7,oW),e(oW,j_r),e(G7,D_r),e(Z,G_r),e(Z,O7),e(O7,cbe),e(cbe,O_r),e(O7,V_r),e(O7,rW),e(rW,X_r),e(O7,z_r),e(Z,Q_r),e(Z,V7),e(V7,fbe),e(fbe,W_r),e(V7,H_r),e(V7,tW),e(tW,U_r),e(V7,J_r),e(Z,Y_r),e(Z,X7),e(X7,mbe),e(mbe,K_r),e(X7,Z_r),e(X7,aW),e(aW,e5r),e(X7,o5r),e(Z,r5r),e(Z,z7),e(z7,gbe),e(gbe,t5r),e(z7,a5r),e(z7,nW),e(nW,n5r),e(z7,s5r),e(Z,l5r),e(Z,Q7),e(Q7,hbe),e(hbe,i5r),e(Q7,d5r),e(Q7,sW),e(sW,c5r),e(Q7,f5r),e(Z,m5r),e(Z,W7),e(W7,pbe),e(pbe,g5r),e(W7,h5r),e(W7,lW),e(lW,p5r),e(W7,u5r),e(Z,_5r),e(Z,H7),e(H7,ube),e(ube,b5r),e(H7,v5r),e(H7,iW),e(iW,F5r),e(H7,T5r),e(Z,M5r),e(Z,U7),e(U7,_be),e(_be,E5r),e(U7,C5r),e(U7,dW),e(dW,w5r),e(U7,A5r),e(Z,y5r),e(Z,J7),e(J7,bbe),e(bbe,L5r),e(J7,x5r),e(J7,cW),e(cW,$5r),e(J7,k5r),e(Z,S5r),e(Z,Y7),e(Y7,vbe),e(vbe,R5r),e(Y7,B5r),e(Y7,fW),e(fW,P5r),e(Y7,I5r),e(Z,q5r),e(Z,K7),e(K7,Fbe),e(Fbe,N5r),e(K7,j5r),e(K7,mW),e(mW,D5r),e(K7,G5r),e(Z,O5r),e(Z,Z7),e(Z7,Tbe),e(Tbe,V5r),e(Z7,X5r),e(Z7,gW),e(gW,z5r),e(Z7,Q5r),e(Z,W5r),e(Z,eM),e(eM,Mbe),e(Mbe,H5r),e(eM,U5r),e(eM,hW),e(hW,J5r),e(eM,Y5r),e(Z,K5r),e(Z,oM),e(oM,Ebe),e(Ebe,Z5r),e(oM,e1r),e(oM,pW),e(pW,o1r),e(oM,r1r),e(Z,t1r),e(Z,rM),e(rM,Cbe),e(Cbe,a1r),e(rM,n1r),e(rM,uW),e(uW,s1r),e(rM,l1r),e(Z,i1r),e(Z,tM),e(tM,wbe),e(wbe,d1r),e(tM,c1r),e(tM,_W),e(_W,f1r),e(tM,m1r),e(Z,g1r),e(Z,aM),e(aM,Abe),e(Abe,h1r),e(aM,p1r),e(aM,bW),e(bW,u1r),e(aM,_1r),e($r,b1r),M(nM,$r,null),b(f,UPe,_),b(f,Zd,_),e(Zd,sM),e(sM,ybe),M(XL,ybe,null),e(Zd,v1r),e(Zd,Lbe),e(Lbe,F1r),b(f,JPe,_),b(f,ar,_),M(zL,ar,null),e(ar,T1r),e(ar,ec),e(ec,M1r),e(ec,vW),e(vW,E1r),e(ec,C1r),e(ec,FW),e(FW,w1r),e(ec,A1r),e(ar,y1r),e(ar,QL),e(QL,L1r),e(QL,xbe),e(xbe,x1r),e(QL,$1r),e(ar,k1r),e(ar,$t),M(WL,$t,null),e($t,S1r),e($t,$be),e($be,R1r),e($t,B1r),e($t,oc),e(oc,P1r),e(oc,kbe),e(kbe,I1r),e(oc,q1r),e(oc,TW),e(TW,N1r),e(oc,j1r),e($t,D1r),M(lM,$t,null),e(ar,G1r),e(ar,kr),M(HL,kr,null),e(kr,O1r),e(kr,Sbe),e(Sbe,V1r),e(kr,X1r),e(kr,rn),e(rn,z1r),e(rn,Rbe),e(Rbe,Q1r),e(rn,W1r),e(rn,Bbe),e(Bbe,H1r),e(rn,U1r),e(rn,Pbe),e(Pbe,J1r),e(rn,Y1r),e(kr,K1r),e(kr,pe),e(pe,iM),e(iM,Ibe),e(Ibe,Z1r),e(iM,ebr),e(iM,MW),e(MW,obr),e(iM,rbr),e(pe,tbr),e(pe,dM),e(dM,qbe),e(qbe,abr),e(dM,nbr),e(dM,EW),e(EW,sbr),e(dM,lbr),e(pe,ibr),e(pe,cM),e(cM,Nbe),e(Nbe,dbr),e(cM,cbr),e(cM,CW),e(CW,fbr),e(cM,mbr),e(pe,gbr),e(pe,fM),e(fM,jbe),e(jbe,hbr),e(fM,pbr),e(fM,wW),e(wW,ubr),e(fM,_br),e(pe,bbr),e(pe,mM),e(mM,Dbe),e(Dbe,vbr),e(mM,Fbr),e(mM,AW),e(AW,Tbr),e(mM,Mbr),e(pe,Ebr),e(pe,gM),e(gM,Gbe),e(Gbe,Cbr),e(gM,wbr),e(gM,yW),e(yW,Abr),e(gM,ybr),e(pe,Lbr),e(pe,hM),e(hM,Obe),e(Obe,xbr),e(hM,$br),e(hM,LW),e(LW,kbr),e(hM,Sbr),e(pe,Rbr),e(pe,pM),e(pM,Vbe),e(Vbe,Bbr),e(pM,Pbr),e(pM,xW),e(xW,Ibr),e(pM,qbr),e(pe,Nbr),e(pe,uM),e(uM,Xbe),e(Xbe,jbr),e(uM,Dbr),e(uM,$W),e($W,Gbr),e(uM,Obr),e(pe,Vbr),e(pe,_M),e(_M,zbe),e(zbe,Xbr),e(_M,zbr),e(_M,kW),e(kW,Qbr),e(_M,Wbr),e(pe,Hbr),e(pe,bM),e(bM,Qbe),e(Qbe,Ubr),e(bM,Jbr),e(bM,SW),e(SW,Ybr),e(bM,Kbr),e(pe,Zbr),e(pe,vM),e(vM,Wbe),e(Wbe,e2r),e(vM,o2r),e(vM,RW),e(RW,r2r),e(vM,t2r),e(pe,a2r),e(pe,FM),e(FM,Hbe),e(Hbe,n2r),e(FM,s2r),e(FM,BW),e(BW,l2r),e(FM,i2r),e(pe,d2r),e(pe,TM),e(TM,Ube),e(Ube,c2r),e(TM,f2r),e(TM,PW),e(PW,m2r),e(TM,g2r),e(pe,h2r),e(pe,MM),e(MM,Jbe),e(Jbe,p2r),e(MM,u2r),e(MM,IW),e(IW,_2r),e(MM,b2r),e(pe,v2r),e(pe,EM),e(EM,Ybe),e(Ybe,F2r),e(EM,T2r),e(EM,qW),e(qW,M2r),e(EM,E2r),e(pe,C2r),e(pe,CM),e(CM,Kbe),e(Kbe,w2r),e(CM,A2r),e(CM,NW),e(NW,y2r),e(CM,L2r),e(kr,x2r),M(wM,kr,null),b(f,YPe,_),b(f,rc,_),e(rc,AM),e(AM,Zbe),M(UL,Zbe,null),e(rc,$2r),e(rc,e2e),e(e2e,k2r),b(f,KPe,_),b(f,nr,_),M(JL,nr,null),e(nr,S2r),e(nr,tc),e(tc,R2r),e(tc,jW),e(jW,B2r),e(tc,P2r),e(tc,DW),e(DW,I2r),e(tc,q2r),e(nr,N2r),e(nr,YL),e(YL,j2r),e(YL,o2e),e(o2e,D2r),e(YL,G2r),e(nr,O2r),e(nr,kt),M(KL,kt,null),e(kt,V2r),e(kt,r2e),e(r2e,X2r),e(kt,z2r),e(kt,ac),e(ac,Q2r),e(ac,t2e),e(t2e,W2r),e(ac,H2r),e(ac,GW),e(GW,U2r),e(ac,J2r),e(kt,Y2r),M(yM,kt,null),e(nr,K2r),e(nr,Sr),M(ZL,Sr,null),e(Sr,Z2r),e(Sr,a2e),e(a2e,evr),e(Sr,ovr),e(Sr,tn),e(tn,rvr),e(tn,n2e),e(n2e,tvr),e(tn,avr),e(tn,s2e),e(s2e,nvr),e(tn,svr),e(tn,l2e),e(l2e,lvr),e(tn,ivr),e(Sr,dvr),e(Sr,i2e),e(i2e,LM),e(LM,d2e),e(d2e,cvr),e(LM,fvr),e(LM,OW),e(OW,mvr),e(LM,gvr),e(Sr,hvr),M(xM,Sr,null),b(f,ZPe,_),b(f,nc,_),e(nc,$M),e($M,c2e),M(e8,c2e,null),e(nc,pvr),e(nc,f2e),e(f2e,uvr),b(f,eIe,_),b(f,sr,_),M(o8,sr,null),e(sr,_vr),e(sr,sc),e(sc,bvr),e(sc,VW),e(VW,vvr),e(sc,Fvr),e(sc,XW),e(XW,Tvr),e(sc,Mvr),e(sr,Evr),e(sr,r8),e(r8,Cvr),e(r8,m2e),e(m2e,wvr),e(r8,Avr),e(sr,yvr),e(sr,St),M(t8,St,null),e(St,Lvr),e(St,g2e),e(g2e,xvr),e(St,$vr),e(St,lc),e(lc,kvr),e(lc,h2e),e(h2e,Svr),e(lc,Rvr),e(lc,zW),e(zW,Bvr),e(lc,Pvr),e(St,Ivr),M(kM,St,null),e(sr,qvr),e(sr,Rr),M(a8,Rr,null),e(Rr,Nvr),e(Rr,p2e),e(p2e,jvr),e(Rr,Dvr),e(Rr,an),e(an,Gvr),e(an,u2e),e(u2e,Ovr),e(an,Vvr),e(an,_2e),e(_2e,Xvr),e(an,zvr),e(an,b2e),e(b2e,Qvr),e(an,Wvr),e(Rr,Hvr),e(Rr,de),e(de,SM),e(SM,v2e),e(v2e,Uvr),e(SM,Jvr),e(SM,QW),e(QW,Yvr),e(SM,Kvr),e(de,Zvr),e(de,RM),e(RM,F2e),e(F2e,eFr),e(RM,oFr),e(RM,WW),e(WW,rFr),e(RM,tFr),e(de,aFr),e(de,BM),e(BM,T2e),e(T2e,nFr),e(BM,sFr),e(BM,HW),e(HW,lFr),e(BM,iFr),e(de,dFr),e(de,PM),e(PM,M2e),e(M2e,cFr),e(PM,fFr),e(PM,UW),e(UW,mFr),e(PM,gFr),e(de,hFr),e(de,IM),e(IM,E2e),e(E2e,pFr),e(IM,uFr),e(IM,JW),e(JW,_Fr),e(IM,bFr),e(de,vFr),e(de,qM),e(qM,C2e),e(C2e,FFr),e(qM,TFr),e(qM,YW),e(YW,MFr),e(qM,EFr),e(de,CFr),e(de,NM),e(NM,w2e),e(w2e,wFr),e(NM,AFr),e(NM,KW),e(KW,yFr),e(NM,LFr),e(de,xFr),e(de,jM),e(jM,A2e),e(A2e,$Fr),e(jM,kFr),e(jM,ZW),e(ZW,SFr),e(jM,RFr),e(de,BFr),e(de,DM),e(DM,y2e),e(y2e,PFr),e(DM,IFr),e(DM,eH),e(eH,qFr),e(DM,NFr),e(de,jFr),e(de,GM),e(GM,L2e),e(L2e,DFr),e(GM,GFr),e(GM,oH),e(oH,OFr),e(GM,VFr),e(de,XFr),e(de,OM),e(OM,x2e),e(x2e,zFr),e(OM,QFr),e(OM,rH),e(rH,WFr),e(OM,HFr),e(de,UFr),e(de,VM),e(VM,$2e),e($2e,JFr),e(VM,YFr),e(VM,tH),e(tH,KFr),e(VM,ZFr),e(de,e6r),e(de,XM),e(XM,k2e),e(k2e,o6r),e(XM,r6r),e(XM,aH),e(aH,t6r),e(XM,a6r),e(de,n6r),e(de,zM),e(zM,S2e),e(S2e,s6r),e(zM,l6r),e(zM,nH),e(nH,i6r),e(zM,d6r),e(de,c6r),e(de,QM),e(QM,R2e),e(R2e,f6r),e(QM,m6r),e(QM,sH),e(sH,g6r),e(QM,h6r),e(de,p6r),e(de,WM),e(WM,B2e),e(B2e,u6r),e(WM,_6r),e(WM,lH),e(lH,b6r),e(WM,v6r),e(de,F6r),e(de,HM),e(HM,P2e),e(P2e,T6r),e(HM,M6r),e(HM,iH),e(iH,E6r),e(HM,C6r),e(de,w6r),e(de,UM),e(UM,I2e),e(I2e,A6r),e(UM,y6r),e(UM,dH),e(dH,L6r),e(UM,x6r),e(de,$6r),e(de,JM),e(JM,q2e),e(q2e,k6r),e(JM,S6r),e(JM,cH),e(cH,R6r),e(JM,B6r),e(de,P6r),e(de,YM),e(YM,N2e),e(N2e,I6r),e(YM,q6r),e(YM,fH),e(fH,N6r),e(YM,j6r),e(Rr,D6r),M(KM,Rr,null),b(f,oIe,_),b(f,ic,_),e(ic,ZM),e(ZM,j2e),M(n8,j2e,null),e(ic,G6r),e(ic,D2e),e(D2e,O6r),b(f,rIe,_),b(f,lr,_),M(s8,lr,null),e(lr,V6r),e(lr,dc),e(dc,X6r),e(dc,mH),e(mH,z6r),e(dc,Q6r),e(dc,gH),e(gH,W6r),e(dc,H6r),e(lr,U6r),e(lr,l8),e(l8,J6r),e(l8,G2e),e(G2e,Y6r),e(l8,K6r),e(lr,Z6r),e(lr,Rt),M(i8,Rt,null),e(Rt,eTr),e(Rt,O2e),e(O2e,oTr),e(Rt,rTr),e(Rt,cc),e(cc,tTr),e(cc,V2e),e(V2e,aTr),e(cc,nTr),e(cc,hH),e(hH,sTr),e(cc,lTr),e(Rt,iTr),M(e4,Rt,null),e(lr,dTr),e(lr,Br),M(d8,Br,null),e(Br,cTr),e(Br,X2e),e(X2e,fTr),e(Br,mTr),e(Br,nn),e(nn,gTr),e(nn,z2e),e(z2e,hTr),e(nn,pTr),e(nn,Q2e),e(Q2e,uTr),e(nn,_Tr),e(nn,W2e),e(W2e,bTr),e(nn,vTr),e(Br,FTr),e(Br,ce),e(ce,o4),e(o4,H2e),e(H2e,TTr),e(o4,MTr),e(o4,pH),e(pH,ETr),e(o4,CTr),e(ce,wTr),e(ce,r4),e(r4,U2e),e(U2e,ATr),e(r4,yTr),e(r4,uH),e(uH,LTr),e(r4,xTr),e(ce,$Tr),e(ce,t4),e(t4,J2e),e(J2e,kTr),e(t4,STr),e(t4,_H),e(_H,RTr),e(t4,BTr),e(ce,PTr),e(ce,a4),e(a4,Y2e),e(Y2e,ITr),e(a4,qTr),e(a4,bH),e(bH,NTr),e(a4,jTr),e(ce,DTr),e(ce,n4),e(n4,K2e),e(K2e,GTr),e(n4,OTr),e(n4,vH),e(vH,VTr),e(n4,XTr),e(ce,zTr),e(ce,s4),e(s4,Z2e),e(Z2e,QTr),e(s4,WTr),e(s4,FH),e(FH,HTr),e(s4,UTr),e(ce,JTr),e(ce,l4),e(l4,eve),e(eve,YTr),e(l4,KTr),e(l4,TH),e(TH,ZTr),e(l4,e7r),e(ce,o7r),e(ce,i4),e(i4,ove),e(ove,r7r),e(i4,t7r),e(i4,MH),e(MH,a7r),e(i4,n7r),e(ce,s7r),e(ce,d4),e(d4,rve),e(rve,l7r),e(d4,i7r),e(d4,EH),e(EH,d7r),e(d4,c7r),e(ce,f7r),e(ce,c4),e(c4,tve),e(tve,m7r),e(c4,g7r),e(c4,CH),e(CH,h7r),e(c4,p7r),e(ce,u7r),e(ce,f4),e(f4,ave),e(ave,_7r),e(f4,b7r),e(f4,wH),e(wH,v7r),e(f4,F7r),e(ce,T7r),e(ce,m4),e(m4,nve),e(nve,M7r),e(m4,E7r),e(m4,AH),e(AH,C7r),e(m4,w7r),e(ce,A7r),e(ce,g4),e(g4,sve),e(sve,y7r),e(g4,L7r),e(g4,yH),e(yH,x7r),e(g4,$7r),e(ce,k7r),e(ce,h4),e(h4,lve),e(lve,S7r),e(h4,R7r),e(h4,LH),e(LH,B7r),e(h4,P7r),e(ce,I7r),e(ce,p4),e(p4,ive),e(ive,q7r),e(p4,N7r),e(p4,xH),e(xH,j7r),e(p4,D7r),e(ce,G7r),e(ce,u4),e(u4,dve),e(dve,O7r),e(u4,V7r),e(u4,$H),e($H,X7r),e(u4,z7r),e(ce,Q7r),e(ce,_4),e(_4,cve),e(cve,W7r),e(_4,H7r),e(_4,kH),e(kH,U7r),e(_4,J7r),e(ce,Y7r),e(ce,b4),e(b4,fve),e(fve,K7r),e(b4,Z7r),e(b4,SH),e(SH,eMr),e(b4,oMr),e(ce,rMr),e(ce,v4),e(v4,mve),e(mve,tMr),e(v4,aMr),e(v4,RH),e(RH,nMr),e(v4,sMr),e(ce,lMr),e(ce,F4),e(F4,gve),e(gve,iMr),e(F4,dMr),e(F4,BH),e(BH,cMr),e(F4,fMr),e(Br,mMr),M(T4,Br,null),b(f,tIe,_),b(f,fc,_),e(fc,M4),e(M4,hve),M(c8,hve,null),e(fc,gMr),e(fc,pve),e(pve,hMr),b(f,aIe,_),b(f,ir,_),M(f8,ir,null),e(ir,pMr),e(ir,mc),e(mc,uMr),e(mc,PH),e(PH,_Mr),e(mc,bMr),e(mc,IH),e(IH,vMr),e(mc,FMr),e(ir,TMr),e(ir,m8),e(m8,MMr),e(m8,uve),e(uve,EMr),e(m8,CMr),e(ir,wMr),e(ir,Bt),M(g8,Bt,null),e(Bt,AMr),e(Bt,_ve),e(_ve,yMr),e(Bt,LMr),e(Bt,gc),e(gc,xMr),e(gc,bve),e(bve,$Mr),e(gc,kMr),e(gc,qH),e(qH,SMr),e(gc,RMr),e(Bt,BMr),M(E4,Bt,null),e(ir,PMr),e(ir,Pr),M(h8,Pr,null),e(Pr,IMr),e(Pr,vve),e(vve,qMr),e(Pr,NMr),e(Pr,sn),e(sn,jMr),e(sn,Fve),e(Fve,DMr),e(sn,GMr),e(sn,Tve),e(Tve,OMr),e(sn,VMr),e(sn,Mve),e(Mve,XMr),e(sn,zMr),e(Pr,QMr),e(Pr,Eve),e(Eve,C4),e(C4,Cve),e(Cve,WMr),e(C4,HMr),e(C4,NH),e(NH,UMr),e(C4,JMr),e(Pr,YMr),M(w4,Pr,null),b(f,nIe,_),b(f,hc,_),e(hc,A4),e(A4,wve),M(p8,wve,null),e(hc,KMr),e(hc,Ave),e(Ave,ZMr),b(f,sIe,_),b(f,dr,_),M(u8,dr,null),e(dr,e4r),e(dr,pc),e(pc,o4r),e(pc,jH),e(jH,r4r),e(pc,t4r),e(pc,DH),e(DH,a4r),e(pc,n4r),e(dr,s4r),e(dr,_8),e(_8,l4r),e(_8,yve),e(yve,i4r),e(_8,d4r),e(dr,c4r),e(dr,Pt),M(b8,Pt,null),e(Pt,f4r),e(Pt,Lve),e(Lve,m4r),e(Pt,g4r),e(Pt,uc),e(uc,h4r),e(uc,xve),e(xve,p4r),e(uc,u4r),e(uc,GH),e(GH,_4r),e(uc,b4r),e(Pt,v4r),M(y4,Pt,null),e(dr,F4r),e(dr,Ir),M(v8,Ir,null),e(Ir,T4r),e(Ir,$ve),e($ve,M4r),e(Ir,E4r),e(Ir,ln),e(ln,C4r),e(ln,kve),e(kve,w4r),e(ln,A4r),e(ln,Sve),e(Sve,y4r),e(ln,L4r),e(ln,Rve),e(Rve,x4r),e(ln,$4r),e(Ir,k4r),e(Ir,Bve),e(Bve,L4),e(L4,Pve),e(Pve,S4r),e(L4,R4r),e(L4,OH),e(OH,B4r),e(L4,P4r),e(Ir,I4r),M(x4,Ir,null),b(f,lIe,_),b(f,_c,_),e(_c,$4),e($4,Ive),M(F8,Ive,null),e(_c,q4r),e(_c,qve),e(qve,N4r),b(f,iIe,_),b(f,cr,_),M(T8,cr,null),e(cr,j4r),e(cr,bc),e(bc,D4r),e(bc,VH),e(VH,G4r),e(bc,O4r),e(bc,XH),e(XH,V4r),e(bc,X4r),e(cr,z4r),e(cr,M8),e(M8,Q4r),e(M8,Nve),e(Nve,W4r),e(M8,H4r),e(cr,U4r),e(cr,It),M(E8,It,null),e(It,J4r),e(It,jve),e(jve,Y4r),e(It,K4r),e(It,vc),e(vc,Z4r),e(vc,Dve),e(Dve,eEr),e(vc,oEr),e(vc,zH),e(zH,rEr),e(vc,tEr),e(It,aEr),M(k4,It,null),e(cr,nEr),e(cr,qr),M(C8,qr,null),e(qr,sEr),e(qr,Gve),e(Gve,lEr),e(qr,iEr),e(qr,dn),e(dn,dEr),e(dn,Ove),e(Ove,cEr),e(dn,fEr),e(dn,Vve),e(Vve,mEr),e(dn,gEr),e(dn,Xve),e(Xve,hEr),e(dn,pEr),e(qr,uEr),e(qr,re),e(re,S4),e(S4,zve),e(zve,_Er),e(S4,bEr),e(S4,QH),e(QH,vEr),e(S4,FEr),e(re,TEr),e(re,R4),e(R4,Qve),e(Qve,MEr),e(R4,EEr),e(R4,WH),e(WH,CEr),e(R4,wEr),e(re,AEr),e(re,B4),e(B4,Wve),e(Wve,yEr),e(B4,LEr),e(B4,HH),e(HH,xEr),e(B4,$Er),e(re,kEr),e(re,P4),e(P4,Hve),e(Hve,SEr),e(P4,REr),e(P4,UH),e(UH,BEr),e(P4,PEr),e(re,IEr),e(re,I4),e(I4,Uve),e(Uve,qEr),e(I4,NEr),e(I4,JH),e(JH,jEr),e(I4,DEr),e(re,GEr),e(re,q4),e(q4,Jve),e(Jve,OEr),e(q4,VEr),e(q4,YH),e(YH,XEr),e(q4,zEr),e(re,QEr),e(re,N4),e(N4,Yve),e(Yve,WEr),e(N4,HEr),e(N4,KH),e(KH,UEr),e(N4,JEr),e(re,YEr),e(re,j4),e(j4,Kve),e(Kve,KEr),e(j4,ZEr),e(j4,ZH),e(ZH,eCr),e(j4,oCr),e(re,rCr),e(re,D4),e(D4,Zve),e(Zve,tCr),e(D4,aCr),e(D4,eU),e(eU,nCr),e(D4,sCr),e(re,lCr),e(re,G4),e(G4,eFe),e(eFe,iCr),e(G4,dCr),e(G4,oU),e(oU,cCr),e(G4,fCr),e(re,mCr),e(re,O4),e(O4,oFe),e(oFe,gCr),e(O4,hCr),e(O4,rU),e(rU,pCr),e(O4,uCr),e(re,_Cr),e(re,V4),e(V4,rFe),e(rFe,bCr),e(V4,vCr),e(V4,tU),e(tU,FCr),e(V4,TCr),e(re,MCr),e(re,X4),e(X4,tFe),e(tFe,ECr),e(X4,CCr),e(X4,aU),e(aU,wCr),e(X4,ACr),e(re,yCr),e(re,z4),e(z4,aFe),e(aFe,LCr),e(z4,xCr),e(z4,nU),e(nU,$Cr),e(z4,kCr),e(re,SCr),e(re,Q4),e(Q4,nFe),e(nFe,RCr),e(Q4,BCr),e(Q4,sU),e(sU,PCr),e(Q4,ICr),e(re,qCr),e(re,W4),e(W4,sFe),e(sFe,NCr),e(W4,jCr),e(W4,lU),e(lU,DCr),e(W4,GCr),e(re,OCr),e(re,H4),e(H4,lFe),e(lFe,VCr),e(H4,XCr),e(H4,iU),e(iU,zCr),e(H4,QCr),e(re,WCr),e(re,U4),e(U4,iFe),e(iFe,HCr),e(U4,UCr),e(U4,dU),e(dU,JCr),e(U4,YCr),e(re,KCr),e(re,J4),e(J4,dFe),e(dFe,ZCr),e(J4,e3r),e(J4,cU),e(cU,o3r),e(J4,r3r),e(re,t3r),e(re,Y4),e(Y4,cFe),e(cFe,a3r),e(Y4,n3r),e(Y4,fU),e(fU,s3r),e(Y4,l3r),e(re,i3r),e(re,K4),e(K4,fFe),e(fFe,d3r),e(K4,c3r),e(K4,mU),e(mU,f3r),e(K4,m3r),e(re,g3r),e(re,Z4),e(Z4,mFe),e(mFe,h3r),e(Z4,p3r),e(Z4,gU),e(gU,u3r),e(Z4,_3r),e(re,b3r),e(re,eE),e(eE,gFe),e(gFe,v3r),e(eE,F3r),e(eE,hU),e(hU,T3r),e(eE,M3r),e(re,E3r),e(re,oE),e(oE,hFe),e(hFe,C3r),e(oE,w3r),e(oE,pU),e(pU,A3r),e(oE,y3r),e(re,L3r),e(re,rE),e(rE,pFe),e(pFe,x3r),e(rE,$3r),e(rE,uU),e(uU,k3r),e(rE,S3r),e(qr,R3r),M(tE,qr,null),b(f,dIe,_),b(f,Fc,_),e(Fc,aE),e(aE,uFe),M(w8,uFe,null),e(Fc,B3r),e(Fc,_Fe),e(_Fe,P3r),b(f,cIe,_),b(f,fr,_),M(A8,fr,null),e(fr,I3r),e(fr,Tc),e(Tc,q3r),e(Tc,_U),e(_U,N3r),e(Tc,j3r),e(Tc,bU),e(bU,D3r),e(Tc,G3r),e(fr,O3r),e(fr,y8),e(y8,V3r),e(y8,bFe),e(bFe,X3r),e(y8,z3r),e(fr,Q3r),e(fr,qt),M(L8,qt,null),e(qt,W3r),e(qt,vFe),e(vFe,H3r),e(qt,U3r),e(qt,Mc),e(Mc,J3r),e(Mc,FFe),e(FFe,Y3r),e(Mc,K3r),e(Mc,vU),e(vU,Z3r),e(Mc,ewr),e(qt,owr),M(nE,qt,null),e(fr,rwr),e(fr,Nr),M(x8,Nr,null),e(Nr,twr),e(Nr,TFe),e(TFe,awr),e(Nr,nwr),e(Nr,cn),e(cn,swr),e(cn,MFe),e(MFe,lwr),e(cn,iwr),e(cn,EFe),e(EFe,dwr),e(cn,cwr),e(cn,CFe),e(CFe,fwr),e(cn,mwr),e(Nr,gwr),e(Nr,ke),e(ke,sE),e(sE,wFe),e(wFe,hwr),e(sE,pwr),e(sE,FU),e(FU,uwr),e(sE,_wr),e(ke,bwr),e(ke,lE),e(lE,AFe),e(AFe,vwr),e(lE,Fwr),e(lE,TU),e(TU,Twr),e(lE,Mwr),e(ke,Ewr),e(ke,iE),e(iE,yFe),e(yFe,Cwr),e(iE,wwr),e(iE,MU),e(MU,Awr),e(iE,ywr),e(ke,Lwr),e(ke,dE),e(dE,LFe),e(LFe,xwr),e(dE,$wr),e(dE,EU),e(EU,kwr),e(dE,Swr),e(ke,Rwr),e(ke,cE),e(cE,xFe),e(xFe,Bwr),e(cE,Pwr),e(cE,CU),e(CU,Iwr),e(cE,qwr),e(ke,Nwr),e(ke,fE),e(fE,$Fe),e($Fe,jwr),e(fE,Dwr),e(fE,wU),e(wU,Gwr),e(fE,Owr),e(ke,Vwr),e(ke,mE),e(mE,kFe),e(kFe,Xwr),e(mE,zwr),e(mE,AU),e(AU,Qwr),e(mE,Wwr),e(ke,Hwr),e(ke,gE),e(gE,SFe),e(SFe,Uwr),e(gE,Jwr),e(gE,yU),e(yU,Ywr),e(gE,Kwr),e(ke,Zwr),e(ke,hE),e(hE,RFe),e(RFe,eAr),e(hE,oAr),e(hE,LU),e(LU,rAr),e(hE,tAr),e(Nr,aAr),M(pE,Nr,null),b(f,fIe,_),b(f,Ec,_),e(Ec,uE),e(uE,BFe),M($8,BFe,null),e(Ec,nAr),e(Ec,PFe),e(PFe,sAr),b(f,mIe,_),b(f,mr,_),M(k8,mr,null),e(mr,lAr),e(mr,Cc),e(Cc,iAr),e(Cc,xU),e(xU,dAr),e(Cc,cAr),e(Cc,$U),e($U,fAr),e(Cc,mAr),e(mr,gAr),e(mr,S8),e(S8,hAr),e(S8,IFe),e(IFe,pAr),e(S8,uAr),e(mr,_Ar),e(mr,Nt),M(R8,Nt,null),e(Nt,bAr),e(Nt,qFe),e(qFe,vAr),e(Nt,FAr),e(Nt,wc),e(wc,TAr),e(wc,NFe),e(NFe,MAr),e(wc,EAr),e(wc,kU),e(kU,CAr),e(wc,wAr),e(Nt,AAr),M(_E,Nt,null),e(mr,yAr),e(mr,jr),M(B8,jr,null),e(jr,LAr),e(jr,jFe),e(jFe,xAr),e(jr,$Ar),e(jr,fn),e(fn,kAr),e(fn,DFe),e(DFe,SAr),e(fn,RAr),e(fn,GFe),e(GFe,BAr),e(fn,PAr),e(fn,OFe),e(OFe,IAr),e(fn,qAr),e(jr,NAr),e(jr,Ee),e(Ee,bE),e(bE,VFe),e(VFe,jAr),e(bE,DAr),e(bE,SU),e(SU,GAr),e(bE,OAr),e(Ee,VAr),e(Ee,vE),e(vE,XFe),e(XFe,XAr),e(vE,zAr),e(vE,RU),e(RU,QAr),e(vE,WAr),e(Ee,HAr),e(Ee,FE),e(FE,zFe),e(zFe,UAr),e(FE,JAr),e(FE,BU),e(BU,YAr),e(FE,KAr),e(Ee,ZAr),e(Ee,TE),e(TE,QFe),e(QFe,e0r),e(TE,o0r),e(TE,PU),e(PU,r0r),e(TE,t0r),e(Ee,a0r),e(Ee,ME),e(ME,WFe),e(WFe,n0r),e(ME,s0r),e(ME,IU),e(IU,l0r),e(ME,i0r),e(Ee,d0r),e(Ee,EE),e(EE,HFe),e(HFe,c0r),e(EE,f0r),e(EE,qU),e(qU,m0r),e(EE,g0r),e(Ee,h0r),e(Ee,CE),e(CE,UFe),e(UFe,p0r),e(CE,u0r),e(CE,NU),e(NU,_0r),e(CE,b0r),e(Ee,v0r),e(Ee,wE),e(wE,JFe),e(JFe,F0r),e(wE,T0r),e(wE,jU),e(jU,M0r),e(wE,E0r),e(Ee,C0r),e(Ee,AE),e(AE,YFe),e(YFe,w0r),e(AE,A0r),e(AE,DU),e(DU,y0r),e(AE,L0r),e(Ee,x0r),e(Ee,yE),e(yE,KFe),e(KFe,$0r),e(yE,k0r),e(yE,GU),e(GU,S0r),e(yE,R0r),e(Ee,B0r),e(Ee,LE),e(LE,ZFe),e(ZFe,P0r),e(LE,I0r),e(LE,OU),e(OU,q0r),e(LE,N0r),e(Ee,j0r),e(Ee,xE),e(xE,e6e),e(e6e,D0r),e(xE,G0r),e(xE,VU),e(VU,O0r),e(xE,V0r),e(jr,X0r),M($E,jr,null),b(f,gIe,_),b(f,Ac,_),e(Ac,kE),e(kE,o6e),M(P8,o6e,null),e(Ac,z0r),e(Ac,r6e),e(r6e,Q0r),b(f,hIe,_),b(f,gr,_),M(I8,gr,null),e(gr,W0r),e(gr,yc),e(yc,H0r),e(yc,XU),e(XU,U0r),e(yc,J0r),e(yc,zU),e(zU,Y0r),e(yc,K0r),e(gr,Z0r),e(gr,q8),e(q8,eyr),e(q8,t6e),e(t6e,oyr),e(q8,ryr),e(gr,tyr),e(gr,jt),M(N8,jt,null),e(jt,ayr),e(jt,a6e),e(a6e,nyr),e(jt,syr),e(jt,Lc),e(Lc,lyr),e(Lc,n6e),e(n6e,iyr),e(Lc,dyr),e(Lc,QU),e(QU,cyr),e(Lc,fyr),e(jt,myr),M(SE,jt,null),e(gr,gyr),e(gr,Dr),M(j8,Dr,null),e(Dr,hyr),e(Dr,s6e),e(s6e,pyr),e(Dr,uyr),e(Dr,mn),e(mn,_yr),e(mn,l6e),e(l6e,byr),e(mn,vyr),e(mn,i6e),e(i6e,Fyr),e(mn,Tyr),e(mn,d6e),e(d6e,Myr),e(mn,Eyr),e(Dr,Cyr),e(Dr,Le),e(Le,RE),e(RE,c6e),e(c6e,wyr),e(RE,Ayr),e(RE,WU),e(WU,yyr),e(RE,Lyr),e(Le,xyr),e(Le,BE),e(BE,f6e),e(f6e,$yr),e(BE,kyr),e(BE,HU),e(HU,Syr),e(BE,Ryr),e(Le,Byr),e(Le,PE),e(PE,m6e),e(m6e,Pyr),e(PE,Iyr),e(PE,UU),e(UU,qyr),e(PE,Nyr),e(Le,jyr),e(Le,IE),e(IE,g6e),e(g6e,Dyr),e(IE,Gyr),e(IE,JU),e(JU,Oyr),e(IE,Vyr),e(Le,Xyr),e(Le,qE),e(qE,h6e),e(h6e,zyr),e(qE,Qyr),e(qE,YU),e(YU,Wyr),e(qE,Hyr),e(Le,Uyr),e(Le,NE),e(NE,p6e),e(p6e,Jyr),e(NE,Yyr),e(NE,KU),e(KU,Kyr),e(NE,Zyr),e(Le,eLr),e(Le,jE),e(jE,u6e),e(u6e,oLr),e(jE,rLr),e(jE,ZU),e(ZU,tLr),e(jE,aLr),e(Le,nLr),e(Le,DE),e(DE,_6e),e(_6e,sLr),e(DE,lLr),e(DE,eJ),e(eJ,iLr),e(DE,dLr),e(Le,cLr),e(Le,GE),e(GE,b6e),e(b6e,fLr),e(GE,mLr),e(GE,oJ),e(oJ,gLr),e(GE,hLr),e(Le,pLr),e(Le,OE),e(OE,v6e),e(v6e,uLr),e(OE,_Lr),e(OE,rJ),e(rJ,bLr),e(OE,vLr),e(Dr,FLr),M(VE,Dr,null),b(f,pIe,_),b(f,xc,_),e(xc,XE),e(XE,F6e),M(D8,F6e,null),e(xc,TLr),e(xc,T6e),e(T6e,MLr),b(f,uIe,_),b(f,hr,_),M(G8,hr,null),e(hr,ELr),e(hr,$c),e($c,CLr),e($c,tJ),e(tJ,wLr),e($c,ALr),e($c,aJ),e(aJ,yLr),e($c,LLr),e(hr,xLr),e(hr,O8),e(O8,$Lr),e(O8,M6e),e(M6e,kLr),e(O8,SLr),e(hr,RLr),e(hr,Dt),M(V8,Dt,null),e(Dt,BLr),e(Dt,E6e),e(E6e,PLr),e(Dt,ILr),e(Dt,kc),e(kc,qLr),e(kc,C6e),e(C6e,NLr),e(kc,jLr),e(kc,nJ),e(nJ,DLr),e(kc,GLr),e(Dt,OLr),M(zE,Dt,null),e(hr,VLr),e(hr,Gr),M(X8,Gr,null),e(Gr,XLr),e(Gr,w6e),e(w6e,zLr),e(Gr,QLr),e(Gr,gn),e(gn,WLr),e(gn,A6e),e(A6e,HLr),e(gn,ULr),e(gn,y6e),e(y6e,JLr),e(gn,YLr),e(gn,L6e),e(L6e,KLr),e(gn,ZLr),e(Gr,e8r),e(Gr,Se),e(Se,QE),e(QE,x6e),e(x6e,o8r),e(QE,r8r),e(QE,sJ),e(sJ,t8r),e(QE,a8r),e(Se,n8r),e(Se,WE),e(WE,$6e),e($6e,s8r),e(WE,l8r),e(WE,lJ),e(lJ,i8r),e(WE,d8r),e(Se,c8r),e(Se,HE),e(HE,k6e),e(k6e,f8r),e(HE,m8r),e(HE,iJ),e(iJ,g8r),e(HE,h8r),e(Se,p8r),e(Se,UE),e(UE,S6e),e(S6e,u8r),e(UE,_8r),e(UE,dJ),e(dJ,b8r),e(UE,v8r),e(Se,F8r),e(Se,JE),e(JE,R6e),e(R6e,T8r),e(JE,M8r),e(JE,cJ),e(cJ,E8r),e(JE,C8r),e(Se,w8r),e(Se,YE),e(YE,B6e),e(B6e,A8r),e(YE,y8r),e(YE,fJ),e(fJ,L8r),e(YE,x8r),e(Se,$8r),e(Se,KE),e(KE,P6e),e(P6e,k8r),e(KE,S8r),e(KE,mJ),e(mJ,R8r),e(KE,B8r),e(Se,P8r),e(Se,ZE),e(ZE,I6e),e(I6e,I8r),e(ZE,q8r),e(ZE,gJ),e(gJ,N8r),e(ZE,j8r),e(Se,D8r),e(Se,eC),e(eC,q6e),e(q6e,G8r),e(eC,O8r),e(eC,hJ),e(hJ,V8r),e(eC,X8r),e(Gr,z8r),M(oC,Gr,null),b(f,_Ie,_),b(f,Sc,_),e(Sc,rC),e(rC,N6e),M(z8,N6e,null),e(Sc,Q8r),e(Sc,j6e),e(j6e,W8r),b(f,bIe,_),b(f,pr,_),M(Q8,pr,null),e(pr,H8r),e(pr,Rc),e(Rc,U8r),e(Rc,pJ),e(pJ,J8r),e(Rc,Y8r),e(Rc,uJ),e(uJ,K8r),e(Rc,Z8r),e(pr,exr),e(pr,W8),e(W8,oxr),e(W8,D6e),e(D6e,rxr),e(W8,txr),e(pr,axr),e(pr,Gt),M(H8,Gt,null),e(Gt,nxr),e(Gt,G6e),e(G6e,sxr),e(Gt,lxr),e(Gt,Bc),e(Bc,ixr),e(Bc,O6e),e(O6e,dxr),e(Bc,cxr),e(Bc,_J),e(_J,fxr),e(Bc,mxr),e(Gt,gxr),M(tC,Gt,null),e(pr,hxr),e(pr,Or),M(U8,Or,null),e(Or,pxr),e(Or,V6e),e(V6e,uxr),e(Or,_xr),e(Or,hn),e(hn,bxr),e(hn,X6e),e(X6e,vxr),e(hn,Fxr),e(hn,z6e),e(z6e,Txr),e(hn,Mxr),e(hn,Q6e),e(Q6e,Exr),e(hn,Cxr),e(Or,wxr),e(Or,xe),e(xe,aC),e(aC,W6e),e(W6e,Axr),e(aC,yxr),e(aC,bJ),e(bJ,Lxr),e(aC,xxr),e(xe,$xr),e(xe,nC),e(nC,H6e),e(H6e,kxr),e(nC,Sxr),e(nC,vJ),e(vJ,Rxr),e(nC,Bxr),e(xe,Pxr),e(xe,sC),e(sC,U6e),e(U6e,Ixr),e(sC,qxr),e(sC,FJ),e(FJ,Nxr),e(sC,jxr),e(xe,Dxr),e(xe,lC),e(lC,J6e),e(J6e,Gxr),e(lC,Oxr),e(lC,TJ),e(TJ,Vxr),e(lC,Xxr),e(xe,zxr),e(xe,iC),e(iC,Y6e),e(Y6e,Qxr),e(iC,Wxr),e(iC,MJ),e(MJ,Hxr),e(iC,Uxr),e(xe,Jxr),e(xe,dC),e(dC,K6e),e(K6e,Yxr),e(dC,Kxr),e(dC,EJ),e(EJ,Zxr),e(dC,e9r),e(xe,o9r),e(xe,cC),e(cC,Z6e),e(Z6e,r9r),e(cC,t9r),e(cC,CJ),e(CJ,a9r),e(cC,n9r),e(xe,s9r),e(xe,fC),e(fC,eTe),e(eTe,l9r),e(fC,i9r),e(fC,wJ),e(wJ,d9r),e(fC,c9r),e(xe,f9r),e(xe,mC),e(mC,oTe),e(oTe,m9r),e(mC,g9r),e(mC,AJ),e(AJ,h9r),e(mC,p9r),e(xe,u9r),e(xe,gC),e(gC,rTe),e(rTe,_9r),e(gC,b9r),e(gC,yJ),e(yJ,v9r),e(gC,F9r),e(Or,T9r),M(hC,Or,null),b(f,vIe,_),b(f,Pc,_),e(Pc,pC),e(pC,tTe),M(J8,tTe,null),e(Pc,M9r),e(Pc,aTe),e(aTe,E9r),b(f,FIe,_),b(f,ur,_),M(Y8,ur,null),e(ur,C9r),e(ur,Ic),e(Ic,w9r),e(Ic,LJ),e(LJ,A9r),e(Ic,y9r),e(Ic,xJ),e(xJ,L9r),e(Ic,x9r),e(ur,$9r),e(ur,K8),e(K8,k9r),e(K8,nTe),e(nTe,S9r),e(K8,R9r),e(ur,B9r),e(ur,Ot),M(Z8,Ot,null),e(Ot,P9r),e(Ot,sTe),e(sTe,I9r),e(Ot,q9r),e(Ot,qc),e(qc,N9r),e(qc,lTe),e(lTe,j9r),e(qc,D9r),e(qc,$J),e($J,G9r),e(qc,O9r),e(Ot,V9r),M(uC,Ot,null),e(ur,X9r),e(ur,Vr),M(ex,Vr,null),e(Vr,z9r),e(Vr,iTe),e(iTe,Q9r),e(Vr,W9r),e(Vr,pn),e(pn,H9r),e(pn,dTe),e(dTe,U9r),e(pn,J9r),e(pn,cTe),e(cTe,Y9r),e(pn,K9r),e(pn,fTe),e(fTe,Z9r),e(pn,e$r),e(Vr,o$r),e(Vr,$e),e($e,_C),e(_C,mTe),e(mTe,r$r),e(_C,t$r),e(_C,kJ),e(kJ,a$r),e(_C,n$r),e($e,s$r),e($e,bC),e(bC,gTe),e(gTe,l$r),e(bC,i$r),e(bC,SJ),e(SJ,d$r),e(bC,c$r),e($e,f$r),e($e,vC),e(vC,hTe),e(hTe,m$r),e(vC,g$r),e(vC,RJ),e(RJ,h$r),e(vC,p$r),e($e,u$r),e($e,FC),e(FC,pTe),e(pTe,_$r),e(FC,b$r),e(FC,BJ),e(BJ,v$r),e(FC,F$r),e($e,T$r),e($e,TC),e(TC,uTe),e(uTe,M$r),e(TC,E$r),e(TC,PJ),e(PJ,C$r),e(TC,w$r),e($e,A$r),e($e,MC),e(MC,_Te),e(_Te,y$r),e(MC,L$r),e(MC,IJ),e(IJ,x$r),e(MC,$$r),e($e,k$r),e($e,EC),e(EC,bTe),e(bTe,S$r),e(EC,R$r),e(EC,qJ),e(qJ,B$r),e(EC,P$r),e($e,I$r),e($e,CC),e(CC,vTe),e(vTe,q$r),e(CC,N$r),e(CC,NJ),e(NJ,j$r),e(CC,D$r),e($e,G$r),e($e,wC),e(wC,FTe),e(FTe,O$r),e(wC,V$r),e(wC,jJ),e(jJ,X$r),e(wC,z$r),e($e,Q$r),e($e,AC),e(AC,TTe),e(TTe,W$r),e(AC,H$r),e(AC,DJ),e(DJ,U$r),e(AC,J$r),e(Vr,Y$r),M(yC,Vr,null),b(f,TIe,_),b(f,Nc,_),e(Nc,LC),e(LC,MTe),M(ox,MTe,null),e(Nc,K$r),e(Nc,ETe),e(ETe,Z$r),b(f,MIe,_),b(f,_r,_),M(rx,_r,null),e(_r,ekr),e(_r,jc),e(jc,okr),e(jc,GJ),e(GJ,rkr),e(jc,tkr),e(jc,OJ),e(OJ,akr),e(jc,nkr),e(_r,skr),e(_r,tx),e(tx,lkr),e(tx,CTe),e(CTe,ikr),e(tx,dkr),e(_r,ckr),e(_r,Vt),M(ax,Vt,null),e(Vt,fkr),e(Vt,wTe),e(wTe,mkr),e(Vt,gkr),e(Vt,Dc),e(Dc,hkr),e(Dc,ATe),e(ATe,pkr),e(Dc,ukr),e(Dc,VJ),e(VJ,_kr),e(Dc,bkr),e(Vt,vkr),M(xC,Vt,null),e(_r,Fkr),e(_r,Xr),M(nx,Xr,null),e(Xr,Tkr),e(Xr,yTe),e(yTe,Mkr),e(Xr,Ekr),e(Xr,un),e(un,Ckr),e(un,LTe),e(LTe,wkr),e(un,Akr),e(un,xTe),e(xTe,ykr),e(un,Lkr),e(un,$Te),e($Te,xkr),e(un,$kr),e(Xr,kkr),e(Xr,De),e(De,$C),e($C,kTe),e(kTe,Skr),e($C,Rkr),e($C,XJ),e(XJ,Bkr),e($C,Pkr),e(De,Ikr),e(De,kC),e(kC,STe),e(STe,qkr),e(kC,Nkr),e(kC,zJ),e(zJ,jkr),e(kC,Dkr),e(De,Gkr),e(De,SC),e(SC,RTe),e(RTe,Okr),e(SC,Vkr),e(SC,QJ),e(QJ,Xkr),e(SC,zkr),e(De,Qkr),e(De,RC),e(RC,BTe),e(BTe,Wkr),e(RC,Hkr),e(RC,WJ),e(WJ,Ukr),e(RC,Jkr),e(De,Ykr),e(De,BC),e(BC,PTe),e(PTe,Kkr),e(BC,Zkr),e(BC,HJ),e(HJ,eSr),e(BC,oSr),e(De,rSr),e(De,PC),e(PC,ITe),e(ITe,tSr),e(PC,aSr),e(PC,UJ),e(UJ,nSr),e(PC,sSr),e(De,lSr),e(De,IC),e(IC,qTe),e(qTe,iSr),e(IC,dSr),e(IC,JJ),e(JJ,cSr),e(IC,fSr),e(De,mSr),e(De,qC),e(qC,NTe),e(NTe,gSr),e(qC,hSr),e(qC,YJ),e(YJ,pSr),e(qC,uSr),e(Xr,_Sr),M(NC,Xr,null),b(f,EIe,_),b(f,Gc,_),e(Gc,jC),e(jC,jTe),M(sx,jTe,null),e(Gc,bSr),e(Gc,DTe),e(DTe,vSr),b(f,CIe,_),b(f,br,_),M(lx,br,null),e(br,FSr),e(br,Oc),e(Oc,TSr),e(Oc,KJ),e(KJ,MSr),e(Oc,ESr),e(Oc,ZJ),e(ZJ,CSr),e(Oc,wSr),e(br,ASr),e(br,ix),e(ix,ySr),e(ix,GTe),e(GTe,LSr),e(ix,xSr),e(br,$Sr),e(br,Xt),M(dx,Xt,null),e(Xt,kSr),e(Xt,OTe),e(OTe,SSr),e(Xt,RSr),e(Xt,Vc),e(Vc,BSr),e(Vc,VTe),e(VTe,PSr),e(Vc,ISr),e(Vc,eY),e(eY,qSr),e(Vc,NSr),e(Xt,jSr),M(DC,Xt,null),e(br,DSr),e(br,zr),M(cx,zr,null),e(zr,GSr),e(zr,XTe),e(XTe,OSr),e(zr,VSr),e(zr,_n),e(_n,XSr),e(_n,zTe),e(zTe,zSr),e(_n,QSr),e(_n,QTe),e(QTe,WSr),e(_n,HSr),e(_n,WTe),e(WTe,USr),e(_n,JSr),e(zr,YSr),e(zr,Ge),e(Ge,GC),e(GC,HTe),e(HTe,KSr),e(GC,ZSr),e(GC,oY),e(oY,eRr),e(GC,oRr),e(Ge,rRr),e(Ge,OC),e(OC,UTe),e(UTe,tRr),e(OC,aRr),e(OC,rY),e(rY,nRr),e(OC,sRr),e(Ge,lRr),e(Ge,VC),e(VC,JTe),e(JTe,iRr),e(VC,dRr),e(VC,tY),e(tY,cRr),e(VC,fRr),e(Ge,mRr),e(Ge,XC),e(XC,YTe),e(YTe,gRr),e(XC,hRr),e(XC,aY),e(aY,pRr),e(XC,uRr),e(Ge,_Rr),e(Ge,zC),e(zC,KTe),e(KTe,bRr),e(zC,vRr),e(zC,nY),e(nY,FRr),e(zC,TRr),e(Ge,MRr),e(Ge,QC),e(QC,ZTe),e(ZTe,ERr),e(QC,CRr),e(QC,sY),e(sY,wRr),e(QC,ARr),e(Ge,yRr),e(Ge,WC),e(WC,e7e),e(e7e,LRr),e(WC,xRr),e(WC,lY),e(lY,$Rr),e(WC,kRr),e(Ge,SRr),e(Ge,HC),e(HC,o7e),e(o7e,RRr),e(HC,BRr),e(HC,iY),e(iY,PRr),e(HC,IRr),e(zr,qRr),M(UC,zr,null),b(f,wIe,_),b(f,Xc,_),e(Xc,JC),e(JC,r7e),M(fx,r7e,null),e(Xc,NRr),e(Xc,t7e),e(t7e,jRr),b(f,AIe,_),b(f,vr,_),M(mx,vr,null),e(vr,DRr),e(vr,zc),e(zc,GRr),e(zc,dY),e(dY,ORr),e(zc,VRr),e(zc,cY),e(cY,XRr),e(zc,zRr),e(vr,QRr),e(vr,gx),e(gx,WRr),e(gx,a7e),e(a7e,HRr),e(gx,URr),e(vr,JRr),e(vr,zt),M(hx,zt,null),e(zt,YRr),e(zt,n7e),e(n7e,KRr),e(zt,ZRr),e(zt,Qc),e(Qc,eBr),e(Qc,s7e),e(s7e,oBr),e(Qc,rBr),e(Qc,fY),e(fY,tBr),e(Qc,aBr),e(zt,nBr),M(YC,zt,null),e(vr,sBr),e(vr,Qr),M(px,Qr,null),e(Qr,lBr),e(Qr,l7e),e(l7e,iBr),e(Qr,dBr),e(Qr,bn),e(bn,cBr),e(bn,i7e),e(i7e,fBr),e(bn,mBr),e(bn,d7e),e(d7e,gBr),e(bn,hBr),e(bn,c7e),e(c7e,pBr),e(bn,uBr),e(Qr,_Br),e(Qr,f7e),e(f7e,KC),e(KC,m7e),e(m7e,bBr),e(KC,vBr),e(KC,mY),e(mY,FBr),e(KC,TBr),e(Qr,MBr),M(ZC,Qr,null),b(f,yIe,_),b(f,Wc,_),e(Wc,e3),e(e3,g7e),M(ux,g7e,null),e(Wc,EBr),e(Wc,h7e),e(h7e,CBr),b(f,LIe,_),b(f,Fr,_),M(_x,Fr,null),e(Fr,wBr),e(Fr,Hc),e(Hc,ABr),e(Hc,gY),e(gY,yBr),e(Hc,LBr),e(Hc,hY),e(hY,xBr),e(Hc,$Br),e(Fr,kBr),e(Fr,bx),e(bx,SBr),e(bx,p7e),e(p7e,RBr),e(bx,BBr),e(Fr,PBr),e(Fr,Qt),M(vx,Qt,null),e(Qt,IBr),e(Qt,u7e),e(u7e,qBr),e(Qt,NBr),e(Qt,Uc),e(Uc,jBr),e(Uc,_7e),e(_7e,DBr),e(Uc,GBr),e(Uc,pY),e(pY,OBr),e(Uc,VBr),e(Qt,XBr),M(o3,Qt,null),e(Fr,zBr),e(Fr,Wr),M(Fx,Wr,null),e(Wr,QBr),e(Wr,b7e),e(b7e,WBr),e(Wr,HBr),e(Wr,vn),e(vn,UBr),e(vn,v7e),e(v7e,JBr),e(vn,YBr),e(vn,F7e),e(F7e,KBr),e(vn,ZBr),e(vn,T7e),e(T7e,ePr),e(vn,oPr),e(Wr,rPr),e(Wr,Tx),e(Tx,r3),e(r3,M7e),e(M7e,tPr),e(r3,aPr),e(r3,uY),e(uY,nPr),e(r3,sPr),e(Tx,lPr),e(Tx,t3),e(t3,E7e),e(E7e,iPr),e(t3,dPr),e(t3,_Y),e(_Y,cPr),e(t3,fPr),e(Wr,mPr),M(a3,Wr,null),b(f,xIe,_),b(f,Jc,_),e(Jc,n3),e(n3,C7e),M(Mx,C7e,null),e(Jc,gPr),e(Jc,w7e),e(w7e,hPr),b(f,$Ie,_),b(f,Tr,_),M(Ex,Tr,null),e(Tr,pPr),e(Tr,Yc),e(Yc,uPr),e(Yc,bY),e(bY,_Pr),e(Yc,bPr),e(Yc,vY),e(vY,vPr),e(Yc,FPr),e(Tr,TPr),e(Tr,Cx),e(Cx,MPr),e(Cx,A7e),e(A7e,EPr),e(Cx,CPr),e(Tr,wPr),e(Tr,Wt),M(wx,Wt,null),e(Wt,APr),e(Wt,y7e),e(y7e,yPr),e(Wt,LPr),e(Wt,Kc),e(Kc,xPr),e(Kc,L7e),e(L7e,$Pr),e(Kc,kPr),e(Kc,FY),e(FY,SPr),e(Kc,RPr),e(Wt,BPr),M(s3,Wt,null),e(Tr,PPr),e(Tr,Hr),M(Ax,Hr,null),e(Hr,IPr),e(Hr,x7e),e(x7e,qPr),e(Hr,NPr),e(Hr,Fn),e(Fn,jPr),e(Fn,$7e),e($7e,DPr),e(Fn,GPr),e(Fn,k7e),e(k7e,OPr),e(Fn,VPr),e(Fn,S7e),e(S7e,XPr),e(Fn,zPr),e(Hr,QPr),e(Hr,R7e),e(R7e,l3),e(l3,B7e),e(B7e,WPr),e(l3,HPr),e(l3,TY),e(TY,UPr),e(l3,JPr),e(Hr,YPr),M(i3,Hr,null),kIe=!0},p(f,[_]){const yx={};_&2&&(yx.$$scope={dirty:_,ctx:f}),lf.$set(yx);const P7e={};_&2&&(P7e.$$scope={dirty:_,ctx:f}),sg.$set(P7e);const I7e={};_&2&&(I7e.$$scope={dirty:_,ctx:f}),Ng.$set(I7e);const q7e={};_&2&&(q7e.$$scope={dirty:_,ctx:f}),mh.$set(q7e);const Lx={};_&2&&(Lx.$$scope={dirty:_,ctx:f}),gh.$set(Lx);const N7e={};_&2&&(N7e.$$scope={dirty:_,ctx:f}),$h.$set(N7e);const Tn={};_&2&&(Tn.$$scope={dirty:_,ctx:f}),kh.$set(Tn);const j7e={};_&2&&(j7e.$$scope={dirty:_,ctx:f}),Bh.$set(j7e);const D7e={};_&2&&(D7e.$$scope={dirty:_,ctx:f}),Eu.$set(D7e);const G7e={};_&2&&(G7e.$$scope={dirty:_,ctx:f}),wu.$set(G7e);const xx={};_&2&&(xx.$$scope={dirty:_,ctx:f}),m_.$set(xx);const O7e={};_&2&&(O7e.$$scope={dirty:_,ctx:f}),h_.$set(O7e);const $x={};_&2&&($x.$$scope={dirty:_,ctx:f}),Y_.$set($x);const V7e={};_&2&&(V7e.$$scope={dirty:_,ctx:f}),Z_.$set(V7e);const kx={};_&2&&(kx.$$scope={dirty:_,ctx:f}),I5.$set(kx);const X7e={};_&2&&(X7e.$$scope={dirty:_,ctx:f}),N5.$set(X7e);const z7e={};_&2&&(z7e.$$scope={dirty:_,ctx:f}),t1.$set(z7e);const Q7e={};_&2&&(Q7e.$$scope={dirty:_,ctx:f}),n1.$set(Q7e);const Zc={};_&2&&(Zc.$$scope={dirty:_,ctx:f}),eb.$set(Zc);const W7e={};_&2&&(W7e.$$scope={dirty:_,ctx:f}),rb.$set(W7e);const H7e={};_&2&&(H7e.$$scope={dirty:_,ctx:f}),Sb.$set(H7e);const U7e={};_&2&&(U7e.$$scope={dirty:_,ctx:f}),Bb.$set(U7e);const Sx={};_&2&&(Sx.$$scope={dirty:_,ctx:f}),Gb.$set(Sx);const J7e={};_&2&&(J7e.$$scope={dirty:_,ctx:f}),Vb.$set(J7e);const Y7e={};_&2&&(Y7e.$$scope={dirty:_,ctx:f}),C2.$set(Y7e);const K7e={};_&2&&(K7e.$$scope={dirty:_,ctx:f}),A2.$set(K7e);const Jr={};_&2&&(Jr.$$scope={dirty:_,ctx:f}),gv.$set(Jr);const Rx={};_&2&&(Rx.$$scope={dirty:_,ctx:f}),pv.$set(Rx);const Z7e={};_&2&&(Z7e.$$scope={dirty:_,ctx:f}),bv.$set(Z7e);const Bx={};_&2&&(Bx.$$scope={dirty:_,ctx:f}),Fv.$set(Bx);const eMe={};_&2&&(eMe.$$scope={dirty:_,ctx:f}),Bv.$set(eMe);const Yr={};_&2&&(Yr.$$scope={dirty:_,ctx:f}),Iv.$set(Yr);const oMe={};_&2&&(oMe.$$scope={dirty:_,ctx:f}),jv.$set(oMe);const ef={};_&2&&(ef.$$scope={dirty:_,ctx:f}),Gv.$set(ef);const rMe={};_&2&&(rMe.$$scope={dirty:_,ctx:f}),Yv.$set(rMe);const tMe={};_&2&&(tMe.$$scope={dirty:_,ctx:f}),Zv.$set(tMe);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),nF.$set(y);const d3={};_&2&&(d3.$$scope={dirty:_,ctx:f}),lF.$set(d3);const aMe={};_&2&&(aMe.$$scope={dirty:_,ctx:f}),_F.$set(aMe);const nMe={};_&2&&(nMe.$$scope={dirty:_,ctx:f}),vF.$set(nMe);const c3={};_&2&&(c3.$$scope={dirty:_,ctx:f}),EF.$set(c3);const sMe={};_&2&&(sMe.$$scope={dirty:_,ctx:f}),wF.$set(sMe);const lMe={};_&2&&(lMe.$$scope={dirty:_,ctx:f}),kF.$set(lMe);const f3={};_&2&&(f3.$$scope={dirty:_,ctx:f}),RF.$set(f3);const iMe={};_&2&&(iMe.$$scope={dirty:_,ctx:f}),NF.$set(iMe);const dMe={};_&2&&(dMe.$$scope={dirty:_,ctx:f}),DF.$set(dMe);const m3={};_&2&&(m3.$$scope={dirty:_,ctx:f}),XF.$set(m3);const cMe={};_&2&&(cMe.$$scope={dirty:_,ctx:f}),QF.$set(cMe);const fMe={};_&2&&(fMe.$$scope={dirty:_,ctx:f}),UF.$set(fMe);const g3={};_&2&&(g3.$$scope={dirty:_,ctx:f}),YF.$set(g3);const mMe={};_&2&&(mMe.$$scope={dirty:_,ctx:f}),t6.$set(mMe);const gMe={};_&2&&(gMe.$$scope={dirty:_,ctx:f}),n6.$set(gMe);const h3={};_&2&&(h3.$$scope={dirty:_,ctx:f}),i6.$set(h3);const hMe={};_&2&&(hMe.$$scope={dirty:_,ctx:f}),c6.$set(hMe);const pMe={};_&2&&(pMe.$$scope={dirty:_,ctx:f}),oT.$set(pMe);const p3={};_&2&&(p3.$$scope={dirty:_,ctx:f}),tT.$set(p3);const uMe={};_&2&&(uMe.$$scope={dirty:_,ctx:f}),yT.$set(uMe);const _Me={};_&2&&(_Me.$$scope={dirty:_,ctx:f}),xT.$set(_Me);const u3={};_&2&&(u3.$$scope={dirty:_,ctx:f}),OT.$set(u3);const bMe={};_&2&&(bMe.$$scope={dirty:_,ctx:f}),XT.$set(bMe);const vMe={};_&2&&(vMe.$$scope={dirty:_,ctx:f}),HT.$set(vMe);const _3={};_&2&&(_3.$$scope={dirty:_,ctx:f}),JT.$set(_3);const FMe={};_&2&&(FMe.$$scope={dirty:_,ctx:f}),_7.$set(FMe);const TMe={};_&2&&(TMe.$$scope={dirty:_,ctx:f}),v7.$set(TMe);const b3={};_&2&&(b3.$$scope={dirty:_,ctx:f}),$7.$set(b3);const MMe={};_&2&&(MMe.$$scope={dirty:_,ctx:f}),S7.$set(MMe);const EMe={};_&2&&(EMe.$$scope={dirty:_,ctx:f}),nM.$set(EMe);const v3={};_&2&&(v3.$$scope={dirty:_,ctx:f}),lM.$set(v3);const CMe={};_&2&&(CMe.$$scope={dirty:_,ctx:f}),wM.$set(CMe);const wMe={};_&2&&(wMe.$$scope={dirty:_,ctx:f}),yM.$set(wMe);const F3={};_&2&&(F3.$$scope={dirty:_,ctx:f}),xM.$set(F3);const AMe={};_&2&&(AMe.$$scope={dirty:_,ctx:f}),kM.$set(AMe);const yMe={};_&2&&(yMe.$$scope={dirty:_,ctx:f}),KM.$set(yMe);const T3={};_&2&&(T3.$$scope={dirty:_,ctx:f}),e4.$set(T3);const LMe={};_&2&&(LMe.$$scope={dirty:_,ctx:f}),T4.$set(LMe);const xMe={};_&2&&(xMe.$$scope={dirty:_,ctx:f}),E4.$set(xMe);const M3={};_&2&&(M3.$$scope={dirty:_,ctx:f}),w4.$set(M3);const $Me={};_&2&&($Me.$$scope={dirty:_,ctx:f}),y4.$set($Me);const kMe={};_&2&&(kMe.$$scope={dirty:_,ctx:f}),x4.$set(kMe);const E3={};_&2&&(E3.$$scope={dirty:_,ctx:f}),k4.$set(E3);const SMe={};_&2&&(SMe.$$scope={dirty:_,ctx:f}),tE.$set(SMe);const RMe={};_&2&&(RMe.$$scope={dirty:_,ctx:f}),nE.$set(RMe);const C3={};_&2&&(C3.$$scope={dirty:_,ctx:f}),pE.$set(C3);const BMe={};_&2&&(BMe.$$scope={dirty:_,ctx:f}),_E.$set(BMe);const PMe={};_&2&&(PMe.$$scope={dirty:_,ctx:f}),$E.$set(PMe);const w3={};_&2&&(w3.$$scope={dirty:_,ctx:f}),SE.$set(w3);const IMe={};_&2&&(IMe.$$scope={dirty:_,ctx:f}),VE.$set(IMe);const qMe={};_&2&&(qMe.$$scope={dirty:_,ctx:f}),zE.$set(qMe);const A3={};_&2&&(A3.$$scope={dirty:_,ctx:f}),oC.$set(A3);const NMe={};_&2&&(NMe.$$scope={dirty:_,ctx:f}),tC.$set(NMe);const jMe={};_&2&&(jMe.$$scope={dirty:_,ctx:f}),hC.$set(jMe);const y3={};_&2&&(y3.$$scope={dirty:_,ctx:f}),uC.$set(y3);const DMe={};_&2&&(DMe.$$scope={dirty:_,ctx:f}),yC.$set(DMe);const GMe={};_&2&&(GMe.$$scope={dirty:_,ctx:f}),xC.$set(GMe);const L3={};_&2&&(L3.$$scope={dirty:_,ctx:f}),NC.$set(L3);const OMe={};_&2&&(OMe.$$scope={dirty:_,ctx:f}),DC.$set(OMe);const VMe={};_&2&&(VMe.$$scope={dirty:_,ctx:f}),UC.$set(VMe);const x3={};_&2&&(x3.$$scope={dirty:_,ctx:f}),YC.$set(x3);const XMe={};_&2&&(XMe.$$scope={dirty:_,ctx:f}),ZC.$set(XMe);const zMe={};_&2&&(zMe.$$scope={dirty:_,ctx:f}),o3.$set(zMe);const $3={};_&2&&($3.$$scope={dirty:_,ctx:f}),a3.$set($3);const QMe={};_&2&&(QMe.$$scope={dirty:_,ctx:f}),s3.$set(QMe);const WMe={};_&2&&(WMe.$$scope={dirty:_,ctx:f}),i3.$set(WMe)},i(f){kIe||(E(d.$$.fragment,f),E(va.$$.fragment,f),E(LA.$$.fragment,f),E(xA.$$.fragment,f),E(lf.$$.fragment,f),E($A.$$.fragment,f),E(kA.$$.fragment,f),E(BA.$$.fragment,f),E(sg.$$.fragment,f),E(PA.$$.fragment,f),E(IA.$$.fragment,f),E(qA.$$.fragment,f),E(DA.$$.fragment,f),E(Ng.$$.fragment,f),E(GA.$$.fragment,f),E(OA.$$.fragment,f),E(VA.$$.fragment,f),E(QA.$$.fragment,f),E(mh.$$.fragment,f),E(gh.$$.fragment,f),E(WA.$$.fragment,f),E(HA.$$.fragment,f),E(UA.$$.fragment,f),E(KA.$$.fragment,f),E($h.$$.fragment,f),E(kh.$$.fragment,f),E(ZA.$$.fragment,f),E(e0.$$.fragment,f),E(o0.$$.fragment,f),E(t0.$$.fragment,f),E(Bh.$$.fragment,f),E(a0.$$.fragment,f),E(Eu.$$.fragment,f),E(n0.$$.fragment,f),E(s0.$$.fragment,f),E(i0.$$.fragment,f),E(wu.$$.fragment,f),E(d0.$$.fragment,f),E(m_.$$.fragment,f),E(c0.$$.fragment,f),E(f0.$$.fragment,f),E(g0.$$.fragment,f),E(h_.$$.fragment,f),E(h0.$$.fragment,f),E(Y_.$$.fragment,f),E(p0.$$.fragment,f),E(u0.$$.fragment,f),E(b0.$$.fragment,f),E(Z_.$$.fragment,f),E(v0.$$.fragment,f),E(I5.$$.fragment,f),E(F0.$$.fragment,f),E(T0.$$.fragment,f),E(E0.$$.fragment,f),E(N5.$$.fragment,f),E(C0.$$.fragment,f),E(t1.$$.fragment,f),E(w0.$$.fragment,f),E(A0.$$.fragment,f),E(L0.$$.fragment,f),E(n1.$$.fragment,f),E(x0.$$.fragment,f),E(eb.$$.fragment,f),E($0.$$.fragment,f),E(k0.$$.fragment,f),E(R0.$$.fragment,f),E(rb.$$.fragment,f),E(B0.$$.fragment,f),E(Sb.$$.fragment,f),E(P0.$$.fragment,f),E(I0.$$.fragment,f),E(N0.$$.fragment,f),E(Bb.$$.fragment,f),E(j0.$$.fragment,f),E(Gb.$$.fragment,f),E(D0.$$.fragment,f),E(G0.$$.fragment,f),E(V0.$$.fragment,f),E(Vb.$$.fragment,f),E(X0.$$.fragment,f),E(C2.$$.fragment,f),E(z0.$$.fragment,f),E(Q0.$$.fragment,f),E(H0.$$.fragment,f),E(A2.$$.fragment,f),E(U0.$$.fragment,f),E(gv.$$.fragment,f),E(J0.$$.fragment,f),E(Y0.$$.fragment,f),E(Z0.$$.fragment,f),E(pv.$$.fragment,f),E(ey.$$.fragment,f),E(bv.$$.fragment,f),E(oy.$$.fragment,f),E(ry.$$.fragment,f),E(ay.$$.fragment,f),E(Fv.$$.fragment,f),E(ny.$$.fragment,f),E(Bv.$$.fragment,f),E(sy.$$.fragment,f),E(ly.$$.fragment,f),E(dy.$$.fragment,f),E(Iv.$$.fragment,f),E(cy.$$.fragment,f),E(jv.$$.fragment,f),E(fy.$$.fragment,f),E(my.$$.fragment,f),E(hy.$$.fragment,f),E(Gv.$$.fragment,f),E(py.$$.fragment,f),E(Yv.$$.fragment,f),E(uy.$$.fragment,f),E(_y.$$.fragment,f),E(vy.$$.fragment,f),E(Zv.$$.fragment,f),E(Fy.$$.fragment,f),E(nF.$$.fragment,f),E(Ty.$$.fragment,f),E(My.$$.fragment,f),E(Cy.$$.fragment,f),E(lF.$$.fragment,f),E(wy.$$.fragment,f),E(_F.$$.fragment,f),E(Ay.$$.fragment,f),E(yy.$$.fragment,f),E(xy.$$.fragment,f),E(vF.$$.fragment,f),E($y.$$.fragment,f),E(EF.$$.fragment,f),E(Sy.$$.fragment,f),E(Ry.$$.fragment,f),E(Py.$$.fragment,f),E(wF.$$.fragment,f),E(Iy.$$.fragment,f),E(kF.$$.fragment,f),E(qy.$$.fragment,f),E(Ny.$$.fragment,f),E(Dy.$$.fragment,f),E(RF.$$.fragment,f),E(Gy.$$.fragment,f),E(NF.$$.fragment,f),E(Oy.$$.fragment,f),E(Vy.$$.fragment,f),E(zy.$$.fragment,f),E(DF.$$.fragment,f),E(Qy.$$.fragment,f),E(XF.$$.fragment,f),E(Hy.$$.fragment,f),E(Uy.$$.fragment,f),E(Yy.$$.fragment,f),E(QF.$$.fragment,f),E(Ky.$$.fragment,f),E(UF.$$.fragment,f),E(Zy.$$.fragment,f),E(eL.$$.fragment,f),E(rL.$$.fragment,f),E(YF.$$.fragment,f),E(tL.$$.fragment,f),E(t6.$$.fragment,f),E(aL.$$.fragment,f),E(nL.$$.fragment,f),E(lL.$$.fragment,f),E(n6.$$.fragment,f),E(iL.$$.fragment,f),E(i6.$$.fragment,f),E(dL.$$.fragment,f),E(cL.$$.fragment,f),E(mL.$$.fragment,f),E(c6.$$.fragment,f),E(gL.$$.fragment,f),E(oT.$$.fragment,f),E(hL.$$.fragment,f),E(pL.$$.fragment,f),E(_L.$$.fragment,f),E(tT.$$.fragment,f),E(bL.$$.fragment,f),E(yT.$$.fragment,f),E(vL.$$.fragment,f),E(FL.$$.fragment,f),E(ML.$$.fragment,f),E(xT.$$.fragment,f),E(EL.$$.fragment,f),E(OT.$$.fragment,f),E(CL.$$.fragment,f),E(wL.$$.fragment,f),E(yL.$$.fragment,f),E(XT.$$.fragment,f),E(LL.$$.fragment,f),E(HT.$$.fragment,f),E(xL.$$.fragment,f),E($L.$$.fragment,f),E(SL.$$.fragment,f),E(JT.$$.fragment,f),E(RL.$$.fragment,f),E(_7.$$.fragment,f),E(BL.$$.fragment,f),E(PL.$$.fragment,f),E(qL.$$.fragment,f),E(v7.$$.fragment,f),E(NL.$$.fragment,f),E($7.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(OL.$$.fragment,f),E(S7.$$.fragment,f),E(VL.$$.fragment,f),E(nM.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(WL.$$.fragment,f),E(lM.$$.fragment,f),E(HL.$$.fragment,f),E(wM.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(yM.$$.fragment,f),E(ZL.$$.fragment,f),E(xM.$$.fragment,f),E(e8.$$.fragment,f),E(o8.$$.fragment,f),E(t8.$$.fragment,f),E(kM.$$.fragment,f),E(a8.$$.fragment,f),E(KM.$$.fragment,f),E(n8.$$.fragment,f),E(s8.$$.fragment,f),E(i8.$$.fragment,f),E(e4.$$.fragment,f),E(d8.$$.fragment,f),E(T4.$$.fragment,f),E(c8.$$.fragment,f),E(f8.$$.fragment,f),E(g8.$$.fragment,f),E(E4.$$.fragment,f),E(h8.$$.fragment,f),E(w4.$$.fragment,f),E(p8.$$.fragment,f),E(u8.$$.fragment,f),E(b8.$$.fragment,f),E(y4.$$.fragment,f),E(v8.$$.fragment,f),E(x4.$$.fragment,f),E(F8.$$.fragment,f),E(T8.$$.fragment,f),E(E8.$$.fragment,f),E(k4.$$.fragment,f),E(C8.$$.fragment,f),E(tE.$$.fragment,f),E(w8.$$.fragment,f),E(A8.$$.fragment,f),E(L8.$$.fragment,f),E(nE.$$.fragment,f),E(x8.$$.fragment,f),E(pE.$$.fragment,f),E($8.$$.fragment,f),E(k8.$$.fragment,f),E(R8.$$.fragment,f),E(_E.$$.fragment,f),E(B8.$$.fragment,f),E($E.$$.fragment,f),E(P8.$$.fragment,f),E(I8.$$.fragment,f),E(N8.$$.fragment,f),E(SE.$$.fragment,f),E(j8.$$.fragment,f),E(VE.$$.fragment,f),E(D8.$$.fragment,f),E(G8.$$.fragment,f),E(V8.$$.fragment,f),E(zE.$$.fragment,f),E(X8.$$.fragment,f),E(oC.$$.fragment,f),E(z8.$$.fragment,f),E(Q8.$$.fragment,f),E(H8.$$.fragment,f),E(tC.$$.fragment,f),E(U8.$$.fragment,f),E(hC.$$.fragment,f),E(J8.$$.fragment,f),E(Y8.$$.fragment,f),E(Z8.$$.fragment,f),E(uC.$$.fragment,f),E(ex.$$.fragment,f),E(yC.$$.fragment,f),E(ox.$$.fragment,f),E(rx.$$.fragment,f),E(ax.$$.fragment,f),E(xC.$$.fragment,f),E(nx.$$.fragment,f),E(NC.$$.fragment,f),E(sx.$$.fragment,f),E(lx.$$.fragment,f),E(dx.$$.fragment,f),E(DC.$$.fragment,f),E(cx.$$.fragment,f),E(UC.$$.fragment,f),E(fx.$$.fragment,f),E(mx.$$.fragment,f),E(hx.$$.fragment,f),E(YC.$$.fragment,f),E(px.$$.fragment,f),E(ZC.$$.fragment,f),E(ux.$$.fragment,f),E(_x.$$.fragment,f),E(vx.$$.fragment,f),E(o3.$$.fragment,f),E(Fx.$$.fragment,f),E(a3.$$.fragment,f),E(Mx.$$.fragment,f),E(Ex.$$.fragment,f),E(wx.$$.fragment,f),E(s3.$$.fragment,f),E(Ax.$$.fragment,f),E(i3.$$.fragment,f),kIe=!0)},o(f){C(d.$$.fragment,f),C(va.$$.fragment,f),C(LA.$$.fragment,f),C(xA.$$.fragment,f),C(lf.$$.fragment,f),C($A.$$.fragment,f),C(kA.$$.fragment,f),C(BA.$$.fragment,f),C(sg.$$.fragment,f),C(PA.$$.fragment,f),C(IA.$$.fragment,f),C(qA.$$.fragment,f),C(DA.$$.fragment,f),C(Ng.$$.fragment,f),C(GA.$$.fragment,f),C(OA.$$.fragment,f),C(VA.$$.fragment,f),C(QA.$$.fragment,f),C(mh.$$.fragment,f),C(gh.$$.fragment,f),C(WA.$$.fragment,f),C(HA.$$.fragment,f),C(UA.$$.fragment,f),C(KA.$$.fragment,f),C($h.$$.fragment,f),C(kh.$$.fragment,f),C(ZA.$$.fragment,f),C(e0.$$.fragment,f),C(o0.$$.fragment,f),C(t0.$$.fragment,f),C(Bh.$$.fragment,f),C(a0.$$.fragment,f),C(Eu.$$.fragment,f),C(n0.$$.fragment,f),C(s0.$$.fragment,f),C(i0.$$.fragment,f),C(wu.$$.fragment,f),C(d0.$$.fragment,f),C(m_.$$.fragment,f),C(c0.$$.fragment,f),C(f0.$$.fragment,f),C(g0.$$.fragment,f),C(h_.$$.fragment,f),C(h0.$$.fragment,f),C(Y_.$$.fragment,f),C(p0.$$.fragment,f),C(u0.$$.fragment,f),C(b0.$$.fragment,f),C(Z_.$$.fragment,f),C(v0.$$.fragment,f),C(I5.$$.fragment,f),C(F0.$$.fragment,f),C(T0.$$.fragment,f),C(E0.$$.fragment,f),C(N5.$$.fragment,f),C(C0.$$.fragment,f),C(t1.$$.fragment,f),C(w0.$$.fragment,f),C(A0.$$.fragment,f),C(L0.$$.fragment,f),C(n1.$$.fragment,f),C(x0.$$.fragment,f),C(eb.$$.fragment,f),C($0.$$.fragment,f),C(k0.$$.fragment,f),C(R0.$$.fragment,f),C(rb.$$.fragment,f),C(B0.$$.fragment,f),C(Sb.$$.fragment,f),C(P0.$$.fragment,f),C(I0.$$.fragment,f),C(N0.$$.fragment,f),C(Bb.$$.fragment,f),C(j0.$$.fragment,f),C(Gb.$$.fragment,f),C(D0.$$.fragment,f),C(G0.$$.fragment,f),C(V0.$$.fragment,f),C(Vb.$$.fragment,f),C(X0.$$.fragment,f),C(C2.$$.fragment,f),C(z0.$$.fragment,f),C(Q0.$$.fragment,f),C(H0.$$.fragment,f),C(A2.$$.fragment,f),C(U0.$$.fragment,f),C(gv.$$.fragment,f),C(J0.$$.fragment,f),C(Y0.$$.fragment,f),C(Z0.$$.fragment,f),C(pv.$$.fragment,f),C(ey.$$.fragment,f),C(bv.$$.fragment,f),C(oy.$$.fragment,f),C(ry.$$.fragment,f),C(ay.$$.fragment,f),C(Fv.$$.fragment,f),C(ny.$$.fragment,f),C(Bv.$$.fragment,f),C(sy.$$.fragment,f),C(ly.$$.fragment,f),C(dy.$$.fragment,f),C(Iv.$$.fragment,f),C(cy.$$.fragment,f),C(jv.$$.fragment,f),C(fy.$$.fragment,f),C(my.$$.fragment,f),C(hy.$$.fragment,f),C(Gv.$$.fragment,f),C(py.$$.fragment,f),C(Yv.$$.fragment,f),C(uy.$$.fragment,f),C(_y.$$.fragment,f),C(vy.$$.fragment,f),C(Zv.$$.fragment,f),C(Fy.$$.fragment,f),C(nF.$$.fragment,f),C(Ty.$$.fragment,f),C(My.$$.fragment,f),C(Cy.$$.fragment,f),C(lF.$$.fragment,f),C(wy.$$.fragment,f),C(_F.$$.fragment,f),C(Ay.$$.fragment,f),C(yy.$$.fragment,f),C(xy.$$.fragment,f),C(vF.$$.fragment,f),C($y.$$.fragment,f),C(EF.$$.fragment,f),C(Sy.$$.fragment,f),C(Ry.$$.fragment,f),C(Py.$$.fragment,f),C(wF.$$.fragment,f),C(Iy.$$.fragment,f),C(kF.$$.fragment,f),C(qy.$$.fragment,f),C(Ny.$$.fragment,f),C(Dy.$$.fragment,f),C(RF.$$.fragment,f),C(Gy.$$.fragment,f),C(NF.$$.fragment,f),C(Oy.$$.fragment,f),C(Vy.$$.fragment,f),C(zy.$$.fragment,f),C(DF.$$.fragment,f),C(Qy.$$.fragment,f),C(XF.$$.fragment,f),C(Hy.$$.fragment,f),C(Uy.$$.fragment,f),C(Yy.$$.fragment,f),C(QF.$$.fragment,f),C(Ky.$$.fragment,f),C(UF.$$.fragment,f),C(Zy.$$.fragment,f),C(eL.$$.fragment,f),C(rL.$$.fragment,f),C(YF.$$.fragment,f),C(tL.$$.fragment,f),C(t6.$$.fragment,f),C(aL.$$.fragment,f),C(nL.$$.fragment,f),C(lL.$$.fragment,f),C(n6.$$.fragment,f),C(iL.$$.fragment,f),C(i6.$$.fragment,f),C(dL.$$.fragment,f),C(cL.$$.fragment,f),C(mL.$$.fragment,f),C(c6.$$.fragment,f),C(gL.$$.fragment,f),C(oT.$$.fragment,f),C(hL.$$.fragment,f),C(pL.$$.fragment,f),C(_L.$$.fragment,f),C(tT.$$.fragment,f),C(bL.$$.fragment,f),C(yT.$$.fragment,f),C(vL.$$.fragment,f),C(FL.$$.fragment,f),C(ML.$$.fragment,f),C(xT.$$.fragment,f),C(EL.$$.fragment,f),C(OT.$$.fragment,f),C(CL.$$.fragment,f),C(wL.$$.fragment,f),C(yL.$$.fragment,f),C(XT.$$.fragment,f),C(LL.$$.fragment,f),C(HT.$$.fragment,f),C(xL.$$.fragment,f),C($L.$$.fragment,f),C(SL.$$.fragment,f),C(JT.$$.fragment,f),C(RL.$$.fragment,f),C(_7.$$.fragment,f),C(BL.$$.fragment,f),C(PL.$$.fragment,f),C(qL.$$.fragment,f),C(v7.$$.fragment,f),C(NL.$$.fragment,f),C($7.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(OL.$$.fragment,f),C(S7.$$.fragment,f),C(VL.$$.fragment,f),C(nM.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(WL.$$.fragment,f),C(lM.$$.fragment,f),C(HL.$$.fragment,f),C(wM.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(yM.$$.fragment,f),C(ZL.$$.fragment,f),C(xM.$$.fragment,f),C(e8.$$.fragment,f),C(o8.$$.fragment,f),C(t8.$$.fragment,f),C(kM.$$.fragment,f),C(a8.$$.fragment,f),C(KM.$$.fragment,f),C(n8.$$.fragment,f),C(s8.$$.fragment,f),C(i8.$$.fragment,f),C(e4.$$.fragment,f),C(d8.$$.fragment,f),C(T4.$$.fragment,f),C(c8.$$.fragment,f),C(f8.$$.fragment,f),C(g8.$$.fragment,f),C(E4.$$.fragment,f),C(h8.$$.fragment,f),C(w4.$$.fragment,f),C(p8.$$.fragment,f),C(u8.$$.fragment,f),C(b8.$$.fragment,f),C(y4.$$.fragment,f),C(v8.$$.fragment,f),C(x4.$$.fragment,f),C(F8.$$.fragment,f),C(T8.$$.fragment,f),C(E8.$$.fragment,f),C(k4.$$.fragment,f),C(C8.$$.fragment,f),C(tE.$$.fragment,f),C(w8.$$.fragment,f),C(A8.$$.fragment,f),C(L8.$$.fragment,f),C(nE.$$.fragment,f),C(x8.$$.fragment,f),C(pE.$$.fragment,f),C($8.$$.fragment,f),C(k8.$$.fragment,f),C(R8.$$.fragment,f),C(_E.$$.fragment,f),C(B8.$$.fragment,f),C($E.$$.fragment,f),C(P8.$$.fragment,f),C(I8.$$.fragment,f),C(N8.$$.fragment,f),C(SE.$$.fragment,f),C(j8.$$.fragment,f),C(VE.$$.fragment,f),C(D8.$$.fragment,f),C(G8.$$.fragment,f),C(V8.$$.fragment,f),C(zE.$$.fragment,f),C(X8.$$.fragment,f),C(oC.$$.fragment,f),C(z8.$$.fragment,f),C(Q8.$$.fragment,f),C(H8.$$.fragment,f),C(tC.$$.fragment,f),C(U8.$$.fragment,f),C(hC.$$.fragment,f),C(J8.$$.fragment,f),C(Y8.$$.fragment,f),C(Z8.$$.fragment,f),C(uC.$$.fragment,f),C(ex.$$.fragment,f),C(yC.$$.fragment,f),C(ox.$$.fragment,f),C(rx.$$.fragment,f),C(ax.$$.fragment,f),C(xC.$$.fragment,f),C(nx.$$.fragment,f),C(NC.$$.fragment,f),C(sx.$$.fragment,f),C(lx.$$.fragment,f),C(dx.$$.fragment,f),C(DC.$$.fragment,f),C(cx.$$.fragment,f),C(UC.$$.fragment,f),C(fx.$$.fragment,f),C(mx.$$.fragment,f),C(hx.$$.fragment,f),C(YC.$$.fragment,f),C(px.$$.fragment,f),C(ZC.$$.fragment,f),C(ux.$$.fragment,f),C(_x.$$.fragment,f),C(vx.$$.fragment,f),C(o3.$$.fragment,f),C(Fx.$$.fragment,f),C(a3.$$.fragment,f),C(Mx.$$.fragment,f),C(Ex.$$.fragment,f),C(wx.$$.fragment,f),C(s3.$$.fragment,f),C(Ax.$$.fragment,f),C(i3.$$.fragment,f),kIe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(rf),f&&t(Kr),f&&t(qe),f&&t(Xe),f&&t(af),w(va,f),f&&t(ze),f&&t(Ae),f&&t(Eo),f&&t(Fa),f&&t($Be),f&&t(ii),w(LA),f&&t(kBe),f&&t(An),f&&t(SBe),w(xA,f),f&&t(RBe),f&&t(X9),f&&t(BBe),w(lf,f),f&&t(PBe),f&&t(di),w($A),f&&t(IBe),f&&t(Co),w(kA),w(BA),w(sg),w(PA),f&&t(qBe),f&&t(fi),w(IA),f&&t(NBe),f&&t(wo),w(qA),w(DA),w(Ng),w(GA),f&&t(jBe),f&&t(mi),w(OA),f&&t(DBe),f&&t(Ao),w(VA),w(QA),w(mh),w(gh),w(WA),f&&t(GBe),f&&t(gi),w(HA),f&&t(OBe),f&&t(yo),w(UA),w(KA),w($h),w(kh),w(ZA),f&&t(VBe),f&&t(pi),w(e0),f&&t(XBe),f&&t(Lo),w(o0),w(t0),w(Bh),w(a0),w(Eu),f&&t(zBe),f&&t(bi),w(n0),f&&t(QBe),f&&t(xo),w(s0),w(i0),w(wu),w(d0),w(m_),f&&t(WBe),f&&t(Ti),w(c0),f&&t(HBe),f&&t($o),w(f0),w(g0),w(h_),w(h0),w(Y_),f&&t(UBe),f&&t(Ci),w(p0),f&&t(JBe),f&&t(ko),w(u0),w(b0),w(Z_),w(v0),w(I5),f&&t(YBe),f&&t(yi),w(F0),f&&t(KBe),f&&t(So),w(T0),w(E0),w(N5),w(C0),w(t1),f&&t(ZBe),f&&t($i),w(w0),f&&t(ePe),f&&t(Ro),w(A0),w(L0),w(n1),w(x0),w(eb),f&&t(oPe),f&&t(Ri),w($0),f&&t(rPe),f&&t(Bo),w(k0),w(R0),w(rb),w(B0),w(Sb),f&&t(tPe),f&&t(Ii),w(P0),f&&t(aPe),f&&t(Po),w(I0),w(N0),w(Bb),w(j0),w(Gb),f&&t(nPe),f&&t(ji),w(D0),f&&t(sPe),f&&t(Io),w(G0),w(V0),w(Vb),w(X0),w(C2),f&&t(lPe),f&&t(Oi),w(z0),f&&t(iPe),f&&t(qo),w(Q0),w(H0),w(A2),w(U0),w(gv),f&&t(dPe),f&&t(zi),w(J0),f&&t(cPe),f&&t(No),w(Y0),w(Z0),w(pv),w(ey),w(bv),f&&t(fPe),f&&t(Hi),w(oy),f&&t(mPe),f&&t(jo),w(ry),w(ay),w(Fv),w(ny),w(Bv),f&&t(gPe),f&&t(Yi),w(sy),f&&t(hPe),f&&t(Do),w(ly),w(dy),w(Iv),w(cy),w(jv),f&&t(pPe),f&&t(ed),w(fy),f&&t(uPe),f&&t(Go),w(my),w(hy),w(Gv),w(py),w(Yv),f&&t(_Pe),f&&t(td),w(uy),f&&t(bPe),f&&t(Oo),w(_y),w(vy),w(Zv),w(Fy),w(nF),f&&t(vPe),f&&t(sd),w(Ty),f&&t(FPe),f&&t(Vo),w(My),w(Cy),w(lF),w(wy),w(_F),f&&t(TPe),f&&t(dd),w(Ay),f&&t(MPe),f&&t(Xo),w(yy),w(xy),w(vF),w($y),w(EF),f&&t(EPe),f&&t(md),w(Sy),f&&t(CPe),f&&t(zo),w(Ry),w(Py),w(wF),w(Iy),w(kF),f&&t(wPe),f&&t(pd),w(qy),f&&t(APe),f&&t(Qo),w(Ny),w(Dy),w(RF),w(Gy),w(NF),f&&t(yPe),f&&t(vd),w(Oy),f&&t(LPe),f&&t(Wo),w(Vy),w(zy),w(DF),w(Qy),w(XF),f&&t(xPe),f&&t(Md),w(Hy),f&&t($Pe),f&&t(Ho),w(Uy),w(Yy),w(QF),w(Ky),w(UF),f&&t(kPe),f&&t(wd),w(Zy),f&&t(SPe),f&&t(Uo),w(eL),w(rL),w(YF),w(tL),w(t6),f&&t(RPe),f&&t(Ld),w(aL),f&&t(BPe),f&&t(Jo),w(nL),w(lL),w(n6),w(iL),w(i6),f&&t(PPe),f&&t(kd),w(dL),f&&t(IPe),f&&t(Yo),w(cL),w(mL),w(c6),w(gL),w(oT),f&&t(qPe),f&&t(Bd),w(hL),f&&t(NPe),f&&t(Ko),w(pL),w(_L),w(tT),w(bL),w(yT),f&&t(jPe),f&&t(qd),w(vL),f&&t(DPe),f&&t(Zo),w(FL),w(ML),w(xT),w(EL),w(OT),f&&t(GPe),f&&t(Dd),w(CL),f&&t(OPe),f&&t(er),w(wL),w(yL),w(XT),w(LL),w(HT),f&&t(VPe),f&&t(Xd),w(xL),f&&t(XPe),f&&t(or),w($L),w(SL),w(JT),w(RL),w(_7),f&&t(zPe),f&&t(Wd),w(BL),f&&t(QPe),f&&t(rr),w(PL),w(qL),w(v7),w(NL),w($7),f&&t(WPe),f&&t(Jd),w(jL),f&&t(HPe),f&&t(tr),w(DL),w(OL),w(S7),w(VL),w(nM),f&&t(UPe),f&&t(Zd),w(XL),f&&t(JPe),f&&t(ar),w(zL),w(WL),w(lM),w(HL),w(wM),f&&t(YPe),f&&t(rc),w(UL),f&&t(KPe),f&&t(nr),w(JL),w(KL),w(yM),w(ZL),w(xM),f&&t(ZPe),f&&t(nc),w(e8),f&&t(eIe),f&&t(sr),w(o8),w(t8),w(kM),w(a8),w(KM),f&&t(oIe),f&&t(ic),w(n8),f&&t(rIe),f&&t(lr),w(s8),w(i8),w(e4),w(d8),w(T4),f&&t(tIe),f&&t(fc),w(c8),f&&t(aIe),f&&t(ir),w(f8),w(g8),w(E4),w(h8),w(w4),f&&t(nIe),f&&t(hc),w(p8),f&&t(sIe),f&&t(dr),w(u8),w(b8),w(y4),w(v8),w(x4),f&&t(lIe),f&&t(_c),w(F8),f&&t(iIe),f&&t(cr),w(T8),w(E8),w(k4),w(C8),w(tE),f&&t(dIe),f&&t(Fc),w(w8),f&&t(cIe),f&&t(fr),w(A8),w(L8),w(nE),w(x8),w(pE),f&&t(fIe),f&&t(Ec),w($8),f&&t(mIe),f&&t(mr),w(k8),w(R8),w(_E),w(B8),w($E),f&&t(gIe),f&&t(Ac),w(P8),f&&t(hIe),f&&t(gr),w(I8),w(N8),w(SE),w(j8),w(VE),f&&t(pIe),f&&t(xc),w(D8),f&&t(uIe),f&&t(hr),w(G8),w(V8),w(zE),w(X8),w(oC),f&&t(_Ie),f&&t(Sc),w(z8),f&&t(bIe),f&&t(pr),w(Q8),w(H8),w(tC),w(U8),w(hC),f&&t(vIe),f&&t(Pc),w(J8),f&&t(FIe),f&&t(ur),w(Y8),w(Z8),w(uC),w(ex),w(yC),f&&t(TIe),f&&t(Nc),w(ox),f&&t(MIe),f&&t(_r),w(rx),w(ax),w(xC),w(nx),w(NC),f&&t(EIe),f&&t(Gc),w(sx),f&&t(CIe),f&&t(br),w(lx),w(dx),w(DC),w(cx),w(UC),f&&t(wIe),f&&t(Xc),w(fx),f&&t(AIe),f&&t(vr),w(mx),w(hx),w(YC),w(px),w(ZC),f&&t(yIe),f&&t(Wc),w(ux),f&&t(LIe),f&&t(Fr),w(_x),w(vx),w(o3),w(Fx),w(a3),f&&t(xIe),f&&t(Jc),w(Mx),f&&t($Ie),f&&t(Tr),w(Ex),w(wx),w(s3),w(Ax),w(i3)}}}const Jwt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Ywt(L){return ZCt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class aAt extends UCt{constructor(g){super();JCt(this,g,Ywt,Uwt,YCt,{})}}export{aAt as default,Jwt as metadata};
