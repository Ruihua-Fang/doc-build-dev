import{S as ti,i as oi,s as ni,e as n,k as c,w as C,t as r,M as si,c as s,d as o,m as d,a,x as T,h as i,b as l,N as ai,F as e,g as h,y as b,q as y,o as N,B as $}from"../../chunks/vendor-4833417e.js";import{T as to}from"../../chunks/Tip-fffd6df1.js";import{D as oe}from"../../chunks/Docstring-4f315ed9.js";import{C as zo}from"../../chunks/CodeBlock-6a3d1b46.js";import{I as $e}from"../../chunks/IconCopyLink-4b81c553.js";import"../../chunks/CopyButton-dacfbfaf.js";function ri(O){let p,E,m,u,x;return{c(){p=n("p"),E=r("Although the recipe for forward pass needs to be defined within this function, one should call the "),m=n("code"),u=r("Module"),x=r(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(v){p=s(v,"P",{});var _=a(p);E=i(_,"Although the recipe for forward pass needs to be defined within this function, one should call the "),m=s(_,"CODE",{});var F=a(m);u=i(F,"Module"),F.forEach(o),x=i(_,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),_.forEach(o)},m(v,_){h(v,p,_),e(p,E),e(p,m),e(m,u),e(p,x)},d(v){v&&o(p)}}}function ii(O){let p,E,m,u,x;return{c(){p=n("p"),E=r("Although the recipe for forward pass needs to be defined within this function, one should call the "),m=n("code"),u=r("Module"),x=r(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(v){p=s(v,"P",{});var _=a(p);E=i(_,"Although the recipe for forward pass needs to be defined within this function, one should call the "),m=s(_,"CODE",{});var F=a(m);u=i(F,"Module"),F.forEach(o),x=i(_,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),_.forEach(o)},m(v,_){h(v,p,_),e(p,E),e(p,m),e(m,u),e(p,x)},d(v){v&&o(p)}}}function li(O){let p,E,m,u,x,v,_,F,Y,X,w,z,j,L,J,I,Q,K;return{c(){p=n("p"),E=r("TF 2.0 models accepts two formats as inputs:"),m=c(),u=n("ul"),x=n("li"),v=r("having all inputs as keyword arguments (like PyTorch models), or"),_=c(),F=n("li"),Y=r("having all inputs as a list, tuple or dict in the first positional arguments."),X=c(),w=n("p"),z=r("This second option is useful when using "),j=n("code"),L=r("tf.keras.Model.fit"),J=r(` method which currently requires having all the
tensors in the first argument of the model call function: `),I=n("code"),Q=r("model(inputs)"),K=r(".")},l(g){p=s(g,"P",{});var k=a(p);E=i(k,"TF 2.0 models accepts two formats as inputs:"),k.forEach(o),m=d(g),u=s(g,"UL",{});var P=a(u);x=s(P,"LI",{});var ce=a(x);v=i(ce,"having all inputs as keyword arguments (like PyTorch models), or"),ce.forEach(o),_=d(P),F=s(P,"LI",{});var de=a(F);Y=i(de,"having all inputs as a list, tuple or dict in the first positional arguments."),de.forEach(o),P.forEach(o),X=d(g),w=s(g,"P",{});var M=a(w);z=i(M,"This second option is useful when using "),j=s(M,"CODE",{});var R=a(j);L=i(R,"tf.keras.Model.fit"),R.forEach(o),J=i(M,` method which currently requires having all the
tensors in the first argument of the model call function: `),I=s(M,"CODE",{});var fe=a(I);Q=i(fe,"model(inputs)"),fe.forEach(o),K=i(M,"."),M.forEach(o)},m(g,k){h(g,p,k),e(p,E),h(g,m,k),h(g,u,k),e(u,x),e(x,v),e(u,_),e(u,F),e(F,Y),h(g,X,k),h(g,w,k),e(w,z),e(w,j),e(j,L),e(w,J),e(w,I),e(I,Q),e(w,K)},d(g){g&&o(p),g&&o(m),g&&o(u),g&&o(X),g&&o(w)}}}function ci(O){let p,E,m,u,x;return{c(){p=n("p"),E=r("Although the recipe for forward pass needs to be defined within this function, one should call the "),m=n("code"),u=r("Module"),x=r(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(v){p=s(v,"P",{});var _=a(p);E=i(_,"Although the recipe for forward pass needs to be defined within this function, one should call the "),m=s(_,"CODE",{});var F=a(m);u=i(F,"Module"),F.forEach(o),x=i(_,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),_.forEach(o)},m(v,_){h(v,p,_),e(p,E),e(p,m),e(m,u),e(p,x)},d(v){v&&o(p)}}}function di(O){let p,E,m,u,x,v,_,F,Y,X,w,z,j,L,J,I,Q,K;return{c(){p=n("p"),E=r("TF 2.0 models accepts two formats as inputs:"),m=c(),u=n("ul"),x=n("li"),v=r("having all inputs as keyword arguments (like PyTorch models), or"),_=c(),F=n("li"),Y=r("having all inputs as a list, tuple or dict in the first positional arguments."),X=c(),w=n("p"),z=r("This second option is useful when using "),j=n("code"),L=r("tf.keras.Model.fit"),J=r(` method which currently requires having all the
tensors in the first argument of the model call function: `),I=n("code"),Q=r("model(inputs)"),K=r(".")},l(g){p=s(g,"P",{});var k=a(p);E=i(k,"TF 2.0 models accepts two formats as inputs:"),k.forEach(o),m=d(g),u=s(g,"UL",{});var P=a(u);x=s(P,"LI",{});var ce=a(x);v=i(ce,"having all inputs as keyword arguments (like PyTorch models), or"),ce.forEach(o),_=d(P),F=s(P,"LI",{});var de=a(F);Y=i(de,"having all inputs as a list, tuple or dict in the first positional arguments."),de.forEach(o),P.forEach(o),X=d(g),w=s(g,"P",{});var M=a(w);z=i(M,"This second option is useful when using "),j=s(M,"CODE",{});var R=a(j);L=i(R,"tf.keras.Model.fit"),R.forEach(o),J=i(M,` method which currently requires having all the
tensors in the first argument of the model call function: `),I=s(M,"CODE",{});var fe=a(I);Q=i(fe,"model(inputs)"),fe.forEach(o),K=i(M,"."),M.forEach(o)},m(g,k){h(g,p,k),e(p,E),h(g,m,k),h(g,u,k),e(u,x),e(x,v),e(u,_),e(u,F),e(F,Y),h(g,X,k),h(g,w,k),e(w,z),e(w,j),e(j,L),e(w,J),e(w,I),e(I,Q),e(w,K)},d(g){g&&o(p),g&&o(m),g&&o(u),g&&o(X),g&&o(w)}}}function fi(O){let p,E,m,u,x;return{c(){p=n("p"),E=r("Although the recipe for forward pass needs to be defined within this function, one should call the "),m=n("code"),u=r("Module"),x=r(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(v){p=s(v,"P",{});var _=a(p);E=i(_,"Although the recipe for forward pass needs to be defined within this function, one should call the "),m=s(_,"CODE",{});var F=a(m);u=i(F,"Module"),F.forEach(o),x=i(_,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),_.forEach(o)},m(v,_){h(v,p,_),e(p,E),e(p,m),e(m,u),e(p,x)},d(v){v&&o(p)}}}function hi(O){let p,E,m,u,x,v,_,F,Y,X,w,z,j,L,J,I,Q,K,g,k,P,ce,de,M,R,fe,Ao,It,oo,Tn,Oo,Pt,bn,Lo,qt,no,yn,Do,Ee,Ua,So,Fe,Nn,zt,$n,En,Xo,A,Fn,He,kn,Mn,Ue,jn,In,We,Pn,qn,Be,zn,An,Ke,On,Ln,Vo,he,ke,so,Re,Dn,ao,Sn,Ho,pe,Ge,Xn,Ze,Vn,At,Hn,Un,Uo,me,Me,ro,Ye,Wn,io,Bn,Wo,D,Je,Kn,ue,Rn,Ot,Gn,Zn,Qe,Yn,Jn,Qn,ge,es,Lt,ts,os,Dt,ns,ss,as,lo,rs,is,et,Bo,ve,je,co,tt,ls,fo,cs,Ko,ee,ot,ds,ho,fs,hs,nt,ps,St,ms,us,Ro,_e,Ie,po,st,gs,mo,vs,Go,te,at,_s,rt,xs,it,ws,Cs,Ts,V,lt,bs,xe,ys,Xt,Ns,$s,uo,Es,Fs,ks,Pe,Ms,go,js,Is,ct,Zo,we,qe,vo,dt,Ps,_o,qs,Yo,B,ft,zs,xo,As,Os,ht,Ls,pt,Ds,Ss,Xs,H,mt,Vs,Ce,Hs,Vt,Us,Ws,wo,Bs,Ks,Rs,ze,Gs,Co,Zs,Ys,ut,Jo,Te,Ae,To,gt,Js,bo,Qs,Qo,S,vt,ea,_t,ta,Ht,oa,na,sa,xt,aa,wt,ra,ia,la,Oe,ca,U,Ct,da,be,fa,Ut,ha,pa,yo,ma,ua,ga,Le,va,No,_a,xa,Tt,en,ye,De,$o,bt,wa,Eo,Ca,tn,q,yt,Ta,Fo,ba,ya,Nt,Na,Wt,$a,Ea,Fa,$t,ka,Et,Ma,ja,Ia,Se,Pa,W,Ft,qa,Ne,za,Bt,Aa,Oa,ko,La,Da,Sa,Xe,Xa,Mo,Va,Ha,kt,on;return v=new $e({}),L=new $e({}),Re=new $e({}),Ge=new oe({props:{name:"class transformers.models.convnext.modeling_convnext.ConvNextModelOutput",anchor:"transformers.models.convnext.modeling_convnext.ConvNextModelOutput",parameters:[{name:"last_hidden_state",val:": FloatTensor = None"},{name:"pooler_output",val:": typing.Optional[torch.FloatTensor] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16018/src/transformers/models/convnext/modeling_convnext.py#L76",parametersDescription:[{anchor:"transformers.models.convnext.modeling_convnext.ConvNextModelOutput.last_hidden_state",description:`<strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Last hidden states (final feature map) of the last stage of the model.`,name:"last_hidden_state"},{anchor:"transformers.models.convnext.modeling_convnext.ConvNextModelOutput.pooler_output",description:`<strong>pooler_output</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.dim[-1])</code>) &#x2014;
Global average pooling of the last feature map followed by a layernorm.`,name:"pooler_output"},{anchor:"transformers.models.convnext.modeling_convnext.ConvNextModelOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also called feature maps) of the model at
the output of each stage.`,name:"hidden_states"}]}}),Ye=new $e({}),Je=new oe({props:{name:"class transformers.ConvNextConfig",anchor:"transformers.ConvNextConfig",parameters:[{name:"num_channels",val:" = 3"},{name:"patch_size",val:" = 4"},{name:"num_stages",val:" = 4"},{name:"hidden_sizes",val:" = None"},{name:"depths",val:" = None"},{name:"hidden_act",val:" = 'gelu'"},{name:"initializer_range",val:" = 0.02"},{name:"layer_norm_eps",val:" = 1e-12"},{name:"is_encoder_decoder",val:" = False"},{name:"layer_scale_init_value",val:" = 1e-06"},{name:"drop_path_rate",val:" = 0.0"},{name:"image_size",val:" = 224"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16018/src/transformers/models/convnext/configuration_convnext.py#L29",parametersDescription:[{anchor:"transformers.ConvNextConfig.num_channels",description:`<strong>num_channels</strong> (<code>int</code>, <em>optional</em>, defaults to 3) &#x2014;
The number of input channels.`,name:"num_channels"},{anchor:"transformers.ConvNextConfig.patch_size",description:`<strong>patch_size</strong> (<code>int</code>, optional, defaults to 4) &#x2014;
Patch size to use in the patch embedding layer.`,name:"patch_size"},{anchor:"transformers.ConvNextConfig.num_stages",description:`<strong>num_stages</strong> (<code>int</code>, optional, defaults to 4) &#x2014;
The number of stages in the model.`,name:"num_stages"},{anchor:"transformers.ConvNextConfig.hidden_sizes",description:`<strong>hidden_sizes</strong> (<code>List[int]</code>, <em>optional</em>, defaults to [96, 192, 384, 768]) &#x2014;
Dimensionality (hidden size) at each stage.`,name:"hidden_sizes"},{anchor:"transformers.ConvNextConfig.depths",description:`<strong>depths</strong> (<code>List[int]</code>, <em>optional</em>, defaults to [3, 3, 9, 3]) &#x2014;
Depth (number of blocks) for each stage.`,name:"depths"},{anchor:"transformers.ConvNextConfig.hidden_act",description:`<strong>hidden_act</strong> (<code>str</code> or <code>function</code>, <em>optional</em>, defaults to <code>&quot;gelu&quot;</code>) &#x2014;
The non-linear activation function (function or string) in each block. If string, <code>&quot;gelu&quot;</code>, <code>&quot;relu&quot;</code>,
<code>&quot;selu&quot;</code> and <code>&quot;gelu_new&quot;</code> are supported.`,name:"hidden_act"},{anchor:"transformers.ConvNextConfig.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"initializer_range"},{anchor:"transformers.ConvNextConfig.layer_norm_eps",description:`<strong>layer_norm_eps</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-12) &#x2014;
The epsilon used by the layer normalization layers.`,name:"layer_norm_eps"},{anchor:"transformers.ConvNextConfig.layer_scale_init_value",description:`<strong>layer_scale_init_value</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-6) &#x2014;
The initial value for the layer scale.`,name:"layer_scale_init_value"},{anchor:"transformers.ConvNextConfig.drop_path_rate",description:`<strong>drop_path_rate</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The drop rate for stochastic depth.`,name:"drop_path_rate"}]}}),et=new zo({props:{code:`from transformers import ConvNextModel, ConvNextConfig

# Initializing a ConvNext convnext-tiny-224 style configuration
configuration = ConvNextConfig()
# Initializing a model from the convnext-tiny-224 style configuration
model = ConvNextModel(configuration)
# Accessing the model configuration
configuration = model.config`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ConvNextModel, ConvNextConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a ConvNext convnext-tiny-224 style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = ConvNextConfig()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a model from the convnext-tiny-224 style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ConvNextModel(configuration)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`}}),tt=new $e({}),ot=new oe({props:{name:"class transformers.ConvNextFeatureExtractor",anchor:"transformers.ConvNextFeatureExtractor",parameters:[{name:"do_resize",val:" = True"},{name:"size",val:" = 224"},{name:"resample",val:" = 3"},{name:"crop_pct",val:" = None"},{name:"do_normalize",val:" = True"},{name:"image_mean",val:" = None"},{name:"image_std",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16018/src/transformers/models/convnext/feature_extraction_convnext.py#L37",parametersDescription:[{anchor:"transformers.ConvNextFeatureExtractor.do_resize",description:`<strong>do_resize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to resize (and optionally center crop) the input to a certain <code>size</code>.`,name:"do_resize"},{anchor:"transformers.ConvNextFeatureExtractor.size",description:`<strong>size</strong> (<code>int</code>, <em>optional</em>, defaults to 224) &#x2014;
Resize the input to the given size. If 384 or larger, the image is resized to (<code>size</code>, <code>size</code>). Else, the
smaller edge of the image will be matched to int(<code>size</code>/ <code>crop_pct</code>), after which the image is cropped to
<code>size</code>. Only has an effect if <code>do_resize</code> is set to <code>True</code>.`,name:"size"},{anchor:"transformers.ConvNextFeatureExtractor.resample",description:`<strong>resample</strong> (<code>int</code>, <em>optional</em>, defaults to <code>PIL.Image.BICUBIC</code>) &#x2014;
An optional resampling filter. This can be one of <code>PIL.Image.NEAREST</code>, <code>PIL.Image.BOX</code>,
<code>PIL.Image.BILINEAR</code>, <code>PIL.Image.HAMMING</code>, <code>PIL.Image.BICUBIC</code> or <code>PIL.Image.LANCZOS</code>. Only has an effect
if <code>do_resize</code> is set to <code>True</code>.`,name:"resample"},{anchor:"transformers.ConvNextFeatureExtractor.crop_pct",description:`<strong>crop_pct</strong> (<code>float</code>, <em>optional</em>) &#x2014;
The percentage of the image to crop. If <code>None</code>, then a cropping percentage of 224 / 256 is used. Only has
an effect if <code>do_resize</code> is set to <code>True</code> and <code>size</code> &lt; 384.`,name:"crop_pct"},{anchor:"transformers.ConvNextFeatureExtractor.do_normalize",description:`<strong>do_normalize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to normalize the input with mean and standard deviation.`,name:"do_normalize"},{anchor:"transformers.ConvNextFeatureExtractor.image_mean",description:`<strong>image_mean</strong> (<code>List[int]</code>, defaults to <code>[0.485, 0.456, 0.406]</code>) &#x2014;
The sequence of means for each channel, to be used when normalizing images.`,name:"image_mean"},{anchor:"transformers.ConvNextFeatureExtractor.image_std",description:`<strong>image_std</strong> (<code>List[int]</code>, defaults to <code>[0.229, 0.224, 0.225]</code>) &#x2014;
The sequence of standard deviations for each channel, to be used when normalizing images.`,name:"image_std"}]}}),st=new $e({}),at=new oe({props:{name:"class transformers.ConvNextModel",anchor:"transformers.ConvNextModel",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16018/src/transformers/models/convnext/modeling_convnext.py#L368",parametersDescription:[{anchor:"transformers.ConvNextModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16018/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16018/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),lt=new oe({props:{name:"forward",anchor:"transformers.ConvNextModel.forward",parameters:[{name:"pixel_values",val:" = None"},{name:"output_hidden_states",val:" = None"},{name:"return_dict",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16018/src/transformers/models/convnext/modeling_convnext.py#L382",parametersDescription:[{anchor:"transformers.ConvNextModel.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_16018/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See
<code>AutoFeatureExtractor.__call__()</code>for details.`,name:"pixel_values"},{anchor:"transformers.ConvNextModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.ConvNextModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_16018/en/main_classes/output#transformers.file_utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],returnDescription:`
<p>A <a
  href="/docs/transformers/pr_16018/en/model_doc/convnext#transformers.models.convnext.modeling_convnext.ConvNextModelOutput"
>transformers.models.convnext.modeling_convnext.ConvNextModelOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_16018/en/model_doc/convnext#transformers.ConvNextConfig"
>ConvNextConfig</a>) and inputs.</p>
<ul>
<li><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) \u2014 Last hidden states (final feature map) of the last stage of the model.</li>
<li><strong>pooler_output</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.dim[-1])</code>) \u2014 Global average pooling of the last feature map followed by a layernorm.</li>
<li><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also called feature maps) of the model at
the output of each stage.</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_16018/en/model_doc/convnext#transformers.models.convnext.modeling_convnext.ConvNextModelOutput"
>transformers.models.convnext.modeling_convnext.ConvNextModelOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),Pe=new to({props:{$$slots:{default:[ri]},$$scope:{ctx:O}}}),ct=new zo({props:{code:`from transformers import ConvNextFeatureExtractor, ConvNextModel
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = ConvNextFeatureExtractor.from_pretrained("facebook/convnext-tiny-224")
model = ConvNextModel.from_pretrained("facebook/convnext-tiny-224")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state
list(last_hidden_states.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ConvNextFeatureExtractor, ConvNextModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = ConvNextFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/convnext-tiny-224&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ConvNextModel.from_pretrained(<span class="hljs-string">&quot;facebook/convnext-tiny-224&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(last_hidden_states.shape)
[<span class="hljs-number">1</span>, <span class="hljs-number">768</span>, <span class="hljs-number">7</span>, <span class="hljs-number">7</span>]`}}),dt=new $e({}),ft=new oe({props:{name:"class transformers.ConvNextForImageClassification",anchor:"transformers.ConvNextForImageClassification",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16018/src/transformers/models/convnext/modeling_convnext.py#L430",parametersDescription:[{anchor:"transformers.ConvNextForImageClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16018/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16018/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),mt=new oe({props:{name:"forward",anchor:"transformers.ConvNextForImageClassification.forward",parameters:[{name:"pixel_values",val:" = None"},{name:"labels",val:" = None"},{name:"output_hidden_states",val:" = None"},{name:"return_dict",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16018/src/transformers/models/convnext/modeling_convnext.py#L445",parametersDescription:[{anchor:"transformers.ConvNextForImageClassification.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_16018/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See
<code>AutoFeatureExtractor.__call__()</code>for details.`,name:"pixel_values"},{anchor:"transformers.ConvNextForImageClassification.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.ConvNextForImageClassification.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_16018/en/main_classes/output#transformers.file_utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.ConvNextForImageClassification.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the image classification/regression loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels == 1</code> a regression loss is computed (Mean-Square loss), If
<code>config.num_labels &gt; 1</code> a classification loss is computed (Cross-Entropy).`,name:"labels"}],returnDescription:`
<p>A <code>transformers.models.convnext.modeling_convnext.ConvNextClassifierOutput</code>or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_16018/en/model_doc/convnext#transformers.ConvNextConfig"
>ConvNextConfig</a>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</li>
<li><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels)</code>) \u2014 Classification (or regression if config.num_labels==1) scores (before SoftMax).</li>
<li><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also called feature maps) of the model at
the output of each stage.</li>
</ul>
`,returnType:`
<p><code>transformers.models.convnext.modeling_convnext.ConvNextClassifierOutput</code>or <code>tuple(torch.FloatTensor)</code></p>
`}}),ze=new to({props:{$$slots:{default:[ii]},$$scope:{ctx:O}}}),ut=new zo({props:{code:`from transformers import ConvNextFeatureExtractor, ConvNextForImageClassification
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = ConvNextFeatureExtractor.from_pretrained("facebook/convnext-tiny-224")
model = ConvNextForImageClassification.from_pretrained("facebook/convnext-tiny-224")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    logits = model(**inputs).logits

# model predicts one of the 1000 ImageNet classes
predicted_label = logits.argmax(-1).item()
print(model.config.id2label[predicted_label])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ConvNextFeatureExtractor, ConvNextForImageClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = ConvNextFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/convnext-tiny-224&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ConvNextForImageClassification.from_pretrained(<span class="hljs-string">&quot;facebook/convnext-tiny-224&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts one of the 1000 ImageNet classes</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_label = logits.argmax(-<span class="hljs-number">1</span>).item()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(model.config.id2label[predicted_label])
tabby, tabby cat`}}),gt=new $e({}),vt=new oe({props:{name:"class transformers.TFConvNextModel",anchor:"transformers.TFConvNextModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16018/src/transformers/models/convnext/modeling_tf_convnext.py#L441",parametersDescription:[{anchor:"transformers.TFConvNextModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16018/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16018/en/main_classes/model#transformers.TFPreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),Oe=new to({props:{$$slots:{default:[li]},$$scope:{ctx:O}}}),Ct=new oe({props:{name:"call",anchor:"transformers.TFConvNextModel.call",parameters:[{name:"pixel_values",val:": typing.Union[typing.List[tensorflow.python.framework.ops.Tensor], typing.List[numpy.ndarray], typing.List[tensorflow.python.keras.engine.keras_tensor.KerasTensor], typing.Dict[str, tensorflow.python.framework.ops.Tensor], typing.Dict[str, numpy.ndarray], typing.Dict[str, tensorflow.python.keras.engine.keras_tensor.KerasTensor], tensorflow.python.framework.ops.Tensor, numpy.ndarray, tensorflow.python.keras.engine.keras_tensor.KerasTensor, NoneType] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"},{name:"training",val:": bool = False"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16018/src/transformers/models/convnext/modeling_tf_convnext.py#L446",parametersDescription:[{anchor:"transformers.TFConvNextModel.call.pixel_values",description:`<strong>pixel_values</strong> (<code>np.ndarray</code>, <code>tf.Tensor</code>, <code>List[tf.Tensor]</code> \`<code>Dict[str, tf.Tensor]</code> or <code>Dict[str, np.ndarray]</code> and each example must have the shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_16018/en/model_doc/convnext#transformers.ConvNextFeatureExtractor">ConvNextFeatureExtractor</a>. See
<code>ConvNextFeatureExtractor.__call__()</code>for details.`,name:"pixel_values"},{anchor:"transformers.TFConvNextModel.call.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail. This argument can be used only in eager mode, in graph mode the value in the config will be
used instead.`,name:"output_hidden_states"},{anchor:"transformers.TFConvNextModel.call.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_16018/en/main_classes/output#transformers.file_utils.ModelOutput">ModelOutput</a> instead of a plain tuple. This argument can be used
in eager mode, in graph mode the value will always be set to True.`,name:"return_dict"}],returnDescription:`
<p>A <a
  href="/docs/transformers/pr_16018/en/main_classes/output#transformers.modeling_tf_outputs.TFBaseModelOutputWithPooling"
>transformers.modeling_tf_outputs.TFBaseModelOutputWithPooling</a> or a tuple of <code>tf.Tensor</code> (if
<code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various elements depending on the
configuration (<a
  href="/docs/transformers/pr_16018/en/model_doc/convnext#transformers.ConvNextConfig"
>ConvNextConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</p>
</li>
<li>
<p><strong>pooler_output</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, hidden_size)</code>) \u2014 Last layer hidden-state of the first token of the sequence (classification token) further processed by a
Linear layer and a Tanh activation function. The Linear layer weights are trained from the next sentence
prediction (classification) objective during pretraining.</p>
<p>This output is usually <em>not</em> a good summary of the semantic content of the input, you\u2019re often better with
averaging or pooling the sequence of hidden-states for the whole input sequence.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_16018/en/main_classes/output#transformers.modeling_tf_outputs.TFBaseModelOutputWithPooling"
>transformers.modeling_tf_outputs.TFBaseModelOutputWithPooling</a> or <code>tuple(tf.Tensor)</code></p>
`}}),Le=new to({props:{$$slots:{default:[ci]},$$scope:{ctx:O}}}),Tt=new zo({props:{code:`from transformers import ConvNextFeatureExtractor, TFConvNextModel
from PIL import Image
import requests

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)

feature_extractor = ConvNextFeatureExtractor.from_pretrained("facebook/convnext-tiny-224")
model = TFConvNextModel.from_pretrained("facebook/convnext-tiny-224")

inputs = feature_extractor(images=image, return_tensors="tf")
outputs = model(**inputs)
last_hidden_states = outputs.last_hidden_state`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ConvNextFeatureExtractor, TFConvNextModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = ConvNextFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/convnext-tiny-224&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFConvNextModel.from_pretrained(<span class="hljs-string">&quot;facebook/convnext-tiny-224&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(images=image, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state`}}),bt=new $e({}),yt=new oe({props:{name:"class transformers.TFConvNextForImageClassification",anchor:"transformers.TFConvNextForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16018/src/transformers/models/convnext/modeling_tf_convnext.py#L521",parametersDescription:[{anchor:"transformers.TFConvNextForImageClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16018/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16018/en/main_classes/model#transformers.TFPreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),Se=new to({props:{$$slots:{default:[di]},$$scope:{ctx:O}}}),Ft=new oe({props:{name:"call",anchor:"transformers.TFConvNextForImageClassification.call",parameters:[{name:"pixel_values",val:": typing.Union[typing.List[tensorflow.python.framework.ops.Tensor], typing.List[numpy.ndarray], typing.List[tensorflow.python.keras.engine.keras_tensor.KerasTensor], typing.Dict[str, tensorflow.python.framework.ops.Tensor], typing.Dict[str, numpy.ndarray], typing.Dict[str, tensorflow.python.keras.engine.keras_tensor.KerasTensor], tensorflow.python.framework.ops.Tensor, numpy.ndarray, tensorflow.python.keras.engine.keras_tensor.KerasTensor, NoneType] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"},{name:"labels",val:": typing.Union[numpy.ndarray, tensorflow.python.framework.ops.Tensor, NoneType] = None"},{name:"training",val:": typing.Optional[bool] = False"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16018/src/transformers/models/convnext/modeling_tf_convnext.py#L536",parametersDescription:[{anchor:"transformers.TFConvNextForImageClassification.call.pixel_values",description:`<strong>pixel_values</strong> (<code>np.ndarray</code>, <code>tf.Tensor</code>, <code>List[tf.Tensor]</code> \`<code>Dict[str, tf.Tensor]</code> or <code>Dict[str, np.ndarray]</code> and each example must have the shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_16018/en/model_doc/convnext#transformers.ConvNextFeatureExtractor">ConvNextFeatureExtractor</a>. See
<code>ConvNextFeatureExtractor.__call__()</code>for details.`,name:"pixel_values"},{anchor:"transformers.TFConvNextForImageClassification.call.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail. This argument can be used only in eager mode, in graph mode the value in the config will be
used instead.`,name:"output_hidden_states"},{anchor:"transformers.TFConvNextForImageClassification.call.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_16018/en/main_classes/output#transformers.file_utils.ModelOutput">ModelOutput</a> instead of a plain tuple. This argument can be used
in eager mode, in graph mode the value will always be set to True.`,name:"return_dict"},{anchor:"transformers.TFConvNextForImageClassification.call.labels",description:`<strong>labels</strong> (<code>tf.Tensor</code> or <code>np.ndarray</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the image classification/regression loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels == 1</code> a regression loss is computed (Mean-Square loss), If
<code>config.num_labels &gt; 1</code> a classification loss is computed (Cross-Entropy).`,name:"labels"}],returnDescription:`
<p>A <a
  href="/docs/transformers/pr_16018/en/main_classes/output#transformers.modeling_tf_outputs.TFSequenceClassifierOutput"
>transformers.modeling_tf_outputs.TFSequenceClassifierOutput</a> or a tuple of <code>tf.Tensor</code> (if
<code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various elements depending on the
configuration (<a
  href="/docs/transformers/pr_16018/en/model_doc/convnext#transformers.ConvNextConfig"
>ConvNextConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, )</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</p>
</li>
<li>
<p><strong>logits</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.num_labels)</code>) \u2014 Classification (or regression if config.num_labels==1) scores (before SoftMax).</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_16018/en/main_classes/output#transformers.modeling_tf_outputs.TFSequenceClassifierOutput"
>transformers.modeling_tf_outputs.TFSequenceClassifierOutput</a> or <code>tuple(tf.Tensor)</code></p>
`}}),Xe=new to({props:{$$slots:{default:[fi]},$$scope:{ctx:O}}}),kt=new zo({props:{code:`from transformers import ConvNextFeatureExtractor, TFConvNextForImageClassification
import tensorflow as tf
from PIL import Image
import requests

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)

feature_extractor = ConvNextFeatureExtractor.from_pretrained("facebook/convnext-tiny-224")
model = TFViTForImageClassification.from_pretrained("facebook/convnext-tiny-224")

inputs = feature_extractor(images=image, return_tensors="tf")
outputs = model(**inputs)
logits = outputs.logits
# model predicts one of the 1000 ImageNet classes
predicted_class_idx = tf.math.argmax(logits, axis=-1)[0]
print("Predicted class:", model.config.id2label[int(predicted_class_idx)])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ConvNextFeatureExtractor, TFConvNextForImageClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = ConvNextFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/convnext-tiny-224&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFViTForImageClassification.from_pretrained(<span class="hljs-string">&quot;facebook/convnext-tiny-224&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(images=image, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts one of the 1000 ImageNet classes</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_class_idx = tf.math.argmax(logits, axis=-<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Predicted class:&quot;</span>, model.config.id2label[<span class="hljs-built_in">int</span>(predicted_class_idx)])`}}),{c(){p=n("meta"),E=c(),m=n("h1"),u=n("a"),x=n("span"),C(v.$$.fragment),_=c(),F=n("span"),Y=r("ConvNeXT"),X=c(),w=n("h2"),z=n("a"),j=n("span"),C(L.$$.fragment),J=c(),I=n("span"),Q=r("Overview"),K=c(),g=n("p"),k=r("The ConvNeXT model was proposed in "),P=n("a"),ce=r("A ConvNet for the 2020s"),de=r(` by Zhuang Liu, Hanzi Mao, Chao-Yuan Wu, Christoph Feichtenhofer, Trevor Darrell, Saining Xie.
ConvNeXT is a pure convolutional model (ConvNet), inspired by the design of Vision Transformers, that claims to outperform them.`),M=c(),R=n("p"),fe=r("The abstract from the paper is the following:"),Ao=c(),It=n("p"),oo=n("em"),Tn=r(`The \u201CRoaring 20s\u201D of visual recognition began with the introduction of Vision Transformers (ViTs), which quickly superseded ConvNets as the state-of-the-art image classification model.
A vanilla ViT, on the other hand, faces difficulties when applied to general computer vision tasks such as object detection and semantic segmentation. It is the hierarchical Transformers
(e.g., Swin Transformers) that reintroduced several ConvNet priors, making Transformers practically viable as a generic vision backbone and demonstrating remarkable performance on a wide
variety of vision tasks. However, the effectiveness of such hybrid approaches is still largely credited to the intrinsic superiority of Transformers, rather than the inherent inductive
biases of convolutions. In this work, we reexamine the design spaces and test the limits of what a pure ConvNet can achieve. We gradually \u201Cmodernize\u201D a standard ResNet toward the design
of a vision Transformer, and discover several key components that contribute to the performance difference along the way. The outcome of this exploration is a family of pure ConvNet models
dubbed ConvNeXt. Constructed entirely from standard ConvNet modules, ConvNeXts compete favorably with Transformers in terms of accuracy and scalability, achieving 87.8% ImageNet top-1 accuracy
and outperforming Swin Transformers on COCO detection and ADE20K segmentation, while maintaining the simplicity and efficiency of standard ConvNets.`),Oo=c(),Pt=n("p"),bn=r("Tips:"),Lo=c(),qt=n("ul"),no=n("li"),yn=r("See the code examples below each model regarding usage."),Do=c(),Ee=n("img"),So=c(),Fe=n("small"),Nn=r("ConvNeXT architecture. Taken from the "),zt=n("a"),$n=r("original paper"),En=r("."),Xo=c(),A=n("p"),Fn=r("This model was contributed by "),He=n("a"),kn=r("nielsr"),Mn=r(". TensorFlow version of the model was contributed by "),Ue=n("a"),jn=r("ariG23498"),In=r(`,
`),We=n("a"),Pn=r("gante"),qn=r(", and "),Be=n("a"),zn=r("sayakpaul"),An=r(" (equal contribution). The original code can be found "),Ke=n("a"),On=r("here"),Ln=r("."),Vo=c(),he=n("h2"),ke=n("a"),so=n("span"),C(Re.$$.fragment),Dn=c(),ao=n("span"),Sn=r("ConvNeXT specific outputs"),Ho=c(),pe=n("div"),C(Ge.$$.fragment),Xn=c(),Ze=n("p"),Vn=r("Class for "),At=n("a"),Hn=r("ConvNextModel"),Un=r("\u2019s outputs, with potential hidden states (feature maps)."),Uo=c(),me=n("h2"),Me=n("a"),ro=n("span"),C(Ye.$$.fragment),Wn=c(),io=n("span"),Bn=r("ConvNextConfig"),Wo=c(),D=n("div"),C(Je.$$.fragment),Kn=c(),ue=n("p"),Rn=r("This is the configuration class to store the configuration of a "),Ot=n("a"),Gn=r("ConvNextModel"),Zn=r(`. It is used to instantiate an
ConvNeXT model according to the specified arguments, defining the model architecture. Instantiating a configuration
with the defaults will yield a similar configuration to that of the ConvNeXT
`),Qe=n("a"),Yn=r("facebook/convnext-tiny-224"),Jn=r(" architecture."),Qn=c(),ge=n("p"),es=r("Configuration objects inherit from "),Lt=n("a"),ts=r("PretrainedConfig"),os=r(` and can be used to control the model outputs. Read the
documentation from `),Dt=n("a"),ns=r("PretrainedConfig"),ss=r(" for more information."),as=c(),lo=n("p"),rs=r("Example:"),is=c(),C(et.$$.fragment),Bo=c(),ve=n("h2"),je=n("a"),co=n("span"),C(tt.$$.fragment),ls=c(),fo=n("span"),cs=r("ConvNextFeatureExtractor"),Ko=c(),ee=n("div"),C(ot.$$.fragment),ds=c(),ho=n("p"),fs=r("Constructs a ConvNeXT feature extractor."),hs=c(),nt=n("p"),ps=r("This feature extractor inherits from "),St=n("a"),ms=r("FeatureExtractionMixin"),us=r(` which contains most of the main methods. Users
should refer to this superclass for more information regarding those methods.`),Ro=c(),_e=n("h2"),Ie=n("a"),po=n("span"),C(st.$$.fragment),gs=c(),mo=n("span"),vs=r("ConvNextModel"),Go=c(),te=n("div"),C(at.$$.fragment),_s=c(),rt=n("p"),xs=r(`The bare ConvNext model outputting raw features without any specific head on top.
This model is a PyTorch `),it=n("a"),ws=r("torch.nn.Module"),Cs=r(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Ts=c(),V=n("div"),C(lt.$$.fragment),bs=c(),xe=n("p"),ys=r("The "),Xt=n("a"),Ns=r("ConvNextModel"),$s=r(" forward method, overrides the "),uo=n("code"),Es=r("__call__"),Fs=r(" special method."),ks=c(),C(Pe.$$.fragment),Ms=c(),go=n("p"),js=r("Example:"),Is=c(),C(ct.$$.fragment),Zo=c(),we=n("h2"),qe=n("a"),vo=n("span"),C(dt.$$.fragment),Ps=c(),_o=n("span"),qs=r("ConvNextForImageClassification"),Yo=c(),B=n("div"),C(ft.$$.fragment),zs=c(),xo=n("p"),As=r(`ConvNext Model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),Os=c(),ht=n("p"),Ls=r("This model is a PyTorch "),pt=n("a"),Ds=r("torch.nn.Module"),Ss=r(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Xs=c(),H=n("div"),C(mt.$$.fragment),Vs=c(),Ce=n("p"),Hs=r("The "),Vt=n("a"),Us=r("ConvNextForImageClassification"),Ws=r(" forward method, overrides the "),wo=n("code"),Bs=r("__call__"),Ks=r(" special method."),Rs=c(),C(ze.$$.fragment),Gs=c(),Co=n("p"),Zs=r("Example:"),Ys=c(),C(ut.$$.fragment),Jo=c(),Te=n("h2"),Ae=n("a"),To=n("span"),C(gt.$$.fragment),Js=c(),bo=n("span"),Qs=r("TFConvNextModel"),Qo=c(),S=n("div"),C(vt.$$.fragment),ea=c(),_t=n("p"),ta=r(`The bare ConvNext model outputting raw features without any specific head on top.
This model inherits from `),Ht=n("a"),oa=r("TFPreTrainedModel"),na=r(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),sa=c(),xt=n("p"),aa=r("This model is also a "),wt=n("a"),ra=r("tf.keras.Model"),ia=r(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),la=c(),C(Oe.$$.fragment),ca=c(),U=n("div"),C(Ct.$$.fragment),da=c(),be=n("p"),fa=r("The "),Ut=n("a"),ha=r("TFConvNextModel"),pa=r(" forward method, overrides the "),yo=n("code"),ma=r("__call__"),ua=r(" special method."),ga=c(),C(Le.$$.fragment),va=c(),No=n("p"),_a=r("Examples:"),xa=c(),C(Tt.$$.fragment),en=c(),ye=n("h2"),De=n("a"),$o=n("span"),C(bt.$$.fragment),wa=c(),Eo=n("span"),Ca=r("TFConvNextForImageClassification"),tn=c(),q=n("div"),C(yt.$$.fragment),Ta=c(),Fo=n("p"),ba=r(`ConvNext Model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),ya=c(),Nt=n("p"),Na=r("This model inherits from "),Wt=n("a"),$a=r("TFPreTrainedModel"),Ea=r(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Fa=c(),$t=n("p"),ka=r("This model is also a "),Et=n("a"),Ma=r("tf.keras.Model"),ja=r(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Ia=c(),C(Se.$$.fragment),Pa=c(),W=n("div"),C(Ft.$$.fragment),qa=c(),Ne=n("p"),za=r("The "),Bt=n("a"),Aa=r("TFConvNextForImageClassification"),Oa=r(" forward method, overrides the "),ko=n("code"),La=r("__call__"),Da=r(" special method."),Sa=c(),C(Xe.$$.fragment),Xa=c(),Mo=n("p"),Va=r("Examples:"),Ha=c(),C(kt.$$.fragment),this.h()},l(t){const f=si('[data-svelte="svelte-1phssyn"]',document.head);p=s(f,"META",{name:!0,content:!0}),f.forEach(o),E=d(t),m=s(t,"H1",{class:!0});var Mt=a(m);u=s(Mt,"A",{id:!0,class:!0,href:!0});var jo=a(u);x=s(jo,"SPAN",{});var Io=a(x);T(v.$$.fragment,Io),Io.forEach(o),jo.forEach(o),_=d(Mt),F=s(Mt,"SPAN",{});var Po=a(F);Y=i(Po,"ConvNeXT"),Po.forEach(o),Mt.forEach(o),X=d(t),w=s(t,"H2",{class:!0});var jt=a(w);z=s(jt,"A",{id:!0,class:!0,href:!0});var qo=a(z);j=s(qo,"SPAN",{});var Wa=a(j);T(L.$$.fragment,Wa),Wa.forEach(o),qo.forEach(o),J=d(jt),I=s(jt,"SPAN",{});var Ba=a(I);Q=i(Ba,"Overview"),Ba.forEach(o),jt.forEach(o),K=d(t),g=s(t,"P",{});var nn=a(g);k=i(nn,"The ConvNeXT model was proposed in "),P=s(nn,"A",{href:!0,rel:!0});var Ka=a(P);ce=i(Ka,"A ConvNet for the 2020s"),Ka.forEach(o),de=i(nn,` by Zhuang Liu, Hanzi Mao, Chao-Yuan Wu, Christoph Feichtenhofer, Trevor Darrell, Saining Xie.
ConvNeXT is a pure convolutional model (ConvNet), inspired by the design of Vision Transformers, that claims to outperform them.`),nn.forEach(o),M=d(t),R=s(t,"P",{});var Ra=a(R);fe=i(Ra,"The abstract from the paper is the following:"),Ra.forEach(o),Ao=d(t),It=s(t,"P",{});var Ga=a(It);oo=s(Ga,"EM",{});var Za=a(oo);Tn=i(Za,`The \u201CRoaring 20s\u201D of visual recognition began with the introduction of Vision Transformers (ViTs), which quickly superseded ConvNets as the state-of-the-art image classification model.
A vanilla ViT, on the other hand, faces difficulties when applied to general computer vision tasks such as object detection and semantic segmentation. It is the hierarchical Transformers
(e.g., Swin Transformers) that reintroduced several ConvNet priors, making Transformers practically viable as a generic vision backbone and demonstrating remarkable performance on a wide
variety of vision tasks. However, the effectiveness of such hybrid approaches is still largely credited to the intrinsic superiority of Transformers, rather than the inherent inductive
biases of convolutions. In this work, we reexamine the design spaces and test the limits of what a pure ConvNet can achieve. We gradually \u201Cmodernize\u201D a standard ResNet toward the design
of a vision Transformer, and discover several key components that contribute to the performance difference along the way. The outcome of this exploration is a family of pure ConvNet models
dubbed ConvNeXt. Constructed entirely from standard ConvNet modules, ConvNeXts compete favorably with Transformers in terms of accuracy and scalability, achieving 87.8% ImageNet top-1 accuracy
and outperforming Swin Transformers on COCO detection and ADE20K segmentation, while maintaining the simplicity and efficiency of standard ConvNets.`),Za.forEach(o),Ga.forEach(o),Oo=d(t),Pt=s(t,"P",{});var Ya=a(Pt);bn=i(Ya,"Tips:"),Ya.forEach(o),Lo=d(t),qt=s(t,"UL",{});var Ja=a(qt);no=s(Ja,"LI",{});var Qa=a(no);yn=i(Qa,"See the code examples below each model regarding usage."),Qa.forEach(o),Ja.forEach(o),Do=d(t),Ee=s(t,"IMG",{src:!0,alt:!0,width:!0}),So=d(t),Fe=s(t,"SMALL",{});var sn=a(Fe);Nn=i(sn,"ConvNeXT architecture. Taken from the "),zt=s(sn,"A",{href:!0});var er=a(zt);$n=i(er,"original paper"),er.forEach(o),En=i(sn,"."),sn.forEach(o),Xo=d(t),A=s(t,"P",{});var G=a(A);Fn=i(G,"This model was contributed by "),He=s(G,"A",{href:!0,rel:!0});var tr=a(He);kn=i(tr,"nielsr"),tr.forEach(o),Mn=i(G,". TensorFlow version of the model was contributed by "),Ue=s(G,"A",{href:!0,rel:!0});var or=a(Ue);jn=i(or,"ariG23498"),or.forEach(o),In=i(G,`,
`),We=s(G,"A",{href:!0,rel:!0});var nr=a(We);Pn=i(nr,"gante"),nr.forEach(o),qn=i(G,", and "),Be=s(G,"A",{href:!0,rel:!0});var sr=a(Be);zn=i(sr,"sayakpaul"),sr.forEach(o),An=i(G," (equal contribution). The original code can be found "),Ke=s(G,"A",{href:!0,rel:!0});var ar=a(Ke);On=i(ar,"here"),ar.forEach(o),Ln=i(G,"."),G.forEach(o),Vo=d(t),he=s(t,"H2",{class:!0});var an=a(he);ke=s(an,"A",{id:!0,class:!0,href:!0});var rr=a(ke);so=s(rr,"SPAN",{});var ir=a(so);T(Re.$$.fragment,ir),ir.forEach(o),rr.forEach(o),Dn=d(an),ao=s(an,"SPAN",{});var lr=a(ao);Sn=i(lr,"ConvNeXT specific outputs"),lr.forEach(o),an.forEach(o),Ho=d(t),pe=s(t,"DIV",{class:!0});var rn=a(pe);T(Ge.$$.fragment,rn),Xn=d(rn),Ze=s(rn,"P",{});var ln=a(Ze);Vn=i(ln,"Class for "),At=s(ln,"A",{href:!0});var cr=a(At);Hn=i(cr,"ConvNextModel"),cr.forEach(o),Un=i(ln,"\u2019s outputs, with potential hidden states (feature maps)."),ln.forEach(o),rn.forEach(o),Uo=d(t),me=s(t,"H2",{class:!0});var cn=a(me);Me=s(cn,"A",{id:!0,class:!0,href:!0});var dr=a(Me);ro=s(dr,"SPAN",{});var fr=a(ro);T(Ye.$$.fragment,fr),fr.forEach(o),dr.forEach(o),Wn=d(cn),io=s(cn,"SPAN",{});var hr=a(io);Bn=i(hr,"ConvNextConfig"),hr.forEach(o),cn.forEach(o),Wo=d(t),D=s(t,"DIV",{class:!0});var ne=a(D);T(Je.$$.fragment,ne),Kn=d(ne),ue=s(ne,"P",{});var Kt=a(ue);Rn=i(Kt,"This is the configuration class to store the configuration of a "),Ot=s(Kt,"A",{href:!0});var pr=a(Ot);Gn=i(pr,"ConvNextModel"),pr.forEach(o),Zn=i(Kt,`. It is used to instantiate an
ConvNeXT model according to the specified arguments, defining the model architecture. Instantiating a configuration
with the defaults will yield a similar configuration to that of the ConvNeXT
`),Qe=s(Kt,"A",{href:!0,rel:!0});var mr=a(Qe);Yn=i(mr,"facebook/convnext-tiny-224"),mr.forEach(o),Jn=i(Kt," architecture."),Kt.forEach(o),Qn=d(ne),ge=s(ne,"P",{});var Rt=a(ge);es=i(Rt,"Configuration objects inherit from "),Lt=s(Rt,"A",{href:!0});var ur=a(Lt);ts=i(ur,"PretrainedConfig"),ur.forEach(o),os=i(Rt,` and can be used to control the model outputs. Read the
documentation from `),Dt=s(Rt,"A",{href:!0});var gr=a(Dt);ns=i(gr,"PretrainedConfig"),gr.forEach(o),ss=i(Rt," for more information."),Rt.forEach(o),as=d(ne),lo=s(ne,"P",{});var vr=a(lo);rs=i(vr,"Example:"),vr.forEach(o),is=d(ne),T(et.$$.fragment,ne),ne.forEach(o),Bo=d(t),ve=s(t,"H2",{class:!0});var dn=a(ve);je=s(dn,"A",{id:!0,class:!0,href:!0});var _r=a(je);co=s(_r,"SPAN",{});var xr=a(co);T(tt.$$.fragment,xr),xr.forEach(o),_r.forEach(o),ls=d(dn),fo=s(dn,"SPAN",{});var wr=a(fo);cs=i(wr,"ConvNextFeatureExtractor"),wr.forEach(o),dn.forEach(o),Ko=d(t),ee=s(t,"DIV",{class:!0});var Gt=a(ee);T(ot.$$.fragment,Gt),ds=d(Gt),ho=s(Gt,"P",{});var Cr=a(ho);fs=i(Cr,"Constructs a ConvNeXT feature extractor."),Cr.forEach(o),hs=d(Gt),nt=s(Gt,"P",{});var fn=a(nt);ps=i(fn,"This feature extractor inherits from "),St=s(fn,"A",{href:!0});var Tr=a(St);ms=i(Tr,"FeatureExtractionMixin"),Tr.forEach(o),us=i(fn,` which contains most of the main methods. Users
should refer to this superclass for more information regarding those methods.`),fn.forEach(o),Gt.forEach(o),Ro=d(t),_e=s(t,"H2",{class:!0});var hn=a(_e);Ie=s(hn,"A",{id:!0,class:!0,href:!0});var br=a(Ie);po=s(br,"SPAN",{});var yr=a(po);T(st.$$.fragment,yr),yr.forEach(o),br.forEach(o),gs=d(hn),mo=s(hn,"SPAN",{});var Nr=a(mo);vs=i(Nr,"ConvNextModel"),Nr.forEach(o),hn.forEach(o),Go=d(t),te=s(t,"DIV",{class:!0});var Zt=a(te);T(at.$$.fragment,Zt),_s=d(Zt),rt=s(Zt,"P",{});var pn=a(rt);xs=i(pn,`The bare ConvNext model outputting raw features without any specific head on top.
This model is a PyTorch `),it=s(pn,"A",{href:!0,rel:!0});var $r=a(it);ws=i($r,"torch.nn.Module"),$r.forEach(o),Cs=i(pn,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),pn.forEach(o),Ts=d(Zt),V=s(Zt,"DIV",{class:!0});var se=a(V);T(lt.$$.fragment,se),bs=d(se),xe=s(se,"P",{});var Yt=a(xe);ys=i(Yt,"The "),Xt=s(Yt,"A",{href:!0});var Er=a(Xt);Ns=i(Er,"ConvNextModel"),Er.forEach(o),$s=i(Yt," forward method, overrides the "),uo=s(Yt,"CODE",{});var Fr=a(uo);Es=i(Fr,"__call__"),Fr.forEach(o),Fs=i(Yt," special method."),Yt.forEach(o),ks=d(se),T(Pe.$$.fragment,se),Ms=d(se),go=s(se,"P",{});var kr=a(go);js=i(kr,"Example:"),kr.forEach(o),Is=d(se),T(ct.$$.fragment,se),se.forEach(o),Zt.forEach(o),Zo=d(t),we=s(t,"H2",{class:!0});var mn=a(we);qe=s(mn,"A",{id:!0,class:!0,href:!0});var Mr=a(qe);vo=s(Mr,"SPAN",{});var jr=a(vo);T(dt.$$.fragment,jr),jr.forEach(o),Mr.forEach(o),Ps=d(mn),_o=s(mn,"SPAN",{});var Ir=a(_o);qs=i(Ir,"ConvNextForImageClassification"),Ir.forEach(o),mn.forEach(o),Yo=d(t),B=s(t,"DIV",{class:!0});var Ve=a(B);T(ft.$$.fragment,Ve),zs=d(Ve),xo=s(Ve,"P",{});var Pr=a(xo);As=i(Pr,`ConvNext Model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),Pr.forEach(o),Os=d(Ve),ht=s(Ve,"P",{});var un=a(ht);Ls=i(un,"This model is a PyTorch "),pt=s(un,"A",{href:!0,rel:!0});var qr=a(pt);Ds=i(qr,"torch.nn.Module"),qr.forEach(o),Ss=i(un,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),un.forEach(o),Xs=d(Ve),H=s(Ve,"DIV",{class:!0});var ae=a(H);T(mt.$$.fragment,ae),Vs=d(ae),Ce=s(ae,"P",{});var Jt=a(Ce);Hs=i(Jt,"The "),Vt=s(Jt,"A",{href:!0});var zr=a(Vt);Us=i(zr,"ConvNextForImageClassification"),zr.forEach(o),Ws=i(Jt," forward method, overrides the "),wo=s(Jt,"CODE",{});var Ar=a(wo);Bs=i(Ar,"__call__"),Ar.forEach(o),Ks=i(Jt," special method."),Jt.forEach(o),Rs=d(ae),T(ze.$$.fragment,ae),Gs=d(ae),Co=s(ae,"P",{});var Or=a(Co);Zs=i(Or,"Example:"),Or.forEach(o),Ys=d(ae),T(ut.$$.fragment,ae),ae.forEach(o),Ve.forEach(o),Jo=d(t),Te=s(t,"H2",{class:!0});var gn=a(Te);Ae=s(gn,"A",{id:!0,class:!0,href:!0});var Lr=a(Ae);To=s(Lr,"SPAN",{});var Dr=a(To);T(gt.$$.fragment,Dr),Dr.forEach(o),Lr.forEach(o),Js=d(gn),bo=s(gn,"SPAN",{});var Sr=a(bo);Qs=i(Sr,"TFConvNextModel"),Sr.forEach(o),gn.forEach(o),Qo=d(t),S=s(t,"DIV",{class:!0});var re=a(S);T(vt.$$.fragment,re),ea=d(re),_t=s(re,"P",{});var vn=a(_t);ta=i(vn,`The bare ConvNext model outputting raw features without any specific head on top.
This model inherits from `),Ht=s(vn,"A",{href:!0});var Xr=a(Ht);oa=i(Xr,"TFPreTrainedModel"),Xr.forEach(o),na=i(vn,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),vn.forEach(o),sa=d(re),xt=s(re,"P",{});var _n=a(xt);aa=i(_n,"This model is also a "),wt=s(_n,"A",{href:!0,rel:!0});var Vr=a(wt);ra=i(Vr,"tf.keras.Model"),Vr.forEach(o),ia=i(_n,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),_n.forEach(o),la=d(re),T(Oe.$$.fragment,re),ca=d(re),U=s(re,"DIV",{class:!0});var ie=a(U);T(Ct.$$.fragment,ie),da=d(ie),be=s(ie,"P",{});var Qt=a(be);fa=i(Qt,"The "),Ut=s(Qt,"A",{href:!0});var Hr=a(Ut);ha=i(Hr,"TFConvNextModel"),Hr.forEach(o),pa=i(Qt," forward method, overrides the "),yo=s(Qt,"CODE",{});var Ur=a(yo);ma=i(Ur,"__call__"),Ur.forEach(o),ua=i(Qt," special method."),Qt.forEach(o),ga=d(ie),T(Le.$$.fragment,ie),va=d(ie),No=s(ie,"P",{});var Wr=a(No);_a=i(Wr,"Examples:"),Wr.forEach(o),xa=d(ie),T(Tt.$$.fragment,ie),ie.forEach(o),re.forEach(o),en=d(t),ye=s(t,"H2",{class:!0});var xn=a(ye);De=s(xn,"A",{id:!0,class:!0,href:!0});var Br=a(De);$o=s(Br,"SPAN",{});var Kr=a($o);T(bt.$$.fragment,Kr),Kr.forEach(o),Br.forEach(o),wa=d(xn),Eo=s(xn,"SPAN",{});var Rr=a(Eo);Ca=i(Rr,"TFConvNextForImageClassification"),Rr.forEach(o),xn.forEach(o),tn=d(t),q=s(t,"DIV",{class:!0});var Z=a(q);T(yt.$$.fragment,Z),Ta=d(Z),Fo=s(Z,"P",{});var Gr=a(Fo);ba=i(Gr,`ConvNext Model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),Gr.forEach(o),ya=d(Z),Nt=s(Z,"P",{});var wn=a(Nt);Na=i(wn,"This model inherits from "),Wt=s(wn,"A",{href:!0});var Zr=a(Wt);$a=i(Zr,"TFPreTrainedModel"),Zr.forEach(o),Ea=i(wn,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),wn.forEach(o),Fa=d(Z),$t=s(Z,"P",{});var Cn=a($t);ka=i(Cn,"This model is also a "),Et=s(Cn,"A",{href:!0,rel:!0});var Yr=a(Et);Ma=i(Yr,"tf.keras.Model"),Yr.forEach(o),ja=i(Cn,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Cn.forEach(o),Ia=d(Z),T(Se.$$.fragment,Z),Pa=d(Z),W=s(Z,"DIV",{class:!0});var le=a(W);T(Ft.$$.fragment,le),qa=d(le),Ne=s(le,"P",{});var eo=a(Ne);za=i(eo,"The "),Bt=s(eo,"A",{href:!0});var Jr=a(Bt);Aa=i(Jr,"TFConvNextForImageClassification"),Jr.forEach(o),Oa=i(eo," forward method, overrides the "),ko=s(eo,"CODE",{});var Qr=a(ko);La=i(Qr,"__call__"),Qr.forEach(o),Da=i(eo," special method."),eo.forEach(o),Sa=d(le),T(Xe.$$.fragment,le),Xa=d(le),Mo=s(le,"P",{});var ei=a(Mo);Va=i(ei,"Examples:"),ei.forEach(o),Ha=d(le),T(kt.$$.fragment,le),le.forEach(o),Z.forEach(o),this.h()},h(){l(p,"name","hf:doc:metadata"),l(p,"content",JSON.stringify(pi)),l(u,"id","convnext"),l(u,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(u,"href","#convnext"),l(m,"class","relative group"),l(z,"id","overview"),l(z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(z,"href","#overview"),l(w,"class","relative group"),l(P,"href","https://arxiv.org/abs/2201.03545"),l(P,"rel","nofollow"),ai(Ee.src,Ua="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/convnext_architecture.jpg")||l(Ee,"src",Ua),l(Ee,"alt","drawing"),l(Ee,"width","600"),l(zt,"href","https://arxiv.org/abs/2201.03545"),l(He,"href","https://huggingface.co/nielsr"),l(He,"rel","nofollow"),l(Ue,"href","https://github.com/ariG23498"),l(Ue,"rel","nofollow"),l(We,"href","https://github.com/gante"),l(We,"rel","nofollow"),l(Be,"href","https://github.com/sayakpaul"),l(Be,"rel","nofollow"),l(Ke,"href","https://github.com/facebookresearch/ConvNeXt"),l(Ke,"rel","nofollow"),l(ke,"id","transformers.models.convnext.modeling_convnext.ConvNextModelOutput"),l(ke,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(ke,"href","#transformers.models.convnext.modeling_convnext.ConvNextModelOutput"),l(he,"class","relative group"),l(At,"href","/docs/transformers/pr_16018/en/model_doc/convnext#transformers.ConvNextModel"),l(pe,"class","docstring"),l(Me,"id","transformers.ConvNextConfig"),l(Me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Me,"href","#transformers.ConvNextConfig"),l(me,"class","relative group"),l(Ot,"href","/docs/transformers/pr_16018/en/model_doc/convnext#transformers.ConvNextModel"),l(Qe,"href","https://huggingface.co/facebook/convnext-tiny-224"),l(Qe,"rel","nofollow"),l(Lt,"href","/docs/transformers/pr_16018/en/main_classes/configuration#transformers.PretrainedConfig"),l(Dt,"href","/docs/transformers/pr_16018/en/main_classes/configuration#transformers.PretrainedConfig"),l(D,"class","docstring"),l(je,"id","transformers.ConvNextFeatureExtractor"),l(je,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(je,"href","#transformers.ConvNextFeatureExtractor"),l(ve,"class","relative group"),l(St,"href","/docs/transformers/pr_16018/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin"),l(ee,"class","docstring"),l(Ie,"id","transformers.ConvNextModel"),l(Ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Ie,"href","#transformers.ConvNextModel"),l(_e,"class","relative group"),l(it,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),l(it,"rel","nofollow"),l(Xt,"href","/docs/transformers/pr_16018/en/model_doc/convnext#transformers.ConvNextModel"),l(V,"class","docstring"),l(te,"class","docstring"),l(qe,"id","transformers.ConvNextForImageClassification"),l(qe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(qe,"href","#transformers.ConvNextForImageClassification"),l(we,"class","relative group"),l(pt,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),l(pt,"rel","nofollow"),l(Vt,"href","/docs/transformers/pr_16018/en/model_doc/convnext#transformers.ConvNextForImageClassification"),l(H,"class","docstring"),l(B,"class","docstring"),l(Ae,"id","transformers.TFConvNextModel"),l(Ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Ae,"href","#transformers.TFConvNextModel"),l(Te,"class","relative group"),l(Ht,"href","/docs/transformers/pr_16018/en/main_classes/model#transformers.TFPreTrainedModel"),l(wt,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),l(wt,"rel","nofollow"),l(Ut,"href","/docs/transformers/pr_16018/en/model_doc/convnext#transformers.TFConvNextModel"),l(U,"class","docstring"),l(S,"class","docstring"),l(De,"id","transformers.TFConvNextForImageClassification"),l(De,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(De,"href","#transformers.TFConvNextForImageClassification"),l(ye,"class","relative group"),l(Wt,"href","/docs/transformers/pr_16018/en/main_classes/model#transformers.TFPreTrainedModel"),l(Et,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),l(Et,"rel","nofollow"),l(Bt,"href","/docs/transformers/pr_16018/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),l(W,"class","docstring"),l(q,"class","docstring")},m(t,f){e(document.head,p),h(t,E,f),h(t,m,f),e(m,u),e(u,x),b(v,x,null),e(m,_),e(m,F),e(F,Y),h(t,X,f),h(t,w,f),e(w,z),e(z,j),b(L,j,null),e(w,J),e(w,I),e(I,Q),h(t,K,f),h(t,g,f),e(g,k),e(g,P),e(P,ce),e(g,de),h(t,M,f),h(t,R,f),e(R,fe),h(t,Ao,f),h(t,It,f),e(It,oo),e(oo,Tn),h(t,Oo,f),h(t,Pt,f),e(Pt,bn),h(t,Lo,f),h(t,qt,f),e(qt,no),e(no,yn),h(t,Do,f),h(t,Ee,f),h(t,So,f),h(t,Fe,f),e(Fe,Nn),e(Fe,zt),e(zt,$n),e(Fe,En),h(t,Xo,f),h(t,A,f),e(A,Fn),e(A,He),e(He,kn),e(A,Mn),e(A,Ue),e(Ue,jn),e(A,In),e(A,We),e(We,Pn),e(A,qn),e(A,Be),e(Be,zn),e(A,An),e(A,Ke),e(Ke,On),e(A,Ln),h(t,Vo,f),h(t,he,f),e(he,ke),e(ke,so),b(Re,so,null),e(he,Dn),e(he,ao),e(ao,Sn),h(t,Ho,f),h(t,pe,f),b(Ge,pe,null),e(pe,Xn),e(pe,Ze),e(Ze,Vn),e(Ze,At),e(At,Hn),e(Ze,Un),h(t,Uo,f),h(t,me,f),e(me,Me),e(Me,ro),b(Ye,ro,null),e(me,Wn),e(me,io),e(io,Bn),h(t,Wo,f),h(t,D,f),b(Je,D,null),e(D,Kn),e(D,ue),e(ue,Rn),e(ue,Ot),e(Ot,Gn),e(ue,Zn),e(ue,Qe),e(Qe,Yn),e(ue,Jn),e(D,Qn),e(D,ge),e(ge,es),e(ge,Lt),e(Lt,ts),e(ge,os),e(ge,Dt),e(Dt,ns),e(ge,ss),e(D,as),e(D,lo),e(lo,rs),e(D,is),b(et,D,null),h(t,Bo,f),h(t,ve,f),e(ve,je),e(je,co),b(tt,co,null),e(ve,ls),e(ve,fo),e(fo,cs),h(t,Ko,f),h(t,ee,f),b(ot,ee,null),e(ee,ds),e(ee,ho),e(ho,fs),e(ee,hs),e(ee,nt),e(nt,ps),e(nt,St),e(St,ms),e(nt,us),h(t,Ro,f),h(t,_e,f),e(_e,Ie),e(Ie,po),b(st,po,null),e(_e,gs),e(_e,mo),e(mo,vs),h(t,Go,f),h(t,te,f),b(at,te,null),e(te,_s),e(te,rt),e(rt,xs),e(rt,it),e(it,ws),e(rt,Cs),e(te,Ts),e(te,V),b(lt,V,null),e(V,bs),e(V,xe),e(xe,ys),e(xe,Xt),e(Xt,Ns),e(xe,$s),e(xe,uo),e(uo,Es),e(xe,Fs),e(V,ks),b(Pe,V,null),e(V,Ms),e(V,go),e(go,js),e(V,Is),b(ct,V,null),h(t,Zo,f),h(t,we,f),e(we,qe),e(qe,vo),b(dt,vo,null),e(we,Ps),e(we,_o),e(_o,qs),h(t,Yo,f),h(t,B,f),b(ft,B,null),e(B,zs),e(B,xo),e(xo,As),e(B,Os),e(B,ht),e(ht,Ls),e(ht,pt),e(pt,Ds),e(ht,Ss),e(B,Xs),e(B,H),b(mt,H,null),e(H,Vs),e(H,Ce),e(Ce,Hs),e(Ce,Vt),e(Vt,Us),e(Ce,Ws),e(Ce,wo),e(wo,Bs),e(Ce,Ks),e(H,Rs),b(ze,H,null),e(H,Gs),e(H,Co),e(Co,Zs),e(H,Ys),b(ut,H,null),h(t,Jo,f),h(t,Te,f),e(Te,Ae),e(Ae,To),b(gt,To,null),e(Te,Js),e(Te,bo),e(bo,Qs),h(t,Qo,f),h(t,S,f),b(vt,S,null),e(S,ea),e(S,_t),e(_t,ta),e(_t,Ht),e(Ht,oa),e(_t,na),e(S,sa),e(S,xt),e(xt,aa),e(xt,wt),e(wt,ra),e(xt,ia),e(S,la),b(Oe,S,null),e(S,ca),e(S,U),b(Ct,U,null),e(U,da),e(U,be),e(be,fa),e(be,Ut),e(Ut,ha),e(be,pa),e(be,yo),e(yo,ma),e(be,ua),e(U,ga),b(Le,U,null),e(U,va),e(U,No),e(No,_a),e(U,xa),b(Tt,U,null),h(t,en,f),h(t,ye,f),e(ye,De),e(De,$o),b(bt,$o,null),e(ye,wa),e(ye,Eo),e(Eo,Ca),h(t,tn,f),h(t,q,f),b(yt,q,null),e(q,Ta),e(q,Fo),e(Fo,ba),e(q,ya),e(q,Nt),e(Nt,Na),e(Nt,Wt),e(Wt,$a),e(Nt,Ea),e(q,Fa),e(q,$t),e($t,ka),e($t,Et),e(Et,Ma),e($t,ja),e(q,Ia),b(Se,q,null),e(q,Pa),e(q,W),b(Ft,W,null),e(W,qa),e(W,Ne),e(Ne,za),e(Ne,Bt),e(Bt,Aa),e(Ne,Oa),e(Ne,ko),e(ko,La),e(Ne,Da),e(W,Sa),b(Xe,W,null),e(W,Xa),e(W,Mo),e(Mo,Va),e(W,Ha),b(kt,W,null),on=!0},p(t,[f]){const Mt={};f&2&&(Mt.$$scope={dirty:f,ctx:t}),Pe.$set(Mt);const jo={};f&2&&(jo.$$scope={dirty:f,ctx:t}),ze.$set(jo);const Io={};f&2&&(Io.$$scope={dirty:f,ctx:t}),Oe.$set(Io);const Po={};f&2&&(Po.$$scope={dirty:f,ctx:t}),Le.$set(Po);const jt={};f&2&&(jt.$$scope={dirty:f,ctx:t}),Se.$set(jt);const qo={};f&2&&(qo.$$scope={dirty:f,ctx:t}),Xe.$set(qo)},i(t){on||(y(v.$$.fragment,t),y(L.$$.fragment,t),y(Re.$$.fragment,t),y(Ge.$$.fragment,t),y(Ye.$$.fragment,t),y(Je.$$.fragment,t),y(et.$$.fragment,t),y(tt.$$.fragment,t),y(ot.$$.fragment,t),y(st.$$.fragment,t),y(at.$$.fragment,t),y(lt.$$.fragment,t),y(Pe.$$.fragment,t),y(ct.$$.fragment,t),y(dt.$$.fragment,t),y(ft.$$.fragment,t),y(mt.$$.fragment,t),y(ze.$$.fragment,t),y(ut.$$.fragment,t),y(gt.$$.fragment,t),y(vt.$$.fragment,t),y(Oe.$$.fragment,t),y(Ct.$$.fragment,t),y(Le.$$.fragment,t),y(Tt.$$.fragment,t),y(bt.$$.fragment,t),y(yt.$$.fragment,t),y(Se.$$.fragment,t),y(Ft.$$.fragment,t),y(Xe.$$.fragment,t),y(kt.$$.fragment,t),on=!0)},o(t){N(v.$$.fragment,t),N(L.$$.fragment,t),N(Re.$$.fragment,t),N(Ge.$$.fragment,t),N(Ye.$$.fragment,t),N(Je.$$.fragment,t),N(et.$$.fragment,t),N(tt.$$.fragment,t),N(ot.$$.fragment,t),N(st.$$.fragment,t),N(at.$$.fragment,t),N(lt.$$.fragment,t),N(Pe.$$.fragment,t),N(ct.$$.fragment,t),N(dt.$$.fragment,t),N(ft.$$.fragment,t),N(mt.$$.fragment,t),N(ze.$$.fragment,t),N(ut.$$.fragment,t),N(gt.$$.fragment,t),N(vt.$$.fragment,t),N(Oe.$$.fragment,t),N(Ct.$$.fragment,t),N(Le.$$.fragment,t),N(Tt.$$.fragment,t),N(bt.$$.fragment,t),N(yt.$$.fragment,t),N(Se.$$.fragment,t),N(Ft.$$.fragment,t),N(Xe.$$.fragment,t),N(kt.$$.fragment,t),on=!1},d(t){o(p),t&&o(E),t&&o(m),$(v),t&&o(X),t&&o(w),$(L),t&&o(K),t&&o(g),t&&o(M),t&&o(R),t&&o(Ao),t&&o(It),t&&o(Oo),t&&o(Pt),t&&o(Lo),t&&o(qt),t&&o(Do),t&&o(Ee),t&&o(So),t&&o(Fe),t&&o(Xo),t&&o(A),t&&o(Vo),t&&o(he),$(Re),t&&o(Ho),t&&o(pe),$(Ge),t&&o(Uo),t&&o(me),$(Ye),t&&o(Wo),t&&o(D),$(Je),$(et),t&&o(Bo),t&&o(ve),$(tt),t&&o(Ko),t&&o(ee),$(ot),t&&o(Ro),t&&o(_e),$(st),t&&o(Go),t&&o(te),$(at),$(lt),$(Pe),$(ct),t&&o(Zo),t&&o(we),$(dt),t&&o(Yo),t&&o(B),$(ft),$(mt),$(ze),$(ut),t&&o(Jo),t&&o(Te),$(gt),t&&o(Qo),t&&o(S),$(vt),$(Oe),$(Ct),$(Le),$(Tt),t&&o(en),t&&o(ye),$(bt),t&&o(tn),t&&o(q),$(yt),$(Se),$(Ft),$(Xe),$(kt)}}}const pi={local:"convnext",sections:[{local:"overview",title:"Overview"},{local:"transformers.models.convnext.modeling_convnext.ConvNextModelOutput",title:"ConvNeXT specific outputs"},{local:"transformers.ConvNextConfig",title:"ConvNextConfig"},{local:"transformers.ConvNextFeatureExtractor",title:"ConvNextFeatureExtractor"},{local:"transformers.ConvNextModel",title:"ConvNextModel"},{local:"transformers.ConvNextForImageClassification",title:"ConvNextForImageClassification"},{local:"transformers.TFConvNextModel",title:"TFConvNextModel"},{local:"transformers.TFConvNextForImageClassification",title:"TFConvNextForImageClassification"}],title:"ConvNeXT"};function mi(O,p,E){let{fw:m}=p;return O.$$set=u=>{"fw"in u&&E(0,m=u.fw)},[m]}class Ci extends ti{constructor(p){super();oi(this,p,mi,hi,ni,{fw:0})}}export{Ci as default,pi as metadata};
