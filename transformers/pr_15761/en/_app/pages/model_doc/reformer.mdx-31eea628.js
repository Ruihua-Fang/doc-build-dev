import{S as Ou,i as Iu,s as Wu,e as o,k as m,w as u,t,W as x,L as Qu,c as r,d as a,m as p,a as i,x as f,h as n,X as T,b as l,J as s,g as h,y as _,q as v,o as y,B as b}from"../../chunks/vendor-9e2b328e.js";import{T as Jn}from"../../chunks/Tip-76f97a76.js";import{D as Y}from"../../chunks/Docstring-50fd6873.js";import{C as ye}from"../../chunks/CodeBlock-88e23343.js";import{I as V}from"../../chunks/IconCopyLink-fd0e58fd.js";import"../../chunks/CopyButton-4ae140ab.js";function Ku(G){let d,M,g,z,R;return{c(){d=o("p"),M=t("Although the recipe for forward pass needs to be defined within this function, one should call the "),g=o("code"),z=t("Module"),R=t(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(w){d=r(w,"P",{});var k=i(d);M=n(k,"Although the recipe for forward pass needs to be defined within this function, one should call the "),g=r(k,"CODE",{});var L=i(g);z=n(L,"Module"),L.forEach(a),R=n(k,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),k.forEach(a)},m(w,k){h(w,d,k),s(d,M),s(d,g),s(g,z),s(d,R)},d(w){w&&a(d)}}}function Uu(G){let d,M,g,z,R;return{c(){d=o("p"),M=t("Although the recipe for forward pass needs to be defined within this function, one should call the "),g=o("code"),z=t("Module"),R=t(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(w){d=r(w,"P",{});var k=i(d);M=n(k,"Although the recipe for forward pass needs to be defined within this function, one should call the "),g=r(k,"CODE",{});var L=i(g);z=n(L,"Module"),L.forEach(a),R=n(k,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),k.forEach(a)},m(w,k){h(w,d,k),s(d,M),s(d,g),s(g,z),s(d,R)},d(w){w&&a(d)}}}function Bu(G){let d,M,g,z,R;return{c(){d=o("p"),M=t("Although the recipe for forward pass needs to be defined within this function, one should call the "),g=o("code"),z=t("Module"),R=t(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(w){d=r(w,"P",{});var k=i(d);M=n(k,"Although the recipe for forward pass needs to be defined within this function, one should call the "),g=r(k,"CODE",{});var L=i(g);z=n(L,"Module"),L.forEach(a),R=n(k,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),k.forEach(a)},m(w,k){h(w,d,k),s(d,M),s(d,g),s(g,z),s(d,R)},d(w){w&&a(d)}}}function Xu(G){let d,M,g,z,R;return{c(){d=o("p"),M=t("Although the recipe for forward pass needs to be defined within this function, one should call the "),g=o("code"),z=t("Module"),R=t(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(w){d=r(w,"P",{});var k=i(d);M=n(k,"Although the recipe for forward pass needs to be defined within this function, one should call the "),g=r(k,"CODE",{});var L=i(g);z=n(L,"Module"),L.forEach(a),R=n(k,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),k.forEach(a)},m(w,k){h(w,d,k),s(d,M),s(d,g),s(g,z),s(d,R)},d(w){w&&a(d)}}}function Vu(G){let d,M,g,z,R;return{c(){d=o("p"),M=t("Although the recipe for forward pass needs to be defined within this function, one should call the "),g=o("code"),z=t("Module"),R=t(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(w){d=r(w,"P",{});var k=i(d);M=n(k,"Although the recipe for forward pass needs to be defined within this function, one should call the "),g=r(k,"CODE",{});var L=i(g);z=n(L,"Module"),L.forEach(a),R=n(k,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),k.forEach(a)},m(w,k){h(w,d,k),s(d,M),s(d,g),s(g,z),s(d,R)},d(w){w&&a(d)}}}function Gu(G){let d,M,g,z,R,w,k,L,xi,Yn,ws,Tt,Ti,Mi,be,Ri,$i,Zn,zs,Bs,Mt,ke,qi,Rt,Ei,so,Xs,Li,we,Fi,Pi,eo,Qa,Ci,ao,Ka,$t,Ai,to,is,Si,ze,ji,Ni,xe,Di,Hi,no,Te,qt,Oi,Ii,oo,Ua,ls,Wi,Et,Qi,Ki,Lt,Ui,Bi,Me,Xi,ro,xs,Vs,Ft,Re,Vi,Pt,Gi,io,$,Ji,$e,Yi,Zi,lo,hu='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span></span></span></span>',mo,Ct,sl,el,po,du='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo separator="true">,</mo><mo>\u2026</mo><mo separator="true">,</mo><msub><mi>n</mi><mi>s</mi></msub></mrow><annotation encoding="application/x-tex">i, \\ldots, n_s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">\u2026</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>',co,ho,gu='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>s</mi></msub></mrow><annotation encoding="application/x-tex">n_s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>',go,At,al,tl,uo,uu='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>s</mi></msub><mo>=</mo><msup><mn>2</mn><mn>19</mn></msup><mo>\u2248</mo><mn>0.5</mn><mi>M</mi></mrow><annotation encoding="application/x-tex">n_s = 2^{19} \\approx 0.5M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">19</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">\u2248</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">0.5</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span>',fo,St,nl,ol,_o,fu='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mo>=</mo><msup><mn>2</mn><mn>10</mn></msup><mo>\u2248</mo><mn>1000</mn></mrow><annotation encoding="application/x-tex">d = 2^{10} \\approx 1000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">10</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">\u2248</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1000</span></span></span></span>',vo,yo,_u='<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>X</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo separator="true">,</mo><mtext>\xA0with\xA0</mtext><mi>i</mi><mo>\u2208</mo><mrow><mo fence="true">[</mo><mn>1</mn><mo separator="true">,</mo><mo>\u2026</mo><mo separator="true">,</mo><mi>d</mi><mo fence="true">]</mo></mrow><mtext>\xA0and\xA0</mtext><mi>j</mi><mo>\u2208</mo><mrow><mo fence="true">[</mo><mn>1</mn><mo separator="true">,</mo><mo>\u2026</mo><mo separator="true">,</mo><msub><mi>n</mi><mi>s</mi></msub><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">X_{i,j}, \\text{ with } i \\in \\left[1,\\ldots, d\\right] \\text{ and } j \\in \\left[1,\\ldots, n_s\\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9805em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord text"><span class="mord">\xA0with\xA0</span></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">\u2208</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">\u2026</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mclose delimcenter" style="top:0em;">]</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord text"><span class="mord">\xA0and\xA0</span></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">\u2208</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">\u2026</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">]</span></span></span></span></span></span>',bo,Ts,rl,ko,vu='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>X</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">X_{i,j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>',wo,zo,yu='<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msubsup><mi>X</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow><mn>1</mn></msubsup><mo separator="true">,</mo><mtext>\xA0with\xA0</mtext><mi>i</mi><mo>\u2208</mo><mrow><mo fence="true">[</mo><mn>1</mn><mo separator="true">,</mo><mo>\u2026</mo><mo separator="true">,</mo><msup><mi>d</mi><mn>1</mn></msup><mo fence="true">]</mo></mrow><mtext>\xA0and\xA0</mtext><mi>j</mi><mo>\u2208</mo><mrow><mo fence="true">[</mo><mn>1</mn><mo separator="true">,</mo><mo>\u2026</mo><mo separator="true">,</mo><msubsup><mi>n</mi><mi>s</mi><mn>1</mn></msubsup><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">X^{1}_{i,j}, \\text{ with } i \\in \\left[1,\\ldots, d^1\\right] \\text{ and } j \\in \\left[1,\\ldots, n_s^1\\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2472em;vertical-align:-0.3831em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-2.453em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.3831em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord text"><span class="mord">\xA0with\xA0</span></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">\u2208</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2141em;vertical-align:-0.35em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">\u2026</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">]</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord text"><span class="mord">\xA0and\xA0</span></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">\u2208</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2141em;vertical-align:-0.35em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">\u2026</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">]</span></span></span></span></span></span></span>',xo,qe,il,To,bu='<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msubsup><mi>X</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow><mn>2</mn></msubsup><mo separator="true">,</mo><mtext>\xA0with\xA0</mtext><mi>i</mi><mo>\u2208</mo><mrow><mo fence="true">[</mo><mn>1</mn><mo separator="true">,</mo><mo>\u2026</mo><mo separator="true">,</mo><msup><mi>d</mi><mn>2</mn></msup><mo fence="true">]</mo></mrow><mtext>\xA0and\xA0</mtext><mi>j</mi><mo>\u2208</mo><mrow><mo fence="true">[</mo><mn>1</mn><mo separator="true">,</mo><mo>\u2026</mo><mo separator="true">,</mo><msubsup><mi>n</mi><mi>s</mi><mn>2</mn></msubsup><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">X^{2}_{i,j}, \\text{ with } i \\in \\left[1,\\ldots, d^2\\right] \\text{ and } j \\in \\left[1,\\ldots, n_s^2\\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2472em;vertical-align:-0.3831em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-2.453em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.3831em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord text"><span class="mord">\xA0with\xA0</span></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">\u2208</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2141em;vertical-align:-0.35em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">\u2026</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">]</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord text"><span class="mord">\xA0and\xA0</span></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">\u2208</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2141em;vertical-align:-0.35em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">\u2026</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">]</span></span></span></span></span></span></span>',Mo,Ee,ll,Ro,ku='<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>d</mi><mo>=</mo><msup><mi>d</mi><mn>1</mn></msup><mo>+</mo><msup><mi>d</mi><mn>2</mn></msup><mtext>\xA0and\xA0</mtext><msub><mi>n</mi><mi>s</mi></msub><mo>=</mo><msubsup><mi>n</mi><mi>s</mi><mn>1</mn></msubsup><mo>\xD7</mo><msubsup><mi>n</mi><mi>s</mi><mn>2</mn></msubsup><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">d = d^1 + d^2 \\text{ and } n_s = n_s^1 \\times n_s^2 .</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9474em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0141em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord text"><span class="mord">\xA0and\xA0</span></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1111em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">\xD7</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1111em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mord">.</span></span></span></span></span>',$o,Le,ml,qo,wu=`<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>X</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msubsup><mi>X</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>k</mi></mrow><mn>1</mn></msubsup><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>if\xA0\xA0</mtext><mi>i</mi><mo>&lt;</mo><msup><mi>d</mi><mn>1</mn></msup><mtext>\xA0with\xA0</mtext><mi>k</mi><mo>=</mo><mi>j</mi><mspace></mspace><mspace width="0.6667em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext>\u2009</mtext><mtext>\u2009</mtext><msubsup><mi>n</mi><mi>s</mi><mn>1</mn></msubsup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msubsup><mi>X</mi><mrow><mi>i</mi><mo>\u2212</mo><msup><mi>d</mi><mn>1</mn></msup><mo separator="true">,</mo><mi>l</mi></mrow><mn>2</mn></msubsup><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>if\xA0</mtext><mi>i</mi><mo>\u2265</mo><msup><mi>d</mi><mn>1</mn></msup><mtext>\xA0with\xA0</mtext><mi>l</mi><mo>=</mo><mo stretchy="false">\u230A</mo><mfrac><mi>j</mi><msubsup><mi>n</mi><mi>s</mi><mn>1</mn></msubsup></mfrac><mo stretchy="false">\u230B</mo></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">X_{i,j} = \\begin{cases}
X^{1}_{i, k}, &amp; \\text{if }\\ i &lt; d^1 \\text{ with } k = j \\mod n_s^1 \\\\
X^{2}_{i - d^1, l}, &amp; \\text{if } i \\ge d^1 \\text{ with } l = \\lfloor\\frac{j}{n_s^1}\\rfloor
\\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7466em;"><span style="top:-3.7466em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4169em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192em;"><span></span></span></span></span></span></span><span class="mpunct">,</span></span></span><span style="top:-2.3066em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.3806em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">\u2212</span><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.4555em;"><span></span></span></span></span></span></span><span class="mpunct">,</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:1.2466em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7466em;"><span style="top:-3.7466em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if\xA0</span></span><span class="mspace">\xA0</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mord text"><span class="mord">\xA0with\xA0</span></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6667em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.3066em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if\xA0</span></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">\u2265</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mord text"><span class="mord">\xA0with\xA0</span></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">\u230A</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9078em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7463em;"><span style="top:-2.214em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">s</span></span></span><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.286em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4461em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.5452em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">\u230B</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:1.2466em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span>`,Eo,F,pl,Lo,zu='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>j</mi></msub><mo>\u2208</mo><msup><mi mathvariant="double-struck">R</mi><mi>d</mi></msup></mrow><annotation encoding="application/x-tex">x_j \\in \\mathbb{R}^{d}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8252em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">\u2208</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord mathbb">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span></span></span></span></span>',Fo,Po,xu='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>x</mi><mrow><mi>k</mi><mo separator="true">,</mo><mi>l</mi></mrow><mn>1</mn></msubsup><mo>+</mo><msubsup><mi>x</mi><mrow><mi>l</mi><mo separator="true">,</mo><mi>k</mi></mrow><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">x^1_{k, l} + x^2_{l, k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2333em;vertical-align:-0.4192em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4169em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.2333em;vertical-align:-0.4192em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4169em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192em;"><span></span></span></span></span></span></span></span></span></span>',Co,jt,cl,hl,Ao,Tu='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span>',So,jo,Mu='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mtext>\xA0and\xA0</mtext><mi>l</mi></mrow><annotation encoding="application/x-tex">k \\text{ and } l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord text"><span class="mord">\xA0and\xA0</span></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span></span></span></span>',No,Do,Ru='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">x_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>',Ho,Oo,ms,dl,Io,$u='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>d</mi><mn>1</mn></msup><mo>=</mo><msup><mn>2</mn><mn>5</mn></msup><mo separator="true">,</mo><msup><mi>d</mi><mn>2</mn></msup><mo>=</mo><msup><mn>2</mn><mn>5</mn></msup><mo separator="true">,</mo><msubsup><mi>n</mi><mi>s</mi><mn>1</mn></msubsup><mo>=</mo><msup><mn>2</mn><mn>9</mn></msup><mo separator="true">,</mo><msubsup><mi>n</mi><mi>s</mi><mn>2</mn></msubsup><mo>=</mo><msup><mn>2</mn><mn>10</mn></msup></mrow><annotation encoding="application/x-tex">d^1 = 2^5, d^2 = 2^5, n_s^1 = 2^9, n_s^2 = 2^{10}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0611em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0611em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">10</span></span></span></span></span></span></span></span></span></span></span></span>',Wo,Qo,qu='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>14</mn></msup><mo>+</mo><msup><mn>2</mn><mn>15</mn></msup><mo>\u2248</mo><mn>49000</mn></mrow><annotation encoding="application/x-tex">2^{14} + 2^{15} \\approx 49000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">14</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">15</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">\u2248</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">49000</span></span></span></span>',Ko,Uo,q,gl,Nt,ul,fl,Bo,Eu='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msup><mi>d</mi><mn>1</mn></msup><mo separator="true">,</mo><msup><mi>d</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(d^1, d^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>',Xo,Dt,_l,vl,Ht,yl,bl,Vo,Lu='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msubsup><mi>n</mi><mi>s</mi><mn>1</mn></msubsup><mo separator="true">,</mo><msubsup><mi>n</mi><mi>s</mi><mn>2</mn></msubsup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(n_s^1, n_s^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>',Go,Ot,kl,wl,It,zl,xl,Wt,Tl,Ml,Jo,Ms,Gs,Qt,Fe,Rl,Kt,$l,Yo,Z,ql,Pe,El,Ll,Ut,Fl,Pl,Bt,Cl,Al,Zo,j,Sl,Xt,jl,Nl,Vt,Dl,Hl,Gt,Ol,Il,Jt,Wl,Ql,Yt,Kl,Ul,sr,ps,Bl,Ce,Xl,Vl,Ae,Gl,Jl,er,I,Yl,Zt,Zl,sm,ar,Fu=`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msubsup><mi>n</mi><mtext>buckets</mtext><mn>1</mn></msubsup><mo separator="true">,</mo><msubsup><mi>n</mi><mtext>buckets</mtext><mn>2</mn></msubsup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(n_{\\text{buckets}}^1,
n_{\\text{buckets}}^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0972em;vertical-align:-0.2831em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4169em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">buckets</span></span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.2831em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4169em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">buckets</span></span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.2831em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>`,tr,nr,Pu=`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mo>\u2026</mo><mo separator="true">,</mo><msub><mi>n</mi><mtext>buckets</mtext></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(1,\\ldots,
n_{\\text{buckets}})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">\u2026</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">buckets</span></span></span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>`,or,rr,Cu=`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>\u2212</mo><mn>1</mn><mo separator="true">,</mo><mo>\u2026</mo><mo separator="true">,</mo><msubsup><mi>n</mi><mtext>buckets</mtext><mn>1</mn></msubsup><mo>\u2212</mo><mn>1</mn><mo separator="true">,</mo><mo>\u2026</mo><mo separator="true">,</mo><mn>1</mn><mo>\u2212</mo><msubsup><mi>n</mi><mtext>buckets</mtext><mn>2</mn></msubsup><mo separator="true">,</mo><mo>\u2026</mo><mo separator="true">,</mo><msubsup><mi>n</mi><mtext>buckets</mtext><mn>1</mn></msubsup><mo>\u2212</mo><msubsup><mi>n</mi><mtext>buckets</mtext><mn>2</mn></msubsup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(1-1,\\ldots, n_{\\text{buckets}}^1-1, \\ldots,
1-n_{\\text{buckets}}^2, \\ldots, n_{\\text{buckets}}^1-n_{\\text{buckets}}^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">\u2212</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0972em;vertical-align:-0.2831em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">\u2026</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4169em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">buckets</span></span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.2831em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">\u2212</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">\u2026</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">\u2212</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0972em;vertical-align:-0.2831em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4169em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">buckets</span></span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.2831em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">\u2026</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4169em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">buckets</span></span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.2831em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">\u2212</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0972em;vertical-align:-0.2831em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4169em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">buckets</span></span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.2831em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>`,ir,lr,cs,em,sn,am,tm,en,nm,om,mr,ss,rm,pr,Au='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">O</mi><mo stretchy="false">(</mo><msub><mi>n</mi><mi>s</mi></msub><mo>\xD7</mo><msub><mi>n</mi><mi>s</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\\mathcal{O}(n_s \\times n_s)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathcal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">\xD7</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>',cr,hr,Su='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">O</mi><mo stretchy="false">(</mo><msub><mi>n</mi><mi>s</mi></msub><mo>\xD7</mo><mi>log</mi><mo>\u2061</mo><mo stretchy="false">(</mo><msub><mi>n</mi><mi>s</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\\mathcal{O}(n_s \\times \\log(n_s))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathcal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">\xD7</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">))</span></span></span></span>',dr,gr,ju='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>s</mi></msub></mrow><annotation encoding="application/x-tex">n_s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>',ur,fr,Rs,Js,an,Se,im,tn,lm,_r,es,mm,nn,pm,cm,on,hm,dm,rn,gm,um,vr,as,fm,yr,Nu='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">O</mi><mo stretchy="false">(</mo><msub><mi>n</mi><mi>s</mi></msub><mo>\xD7</mo><msub><mi>n</mi><mi>s</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\\mathcal{O}(n_s \\times n_s)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathcal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">\xD7</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>',br,kr,Du='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">O</mi><mo stretchy="false">(</mo><msub><mi>n</mi><mi>s</mi></msub><mo>\xD7</mo><mi>log</mi><mo>\u2061</mo><mo stretchy="false">(</mo><msub><mi>n</mi><mi>s</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\\mathcal{O}(n_s \\times \\log(n_s))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathcal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">\xD7</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">))</span></span></span></span>',wr,zr,Hu='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>s</mi></msub></mrow><annotation encoding="application/x-tex">n_s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>',xr,Tr,$s,Ys,ln,je,_m,mn,vm,Mr,hs,ym,pn,bm,km,cn,wm,zm,Rr,Zs,xm,Ba,Tm,Mm,$r,Ne,qr,qs,se,hn,De,Rm,dn,$m,Er,N,He,qm,Oe,Em,Xa,Lm,Fm,Pm,Es,Cm,Va,Am,Sm,Ga,jm,Nm,Dm,gn,Hm,Om,Ie,Lr,Ls,ee,un,We,Im,fn,Wm,Fr,J,Qe,Qm,Ke,Km,Ue,Um,Bm,Xm,Be,Vm,Ja,Gm,Jm,Ym,_n,Pr,Fs,ae,vn,Xe,Zm,yn,sp,Cr,rs,Ve,ep,Ps,ap,bn,tp,np,Ge,op,rp,ip,Je,lp,Ya,mp,pp,Ar,Cs,te,kn,Ye,cp,wn,hp,Sr,D,Ze,dp,sa,gp,ea,up,fp,_p,aa,vp,Za,yp,bp,kp,ta,wp,na,zp,xp,Tp,W,oa,Mp,As,Rp,st,$p,qp,zn,Ep,Lp,Fp,ne,Pp,xn,Cp,Ap,ra,jr,Ss,oe,Tn,ia,Sp,Mn,jp,Nr,H,la,Np,js,Dp,Rn,Hp,Op,ma,Ip,Wp,Qp,pa,Kp,et,Up,Bp,Xp,ca,Vp,ha,Gp,Jp,Yp,Q,da,Zp,Ns,sc,at,ec,ac,$n,tc,nc,oc,re,rc,qn,ic,lc,ga,Dr,Ds,ie,En,ua,mc,Ln,pc,Hr,O,fa,cc,Hs,hc,Fn,dc,gc,_a,uc,fc,_c,va,vc,tt,yc,bc,kc,ya,wc,ba,zc,xc,Tc,K,ka,Mc,Os,Rc,nt,$c,qc,Pn,Ec,Lc,Fc,le,Pc,Cn,Cc,Ac,wa,Or,Is,me,An,za,Sc,Sn,jc,Ir,A,xa,Nc,jn,Dc,Hc,Ta,Oc,Ma,Ic,Wc,Qc,Ra,Kc,ot,Uc,Bc,Xc,$a,Vc,qa,Gc,Jc,Yc,P,Ea,Zc,Ws,sh,rt,eh,ah,Nn,th,nh,oh,pe,rh,Dn,ih,lh,La,mh,Hn,ph,ch,Fa,Wr,Qs,ce,On,Pa,hh,In,dh,Qr,S,Ca,gh,Ks,uh,Wn,fh,_h,Qn,vh,yh,bh,Aa,kh,Sa,wh,zh,xh,ja,Th,it,Mh,Rh,$h,Na,qh,Da,Eh,Lh,Fh,U,Ha,Ph,Us,Ch,lt,Ah,Sh,Kn,jh,Nh,Dh,he,Hh,Un,Oh,Ih,Oa,Kr;return w=new V({}),ke=new V({}),Re=new V({}),Fe=new V({}),Se=new V({}),je=new V({}),Ne=new ye({props:{code:`input_ids = tokenizer.encode("This is a sentence from the training data", return_tensors="pt")
loss = model(input_ids, labels=input_ids)[0],`,highlighted:`input_ids = tokenizer.encode(<span class="hljs-string">&quot;This is a sentence from the training data&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
loss = model(input_ids, labels=input_ids)[<span class="hljs-number">0</span>]`}}),De=new V({}),He=new Y({props:{name:"class transformers.ReformerConfig",anchor:"transformers.ReformerConfig",parameters:[{name:"attention_head_size",val:" = 64"},{name:"attn_layers",val:" = ['local', 'lsh', 'local', 'lsh', 'local', 'lsh']"},{name:"axial_norm_std",val:" = 1.0"},{name:"axial_pos_embds",val:" = True"},{name:"axial_pos_shape",val:" = [64, 64]"},{name:"axial_pos_embds_dim",val:" = [64, 192]"},{name:"chunk_size_lm_head",val:" = 0"},{name:"eos_token_id",val:" = 2"},{name:"feed_forward_size",val:" = 512"},{name:"hash_seed",val:" = None"},{name:"hidden_act",val:" = 'relu'"},{name:"hidden_dropout_prob",val:" = 0.05"},{name:"hidden_size",val:" = 256"},{name:"initializer_range",val:" = 0.02"},{name:"is_decoder",val:" = False"},{name:"layer_norm_eps",val:" = 1e-12"},{name:"local_num_chunks_before",val:" = 1"},{name:"local_num_chunks_after",val:" = 0"},{name:"local_attention_probs_dropout_prob",val:" = 0.05"},{name:"local_attn_chunk_length",val:" = 64"},{name:"lsh_attn_chunk_length",val:" = 64"},{name:"lsh_attention_probs_dropout_prob",val:" = 0.0"},{name:"lsh_num_chunks_before",val:" = 1"},{name:"lsh_num_chunks_after",val:" = 0"},{name:"max_position_embeddings",val:" = 4096"},{name:"num_attention_heads",val:" = 12"},{name:"num_buckets",val:" = None"},{name:"num_hashes",val:" = 1"},{name:"pad_token_id",val:" = 0"},{name:"vocab_size",val:" = 320"},{name:"tie_word_embeddings",val:" = False"},{name:"use_cache",val:" = True"},{name:"classifier_dropout",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15761/src/transformers/models/reformer/configuration_reformer.py#L30",parametersDescription:[{anchor:"transformers.ReformerConfig.attention_head_size",description:`<strong>attention_head_size</strong> (<code>int</code>, <em>optional</em>, defaults to 64) &#x2014;
Dimensionality of the projected key, query and value vectors`,name:"attention_head_size"},{anchor:"transformers.ReformerConfig.attn_layers",description:`<strong>attn_layers</strong> (<code>List[str]</code>, <em>optional</em>, defaults to <code>[&quot;local&quot;, &quot;lsh&quot;, &quot;local&quot;, &quot;lsh&quot;, &quot;local&quot;, &quot;lsh&quot;]</code>) &#x2014;
List of attention layer types in ascending order. It can be chosen between a LSHSelfAttention layer
(<code>&quot;lsh&quot;</code>) and a LocalSelfAttention layer (<code>&quot;local&quot;</code>).</p>
<p>For more information on LSHSelfAttention layer, see <a href="reformer#lsh-self-attention">LSH Self Attention</a>. For
more information on LocalSelfAttention layer, see <a href="reformer#local-self-attention">Local Self Attention</a>.`,name:"attn_layers"},{anchor:"transformers.ReformerConfig.axial_pos_embds",description:`<strong>axial_pos_embds</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to use axial position embeddings. For more information on how axial position embeddings
work, see <a href="reformer#axial-positional-encodings">Axial Position Encodings</a>.`,name:"axial_pos_embds"},{anchor:"transformers.ReformerConfig.axial_norm_std",description:`<strong>axial_norm_std</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
The standard deviation of the normal_initializer for initializing the weight matrices of the axial
positional encodings.`,name:"axial_norm_std"},{anchor:"transformers.ReformerConfig.axial_pos_shape",description:`<strong>axial_pos_shape</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[64, 64]</code>) &#x2014;
The position dims of the axial position encodings. During training, the product of the position dims has to
be equal to the sequence length.</p>
<p>For more information on how axial position embeddings work, see <a href="reformer#axial-positional-encodings">Axial Position
Encodings</a>.`,name:"axial_pos_shape"},{anchor:"transformers.ReformerConfig.axial_pos_embds_dim",description:`<strong>axial_pos_embds_dim</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[64, 192]</code>) &#x2014;
The embedding dims of the axial position encodings. The sum of the embedding dims has to be equal to the
hidden size.</p>
<p>For more information on how axial position embeddings work, see <a href="reformer#axial-positional-encodings">Axial Position
Encodings</a>.`,name:"axial_pos_embds_dim"},{anchor:"transformers.ReformerConfig.chunk_size_lm_head",description:`<strong>chunk_size_lm_head</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The chunk size of the final language model feed forward head layer. A chunk size of 0 means that the feed
forward layer is not chunked. A chunk size of n means that the feed forward layer processes n &lt;
sequence_length embeddings at a time.</p>
<p>For more information on feed forward chunking, see <a href="../glossary#feed-forward-chunking">How does Feed Forward Chunking
work?</a>.`,name:"chunk_size_lm_head"},{anchor:"transformers.ReformerConfig.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>, <em>optional</em>, defaults to 2) &#x2014;
The token id for the end-of-sentence token.`,name:"eos_token_id"},{anchor:"transformers.ReformerConfig.feed_forward_size",description:`<strong>feed_forward_size</strong> (<code>int</code>, <em>optional</em>, defaults to 512) &#x2014;
Dimensionality of the feed_forward layer in the residual attention block.`,name:"feed_forward_size"},{anchor:"transformers.ReformerConfig.hash_seed",description:`<strong>hash_seed</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Seed that can be used to make local sensitive hashing in <code>LSHSelfAttention</code> deterministic. This should only
be set for testing purposed. For evaluation and training purposes <code>hash_seed</code> should be left as <code>None</code> to
ensure fully random rotations in local sensitive hashing scheme.`,name:"hash_seed"},{anchor:"transformers.ReformerConfig.hidden_act",description:`<strong>hidden_act</strong> (<code>str</code> or <code>Callable</code>, <em>optional</em>, defaults to <code>&quot;relu&quot;</code>) &#x2014;
The non-linear activation function (function or string) in the feed forward layer in the residual attention
block. If string, <code>&quot;gelu&quot;</code>, <code>&quot;relu&quot;</code>, <code>&quot;silu&quot;</code> and <code>&quot;gelu_new&quot;</code> are supported.`,name:"hidden_act"},{anchor:"transformers.ReformerConfig.hidden_dropout_prob",description:`<strong>hidden_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.05) &#x2014;
The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.`,name:"hidden_dropout_prob"},{anchor:"transformers.ReformerConfig.hidden_size",description:`<strong>hidden_size</strong> (<code>int</code>, <em>optional</em>, defaults to 256) &#x2014;
Dimensionality of the output hidden states of the residual attention blocks.`,name:"hidden_size"},{anchor:"transformers.ReformerConfig.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"initializer_range"},{anchor:"transformers.ReformerConfig.is_decoder",description:`<strong>is_decoder</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to use a causal mask in addition to the <code>attention_mask</code> passed to <a href="/docs/transformers/pr_15761/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a>. When
using the Reformer for causal language modeling, this argument should be set to <code>True</code>.`,name:"is_decoder"},{anchor:"transformers.ReformerConfig.layer_norm_eps",description:`<strong>layer_norm_eps</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-12) &#x2014;
The epsilon used by the layer normalization layers.`,name:"layer_norm_eps"},{anchor:"transformers.ReformerConfig.local_chunk_length",description:`<strong>local_chunk_length</strong> (<code>int</code>, <em>optional</em>, defaults to 64) &#x2014;
Length of chunk which attends to itself in <code>LocalSelfAttention</code>. Chunking reduces memory complexity from
sequence length x sequence length (self attention) to chunk length x chunk length x sequence length / chunk
length (chunked self attention).`,name:"local_chunk_length"},{anchor:"transformers.ReformerConfig.local_num_chunks_before",description:`<strong>local_num_chunks_before</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Number of previous neighbouring chunks to attend to in <code>LocalSelfAttention</code> layer to itself.`,name:"local_num_chunks_before"},{anchor:"transformers.ReformerConfig.local_num_chunks_after",description:`<strong>local_num_chunks_after</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
Number of following neighbouring chunks to attend to in <code>LocalSelfAttention</code> layer in addition to itself.`,name:"local_num_chunks_after"},{anchor:"transformers.ReformerConfig.local_attention_probs_dropout_prob",description:`<strong>local_attention_probs_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout ratio for the attention probabilities in <code>LocalSelfAttention</code>.`,name:"local_attention_probs_dropout_prob"},{anchor:"transformers.ReformerConfig.lsh_attn_chunk_length",description:`<strong>lsh_attn_chunk_length</strong> (<code>int</code>, <em>optional</em>, defaults to 64) &#x2014;
Length of chunk which attends to itself in <code>LSHSelfAttention</code>. Chunking reduces memory complexity from
sequence length x sequence length (self attention) to chunk length x chunk length x sequence length / chunk
length (chunked self attention).`,name:"lsh_attn_chunk_length"},{anchor:"transformers.ReformerConfig.lsh_num_chunks_before",description:`<strong>lsh_num_chunks_before</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Number of previous neighbouring chunks to attend to in <code>LSHSelfAttention</code> layer to itself.`,name:"lsh_num_chunks_before"},{anchor:"transformers.ReformerConfig.lsh_num_chunks_after",description:`<strong>lsh_num_chunks_after</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
Number of following neighbouring chunks to attend to in <code>LSHSelfAttention</code> layer to itself.`,name:"lsh_num_chunks_after"},{anchor:"transformers.ReformerConfig.lsh_attention_probs_dropout_prob",description:`<strong>lsh_attention_probs_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout ratio for the attention probabilities in <code>LSHSelfAttention</code>.`,name:"lsh_attention_probs_dropout_prob"},{anchor:"transformers.ReformerConfig.max_position_embeddings",description:`<strong>max_position_embeddings</strong> (<code>int</code>, <em>optional</em>, defaults to 4096) &#x2014;
The maximum sequence length that this model might ever be used with. Typically set this to something large
just in case (e.g., 512 or 1024 or 2048).`,name:"max_position_embeddings"},{anchor:"transformers.ReformerConfig.num_attention_heads",description:`<strong>num_attention_heads</strong> (<code>int</code>, <em>optional</em>, defaults to 12) &#x2014;
Number of attention heads for each attention layer in the Transformer encoder.`,name:"num_attention_heads"},{anchor:"transformers.ReformerConfig.num_buckets",description:`<strong>num_buckets</strong> (<code>int</code> or <code>List[int]</code>, <em>optional</em>) &#x2014;
Number of buckets, the key query vectors can be &#x201C;hashed into&#x201D; using the locality sensitive hashing scheme.
Each query key vector is hashed into a hash in <code>1, ..., num_buckets</code>. The number of buckets can also be
factorized into a list for improved memory complexity. In this case, each query key vector is hashed into a
hash in <code>1-1, 1-2, ..., num_buckets[0]-1, ..., num_buckets[0]-num_buckets[1]</code> if <code>num_buckets</code> is
factorized into two factors. The number of buckets (or the product the factors) should approximately equal
sequence length / lsh_chunk_length. If <code>num_buckets</code> not set, a good value is calculated on the fly.`,name:"num_buckets"},{anchor:"transformers.ReformerConfig.num_hashes",description:`<strong>num_hashes</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Number of hashing rounds (e.g., number of random rotations) in Local Sensitive Hashing scheme. The higher
<code>num_hashes</code>, the more accurate the <code>LSHSelfAttention</code> becomes, but also the more memory and time intensive
the hashing becomes.`,name:"num_hashes"},{anchor:"transformers.ReformerConfig.pad_token_id",description:`<strong>pad_token_id</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The token id for the padding token.`,name:"pad_token_id"},{anchor:"transformers.ReformerConfig.vocab_size",description:`<strong>vocab_size</strong> (<code>int</code>, <em>optional</em>, defaults to 320) &#x2014;\\
Vocabulary size of the Reformer model. Defines the number of different tokens that can be represented by
the <code>inputs_ids</code> passed when calling <a href="/docs/transformers/pr_15761/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a>.`,name:"vocab_size"},{anchor:"transformers.ReformerConfig.tie_word_embeddings",description:`<strong>tie_word_embeddings</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to tie input and output embeddings.`,name:"tie_word_embeddings"},{anchor:"transformers.ReformerConfig.use_cache",description:`<strong>use_cache</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not the model should return the last key/values attentions (not used by all models).`,name:"use_cache"},{anchor:"transformers.ReformerConfig.classifier_dropout",description:`<strong>classifier_dropout</strong> (<code>float</code>, <em>optional</em>) &#x2014;
The dropout ratio for the classification head.`,name:"classifier_dropout"}]}}),Ie=new ye({props:{code:`from transformers import ReformerModel, ReformerConfig

# Initializing a Reformer configuration
configuration = ReformerConfig()

# Initializing a Reformer model
model = ReformerModel(configuration)

# Accessing the model configuration
configuration = model.config,`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ReformerModel, ReformerConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a Reformer configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = ReformerConfig()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a Reformer model</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ReformerModel(configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`}}),We=new V({}),Qe=new Y({props:{name:"class transformers.ReformerTokenizer",anchor:"transformers.ReformerTokenizer",parameters:[{name:"vocab_file",val:""},{name:"eos_token",val:" = '</s>'"},{name:"unk_token",val:" = '<unk>'"},{name:"additional_special_tokens",val:" = []"},{name:"sp_model_kwargs",val:": typing.Union[typing.Dict[str, typing.Any], NoneType] = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15761/src/transformers/models/reformer/tokenization_reformer.py#L46",parametersDescription:[{anchor:"transformers.ReformerTokenizer.vocab_file",description:`<strong>vocab_file</strong> (<code>str</code>) &#x2014;
<a href="https://github.com/google/sentencepiece" rel="nofollow">SentencePiece</a> file (generally has a <em>.spm</em> extension) that
contains the vocabulary necessary to instantiate a tokenizer.`,name:"vocab_file"},{anchor:"transformers.ReformerTokenizer.eos_token",description:`<strong>eos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;/s&gt;&quot;</code>) &#x2014;
The end of sequence token.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>When building a sequence using special tokens, this is not the token that is used for the end of sequence.
The token used is the <code>sep_token</code>.</p>

					</div>`,name:"eos_token"},{anchor:"transformers.ReformerTokenizer.unk_token",description:`<strong>unk_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;unk&gt;&quot;</code>) &#x2014;
The unknown token. A token that is not in the vocabulary cannot be converted to an ID and is set to be this
token instead.`,name:"unk_token"},{anchor:"transformers.ReformerTokenizer.pad_token",description:`<strong>pad_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;pad&gt;&quot;</code>) &#x2014;
The token used for padding, for example when batching sequences of different lengths.`,name:"pad_token"},{anchor:"transformers.ReformerTokenizer.additional_special_tokens",description:`<strong>additional_special_tokens</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
Additional special tokens used by the tokenizer.`,name:"additional_special_tokens"},{anchor:"transformers.ReformerTokenizer.sp_model_kwargs",description:`<strong>sp_model_kwargs</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Will be passed to the <code>SentencePieceProcessor.__init__()</code> method. The <a href="https://github.com/google/sentencepiece/tree/master/python" rel="nofollow">Python wrapper for
SentencePiece</a> can be used, among other things,
to set:</p>
<ul>
<li>
<p><code>enable_sampling</code>: Enable subword regularization.</p>
</li>
<li>
<p><code>nbest_size</code>: Sampling parameters for unigram. Invalid for BPE-Dropout.</p>
<ul>
<li><code>nbest_size = {0,1}</code>: No sampling is performed.</li>
<li><code>nbest_size &gt; 1</code>: samples from the nbest_size results.</li>
<li><code>nbest_size &lt; 0</code>: assuming that nbest_size is infinite and samples from the all hypothesis (lattice)
using forward-filtering-and-backward-sampling algorithm.</li>
</ul>
</li>
<li>
<p><code>alpha</code>: Smoothing parameter for unigram sampling, and dropout probability of merge operations for
BPE-dropout.</p>
</li>
</ul>`,name:"sp_model_kwargs"}]}}),Xe=new V({}),Ve=new Y({props:{name:"class transformers.ReformerTokenizerFast",anchor:"transformers.ReformerTokenizerFast",parameters:[{name:"vocab_file",val:" = None"},{name:"tokenizer_file",val:" = None"},{name:"eos_token",val:" = '</s>'"},{name:"unk_token",val:" = '<unk>'"},{name:"additional_special_tokens",val:" = []"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15761/src/transformers/models/reformer/tokenization_reformer_fast.py#L54",parametersDescription:[{anchor:"transformers.ReformerTokenizerFast.vocab_file",description:`<strong>vocab_file</strong> (<code>str</code>) &#x2014;
<a href="https://github.com/google/sentencepiece" rel="nofollow">SentencePiece</a> file (generally has a <em>.spm</em> extension) that
contains the vocabulary necessary to instantiate a tokenizer.`,name:"vocab_file"},{anchor:"transformers.ReformerTokenizerFast.eos_token",description:`<strong>eos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;/s&gt;&quot;</code>) &#x2014;
The end of sequence token.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>When building a sequence using special tokens, this is not the token that is used for the end of sequence.
The token used is the <code>sep_token</code>.</p>

					</div>`,name:"eos_token"},{anchor:"transformers.ReformerTokenizerFast.unk_token",description:`<strong>unk_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;unk&gt;&quot;</code>) &#x2014;
The unknown token. A token that is not in the vocabulary cannot be converted to an ID and is set to be this
token instead.`,name:"unk_token"},{anchor:"transformers.ReformerTokenizerFast.pad_token",description:`<strong>pad_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;pad&gt;&quot;</code>) &#x2014;
The token used for padding, for example when batching sequences of different lengths.`,name:"pad_token"},{anchor:"transformers.ReformerTokenizerFast.additional_special_tokens",description:`<strong>additional_special_tokens</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
Additional special tokens used by the tokenizer.`,name:"additional_special_tokens"}]}}),Ye=new V({}),Ze=new Y({props:{name:"class transformers.ReformerModel",anchor:"transformers.ReformerModel",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15761/src/transformers/models/reformer/modeling_reformer.py#L1961",parametersDescription:[{anchor:"transformers.ReformerModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15761/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_15761/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),oa=new Y({props:{name:"forward",anchor:"transformers.ReformerModel.forward",parameters:[{name:"input_ids",val:" = None"},{name:"attention_mask",val:" = None"},{name:"position_ids",val:" = None"},{name:"head_mask",val:" = None"},{name:"inputs_embeds",val:" = None"},{name:"num_hashes",val:" = None"},{name:"past_buckets_states",val:" = None"},{name:"use_cache",val:" = None"},{name:"output_hidden_states",val:" = None"},{name:"output_attentions",val:" = None"},{name:"return_dict",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15761/src/transformers/models/reformer/modeling_reformer.py#L1989",parametersDescription:[{anchor:"transformers.ReformerModel.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary. During training the input_ids sequence_length has to be
a multiple of the relevant model&#x2019;s chunk lengths (lsh&#x2019;s, local&#x2019;s or both). During evaluation, the indices
are automatically padded to be a multiple of the chunk length.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_15761/en/model_doc/reformer#transformers.ReformerTokenizer">ReformerTokenizer</a>. See <a href="/docs/transformers/pr_15761/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_15761/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.ReformerModel.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.ReformerModel.forward.position_ids",description:`<strong>position_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of positions of each input sequence tokens in the position embeddings. Selected in the range <code>[0, config.max_position_embeddings - 1]</code>.</p>
<p><a href="../glossary#position-ids">What are position IDs?</a>`,name:"position_ids"},{anchor:"transformers.ReformerModel.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.ReformerModel.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation. This
is useful if you want more control over how to convert <code>input_ids</code> indices into associated vectors than the
model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.ReformerModel.forward.num_hashes",description:`<strong>num_hashes</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The number of hashing rounds that should be performed during bucketing. Setting this argument overwrites
the default defined in <code>config.num_hashes</code>.</p>
<p>For more information, see <code>num_hashes</code> in <a href="/docs/transformers/pr_15761/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a>.`,name:"num_hashes"},{anchor:"transformers.ReformerModel.forward.past_buckets_states",description:`<strong>past_buckets_states</strong> (<code>List[Tuple(torch.LongTensor, torch.FloatTensor)]</code>, <em>optional</em>) &#x2014;
List of <code>Tuple(torch.LongTensor, torch.FloatTensor</code> of length <code>config.n_layers</code>, with the first element
being the previous <em>buckets</em> of shape <code>(batch_size, num_heads, num_hashes, sequence_length)</code>) and the
second being the previous <em>hidden_states</em> of shape <code>(batch_size, sequence_length, hidden_size)</code>).</p>
<p>Contains precomputed hidden-states and buckets (only relevant for LSH Self-Attention). Can be used to speed
up sequential decoding.`,name:"past_buckets_states"},{anchor:"transformers.ReformerModel.forward.use_cache",description:`<strong>use_cache</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If set to <code>True</code>, <code>past_key_values</code> key value states are returned and can be used to speed up decoding (see
<code>past_key_values</code>).`,name:"use_cache"},{anchor:"transformers.ReformerModel.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.ReformerModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.ReformerModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_15761/en/main_classes/output#transformers.file_utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],returnDescription:`
<p>A <code>transformers.models.reformer.modeling_reformer.ReformerModelOutput</code>or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_15761/en/model_doc/reformer#transformers.ReformerConfig"
>ReformerConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_predict, hidden_size)</code>) \u2014 Sequence of hidden-states at the last layer of the model.</p>
<p><code>num_predict</code> corresponds to <code>target_mapping.shape[1]</code>. If <code>target_mapping</code> is <code>None</code>, then <code>num_predict</code>
corresponds to <code>sequence_length</code>.</p>
</li>
<li>
<p><strong>past_buckets_states</strong> (<code>List[Tuple(torch.LongTensor, torch.FloatTensor)]</code>, <em>optional</em>, returned when <code>use_cache=True</code> is passed or when <code>config.use_cache=True</code>) \u2014 List of <code>Tuple(torch.LongTensor, torch.FloatTensor</code> of length <code>config.n_layers</code>, with the first element
being the previous <em>buckets</em> of shape <code>(batch_size, num_heads, num_hashes, sequence_length)</code>) and the
second being the previous <em>hidden_states</em> of shape <code>(batch_size, sequence_length, hidden_size)</code>).</p>
<p>Contains precomputed buckets and hidden-states that can be used (see <code>past_buckets_states</code> input) to speed
up sequential decoding.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings and one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><code>transformers.models.reformer.modeling_reformer.ReformerModelOutput</code>or <code>tuple(torch.FloatTensor)</code></p>
`}}),ne=new Jn({props:{$$slots:{default:[Ku]},$$scope:{ctx:G}}}),ra=new ye({props:{code:`from transformers import ReformerTokenizer, ReformerModel
import torch

tokenizer = ReformerTokenizer.from_pretrained("google/reformer-crime-and-punishment")
model = ReformerModel.from_pretrained("google/reformer-crime-and-punishment")

inputs = tokenizer("Hello, my dog is cute", return_tensors="pt")
outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state,`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ReformerTokenizer, ReformerModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = ReformerTokenizer.from_pretrained(<span class="hljs-string">&quot;google/reformer-crime-and-punishment&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ReformerModel.from_pretrained(<span class="hljs-string">&quot;google/reformer-crime-and-punishment&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state`}}),ia=new V({}),la=new Y({props:{name:"class transformers.ReformerModelWithLMHead",anchor:"transformers.ReformerModelWithLMHead",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15761/src/transformers/models/reformer/modeling_reformer.py#L2173",parametersDescription:[{anchor:"transformers.ReformerModelWithLMHead.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15761/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_15761/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),da=new Y({props:{name:"forward",anchor:"transformers.ReformerModelWithLMHead.forward",parameters:[{name:"input_ids",val:" = None"},{name:"position_ids",val:" = None"},{name:"attention_mask",val:" = None"},{name:"head_mask",val:" = None"},{name:"inputs_embeds",val:" = None"},{name:"num_hashes",val:" = None"},{name:"past_buckets_states",val:" = None"},{name:"use_cache",val:" = None"},{name:"output_hidden_states",val:" = None"},{name:"output_attentions",val:" = None"},{name:"return_dict",val:" = None"},{name:"labels",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15761/src/transformers/models/reformer/modeling_reformer.py#L2196",parametersDescription:[{anchor:"transformers.ReformerModelWithLMHead.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary. During training the input_ids sequence_length has to be
a multiple of the relevant model&#x2019;s chunk lengths (lsh&#x2019;s, local&#x2019;s or both). During evaluation, the indices
are automatically padded to be a multiple of the chunk length.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_15761/en/model_doc/reformer#transformers.ReformerTokenizer">ReformerTokenizer</a>. See <a href="/docs/transformers/pr_15761/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_15761/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.ReformerModelWithLMHead.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.ReformerModelWithLMHead.forward.position_ids",description:`<strong>position_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of positions of each input sequence tokens in the position embeddings. Selected in the range <code>[0, config.max_position_embeddings - 1]</code>.</p>
<p><a href="../glossary#position-ids">What are position IDs?</a>`,name:"position_ids"},{anchor:"transformers.ReformerModelWithLMHead.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.ReformerModelWithLMHead.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation. This
is useful if you want more control over how to convert <code>input_ids</code> indices into associated vectors than the
model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.ReformerModelWithLMHead.forward.num_hashes",description:`<strong>num_hashes</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The number of hashing rounds that should be performed during bucketing. Setting this argument overwrites
the default defined in <code>config.num_hashes</code>.</p>
<p>For more information, see <code>num_hashes</code> in <a href="/docs/transformers/pr_15761/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a>.`,name:"num_hashes"},{anchor:"transformers.ReformerModelWithLMHead.forward.past_buckets_states",description:`<strong>past_buckets_states</strong> (<code>List[Tuple(torch.LongTensor, torch.FloatTensor)]</code>, <em>optional</em>) &#x2014;
List of <code>Tuple(torch.LongTensor, torch.FloatTensor</code> of length <code>config.n_layers</code>, with the first element
being the previous <em>buckets</em> of shape <code>(batch_size, num_heads, num_hashes, sequence_length)</code>) and the
second being the previous <em>hidden_states</em> of shape <code>(batch_size, sequence_length, hidden_size)</code>).</p>
<p>Contains precomputed hidden-states and buckets (only relevant for LSH Self-Attention). Can be used to speed
up sequential decoding.`,name:"past_buckets_states"},{anchor:"transformers.ReformerModelWithLMHead.forward.use_cache",description:`<strong>use_cache</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If set to <code>True</code>, <code>past_key_values</code> key value states are returned and can be used to speed up decoding (see
<code>past_key_values</code>).`,name:"use_cache"},{anchor:"transformers.ReformerModelWithLMHead.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.ReformerModelWithLMHead.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.ReformerModelWithLMHead.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_15761/en/main_classes/output#transformers.file_utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.ReformerModelWithLMHead.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the sequence classification/regression loss. Indices should be in <code>[-100, 0, ..., config.vocab_size - 1]</code>. All labels set to <code>-100</code> are ignored (masked), the loss is only computed for
labels in <code>[0, ..., config.vocab_size]</code>`,name:"labels"}],returnDescription:`
<p>A <a
  href="/docs/transformers/pr_15761/en/main_classes/output#transformers.modeling_outputs.CausalLMOutput"
>transformers.modeling_outputs.CausalLMOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_15761/en/model_doc/reformer#transformers.ReformerConfig"
>ReformerConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Language modeling loss (for next-token prediction).</p>
</li>
<li>
<p><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, config.vocab_size)</code>) \u2014 Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax).</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_15761/en/main_classes/output#transformers.modeling_outputs.CausalLMOutput"
>transformers.modeling_outputs.CausalLMOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),re=new Jn({props:{$$slots:{default:[Uu]},$$scope:{ctx:G}}}),ga=new ye({props:{code:`import torch
from transformers import ReformerTokenizer, ReformerModelWithLMHead

tokenizer = ReformerTokenizer.from_pretrained("google/reformer-crime-and-punishment")
model = ReformerModelWithLMHead.from_pretrained("google/reformer-crime-and-punishment")

inputs = tokenizer("Hello, my dog is cute", return_tensors="pt")
outputs = model(**inputs, labels=inputs["input_ids"])
loss = outputs.loss
logits = outputs.logits,`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ReformerTokenizer, ReformerModelWithLMHead

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = ReformerTokenizer.from_pretrained(<span class="hljs-string">&quot;google/reformer-crime-and-punishment&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ReformerModelWithLMHead.from_pretrained(<span class="hljs-string">&quot;google/reformer-crime-and-punishment&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs, labels=inputs[<span class="hljs-string">&quot;input_ids&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>loss = outputs.loss
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits`}}),ua=new V({}),fa=new Y({props:{name:"class transformers.ReformerForMaskedLM",anchor:"transformers.ReformerForMaskedLM",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15761/src/transformers/models/reformer/modeling_reformer.py#L2294",parametersDescription:[{anchor:"transformers.ReformerForMaskedLM.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15761/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_15761/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),ka=new Y({props:{name:"forward",anchor:"transformers.ReformerForMaskedLM.forward",parameters:[{name:"input_ids",val:" = None"},{name:"position_ids",val:" = None"},{name:"attention_mask",val:" = None"},{name:"head_mask",val:" = None"},{name:"inputs_embeds",val:" = None"},{name:"num_hashes",val:" = None"},{name:"labels",val:" = None"},{name:"output_hidden_states",val:" = None"},{name:"output_attentions",val:" = None"},{name:"return_dict",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15761/src/transformers/models/reformer/modeling_reformer.py#L2312",parametersDescription:[{anchor:"transformers.ReformerForMaskedLM.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary. During training the input_ids sequence_length has to be
a multiple of the relevant model&#x2019;s chunk lengths (lsh&#x2019;s, local&#x2019;s or both). During evaluation, the indices
are automatically padded to be a multiple of the chunk length.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_15761/en/model_doc/reformer#transformers.ReformerTokenizer">ReformerTokenizer</a>. See <a href="/docs/transformers/pr_15761/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_15761/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.ReformerForMaskedLM.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.ReformerForMaskedLM.forward.position_ids",description:`<strong>position_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of positions of each input sequence tokens in the position embeddings. Selected in the range <code>[0, config.max_position_embeddings - 1]</code>.</p>
<p><a href="../glossary#position-ids">What are position IDs?</a>`,name:"position_ids"},{anchor:"transformers.ReformerForMaskedLM.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.ReformerForMaskedLM.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation. This
is useful if you want more control over how to convert <code>input_ids</code> indices into associated vectors than the
model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.ReformerForMaskedLM.forward.num_hashes",description:`<strong>num_hashes</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The number of hashing rounds that should be performed during bucketing. Setting this argument overwrites
the default defined in <code>config.num_hashes</code>.</p>
<p>For more information, see <code>num_hashes</code> in <a href="/docs/transformers/pr_15761/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a>.`,name:"num_hashes"},{anchor:"transformers.ReformerForMaskedLM.forward.past_buckets_states",description:`<strong>past_buckets_states</strong> (<code>List[Tuple(torch.LongTensor, torch.FloatTensor)]</code>, <em>optional</em>) &#x2014;
List of <code>Tuple(torch.LongTensor, torch.FloatTensor</code> of length <code>config.n_layers</code>, with the first element
being the previous <em>buckets</em> of shape <code>(batch_size, num_heads, num_hashes, sequence_length)</code>) and the
second being the previous <em>hidden_states</em> of shape <code>(batch_size, sequence_length, hidden_size)</code>).</p>
<p>Contains precomputed hidden-states and buckets (only relevant for LSH Self-Attention). Can be used to speed
up sequential decoding.`,name:"past_buckets_states"},{anchor:"transformers.ReformerForMaskedLM.forward.use_cache",description:`<strong>use_cache</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If set to <code>True</code>, <code>past_key_values</code> key value states are returned and can be used to speed up decoding (see
<code>past_key_values</code>).`,name:"use_cache"},{anchor:"transformers.ReformerForMaskedLM.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.ReformerForMaskedLM.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.ReformerForMaskedLM.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_15761/en/main_classes/output#transformers.file_utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.ReformerForMaskedLM.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Labels for computing the masked language modeling loss. Indices should be in <code>[-100, 0, ..., config.vocab_size]</code> (see <code>input_ids</code> docstring) Tokens with indices set to <code>-100</code> are ignored (masked),
the loss is only computed for the tokens with labels`,name:"labels"}],returnDescription:`
<p>A <a
  href="/docs/transformers/pr_15761/en/main_classes/output#transformers.modeling_outputs.MaskedLMOutput"
>transformers.modeling_outputs.MaskedLMOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_15761/en/model_doc/reformer#transformers.ReformerConfig"
>ReformerConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Masked language modeling (MLM) loss.</p>
</li>
<li>
<p><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, config.vocab_size)</code>) \u2014 Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax).</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_15761/en/main_classes/output#transformers.modeling_outputs.MaskedLMOutput"
>transformers.modeling_outputs.MaskedLMOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),le=new Jn({props:{$$slots:{default:[Bu]},$$scope:{ctx:G}}}),wa=new ye({props:{code:`from transformers import ReformerTokenizer, ReformerForMaskedLM
import torch

tokenizer = ReformerTokenizer.from_pretrained("google/reformer-crime-and-punishment")
model = ReformerForMaskedLM.from_pretrained("google/reformer-crime-and-punishment")

inputs = tokenizer("The capital of France is [MASK].", return_tensors="pt")
labels = tokenizer("The capital of France is Paris.", return_tensors="pt")["input_ids"]

outputs = model(**inputs, labels=labels)
loss = outputs.loss
logits = outputs.logits,`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ReformerTokenizer, ReformerForMaskedLM
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = ReformerTokenizer.from_pretrained(<span class="hljs-string">&quot;google/reformer-crime-and-punishment&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ReformerForMaskedLM.from_pretrained(<span class="hljs-string">&quot;google/reformer-crime-and-punishment&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;The capital of France is [MASK].&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>labels = tokenizer(<span class="hljs-string">&quot;The capital of France is Paris.&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)[<span class="hljs-string">&quot;input_ids&quot;</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs, labels=labels)
<span class="hljs-meta">&gt;&gt;&gt; </span>loss = outputs.loss
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits`}}),za=new V({}),xa=new Y({props:{name:"class transformers.ReformerForSequenceClassification",anchor:"transformers.ReformerForSequenceClassification",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15761/src/transformers/models/reformer/modeling_reformer.py#L2380",parametersDescription:[{anchor:"transformers.ReformerForSequenceClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15761/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_15761/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),Ea=new Y({props:{name:"forward",anchor:"transformers.ReformerForSequenceClassification.forward",parameters:[{name:"input_ids",val:" = None"},{name:"position_ids",val:" = None"},{name:"attention_mask",val:" = None"},{name:"head_mask",val:" = None"},{name:"inputs_embeds",val:" = None"},{name:"num_hashes",val:" = None"},{name:"labels",val:" = None"},{name:"output_hidden_states",val:" = None"},{name:"output_attentions",val:" = None"},{name:"return_dict",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15761/src/transformers/models/reformer/modeling_reformer.py#L2394",parametersDescription:[{anchor:"transformers.ReformerForSequenceClassification.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary. During training the input_ids sequence_length has to be
a multiple of the relevant model&#x2019;s chunk lengths (lsh&#x2019;s, local&#x2019;s or both). During evaluation, the indices
are automatically padded to be a multiple of the chunk length.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_15761/en/model_doc/reformer#transformers.ReformerTokenizer">ReformerTokenizer</a>. See <a href="/docs/transformers/pr_15761/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_15761/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.ReformerForSequenceClassification.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.ReformerForSequenceClassification.forward.position_ids",description:`<strong>position_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of positions of each input sequence tokens in the position embeddings. Selected in the range <code>[0, config.max_position_embeddings - 1]</code>.</p>
<p><a href="../glossary#position-ids">What are position IDs?</a>`,name:"position_ids"},{anchor:"transformers.ReformerForSequenceClassification.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.ReformerForSequenceClassification.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation. This
is useful if you want more control over how to convert <code>input_ids</code> indices into associated vectors than the
model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.ReformerForSequenceClassification.forward.num_hashes",description:`<strong>num_hashes</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The number of hashing rounds that should be performed during bucketing. Setting this argument overwrites
the default defined in <code>config.num_hashes</code>.</p>
<p>For more information, see <code>num_hashes</code> in <a href="/docs/transformers/pr_15761/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a>.`,name:"num_hashes"},{anchor:"transformers.ReformerForSequenceClassification.forward.past_buckets_states",description:`<strong>past_buckets_states</strong> (<code>List[Tuple(torch.LongTensor, torch.FloatTensor)]</code>, <em>optional</em>) &#x2014;
List of <code>Tuple(torch.LongTensor, torch.FloatTensor</code> of length <code>config.n_layers</code>, with the first element
being the previous <em>buckets</em> of shape <code>(batch_size, num_heads, num_hashes, sequence_length)</code>) and the
second being the previous <em>hidden_states</em> of shape <code>(batch_size, sequence_length, hidden_size)</code>).</p>
<p>Contains precomputed hidden-states and buckets (only relevant for LSH Self-Attention). Can be used to speed
up sequential decoding.`,name:"past_buckets_states"},{anchor:"transformers.ReformerForSequenceClassification.forward.use_cache",description:`<strong>use_cache</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If set to <code>True</code>, <code>past_key_values</code> key value states are returned and can be used to speed up decoding (see
<code>past_key_values</code>).`,name:"use_cache"},{anchor:"transformers.ReformerForSequenceClassification.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.ReformerForSequenceClassification.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.ReformerForSequenceClassification.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_15761/en/main_classes/output#transformers.file_utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.ReformerForSequenceClassification.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the sequence classification/regression loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels == 1</code> a regression loss is computed (Mean-Square loss), If
<code>config.num_labels &gt; 1</code> a classification loss is computed (Cross-Entropy).`,name:"labels"}],returnDescription:`
<p>A <a
  href="/docs/transformers/pr_15761/en/main_classes/output#transformers.modeling_outputs.SequenceClassifierOutput"
>transformers.modeling_outputs.SequenceClassifierOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_15761/en/model_doc/reformer#transformers.ReformerConfig"
>ReformerConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</p>
</li>
<li>
<p><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels)</code>) \u2014 Classification (or regression if config.num_labels==1) scores (before SoftMax).</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_15761/en/main_classes/output#transformers.modeling_outputs.SequenceClassifierOutput"
>transformers.modeling_outputs.SequenceClassifierOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),pe=new Jn({props:{$$slots:{default:[Xu]},$$scope:{ctx:G}}}),La=new ye({props:{code:`from transformers import ReformerTokenizer, ReformerForSequenceClassification
import torch

tokenizer = ReformerTokenizer.from_pretrained("google/reformer-crime-and-punishment")
model = ReformerForSequenceClassification.from_pretrained("google/reformer-crime-and-punishment")

inputs = tokenizer("Hello, my dog is cute", return_tensors="pt")
labels = torch.tensor([1]).unsqueeze(0)  # Batch size 1
outputs = model(**inputs, labels=labels)
loss = outputs.loss
logits = outputs.logits,`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ReformerTokenizer, ReformerForSequenceClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = ReformerTokenizer.from_pretrained(<span class="hljs-string">&quot;google/reformer-crime-and-punishment&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ReformerForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;google/reformer-crime-and-punishment&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>labels = torch.tensor([<span class="hljs-number">1</span>]).unsqueeze(<span class="hljs-number">0</span>)  <span class="hljs-comment"># Batch size 1</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs, labels=labels)
<span class="hljs-meta">&gt;&gt;&gt; </span>loss = outputs.loss
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits`}}),Fa=new ye({props:{code:`from transformers import ReformerTokenizer, ReformerForSequenceClassification
import torch

tokenizer = ReformerTokenizer.from_pretrained("google/reformer-crime-and-punishment")
model = ReformerForSequenceClassification.from_pretrained("google/reformer-crime-and-punishment", problem_type="multi_label_classification")

inputs = tokenizer("Hello, my dog is cute", return_tensors="pt")
labels = torch.tensor([[1, 1]], dtype=torch.float)  # need dtype=float for BCEWithLogitsLoss
outputs = model(**inputs, labels=labels)
loss = outputs.loss
logits = outputs.logits,`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ReformerTokenizer, ReformerForSequenceClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = ReformerTokenizer.from_pretrained(<span class="hljs-string">&quot;google/reformer-crime-and-punishment&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ReformerForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;google/reformer-crime-and-punishment&quot;</span>, problem_type=<span class="hljs-string">&quot;multi_label_classification&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>labels = torch.tensor([[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>]], dtype=torch.<span class="hljs-built_in">float</span>)  <span class="hljs-comment"># need dtype=float for BCEWithLogitsLoss</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs, labels=labels)
<span class="hljs-meta">&gt;&gt;&gt; </span>loss = outputs.loss
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits`}}),Pa=new V({}),Ca=new Y({props:{name:"class transformers.ReformerForQuestionAnswering",anchor:"transformers.ReformerForQuestionAnswering",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15761/src/transformers/models/reformer/modeling_reformer.py#L2501",parametersDescription:[{anchor:"transformers.ReformerForQuestionAnswering.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15761/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_15761/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),Ha=new Y({props:{name:"forward",anchor:"transformers.ReformerForQuestionAnswering.forward",parameters:[{name:"input_ids",val:" = None"},{name:"position_ids",val:" = None"},{name:"attention_mask",val:" = None"},{name:"head_mask",val:" = None"},{name:"inputs_embeds",val:" = None"},{name:"num_hashes",val:" = None"},{name:"start_positions",val:" = None"},{name:"end_positions",val:" = None"},{name:"output_hidden_states",val:" = None"},{name:"output_attentions",val:" = None"},{name:"return_dict",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15761/src/transformers/models/reformer/modeling_reformer.py#L2513",parametersDescription:[{anchor:"transformers.ReformerForQuestionAnswering.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary. During training the input_ids sequence_length has to be
a multiple of the relevant model&#x2019;s chunk lengths (lsh&#x2019;s, local&#x2019;s or both). During evaluation, the indices
are automatically padded to be a multiple of the chunk length.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_15761/en/model_doc/reformer#transformers.ReformerTokenizer">ReformerTokenizer</a>. See <a href="/docs/transformers/pr_15761/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_15761/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.ReformerForQuestionAnswering.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.ReformerForQuestionAnswering.forward.position_ids",description:`<strong>position_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of positions of each input sequence tokens in the position embeddings. Selected in the range <code>[0, config.max_position_embeddings - 1]</code>.</p>
<p><a href="../glossary#position-ids">What are position IDs?</a>`,name:"position_ids"},{anchor:"transformers.ReformerForQuestionAnswering.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.ReformerForQuestionAnswering.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation. This
is useful if you want more control over how to convert <code>input_ids</code> indices into associated vectors than the
model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.ReformerForQuestionAnswering.forward.num_hashes",description:`<strong>num_hashes</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The number of hashing rounds that should be performed during bucketing. Setting this argument overwrites
the default defined in <code>config.num_hashes</code>.</p>
<p>For more information, see <code>num_hashes</code> in <a href="/docs/transformers/pr_15761/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a>.`,name:"num_hashes"},{anchor:"transformers.ReformerForQuestionAnswering.forward.past_buckets_states",description:`<strong>past_buckets_states</strong> (<code>List[Tuple(torch.LongTensor, torch.FloatTensor)]</code>, <em>optional</em>) &#x2014;
List of <code>Tuple(torch.LongTensor, torch.FloatTensor</code> of length <code>config.n_layers</code>, with the first element
being the previous <em>buckets</em> of shape <code>(batch_size, num_heads, num_hashes, sequence_length)</code>) and the
second being the previous <em>hidden_states</em> of shape <code>(batch_size, sequence_length, hidden_size)</code>).</p>
<p>Contains precomputed hidden-states and buckets (only relevant for LSH Self-Attention). Can be used to speed
up sequential decoding.`,name:"past_buckets_states"},{anchor:"transformers.ReformerForQuestionAnswering.forward.use_cache",description:`<strong>use_cache</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If set to <code>True</code>, <code>past_key_values</code> key value states are returned and can be used to speed up decoding (see
<code>past_key_values</code>).`,name:"use_cache"},{anchor:"transformers.ReformerForQuestionAnswering.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.ReformerForQuestionAnswering.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.ReformerForQuestionAnswering.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_15761/en/main_classes/output#transformers.file_utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.ReformerForQuestionAnswering.forward.start_positions",description:`<strong>start_positions</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for position (index) of the start of the labelled span for computing the token classification loss.
Positions are clamped to the length of the sequence (<code>sequence_length</code>). Position outside of the sequence
are not taken into account for computing the loss.`,name:"start_positions"},{anchor:"transformers.ReformerForQuestionAnswering.forward.end_positions",description:`<strong>end_positions</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for position (index) of the end of the labelled span for computing the token classification loss.
Positions are clamped to the length of the sequence (<code>sequence_length</code>). Position outside of the sequence
are not taken into account for computing the loss.`,name:"end_positions"}],returnDescription:`
<p>A <a
  href="/docs/transformers/pr_15761/en/main_classes/output#transformers.modeling_outputs.QuestionAnsweringModelOutput"
>transformers.modeling_outputs.QuestionAnsweringModelOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_15761/en/model_doc/reformer#transformers.ReformerConfig"
>ReformerConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Total span extraction loss is the sum of a Cross-Entropy for the start and end positions.</p>
</li>
<li>
<p><strong>start_logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>) \u2014 Span-start scores (before SoftMax).</p>
</li>
<li>
<p><strong>end_logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>) \u2014 Span-end scores (before SoftMax).</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_15761/en/main_classes/output#transformers.modeling_outputs.QuestionAnsweringModelOutput"
>transformers.modeling_outputs.QuestionAnsweringModelOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),he=new Jn({props:{$$slots:{default:[Vu]},$$scope:{ctx:G}}}),Oa=new ye({props:{code:`from transformers import ReformerTokenizer, ReformerForQuestionAnswering
import torch

tokenizer = ReformerTokenizer.from_pretrained("google/reformer-crime-and-punishment")
model = ReformerForQuestionAnswering.from_pretrained("google/reformer-crime-and-punishment")

question, text = "Who was Jim Henson?", "Jim Henson was a nice puppet"
inputs = tokenizer(question, text, return_tensors="pt")
start_positions = torch.tensor([1])
end_positions = torch.tensor([3])

outputs = model(**inputs, start_positions=start_positions, end_positions=end_positions)
loss = outputs.loss
start_scores = outputs.start_logits
end_scores = outputs.end_logits,`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ReformerTokenizer, ReformerForQuestionAnswering
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = ReformerTokenizer.from_pretrained(<span class="hljs-string">&quot;google/reformer-crime-and-punishment&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ReformerForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/reformer-crime-and-punishment&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>question, text = <span class="hljs-string">&quot;Who was Jim Henson?&quot;</span>, <span class="hljs-string">&quot;Jim Henson was a nice puppet&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(question, text, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>start_positions = torch.tensor([<span class="hljs-number">1</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>end_positions = torch.tensor([<span class="hljs-number">3</span>])

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs, start_positions=start_positions, end_positions=end_positions)
<span class="hljs-meta">&gt;&gt;&gt; </span>loss = outputs.loss
<span class="hljs-meta">&gt;&gt;&gt; </span>start_scores = outputs.start_logits
<span class="hljs-meta">&gt;&gt;&gt; </span>end_scores = outputs.end_logits`}}),{c(){d=o("meta"),M=m(),g=o("h1"),z=o("a"),R=o("span"),u(w.$$.fragment),k=m(),L=o("span"),xi=t("Reformer"),Yn=m(),ws=o("p"),Tt=o("strong"),Ti=t("DISCLAIMER:"),Mi=t(" This model is still a work in progress, if you see something strange, file a "),be=o("a"),Ri=t("Github Issue"),$i=t("."),Zn=m(),zs=o("h2"),Bs=o("a"),Mt=o("span"),u(ke.$$.fragment),qi=m(),Rt=o("span"),Ei=t("Overview"),so=m(),Xs=o("p"),Li=t("The Reformer model was proposed in the paper "),we=o("a"),Fi=t("Reformer: The Efficient Transformer"),Pi=t(" by Nikita Kitaev, \u0141ukasz Kaiser, Anselm Levskaya."),eo=m(),Qa=o("p"),Ci=t("The abstract from the paper is the following:"),ao=m(),Ka=o("p"),$t=o("em"),Ai=t(`Large Transformer models routinely achieve state-of-the-art results on a number of tasks but training these models can
be prohibitively costly, especially on long sequences. We introduce two techniques to improve the efficiency of
Transformers. For one, we replace dot-product attention by one that uses locality-sensitive hashing, changing its
complexity from O(L^2) to O(Llog(L)), where L is the length of the sequence. Furthermore, we use reversible residual
layers instead of the standard residuals, which allows storing activations only once in the training process instead of
N times, where N is the number of layers. The resulting model, the Reformer, performs on par with Transformer models
while being much more memory-efficient and much faster on long sequences.`),to=m(),is=o("p"),Si=t("This model was contributed by "),ze=o("a"),ji=t("patrickvonplaten"),Ni=t(`. The Authors\u2019 code can be
found `),xe=o("a"),Di=t("here"),Hi=t("."),no=m(),Te=o("p"),qt=o("strong"),Oi=t("Note"),Ii=t(":"),oo=m(),Ua=o("ul"),ls=o("li"),Wi=t("Reformer does "),Et=o("strong"),Qi=t("not"),Ki=t(" work with "),Lt=o("em"),Ui=t("torch.nn.DataParallel"),Bi=t(" due to a bug in PyTorch, see "),Me=o("a"),Xi=t("issue #36035"),ro=m(),xs=o("h2"),Vs=o("a"),Ft=o("span"),u(Re.$$.fragment),Vi=m(),Pt=o("span"),Gi=t("Axial Positional Encodings"),io=m(),$=o("p"),Ji=t("Axial Positional Encodings were first implemented in Google\u2019s "),$e=o("a"),Yi=t("trax library"),Zi=t(`
and developed by the authors of this model\u2019s paper. In models that are treating very long input sequences, the
conventional position id encodings store an embedings vector of size `),lo=new x,mo=t(" being the "),Ct=o("code"),sl=t("config.hidden_size"),el=t(` for
every position `),po=new x,co=t(", with "),ho=new x,go=t(" being "),At=o("code"),al=t("config.max_embedding_size"),tl=t(`. This means that having
a sequence length of `),uo=new x,fo=t(" and a "),St=o("code"),nl=t("config.hidden_size"),ol=t(" of "),_o=new x,vo=t(`
would result in a position encoding matrix:
`),yo=new x,bo=m(),Ts=o("p"),rl=t("which alone has over 500M parameters to store. Axial positional encodings factorize "),ko=new x,wo=t(` into two matrices:
`),zo=new x,xo=m(),qe=o("p"),il=t(`and
`),To=new x,Mo=m(),Ee=o("p"),ll=t(`with:
`),Ro=new x,$o=m(),Le=o("p"),ml=t(`Therefore the following holds:
`),qo=new x,Eo=m(),F=o("p"),pl=t("Intuitively, this means that a position embedding vector "),Lo=new x,Fo=t(` is now the composition of two
factorized embedding vectors: `),Po=new x,Co=t(", where as the "),jt=o("code"),cl=t("config.max_embedding_size"),hl=t(` dimension
`),Ao=new x,So=t(" is factorized into "),jo=new x,No=t(`. This design ensures that each position embedding vector
`),Do=new x,Ho=t(" is unique."),Oo=m(),ms=o("p"),dl=t("Using the above example again, axial position encoding with "),Io=new x,Wo=t(`
can drastically reduced the number of parameters to `),Qo=new x,Ko=t(" parameters."),Uo=m(),q=o("p"),gl=t("In practice, the parameter "),Nt=o("code"),ul=t("config.axial_pos_embds_dim"),fl=t(" is set to a tuple "),Bo=new x,Xo=t(` which sum has to be
equal to `),Dt=o("code"),_l=t("config.hidden_size"),vl=t(" and "),Ht=o("code"),yl=t("config.axial_pos_shape"),bl=t(" is set to a tuple "),Vo=new x,Go=t(` which
product has to be equal to `),Ot=o("code"),kl=t("config.max_embedding_size"),wl=t(", which during training has to be equal to the "),It=o("em"),zl=t(`sequence
length`),xl=t(" of the "),Wt=o("code"),Tl=t("input_ids"),Ml=t("."),Jo=m(),Ms=o("h2"),Gs=o("a"),Qt=o("span"),u(Fe.$$.fragment),Rl=m(),Kt=o("span"),$l=t("LSH Self Attention"),Yo=m(),Z=o("p"),ql=t(`In Locality sensitive hashing (LSH) self attention the key and query projection weights are tied. Therefore, the key
query embedding vectors are also tied. LSH self attention uses the locality sensitive hashing mechanism proposed in
`),Pe=o("a"),El=t("Practical and Optimal LSH for Angular Distance"),Ll=t(` to assign each of the tied key
query embedding vectors to one of `),Ut=o("code"),Fl=t("config.num_buckets"),Pl=t(` possible buckets. The premise is that the more \u201Csimilar\u201D
key query embedding vectors (in terms of `),Bt=o("em"),Cl=t("cosine similarity"),Al=t(`) are to each other, the more likely they are assigned to
the same bucket.`),Zo=m(),j=o("p"),Sl=t("The accuracy of the LSH mechanism can be improved by increasing "),Xt=o("code"),jl=t("config.num_hashes"),Nl=t(` or directly the argument
`),Vt=o("code"),Dl=t("num_hashes"),Hl=t(` of the forward function so that the output of the LSH self attention better approximates the output
of the \u201Cnormal\u201D full self attention. The buckets are then sorted and chunked into query key embedding vector chunks
each of length `),Gt=o("code"),Ol=t("config.lsh_chunk_length"),Il=t(`. For each chunk, the query embedding vectors attend to its key vectors
(which are tied to themselves) and to the key embedding vectors of `),Jt=o("code"),Wl=t("config.lsh_num_chunks_before"),Ql=t(` previous
neighboring chunks and `),Yt=o("code"),Kl=t("config.lsh_num_chunks_after"),Ul=t(" following neighboring chunks."),sr=m(),ps=o("p"),Bl=t("For more information, see the "),Ce=o("a"),Xl=t("original Paper"),Vl=t(" or this great "),Ae=o("a"),Gl=t("blog post"),Jl=t("."),er=m(),I=o("p"),Yl=t("Note that "),Zt=o("code"),Zl=t("config.num_buckets"),sm=t(" can also be factorized into a list "),ar=new x,tr=t(". This way instead of assigning the query key embedding vectors to one of "),nr=new x,or=t(" they are assigned to one of "),rr=new x,ir=t(`. This is crucial for very long sequences to
save memory.`),lr=m(),cs=o("p"),em=t("When training a model from scratch, it is recommended to leave "),sn=o("code"),am=t("config.num_buckets=None"),tm=t(`, so that depending on the
sequence length a good value for `),en=o("code"),nm=t("num_buckets"),om=t(` is calculated on the fly. This value will then automatically be
saved in the config and should be reused for inference.`),mr=m(),ss=o("p"),rm=t(`Using LSH self attention, the memory and time complexity of the query-key matmul operation can be reduced from
`),pr=new x,cr=t(" to "),hr=new x,dr=t(`, which usually represents the memory
and time bottleneck in a transformer model, with `),gr=new x,ur=t(" being the sequence length."),fr=m(),Rs=o("h2"),Js=o("a"),an=o("span"),u(Se.$$.fragment),im=m(),tn=o("span"),lm=t("Local Self Attention"),_r=m(),es=o("p"),mm=t(`Local self attention is essentially a \u201Cnormal\u201D self attention layer with key, query and value projections, but is
chunked so that in each chunk of length `),nn=o("code"),pm=t("config.local_chunk_length"),cm=t(` the query embedding vectors only attends to
the key embedding vectors in its chunk and to the key embedding vectors of `),on=o("code"),hm=t("config.local_num_chunks_before"),dm=t(`
previous neighboring chunks and `),rn=o("code"),gm=t("config.local_num_chunks_after"),um=t(" following neighboring chunks."),vr=m(),as=o("p"),fm=t(`Using Local self attention, the memory and time complexity of the query-key matmul operation can be reduced from
`),yr=new x,br=t(" to "),kr=new x,wr=t(`, which usually represents the memory
and time bottleneck in a transformer model, with `),zr=new x,xr=t(" being the sequence length."),Tr=m(),$s=o("h2"),Ys=o("a"),ln=o("span"),u(je.$$.fragment),_m=m(),mn=o("span"),vm=t("Training"),Mr=m(),hs=o("p"),ym=t(`During training, we must ensure that the sequence length is set to a value that can be divided by the least common
multiple of `),pn=o("code"),bm=t("config.lsh_chunk_length"),km=t(" and "),cn=o("code"),wm=t("config.local_chunk_length"),zm=t(` and that the parameters of the Axial
Positional Encodings are correctly set as described above. Reformer is very memory efficient so that the model can
easily be trained on sequences as long as 64000 tokens.`),Rr=m(),Zs=o("p"),xm=t("For training, the "),Ba=o("a"),Tm=t("ReformerModelWithLMHead"),Mm=t(" should be used as follows:"),$r=m(),u(Ne.$$.fragment),qr=m(),qs=o("h2"),se=o("a"),hn=o("span"),u(De.$$.fragment),Rm=m(),dn=o("span"),$m=t("ReformerConfig"),Er=m(),N=o("div"),u(He.$$.fragment),qm=m(),Oe=o("p"),Em=t("This is the configuration class to store the configuration of a "),Xa=o("a"),Lm=t("ReformerModel"),Fm=t(`. It is used to instantiate a
Reformer model according to the specified arguments, defining the model architecture.`),Pm=m(),Es=o("p"),Cm=t("Configuration objects inherit from "),Va=o("a"),Am=t("PretrainedConfig"),Sm=t(` and can be used to control the model outputs. Read the
documentation from `),Ga=o("a"),jm=t("PretrainedConfig"),Nm=t(" for more information."),Dm=m(),gn=o("p"),Hm=t("Examples:"),Om=m(),u(Ie.$$.fragment),Lr=m(),Ls=o("h2"),ee=o("a"),un=o("span"),u(We.$$.fragment),Im=m(),fn=o("span"),Wm=t("ReformerTokenizer"),Fr=m(),J=o("div"),u(Qe.$$.fragment),Qm=m(),Ke=o("p"),Km=t("Construct a Reformer tokenizer. Based on "),Ue=o("a"),Um=t("SentencePiece"),Bm=t(" ."),Xm=m(),Be=o("p"),Vm=t("This tokenizer inherits from "),Ja=o("a"),Gm=t("PreTrainedTokenizer"),Jm=t(` which contains most of the main methods. Users should refer to
this superclass for more information regarding those methods.`),Ym=m(),_n=o("div"),Pr=m(),Fs=o("h2"),ae=o("a"),vn=o("span"),u(Xe.$$.fragment),Zm=m(),yn=o("span"),sp=t("ReformerTokenizerFast"),Cr=m(),rs=o("div"),u(Ve.$$.fragment),ep=m(),Ps=o("p"),ap=t("Construct a \u201Cfast\u201D Reformer tokenizer (backed by HuggingFace\u2019s "),bn=o("em"),tp=t("tokenizers"),np=t(` library). Based on
`),Ge=o("a"),op=t("Unigram"),rp=t("."),ip=m(),Je=o("p"),lp=t("This tokenizer inherits from "),Ya=o("a"),mp=t("PreTrainedTokenizerFast"),pp=t(` which contains most of the main methods. Users should
refer to this superclass for more information regarding those methods.`),Ar=m(),Cs=o("h2"),te=o("a"),kn=o("span"),u(Ye.$$.fragment),cp=m(),wn=o("span"),hp=t("ReformerModel"),Sr=m(),D=o("div"),u(Ze.$$.fragment),dp=m(),sa=o("p"),gp=t(`The bare Reformer Model transformer outputting raw hidden-stateswithout any specific head on top.
Reformer was proposed in `),ea=o("a"),up=t("Reformer: The Efficient Transformer"),fp=t(` by Nikita Kitaev,
\u0141ukasz Kaiser, Anselm Levskaya.`),_p=m(),aa=o("p"),vp=t("This model inherits from "),Za=o("a"),yp=t("PreTrainedModel"),bp=t(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),kp=m(),ta=o("p"),wp=t("This model is also a PyTorch "),na=o("a"),zp=t("torch.nn.Module"),xp=t(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Tp=m(),W=o("div"),u(oa.$$.fragment),Mp=m(),As=o("p"),Rp=t("The "),st=o("a"),$p=t("ReformerModel"),qp=t(" forward method, overrides the "),zn=o("code"),Ep=t("__call__"),Lp=t(" special method."),Fp=m(),u(ne.$$.fragment),Pp=m(),xn=o("p"),Cp=t("Example:"),Ap=m(),u(ra.$$.fragment),jr=m(),Ss=o("h2"),oe=o("a"),Tn=o("span"),u(ia.$$.fragment),Sp=m(),Mn=o("span"),jp=t("ReformerModelWithLMHead"),Nr=m(),H=o("div"),u(la.$$.fragment),Np=m(),js=o("p"),Dp=t("Reformer Model with a "),Rn=o("code"),Hp=t("language modeling"),Op=t(` head on top.
Reformer was proposed in `),ma=o("a"),Ip=t("Reformer: The Efficient Transformer"),Wp=t(` by Nikita Kitaev,
\u0141ukasz Kaiser, Anselm Levskaya.`),Qp=m(),pa=o("p"),Kp=t("This model inherits from "),et=o("a"),Up=t("PreTrainedModel"),Bp=t(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Xp=m(),ca=o("p"),Vp=t("This model is also a PyTorch "),ha=o("a"),Gp=t("torch.nn.Module"),Jp=t(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Yp=m(),Q=o("div"),u(da.$$.fragment),Zp=m(),Ns=o("p"),sc=t("The "),at=o("a"),ec=t("ReformerModelWithLMHead"),ac=t(" forward method, overrides the "),$n=o("code"),tc=t("__call__"),nc=t(" special method."),oc=m(),u(re.$$.fragment),rc=m(),qn=o("p"),ic=t("Example:"),lc=m(),u(ga.$$.fragment),Dr=m(),Ds=o("h2"),ie=o("a"),En=o("span"),u(ua.$$.fragment),mc=m(),Ln=o("span"),pc=t("ReformerForMaskedLM"),Hr=m(),O=o("div"),u(fa.$$.fragment),cc=m(),Hs=o("p"),hc=t("Reformer Model with a "),Fn=o("code"),dc=t("language modeling"),gc=t(` head on top.
Reformer was proposed in `),_a=o("a"),uc=t("Reformer: The Efficient Transformer"),fc=t(` by Nikita Kitaev,
\u0141ukasz Kaiser, Anselm Levskaya.`),_c=m(),va=o("p"),vc=t("This model inherits from "),tt=o("a"),yc=t("PreTrainedModel"),bc=t(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),kc=m(),ya=o("p"),wc=t("This model is also a PyTorch "),ba=o("a"),zc=t("torch.nn.Module"),xc=t(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Tc=m(),K=o("div"),u(ka.$$.fragment),Mc=m(),Os=o("p"),Rc=t("The "),nt=o("a"),$c=t("ReformerForMaskedLM"),qc=t(" forward method, overrides the "),Pn=o("code"),Ec=t("__call__"),Lc=t(" special method."),Fc=m(),u(le.$$.fragment),Pc=m(),Cn=o("p"),Cc=t("Example:"),Ac=m(),u(wa.$$.fragment),Or=m(),Is=o("h2"),me=o("a"),An=o("span"),u(za.$$.fragment),Sc=m(),Sn=o("span"),jc=t("ReformerForSequenceClassification"),Ir=m(),A=o("div"),u(xa.$$.fragment),Nc=m(),jn=o("p"),Dc=t(`Reformer Model transformer with a sequence classification/regression head on top (a linear layer on top of the
pooled output) e.g. for GLUE tasks.`),Hc=m(),Ta=o("p"),Oc=t("Reformer was proposed in "),Ma=o("a"),Ic=t("Reformer: The Efficient Transformer"),Wc=t(` by Nikita Kitaev,
\u0141ukasz Kaiser, Anselm Levskaya.`),Qc=m(),Ra=o("p"),Kc=t("This model inherits from "),ot=o("a"),Uc=t("PreTrainedModel"),Bc=t(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Xc=m(),$a=o("p"),Vc=t("This model is also a PyTorch "),qa=o("a"),Gc=t("torch.nn.Module"),Jc=t(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Yc=m(),P=o("div"),u(Ea.$$.fragment),Zc=m(),Ws=o("p"),sh=t("The "),rt=o("a"),eh=t("ReformerForSequenceClassification"),ah=t(" forward method, overrides the "),Nn=o("code"),th=t("__call__"),nh=t(" special method."),oh=m(),u(pe.$$.fragment),rh=m(),Dn=o("p"),ih=t("Example of single-label classification:"),lh=m(),u(La.$$.fragment),mh=m(),Hn=o("p"),ph=t("Example of multi-label classification:"),ch=m(),u(Fa.$$.fragment),Wr=m(),Qs=o("h2"),ce=o("a"),On=o("span"),u(Pa.$$.fragment),hh=m(),In=o("span"),dh=t("ReformerForQuestionAnswering"),Qr=m(),S=o("div"),u(Ca.$$.fragment),gh=m(),Ks=o("p"),uh=t(`Reformer Model with a span classification head on top for extractive question-answering tasks like SQuAD / TriviaQA
( a linear layer on top of hidden-states output to compute `),Wn=o("code"),fh=t("span start logits"),_h=t(" and "),Qn=o("code"),vh=t("span end logits"),yh=t("."),bh=m(),Aa=o("p"),kh=t("Reformer was proposed in "),Sa=o("a"),wh=t("Reformer: The Efficient Transformer"),zh=t(` by Nikita Kitaev,
\u0141ukasz Kaiser, Anselm Levskaya.`),xh=m(),ja=o("p"),Th=t("This model inherits from "),it=o("a"),Mh=t("PreTrainedModel"),Rh=t(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),$h=m(),Na=o("p"),qh=t("This model is also a PyTorch "),Da=o("a"),Eh=t("torch.nn.Module"),Lh=t(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Fh=m(),U=o("div"),u(Ha.$$.fragment),Ph=m(),Us=o("p"),Ch=t("The "),lt=o("a"),Ah=t("ReformerForQuestionAnswering"),Sh=t(" forward method, overrides the "),Kn=o("code"),jh=t("__call__"),Nh=t(" special method."),Dh=m(),u(he.$$.fragment),Hh=m(),Un=o("p"),Oh=t("Example:"),Ih=m(),u(Oa.$$.fragment),this.h()},l(e){const c=Qu('[data-svelte="svelte-1phssyn"]',document.head);d=r(c,"META",{name:!0,content:!0}),c.forEach(a),M=p(e),g=r(e,"H1",{class:!0});var Ia=i(g);z=r(Ia,"A",{id:!0,class:!0,href:!0});var Bn=i(z);R=r(Bn,"SPAN",{});var Xn=i(R);f(w.$$.fragment,Xn),Xn.forEach(a),Bn.forEach(a),k=p(Ia),L=r(Ia,"SPAN",{});var Vn=i(L);xi=n(Vn,"Reformer"),Vn.forEach(a),Ia.forEach(a),Yn=p(e),ws=r(e,"P",{});var de=i(ws);Tt=r(de,"STRONG",{});var Bh=i(Tt);Ti=n(Bh,"DISCLAIMER:"),Bh.forEach(a),Mi=n(de," This model is still a work in progress, if you see something strange, file a "),be=r(de,"A",{href:!0,rel:!0});var Xh=i(be);Ri=n(Xh,"Github Issue"),Xh.forEach(a),$i=n(de,"."),de.forEach(a),Zn=p(e),zs=r(e,"H2",{class:!0});var Ur=i(zs);Bs=r(Ur,"A",{id:!0,class:!0,href:!0});var Vh=i(Bs);Mt=r(Vh,"SPAN",{});var Gh=i(Mt);f(ke.$$.fragment,Gh),Gh.forEach(a),Vh.forEach(a),qi=p(Ur),Rt=r(Ur,"SPAN",{});var Jh=i(Rt);Ei=n(Jh,"Overview"),Jh.forEach(a),Ur.forEach(a),so=p(e),Xs=r(e,"P",{});var Br=i(Xs);Li=n(Br,"The Reformer model was proposed in the paper "),we=r(Br,"A",{href:!0,rel:!0});var Yh=i(we);Fi=n(Yh,"Reformer: The Efficient Transformer"),Yh.forEach(a),Pi=n(Br," by Nikita Kitaev, \u0141ukasz Kaiser, Anselm Levskaya."),Br.forEach(a),eo=p(e),Qa=r(e,"P",{});var Zh=i(Qa);Ci=n(Zh,"The abstract from the paper is the following:"),Zh.forEach(a),ao=p(e),Ka=r(e,"P",{});var sd=i(Ka);$t=r(sd,"EM",{});var ed=i($t);Ai=n(ed,`Large Transformer models routinely achieve state-of-the-art results on a number of tasks but training these models can
be prohibitively costly, especially on long sequences. We introduce two techniques to improve the efficiency of
Transformers. For one, we replace dot-product attention by one that uses locality-sensitive hashing, changing its
complexity from O(L^2) to O(Llog(L)), where L is the length of the sequence. Furthermore, we use reversible residual
layers instead of the standard residuals, which allows storing activations only once in the training process instead of
N times, where N is the number of layers. The resulting model, the Reformer, performs on par with Transformer models
while being much more memory-efficient and much faster on long sequences.`),ed.forEach(a),sd.forEach(a),to=p(e),is=r(e,"P",{});var mt=i(is);Si=n(mt,"This model was contributed by "),ze=r(mt,"A",{href:!0,rel:!0});var ad=i(ze);ji=n(ad,"patrickvonplaten"),ad.forEach(a),Ni=n(mt,`. The Authors\u2019 code can be
found `),xe=r(mt,"A",{href:!0,rel:!0});var td=i(xe);Di=n(td,"here"),td.forEach(a),Hi=n(mt,"."),mt.forEach(a),no=p(e),Te=r(e,"P",{});var Wh=i(Te);qt=r(Wh,"STRONG",{});var nd=i(qt);Oi=n(nd,"Note"),nd.forEach(a),Ii=n(Wh,":"),Wh.forEach(a),oo=p(e),Ua=r(e,"UL",{});var od=i(Ua);ls=r(od,"LI",{});var Wa=i(ls);Wi=n(Wa,"Reformer does "),Et=r(Wa,"STRONG",{});var rd=i(Et);Qi=n(rd,"not"),rd.forEach(a),Ki=n(Wa," work with "),Lt=r(Wa,"EM",{});var id=i(Lt);Ui=n(id,"torch.nn.DataParallel"),id.forEach(a),Bi=n(Wa," due to a bug in PyTorch, see "),Me=r(Wa,"A",{href:!0,rel:!0});var ld=i(Me);Xi=n(ld,"issue #36035"),ld.forEach(a),Wa.forEach(a),od.forEach(a),ro=p(e),xs=r(e,"H2",{class:!0});var Xr=i(xs);Vs=r(Xr,"A",{id:!0,class:!0,href:!0});var md=i(Vs);Ft=r(md,"SPAN",{});var pd=i(Ft);f(Re.$$.fragment,pd),pd.forEach(a),md.forEach(a),Vi=p(Xr),Pt=r(Xr,"SPAN",{});var cd=i(Pt);Gi=n(cd,"Axial Positional Encodings"),cd.forEach(a),Xr.forEach(a),io=p(e),$=r(e,"P",{});var E=i($);Ji=n(E,"Axial Positional Encodings were first implemented in Google\u2019s "),$e=r(E,"A",{href:!0,rel:!0});var hd=i($e);Yi=n(hd,"trax library"),hd.forEach(a),Zi=n(E,`
and developed by the authors of this model\u2019s paper. In models that are treating very long input sequences, the
conventional position id encodings store an embedings vector of size `),lo=T(E),mo=n(E," being the "),Ct=r(E,"CODE",{});var dd=i(Ct);sl=n(dd,"config.hidden_size"),dd.forEach(a),el=n(E,` for
every position `),po=T(E),co=n(E,", with "),ho=T(E),go=n(E," being "),At=r(E,"CODE",{});var gd=i(At);al=n(gd,"config.max_embedding_size"),gd.forEach(a),tl=n(E,`. This means that having
a sequence length of `),uo=T(E),fo=n(E," and a "),St=r(E,"CODE",{});var ud=i(St);nl=n(ud,"config.hidden_size"),ud.forEach(a),ol=n(E," of "),_o=T(E),vo=n(E,`
would result in a position encoding matrix:
`),yo=T(E),E.forEach(a),bo=p(e),Ts=r(e,"P",{});var Gn=i(Ts);rl=n(Gn,"which alone has over 500M parameters to store. Axial positional encodings factorize "),ko=T(Gn),wo=n(Gn,` into two matrices:
`),zo=T(Gn),Gn.forEach(a),xo=p(e),qe=r(e,"P",{});var Qh=i(qe);il=n(Qh,`and
`),To=T(Qh),Qh.forEach(a),Mo=p(e),Ee=r(e,"P",{});var Kh=i(Ee);ll=n(Kh,`with:
`),Ro=T(Kh),Kh.forEach(a),$o=p(e),Le=r(e,"P",{});var Uh=i(Le);ml=n(Uh,`Therefore the following holds:
`),qo=T(Uh),Uh.forEach(a),Eo=p(e),F=r(e,"P",{});var B=i(F);pl=n(B,"Intuitively, this means that a position embedding vector "),Lo=T(B),Fo=n(B,` is now the composition of two
factorized embedding vectors: `),Po=T(B),Co=n(B,", where as the "),jt=r(B,"CODE",{});var fd=i(jt);cl=n(fd,"config.max_embedding_size"),fd.forEach(a),hl=n(B,` dimension
`),Ao=T(B),So=n(B," is factorized into "),jo=T(B),No=n(B,`. This design ensures that each position embedding vector
`),Do=T(B),Ho=n(B," is unique."),B.forEach(a),Oo=p(e),ms=r(e,"P",{});var pt=i(ms);dl=n(pt,"Using the above example again, axial position encoding with "),Io=T(pt),Wo=n(pt,`
can drastically reduced the number of parameters to `),Qo=T(pt),Ko=n(pt," parameters."),pt.forEach(a),Uo=p(e),q=r(e,"P",{});var C=i(q);gl=n(C,"In practice, the parameter "),Nt=r(C,"CODE",{});var _d=i(Nt);ul=n(_d,"config.axial_pos_embds_dim"),_d.forEach(a),fl=n(C," is set to a tuple "),Bo=T(C),Xo=n(C,` which sum has to be
equal to `),Dt=r(C,"CODE",{});var vd=i(Dt);_l=n(vd,"config.hidden_size"),vd.forEach(a),vl=n(C," and "),Ht=r(C,"CODE",{});var yd=i(Ht);yl=n(yd,"config.axial_pos_shape"),yd.forEach(a),bl=n(C," is set to a tuple "),Vo=T(C),Go=n(C,` which
product has to be equal to `),Ot=r(C,"CODE",{});var bd=i(Ot);kl=n(bd,"config.max_embedding_size"),bd.forEach(a),wl=n(C,", which during training has to be equal to the "),It=r(C,"EM",{});var kd=i(It);zl=n(kd,`sequence
length`),kd.forEach(a),xl=n(C," of the "),Wt=r(C,"CODE",{});var wd=i(Wt);Tl=n(wd,"input_ids"),wd.forEach(a),Ml=n(C,"."),C.forEach(a),Jo=p(e),Ms=r(e,"H2",{class:!0});var Vr=i(Ms);Gs=r(Vr,"A",{id:!0,class:!0,href:!0});var zd=i(Gs);Qt=r(zd,"SPAN",{});var xd=i(Qt);f(Fe.$$.fragment,xd),xd.forEach(a),zd.forEach(a),Rl=p(Vr),Kt=r(Vr,"SPAN",{});var Td=i(Kt);$l=n(Td,"LSH Self Attention"),Td.forEach(a),Vr.forEach(a),Yo=p(e),Z=r(e,"P",{});var ge=i(Z);ql=n(ge,`In Locality sensitive hashing (LSH) self attention the key and query projection weights are tied. Therefore, the key
query embedding vectors are also tied. LSH self attention uses the locality sensitive hashing mechanism proposed in
`),Pe=r(ge,"A",{href:!0,rel:!0});var Md=i(Pe);El=n(Md,"Practical and Optimal LSH for Angular Distance"),Md.forEach(a),Ll=n(ge,` to assign each of the tied key
query embedding vectors to one of `),Ut=r(ge,"CODE",{});var Rd=i(Ut);Fl=n(Rd,"config.num_buckets"),Rd.forEach(a),Pl=n(ge,` possible buckets. The premise is that the more \u201Csimilar\u201D
key query embedding vectors (in terms of `),Bt=r(ge,"EM",{});var $d=i(Bt);Cl=n($d,"cosine similarity"),$d.forEach(a),Al=n(ge,`) are to each other, the more likely they are assigned to
the same bucket.`),ge.forEach(a),Zo=p(e),j=r(e,"P",{});var ts=i(j);Sl=n(ts,"The accuracy of the LSH mechanism can be improved by increasing "),Xt=r(ts,"CODE",{});var qd=i(Xt);jl=n(qd,"config.num_hashes"),qd.forEach(a),Nl=n(ts,` or directly the argument
`),Vt=r(ts,"CODE",{});var Ed=i(Vt);Dl=n(Ed,"num_hashes"),Ed.forEach(a),Hl=n(ts,` of the forward function so that the output of the LSH self attention better approximates the output
of the \u201Cnormal\u201D full self attention. The buckets are then sorted and chunked into query key embedding vector chunks
each of length `),Gt=r(ts,"CODE",{});var Ld=i(Gt);Ol=n(Ld,"config.lsh_chunk_length"),Ld.forEach(a),Il=n(ts,`. For each chunk, the query embedding vectors attend to its key vectors
(which are tied to themselves) and to the key embedding vectors of `),Jt=r(ts,"CODE",{});var Fd=i(Jt);Wl=n(Fd,"config.lsh_num_chunks_before"),Fd.forEach(a),Ql=n(ts,` previous
neighboring chunks and `),Yt=r(ts,"CODE",{});var Pd=i(Yt);Kl=n(Pd,"config.lsh_num_chunks_after"),Pd.forEach(a),Ul=n(ts," following neighboring chunks."),ts.forEach(a),sr=p(e),ps=r(e,"P",{});var ct=i(ps);Bl=n(ct,"For more information, see the "),Ce=r(ct,"A",{href:!0,rel:!0});var Cd=i(Ce);Xl=n(Cd,"original Paper"),Cd.forEach(a),Vl=n(ct," or this great "),Ae=r(ct,"A",{href:!0,rel:!0});var Ad=i(Ae);Gl=n(Ad,"blog post"),Ad.forEach(a),Jl=n(ct,"."),ct.forEach(a),er=p(e),I=r(e,"P",{});var ds=i(I);Yl=n(ds,"Note that "),Zt=r(ds,"CODE",{});var Sd=i(Zt);Zl=n(Sd,"config.num_buckets"),Sd.forEach(a),sm=n(ds," can also be factorized into a list "),ar=T(ds),tr=n(ds,". This way instead of assigning the query key embedding vectors to one of "),nr=T(ds),or=n(ds," they are assigned to one of "),rr=T(ds),ir=n(ds,`. This is crucial for very long sequences to
save memory.`),ds.forEach(a),lr=p(e),cs=r(e,"P",{});var ht=i(cs);em=n(ht,"When training a model from scratch, it is recommended to leave "),sn=r(ht,"CODE",{});var jd=i(sn);am=n(jd,"config.num_buckets=None"),jd.forEach(a),tm=n(ht,`, so that depending on the
sequence length a good value for `),en=r(ht,"CODE",{});var Nd=i(en);nm=n(Nd,"num_buckets"),Nd.forEach(a),om=n(ht,` is calculated on the fly. This value will then automatically be
saved in the config and should be reused for inference.`),ht.forEach(a),mr=p(e),ss=r(e,"P",{});var ue=i(ss);rm=n(ue,`Using LSH self attention, the memory and time complexity of the query-key matmul operation can be reduced from
`),pr=T(ue),cr=n(ue," to "),hr=T(ue),dr=n(ue,`, which usually represents the memory
and time bottleneck in a transformer model, with `),gr=T(ue),ur=n(ue," being the sequence length."),ue.forEach(a),fr=p(e),Rs=r(e,"H2",{class:!0});var Gr=i(Rs);Js=r(Gr,"A",{id:!0,class:!0,href:!0});var Dd=i(Js);an=r(Dd,"SPAN",{});var Hd=i(an);f(Se.$$.fragment,Hd),Hd.forEach(a),Dd.forEach(a),im=p(Gr),tn=r(Gr,"SPAN",{});var Od=i(tn);lm=n(Od,"Local Self Attention"),Od.forEach(a),Gr.forEach(a),_r=p(e),es=r(e,"P",{});var fe=i(es);mm=n(fe,`Local self attention is essentially a \u201Cnormal\u201D self attention layer with key, query and value projections, but is
chunked so that in each chunk of length `),nn=r(fe,"CODE",{});var Id=i(nn);pm=n(Id,"config.local_chunk_length"),Id.forEach(a),cm=n(fe,` the query embedding vectors only attends to
the key embedding vectors in its chunk and to the key embedding vectors of `),on=r(fe,"CODE",{});var Wd=i(on);hm=n(Wd,"config.local_num_chunks_before"),Wd.forEach(a),dm=n(fe,`
previous neighboring chunks and `),rn=r(fe,"CODE",{});var Qd=i(rn);gm=n(Qd,"config.local_num_chunks_after"),Qd.forEach(a),um=n(fe," following neighboring chunks."),fe.forEach(a),vr=p(e),as=r(e,"P",{});var _e=i(as);fm=n(_e,`Using Local self attention, the memory and time complexity of the query-key matmul operation can be reduced from
`),yr=T(_e),br=n(_e," to "),kr=T(_e),wr=n(_e,`, which usually represents the memory
and time bottleneck in a transformer model, with `),zr=T(_e),xr=n(_e," being the sequence length."),_e.forEach(a),Tr=p(e),$s=r(e,"H2",{class:!0});var Jr=i($s);Ys=r(Jr,"A",{id:!0,class:!0,href:!0});var Kd=i(Ys);ln=r(Kd,"SPAN",{});var Ud=i(ln);f(je.$$.fragment,Ud),Ud.forEach(a),Kd.forEach(a),_m=p(Jr),mn=r(Jr,"SPAN",{});var Bd=i(mn);vm=n(Bd,"Training"),Bd.forEach(a),Jr.forEach(a),Mr=p(e),hs=r(e,"P",{});var dt=i(hs);ym=n(dt,`During training, we must ensure that the sequence length is set to a value that can be divided by the least common
multiple of `),pn=r(dt,"CODE",{});var Xd=i(pn);bm=n(Xd,"config.lsh_chunk_length"),Xd.forEach(a),km=n(dt," and "),cn=r(dt,"CODE",{});var Vd=i(cn);wm=n(Vd,"config.local_chunk_length"),Vd.forEach(a),zm=n(dt,` and that the parameters of the Axial
Positional Encodings are correctly set as described above. Reformer is very memory efficient so that the model can
easily be trained on sequences as long as 64000 tokens.`),dt.forEach(a),Rr=p(e),Zs=r(e,"P",{});var Yr=i(Zs);xm=n(Yr,"For training, the "),Ba=r(Yr,"A",{href:!0});var Gd=i(Ba);Tm=n(Gd,"ReformerModelWithLMHead"),Gd.forEach(a),Mm=n(Yr," should be used as follows:"),Yr.forEach(a),$r=p(e),f(Ne.$$.fragment,e),qr=p(e),qs=r(e,"H2",{class:!0});var Zr=i(qs);se=r(Zr,"A",{id:!0,class:!0,href:!0});var Jd=i(se);hn=r(Jd,"SPAN",{});var Yd=i(hn);f(De.$$.fragment,Yd),Yd.forEach(a),Jd.forEach(a),Rm=p(Zr),dn=r(Zr,"SPAN",{});var Zd=i(dn);$m=n(Zd,"ReformerConfig"),Zd.forEach(a),Zr.forEach(a),Er=p(e),N=r(e,"DIV",{class:!0});var gs=i(N);f(He.$$.fragment,gs),qm=p(gs),Oe=r(gs,"P",{});var si=i(Oe);Em=n(si,"This is the configuration class to store the configuration of a "),Xa=r(si,"A",{href:!0});var sg=i(Xa);Lm=n(sg,"ReformerModel"),sg.forEach(a),Fm=n(si,`. It is used to instantiate a
Reformer model according to the specified arguments, defining the model architecture.`),si.forEach(a),Pm=p(gs),Es=r(gs,"P",{});var gt=i(Es);Cm=n(gt,"Configuration objects inherit from "),Va=r(gt,"A",{href:!0});var eg=i(Va);Am=n(eg,"PretrainedConfig"),eg.forEach(a),Sm=n(gt,` and can be used to control the model outputs. Read the
documentation from `),Ga=r(gt,"A",{href:!0});var ag=i(Ga);jm=n(ag,"PretrainedConfig"),ag.forEach(a),Nm=n(gt," for more information."),gt.forEach(a),Dm=p(gs),gn=r(gs,"P",{});var tg=i(gn);Hm=n(tg,"Examples:"),tg.forEach(a),Om=p(gs),f(Ie.$$.fragment,gs),gs.forEach(a),Lr=p(e),Ls=r(e,"H2",{class:!0});var ei=i(Ls);ee=r(ei,"A",{id:!0,class:!0,href:!0});var ng=i(ee);un=r(ng,"SPAN",{});var og=i(un);f(We.$$.fragment,og),og.forEach(a),ng.forEach(a),Im=p(ei),fn=r(ei,"SPAN",{});var rg=i(fn);Wm=n(rg,"ReformerTokenizer"),rg.forEach(a),ei.forEach(a),Fr=p(e),J=r(e,"DIV",{class:!0});var ve=i(J);f(Qe.$$.fragment,ve),Qm=p(ve),Ke=r(ve,"P",{});var ai=i(Ke);Km=n(ai,"Construct a Reformer tokenizer. Based on "),Ue=r(ai,"A",{href:!0,rel:!0});var ig=i(Ue);Um=n(ig,"SentencePiece"),ig.forEach(a),Bm=n(ai," ."),ai.forEach(a),Xm=p(ve),Be=r(ve,"P",{});var ti=i(Be);Vm=n(ti,"This tokenizer inherits from "),Ja=r(ti,"A",{href:!0});var lg=i(Ja);Gm=n(lg,"PreTrainedTokenizer"),lg.forEach(a),Jm=n(ti,` which contains most of the main methods. Users should refer to
this superclass for more information regarding those methods.`),ti.forEach(a),Ym=p(ve),_n=r(ve,"DIV",{class:!0}),i(_n).forEach(a),ve.forEach(a),Pr=p(e),Fs=r(e,"H2",{class:!0});var ni=i(Fs);ae=r(ni,"A",{id:!0,class:!0,href:!0});var mg=i(ae);vn=r(mg,"SPAN",{});var pg=i(vn);f(Xe.$$.fragment,pg),pg.forEach(a),mg.forEach(a),Zm=p(ni),yn=r(ni,"SPAN",{});var cg=i(yn);sp=n(cg,"ReformerTokenizerFast"),cg.forEach(a),ni.forEach(a),Cr=p(e),rs=r(e,"DIV",{class:!0});var ut=i(rs);f(Ve.$$.fragment,ut),ep=p(ut),Ps=r(ut,"P",{});var ft=i(Ps);ap=n(ft,"Construct a \u201Cfast\u201D Reformer tokenizer (backed by HuggingFace\u2019s "),bn=r(ft,"EM",{});var hg=i(bn);tp=n(hg,"tokenizers"),hg.forEach(a),np=n(ft,` library). Based on
`),Ge=r(ft,"A",{href:!0,rel:!0});var dg=i(Ge);op=n(dg,"Unigram"),dg.forEach(a),rp=n(ft,"."),ft.forEach(a),ip=p(ut),Je=r(ut,"P",{});var oi=i(Je);lp=n(oi,"This tokenizer inherits from "),Ya=r(oi,"A",{href:!0});var gg=i(Ya);mp=n(gg,"PreTrainedTokenizerFast"),gg.forEach(a),pp=n(oi,` which contains most of the main methods. Users should
refer to this superclass for more information regarding those methods.`),oi.forEach(a),ut.forEach(a),Ar=p(e),Cs=r(e,"H2",{class:!0});var ri=i(Cs);te=r(ri,"A",{id:!0,class:!0,href:!0});var ug=i(te);kn=r(ug,"SPAN",{});var fg=i(kn);f(Ye.$$.fragment,fg),fg.forEach(a),ug.forEach(a),cp=p(ri),wn=r(ri,"SPAN",{});var _g=i(wn);hp=n(_g,"ReformerModel"),_g.forEach(a),ri.forEach(a),Sr=p(e),D=r(e,"DIV",{class:!0});var us=i(D);f(Ze.$$.fragment,us),dp=p(us),sa=r(us,"P",{});var ii=i(sa);gp=n(ii,`The bare Reformer Model transformer outputting raw hidden-stateswithout any specific head on top.
Reformer was proposed in `),ea=r(ii,"A",{href:!0,rel:!0});var vg=i(ea);up=n(vg,"Reformer: The Efficient Transformer"),vg.forEach(a),fp=n(ii,` by Nikita Kitaev,
\u0141ukasz Kaiser, Anselm Levskaya.`),ii.forEach(a),_p=p(us),aa=r(us,"P",{});var li=i(aa);vp=n(li,"This model inherits from "),Za=r(li,"A",{href:!0});var yg=i(Za);yp=n(yg,"PreTrainedModel"),yg.forEach(a),bp=n(li,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),li.forEach(a),kp=p(us),ta=r(us,"P",{});var mi=i(ta);wp=n(mi,"This model is also a PyTorch "),na=r(mi,"A",{href:!0,rel:!0});var bg=i(na);zp=n(bg,"torch.nn.Module"),bg.forEach(a),xp=n(mi,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),mi.forEach(a),Tp=p(us),W=r(us,"DIV",{class:!0});var fs=i(W);f(oa.$$.fragment,fs),Mp=p(fs),As=r(fs,"P",{});var _t=i(As);Rp=n(_t,"The "),st=r(_t,"A",{href:!0});var kg=i(st);$p=n(kg,"ReformerModel"),kg.forEach(a),qp=n(_t," forward method, overrides the "),zn=r(_t,"CODE",{});var wg=i(zn);Ep=n(wg,"__call__"),wg.forEach(a),Lp=n(_t," special method."),_t.forEach(a),Fp=p(fs),f(ne.$$.fragment,fs),Pp=p(fs),xn=r(fs,"P",{});var zg=i(xn);Cp=n(zg,"Example:"),zg.forEach(a),Ap=p(fs),f(ra.$$.fragment,fs),fs.forEach(a),us.forEach(a),jr=p(e),Ss=r(e,"H2",{class:!0});var pi=i(Ss);oe=r(pi,"A",{id:!0,class:!0,href:!0});var xg=i(oe);Tn=r(xg,"SPAN",{});var Tg=i(Tn);f(ia.$$.fragment,Tg),Tg.forEach(a),xg.forEach(a),Sp=p(pi),Mn=r(pi,"SPAN",{});var Mg=i(Mn);jp=n(Mg,"ReformerModelWithLMHead"),Mg.forEach(a),pi.forEach(a),Nr=p(e),H=r(e,"DIV",{class:!0});var _s=i(H);f(la.$$.fragment,_s),Np=p(_s),js=r(_s,"P",{});var vt=i(js);Dp=n(vt,"Reformer Model with a "),Rn=r(vt,"CODE",{});var Rg=i(Rn);Hp=n(Rg,"language modeling"),Rg.forEach(a),Op=n(vt,` head on top.
Reformer was proposed in `),ma=r(vt,"A",{href:!0,rel:!0});var $g=i(ma);Ip=n($g,"Reformer: The Efficient Transformer"),$g.forEach(a),Wp=n(vt,` by Nikita Kitaev,
\u0141ukasz Kaiser, Anselm Levskaya.`),vt.forEach(a),Qp=p(_s),pa=r(_s,"P",{});var ci=i(pa);Kp=n(ci,"This model inherits from "),et=r(ci,"A",{href:!0});var qg=i(et);Up=n(qg,"PreTrainedModel"),qg.forEach(a),Bp=n(ci,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),ci.forEach(a),Xp=p(_s),ca=r(_s,"P",{});var hi=i(ca);Vp=n(hi,"This model is also a PyTorch "),ha=r(hi,"A",{href:!0,rel:!0});var Eg=i(ha);Gp=n(Eg,"torch.nn.Module"),Eg.forEach(a),Jp=n(hi,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),hi.forEach(a),Yp=p(_s),Q=r(_s,"DIV",{class:!0});var vs=i(Q);f(da.$$.fragment,vs),Zp=p(vs),Ns=r(vs,"P",{});var yt=i(Ns);sc=n(yt,"The "),at=r(yt,"A",{href:!0});var Lg=i(at);ec=n(Lg,"ReformerModelWithLMHead"),Lg.forEach(a),ac=n(yt," forward method, overrides the "),$n=r(yt,"CODE",{});var Fg=i($n);tc=n(Fg,"__call__"),Fg.forEach(a),nc=n(yt," special method."),yt.forEach(a),oc=p(vs),f(re.$$.fragment,vs),rc=p(vs),qn=r(vs,"P",{});var Pg=i(qn);ic=n(Pg,"Example:"),Pg.forEach(a),lc=p(vs),f(ga.$$.fragment,vs),vs.forEach(a),_s.forEach(a),Dr=p(e),Ds=r(e,"H2",{class:!0});var di=i(Ds);ie=r(di,"A",{id:!0,class:!0,href:!0});var Cg=i(ie);En=r(Cg,"SPAN",{});var Ag=i(En);f(ua.$$.fragment,Ag),Ag.forEach(a),Cg.forEach(a),mc=p(di),Ln=r(di,"SPAN",{});var Sg=i(Ln);pc=n(Sg,"ReformerForMaskedLM"),Sg.forEach(a),di.forEach(a),Hr=p(e),O=r(e,"DIV",{class:!0});var ys=i(O);f(fa.$$.fragment,ys),cc=p(ys),Hs=r(ys,"P",{});var bt=i(Hs);hc=n(bt,"Reformer Model with a "),Fn=r(bt,"CODE",{});var jg=i(Fn);dc=n(jg,"language modeling"),jg.forEach(a),gc=n(bt,` head on top.
Reformer was proposed in `),_a=r(bt,"A",{href:!0,rel:!0});var Ng=i(_a);uc=n(Ng,"Reformer: The Efficient Transformer"),Ng.forEach(a),fc=n(bt,` by Nikita Kitaev,
\u0141ukasz Kaiser, Anselm Levskaya.`),bt.forEach(a),_c=p(ys),va=r(ys,"P",{});var gi=i(va);vc=n(gi,"This model inherits from "),tt=r(gi,"A",{href:!0});var Dg=i(tt);yc=n(Dg,"PreTrainedModel"),Dg.forEach(a),bc=n(gi,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),gi.forEach(a),kc=p(ys),ya=r(ys,"P",{});var ui=i(ya);wc=n(ui,"This model is also a PyTorch "),ba=r(ui,"A",{href:!0,rel:!0});var Hg=i(ba);zc=n(Hg,"torch.nn.Module"),Hg.forEach(a),xc=n(ui,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),ui.forEach(a),Tc=p(ys),K=r(ys,"DIV",{class:!0});var bs=i(K);f(ka.$$.fragment,bs),Mc=p(bs),Os=r(bs,"P",{});var kt=i(Os);Rc=n(kt,"The "),nt=r(kt,"A",{href:!0});var Og=i(nt);$c=n(Og,"ReformerForMaskedLM"),Og.forEach(a),qc=n(kt," forward method, overrides the "),Pn=r(kt,"CODE",{});var Ig=i(Pn);Ec=n(Ig,"__call__"),Ig.forEach(a),Lc=n(kt," special method."),kt.forEach(a),Fc=p(bs),f(le.$$.fragment,bs),Pc=p(bs),Cn=r(bs,"P",{});var Wg=i(Cn);Cc=n(Wg,"Example:"),Wg.forEach(a),Ac=p(bs),f(wa.$$.fragment,bs),bs.forEach(a),ys.forEach(a),Or=p(e),Is=r(e,"H2",{class:!0});var fi=i(Is);me=r(fi,"A",{id:!0,class:!0,href:!0});var Qg=i(me);An=r(Qg,"SPAN",{});var Kg=i(An);f(za.$$.fragment,Kg),Kg.forEach(a),Qg.forEach(a),Sc=p(fi),Sn=r(fi,"SPAN",{});var Ug=i(Sn);jc=n(Ug,"ReformerForSequenceClassification"),Ug.forEach(a),fi.forEach(a),Ir=p(e),A=r(e,"DIV",{class:!0});var ns=i(A);f(xa.$$.fragment,ns),Nc=p(ns),jn=r(ns,"P",{});var Bg=i(jn);Dc=n(Bg,`Reformer Model transformer with a sequence classification/regression head on top (a linear layer on top of the
pooled output) e.g. for GLUE tasks.`),Bg.forEach(a),Hc=p(ns),Ta=r(ns,"P",{});var _i=i(Ta);Oc=n(_i,"Reformer was proposed in "),Ma=r(_i,"A",{href:!0,rel:!0});var Xg=i(Ma);Ic=n(Xg,"Reformer: The Efficient Transformer"),Xg.forEach(a),Wc=n(_i,` by Nikita Kitaev,
\u0141ukasz Kaiser, Anselm Levskaya.`),_i.forEach(a),Qc=p(ns),Ra=r(ns,"P",{});var vi=i(Ra);Kc=n(vi,"This model inherits from "),ot=r(vi,"A",{href:!0});var Vg=i(ot);Uc=n(Vg,"PreTrainedModel"),Vg.forEach(a),Bc=n(vi,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),vi.forEach(a),Xc=p(ns),$a=r(ns,"P",{});var yi=i($a);Vc=n(yi,"This model is also a PyTorch "),qa=r(yi,"A",{href:!0,rel:!0});var Gg=i(qa);Gc=n(Gg,"torch.nn.Module"),Gg.forEach(a),Jc=n(yi,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),yi.forEach(a),Yc=p(ns),P=r(ns,"DIV",{class:!0});var X=i(P);f(Ea.$$.fragment,X),Zc=p(X),Ws=r(X,"P",{});var wt=i(Ws);sh=n(wt,"The "),rt=r(wt,"A",{href:!0});var Jg=i(rt);eh=n(Jg,"ReformerForSequenceClassification"),Jg.forEach(a),ah=n(wt," forward method, overrides the "),Nn=r(wt,"CODE",{});var Yg=i(Nn);th=n(Yg,"__call__"),Yg.forEach(a),nh=n(wt," special method."),wt.forEach(a),oh=p(X),f(pe.$$.fragment,X),rh=p(X),Dn=r(X,"P",{});var Zg=i(Dn);ih=n(Zg,"Example of single-label classification:"),Zg.forEach(a),lh=p(X),f(La.$$.fragment,X),mh=p(X),Hn=r(X,"P",{});var su=i(Hn);ph=n(su,"Example of multi-label classification:"),su.forEach(a),ch=p(X),f(Fa.$$.fragment,X),X.forEach(a),ns.forEach(a),Wr=p(e),Qs=r(e,"H2",{class:!0});var bi=i(Qs);ce=r(bi,"A",{id:!0,class:!0,href:!0});var eu=i(ce);On=r(eu,"SPAN",{});var au=i(On);f(Pa.$$.fragment,au),au.forEach(a),eu.forEach(a),hh=p(bi),In=r(bi,"SPAN",{});var tu=i(In);dh=n(tu,"ReformerForQuestionAnswering"),tu.forEach(a),bi.forEach(a),Qr=p(e),S=r(e,"DIV",{class:!0});var os=i(S);f(Ca.$$.fragment,os),gh=p(os),Ks=r(os,"P",{});var zt=i(Ks);uh=n(zt,`Reformer Model with a span classification head on top for extractive question-answering tasks like SQuAD / TriviaQA
( a linear layer on top of hidden-states output to compute `),Wn=r(zt,"CODE",{});var nu=i(Wn);fh=n(nu,"span start logits"),nu.forEach(a),_h=n(zt," and "),Qn=r(zt,"CODE",{});var ou=i(Qn);vh=n(ou,"span end logits"),ou.forEach(a),yh=n(zt,"."),zt.forEach(a),bh=p(os),Aa=r(os,"P",{});var ki=i(Aa);kh=n(ki,"Reformer was proposed in "),Sa=r(ki,"A",{href:!0,rel:!0});var ru=i(Sa);wh=n(ru,"Reformer: The Efficient Transformer"),ru.forEach(a),zh=n(ki,` by Nikita Kitaev,
\u0141ukasz Kaiser, Anselm Levskaya.`),ki.forEach(a),xh=p(os),ja=r(os,"P",{});var wi=i(ja);Th=n(wi,"This model inherits from "),it=r(wi,"A",{href:!0});var iu=i(it);Mh=n(iu,"PreTrainedModel"),iu.forEach(a),Rh=n(wi,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),wi.forEach(a),$h=p(os),Na=r(os,"P",{});var zi=i(Na);qh=n(zi,"This model is also a PyTorch "),Da=r(zi,"A",{href:!0,rel:!0});var lu=i(Da);Eh=n(lu,"torch.nn.Module"),lu.forEach(a),Lh=n(zi,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),zi.forEach(a),Fh=p(os),U=r(os,"DIV",{class:!0});var ks=i(U);f(Ha.$$.fragment,ks),Ph=p(ks),Us=r(ks,"P",{});var xt=i(Us);Ch=n(xt,"The "),lt=r(xt,"A",{href:!0});var mu=i(lt);Ah=n(mu,"ReformerForQuestionAnswering"),mu.forEach(a),Sh=n(xt," forward method, overrides the "),Kn=r(xt,"CODE",{});var pu=i(Kn);jh=n(pu,"__call__"),pu.forEach(a),Nh=n(xt," special method."),xt.forEach(a),Dh=p(ks),f(he.$$.fragment,ks),Hh=p(ks),Un=r(ks,"P",{});var cu=i(Un);Oh=n(cu,"Example:"),cu.forEach(a),Ih=p(ks),f(Oa.$$.fragment,ks),ks.forEach(a),os.forEach(a),this.h()},h(){l(d,"name","hf:doc:metadata"),l(d,"content",JSON.stringify(Ju)),l(z,"id","reformer"),l(z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(z,"href","#reformer"),l(g,"class","relative group"),l(be,"href","https://github.com/huggingface/transformers/issues/new?assignees=&labels=&template=bug-report.md&title"),l(be,"rel","nofollow"),l(Bs,"id","overview"),l(Bs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Bs,"href","#overview"),l(zs,"class","relative group"),l(we,"href","https://arxiv.org/abs/2001.04451.pdf"),l(we,"rel","nofollow"),l(ze,"href","https://huggingface.co/patrickvonplaten"),l(ze,"rel","nofollow"),l(xe,"href","https://github.com/google/trax/tree/master/trax/models/reformer"),l(xe,"rel","nofollow"),l(Me,"href","https://github.com/pytorch/pytorch/issues/36035"),l(Me,"rel","nofollow"),l(Vs,"id","axial-positional-encodings"),l(Vs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Vs,"href","#axial-positional-encodings"),l(xs,"class","relative group"),l($e,"href","https://github.com/google/trax/blob/4d99ad4965bab1deba227539758d59f0df0fef48/trax/layers/research/position_encodings.py#L29"),l($e,"rel","nofollow"),lo.a=mo,po.a=co,ho.a=go,uo.a=fo,_o.a=vo,yo.a=null,ko.a=wo,zo.a=null,To.a=null,Ro.a=null,qo.a=null,Lo.a=Fo,Po.a=Co,Ao.a=So,jo.a=No,Do.a=Ho,Io.a=Wo,Qo.a=Ko,Bo.a=Xo,Vo.a=Go,l(Gs,"id","lsh-self-attention"),l(Gs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Gs,"href","#lsh-self-attention"),l(Ms,"class","relative group"),l(Pe,"href","https://arxiv.org/abs/1509.02897"),l(Pe,"rel","nofollow"),l(Ce,"href","https://arxiv.org/abs/2001.04451"),l(Ce,"rel","nofollow"),l(Ae,"href","https://www.pragmatic.ml/reformer-deep-dive/"),l(Ae,"rel","nofollow"),ar.a=tr,nr.a=or,rr.a=ir,pr.a=cr,hr.a=dr,gr.a=ur,l(Js,"id","local-self-attention"),l(Js,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Js,"href","#local-self-attention"),l(Rs,"class","relative group"),yr.a=br,kr.a=wr,zr.a=xr,l(Ys,"id","training"),l(Ys,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Ys,"href","#training"),l($s,"class","relative group"),l(Ba,"href","/docs/transformers/pr_15761/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),l(se,"id","transformers.ReformerConfig"),l(se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(se,"href","#transformers.ReformerConfig"),l(qs,"class","relative group"),l(Xa,"href","/docs/transformers/pr_15761/en/model_doc/reformer#transformers.ReformerModel"),l(Va,"href","/docs/transformers/pr_15761/en/main_classes/configuration#transformers.PretrainedConfig"),l(Ga,"href","/docs/transformers/pr_15761/en/main_classes/configuration#transformers.PretrainedConfig"),l(N,"class","docstring"),l(ee,"id","transformers.ReformerTokenizer"),l(ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(ee,"href","#transformers.ReformerTokenizer"),l(Ls,"class","relative group"),l(Ue,"href","https://github.com/google/sentencepiece"),l(Ue,"rel","nofollow"),l(Ja,"href","/docs/transformers/pr_15761/en/main_classes/tokenizer#transformers.PreTrainedTokenizer"),l(_n,"class","docstring"),l(J,"class","docstring"),l(ae,"id","transformers.ReformerTokenizerFast"),l(ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(ae,"href","#transformers.ReformerTokenizerFast"),l(Fs,"class","relative group"),l(Ge,"href","https://huggingface.co/docs/tokenizers/python/latest/components.html?highlight=unigram#models"),l(Ge,"rel","nofollow"),l(Ya,"href","/docs/transformers/pr_15761/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast"),l(rs,"class","docstring"),l(te,"id","transformers.ReformerModel"),l(te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(te,"href","#transformers.ReformerModel"),l(Cs,"class","relative group"),l(ea,"href","https://arxiv.org/abs/2001.04451"),l(ea,"rel","nofollow"),l(Za,"href","/docs/transformers/pr_15761/en/main_classes/model#transformers.PreTrainedModel"),l(na,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),l(na,"rel","nofollow"),l(st,"href","/docs/transformers/pr_15761/en/model_doc/reformer#transformers.ReformerModel"),l(W,"class","docstring"),l(D,"class","docstring"),l(oe,"id","transformers.ReformerModelWithLMHead"),l(oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(oe,"href","#transformers.ReformerModelWithLMHead"),l(Ss,"class","relative group"),l(ma,"href","https://arxiv.org/abs/2001.04451"),l(ma,"rel","nofollow"),l(et,"href","/docs/transformers/pr_15761/en/main_classes/model#transformers.PreTrainedModel"),l(ha,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),l(ha,"rel","nofollow"),l(at,"href","/docs/transformers/pr_15761/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),l(Q,"class","docstring"),l(H,"class","docstring"),l(ie,"id","transformers.ReformerForMaskedLM"),l(ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(ie,"href","#transformers.ReformerForMaskedLM"),l(Ds,"class","relative group"),l(_a,"href","https://arxiv.org/abs/2001.04451"),l(_a,"rel","nofollow"),l(tt,"href","/docs/transformers/pr_15761/en/main_classes/model#transformers.PreTrainedModel"),l(ba,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),l(ba,"rel","nofollow"),l(nt,"href","/docs/transformers/pr_15761/en/model_doc/reformer#transformers.ReformerForMaskedLM"),l(K,"class","docstring"),l(O,"class","docstring"),l(me,"id","transformers.ReformerForSequenceClassification"),l(me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(me,"href","#transformers.ReformerForSequenceClassification"),l(Is,"class","relative group"),l(Ma,"href","https://arxiv.org/abs/2001.04451"),l(Ma,"rel","nofollow"),l(ot,"href","/docs/transformers/pr_15761/en/main_classes/model#transformers.PreTrainedModel"),l(qa,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),l(qa,"rel","nofollow"),l(rt,"href","/docs/transformers/pr_15761/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),l(P,"class","docstring"),l(A,"class","docstring"),l(ce,"id","transformers.ReformerForQuestionAnswering"),l(ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(ce,"href","#transformers.ReformerForQuestionAnswering"),l(Qs,"class","relative group"),l(Sa,"href","https://arxiv.org/abs/2001.04451"),l(Sa,"rel","nofollow"),l(it,"href","/docs/transformers/pr_15761/en/main_classes/model#transformers.PreTrainedModel"),l(Da,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),l(Da,"rel","nofollow"),l(lt,"href","/docs/transformers/pr_15761/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),l(U,"class","docstring"),l(S,"class","docstring")},m(e,c){s(document.head,d),h(e,M,c),h(e,g,c),s(g,z),s(z,R),_(w,R,null),s(g,k),s(g,L),s(L,xi),h(e,Yn,c),h(e,ws,c),s(ws,Tt),s(Tt,Ti),s(ws,Mi),s(ws,be),s(be,Ri),s(ws,$i),h(e,Zn,c),h(e,zs,c),s(zs,Bs),s(Bs,Mt),_(ke,Mt,null),s(zs,qi),s(zs,Rt),s(Rt,Ei),h(e,so,c),h(e,Xs,c),s(Xs,Li),s(Xs,we),s(we,Fi),s(Xs,Pi),h(e,eo,c),h(e,Qa,c),s(Qa,Ci),h(e,ao,c),h(e,Ka,c),s(Ka,$t),s($t,Ai),h(e,to,c),h(e,is,c),s(is,Si),s(is,ze),s(ze,ji),s(is,Ni),s(is,xe),s(xe,Di),s(is,Hi),h(e,no,c),h(e,Te,c),s(Te,qt),s(qt,Oi),s(Te,Ii),h(e,oo,c),h(e,Ua,c),s(Ua,ls),s(ls,Wi),s(ls,Et),s(Et,Qi),s(ls,Ki),s(ls,Lt),s(Lt,Ui),s(ls,Bi),s(ls,Me),s(Me,Xi),h(e,ro,c),h(e,xs,c),s(xs,Vs),s(Vs,Ft),_(Re,Ft,null),s(xs,Vi),s(xs,Pt),s(Pt,Gi),h(e,io,c),h(e,$,c),s($,Ji),s($,$e),s($e,Yi),s($,Zi),lo.m(hu,$),s($,mo),s($,Ct),s(Ct,sl),s($,el),po.m(du,$),s($,co),ho.m(gu,$),s($,go),s($,At),s(At,al),s($,tl),uo.m(uu,$),s($,fo),s($,St),s(St,nl),s($,ol),_o.m(fu,$),s($,vo),yo.m(_u,$),h(e,bo,c),h(e,Ts,c),s(Ts,rl),ko.m(vu,Ts),s(Ts,wo),zo.m(yu,Ts),h(e,xo,c),h(e,qe,c),s(qe,il),To.m(bu,qe),h(e,Mo,c),h(e,Ee,c),s(Ee,ll),Ro.m(ku,Ee),h(e,$o,c),h(e,Le,c),s(Le,ml),qo.m(wu,Le),h(e,Eo,c),h(e,F,c),s(F,pl),Lo.m(zu,F),s(F,Fo),Po.m(xu,F),s(F,Co),s(F,jt),s(jt,cl),s(F,hl),Ao.m(Tu,F),s(F,So),jo.m(Mu,F),s(F,No),Do.m(Ru,F),s(F,Ho),h(e,Oo,c),h(e,ms,c),s(ms,dl),Io.m($u,ms),s(ms,Wo),Qo.m(qu,ms),s(ms,Ko),h(e,Uo,c),h(e,q,c),s(q,gl),s(q,Nt),s(Nt,ul),s(q,fl),Bo.m(Eu,q),s(q,Xo),s(q,Dt),s(Dt,_l),s(q,vl),s(q,Ht),s(Ht,yl),s(q,bl),Vo.m(Lu,q),s(q,Go),s(q,Ot),s(Ot,kl),s(q,wl),s(q,It),s(It,zl),s(q,xl),s(q,Wt),s(Wt,Tl),s(q,Ml),h(e,Jo,c),h(e,Ms,c),s(Ms,Gs),s(Gs,Qt),_(Fe,Qt,null),s(Ms,Rl),s(Ms,Kt),s(Kt,$l),h(e,Yo,c),h(e,Z,c),s(Z,ql),s(Z,Pe),s(Pe,El),s(Z,Ll),s(Z,Ut),s(Ut,Fl),s(Z,Pl),s(Z,Bt),s(Bt,Cl),s(Z,Al),h(e,Zo,c),h(e,j,c),s(j,Sl),s(j,Xt),s(Xt,jl),s(j,Nl),s(j,Vt),s(Vt,Dl),s(j,Hl),s(j,Gt),s(Gt,Ol),s(j,Il),s(j,Jt),s(Jt,Wl),s(j,Ql),s(j,Yt),s(Yt,Kl),s(j,Ul),h(e,sr,c),h(e,ps,c),s(ps,Bl),s(ps,Ce),s(Ce,Xl),s(ps,Vl),s(ps,Ae),s(Ae,Gl),s(ps,Jl),h(e,er,c),h(e,I,c),s(I,Yl),s(I,Zt),s(Zt,Zl),s(I,sm),ar.m(Fu,I),s(I,tr),nr.m(Pu,I),s(I,or),rr.m(Cu,I),s(I,ir),h(e,lr,c),h(e,cs,c),s(cs,em),s(cs,sn),s(sn,am),s(cs,tm),s(cs,en),s(en,nm),s(cs,om),h(e,mr,c),h(e,ss,c),s(ss,rm),pr.m(Au,ss),s(ss,cr),hr.m(Su,ss),s(ss,dr),gr.m(ju,ss),s(ss,ur),h(e,fr,c),h(e,Rs,c),s(Rs,Js),s(Js,an),_(Se,an,null),s(Rs,im),s(Rs,tn),s(tn,lm),h(e,_r,c),h(e,es,c),s(es,mm),s(es,nn),s(nn,pm),s(es,cm),s(es,on),s(on,hm),s(es,dm),s(es,rn),s(rn,gm),s(es,um),h(e,vr,c),h(e,as,c),s(as,fm),yr.m(Nu,as),s(as,br),kr.m(Du,as),s(as,wr),zr.m(Hu,as),s(as,xr),h(e,Tr,c),h(e,$s,c),s($s,Ys),s(Ys,ln),_(je,ln,null),s($s,_m),s($s,mn),s(mn,vm),h(e,Mr,c),h(e,hs,c),s(hs,ym),s(hs,pn),s(pn,bm),s(hs,km),s(hs,cn),s(cn,wm),s(hs,zm),h(e,Rr,c),h(e,Zs,c),s(Zs,xm),s(Zs,Ba),s(Ba,Tm),s(Zs,Mm),h(e,$r,c),_(Ne,e,c),h(e,qr,c),h(e,qs,c),s(qs,se),s(se,hn),_(De,hn,null),s(qs,Rm),s(qs,dn),s(dn,$m),h(e,Er,c),h(e,N,c),_(He,N,null),s(N,qm),s(N,Oe),s(Oe,Em),s(Oe,Xa),s(Xa,Lm),s(Oe,Fm),s(N,Pm),s(N,Es),s(Es,Cm),s(Es,Va),s(Va,Am),s(Es,Sm),s(Es,Ga),s(Ga,jm),s(Es,Nm),s(N,Dm),s(N,gn),s(gn,Hm),s(N,Om),_(Ie,N,null),h(e,Lr,c),h(e,Ls,c),s(Ls,ee),s(ee,un),_(We,un,null),s(Ls,Im),s(Ls,fn),s(fn,Wm),h(e,Fr,c),h(e,J,c),_(Qe,J,null),s(J,Qm),s(J,Ke),s(Ke,Km),s(Ke,Ue),s(Ue,Um),s(Ke,Bm),s(J,Xm),s(J,Be),s(Be,Vm),s(Be,Ja),s(Ja,Gm),s(Be,Jm),s(J,Ym),s(J,_n),h(e,Pr,c),h(e,Fs,c),s(Fs,ae),s(ae,vn),_(Xe,vn,null),s(Fs,Zm),s(Fs,yn),s(yn,sp),h(e,Cr,c),h(e,rs,c),_(Ve,rs,null),s(rs,ep),s(rs,Ps),s(Ps,ap),s(Ps,bn),s(bn,tp),s(Ps,np),s(Ps,Ge),s(Ge,op),s(Ps,rp),s(rs,ip),s(rs,Je),s(Je,lp),s(Je,Ya),s(Ya,mp),s(Je,pp),h(e,Ar,c),h(e,Cs,c),s(Cs,te),s(te,kn),_(Ye,kn,null),s(Cs,cp),s(Cs,wn),s(wn,hp),h(e,Sr,c),h(e,D,c),_(Ze,D,null),s(D,dp),s(D,sa),s(sa,gp),s(sa,ea),s(ea,up),s(sa,fp),s(D,_p),s(D,aa),s(aa,vp),s(aa,Za),s(Za,yp),s(aa,bp),s(D,kp),s(D,ta),s(ta,wp),s(ta,na),s(na,zp),s(ta,xp),s(D,Tp),s(D,W),_(oa,W,null),s(W,Mp),s(W,As),s(As,Rp),s(As,st),s(st,$p),s(As,qp),s(As,zn),s(zn,Ep),s(As,Lp),s(W,Fp),_(ne,W,null),s(W,Pp),s(W,xn),s(xn,Cp),s(W,Ap),_(ra,W,null),h(e,jr,c),h(e,Ss,c),s(Ss,oe),s(oe,Tn),_(ia,Tn,null),s(Ss,Sp),s(Ss,Mn),s(Mn,jp),h(e,Nr,c),h(e,H,c),_(la,H,null),s(H,Np),s(H,js),s(js,Dp),s(js,Rn),s(Rn,Hp),s(js,Op),s(js,ma),s(ma,Ip),s(js,Wp),s(H,Qp),s(H,pa),s(pa,Kp),s(pa,et),s(et,Up),s(pa,Bp),s(H,Xp),s(H,ca),s(ca,Vp),s(ca,ha),s(ha,Gp),s(ca,Jp),s(H,Yp),s(H,Q),_(da,Q,null),s(Q,Zp),s(Q,Ns),s(Ns,sc),s(Ns,at),s(at,ec),s(Ns,ac),s(Ns,$n),s($n,tc),s(Ns,nc),s(Q,oc),_(re,Q,null),s(Q,rc),s(Q,qn),s(qn,ic),s(Q,lc),_(ga,Q,null),h(e,Dr,c),h(e,Ds,c),s(Ds,ie),s(ie,En),_(ua,En,null),s(Ds,mc),s(Ds,Ln),s(Ln,pc),h(e,Hr,c),h(e,O,c),_(fa,O,null),s(O,cc),s(O,Hs),s(Hs,hc),s(Hs,Fn),s(Fn,dc),s(Hs,gc),s(Hs,_a),s(_a,uc),s(Hs,fc),s(O,_c),s(O,va),s(va,vc),s(va,tt),s(tt,yc),s(va,bc),s(O,kc),s(O,ya),s(ya,wc),s(ya,ba),s(ba,zc),s(ya,xc),s(O,Tc),s(O,K),_(ka,K,null),s(K,Mc),s(K,Os),s(Os,Rc),s(Os,nt),s(nt,$c),s(Os,qc),s(Os,Pn),s(Pn,Ec),s(Os,Lc),s(K,Fc),_(le,K,null),s(K,Pc),s(K,Cn),s(Cn,Cc),s(K,Ac),_(wa,K,null),h(e,Or,c),h(e,Is,c),s(Is,me),s(me,An),_(za,An,null),s(Is,Sc),s(Is,Sn),s(Sn,jc),h(e,Ir,c),h(e,A,c),_(xa,A,null),s(A,Nc),s(A,jn),s(jn,Dc),s(A,Hc),s(A,Ta),s(Ta,Oc),s(Ta,Ma),s(Ma,Ic),s(Ta,Wc),s(A,Qc),s(A,Ra),s(Ra,Kc),s(Ra,ot),s(ot,Uc),s(Ra,Bc),s(A,Xc),s(A,$a),s($a,Vc),s($a,qa),s(qa,Gc),s($a,Jc),s(A,Yc),s(A,P),_(Ea,P,null),s(P,Zc),s(P,Ws),s(Ws,sh),s(Ws,rt),s(rt,eh),s(Ws,ah),s(Ws,Nn),s(Nn,th),s(Ws,nh),s(P,oh),_(pe,P,null),s(P,rh),s(P,Dn),s(Dn,ih),s(P,lh),_(La,P,null),s(P,mh),s(P,Hn),s(Hn,ph),s(P,ch),_(Fa,P,null),h(e,Wr,c),h(e,Qs,c),s(Qs,ce),s(ce,On),_(Pa,On,null),s(Qs,hh),s(Qs,In),s(In,dh),h(e,Qr,c),h(e,S,c),_(Ca,S,null),s(S,gh),s(S,Ks),s(Ks,uh),s(Ks,Wn),s(Wn,fh),s(Ks,_h),s(Ks,Qn),s(Qn,vh),s(Ks,yh),s(S,bh),s(S,Aa),s(Aa,kh),s(Aa,Sa),s(Sa,wh),s(Aa,zh),s(S,xh),s(S,ja),s(ja,Th),s(ja,it),s(it,Mh),s(ja,Rh),s(S,$h),s(S,Na),s(Na,qh),s(Na,Da),s(Da,Eh),s(Na,Lh),s(S,Fh),s(S,U),_(Ha,U,null),s(U,Ph),s(U,Us),s(Us,Ch),s(Us,lt),s(lt,Ah),s(Us,Sh),s(Us,Kn),s(Kn,jh),s(Us,Nh),s(U,Dh),_(he,U,null),s(U,Hh),s(U,Un),s(Un,Oh),s(U,Ih),_(Oa,U,null),Kr=!0},p(e,[c]){const Ia={};c&2&&(Ia.$$scope={dirty:c,ctx:e}),ne.$set(Ia);const Bn={};c&2&&(Bn.$$scope={dirty:c,ctx:e}),re.$set(Bn);const Xn={};c&2&&(Xn.$$scope={dirty:c,ctx:e}),le.$set(Xn);const Vn={};c&2&&(Vn.$$scope={dirty:c,ctx:e}),pe.$set(Vn);const de={};c&2&&(de.$$scope={dirty:c,ctx:e}),he.$set(de)},i(e){Kr||(v(w.$$.fragment,e),v(ke.$$.fragment,e),v(Re.$$.fragment,e),v(Fe.$$.fragment,e),v(Se.$$.fragment,e),v(je.$$.fragment,e),v(Ne.$$.fragment,e),v(De.$$.fragment,e),v(He.$$.fragment,e),v(Ie.$$.fragment,e),v(We.$$.fragment,e),v(Qe.$$.fragment,e),v(Xe.$$.fragment,e),v(Ve.$$.fragment,e),v(Ye.$$.fragment,e),v(Ze.$$.fragment,e),v(oa.$$.fragment,e),v(ne.$$.fragment,e),v(ra.$$.fragment,e),v(ia.$$.fragment,e),v(la.$$.fragment,e),v(da.$$.fragment,e),v(re.$$.fragment,e),v(ga.$$.fragment,e),v(ua.$$.fragment,e),v(fa.$$.fragment,e),v(ka.$$.fragment,e),v(le.$$.fragment,e),v(wa.$$.fragment,e),v(za.$$.fragment,e),v(xa.$$.fragment,e),v(Ea.$$.fragment,e),v(pe.$$.fragment,e),v(La.$$.fragment,e),v(Fa.$$.fragment,e),v(Pa.$$.fragment,e),v(Ca.$$.fragment,e),v(Ha.$$.fragment,e),v(he.$$.fragment,e),v(Oa.$$.fragment,e),Kr=!0)},o(e){y(w.$$.fragment,e),y(ke.$$.fragment,e),y(Re.$$.fragment,e),y(Fe.$$.fragment,e),y(Se.$$.fragment,e),y(je.$$.fragment,e),y(Ne.$$.fragment,e),y(De.$$.fragment,e),y(He.$$.fragment,e),y(Ie.$$.fragment,e),y(We.$$.fragment,e),y(Qe.$$.fragment,e),y(Xe.$$.fragment,e),y(Ve.$$.fragment,e),y(Ye.$$.fragment,e),y(Ze.$$.fragment,e),y(oa.$$.fragment,e),y(ne.$$.fragment,e),y(ra.$$.fragment,e),y(ia.$$.fragment,e),y(la.$$.fragment,e),y(da.$$.fragment,e),y(re.$$.fragment,e),y(ga.$$.fragment,e),y(ua.$$.fragment,e),y(fa.$$.fragment,e),y(ka.$$.fragment,e),y(le.$$.fragment,e),y(wa.$$.fragment,e),y(za.$$.fragment,e),y(xa.$$.fragment,e),y(Ea.$$.fragment,e),y(pe.$$.fragment,e),y(La.$$.fragment,e),y(Fa.$$.fragment,e),y(Pa.$$.fragment,e),y(Ca.$$.fragment,e),y(Ha.$$.fragment,e),y(he.$$.fragment,e),y(Oa.$$.fragment,e),Kr=!1},d(e){a(d),e&&a(M),e&&a(g),b(w),e&&a(Yn),e&&a(ws),e&&a(Zn),e&&a(zs),b(ke),e&&a(so),e&&a(Xs),e&&a(eo),e&&a(Qa),e&&a(ao),e&&a(Ka),e&&a(to),e&&a(is),e&&a(no),e&&a(Te),e&&a(oo),e&&a(Ua),e&&a(ro),e&&a(xs),b(Re),e&&a(io),e&&a($),e&&a(bo),e&&a(Ts),e&&a(xo),e&&a(qe),e&&a(Mo),e&&a(Ee),e&&a($o),e&&a(Le),e&&a(Eo),e&&a(F),e&&a(Oo),e&&a(ms),e&&a(Uo),e&&a(q),e&&a(Jo),e&&a(Ms),b(Fe),e&&a(Yo),e&&a(Z),e&&a(Zo),e&&a(j),e&&a(sr),e&&a(ps),e&&a(er),e&&a(I),e&&a(lr),e&&a(cs),e&&a(mr),e&&a(ss),e&&a(fr),e&&a(Rs),b(Se),e&&a(_r),e&&a(es),e&&a(vr),e&&a(as),e&&a(Tr),e&&a($s),b(je),e&&a(Mr),e&&a(hs),e&&a(Rr),e&&a(Zs),e&&a($r),b(Ne,e),e&&a(qr),e&&a(qs),b(De),e&&a(Er),e&&a(N),b(He),b(Ie),e&&a(Lr),e&&a(Ls),b(We),e&&a(Fr),e&&a(J),b(Qe),e&&a(Pr),e&&a(Fs),b(Xe),e&&a(Cr),e&&a(rs),b(Ve),e&&a(Ar),e&&a(Cs),b(Ye),e&&a(Sr),e&&a(D),b(Ze),b(oa),b(ne),b(ra),e&&a(jr),e&&a(Ss),b(ia),e&&a(Nr),e&&a(H),b(la),b(da),b(re),b(ga),e&&a(Dr),e&&a(Ds),b(ua),e&&a(Hr),e&&a(O),b(fa),b(ka),b(le),b(wa),e&&a(Or),e&&a(Is),b(za),e&&a(Ir),e&&a(A),b(xa),b(Ea),b(pe),b(La),b(Fa),e&&a(Wr),e&&a(Qs),b(Pa),e&&a(Qr),e&&a(S),b(Ca),b(Ha),b(he),b(Oa)}}}const Ju={local:"reformer",sections:[{local:"overview",title:"Overview"},{local:"axial-positional-encodings",title:"Axial Positional Encodings"},{local:"lsh-self-attention",title:"LSH Self Attention"},{local:"local-self-attention",title:"Local Self Attention"},{local:"training",title:"Training"},{local:"transformers.ReformerConfig",title:"ReformerConfig"},{local:"transformers.ReformerTokenizer",title:"ReformerTokenizer"},{local:"transformers.ReformerTokenizerFast",title:"ReformerTokenizerFast"},{local:"transformers.ReformerModel",title:"ReformerModel"},{local:"transformers.ReformerModelWithLMHead",title:"ReformerModelWithLMHead"},{local:"transformers.ReformerForMaskedLM",title:"ReformerForMaskedLM"},{local:"transformers.ReformerForSequenceClassification",title:"ReformerForSequenceClassification"},{local:"transformers.ReformerForQuestionAnswering",title:"ReformerForQuestionAnswering"}],title:"Reformer"};function Yu(G,d,M){let{fw:g}=d;return G.$$set=z=>{"fw"in z&&M(0,g=z.fw)},[g]}class of extends Ou{constructor(d){super();Iu(this,d,Yu,Gu,Wu,{fw:0})}}export{of as default,Ju as metadata};
