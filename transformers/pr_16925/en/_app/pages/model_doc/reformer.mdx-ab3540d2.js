import{S as $u,i as Tu,s as Mu,e as o,k as h,w as y,t,Y as M,M as Ru,c as r,d as a,m as d,a as i,x as k,h as n,Z as R,b as c,F as s,g as u,y as w,q as x,o as z,B as $,v as qu,L as ps}from"../../chunks/vendor-6b77c823.js";import{T as lo}from"../../chunks/Tip-39098574.js";import{D as X}from"../../chunks/Docstring-1088f2fb.js";import{C as rs}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as V}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as ls}from"../../chunks/ExampleCodeBlock-5212b321.js";function Eu(T){let p,v,g,f,b;return f=new rs({props:{code:`from transformers import ReformerModel, ReformerConfig

# Initializing a Reformer configuration
configuration = ReformerConfig()

# Initializing a Reformer model
model = ReformerModel(configuration)

# Accessing the model configuration
configuration = model.config`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ReformerModel, ReformerConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a Reformer configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = ReformerConfig()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a Reformer model</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ReformerModel(configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`}}),{c(){p=o("p"),v=t("Examples:"),g=h(),y(f.$$.fragment)},l(l){p=r(l,"P",{});var _=i(p);v=n(_,"Examples:"),_.forEach(a),g=d(l),k(f.$$.fragment,l)},m(l,_){u(l,p,_),s(p,v),u(l,g,_),w(f,l,_),b=!0},p:ps,i(l){b||(x(f.$$.fragment,l),b=!0)},o(l){z(f.$$.fragment,l),b=!1},d(l){l&&a(p),l&&a(g),$(f,l)}}}function Lu(T){let p,v,g,f,b;return{c(){p=o("p"),v=t("Although the recipe for forward pass needs to be defined within this function, one should call the "),g=o("code"),f=t("Module"),b=t(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){p=r(l,"P",{});var _=i(p);v=n(_,"Although the recipe for forward pass needs to be defined within this function, one should call the "),g=r(_,"CODE",{});var F=i(g);f=n(F,"Module"),F.forEach(a),b=n(_,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),_.forEach(a)},m(l,_){u(l,p,_),s(p,v),s(p,g),s(g,f),s(p,b)},d(l){l&&a(p)}}}function Fu(T){let p,v,g,f,b;return f=new rs({props:{code:`from transformers import ReformerTokenizer, ReformerModel
import torch

tokenizer = ReformerTokenizer.from_pretrained("google/reformer-crime-and-punishment")
model = ReformerModel.from_pretrained("google/reformer-crime-and-punishment")

inputs = tokenizer("Hello, my dog is cute", return_tensors="pt")
outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ReformerTokenizer, ReformerModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = ReformerTokenizer.from_pretrained(<span class="hljs-string">&quot;google/reformer-crime-and-punishment&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ReformerModel.from_pretrained(<span class="hljs-string">&quot;google/reformer-crime-and-punishment&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state`}}),{c(){p=o("p"),v=t("Example:"),g=h(),y(f.$$.fragment)},l(l){p=r(l,"P",{});var _=i(p);v=n(_,"Example:"),_.forEach(a),g=d(l),k(f.$$.fragment,l)},m(l,_){u(l,p,_),s(p,v),u(l,g,_),w(f,l,_),b=!0},p:ps,i(l){b||(x(f.$$.fragment,l),b=!0)},o(l){z(f.$$.fragment,l),b=!1},d(l){l&&a(p),l&&a(g),$(f,l)}}}function ju(T){let p,v,g,f,b;return{c(){p=o("p"),v=t("Although the recipe for forward pass needs to be defined within this function, one should call the "),g=o("code"),f=t("Module"),b=t(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){p=r(l,"P",{});var _=i(p);v=n(_,"Although the recipe for forward pass needs to be defined within this function, one should call the "),g=r(_,"CODE",{});var F=i(g);f=n(F,"Module"),F.forEach(a),b=n(_,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),_.forEach(a)},m(l,_){u(l,p,_),s(p,v),s(p,g),s(g,f),s(p,b)},d(l){l&&a(p)}}}function Cu(T){let p,v,g,f,b;return f=new rs({props:{code:`import torch
from transformers import ReformerTokenizer, ReformerModelWithLMHead

tokenizer = ReformerTokenizer.from_pretrained("google/reformer-crime-and-punishment")
model = ReformerModelWithLMHead.from_pretrained("google/reformer-crime-and-punishment")

inputs = tokenizer("Hello, my dog is cute", return_tensors="pt")
outputs = model(**inputs, labels=inputs["input_ids"])
loss = outputs.loss
logits = outputs.logits`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ReformerTokenizer, ReformerModelWithLMHead

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = ReformerTokenizer.from_pretrained(<span class="hljs-string">&quot;google/reformer-crime-and-punishment&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ReformerModelWithLMHead.from_pretrained(<span class="hljs-string">&quot;google/reformer-crime-and-punishment&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs, labels=inputs[<span class="hljs-string">&quot;input_ids&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>loss = outputs.loss
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits`}}),{c(){p=o("p"),v=t("Example:"),g=h(),y(f.$$.fragment)},l(l){p=r(l,"P",{});var _=i(p);v=n(_,"Example:"),_.forEach(a),g=d(l),k(f.$$.fragment,l)},m(l,_){u(l,p,_),s(p,v),u(l,g,_),w(f,l,_),b=!0},p:ps,i(l){b||(x(f.$$.fragment,l),b=!0)},o(l){z(f.$$.fragment,l),b=!1},d(l){l&&a(p),l&&a(g),$(f,l)}}}function Au(T){let p,v,g,f,b;return{c(){p=o("p"),v=t("Although the recipe for forward pass needs to be defined within this function, one should call the "),g=o("code"),f=t("Module"),b=t(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){p=r(l,"P",{});var _=i(p);v=n(_,"Although the recipe for forward pass needs to be defined within this function, one should call the "),g=r(_,"CODE",{});var F=i(g);f=n(F,"Module"),F.forEach(a),b=n(_,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),_.forEach(a)},m(l,_){u(l,p,_),s(p,v),s(p,g),s(g,f),s(p,b)},d(l){l&&a(p)}}}function Pu(T){let p,v,g,f,b;return f=new rs({props:{code:`from transformers import ReformerTokenizer, ReformerForMaskedLM
import torch

tokenizer = ReformerTokenizer.from_pretrained("google/reformer-crime-and-punishment")
model = ReformerForMaskedLM.from_pretrained("google/reformer-crime-and-punishment")

inputs = tokenizer("The capital of France is [MASK].", return_tensors="pt")

with torch.no_grad():
    logits = model(**inputs).logits

# retrieve index of [MASK]
mask_token_index = (inputs.input_ids == tokenizer.mask_token_id)[0].nonzero(as_tuple=True)[0]

predicted_token_id = logits[0, mask_token_index].argmax(axis=-1)
tokenizer.decode(predicted_token_id)
`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ReformerTokenizer, ReformerForMaskedLM
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = ReformerTokenizer.from_pretrained(<span class="hljs-string">&quot;google/reformer-crime-and-punishment&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ReformerForMaskedLM.from_pretrained(<span class="hljs-string">&quot;google/reformer-crime-and-punishment&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;The capital of France is [MASK].&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># retrieve index of [MASK]</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>mask_token_index = (inputs.input_ids == tokenizer.mask_token_id)[<span class="hljs-number">0</span>].nonzero(as_tuple=<span class="hljs-literal">True</span>)[<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_token_id = logits[<span class="hljs-number">0</span>, mask_token_index].argmax(axis=-<span class="hljs-number">1</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.decode(predicted_token_id)
`}}),{c(){p=o("p"),v=t("Example:"),g=h(),y(f.$$.fragment)},l(l){p=r(l,"P",{});var _=i(p);v=n(_,"Example:"),_.forEach(a),g=d(l),k(f.$$.fragment,l)},m(l,_){u(l,p,_),s(p,v),u(l,g,_),w(f,l,_),b=!0},p:ps,i(l){b||(x(f.$$.fragment,l),b=!0)},o(l){z(f.$$.fragment,l),b=!1},d(l){l&&a(p),l&&a(g),$(f,l)}}}function Su(T){let p,v;return p=new rs({props:{code:`labels = tokenizer("The capital of France is Paris.", return_tensors="pt")["input_ids"]
# mask labels of non-[MASK] tokens
labels = torch.where(inputs.input_ids == tokenizer.mask_token_id, labels, -100)

outputs = model(**inputs, labels=labels)
round(outputs.loss.item(), 2)
`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>labels = tokenizer(<span class="hljs-string">&quot;The capital of France is Paris.&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)[<span class="hljs-string">&quot;input_ids&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># mask labels of non-[MASK] tokens</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>labels = torch.where(inputs.input_ids == tokenizer.mask_token_id, labels, -<span class="hljs-number">100</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs, labels=labels)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">round</span>(outputs.loss.item(), <span class="hljs-number">2</span>)
`}}),{c(){y(p.$$.fragment)},l(g){k(p.$$.fragment,g)},m(g,f){w(p,g,f),v=!0},p:ps,i(g){v||(x(p.$$.fragment,g),v=!0)},o(g){z(p.$$.fragment,g),v=!1},d(g){$(p,g)}}}function Ou(T){let p,v,g,f,b;return{c(){p=o("p"),v=t("Although the recipe for forward pass needs to be defined within this function, one should call the "),g=o("code"),f=t("Module"),b=t(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){p=r(l,"P",{});var _=i(p);v=n(_,"Although the recipe for forward pass needs to be defined within this function, one should call the "),g=r(_,"CODE",{});var F=i(g);f=n(F,"Module"),F.forEach(a),b=n(_,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),_.forEach(a)},m(l,_){u(l,p,_),s(p,v),s(p,g),s(g,f),s(p,b)},d(l){l&&a(p)}}}function Nu(T){let p,v,g,f,b;return f=new rs({props:{code:`import torch
from transformers import ReformerTokenizer, ReformerForSequenceClassification

tokenizer = ReformerTokenizer.from_pretrained("google/reformer-crime-and-punishment")
model = ReformerForSequenceClassification.from_pretrained("google/reformer-crime-and-punishment")

inputs = tokenizer("Hello, my dog is cute", return_tensors="pt")

with torch.no_grad():
    logits = model(**inputs).logits

predicted_class_id = logits.argmax().item()
model.config.id2label[predicted_class_id]
`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ReformerTokenizer, ReformerForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = ReformerTokenizer.from_pretrained(<span class="hljs-string">&quot;google/reformer-crime-and-punishment&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ReformerForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;google/reformer-crime-and-punishment&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_class_id = logits.argmax().item()
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.id2label[predicted_class_id]
`}}),{c(){p=o("p"),v=t("Example of single-label classification:"),g=h(),y(f.$$.fragment)},l(l){p=r(l,"P",{});var _=i(p);v=n(_,"Example of single-label classification:"),_.forEach(a),g=d(l),k(f.$$.fragment,l)},m(l,_){u(l,p,_),s(p,v),u(l,g,_),w(f,l,_),b=!0},p:ps,i(l){b||(x(f.$$.fragment,l),b=!0)},o(l){z(f.$$.fragment,l),b=!1},d(l){l&&a(p),l&&a(g),$(f,l)}}}function Du(T){let p,v;return p=new rs({props:{code:`# To train a model on \`num_labels\` classes, you can pass \`num_labels=num_labels\` to \`.from_pretrained(...)\`
num_labels = len(model.config.id2label)
model = ReformerForSequenceClassification.from_pretrained("google/reformer-crime-and-punishment", num_labels=num_labels)

labels = torch.tensor(1)
loss = model(**inputs, labels=labels).loss
round(loss.item(), 2)
`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># To train a model on \`num_labels\` classes, you can pass \`num_labels=num_labels\` to \`.from_pretrained(...)\`</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>num_labels = <span class="hljs-built_in">len</span>(model.config.id2label)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ReformerForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;google/reformer-crime-and-punishment&quot;</span>, num_labels=num_labels)

<span class="hljs-meta">&gt;&gt;&gt; </span>labels = torch.tensor(<span class="hljs-number">1</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>loss = model(**inputs, labels=labels).loss
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">round</span>(loss.item(), <span class="hljs-number">2</span>)
`}}),{c(){y(p.$$.fragment)},l(g){k(p.$$.fragment,g)},m(g,f){w(p,g,f),v=!0},p:ps,i(g){v||(x(p.$$.fragment,g),v=!0)},o(g){z(p.$$.fragment,g),v=!1},d(g){$(p,g)}}}function Hu(T){let p,v,g,f,b;return f=new rs({props:{code:`import torch
from transformers import ReformerTokenizer, ReformerForSequenceClassification

tokenizer = ReformerTokenizer.from_pretrained("google/reformer-crime-and-punishment")
model = ReformerForSequenceClassification.from_pretrained("google/reformer-crime-and-punishment", problem_type="multi_label_classification")

inputs = tokenizer("Hello, my dog is cute", return_tensors="pt")

with torch.no_grad():
    logits = model(**inputs).logits

predicted_class_id = logits.argmax().item()
model.config.id2label[predicted_class_id]
`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ReformerTokenizer, ReformerForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = ReformerTokenizer.from_pretrained(<span class="hljs-string">&quot;google/reformer-crime-and-punishment&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ReformerForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;google/reformer-crime-and-punishment&quot;</span>, problem_type=<span class="hljs-string">&quot;multi_label_classification&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_class_id = logits.argmax().item()
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.id2label[predicted_class_id]
`}}),{c(){p=o("p"),v=t("Example of multi-label classification:"),g=h(),y(f.$$.fragment)},l(l){p=r(l,"P",{});var _=i(p);v=n(_,"Example of multi-label classification:"),_.forEach(a),g=d(l),k(f.$$.fragment,l)},m(l,_){u(l,p,_),s(p,v),u(l,g,_),w(f,l,_),b=!0},p:ps,i(l){b||(x(f.$$.fragment,l),b=!0)},o(l){z(f.$$.fragment,l),b=!1},d(l){l&&a(p),l&&a(g),$(f,l)}}}function Iu(T){let p,v;return p=new rs({props:{code:`# To train a model on \`num_labels\` classes, you can pass \`num_labels=num_labels\` to \`.from_pretrained(...)\`
num_labels = len(model.config.id2label)
model = ReformerForSequenceClassification.from_pretrained("google/reformer-crime-and-punishment", num_labels=num_labels)

num_labels = len(model.config.id2label)
labels = torch.nn.functional.one_hot(torch.tensor([predicted_class_id]), num_classes=num_labels).to(
    torch.float
)
loss = model(**inputs, labels=labels).loss
loss.backward()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># To train a model on \`num_labels\` classes, you can pass \`num_labels=num_labels\` to \`.from_pretrained(...)\`</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>num_labels = <span class="hljs-built_in">len</span>(model.config.id2label)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ReformerForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;google/reformer-crime-and-punishment&quot;</span>, num_labels=num_labels)

<span class="hljs-meta">&gt;&gt;&gt; </span>num_labels = <span class="hljs-built_in">len</span>(model.config.id2label)
<span class="hljs-meta">&gt;&gt;&gt; </span>labels = torch.nn.functional.one_hot(torch.tensor([predicted_class_id]), num_classes=num_labels).to(
<span class="hljs-meta">... </span>    torch.<span class="hljs-built_in">float</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>loss = model(**inputs, labels=labels).loss
<span class="hljs-meta">&gt;&gt;&gt; </span>loss.backward()`}}),{c(){y(p.$$.fragment)},l(g){k(p.$$.fragment,g)},m(g,f){w(p,g,f),v=!0},p:ps,i(g){v||(x(p.$$.fragment,g),v=!0)},o(g){z(p.$$.fragment,g),v=!1},d(g){$(p,g)}}}function Wu(T){let p,v,g,f,b;return{c(){p=o("p"),v=t("Although the recipe for forward pass needs to be defined within this function, one should call the "),g=o("code"),f=t("Module"),b=t(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){p=r(l,"P",{});var _=i(p);v=n(_,"Although the recipe for forward pass needs to be defined within this function, one should call the "),g=r(_,"CODE",{});var F=i(g);f=n(F,"Module"),F.forEach(a),b=n(_,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),_.forEach(a)},m(l,_){u(l,p,_),s(p,v),s(p,g),s(g,f),s(p,b)},d(l){l&&a(p)}}}function Qu(T){let p,v,g,f,b;return f=new rs({props:{code:`from transformers import ReformerTokenizer, ReformerForQuestionAnswering
import torch

tokenizer = ReformerTokenizer.from_pretrained("google/reformer-crime-and-punishment")
model = ReformerForQuestionAnswering.from_pretrained("google/reformer-crime-and-punishment")

question, text = "Who was Jim Henson?", "Jim Henson was a nice puppet"

inputs = tokenizer(question, text, return_tensors="pt")
with torch.no_grad():
    outputs = model(**inputs)

answer_start_index = outputs.start_logits.argmax()
answer_end_index = outputs.end_logits.argmax()

predict_answer_tokens = inputs.input_ids[0, answer_start_index : answer_end_index + 1]
tokenizer.decode(predict_answer_tokens)
`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ReformerTokenizer, ReformerForQuestionAnswering
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = ReformerTokenizer.from_pretrained(<span class="hljs-string">&quot;google/reformer-crime-and-punishment&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ReformerForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/reformer-crime-and-punishment&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>question, text = <span class="hljs-string">&quot;Who was Jim Henson?&quot;</span>, <span class="hljs-string">&quot;Jim Henson was a nice puppet&quot;</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(question, text, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>answer_start_index = outputs.start_logits.argmax()
<span class="hljs-meta">&gt;&gt;&gt; </span>answer_end_index = outputs.end_logits.argmax()

<span class="hljs-meta">&gt;&gt;&gt; </span>predict_answer_tokens = inputs.input_ids[<span class="hljs-number">0</span>, answer_start_index : answer_end_index + <span class="hljs-number">1</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.decode(predict_answer_tokens)
`}}),{c(){p=o("p"),v=t("Example:"),g=h(),y(f.$$.fragment)},l(l){p=r(l,"P",{});var _=i(p);v=n(_,"Example:"),_.forEach(a),g=d(l),k(f.$$.fragment,l)},m(l,_){u(l,p,_),s(p,v),u(l,g,_),w(f,l,_),b=!0},p:ps,i(l){b||(x(f.$$.fragment,l),b=!0)},o(l){z(f.$$.fragment,l),b=!1},d(l){l&&a(p),l&&a(g),$(f,l)}}}function Ku(T){let p,v;return p=new rs({props:{code:`# target is "nice puppet"
target_start_index, target_end_index = torch.tensor([14]), torch.tensor([15])

outputs = model(**inputs, start_positions=target_start_index, end_positions=target_end_index)
loss = outputs.loss
round(loss.item(), 2)
`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># target is &quot;nice puppet&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>target_start_index, target_end_index = torch.tensor([<span class="hljs-number">14</span>]), torch.tensor([<span class="hljs-number">15</span>])

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs, start_positions=target_start_index, end_positions=target_end_index)
<span class="hljs-meta">&gt;&gt;&gt; </span>loss = outputs.loss
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">round</span>(loss.item(), <span class="hljs-number">2</span>)
`}}),{c(){y(p.$$.fragment)},l(g){k(p.$$.fragment,g)},m(g,f){w(p,g,f),v=!0},p:ps,i(g){v||(x(p.$$.fragment,g),v=!0)},o(g){z(p.$$.fragment,g),v=!1},d(g){$(p,g)}}}function Uu(T){let p,v,g,f,b,l,_,F,ji,po,ws,At,Ci,Ai,je,Pi,Si,mo,xs,Xs,Pt,Ce,Oi,St,Ni,co,Vs,Di,Ae,Hi,Ii,ho,Za,Wi,go,st,Ot,Qi,uo,ms,Ki,Pe,Ui,Xi,Se,Vi,Bi,fo,Oe,Nt,Gi,Ji,_o,et,cs,Yi,Dt,Zi,sl,Ht,el,al,Ne,tl,vo,zs,Bs,It,De,nl,Wt,ol,bo,q,rl,He,il,ll,yo,Gg='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span></span></span></span>',ko,Qt,pl,ml,wo,Jg='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo separator="true">,</mo><mo>\u2026</mo><mo separator="true">,</mo><msub><mi>n</mi><mi>s</mi></msub></mrow><annotation encoding="application/x-tex">i, \\ldots, n_s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">\u2026</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>',xo,zo,Yg='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>s</mi></msub></mrow><annotation encoding="application/x-tex">n_s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>',$o,Kt,cl,hl,To,Zg='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>s</mi></msub><mo>=</mo><msup><mn>2</mn><mn>19</mn></msup><mo>\u2248</mo><mn>0.5</mn><mi>M</mi></mrow><annotation encoding="application/x-tex">n_s = 2^{19} \\approx 0.5M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">19</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">\u2248</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">0.5</span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span>',Mo,Ut,dl,gl,Ro,su='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mo>=</mo><msup><mn>2</mn><mn>10</mn></msup><mo>\u2248</mo><mn>1000</mn></mrow><annotation encoding="application/x-tex">d = 2^{10} \\approx 1000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">10</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">\u2248</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1000</span></span></span></span>',qo,Eo,eu='<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>X</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo separator="true">,</mo><mtext>\xA0with\xA0</mtext><mi>i</mi><mo>\u2208</mo><mrow><mo fence="true">[</mo><mn>1</mn><mo separator="true">,</mo><mo>\u2026</mo><mo separator="true">,</mo><mi>d</mi><mo fence="true">]</mo></mrow><mtext>\xA0and\xA0</mtext><mi>j</mi><mo>\u2208</mo><mrow><mo fence="true">[</mo><mn>1</mn><mo separator="true">,</mo><mo>\u2026</mo><mo separator="true">,</mo><msub><mi>n</mi><mi>s</mi></msub><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">X_{i,j}, \\text{ with } i \\in \\left[1,\\ldots, d\\right] \\text{ and } j \\in \\left[1,\\ldots, n_s\\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9805em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord text"><span class="mord">\xA0with\xA0</span></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">\u2208</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">\u2026</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mclose delimcenter" style="top:0em;">]</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord text"><span class="mord">\xA0and\xA0</span></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">\u2208</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">\u2026</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">]</span></span></span></span></span></span>',Lo,$s,ul,Fo,au='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>X</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">X_{i,j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>',jo,Co,tu='<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msubsup><mi>X</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow><mn>1</mn></msubsup><mo separator="true">,</mo><mtext>\xA0with\xA0</mtext><mi>i</mi><mo>\u2208</mo><mrow><mo fence="true">[</mo><mn>1</mn><mo separator="true">,</mo><mo>\u2026</mo><mo separator="true">,</mo><msup><mi>d</mi><mn>1</mn></msup><mo fence="true">]</mo></mrow><mtext>\xA0and\xA0</mtext><mi>j</mi><mo>\u2208</mo><mrow><mo fence="true">[</mo><mn>1</mn><mo separator="true">,</mo><mo>\u2026</mo><mo separator="true">,</mo><msubsup><mi>n</mi><mi>s</mi><mn>1</mn></msubsup><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">X^{1}_{i,j}, \\text{ with } i \\in \\left[1,\\ldots, d^1\\right] \\text{ and } j \\in \\left[1,\\ldots, n_s^1\\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2472em;vertical-align:-0.3831em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-2.453em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.3831em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord text"><span class="mord">\xA0with\xA0</span></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">\u2208</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2141em;vertical-align:-0.35em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">\u2026</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">]</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord text"><span class="mord">\xA0and\xA0</span></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">\u2208</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2141em;vertical-align:-0.35em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">\u2026</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">]</span></span></span></span></span></span></span>',Ao,Ie,fl,Po,nu='<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msubsup><mi>X</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow><mn>2</mn></msubsup><mo separator="true">,</mo><mtext>\xA0with\xA0</mtext><mi>i</mi><mo>\u2208</mo><mrow><mo fence="true">[</mo><mn>1</mn><mo separator="true">,</mo><mo>\u2026</mo><mo separator="true">,</mo><msup><mi>d</mi><mn>2</mn></msup><mo fence="true">]</mo></mrow><mtext>\xA0and\xA0</mtext><mi>j</mi><mo>\u2208</mo><mrow><mo fence="true">[</mo><mn>1</mn><mo separator="true">,</mo><mo>\u2026</mo><mo separator="true">,</mo><msubsup><mi>n</mi><mi>s</mi><mn>2</mn></msubsup><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">X^{2}_{i,j}, \\text{ with } i \\in \\left[1,\\ldots, d^2\\right] \\text{ and } j \\in \\left[1,\\ldots, n_s^2\\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2472em;vertical-align:-0.3831em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-2.453em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.3831em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord text"><span class="mord">\xA0with\xA0</span></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">\u2208</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2141em;vertical-align:-0.35em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">\u2026</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">]</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord text"><span class="mord">\xA0and\xA0</span></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">\u2208</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2141em;vertical-align:-0.35em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">[</span></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">\u2026</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">]</span></span></span></span></span></span></span>',So,We,_l,Oo,ou='<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>d</mi><mo>=</mo><msup><mi>d</mi><mn>1</mn></msup><mo>+</mo><msup><mi>d</mi><mn>2</mn></msup><mtext>\xA0and\xA0</mtext><msub><mi>n</mi><mi>s</mi></msub><mo>=</mo><msubsup><mi>n</mi><mi>s</mi><mn>1</mn></msubsup><mo>\xD7</mo><msubsup><mi>n</mi><mi>s</mi><mn>2</mn></msubsup><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">d = d^1 + d^2 \\text{ and } n_s = n_s^1 \\times n_s^2 .</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9474em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0141em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord text"><span class="mord">\xA0and\xA0</span></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1111em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">\xD7</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1111em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mord">.</span></span></span></span></span>',No,Qe,vl,Do,ru=`<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>X</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msubsup><mi>X</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>k</mi></mrow><mn>1</mn></msubsup><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>if\xA0\xA0</mtext><mi>i</mi><mo>&lt;</mo><msup><mi>d</mi><mn>1</mn></msup><mtext>\xA0with\xA0</mtext><mi>k</mi><mo>=</mo><mi>j</mi><mspace></mspace><mspace width="0.6667em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext>\u2009</mtext><mtext>\u2009</mtext><msubsup><mi>n</mi><mi>s</mi><mn>1</mn></msubsup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msubsup><mi>X</mi><mrow><mi>i</mi><mo>\u2212</mo><msup><mi>d</mi><mn>1</mn></msup><mo separator="true">,</mo><mi>l</mi></mrow><mn>2</mn></msubsup><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>if\xA0</mtext><mi>i</mi><mo>\u2265</mo><msup><mi>d</mi><mn>1</mn></msup><mtext>\xA0with\xA0</mtext><mi>l</mi><mo>=</mo><mo stretchy="false">\u230A</mo><mfrac><mi>j</mi><msubsup><mi>n</mi><mi>s</mi><mn>1</mn></msubsup></mfrac><mo stretchy="false">\u230B</mo></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">X_{i,j} = \\begin{cases}
X^{1}_{i, k}, &amp; \\text{if }\\ i &lt; d^1 \\text{ with } k = j \\mod n_s^1 \\\\
X^{2}_{i - d^1, l}, &amp; \\text{if } i \\ge d^1 \\text{ with } l = \\lfloor\\frac{j}{n_s^1}\\rfloor
\\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7466em;"><span style="top:-3.7466em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4169em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192em;"><span></span></span></span></span></span></span><span class="mpunct">,</span></span></span><span style="top:-2.3066em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.3806em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">\u2212</span><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463em;"><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.4555em;"><span></span></span></span></span></span></span><span class="mpunct">,</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:1.2466em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7466em;"><span style="top:-3.7466em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if\xA0</span></span><span class="mspace">\xA0</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mord text"><span class="mord">\xA0with\xA0</span></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:0.6667em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.3066em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if\xA0</span></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">\u2265</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mord text"><span class="mord">\xA0with\xA0</span></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">\u230A</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9078em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7463em;"><span style="top:-2.214em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">s</span></span></span><span style="top:-2.786em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.286em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4461em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.5452em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">\u230B</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:1.2466em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span>`,Ho,j,bl,Io,iu='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>j</mi></msub><mo>\u2208</mo><msup><mi mathvariant="double-struck">R</mi><mi>d</mi></msup></mrow><annotation encoding="application/x-tex">x_j \\in \\mathbb{R}^{d}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8252em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">\u2208</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord mathbb">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span></span></span></span></span></span></span></span>',Wo,Qo,lu='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>x</mi><mrow><mi>k</mi><mo separator="true">,</mo><mi>l</mi></mrow><mn>1</mn></msubsup><mo>+</mo><msubsup><mi>x</mi><mrow><mi>l</mi><mo separator="true">,</mo><mi>k</mi></mrow><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">x^1_{k, l} + x^2_{l, k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2333em;vertical-align:-0.4192em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4169em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.2333em;vertical-align:-0.4192em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4169em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.4192em;"><span></span></span></span></span></span></span></span></span></span>',Ko,Xt,yl,kl,Uo,pu='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>j</mi></mrow><annotation encoding="application/x-tex">j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span>',Xo,Vo,mu='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mtext>\xA0and\xA0</mtext><mi>l</mi></mrow><annotation encoding="application/x-tex">k \\text{ and } l</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord text"><span class="mord">\xA0and\xA0</span></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span></span></span></span>',Bo,Go,cu='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">x_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>',Jo,Yo,hs,wl,Zo,hu='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>d</mi><mn>1</mn></msup><mo>=</mo><msup><mn>2</mn><mn>5</mn></msup><mo separator="true">,</mo><msup><mi>d</mi><mn>2</mn></msup><mo>=</mo><msup><mn>2</mn><mn>5</mn></msup><mo separator="true">,</mo><msubsup><mi>n</mi><mi>s</mi><mn>1</mn></msubsup><mo>=</mo><msup><mn>2</mn><mn>9</mn></msup><mo separator="true">,</mo><msubsup><mi>n</mi><mi>s</mi><mn>2</mn></msubsup><mo>=</mo><msup><mn>2</mn><mn>10</mn></msup></mrow><annotation encoding="application/x-tex">d^1 = 2^5, d^2 = 2^5, n_s^1 = 2^9, n_s^2 = 2^{10}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0611em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0611em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">10</span></span></span></span></span></span></span></span></span></span></span></span>',sr,er,du='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>14</mn></msup><mo>+</mo><msup><mn>2</mn><mn>15</mn></msup><mo>\u2248</mo><mn>49000</mn></mrow><annotation encoding="application/x-tex">2^{14} + 2^{15} \\approx 49000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">14</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">15</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">\u2248</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">49000</span></span></span></span>',ar,tr,E,xl,Vt,zl,$l,nr,gu='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msup><mi>d</mi><mn>1</mn></msup><mo separator="true">,</mo><msup><mi>d</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(d^1, d^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>',or,Bt,Tl,Ml,Gt,Rl,ql,rr,uu='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msubsup><mi>n</mi><mi>s</mi><mn>1</mn></msubsup><mo separator="true">,</mo><msubsup><mi>n</mi><mi>s</mi><mn>2</mn></msubsup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(n_s^1, n_s^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>',ir,Jt,El,Ll,Yt,Fl,jl,Zt,Cl,Al,lr,Ts,Gs,sn,Ke,Pl,en,Sl,pr,J,Ol,Ue,Nl,Dl,an,Hl,Il,tn,Wl,Ql,mr,O,Kl,nn,Ul,Xl,on,Vl,Bl,rn,Gl,Jl,ln,Yl,Zl,pn,sp,ep,cr,ds,ap,Xe,tp,np,Ve,op,rp,hr,I,ip,mn,lp,pp,dr,fu=`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msubsup><mi>n</mi><mtext>buckets</mtext><mn>1</mn></msubsup><mo separator="true">,</mo><msubsup><mi>n</mi><mtext>buckets</mtext><mn>2</mn></msubsup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(n_{\\text{buckets}}^1,
n_{\\text{buckets}}^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0972em;vertical-align:-0.2831em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4169em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">buckets</span></span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.2831em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4169em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">buckets</span></span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.2831em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>`,gr,ur,_u=`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mo>\u2026</mo><mo separator="true">,</mo><msub><mi>n</mi><mtext>buckets</mtext></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(1,\\ldots,
n_{\\text{buckets}})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">\u2026</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">buckets</span></span></span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>`,fr,_r,vu=`<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>\u2212</mo><mn>1</mn><mo separator="true">,</mo><mo>\u2026</mo><mo separator="true">,</mo><msubsup><mi>n</mi><mtext>buckets</mtext><mn>1</mn></msubsup><mo>\u2212</mo><mn>1</mn><mo separator="true">,</mo><mo>\u2026</mo><mo separator="true">,</mo><mn>1</mn><mo>\u2212</mo><msubsup><mi>n</mi><mtext>buckets</mtext><mn>2</mn></msubsup><mo separator="true">,</mo><mo>\u2026</mo><mo separator="true">,</mo><msubsup><mi>n</mi><mtext>buckets</mtext><mn>1</mn></msubsup><mo>\u2212</mo><msubsup><mi>n</mi><mtext>buckets</mtext><mn>2</mn></msubsup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(1-1,\\ldots, n_{\\text{buckets}}^1-1, \\ldots,
1-n_{\\text{buckets}}^2, \\ldots, n_{\\text{buckets}}^1-n_{\\text{buckets}}^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">\u2212</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0972em;vertical-align:-0.2831em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">\u2026</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4169em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">buckets</span></span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.2831em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">\u2212</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">\u2026</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">\u2212</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0972em;vertical-align:-0.2831em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4169em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">buckets</span></span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.2831em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">\u2026</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4169em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">buckets</span></span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.2831em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">\u2212</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0972em;vertical-align:-0.2831em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4169em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">buckets</span></span></span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.2831em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>`,vr,br,gs,mp,cn,cp,hp,hn,dp,gp,yr,Y,up,kr,bu='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">O</mi><mo stretchy="false">(</mo><msub><mi>n</mi><mi>s</mi></msub><mo>\xD7</mo><msub><mi>n</mi><mi>s</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\\mathcal{O}(n_s \\times n_s)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathcal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">\xD7</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>',wr,xr,yu='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">O</mi><mo stretchy="false">(</mo><msub><mi>n</mi><mi>s</mi></msub><mo>\xD7</mo><mi>log</mi><mo>\u2061</mo><mo stretchy="false">(</mo><msub><mi>n</mi><mi>s</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\\mathcal{O}(n_s \\times \\log(n_s))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathcal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">\xD7</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">))</span></span></span></span>',zr,$r,ku='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>s</mi></msub></mrow><annotation encoding="application/x-tex">n_s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>',Tr,Mr,Ms,Js,dn,Be,fp,gn,_p,Rr,Z,vp,un,bp,yp,fn,kp,wp,_n,xp,zp,qr,ss,$p,Er,wu='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">O</mi><mo stretchy="false">(</mo><msub><mi>n</mi><mi>s</mi></msub><mo>\xD7</mo><msub><mi>n</mi><mi>s</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\\mathcal{O}(n_s \\times n_s)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathcal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">\xD7</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>',Lr,Fr,xu='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="script">O</mi><mo stretchy="false">(</mo><msub><mi>n</mi><mi>s</mi></msub><mo>\xD7</mo><mi>log</mi><mo>\u2061</mo><mo stretchy="false">(</mo><msub><mi>n</mi><mi>s</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\\mathcal{O}(n_s \\times \\log(n_s))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathcal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">\xD7</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">))</span></span></span></span>',jr,Cr,zu='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mi>s</mi></msub></mrow><annotation encoding="application/x-tex">n_s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span class="vlist-s">\u200B</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>',Ar,Pr,Rs,Ys,vn,Ge,Tp,bn,Mp,Sr,us,Rp,yn,qp,Ep,kn,Lp,Fp,Or,Zs,jp,at,Cp,Ap,Nr,Je,Dr,qs,se,wn,Ye,Pp,xn,Sp,Hr,B,Ze,Op,sa,Np,tt,Dp,Hp,Ip,Es,Wp,nt,Qp,Kp,ot,Up,Xp,Vp,ee,Ir,Ls,ae,zn,ea,Bp,$n,Gp,Wr,G,aa,Jp,ta,Yp,na,Zp,sm,em,oa,am,rt,tm,nm,om,it,ra,Qr,Fs,te,Tn,ia,rm,Mn,im,Kr,is,la,lm,js,pm,Rn,mm,cm,pa,hm,dm,gm,ma,um,lt,fm,_m,Ur,Cs,ne,qn,ca,vm,En,bm,Xr,N,ha,ym,da,km,ga,wm,xm,zm,ua,$m,pt,Tm,Mm,Rm,fa,qm,_a,Em,Lm,Fm,es,va,jm,As,Cm,mt,Am,Pm,Ln,Sm,Om,Nm,oe,Dm,re,Vr,Ps,ie,Fn,ba,Hm,jn,Im,Br,D,ya,Wm,Ss,Qm,Cn,Km,Um,ka,Xm,Vm,Bm,wa,Gm,ct,Jm,Ym,Zm,xa,sc,za,ec,ac,tc,as,$a,nc,Os,oc,ht,rc,ic,An,lc,pc,mc,le,cc,pe,Gr,Ns,me,Pn,Ta,hc,Sn,dc,Jr,H,Ma,gc,Ds,uc,On,fc,_c,Ra,vc,bc,yc,qa,kc,dt,wc,xc,zc,Ea,$c,La,Tc,Mc,Rc,W,Fa,qc,Hs,Ec,gt,Lc,Fc,Nn,jc,Cc,Ac,ce,Pc,he,Sc,de,Yr,Is,ge,Dn,ja,Oc,Hn,Nc,Zr,P,Ca,Dc,In,Hc,Ic,Aa,Wc,Pa,Qc,Kc,Uc,Sa,Xc,ut,Vc,Bc,Gc,Oa,Jc,Na,Yc,Zc,sh,C,Da,eh,Ws,ah,ft,th,nh,Wn,oh,rh,ih,ue,lh,fe,ph,_e,mh,ve,ch,be,si,Qs,ye,Qn,Ha,hh,Kn,dh,ei,S,Ia,gh,Ks,uh,Un,fh,_h,Xn,vh,bh,yh,Wa,kh,Qa,wh,xh,zh,Ka,$h,_t,Th,Mh,Rh,Ua,qh,Xa,Eh,Lh,Fh,Q,Va,jh,Us,Ch,vt,Ah,Ph,Vn,Sh,Oh,Nh,ke,Dh,we,Hh,xe,ai;return l=new V({}),Ce=new V({}),De=new V({}),Ke=new V({}),Be=new V({}),Ge=new V({}),Je=new rs({props:{code:`input_ids = tokenizer.encode("This is a sentence from the training data", return_tensors="pt")
loss = model(input_ids, labels=input_ids)[0]`,highlighted:`input_ids = tokenizer.encode(<span class="hljs-string">&quot;This is a sentence from the training data&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
loss = model(input_ids, labels=input_ids)[<span class="hljs-number">0</span>]`}}),Ye=new V({}),Ze=new X({props:{name:"class transformers.ReformerConfig",anchor:"transformers.ReformerConfig",parameters:[{name:"attention_head_size",val:" = 64"},{name:"attn_layers",val:" = ['local', 'lsh', 'local', 'lsh', 'local', 'lsh']"},{name:"axial_norm_std",val:" = 1.0"},{name:"axial_pos_embds",val:" = True"},{name:"axial_pos_shape",val:" = [64, 64]"},{name:"axial_pos_embds_dim",val:" = [64, 192]"},{name:"chunk_size_lm_head",val:" = 0"},{name:"eos_token_id",val:" = 2"},{name:"feed_forward_size",val:" = 512"},{name:"hash_seed",val:" = None"},{name:"hidden_act",val:" = 'relu'"},{name:"hidden_dropout_prob",val:" = 0.05"},{name:"hidden_size",val:" = 256"},{name:"initializer_range",val:" = 0.02"},{name:"is_decoder",val:" = False"},{name:"layer_norm_eps",val:" = 1e-12"},{name:"local_num_chunks_before",val:" = 1"},{name:"local_num_chunks_after",val:" = 0"},{name:"local_attention_probs_dropout_prob",val:" = 0.05"},{name:"local_attn_chunk_length",val:" = 64"},{name:"lsh_attn_chunk_length",val:" = 64"},{name:"lsh_attention_probs_dropout_prob",val:" = 0.0"},{name:"lsh_num_chunks_before",val:" = 1"},{name:"lsh_num_chunks_after",val:" = 0"},{name:"max_position_embeddings",val:" = 4096"},{name:"num_attention_heads",val:" = 12"},{name:"num_buckets",val:" = None"},{name:"num_hashes",val:" = 1"},{name:"pad_token_id",val:" = 0"},{name:"vocab_size",val:" = 320"},{name:"tie_word_embeddings",val:" = False"},{name:"use_cache",val:" = True"},{name:"classifier_dropout",val:" = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ReformerConfig.attention_head_size",description:`<strong>attention_head_size</strong> (<code>int</code>, <em>optional</em>, defaults to 64) &#x2014;
Dimensionality of the projected key, query and value vectors`,name:"attention_head_size"},{anchor:"transformers.ReformerConfig.attn_layers",description:`<strong>attn_layers</strong> (<code>List[str]</code>, <em>optional</em>, defaults to <code>[&quot;local&quot;, &quot;lsh&quot;, &quot;local&quot;, &quot;lsh&quot;, &quot;local&quot;, &quot;lsh&quot;]</code>) &#x2014;
List of attention layer types in ascending order. It can be chosen between a LSHSelfAttention layer
(<code>&quot;lsh&quot;</code>) and a LocalSelfAttention layer (<code>&quot;local&quot;</code>).</p>
<p>For more information on LSHSelfAttention layer, see <a href="reformer#lsh-self-attention">LSH Self Attention</a>. For
more information on LocalSelfAttention layer, see <a href="reformer#local-self-attention">Local Self Attention</a>.`,name:"attn_layers"},{anchor:"transformers.ReformerConfig.axial_pos_embds",description:`<strong>axial_pos_embds</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to use axial position embeddings. For more information on how axial position embeddings
work, see <a href="reformer#axial-positional-encodings">Axial Position Encodings</a>.`,name:"axial_pos_embds"},{anchor:"transformers.ReformerConfig.axial_norm_std",description:`<strong>axial_norm_std</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
The standard deviation of the normal_initializer for initializing the weight matrices of the axial
positional encodings.`,name:"axial_norm_std"},{anchor:"transformers.ReformerConfig.axial_pos_shape",description:`<strong>axial_pos_shape</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[64, 64]</code>) &#x2014;
The position dims of the axial position encodings. During training, the product of the position dims has to
be equal to the sequence length.</p>
<p>For more information on how axial position embeddings work, see <a href="reformer#axial-positional-encodings">Axial Position
Encodings</a>.`,name:"axial_pos_shape"},{anchor:"transformers.ReformerConfig.axial_pos_embds_dim",description:`<strong>axial_pos_embds_dim</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[64, 192]</code>) &#x2014;
The embedding dims of the axial position encodings. The sum of the embedding dims has to be equal to the
hidden size.</p>
<p>For more information on how axial position embeddings work, see <a href="reformer#axial-positional-encodings">Axial Position
Encodings</a>.`,name:"axial_pos_embds_dim"},{anchor:"transformers.ReformerConfig.chunk_size_lm_head",description:`<strong>chunk_size_lm_head</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The chunk size of the final language model feed forward head layer. A chunk size of 0 means that the feed
forward layer is not chunked. A chunk size of n means that the feed forward layer processes n &lt;
sequence_length embeddings at a time.</p>
<p>For more information on feed forward chunking, see <a href="../glossary#feed-forward-chunking">How does Feed Forward Chunking
work?</a>.`,name:"chunk_size_lm_head"},{anchor:"transformers.ReformerConfig.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>, <em>optional</em>, defaults to 2) &#x2014;
The token id for the end-of-sentence token.`,name:"eos_token_id"},{anchor:"transformers.ReformerConfig.feed_forward_size",description:`<strong>feed_forward_size</strong> (<code>int</code>, <em>optional</em>, defaults to 512) &#x2014;
Dimensionality of the feed_forward layer in the residual attention block.`,name:"feed_forward_size"},{anchor:"transformers.ReformerConfig.hash_seed",description:`<strong>hash_seed</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Seed that can be used to make local sensitive hashing in <code>LSHSelfAttention</code> deterministic. This should only
be set for testing purposed. For evaluation and training purposes <code>hash_seed</code> should be left as <code>None</code> to
ensure fully random rotations in local sensitive hashing scheme.`,name:"hash_seed"},{anchor:"transformers.ReformerConfig.hidden_act",description:`<strong>hidden_act</strong> (<code>str</code> or <code>Callable</code>, <em>optional</em>, defaults to <code>&quot;relu&quot;</code>) &#x2014;
The non-linear activation function (function or string) in the feed forward layer in the residual attention
block. If string, <code>&quot;gelu&quot;</code>, <code>&quot;relu&quot;</code>, <code>&quot;silu&quot;</code> and <code>&quot;gelu_new&quot;</code> are supported.`,name:"hidden_act"},{anchor:"transformers.ReformerConfig.hidden_dropout_prob",description:`<strong>hidden_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.05) &#x2014;
The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.`,name:"hidden_dropout_prob"},{anchor:"transformers.ReformerConfig.hidden_size",description:`<strong>hidden_size</strong> (<code>int</code>, <em>optional</em>, defaults to 256) &#x2014;
Dimensionality of the output hidden states of the residual attention blocks.`,name:"hidden_size"},{anchor:"transformers.ReformerConfig.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"initializer_range"},{anchor:"transformers.ReformerConfig.is_decoder",description:`<strong>is_decoder</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to use a causal mask in addition to the <code>attention_mask</code> passed to <a href="/docs/transformers/pr_16925/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a>. When
using the Reformer for causal language modeling, this argument should be set to <code>True</code>.`,name:"is_decoder"},{anchor:"transformers.ReformerConfig.layer_norm_eps",description:`<strong>layer_norm_eps</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-12) &#x2014;
The epsilon used by the layer normalization layers.`,name:"layer_norm_eps"},{anchor:"transformers.ReformerConfig.local_chunk_length",description:`<strong>local_chunk_length</strong> (<code>int</code>, <em>optional</em>, defaults to 64) &#x2014;
Length of chunk which attends to itself in <code>LocalSelfAttention</code>. Chunking reduces memory complexity from
sequence length x sequence length (self attention) to chunk length x chunk length x sequence length / chunk
length (chunked self attention).`,name:"local_chunk_length"},{anchor:"transformers.ReformerConfig.local_num_chunks_before",description:`<strong>local_num_chunks_before</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Number of previous neighbouring chunks to attend to in <code>LocalSelfAttention</code> layer to itself.`,name:"local_num_chunks_before"},{anchor:"transformers.ReformerConfig.local_num_chunks_after",description:`<strong>local_num_chunks_after</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
Number of following neighbouring chunks to attend to in <code>LocalSelfAttention</code> layer in addition to itself.`,name:"local_num_chunks_after"},{anchor:"transformers.ReformerConfig.local_attention_probs_dropout_prob",description:`<strong>local_attention_probs_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout ratio for the attention probabilities in <code>LocalSelfAttention</code>.`,name:"local_attention_probs_dropout_prob"},{anchor:"transformers.ReformerConfig.lsh_attn_chunk_length",description:`<strong>lsh_attn_chunk_length</strong> (<code>int</code>, <em>optional</em>, defaults to 64) &#x2014;
Length of chunk which attends to itself in <code>LSHSelfAttention</code>. Chunking reduces memory complexity from
sequence length x sequence length (self attention) to chunk length x chunk length x sequence length / chunk
length (chunked self attention).`,name:"lsh_attn_chunk_length"},{anchor:"transformers.ReformerConfig.lsh_num_chunks_before",description:`<strong>lsh_num_chunks_before</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Number of previous neighbouring chunks to attend to in <code>LSHSelfAttention</code> layer to itself.`,name:"lsh_num_chunks_before"},{anchor:"transformers.ReformerConfig.lsh_num_chunks_after",description:`<strong>lsh_num_chunks_after</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
Number of following neighbouring chunks to attend to in <code>LSHSelfAttention</code> layer to itself.`,name:"lsh_num_chunks_after"},{anchor:"transformers.ReformerConfig.lsh_attention_probs_dropout_prob",description:`<strong>lsh_attention_probs_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout ratio for the attention probabilities in <code>LSHSelfAttention</code>.`,name:"lsh_attention_probs_dropout_prob"},{anchor:"transformers.ReformerConfig.max_position_embeddings",description:`<strong>max_position_embeddings</strong> (<code>int</code>, <em>optional</em>, defaults to 4096) &#x2014;
The maximum sequence length that this model might ever be used with. Typically set this to something large
just in case (e.g., 512 or 1024 or 2048).`,name:"max_position_embeddings"},{anchor:"transformers.ReformerConfig.num_attention_heads",description:`<strong>num_attention_heads</strong> (<code>int</code>, <em>optional</em>, defaults to 12) &#x2014;
Number of attention heads for each attention layer in the Transformer encoder.`,name:"num_attention_heads"},{anchor:"transformers.ReformerConfig.num_buckets",description:`<strong>num_buckets</strong> (<code>int</code> or <code>List[int]</code>, <em>optional</em>) &#x2014;
Number of buckets, the key query vectors can be &#x201C;hashed into&#x201D; using the locality sensitive hashing scheme.
Each query key vector is hashed into a hash in <code>1, ..., num_buckets</code>. The number of buckets can also be
factorized into a list for improved memory complexity. In this case, each query key vector is hashed into a
hash in <code>1-1, 1-2, ..., num_buckets[0]-1, ..., num_buckets[0]-num_buckets[1]</code> if <code>num_buckets</code> is
factorized into two factors. The number of buckets (or the product the factors) should approximately equal
sequence length / lsh_chunk_length. If <code>num_buckets</code> not set, a good value is calculated on the fly.`,name:"num_buckets"},{anchor:"transformers.ReformerConfig.num_hashes",description:`<strong>num_hashes</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Number of hashing rounds (e.g., number of random rotations) in Local Sensitive Hashing scheme. The higher
<code>num_hashes</code>, the more accurate the <code>LSHSelfAttention</code> becomes, but also the more memory and time intensive
the hashing becomes.`,name:"num_hashes"},{anchor:"transformers.ReformerConfig.pad_token_id",description:`<strong>pad_token_id</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The token id for the padding token.`,name:"pad_token_id"},{anchor:"transformers.ReformerConfig.vocab_size",description:`<strong>vocab_size</strong> (<code>int</code>, <em>optional</em>, defaults to 320) &#x2014;\\
Vocabulary size of the Reformer model. Defines the number of different tokens that can be represented by
the <code>inputs_ids</code> passed when calling <a href="/docs/transformers/pr_16925/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a>.`,name:"vocab_size"},{anchor:"transformers.ReformerConfig.tie_word_embeddings",description:`<strong>tie_word_embeddings</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to tie input and output embeddings.`,name:"tie_word_embeddings"},{anchor:"transformers.ReformerConfig.use_cache",description:`<strong>use_cache</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not the model should return the last key/values attentions (not used by all models).`,name:"use_cache"},{anchor:"transformers.ReformerConfig.classifier_dropout",description:`<strong>classifier_dropout</strong> (<code>float</code>, <em>optional</em>) &#x2014;
The dropout ratio for the classification head.`,name:"classifier_dropout"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/reformer/configuration_reformer.py#L30"}}),ee=new ls({props:{anchor:"transformers.ReformerConfig.example",$$slots:{default:[Eu]},$$scope:{ctx:T}}}),ea=new V({}),aa=new X({props:{name:"class transformers.ReformerTokenizer",anchor:"transformers.ReformerTokenizer",parameters:[{name:"vocab_file",val:""},{name:"eos_token",val:" = '</s>'"},{name:"unk_token",val:" = '<unk>'"},{name:"additional_special_tokens",val:" = []"},{name:"sp_model_kwargs",val:": typing.Union[typing.Dict[str, typing.Any], NoneType] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ReformerTokenizer.vocab_file",description:`<strong>vocab_file</strong> (<code>str</code>) &#x2014;
<a href="https://github.com/google/sentencepiece" rel="nofollow">SentencePiece</a> file (generally has a <em>.spm</em> extension) that
contains the vocabulary necessary to instantiate a tokenizer.`,name:"vocab_file"},{anchor:"transformers.ReformerTokenizer.eos_token",description:`<strong>eos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;/s&gt;&quot;</code>) &#x2014;
The end of sequence token.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>When building a sequence using special tokens, this is not the token that is used for the end of sequence.
The token used is the <code>sep_token</code>.</p>

					</div>`,name:"eos_token"},{anchor:"transformers.ReformerTokenizer.unk_token",description:`<strong>unk_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;unk&gt;&quot;</code>) &#x2014;
The unknown token. A token that is not in the vocabulary cannot be converted to an ID and is set to be this
token instead.`,name:"unk_token"},{anchor:"transformers.ReformerTokenizer.pad_token",description:`<strong>pad_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;pad&gt;&quot;</code>) &#x2014;
The token used for padding, for example when batching sequences of different lengths.`,name:"pad_token"},{anchor:"transformers.ReformerTokenizer.additional_special_tokens",description:`<strong>additional_special_tokens</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
Additional special tokens used by the tokenizer.`,name:"additional_special_tokens"},{anchor:"transformers.ReformerTokenizer.sp_model_kwargs",description:`<strong>sp_model_kwargs</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Will be passed to the <code>SentencePieceProcessor.__init__()</code> method. The <a href="https://github.com/google/sentencepiece/tree/master/python" rel="nofollow">Python wrapper for
SentencePiece</a> can be used, among other things,
to set:</p>
<ul>
<li>
<p><code>enable_sampling</code>: Enable subword regularization.</p>
</li>
<li>
<p><code>nbest_size</code>: Sampling parameters for unigram. Invalid for BPE-Dropout.</p>
<ul>
<li><code>nbest_size = {0,1}</code>: No sampling is performed.</li>
<li><code>nbest_size &gt; 1</code>: samples from the nbest_size results.</li>
<li><code>nbest_size &lt; 0</code>: assuming that nbest_size is infinite and samples from the all hypothesis (lattice)
using forward-filtering-and-backward-sampling algorithm.</li>
</ul>
</li>
<li>
<p><code>alpha</code>: Smoothing parameter for unigram sampling, and dropout probability of merge operations for
BPE-dropout.</p>
</li>
</ul>`,name:"sp_model_kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/reformer/tokenization_reformer.py#L46"}}),ra=new X({props:{name:"save_vocabulary",anchor:"transformers.ReformerTokenizer.save_vocabulary",parameters:[{name:"save_directory",val:": str"},{name:"filename_prefix",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/reformer/tokenization_reformer.py#L162"}}),ia=new V({}),la=new X({props:{name:"class transformers.ReformerTokenizerFast",anchor:"transformers.ReformerTokenizerFast",parameters:[{name:"vocab_file",val:" = None"},{name:"tokenizer_file",val:" = None"},{name:"eos_token",val:" = '</s>'"},{name:"unk_token",val:" = '<unk>'"},{name:"additional_special_tokens",val:" = []"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ReformerTokenizerFast.vocab_file",description:`<strong>vocab_file</strong> (<code>str</code>) &#x2014;
<a href="https://github.com/google/sentencepiece" rel="nofollow">SentencePiece</a> file (generally has a <em>.spm</em> extension) that
contains the vocabulary necessary to instantiate a tokenizer.`,name:"vocab_file"},{anchor:"transformers.ReformerTokenizerFast.eos_token",description:`<strong>eos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;/s&gt;&quot;</code>) &#x2014;
The end of sequence token.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>When building a sequence using special tokens, this is not the token that is used for the end of sequence.
The token used is the <code>sep_token</code>.</p>

					</div>`,name:"eos_token"},{anchor:"transformers.ReformerTokenizerFast.unk_token",description:`<strong>unk_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;unk&gt;&quot;</code>) &#x2014;
The unknown token. A token that is not in the vocabulary cannot be converted to an ID and is set to be this
token instead.`,name:"unk_token"},{anchor:"transformers.ReformerTokenizerFast.pad_token",description:`<strong>pad_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;pad&gt;&quot;</code>) &#x2014;
The token used for padding, for example when batching sequences of different lengths.`,name:"pad_token"},{anchor:"transformers.ReformerTokenizerFast.additional_special_tokens",description:`<strong>additional_special_tokens</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
Additional special tokens used by the tokenizer.`,name:"additional_special_tokens"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/reformer/tokenization_reformer_fast.py#L53"}}),ca=new V({}),ha=new X({props:{name:"class transformers.ReformerModel",anchor:"transformers.ReformerModel",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.ReformerModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/reformer/modeling_reformer.py#L1961"}}),va=new X({props:{name:"forward",anchor:"transformers.ReformerModel.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"position_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"head_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"inputs_embeds",val:": typing.Optional[torch.Tensor] = None"},{name:"num_hashes",val:": typing.Optional[int] = None"},{name:"past_buckets_states",val:": typing.Optional[typing.List[typing.Tuple[torch.Tensor]]] = None"},{name:"use_cache",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.ReformerModel.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary. During training the input_ids sequence_length has to be
a multiple of the relevant model&#x2019;s chunk lengths (lsh&#x2019;s, local&#x2019;s or both). During evaluation, the indices
are automatically padded to be a multiple of the chunk length.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_16925/en/model_doc/reformer#transformers.ReformerTokenizer">ReformerTokenizer</a>. See <a href="/docs/transformers/pr_16925/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_16925/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.ReformerModel.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.ReformerModel.forward.position_ids",description:`<strong>position_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of positions of each input sequence tokens in the position embeddings. Selected in the range <code>[0, config.max_position_embeddings - 1]</code>.</p>
<p><a href="../glossary#position-ids">What are position IDs?</a>`,name:"position_ids"},{anchor:"transformers.ReformerModel.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.ReformerModel.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation. This
is useful if you want more control over how to convert <code>input_ids</code> indices into associated vectors than the
model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.ReformerModel.forward.num_hashes",description:`<strong>num_hashes</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The number of hashing rounds that should be performed during bucketing. Setting this argument overwrites
the default defined in <code>config.num_hashes</code>.</p>
<p>For more information, see <code>num_hashes</code> in <a href="/docs/transformers/pr_16925/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a>.`,name:"num_hashes"},{anchor:"transformers.ReformerModel.forward.past_buckets_states",description:`<strong>past_buckets_states</strong> (<code>List[Tuple(torch.LongTensor, torch.FloatTensor)]</code>, <em>optional</em>) &#x2014;
List of <code>Tuple(torch.LongTensor, torch.FloatTensor</code> of length <code>config.n_layers</code>, with the first element
being the previous <em>buckets</em> of shape <code>(batch_size, num_heads, num_hashes, sequence_length)</code>) and the
second being the previous <em>hidden_states</em> of shape <code>(batch_size, sequence_length, hidden_size)</code>).</p>
<p>Contains precomputed hidden-states and buckets (only relevant for LSH Self-Attention). Can be used to speed
up sequential decoding.`,name:"past_buckets_states"},{anchor:"transformers.ReformerModel.forward.use_cache",description:`<strong>use_cache</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If set to <code>True</code>, <code>past_key_values</code> key value states are returned and can be used to speed up decoding (see
<code>past_key_values</code>).`,name:"use_cache"},{anchor:"transformers.ReformerModel.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.ReformerModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.ReformerModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_16925/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/reformer/modeling_reformer.py#L1989",returnDescription:`
<p>A <code>transformers.models.reformer.modeling_reformer.ReformerModelOutput</code> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_16925/en/model_doc/reformer#transformers.ReformerConfig"
>ReformerConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_predict, hidden_size)</code>) \u2014 Sequence of hidden-states at the last layer of the model.</p>
<p><code>num_predict</code> corresponds to <code>target_mapping.shape[1]</code>. If <code>target_mapping</code> is <code>None</code>, then <code>num_predict</code>
corresponds to <code>sequence_length</code>.</p>
</li>
<li>
<p><strong>past_buckets_states</strong> (<code>List[Tuple(torch.LongTensor, torch.FloatTensor)]</code>, <em>optional</em>, returned when <code>use_cache=True</code> is passed or when <code>config.use_cache=True</code>) \u2014 List of <code>Tuple(torch.LongTensor, torch.FloatTensor</code> of length <code>config.n_layers</code>, with the first element
being the previous <em>buckets</em> of shape <code>(batch_size, num_heads, num_hashes, sequence_length)</code>) and the
second being the previous <em>hidden_states</em> of shape <code>(batch_size, sequence_length, hidden_size)</code>).</p>
<p>Contains precomputed buckets and hidden-states that can be used (see <code>past_buckets_states</code> input) to speed
up sequential decoding.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings and one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><code>transformers.models.reformer.modeling_reformer.ReformerModelOutput</code> or <code>tuple(torch.FloatTensor)</code></p>
`}}),oe=new lo({props:{$$slots:{default:[Lu]},$$scope:{ctx:T}}}),re=new ls({props:{anchor:"transformers.ReformerModel.forward.example",$$slots:{default:[Fu]},$$scope:{ctx:T}}}),ba=new V({}),ya=new X({props:{name:"class transformers.ReformerModelWithLMHead",anchor:"transformers.ReformerModelWithLMHead",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.ReformerModelWithLMHead.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/reformer/modeling_reformer.py#L2173"}}),$a=new X({props:{name:"forward",anchor:"transformers.ReformerModelWithLMHead.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"position_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"head_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"inputs_embeds",val:": typing.Optional[torch.Tensor] = None"},{name:"num_hashes",val:": typing.Optional[int] = None"},{name:"past_buckets_states",val:": typing.Optional[typing.List[typing.Tuple[torch.Tensor]]] = None"},{name:"use_cache",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"},{name:"labels",val:": typing.Optional[torch.Tensor] = None"}],parametersDescription:[{anchor:"transformers.ReformerModelWithLMHead.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary. During training the input_ids sequence_length has to be
a multiple of the relevant model&#x2019;s chunk lengths (lsh&#x2019;s, local&#x2019;s or both). During evaluation, the indices
are automatically padded to be a multiple of the chunk length.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_16925/en/model_doc/reformer#transformers.ReformerTokenizer">ReformerTokenizer</a>. See <a href="/docs/transformers/pr_16925/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_16925/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.ReformerModelWithLMHead.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.ReformerModelWithLMHead.forward.position_ids",description:`<strong>position_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of positions of each input sequence tokens in the position embeddings. Selected in the range <code>[0, config.max_position_embeddings - 1]</code>.</p>
<p><a href="../glossary#position-ids">What are position IDs?</a>`,name:"position_ids"},{anchor:"transformers.ReformerModelWithLMHead.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.ReformerModelWithLMHead.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation. This
is useful if you want more control over how to convert <code>input_ids</code> indices into associated vectors than the
model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.ReformerModelWithLMHead.forward.num_hashes",description:`<strong>num_hashes</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The number of hashing rounds that should be performed during bucketing. Setting this argument overwrites
the default defined in <code>config.num_hashes</code>.</p>
<p>For more information, see <code>num_hashes</code> in <a href="/docs/transformers/pr_16925/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a>.`,name:"num_hashes"},{anchor:"transformers.ReformerModelWithLMHead.forward.past_buckets_states",description:`<strong>past_buckets_states</strong> (<code>List[Tuple(torch.LongTensor, torch.FloatTensor)]</code>, <em>optional</em>) &#x2014;
List of <code>Tuple(torch.LongTensor, torch.FloatTensor</code> of length <code>config.n_layers</code>, with the first element
being the previous <em>buckets</em> of shape <code>(batch_size, num_heads, num_hashes, sequence_length)</code>) and the
second being the previous <em>hidden_states</em> of shape <code>(batch_size, sequence_length, hidden_size)</code>).</p>
<p>Contains precomputed hidden-states and buckets (only relevant for LSH Self-Attention). Can be used to speed
up sequential decoding.`,name:"past_buckets_states"},{anchor:"transformers.ReformerModelWithLMHead.forward.use_cache",description:`<strong>use_cache</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If set to <code>True</code>, <code>past_key_values</code> key value states are returned and can be used to speed up decoding (see
<code>past_key_values</code>).`,name:"use_cache"},{anchor:"transformers.ReformerModelWithLMHead.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.ReformerModelWithLMHead.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.ReformerModelWithLMHead.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_16925/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.ReformerModelWithLMHead.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the sequence classification/regression loss. Indices should be in <code>[-100, 0, ..., config.vocab_size - 1]</code>. All labels set to <code>-100</code> are ignored (masked), the loss is only computed for
labels in <code>[0, ..., config.vocab_size]</code>`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/reformer/modeling_reformer.py#L2196",returnDescription:`
<p>A <a
  href="/docs/transformers/pr_16925/en/main_classes/output#transformers.modeling_outputs.CausalLMOutput"
>transformers.modeling_outputs.CausalLMOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_16925/en/model_doc/reformer#transformers.ReformerConfig"
>ReformerConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Language modeling loss (for next-token prediction).</p>
</li>
<li>
<p><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, config.vocab_size)</code>) \u2014 Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax).</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_16925/en/main_classes/output#transformers.modeling_outputs.CausalLMOutput"
>transformers.modeling_outputs.CausalLMOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),le=new lo({props:{$$slots:{default:[ju]},$$scope:{ctx:T}}}),pe=new ls({props:{anchor:"transformers.ReformerModelWithLMHead.forward.example",$$slots:{default:[Cu]},$$scope:{ctx:T}}}),Ta=new V({}),Ma=new X({props:{name:"class transformers.ReformerForMaskedLM",anchor:"transformers.ReformerForMaskedLM",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.ReformerForMaskedLM.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/reformer/modeling_reformer.py#L2294"}}),Fa=new X({props:{name:"forward",anchor:"transformers.ReformerForMaskedLM.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"position_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"head_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"inputs_embeds",val:": typing.Optional[torch.Tensor] = None"},{name:"num_hashes",val:": typing.Optional[int] = None"},{name:"labels",val:": typing.Optional[torch.Tensor] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.ReformerForMaskedLM.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary. During training the input_ids sequence_length has to be
a multiple of the relevant model&#x2019;s chunk lengths (lsh&#x2019;s, local&#x2019;s or both). During evaluation, the indices
are automatically padded to be a multiple of the chunk length.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_16925/en/model_doc/reformer#transformers.ReformerTokenizer">ReformerTokenizer</a>. See <a href="/docs/transformers/pr_16925/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_16925/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.ReformerForMaskedLM.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.ReformerForMaskedLM.forward.position_ids",description:`<strong>position_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of positions of each input sequence tokens in the position embeddings. Selected in the range <code>[0, config.max_position_embeddings - 1]</code>.</p>
<p><a href="../glossary#position-ids">What are position IDs?</a>`,name:"position_ids"},{anchor:"transformers.ReformerForMaskedLM.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.ReformerForMaskedLM.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation. This
is useful if you want more control over how to convert <code>input_ids</code> indices into associated vectors than the
model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.ReformerForMaskedLM.forward.num_hashes",description:`<strong>num_hashes</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The number of hashing rounds that should be performed during bucketing. Setting this argument overwrites
the default defined in <code>config.num_hashes</code>.</p>
<p>For more information, see <code>num_hashes</code> in <a href="/docs/transformers/pr_16925/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a>.`,name:"num_hashes"},{anchor:"transformers.ReformerForMaskedLM.forward.past_buckets_states",description:`<strong>past_buckets_states</strong> (<code>List[Tuple(torch.LongTensor, torch.FloatTensor)]</code>, <em>optional</em>) &#x2014;
List of <code>Tuple(torch.LongTensor, torch.FloatTensor</code> of length <code>config.n_layers</code>, with the first element
being the previous <em>buckets</em> of shape <code>(batch_size, num_heads, num_hashes, sequence_length)</code>) and the
second being the previous <em>hidden_states</em> of shape <code>(batch_size, sequence_length, hidden_size)</code>).</p>
<p>Contains precomputed hidden-states and buckets (only relevant for LSH Self-Attention). Can be used to speed
up sequential decoding.`,name:"past_buckets_states"},{anchor:"transformers.ReformerForMaskedLM.forward.use_cache",description:`<strong>use_cache</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If set to <code>True</code>, <code>past_key_values</code> key value states are returned and can be used to speed up decoding (see
<code>past_key_values</code>).`,name:"use_cache"},{anchor:"transformers.ReformerForMaskedLM.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.ReformerForMaskedLM.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.ReformerForMaskedLM.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_16925/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.ReformerForMaskedLM.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Labels for computing the masked language modeling loss. Indices should be in <code>[-100, 0, ..., config.vocab_size]</code> (see <code>input_ids</code> docstring) Tokens with indices set to <code>-100</code> are ignored (masked),
the loss is only computed for the tokens with labels`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/reformer/modeling_reformer.py#L2312",returnDescription:`
<p>A <a
  href="/docs/transformers/pr_16925/en/main_classes/output#transformers.modeling_outputs.MaskedLMOutput"
>transformers.modeling_outputs.MaskedLMOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_16925/en/model_doc/reformer#transformers.ReformerConfig"
>ReformerConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Masked language modeling (MLM) loss.</p>
</li>
<li>
<p><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, config.vocab_size)</code>) \u2014 Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax).</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_16925/en/main_classes/output#transformers.modeling_outputs.MaskedLMOutput"
>transformers.modeling_outputs.MaskedLMOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),ce=new lo({props:{$$slots:{default:[Au]},$$scope:{ctx:T}}}),he=new ls({props:{anchor:"transformers.ReformerForMaskedLM.forward.example",$$slots:{default:[Pu]},$$scope:{ctx:T}}}),de=new ls({props:{anchor:"transformers.ReformerForMaskedLM.forward.example-2",$$slots:{default:[Su]},$$scope:{ctx:T}}}),ja=new V({}),Ca=new X({props:{name:"class transformers.ReformerForSequenceClassification",anchor:"transformers.ReformerForSequenceClassification",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.ReformerForSequenceClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/reformer/modeling_reformer.py#L2380"}}),Da=new X({props:{name:"forward",anchor:"transformers.ReformerForSequenceClassification.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"position_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"head_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"inputs_embeds",val:": typing.Optional[torch.Tensor] = None"},{name:"num_hashes",val:": typing.Optional[int] = None"},{name:"labels",val:": typing.Optional[torch.Tensor] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.ReformerForSequenceClassification.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary. During training the input_ids sequence_length has to be
a multiple of the relevant model&#x2019;s chunk lengths (lsh&#x2019;s, local&#x2019;s or both). During evaluation, the indices
are automatically padded to be a multiple of the chunk length.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_16925/en/model_doc/reformer#transformers.ReformerTokenizer">ReformerTokenizer</a>. See <a href="/docs/transformers/pr_16925/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_16925/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.ReformerForSequenceClassification.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.ReformerForSequenceClassification.forward.position_ids",description:`<strong>position_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of positions of each input sequence tokens in the position embeddings. Selected in the range <code>[0, config.max_position_embeddings - 1]</code>.</p>
<p><a href="../glossary#position-ids">What are position IDs?</a>`,name:"position_ids"},{anchor:"transformers.ReformerForSequenceClassification.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.ReformerForSequenceClassification.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation. This
is useful if you want more control over how to convert <code>input_ids</code> indices into associated vectors than the
model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.ReformerForSequenceClassification.forward.num_hashes",description:`<strong>num_hashes</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The number of hashing rounds that should be performed during bucketing. Setting this argument overwrites
the default defined in <code>config.num_hashes</code>.</p>
<p>For more information, see <code>num_hashes</code> in <a href="/docs/transformers/pr_16925/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a>.`,name:"num_hashes"},{anchor:"transformers.ReformerForSequenceClassification.forward.past_buckets_states",description:`<strong>past_buckets_states</strong> (<code>List[Tuple(torch.LongTensor, torch.FloatTensor)]</code>, <em>optional</em>) &#x2014;
List of <code>Tuple(torch.LongTensor, torch.FloatTensor</code> of length <code>config.n_layers</code>, with the first element
being the previous <em>buckets</em> of shape <code>(batch_size, num_heads, num_hashes, sequence_length)</code>) and the
second being the previous <em>hidden_states</em> of shape <code>(batch_size, sequence_length, hidden_size)</code>).</p>
<p>Contains precomputed hidden-states and buckets (only relevant for LSH Self-Attention). Can be used to speed
up sequential decoding.`,name:"past_buckets_states"},{anchor:"transformers.ReformerForSequenceClassification.forward.use_cache",description:`<strong>use_cache</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If set to <code>True</code>, <code>past_key_values</code> key value states are returned and can be used to speed up decoding (see
<code>past_key_values</code>).`,name:"use_cache"},{anchor:"transformers.ReformerForSequenceClassification.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.ReformerForSequenceClassification.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.ReformerForSequenceClassification.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_16925/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.ReformerForSequenceClassification.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the sequence classification/regression loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels == 1</code> a regression loss is computed (Mean-Square loss), If
<code>config.num_labels &gt; 1</code> a classification loss is computed (Cross-Entropy).`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/reformer/modeling_reformer.py#L2394",returnDescription:`
<p>A <a
  href="/docs/transformers/pr_16925/en/main_classes/output#transformers.modeling_outputs.SequenceClassifierOutput"
>transformers.modeling_outputs.SequenceClassifierOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_16925/en/model_doc/reformer#transformers.ReformerConfig"
>ReformerConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</p>
</li>
<li>
<p><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels)</code>) \u2014 Classification (or regression if config.num_labels==1) scores (before SoftMax).</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_16925/en/main_classes/output#transformers.modeling_outputs.SequenceClassifierOutput"
>transformers.modeling_outputs.SequenceClassifierOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),ue=new lo({props:{$$slots:{default:[Ou]},$$scope:{ctx:T}}}),fe=new ls({props:{anchor:"transformers.ReformerForSequenceClassification.forward.example",$$slots:{default:[Nu]},$$scope:{ctx:T}}}),_e=new ls({props:{anchor:"transformers.ReformerForSequenceClassification.forward.example-2",$$slots:{default:[Du]},$$scope:{ctx:T}}}),ve=new ls({props:{anchor:"transformers.ReformerForSequenceClassification.forward.example-3",$$slots:{default:[Hu]},$$scope:{ctx:T}}}),be=new ls({props:{anchor:"transformers.ReformerForSequenceClassification.forward.example-4",$$slots:{default:[Iu]},$$scope:{ctx:T}}}),Ha=new V({}),Ia=new X({props:{name:"class transformers.ReformerForQuestionAnswering",anchor:"transformers.ReformerForQuestionAnswering",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.ReformerForQuestionAnswering.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/reformer/modeling_reformer.py#L2501"}}),Va=new X({props:{name:"forward",anchor:"transformers.ReformerForQuestionAnswering.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"position_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"head_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"inputs_embeds",val:": typing.Optional[torch.Tensor] = None"},{name:"num_hashes",val:": typing.Optional[int] = None"},{name:"start_positions",val:": typing.Optional[torch.Tensor] = None"},{name:"end_positions",val:": typing.Optional[torch.Tensor] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.ReformerForQuestionAnswering.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary. During training the input_ids sequence_length has to be
a multiple of the relevant model&#x2019;s chunk lengths (lsh&#x2019;s, local&#x2019;s or both). During evaluation, the indices
are automatically padded to be a multiple of the chunk length.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_16925/en/model_doc/reformer#transformers.ReformerTokenizer">ReformerTokenizer</a>. See <a href="/docs/transformers/pr_16925/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_16925/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.ReformerForQuestionAnswering.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.ReformerForQuestionAnswering.forward.position_ids",description:`<strong>position_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of positions of each input sequence tokens in the position embeddings. Selected in the range <code>[0, config.max_position_embeddings - 1]</code>.</p>
<p><a href="../glossary#position-ids">What are position IDs?</a>`,name:"position_ids"},{anchor:"transformers.ReformerForQuestionAnswering.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.ReformerForQuestionAnswering.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_ids</code> you can choose to directly pass an embedded representation. This
is useful if you want more control over how to convert <code>input_ids</code> indices into associated vectors than the
model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.ReformerForQuestionAnswering.forward.num_hashes",description:`<strong>num_hashes</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The number of hashing rounds that should be performed during bucketing. Setting this argument overwrites
the default defined in <code>config.num_hashes</code>.</p>
<p>For more information, see <code>num_hashes</code> in <a href="/docs/transformers/pr_16925/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a>.`,name:"num_hashes"},{anchor:"transformers.ReformerForQuestionAnswering.forward.past_buckets_states",description:`<strong>past_buckets_states</strong> (<code>List[Tuple(torch.LongTensor, torch.FloatTensor)]</code>, <em>optional</em>) &#x2014;
List of <code>Tuple(torch.LongTensor, torch.FloatTensor</code> of length <code>config.n_layers</code>, with the first element
being the previous <em>buckets</em> of shape <code>(batch_size, num_heads, num_hashes, sequence_length)</code>) and the
second being the previous <em>hidden_states</em> of shape <code>(batch_size, sequence_length, hidden_size)</code>).</p>
<p>Contains precomputed hidden-states and buckets (only relevant for LSH Self-Attention). Can be used to speed
up sequential decoding.`,name:"past_buckets_states"},{anchor:"transformers.ReformerForQuestionAnswering.forward.use_cache",description:`<strong>use_cache</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
If set to <code>True</code>, <code>past_key_values</code> key value states are returned and can be used to speed up decoding (see
<code>past_key_values</code>).`,name:"use_cache"},{anchor:"transformers.ReformerForQuestionAnswering.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.ReformerForQuestionAnswering.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.ReformerForQuestionAnswering.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_16925/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.ReformerForQuestionAnswering.forward.start_positions",description:`<strong>start_positions</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for position (index) of the start of the labelled span for computing the token classification loss.
Positions are clamped to the length of the sequence (<code>sequence_length</code>). Position outside of the sequence
are not taken into account for computing the loss.`,name:"start_positions"},{anchor:"transformers.ReformerForQuestionAnswering.forward.end_positions",description:`<strong>end_positions</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for position (index) of the end of the labelled span for computing the token classification loss.
Positions are clamped to the length of the sequence (<code>sequence_length</code>). Position outside of the sequence
are not taken into account for computing the loss.`,name:"end_positions"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/reformer/modeling_reformer.py#L2513",returnDescription:`
<p>A <a
  href="/docs/transformers/pr_16925/en/main_classes/output#transformers.modeling_outputs.QuestionAnsweringModelOutput"
>transformers.modeling_outputs.QuestionAnsweringModelOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_16925/en/model_doc/reformer#transformers.ReformerConfig"
>ReformerConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Total span extraction loss is the sum of a Cross-Entropy for the start and end positions.</p>
</li>
<li>
<p><strong>start_logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>) \u2014 Span-start scores (before SoftMax).</p>
</li>
<li>
<p><strong>end_logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>) \u2014 Span-end scores (before SoftMax).</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_16925/en/main_classes/output#transformers.modeling_outputs.QuestionAnsweringModelOutput"
>transformers.modeling_outputs.QuestionAnsweringModelOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),ke=new lo({props:{$$slots:{default:[Wu]},$$scope:{ctx:T}}}),we=new ls({props:{anchor:"transformers.ReformerForQuestionAnswering.forward.example",$$slots:{default:[Qu]},$$scope:{ctx:T}}}),xe=new ls({props:{anchor:"transformers.ReformerForQuestionAnswering.forward.example-2",$$slots:{default:[Ku]},$$scope:{ctx:T}}}),{c(){p=o("meta"),v=h(),g=o("h1"),f=o("a"),b=o("span"),y(l.$$.fragment),_=h(),F=o("span"),ji=t("Reformer"),po=h(),ws=o("p"),At=o("strong"),Ci=t("DISCLAIMER:"),Ai=t(" This model is still a work in progress, if you see something strange, file a "),je=o("a"),Pi=t("Github Issue"),Si=t("."),mo=h(),xs=o("h2"),Xs=o("a"),Pt=o("span"),y(Ce.$$.fragment),Oi=h(),St=o("span"),Ni=t("Overview"),co=h(),Vs=o("p"),Di=t("The Reformer model was proposed in the paper "),Ae=o("a"),Hi=t("Reformer: The Efficient Transformer"),Ii=t(" by Nikita Kitaev, \u0141ukasz Kaiser, Anselm Levskaya."),ho=h(),Za=o("p"),Wi=t("The abstract from the paper is the following:"),go=h(),st=o("p"),Ot=o("em"),Qi=t(`Large Transformer models routinely achieve state-of-the-art results on a number of tasks but training these models can
be prohibitively costly, especially on long sequences. We introduce two techniques to improve the efficiency of
Transformers. For one, we replace dot-product attention by one that uses locality-sensitive hashing, changing its
complexity from O(L^2) to O(Llog(L)), where L is the length of the sequence. Furthermore, we use reversible residual
layers instead of the standard residuals, which allows storing activations only once in the training process instead of
N times, where N is the number of layers. The resulting model, the Reformer, performs on par with Transformer models
while being much more memory-efficient and much faster on long sequences.`),uo=h(),ms=o("p"),Ki=t("This model was contributed by "),Pe=o("a"),Ui=t("patrickvonplaten"),Xi=t(`. The Authors\u2019 code can be
found `),Se=o("a"),Vi=t("here"),Bi=t("."),fo=h(),Oe=o("p"),Nt=o("strong"),Gi=t("Note"),Ji=t(":"),_o=h(),et=o("ul"),cs=o("li"),Yi=t("Reformer does "),Dt=o("strong"),Zi=t("not"),sl=t(" work with "),Ht=o("em"),el=t("torch.nn.DataParallel"),al=t(" due to a bug in PyTorch, see "),Ne=o("a"),tl=t("issue #36035"),vo=h(),zs=o("h2"),Bs=o("a"),It=o("span"),y(De.$$.fragment),nl=h(),Wt=o("span"),ol=t("Axial Positional Encodings"),bo=h(),q=o("p"),rl=t("Axial Positional Encodings were first implemented in Google\u2019s "),He=o("a"),il=t("trax library"),ll=t(`
and developed by the authors of this model\u2019s paper. In models that are treating very long input sequences, the
conventional position id encodings store an embedings vector of size `),yo=new M,ko=t(" being the "),Qt=o("code"),pl=t("config.hidden_size"),ml=t(` for
every position `),wo=new M,xo=t(", with "),zo=new M,$o=t(" being "),Kt=o("code"),cl=t("config.max_embedding_size"),hl=t(`. This means that having
a sequence length of `),To=new M,Mo=t(" and a "),Ut=o("code"),dl=t("config.hidden_size"),gl=t(" of "),Ro=new M,qo=t(`
would result in a position encoding matrix:
`),Eo=new M,Lo=h(),$s=o("p"),ul=t("which alone has over 500M parameters to store. Axial positional encodings factorize "),Fo=new M,jo=t(` into two matrices:
`),Co=new M,Ao=h(),Ie=o("p"),fl=t(`and
`),Po=new M,So=h(),We=o("p"),_l=t(`with:
`),Oo=new M,No=h(),Qe=o("p"),vl=t(`Therefore the following holds:
`),Do=new M,Ho=h(),j=o("p"),bl=t("Intuitively, this means that a position embedding vector "),Io=new M,Wo=t(` is now the composition of two
factorized embedding vectors: `),Qo=new M,Ko=t(", where as the "),Xt=o("code"),yl=t("config.max_embedding_size"),kl=t(` dimension
`),Uo=new M,Xo=t(" is factorized into "),Vo=new M,Bo=t(`. This design ensures that each position embedding vector
`),Go=new M,Jo=t(" is unique."),Yo=h(),hs=o("p"),wl=t("Using the above example again, axial position encoding with "),Zo=new M,sr=t(`
can drastically reduced the number of parameters to `),er=new M,ar=t(" parameters."),tr=h(),E=o("p"),xl=t("In practice, the parameter "),Vt=o("code"),zl=t("config.axial_pos_embds_dim"),$l=t(" is set to a tuple "),nr=new M,or=t(` which sum has to be
equal to `),Bt=o("code"),Tl=t("config.hidden_size"),Ml=t(" and "),Gt=o("code"),Rl=t("config.axial_pos_shape"),ql=t(" is set to a tuple "),rr=new M,ir=t(` which
product has to be equal to `),Jt=o("code"),El=t("config.max_embedding_size"),Ll=t(", which during training has to be equal to the "),Yt=o("em"),Fl=t(`sequence
length`),jl=t(" of the "),Zt=o("code"),Cl=t("input_ids"),Al=t("."),lr=h(),Ts=o("h2"),Gs=o("a"),sn=o("span"),y(Ke.$$.fragment),Pl=h(),en=o("span"),Sl=t("LSH Self Attention"),pr=h(),J=o("p"),Ol=t(`In Locality sensitive hashing (LSH) self attention the key and query projection weights are tied. Therefore, the key
query embedding vectors are also tied. LSH self attention uses the locality sensitive hashing mechanism proposed in
`),Ue=o("a"),Nl=t("Practical and Optimal LSH for Angular Distance"),Dl=t(` to assign each of the tied key
query embedding vectors to one of `),an=o("code"),Hl=t("config.num_buckets"),Il=t(` possible buckets. The premise is that the more \u201Csimilar\u201D
key query embedding vectors (in terms of `),tn=o("em"),Wl=t("cosine similarity"),Ql=t(`) are to each other, the more likely they are assigned to
the same bucket.`),mr=h(),O=o("p"),Kl=t("The accuracy of the LSH mechanism can be improved by increasing "),nn=o("code"),Ul=t("config.num_hashes"),Xl=t(` or directly the argument
`),on=o("code"),Vl=t("num_hashes"),Bl=t(` of the forward function so that the output of the LSH self attention better approximates the output
of the \u201Cnormal\u201D full self attention. The buckets are then sorted and chunked into query key embedding vector chunks
each of length `),rn=o("code"),Gl=t("config.lsh_chunk_length"),Jl=t(`. For each chunk, the query embedding vectors attend to its key vectors
(which are tied to themselves) and to the key embedding vectors of `),ln=o("code"),Yl=t("config.lsh_num_chunks_before"),Zl=t(` previous
neighboring chunks and `),pn=o("code"),sp=t("config.lsh_num_chunks_after"),ep=t(" following neighboring chunks."),cr=h(),ds=o("p"),ap=t("For more information, see the "),Xe=o("a"),tp=t("original Paper"),np=t(" or this great "),Ve=o("a"),op=t("blog post"),rp=t("."),hr=h(),I=o("p"),ip=t("Note that "),mn=o("code"),lp=t("config.num_buckets"),pp=t(" can also be factorized into a list "),dr=new M,gr=t(". This way instead of assigning the query key embedding vectors to one of "),ur=new M,fr=t(" they are assigned to one of "),_r=new M,vr=t(`. This is crucial for very long sequences to
save memory.`),br=h(),gs=o("p"),mp=t("When training a model from scratch, it is recommended to leave "),cn=o("code"),cp=t("config.num_buckets=None"),hp=t(`, so that depending on the
sequence length a good value for `),hn=o("code"),dp=t("num_buckets"),gp=t(` is calculated on the fly. This value will then automatically be
saved in the config and should be reused for inference.`),yr=h(),Y=o("p"),up=t(`Using LSH self attention, the memory and time complexity of the query-key matmul operation can be reduced from
`),kr=new M,wr=t(" to "),xr=new M,zr=t(`, which usually represents the memory
and time bottleneck in a transformer model, with `),$r=new M,Tr=t(" being the sequence length."),Mr=h(),Ms=o("h2"),Js=o("a"),dn=o("span"),y(Be.$$.fragment),fp=h(),gn=o("span"),_p=t("Local Self Attention"),Rr=h(),Z=o("p"),vp=t(`Local self attention is essentially a \u201Cnormal\u201D self attention layer with key, query and value projections, but is
chunked so that in each chunk of length `),un=o("code"),bp=t("config.local_chunk_length"),yp=t(` the query embedding vectors only attends to
the key embedding vectors in its chunk and to the key embedding vectors of `),fn=o("code"),kp=t("config.local_num_chunks_before"),wp=t(`
previous neighboring chunks and `),_n=o("code"),xp=t("config.local_num_chunks_after"),zp=t(" following neighboring chunks."),qr=h(),ss=o("p"),$p=t(`Using Local self attention, the memory and time complexity of the query-key matmul operation can be reduced from
`),Er=new M,Lr=t(" to "),Fr=new M,jr=t(`, which usually represents the memory
and time bottleneck in a transformer model, with `),Cr=new M,Ar=t(" being the sequence length."),Pr=h(),Rs=o("h2"),Ys=o("a"),vn=o("span"),y(Ge.$$.fragment),Tp=h(),bn=o("span"),Mp=t("Training"),Sr=h(),us=o("p"),Rp=t(`During training, we must ensure that the sequence length is set to a value that can be divided by the least common
multiple of `),yn=o("code"),qp=t("config.lsh_chunk_length"),Ep=t(" and "),kn=o("code"),Lp=t("config.local_chunk_length"),Fp=t(` and that the parameters of the Axial
Positional Encodings are correctly set as described above. Reformer is very memory efficient so that the model can
easily be trained on sequences as long as 64000 tokens.`),Or=h(),Zs=o("p"),jp=t("For training, the "),at=o("a"),Cp=t("ReformerModelWithLMHead"),Ap=t(" should be used as follows:"),Nr=h(),y(Je.$$.fragment),Dr=h(),qs=o("h2"),se=o("a"),wn=o("span"),y(Ye.$$.fragment),Pp=h(),xn=o("span"),Sp=t("ReformerConfig"),Hr=h(),B=o("div"),y(Ze.$$.fragment),Op=h(),sa=o("p"),Np=t("This is the configuration class to store the configuration of a "),tt=o("a"),Dp=t("ReformerModel"),Hp=t(`. It is used to instantiate a
Reformer model according to the specified arguments, defining the model architecture.`),Ip=h(),Es=o("p"),Wp=t("Configuration objects inherit from "),nt=o("a"),Qp=t("PretrainedConfig"),Kp=t(` and can be used to control the model outputs. Read the
documentation from `),ot=o("a"),Up=t("PretrainedConfig"),Xp=t(" for more information."),Vp=h(),y(ee.$$.fragment),Ir=h(),Ls=o("h2"),ae=o("a"),zn=o("span"),y(ea.$$.fragment),Bp=h(),$n=o("span"),Gp=t("ReformerTokenizer"),Wr=h(),G=o("div"),y(aa.$$.fragment),Jp=h(),ta=o("p"),Yp=t("Construct a Reformer tokenizer. Based on "),na=o("a"),Zp=t("SentencePiece"),sm=t(" ."),em=h(),oa=o("p"),am=t("This tokenizer inherits from "),rt=o("a"),tm=t("PreTrainedTokenizer"),nm=t(` which contains most of the main methods. Users should refer to
this superclass for more information regarding those methods.`),om=h(),it=o("div"),y(ra.$$.fragment),Qr=h(),Fs=o("h2"),te=o("a"),Tn=o("span"),y(ia.$$.fragment),rm=h(),Mn=o("span"),im=t("ReformerTokenizerFast"),Kr=h(),is=o("div"),y(la.$$.fragment),lm=h(),js=o("p"),pm=t("Construct a \u201Cfast\u201D Reformer tokenizer (backed by HuggingFace\u2019s "),Rn=o("em"),mm=t("tokenizers"),cm=t(` library). Based on
`),pa=o("a"),hm=t("Unigram"),dm=t("."),gm=h(),ma=o("p"),um=t("This tokenizer inherits from "),lt=o("a"),fm=t("PreTrainedTokenizerFast"),_m=t(` which contains most of the main methods. Users should
refer to this superclass for more information regarding those methods.`),Ur=h(),Cs=o("h2"),ne=o("a"),qn=o("span"),y(ca.$$.fragment),vm=h(),En=o("span"),bm=t("ReformerModel"),Xr=h(),N=o("div"),y(ha.$$.fragment),ym=h(),da=o("p"),km=t(`The bare Reformer Model transformer outputting raw hidden-stateswithout any specific head on top.
Reformer was proposed in `),ga=o("a"),wm=t("Reformer: The Efficient Transformer"),xm=t(` by Nikita Kitaev,
\u0141ukasz Kaiser, Anselm Levskaya.`),zm=h(),ua=o("p"),$m=t("This model inherits from "),pt=o("a"),Tm=t("PreTrainedModel"),Mm=t(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Rm=h(),fa=o("p"),qm=t("This model is also a PyTorch "),_a=o("a"),Em=t("torch.nn.Module"),Lm=t(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Fm=h(),es=o("div"),y(va.$$.fragment),jm=h(),As=o("p"),Cm=t("The "),mt=o("a"),Am=t("ReformerModel"),Pm=t(" forward method, overrides the "),Ln=o("code"),Sm=t("__call__"),Om=t(" special method."),Nm=h(),y(oe.$$.fragment),Dm=h(),y(re.$$.fragment),Vr=h(),Ps=o("h2"),ie=o("a"),Fn=o("span"),y(ba.$$.fragment),Hm=h(),jn=o("span"),Im=t("ReformerModelWithLMHead"),Br=h(),D=o("div"),y(ya.$$.fragment),Wm=h(),Ss=o("p"),Qm=t("Reformer Model with a "),Cn=o("code"),Km=t("language modeling"),Um=t(` head on top.
Reformer was proposed in `),ka=o("a"),Xm=t("Reformer: The Efficient Transformer"),Vm=t(` by Nikita Kitaev,
\u0141ukasz Kaiser, Anselm Levskaya.`),Bm=h(),wa=o("p"),Gm=t("This model inherits from "),ct=o("a"),Jm=t("PreTrainedModel"),Ym=t(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Zm=h(),xa=o("p"),sc=t("This model is also a PyTorch "),za=o("a"),ec=t("torch.nn.Module"),ac=t(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),tc=h(),as=o("div"),y($a.$$.fragment),nc=h(),Os=o("p"),oc=t("The "),ht=o("a"),rc=t("ReformerModelWithLMHead"),ic=t(" forward method, overrides the "),An=o("code"),lc=t("__call__"),pc=t(" special method."),mc=h(),y(le.$$.fragment),cc=h(),y(pe.$$.fragment),Gr=h(),Ns=o("h2"),me=o("a"),Pn=o("span"),y(Ta.$$.fragment),hc=h(),Sn=o("span"),dc=t("ReformerForMaskedLM"),Jr=h(),H=o("div"),y(Ma.$$.fragment),gc=h(),Ds=o("p"),uc=t("Reformer Model with a "),On=o("code"),fc=t("language modeling"),_c=t(` head on top.
Reformer was proposed in `),Ra=o("a"),vc=t("Reformer: The Efficient Transformer"),bc=t(` by Nikita Kitaev,
\u0141ukasz Kaiser, Anselm Levskaya.`),yc=h(),qa=o("p"),kc=t("This model inherits from "),dt=o("a"),wc=t("PreTrainedModel"),xc=t(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),zc=h(),Ea=o("p"),$c=t("This model is also a PyTorch "),La=o("a"),Tc=t("torch.nn.Module"),Mc=t(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Rc=h(),W=o("div"),y(Fa.$$.fragment),qc=h(),Hs=o("p"),Ec=t("The "),gt=o("a"),Lc=t("ReformerForMaskedLM"),Fc=t(" forward method, overrides the "),Nn=o("code"),jc=t("__call__"),Cc=t(" special method."),Ac=h(),y(ce.$$.fragment),Pc=h(),y(he.$$.fragment),Sc=h(),y(de.$$.fragment),Yr=h(),Is=o("h2"),ge=o("a"),Dn=o("span"),y(ja.$$.fragment),Oc=h(),Hn=o("span"),Nc=t("ReformerForSequenceClassification"),Zr=h(),P=o("div"),y(Ca.$$.fragment),Dc=h(),In=o("p"),Hc=t(`Reformer Model transformer with a sequence classification/regression head on top (a linear layer on top of the
pooled output) e.g. for GLUE tasks.`),Ic=h(),Aa=o("p"),Wc=t("Reformer was proposed in "),Pa=o("a"),Qc=t("Reformer: The Efficient Transformer"),Kc=t(` by Nikita Kitaev,
\u0141ukasz Kaiser, Anselm Levskaya.`),Uc=h(),Sa=o("p"),Xc=t("This model inherits from "),ut=o("a"),Vc=t("PreTrainedModel"),Bc=t(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Gc=h(),Oa=o("p"),Jc=t("This model is also a PyTorch "),Na=o("a"),Yc=t("torch.nn.Module"),Zc=t(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),sh=h(),C=o("div"),y(Da.$$.fragment),eh=h(),Ws=o("p"),ah=t("The "),ft=o("a"),th=t("ReformerForSequenceClassification"),nh=t(" forward method, overrides the "),Wn=o("code"),oh=t("__call__"),rh=t(" special method."),ih=h(),y(ue.$$.fragment),lh=h(),y(fe.$$.fragment),ph=h(),y(_e.$$.fragment),mh=h(),y(ve.$$.fragment),ch=h(),y(be.$$.fragment),si=h(),Qs=o("h2"),ye=o("a"),Qn=o("span"),y(Ha.$$.fragment),hh=h(),Kn=o("span"),dh=t("ReformerForQuestionAnswering"),ei=h(),S=o("div"),y(Ia.$$.fragment),gh=h(),Ks=o("p"),uh=t(`Reformer Model with a span classification head on top for extractive question-answering tasks like SQuAD / TriviaQA
( a linear layer on top of hidden-states output to compute `),Un=o("code"),fh=t("span start logits"),_h=t(" and "),Xn=o("code"),vh=t("span end logits"),bh=t("."),yh=h(),Wa=o("p"),kh=t("Reformer was proposed in "),Qa=o("a"),wh=t("Reformer: The Efficient Transformer"),xh=t(` by Nikita Kitaev,
\u0141ukasz Kaiser, Anselm Levskaya.`),zh=h(),Ka=o("p"),$h=t("This model inherits from "),_t=o("a"),Th=t("PreTrainedModel"),Mh=t(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Rh=h(),Ua=o("p"),qh=t("This model is also a PyTorch "),Xa=o("a"),Eh=t("torch.nn.Module"),Lh=t(` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Fh=h(),Q=o("div"),y(Va.$$.fragment),jh=h(),Us=o("p"),Ch=t("The "),vt=o("a"),Ah=t("ReformerForQuestionAnswering"),Ph=t(" forward method, overrides the "),Vn=o("code"),Sh=t("__call__"),Oh=t(" special method."),Nh=h(),y(ke.$$.fragment),Dh=h(),y(we.$$.fragment),Hh=h(),y(xe.$$.fragment),this.h()},l(e){const m=Ru('[data-svelte="svelte-1phssyn"]',document.head);p=r(m,"META",{name:!0,content:!0}),m.forEach(a),v=d(e),g=r(e,"H1",{class:!0});var Ba=i(g);f=r(Ba,"A",{id:!0,class:!0,href:!0});var Bn=i(f);b=r(Bn,"SPAN",{});var Gn=i(b);k(l.$$.fragment,Gn),Gn.forEach(a),Bn.forEach(a),_=d(Ba),F=r(Ba,"SPAN",{});var Jn=i(F);ji=n(Jn,"Reformer"),Jn.forEach(a),Ba.forEach(a),po=d(e),ws=r(e,"P",{});var ze=i(ws);At=r(ze,"STRONG",{});var Yn=i(At);Ci=n(Yn,"DISCLAIMER:"),Yn.forEach(a),Ai=n(ze," This model is still a work in progress, if you see something strange, file a "),je=r(ze,"A",{href:!0,rel:!0});var Zn=i(je);Pi=n(Zn,"Github Issue"),Zn.forEach(a),Si=n(ze,"."),ze.forEach(a),mo=d(e),xs=r(e,"H2",{class:!0});var Ga=i(xs);Xs=r(Ga,"A",{id:!0,class:!0,href:!0});var so=i(Xs);Pt=r(so,"SPAN",{});var eo=i(Pt);k(Ce.$$.fragment,eo),eo.forEach(a),so.forEach(a),Oi=d(Ga),St=r(Ga,"SPAN",{});var ao=i(St);Ni=n(ao,"Overview"),ao.forEach(a),Ga.forEach(a),co=d(e),Vs=r(e,"P",{});var Ja=i(Vs);Di=n(Ja,"The Reformer model was proposed in the paper "),Ae=r(Ja,"A",{href:!0,rel:!0});var to=i(Ae);Hi=n(to,"Reformer: The Efficient Transformer"),to.forEach(a),Ii=n(Ja," by Nikita Kitaev, \u0141ukasz Kaiser, Anselm Levskaya."),Ja.forEach(a),ho=d(e),Za=r(e,"P",{});var no=i(Za);Wi=n(no,"The abstract from the paper is the following:"),no.forEach(a),go=d(e),st=r(e,"P",{});var oo=i(st);Ot=r(oo,"EM",{});var ro=i(Ot);Qi=n(ro,`Large Transformer models routinely achieve state-of-the-art results on a number of tasks but training these models can
be prohibitively costly, especially on long sequences. We introduce two techniques to improve the efficiency of
Transformers. For one, we replace dot-product attention by one that uses locality-sensitive hashing, changing its
complexity from O(L^2) to O(Llog(L)), where L is the length of the sequence. Furthermore, we use reversible residual
layers instead of the standard residuals, which allows storing activations only once in the training process instead of
N times, where N is the number of layers. The resulting model, the Reformer, performs on par with Transformer models
while being much more memory-efficient and much faster on long sequences.`),ro.forEach(a),oo.forEach(a),uo=d(e),ms=r(e,"P",{});var bt=i(ms);Ki=n(bt,"This model was contributed by "),Pe=r(bt,"A",{href:!0,rel:!0});var Uh=i(Pe);Ui=n(Uh,"patrickvonplaten"),Uh.forEach(a),Xi=n(bt,`. The Authors\u2019 code can be
found `),Se=r(bt,"A",{href:!0,rel:!0});var Xh=i(Se);Vi=n(Xh,"here"),Xh.forEach(a),Bi=n(bt,"."),bt.forEach(a),fo=d(e),Oe=r(e,"P",{});var Ih=i(Oe);Nt=r(Ih,"STRONG",{});var Vh=i(Nt);Gi=n(Vh,"Note"),Vh.forEach(a),Ji=n(Ih,":"),Ih.forEach(a),_o=d(e),et=r(e,"UL",{});var Bh=i(et);cs=r(Bh,"LI",{});var Ya=i(cs);Yi=n(Ya,"Reformer does "),Dt=r(Ya,"STRONG",{});var Gh=i(Dt);Zi=n(Gh,"not"),Gh.forEach(a),sl=n(Ya," work with "),Ht=r(Ya,"EM",{});var Jh=i(Ht);el=n(Jh,"torch.nn.DataParallel"),Jh.forEach(a),al=n(Ya," due to a bug in PyTorch, see "),Ne=r(Ya,"A",{href:!0,rel:!0});var Yh=i(Ne);tl=n(Yh,"issue #36035"),Yh.forEach(a),Ya.forEach(a),Bh.forEach(a),vo=d(e),zs=r(e,"H2",{class:!0});var ti=i(zs);Bs=r(ti,"A",{id:!0,class:!0,href:!0});var Zh=i(Bs);It=r(Zh,"SPAN",{});var sd=i(It);k(De.$$.fragment,sd),sd.forEach(a),Zh.forEach(a),nl=d(ti),Wt=r(ti,"SPAN",{});var ed=i(Wt);ol=n(ed,"Axial Positional Encodings"),ed.forEach(a),ti.forEach(a),bo=d(e),q=r(e,"P",{});var L=i(q);rl=n(L,"Axial Positional Encodings were first implemented in Google\u2019s "),He=r(L,"A",{href:!0,rel:!0});var ad=i(He);il=n(ad,"trax library"),ad.forEach(a),ll=n(L,`
and developed by the authors of this model\u2019s paper. In models that are treating very long input sequences, the
conventional position id encodings store an embedings vector of size `),yo=R(L),ko=n(L," being the "),Qt=r(L,"CODE",{});var td=i(Qt);pl=n(td,"config.hidden_size"),td.forEach(a),ml=n(L,` for
every position `),wo=R(L),xo=n(L,", with "),zo=R(L),$o=n(L," being "),Kt=r(L,"CODE",{});var nd=i(Kt);cl=n(nd,"config.max_embedding_size"),nd.forEach(a),hl=n(L,`. This means that having
a sequence length of `),To=R(L),Mo=n(L," and a "),Ut=r(L,"CODE",{});var od=i(Ut);dl=n(od,"config.hidden_size"),od.forEach(a),gl=n(L," of "),Ro=R(L),qo=n(L,`
would result in a position encoding matrix:
`),Eo=R(L),L.forEach(a),Lo=d(e),$s=r(e,"P",{});var io=i($s);ul=n(io,"which alone has over 500M parameters to store. Axial positional encodings factorize "),Fo=R(io),jo=n(io,` into two matrices:
`),Co=R(io),io.forEach(a),Ao=d(e),Ie=r(e,"P",{});var Wh=i(Ie);fl=n(Wh,`and
`),Po=R(Wh),Wh.forEach(a),So=d(e),We=r(e,"P",{});var Qh=i(We);_l=n(Qh,`with:
`),Oo=R(Qh),Qh.forEach(a),No=d(e),Qe=r(e,"P",{});var Kh=i(Qe);vl=n(Kh,`Therefore the following holds:
`),Do=R(Kh),Kh.forEach(a),Ho=d(e),j=r(e,"P",{});var K=i(j);bl=n(K,"Intuitively, this means that a position embedding vector "),Io=R(K),Wo=n(K,` is now the composition of two
factorized embedding vectors: `),Qo=R(K),Ko=n(K,", where as the "),Xt=r(K,"CODE",{});var rd=i(Xt);yl=n(rd,"config.max_embedding_size"),rd.forEach(a),kl=n(K,` dimension
`),Uo=R(K),Xo=n(K," is factorized into "),Vo=R(K),Bo=n(K,`. This design ensures that each position embedding vector
`),Go=R(K),Jo=n(K," is unique."),K.forEach(a),Yo=d(e),hs=r(e,"P",{});var yt=i(hs);wl=n(yt,"Using the above example again, axial position encoding with "),Zo=R(yt),sr=n(yt,`
can drastically reduced the number of parameters to `),er=R(yt),ar=n(yt," parameters."),yt.forEach(a),tr=d(e),E=r(e,"P",{});var A=i(E);xl=n(A,"In practice, the parameter "),Vt=r(A,"CODE",{});var id=i(Vt);zl=n(id,"config.axial_pos_embds_dim"),id.forEach(a),$l=n(A," is set to a tuple "),nr=R(A),or=n(A,` which sum has to be
equal to `),Bt=r(A,"CODE",{});var ld=i(Bt);Tl=n(ld,"config.hidden_size"),ld.forEach(a),Ml=n(A," and "),Gt=r(A,"CODE",{});var pd=i(Gt);Rl=n(pd,"config.axial_pos_shape"),pd.forEach(a),ql=n(A," is set to a tuple "),rr=R(A),ir=n(A,` which
product has to be equal to `),Jt=r(A,"CODE",{});var md=i(Jt);El=n(md,"config.max_embedding_size"),md.forEach(a),Ll=n(A,", which during training has to be equal to the "),Yt=r(A,"EM",{});var cd=i(Yt);Fl=n(cd,`sequence
length`),cd.forEach(a),jl=n(A," of the "),Zt=r(A,"CODE",{});var hd=i(Zt);Cl=n(hd,"input_ids"),hd.forEach(a),Al=n(A,"."),A.forEach(a),lr=d(e),Ts=r(e,"H2",{class:!0});var ni=i(Ts);Gs=r(ni,"A",{id:!0,class:!0,href:!0});var dd=i(Gs);sn=r(dd,"SPAN",{});var gd=i(sn);k(Ke.$$.fragment,gd),gd.forEach(a),dd.forEach(a),Pl=d(ni),en=r(ni,"SPAN",{});var ud=i(en);Sl=n(ud,"LSH Self Attention"),ud.forEach(a),ni.forEach(a),pr=d(e),J=r(e,"P",{});var $e=i(J);Ol=n($e,`In Locality sensitive hashing (LSH) self attention the key and query projection weights are tied. Therefore, the key
query embedding vectors are also tied. LSH self attention uses the locality sensitive hashing mechanism proposed in
`),Ue=r($e,"A",{href:!0,rel:!0});var fd=i(Ue);Nl=n(fd,"Practical and Optimal LSH for Angular Distance"),fd.forEach(a),Dl=n($e,` to assign each of the tied key
query embedding vectors to one of `),an=r($e,"CODE",{});var _d=i(an);Hl=n(_d,"config.num_buckets"),_d.forEach(a),Il=n($e,` possible buckets. The premise is that the more \u201Csimilar\u201D
key query embedding vectors (in terms of `),tn=r($e,"EM",{});var vd=i(tn);Wl=n(vd,"cosine similarity"),vd.forEach(a),Ql=n($e,`) are to each other, the more likely they are assigned to
the same bucket.`),$e.forEach(a),mr=d(e),O=r(e,"P",{});var ts=i(O);Kl=n(ts,"The accuracy of the LSH mechanism can be improved by increasing "),nn=r(ts,"CODE",{});var bd=i(nn);Ul=n(bd,"config.num_hashes"),bd.forEach(a),Xl=n(ts,` or directly the argument
`),on=r(ts,"CODE",{});var yd=i(on);Vl=n(yd,"num_hashes"),yd.forEach(a),Bl=n(ts,` of the forward function so that the output of the LSH self attention better approximates the output
of the \u201Cnormal\u201D full self attention. The buckets are then sorted and chunked into query key embedding vector chunks
each of length `),rn=r(ts,"CODE",{});var kd=i(rn);Gl=n(kd,"config.lsh_chunk_length"),kd.forEach(a),Jl=n(ts,`. For each chunk, the query embedding vectors attend to its key vectors
(which are tied to themselves) and to the key embedding vectors of `),ln=r(ts,"CODE",{});var wd=i(ln);Yl=n(wd,"config.lsh_num_chunks_before"),wd.forEach(a),Zl=n(ts,` previous
neighboring chunks and `),pn=r(ts,"CODE",{});var xd=i(pn);sp=n(xd,"config.lsh_num_chunks_after"),xd.forEach(a),ep=n(ts," following neighboring chunks."),ts.forEach(a),cr=d(e),ds=r(e,"P",{});var kt=i(ds);ap=n(kt,"For more information, see the "),Xe=r(kt,"A",{href:!0,rel:!0});var zd=i(Xe);tp=n(zd,"original Paper"),zd.forEach(a),np=n(kt," or this great "),Ve=r(kt,"A",{href:!0,rel:!0});var $d=i(Ve);op=n($d,"blog post"),$d.forEach(a),rp=n(kt,"."),kt.forEach(a),hr=d(e),I=r(e,"P",{});var fs=i(I);ip=n(fs,"Note that "),mn=r(fs,"CODE",{});var Td=i(mn);lp=n(Td,"config.num_buckets"),Td.forEach(a),pp=n(fs," can also be factorized into a list "),dr=R(fs),gr=n(fs,". This way instead of assigning the query key embedding vectors to one of "),ur=R(fs),fr=n(fs," they are assigned to one of "),_r=R(fs),vr=n(fs,`. This is crucial for very long sequences to
save memory.`),fs.forEach(a),br=d(e),gs=r(e,"P",{});var wt=i(gs);mp=n(wt,"When training a model from scratch, it is recommended to leave "),cn=r(wt,"CODE",{});var Md=i(cn);cp=n(Md,"config.num_buckets=None"),Md.forEach(a),hp=n(wt,`, so that depending on the
sequence length a good value for `),hn=r(wt,"CODE",{});var Rd=i(hn);dp=n(Rd,"num_buckets"),Rd.forEach(a),gp=n(wt,` is calculated on the fly. This value will then automatically be
saved in the config and should be reused for inference.`),wt.forEach(a),yr=d(e),Y=r(e,"P",{});var Te=i(Y);up=n(Te,`Using LSH self attention, the memory and time complexity of the query-key matmul operation can be reduced from
`),kr=R(Te),wr=n(Te," to "),xr=R(Te),zr=n(Te,`, which usually represents the memory
and time bottleneck in a transformer model, with `),$r=R(Te),Tr=n(Te," being the sequence length."),Te.forEach(a),Mr=d(e),Ms=r(e,"H2",{class:!0});var oi=i(Ms);Js=r(oi,"A",{id:!0,class:!0,href:!0});var qd=i(Js);dn=r(qd,"SPAN",{});var Ed=i(dn);k(Be.$$.fragment,Ed),Ed.forEach(a),qd.forEach(a),fp=d(oi),gn=r(oi,"SPAN",{});var Ld=i(gn);_p=n(Ld,"Local Self Attention"),Ld.forEach(a),oi.forEach(a),Rr=d(e),Z=r(e,"P",{});var Me=i(Z);vp=n(Me,`Local self attention is essentially a \u201Cnormal\u201D self attention layer with key, query and value projections, but is
chunked so that in each chunk of length `),un=r(Me,"CODE",{});var Fd=i(un);bp=n(Fd,"config.local_chunk_length"),Fd.forEach(a),yp=n(Me,` the query embedding vectors only attends to
the key embedding vectors in its chunk and to the key embedding vectors of `),fn=r(Me,"CODE",{});var jd=i(fn);kp=n(jd,"config.local_num_chunks_before"),jd.forEach(a),wp=n(Me,`
previous neighboring chunks and `),_n=r(Me,"CODE",{});var Cd=i(_n);xp=n(Cd,"config.local_num_chunks_after"),Cd.forEach(a),zp=n(Me," following neighboring chunks."),Me.forEach(a),qr=d(e),ss=r(e,"P",{});var Re=i(ss);$p=n(Re,`Using Local self attention, the memory and time complexity of the query-key matmul operation can be reduced from
`),Er=R(Re),Lr=n(Re," to "),Fr=R(Re),jr=n(Re,`, which usually represents the memory
and time bottleneck in a transformer model, with `),Cr=R(Re),Ar=n(Re," being the sequence length."),Re.forEach(a),Pr=d(e),Rs=r(e,"H2",{class:!0});var ri=i(Rs);Ys=r(ri,"A",{id:!0,class:!0,href:!0});var Ad=i(Ys);vn=r(Ad,"SPAN",{});var Pd=i(vn);k(Ge.$$.fragment,Pd),Pd.forEach(a),Ad.forEach(a),Tp=d(ri),bn=r(ri,"SPAN",{});var Sd=i(bn);Mp=n(Sd,"Training"),Sd.forEach(a),ri.forEach(a),Sr=d(e),us=r(e,"P",{});var xt=i(us);Rp=n(xt,`During training, we must ensure that the sequence length is set to a value that can be divided by the least common
multiple of `),yn=r(xt,"CODE",{});var Od=i(yn);qp=n(Od,"config.lsh_chunk_length"),Od.forEach(a),Ep=n(xt," and "),kn=r(xt,"CODE",{});var Nd=i(kn);Lp=n(Nd,"config.local_chunk_length"),Nd.forEach(a),Fp=n(xt,` and that the parameters of the Axial
Positional Encodings are correctly set as described above. Reformer is very memory efficient so that the model can
easily be trained on sequences as long as 64000 tokens.`),xt.forEach(a),Or=d(e),Zs=r(e,"P",{});var ii=i(Zs);jp=n(ii,"For training, the "),at=r(ii,"A",{href:!0});var Dd=i(at);Cp=n(Dd,"ReformerModelWithLMHead"),Dd.forEach(a),Ap=n(ii," should be used as follows:"),ii.forEach(a),Nr=d(e),k(Je.$$.fragment,e),Dr=d(e),qs=r(e,"H2",{class:!0});var li=i(qs);se=r(li,"A",{id:!0,class:!0,href:!0});var Hd=i(se);wn=r(Hd,"SPAN",{});var Id=i(wn);k(Ye.$$.fragment,Id),Id.forEach(a),Hd.forEach(a),Pp=d(li),xn=r(li,"SPAN",{});var Wd=i(xn);Sp=n(Wd,"ReformerConfig"),Wd.forEach(a),li.forEach(a),Hr=d(e),B=r(e,"DIV",{class:!0});var qe=i(B);k(Ze.$$.fragment,qe),Op=d(qe),sa=r(qe,"P",{});var pi=i(sa);Np=n(pi,"This is the configuration class to store the configuration of a "),tt=r(pi,"A",{href:!0});var Qd=i(tt);Dp=n(Qd,"ReformerModel"),Qd.forEach(a),Hp=n(pi,`. It is used to instantiate a
Reformer model according to the specified arguments, defining the model architecture.`),pi.forEach(a),Ip=d(qe),Es=r(qe,"P",{});var zt=i(Es);Wp=n(zt,"Configuration objects inherit from "),nt=r(zt,"A",{href:!0});var Kd=i(nt);Qp=n(Kd,"PretrainedConfig"),Kd.forEach(a),Kp=n(zt,` and can be used to control the model outputs. Read the
documentation from `),ot=r(zt,"A",{href:!0});var Ud=i(ot);Up=n(Ud,"PretrainedConfig"),Ud.forEach(a),Xp=n(zt," for more information."),zt.forEach(a),Vp=d(qe),k(ee.$$.fragment,qe),qe.forEach(a),Ir=d(e),Ls=r(e,"H2",{class:!0});var mi=i(Ls);ae=r(mi,"A",{id:!0,class:!0,href:!0});var Xd=i(ae);zn=r(Xd,"SPAN",{});var Vd=i(zn);k(ea.$$.fragment,Vd),Vd.forEach(a),Xd.forEach(a),Bp=d(mi),$n=r(mi,"SPAN",{});var Bd=i($n);Gp=n(Bd,"ReformerTokenizer"),Bd.forEach(a),mi.forEach(a),Wr=d(e),G=r(e,"DIV",{class:!0});var Ee=i(G);k(aa.$$.fragment,Ee),Jp=d(Ee),ta=r(Ee,"P",{});var ci=i(ta);Yp=n(ci,"Construct a Reformer tokenizer. Based on "),na=r(ci,"A",{href:!0,rel:!0});var Gd=i(na);Zp=n(Gd,"SentencePiece"),Gd.forEach(a),sm=n(ci," ."),ci.forEach(a),em=d(Ee),oa=r(Ee,"P",{});var hi=i(oa);am=n(hi,"This tokenizer inherits from "),rt=r(hi,"A",{href:!0});var Jd=i(rt);tm=n(Jd,"PreTrainedTokenizer"),Jd.forEach(a),nm=n(hi,` which contains most of the main methods. Users should refer to
this superclass for more information regarding those methods.`),hi.forEach(a),om=d(Ee),it=r(Ee,"DIV",{class:!0});var Yd=i(it);k(ra.$$.fragment,Yd),Yd.forEach(a),Ee.forEach(a),Qr=d(e),Fs=r(e,"H2",{class:!0});var di=i(Fs);te=r(di,"A",{id:!0,class:!0,href:!0});var Zd=i(te);Tn=r(Zd,"SPAN",{});var sg=i(Tn);k(ia.$$.fragment,sg),sg.forEach(a),Zd.forEach(a),rm=d(di),Mn=r(di,"SPAN",{});var eg=i(Mn);im=n(eg,"ReformerTokenizerFast"),eg.forEach(a),di.forEach(a),Kr=d(e),is=r(e,"DIV",{class:!0});var $t=i(is);k(la.$$.fragment,$t),lm=d($t),js=r($t,"P",{});var Tt=i(js);pm=n(Tt,"Construct a \u201Cfast\u201D Reformer tokenizer (backed by HuggingFace\u2019s "),Rn=r(Tt,"EM",{});var ag=i(Rn);mm=n(ag,"tokenizers"),ag.forEach(a),cm=n(Tt,` library). Based on
`),pa=r(Tt,"A",{href:!0,rel:!0});var tg=i(pa);hm=n(tg,"Unigram"),tg.forEach(a),dm=n(Tt,"."),Tt.forEach(a),gm=d($t),ma=r($t,"P",{});var gi=i(ma);um=n(gi,"This tokenizer inherits from "),lt=r(gi,"A",{href:!0});var ng=i(lt);fm=n(ng,"PreTrainedTokenizerFast"),ng.forEach(a),_m=n(gi,` which contains most of the main methods. Users should
refer to this superclass for more information regarding those methods.`),gi.forEach(a),$t.forEach(a),Ur=d(e),Cs=r(e,"H2",{class:!0});var ui=i(Cs);ne=r(ui,"A",{id:!0,class:!0,href:!0});var og=i(ne);qn=r(og,"SPAN",{});var rg=i(qn);k(ca.$$.fragment,rg),rg.forEach(a),og.forEach(a),vm=d(ui),En=r(ui,"SPAN",{});var ig=i(En);bm=n(ig,"ReformerModel"),ig.forEach(a),ui.forEach(a),Xr=d(e),N=r(e,"DIV",{class:!0});var _s=i(N);k(ha.$$.fragment,_s),ym=d(_s),da=r(_s,"P",{});var fi=i(da);km=n(fi,`The bare Reformer Model transformer outputting raw hidden-stateswithout any specific head on top.
Reformer was proposed in `),ga=r(fi,"A",{href:!0,rel:!0});var lg=i(ga);wm=n(lg,"Reformer: The Efficient Transformer"),lg.forEach(a),xm=n(fi,` by Nikita Kitaev,
\u0141ukasz Kaiser, Anselm Levskaya.`),fi.forEach(a),zm=d(_s),ua=r(_s,"P",{});var _i=i(ua);$m=n(_i,"This model inherits from "),pt=r(_i,"A",{href:!0});var pg=i(pt);Tm=n(pg,"PreTrainedModel"),pg.forEach(a),Mm=n(_i,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),_i.forEach(a),Rm=d(_s),fa=r(_s,"P",{});var vi=i(fa);qm=n(vi,"This model is also a PyTorch "),_a=r(vi,"A",{href:!0,rel:!0});var mg=i(_a);Em=n(mg,"torch.nn.Module"),mg.forEach(a),Lm=n(vi,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),vi.forEach(a),Fm=d(_s),es=r(_s,"DIV",{class:!0});var Le=i(es);k(va.$$.fragment,Le),jm=d(Le),As=r(Le,"P",{});var Mt=i(As);Cm=n(Mt,"The "),mt=r(Mt,"A",{href:!0});var cg=i(mt);Am=n(cg,"ReformerModel"),cg.forEach(a),Pm=n(Mt," forward method, overrides the "),Ln=r(Mt,"CODE",{});var hg=i(Ln);Sm=n(hg,"__call__"),hg.forEach(a),Om=n(Mt," special method."),Mt.forEach(a),Nm=d(Le),k(oe.$$.fragment,Le),Dm=d(Le),k(re.$$.fragment,Le),Le.forEach(a),_s.forEach(a),Vr=d(e),Ps=r(e,"H2",{class:!0});var bi=i(Ps);ie=r(bi,"A",{id:!0,class:!0,href:!0});var dg=i(ie);Fn=r(dg,"SPAN",{});var gg=i(Fn);k(ba.$$.fragment,gg),gg.forEach(a),dg.forEach(a),Hm=d(bi),jn=r(bi,"SPAN",{});var ug=i(jn);Im=n(ug,"ReformerModelWithLMHead"),ug.forEach(a),bi.forEach(a),Br=d(e),D=r(e,"DIV",{class:!0});var vs=i(D);k(ya.$$.fragment,vs),Wm=d(vs),Ss=r(vs,"P",{});var Rt=i(Ss);Qm=n(Rt,"Reformer Model with a "),Cn=r(Rt,"CODE",{});var fg=i(Cn);Km=n(fg,"language modeling"),fg.forEach(a),Um=n(Rt,` head on top.
Reformer was proposed in `),ka=r(Rt,"A",{href:!0,rel:!0});var _g=i(ka);Xm=n(_g,"Reformer: The Efficient Transformer"),_g.forEach(a),Vm=n(Rt,` by Nikita Kitaev,
\u0141ukasz Kaiser, Anselm Levskaya.`),Rt.forEach(a),Bm=d(vs),wa=r(vs,"P",{});var yi=i(wa);Gm=n(yi,"This model inherits from "),ct=r(yi,"A",{href:!0});var vg=i(ct);Jm=n(vg,"PreTrainedModel"),vg.forEach(a),Ym=n(yi,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),yi.forEach(a),Zm=d(vs),xa=r(vs,"P",{});var ki=i(xa);sc=n(ki,"This model is also a PyTorch "),za=r(ki,"A",{href:!0,rel:!0});var bg=i(za);ec=n(bg,"torch.nn.Module"),bg.forEach(a),ac=n(ki,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),ki.forEach(a),tc=d(vs),as=r(vs,"DIV",{class:!0});var Fe=i(as);k($a.$$.fragment,Fe),nc=d(Fe),Os=r(Fe,"P",{});var qt=i(Os);oc=n(qt,"The "),ht=r(qt,"A",{href:!0});var yg=i(ht);rc=n(yg,"ReformerModelWithLMHead"),yg.forEach(a),ic=n(qt," forward method, overrides the "),An=r(qt,"CODE",{});var kg=i(An);lc=n(kg,"__call__"),kg.forEach(a),pc=n(qt," special method."),qt.forEach(a),mc=d(Fe),k(le.$$.fragment,Fe),cc=d(Fe),k(pe.$$.fragment,Fe),Fe.forEach(a),vs.forEach(a),Gr=d(e),Ns=r(e,"H2",{class:!0});var wi=i(Ns);me=r(wi,"A",{id:!0,class:!0,href:!0});var wg=i(me);Pn=r(wg,"SPAN",{});var xg=i(Pn);k(Ta.$$.fragment,xg),xg.forEach(a),wg.forEach(a),hc=d(wi),Sn=r(wi,"SPAN",{});var zg=i(Sn);dc=n(zg,"ReformerForMaskedLM"),zg.forEach(a),wi.forEach(a),Jr=d(e),H=r(e,"DIV",{class:!0});var bs=i(H);k(Ma.$$.fragment,bs),gc=d(bs),Ds=r(bs,"P",{});var Et=i(Ds);uc=n(Et,"Reformer Model with a "),On=r(Et,"CODE",{});var $g=i(On);fc=n($g,"language modeling"),$g.forEach(a),_c=n(Et,` head on top.
Reformer was proposed in `),Ra=r(Et,"A",{href:!0,rel:!0});var Tg=i(Ra);vc=n(Tg,"Reformer: The Efficient Transformer"),Tg.forEach(a),bc=n(Et,` by Nikita Kitaev,
\u0141ukasz Kaiser, Anselm Levskaya.`),Et.forEach(a),yc=d(bs),qa=r(bs,"P",{});var xi=i(qa);kc=n(xi,"This model inherits from "),dt=r(xi,"A",{href:!0});var Mg=i(dt);wc=n(Mg,"PreTrainedModel"),Mg.forEach(a),xc=n(xi,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),xi.forEach(a),zc=d(bs),Ea=r(bs,"P",{});var zi=i(Ea);$c=n(zi,"This model is also a PyTorch "),La=r(zi,"A",{href:!0,rel:!0});var Rg=i(La);Tc=n(Rg,"torch.nn.Module"),Rg.forEach(a),Mc=n(zi,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),zi.forEach(a),Rc=d(bs),W=r(bs,"DIV",{class:!0});var ys=i(W);k(Fa.$$.fragment,ys),qc=d(ys),Hs=r(ys,"P",{});var Lt=i(Hs);Ec=n(Lt,"The "),gt=r(Lt,"A",{href:!0});var qg=i(gt);Lc=n(qg,"ReformerForMaskedLM"),qg.forEach(a),Fc=n(Lt," forward method, overrides the "),Nn=r(Lt,"CODE",{});var Eg=i(Nn);jc=n(Eg,"__call__"),Eg.forEach(a),Cc=n(Lt," special method."),Lt.forEach(a),Ac=d(ys),k(ce.$$.fragment,ys),Pc=d(ys),k(he.$$.fragment,ys),Sc=d(ys),k(de.$$.fragment,ys),ys.forEach(a),bs.forEach(a),Yr=d(e),Is=r(e,"H2",{class:!0});var $i=i(Is);ge=r($i,"A",{id:!0,class:!0,href:!0});var Lg=i(ge);Dn=r(Lg,"SPAN",{});var Fg=i(Dn);k(ja.$$.fragment,Fg),Fg.forEach(a),Lg.forEach(a),Oc=d($i),Hn=r($i,"SPAN",{});var jg=i(Hn);Nc=n(jg,"ReformerForSequenceClassification"),jg.forEach(a),$i.forEach(a),Zr=d(e),P=r(e,"DIV",{class:!0});var ns=i(P);k(Ca.$$.fragment,ns),Dc=d(ns),In=r(ns,"P",{});var Cg=i(In);Hc=n(Cg,`Reformer Model transformer with a sequence classification/regression head on top (a linear layer on top of the
pooled output) e.g. for GLUE tasks.`),Cg.forEach(a),Ic=d(ns),Aa=r(ns,"P",{});var Ti=i(Aa);Wc=n(Ti,"Reformer was proposed in "),Pa=r(Ti,"A",{href:!0,rel:!0});var Ag=i(Pa);Qc=n(Ag,"Reformer: The Efficient Transformer"),Ag.forEach(a),Kc=n(Ti,` by Nikita Kitaev,
\u0141ukasz Kaiser, Anselm Levskaya.`),Ti.forEach(a),Uc=d(ns),Sa=r(ns,"P",{});var Mi=i(Sa);Xc=n(Mi,"This model inherits from "),ut=r(Mi,"A",{href:!0});var Pg=i(ut);Vc=n(Pg,"PreTrainedModel"),Pg.forEach(a),Bc=n(Mi,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Mi.forEach(a),Gc=d(ns),Oa=r(ns,"P",{});var Ri=i(Oa);Jc=n(Ri,"This model is also a PyTorch "),Na=r(Ri,"A",{href:!0,rel:!0});var Sg=i(Na);Yc=n(Sg,"torch.nn.Module"),Sg.forEach(a),Zc=n(Ri,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Ri.forEach(a),sh=d(ns),C=r(ns,"DIV",{class:!0});var U=i(C);k(Da.$$.fragment,U),eh=d(U),Ws=r(U,"P",{});var Ft=i(Ws);ah=n(Ft,"The "),ft=r(Ft,"A",{href:!0});var Og=i(ft);th=n(Og,"ReformerForSequenceClassification"),Og.forEach(a),nh=n(Ft," forward method, overrides the "),Wn=r(Ft,"CODE",{});var Ng=i(Wn);oh=n(Ng,"__call__"),Ng.forEach(a),rh=n(Ft," special method."),Ft.forEach(a),ih=d(U),k(ue.$$.fragment,U),lh=d(U),k(fe.$$.fragment,U),ph=d(U),k(_e.$$.fragment,U),mh=d(U),k(ve.$$.fragment,U),ch=d(U),k(be.$$.fragment,U),U.forEach(a),ns.forEach(a),si=d(e),Qs=r(e,"H2",{class:!0});var qi=i(Qs);ye=r(qi,"A",{id:!0,class:!0,href:!0});var Dg=i(ye);Qn=r(Dg,"SPAN",{});var Hg=i(Qn);k(Ha.$$.fragment,Hg),Hg.forEach(a),Dg.forEach(a),hh=d(qi),Kn=r(qi,"SPAN",{});var Ig=i(Kn);dh=n(Ig,"ReformerForQuestionAnswering"),Ig.forEach(a),qi.forEach(a),ei=d(e),S=r(e,"DIV",{class:!0});var os=i(S);k(Ia.$$.fragment,os),gh=d(os),Ks=r(os,"P",{});var jt=i(Ks);uh=n(jt,`Reformer Model with a span classification head on top for extractive question-answering tasks like SQuAD / TriviaQA
( a linear layer on top of hidden-states output to compute `),Un=r(jt,"CODE",{});var Wg=i(Un);fh=n(Wg,"span start logits"),Wg.forEach(a),_h=n(jt," and "),Xn=r(jt,"CODE",{});var Qg=i(Xn);vh=n(Qg,"span end logits"),Qg.forEach(a),bh=n(jt,"."),jt.forEach(a),yh=d(os),Wa=r(os,"P",{});var Ei=i(Wa);kh=n(Ei,"Reformer was proposed in "),Qa=r(Ei,"A",{href:!0,rel:!0});var Kg=i(Qa);wh=n(Kg,"Reformer: The Efficient Transformer"),Kg.forEach(a),xh=n(Ei,` by Nikita Kitaev,
\u0141ukasz Kaiser, Anselm Levskaya.`),Ei.forEach(a),zh=d(os),Ka=r(os,"P",{});var Li=i(Ka);$h=n(Li,"This model inherits from "),_t=r(Li,"A",{href:!0});var Ug=i(_t);Th=n(Ug,"PreTrainedModel"),Ug.forEach(a),Mh=n(Li,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Li.forEach(a),Rh=d(os),Ua=r(os,"P",{});var Fi=i(Ua);qh=n(Fi,"This model is also a PyTorch "),Xa=r(Fi,"A",{href:!0,rel:!0});var Xg=i(Xa);Eh=n(Xg,"torch.nn.Module"),Xg.forEach(a),Lh=n(Fi,` subclass.
Use it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage
and behavior.`),Fi.forEach(a),Fh=d(os),Q=r(os,"DIV",{class:!0});var ks=i(Q);k(Va.$$.fragment,ks),jh=d(ks),Us=r(ks,"P",{});var Ct=i(Us);Ch=n(Ct,"The "),vt=r(Ct,"A",{href:!0});var Vg=i(vt);Ah=n(Vg,"ReformerForQuestionAnswering"),Vg.forEach(a),Ph=n(Ct," forward method, overrides the "),Vn=r(Ct,"CODE",{});var Bg=i(Vn);Sh=n(Bg,"__call__"),Bg.forEach(a),Oh=n(Ct," special method."),Ct.forEach(a),Nh=d(ks),k(ke.$$.fragment,ks),Dh=d(ks),k(we.$$.fragment,ks),Hh=d(ks),k(xe.$$.fragment,ks),ks.forEach(a),os.forEach(a),this.h()},h(){c(p,"name","hf:doc:metadata"),c(p,"content",JSON.stringify(Xu)),c(f,"id","reformer"),c(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f,"href","#reformer"),c(g,"class","relative group"),c(je,"href","https://github.com/huggingface/transformers/issues/new?assignees=&labels=&template=bug-report.md&title"),c(je,"rel","nofollow"),c(Xs,"id","overview"),c(Xs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xs,"href","#overview"),c(xs,"class","relative group"),c(Ae,"href","https://arxiv.org/abs/2001.04451.pdf"),c(Ae,"rel","nofollow"),c(Pe,"href","https://huggingface.co/patrickvonplaten"),c(Pe,"rel","nofollow"),c(Se,"href","https://github.com/google/trax/tree/master/trax/models/reformer"),c(Se,"rel","nofollow"),c(Ne,"href","https://github.com/pytorch/pytorch/issues/36035"),c(Ne,"rel","nofollow"),c(Bs,"id","axial-positional-encodings"),c(Bs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bs,"href","#axial-positional-encodings"),c(zs,"class","relative group"),c(He,"href","https://github.com/google/trax/blob/4d99ad4965bab1deba227539758d59f0df0fef48/trax/layers/research/position_encodings.py#L29"),c(He,"rel","nofollow"),yo.a=ko,wo.a=xo,zo.a=$o,To.a=Mo,Ro.a=qo,Eo.a=null,Fo.a=jo,Co.a=null,Po.a=null,Oo.a=null,Do.a=null,Io.a=Wo,Qo.a=Ko,Uo.a=Xo,Vo.a=Bo,Go.a=Jo,Zo.a=sr,er.a=ar,nr.a=or,rr.a=ir,c(Gs,"id","lsh-self-attention"),c(Gs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gs,"href","#lsh-self-attention"),c(Ts,"class","relative group"),c(Ue,"href","https://arxiv.org/abs/1509.02897"),c(Ue,"rel","nofollow"),c(Xe,"href","https://arxiv.org/abs/2001.04451"),c(Xe,"rel","nofollow"),c(Ve,"href","https://www.pragmatic.ml/reformer-deep-dive/"),c(Ve,"rel","nofollow"),dr.a=gr,ur.a=fr,_r.a=vr,kr.a=wr,xr.a=zr,$r.a=Tr,c(Js,"id","local-self-attention"),c(Js,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Js,"href","#local-self-attention"),c(Ms,"class","relative group"),Er.a=Lr,Fr.a=jr,Cr.a=Ar,c(Ys,"id","training"),c(Ys,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ys,"href","#training"),c(Rs,"class","relative group"),c(at,"href","/docs/transformers/pr_16925/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(se,"id","transformers.ReformerConfig"),c(se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(se,"href","#transformers.ReformerConfig"),c(qs,"class","relative group"),c(tt,"href","/docs/transformers/pr_16925/en/model_doc/reformer#transformers.ReformerModel"),c(nt,"href","/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig"),c(ot,"href","/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig"),c(B,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ae,"id","transformers.ReformerTokenizer"),c(ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ae,"href","#transformers.ReformerTokenizer"),c(Ls,"class","relative group"),c(na,"href","https://github.com/google/sentencepiece"),c(na,"rel","nofollow"),c(rt,"href","/docs/transformers/pr_16925/en/main_classes/tokenizer#transformers.PreTrainedTokenizer"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(te,"id","transformers.ReformerTokenizerFast"),c(te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(te,"href","#transformers.ReformerTokenizerFast"),c(Fs,"class","relative group"),c(pa,"href","https://huggingface.co/docs/tokenizers/python/latest/components.html?highlight=unigram#models"),c(pa,"rel","nofollow"),c(lt,"href","/docs/transformers/pr_16925/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast"),c(is,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ne,"id","transformers.ReformerModel"),c(ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ne,"href","#transformers.ReformerModel"),c(Cs,"class","relative group"),c(ga,"href","https://arxiv.org/abs/2001.04451"),c(ga,"rel","nofollow"),c(pt,"href","/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel"),c(_a,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),c(_a,"rel","nofollow"),c(mt,"href","/docs/transformers/pr_16925/en/model_doc/reformer#transformers.ReformerModel"),c(es,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ie,"id","transformers.ReformerModelWithLMHead"),c(ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ie,"href","#transformers.ReformerModelWithLMHead"),c(Ps,"class","relative group"),c(ka,"href","https://arxiv.org/abs/2001.04451"),c(ka,"rel","nofollow"),c(ct,"href","/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel"),c(za,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),c(za,"rel","nofollow"),c(ht,"href","/docs/transformers/pr_16925/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(as,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(me,"id","transformers.ReformerForMaskedLM"),c(me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(me,"href","#transformers.ReformerForMaskedLM"),c(Ns,"class","relative group"),c(Ra,"href","https://arxiv.org/abs/2001.04451"),c(Ra,"rel","nofollow"),c(dt,"href","/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel"),c(La,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),c(La,"rel","nofollow"),c(gt,"href","/docs/transformers/pr_16925/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(W,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ge,"id","transformers.ReformerForSequenceClassification"),c(ge,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ge,"href","#transformers.ReformerForSequenceClassification"),c(Is,"class","relative group"),c(Pa,"href","https://arxiv.org/abs/2001.04451"),c(Pa,"rel","nofollow"),c(ut,"href","/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel"),c(Na,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),c(Na,"rel","nofollow"),c(ft,"href","/docs/transformers/pr_16925/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ye,"id","transformers.ReformerForQuestionAnswering"),c(ye,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ye,"href","#transformers.ReformerForQuestionAnswering"),c(Qs,"class","relative group"),c(Qa,"href","https://arxiv.org/abs/2001.04451"),c(Qa,"rel","nofollow"),c(_t,"href","/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel"),c(Xa,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),c(Xa,"rel","nofollow"),c(vt,"href","/docs/transformers/pr_16925/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(e,m){s(document.head,p),u(e,v,m),u(e,g,m),s(g,f),s(f,b),w(l,b,null),s(g,_),s(g,F),s(F,ji),u(e,po,m),u(e,ws,m),s(ws,At),s(At,Ci),s(ws,Ai),s(ws,je),s(je,Pi),s(ws,Si),u(e,mo,m),u(e,xs,m),s(xs,Xs),s(Xs,Pt),w(Ce,Pt,null),s(xs,Oi),s(xs,St),s(St,Ni),u(e,co,m),u(e,Vs,m),s(Vs,Di),s(Vs,Ae),s(Ae,Hi),s(Vs,Ii),u(e,ho,m),u(e,Za,m),s(Za,Wi),u(e,go,m),u(e,st,m),s(st,Ot),s(Ot,Qi),u(e,uo,m),u(e,ms,m),s(ms,Ki),s(ms,Pe),s(Pe,Ui),s(ms,Xi),s(ms,Se),s(Se,Vi),s(ms,Bi),u(e,fo,m),u(e,Oe,m),s(Oe,Nt),s(Nt,Gi),s(Oe,Ji),u(e,_o,m),u(e,et,m),s(et,cs),s(cs,Yi),s(cs,Dt),s(Dt,Zi),s(cs,sl),s(cs,Ht),s(Ht,el),s(cs,al),s(cs,Ne),s(Ne,tl),u(e,vo,m),u(e,zs,m),s(zs,Bs),s(Bs,It),w(De,It,null),s(zs,nl),s(zs,Wt),s(Wt,ol),u(e,bo,m),u(e,q,m),s(q,rl),s(q,He),s(He,il),s(q,ll),yo.m(Gg,q),s(q,ko),s(q,Qt),s(Qt,pl),s(q,ml),wo.m(Jg,q),s(q,xo),zo.m(Yg,q),s(q,$o),s(q,Kt),s(Kt,cl),s(q,hl),To.m(Zg,q),s(q,Mo),s(q,Ut),s(Ut,dl),s(q,gl),Ro.m(su,q),s(q,qo),Eo.m(eu,q),u(e,Lo,m),u(e,$s,m),s($s,ul),Fo.m(au,$s),s($s,jo),Co.m(tu,$s),u(e,Ao,m),u(e,Ie,m),s(Ie,fl),Po.m(nu,Ie),u(e,So,m),u(e,We,m),s(We,_l),Oo.m(ou,We),u(e,No,m),u(e,Qe,m),s(Qe,vl),Do.m(ru,Qe),u(e,Ho,m),u(e,j,m),s(j,bl),Io.m(iu,j),s(j,Wo),Qo.m(lu,j),s(j,Ko),s(j,Xt),s(Xt,yl),s(j,kl),Uo.m(pu,j),s(j,Xo),Vo.m(mu,j),s(j,Bo),Go.m(cu,j),s(j,Jo),u(e,Yo,m),u(e,hs,m),s(hs,wl),Zo.m(hu,hs),s(hs,sr),er.m(du,hs),s(hs,ar),u(e,tr,m),u(e,E,m),s(E,xl),s(E,Vt),s(Vt,zl),s(E,$l),nr.m(gu,E),s(E,or),s(E,Bt),s(Bt,Tl),s(E,Ml),s(E,Gt),s(Gt,Rl),s(E,ql),rr.m(uu,E),s(E,ir),s(E,Jt),s(Jt,El),s(E,Ll),s(E,Yt),s(Yt,Fl),s(E,jl),s(E,Zt),s(Zt,Cl),s(E,Al),u(e,lr,m),u(e,Ts,m),s(Ts,Gs),s(Gs,sn),w(Ke,sn,null),s(Ts,Pl),s(Ts,en),s(en,Sl),u(e,pr,m),u(e,J,m),s(J,Ol),s(J,Ue),s(Ue,Nl),s(J,Dl),s(J,an),s(an,Hl),s(J,Il),s(J,tn),s(tn,Wl),s(J,Ql),u(e,mr,m),u(e,O,m),s(O,Kl),s(O,nn),s(nn,Ul),s(O,Xl),s(O,on),s(on,Vl),s(O,Bl),s(O,rn),s(rn,Gl),s(O,Jl),s(O,ln),s(ln,Yl),s(O,Zl),s(O,pn),s(pn,sp),s(O,ep),u(e,cr,m),u(e,ds,m),s(ds,ap),s(ds,Xe),s(Xe,tp),s(ds,np),s(ds,Ve),s(Ve,op),s(ds,rp),u(e,hr,m),u(e,I,m),s(I,ip),s(I,mn),s(mn,lp),s(I,pp),dr.m(fu,I),s(I,gr),ur.m(_u,I),s(I,fr),_r.m(vu,I),s(I,vr),u(e,br,m),u(e,gs,m),s(gs,mp),s(gs,cn),s(cn,cp),s(gs,hp),s(gs,hn),s(hn,dp),s(gs,gp),u(e,yr,m),u(e,Y,m),s(Y,up),kr.m(bu,Y),s(Y,wr),xr.m(yu,Y),s(Y,zr),$r.m(ku,Y),s(Y,Tr),u(e,Mr,m),u(e,Ms,m),s(Ms,Js),s(Js,dn),w(Be,dn,null),s(Ms,fp),s(Ms,gn),s(gn,_p),u(e,Rr,m),u(e,Z,m),s(Z,vp),s(Z,un),s(un,bp),s(Z,yp),s(Z,fn),s(fn,kp),s(Z,wp),s(Z,_n),s(_n,xp),s(Z,zp),u(e,qr,m),u(e,ss,m),s(ss,$p),Er.m(wu,ss),s(ss,Lr),Fr.m(xu,ss),s(ss,jr),Cr.m(zu,ss),s(ss,Ar),u(e,Pr,m),u(e,Rs,m),s(Rs,Ys),s(Ys,vn),w(Ge,vn,null),s(Rs,Tp),s(Rs,bn),s(bn,Mp),u(e,Sr,m),u(e,us,m),s(us,Rp),s(us,yn),s(yn,qp),s(us,Ep),s(us,kn),s(kn,Lp),s(us,Fp),u(e,Or,m),u(e,Zs,m),s(Zs,jp),s(Zs,at),s(at,Cp),s(Zs,Ap),u(e,Nr,m),w(Je,e,m),u(e,Dr,m),u(e,qs,m),s(qs,se),s(se,wn),w(Ye,wn,null),s(qs,Pp),s(qs,xn),s(xn,Sp),u(e,Hr,m),u(e,B,m),w(Ze,B,null),s(B,Op),s(B,sa),s(sa,Np),s(sa,tt),s(tt,Dp),s(sa,Hp),s(B,Ip),s(B,Es),s(Es,Wp),s(Es,nt),s(nt,Qp),s(Es,Kp),s(Es,ot),s(ot,Up),s(Es,Xp),s(B,Vp),w(ee,B,null),u(e,Ir,m),u(e,Ls,m),s(Ls,ae),s(ae,zn),w(ea,zn,null),s(Ls,Bp),s(Ls,$n),s($n,Gp),u(e,Wr,m),u(e,G,m),w(aa,G,null),s(G,Jp),s(G,ta),s(ta,Yp),s(ta,na),s(na,Zp),s(ta,sm),s(G,em),s(G,oa),s(oa,am),s(oa,rt),s(rt,tm),s(oa,nm),s(G,om),s(G,it),w(ra,it,null),u(e,Qr,m),u(e,Fs,m),s(Fs,te),s(te,Tn),w(ia,Tn,null),s(Fs,rm),s(Fs,Mn),s(Mn,im),u(e,Kr,m),u(e,is,m),w(la,is,null),s(is,lm),s(is,js),s(js,pm),s(js,Rn),s(Rn,mm),s(js,cm),s(js,pa),s(pa,hm),s(js,dm),s(is,gm),s(is,ma),s(ma,um),s(ma,lt),s(lt,fm),s(ma,_m),u(e,Ur,m),u(e,Cs,m),s(Cs,ne),s(ne,qn),w(ca,qn,null),s(Cs,vm),s(Cs,En),s(En,bm),u(e,Xr,m),u(e,N,m),w(ha,N,null),s(N,ym),s(N,da),s(da,km),s(da,ga),s(ga,wm),s(da,xm),s(N,zm),s(N,ua),s(ua,$m),s(ua,pt),s(pt,Tm),s(ua,Mm),s(N,Rm),s(N,fa),s(fa,qm),s(fa,_a),s(_a,Em),s(fa,Lm),s(N,Fm),s(N,es),w(va,es,null),s(es,jm),s(es,As),s(As,Cm),s(As,mt),s(mt,Am),s(As,Pm),s(As,Ln),s(Ln,Sm),s(As,Om),s(es,Nm),w(oe,es,null),s(es,Dm),w(re,es,null),u(e,Vr,m),u(e,Ps,m),s(Ps,ie),s(ie,Fn),w(ba,Fn,null),s(Ps,Hm),s(Ps,jn),s(jn,Im),u(e,Br,m),u(e,D,m),w(ya,D,null),s(D,Wm),s(D,Ss),s(Ss,Qm),s(Ss,Cn),s(Cn,Km),s(Ss,Um),s(Ss,ka),s(ka,Xm),s(Ss,Vm),s(D,Bm),s(D,wa),s(wa,Gm),s(wa,ct),s(ct,Jm),s(wa,Ym),s(D,Zm),s(D,xa),s(xa,sc),s(xa,za),s(za,ec),s(xa,ac),s(D,tc),s(D,as),w($a,as,null),s(as,nc),s(as,Os),s(Os,oc),s(Os,ht),s(ht,rc),s(Os,ic),s(Os,An),s(An,lc),s(Os,pc),s(as,mc),w(le,as,null),s(as,cc),w(pe,as,null),u(e,Gr,m),u(e,Ns,m),s(Ns,me),s(me,Pn),w(Ta,Pn,null),s(Ns,hc),s(Ns,Sn),s(Sn,dc),u(e,Jr,m),u(e,H,m),w(Ma,H,null),s(H,gc),s(H,Ds),s(Ds,uc),s(Ds,On),s(On,fc),s(Ds,_c),s(Ds,Ra),s(Ra,vc),s(Ds,bc),s(H,yc),s(H,qa),s(qa,kc),s(qa,dt),s(dt,wc),s(qa,xc),s(H,zc),s(H,Ea),s(Ea,$c),s(Ea,La),s(La,Tc),s(Ea,Mc),s(H,Rc),s(H,W),w(Fa,W,null),s(W,qc),s(W,Hs),s(Hs,Ec),s(Hs,gt),s(gt,Lc),s(Hs,Fc),s(Hs,Nn),s(Nn,jc),s(Hs,Cc),s(W,Ac),w(ce,W,null),s(W,Pc),w(he,W,null),s(W,Sc),w(de,W,null),u(e,Yr,m),u(e,Is,m),s(Is,ge),s(ge,Dn),w(ja,Dn,null),s(Is,Oc),s(Is,Hn),s(Hn,Nc),u(e,Zr,m),u(e,P,m),w(Ca,P,null),s(P,Dc),s(P,In),s(In,Hc),s(P,Ic),s(P,Aa),s(Aa,Wc),s(Aa,Pa),s(Pa,Qc),s(Aa,Kc),s(P,Uc),s(P,Sa),s(Sa,Xc),s(Sa,ut),s(ut,Vc),s(Sa,Bc),s(P,Gc),s(P,Oa),s(Oa,Jc),s(Oa,Na),s(Na,Yc),s(Oa,Zc),s(P,sh),s(P,C),w(Da,C,null),s(C,eh),s(C,Ws),s(Ws,ah),s(Ws,ft),s(ft,th),s(Ws,nh),s(Ws,Wn),s(Wn,oh),s(Ws,rh),s(C,ih),w(ue,C,null),s(C,lh),w(fe,C,null),s(C,ph),w(_e,C,null),s(C,mh),w(ve,C,null),s(C,ch),w(be,C,null),u(e,si,m),u(e,Qs,m),s(Qs,ye),s(ye,Qn),w(Ha,Qn,null),s(Qs,hh),s(Qs,Kn),s(Kn,dh),u(e,ei,m),u(e,S,m),w(Ia,S,null),s(S,gh),s(S,Ks),s(Ks,uh),s(Ks,Un),s(Un,fh),s(Ks,_h),s(Ks,Xn),s(Xn,vh),s(Ks,bh),s(S,yh),s(S,Wa),s(Wa,kh),s(Wa,Qa),s(Qa,wh),s(Wa,xh),s(S,zh),s(S,Ka),s(Ka,$h),s(Ka,_t),s(_t,Th),s(Ka,Mh),s(S,Rh),s(S,Ua),s(Ua,qh),s(Ua,Xa),s(Xa,Eh),s(Ua,Lh),s(S,Fh),s(S,Q),w(Va,Q,null),s(Q,jh),s(Q,Us),s(Us,Ch),s(Us,vt),s(vt,Ah),s(Us,Ph),s(Us,Vn),s(Vn,Sh),s(Us,Oh),s(Q,Nh),w(ke,Q,null),s(Q,Dh),w(we,Q,null),s(Q,Hh),w(xe,Q,null),ai=!0},p(e,[m]){const Ba={};m&2&&(Ba.$$scope={dirty:m,ctx:e}),ee.$set(Ba);const Bn={};m&2&&(Bn.$$scope={dirty:m,ctx:e}),oe.$set(Bn);const Gn={};m&2&&(Gn.$$scope={dirty:m,ctx:e}),re.$set(Gn);const Jn={};m&2&&(Jn.$$scope={dirty:m,ctx:e}),le.$set(Jn);const ze={};m&2&&(ze.$$scope={dirty:m,ctx:e}),pe.$set(ze);const Yn={};m&2&&(Yn.$$scope={dirty:m,ctx:e}),ce.$set(Yn);const Zn={};m&2&&(Zn.$$scope={dirty:m,ctx:e}),he.$set(Zn);const Ga={};m&2&&(Ga.$$scope={dirty:m,ctx:e}),de.$set(Ga);const so={};m&2&&(so.$$scope={dirty:m,ctx:e}),ue.$set(so);const eo={};m&2&&(eo.$$scope={dirty:m,ctx:e}),fe.$set(eo);const ao={};m&2&&(ao.$$scope={dirty:m,ctx:e}),_e.$set(ao);const Ja={};m&2&&(Ja.$$scope={dirty:m,ctx:e}),ve.$set(Ja);const to={};m&2&&(to.$$scope={dirty:m,ctx:e}),be.$set(to);const no={};m&2&&(no.$$scope={dirty:m,ctx:e}),ke.$set(no);const oo={};m&2&&(oo.$$scope={dirty:m,ctx:e}),we.$set(oo);const ro={};m&2&&(ro.$$scope={dirty:m,ctx:e}),xe.$set(ro)},i(e){ai||(x(l.$$.fragment,e),x(Ce.$$.fragment,e),x(De.$$.fragment,e),x(Ke.$$.fragment,e),x(Be.$$.fragment,e),x(Ge.$$.fragment,e),x(Je.$$.fragment,e),x(Ye.$$.fragment,e),x(Ze.$$.fragment,e),x(ee.$$.fragment,e),x(ea.$$.fragment,e),x(aa.$$.fragment,e),x(ra.$$.fragment,e),x(ia.$$.fragment,e),x(la.$$.fragment,e),x(ca.$$.fragment,e),x(ha.$$.fragment,e),x(va.$$.fragment,e),x(oe.$$.fragment,e),x(re.$$.fragment,e),x(ba.$$.fragment,e),x(ya.$$.fragment,e),x($a.$$.fragment,e),x(le.$$.fragment,e),x(pe.$$.fragment,e),x(Ta.$$.fragment,e),x(Ma.$$.fragment,e),x(Fa.$$.fragment,e),x(ce.$$.fragment,e),x(he.$$.fragment,e),x(de.$$.fragment,e),x(ja.$$.fragment,e),x(Ca.$$.fragment,e),x(Da.$$.fragment,e),x(ue.$$.fragment,e),x(fe.$$.fragment,e),x(_e.$$.fragment,e),x(ve.$$.fragment,e),x(be.$$.fragment,e),x(Ha.$$.fragment,e),x(Ia.$$.fragment,e),x(Va.$$.fragment,e),x(ke.$$.fragment,e),x(we.$$.fragment,e),x(xe.$$.fragment,e),ai=!0)},o(e){z(l.$$.fragment,e),z(Ce.$$.fragment,e),z(De.$$.fragment,e),z(Ke.$$.fragment,e),z(Be.$$.fragment,e),z(Ge.$$.fragment,e),z(Je.$$.fragment,e),z(Ye.$$.fragment,e),z(Ze.$$.fragment,e),z(ee.$$.fragment,e),z(ea.$$.fragment,e),z(aa.$$.fragment,e),z(ra.$$.fragment,e),z(ia.$$.fragment,e),z(la.$$.fragment,e),z(ca.$$.fragment,e),z(ha.$$.fragment,e),z(va.$$.fragment,e),z(oe.$$.fragment,e),z(re.$$.fragment,e),z(ba.$$.fragment,e),z(ya.$$.fragment,e),z($a.$$.fragment,e),z(le.$$.fragment,e),z(pe.$$.fragment,e),z(Ta.$$.fragment,e),z(Ma.$$.fragment,e),z(Fa.$$.fragment,e),z(ce.$$.fragment,e),z(he.$$.fragment,e),z(de.$$.fragment,e),z(ja.$$.fragment,e),z(Ca.$$.fragment,e),z(Da.$$.fragment,e),z(ue.$$.fragment,e),z(fe.$$.fragment,e),z(_e.$$.fragment,e),z(ve.$$.fragment,e),z(be.$$.fragment,e),z(Ha.$$.fragment,e),z(Ia.$$.fragment,e),z(Va.$$.fragment,e),z(ke.$$.fragment,e),z(we.$$.fragment,e),z(xe.$$.fragment,e),ai=!1},d(e){a(p),e&&a(v),e&&a(g),$(l),e&&a(po),e&&a(ws),e&&a(mo),e&&a(xs),$(Ce),e&&a(co),e&&a(Vs),e&&a(ho),e&&a(Za),e&&a(go),e&&a(st),e&&a(uo),e&&a(ms),e&&a(fo),e&&a(Oe),e&&a(_o),e&&a(et),e&&a(vo),e&&a(zs),$(De),e&&a(bo),e&&a(q),e&&a(Lo),e&&a($s),e&&a(Ao),e&&a(Ie),e&&a(So),e&&a(We),e&&a(No),e&&a(Qe),e&&a(Ho),e&&a(j),e&&a(Yo),e&&a(hs),e&&a(tr),e&&a(E),e&&a(lr),e&&a(Ts),$(Ke),e&&a(pr),e&&a(J),e&&a(mr),e&&a(O),e&&a(cr),e&&a(ds),e&&a(hr),e&&a(I),e&&a(br),e&&a(gs),e&&a(yr),e&&a(Y),e&&a(Mr),e&&a(Ms),$(Be),e&&a(Rr),e&&a(Z),e&&a(qr),e&&a(ss),e&&a(Pr),e&&a(Rs),$(Ge),e&&a(Sr),e&&a(us),e&&a(Or),e&&a(Zs),e&&a(Nr),$(Je,e),e&&a(Dr),e&&a(qs),$(Ye),e&&a(Hr),e&&a(B),$(Ze),$(ee),e&&a(Ir),e&&a(Ls),$(ea),e&&a(Wr),e&&a(G),$(aa),$(ra),e&&a(Qr),e&&a(Fs),$(ia),e&&a(Kr),e&&a(is),$(la),e&&a(Ur),e&&a(Cs),$(ca),e&&a(Xr),e&&a(N),$(ha),$(va),$(oe),$(re),e&&a(Vr),e&&a(Ps),$(ba),e&&a(Br),e&&a(D),$(ya),$($a),$(le),$(pe),e&&a(Gr),e&&a(Ns),$(Ta),e&&a(Jr),e&&a(H),$(Ma),$(Fa),$(ce),$(he),$(de),e&&a(Yr),e&&a(Is),$(ja),e&&a(Zr),e&&a(P),$(Ca),$(Da),$(ue),$(fe),$(_e),$(ve),$(be),e&&a(si),e&&a(Qs),$(Ha),e&&a(ei),e&&a(S),$(Ia),$(Va),$(ke),$(we),$(xe)}}}const Xu={local:"reformer",sections:[{local:"overview",title:"Overview"},{local:"axial-positional-encodings",title:"Axial Positional Encodings"},{local:"lsh-self-attention",title:"LSH Self Attention"},{local:"local-self-attention",title:"Local Self Attention"},{local:"training",title:"Training"},{local:"transformers.ReformerConfig",title:"ReformerConfig"},{local:"transformers.ReformerTokenizer",title:"ReformerTokenizer"},{local:"transformers.ReformerTokenizerFast",title:"ReformerTokenizerFast"},{local:"transformers.ReformerModel",title:"ReformerModel"},{local:"transformers.ReformerModelWithLMHead",title:"ReformerModelWithLMHead"},{local:"transformers.ReformerForMaskedLM",title:"ReformerForMaskedLM"},{local:"transformers.ReformerForSequenceClassification",title:"ReformerForSequenceClassification"},{local:"transformers.ReformerForQuestionAnswering",title:"ReformerForQuestionAnswering"}],title:"Reformer"};function Vu(T){return qu(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ef extends $u{constructor(p){super();Tu(this,p,Vu,Uu,Mu,{})}}export{ef as default,Xu as metadata};
