import{S as Gs,i as Bs,s as Js,e as s,k as m,w as $,t as l,M as Ks,c as a,d as o,m as u,a as r,x as b,h as i,b as c,N as Xs,F as t,g as p,y,q as N,o as R,B as C,v as Zs,L as as}from"../../chunks/vendor-6b77c823.js";import{T as Us}from"../../chunks/Tip-39098574.js";import{D as it}from"../../chunks/Docstring-1088f2fb.js";import{C as rs}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ct}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as ss}from"../../chunks/ExampleCodeBlock-5212b321.js";function Qs(k){let d,w,_,h,v;return h=new rs({props:{code:`from transformers import ResNetConfig, ResNetModel

# Initializing a ResNet resnet-50 style configuration
configuration = ResNetConfig()
# Initializing a model from the resnet-50 style configuration
model = ResNetModel(configuration)
# Accessing the model configuration
configuration = model.config`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ResNetConfig, ResNetModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a ResNet resnet-50 style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = ResNetConfig()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a model from the resnet-50 style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ResNetModel(configuration)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`}}),{c(){d=s("p"),w=l("Example:"),_=m(),$(h.$$.fragment)},l(n){d=a(n,"P",{});var g=r(d);w=i(g,"Example:"),g.forEach(o),_=u(n),b(h.$$.fragment,n)},m(n,g){p(n,d,g),t(d,w),p(n,_,g),y(h,n,g),v=!0},p:as,i(n){v||(N(h.$$.fragment,n),v=!0)},o(n){R(h.$$.fragment,n),v=!1},d(n){n&&o(d),n&&o(_),C(h,n)}}}function Ys(k){let d,w,_,h,v;return{c(){d=s("p"),w=l("Although the recipe for forward pass needs to be defined within this function, one should call the "),_=s("code"),h=l("Module"),v=l(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(n){d=a(n,"P",{});var g=r(d);w=i(g,"Although the recipe for forward pass needs to be defined within this function, one should call the "),_=a(g,"CODE",{});var A=r(_);h=i(A,"Module"),A.forEach(o),v=i(g,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),g.forEach(o)},m(n,g){p(n,d,g),t(d,w),t(d,_),t(_,h),t(d,v)},d(n){n&&o(d)}}}function ea(k){let d,w,_,h,v;return h=new rs({props:{code:`from transformers import AutoFeatureExtractor, ResNetModel
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = AutoFeatureExtractor.from_pretrained("microsoft/resnet-50")
model = ResNetModel.from_pretrained("microsoft/resnet-50")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state
list(last_hidden_states.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor, ResNetModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;microsoft/resnet-50&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ResNetModel.from_pretrained(<span class="hljs-string">&quot;microsoft/resnet-50&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(last_hidden_states.shape)
[<span class="hljs-number">1</span>, <span class="hljs-number">2048</span>, <span class="hljs-number">7</span>, <span class="hljs-number">7</span>]`}}),{c(){d=s("p"),w=l("Example:"),_=m(),$(h.$$.fragment)},l(n){d=a(n,"P",{});var g=r(d);w=i(g,"Example:"),g.forEach(o),_=u(n),b(h.$$.fragment,n)},m(n,g){p(n,d,g),t(d,w),p(n,_,g),y(h,n,g),v=!0},p:as,i(n){v||(N(h.$$.fragment,n),v=!0)},o(n){R(h.$$.fragment,n),v=!1},d(n){n&&o(d),n&&o(_),C(h,n)}}}function ta(k){let d,w,_,h,v;return{c(){d=s("p"),w=l("Although the recipe for forward pass needs to be defined within this function, one should call the "),_=s("code"),h=l("Module"),v=l(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(n){d=a(n,"P",{});var g=r(d);w=i(g,"Although the recipe for forward pass needs to be defined within this function, one should call the "),_=a(g,"CODE",{});var A=r(_);h=i(A,"Module"),A.forEach(o),v=i(g,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),g.forEach(o)},m(n,g){p(n,d,g),t(d,w),t(d,_),t(_,h),t(d,v)},d(n){n&&o(d)}}}function oa(k){let d,w,_,h,v;return h=new rs({props:{code:`from transformers import AutoFeatureExtractor, ResNetForImageClassification
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = AutoFeatureExtractor.from_pretrained("microsoft/resnet-50")
model = ResNetForImageClassification.from_pretrained("microsoft/resnet-50")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    logits = model(**inputs).logits

# model predicts one of the 1000 ImageNet classes
predicted_label = logits.argmax(-1).item()
print(model.config.id2label[predicted_label])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor, ResNetForImageClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;microsoft/resnet-50&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ResNetForImageClassification.from_pretrained(<span class="hljs-string">&quot;microsoft/resnet-50&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts one of the 1000 ImageNet classes</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_label = logits.argmax(-<span class="hljs-number">1</span>).item()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(model.config.id2label[predicted_label])
tiger cat`}}),{c(){d=s("p"),w=l("Example:"),_=m(),$(h.$$.fragment)},l(n){d=a(n,"P",{});var g=r(d);w=i(g,"Example:"),g.forEach(o),_=u(n),b(h.$$.fragment,n)},m(n,g){p(n,d,g),t(d,w),p(n,_,g),y(h,n,g),v=!0},p:as,i(n){v||(N(h.$$.fragment,n),v=!0)},o(n){R(h.$$.fragment,n),v=!1},d(n){n&&o(d),n&&o(_),C(h,n)}}}function sa(k){let d,w,_,h,v,n,g,A,Mt,dt,q,H,He,ae,Pt,Ue,qt,ft,E,Ot,re,St,zt,ne,Dt,Lt,Ge,Vt,Wt,Be,Ht,Ut,Je,Gt,Bt,pt,xe,Jt,ht,Te,Kt,mt,ke,Ke,Xt,ut,je,Zt,gt,Ie,le,Qt,Fe,Yt,eo,_t,U,to,ie,oo,so,vt,ce,ns,wt,P,ao,de,ro,no,fe,lo,io,$t,O,G,Xe,pe,co,Ze,fo,bt,x,he,po,S,ho,Ae,mo,uo,me,go,_o,vo,z,wo,Me,$o,bo,Pe,yo,No,Ro,B,yt,D,J,Qe,ue,Co,Ye,Eo,Nt,M,ge,xo,_e,To,ve,ko,jo,Io,j,we,Fo,L,Ao,qe,Mo,Po,et,qo,Oo,So,K,zo,X,Rt,V,Z,tt,$e,Do,ot,Lo,Ct,T,be,Vo,st,Wo,Ho,ye,Uo,Ne,Go,Bo,Jo,I,Re,Ko,W,Xo,Oe,Zo,Qo,at,Yo,es,ts,Q,os,Y,Et;return n=new ct({}),ae=new ct({}),pe=new ct({}),he=new it({props:{name:"class transformers.ResNetConfig",anchor:"transformers.ResNetConfig",parameters:[{name:"num_channels",val:" = 3"},{name:"embedding_size",val:" = 64"},{name:"hidden_sizes",val:" = [256, 512, 1024, 2048]"},{name:"depths",val:" = [3, 4, 6, 3]"},{name:"layer_type",val:" = 'bottleneck'"},{name:"hidden_act",val:" = 'relu'"},{name:"downsample_in_first_stage",val:" = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.ResNetConfig.num_channels",description:`<strong>num_channels</strong> (<code>int</code>, <em>optional</em>, defaults to 3) &#x2014;
The number of input channels.`,name:"num_channels"},{anchor:"transformers.ResNetConfig.embedding_size",description:`<strong>embedding_size</strong> (<code>int</code>, <em>optional</em>, defaults to 64) &#x2014;
Dimensionality (hidden size) for the embedding layer.`,name:"embedding_size"},{anchor:"transformers.ResNetConfig.hidden_sizes",description:`<strong>hidden_sizes</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[256, 512, 1024, 2048]</code>) &#x2014;
Dimensionality (hidden size) at each stage.`,name:"hidden_sizes"},{anchor:"transformers.ResNetConfig.depths",description:`<strong>depths</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[3, 4, 6, 3]</code>) &#x2014;
Depth (number of layers) for each stage.`,name:"depths"},{anchor:"transformers.ResNetConfig.layer_type",description:`<strong>layer_type</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;bottleneck&quot;</code>) &#x2014;
The layer to use, it can be either <code>&quot;basic&quot;</code> (used for smaller models, like resnet-18 or resnet-34) or
<code>&quot;bottleneck&quot;</code> (used for larger models like resnet-50 and above).`,name:"layer_type"},{anchor:"transformers.ResNetConfig.hidden_act",description:`<strong>hidden_act</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;relu&quot;</code>) &#x2014;
The non-linear activation function in each block. If string, <code>&quot;gelu&quot;</code>, <code>&quot;relu&quot;</code>, <code>&quot;selu&quot;</code> and <code>&quot;gelu_new&quot;</code>
are supported.`,name:"hidden_act"},{anchor:"transformers.ResNetConfig.downsample_in_first_stage",description:`<strong>downsample_in_first_stage</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>True</code>, the first stage will downsample the inputs using a <code>stride</code> of 2.`,name:"downsample_in_first_stage"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/resnet/configuration_resnet.py#L28"}}),B=new ss({props:{anchor:"transformers.ResNetConfig.example",$$slots:{default:[Qs]},$$scope:{ctx:k}}}),ue=new ct({}),ge=new it({props:{name:"class transformers.ResNetModel",anchor:"transformers.ResNetModel",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.ResNetModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/resnet/modeling_resnet.py#L304"}}),we=new it({props:{name:"forward",anchor:"transformers.ResNetModel.forward",parameters:[{name:"pixel_values",val:": Tensor"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.ResNetModel.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_16925/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See
<code>AutoFeatureExtractor.__call__()</code> for details.`,name:"pixel_values"},{anchor:"transformers.ResNetModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.ResNetModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_16925/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/resnet/modeling_resnet.py#L314",returnDescription:`
<p>A <code>transformers.models.resnet.modeling_resnet.ResNetModelOutput</code> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_16925/en/model_doc/resnet#transformers.ResNetConfig"
>ResNetConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</p>
</li>
<li>
<p><strong>pooler_output</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.hidden_sizes[-1])</code>) \u2014 The pooled last hidden state.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, num_channels, height, width)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.</p>
</li>
</ul>
`,returnType:`
<p><code>transformers.models.resnet.modeling_resnet.ResNetModelOutput</code> or <code>tuple(torch.FloatTensor)</code></p>
`}}),K=new Us({props:{$$slots:{default:[Ys]},$$scope:{ctx:k}}}),X=new ss({props:{anchor:"transformers.ResNetModel.forward.example",$$slots:{default:[ea]},$$scope:{ctx:k}}}),$e=new ct({}),be=new it({props:{name:"class transformers.ResNetForImageClassification",anchor:"transformers.ResNetForImageClassification",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.ResNetForImageClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/resnet/modeling_resnet.py#L358"}}),Re=new it({props:{name:"forward",anchor:"transformers.ResNetForImageClassification.forward",parameters:[{name:"pixel_values",val:": Tensor = None"},{name:"labels",val:": Tensor = None"},{name:"output_hidden_states",val:": bool = None"},{name:"return_dict",val:": bool = None"}],parametersDescription:[{anchor:"transformers.ResNetForImageClassification.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_16925/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See
<code>AutoFeatureExtractor.__call__()</code> for details.`,name:"pixel_values"},{anchor:"transformers.ResNetForImageClassification.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.ResNetForImageClassification.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_16925/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.ResNetForImageClassification.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the image classification/regression loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels &gt; 1</code> a classification loss is computed (Cross-Entropy).`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/resnet/modeling_resnet.py#L371",returnDescription:`
<p>A <code>transformers.modeling_outputs.ImageClassifierOutput</code> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_16925/en/model_doc/resnet#transformers.ResNetConfig"
>ResNetConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</p>
</li>
<li>
<p><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels)</code>) \u2014 Classification (or regression if config.num_labels==1) scores (before SoftMax).</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also called feature maps) of the model at
the output of each stage.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, patch_size, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><code>transformers.modeling_outputs.ImageClassifierOutput</code> or <code>tuple(torch.FloatTensor)</code></p>
`}}),Q=new Us({props:{$$slots:{default:[ta]},$$scope:{ctx:k}}}),Y=new ss({props:{anchor:"transformers.ResNetForImageClassification.forward.example",$$slots:{default:[oa]},$$scope:{ctx:k}}}),{c(){d=s("meta"),w=m(),_=s("h1"),h=s("a"),v=s("span"),$(n.$$.fragment),g=m(),A=s("span"),Mt=l("ResNet"),dt=m(),q=s("h2"),H=s("a"),He=s("span"),$(ae.$$.fragment),Pt=m(),Ue=s("span"),qt=l("Overview"),ft=m(),E=s("p"),Ot=l("The ResNet model was proposed in "),re=s("a"),St=l("Deep Residual Learning for Image Recognition"),zt=l(" by Kaiming He, Xiangyu Zhang, Shaoqing Ren and Jian Sun. Our implementation follows the small changes made by "),ne=s("a"),Dt=l("Nvidia"),Lt=l(", we apply the "),Ge=s("code"),Vt=l("stride=2"),Wt=l(" for downsampling in bottleneck\u2019s "),Be=s("code"),Ht=l("3x3"),Ut=l(" conv and not in the first "),Je=s("code"),Gt=l("1x1"),Bt=l(". This is generally known as \u201CResNet v1.5\u201D."),pt=m(),xe=s("p"),Jt=l("ResNet introduced residual connections, they allow to train networks with an unseen number of layers (up to 1000). ResNet won the 2015 ILSVRC & COCO competition, one important milestone in deep computer vision."),ht=m(),Te=s("p"),Kt=l("The abstract from the paper is the following:"),mt=m(),ke=s("p"),Ke=s("em"),Xt=l(`Deeper neural networks are more difficult to train. We present a residual learning framework to ease the training of networks that are substantially deeper than those used previously. We explicitly reformulate the layers as learning residual functions with reference to the layer inputs, instead of learning unreferenced functions. We provide comprehensive empirical evidence showing that these residual networks are easier to optimize, and can gain accuracy from considerably increased depth. On the ImageNet dataset we evaluate residual nets with a depth of up to 152 layers---8x deeper than VGG nets but still having lower complexity. An ensemble of these residual nets achieves 3.57% error on the ImageNet test set. This result won the 1st place on the ILSVRC 2015 classification task. We also present analysis on CIFAR-10 with 100 and 1000 layers.
The depth of representations is of central importance for many visual recognition tasks. Solely due to our extremely deep representations, we obtain a 28% relative improvement on the COCO object detection dataset. Deep residual nets are foundations of our submissions to ILSVRC & COCO 2015 competitions, where we also won the 1st places on the tasks of ImageNet detection, ImageNet localization, COCO detection, and COCO segmentation.`),ut=m(),je=s("p"),Zt=l("Tips:"),gt=m(),Ie=s("ul"),le=s("li"),Qt=l("One can use "),Fe=s("a"),Yt=l("AutoFeatureExtractor"),eo=l(" to prepare images for the model."),_t=m(),U=s("p"),to=l("The figure below illustrates the architecture of ResNet. Taken from the "),ie=s("a"),oo=l("original paper"),so=l("."),vt=m(),ce=s("img"),wt=m(),P=s("p"),ao=l("This model was contributed by "),de=s("a"),ro=l("Francesco"),no=l(". The original code can be found "),fe=s("a"),lo=l("here"),io=l("."),$t=m(),O=s("h2"),G=s("a"),Xe=s("span"),$(pe.$$.fragment),co=m(),Ze=s("span"),fo=l("ResNetConfig"),bt=m(),x=s("div"),$(he.$$.fragment),po=m(),S=s("p"),ho=l("This is the configuration class to store the configuration of a "),Ae=s("a"),mo=l("ResNetModel"),uo=l(`. It is used to instantiate an
ResNet model according to the specified arguments, defining the model architecture. Instantiating a configuration
with the defaults will yield a similar configuration to that of the
`),me=s("a"),go=l("resnet-50"),_o=l(" architecture."),vo=m(),z=s("p"),wo=l("Configuration objects inherit from "),Me=s("a"),$o=l("PretrainedConfig"),bo=l(` and can be used to control the model outputs. Read the
documentation from `),Pe=s("a"),yo=l("PretrainedConfig"),No=l(" for more information."),Ro=m(),$(B.$$.fragment),yt=m(),D=s("h2"),J=s("a"),Qe=s("span"),$(ue.$$.fragment),Co=m(),Ye=s("span"),Eo=l("ResNetModel"),Nt=m(),M=s("div"),$(ge.$$.fragment),xo=m(),_e=s("p"),To=l(`The bare ResNet model outputting raw features without any specific head on top.
This model is a PyTorch `),ve=s("a"),ko=l("torch.nn.Module"),jo=l(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Io=m(),j=s("div"),$(we.$$.fragment),Fo=m(),L=s("p"),Ao=l("The "),qe=s("a"),Mo=l("ResNetModel"),Po=l(" forward method, overrides the "),et=s("code"),qo=l("__call__"),Oo=l(" special method."),So=m(),$(K.$$.fragment),zo=m(),$(X.$$.fragment),Rt=m(),V=s("h2"),Z=s("a"),tt=s("span"),$($e.$$.fragment),Do=m(),ot=s("span"),Lo=l("ResNetForImageClassification"),Ct=m(),T=s("div"),$(be.$$.fragment),Vo=m(),st=s("p"),Wo=l(`ResNet Model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),Ho=m(),ye=s("p"),Uo=l("This model is a PyTorch "),Ne=s("a"),Go=l("torch.nn.Module"),Bo=l(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Jo=m(),I=s("div"),$(Re.$$.fragment),Ko=m(),W=s("p"),Xo=l("The "),Oe=s("a"),Zo=l("ResNetForImageClassification"),Qo=l(" forward method, overrides the "),at=s("code"),Yo=l("__call__"),es=l(" special method."),ts=m(),$(Q.$$.fragment),os=m(),$(Y.$$.fragment),this.h()},l(e){const f=Ks('[data-svelte="svelte-1phssyn"]',document.head);d=a(f,"META",{name:!0,content:!0}),f.forEach(o),w=u(e),_=a(e,"H1",{class:!0});var Ce=r(_);h=a(Ce,"A",{id:!0,class:!0,href:!0});var rt=r(h);v=a(rt,"SPAN",{});var nt=r(v);b(n.$$.fragment,nt),nt.forEach(o),rt.forEach(o),g=u(Ce),A=a(Ce,"SPAN",{});var lt=r(A);Mt=i(lt,"ResNet"),lt.forEach(o),Ce.forEach(o),dt=u(e),q=a(e,"H2",{class:!0});var Ee=r(q);H=a(Ee,"A",{id:!0,class:!0,href:!0});var ls=r(H);He=a(ls,"SPAN",{});var is=r(He);b(ae.$$.fragment,is),is.forEach(o),ls.forEach(o),Pt=u(Ee),Ue=a(Ee,"SPAN",{});var cs=r(Ue);qt=i(cs,"Overview"),cs.forEach(o),Ee.forEach(o),ft=u(e),E=a(e,"P",{});var F=r(E);Ot=i(F,"The ResNet model was proposed in "),re=a(F,"A",{href:!0,rel:!0});var ds=r(re);St=i(ds,"Deep Residual Learning for Image Recognition"),ds.forEach(o),zt=i(F," by Kaiming He, Xiangyu Zhang, Shaoqing Ren and Jian Sun. Our implementation follows the small changes made by "),ne=a(F,"A",{href:!0,rel:!0});var fs=r(ne);Dt=i(fs,"Nvidia"),fs.forEach(o),Lt=i(F,", we apply the "),Ge=a(F,"CODE",{});var ps=r(Ge);Vt=i(ps,"stride=2"),ps.forEach(o),Wt=i(F," for downsampling in bottleneck\u2019s "),Be=a(F,"CODE",{});var hs=r(Be);Ht=i(hs,"3x3"),hs.forEach(o),Ut=i(F," conv and not in the first "),Je=a(F,"CODE",{});var ms=r(Je);Gt=i(ms,"1x1"),ms.forEach(o),Bt=i(F,". This is generally known as \u201CResNet v1.5\u201D."),F.forEach(o),pt=u(e),xe=a(e,"P",{});var us=r(xe);Jt=i(us,"ResNet introduced residual connections, they allow to train networks with an unseen number of layers (up to 1000). ResNet won the 2015 ILSVRC & COCO competition, one important milestone in deep computer vision."),us.forEach(o),ht=u(e),Te=a(e,"P",{});var gs=r(Te);Kt=i(gs,"The abstract from the paper is the following:"),gs.forEach(o),mt=u(e),ke=a(e,"P",{});var _s=r(ke);Ke=a(_s,"EM",{});var vs=r(Ke);Xt=i(vs,`Deeper neural networks are more difficult to train. We present a residual learning framework to ease the training of networks that are substantially deeper than those used previously. We explicitly reformulate the layers as learning residual functions with reference to the layer inputs, instead of learning unreferenced functions. We provide comprehensive empirical evidence showing that these residual networks are easier to optimize, and can gain accuracy from considerably increased depth. On the ImageNet dataset we evaluate residual nets with a depth of up to 152 layers---8x deeper than VGG nets but still having lower complexity. An ensemble of these residual nets achieves 3.57% error on the ImageNet test set. This result won the 1st place on the ILSVRC 2015 classification task. We also present analysis on CIFAR-10 with 100 and 1000 layers.
The depth of representations is of central importance for many visual recognition tasks. Solely due to our extremely deep representations, we obtain a 28% relative improvement on the COCO object detection dataset. Deep residual nets are foundations of our submissions to ILSVRC & COCO 2015 competitions, where we also won the 1st places on the tasks of ImageNet detection, ImageNet localization, COCO detection, and COCO segmentation.`),vs.forEach(o),_s.forEach(o),ut=u(e),je=a(e,"P",{});var ws=r(je);Zt=i(ws,"Tips:"),ws.forEach(o),gt=u(e),Ie=a(e,"UL",{});var $s=r(Ie);le=a($s,"LI",{});var xt=r(le);Qt=i(xt,"One can use "),Fe=a(xt,"A",{href:!0});var bs=r(Fe);Yt=i(bs,"AutoFeatureExtractor"),bs.forEach(o),eo=i(xt," to prepare images for the model."),xt.forEach(o),$s.forEach(o),_t=u(e),U=a(e,"P",{});var Tt=r(U);to=i(Tt,"The figure below illustrates the architecture of ResNet. Taken from the "),ie=a(Tt,"A",{href:!0,rel:!0});var ys=r(ie);oo=i(ys,"original paper"),ys.forEach(o),so=i(Tt,"."),Tt.forEach(o),vt=u(e),ce=a(e,"IMG",{width:!0,src:!0}),wt=u(e),P=a(e,"P",{});var Se=r(P);ao=i(Se,"This model was contributed by "),de=a(Se,"A",{href:!0,rel:!0});var Ns=r(de);ro=i(Ns,"Francesco"),Ns.forEach(o),no=i(Se,". The original code can be found "),fe=a(Se,"A",{href:!0,rel:!0});var Rs=r(fe);lo=i(Rs,"here"),Rs.forEach(o),io=i(Se,"."),Se.forEach(o),$t=u(e),O=a(e,"H2",{class:!0});var kt=r(O);G=a(kt,"A",{id:!0,class:!0,href:!0});var Cs=r(G);Xe=a(Cs,"SPAN",{});var Es=r(Xe);b(pe.$$.fragment,Es),Es.forEach(o),Cs.forEach(o),co=u(kt),Ze=a(kt,"SPAN",{});var xs=r(Ze);fo=i(xs,"ResNetConfig"),xs.forEach(o),kt.forEach(o),bt=u(e),x=a(e,"DIV",{class:!0});var ee=r(x);b(he.$$.fragment,ee),po=u(ee),S=a(ee,"P",{});var ze=r(S);ho=i(ze,"This is the configuration class to store the configuration of a "),Ae=a(ze,"A",{href:!0});var Ts=r(Ae);mo=i(Ts,"ResNetModel"),Ts.forEach(o),uo=i(ze,`. It is used to instantiate an
ResNet model according to the specified arguments, defining the model architecture. Instantiating a configuration
with the defaults will yield a similar configuration to that of the
`),me=a(ze,"A",{href:!0,rel:!0});var ks=r(me);go=i(ks,"resnet-50"),ks.forEach(o),_o=i(ze," architecture."),ze.forEach(o),vo=u(ee),z=a(ee,"P",{});var De=r(z);wo=i(De,"Configuration objects inherit from "),Me=a(De,"A",{href:!0});var js=r(Me);$o=i(js,"PretrainedConfig"),js.forEach(o),bo=i(De,` and can be used to control the model outputs. Read the
documentation from `),Pe=a(De,"A",{href:!0});var Is=r(Pe);yo=i(Is,"PretrainedConfig"),Is.forEach(o),No=i(De," for more information."),De.forEach(o),Ro=u(ee),b(B.$$.fragment,ee),ee.forEach(o),yt=u(e),D=a(e,"H2",{class:!0});var jt=r(D);J=a(jt,"A",{id:!0,class:!0,href:!0});var Fs=r(J);Qe=a(Fs,"SPAN",{});var As=r(Qe);b(ue.$$.fragment,As),As.forEach(o),Fs.forEach(o),Co=u(jt),Ye=a(jt,"SPAN",{});var Ms=r(Ye);Eo=i(Ms,"ResNetModel"),Ms.forEach(o),jt.forEach(o),Nt=u(e),M=a(e,"DIV",{class:!0});var Le=r(M);b(ge.$$.fragment,Le),xo=u(Le),_e=a(Le,"P",{});var It=r(_e);To=i(It,`The bare ResNet model outputting raw features without any specific head on top.
This model is a PyTorch `),ve=a(It,"A",{href:!0,rel:!0});var Ps=r(ve);ko=i(Ps,"torch.nn.Module"),Ps.forEach(o),jo=i(It,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),It.forEach(o),Io=u(Le),j=a(Le,"DIV",{class:!0});var te=r(j);b(we.$$.fragment,te),Fo=u(te),L=a(te,"P",{});var Ve=r(L);Ao=i(Ve,"The "),qe=a(Ve,"A",{href:!0});var qs=r(qe);Mo=i(qs,"ResNetModel"),qs.forEach(o),Po=i(Ve," forward method, overrides the "),et=a(Ve,"CODE",{});var Os=r(et);qo=i(Os,"__call__"),Os.forEach(o),Oo=i(Ve," special method."),Ve.forEach(o),So=u(te),b(K.$$.fragment,te),zo=u(te),b(X.$$.fragment,te),te.forEach(o),Le.forEach(o),Rt=u(e),V=a(e,"H2",{class:!0});var Ft=r(V);Z=a(Ft,"A",{id:!0,class:!0,href:!0});var Ss=r(Z);tt=a(Ss,"SPAN",{});var zs=r(tt);b($e.$$.fragment,zs),zs.forEach(o),Ss.forEach(o),Do=u(Ft),ot=a(Ft,"SPAN",{});var Ds=r(ot);Lo=i(Ds,"ResNetForImageClassification"),Ds.forEach(o),Ft.forEach(o),Ct=u(e),T=a(e,"DIV",{class:!0});var oe=r(T);b(be.$$.fragment,oe),Vo=u(oe),st=a(oe,"P",{});var Ls=r(st);Wo=i(Ls,`ResNet Model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),Ls.forEach(o),Ho=u(oe),ye=a(oe,"P",{});var At=r(ye);Uo=i(At,"This model is a PyTorch "),Ne=a(At,"A",{href:!0,rel:!0});var Vs=r(Ne);Go=i(Vs,"torch.nn.Module"),Vs.forEach(o),Bo=i(At,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),At.forEach(o),Jo=u(oe),I=a(oe,"DIV",{class:!0});var se=r(I);b(Re.$$.fragment,se),Ko=u(se),W=a(se,"P",{});var We=r(W);Xo=i(We,"The "),Oe=a(We,"A",{href:!0});var Ws=r(Oe);Zo=i(Ws,"ResNetForImageClassification"),Ws.forEach(o),Qo=i(We," forward method, overrides the "),at=a(We,"CODE",{});var Hs=r(at);Yo=i(Hs,"__call__"),Hs.forEach(o),es=i(We," special method."),We.forEach(o),ts=u(se),b(Q.$$.fragment,se),os=u(se),b(Y.$$.fragment,se),se.forEach(o),oe.forEach(o),this.h()},h(){c(d,"name","hf:doc:metadata"),c(d,"content",JSON.stringify(aa)),c(h,"id","resnet"),c(h,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h,"href","#resnet"),c(_,"class","relative group"),c(H,"id","overview"),c(H,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H,"href","#overview"),c(q,"class","relative group"),c(re,"href","https://arxiv.org/abs/1512.03385"),c(re,"rel","nofollow"),c(ne,"href","https://catalog.ngc.nvidia.com/orgs/nvidia/resources/resnet_50_v1_5_for_pytorch"),c(ne,"rel","nofollow"),c(Fe,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.AutoFeatureExtractor"),c(ie,"href","https://arxiv.org/abs/1512.03385"),c(ie,"rel","nofollow"),c(ce,"width","600"),Xs(ce.src,ns="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/resnet_architecture.png")||c(ce,"src",ns),c(de,"href","https://huggingface.co/Francesco"),c(de,"rel","nofollow"),c(fe,"href","https://github.com/KaimingHe/deep-residual-networks"),c(fe,"rel","nofollow"),c(G,"id","transformers.ResNetConfig"),c(G,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G,"href","#transformers.ResNetConfig"),c(O,"class","relative group"),c(Ae,"href","/docs/transformers/pr_16925/en/model_doc/resnet#transformers.ResNetModel"),c(me,"href","https://huggingface.co/microsoft/resnet-50"),c(me,"rel","nofollow"),c(Me,"href","/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig"),c(Pe,"href","/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig"),c(x,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J,"id","transformers.ResNetModel"),c(J,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J,"href","#transformers.ResNetModel"),c(D,"class","relative group"),c(ve,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),c(ve,"rel","nofollow"),c(qe,"href","/docs/transformers/pr_16925/en/model_doc/resnet#transformers.ResNetModel"),c(j,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z,"id","transformers.ResNetForImageClassification"),c(Z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z,"href","#transformers.ResNetForImageClassification"),c(V,"class","relative group"),c(Ne,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),c(Ne,"rel","nofollow"),c(Oe,"href","/docs/transformers/pr_16925/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(I,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(e,f){t(document.head,d),p(e,w,f),p(e,_,f),t(_,h),t(h,v),y(n,v,null),t(_,g),t(_,A),t(A,Mt),p(e,dt,f),p(e,q,f),t(q,H),t(H,He),y(ae,He,null),t(q,Pt),t(q,Ue),t(Ue,qt),p(e,ft,f),p(e,E,f),t(E,Ot),t(E,re),t(re,St),t(E,zt),t(E,ne),t(ne,Dt),t(E,Lt),t(E,Ge),t(Ge,Vt),t(E,Wt),t(E,Be),t(Be,Ht),t(E,Ut),t(E,Je),t(Je,Gt),t(E,Bt),p(e,pt,f),p(e,xe,f),t(xe,Jt),p(e,ht,f),p(e,Te,f),t(Te,Kt),p(e,mt,f),p(e,ke,f),t(ke,Ke),t(Ke,Xt),p(e,ut,f),p(e,je,f),t(je,Zt),p(e,gt,f),p(e,Ie,f),t(Ie,le),t(le,Qt),t(le,Fe),t(Fe,Yt),t(le,eo),p(e,_t,f),p(e,U,f),t(U,to),t(U,ie),t(ie,oo),t(U,so),p(e,vt,f),p(e,ce,f),p(e,wt,f),p(e,P,f),t(P,ao),t(P,de),t(de,ro),t(P,no),t(P,fe),t(fe,lo),t(P,io),p(e,$t,f),p(e,O,f),t(O,G),t(G,Xe),y(pe,Xe,null),t(O,co),t(O,Ze),t(Ze,fo),p(e,bt,f),p(e,x,f),y(he,x,null),t(x,po),t(x,S),t(S,ho),t(S,Ae),t(Ae,mo),t(S,uo),t(S,me),t(me,go),t(S,_o),t(x,vo),t(x,z),t(z,wo),t(z,Me),t(Me,$o),t(z,bo),t(z,Pe),t(Pe,yo),t(z,No),t(x,Ro),y(B,x,null),p(e,yt,f),p(e,D,f),t(D,J),t(J,Qe),y(ue,Qe,null),t(D,Co),t(D,Ye),t(Ye,Eo),p(e,Nt,f),p(e,M,f),y(ge,M,null),t(M,xo),t(M,_e),t(_e,To),t(_e,ve),t(ve,ko),t(_e,jo),t(M,Io),t(M,j),y(we,j,null),t(j,Fo),t(j,L),t(L,Ao),t(L,qe),t(qe,Mo),t(L,Po),t(L,et),t(et,qo),t(L,Oo),t(j,So),y(K,j,null),t(j,zo),y(X,j,null),p(e,Rt,f),p(e,V,f),t(V,Z),t(Z,tt),y($e,tt,null),t(V,Do),t(V,ot),t(ot,Lo),p(e,Ct,f),p(e,T,f),y(be,T,null),t(T,Vo),t(T,st),t(st,Wo),t(T,Ho),t(T,ye),t(ye,Uo),t(ye,Ne),t(Ne,Go),t(ye,Bo),t(T,Jo),t(T,I),y(Re,I,null),t(I,Ko),t(I,W),t(W,Xo),t(W,Oe),t(Oe,Zo),t(W,Qo),t(W,at),t(at,Yo),t(W,es),t(I,ts),y(Q,I,null),t(I,os),y(Y,I,null),Et=!0},p(e,[f]){const Ce={};f&2&&(Ce.$$scope={dirty:f,ctx:e}),B.$set(Ce);const rt={};f&2&&(rt.$$scope={dirty:f,ctx:e}),K.$set(rt);const nt={};f&2&&(nt.$$scope={dirty:f,ctx:e}),X.$set(nt);const lt={};f&2&&(lt.$$scope={dirty:f,ctx:e}),Q.$set(lt);const Ee={};f&2&&(Ee.$$scope={dirty:f,ctx:e}),Y.$set(Ee)},i(e){Et||(N(n.$$.fragment,e),N(ae.$$.fragment,e),N(pe.$$.fragment,e),N(he.$$.fragment,e),N(B.$$.fragment,e),N(ue.$$.fragment,e),N(ge.$$.fragment,e),N(we.$$.fragment,e),N(K.$$.fragment,e),N(X.$$.fragment,e),N($e.$$.fragment,e),N(be.$$.fragment,e),N(Re.$$.fragment,e),N(Q.$$.fragment,e),N(Y.$$.fragment,e),Et=!0)},o(e){R(n.$$.fragment,e),R(ae.$$.fragment,e),R(pe.$$.fragment,e),R(he.$$.fragment,e),R(B.$$.fragment,e),R(ue.$$.fragment,e),R(ge.$$.fragment,e),R(we.$$.fragment,e),R(K.$$.fragment,e),R(X.$$.fragment,e),R($e.$$.fragment,e),R(be.$$.fragment,e),R(Re.$$.fragment,e),R(Q.$$.fragment,e),R(Y.$$.fragment,e),Et=!1},d(e){o(d),e&&o(w),e&&o(_),C(n),e&&o(dt),e&&o(q),C(ae),e&&o(ft),e&&o(E),e&&o(pt),e&&o(xe),e&&o(ht),e&&o(Te),e&&o(mt),e&&o(ke),e&&o(ut),e&&o(je),e&&o(gt),e&&o(Ie),e&&o(_t),e&&o(U),e&&o(vt),e&&o(ce),e&&o(wt),e&&o(P),e&&o($t),e&&o(O),C(pe),e&&o(bt),e&&o(x),C(he),C(B),e&&o(yt),e&&o(D),C(ue),e&&o(Nt),e&&o(M),C(ge),C(we),C(K),C(X),e&&o(Rt),e&&o(V),C($e),e&&o(Ct),e&&o(T),C(be),C(Re),C(Q),C(Y)}}}const aa={local:"resnet",sections:[{local:"overview",title:"Overview"},{local:"transformers.ResNetConfig",title:"ResNetConfig"},{local:"transformers.ResNetModel",title:"ResNetModel"},{local:"transformers.ResNetForImageClassification",title:"ResNetForImageClassification"}],title:"ResNet"};function ra(k){return Zs(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class pa extends Gs{constructor(d){super();Bs(this,d,ra,sa,Js,{})}}export{pa as default,aa as metadata};
