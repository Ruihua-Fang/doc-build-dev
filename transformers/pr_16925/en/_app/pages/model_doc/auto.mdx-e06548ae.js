import{S as j1t,i as D1t,s as G1t,e as a,k as l,w as v,t as o,M as O1t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as V1t,L as I}from"../../chunks/vendor-6b77c823.js";import{T as zLr}from"../../chunks/Tip-39098574.js";import{D as k}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as Z}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function X1t(A){let g,F,p,m,u,d,h,vo,Ql,Qc,Yr,Wl,Hl,Ew,Wc,Be,Ge,Ul,vn,Cw,Tn,Mn,ww,Jl,En,Aw,Yl,Hc,ba;return{c(){g=a("p"),F=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),vo=o(`, make sure its
`),Ql=a("code"),Qc=o("model_type"),Yr=o(" attribute is set to the same key you use when registering the config (here "),Wl=a("code"),Hl=o('"new-model"'),Ew=o(")."),Wc=l(),Be=a("p"),Ge=o("Likewise, if your "),Ul=a("code"),vn=o("NewModel"),Cw=o(" is a subclass of "),Tn=a("a"),Mn=o("PreTrainedModel"),ww=o(`, make sure its
`),Jl=a("code"),En=o("config_class"),Aw=o(` attribute is set to the same class you use when registering the model (here
`),Yl=a("code"),Hc=o("NewModelConfig"),ba=o(")."),this.h()},l(Oe){g=n(Oe,"P",{});var Me=s(g);F=r(Me,"If your "),p=n(Me,"CODE",{});var kx=s(p);m=r(kx,"NewModelConfig"),kx.forEach(t),u=r(Me," is a subclass of "),d=n(Me,"CODE",{});var Kl=s(d);h=r(Kl,"PretrainedConfig"),Kl.forEach(t),vo=r(Me,`, make sure its
`),Ql=n(Me,"CODE",{});var Sx=s(Ql);Qc=r(Sx,"model_type"),Sx.forEach(t),Yr=r(Me," attribute is set to the same key you use when registering the config (here "),Wl=n(Me,"CODE",{});var Rx=s(Wl);Hl=r(Rx,'"new-model"'),Rx.forEach(t),Ew=r(Me,")."),Me.forEach(t),Wc=i(Oe),Be=n(Oe,"P",{});var To=s(Be);Ge=r(To,"Likewise, if your "),Ul=n(To,"CODE",{});var Fa=s(Ul);vn=r(Fa,"NewModel"),Fa.forEach(t),Cw=r(To," is a subclass of "),Tn=n(To,"A",{href:!0});var Bx=s(Tn);Mn=r(Bx,"PreTrainedModel"),Bx.forEach(t),ww=r(To,`, make sure its
`),Jl=n(To,"CODE",{});var Uc=s(Jl);En=r(Uc,"config_class"),Uc.forEach(t),Aw=r(To,` attribute is set to the same class you use when registering the model (here
`),Yl=n(To,"CODE",{});var Px=s(Yl);Hc=r(Px,"NewModelConfig"),Px.forEach(t),ba=r(To,")."),To.forEach(t),this.h()},h(){c(Tn,"href","/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel")},m(Oe,Me){b(Oe,g,Me),e(g,F),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,vo),e(g,Ql),e(Ql,Qc),e(g,Yr),e(g,Wl),e(Wl,Hl),e(g,Ew),b(Oe,Wc,Me),b(Oe,Be,Me),e(Be,Ge),e(Be,Ul),e(Ul,vn),e(Be,Cw),e(Be,Tn),e(Tn,Mn),e(Be,ww),e(Be,Jl),e(Jl,En),e(Be,Aw),e(Be,Yl),e(Yl,Hc),e(Be,ba)},d(Oe){Oe&&t(g),Oe&&t(Wc),Oe&&t(Be)}}}function z1t(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q1t(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W1t(A){let g,F,p,m,u;return{c(){g=a("p"),F=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Passing "),p=n(h,"CODE",{});var vo=s(p);m=r(vo,"use_auth_token=True"),vo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,F),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function H1t(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U1t(A){let g,F,p,m,u;return{c(){g=a("p"),F=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Passing "),p=n(h,"CODE",{});var vo=s(p);m=r(vo,"use_auth_token=True"),vo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,F),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function J1t(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y1t(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K1t(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z1t(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ebt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function obt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rbt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tbt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function abt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nbt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sbt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lbt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ibt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dbt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cbt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fbt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mbt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gbt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hbt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pbt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ubt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _bt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bbt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fbt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vbt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tbt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mbt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ebt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cbt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wbt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Abt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ybt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lbt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xbt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $bt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kbt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sbt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rbt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bbt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pbt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ibt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qbt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nbt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jbt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dbt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gbt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Obt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vbt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xbt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zbt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qbt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wbt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hbt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ubt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jbt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ybt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kbt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zbt(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e5t(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o5t(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r5t(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t5t(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a5t(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n5t(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s5t(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l5t(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i5t(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d5t(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c5t(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f5t(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m5t(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g5t(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h5t(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p5t(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u5t(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _5t(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b5t(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F5t(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v5t(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T5t(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M5t(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E5t(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C5t(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w5t(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A5t(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y5t(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L5t(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x5t(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $5t(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k5t(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S5t(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R5t(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B5t(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P5t(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I5t(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q5t(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N5t(A){let g,F,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),F=o("Examples:"),p=l(),v(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);F=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,F),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j5t(A){let g,F,p,m,u,d,h,vo,Ql,Qc,Yr,Wl,Hl,Ew,Wc,Be,Ge,Ul,vn,Cw,Tn,Mn,ww,Jl,En,Aw,Yl,Hc,ba,Oe,Me,kx,Kl,Sx,Rx,To,Fa,Bx,Uc,Px,PBe,L$e,Zl,Jc,OJ,yw,IBe,VJ,qBe,x$e,Cn,NBe,XJ,jBe,DBe,zJ,GBe,OBe,$$e,Lw,k$e,Ix,VBe,S$e,Yc,R$e,ei,Kc,QJ,xw,XBe,WJ,zBe,B$e,Mo,$w,QBe,kw,WBe,qx,HBe,UBe,JBe,Sw,YBe,HJ,KBe,ZBe,ePe,vr,Rw,oPe,UJ,rPe,tPe,oi,aPe,JJ,nPe,sPe,YJ,lPe,iPe,dPe,y,Zc,KJ,cPe,fPe,Nx,mPe,gPe,hPe,ef,ZJ,pPe,uPe,jx,_Pe,bPe,FPe,of,eY,vPe,TPe,Dx,MPe,EPe,CPe,rf,oY,wPe,APe,Gx,yPe,LPe,xPe,tf,rY,$Pe,kPe,Ox,SPe,RPe,BPe,af,tY,PPe,IPe,Vx,qPe,NPe,jPe,nf,aY,DPe,GPe,Xx,OPe,VPe,XPe,sf,nY,zPe,QPe,zx,WPe,HPe,UPe,lf,sY,JPe,YPe,Qx,KPe,ZPe,eIe,df,lY,oIe,rIe,Wx,tIe,aIe,nIe,cf,iY,sIe,lIe,Hx,iIe,dIe,cIe,ff,dY,fIe,mIe,Ux,gIe,hIe,pIe,mf,cY,uIe,_Ie,Jx,bIe,FIe,vIe,gf,fY,TIe,MIe,Yx,EIe,CIe,wIe,hf,mY,AIe,yIe,Kx,LIe,xIe,$Ie,pf,gY,kIe,SIe,Zx,RIe,BIe,PIe,uf,hY,IIe,qIe,e7,NIe,jIe,DIe,_f,pY,GIe,OIe,o7,VIe,XIe,zIe,bf,uY,QIe,WIe,r7,HIe,UIe,JIe,Ff,_Y,YIe,KIe,t7,ZIe,eqe,oqe,vf,bY,rqe,tqe,a7,aqe,nqe,sqe,Tf,FY,lqe,iqe,n7,dqe,cqe,fqe,Mf,vY,mqe,gqe,s7,hqe,pqe,uqe,Ef,TY,_qe,bqe,l7,Fqe,vqe,Tqe,Cf,MY,Mqe,Eqe,i7,Cqe,wqe,Aqe,wf,EY,yqe,Lqe,d7,xqe,$qe,kqe,Af,CY,Sqe,Rqe,c7,Bqe,Pqe,Iqe,yf,wY,qqe,Nqe,f7,jqe,Dqe,Gqe,Lf,AY,Oqe,Vqe,m7,Xqe,zqe,Qqe,xf,yY,Wqe,Hqe,g7,Uqe,Jqe,Yqe,$f,LY,Kqe,Zqe,h7,eNe,oNe,rNe,kf,xY,tNe,aNe,p7,nNe,sNe,lNe,Sf,$Y,iNe,dNe,u7,cNe,fNe,mNe,Rf,kY,gNe,hNe,_7,pNe,uNe,_Ne,Bf,SY,bNe,FNe,b7,vNe,TNe,MNe,Pf,RY,ENe,CNe,F7,wNe,ANe,yNe,If,BY,LNe,xNe,v7,$Ne,kNe,SNe,qf,PY,RNe,BNe,T7,PNe,INe,qNe,Nf,IY,NNe,jNe,M7,DNe,GNe,ONe,jf,qY,VNe,XNe,E7,zNe,QNe,WNe,Df,NY,HNe,UNe,C7,JNe,YNe,KNe,Gf,jY,ZNe,eje,w7,oje,rje,tje,Of,DY,aje,nje,A7,sje,lje,ije,Vf,GY,dje,cje,y7,fje,mje,gje,Xf,OY,hje,pje,L7,uje,_je,bje,zf,VY,Fje,vje,x7,Tje,Mje,Eje,Qf,XY,Cje,wje,$7,Aje,yje,Lje,Wf,zY,xje,$je,k7,kje,Sje,Rje,Hf,QY,Bje,Pje,S7,Ije,qje,Nje,Uf,WY,jje,Dje,R7,Gje,Oje,Vje,Jf,HY,Xje,zje,B7,Qje,Wje,Hje,Yf,UY,Uje,Jje,P7,Yje,Kje,Zje,Kf,JY,eDe,oDe,I7,rDe,tDe,aDe,Zf,YY,nDe,sDe,q7,lDe,iDe,dDe,em,KY,cDe,fDe,N7,mDe,gDe,hDe,om,ZY,pDe,uDe,j7,_De,bDe,FDe,rm,eK,vDe,TDe,D7,MDe,EDe,CDe,tm,oK,wDe,ADe,G7,yDe,LDe,xDe,am,rK,$De,kDe,tK,SDe,RDe,BDe,nm,aK,PDe,IDe,O7,qDe,NDe,jDe,sm,nK,DDe,GDe,V7,ODe,VDe,XDe,lm,sK,zDe,QDe,X7,WDe,HDe,UDe,im,lK,JDe,YDe,z7,KDe,ZDe,eGe,dm,iK,oGe,rGe,Q7,tGe,aGe,nGe,cm,dK,sGe,lGe,W7,iGe,dGe,cGe,fm,cK,fGe,mGe,H7,gGe,hGe,pGe,mm,fK,uGe,_Ge,U7,bGe,FGe,vGe,gm,mK,TGe,MGe,J7,EGe,CGe,wGe,hm,gK,AGe,yGe,Y7,LGe,xGe,$Ge,pm,hK,kGe,SGe,K7,RGe,BGe,PGe,um,pK,IGe,qGe,Z7,NGe,jGe,DGe,_m,uK,GGe,OGe,e$,VGe,XGe,zGe,bm,_K,QGe,WGe,o$,HGe,UGe,JGe,Fm,bK,YGe,KGe,r$,ZGe,eOe,oOe,vm,FK,rOe,tOe,t$,aOe,nOe,sOe,Tm,vK,lOe,iOe,a$,dOe,cOe,fOe,Mm,TK,mOe,gOe,n$,hOe,pOe,uOe,Em,MK,_Oe,bOe,s$,FOe,vOe,TOe,Cm,EK,MOe,EOe,l$,COe,wOe,AOe,wm,CK,yOe,LOe,i$,xOe,$Oe,kOe,Am,wK,SOe,ROe,d$,BOe,POe,IOe,ym,AK,qOe,NOe,c$,jOe,DOe,GOe,Lm,yK,OOe,VOe,f$,XOe,zOe,QOe,xm,LK,WOe,HOe,m$,UOe,JOe,YOe,$m,xK,KOe,ZOe,g$,eVe,oVe,rVe,km,$K,tVe,aVe,h$,nVe,sVe,lVe,Sm,kK,iVe,dVe,p$,cVe,fVe,mVe,Rm,SK,gVe,hVe,u$,pVe,uVe,_Ve,Bm,RK,bVe,FVe,_$,vVe,TVe,MVe,Pm,BK,EVe,CVe,b$,wVe,AVe,yVe,Im,PK,LVe,xVe,F$,$Ve,kVe,SVe,qm,IK,RVe,BVe,v$,PVe,IVe,qVe,Nm,qK,NVe,jVe,T$,DVe,GVe,OVe,jm,NK,VVe,XVe,M$,zVe,QVe,WVe,Dm,jK,HVe,UVe,E$,JVe,YVe,KVe,Gm,DK,ZVe,eXe,C$,oXe,rXe,tXe,Om,GK,aXe,nXe,w$,sXe,lXe,iXe,Vm,OK,dXe,cXe,A$,fXe,mXe,gXe,Xm,hXe,zm,Bw,pXe,VK,uXe,P$e,ri,Qm,XK,Pw,_Xe,zK,bXe,I$e,Eo,Iw,FXe,qw,vXe,y$,TXe,MXe,EXe,Nw,CXe,QK,wXe,AXe,yXe,Tr,jw,LXe,WK,xXe,$Xe,va,kXe,HK,SXe,RXe,UK,BXe,PXe,JK,IXe,qXe,NXe,S,wn,YK,jXe,DXe,L$,GXe,OXe,x$,VXe,XXe,zXe,An,KK,QXe,WXe,$$,HXe,UXe,k$,JXe,YXe,KXe,yn,ZK,ZXe,eze,S$,oze,rze,R$,tze,aze,nze,Wm,eZ,sze,lze,B$,ize,dze,cze,Ln,oZ,fze,mze,P$,gze,hze,I$,pze,uze,_ze,Hm,rZ,bze,Fze,q$,vze,Tze,Mze,Um,tZ,Eze,Cze,N$,wze,Aze,yze,Jm,aZ,Lze,xze,j$,$ze,kze,Sze,xn,nZ,Rze,Bze,D$,Pze,Ize,G$,qze,Nze,jze,$n,sZ,Dze,Gze,O$,Oze,Vze,V$,Xze,zze,Qze,kn,lZ,Wze,Hze,X$,Uze,Jze,z$,Yze,Kze,Zze,Ym,iZ,eQe,oQe,Q$,rQe,tQe,aQe,Km,dZ,nQe,sQe,W$,lQe,iQe,dQe,Sn,cZ,cQe,fQe,H$,mQe,gQe,U$,hQe,pQe,uQe,Zm,fZ,_Qe,bQe,J$,FQe,vQe,TQe,Rn,mZ,MQe,EQe,Y$,CQe,wQe,K$,AQe,yQe,LQe,Bn,gZ,xQe,$Qe,Z$,kQe,SQe,ek,RQe,BQe,PQe,Pn,hZ,IQe,qQe,ok,NQe,jQe,pZ,DQe,GQe,OQe,eg,uZ,VQe,XQe,rk,zQe,QQe,WQe,In,_Z,HQe,UQe,tk,JQe,YQe,ak,KQe,ZQe,eWe,og,bZ,oWe,rWe,nk,tWe,aWe,nWe,qn,FZ,sWe,lWe,sk,iWe,dWe,lk,cWe,fWe,mWe,Nn,vZ,gWe,hWe,ik,pWe,uWe,dk,_We,bWe,FWe,jn,TZ,vWe,TWe,ck,MWe,EWe,fk,CWe,wWe,AWe,rg,MZ,yWe,LWe,mk,xWe,$We,kWe,Dn,EZ,SWe,RWe,gk,BWe,PWe,hk,IWe,qWe,NWe,tg,CZ,jWe,DWe,pk,GWe,OWe,VWe,Gn,wZ,XWe,zWe,uk,QWe,WWe,_k,HWe,UWe,JWe,On,AZ,YWe,KWe,bk,ZWe,eHe,Fk,oHe,rHe,tHe,Vn,yZ,aHe,nHe,vk,sHe,lHe,Tk,iHe,dHe,cHe,Xn,LZ,fHe,mHe,Mk,gHe,hHe,Ek,pHe,uHe,_He,ag,xZ,bHe,FHe,Ck,vHe,THe,MHe,zn,$Z,EHe,CHe,wk,wHe,AHe,Ak,yHe,LHe,xHe,Qn,kZ,$He,kHe,yk,SHe,RHe,Lk,BHe,PHe,IHe,Wn,SZ,qHe,NHe,xk,jHe,DHe,$k,GHe,OHe,VHe,Hn,RZ,XHe,zHe,kk,QHe,WHe,Sk,HHe,UHe,JHe,Un,BZ,YHe,KHe,Rk,ZHe,eUe,Bk,oUe,rUe,tUe,Jn,PZ,aUe,nUe,Pk,sUe,lUe,Ik,iUe,dUe,cUe,ng,IZ,fUe,mUe,qk,gUe,hUe,pUe,Yn,qZ,uUe,_Ue,Nk,bUe,FUe,jk,vUe,TUe,MUe,sg,NZ,EUe,CUe,Dk,wUe,AUe,yUe,lg,jZ,LUe,xUe,Gk,$Ue,kUe,SUe,Kn,DZ,RUe,BUe,Ok,PUe,IUe,Vk,qUe,NUe,jUe,Zn,GZ,DUe,GUe,Xk,OUe,VUe,zk,XUe,zUe,QUe,ig,OZ,WUe,HUe,Qk,UUe,JUe,YUe,es,VZ,KUe,ZUe,Wk,eJe,oJe,Hk,rJe,tJe,aJe,os,XZ,nJe,sJe,Uk,lJe,iJe,Jk,dJe,cJe,fJe,rs,zZ,mJe,gJe,Yk,hJe,pJe,Kk,uJe,_Je,bJe,ts,QZ,FJe,vJe,Zk,TJe,MJe,eS,EJe,CJe,wJe,as,WZ,AJe,yJe,oS,LJe,xJe,rS,$Je,kJe,SJe,dg,HZ,RJe,BJe,tS,PJe,IJe,qJe,cg,UZ,NJe,jJe,aS,DJe,GJe,OJe,fg,JZ,VJe,XJe,nS,zJe,QJe,WJe,mg,YZ,HJe,UJe,sS,JJe,YJe,KJe,ns,KZ,ZJe,eYe,lS,oYe,rYe,iS,tYe,aYe,nYe,gg,ZZ,sYe,lYe,dS,iYe,dYe,cYe,ss,eee,fYe,mYe,cS,gYe,hYe,fS,pYe,uYe,_Ye,ls,oee,bYe,FYe,mS,vYe,TYe,gS,MYe,EYe,CYe,is,ree,wYe,AYe,hS,yYe,LYe,pS,xYe,$Ye,kYe,ds,tee,SYe,RYe,uS,BYe,PYe,_S,IYe,qYe,NYe,cs,aee,jYe,DYe,bS,GYe,OYe,FS,VYe,XYe,zYe,fs,nee,QYe,WYe,vS,HYe,UYe,TS,JYe,YYe,KYe,hg,see,ZYe,eKe,MS,oKe,rKe,tKe,pg,lee,aKe,nKe,ES,sKe,lKe,iKe,ms,iee,dKe,cKe,CS,fKe,mKe,wS,gKe,hKe,pKe,gs,dee,uKe,_Ke,AS,bKe,FKe,yS,vKe,TKe,MKe,hs,cee,EKe,CKe,LS,wKe,AKe,xS,yKe,LKe,xKe,ug,fee,$Ke,kKe,$S,SKe,RKe,BKe,_g,mee,PKe,IKe,kS,qKe,NKe,jKe,bg,gee,DKe,GKe,SS,OKe,VKe,XKe,Fg,hee,zKe,QKe,RS,WKe,HKe,UKe,ps,pee,JKe,YKe,BS,KKe,ZKe,PS,eZe,oZe,rZe,vg,uee,tZe,aZe,IS,nZe,sZe,lZe,Tg,_ee,iZe,dZe,qS,cZe,fZe,mZe,us,bee,gZe,hZe,NS,pZe,uZe,jS,_Ze,bZe,FZe,_s,Fee,vZe,TZe,DS,MZe,EZe,GS,CZe,wZe,AZe,Mg,yZe,Eg,Dw,LZe,vee,xZe,q$e,ti,Cg,Tee,Gw,$Ze,Mee,kZe,N$e,Co,Ow,SZe,Vw,RZe,OS,BZe,PZe,IZe,Xw,qZe,Eee,NZe,jZe,DZe,Ve,zw,GZe,Cee,OZe,VZe,Ta,XZe,wee,zZe,QZe,Aee,WZe,HZe,yee,UZe,JZe,YZe,fe,wg,Lee,KZe,ZZe,VS,eeo,oeo,reo,Ag,xee,teo,aeo,XS,neo,seo,leo,yg,$ee,ieo,deo,zS,ceo,feo,meo,Lg,kee,geo,heo,QS,peo,ueo,_eo,xg,See,beo,Feo,WS,veo,Teo,Meo,$g,Ree,Eeo,Ceo,HS,weo,Aeo,yeo,kg,Bee,Leo,xeo,US,$eo,keo,Seo,Sg,Pee,Reo,Beo,JS,Peo,Ieo,qeo,Rg,Iee,Neo,jeo,YS,Deo,Geo,Oeo,Bg,qee,Veo,Xeo,KS,zeo,Qeo,Weo,Pg,Nee,Heo,Ueo,ZS,Jeo,Yeo,Keo,Ig,jee,Zeo,eoo,eR,ooo,roo,too,qg,Dee,aoo,noo,oR,soo,loo,ioo,Ng,Gee,doo,coo,rR,foo,moo,goo,jg,Oee,hoo,poo,tR,uoo,_oo,boo,Dg,Vee,Foo,voo,aR,Too,Moo,Eoo,Gg,Xee,Coo,woo,nR,Aoo,yoo,Loo,Og,zee,xoo,$oo,sR,koo,Soo,Roo,Vg,Boo,Xg,Poo,zg,Qw,Ioo,Qee,qoo,j$e,ai,Qg,Wee,Ww,Noo,Hee,joo,D$e,wo,Hw,Doo,Uw,Goo,lR,Ooo,Voo,Xoo,Jw,zoo,Uee,Qoo,Woo,Hoo,Xe,Yw,Uoo,Jee,Joo,Yoo,ni,Koo,Yee,Zoo,ero,Kee,oro,rro,tro,Pe,Wg,Zee,aro,nro,iR,sro,lro,iro,Hg,eoe,dro,cro,dR,fro,mro,gro,Ug,ooe,hro,pro,cR,uro,_ro,bro,Jg,roe,Fro,vro,fR,Tro,Mro,Ero,Yg,toe,Cro,wro,mR,Aro,yro,Lro,Kg,aoe,xro,$ro,gR,kro,Sro,Rro,Zg,noe,Bro,Pro,hR,Iro,qro,Nro,eh,soe,jro,Dro,pR,Gro,Oro,Vro,oh,Xro,rh,zro,th,Kw,Qro,loe,Wro,G$e,si,ah,ioe,Zw,Hro,doe,Uro,O$e,Ao,eA,Jro,li,Yro,uR,Kro,Zro,_R,eto,oto,rto,oA,tto,coe,ato,nto,sto,Kr,rA,lto,foe,ito,dto,ii,cto,moe,fto,mto,bR,gto,hto,pto,nh,uto,ze,tA,_to,goe,bto,Fto,Ma,vto,hoe,Tto,Mto,poe,Eto,Cto,uoe,wto,Ato,yto,x,sh,_oe,Lto,xto,FR,$to,kto,Sto,lh,boe,Rto,Bto,vR,Pto,Ito,qto,ih,Foe,Nto,jto,TR,Dto,Gto,Oto,dh,voe,Vto,Xto,MR,zto,Qto,Wto,ch,Toe,Hto,Uto,ER,Jto,Yto,Kto,fh,Moe,Zto,eao,CR,oao,rao,tao,mh,Eoe,aao,nao,wR,sao,lao,iao,gh,Coe,dao,cao,AR,fao,mao,gao,hh,woe,hao,pao,yR,uao,_ao,bao,ph,Aoe,Fao,vao,LR,Tao,Mao,Eao,uh,yoe,Cao,wao,xR,Aao,yao,Lao,_h,Loe,xao,$ao,$R,kao,Sao,Rao,bh,xoe,Bao,Pao,kR,Iao,qao,Nao,Fh,$oe,jao,Dao,SR,Gao,Oao,Vao,vh,koe,Xao,zao,RR,Qao,Wao,Hao,Th,Soe,Uao,Jao,BR,Yao,Kao,Zao,Mh,Roe,eno,ono,PR,rno,tno,ano,Eh,Boe,nno,sno,IR,lno,ino,dno,Ch,Poe,cno,fno,qR,mno,gno,hno,wh,Ioe,pno,uno,NR,_no,bno,Fno,Ah,qoe,vno,Tno,jR,Mno,Eno,Cno,yh,Noe,wno,Ano,DR,yno,Lno,xno,Lh,joe,$no,kno,GR,Sno,Rno,Bno,xh,Doe,Pno,Ino,OR,qno,Nno,jno,$h,Goe,Dno,Gno,VR,Ono,Vno,Xno,kh,Ooe,zno,Qno,XR,Wno,Hno,Uno,Sh,Voe,Jno,Yno,zR,Kno,Zno,eso,Rh,Xoe,oso,rso,QR,tso,aso,nso,bs,zoe,sso,lso,WR,iso,dso,HR,cso,fso,mso,Bh,Qoe,gso,hso,UR,pso,uso,_so,Ph,Woe,bso,Fso,JR,vso,Tso,Mso,Ih,Hoe,Eso,Cso,YR,wso,Aso,yso,qh,Uoe,Lso,xso,KR,$so,kso,Sso,Nh,Joe,Rso,Bso,ZR,Pso,Iso,qso,jh,Yoe,Nso,jso,eB,Dso,Gso,Oso,Dh,Koe,Vso,Xso,oB,zso,Qso,Wso,Gh,Zoe,Hso,Uso,rB,Jso,Yso,Kso,Oh,ere,Zso,elo,tB,olo,rlo,tlo,Vh,ore,alo,nlo,aB,slo,llo,ilo,Xh,rre,dlo,clo,nB,flo,mlo,glo,zh,tre,hlo,plo,sB,ulo,_lo,blo,Qh,are,Flo,vlo,lB,Tlo,Mlo,Elo,Wh,nre,Clo,wlo,iB,Alo,ylo,Llo,Hh,sre,xlo,$lo,dB,klo,Slo,Rlo,Uh,lre,Blo,Plo,cB,Ilo,qlo,Nlo,Jh,ire,jlo,Dlo,fB,Glo,Olo,Vlo,Yh,dre,Xlo,zlo,mB,Qlo,Wlo,Hlo,Kh,cre,Ulo,Jlo,gB,Ylo,Klo,Zlo,Zh,fre,eio,oio,hB,rio,tio,aio,ep,mre,nio,sio,pB,lio,iio,dio,op,gre,cio,fio,uB,mio,gio,hio,rp,hre,pio,uio,_B,_io,bio,Fio,tp,pre,vio,Tio,bB,Mio,Eio,Cio,ap,ure,wio,Aio,FB,yio,Lio,xio,np,_re,$io,kio,vB,Sio,Rio,Bio,sp,bre,Pio,Iio,TB,qio,Nio,jio,lp,Fre,Dio,Gio,MB,Oio,Vio,Xio,ip,vre,zio,Qio,Tre,Wio,Hio,Uio,dp,Mre,Jio,Yio,EB,Kio,Zio,edo,cp,Ere,odo,rdo,CB,tdo,ado,ndo,fp,Cre,sdo,ldo,wB,ido,ddo,cdo,mp,wre,fdo,mdo,AB,gdo,hdo,pdo,gp,Are,udo,_do,yB,bdo,Fdo,vdo,hp,yre,Tdo,Mdo,LB,Edo,Cdo,wdo,pp,Lre,Ado,ydo,xB,Ldo,xdo,$do,up,xre,kdo,Sdo,$B,Rdo,Bdo,Pdo,_p,$re,Ido,qdo,kB,Ndo,jdo,Ddo,bp,kre,Gdo,Odo,SB,Vdo,Xdo,zdo,Fp,Sre,Qdo,Wdo,RB,Hdo,Udo,Jdo,vp,Rre,Ydo,Kdo,BB,Zdo,eco,oco,Tp,Bre,rco,tco,PB,aco,nco,sco,Mp,Pre,lco,ico,IB,dco,cco,fco,Ep,Ire,mco,gco,qB,hco,pco,uco,Cp,qre,_co,bco,NB,Fco,vco,Tco,wp,Nre,Mco,Eco,jB,Cco,wco,Aco,Ap,jre,yco,Lco,DB,xco,$co,kco,yp,Dre,Sco,Rco,GB,Bco,Pco,Ico,Lp,Gre,qco,Nco,OB,jco,Dco,Gco,xp,Ore,Oco,Vco,VB,Xco,zco,Qco,$p,Vre,Wco,Hco,XB,Uco,Jco,Yco,kp,Xre,Kco,Zco,zB,efo,ofo,rfo,Sp,zre,tfo,afo,QB,nfo,sfo,lfo,Rp,Qre,ifo,dfo,WB,cfo,ffo,mfo,Bp,Wre,gfo,hfo,HB,pfo,ufo,_fo,Pp,Hre,bfo,Ffo,UB,vfo,Tfo,Mfo,Ip,Ure,Efo,Cfo,JB,wfo,Afo,yfo,qp,Jre,Lfo,xfo,YB,$fo,kfo,Sfo,Np,Yre,Rfo,Bfo,KB,Pfo,Ifo,qfo,jp,Kre,Nfo,jfo,ZB,Dfo,Gfo,Ofo,Dp,Zre,Vfo,Xfo,eP,zfo,Qfo,Wfo,Gp,ete,Hfo,Ufo,oP,Jfo,Yfo,Kfo,Op,Zfo,ote,emo,omo,rte,rmo,tmo,Vp,V$e,di,Xp,tte,aA,amo,ate,nmo,X$e,yo,nA,smo,ci,lmo,rP,imo,dmo,tP,cmo,fmo,mmo,sA,gmo,nte,hmo,pmo,umo,Zr,lA,_mo,ste,bmo,Fmo,fi,vmo,lte,Tmo,Mmo,aP,Emo,Cmo,wmo,zp,Amo,Qe,iA,ymo,ite,Lmo,xmo,Ea,$mo,dte,kmo,Smo,cte,Rmo,Bmo,fte,Pmo,Imo,qmo,G,Qp,mte,Nmo,jmo,nP,Dmo,Gmo,Omo,Wp,gte,Vmo,Xmo,sP,zmo,Qmo,Wmo,Hp,hte,Hmo,Umo,lP,Jmo,Ymo,Kmo,Up,pte,Zmo,ego,iP,ogo,rgo,tgo,Jp,ute,ago,ngo,dP,sgo,lgo,igo,Yp,_te,dgo,cgo,cP,fgo,mgo,ggo,Kp,bte,hgo,pgo,fP,ugo,_go,bgo,Zp,Fte,Fgo,vgo,mP,Tgo,Mgo,Ego,eu,vte,Cgo,wgo,gP,Ago,ygo,Lgo,ou,Tte,xgo,$go,hP,kgo,Sgo,Rgo,ru,Mte,Bgo,Pgo,pP,Igo,qgo,Ngo,tu,Ete,jgo,Dgo,uP,Ggo,Ogo,Vgo,au,Cte,Xgo,zgo,_P,Qgo,Wgo,Hgo,nu,wte,Ugo,Jgo,bP,Ygo,Kgo,Zgo,su,Ate,eho,oho,FP,rho,tho,aho,lu,yte,nho,sho,vP,lho,iho,dho,iu,Lte,cho,fho,TP,mho,gho,hho,du,xte,pho,uho,MP,_ho,bho,Fho,cu,$te,vho,Tho,EP,Mho,Eho,Cho,fu,kte,who,Aho,CP,yho,Lho,xho,mu,Ste,$ho,kho,wP,Sho,Rho,Bho,gu,Rte,Pho,Iho,AP,qho,Nho,jho,hu,Bte,Dho,Gho,yP,Oho,Vho,Xho,pu,Pte,zho,Qho,LP,Who,Hho,Uho,uu,Ite,Jho,Yho,xP,Kho,Zho,epo,_u,qte,opo,rpo,$P,tpo,apo,npo,bu,Nte,spo,lpo,kP,ipo,dpo,cpo,Fu,jte,fpo,mpo,SP,gpo,hpo,ppo,vu,Dte,upo,_po,RP,bpo,Fpo,vpo,Tu,Gte,Tpo,Mpo,BP,Epo,Cpo,wpo,Mu,Ote,Apo,ypo,PP,Lpo,xpo,$po,Eu,Vte,kpo,Spo,IP,Rpo,Bpo,Ppo,Cu,Xte,Ipo,qpo,qP,Npo,jpo,Dpo,wu,zte,Gpo,Opo,NP,Vpo,Xpo,zpo,Au,Qte,Qpo,Wpo,jP,Hpo,Upo,Jpo,yu,Wte,Ypo,Kpo,DP,Zpo,euo,ouo,Lu,Hte,ruo,tuo,GP,auo,nuo,suo,xu,Ute,luo,iuo,OP,duo,cuo,fuo,$u,Jte,muo,guo,VP,huo,puo,uuo,ku,_uo,Yte,buo,Fuo,Kte,vuo,Tuo,Su,z$e,mi,Ru,Zte,dA,Muo,eae,Euo,Q$e,Lo,cA,Cuo,gi,wuo,XP,Auo,yuo,zP,Luo,xuo,$uo,fA,kuo,oae,Suo,Ruo,Buo,et,mA,Puo,rae,Iuo,quo,hi,Nuo,tae,juo,Duo,QP,Guo,Ouo,Vuo,Bu,Xuo,We,gA,zuo,aae,Quo,Wuo,Ca,Huo,nae,Uuo,Juo,sae,Yuo,Kuo,lae,Zuo,e_o,o_o,z,Pu,iae,r_o,t_o,WP,a_o,n_o,s_o,Iu,dae,l_o,i_o,HP,d_o,c_o,f_o,qu,cae,m_o,g_o,UP,h_o,p_o,u_o,Nu,fae,__o,b_o,JP,F_o,v_o,T_o,ju,mae,M_o,E_o,YP,C_o,w_o,A_o,Du,gae,y_o,L_o,KP,x_o,$_o,k_o,Gu,hae,S_o,R_o,ZP,B_o,P_o,I_o,Ou,pae,q_o,N_o,eI,j_o,D_o,G_o,Vu,uae,O_o,V_o,oI,X_o,z_o,Q_o,Xu,_ae,W_o,H_o,rI,U_o,J_o,Y_o,zu,bae,K_o,Z_o,tI,e2o,o2o,r2o,Qu,Fae,t2o,a2o,aI,n2o,s2o,l2o,Wu,vae,i2o,d2o,nI,c2o,f2o,m2o,Hu,Tae,g2o,h2o,sI,p2o,u2o,_2o,Uu,Mae,b2o,F2o,lI,v2o,T2o,M2o,Ju,Eae,E2o,C2o,iI,w2o,A2o,y2o,Yu,Cae,L2o,x2o,dI,$2o,k2o,S2o,Ku,wae,R2o,B2o,cI,P2o,I2o,q2o,Zu,Aae,N2o,j2o,fI,D2o,G2o,O2o,e_,yae,V2o,X2o,mI,z2o,Q2o,W2o,o_,Lae,H2o,U2o,gI,J2o,Y2o,K2o,r_,xae,Z2o,e1o,$ae,o1o,r1o,t1o,t_,kae,a1o,n1o,hI,s1o,l1o,i1o,a_,Sae,d1o,c1o,pI,f1o,m1o,g1o,n_,Rae,h1o,p1o,uI,u1o,_1o,b1o,s_,Bae,F1o,v1o,_I,T1o,M1o,E1o,l_,Pae,C1o,w1o,bI,A1o,y1o,L1o,i_,Iae,x1o,$1o,FI,k1o,S1o,R1o,d_,qae,B1o,P1o,vI,I1o,q1o,N1o,c_,Nae,j1o,D1o,TI,G1o,O1o,V1o,f_,jae,X1o,z1o,MI,Q1o,W1o,H1o,m_,Dae,U1o,J1o,EI,Y1o,K1o,Z1o,g_,Gae,ebo,obo,CI,rbo,tbo,abo,h_,Oae,nbo,sbo,wI,lbo,ibo,dbo,p_,Vae,cbo,fbo,AI,mbo,gbo,hbo,u_,pbo,Xae,ubo,_bo,zae,bbo,Fbo,__,W$e,pi,b_,Qae,hA,vbo,Wae,Tbo,H$e,xo,pA,Mbo,ui,Ebo,yI,Cbo,wbo,LI,Abo,ybo,Lbo,uA,xbo,Hae,$bo,kbo,Sbo,ot,_A,Rbo,Uae,Bbo,Pbo,_i,Ibo,Jae,qbo,Nbo,xI,jbo,Dbo,Gbo,F_,Obo,He,bA,Vbo,Yae,Xbo,zbo,wa,Qbo,Kae,Wbo,Hbo,Zae,Ubo,Jbo,ene,Ybo,Kbo,Zbo,Q,v_,one,e5o,o5o,$I,r5o,t5o,a5o,T_,rne,n5o,s5o,kI,l5o,i5o,d5o,M_,tne,c5o,f5o,SI,m5o,g5o,h5o,E_,ane,p5o,u5o,RI,_5o,b5o,F5o,C_,nne,v5o,T5o,BI,M5o,E5o,C5o,w_,sne,w5o,A5o,PI,y5o,L5o,x5o,A_,lne,$5o,k5o,II,S5o,R5o,B5o,y_,ine,P5o,I5o,qI,q5o,N5o,j5o,L_,dne,D5o,G5o,NI,O5o,V5o,X5o,x_,cne,z5o,Q5o,jI,W5o,H5o,U5o,$_,fne,J5o,Y5o,DI,K5o,Z5o,eFo,k_,mne,oFo,rFo,GI,tFo,aFo,nFo,S_,gne,sFo,lFo,OI,iFo,dFo,cFo,R_,hne,fFo,mFo,VI,gFo,hFo,pFo,B_,pne,uFo,_Fo,XI,bFo,FFo,vFo,P_,une,TFo,MFo,zI,EFo,CFo,wFo,I_,_ne,AFo,yFo,QI,LFo,xFo,$Fo,q_,bne,kFo,SFo,WI,RFo,BFo,PFo,N_,Fne,IFo,qFo,HI,NFo,jFo,DFo,j_,vne,GFo,OFo,UI,VFo,XFo,zFo,D_,Tne,QFo,WFo,JI,HFo,UFo,JFo,G_,Mne,YFo,KFo,YI,ZFo,evo,ovo,O_,Ene,rvo,tvo,KI,avo,nvo,svo,V_,Cne,lvo,ivo,wne,dvo,cvo,fvo,X_,Ane,mvo,gvo,ZI,hvo,pvo,uvo,z_,yne,_vo,bvo,eq,Fvo,vvo,Tvo,Q_,Lne,Mvo,Evo,oq,Cvo,wvo,Avo,W_,xne,yvo,Lvo,rq,xvo,$vo,kvo,H_,$ne,Svo,Rvo,tq,Bvo,Pvo,Ivo,U_,kne,qvo,Nvo,aq,jvo,Dvo,Gvo,J_,Sne,Ovo,Vvo,Rne,Xvo,zvo,Qvo,Y_,Bne,Wvo,Hvo,nq,Uvo,Jvo,Yvo,K_,Pne,Kvo,Zvo,sq,e6o,o6o,r6o,Z_,Ine,t6o,a6o,lq,n6o,s6o,l6o,e2,qne,i6o,d6o,iq,c6o,f6o,m6o,o2,g6o,Nne,h6o,p6o,jne,u6o,_6o,r2,U$e,bi,t2,Dne,FA,b6o,Gne,F6o,J$e,$o,vA,v6o,Fi,T6o,dq,M6o,E6o,cq,C6o,w6o,A6o,TA,y6o,One,L6o,x6o,$6o,rt,MA,k6o,Vne,S6o,R6o,vi,B6o,Xne,P6o,I6o,fq,q6o,N6o,j6o,a2,D6o,Ue,EA,G6o,zne,O6o,V6o,Aa,X6o,Qne,z6o,Q6o,Wne,W6o,H6o,Hne,U6o,J6o,Y6o,pe,n2,Une,K6o,Z6o,mq,eTo,oTo,rTo,s2,Jne,tTo,aTo,gq,nTo,sTo,lTo,l2,Yne,iTo,dTo,hq,cTo,fTo,mTo,i2,Kne,gTo,hTo,pq,pTo,uTo,_To,d2,Zne,bTo,FTo,uq,vTo,TTo,MTo,c2,ese,ETo,CTo,_q,wTo,ATo,yTo,f2,ose,LTo,xTo,bq,$To,kTo,STo,m2,rse,RTo,BTo,Fq,PTo,ITo,qTo,g2,tse,NTo,jTo,vq,DTo,GTo,OTo,h2,ase,VTo,XTo,Tq,zTo,QTo,WTo,p2,nse,HTo,UTo,Mq,JTo,YTo,KTo,u2,sse,ZTo,eMo,Eq,oMo,rMo,tMo,_2,lse,aMo,nMo,Cq,sMo,lMo,iMo,b2,ise,dMo,cMo,wq,fMo,mMo,gMo,F2,dse,hMo,pMo,Aq,uMo,_Mo,bMo,v2,cse,FMo,vMo,yq,TMo,MMo,EMo,T2,CMo,fse,wMo,AMo,mse,yMo,LMo,M2,Y$e,Ti,E2,gse,CA,xMo,hse,$Mo,K$e,ko,wA,kMo,Mi,SMo,Lq,RMo,BMo,xq,PMo,IMo,qMo,AA,NMo,pse,jMo,DMo,GMo,tt,yA,OMo,use,VMo,XMo,Ei,zMo,_se,QMo,WMo,$q,HMo,UMo,JMo,C2,YMo,Je,LA,KMo,bse,ZMo,e9o,ya,o9o,Fse,r9o,t9o,vse,a9o,n9o,Tse,s9o,l9o,i9o,q,w2,Mse,d9o,c9o,kq,f9o,m9o,g9o,A2,Ese,h9o,p9o,Sq,u9o,_9o,b9o,y2,Cse,F9o,v9o,Rq,T9o,M9o,E9o,L2,wse,C9o,w9o,Bq,A9o,y9o,L9o,x2,Ase,x9o,$9o,Pq,k9o,S9o,R9o,$2,yse,B9o,P9o,Iq,I9o,q9o,N9o,k2,Lse,j9o,D9o,qq,G9o,O9o,V9o,S2,xse,X9o,z9o,Nq,Q9o,W9o,H9o,R2,$se,U9o,J9o,jq,Y9o,K9o,Z9o,B2,kse,e4o,o4o,Dq,r4o,t4o,a4o,P2,Sse,n4o,s4o,Gq,l4o,i4o,d4o,I2,Rse,c4o,f4o,Oq,m4o,g4o,h4o,q2,Bse,p4o,u4o,Vq,_4o,b4o,F4o,N2,Pse,v4o,T4o,Xq,M4o,E4o,C4o,j2,Ise,w4o,A4o,zq,y4o,L4o,x4o,D2,qse,$4o,k4o,Qq,S4o,R4o,B4o,G2,Nse,P4o,I4o,Wq,q4o,N4o,j4o,O2,jse,D4o,G4o,Hq,O4o,V4o,X4o,V2,Dse,z4o,Q4o,Uq,W4o,H4o,U4o,X2,Gse,J4o,Y4o,Jq,K4o,Z4o,eEo,z2,Ose,oEo,rEo,Yq,tEo,aEo,nEo,Q2,Vse,sEo,lEo,Kq,iEo,dEo,cEo,W2,Xse,fEo,mEo,Zq,gEo,hEo,pEo,H2,zse,uEo,_Eo,eN,bEo,FEo,vEo,U2,Qse,TEo,MEo,oN,EEo,CEo,wEo,J2,Wse,AEo,yEo,rN,LEo,xEo,$Eo,Y2,Hse,kEo,SEo,tN,REo,BEo,PEo,K2,Use,IEo,qEo,aN,NEo,jEo,DEo,Z2,Jse,GEo,OEo,nN,VEo,XEo,zEo,e1,Yse,QEo,WEo,sN,HEo,UEo,JEo,o1,Kse,YEo,KEo,lN,ZEo,eCo,oCo,r1,Zse,rCo,tCo,iN,aCo,nCo,sCo,t1,ele,lCo,iCo,dN,dCo,cCo,fCo,a1,ole,mCo,gCo,rle,hCo,pCo,uCo,n1,tle,_Co,bCo,cN,FCo,vCo,TCo,s1,ale,MCo,ECo,fN,CCo,wCo,ACo,l1,nle,yCo,LCo,mN,xCo,$Co,kCo,i1,sle,SCo,RCo,gN,BCo,PCo,ICo,d1,lle,qCo,NCo,hN,jCo,DCo,GCo,c1,ile,OCo,VCo,pN,XCo,zCo,QCo,f1,dle,WCo,HCo,uN,UCo,JCo,YCo,m1,cle,KCo,ZCo,_N,e3o,o3o,r3o,g1,fle,t3o,a3o,bN,n3o,s3o,l3o,h1,mle,i3o,d3o,FN,c3o,f3o,m3o,p1,gle,g3o,h3o,vN,p3o,u3o,_3o,u1,hle,b3o,F3o,TN,v3o,T3o,M3o,_1,E3o,ple,C3o,w3o,ule,A3o,y3o,b1,Z$e,Ci,F1,_le,xA,L3o,ble,x3o,eke,So,$A,$3o,wi,k3o,MN,S3o,R3o,EN,B3o,P3o,I3o,kA,q3o,Fle,N3o,j3o,D3o,at,SA,G3o,vle,O3o,V3o,Ai,X3o,Tle,z3o,Q3o,CN,W3o,H3o,U3o,v1,J3o,Ye,RA,Y3o,Mle,K3o,Z3o,La,ewo,Ele,owo,rwo,Cle,two,awo,wle,nwo,swo,lwo,Y,T1,Ale,iwo,dwo,wN,cwo,fwo,mwo,M1,yle,gwo,hwo,AN,pwo,uwo,_wo,E1,Lle,bwo,Fwo,yN,vwo,Two,Mwo,C1,xle,Ewo,Cwo,LN,wwo,Awo,ywo,w1,$le,Lwo,xwo,xN,$wo,kwo,Swo,A1,kle,Rwo,Bwo,$N,Pwo,Iwo,qwo,y1,Sle,Nwo,jwo,kN,Dwo,Gwo,Owo,L1,Rle,Vwo,Xwo,SN,zwo,Qwo,Wwo,x1,Ble,Hwo,Uwo,RN,Jwo,Ywo,Kwo,$1,Ple,Zwo,eAo,BN,oAo,rAo,tAo,k1,Ile,aAo,nAo,PN,sAo,lAo,iAo,S1,qle,dAo,cAo,IN,fAo,mAo,gAo,R1,Nle,hAo,pAo,qN,uAo,_Ao,bAo,B1,jle,FAo,vAo,NN,TAo,MAo,EAo,P1,Dle,CAo,wAo,jN,AAo,yAo,LAo,I1,Gle,xAo,$Ao,DN,kAo,SAo,RAo,q1,Ole,BAo,PAo,GN,IAo,qAo,NAo,N1,Vle,jAo,DAo,ON,GAo,OAo,VAo,j1,Xle,XAo,zAo,zle,QAo,WAo,HAo,D1,Qle,UAo,JAo,VN,YAo,KAo,ZAo,G1,Wle,e0o,o0o,XN,r0o,t0o,a0o,O1,Hle,n0o,s0o,zN,l0o,i0o,d0o,V1,Ule,c0o,f0o,QN,m0o,g0o,h0o,X1,Jle,p0o,u0o,WN,_0o,b0o,F0o,z1,Yle,v0o,T0o,HN,M0o,E0o,C0o,Q1,Kle,w0o,A0o,UN,y0o,L0o,x0o,W1,Zle,$0o,k0o,JN,S0o,R0o,B0o,H1,eie,P0o,I0o,YN,q0o,N0o,j0o,U1,D0o,oie,G0o,O0o,rie,V0o,X0o,J1,oke,yi,Y1,tie,BA,z0o,aie,Q0o,rke,Ro,PA,W0o,Li,H0o,KN,U0o,J0o,ZN,Y0o,K0o,Z0o,IA,eyo,nie,oyo,ryo,tyo,nt,qA,ayo,sie,nyo,syo,xi,lyo,lie,iyo,dyo,ej,cyo,fyo,myo,K1,gyo,Ke,NA,hyo,iie,pyo,uyo,xa,_yo,die,byo,Fyo,cie,vyo,Tyo,fie,Myo,Eyo,Cyo,Wr,Z1,mie,wyo,Ayo,oj,yyo,Lyo,xyo,eb,gie,$yo,kyo,rj,Syo,Ryo,Byo,ob,hie,Pyo,Iyo,tj,qyo,Nyo,jyo,rb,pie,Dyo,Gyo,aj,Oyo,Vyo,Xyo,tb,uie,zyo,Qyo,_ie,Wyo,Hyo,Uyo,ab,Jyo,bie,Yyo,Kyo,Fie,Zyo,eLo,nb,tke,$i,sb,vie,jA,oLo,Tie,rLo,ake,Bo,DA,tLo,ki,aLo,nj,nLo,sLo,sj,lLo,iLo,dLo,GA,cLo,Mie,fLo,mLo,gLo,st,OA,hLo,Eie,pLo,uLo,Si,_Lo,Cie,bLo,FLo,lj,vLo,TLo,MLo,lb,ELo,Ze,VA,CLo,wie,wLo,ALo,$a,yLo,Aie,LLo,xLo,yie,$Lo,kLo,Lie,SLo,RLo,BLo,U,ib,xie,PLo,ILo,ij,qLo,NLo,jLo,db,$ie,DLo,GLo,dj,OLo,VLo,XLo,cb,kie,zLo,QLo,cj,WLo,HLo,ULo,fb,Sie,JLo,YLo,fj,KLo,ZLo,e8o,mb,Rie,o8o,r8o,mj,t8o,a8o,n8o,gb,Bie,s8o,l8o,gj,i8o,d8o,c8o,hb,Pie,f8o,m8o,hj,g8o,h8o,p8o,pb,Iie,u8o,_8o,pj,b8o,F8o,v8o,ub,qie,T8o,M8o,uj,E8o,C8o,w8o,_b,Nie,A8o,y8o,_j,L8o,x8o,$8o,bb,jie,k8o,S8o,bj,R8o,B8o,P8o,Fb,Die,I8o,q8o,Fj,N8o,j8o,D8o,vb,Gie,G8o,O8o,vj,V8o,X8o,z8o,Tb,Oie,Q8o,W8o,Tj,H8o,U8o,J8o,Mb,Vie,Y8o,K8o,Mj,Z8o,exo,oxo,Eb,Xie,rxo,txo,Ej,axo,nxo,sxo,Cb,zie,lxo,ixo,Cj,dxo,cxo,fxo,wb,Qie,mxo,gxo,wj,hxo,pxo,uxo,Ab,Wie,_xo,bxo,Aj,Fxo,vxo,Txo,yb,Hie,Mxo,Exo,yj,Cxo,wxo,Axo,Lb,Uie,yxo,Lxo,Lj,xxo,$xo,kxo,xb,Jie,Sxo,Rxo,xj,Bxo,Pxo,Ixo,$b,Yie,qxo,Nxo,$j,jxo,Dxo,Gxo,kb,Kie,Oxo,Vxo,Zie,Xxo,zxo,Qxo,Sb,ede,Wxo,Hxo,kj,Uxo,Jxo,Yxo,Rb,ode,Kxo,Zxo,Sj,e7o,o7o,r7o,Bb,rde,t7o,a7o,Rj,n7o,s7o,l7o,Pb,tde,i7o,d7o,Bj,c7o,f7o,m7o,Ib,ade,g7o,h7o,Pj,p7o,u7o,_7o,qb,nde,b7o,F7o,Ij,v7o,T7o,M7o,Nb,sde,E7o,C7o,qj,w7o,A7o,y7o,jb,lde,L7o,x7o,Nj,$7o,k7o,S7o,Db,ide,R7o,B7o,jj,P7o,I7o,q7o,Gb,N7o,dde,j7o,D7o,cde,G7o,O7o,Ob,nke,Ri,Vb,fde,XA,V7o,mde,X7o,ske,Po,zA,z7o,Bi,Q7o,Dj,W7o,H7o,Gj,U7o,J7o,Y7o,QA,K7o,gde,Z7o,e$o,o$o,lt,WA,r$o,hde,t$o,a$o,Pi,n$o,pde,s$o,l$o,Oj,i$o,d$o,c$o,Xb,f$o,eo,HA,m$o,ude,g$o,h$o,ka,p$o,_de,u$o,_$o,bde,b$o,F$o,Fde,v$o,T$o,M$o,O,zb,vde,E$o,C$o,Vj,w$o,A$o,y$o,Qb,Tde,L$o,x$o,Xj,$$o,k$o,S$o,Wb,Mde,R$o,B$o,zj,P$o,I$o,q$o,Hb,Ede,N$o,j$o,Qj,D$o,G$o,O$o,Ub,Cde,V$o,X$o,Wj,z$o,Q$o,W$o,Jb,wde,H$o,U$o,Hj,J$o,Y$o,K$o,Yb,Ade,Z$o,eko,Uj,oko,rko,tko,Kb,yde,ako,nko,Jj,sko,lko,iko,Zb,Lde,dko,cko,Yj,fko,mko,gko,e5,xde,hko,pko,Kj,uko,_ko,bko,o5,$de,Fko,vko,Zj,Tko,Mko,Eko,r5,kde,Cko,wko,eD,Ako,yko,Lko,t5,Sde,xko,$ko,oD,kko,Sko,Rko,a5,Rde,Bko,Pko,rD,Iko,qko,Nko,n5,Bde,jko,Dko,tD,Gko,Oko,Vko,s5,Pde,Xko,zko,aD,Qko,Wko,Hko,l5,Ide,Uko,Jko,nD,Yko,Kko,Zko,i5,qde,eSo,oSo,sD,rSo,tSo,aSo,d5,Nde,nSo,sSo,lD,lSo,iSo,dSo,c5,jde,cSo,fSo,iD,mSo,gSo,hSo,f5,Dde,pSo,uSo,dD,_So,bSo,FSo,m5,Gde,vSo,TSo,cD,MSo,ESo,CSo,g5,Ode,wSo,ASo,fD,ySo,LSo,xSo,h5,Vde,$So,kSo,mD,SSo,RSo,BSo,p5,Xde,PSo,ISo,gD,qSo,NSo,jSo,u5,zde,DSo,GSo,hD,OSo,VSo,XSo,_5,Qde,zSo,QSo,pD,WSo,HSo,USo,b5,Wde,JSo,YSo,Hde,KSo,ZSo,eRo,F5,Ude,oRo,rRo,uD,tRo,aRo,nRo,v5,Jde,sRo,lRo,_D,iRo,dRo,cRo,T5,Yde,fRo,mRo,bD,gRo,hRo,pRo,M5,Kde,uRo,_Ro,FD,bRo,FRo,vRo,E5,Zde,TRo,MRo,vD,ERo,CRo,wRo,C5,ece,ARo,yRo,TD,LRo,xRo,$Ro,w5,oce,kRo,SRo,MD,RRo,BRo,PRo,A5,rce,IRo,qRo,ED,NRo,jRo,DRo,y5,tce,GRo,ORo,CD,VRo,XRo,zRo,L5,ace,QRo,WRo,wD,HRo,URo,JRo,x5,nce,YRo,KRo,AD,ZRo,eBo,oBo,$5,rBo,sce,tBo,aBo,lce,nBo,sBo,k5,lke,Ii,S5,ice,UA,lBo,dce,iBo,ike,Io,JA,dBo,qi,cBo,yD,fBo,mBo,LD,gBo,hBo,pBo,YA,uBo,cce,_Bo,bBo,FBo,it,KA,vBo,fce,TBo,MBo,Ni,EBo,mce,CBo,wBo,xD,ABo,yBo,LBo,R5,xBo,oo,ZA,$Bo,gce,kBo,SBo,Sa,RBo,hce,BBo,PBo,pce,IBo,qBo,uce,NBo,jBo,DBo,_ce,B5,bce,GBo,OBo,$D,VBo,XBo,zBo,P5,QBo,Fce,WBo,HBo,vce,UBo,JBo,I5,dke,ji,q5,Tce,e0,YBo,Mce,KBo,cke,qo,o0,ZBo,Di,ePo,kD,oPo,rPo,SD,tPo,aPo,nPo,r0,sPo,Ece,lPo,iPo,dPo,dt,t0,cPo,Cce,fPo,mPo,Gi,gPo,wce,hPo,pPo,RD,uPo,_Po,bPo,N5,FPo,ro,a0,vPo,Ace,TPo,MPo,Ra,EPo,yce,CPo,wPo,Lce,APo,yPo,xce,LPo,xPo,$Po,Fe,j5,$ce,kPo,SPo,BD,RPo,BPo,PPo,D5,kce,IPo,qPo,PD,NPo,jPo,DPo,Fs,Sce,GPo,OPo,ID,VPo,XPo,qD,zPo,QPo,WPo,G5,Rce,HPo,UPo,ND,JPo,YPo,KPo,ct,Bce,ZPo,eIo,jD,oIo,rIo,DD,tIo,aIo,GD,nIo,sIo,lIo,O5,Pce,iIo,dIo,OD,cIo,fIo,mIo,V5,Ice,gIo,hIo,VD,pIo,uIo,_Io,X5,qce,bIo,FIo,XD,vIo,TIo,MIo,z5,Nce,EIo,CIo,zD,wIo,AIo,yIo,Q5,jce,LIo,xIo,QD,$Io,kIo,SIo,W5,Dce,RIo,BIo,WD,PIo,IIo,qIo,H5,NIo,Gce,jIo,DIo,Oce,GIo,OIo,U5,fke,Oi,J5,Vce,n0,VIo,Xce,XIo,mke,No,s0,zIo,Vi,QIo,HD,WIo,HIo,UD,UIo,JIo,YIo,l0,KIo,zce,ZIo,eqo,oqo,ft,i0,rqo,Qce,tqo,aqo,Xi,nqo,Wce,sqo,lqo,JD,iqo,dqo,cqo,Y5,fqo,to,d0,mqo,Hce,gqo,hqo,Ba,pqo,Uce,uqo,_qo,Jce,bqo,Fqo,Yce,vqo,Tqo,Mqo,Kce,K5,Zce,Eqo,Cqo,YD,wqo,Aqo,yqo,Z5,Lqo,efe,xqo,$qo,ofe,kqo,Sqo,eF,gke,zi,oF,rfe,c0,Rqo,tfe,Bqo,hke,jo,f0,Pqo,Qi,Iqo,KD,qqo,Nqo,ZD,jqo,Dqo,Gqo,m0,Oqo,afe,Vqo,Xqo,zqo,mt,g0,Qqo,nfe,Wqo,Hqo,Wi,Uqo,sfe,Jqo,Yqo,eG,Kqo,Zqo,eNo,rF,oNo,ao,h0,rNo,lfe,tNo,aNo,Pa,nNo,ife,sNo,lNo,dfe,iNo,dNo,cfe,cNo,fNo,mNo,Ie,tF,ffe,gNo,hNo,oG,pNo,uNo,_No,aF,mfe,bNo,FNo,rG,vNo,TNo,MNo,nF,gfe,ENo,CNo,tG,wNo,ANo,yNo,sF,hfe,LNo,xNo,aG,$No,kNo,SNo,lF,pfe,RNo,BNo,nG,PNo,INo,qNo,iF,ufe,NNo,jNo,sG,DNo,GNo,ONo,dF,_fe,VNo,XNo,lG,zNo,QNo,WNo,cF,bfe,HNo,UNo,iG,JNo,YNo,KNo,fF,ZNo,Ffe,ejo,ojo,vfe,rjo,tjo,mF,pke,Hi,gF,Tfe,p0,ajo,Mfe,njo,uke,Do,u0,sjo,Ui,ljo,dG,ijo,djo,cG,cjo,fjo,mjo,_0,gjo,Efe,hjo,pjo,ujo,gt,b0,_jo,Cfe,bjo,Fjo,Ji,vjo,wfe,Tjo,Mjo,fG,Ejo,Cjo,wjo,hF,Ajo,no,F0,yjo,Afe,Ljo,xjo,Ia,$jo,yfe,kjo,Sjo,Lfe,Rjo,Bjo,xfe,Pjo,Ijo,qjo,qa,pF,$fe,Njo,jjo,mG,Djo,Gjo,Ojo,uF,kfe,Vjo,Xjo,gG,zjo,Qjo,Wjo,_F,Sfe,Hjo,Ujo,hG,Jjo,Yjo,Kjo,bF,Rfe,Zjo,eDo,pG,oDo,rDo,tDo,FF,aDo,Bfe,nDo,sDo,Pfe,lDo,iDo,vF,_ke,Yi,TF,Ife,v0,dDo,qfe,cDo,bke,Go,T0,fDo,Ki,mDo,uG,gDo,hDo,_G,pDo,uDo,_Do,M0,bDo,Nfe,FDo,vDo,TDo,ht,E0,MDo,jfe,EDo,CDo,Zi,wDo,Dfe,ADo,yDo,bG,LDo,xDo,$Do,MF,kDo,so,C0,SDo,Gfe,RDo,BDo,Na,PDo,Ofe,IDo,qDo,Vfe,NDo,jDo,Xfe,DDo,GDo,ODo,qe,EF,zfe,VDo,XDo,FG,zDo,QDo,WDo,CF,Qfe,HDo,UDo,vG,JDo,YDo,KDo,wF,Wfe,ZDo,eGo,TG,oGo,rGo,tGo,AF,Hfe,aGo,nGo,MG,sGo,lGo,iGo,yF,Ufe,dGo,cGo,EG,fGo,mGo,gGo,LF,Jfe,hGo,pGo,CG,uGo,_Go,bGo,xF,Yfe,FGo,vGo,wG,TGo,MGo,EGo,$F,Kfe,CGo,wGo,AG,AGo,yGo,LGo,kF,xGo,Zfe,$Go,kGo,eme,SGo,RGo,SF,Fke,ed,RF,ome,w0,BGo,rme,PGo,vke,Oo,A0,IGo,od,qGo,yG,NGo,jGo,LG,DGo,GGo,OGo,y0,VGo,tme,XGo,zGo,QGo,pt,L0,WGo,ame,HGo,UGo,rd,JGo,nme,YGo,KGo,xG,ZGo,eOo,oOo,BF,rOo,lo,x0,tOo,sme,aOo,nOo,ja,sOo,lme,lOo,iOo,ime,dOo,cOo,dme,fOo,mOo,gOo,$0,PF,cme,hOo,pOo,$G,uOo,_Oo,bOo,IF,fme,FOo,vOo,kG,TOo,MOo,EOo,qF,COo,mme,wOo,AOo,gme,yOo,LOo,NF,Tke,td,jF,hme,k0,xOo,pme,$Oo,Mke,Vo,S0,kOo,ad,SOo,SG,ROo,BOo,RG,POo,IOo,qOo,R0,NOo,ume,jOo,DOo,GOo,ut,B0,OOo,_me,VOo,XOo,nd,zOo,bme,QOo,WOo,BG,HOo,UOo,JOo,DF,YOo,io,P0,KOo,Fme,ZOo,eVo,Da,oVo,vme,rVo,tVo,Tme,aVo,nVo,Mme,sVo,lVo,iVo,Ga,GF,Eme,dVo,cVo,PG,fVo,mVo,gVo,OF,Cme,hVo,pVo,IG,uVo,_Vo,bVo,VF,wme,FVo,vVo,qG,TVo,MVo,EVo,XF,Ame,CVo,wVo,NG,AVo,yVo,LVo,zF,xVo,yme,$Vo,kVo,Lme,SVo,RVo,QF,Eke,sd,WF,xme,I0,BVo,$me,PVo,Cke,Xo,q0,IVo,ld,qVo,jG,NVo,jVo,DG,DVo,GVo,OVo,N0,VVo,kme,XVo,zVo,QVo,_t,j0,WVo,Sme,HVo,UVo,id,JVo,Rme,YVo,KVo,GG,ZVo,eXo,oXo,HF,rXo,co,D0,tXo,Bme,aXo,nXo,Oa,sXo,Pme,lXo,iXo,Ime,dXo,cXo,qme,fXo,mXo,gXo,dd,UF,Nme,hXo,pXo,OG,uXo,_Xo,bXo,JF,jme,FXo,vXo,VG,TXo,MXo,EXo,YF,Dme,CXo,wXo,XG,AXo,yXo,LXo,KF,xXo,Gme,$Xo,kXo,Ome,SXo,RXo,ZF,wke,cd,ev,Vme,G0,BXo,Xme,PXo,Ake,zo,O0,IXo,fd,qXo,zG,NXo,jXo,QG,DXo,GXo,OXo,V0,VXo,zme,XXo,zXo,QXo,bt,X0,WXo,Qme,HXo,UXo,md,JXo,Wme,YXo,KXo,WG,ZXo,ezo,ozo,ov,rzo,fo,z0,tzo,Hme,azo,nzo,Va,szo,Ume,lzo,izo,Jme,dzo,czo,Yme,fzo,mzo,gzo,Kme,rv,Zme,hzo,pzo,HG,uzo,_zo,bzo,tv,Fzo,ege,vzo,Tzo,oge,Mzo,Ezo,av,yke,gd,nv,rge,Q0,Czo,tge,wzo,Lke,Qo,W0,Azo,hd,yzo,UG,Lzo,xzo,JG,$zo,kzo,Szo,H0,Rzo,age,Bzo,Pzo,Izo,Ft,U0,qzo,nge,Nzo,jzo,pd,Dzo,sge,Gzo,Ozo,YG,Vzo,Xzo,zzo,sv,Qzo,mo,J0,Wzo,lge,Hzo,Uzo,Xa,Jzo,ige,Yzo,Kzo,dge,Zzo,eQo,cge,oQo,rQo,tQo,fge,lv,mge,aQo,nQo,KG,sQo,lQo,iQo,iv,dQo,gge,cQo,fQo,hge,mQo,gQo,dv,xke,ud,cv,pge,Y0,hQo,uge,pQo,$ke,Wo,K0,uQo,_d,_Qo,ZG,bQo,FQo,eO,vQo,TQo,MQo,Z0,EQo,_ge,CQo,wQo,AQo,vt,ey,yQo,bge,LQo,xQo,bd,$Qo,Fge,kQo,SQo,oO,RQo,BQo,PQo,fv,IQo,go,oy,qQo,vge,NQo,jQo,za,DQo,Tge,GQo,OQo,Mge,VQo,XQo,Ege,zQo,QQo,WQo,ry,mv,Cge,HQo,UQo,rO,JQo,YQo,KQo,gv,wge,ZQo,eWo,tO,oWo,rWo,tWo,hv,aWo,Age,nWo,sWo,yge,lWo,iWo,pv,kke,Fd,uv,Lge,ty,dWo,xge,cWo,Ske,Ho,ay,fWo,vd,mWo,aO,gWo,hWo,nO,pWo,uWo,_Wo,ny,bWo,$ge,FWo,vWo,TWo,Tt,sy,MWo,kge,EWo,CWo,Td,wWo,Sge,AWo,yWo,sO,LWo,xWo,$Wo,_v,kWo,ho,ly,SWo,Rge,RWo,BWo,Qa,PWo,Bge,IWo,qWo,Pge,NWo,jWo,Ige,DWo,GWo,OWo,qge,bv,Nge,VWo,XWo,lO,zWo,QWo,WWo,Fv,HWo,jge,UWo,JWo,Dge,YWo,KWo,vv,Rke,Md,Tv,Gge,iy,ZWo,Oge,eHo,Bke,Uo,dy,oHo,Ed,rHo,iO,tHo,aHo,dO,nHo,sHo,lHo,cy,iHo,Vge,dHo,cHo,fHo,Mt,fy,mHo,Xge,gHo,hHo,Cd,pHo,zge,uHo,_Ho,cO,bHo,FHo,vHo,Mv,THo,Mr,my,MHo,Qge,EHo,CHo,Wa,wHo,Wge,AHo,yHo,Hge,LHo,xHo,Uge,$Ho,kHo,SHo,j,Ev,Jge,RHo,BHo,fO,PHo,IHo,qHo,Cv,Yge,NHo,jHo,mO,DHo,GHo,OHo,wv,Kge,VHo,XHo,gO,zHo,QHo,WHo,Av,Zge,HHo,UHo,hO,JHo,YHo,KHo,yv,ehe,ZHo,eUo,pO,oUo,rUo,tUo,Lv,ohe,aUo,nUo,uO,sUo,lUo,iUo,xv,rhe,dUo,cUo,_O,fUo,mUo,gUo,$v,the,hUo,pUo,bO,uUo,_Uo,bUo,kv,ahe,FUo,vUo,FO,TUo,MUo,EUo,Sv,nhe,CUo,wUo,vO,AUo,yUo,LUo,Rv,she,xUo,$Uo,TO,kUo,SUo,RUo,Bv,lhe,BUo,PUo,MO,IUo,qUo,NUo,Pv,ihe,jUo,DUo,EO,GUo,OUo,VUo,Iv,dhe,XUo,zUo,CO,QUo,WUo,HUo,qv,che,UUo,JUo,wO,YUo,KUo,ZUo,Nv,fhe,eJo,oJo,AO,rJo,tJo,aJo,vs,mhe,nJo,sJo,yO,lJo,iJo,LO,dJo,cJo,fJo,jv,ghe,mJo,gJo,xO,hJo,pJo,uJo,Dv,hhe,_Jo,bJo,$O,FJo,vJo,TJo,Gv,phe,MJo,EJo,kO,CJo,wJo,AJo,Ov,uhe,yJo,LJo,SO,xJo,$Jo,kJo,Vv,_he,SJo,RJo,RO,BJo,PJo,IJo,Xv,bhe,qJo,NJo,BO,jJo,DJo,GJo,zv,Fhe,OJo,VJo,PO,XJo,zJo,QJo,Qv,vhe,WJo,HJo,IO,UJo,JJo,YJo,Wv,The,KJo,ZJo,qO,eYo,oYo,rYo,Hv,Mhe,tYo,aYo,NO,nYo,sYo,lYo,Uv,Ehe,iYo,dYo,jO,cYo,fYo,mYo,Jv,Che,gYo,hYo,DO,pYo,uYo,_Yo,Yv,whe,bYo,FYo,GO,vYo,TYo,MYo,Kv,Ahe,EYo,CYo,OO,wYo,AYo,yYo,Zv,yhe,LYo,xYo,VO,$Yo,kYo,SYo,e6,Lhe,RYo,BYo,XO,PYo,IYo,qYo,o6,xhe,NYo,jYo,zO,DYo,GYo,OYo,r6,$he,VYo,XYo,QO,zYo,QYo,WYo,t6,khe,HYo,UYo,WO,JYo,YYo,KYo,a6,She,ZYo,eKo,HO,oKo,rKo,tKo,n6,Rhe,aKo,nKo,UO,sKo,lKo,iKo,s6,Bhe,dKo,cKo,JO,fKo,mKo,gKo,l6,Phe,hKo,pKo,YO,uKo,_Ko,bKo,i6,Ihe,FKo,vKo,KO,TKo,MKo,EKo,d6,qhe,CKo,wKo,ZO,AKo,yKo,LKo,c6,Pke,wd,f6,Nhe,gy,xKo,jhe,$Ko,Ike,Jo,hy,kKo,Ad,SKo,eV,RKo,BKo,oV,PKo,IKo,qKo,py,NKo,Dhe,jKo,DKo,GKo,Et,uy,OKo,Ghe,VKo,XKo,yd,zKo,Ohe,QKo,WKo,rV,HKo,UKo,JKo,m6,YKo,Er,_y,KKo,Vhe,ZKo,eZo,Ha,oZo,Xhe,rZo,tZo,zhe,aZo,nZo,Qhe,sZo,lZo,iZo,ae,g6,Whe,dZo,cZo,tV,fZo,mZo,gZo,h6,Hhe,hZo,pZo,aV,uZo,_Zo,bZo,p6,Uhe,FZo,vZo,nV,TZo,MZo,EZo,u6,Jhe,CZo,wZo,sV,AZo,yZo,LZo,_6,Yhe,xZo,$Zo,lV,kZo,SZo,RZo,b6,Khe,BZo,PZo,iV,IZo,qZo,NZo,F6,Zhe,jZo,DZo,dV,GZo,OZo,VZo,v6,epe,XZo,zZo,cV,QZo,WZo,HZo,T6,ope,UZo,JZo,fV,YZo,KZo,ZZo,M6,rpe,eer,oer,mV,rer,ter,aer,E6,tpe,ner,ser,gV,ler,ier,der,C6,ape,cer,fer,hV,mer,ger,her,w6,npe,per,uer,pV,_er,ber,Fer,A6,spe,ver,Ter,uV,Mer,Eer,Cer,y6,lpe,wer,Aer,_V,yer,Ler,xer,L6,ipe,$er,ker,bV,Ser,Rer,Ber,x6,dpe,Per,Ier,FV,qer,Ner,jer,$6,cpe,Der,Ger,vV,Oer,Ver,Xer,k6,fpe,zer,Qer,TV,Wer,Her,Uer,S6,mpe,Jer,Yer,MV,Ker,Zer,eor,R6,gpe,oor,ror,EV,tor,aor,nor,B6,hpe,sor,lor,CV,ior,dor,cor,P6,qke,Ld,I6,ppe,by,mor,upe,gor,Nke,Yo,Fy,hor,xd,por,wV,uor,_or,AV,bor,For,vor,vy,Tor,_pe,Mor,Eor,Cor,Ct,Ty,wor,bpe,Aor,yor,$d,Lor,Fpe,xor,$or,yV,kor,Sor,Ror,q6,Bor,Cr,My,Por,vpe,Ior,qor,Ua,Nor,Tpe,jor,Dor,Mpe,Gor,Oor,Epe,Vor,Xor,zor,ve,N6,Cpe,Qor,Wor,LV,Hor,Uor,Jor,j6,wpe,Yor,Kor,xV,Zor,err,orr,D6,Ape,rrr,trr,$V,arr,nrr,srr,G6,ype,lrr,irr,kV,drr,crr,frr,O6,Lpe,mrr,grr,SV,hrr,prr,urr,V6,xpe,_rr,brr,RV,Frr,vrr,Trr,X6,$pe,Mrr,Err,BV,Crr,wrr,Arr,z6,kpe,yrr,Lrr,PV,xrr,$rr,krr,Q6,Spe,Srr,Rrr,IV,Brr,Prr,Irr,W6,Rpe,qrr,Nrr,qV,jrr,Drr,Grr,H6,Bpe,Orr,Vrr,NV,Xrr,zrr,Qrr,U6,jke,kd,J6,Ppe,Ey,Wrr,Ipe,Hrr,Dke,Ko,Cy,Urr,Sd,Jrr,jV,Yrr,Krr,DV,Zrr,etr,otr,wy,rtr,qpe,ttr,atr,ntr,wt,Ay,str,Npe,ltr,itr,Rd,dtr,jpe,ctr,ftr,GV,mtr,gtr,htr,Y6,ptr,wr,yy,utr,Dpe,_tr,btr,Ja,Ftr,Gpe,vtr,Ttr,Ope,Mtr,Etr,Vpe,Ctr,wtr,Atr,Ly,K6,Xpe,ytr,Ltr,OV,xtr,$tr,ktr,Z6,zpe,Str,Rtr,VV,Btr,Ptr,Itr,eT,Gke,Bd,oT,Qpe,xy,qtr,Wpe,Ntr,Oke,Zo,$y,jtr,Pd,Dtr,XV,Gtr,Otr,zV,Vtr,Xtr,ztr,ky,Qtr,Hpe,Wtr,Htr,Utr,At,Sy,Jtr,Upe,Ytr,Ktr,Id,Ztr,Jpe,ear,oar,QV,rar,tar,aar,rT,nar,Ar,Ry,sar,Ype,lar,iar,Ya,dar,Kpe,car,far,Zpe,mar,gar,eue,har,par,uar,se,tT,oue,_ar,bar,WV,Far,Tar,Mar,aT,rue,Ear,Car,HV,war,Aar,yar,nT,tue,Lar,xar,UV,$ar,kar,Sar,sT,aue,Rar,Bar,JV,Par,Iar,qar,lT,nue,Nar,jar,YV,Dar,Gar,Oar,iT,sue,Var,Xar,KV,zar,Qar,War,dT,lue,Har,Uar,ZV,Jar,Yar,Kar,cT,iue,Zar,enr,eX,onr,rnr,tnr,fT,due,anr,nnr,oX,snr,lnr,inr,mT,cue,dnr,cnr,rX,fnr,mnr,gnr,gT,fue,hnr,pnr,tX,unr,_nr,bnr,hT,mue,Fnr,vnr,aX,Tnr,Mnr,Enr,pT,gue,Cnr,wnr,nX,Anr,ynr,Lnr,uT,hue,xnr,$nr,sX,knr,Snr,Rnr,_T,pue,Bnr,Pnr,lX,Inr,qnr,Nnr,bT,uue,jnr,Dnr,iX,Gnr,Onr,Vnr,FT,_ue,Xnr,znr,dX,Qnr,Wnr,Hnr,vT,bue,Unr,Jnr,cX,Ynr,Knr,Znr,TT,Fue,esr,osr,fX,rsr,tsr,asr,MT,vue,nsr,ssr,mX,lsr,isr,dsr,ET,Vke,qd,CT,Tue,By,csr,Mue,fsr,Xke,er,Py,msr,Nd,gsr,gX,hsr,psr,hX,usr,_sr,bsr,Iy,Fsr,Eue,vsr,Tsr,Msr,yt,qy,Esr,Cue,Csr,wsr,jd,Asr,wue,ysr,Lsr,pX,xsr,$sr,ksr,wT,Ssr,yr,Ny,Rsr,Aue,Bsr,Psr,Ka,Isr,yue,qsr,Nsr,Lue,jsr,Dsr,xue,Gsr,Osr,Vsr,Ee,AT,$ue,Xsr,zsr,uX,Qsr,Wsr,Hsr,yT,kue,Usr,Jsr,_X,Ysr,Ksr,Zsr,LT,Sue,elr,olr,bX,rlr,tlr,alr,xT,Rue,nlr,slr,FX,llr,ilr,dlr,$T,Bue,clr,flr,vX,mlr,glr,hlr,kT,Pue,plr,ulr,TX,_lr,blr,Flr,ST,Iue,vlr,Tlr,MX,Mlr,Elr,Clr,RT,que,wlr,Alr,EX,ylr,Llr,xlr,BT,Nue,$lr,klr,CX,Slr,Rlr,Blr,PT,jue,Plr,Ilr,wX,qlr,Nlr,jlr,IT,zke,Dd,qT,Due,jy,Dlr,Gue,Glr,Qke,or,Dy,Olr,Gd,Vlr,AX,Xlr,zlr,yX,Qlr,Wlr,Hlr,Gy,Ulr,Oue,Jlr,Ylr,Klr,Lt,Oy,Zlr,Vue,eir,oir,Od,rir,Xue,tir,air,LX,nir,sir,lir,NT,iir,Lr,Vy,dir,zue,cir,fir,Za,mir,Que,gir,hir,Wue,pir,uir,Hue,_ir,bir,Fir,ee,jT,Uue,vir,Tir,xX,Mir,Eir,Cir,DT,Jue,wir,Air,$X,yir,Lir,xir,GT,Yue,$ir,kir,kX,Sir,Rir,Bir,OT,Kue,Pir,Iir,SX,qir,Nir,jir,VT,Zue,Dir,Gir,RX,Oir,Vir,Xir,XT,e_e,zir,Qir,BX,Wir,Hir,Uir,zT,o_e,Jir,Yir,PX,Kir,Zir,edr,QT,r_e,odr,rdr,IX,tdr,adr,ndr,WT,t_e,sdr,ldr,qX,idr,ddr,cdr,HT,a_e,fdr,mdr,NX,gdr,hdr,pdr,UT,n_e,udr,_dr,jX,bdr,Fdr,vdr,JT,s_e,Tdr,Mdr,DX,Edr,Cdr,wdr,YT,l_e,Adr,ydr,GX,Ldr,xdr,$dr,KT,i_e,kdr,Sdr,OX,Rdr,Bdr,Pdr,ZT,d_e,Idr,qdr,VX,Ndr,jdr,Ddr,eM,c_e,Gdr,Odr,XX,Vdr,Xdr,zdr,oM,f_e,Qdr,Wdr,zX,Hdr,Udr,Jdr,rM,m_e,Ydr,Kdr,QX,Zdr,ecr,ocr,tM,g_e,rcr,tcr,WX,acr,ncr,scr,aM,h_e,lcr,icr,HX,dcr,ccr,fcr,nM,p_e,mcr,gcr,UX,hcr,pcr,ucr,sM,u_e,_cr,bcr,JX,Fcr,vcr,Tcr,lM,__e,Mcr,Ecr,YX,Ccr,wcr,Acr,iM,b_e,ycr,Lcr,KX,xcr,$cr,kcr,dM,F_e,Scr,Rcr,ZX,Bcr,Pcr,Icr,cM,Wke,Vd,fM,v_e,Xy,qcr,T_e,Ncr,Hke,rr,zy,jcr,Xd,Dcr,ez,Gcr,Ocr,oz,Vcr,Xcr,zcr,Qy,Qcr,M_e,Wcr,Hcr,Ucr,xt,Wy,Jcr,E_e,Ycr,Kcr,zd,Zcr,C_e,efr,ofr,rz,rfr,tfr,afr,mM,nfr,xr,Hy,sfr,w_e,lfr,ifr,en,dfr,A_e,cfr,ffr,y_e,mfr,gfr,L_e,hfr,pfr,ufr,ge,gM,x_e,_fr,bfr,tz,Ffr,vfr,Tfr,hM,$_e,Mfr,Efr,az,Cfr,wfr,Afr,pM,k_e,yfr,Lfr,nz,xfr,$fr,kfr,uM,S_e,Sfr,Rfr,sz,Bfr,Pfr,Ifr,_M,R_e,qfr,Nfr,lz,jfr,Dfr,Gfr,bM,B_e,Ofr,Vfr,iz,Xfr,zfr,Qfr,FM,P_e,Wfr,Hfr,dz,Ufr,Jfr,Yfr,vM,I_e,Kfr,Zfr,cz,emr,omr,rmr,TM,q_e,tmr,amr,fz,nmr,smr,lmr,MM,N_e,imr,dmr,mz,cmr,fmr,mmr,EM,j_e,gmr,hmr,gz,pmr,umr,_mr,CM,D_e,bmr,Fmr,hz,vmr,Tmr,Mmr,wM,G_e,Emr,Cmr,pz,wmr,Amr,ymr,AM,O_e,Lmr,xmr,uz,$mr,kmr,Smr,yM,V_e,Rmr,Bmr,_z,Pmr,Imr,qmr,LM,X_e,Nmr,jmr,bz,Dmr,Gmr,Omr,xM,z_e,Vmr,Xmr,Fz,zmr,Qmr,Wmr,$M,Uke,Qd,kM,Q_e,Uy,Hmr,W_e,Umr,Jke,tr,Jy,Jmr,Wd,Ymr,vz,Kmr,Zmr,Tz,egr,ogr,rgr,Yy,tgr,H_e,agr,ngr,sgr,$t,Ky,lgr,U_e,igr,dgr,Hd,cgr,J_e,fgr,mgr,Mz,ggr,hgr,pgr,SM,ugr,$r,Zy,_gr,Y_e,bgr,Fgr,on,vgr,K_e,Tgr,Mgr,Z_e,Egr,Cgr,e2e,wgr,Agr,ygr,o2e,RM,r2e,Lgr,xgr,Ez,$gr,kgr,Sgr,BM,Yke,Ud,PM,t2e,eL,Rgr,a2e,Bgr,Kke,ar,oL,Pgr,Jd,Igr,Cz,qgr,Ngr,wz,jgr,Dgr,Ggr,rL,Ogr,n2e,Vgr,Xgr,zgr,kt,tL,Qgr,s2e,Wgr,Hgr,Yd,Ugr,l2e,Jgr,Ygr,Az,Kgr,Zgr,ehr,IM,ohr,kr,aL,rhr,i2e,thr,ahr,rn,nhr,d2e,shr,lhr,c2e,ihr,dhr,f2e,chr,fhr,mhr,le,qM,m2e,ghr,hhr,yz,phr,uhr,_hr,NM,g2e,bhr,Fhr,Lz,vhr,Thr,Mhr,jM,h2e,Ehr,Chr,xz,whr,Ahr,yhr,DM,p2e,Lhr,xhr,$z,$hr,khr,Shr,GM,u2e,Rhr,Bhr,kz,Phr,Ihr,qhr,OM,_2e,Nhr,jhr,Sz,Dhr,Ghr,Ohr,VM,b2e,Vhr,Xhr,Rz,zhr,Qhr,Whr,XM,F2e,Hhr,Uhr,Bz,Jhr,Yhr,Khr,zM,v2e,Zhr,epr,Pz,opr,rpr,tpr,QM,T2e,apr,npr,Iz,spr,lpr,ipr,WM,M2e,dpr,cpr,qz,fpr,mpr,gpr,HM,E2e,hpr,ppr,Nz,upr,_pr,bpr,UM,C2e,Fpr,vpr,jz,Tpr,Mpr,Epr,JM,w2e,Cpr,wpr,Dz,Apr,ypr,Lpr,YM,A2e,xpr,$pr,Gz,kpr,Spr,Rpr,KM,y2e,Bpr,Ppr,Oz,Ipr,qpr,Npr,ZM,L2e,jpr,Dpr,Vz,Gpr,Opr,Vpr,e9,x2e,Xpr,zpr,Xz,Qpr,Wpr,Hpr,o9,$2e,Upr,Jpr,zz,Ypr,Kpr,Zpr,r9,k2e,eur,our,Qz,rur,tur,aur,t9,Zke,Kd,a9,S2e,nL,nur,R2e,sur,eSe,nr,sL,lur,Zd,iur,Wz,dur,cur,Hz,fur,mur,gur,lL,hur,B2e,pur,uur,_ur,St,iL,bur,P2e,Fur,vur,ec,Tur,I2e,Mur,Eur,Uz,Cur,wur,Aur,n9,yur,Sr,dL,Lur,q2e,xur,$ur,tn,kur,N2e,Sur,Rur,j2e,Bur,Pur,D2e,Iur,qur,Nur,ie,s9,G2e,jur,Dur,Jz,Gur,Our,Vur,l9,O2e,Xur,zur,Yz,Qur,Wur,Hur,i9,V2e,Uur,Jur,Kz,Yur,Kur,Zur,d9,X2e,e_r,o_r,Zz,r_r,t_r,a_r,c9,z2e,n_r,s_r,eQ,l_r,i_r,d_r,f9,Q2e,c_r,f_r,oQ,m_r,g_r,h_r,m9,W2e,p_r,u_r,rQ,__r,b_r,F_r,g9,H2e,v_r,T_r,tQ,M_r,E_r,C_r,h9,U2e,w_r,A_r,aQ,y_r,L_r,x_r,p9,J2e,$_r,k_r,nQ,S_r,R_r,B_r,u9,Y2e,P_r,I_r,sQ,q_r,N_r,j_r,_9,K2e,D_r,G_r,lQ,O_r,V_r,X_r,b9,Z2e,z_r,Q_r,iQ,W_r,H_r,U_r,F9,e1e,J_r,Y_r,dQ,K_r,Z_r,e2r,v9,o1e,o2r,r2r,cQ,t2r,a2r,n2r,T9,r1e,s2r,l2r,fQ,i2r,d2r,c2r,M9,t1e,f2r,m2r,mQ,g2r,h2r,p2r,E9,a1e,u2r,_2r,gQ,b2r,F2r,v2r,C9,n1e,T2r,M2r,hQ,E2r,C2r,w2r,w9,oSe,oc,A9,s1e,cL,A2r,l1e,y2r,rSe,sr,fL,L2r,rc,x2r,pQ,$2r,k2r,uQ,S2r,R2r,B2r,mL,P2r,i1e,I2r,q2r,N2r,Rt,gL,j2r,d1e,D2r,G2r,tc,O2r,c1e,V2r,X2r,_Q,z2r,Q2r,W2r,y9,H2r,Rr,hL,U2r,f1e,J2r,Y2r,an,K2r,m1e,Z2r,e1r,g1e,o1r,r1r,h1e,t1r,a1r,n1r,p1e,L9,u1e,s1r,l1r,bQ,i1r,d1r,c1r,x9,tSe,ac,$9,_1e,pL,f1r,b1e,m1r,aSe,lr,uL,g1r,nc,h1r,FQ,p1r,u1r,vQ,_1r,b1r,F1r,_L,v1r,F1e,T1r,M1r,E1r,Bt,bL,C1r,v1e,w1r,A1r,sc,y1r,T1e,L1r,x1r,TQ,$1r,k1r,S1r,k9,R1r,Br,FL,B1r,M1e,P1r,I1r,nn,q1r,E1e,N1r,j1r,C1e,D1r,G1r,w1e,O1r,V1r,X1r,A1e,S9,y1e,z1r,Q1r,MQ,W1r,H1r,U1r,R9,nSe,lc,B9,L1e,vL,J1r,x1e,Y1r,sSe,ir,TL,K1r,ic,Z1r,EQ,ebr,obr,CQ,rbr,tbr,abr,ML,nbr,$1e,sbr,lbr,ibr,Pt,EL,dbr,k1e,cbr,fbr,dc,mbr,S1e,gbr,hbr,wQ,pbr,ubr,_br,P9,bbr,Pr,CL,Fbr,R1e,vbr,Tbr,sn,Mbr,B1e,Ebr,Cbr,P1e,wbr,Abr,I1e,ybr,Lbr,xbr,oe,I9,q1e,$br,kbr,AQ,Sbr,Rbr,Bbr,q9,N1e,Pbr,Ibr,yQ,qbr,Nbr,jbr,N9,j1e,Dbr,Gbr,LQ,Obr,Vbr,Xbr,j9,D1e,zbr,Qbr,xQ,Wbr,Hbr,Ubr,D9,G1e,Jbr,Ybr,$Q,Kbr,Zbr,e5r,G9,O1e,o5r,r5r,kQ,t5r,a5r,n5r,O9,V1e,s5r,l5r,SQ,i5r,d5r,c5r,V9,X1e,f5r,m5r,RQ,g5r,h5r,p5r,X9,z1e,u5r,_5r,BQ,b5r,F5r,v5r,z9,Q1e,T5r,M5r,PQ,E5r,C5r,w5r,Q9,W1e,A5r,y5r,IQ,L5r,x5r,$5r,W9,H1e,k5r,S5r,qQ,R5r,B5r,P5r,H9,U1e,I5r,q5r,NQ,N5r,j5r,D5r,U9,J1e,G5r,O5r,jQ,V5r,X5r,z5r,J9,Y1e,Q5r,W5r,DQ,H5r,U5r,J5r,Y9,K1e,Y5r,K5r,GQ,Z5r,eFr,oFr,K9,Z1e,rFr,tFr,OQ,aFr,nFr,sFr,Z9,ebe,lFr,iFr,VQ,dFr,cFr,fFr,e4,obe,mFr,gFr,XQ,hFr,pFr,uFr,o4,rbe,_Fr,bFr,zQ,FFr,vFr,TFr,r4,tbe,MFr,EFr,QQ,CFr,wFr,AFr,t4,abe,yFr,LFr,WQ,xFr,$Fr,kFr,a4,nbe,SFr,RFr,HQ,BFr,PFr,IFr,n4,sbe,qFr,NFr,UQ,jFr,DFr,GFr,s4,lbe,OFr,VFr,JQ,XFr,zFr,QFr,l4,lSe,cc,i4,ibe,wL,WFr,dbe,HFr,iSe,dr,AL,UFr,fc,JFr,YQ,YFr,KFr,KQ,ZFr,evr,ovr,yL,rvr,cbe,tvr,avr,nvr,It,LL,svr,fbe,lvr,ivr,mc,dvr,mbe,cvr,fvr,ZQ,mvr,gvr,hvr,d4,pvr,Ir,xL,uvr,gbe,_vr,bvr,ln,Fvr,hbe,vvr,Tvr,pbe,Mvr,Evr,ube,Cvr,wvr,Avr,Hr,c4,_be,yvr,Lvr,eW,xvr,$vr,kvr,f4,bbe,Svr,Rvr,oW,Bvr,Pvr,Ivr,m4,Fbe,qvr,Nvr,rW,jvr,Dvr,Gvr,g4,vbe,Ovr,Vvr,tW,Xvr,zvr,Qvr,h4,Tbe,Wvr,Hvr,aW,Uvr,Jvr,Yvr,p4,dSe,gc,u4,Mbe,$L,Kvr,Ebe,Zvr,cSe,cr,kL,e6r,hc,o6r,nW,r6r,t6r,sW,a6r,n6r,s6r,SL,l6r,Cbe,i6r,d6r,c6r,qt,RL,f6r,wbe,m6r,g6r,pc,h6r,Abe,p6r,u6r,lW,_6r,b6r,F6r,_4,v6r,qr,BL,T6r,ybe,M6r,E6r,dn,C6r,Lbe,w6r,A6r,xbe,y6r,L6r,$be,x6r,$6r,k6r,be,b4,kbe,S6r,R6r,iW,B6r,P6r,I6r,F4,Sbe,q6r,N6r,dW,j6r,D6r,G6r,v4,Rbe,O6r,V6r,cW,X6r,z6r,Q6r,T4,Bbe,W6r,H6r,fW,U6r,J6r,Y6r,M4,Pbe,K6r,Z6r,mW,eTr,oTr,rTr,E4,Ibe,tTr,aTr,gW,nTr,sTr,lTr,C4,qbe,iTr,dTr,hW,cTr,fTr,mTr,w4,Nbe,gTr,hTr,pW,pTr,uTr,_Tr,A4,jbe,bTr,FTr,uW,vTr,TTr,MTr,y4,Dbe,ETr,CTr,_W,wTr,ATr,yTr,L4,Gbe,LTr,xTr,bW,$Tr,kTr,STr,x4,Obe,RTr,BTr,FW,PTr,ITr,qTr,$4,fSe,uc,k4,Vbe,PL,NTr,Xbe,jTr,mSe,fr,IL,DTr,_c,GTr,vW,OTr,VTr,TW,XTr,zTr,QTr,qL,WTr,zbe,HTr,UTr,JTr,Nt,NL,YTr,Qbe,KTr,ZTr,bc,eMr,Wbe,oMr,rMr,MW,tMr,aMr,nMr,S4,sMr,Nr,jL,lMr,Hbe,iMr,dMr,cn,cMr,Ube,fMr,mMr,Jbe,gMr,hMr,Ybe,pMr,uMr,_Mr,Ce,R4,Kbe,bMr,FMr,EW,vMr,TMr,MMr,B4,Zbe,EMr,CMr,CW,wMr,AMr,yMr,P4,e5e,LMr,xMr,wW,$Mr,kMr,SMr,I4,o5e,RMr,BMr,AW,PMr,IMr,qMr,q4,r5e,NMr,jMr,yW,DMr,GMr,OMr,N4,t5e,VMr,XMr,LW,zMr,QMr,WMr,j4,a5e,HMr,UMr,xW,JMr,YMr,KMr,D4,n5e,ZMr,e9r,$W,o9r,r9r,t9r,G4,s5e,a9r,n9r,kW,s9r,l9r,i9r,O4,l5e,d9r,c9r,SW,f9r,m9r,g9r,V4,gSe,Fc,X4,i5e,DL,h9r,d5e,p9r,hSe,mr,GL,u9r,vc,_9r,RW,b9r,F9r,BW,v9r,T9r,M9r,OL,E9r,c5e,C9r,w9r,A9r,jt,VL,y9r,f5e,L9r,x9r,Tc,$9r,m5e,k9r,S9r,PW,R9r,B9r,P9r,z4,I9r,jr,XL,q9r,g5e,N9r,j9r,fn,D9r,h5e,G9r,O9r,p5e,V9r,X9r,u5e,z9r,Q9r,W9r,xe,Q4,_5e,H9r,U9r,IW,J9r,Y9r,K9r,W4,b5e,Z9r,e4r,qW,o4r,r4r,t4r,H4,F5e,a4r,n4r,NW,s4r,l4r,i4r,U4,v5e,d4r,c4r,jW,f4r,m4r,g4r,J4,T5e,h4r,p4r,DW,u4r,_4r,b4r,Y4,M5e,F4r,v4r,GW,T4r,M4r,E4r,K4,E5e,C4r,w4r,OW,A4r,y4r,L4r,Z4,C5e,x4r,$4r,VW,k4r,S4r,R4r,eE,w5e,B4r,P4r,XW,I4r,q4r,N4r,oE,pSe,Mc,rE,A5e,zL,j4r,y5e,D4r,uSe,gr,QL,G4r,Ec,O4r,zW,V4r,X4r,QW,z4r,Q4r,W4r,WL,H4r,L5e,U4r,J4r,Y4r,Dt,HL,K4r,x5e,Z4r,eEr,Cc,oEr,$5e,rEr,tEr,WW,aEr,nEr,sEr,tE,lEr,Dr,UL,iEr,k5e,dEr,cEr,mn,fEr,S5e,mEr,gEr,R5e,hEr,pEr,B5e,uEr,_Er,bEr,we,aE,P5e,FEr,vEr,HW,TEr,MEr,EEr,nE,I5e,CEr,wEr,UW,AEr,yEr,LEr,sE,q5e,xEr,$Er,JW,kEr,SEr,REr,lE,N5e,BEr,PEr,YW,IEr,qEr,NEr,iE,j5e,jEr,DEr,KW,GEr,OEr,VEr,dE,D5e,XEr,zEr,ZW,QEr,WEr,HEr,cE,G5e,UEr,JEr,eH,YEr,KEr,ZEr,fE,O5e,eCr,oCr,oH,rCr,tCr,aCr,mE,V5e,nCr,sCr,rH,lCr,iCr,dCr,gE,X5e,cCr,fCr,tH,mCr,gCr,hCr,hE,_Se,wc,pE,z5e,JL,pCr,Q5e,uCr,bSe,hr,YL,_Cr,Ac,bCr,aH,FCr,vCr,nH,TCr,MCr,ECr,KL,CCr,W5e,wCr,ACr,yCr,Gt,ZL,LCr,H5e,xCr,$Cr,yc,kCr,U5e,SCr,RCr,sH,BCr,PCr,ICr,uE,qCr,Gr,e8,NCr,J5e,jCr,DCr,gn,GCr,Y5e,OCr,VCr,K5e,XCr,zCr,Z5e,QCr,WCr,HCr,Ae,_E,eFe,UCr,JCr,lH,YCr,KCr,ZCr,bE,oFe,e3r,o3r,iH,r3r,t3r,a3r,FE,rFe,n3r,s3r,dH,l3r,i3r,d3r,vE,tFe,c3r,f3r,cH,m3r,g3r,h3r,TE,aFe,p3r,u3r,fH,_3r,b3r,F3r,ME,nFe,v3r,T3r,mH,M3r,E3r,C3r,EE,sFe,w3r,A3r,gH,y3r,L3r,x3r,CE,lFe,$3r,k3r,hH,S3r,R3r,B3r,wE,iFe,P3r,I3r,pH,q3r,N3r,j3r,AE,dFe,D3r,G3r,uH,O3r,V3r,X3r,yE,FSe,Lc,LE,cFe,o8,z3r,fFe,Q3r,vSe,pr,r8,W3r,xc,H3r,_H,U3r,J3r,bH,Y3r,K3r,Z3r,t8,ewr,mFe,owr,rwr,twr,Ot,a8,awr,gFe,nwr,swr,$c,lwr,hFe,iwr,dwr,FH,cwr,fwr,mwr,xE,gwr,Or,n8,hwr,pFe,pwr,uwr,hn,_wr,uFe,bwr,Fwr,_Fe,vwr,Twr,bFe,Mwr,Ewr,Cwr,Ne,$E,FFe,wwr,Awr,vH,ywr,Lwr,xwr,kE,vFe,$wr,kwr,TH,Swr,Rwr,Bwr,SE,TFe,Pwr,Iwr,MH,qwr,Nwr,jwr,RE,MFe,Dwr,Gwr,EH,Owr,Vwr,Xwr,BE,EFe,zwr,Qwr,CH,Wwr,Hwr,Uwr,PE,CFe,Jwr,Ywr,wH,Kwr,Zwr,eAr,IE,wFe,oAr,rAr,AH,tAr,aAr,nAr,qE,AFe,sAr,lAr,yH,iAr,dAr,cAr,NE,TSe,kc,jE,yFe,s8,fAr,LFe,mAr,MSe,ur,l8,gAr,Sc,hAr,LH,pAr,uAr,xH,_Ar,bAr,FAr,i8,vAr,xFe,TAr,MAr,EAr,Vt,d8,CAr,$Fe,wAr,AAr,Rc,yAr,kFe,LAr,xAr,$H,$Ar,kAr,SAr,DE,RAr,Vr,c8,BAr,SFe,PAr,IAr,pn,qAr,RFe,NAr,jAr,BFe,DAr,GAr,PFe,OAr,VAr,XAr,je,GE,IFe,zAr,QAr,kH,WAr,HAr,UAr,OE,qFe,JAr,YAr,SH,KAr,ZAr,e0r,VE,NFe,o0r,r0r,RH,t0r,a0r,n0r,XE,jFe,s0r,l0r,BH,i0r,d0r,c0r,zE,DFe,f0r,m0r,PH,g0r,h0r,p0r,QE,GFe,u0r,_0r,IH,b0r,F0r,v0r,WE,OFe,T0r,M0r,qH,E0r,C0r,w0r,HE,VFe,A0r,y0r,NH,L0r,x0r,$0r,UE,ESe,Bc,JE,XFe,f8,k0r,zFe,S0r,CSe,_r,m8,R0r,Pc,B0r,jH,P0r,I0r,DH,q0r,N0r,j0r,g8,D0r,QFe,G0r,O0r,V0r,Xt,h8,X0r,WFe,z0r,Q0r,Ic,W0r,HFe,H0r,U0r,GH,J0r,Y0r,K0r,YE,Z0r,Xr,p8,eyr,UFe,oyr,ryr,un,tyr,JFe,ayr,nyr,YFe,syr,lyr,KFe,iyr,dyr,cyr,ZFe,KE,eve,fyr,myr,OH,gyr,hyr,pyr,ZE,wSe,qc,eC,ove,u8,uyr,rve,_yr,ASe,br,_8,byr,Nc,Fyr,VH,vyr,Tyr,XH,Myr,Eyr,Cyr,b8,wyr,tve,Ayr,yyr,Lyr,zt,F8,xyr,ave,$yr,kyr,jc,Syr,nve,Ryr,Byr,zH,Pyr,Iyr,qyr,oC,Nyr,zr,v8,jyr,sve,Dyr,Gyr,_n,Oyr,lve,Vyr,Xyr,ive,zyr,Qyr,dve,Wyr,Hyr,Uyr,T8,rC,cve,Jyr,Yyr,QH,Kyr,Zyr,eLr,tC,fve,oLr,rLr,WH,tLr,aLr,nLr,aC,ySe,Dc,nC,mve,M8,sLr,gve,lLr,LSe,Fr,E8,iLr,Gc,dLr,HH,cLr,fLr,UH,mLr,gLr,hLr,C8,pLr,hve,uLr,_Lr,bLr,Qt,w8,FLr,pve,vLr,TLr,Oc,MLr,uve,ELr,CLr,JH,wLr,ALr,yLr,sC,LLr,Qr,A8,xLr,_ve,$Lr,kLr,bn,SLr,bve,RLr,BLr,Fve,PLr,ILr,vve,qLr,NLr,jLr,Tve,lC,Mve,DLr,GLr,YH,OLr,VLr,XLr,iC,xSe;return d=new Z({}),ba=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),yw=new Z({}),Lw=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Yc=new zLr({props:{warning:!0,$$slots:{default:[X1t]},$$scope:{ctx:A}}}),xw=new Z({}),$w=new k({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/configuration_auto.py#L538"}}),Rw=new k({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/configuration_auto.py#L561"}}),Xm=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[z1t]},$$scope:{ctx:A}}}),Bw=new k({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/configuration_auto.py#L683"}}),Pw=new Z({}),Iw=new k({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/tokenization_auto.py#L351"}}),jw=new k({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16925/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/tokenization_auto.py#L365"}}),Mg=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[Q1t]},$$scope:{ctx:A}}}),Dw=new k({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/tokenization_auto.py#L561"}}),Gw=new Z({}),Ow=new k({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/feature_extraction_auto.py#L171"}}),zw=new k({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16925/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/feature_extraction_auto.py#L185"}}),Vg=new zLr({props:{$$slots:{default:[W1t]},$$scope:{ctx:A}}}),Xg=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[H1t]},$$scope:{ctx:A}}}),Qw=new k({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/feature_extraction_auto.py#L312"}}),Ww=new Z({}),Hw=new k({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/processing_auto.py#L70"}}),Yw=new k({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/processing_auto.py#L84"}}),oh=new zLr({props:{$$slots:{default:[U1t]},$$scope:{ctx:A}}}),rh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[J1t]},$$scope:{ctx:A}}}),Kw=new k({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/processing_auto.py#L237"}}),Zw=new Z({}),eA=new k({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/modeling_auto.py#L704"}}),rA=new k({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16925/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16925/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><code>QDQBertConfig</code> configuration class: <code>QDQBertModel</code> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L389"}}),nh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[Y1t]},$$scope:{ctx:A}}}),tA=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L417"}}),Vp=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[K1t]},$$scope:{ctx:A}}}),aA=new Z({}),nA=new k({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/modeling_auto.py#L711"}}),lA=new k({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16925/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L389"}}),zp=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[Z1t]},$$scope:{ctx:A}}}),iA=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L417"}}),Su=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[ebt]},$$scope:{ctx:A}}}),dA=new Z({}),cA=new k({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/modeling_auto.py#L726"}}),mA=new k({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16925/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><code>QDQBertConfig</code> configuration class: <code>QDQBertLMHeadModel</code> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L389"}}),Bu=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[obt]},$$scope:{ctx:A}}}),gA=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L417"}}),__=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[rbt]},$$scope:{ctx:A}}}),hA=new Z({}),pA=new k({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/modeling_auto.py#L733"}}),_A=new k({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16925/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><code>QDQBertConfig</code> configuration class: <code>QDQBertForMaskedLM</code> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L389"}}),F_=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[tbt]},$$scope:{ctx:A}}}),bA=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L417"}}),r2=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[abt]},$$scope:{ctx:A}}}),FA=new Z({}),vA=new k({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/modeling_auto.py#L740"}}),MA=new k({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16925/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L389"}}),a2=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[nbt]},$$scope:{ctx:A}}}),EA=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L417"}}),M2=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[sbt]},$$scope:{ctx:A}}}),CA=new Z({}),wA=new k({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/modeling_auto.py#L749"}}),yA=new k({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16925/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><code>QDQBertConfig</code> configuration class: <code>QDQBertForSequenceClassification</code> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L389"}}),C2=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[lbt]},$$scope:{ctx:A}}}),LA=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L417"}}),b1=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[ibt]},$$scope:{ctx:A}}}),xA=new Z({}),$A=new k({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/modeling_auto.py#L783"}}),SA=new k({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16925/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><code>QDQBertConfig</code> configuration class: <code>QDQBertForMultipleChoice</code> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L389"}}),v1=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[dbt]},$$scope:{ctx:A}}}),RA=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L417"}}),J1=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[cbt]},$$scope:{ctx:A}}}),BA=new Z({}),PA=new k({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/modeling_auto.py#L790"}}),qA=new k({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><code>QDQBertConfig</code> configuration class: <code>QDQBertForNextSentencePrediction</code> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L389"}}),K1=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[fbt]},$$scope:{ctx:A}}}),NA=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L417"}}),nb=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[mbt]},$$scope:{ctx:A}}}),jA=new Z({}),DA=new k({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/modeling_auto.py#L776"}}),OA=new k({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16925/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><code>QDQBertConfig</code> configuration class: <code>QDQBertForTokenClassification</code> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L389"}}),lb=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[gbt]},$$scope:{ctx:A}}}),VA=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L417"}}),Ob=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[hbt]},$$scope:{ctx:A}}}),XA=new Z({}),zA=new k({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/modeling_auto.py#L758"}}),WA=new k({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16925/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><code>QDQBertConfig</code> configuration class: <code>QDQBertForQuestionAnswering</code> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L389"}}),Xb=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[pbt]},$$scope:{ctx:A}}}),HA=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L417"}}),k5=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[ubt]},$$scope:{ctx:A}}}),UA=new Z({}),JA=new k({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/modeling_auto.py#L765"}}),KA=new k({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16925/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L389"}}),R5=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[_bt]},$$scope:{ctx:A}}}),ZA=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L417"}}),I5=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[bbt]},$$scope:{ctx:A}}}),e0=new Z({}),o0=new k({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/modeling_auto.py#L799"}}),t0=new k({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16925/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16925/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16925/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16925/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L389"}}),N5=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[Fbt]},$$scope:{ctx:A}}}),a0=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L417"}}),U5=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[vbt]},$$scope:{ctx:A}}}),n0=new Z({}),s0=new k({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/modeling_auto.py#L838"}}),i0=new k({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16925/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L389"}}),Y5=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Tbt]},$$scope:{ctx:A}}}),d0=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L417"}}),eF=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Mbt]},$$scope:{ctx:A}}}),c0=new Z({}),f0=new k({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/modeling_auto.py#L845"}}),g0=new k({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16925/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L389"}}),rF=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[Ebt]},$$scope:{ctx:A}}}),h0=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L417"}}),mF=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Cbt]},$$scope:{ctx:A}}}),p0=new Z({}),u0=new k({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/modeling_auto.py#L868"}}),b0=new k({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16925/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L389"}}),hF=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[wbt]},$$scope:{ctx:A}}}),F0=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L417"}}),vF=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Abt]},$$scope:{ctx:A}}}),v0=new Z({}),T0=new k({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/modeling_auto.py#L852"}}),E0=new k({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16925/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L389"}}),MF=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[ybt]},$$scope:{ctx:A}}}),C0=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L417"}}),SF=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[Lbt]},$$scope:{ctx:A}}}),w0=new Z({}),A0=new k({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/modeling_auto.py#L859"}}),L0=new k({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16925/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L389"}}),BF=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[xbt]},$$scope:{ctx:A}}}),x0=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L417"}}),NF=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[$bt]},$$scope:{ctx:A}}}),k0=new Z({}),S0=new k({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/modeling_auto.py#L877"}}),B0=new k({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16925/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L389"}}),DF=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[kbt]},$$scope:{ctx:A}}}),P0=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L417"}}),QF=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[Sbt]},$$scope:{ctx:A}}}),I0=new Z({}),q0=new k({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/modeling_auto.py#L884"}}),j0=new k({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16925/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L389"}}),HF=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[Rbt]},$$scope:{ctx:A}}}),D0=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L417"}}),ZF=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[Bbt]},$$scope:{ctx:A}}}),G0=new Z({}),O0=new k({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/modeling_auto.py#L831"}}),X0=new k({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16925/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L389"}}),ov=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[Pbt]},$$scope:{ctx:A}}}),z0=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L417"}}),av=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[Ibt]},$$scope:{ctx:A}}}),Q0=new Z({}),W0=new k({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/modeling_auto.py#L806"}}),U0=new k({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16925/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L389"}}),sv=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[qbt]},$$scope:{ctx:A}}}),J0=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L417"}}),dv=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[Nbt]},$$scope:{ctx:A}}}),Y0=new Z({}),K0=new k({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/modeling_auto.py#L813"}}),ey=new k({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16925/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L389"}}),fv=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[jbt]},$$scope:{ctx:A}}}),oy=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L417"}}),pv=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[Dbt]},$$scope:{ctx:A}}}),ty=new Z({}),ay=new k({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/modeling_auto.py#L822"}}),sy=new k({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16925/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L389"}}),_v=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[Gbt]},$$scope:{ctx:A}}}),ly=new k({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L417"}}),vv=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[Obt]},$$scope:{ctx:A}}}),iy=new Z({}),dy=new k({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/modeling_tf_auto.py#L374"}}),fy=new k({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16925/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16925/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L389"}}),Mv=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[Vbt]},$$scope:{ctx:A}}}),my=new k({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L417"}}),c6=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[Xbt]},$$scope:{ctx:A}}}),gy=new Z({}),hy=new k({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),uy=new k({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16925/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L389"}}),m6=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[zbt]},$$scope:{ctx:A}}}),_y=new k({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L417"}}),P6=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Qbt]},$$scope:{ctx:A}}}),by=new Z({}),Fy=new k({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/modeling_tf_auto.py#L396"}}),Ty=new k({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L389"}}),q6=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[Wbt]},$$scope:{ctx:A}}}),My=new k({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L417"}}),U6=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Hbt]},$$scope:{ctx:A}}}),Ey=new Z({}),Cy=new k({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),Ay=new k({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16925/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L389"}}),Y6=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[Ubt]},$$scope:{ctx:A}}}),yy=new k({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L417"}}),eT=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Jbt]},$$scope:{ctx:A}}}),xy=new Z({}),$y=new k({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),Sy=new k({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16925/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L389"}}),rT=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[Ybt]},$$scope:{ctx:A}}}),Ry=new k({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L417"}}),ET=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Kbt]},$$scope:{ctx:A}}}),By=new Z({}),Py=new k({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),qy=new k({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16925/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L389"}}),wT=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Zbt]},$$scope:{ctx:A}}}),Ny=new k({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L417"}}),IT=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[e5t]},$$scope:{ctx:A}}}),jy=new Z({}),Dy=new k({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/modeling_tf_auto.py#L433"}}),Oy=new k({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16925/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L389"}}),NT=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[o5t]},$$scope:{ctx:A}}}),Vy=new k({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L417"}}),cM=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[r5t]},$$scope:{ctx:A}}}),Xy=new Z({}),zy=new k({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),Wy=new k({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16925/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L389"}}),mM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[t5t]},$$scope:{ctx:A}}}),Hy=new k({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L417"}}),$M=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[a5t]},$$scope:{ctx:A}}}),Uy=new Z({}),Jy=new k({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),Ky=new k({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16925/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L389"}}),SM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[n5t]},$$scope:{ctx:A}}}),Zy=new k({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L417"}}),BM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[s5t]},$$scope:{ctx:A}}}),eL=new Z({}),oL=new k({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),tL=new k({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16925/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L389"}}),IM=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[l5t]},$$scope:{ctx:A}}}),aL=new k({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L417"}}),t9=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[i5t]},$$scope:{ctx:A}}}),nL=new Z({}),sL=new k({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/modeling_tf_auto.py#L442"}}),iL=new k({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16925/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L389"}}),n9=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[d5t]},$$scope:{ctx:A}}}),dL=new k({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L417"}}),w9=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[c5t]},$$scope:{ctx:A}}}),cL=new Z({}),fL=new k({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),gL=new k({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16925/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L389"}}),y9=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[f5t]},$$scope:{ctx:A}}}),hL=new k({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L417"}}),x9=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[m5t]},$$scope:{ctx:A}}}),pL=new Z({}),uL=new k({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),bL=new k({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16925/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L389"}}),k9=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[g5t]},$$scope:{ctx:A}}}),FL=new k({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L417"}}),R9=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[h5t]},$$scope:{ctx:A}}}),vL=new Z({}),TL=new k({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),EL=new k({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16925/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L389"}}),P9=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[p5t]},$$scope:{ctx:A}}}),CL=new k({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L417"}}),l4=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[u5t]},$$scope:{ctx:A}}}),wL=new Z({}),AL=new k({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),LL=new k({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16925/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L389"}}),d4=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[_5t]},$$scope:{ctx:A}}}),xL=new k({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L417"}}),p4=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[b5t]},$$scope:{ctx:A}}}),$L=new Z({}),kL=new k({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),RL=new k({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16925/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L389"}}),_4=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[F5t]},$$scope:{ctx:A}}}),BL=new k({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L417"}}),$4=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[v5t]},$$scope:{ctx:A}}}),PL=new Z({}),IL=new k({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),NL=new k({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16925/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L389"}}),S4=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[T5t]},$$scope:{ctx:A}}}),jL=new k({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L417"}}),V4=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[M5t]},$$scope:{ctx:A}}}),DL=new Z({}),GL=new k({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),VL=new k({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16925/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L389"}}),z4=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[E5t]},$$scope:{ctx:A}}}),XL=new k({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L417"}}),oE=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[C5t]},$$scope:{ctx:A}}}),zL=new Z({}),QL=new k({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),HL=new k({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16925/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L389"}}),tE=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[w5t]},$$scope:{ctx:A}}}),UL=new k({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L417"}}),hE=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[A5t]},$$scope:{ctx:A}}}),JL=new Z({}),YL=new k({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),ZL=new k({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16925/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L389"}}),uE=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[y5t]},$$scope:{ctx:A}}}),e8=new k({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L417"}}),yE=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[L5t]},$$scope:{ctx:A}}}),o8=new Z({}),r8=new k({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),a8=new k({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16925/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L389"}}),xE=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[x5t]},$$scope:{ctx:A}}}),n8=new k({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L417"}}),NE=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[$5t]},$$scope:{ctx:A}}}),s8=new Z({}),l8=new k({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),d8=new k({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16925/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L389"}}),DE=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[k5t]},$$scope:{ctx:A}}}),c8=new k({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L417"}}),UE=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[S5t]},$$scope:{ctx:A}}}),f8=new Z({}),m8=new k({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),h8=new k({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L389"}}),YE=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[R5t]},$$scope:{ctx:A}}}),p8=new k({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L417"}}),ZE=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[B5t]},$$scope:{ctx:A}}}),u8=new Z({}),_8=new k({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),F8=new k({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16925/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16925/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L389"}}),oC=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[P5t]},$$scope:{ctx:A}}}),v8=new k({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L417"}}),aC=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[I5t]},$$scope:{ctx:A}}}),M8=new Z({}),E8=new k({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),w8=new k({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16925/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16925/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L389"}}),sC=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[q5t]},$$scope:{ctx:A}}}),A8=new k({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16925/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16925/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16925/src/transformers/models/auto/auto_factory.py#L417"}}),iC=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[N5t]},$$scope:{ctx:A}}}),{c(){g=a("meta"),F=l(),p=a("h1"),m=a("a"),u=a("span"),v(d.$$.fragment),h=l(),vo=a("span"),Ql=o("Auto Classes"),Qc=l(),Yr=a("p"),Wl=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Hl=a("code"),Ew=o("from_pretrained()"),Wc=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Be=l(),Ge=a("p"),Ul=o("Instantiating one of "),vn=a("a"),Cw=o("AutoConfig"),Tn=o(", "),Mn=a("a"),ww=o("AutoModel"),Jl=o(`, and
`),En=a("a"),Aw=o("AutoTokenizer"),Yl=o(" will directly create a class of the relevant architecture. For instance"),Hc=l(),v(ba.$$.fragment),Oe=l(),Me=a("p"),kx=o("will create a model that is an instance of "),Kl=a("a"),Sx=o("BertModel"),Rx=o("."),To=l(),Fa=a("p"),Bx=o("There is one class of "),Uc=a("code"),Px=o("AutoModel"),PBe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),L$e=l(),Zl=a("h2"),Jc=a("a"),OJ=a("span"),v(yw.$$.fragment),IBe=l(),VJ=a("span"),qBe=o("Extending the Auto Classes"),x$e=l(),Cn=a("p"),NBe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),XJ=a("code"),jBe=o("NewModel"),DBe=o(", make sure you have a "),zJ=a("code"),GBe=o("NewModelConfig"),OBe=o(` then you can add those to the auto
classes like this:`),$$e=l(),v(Lw.$$.fragment),k$e=l(),Ix=a("p"),VBe=o("You will then be able to use the auto classes like you would usually do!"),S$e=l(),v(Yc.$$.fragment),R$e=l(),ei=a("h2"),Kc=a("a"),QJ=a("span"),v(xw.$$.fragment),XBe=l(),WJ=a("span"),zBe=o("AutoConfig"),B$e=l(),Mo=a("div"),v($w.$$.fragment),QBe=l(),kw=a("p"),WBe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),qx=a("a"),HBe=o("from_pretrained()"),UBe=o(" class method."),JBe=l(),Sw=a("p"),YBe=o("This class cannot be instantiated directly using "),HJ=a("code"),KBe=o("__init__()"),ZBe=o(" (throws an error)."),ePe=l(),vr=a("div"),v(Rw.$$.fragment),oPe=l(),UJ=a("p"),rPe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),tPe=l(),oi=a("p"),aPe=o("The configuration class to instantiate is selected based on the "),JJ=a("code"),nPe=o("model_type"),sPe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),YJ=a("code"),lPe=o("pretrained_model_name_or_path"),iPe=o(":"),dPe=l(),y=a("ul"),Zc=a("li"),KJ=a("strong"),cPe=o("albert"),fPe=o(" \u2014 "),Nx=a("a"),mPe=o("AlbertConfig"),gPe=o(" (ALBERT model)"),hPe=l(),ef=a("li"),ZJ=a("strong"),pPe=o("bart"),uPe=o(" \u2014 "),jx=a("a"),_Pe=o("BartConfig"),bPe=o(" (BART model)"),FPe=l(),of=a("li"),eY=a("strong"),vPe=o("beit"),TPe=o(" \u2014 "),Dx=a("a"),MPe=o("BeitConfig"),EPe=o(" (BEiT model)"),CPe=l(),rf=a("li"),oY=a("strong"),wPe=o("bert"),APe=o(" \u2014 "),Gx=a("a"),yPe=o("BertConfig"),LPe=o(" (BERT model)"),xPe=l(),tf=a("li"),rY=a("strong"),$Pe=o("bert-generation"),kPe=o(" \u2014 "),Ox=a("a"),SPe=o("BertGenerationConfig"),RPe=o(" (Bert Generation model)"),BPe=l(),af=a("li"),tY=a("strong"),PPe=o("big_bird"),IPe=o(" \u2014 "),Vx=a("a"),qPe=o("BigBirdConfig"),NPe=o(" (BigBird model)"),jPe=l(),nf=a("li"),aY=a("strong"),DPe=o("bigbird_pegasus"),GPe=o(" \u2014 "),Xx=a("a"),OPe=o("BigBirdPegasusConfig"),VPe=o(" (BigBirdPegasus model)"),XPe=l(),sf=a("li"),nY=a("strong"),zPe=o("blenderbot"),QPe=o(" \u2014 "),zx=a("a"),WPe=o("BlenderbotConfig"),HPe=o(" (Blenderbot model)"),UPe=l(),lf=a("li"),sY=a("strong"),JPe=o("blenderbot-small"),YPe=o(" \u2014 "),Qx=a("a"),KPe=o("BlenderbotSmallConfig"),ZPe=o(" (BlenderbotSmall model)"),eIe=l(),df=a("li"),lY=a("strong"),oIe=o("camembert"),rIe=o(" \u2014 "),Wx=a("a"),tIe=o("CamembertConfig"),aIe=o(" (CamemBERT model)"),nIe=l(),cf=a("li"),iY=a("strong"),sIe=o("canine"),lIe=o(" \u2014 "),Hx=a("a"),iIe=o("CanineConfig"),dIe=o(" (Canine model)"),cIe=l(),ff=a("li"),dY=a("strong"),fIe=o("clip"),mIe=o(" \u2014 "),Ux=a("a"),gIe=o("CLIPConfig"),hIe=o(" (CLIP model)"),pIe=l(),mf=a("li"),cY=a("strong"),uIe=o("convbert"),_Ie=o(" \u2014 "),Jx=a("a"),bIe=o("ConvBertConfig"),FIe=o(" (ConvBERT model)"),vIe=l(),gf=a("li"),fY=a("strong"),TIe=o("convnext"),MIe=o(" \u2014 "),Yx=a("a"),EIe=o("ConvNextConfig"),CIe=o(" (ConvNext model)"),wIe=l(),hf=a("li"),mY=a("strong"),AIe=o("ctrl"),yIe=o(" \u2014 "),Kx=a("a"),LIe=o("CTRLConfig"),xIe=o(" (CTRL model)"),$Ie=l(),pf=a("li"),gY=a("strong"),kIe=o("data2vec-audio"),SIe=o(" \u2014 "),Zx=a("a"),RIe=o("Data2VecAudioConfig"),BIe=o(" (Data2VecAudio model)"),PIe=l(),uf=a("li"),hY=a("strong"),IIe=o("data2vec-text"),qIe=o(" \u2014 "),e7=a("a"),NIe=o("Data2VecTextConfig"),jIe=o(" (Data2VecText model)"),DIe=l(),_f=a("li"),pY=a("strong"),GIe=o("deberta"),OIe=o(" \u2014 "),o7=a("a"),VIe=o("DebertaConfig"),XIe=o(" (DeBERTa model)"),zIe=l(),bf=a("li"),uY=a("strong"),QIe=o("deberta-v2"),WIe=o(" \u2014 "),r7=a("a"),HIe=o("DebertaV2Config"),UIe=o(" (DeBERTa-v2 model)"),JIe=l(),Ff=a("li"),_Y=a("strong"),YIe=o("decision_transformer"),KIe=o(" \u2014 "),t7=a("a"),ZIe=o("DecisionTransformerConfig"),eqe=o(" (Decision Transformer model)"),oqe=l(),vf=a("li"),bY=a("strong"),rqe=o("deit"),tqe=o(" \u2014 "),a7=a("a"),aqe=o("DeiTConfig"),nqe=o(" (DeiT model)"),sqe=l(),Tf=a("li"),FY=a("strong"),lqe=o("detr"),iqe=o(" \u2014 "),n7=a("a"),dqe=o("DetrConfig"),cqe=o(" (DETR model)"),fqe=l(),Mf=a("li"),vY=a("strong"),mqe=o("distilbert"),gqe=o(" \u2014 "),s7=a("a"),hqe=o("DistilBertConfig"),pqe=o(" (DistilBERT model)"),uqe=l(),Ef=a("li"),TY=a("strong"),_qe=o("dpr"),bqe=o(" \u2014 "),l7=a("a"),Fqe=o("DPRConfig"),vqe=o(" (DPR model)"),Tqe=l(),Cf=a("li"),MY=a("strong"),Mqe=o("electra"),Eqe=o(" \u2014 "),i7=a("a"),Cqe=o("ElectraConfig"),wqe=o(" (ELECTRA model)"),Aqe=l(),wf=a("li"),EY=a("strong"),yqe=o("encoder-decoder"),Lqe=o(" \u2014 "),d7=a("a"),xqe=o("EncoderDecoderConfig"),$qe=o(" (Encoder decoder model)"),kqe=l(),Af=a("li"),CY=a("strong"),Sqe=o("flaubert"),Rqe=o(" \u2014 "),c7=a("a"),Bqe=o("FlaubertConfig"),Pqe=o(" (FlauBERT model)"),Iqe=l(),yf=a("li"),wY=a("strong"),qqe=o("fnet"),Nqe=o(" \u2014 "),f7=a("a"),jqe=o("FNetConfig"),Dqe=o(" (FNet model)"),Gqe=l(),Lf=a("li"),AY=a("strong"),Oqe=o("fsmt"),Vqe=o(" \u2014 "),m7=a("a"),Xqe=o("FSMTConfig"),zqe=o(" (FairSeq Machine-Translation model)"),Qqe=l(),xf=a("li"),yY=a("strong"),Wqe=o("funnel"),Hqe=o(" \u2014 "),g7=a("a"),Uqe=o("FunnelConfig"),Jqe=o(" (Funnel Transformer model)"),Yqe=l(),$f=a("li"),LY=a("strong"),Kqe=o("glpn"),Zqe=o(" \u2014 "),h7=a("a"),eNe=o("GLPNConfig"),oNe=o(" (GLPN model)"),rNe=l(),kf=a("li"),xY=a("strong"),tNe=o("gpt2"),aNe=o(" \u2014 "),p7=a("a"),nNe=o("GPT2Config"),sNe=o(" (OpenAI GPT-2 model)"),lNe=l(),Sf=a("li"),$Y=a("strong"),iNe=o("gpt_neo"),dNe=o(" \u2014 "),u7=a("a"),cNe=o("GPTNeoConfig"),fNe=o(" (GPT Neo model)"),mNe=l(),Rf=a("li"),kY=a("strong"),gNe=o("gptj"),hNe=o(" \u2014 "),_7=a("a"),pNe=o("GPTJConfig"),uNe=o(" (GPT-J model)"),_Ne=l(),Bf=a("li"),SY=a("strong"),bNe=o("hubert"),FNe=o(" \u2014 "),b7=a("a"),vNe=o("HubertConfig"),TNe=o(" (Hubert model)"),MNe=l(),Pf=a("li"),RY=a("strong"),ENe=o("ibert"),CNe=o(" \u2014 "),F7=a("a"),wNe=o("IBertConfig"),ANe=o(" (I-BERT model)"),yNe=l(),If=a("li"),BY=a("strong"),LNe=o("imagegpt"),xNe=o(" \u2014 "),v7=a("a"),$Ne=o("ImageGPTConfig"),kNe=o(" (ImageGPT model)"),SNe=l(),qf=a("li"),PY=a("strong"),RNe=o("layoutlm"),BNe=o(" \u2014 "),T7=a("a"),PNe=o("LayoutLMConfig"),INe=o(" (LayoutLM model)"),qNe=l(),Nf=a("li"),IY=a("strong"),NNe=o("layoutlmv2"),jNe=o(" \u2014 "),M7=a("a"),DNe=o("LayoutLMv2Config"),GNe=o(" (LayoutLMv2 model)"),ONe=l(),jf=a("li"),qY=a("strong"),VNe=o("led"),XNe=o(" \u2014 "),E7=a("a"),zNe=o("LEDConfig"),QNe=o(" (LED model)"),WNe=l(),Df=a("li"),NY=a("strong"),HNe=o("longformer"),UNe=o(" \u2014 "),C7=a("a"),JNe=o("LongformerConfig"),YNe=o(" (Longformer model)"),KNe=l(),Gf=a("li"),jY=a("strong"),ZNe=o("luke"),eje=o(" \u2014 "),w7=a("a"),oje=o("LukeConfig"),rje=o(" (LUKE model)"),tje=l(),Of=a("li"),DY=a("strong"),aje=o("lxmert"),nje=o(" \u2014 "),A7=a("a"),sje=o("LxmertConfig"),lje=o(" (LXMERT model)"),ije=l(),Vf=a("li"),GY=a("strong"),dje=o("m2m_100"),cje=o(" \u2014 "),y7=a("a"),fje=o("M2M100Config"),mje=o(" (M2M100 model)"),gje=l(),Xf=a("li"),OY=a("strong"),hje=o("marian"),pje=o(" \u2014 "),L7=a("a"),uje=o("MarianConfig"),_je=o(" (Marian model)"),bje=l(),zf=a("li"),VY=a("strong"),Fje=o("maskformer"),vje=o(" \u2014 "),x7=a("a"),Tje=o("MaskFormerConfig"),Mje=o(" (MaskFormer model)"),Eje=l(),Qf=a("li"),XY=a("strong"),Cje=o("mbart"),wje=o(" \u2014 "),$7=a("a"),Aje=o("MBartConfig"),yje=o(" (mBART model)"),Lje=l(),Wf=a("li"),zY=a("strong"),xje=o("megatron-bert"),$je=o(" \u2014 "),k7=a("a"),kje=o("MegatronBertConfig"),Sje=o(" (MegatronBert model)"),Rje=l(),Hf=a("li"),QY=a("strong"),Bje=o("mobilebert"),Pje=o(" \u2014 "),S7=a("a"),Ije=o("MobileBertConfig"),qje=o(" (MobileBERT model)"),Nje=l(),Uf=a("li"),WY=a("strong"),jje=o("mpnet"),Dje=o(" \u2014 "),R7=a("a"),Gje=o("MPNetConfig"),Oje=o(" (MPNet model)"),Vje=l(),Jf=a("li"),HY=a("strong"),Xje=o("mt5"),zje=o(" \u2014 "),B7=a("a"),Qje=o("MT5Config"),Wje=o(" (mT5 model)"),Hje=l(),Yf=a("li"),UY=a("strong"),Uje=o("nystromformer"),Jje=o(" \u2014 "),P7=a("a"),Yje=o("NystromformerConfig"),Kje=o(" (Nystromformer model)"),Zje=l(),Kf=a("li"),JY=a("strong"),eDe=o("openai-gpt"),oDe=o(" \u2014 "),I7=a("a"),rDe=o("OpenAIGPTConfig"),tDe=o(" (OpenAI GPT model)"),aDe=l(),Zf=a("li"),YY=a("strong"),nDe=o("pegasus"),sDe=o(" \u2014 "),q7=a("a"),lDe=o("PegasusConfig"),iDe=o(" (Pegasus model)"),dDe=l(),em=a("li"),KY=a("strong"),cDe=o("perceiver"),fDe=o(" \u2014 "),N7=a("a"),mDe=o("PerceiverConfig"),gDe=o(" (Perceiver model)"),hDe=l(),om=a("li"),ZY=a("strong"),pDe=o("plbart"),uDe=o(" \u2014 "),j7=a("a"),_De=o("PLBartConfig"),bDe=o(" (PLBart model)"),FDe=l(),rm=a("li"),eK=a("strong"),vDe=o("poolformer"),TDe=o(" \u2014 "),D7=a("a"),MDe=o("PoolFormerConfig"),EDe=o(" (PoolFormer model)"),CDe=l(),tm=a("li"),oK=a("strong"),wDe=o("prophetnet"),ADe=o(" \u2014 "),G7=a("a"),yDe=o("ProphetNetConfig"),LDe=o(" (ProphetNet model)"),xDe=l(),am=a("li"),rK=a("strong"),$De=o("qdqbert"),kDe=o(" \u2014 "),tK=a("code"),SDe=o("QDQBertConfig"),RDe=o(" (QDQBert model)"),BDe=l(),nm=a("li"),aK=a("strong"),PDe=o("rag"),IDe=o(" \u2014 "),O7=a("a"),qDe=o("RagConfig"),NDe=o(" (RAG model)"),jDe=l(),sm=a("li"),nK=a("strong"),DDe=o("realm"),GDe=o(" \u2014 "),V7=a("a"),ODe=o("RealmConfig"),VDe=o(" (Realm model)"),XDe=l(),lm=a("li"),sK=a("strong"),zDe=o("reformer"),QDe=o(" \u2014 "),X7=a("a"),WDe=o("ReformerConfig"),HDe=o(" (Reformer model)"),UDe=l(),im=a("li"),lK=a("strong"),JDe=o("rembert"),YDe=o(" \u2014 "),z7=a("a"),KDe=o("RemBertConfig"),ZDe=o(" (RemBERT model)"),eGe=l(),dm=a("li"),iK=a("strong"),oGe=o("resnet"),rGe=o(" \u2014 "),Q7=a("a"),tGe=o("ResNetConfig"),aGe=o(" (ResNet model)"),nGe=l(),cm=a("li"),dK=a("strong"),sGe=o("retribert"),lGe=o(" \u2014 "),W7=a("a"),iGe=o("RetriBertConfig"),dGe=o(" (RetriBERT model)"),cGe=l(),fm=a("li"),cK=a("strong"),fGe=o("roberta"),mGe=o(" \u2014 "),H7=a("a"),gGe=o("RobertaConfig"),hGe=o(" (RoBERTa model)"),pGe=l(),mm=a("li"),fK=a("strong"),uGe=o("roformer"),_Ge=o(" \u2014 "),U7=a("a"),bGe=o("RoFormerConfig"),FGe=o(" (RoFormer model)"),vGe=l(),gm=a("li"),mK=a("strong"),TGe=o("segformer"),MGe=o(" \u2014 "),J7=a("a"),EGe=o("SegformerConfig"),CGe=o(" (SegFormer model)"),wGe=l(),hm=a("li"),gK=a("strong"),AGe=o("sew"),yGe=o(" \u2014 "),Y7=a("a"),LGe=o("SEWConfig"),xGe=o(" (SEW model)"),$Ge=l(),pm=a("li"),hK=a("strong"),kGe=o("sew-d"),SGe=o(" \u2014 "),K7=a("a"),RGe=o("SEWDConfig"),BGe=o(" (SEW-D model)"),PGe=l(),um=a("li"),pK=a("strong"),IGe=o("speech-encoder-decoder"),qGe=o(" \u2014 "),Z7=a("a"),NGe=o("SpeechEncoderDecoderConfig"),jGe=o(" (Speech Encoder decoder model)"),DGe=l(),_m=a("li"),uK=a("strong"),GGe=o("speech_to_text"),OGe=o(" \u2014 "),e$=a("a"),VGe=o("Speech2TextConfig"),XGe=o(" (Speech2Text model)"),zGe=l(),bm=a("li"),_K=a("strong"),QGe=o("speech_to_text_2"),WGe=o(" \u2014 "),o$=a("a"),HGe=o("Speech2Text2Config"),UGe=o(" (Speech2Text2 model)"),JGe=l(),Fm=a("li"),bK=a("strong"),YGe=o("splinter"),KGe=o(" \u2014 "),r$=a("a"),ZGe=o("SplinterConfig"),eOe=o(" (Splinter model)"),oOe=l(),vm=a("li"),FK=a("strong"),rOe=o("squeezebert"),tOe=o(" \u2014 "),t$=a("a"),aOe=o("SqueezeBertConfig"),nOe=o(" (SqueezeBERT model)"),sOe=l(),Tm=a("li"),vK=a("strong"),lOe=o("swin"),iOe=o(" \u2014 "),a$=a("a"),dOe=o("SwinConfig"),cOe=o(" (Swin model)"),fOe=l(),Mm=a("li"),TK=a("strong"),mOe=o("t5"),gOe=o(" \u2014 "),n$=a("a"),hOe=o("T5Config"),pOe=o(" (T5 model)"),uOe=l(),Em=a("li"),MK=a("strong"),_Oe=o("tapas"),bOe=o(" \u2014 "),s$=a("a"),FOe=o("TapasConfig"),vOe=o(" (TAPAS model)"),TOe=l(),Cm=a("li"),EK=a("strong"),MOe=o("transfo-xl"),EOe=o(" \u2014 "),l$=a("a"),COe=o("TransfoXLConfig"),wOe=o(" (Transformer-XL model)"),AOe=l(),wm=a("li"),CK=a("strong"),yOe=o("trocr"),LOe=o(" \u2014 "),i$=a("a"),xOe=o("TrOCRConfig"),$Oe=o(" (TrOCR model)"),kOe=l(),Am=a("li"),wK=a("strong"),SOe=o("unispeech"),ROe=o(" \u2014 "),d$=a("a"),BOe=o("UniSpeechConfig"),POe=o(" (UniSpeech model)"),IOe=l(),ym=a("li"),AK=a("strong"),qOe=o("unispeech-sat"),NOe=o(" \u2014 "),c$=a("a"),jOe=o("UniSpeechSatConfig"),DOe=o(" (UniSpeechSat model)"),GOe=l(),Lm=a("li"),yK=a("strong"),OOe=o("van"),VOe=o(" \u2014 "),f$=a("a"),XOe=o("VanConfig"),zOe=o(" (VAN model)"),QOe=l(),xm=a("li"),LK=a("strong"),WOe=o("vilt"),HOe=o(" \u2014 "),m$=a("a"),UOe=o("ViltConfig"),JOe=o(" (ViLT model)"),YOe=l(),$m=a("li"),xK=a("strong"),KOe=o("vision-encoder-decoder"),ZOe=o(" \u2014 "),g$=a("a"),eVe=o("VisionEncoderDecoderConfig"),oVe=o(" (Vision Encoder decoder model)"),rVe=l(),km=a("li"),$K=a("strong"),tVe=o("vision-text-dual-encoder"),aVe=o(" \u2014 "),h$=a("a"),nVe=o("VisionTextDualEncoderConfig"),sVe=o(" (VisionTextDualEncoder model)"),lVe=l(),Sm=a("li"),kK=a("strong"),iVe=o("visual_bert"),dVe=o(" \u2014 "),p$=a("a"),cVe=o("VisualBertConfig"),fVe=o(" (VisualBert model)"),mVe=l(),Rm=a("li"),SK=a("strong"),gVe=o("vit"),hVe=o(" \u2014 "),u$=a("a"),pVe=o("ViTConfig"),uVe=o(" (ViT model)"),_Ve=l(),Bm=a("li"),RK=a("strong"),bVe=o("vit_mae"),FVe=o(" \u2014 "),_$=a("a"),vVe=o("ViTMAEConfig"),TVe=o(" (ViTMAE model)"),MVe=l(),Pm=a("li"),BK=a("strong"),EVe=o("wav2vec2"),CVe=o(" \u2014 "),b$=a("a"),wVe=o("Wav2Vec2Config"),AVe=o(" (Wav2Vec2 model)"),yVe=l(),Im=a("li"),PK=a("strong"),LVe=o("wavlm"),xVe=o(" \u2014 "),F$=a("a"),$Ve=o("WavLMConfig"),kVe=o(" (WavLM model)"),SVe=l(),qm=a("li"),IK=a("strong"),RVe=o("xglm"),BVe=o(" \u2014 "),v$=a("a"),PVe=o("XGLMConfig"),IVe=o(" (XGLM model)"),qVe=l(),Nm=a("li"),qK=a("strong"),NVe=o("xlm"),jVe=o(" \u2014 "),T$=a("a"),DVe=o("XLMConfig"),GVe=o(" (XLM model)"),OVe=l(),jm=a("li"),NK=a("strong"),VVe=o("xlm-prophetnet"),XVe=o(" \u2014 "),M$=a("a"),zVe=o("XLMProphetNetConfig"),QVe=o(" (XLMProphetNet model)"),WVe=l(),Dm=a("li"),jK=a("strong"),HVe=o("xlm-roberta"),UVe=o(" \u2014 "),E$=a("a"),JVe=o("XLMRobertaConfig"),YVe=o(" (XLM-RoBERTa model)"),KVe=l(),Gm=a("li"),DK=a("strong"),ZVe=o("xlm-roberta-xl"),eXe=o(" \u2014 "),C$=a("a"),oXe=o("XLMRobertaXLConfig"),rXe=o(" (XLM-RoBERTa-XL model)"),tXe=l(),Om=a("li"),GK=a("strong"),aXe=o("xlnet"),nXe=o(" \u2014 "),w$=a("a"),sXe=o("XLNetConfig"),lXe=o(" (XLNet model)"),iXe=l(),Vm=a("li"),OK=a("strong"),dXe=o("yoso"),cXe=o(" \u2014 "),A$=a("a"),fXe=o("YosoConfig"),mXe=o(" (YOSO model)"),gXe=l(),v(Xm.$$.fragment),hXe=l(),zm=a("div"),v(Bw.$$.fragment),pXe=l(),VK=a("p"),uXe=o("Register a new configuration for this class."),P$e=l(),ri=a("h2"),Qm=a("a"),XK=a("span"),v(Pw.$$.fragment),_Xe=l(),zK=a("span"),bXe=o("AutoTokenizer"),I$e=l(),Eo=a("div"),v(Iw.$$.fragment),FXe=l(),qw=a("p"),vXe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),y$=a("a"),TXe=o("AutoTokenizer.from_pretrained()"),MXe=o(" class method."),EXe=l(),Nw=a("p"),CXe=o("This class cannot be instantiated directly using "),QK=a("code"),wXe=o("__init__()"),AXe=o(" (throws an error)."),yXe=l(),Tr=a("div"),v(jw.$$.fragment),LXe=l(),WK=a("p"),xXe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),$Xe=l(),va=a("p"),kXe=o("The tokenizer class to instantiate is selected based on the "),HK=a("code"),SXe=o("model_type"),RXe=o(` property of the config object (either
passed as an argument or loaded from `),UK=a("code"),BXe=o("pretrained_model_name_or_path"),PXe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JK=a("code"),IXe=o("pretrained_model_name_or_path"),qXe=o(":"),NXe=l(),S=a("ul"),wn=a("li"),YK=a("strong"),jXe=o("albert"),DXe=o(" \u2014 "),L$=a("a"),GXe=o("AlbertTokenizer"),OXe=o(" or "),x$=a("a"),VXe=o("AlbertTokenizerFast"),XXe=o(" (ALBERT model)"),zXe=l(),An=a("li"),KK=a("strong"),QXe=o("bart"),WXe=o(" \u2014 "),$$=a("a"),HXe=o("BartTokenizer"),UXe=o(" or "),k$=a("a"),JXe=o("BartTokenizerFast"),YXe=o(" (BART model)"),KXe=l(),yn=a("li"),ZK=a("strong"),ZXe=o("barthez"),eze=o(" \u2014 "),S$=a("a"),oze=o("BarthezTokenizer"),rze=o(" or "),R$=a("a"),tze=o("BarthezTokenizerFast"),aze=o(" (BARThez model)"),nze=l(),Wm=a("li"),eZ=a("strong"),sze=o("bartpho"),lze=o(" \u2014 "),B$=a("a"),ize=o("BartphoTokenizer"),dze=o(" (BARTpho model)"),cze=l(),Ln=a("li"),oZ=a("strong"),fze=o("bert"),mze=o(" \u2014 "),P$=a("a"),gze=o("BertTokenizer"),hze=o(" or "),I$=a("a"),pze=o("BertTokenizerFast"),uze=o(" (BERT model)"),_ze=l(),Hm=a("li"),rZ=a("strong"),bze=o("bert-generation"),Fze=o(" \u2014 "),q$=a("a"),vze=o("BertGenerationTokenizer"),Tze=o(" (Bert Generation model)"),Mze=l(),Um=a("li"),tZ=a("strong"),Eze=o("bert-japanese"),Cze=o(" \u2014 "),N$=a("a"),wze=o("BertJapaneseTokenizer"),Aze=o(" (BertJapanese model)"),yze=l(),Jm=a("li"),aZ=a("strong"),Lze=o("bertweet"),xze=o(" \u2014 "),j$=a("a"),$ze=o("BertweetTokenizer"),kze=o(" (Bertweet model)"),Sze=l(),xn=a("li"),nZ=a("strong"),Rze=o("big_bird"),Bze=o(" \u2014 "),D$=a("a"),Pze=o("BigBirdTokenizer"),Ize=o(" or "),G$=a("a"),qze=o("BigBirdTokenizerFast"),Nze=o(" (BigBird model)"),jze=l(),$n=a("li"),sZ=a("strong"),Dze=o("bigbird_pegasus"),Gze=o(" \u2014 "),O$=a("a"),Oze=o("PegasusTokenizer"),Vze=o(" or "),V$=a("a"),Xze=o("PegasusTokenizerFast"),zze=o(" (BigBirdPegasus model)"),Qze=l(),kn=a("li"),lZ=a("strong"),Wze=o("blenderbot"),Hze=o(" \u2014 "),X$=a("a"),Uze=o("BlenderbotTokenizer"),Jze=o(" or "),z$=a("a"),Yze=o("BlenderbotTokenizerFast"),Kze=o(" (Blenderbot model)"),Zze=l(),Ym=a("li"),iZ=a("strong"),eQe=o("blenderbot-small"),oQe=o(" \u2014 "),Q$=a("a"),rQe=o("BlenderbotSmallTokenizer"),tQe=o(" (BlenderbotSmall model)"),aQe=l(),Km=a("li"),dZ=a("strong"),nQe=o("byt5"),sQe=o(" \u2014 "),W$=a("a"),lQe=o("ByT5Tokenizer"),iQe=o(" (ByT5 model)"),dQe=l(),Sn=a("li"),cZ=a("strong"),cQe=o("camembert"),fQe=o(" \u2014 "),H$=a("a"),mQe=o("CamembertTokenizer"),gQe=o(" or "),U$=a("a"),hQe=o("CamembertTokenizerFast"),pQe=o(" (CamemBERT model)"),uQe=l(),Zm=a("li"),fZ=a("strong"),_Qe=o("canine"),bQe=o(" \u2014 "),J$=a("a"),FQe=o("CanineTokenizer"),vQe=o(" (Canine model)"),TQe=l(),Rn=a("li"),mZ=a("strong"),MQe=o("clip"),EQe=o(" \u2014 "),Y$=a("a"),CQe=o("CLIPTokenizer"),wQe=o(" or "),K$=a("a"),AQe=o("CLIPTokenizerFast"),yQe=o(" (CLIP model)"),LQe=l(),Bn=a("li"),gZ=a("strong"),xQe=o("convbert"),$Qe=o(" \u2014 "),Z$=a("a"),kQe=o("ConvBertTokenizer"),SQe=o(" or "),ek=a("a"),RQe=o("ConvBertTokenizerFast"),BQe=o(" (ConvBERT model)"),PQe=l(),Pn=a("li"),hZ=a("strong"),IQe=o("cpm"),qQe=o(" \u2014 "),ok=a("a"),NQe=o("CpmTokenizer"),jQe=o(" or "),pZ=a("code"),DQe=o("CpmTokenizerFast"),GQe=o(" (CPM model)"),OQe=l(),eg=a("li"),uZ=a("strong"),VQe=o("ctrl"),XQe=o(" \u2014 "),rk=a("a"),zQe=o("CTRLTokenizer"),QQe=o(" (CTRL model)"),WQe=l(),In=a("li"),_Z=a("strong"),HQe=o("deberta"),UQe=o(" \u2014 "),tk=a("a"),JQe=o("DebertaTokenizer"),YQe=o(" or "),ak=a("a"),KQe=o("DebertaTokenizerFast"),ZQe=o(" (DeBERTa model)"),eWe=l(),og=a("li"),bZ=a("strong"),oWe=o("deberta-v2"),rWe=o(" \u2014 "),nk=a("a"),tWe=o("DebertaV2Tokenizer"),aWe=o(" (DeBERTa-v2 model)"),nWe=l(),qn=a("li"),FZ=a("strong"),sWe=o("distilbert"),lWe=o(" \u2014 "),sk=a("a"),iWe=o("DistilBertTokenizer"),dWe=o(" or "),lk=a("a"),cWe=o("DistilBertTokenizerFast"),fWe=o(" (DistilBERT model)"),mWe=l(),Nn=a("li"),vZ=a("strong"),gWe=o("dpr"),hWe=o(" \u2014 "),ik=a("a"),pWe=o("DPRQuestionEncoderTokenizer"),uWe=o(" or "),dk=a("a"),_We=o("DPRQuestionEncoderTokenizerFast"),bWe=o(" (DPR model)"),FWe=l(),jn=a("li"),TZ=a("strong"),vWe=o("electra"),TWe=o(" \u2014 "),ck=a("a"),MWe=o("ElectraTokenizer"),EWe=o(" or "),fk=a("a"),CWe=o("ElectraTokenizerFast"),wWe=o(" (ELECTRA model)"),AWe=l(),rg=a("li"),MZ=a("strong"),yWe=o("flaubert"),LWe=o(" \u2014 "),mk=a("a"),xWe=o("FlaubertTokenizer"),$We=o(" (FlauBERT model)"),kWe=l(),Dn=a("li"),EZ=a("strong"),SWe=o("fnet"),RWe=o(" \u2014 "),gk=a("a"),BWe=o("FNetTokenizer"),PWe=o(" or "),hk=a("a"),IWe=o("FNetTokenizerFast"),qWe=o(" (FNet model)"),NWe=l(),tg=a("li"),CZ=a("strong"),jWe=o("fsmt"),DWe=o(" \u2014 "),pk=a("a"),GWe=o("FSMTTokenizer"),OWe=o(" (FairSeq Machine-Translation model)"),VWe=l(),Gn=a("li"),wZ=a("strong"),XWe=o("funnel"),zWe=o(" \u2014 "),uk=a("a"),QWe=o("FunnelTokenizer"),WWe=o(" or "),_k=a("a"),HWe=o("FunnelTokenizerFast"),UWe=o(" (Funnel Transformer model)"),JWe=l(),On=a("li"),AZ=a("strong"),YWe=o("gpt2"),KWe=o(" \u2014 "),bk=a("a"),ZWe=o("GPT2Tokenizer"),eHe=o(" or "),Fk=a("a"),oHe=o("GPT2TokenizerFast"),rHe=o(" (OpenAI GPT-2 model)"),tHe=l(),Vn=a("li"),yZ=a("strong"),aHe=o("gpt_neo"),nHe=o(" \u2014 "),vk=a("a"),sHe=o("GPT2Tokenizer"),lHe=o(" or "),Tk=a("a"),iHe=o("GPT2TokenizerFast"),dHe=o(" (GPT Neo model)"),cHe=l(),Xn=a("li"),LZ=a("strong"),fHe=o("herbert"),mHe=o(" \u2014 "),Mk=a("a"),gHe=o("HerbertTokenizer"),hHe=o(" or "),Ek=a("a"),pHe=o("HerbertTokenizerFast"),uHe=o(" (HerBERT model)"),_He=l(),ag=a("li"),xZ=a("strong"),bHe=o("hubert"),FHe=o(" \u2014 "),Ck=a("a"),vHe=o("Wav2Vec2CTCTokenizer"),THe=o(" (Hubert model)"),MHe=l(),zn=a("li"),$Z=a("strong"),EHe=o("ibert"),CHe=o(" \u2014 "),wk=a("a"),wHe=o("RobertaTokenizer"),AHe=o(" or "),Ak=a("a"),yHe=o("RobertaTokenizerFast"),LHe=o(" (I-BERT model)"),xHe=l(),Qn=a("li"),kZ=a("strong"),$He=o("layoutlm"),kHe=o(" \u2014 "),yk=a("a"),SHe=o("LayoutLMTokenizer"),RHe=o(" or "),Lk=a("a"),BHe=o("LayoutLMTokenizerFast"),PHe=o(" (LayoutLM model)"),IHe=l(),Wn=a("li"),SZ=a("strong"),qHe=o("layoutlmv2"),NHe=o(" \u2014 "),xk=a("a"),jHe=o("LayoutLMv2Tokenizer"),DHe=o(" or "),$k=a("a"),GHe=o("LayoutLMv2TokenizerFast"),OHe=o(" (LayoutLMv2 model)"),VHe=l(),Hn=a("li"),RZ=a("strong"),XHe=o("layoutxlm"),zHe=o(" \u2014 "),kk=a("a"),QHe=o("LayoutXLMTokenizer"),WHe=o(" or "),Sk=a("a"),HHe=o("LayoutXLMTokenizerFast"),UHe=o(" (LayoutXLM model)"),JHe=l(),Un=a("li"),BZ=a("strong"),YHe=o("led"),KHe=o(" \u2014 "),Rk=a("a"),ZHe=o("LEDTokenizer"),eUe=o(" or "),Bk=a("a"),oUe=o("LEDTokenizerFast"),rUe=o(" (LED model)"),tUe=l(),Jn=a("li"),PZ=a("strong"),aUe=o("longformer"),nUe=o(" \u2014 "),Pk=a("a"),sUe=o("LongformerTokenizer"),lUe=o(" or "),Ik=a("a"),iUe=o("LongformerTokenizerFast"),dUe=o(" (Longformer model)"),cUe=l(),ng=a("li"),IZ=a("strong"),fUe=o("luke"),mUe=o(" \u2014 "),qk=a("a"),gUe=o("LukeTokenizer"),hUe=o(" (LUKE model)"),pUe=l(),Yn=a("li"),qZ=a("strong"),uUe=o("lxmert"),_Ue=o(" \u2014 "),Nk=a("a"),bUe=o("LxmertTokenizer"),FUe=o(" or "),jk=a("a"),vUe=o("LxmertTokenizerFast"),TUe=o(" (LXMERT model)"),MUe=l(),sg=a("li"),NZ=a("strong"),EUe=o("m2m_100"),CUe=o(" \u2014 "),Dk=a("a"),wUe=o("M2M100Tokenizer"),AUe=o(" (M2M100 model)"),yUe=l(),lg=a("li"),jZ=a("strong"),LUe=o("marian"),xUe=o(" \u2014 "),Gk=a("a"),$Ue=o("MarianTokenizer"),kUe=o(" (Marian model)"),SUe=l(),Kn=a("li"),DZ=a("strong"),RUe=o("mbart"),BUe=o(" \u2014 "),Ok=a("a"),PUe=o("MBartTokenizer"),IUe=o(" or "),Vk=a("a"),qUe=o("MBartTokenizerFast"),NUe=o(" (mBART model)"),jUe=l(),Zn=a("li"),GZ=a("strong"),DUe=o("mbart50"),GUe=o(" \u2014 "),Xk=a("a"),OUe=o("MBart50Tokenizer"),VUe=o(" or "),zk=a("a"),XUe=o("MBart50TokenizerFast"),zUe=o(" (mBART-50 model)"),QUe=l(),ig=a("li"),OZ=a("strong"),WUe=o("mluke"),HUe=o(" \u2014 "),Qk=a("a"),UUe=o("MLukeTokenizer"),JUe=o(" (mLUKE model)"),YUe=l(),es=a("li"),VZ=a("strong"),KUe=o("mobilebert"),ZUe=o(" \u2014 "),Wk=a("a"),eJe=o("MobileBertTokenizer"),oJe=o(" or "),Hk=a("a"),rJe=o("MobileBertTokenizerFast"),tJe=o(" (MobileBERT model)"),aJe=l(),os=a("li"),XZ=a("strong"),nJe=o("mpnet"),sJe=o(" \u2014 "),Uk=a("a"),lJe=o("MPNetTokenizer"),iJe=o(" or "),Jk=a("a"),dJe=o("MPNetTokenizerFast"),cJe=o(" (MPNet model)"),fJe=l(),rs=a("li"),zZ=a("strong"),mJe=o("mt5"),gJe=o(" \u2014 "),Yk=a("a"),hJe=o("MT5Tokenizer"),pJe=o(" or "),Kk=a("a"),uJe=o("MT5TokenizerFast"),_Je=o(" (mT5 model)"),bJe=l(),ts=a("li"),QZ=a("strong"),FJe=o("openai-gpt"),vJe=o(" \u2014 "),Zk=a("a"),TJe=o("OpenAIGPTTokenizer"),MJe=o(" or "),eS=a("a"),EJe=o("OpenAIGPTTokenizerFast"),CJe=o(" (OpenAI GPT model)"),wJe=l(),as=a("li"),WZ=a("strong"),AJe=o("pegasus"),yJe=o(" \u2014 "),oS=a("a"),LJe=o("PegasusTokenizer"),xJe=o(" or "),rS=a("a"),$Je=o("PegasusTokenizerFast"),kJe=o(" (Pegasus model)"),SJe=l(),dg=a("li"),HZ=a("strong"),RJe=o("perceiver"),BJe=o(" \u2014 "),tS=a("a"),PJe=o("PerceiverTokenizer"),IJe=o(" (Perceiver model)"),qJe=l(),cg=a("li"),UZ=a("strong"),NJe=o("phobert"),jJe=o(" \u2014 "),aS=a("a"),DJe=o("PhobertTokenizer"),GJe=o(" (PhoBERT model)"),OJe=l(),fg=a("li"),JZ=a("strong"),VJe=o("plbart"),XJe=o(" \u2014 "),nS=a("a"),zJe=o("PLBartTokenizer"),QJe=o(" (PLBart model)"),WJe=l(),mg=a("li"),YZ=a("strong"),HJe=o("prophetnet"),UJe=o(" \u2014 "),sS=a("a"),JJe=o("ProphetNetTokenizer"),YJe=o(" (ProphetNet model)"),KJe=l(),ns=a("li"),KZ=a("strong"),ZJe=o("qdqbert"),eYe=o(" \u2014 "),lS=a("a"),oYe=o("BertTokenizer"),rYe=o(" or "),iS=a("a"),tYe=o("BertTokenizerFast"),aYe=o(" (QDQBert model)"),nYe=l(),gg=a("li"),ZZ=a("strong"),sYe=o("rag"),lYe=o(" \u2014 "),dS=a("a"),iYe=o("RagTokenizer"),dYe=o(" (RAG model)"),cYe=l(),ss=a("li"),eee=a("strong"),fYe=o("realm"),mYe=o(" \u2014 "),cS=a("a"),gYe=o("RealmTokenizer"),hYe=o(" or "),fS=a("a"),pYe=o("RealmTokenizerFast"),uYe=o(" (Realm model)"),_Ye=l(),ls=a("li"),oee=a("strong"),bYe=o("reformer"),FYe=o(" \u2014 "),mS=a("a"),vYe=o("ReformerTokenizer"),TYe=o(" or "),gS=a("a"),MYe=o("ReformerTokenizerFast"),EYe=o(" (Reformer model)"),CYe=l(),is=a("li"),ree=a("strong"),wYe=o("rembert"),AYe=o(" \u2014 "),hS=a("a"),yYe=o("RemBertTokenizer"),LYe=o(" or "),pS=a("a"),xYe=o("RemBertTokenizerFast"),$Ye=o(" (RemBERT model)"),kYe=l(),ds=a("li"),tee=a("strong"),SYe=o("retribert"),RYe=o(" \u2014 "),uS=a("a"),BYe=o("RetriBertTokenizer"),PYe=o(" or "),_S=a("a"),IYe=o("RetriBertTokenizerFast"),qYe=o(" (RetriBERT model)"),NYe=l(),cs=a("li"),aee=a("strong"),jYe=o("roberta"),DYe=o(" \u2014 "),bS=a("a"),GYe=o("RobertaTokenizer"),OYe=o(" or "),FS=a("a"),VYe=o("RobertaTokenizerFast"),XYe=o(" (RoBERTa model)"),zYe=l(),fs=a("li"),nee=a("strong"),QYe=o("roformer"),WYe=o(" \u2014 "),vS=a("a"),HYe=o("RoFormerTokenizer"),UYe=o(" or "),TS=a("a"),JYe=o("RoFormerTokenizerFast"),YYe=o(" (RoFormer model)"),KYe=l(),hg=a("li"),see=a("strong"),ZYe=o("speech_to_text"),eKe=o(" \u2014 "),MS=a("a"),oKe=o("Speech2TextTokenizer"),rKe=o(" (Speech2Text model)"),tKe=l(),pg=a("li"),lee=a("strong"),aKe=o("speech_to_text_2"),nKe=o(" \u2014 "),ES=a("a"),sKe=o("Speech2Text2Tokenizer"),lKe=o(" (Speech2Text2 model)"),iKe=l(),ms=a("li"),iee=a("strong"),dKe=o("splinter"),cKe=o(" \u2014 "),CS=a("a"),fKe=o("SplinterTokenizer"),mKe=o(" or "),wS=a("a"),gKe=o("SplinterTokenizerFast"),hKe=o(" (Splinter model)"),pKe=l(),gs=a("li"),dee=a("strong"),uKe=o("squeezebert"),_Ke=o(" \u2014 "),AS=a("a"),bKe=o("SqueezeBertTokenizer"),FKe=o(" or "),yS=a("a"),vKe=o("SqueezeBertTokenizerFast"),TKe=o(" (SqueezeBERT model)"),MKe=l(),hs=a("li"),cee=a("strong"),EKe=o("t5"),CKe=o(" \u2014 "),LS=a("a"),wKe=o("T5Tokenizer"),AKe=o(" or "),xS=a("a"),yKe=o("T5TokenizerFast"),LKe=o(" (T5 model)"),xKe=l(),ug=a("li"),fee=a("strong"),$Ke=o("tapas"),kKe=o(" \u2014 "),$S=a("a"),SKe=o("TapasTokenizer"),RKe=o(" (TAPAS model)"),BKe=l(),_g=a("li"),mee=a("strong"),PKe=o("transfo-xl"),IKe=o(" \u2014 "),kS=a("a"),qKe=o("TransfoXLTokenizer"),NKe=o(" (Transformer-XL model)"),jKe=l(),bg=a("li"),gee=a("strong"),DKe=o("wav2vec2"),GKe=o(" \u2014 "),SS=a("a"),OKe=o("Wav2Vec2CTCTokenizer"),VKe=o(" (Wav2Vec2 model)"),XKe=l(),Fg=a("li"),hee=a("strong"),zKe=o("wav2vec2_phoneme"),QKe=o(" \u2014 "),RS=a("a"),WKe=o("Wav2Vec2PhonemeCTCTokenizer"),HKe=o(" (Wav2Vec2Phoneme model)"),UKe=l(),ps=a("li"),pee=a("strong"),JKe=o("xglm"),YKe=o(" \u2014 "),BS=a("a"),KKe=o("XGLMTokenizer"),ZKe=o(" or "),PS=a("a"),eZe=o("XGLMTokenizerFast"),oZe=o(" (XGLM model)"),rZe=l(),vg=a("li"),uee=a("strong"),tZe=o("xlm"),aZe=o(" \u2014 "),IS=a("a"),nZe=o("XLMTokenizer"),sZe=o(" (XLM model)"),lZe=l(),Tg=a("li"),_ee=a("strong"),iZe=o("xlm-prophetnet"),dZe=o(" \u2014 "),qS=a("a"),cZe=o("XLMProphetNetTokenizer"),fZe=o(" (XLMProphetNet model)"),mZe=l(),us=a("li"),bee=a("strong"),gZe=o("xlm-roberta"),hZe=o(" \u2014 "),NS=a("a"),pZe=o("XLMRobertaTokenizer"),uZe=o(" or "),jS=a("a"),_Ze=o("XLMRobertaTokenizerFast"),bZe=o(" (XLM-RoBERTa model)"),FZe=l(),_s=a("li"),Fee=a("strong"),vZe=o("xlnet"),TZe=o(" \u2014 "),DS=a("a"),MZe=o("XLNetTokenizer"),EZe=o(" or "),GS=a("a"),CZe=o("XLNetTokenizerFast"),wZe=o(" (XLNet model)"),AZe=l(),v(Mg.$$.fragment),yZe=l(),Eg=a("div"),v(Dw.$$.fragment),LZe=l(),vee=a("p"),xZe=o("Register a new tokenizer in this mapping."),q$e=l(),ti=a("h2"),Cg=a("a"),Tee=a("span"),v(Gw.$$.fragment),$Ze=l(),Mee=a("span"),kZe=o("AutoFeatureExtractor"),N$e=l(),Co=a("div"),v(Ow.$$.fragment),SZe=l(),Vw=a("p"),RZe=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),OS=a("a"),BZe=o("AutoFeatureExtractor.from_pretrained()"),PZe=o(" class method."),IZe=l(),Xw=a("p"),qZe=o("This class cannot be instantiated directly using "),Eee=a("code"),NZe=o("__init__()"),jZe=o(" (throws an error)."),DZe=l(),Ve=a("div"),v(zw.$$.fragment),GZe=l(),Cee=a("p"),OZe=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),VZe=l(),Ta=a("p"),XZe=o("The feature extractor class to instantiate is selected based on the "),wee=a("code"),zZe=o("model_type"),QZe=o(` property of the config object
(either passed as an argument or loaded from `),Aee=a("code"),WZe=o("pretrained_model_name_or_path"),HZe=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),yee=a("code"),UZe=o("pretrained_model_name_or_path"),JZe=o(":"),YZe=l(),fe=a("ul"),wg=a("li"),Lee=a("strong"),KZe=o("beit"),ZZe=o(" \u2014 "),VS=a("a"),eeo=o("BeitFeatureExtractor"),oeo=o(" (BEiT model)"),reo=l(),Ag=a("li"),xee=a("strong"),teo=o("clip"),aeo=o(" \u2014 "),XS=a("a"),neo=o("CLIPFeatureExtractor"),seo=o(" (CLIP model)"),leo=l(),yg=a("li"),$ee=a("strong"),ieo=o("convnext"),deo=o(" \u2014 "),zS=a("a"),ceo=o("ConvNextFeatureExtractor"),feo=o(" (ConvNext model)"),meo=l(),Lg=a("li"),kee=a("strong"),geo=o("deit"),heo=o(" \u2014 "),QS=a("a"),peo=o("DeiTFeatureExtractor"),ueo=o(" (DeiT model)"),_eo=l(),xg=a("li"),See=a("strong"),beo=o("detr"),Feo=o(" \u2014 "),WS=a("a"),veo=o("DetrFeatureExtractor"),Teo=o(" (DETR model)"),Meo=l(),$g=a("li"),Ree=a("strong"),Eeo=o("hubert"),Ceo=o(" \u2014 "),HS=a("a"),weo=o("Wav2Vec2FeatureExtractor"),Aeo=o(" (Hubert model)"),yeo=l(),kg=a("li"),Bee=a("strong"),Leo=o("layoutlmv2"),xeo=o(" \u2014 "),US=a("a"),$eo=o("LayoutLMv2FeatureExtractor"),keo=o(" (LayoutLMv2 model)"),Seo=l(),Sg=a("li"),Pee=a("strong"),Reo=o("maskformer"),Beo=o(" \u2014 "),JS=a("a"),Peo=o("MaskFormerFeatureExtractor"),Ieo=o(" (MaskFormer model)"),qeo=l(),Rg=a("li"),Iee=a("strong"),Neo=o("perceiver"),jeo=o(" \u2014 "),YS=a("a"),Deo=o("PerceiverFeatureExtractor"),Geo=o(" (Perceiver model)"),Oeo=l(),Bg=a("li"),qee=a("strong"),Veo=o("poolformer"),Xeo=o(" \u2014 "),KS=a("a"),zeo=o("PoolFormerFeatureExtractor"),Qeo=o(" (PoolFormer model)"),Weo=l(),Pg=a("li"),Nee=a("strong"),Heo=o("resnet"),Ueo=o(" \u2014 "),ZS=a("a"),Jeo=o("ConvNextFeatureExtractor"),Yeo=o(" (ResNet model)"),Keo=l(),Ig=a("li"),jee=a("strong"),Zeo=o("segformer"),eoo=o(" \u2014 "),eR=a("a"),ooo=o("SegformerFeatureExtractor"),roo=o(" (SegFormer model)"),too=l(),qg=a("li"),Dee=a("strong"),aoo=o("speech_to_text"),noo=o(" \u2014 "),oR=a("a"),soo=o("Speech2TextFeatureExtractor"),loo=o(" (Speech2Text model)"),ioo=l(),Ng=a("li"),Gee=a("strong"),doo=o("swin"),coo=o(" \u2014 "),rR=a("a"),foo=o("ViTFeatureExtractor"),moo=o(" (Swin model)"),goo=l(),jg=a("li"),Oee=a("strong"),hoo=o("van"),poo=o(" \u2014 "),tR=a("a"),uoo=o("ConvNextFeatureExtractor"),_oo=o(" (VAN model)"),boo=l(),Dg=a("li"),Vee=a("strong"),Foo=o("vit"),voo=o(" \u2014 "),aR=a("a"),Too=o("ViTFeatureExtractor"),Moo=o(" (ViT model)"),Eoo=l(),Gg=a("li"),Xee=a("strong"),Coo=o("vit_mae"),woo=o(" \u2014 "),nR=a("a"),Aoo=o("ViTFeatureExtractor"),yoo=o(" (ViTMAE model)"),Loo=l(),Og=a("li"),zee=a("strong"),xoo=o("wav2vec2"),$oo=o(" \u2014 "),sR=a("a"),koo=o("Wav2Vec2FeatureExtractor"),Soo=o(" (Wav2Vec2 model)"),Roo=l(),v(Vg.$$.fragment),Boo=l(),v(Xg.$$.fragment),Poo=l(),zg=a("div"),v(Qw.$$.fragment),Ioo=l(),Qee=a("p"),qoo=o("Register a new feature extractor for this class."),j$e=l(),ai=a("h2"),Qg=a("a"),Wee=a("span"),v(Ww.$$.fragment),Noo=l(),Hee=a("span"),joo=o("AutoProcessor"),D$e=l(),wo=a("div"),v(Hw.$$.fragment),Doo=l(),Uw=a("p"),Goo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),lR=a("a"),Ooo=o("AutoProcessor.from_pretrained()"),Voo=o(" class method."),Xoo=l(),Jw=a("p"),zoo=o("This class cannot be instantiated directly using "),Uee=a("code"),Qoo=o("__init__()"),Woo=o(" (throws an error)."),Hoo=l(),Xe=a("div"),v(Yw.$$.fragment),Uoo=l(),Jee=a("p"),Joo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Yoo=l(),ni=a("p"),Koo=o("The processor class to instantiate is selected based on the "),Yee=a("code"),Zoo=o("model_type"),ero=o(` property of the config object (either
passed as an argument or loaded from `),Kee=a("code"),oro=o("pretrained_model_name_or_path"),rro=o(" if possible):"),tro=l(),Pe=a("ul"),Wg=a("li"),Zee=a("strong"),aro=o("clip"),nro=o(" \u2014 "),iR=a("a"),sro=o("CLIPProcessor"),lro=o(" (CLIP model)"),iro=l(),Hg=a("li"),eoe=a("strong"),dro=o("layoutlmv2"),cro=o(" \u2014 "),dR=a("a"),fro=o("LayoutLMv2Processor"),mro=o(" (LayoutLMv2 model)"),gro=l(),Ug=a("li"),ooe=a("strong"),hro=o("layoutxlm"),pro=o(" \u2014 "),cR=a("a"),uro=o("LayoutXLMProcessor"),_ro=o(" (LayoutXLM model)"),bro=l(),Jg=a("li"),roe=a("strong"),Fro=o("speech_to_text"),vro=o(" \u2014 "),fR=a("a"),Tro=o("Speech2TextProcessor"),Mro=o(" (Speech2Text model)"),Ero=l(),Yg=a("li"),toe=a("strong"),Cro=o("speech_to_text_2"),wro=o(" \u2014 "),mR=a("a"),Aro=o("Speech2Text2Processor"),yro=o(" (Speech2Text2 model)"),Lro=l(),Kg=a("li"),aoe=a("strong"),xro=o("trocr"),$ro=o(" \u2014 "),gR=a("a"),kro=o("TrOCRProcessor"),Sro=o(" (TrOCR model)"),Rro=l(),Zg=a("li"),noe=a("strong"),Bro=o("vision-text-dual-encoder"),Pro=o(" \u2014 "),hR=a("a"),Iro=o("VisionTextDualEncoderProcessor"),qro=o(" (VisionTextDualEncoder model)"),Nro=l(),eh=a("li"),soe=a("strong"),jro=o("wav2vec2"),Dro=o(" \u2014 "),pR=a("a"),Gro=o("Wav2Vec2Processor"),Oro=o(" (Wav2Vec2 model)"),Vro=l(),v(oh.$$.fragment),Xro=l(),v(rh.$$.fragment),zro=l(),th=a("div"),v(Kw.$$.fragment),Qro=l(),loe=a("p"),Wro=o("Register a new processor for this class."),G$e=l(),si=a("h2"),ah=a("a"),ioe=a("span"),v(Zw.$$.fragment),Hro=l(),doe=a("span"),Uro=o("AutoModel"),O$e=l(),Ao=a("div"),v(eA.$$.fragment),Jro=l(),li=a("p"),Yro=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),uR=a("a"),Kro=o("from_pretrained()"),Zro=o(" class method or the "),_R=a("a"),eto=o("from_config()"),oto=o(` class
method.`),rto=l(),oA=a("p"),tto=o("This class cannot be instantiated directly using "),coe=a("code"),ato=o("__init__()"),nto=o(" (throws an error)."),sto=l(),Kr=a("div"),v(rA.$$.fragment),lto=l(),foe=a("p"),ito=o("Instantiates one of the base model classes of the library from a configuration."),dto=l(),ii=a("p"),cto=o(`Note:
Loading a model from its configuration file does `),moe=a("strong"),fto=o("not"),mto=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bR=a("a"),gto=o("from_pretrained()"),hto=o(" to load the model weights."),pto=l(),v(nh.$$.fragment),uto=l(),ze=a("div"),v(tA.$$.fragment),_to=l(),goe=a("p"),bto=o("Instantiate one of the base model classes of the library from a pretrained model."),Fto=l(),Ma=a("p"),vto=o("The model class to instantiate is selected based on the "),hoe=a("code"),Tto=o("model_type"),Mto=o(` property of the config object (either
passed as an argument or loaded from `),poe=a("code"),Eto=o("pretrained_model_name_or_path"),Cto=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uoe=a("code"),wto=o("pretrained_model_name_or_path"),Ato=o(":"),yto=l(),x=a("ul"),sh=a("li"),_oe=a("strong"),Lto=o("albert"),xto=o(" \u2014 "),FR=a("a"),$to=o("AlbertModel"),kto=o(" (ALBERT model)"),Sto=l(),lh=a("li"),boe=a("strong"),Rto=o("bart"),Bto=o(" \u2014 "),vR=a("a"),Pto=o("BartModel"),Ito=o(" (BART model)"),qto=l(),ih=a("li"),Foe=a("strong"),Nto=o("beit"),jto=o(" \u2014 "),TR=a("a"),Dto=o("BeitModel"),Gto=o(" (BEiT model)"),Oto=l(),dh=a("li"),voe=a("strong"),Vto=o("bert"),Xto=o(" \u2014 "),MR=a("a"),zto=o("BertModel"),Qto=o(" (BERT model)"),Wto=l(),ch=a("li"),Toe=a("strong"),Hto=o("bert-generation"),Uto=o(" \u2014 "),ER=a("a"),Jto=o("BertGenerationEncoder"),Yto=o(" (Bert Generation model)"),Kto=l(),fh=a("li"),Moe=a("strong"),Zto=o("big_bird"),eao=o(" \u2014 "),CR=a("a"),oao=o("BigBirdModel"),rao=o(" (BigBird model)"),tao=l(),mh=a("li"),Eoe=a("strong"),aao=o("bigbird_pegasus"),nao=o(" \u2014 "),wR=a("a"),sao=o("BigBirdPegasusModel"),lao=o(" (BigBirdPegasus model)"),iao=l(),gh=a("li"),Coe=a("strong"),dao=o("blenderbot"),cao=o(" \u2014 "),AR=a("a"),fao=o("BlenderbotModel"),mao=o(" (Blenderbot model)"),gao=l(),hh=a("li"),woe=a("strong"),hao=o("blenderbot-small"),pao=o(" \u2014 "),yR=a("a"),uao=o("BlenderbotSmallModel"),_ao=o(" (BlenderbotSmall model)"),bao=l(),ph=a("li"),Aoe=a("strong"),Fao=o("camembert"),vao=o(" \u2014 "),LR=a("a"),Tao=o("CamembertModel"),Mao=o(" (CamemBERT model)"),Eao=l(),uh=a("li"),yoe=a("strong"),Cao=o("canine"),wao=o(" \u2014 "),xR=a("a"),Aao=o("CanineModel"),yao=o(" (Canine model)"),Lao=l(),_h=a("li"),Loe=a("strong"),xao=o("clip"),$ao=o(" \u2014 "),$R=a("a"),kao=o("CLIPModel"),Sao=o(" (CLIP model)"),Rao=l(),bh=a("li"),xoe=a("strong"),Bao=o("convbert"),Pao=o(" \u2014 "),kR=a("a"),Iao=o("ConvBertModel"),qao=o(" (ConvBERT model)"),Nao=l(),Fh=a("li"),$oe=a("strong"),jao=o("convnext"),Dao=o(" \u2014 "),SR=a("a"),Gao=o("ConvNextModel"),Oao=o(" (ConvNext model)"),Vao=l(),vh=a("li"),koe=a("strong"),Xao=o("ctrl"),zao=o(" \u2014 "),RR=a("a"),Qao=o("CTRLModel"),Wao=o(" (CTRL model)"),Hao=l(),Th=a("li"),Soe=a("strong"),Uao=o("data2vec-audio"),Jao=o(" \u2014 "),BR=a("a"),Yao=o("Data2VecAudioModel"),Kao=o(" (Data2VecAudio model)"),Zao=l(),Mh=a("li"),Roe=a("strong"),eno=o("data2vec-text"),ono=o(" \u2014 "),PR=a("a"),rno=o("Data2VecTextModel"),tno=o(" (Data2VecText model)"),ano=l(),Eh=a("li"),Boe=a("strong"),nno=o("deberta"),sno=o(" \u2014 "),IR=a("a"),lno=o("DebertaModel"),ino=o(" (DeBERTa model)"),dno=l(),Ch=a("li"),Poe=a("strong"),cno=o("deberta-v2"),fno=o(" \u2014 "),qR=a("a"),mno=o("DebertaV2Model"),gno=o(" (DeBERTa-v2 model)"),hno=l(),wh=a("li"),Ioe=a("strong"),pno=o("decision_transformer"),uno=o(" \u2014 "),NR=a("a"),_no=o("DecisionTransformerModel"),bno=o(" (Decision Transformer model)"),Fno=l(),Ah=a("li"),qoe=a("strong"),vno=o("deit"),Tno=o(" \u2014 "),jR=a("a"),Mno=o("DeiTModel"),Eno=o(" (DeiT model)"),Cno=l(),yh=a("li"),Noe=a("strong"),wno=o("detr"),Ano=o(" \u2014 "),DR=a("a"),yno=o("DetrModel"),Lno=o(" (DETR model)"),xno=l(),Lh=a("li"),joe=a("strong"),$no=o("distilbert"),kno=o(" \u2014 "),GR=a("a"),Sno=o("DistilBertModel"),Rno=o(" (DistilBERT model)"),Bno=l(),xh=a("li"),Doe=a("strong"),Pno=o("dpr"),Ino=o(" \u2014 "),OR=a("a"),qno=o("DPRQuestionEncoder"),Nno=o(" (DPR model)"),jno=l(),$h=a("li"),Goe=a("strong"),Dno=o("electra"),Gno=o(" \u2014 "),VR=a("a"),Ono=o("ElectraModel"),Vno=o(" (ELECTRA model)"),Xno=l(),kh=a("li"),Ooe=a("strong"),zno=o("flaubert"),Qno=o(" \u2014 "),XR=a("a"),Wno=o("FlaubertModel"),Hno=o(" (FlauBERT model)"),Uno=l(),Sh=a("li"),Voe=a("strong"),Jno=o("fnet"),Yno=o(" \u2014 "),zR=a("a"),Kno=o("FNetModel"),Zno=o(" (FNet model)"),eso=l(),Rh=a("li"),Xoe=a("strong"),oso=o("fsmt"),rso=o(" \u2014 "),QR=a("a"),tso=o("FSMTModel"),aso=o(" (FairSeq Machine-Translation model)"),nso=l(),bs=a("li"),zoe=a("strong"),sso=o("funnel"),lso=o(" \u2014 "),WR=a("a"),iso=o("FunnelModel"),dso=o(" or "),HR=a("a"),cso=o("FunnelBaseModel"),fso=o(" (Funnel Transformer model)"),mso=l(),Bh=a("li"),Qoe=a("strong"),gso=o("glpn"),hso=o(" \u2014 "),UR=a("a"),pso=o("GLPNModel"),uso=o(" (GLPN model)"),_so=l(),Ph=a("li"),Woe=a("strong"),bso=o("gpt2"),Fso=o(" \u2014 "),JR=a("a"),vso=o("GPT2Model"),Tso=o(" (OpenAI GPT-2 model)"),Mso=l(),Ih=a("li"),Hoe=a("strong"),Eso=o("gpt_neo"),Cso=o(" \u2014 "),YR=a("a"),wso=o("GPTNeoModel"),Aso=o(" (GPT Neo model)"),yso=l(),qh=a("li"),Uoe=a("strong"),Lso=o("gptj"),xso=o(" \u2014 "),KR=a("a"),$so=o("GPTJModel"),kso=o(" (GPT-J model)"),Sso=l(),Nh=a("li"),Joe=a("strong"),Rso=o("hubert"),Bso=o(" \u2014 "),ZR=a("a"),Pso=o("HubertModel"),Iso=o(" (Hubert model)"),qso=l(),jh=a("li"),Yoe=a("strong"),Nso=o("ibert"),jso=o(" \u2014 "),eB=a("a"),Dso=o("IBertModel"),Gso=o(" (I-BERT model)"),Oso=l(),Dh=a("li"),Koe=a("strong"),Vso=o("imagegpt"),Xso=o(" \u2014 "),oB=a("a"),zso=o("ImageGPTModel"),Qso=o(" (ImageGPT model)"),Wso=l(),Gh=a("li"),Zoe=a("strong"),Hso=o("layoutlm"),Uso=o(" \u2014 "),rB=a("a"),Jso=o("LayoutLMModel"),Yso=o(" (LayoutLM model)"),Kso=l(),Oh=a("li"),ere=a("strong"),Zso=o("layoutlmv2"),elo=o(" \u2014 "),tB=a("a"),olo=o("LayoutLMv2Model"),rlo=o(" (LayoutLMv2 model)"),tlo=l(),Vh=a("li"),ore=a("strong"),alo=o("led"),nlo=o(" \u2014 "),aB=a("a"),slo=o("LEDModel"),llo=o(" (LED model)"),ilo=l(),Xh=a("li"),rre=a("strong"),dlo=o("longformer"),clo=o(" \u2014 "),nB=a("a"),flo=o("LongformerModel"),mlo=o(" (Longformer model)"),glo=l(),zh=a("li"),tre=a("strong"),hlo=o("luke"),plo=o(" \u2014 "),sB=a("a"),ulo=o("LukeModel"),_lo=o(" (LUKE model)"),blo=l(),Qh=a("li"),are=a("strong"),Flo=o("lxmert"),vlo=o(" \u2014 "),lB=a("a"),Tlo=o("LxmertModel"),Mlo=o(" (LXMERT model)"),Elo=l(),Wh=a("li"),nre=a("strong"),Clo=o("m2m_100"),wlo=o(" \u2014 "),iB=a("a"),Alo=o("M2M100Model"),ylo=o(" (M2M100 model)"),Llo=l(),Hh=a("li"),sre=a("strong"),xlo=o("marian"),$lo=o(" \u2014 "),dB=a("a"),klo=o("MarianModel"),Slo=o(" (Marian model)"),Rlo=l(),Uh=a("li"),lre=a("strong"),Blo=o("maskformer"),Plo=o(" \u2014 "),cB=a("a"),Ilo=o("MaskFormerModel"),qlo=o(" (MaskFormer model)"),Nlo=l(),Jh=a("li"),ire=a("strong"),jlo=o("mbart"),Dlo=o(" \u2014 "),fB=a("a"),Glo=o("MBartModel"),Olo=o(" (mBART model)"),Vlo=l(),Yh=a("li"),dre=a("strong"),Xlo=o("megatron-bert"),zlo=o(" \u2014 "),mB=a("a"),Qlo=o("MegatronBertModel"),Wlo=o(" (MegatronBert model)"),Hlo=l(),Kh=a("li"),cre=a("strong"),Ulo=o("mobilebert"),Jlo=o(" \u2014 "),gB=a("a"),Ylo=o("MobileBertModel"),Klo=o(" (MobileBERT model)"),Zlo=l(),Zh=a("li"),fre=a("strong"),eio=o("mpnet"),oio=o(" \u2014 "),hB=a("a"),rio=o("MPNetModel"),tio=o(" (MPNet model)"),aio=l(),ep=a("li"),mre=a("strong"),nio=o("mt5"),sio=o(" \u2014 "),pB=a("a"),lio=o("MT5Model"),iio=o(" (mT5 model)"),dio=l(),op=a("li"),gre=a("strong"),cio=o("nystromformer"),fio=o(" \u2014 "),uB=a("a"),mio=o("NystromformerModel"),gio=o(" (Nystromformer model)"),hio=l(),rp=a("li"),hre=a("strong"),pio=o("openai-gpt"),uio=o(" \u2014 "),_B=a("a"),_io=o("OpenAIGPTModel"),bio=o(" (OpenAI GPT model)"),Fio=l(),tp=a("li"),pre=a("strong"),vio=o("pegasus"),Tio=o(" \u2014 "),bB=a("a"),Mio=o("PegasusModel"),Eio=o(" (Pegasus model)"),Cio=l(),ap=a("li"),ure=a("strong"),wio=o("perceiver"),Aio=o(" \u2014 "),FB=a("a"),yio=o("PerceiverModel"),Lio=o(" (Perceiver model)"),xio=l(),np=a("li"),_re=a("strong"),$io=o("plbart"),kio=o(" \u2014 "),vB=a("a"),Sio=o("PLBartModel"),Rio=o(" (PLBart model)"),Bio=l(),sp=a("li"),bre=a("strong"),Pio=o("poolformer"),Iio=o(" \u2014 "),TB=a("a"),qio=o("PoolFormerModel"),Nio=o(" (PoolFormer model)"),jio=l(),lp=a("li"),Fre=a("strong"),Dio=o("prophetnet"),Gio=o(" \u2014 "),MB=a("a"),Oio=o("ProphetNetModel"),Vio=o(" (ProphetNet model)"),Xio=l(),ip=a("li"),vre=a("strong"),zio=o("qdqbert"),Qio=o(" \u2014 "),Tre=a("code"),Wio=o("QDQBertModel"),Hio=o(" (QDQBert model)"),Uio=l(),dp=a("li"),Mre=a("strong"),Jio=o("reformer"),Yio=o(" \u2014 "),EB=a("a"),Kio=o("ReformerModel"),Zio=o(" (Reformer model)"),edo=l(),cp=a("li"),Ere=a("strong"),odo=o("rembert"),rdo=o(" \u2014 "),CB=a("a"),tdo=o("RemBertModel"),ado=o(" (RemBERT model)"),ndo=l(),fp=a("li"),Cre=a("strong"),sdo=o("resnet"),ldo=o(" \u2014 "),wB=a("a"),ido=o("ResNetModel"),ddo=o(" (ResNet model)"),cdo=l(),mp=a("li"),wre=a("strong"),fdo=o("retribert"),mdo=o(" \u2014 "),AB=a("a"),gdo=o("RetriBertModel"),hdo=o(" (RetriBERT model)"),pdo=l(),gp=a("li"),Are=a("strong"),udo=o("roberta"),_do=o(" \u2014 "),yB=a("a"),bdo=o("RobertaModel"),Fdo=o(" (RoBERTa model)"),vdo=l(),hp=a("li"),yre=a("strong"),Tdo=o("roformer"),Mdo=o(" \u2014 "),LB=a("a"),Edo=o("RoFormerModel"),Cdo=o(" (RoFormer model)"),wdo=l(),pp=a("li"),Lre=a("strong"),Ado=o("segformer"),ydo=o(" \u2014 "),xB=a("a"),Ldo=o("SegformerModel"),xdo=o(" (SegFormer model)"),$do=l(),up=a("li"),xre=a("strong"),kdo=o("sew"),Sdo=o(" \u2014 "),$B=a("a"),Rdo=o("SEWModel"),Bdo=o(" (SEW model)"),Pdo=l(),_p=a("li"),$re=a("strong"),Ido=o("sew-d"),qdo=o(" \u2014 "),kB=a("a"),Ndo=o("SEWDModel"),jdo=o(" (SEW-D model)"),Ddo=l(),bp=a("li"),kre=a("strong"),Gdo=o("speech_to_text"),Odo=o(" \u2014 "),SB=a("a"),Vdo=o("Speech2TextModel"),Xdo=o(" (Speech2Text model)"),zdo=l(),Fp=a("li"),Sre=a("strong"),Qdo=o("splinter"),Wdo=o(" \u2014 "),RB=a("a"),Hdo=o("SplinterModel"),Udo=o(" (Splinter model)"),Jdo=l(),vp=a("li"),Rre=a("strong"),Ydo=o("squeezebert"),Kdo=o(" \u2014 "),BB=a("a"),Zdo=o("SqueezeBertModel"),eco=o(" (SqueezeBERT model)"),oco=l(),Tp=a("li"),Bre=a("strong"),rco=o("swin"),tco=o(" \u2014 "),PB=a("a"),aco=o("SwinModel"),nco=o(" (Swin model)"),sco=l(),Mp=a("li"),Pre=a("strong"),lco=o("t5"),ico=o(" \u2014 "),IB=a("a"),dco=o("T5Model"),cco=o(" (T5 model)"),fco=l(),Ep=a("li"),Ire=a("strong"),mco=o("tapas"),gco=o(" \u2014 "),qB=a("a"),hco=o("TapasModel"),pco=o(" (TAPAS model)"),uco=l(),Cp=a("li"),qre=a("strong"),_co=o("transfo-xl"),bco=o(" \u2014 "),NB=a("a"),Fco=o("TransfoXLModel"),vco=o(" (Transformer-XL model)"),Tco=l(),wp=a("li"),Nre=a("strong"),Mco=o("unispeech"),Eco=o(" \u2014 "),jB=a("a"),Cco=o("UniSpeechModel"),wco=o(" (UniSpeech model)"),Aco=l(),Ap=a("li"),jre=a("strong"),yco=o("unispeech-sat"),Lco=o(" \u2014 "),DB=a("a"),xco=o("UniSpeechSatModel"),$co=o(" (UniSpeechSat model)"),kco=l(),yp=a("li"),Dre=a("strong"),Sco=o("van"),Rco=o(" \u2014 "),GB=a("a"),Bco=o("VanModel"),Pco=o(" (VAN model)"),Ico=l(),Lp=a("li"),Gre=a("strong"),qco=o("vilt"),Nco=o(" \u2014 "),OB=a("a"),jco=o("ViltModel"),Dco=o(" (ViLT model)"),Gco=l(),xp=a("li"),Ore=a("strong"),Oco=o("vision-text-dual-encoder"),Vco=o(" \u2014 "),VB=a("a"),Xco=o("VisionTextDualEncoderModel"),zco=o(" (VisionTextDualEncoder model)"),Qco=l(),$p=a("li"),Vre=a("strong"),Wco=o("visual_bert"),Hco=o(" \u2014 "),XB=a("a"),Uco=o("VisualBertModel"),Jco=o(" (VisualBert model)"),Yco=l(),kp=a("li"),Xre=a("strong"),Kco=o("vit"),Zco=o(" \u2014 "),zB=a("a"),efo=o("ViTModel"),ofo=o(" (ViT model)"),rfo=l(),Sp=a("li"),zre=a("strong"),tfo=o("vit_mae"),afo=o(" \u2014 "),QB=a("a"),nfo=o("ViTMAEModel"),sfo=o(" (ViTMAE model)"),lfo=l(),Rp=a("li"),Qre=a("strong"),ifo=o("wav2vec2"),dfo=o(" \u2014 "),WB=a("a"),cfo=o("Wav2Vec2Model"),ffo=o(" (Wav2Vec2 model)"),mfo=l(),Bp=a("li"),Wre=a("strong"),gfo=o("wavlm"),hfo=o(" \u2014 "),HB=a("a"),pfo=o("WavLMModel"),ufo=o(" (WavLM model)"),_fo=l(),Pp=a("li"),Hre=a("strong"),bfo=o("xglm"),Ffo=o(" \u2014 "),UB=a("a"),vfo=o("XGLMModel"),Tfo=o(" (XGLM model)"),Mfo=l(),Ip=a("li"),Ure=a("strong"),Efo=o("xlm"),Cfo=o(" \u2014 "),JB=a("a"),wfo=o("XLMModel"),Afo=o(" (XLM model)"),yfo=l(),qp=a("li"),Jre=a("strong"),Lfo=o("xlm-prophetnet"),xfo=o(" \u2014 "),YB=a("a"),$fo=o("XLMProphetNetModel"),kfo=o(" (XLMProphetNet model)"),Sfo=l(),Np=a("li"),Yre=a("strong"),Rfo=o("xlm-roberta"),Bfo=o(" \u2014 "),KB=a("a"),Pfo=o("XLMRobertaModel"),Ifo=o(" (XLM-RoBERTa model)"),qfo=l(),jp=a("li"),Kre=a("strong"),Nfo=o("xlm-roberta-xl"),jfo=o(" \u2014 "),ZB=a("a"),Dfo=o("XLMRobertaXLModel"),Gfo=o(" (XLM-RoBERTa-XL model)"),Ofo=l(),Dp=a("li"),Zre=a("strong"),Vfo=o("xlnet"),Xfo=o(" \u2014 "),eP=a("a"),zfo=o("XLNetModel"),Qfo=o(" (XLNet model)"),Wfo=l(),Gp=a("li"),ete=a("strong"),Hfo=o("yoso"),Ufo=o(" \u2014 "),oP=a("a"),Jfo=o("YosoModel"),Yfo=o(" (YOSO model)"),Kfo=l(),Op=a("p"),Zfo=o("The model is set in evaluation mode by default using "),ote=a("code"),emo=o("model.eval()"),omo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rte=a("code"),rmo=o("model.train()"),tmo=l(),v(Vp.$$.fragment),V$e=l(),di=a("h2"),Xp=a("a"),tte=a("span"),v(aA.$$.fragment),amo=l(),ate=a("span"),nmo=o("AutoModelForPreTraining"),X$e=l(),yo=a("div"),v(nA.$$.fragment),smo=l(),ci=a("p"),lmo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),rP=a("a"),imo=o("from_pretrained()"),dmo=o(" class method or the "),tP=a("a"),cmo=o("from_config()"),fmo=o(` class
method.`),mmo=l(),sA=a("p"),gmo=o("This class cannot be instantiated directly using "),nte=a("code"),hmo=o("__init__()"),pmo=o(" (throws an error)."),umo=l(),Zr=a("div"),v(lA.$$.fragment),_mo=l(),ste=a("p"),bmo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Fmo=l(),fi=a("p"),vmo=o(`Note:
Loading a model from its configuration file does `),lte=a("strong"),Tmo=o("not"),Mmo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aP=a("a"),Emo=o("from_pretrained()"),Cmo=o(" to load the model weights."),wmo=l(),v(zp.$$.fragment),Amo=l(),Qe=a("div"),v(iA.$$.fragment),ymo=l(),ite=a("p"),Lmo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),xmo=l(),Ea=a("p"),$mo=o("The model class to instantiate is selected based on the "),dte=a("code"),kmo=o("model_type"),Smo=o(` property of the config object (either
passed as an argument or loaded from `),cte=a("code"),Rmo=o("pretrained_model_name_or_path"),Bmo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fte=a("code"),Pmo=o("pretrained_model_name_or_path"),Imo=o(":"),qmo=l(),G=a("ul"),Qp=a("li"),mte=a("strong"),Nmo=o("albert"),jmo=o(" \u2014 "),nP=a("a"),Dmo=o("AlbertForPreTraining"),Gmo=o(" (ALBERT model)"),Omo=l(),Wp=a("li"),gte=a("strong"),Vmo=o("bart"),Xmo=o(" \u2014 "),sP=a("a"),zmo=o("BartForConditionalGeneration"),Qmo=o(" (BART model)"),Wmo=l(),Hp=a("li"),hte=a("strong"),Hmo=o("bert"),Umo=o(" \u2014 "),lP=a("a"),Jmo=o("BertForPreTraining"),Ymo=o(" (BERT model)"),Kmo=l(),Up=a("li"),pte=a("strong"),Zmo=o("big_bird"),ego=o(" \u2014 "),iP=a("a"),ogo=o("BigBirdForPreTraining"),rgo=o(" (BigBird model)"),tgo=l(),Jp=a("li"),ute=a("strong"),ago=o("camembert"),ngo=o(" \u2014 "),dP=a("a"),sgo=o("CamembertForMaskedLM"),lgo=o(" (CamemBERT model)"),igo=l(),Yp=a("li"),_te=a("strong"),dgo=o("ctrl"),cgo=o(" \u2014 "),cP=a("a"),fgo=o("CTRLLMHeadModel"),mgo=o(" (CTRL model)"),ggo=l(),Kp=a("li"),bte=a("strong"),hgo=o("data2vec-text"),pgo=o(" \u2014 "),fP=a("a"),ugo=o("Data2VecTextForMaskedLM"),_go=o(" (Data2VecText model)"),bgo=l(),Zp=a("li"),Fte=a("strong"),Fgo=o("deberta"),vgo=o(" \u2014 "),mP=a("a"),Tgo=o("DebertaForMaskedLM"),Mgo=o(" (DeBERTa model)"),Ego=l(),eu=a("li"),vte=a("strong"),Cgo=o("deberta-v2"),wgo=o(" \u2014 "),gP=a("a"),Ago=o("DebertaV2ForMaskedLM"),ygo=o(" (DeBERTa-v2 model)"),Lgo=l(),ou=a("li"),Tte=a("strong"),xgo=o("distilbert"),$go=o(" \u2014 "),hP=a("a"),kgo=o("DistilBertForMaskedLM"),Sgo=o(" (DistilBERT model)"),Rgo=l(),ru=a("li"),Mte=a("strong"),Bgo=o("electra"),Pgo=o(" \u2014 "),pP=a("a"),Igo=o("ElectraForPreTraining"),qgo=o(" (ELECTRA model)"),Ngo=l(),tu=a("li"),Ete=a("strong"),jgo=o("flaubert"),Dgo=o(" \u2014 "),uP=a("a"),Ggo=o("FlaubertWithLMHeadModel"),Ogo=o(" (FlauBERT model)"),Vgo=l(),au=a("li"),Cte=a("strong"),Xgo=o("fnet"),zgo=o(" \u2014 "),_P=a("a"),Qgo=o("FNetForPreTraining"),Wgo=o(" (FNet model)"),Hgo=l(),nu=a("li"),wte=a("strong"),Ugo=o("fsmt"),Jgo=o(" \u2014 "),bP=a("a"),Ygo=o("FSMTForConditionalGeneration"),Kgo=o(" (FairSeq Machine-Translation model)"),Zgo=l(),su=a("li"),Ate=a("strong"),eho=o("funnel"),oho=o(" \u2014 "),FP=a("a"),rho=o("FunnelForPreTraining"),tho=o(" (Funnel Transformer model)"),aho=l(),lu=a("li"),yte=a("strong"),nho=o("gpt2"),sho=o(" \u2014 "),vP=a("a"),lho=o("GPT2LMHeadModel"),iho=o(" (OpenAI GPT-2 model)"),dho=l(),iu=a("li"),Lte=a("strong"),cho=o("ibert"),fho=o(" \u2014 "),TP=a("a"),mho=o("IBertForMaskedLM"),gho=o(" (I-BERT model)"),hho=l(),du=a("li"),xte=a("strong"),pho=o("layoutlm"),uho=o(" \u2014 "),MP=a("a"),_ho=o("LayoutLMForMaskedLM"),bho=o(" (LayoutLM model)"),Fho=l(),cu=a("li"),$te=a("strong"),vho=o("longformer"),Tho=o(" \u2014 "),EP=a("a"),Mho=o("LongformerForMaskedLM"),Eho=o(" (Longformer model)"),Cho=l(),fu=a("li"),kte=a("strong"),who=o("lxmert"),Aho=o(" \u2014 "),CP=a("a"),yho=o("LxmertForPreTraining"),Lho=o(" (LXMERT model)"),xho=l(),mu=a("li"),Ste=a("strong"),$ho=o("megatron-bert"),kho=o(" \u2014 "),wP=a("a"),Sho=o("MegatronBertForPreTraining"),Rho=o(" (MegatronBert model)"),Bho=l(),gu=a("li"),Rte=a("strong"),Pho=o("mobilebert"),Iho=o(" \u2014 "),AP=a("a"),qho=o("MobileBertForPreTraining"),Nho=o(" (MobileBERT model)"),jho=l(),hu=a("li"),Bte=a("strong"),Dho=o("mpnet"),Gho=o(" \u2014 "),yP=a("a"),Oho=o("MPNetForMaskedLM"),Vho=o(" (MPNet model)"),Xho=l(),pu=a("li"),Pte=a("strong"),zho=o("openai-gpt"),Qho=o(" \u2014 "),LP=a("a"),Who=o("OpenAIGPTLMHeadModel"),Hho=o(" (OpenAI GPT model)"),Uho=l(),uu=a("li"),Ite=a("strong"),Jho=o("retribert"),Yho=o(" \u2014 "),xP=a("a"),Kho=o("RetriBertModel"),Zho=o(" (RetriBERT model)"),epo=l(),_u=a("li"),qte=a("strong"),opo=o("roberta"),rpo=o(" \u2014 "),$P=a("a"),tpo=o("RobertaForMaskedLM"),apo=o(" (RoBERTa model)"),npo=l(),bu=a("li"),Nte=a("strong"),spo=o("squeezebert"),lpo=o(" \u2014 "),kP=a("a"),ipo=o("SqueezeBertForMaskedLM"),dpo=o(" (SqueezeBERT model)"),cpo=l(),Fu=a("li"),jte=a("strong"),fpo=o("t5"),mpo=o(" \u2014 "),SP=a("a"),gpo=o("T5ForConditionalGeneration"),hpo=o(" (T5 model)"),ppo=l(),vu=a("li"),Dte=a("strong"),upo=o("tapas"),_po=o(" \u2014 "),RP=a("a"),bpo=o("TapasForMaskedLM"),Fpo=o(" (TAPAS model)"),vpo=l(),Tu=a("li"),Gte=a("strong"),Tpo=o("transfo-xl"),Mpo=o(" \u2014 "),BP=a("a"),Epo=o("TransfoXLLMHeadModel"),Cpo=o(" (Transformer-XL model)"),wpo=l(),Mu=a("li"),Ote=a("strong"),Apo=o("unispeech"),ypo=o(" \u2014 "),PP=a("a"),Lpo=o("UniSpeechForPreTraining"),xpo=o(" (UniSpeech model)"),$po=l(),Eu=a("li"),Vte=a("strong"),kpo=o("unispeech-sat"),Spo=o(" \u2014 "),IP=a("a"),Rpo=o("UniSpeechSatForPreTraining"),Bpo=o(" (UniSpeechSat model)"),Ppo=l(),Cu=a("li"),Xte=a("strong"),Ipo=o("visual_bert"),qpo=o(" \u2014 "),qP=a("a"),Npo=o("VisualBertForPreTraining"),jpo=o(" (VisualBert model)"),Dpo=l(),wu=a("li"),zte=a("strong"),Gpo=o("vit_mae"),Opo=o(" \u2014 "),NP=a("a"),Vpo=o("ViTMAEForPreTraining"),Xpo=o(" (ViTMAE model)"),zpo=l(),Au=a("li"),Qte=a("strong"),Qpo=o("wav2vec2"),Wpo=o(" \u2014 "),jP=a("a"),Hpo=o("Wav2Vec2ForPreTraining"),Upo=o(" (Wav2Vec2 model)"),Jpo=l(),yu=a("li"),Wte=a("strong"),Ypo=o("xlm"),Kpo=o(" \u2014 "),DP=a("a"),Zpo=o("XLMWithLMHeadModel"),euo=o(" (XLM model)"),ouo=l(),Lu=a("li"),Hte=a("strong"),ruo=o("xlm-roberta"),tuo=o(" \u2014 "),GP=a("a"),auo=o("XLMRobertaForMaskedLM"),nuo=o(" (XLM-RoBERTa model)"),suo=l(),xu=a("li"),Ute=a("strong"),luo=o("xlm-roberta-xl"),iuo=o(" \u2014 "),OP=a("a"),duo=o("XLMRobertaXLForMaskedLM"),cuo=o(" (XLM-RoBERTa-XL model)"),fuo=l(),$u=a("li"),Jte=a("strong"),muo=o("xlnet"),guo=o(" \u2014 "),VP=a("a"),huo=o("XLNetLMHeadModel"),puo=o(" (XLNet model)"),uuo=l(),ku=a("p"),_uo=o("The model is set in evaluation mode by default using "),Yte=a("code"),buo=o("model.eval()"),Fuo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kte=a("code"),vuo=o("model.train()"),Tuo=l(),v(Su.$$.fragment),z$e=l(),mi=a("h2"),Ru=a("a"),Zte=a("span"),v(dA.$$.fragment),Muo=l(),eae=a("span"),Euo=o("AutoModelForCausalLM"),Q$e=l(),Lo=a("div"),v(cA.$$.fragment),Cuo=l(),gi=a("p"),wuo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),XP=a("a"),Auo=o("from_pretrained()"),yuo=o(" class method or the "),zP=a("a"),Luo=o("from_config()"),xuo=o(` class
method.`),$uo=l(),fA=a("p"),kuo=o("This class cannot be instantiated directly using "),oae=a("code"),Suo=o("__init__()"),Ruo=o(" (throws an error)."),Buo=l(),et=a("div"),v(mA.$$.fragment),Puo=l(),rae=a("p"),Iuo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),quo=l(),hi=a("p"),Nuo=o(`Note:
Loading a model from its configuration file does `),tae=a("strong"),juo=o("not"),Duo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QP=a("a"),Guo=o("from_pretrained()"),Ouo=o(" to load the model weights."),Vuo=l(),v(Bu.$$.fragment),Xuo=l(),We=a("div"),v(gA.$$.fragment),zuo=l(),aae=a("p"),Quo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Wuo=l(),Ca=a("p"),Huo=o("The model class to instantiate is selected based on the "),nae=a("code"),Uuo=o("model_type"),Juo=o(` property of the config object (either
passed as an argument or loaded from `),sae=a("code"),Yuo=o("pretrained_model_name_or_path"),Kuo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lae=a("code"),Zuo=o("pretrained_model_name_or_path"),e_o=o(":"),o_o=l(),z=a("ul"),Pu=a("li"),iae=a("strong"),r_o=o("bart"),t_o=o(" \u2014 "),WP=a("a"),a_o=o("BartForCausalLM"),n_o=o(" (BART model)"),s_o=l(),Iu=a("li"),dae=a("strong"),l_o=o("bert"),i_o=o(" \u2014 "),HP=a("a"),d_o=o("BertLMHeadModel"),c_o=o(" (BERT model)"),f_o=l(),qu=a("li"),cae=a("strong"),m_o=o("bert-generation"),g_o=o(" \u2014 "),UP=a("a"),h_o=o("BertGenerationDecoder"),p_o=o(" (Bert Generation model)"),u_o=l(),Nu=a("li"),fae=a("strong"),__o=o("big_bird"),b_o=o(" \u2014 "),JP=a("a"),F_o=o("BigBirdForCausalLM"),v_o=o(" (BigBird model)"),T_o=l(),ju=a("li"),mae=a("strong"),M_o=o("bigbird_pegasus"),E_o=o(" \u2014 "),YP=a("a"),C_o=o("BigBirdPegasusForCausalLM"),w_o=o(" (BigBirdPegasus model)"),A_o=l(),Du=a("li"),gae=a("strong"),y_o=o("blenderbot"),L_o=o(" \u2014 "),KP=a("a"),x_o=o("BlenderbotForCausalLM"),$_o=o(" (Blenderbot model)"),k_o=l(),Gu=a("li"),hae=a("strong"),S_o=o("blenderbot-small"),R_o=o(" \u2014 "),ZP=a("a"),B_o=o("BlenderbotSmallForCausalLM"),P_o=o(" (BlenderbotSmall model)"),I_o=l(),Ou=a("li"),pae=a("strong"),q_o=o("camembert"),N_o=o(" \u2014 "),eI=a("a"),j_o=o("CamembertForCausalLM"),D_o=o(" (CamemBERT model)"),G_o=l(),Vu=a("li"),uae=a("strong"),O_o=o("ctrl"),V_o=o(" \u2014 "),oI=a("a"),X_o=o("CTRLLMHeadModel"),z_o=o(" (CTRL model)"),Q_o=l(),Xu=a("li"),_ae=a("strong"),W_o=o("data2vec-text"),H_o=o(" \u2014 "),rI=a("a"),U_o=o("Data2VecTextForCausalLM"),J_o=o(" (Data2VecText model)"),Y_o=l(),zu=a("li"),bae=a("strong"),K_o=o("electra"),Z_o=o(" \u2014 "),tI=a("a"),e2o=o("ElectraForCausalLM"),o2o=o(" (ELECTRA model)"),r2o=l(),Qu=a("li"),Fae=a("strong"),t2o=o("gpt2"),a2o=o(" \u2014 "),aI=a("a"),n2o=o("GPT2LMHeadModel"),s2o=o(" (OpenAI GPT-2 model)"),l2o=l(),Wu=a("li"),vae=a("strong"),i2o=o("gpt_neo"),d2o=o(" \u2014 "),nI=a("a"),c2o=o("GPTNeoForCausalLM"),f2o=o(" (GPT Neo model)"),m2o=l(),Hu=a("li"),Tae=a("strong"),g2o=o("gptj"),h2o=o(" \u2014 "),sI=a("a"),p2o=o("GPTJForCausalLM"),u2o=o(" (GPT-J model)"),_2o=l(),Uu=a("li"),Mae=a("strong"),b2o=o("marian"),F2o=o(" \u2014 "),lI=a("a"),v2o=o("MarianForCausalLM"),T2o=o(" (Marian model)"),M2o=l(),Ju=a("li"),Eae=a("strong"),E2o=o("mbart"),C2o=o(" \u2014 "),iI=a("a"),w2o=o("MBartForCausalLM"),A2o=o(" (mBART model)"),y2o=l(),Yu=a("li"),Cae=a("strong"),L2o=o("megatron-bert"),x2o=o(" \u2014 "),dI=a("a"),$2o=o("MegatronBertForCausalLM"),k2o=o(" (MegatronBert model)"),S2o=l(),Ku=a("li"),wae=a("strong"),R2o=o("openai-gpt"),B2o=o(" \u2014 "),cI=a("a"),P2o=o("OpenAIGPTLMHeadModel"),I2o=o(" (OpenAI GPT model)"),q2o=l(),Zu=a("li"),Aae=a("strong"),N2o=o("pegasus"),j2o=o(" \u2014 "),fI=a("a"),D2o=o("PegasusForCausalLM"),G2o=o(" (Pegasus model)"),O2o=l(),e_=a("li"),yae=a("strong"),V2o=o("plbart"),X2o=o(" \u2014 "),mI=a("a"),z2o=o("PLBartForCausalLM"),Q2o=o(" (PLBart model)"),W2o=l(),o_=a("li"),Lae=a("strong"),H2o=o("prophetnet"),U2o=o(" \u2014 "),gI=a("a"),J2o=o("ProphetNetForCausalLM"),Y2o=o(" (ProphetNet model)"),K2o=l(),r_=a("li"),xae=a("strong"),Z2o=o("qdqbert"),e1o=o(" \u2014 "),$ae=a("code"),o1o=o("QDQBertLMHeadModel"),r1o=o(" (QDQBert model)"),t1o=l(),t_=a("li"),kae=a("strong"),a1o=o("reformer"),n1o=o(" \u2014 "),hI=a("a"),s1o=o("ReformerModelWithLMHead"),l1o=o(" (Reformer model)"),i1o=l(),a_=a("li"),Sae=a("strong"),d1o=o("rembert"),c1o=o(" \u2014 "),pI=a("a"),f1o=o("RemBertForCausalLM"),m1o=o(" (RemBERT model)"),g1o=l(),n_=a("li"),Rae=a("strong"),h1o=o("roberta"),p1o=o(" \u2014 "),uI=a("a"),u1o=o("RobertaForCausalLM"),_1o=o(" (RoBERTa model)"),b1o=l(),s_=a("li"),Bae=a("strong"),F1o=o("roformer"),v1o=o(" \u2014 "),_I=a("a"),T1o=o("RoFormerForCausalLM"),M1o=o(" (RoFormer model)"),E1o=l(),l_=a("li"),Pae=a("strong"),C1o=o("speech_to_text_2"),w1o=o(" \u2014 "),bI=a("a"),A1o=o("Speech2Text2ForCausalLM"),y1o=o(" (Speech2Text2 model)"),L1o=l(),i_=a("li"),Iae=a("strong"),x1o=o("transfo-xl"),$1o=o(" \u2014 "),FI=a("a"),k1o=o("TransfoXLLMHeadModel"),S1o=o(" (Transformer-XL model)"),R1o=l(),d_=a("li"),qae=a("strong"),B1o=o("trocr"),P1o=o(" \u2014 "),vI=a("a"),I1o=o("TrOCRForCausalLM"),q1o=o(" (TrOCR model)"),N1o=l(),c_=a("li"),Nae=a("strong"),j1o=o("xglm"),D1o=o(" \u2014 "),TI=a("a"),G1o=o("XGLMForCausalLM"),O1o=o(" (XGLM model)"),V1o=l(),f_=a("li"),jae=a("strong"),X1o=o("xlm"),z1o=o(" \u2014 "),MI=a("a"),Q1o=o("XLMWithLMHeadModel"),W1o=o(" (XLM model)"),H1o=l(),m_=a("li"),Dae=a("strong"),U1o=o("xlm-prophetnet"),J1o=o(" \u2014 "),EI=a("a"),Y1o=o("XLMProphetNetForCausalLM"),K1o=o(" (XLMProphetNet model)"),Z1o=l(),g_=a("li"),Gae=a("strong"),ebo=o("xlm-roberta"),obo=o(" \u2014 "),CI=a("a"),rbo=o("XLMRobertaForCausalLM"),tbo=o(" (XLM-RoBERTa model)"),abo=l(),h_=a("li"),Oae=a("strong"),nbo=o("xlm-roberta-xl"),sbo=o(" \u2014 "),wI=a("a"),lbo=o("XLMRobertaXLForCausalLM"),ibo=o(" (XLM-RoBERTa-XL model)"),dbo=l(),p_=a("li"),Vae=a("strong"),cbo=o("xlnet"),fbo=o(" \u2014 "),AI=a("a"),mbo=o("XLNetLMHeadModel"),gbo=o(" (XLNet model)"),hbo=l(),u_=a("p"),pbo=o("The model is set in evaluation mode by default using "),Xae=a("code"),ubo=o("model.eval()"),_bo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zae=a("code"),bbo=o("model.train()"),Fbo=l(),v(__.$$.fragment),W$e=l(),pi=a("h2"),b_=a("a"),Qae=a("span"),v(hA.$$.fragment),vbo=l(),Wae=a("span"),Tbo=o("AutoModelForMaskedLM"),H$e=l(),xo=a("div"),v(pA.$$.fragment),Mbo=l(),ui=a("p"),Ebo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),yI=a("a"),Cbo=o("from_pretrained()"),wbo=o(" class method or the "),LI=a("a"),Abo=o("from_config()"),ybo=o(` class
method.`),Lbo=l(),uA=a("p"),xbo=o("This class cannot be instantiated directly using "),Hae=a("code"),$bo=o("__init__()"),kbo=o(" (throws an error)."),Sbo=l(),ot=a("div"),v(_A.$$.fragment),Rbo=l(),Uae=a("p"),Bbo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Pbo=l(),_i=a("p"),Ibo=o(`Note:
Loading a model from its configuration file does `),Jae=a("strong"),qbo=o("not"),Nbo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xI=a("a"),jbo=o("from_pretrained()"),Dbo=o(" to load the model weights."),Gbo=l(),v(F_.$$.fragment),Obo=l(),He=a("div"),v(bA.$$.fragment),Vbo=l(),Yae=a("p"),Xbo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),zbo=l(),wa=a("p"),Qbo=o("The model class to instantiate is selected based on the "),Kae=a("code"),Wbo=o("model_type"),Hbo=o(` property of the config object (either
passed as an argument or loaded from `),Zae=a("code"),Ubo=o("pretrained_model_name_or_path"),Jbo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ene=a("code"),Ybo=o("pretrained_model_name_or_path"),Kbo=o(":"),Zbo=l(),Q=a("ul"),v_=a("li"),one=a("strong"),e5o=o("albert"),o5o=o(" \u2014 "),$I=a("a"),r5o=o("AlbertForMaskedLM"),t5o=o(" (ALBERT model)"),a5o=l(),T_=a("li"),rne=a("strong"),n5o=o("bart"),s5o=o(" \u2014 "),kI=a("a"),l5o=o("BartForConditionalGeneration"),i5o=o(" (BART model)"),d5o=l(),M_=a("li"),tne=a("strong"),c5o=o("bert"),f5o=o(" \u2014 "),SI=a("a"),m5o=o("BertForMaskedLM"),g5o=o(" (BERT model)"),h5o=l(),E_=a("li"),ane=a("strong"),p5o=o("big_bird"),u5o=o(" \u2014 "),RI=a("a"),_5o=o("BigBirdForMaskedLM"),b5o=o(" (BigBird model)"),F5o=l(),C_=a("li"),nne=a("strong"),v5o=o("camembert"),T5o=o(" \u2014 "),BI=a("a"),M5o=o("CamembertForMaskedLM"),E5o=o(" (CamemBERT model)"),C5o=l(),w_=a("li"),sne=a("strong"),w5o=o("convbert"),A5o=o(" \u2014 "),PI=a("a"),y5o=o("ConvBertForMaskedLM"),L5o=o(" (ConvBERT model)"),x5o=l(),A_=a("li"),lne=a("strong"),$5o=o("data2vec-text"),k5o=o(" \u2014 "),II=a("a"),S5o=o("Data2VecTextForMaskedLM"),R5o=o(" (Data2VecText model)"),B5o=l(),y_=a("li"),ine=a("strong"),P5o=o("deberta"),I5o=o(" \u2014 "),qI=a("a"),q5o=o("DebertaForMaskedLM"),N5o=o(" (DeBERTa model)"),j5o=l(),L_=a("li"),dne=a("strong"),D5o=o("deberta-v2"),G5o=o(" \u2014 "),NI=a("a"),O5o=o("DebertaV2ForMaskedLM"),V5o=o(" (DeBERTa-v2 model)"),X5o=l(),x_=a("li"),cne=a("strong"),z5o=o("distilbert"),Q5o=o(" \u2014 "),jI=a("a"),W5o=o("DistilBertForMaskedLM"),H5o=o(" (DistilBERT model)"),U5o=l(),$_=a("li"),fne=a("strong"),J5o=o("electra"),Y5o=o(" \u2014 "),DI=a("a"),K5o=o("ElectraForMaskedLM"),Z5o=o(" (ELECTRA model)"),eFo=l(),k_=a("li"),mne=a("strong"),oFo=o("flaubert"),rFo=o(" \u2014 "),GI=a("a"),tFo=o("FlaubertWithLMHeadModel"),aFo=o(" (FlauBERT model)"),nFo=l(),S_=a("li"),gne=a("strong"),sFo=o("fnet"),lFo=o(" \u2014 "),OI=a("a"),iFo=o("FNetForMaskedLM"),dFo=o(" (FNet model)"),cFo=l(),R_=a("li"),hne=a("strong"),fFo=o("funnel"),mFo=o(" \u2014 "),VI=a("a"),gFo=o("FunnelForMaskedLM"),hFo=o(" (Funnel Transformer model)"),pFo=l(),B_=a("li"),pne=a("strong"),uFo=o("ibert"),_Fo=o(" \u2014 "),XI=a("a"),bFo=o("IBertForMaskedLM"),FFo=o(" (I-BERT model)"),vFo=l(),P_=a("li"),une=a("strong"),TFo=o("layoutlm"),MFo=o(" \u2014 "),zI=a("a"),EFo=o("LayoutLMForMaskedLM"),CFo=o(" (LayoutLM model)"),wFo=l(),I_=a("li"),_ne=a("strong"),AFo=o("longformer"),yFo=o(" \u2014 "),QI=a("a"),LFo=o("LongformerForMaskedLM"),xFo=o(" (Longformer model)"),$Fo=l(),q_=a("li"),bne=a("strong"),kFo=o("mbart"),SFo=o(" \u2014 "),WI=a("a"),RFo=o("MBartForConditionalGeneration"),BFo=o(" (mBART model)"),PFo=l(),N_=a("li"),Fne=a("strong"),IFo=o("megatron-bert"),qFo=o(" \u2014 "),HI=a("a"),NFo=o("MegatronBertForMaskedLM"),jFo=o(" (MegatronBert model)"),DFo=l(),j_=a("li"),vne=a("strong"),GFo=o("mobilebert"),OFo=o(" \u2014 "),UI=a("a"),VFo=o("MobileBertForMaskedLM"),XFo=o(" (MobileBERT model)"),zFo=l(),D_=a("li"),Tne=a("strong"),QFo=o("mpnet"),WFo=o(" \u2014 "),JI=a("a"),HFo=o("MPNetForMaskedLM"),UFo=o(" (MPNet model)"),JFo=l(),G_=a("li"),Mne=a("strong"),YFo=o("nystromformer"),KFo=o(" \u2014 "),YI=a("a"),ZFo=o("NystromformerForMaskedLM"),evo=o(" (Nystromformer model)"),ovo=l(),O_=a("li"),Ene=a("strong"),rvo=o("perceiver"),tvo=o(" \u2014 "),KI=a("a"),avo=o("PerceiverForMaskedLM"),nvo=o(" (Perceiver model)"),svo=l(),V_=a("li"),Cne=a("strong"),lvo=o("qdqbert"),ivo=o(" \u2014 "),wne=a("code"),dvo=o("QDQBertForMaskedLM"),cvo=o(" (QDQBert model)"),fvo=l(),X_=a("li"),Ane=a("strong"),mvo=o("reformer"),gvo=o(" \u2014 "),ZI=a("a"),hvo=o("ReformerForMaskedLM"),pvo=o(" (Reformer model)"),uvo=l(),z_=a("li"),yne=a("strong"),_vo=o("rembert"),bvo=o(" \u2014 "),eq=a("a"),Fvo=o("RemBertForMaskedLM"),vvo=o(" (RemBERT model)"),Tvo=l(),Q_=a("li"),Lne=a("strong"),Mvo=o("roberta"),Evo=o(" \u2014 "),oq=a("a"),Cvo=o("RobertaForMaskedLM"),wvo=o(" (RoBERTa model)"),Avo=l(),W_=a("li"),xne=a("strong"),yvo=o("roformer"),Lvo=o(" \u2014 "),rq=a("a"),xvo=o("RoFormerForMaskedLM"),$vo=o(" (RoFormer model)"),kvo=l(),H_=a("li"),$ne=a("strong"),Svo=o("squeezebert"),Rvo=o(" \u2014 "),tq=a("a"),Bvo=o("SqueezeBertForMaskedLM"),Pvo=o(" (SqueezeBERT model)"),Ivo=l(),U_=a("li"),kne=a("strong"),qvo=o("tapas"),Nvo=o(" \u2014 "),aq=a("a"),jvo=o("TapasForMaskedLM"),Dvo=o(" (TAPAS model)"),Gvo=l(),J_=a("li"),Sne=a("strong"),Ovo=o("wav2vec2"),Vvo=o(" \u2014 "),Rne=a("code"),Xvo=o("Wav2Vec2ForMaskedLM"),zvo=o(" (Wav2Vec2 model)"),Qvo=l(),Y_=a("li"),Bne=a("strong"),Wvo=o("xlm"),Hvo=o(" \u2014 "),nq=a("a"),Uvo=o("XLMWithLMHeadModel"),Jvo=o(" (XLM model)"),Yvo=l(),K_=a("li"),Pne=a("strong"),Kvo=o("xlm-roberta"),Zvo=o(" \u2014 "),sq=a("a"),e6o=o("XLMRobertaForMaskedLM"),o6o=o(" (XLM-RoBERTa model)"),r6o=l(),Z_=a("li"),Ine=a("strong"),t6o=o("xlm-roberta-xl"),a6o=o(" \u2014 "),lq=a("a"),n6o=o("XLMRobertaXLForMaskedLM"),s6o=o(" (XLM-RoBERTa-XL model)"),l6o=l(),e2=a("li"),qne=a("strong"),i6o=o("yoso"),d6o=o(" \u2014 "),iq=a("a"),c6o=o("YosoForMaskedLM"),f6o=o(" (YOSO model)"),m6o=l(),o2=a("p"),g6o=o("The model is set in evaluation mode by default using "),Nne=a("code"),h6o=o("model.eval()"),p6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jne=a("code"),u6o=o("model.train()"),_6o=l(),v(r2.$$.fragment),U$e=l(),bi=a("h2"),t2=a("a"),Dne=a("span"),v(FA.$$.fragment),b6o=l(),Gne=a("span"),F6o=o("AutoModelForSeq2SeqLM"),J$e=l(),$o=a("div"),v(vA.$$.fragment),v6o=l(),Fi=a("p"),T6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),dq=a("a"),M6o=o("from_pretrained()"),E6o=o(" class method or the "),cq=a("a"),C6o=o("from_config()"),w6o=o(` class
method.`),A6o=l(),TA=a("p"),y6o=o("This class cannot be instantiated directly using "),One=a("code"),L6o=o("__init__()"),x6o=o(" (throws an error)."),$6o=l(),rt=a("div"),v(MA.$$.fragment),k6o=l(),Vne=a("p"),S6o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),R6o=l(),vi=a("p"),B6o=o(`Note:
Loading a model from its configuration file does `),Xne=a("strong"),P6o=o("not"),I6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fq=a("a"),q6o=o("from_pretrained()"),N6o=o(" to load the model weights."),j6o=l(),v(a2.$$.fragment),D6o=l(),Ue=a("div"),v(EA.$$.fragment),G6o=l(),zne=a("p"),O6o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),V6o=l(),Aa=a("p"),X6o=o("The model class to instantiate is selected based on the "),Qne=a("code"),z6o=o("model_type"),Q6o=o(` property of the config object (either
passed as an argument or loaded from `),Wne=a("code"),W6o=o("pretrained_model_name_or_path"),H6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hne=a("code"),U6o=o("pretrained_model_name_or_path"),J6o=o(":"),Y6o=l(),pe=a("ul"),n2=a("li"),Une=a("strong"),K6o=o("bart"),Z6o=o(" \u2014 "),mq=a("a"),eTo=o("BartForConditionalGeneration"),oTo=o(" (BART model)"),rTo=l(),s2=a("li"),Jne=a("strong"),tTo=o("bigbird_pegasus"),aTo=o(" \u2014 "),gq=a("a"),nTo=o("BigBirdPegasusForConditionalGeneration"),sTo=o(" (BigBirdPegasus model)"),lTo=l(),l2=a("li"),Yne=a("strong"),iTo=o("blenderbot"),dTo=o(" \u2014 "),hq=a("a"),cTo=o("BlenderbotForConditionalGeneration"),fTo=o(" (Blenderbot model)"),mTo=l(),i2=a("li"),Kne=a("strong"),gTo=o("blenderbot-small"),hTo=o(" \u2014 "),pq=a("a"),pTo=o("BlenderbotSmallForConditionalGeneration"),uTo=o(" (BlenderbotSmall model)"),_To=l(),d2=a("li"),Zne=a("strong"),bTo=o("encoder-decoder"),FTo=o(" \u2014 "),uq=a("a"),vTo=o("EncoderDecoderModel"),TTo=o(" (Encoder decoder model)"),MTo=l(),c2=a("li"),ese=a("strong"),ETo=o("fsmt"),CTo=o(" \u2014 "),_q=a("a"),wTo=o("FSMTForConditionalGeneration"),ATo=o(" (FairSeq Machine-Translation model)"),yTo=l(),f2=a("li"),ose=a("strong"),LTo=o("led"),xTo=o(" \u2014 "),bq=a("a"),$To=o("LEDForConditionalGeneration"),kTo=o(" (LED model)"),STo=l(),m2=a("li"),rse=a("strong"),RTo=o("m2m_100"),BTo=o(" \u2014 "),Fq=a("a"),PTo=o("M2M100ForConditionalGeneration"),ITo=o(" (M2M100 model)"),qTo=l(),g2=a("li"),tse=a("strong"),NTo=o("marian"),jTo=o(" \u2014 "),vq=a("a"),DTo=o("MarianMTModel"),GTo=o(" (Marian model)"),OTo=l(),h2=a("li"),ase=a("strong"),VTo=o("mbart"),XTo=o(" \u2014 "),Tq=a("a"),zTo=o("MBartForConditionalGeneration"),QTo=o(" (mBART model)"),WTo=l(),p2=a("li"),nse=a("strong"),HTo=o("mt5"),UTo=o(" \u2014 "),Mq=a("a"),JTo=o("MT5ForConditionalGeneration"),YTo=o(" (mT5 model)"),KTo=l(),u2=a("li"),sse=a("strong"),ZTo=o("pegasus"),eMo=o(" \u2014 "),Eq=a("a"),oMo=o("PegasusForConditionalGeneration"),rMo=o(" (Pegasus model)"),tMo=l(),_2=a("li"),lse=a("strong"),aMo=o("plbart"),nMo=o(" \u2014 "),Cq=a("a"),sMo=o("PLBartForConditionalGeneration"),lMo=o(" (PLBart model)"),iMo=l(),b2=a("li"),ise=a("strong"),dMo=o("prophetnet"),cMo=o(" \u2014 "),wq=a("a"),fMo=o("ProphetNetForConditionalGeneration"),mMo=o(" (ProphetNet model)"),gMo=l(),F2=a("li"),dse=a("strong"),hMo=o("t5"),pMo=o(" \u2014 "),Aq=a("a"),uMo=o("T5ForConditionalGeneration"),_Mo=o(" (T5 model)"),bMo=l(),v2=a("li"),cse=a("strong"),FMo=o("xlm-prophetnet"),vMo=o(" \u2014 "),yq=a("a"),TMo=o("XLMProphetNetForConditionalGeneration"),MMo=o(" (XLMProphetNet model)"),EMo=l(),T2=a("p"),CMo=o("The model is set in evaluation mode by default using "),fse=a("code"),wMo=o("model.eval()"),AMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mse=a("code"),yMo=o("model.train()"),LMo=l(),v(M2.$$.fragment),Y$e=l(),Ti=a("h2"),E2=a("a"),gse=a("span"),v(CA.$$.fragment),xMo=l(),hse=a("span"),$Mo=o("AutoModelForSequenceClassification"),K$e=l(),ko=a("div"),v(wA.$$.fragment),kMo=l(),Mi=a("p"),SMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Lq=a("a"),RMo=o("from_pretrained()"),BMo=o(" class method or the "),xq=a("a"),PMo=o("from_config()"),IMo=o(` class
method.`),qMo=l(),AA=a("p"),NMo=o("This class cannot be instantiated directly using "),pse=a("code"),jMo=o("__init__()"),DMo=o(" (throws an error)."),GMo=l(),tt=a("div"),v(yA.$$.fragment),OMo=l(),use=a("p"),VMo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),XMo=l(),Ei=a("p"),zMo=o(`Note:
Loading a model from its configuration file does `),_se=a("strong"),QMo=o("not"),WMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$q=a("a"),HMo=o("from_pretrained()"),UMo=o(" to load the model weights."),JMo=l(),v(C2.$$.fragment),YMo=l(),Je=a("div"),v(LA.$$.fragment),KMo=l(),bse=a("p"),ZMo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),e9o=l(),ya=a("p"),o9o=o("The model class to instantiate is selected based on the "),Fse=a("code"),r9o=o("model_type"),t9o=o(` property of the config object (either
passed as an argument or loaded from `),vse=a("code"),a9o=o("pretrained_model_name_or_path"),n9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tse=a("code"),s9o=o("pretrained_model_name_or_path"),l9o=o(":"),i9o=l(),q=a("ul"),w2=a("li"),Mse=a("strong"),d9o=o("albert"),c9o=o(" \u2014 "),kq=a("a"),f9o=o("AlbertForSequenceClassification"),m9o=o(" (ALBERT model)"),g9o=l(),A2=a("li"),Ese=a("strong"),h9o=o("bart"),p9o=o(" \u2014 "),Sq=a("a"),u9o=o("BartForSequenceClassification"),_9o=o(" (BART model)"),b9o=l(),y2=a("li"),Cse=a("strong"),F9o=o("bert"),v9o=o(" \u2014 "),Rq=a("a"),T9o=o("BertForSequenceClassification"),M9o=o(" (BERT model)"),E9o=l(),L2=a("li"),wse=a("strong"),C9o=o("big_bird"),w9o=o(" \u2014 "),Bq=a("a"),A9o=o("BigBirdForSequenceClassification"),y9o=o(" (BigBird model)"),L9o=l(),x2=a("li"),Ase=a("strong"),x9o=o("bigbird_pegasus"),$9o=o(" \u2014 "),Pq=a("a"),k9o=o("BigBirdPegasusForSequenceClassification"),S9o=o(" (BigBirdPegasus model)"),R9o=l(),$2=a("li"),yse=a("strong"),B9o=o("camembert"),P9o=o(" \u2014 "),Iq=a("a"),I9o=o("CamembertForSequenceClassification"),q9o=o(" (CamemBERT model)"),N9o=l(),k2=a("li"),Lse=a("strong"),j9o=o("canine"),D9o=o(" \u2014 "),qq=a("a"),G9o=o("CanineForSequenceClassification"),O9o=o(" (Canine model)"),V9o=l(),S2=a("li"),xse=a("strong"),X9o=o("convbert"),z9o=o(" \u2014 "),Nq=a("a"),Q9o=o("ConvBertForSequenceClassification"),W9o=o(" (ConvBERT model)"),H9o=l(),R2=a("li"),$se=a("strong"),U9o=o("ctrl"),J9o=o(" \u2014 "),jq=a("a"),Y9o=o("CTRLForSequenceClassification"),K9o=o(" (CTRL model)"),Z9o=l(),B2=a("li"),kse=a("strong"),e4o=o("data2vec-text"),o4o=o(" \u2014 "),Dq=a("a"),r4o=o("Data2VecTextForSequenceClassification"),t4o=o(" (Data2VecText model)"),a4o=l(),P2=a("li"),Sse=a("strong"),n4o=o("deberta"),s4o=o(" \u2014 "),Gq=a("a"),l4o=o("DebertaForSequenceClassification"),i4o=o(" (DeBERTa model)"),d4o=l(),I2=a("li"),Rse=a("strong"),c4o=o("deberta-v2"),f4o=o(" \u2014 "),Oq=a("a"),m4o=o("DebertaV2ForSequenceClassification"),g4o=o(" (DeBERTa-v2 model)"),h4o=l(),q2=a("li"),Bse=a("strong"),p4o=o("distilbert"),u4o=o(" \u2014 "),Vq=a("a"),_4o=o("DistilBertForSequenceClassification"),b4o=o(" (DistilBERT model)"),F4o=l(),N2=a("li"),Pse=a("strong"),v4o=o("electra"),T4o=o(" \u2014 "),Xq=a("a"),M4o=o("ElectraForSequenceClassification"),E4o=o(" (ELECTRA model)"),C4o=l(),j2=a("li"),Ise=a("strong"),w4o=o("flaubert"),A4o=o(" \u2014 "),zq=a("a"),y4o=o("FlaubertForSequenceClassification"),L4o=o(" (FlauBERT model)"),x4o=l(),D2=a("li"),qse=a("strong"),$4o=o("fnet"),k4o=o(" \u2014 "),Qq=a("a"),S4o=o("FNetForSequenceClassification"),R4o=o(" (FNet model)"),B4o=l(),G2=a("li"),Nse=a("strong"),P4o=o("funnel"),I4o=o(" \u2014 "),Wq=a("a"),q4o=o("FunnelForSequenceClassification"),N4o=o(" (Funnel Transformer model)"),j4o=l(),O2=a("li"),jse=a("strong"),D4o=o("gpt2"),G4o=o(" \u2014 "),Hq=a("a"),O4o=o("GPT2ForSequenceClassification"),V4o=o(" (OpenAI GPT-2 model)"),X4o=l(),V2=a("li"),Dse=a("strong"),z4o=o("gpt_neo"),Q4o=o(" \u2014 "),Uq=a("a"),W4o=o("GPTNeoForSequenceClassification"),H4o=o(" (GPT Neo model)"),U4o=l(),X2=a("li"),Gse=a("strong"),J4o=o("gptj"),Y4o=o(" \u2014 "),Jq=a("a"),K4o=o("GPTJForSequenceClassification"),Z4o=o(" (GPT-J model)"),eEo=l(),z2=a("li"),Ose=a("strong"),oEo=o("ibert"),rEo=o(" \u2014 "),Yq=a("a"),tEo=o("IBertForSequenceClassification"),aEo=o(" (I-BERT model)"),nEo=l(),Q2=a("li"),Vse=a("strong"),sEo=o("layoutlm"),lEo=o(" \u2014 "),Kq=a("a"),iEo=o("LayoutLMForSequenceClassification"),dEo=o(" (LayoutLM model)"),cEo=l(),W2=a("li"),Xse=a("strong"),fEo=o("layoutlmv2"),mEo=o(" \u2014 "),Zq=a("a"),gEo=o("LayoutLMv2ForSequenceClassification"),hEo=o(" (LayoutLMv2 model)"),pEo=l(),H2=a("li"),zse=a("strong"),uEo=o("led"),_Eo=o(" \u2014 "),eN=a("a"),bEo=o("LEDForSequenceClassification"),FEo=o(" (LED model)"),vEo=l(),U2=a("li"),Qse=a("strong"),TEo=o("longformer"),MEo=o(" \u2014 "),oN=a("a"),EEo=o("LongformerForSequenceClassification"),CEo=o(" (Longformer model)"),wEo=l(),J2=a("li"),Wse=a("strong"),AEo=o("mbart"),yEo=o(" \u2014 "),rN=a("a"),LEo=o("MBartForSequenceClassification"),xEo=o(" (mBART model)"),$Eo=l(),Y2=a("li"),Hse=a("strong"),kEo=o("megatron-bert"),SEo=o(" \u2014 "),tN=a("a"),REo=o("MegatronBertForSequenceClassification"),BEo=o(" (MegatronBert model)"),PEo=l(),K2=a("li"),Use=a("strong"),IEo=o("mobilebert"),qEo=o(" \u2014 "),aN=a("a"),NEo=o("MobileBertForSequenceClassification"),jEo=o(" (MobileBERT model)"),DEo=l(),Z2=a("li"),Jse=a("strong"),GEo=o("mpnet"),OEo=o(" \u2014 "),nN=a("a"),VEo=o("MPNetForSequenceClassification"),XEo=o(" (MPNet model)"),zEo=l(),e1=a("li"),Yse=a("strong"),QEo=o("nystromformer"),WEo=o(" \u2014 "),sN=a("a"),HEo=o("NystromformerForSequenceClassification"),UEo=o(" (Nystromformer model)"),JEo=l(),o1=a("li"),Kse=a("strong"),YEo=o("openai-gpt"),KEo=o(" \u2014 "),lN=a("a"),ZEo=o("OpenAIGPTForSequenceClassification"),eCo=o(" (OpenAI GPT model)"),oCo=l(),r1=a("li"),Zse=a("strong"),rCo=o("perceiver"),tCo=o(" \u2014 "),iN=a("a"),aCo=o("PerceiverForSequenceClassification"),nCo=o(" (Perceiver model)"),sCo=l(),t1=a("li"),ele=a("strong"),lCo=o("plbart"),iCo=o(" \u2014 "),dN=a("a"),dCo=o("PLBartForSequenceClassification"),cCo=o(" (PLBart model)"),fCo=l(),a1=a("li"),ole=a("strong"),mCo=o("qdqbert"),gCo=o(" \u2014 "),rle=a("code"),hCo=o("QDQBertForSequenceClassification"),pCo=o(" (QDQBert model)"),uCo=l(),n1=a("li"),tle=a("strong"),_Co=o("reformer"),bCo=o(" \u2014 "),cN=a("a"),FCo=o("ReformerForSequenceClassification"),vCo=o(" (Reformer model)"),TCo=l(),s1=a("li"),ale=a("strong"),MCo=o("rembert"),ECo=o(" \u2014 "),fN=a("a"),CCo=o("RemBertForSequenceClassification"),wCo=o(" (RemBERT model)"),ACo=l(),l1=a("li"),nle=a("strong"),yCo=o("roberta"),LCo=o(" \u2014 "),mN=a("a"),xCo=o("RobertaForSequenceClassification"),$Co=o(" (RoBERTa model)"),kCo=l(),i1=a("li"),sle=a("strong"),SCo=o("roformer"),RCo=o(" \u2014 "),gN=a("a"),BCo=o("RoFormerForSequenceClassification"),PCo=o(" (RoFormer model)"),ICo=l(),d1=a("li"),lle=a("strong"),qCo=o("squeezebert"),NCo=o(" \u2014 "),hN=a("a"),jCo=o("SqueezeBertForSequenceClassification"),DCo=o(" (SqueezeBERT model)"),GCo=l(),c1=a("li"),ile=a("strong"),OCo=o("tapas"),VCo=o(" \u2014 "),pN=a("a"),XCo=o("TapasForSequenceClassification"),zCo=o(" (TAPAS model)"),QCo=l(),f1=a("li"),dle=a("strong"),WCo=o("transfo-xl"),HCo=o(" \u2014 "),uN=a("a"),UCo=o("TransfoXLForSequenceClassification"),JCo=o(" (Transformer-XL model)"),YCo=l(),m1=a("li"),cle=a("strong"),KCo=o("xlm"),ZCo=o(" \u2014 "),_N=a("a"),e3o=o("XLMForSequenceClassification"),o3o=o(" (XLM model)"),r3o=l(),g1=a("li"),fle=a("strong"),t3o=o("xlm-roberta"),a3o=o(" \u2014 "),bN=a("a"),n3o=o("XLMRobertaForSequenceClassification"),s3o=o(" (XLM-RoBERTa model)"),l3o=l(),h1=a("li"),mle=a("strong"),i3o=o("xlm-roberta-xl"),d3o=o(" \u2014 "),FN=a("a"),c3o=o("XLMRobertaXLForSequenceClassification"),f3o=o(" (XLM-RoBERTa-XL model)"),m3o=l(),p1=a("li"),gle=a("strong"),g3o=o("xlnet"),h3o=o(" \u2014 "),vN=a("a"),p3o=o("XLNetForSequenceClassification"),u3o=o(" (XLNet model)"),_3o=l(),u1=a("li"),hle=a("strong"),b3o=o("yoso"),F3o=o(" \u2014 "),TN=a("a"),v3o=o("YosoForSequenceClassification"),T3o=o(" (YOSO model)"),M3o=l(),_1=a("p"),E3o=o("The model is set in evaluation mode by default using "),ple=a("code"),C3o=o("model.eval()"),w3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ule=a("code"),A3o=o("model.train()"),y3o=l(),v(b1.$$.fragment),Z$e=l(),Ci=a("h2"),F1=a("a"),_le=a("span"),v(xA.$$.fragment),L3o=l(),ble=a("span"),x3o=o("AutoModelForMultipleChoice"),eke=l(),So=a("div"),v($A.$$.fragment),$3o=l(),wi=a("p"),k3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),MN=a("a"),S3o=o("from_pretrained()"),R3o=o(" class method or the "),EN=a("a"),B3o=o("from_config()"),P3o=o(` class
method.`),I3o=l(),kA=a("p"),q3o=o("This class cannot be instantiated directly using "),Fle=a("code"),N3o=o("__init__()"),j3o=o(" (throws an error)."),D3o=l(),at=a("div"),v(SA.$$.fragment),G3o=l(),vle=a("p"),O3o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),V3o=l(),Ai=a("p"),X3o=o(`Note:
Loading a model from its configuration file does `),Tle=a("strong"),z3o=o("not"),Q3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CN=a("a"),W3o=o("from_pretrained()"),H3o=o(" to load the model weights."),U3o=l(),v(v1.$$.fragment),J3o=l(),Ye=a("div"),v(RA.$$.fragment),Y3o=l(),Mle=a("p"),K3o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Z3o=l(),La=a("p"),ewo=o("The model class to instantiate is selected based on the "),Ele=a("code"),owo=o("model_type"),rwo=o(` property of the config object (either
passed as an argument or loaded from `),Cle=a("code"),two=o("pretrained_model_name_or_path"),awo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wle=a("code"),nwo=o("pretrained_model_name_or_path"),swo=o(":"),lwo=l(),Y=a("ul"),T1=a("li"),Ale=a("strong"),iwo=o("albert"),dwo=o(" \u2014 "),wN=a("a"),cwo=o("AlbertForMultipleChoice"),fwo=o(" (ALBERT model)"),mwo=l(),M1=a("li"),yle=a("strong"),gwo=o("bert"),hwo=o(" \u2014 "),AN=a("a"),pwo=o("BertForMultipleChoice"),uwo=o(" (BERT model)"),_wo=l(),E1=a("li"),Lle=a("strong"),bwo=o("big_bird"),Fwo=o(" \u2014 "),yN=a("a"),vwo=o("BigBirdForMultipleChoice"),Two=o(" (BigBird model)"),Mwo=l(),C1=a("li"),xle=a("strong"),Ewo=o("camembert"),Cwo=o(" \u2014 "),LN=a("a"),wwo=o("CamembertForMultipleChoice"),Awo=o(" (CamemBERT model)"),ywo=l(),w1=a("li"),$le=a("strong"),Lwo=o("canine"),xwo=o(" \u2014 "),xN=a("a"),$wo=o("CanineForMultipleChoice"),kwo=o(" (Canine model)"),Swo=l(),A1=a("li"),kle=a("strong"),Rwo=o("convbert"),Bwo=o(" \u2014 "),$N=a("a"),Pwo=o("ConvBertForMultipleChoice"),Iwo=o(" (ConvBERT model)"),qwo=l(),y1=a("li"),Sle=a("strong"),Nwo=o("data2vec-text"),jwo=o(" \u2014 "),kN=a("a"),Dwo=o("Data2VecTextForMultipleChoice"),Gwo=o(" (Data2VecText model)"),Owo=l(),L1=a("li"),Rle=a("strong"),Vwo=o("distilbert"),Xwo=o(" \u2014 "),SN=a("a"),zwo=o("DistilBertForMultipleChoice"),Qwo=o(" (DistilBERT model)"),Wwo=l(),x1=a("li"),Ble=a("strong"),Hwo=o("electra"),Uwo=o(" \u2014 "),RN=a("a"),Jwo=o("ElectraForMultipleChoice"),Ywo=o(" (ELECTRA model)"),Kwo=l(),$1=a("li"),Ple=a("strong"),Zwo=o("flaubert"),eAo=o(" \u2014 "),BN=a("a"),oAo=o("FlaubertForMultipleChoice"),rAo=o(" (FlauBERT model)"),tAo=l(),k1=a("li"),Ile=a("strong"),aAo=o("fnet"),nAo=o(" \u2014 "),PN=a("a"),sAo=o("FNetForMultipleChoice"),lAo=o(" (FNet model)"),iAo=l(),S1=a("li"),qle=a("strong"),dAo=o("funnel"),cAo=o(" \u2014 "),IN=a("a"),fAo=o("FunnelForMultipleChoice"),mAo=o(" (Funnel Transformer model)"),gAo=l(),R1=a("li"),Nle=a("strong"),hAo=o("ibert"),pAo=o(" \u2014 "),qN=a("a"),uAo=o("IBertForMultipleChoice"),_Ao=o(" (I-BERT model)"),bAo=l(),B1=a("li"),jle=a("strong"),FAo=o("longformer"),vAo=o(" \u2014 "),NN=a("a"),TAo=o("LongformerForMultipleChoice"),MAo=o(" (Longformer model)"),EAo=l(),P1=a("li"),Dle=a("strong"),CAo=o("megatron-bert"),wAo=o(" \u2014 "),jN=a("a"),AAo=o("MegatronBertForMultipleChoice"),yAo=o(" (MegatronBert model)"),LAo=l(),I1=a("li"),Gle=a("strong"),xAo=o("mobilebert"),$Ao=o(" \u2014 "),DN=a("a"),kAo=o("MobileBertForMultipleChoice"),SAo=o(" (MobileBERT model)"),RAo=l(),q1=a("li"),Ole=a("strong"),BAo=o("mpnet"),PAo=o(" \u2014 "),GN=a("a"),IAo=o("MPNetForMultipleChoice"),qAo=o(" (MPNet model)"),NAo=l(),N1=a("li"),Vle=a("strong"),jAo=o("nystromformer"),DAo=o(" \u2014 "),ON=a("a"),GAo=o("NystromformerForMultipleChoice"),OAo=o(" (Nystromformer model)"),VAo=l(),j1=a("li"),Xle=a("strong"),XAo=o("qdqbert"),zAo=o(" \u2014 "),zle=a("code"),QAo=o("QDQBertForMultipleChoice"),WAo=o(" (QDQBert model)"),HAo=l(),D1=a("li"),Qle=a("strong"),UAo=o("rembert"),JAo=o(" \u2014 "),VN=a("a"),YAo=o("RemBertForMultipleChoice"),KAo=o(" (RemBERT model)"),ZAo=l(),G1=a("li"),Wle=a("strong"),e0o=o("roberta"),o0o=o(" \u2014 "),XN=a("a"),r0o=o("RobertaForMultipleChoice"),t0o=o(" (RoBERTa model)"),a0o=l(),O1=a("li"),Hle=a("strong"),n0o=o("roformer"),s0o=o(" \u2014 "),zN=a("a"),l0o=o("RoFormerForMultipleChoice"),i0o=o(" (RoFormer model)"),d0o=l(),V1=a("li"),Ule=a("strong"),c0o=o("squeezebert"),f0o=o(" \u2014 "),QN=a("a"),m0o=o("SqueezeBertForMultipleChoice"),g0o=o(" (SqueezeBERT model)"),h0o=l(),X1=a("li"),Jle=a("strong"),p0o=o("xlm"),u0o=o(" \u2014 "),WN=a("a"),_0o=o("XLMForMultipleChoice"),b0o=o(" (XLM model)"),F0o=l(),z1=a("li"),Yle=a("strong"),v0o=o("xlm-roberta"),T0o=o(" \u2014 "),HN=a("a"),M0o=o("XLMRobertaForMultipleChoice"),E0o=o(" (XLM-RoBERTa model)"),C0o=l(),Q1=a("li"),Kle=a("strong"),w0o=o("xlm-roberta-xl"),A0o=o(" \u2014 "),UN=a("a"),y0o=o("XLMRobertaXLForMultipleChoice"),L0o=o(" (XLM-RoBERTa-XL model)"),x0o=l(),W1=a("li"),Zle=a("strong"),$0o=o("xlnet"),k0o=o(" \u2014 "),JN=a("a"),S0o=o("XLNetForMultipleChoice"),R0o=o(" (XLNet model)"),B0o=l(),H1=a("li"),eie=a("strong"),P0o=o("yoso"),I0o=o(" \u2014 "),YN=a("a"),q0o=o("YosoForMultipleChoice"),N0o=o(" (YOSO model)"),j0o=l(),U1=a("p"),D0o=o("The model is set in evaluation mode by default using "),oie=a("code"),G0o=o("model.eval()"),O0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rie=a("code"),V0o=o("model.train()"),X0o=l(),v(J1.$$.fragment),oke=l(),yi=a("h2"),Y1=a("a"),tie=a("span"),v(BA.$$.fragment),z0o=l(),aie=a("span"),Q0o=o("AutoModelForNextSentencePrediction"),rke=l(),Ro=a("div"),v(PA.$$.fragment),W0o=l(),Li=a("p"),H0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),KN=a("a"),U0o=o("from_pretrained()"),J0o=o(" class method or the "),ZN=a("a"),Y0o=o("from_config()"),K0o=o(` class
method.`),Z0o=l(),IA=a("p"),eyo=o("This class cannot be instantiated directly using "),nie=a("code"),oyo=o("__init__()"),ryo=o(" (throws an error)."),tyo=l(),nt=a("div"),v(qA.$$.fragment),ayo=l(),sie=a("p"),nyo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),syo=l(),xi=a("p"),lyo=o(`Note:
Loading a model from its configuration file does `),lie=a("strong"),iyo=o("not"),dyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ej=a("a"),cyo=o("from_pretrained()"),fyo=o(" to load the model weights."),myo=l(),v(K1.$$.fragment),gyo=l(),Ke=a("div"),v(NA.$$.fragment),hyo=l(),iie=a("p"),pyo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),uyo=l(),xa=a("p"),_yo=o("The model class to instantiate is selected based on the "),die=a("code"),byo=o("model_type"),Fyo=o(` property of the config object (either
passed as an argument or loaded from `),cie=a("code"),vyo=o("pretrained_model_name_or_path"),Tyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fie=a("code"),Myo=o("pretrained_model_name_or_path"),Eyo=o(":"),Cyo=l(),Wr=a("ul"),Z1=a("li"),mie=a("strong"),wyo=o("bert"),Ayo=o(" \u2014 "),oj=a("a"),yyo=o("BertForNextSentencePrediction"),Lyo=o(" (BERT model)"),xyo=l(),eb=a("li"),gie=a("strong"),$yo=o("fnet"),kyo=o(" \u2014 "),rj=a("a"),Syo=o("FNetForNextSentencePrediction"),Ryo=o(" (FNet model)"),Byo=l(),ob=a("li"),hie=a("strong"),Pyo=o("megatron-bert"),Iyo=o(" \u2014 "),tj=a("a"),qyo=o("MegatronBertForNextSentencePrediction"),Nyo=o(" (MegatronBert model)"),jyo=l(),rb=a("li"),pie=a("strong"),Dyo=o("mobilebert"),Gyo=o(" \u2014 "),aj=a("a"),Oyo=o("MobileBertForNextSentencePrediction"),Vyo=o(" (MobileBERT model)"),Xyo=l(),tb=a("li"),uie=a("strong"),zyo=o("qdqbert"),Qyo=o(" \u2014 "),_ie=a("code"),Wyo=o("QDQBertForNextSentencePrediction"),Hyo=o(" (QDQBert model)"),Uyo=l(),ab=a("p"),Jyo=o("The model is set in evaluation mode by default using "),bie=a("code"),Yyo=o("model.eval()"),Kyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fie=a("code"),Zyo=o("model.train()"),eLo=l(),v(nb.$$.fragment),tke=l(),$i=a("h2"),sb=a("a"),vie=a("span"),v(jA.$$.fragment),oLo=l(),Tie=a("span"),rLo=o("AutoModelForTokenClassification"),ake=l(),Bo=a("div"),v(DA.$$.fragment),tLo=l(),ki=a("p"),aLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),nj=a("a"),nLo=o("from_pretrained()"),sLo=o(" class method or the "),sj=a("a"),lLo=o("from_config()"),iLo=o(` class
method.`),dLo=l(),GA=a("p"),cLo=o("This class cannot be instantiated directly using "),Mie=a("code"),fLo=o("__init__()"),mLo=o(" (throws an error)."),gLo=l(),st=a("div"),v(OA.$$.fragment),hLo=l(),Eie=a("p"),pLo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),uLo=l(),Si=a("p"),_Lo=o(`Note:
Loading a model from its configuration file does `),Cie=a("strong"),bLo=o("not"),FLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lj=a("a"),vLo=o("from_pretrained()"),TLo=o(" to load the model weights."),MLo=l(),v(lb.$$.fragment),ELo=l(),Ze=a("div"),v(VA.$$.fragment),CLo=l(),wie=a("p"),wLo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ALo=l(),$a=a("p"),yLo=o("The model class to instantiate is selected based on the "),Aie=a("code"),LLo=o("model_type"),xLo=o(` property of the config object (either
passed as an argument or loaded from `),yie=a("code"),$Lo=o("pretrained_model_name_or_path"),kLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lie=a("code"),SLo=o("pretrained_model_name_or_path"),RLo=o(":"),BLo=l(),U=a("ul"),ib=a("li"),xie=a("strong"),PLo=o("albert"),ILo=o(" \u2014 "),ij=a("a"),qLo=o("AlbertForTokenClassification"),NLo=o(" (ALBERT model)"),jLo=l(),db=a("li"),$ie=a("strong"),DLo=o("bert"),GLo=o(" \u2014 "),dj=a("a"),OLo=o("BertForTokenClassification"),VLo=o(" (BERT model)"),XLo=l(),cb=a("li"),kie=a("strong"),zLo=o("big_bird"),QLo=o(" \u2014 "),cj=a("a"),WLo=o("BigBirdForTokenClassification"),HLo=o(" (BigBird model)"),ULo=l(),fb=a("li"),Sie=a("strong"),JLo=o("camembert"),YLo=o(" \u2014 "),fj=a("a"),KLo=o("CamembertForTokenClassification"),ZLo=o(" (CamemBERT model)"),e8o=l(),mb=a("li"),Rie=a("strong"),o8o=o("canine"),r8o=o(" \u2014 "),mj=a("a"),t8o=o("CanineForTokenClassification"),a8o=o(" (Canine model)"),n8o=l(),gb=a("li"),Bie=a("strong"),s8o=o("convbert"),l8o=o(" \u2014 "),gj=a("a"),i8o=o("ConvBertForTokenClassification"),d8o=o(" (ConvBERT model)"),c8o=l(),hb=a("li"),Pie=a("strong"),f8o=o("data2vec-text"),m8o=o(" \u2014 "),hj=a("a"),g8o=o("Data2VecTextForTokenClassification"),h8o=o(" (Data2VecText model)"),p8o=l(),pb=a("li"),Iie=a("strong"),u8o=o("deberta"),_8o=o(" \u2014 "),pj=a("a"),b8o=o("DebertaForTokenClassification"),F8o=o(" (DeBERTa model)"),v8o=l(),ub=a("li"),qie=a("strong"),T8o=o("deberta-v2"),M8o=o(" \u2014 "),uj=a("a"),E8o=o("DebertaV2ForTokenClassification"),C8o=o(" (DeBERTa-v2 model)"),w8o=l(),_b=a("li"),Nie=a("strong"),A8o=o("distilbert"),y8o=o(" \u2014 "),_j=a("a"),L8o=o("DistilBertForTokenClassification"),x8o=o(" (DistilBERT model)"),$8o=l(),bb=a("li"),jie=a("strong"),k8o=o("electra"),S8o=o(" \u2014 "),bj=a("a"),R8o=o("ElectraForTokenClassification"),B8o=o(" (ELECTRA model)"),P8o=l(),Fb=a("li"),Die=a("strong"),I8o=o("flaubert"),q8o=o(" \u2014 "),Fj=a("a"),N8o=o("FlaubertForTokenClassification"),j8o=o(" (FlauBERT model)"),D8o=l(),vb=a("li"),Gie=a("strong"),G8o=o("fnet"),O8o=o(" \u2014 "),vj=a("a"),V8o=o("FNetForTokenClassification"),X8o=o(" (FNet model)"),z8o=l(),Tb=a("li"),Oie=a("strong"),Q8o=o("funnel"),W8o=o(" \u2014 "),Tj=a("a"),H8o=o("FunnelForTokenClassification"),U8o=o(" (Funnel Transformer model)"),J8o=l(),Mb=a("li"),Vie=a("strong"),Y8o=o("gpt2"),K8o=o(" \u2014 "),Mj=a("a"),Z8o=o("GPT2ForTokenClassification"),exo=o(" (OpenAI GPT-2 model)"),oxo=l(),Eb=a("li"),Xie=a("strong"),rxo=o("ibert"),txo=o(" \u2014 "),Ej=a("a"),axo=o("IBertForTokenClassification"),nxo=o(" (I-BERT model)"),sxo=l(),Cb=a("li"),zie=a("strong"),lxo=o("layoutlm"),ixo=o(" \u2014 "),Cj=a("a"),dxo=o("LayoutLMForTokenClassification"),cxo=o(" (LayoutLM model)"),fxo=l(),wb=a("li"),Qie=a("strong"),mxo=o("layoutlmv2"),gxo=o(" \u2014 "),wj=a("a"),hxo=o("LayoutLMv2ForTokenClassification"),pxo=o(" (LayoutLMv2 model)"),uxo=l(),Ab=a("li"),Wie=a("strong"),_xo=o("longformer"),bxo=o(" \u2014 "),Aj=a("a"),Fxo=o("LongformerForTokenClassification"),vxo=o(" (Longformer model)"),Txo=l(),yb=a("li"),Hie=a("strong"),Mxo=o("megatron-bert"),Exo=o(" \u2014 "),yj=a("a"),Cxo=o("MegatronBertForTokenClassification"),wxo=o(" (MegatronBert model)"),Axo=l(),Lb=a("li"),Uie=a("strong"),yxo=o("mobilebert"),Lxo=o(" \u2014 "),Lj=a("a"),xxo=o("MobileBertForTokenClassification"),$xo=o(" (MobileBERT model)"),kxo=l(),xb=a("li"),Jie=a("strong"),Sxo=o("mpnet"),Rxo=o(" \u2014 "),xj=a("a"),Bxo=o("MPNetForTokenClassification"),Pxo=o(" (MPNet model)"),Ixo=l(),$b=a("li"),Yie=a("strong"),qxo=o("nystromformer"),Nxo=o(" \u2014 "),$j=a("a"),jxo=o("NystromformerForTokenClassification"),Dxo=o(" (Nystromformer model)"),Gxo=l(),kb=a("li"),Kie=a("strong"),Oxo=o("qdqbert"),Vxo=o(" \u2014 "),Zie=a("code"),Xxo=o("QDQBertForTokenClassification"),zxo=o(" (QDQBert model)"),Qxo=l(),Sb=a("li"),ede=a("strong"),Wxo=o("rembert"),Hxo=o(" \u2014 "),kj=a("a"),Uxo=o("RemBertForTokenClassification"),Jxo=o(" (RemBERT model)"),Yxo=l(),Rb=a("li"),ode=a("strong"),Kxo=o("roberta"),Zxo=o(" \u2014 "),Sj=a("a"),e7o=o("RobertaForTokenClassification"),o7o=o(" (RoBERTa model)"),r7o=l(),Bb=a("li"),rde=a("strong"),t7o=o("roformer"),a7o=o(" \u2014 "),Rj=a("a"),n7o=o("RoFormerForTokenClassification"),s7o=o(" (RoFormer model)"),l7o=l(),Pb=a("li"),tde=a("strong"),i7o=o("squeezebert"),d7o=o(" \u2014 "),Bj=a("a"),c7o=o("SqueezeBertForTokenClassification"),f7o=o(" (SqueezeBERT model)"),m7o=l(),Ib=a("li"),ade=a("strong"),g7o=o("xlm"),h7o=o(" \u2014 "),Pj=a("a"),p7o=o("XLMForTokenClassification"),u7o=o(" (XLM model)"),_7o=l(),qb=a("li"),nde=a("strong"),b7o=o("xlm-roberta"),F7o=o(" \u2014 "),Ij=a("a"),v7o=o("XLMRobertaForTokenClassification"),T7o=o(" (XLM-RoBERTa model)"),M7o=l(),Nb=a("li"),sde=a("strong"),E7o=o("xlm-roberta-xl"),C7o=o(" \u2014 "),qj=a("a"),w7o=o("XLMRobertaXLForTokenClassification"),A7o=o(" (XLM-RoBERTa-XL model)"),y7o=l(),jb=a("li"),lde=a("strong"),L7o=o("xlnet"),x7o=o(" \u2014 "),Nj=a("a"),$7o=o("XLNetForTokenClassification"),k7o=o(" (XLNet model)"),S7o=l(),Db=a("li"),ide=a("strong"),R7o=o("yoso"),B7o=o(" \u2014 "),jj=a("a"),P7o=o("YosoForTokenClassification"),I7o=o(" (YOSO model)"),q7o=l(),Gb=a("p"),N7o=o("The model is set in evaluation mode by default using "),dde=a("code"),j7o=o("model.eval()"),D7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cde=a("code"),G7o=o("model.train()"),O7o=l(),v(Ob.$$.fragment),nke=l(),Ri=a("h2"),Vb=a("a"),fde=a("span"),v(XA.$$.fragment),V7o=l(),mde=a("span"),X7o=o("AutoModelForQuestionAnswering"),ske=l(),Po=a("div"),v(zA.$$.fragment),z7o=l(),Bi=a("p"),Q7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Dj=a("a"),W7o=o("from_pretrained()"),H7o=o(" class method or the "),Gj=a("a"),U7o=o("from_config()"),J7o=o(` class
method.`),Y7o=l(),QA=a("p"),K7o=o("This class cannot be instantiated directly using "),gde=a("code"),Z7o=o("__init__()"),e$o=o(" (throws an error)."),o$o=l(),lt=a("div"),v(WA.$$.fragment),r$o=l(),hde=a("p"),t$o=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),a$o=l(),Pi=a("p"),n$o=o(`Note:
Loading a model from its configuration file does `),pde=a("strong"),s$o=o("not"),l$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Oj=a("a"),i$o=o("from_pretrained()"),d$o=o(" to load the model weights."),c$o=l(),v(Xb.$$.fragment),f$o=l(),eo=a("div"),v(HA.$$.fragment),m$o=l(),ude=a("p"),g$o=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),h$o=l(),ka=a("p"),p$o=o("The model class to instantiate is selected based on the "),_de=a("code"),u$o=o("model_type"),_$o=o(` property of the config object (either
passed as an argument or loaded from `),bde=a("code"),b$o=o("pretrained_model_name_or_path"),F$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fde=a("code"),v$o=o("pretrained_model_name_or_path"),T$o=o(":"),M$o=l(),O=a("ul"),zb=a("li"),vde=a("strong"),E$o=o("albert"),C$o=o(" \u2014 "),Vj=a("a"),w$o=o("AlbertForQuestionAnswering"),A$o=o(" (ALBERT model)"),y$o=l(),Qb=a("li"),Tde=a("strong"),L$o=o("bart"),x$o=o(" \u2014 "),Xj=a("a"),$$o=o("BartForQuestionAnswering"),k$o=o(" (BART model)"),S$o=l(),Wb=a("li"),Mde=a("strong"),R$o=o("bert"),B$o=o(" \u2014 "),zj=a("a"),P$o=o("BertForQuestionAnswering"),I$o=o(" (BERT model)"),q$o=l(),Hb=a("li"),Ede=a("strong"),N$o=o("big_bird"),j$o=o(" \u2014 "),Qj=a("a"),D$o=o("BigBirdForQuestionAnswering"),G$o=o(" (BigBird model)"),O$o=l(),Ub=a("li"),Cde=a("strong"),V$o=o("bigbird_pegasus"),X$o=o(" \u2014 "),Wj=a("a"),z$o=o("BigBirdPegasusForQuestionAnswering"),Q$o=o(" (BigBirdPegasus model)"),W$o=l(),Jb=a("li"),wde=a("strong"),H$o=o("camembert"),U$o=o(" \u2014 "),Hj=a("a"),J$o=o("CamembertForQuestionAnswering"),Y$o=o(" (CamemBERT model)"),K$o=l(),Yb=a("li"),Ade=a("strong"),Z$o=o("canine"),eko=o(" \u2014 "),Uj=a("a"),oko=o("CanineForQuestionAnswering"),rko=o(" (Canine model)"),tko=l(),Kb=a("li"),yde=a("strong"),ako=o("convbert"),nko=o(" \u2014 "),Jj=a("a"),sko=o("ConvBertForQuestionAnswering"),lko=o(" (ConvBERT model)"),iko=l(),Zb=a("li"),Lde=a("strong"),dko=o("data2vec-text"),cko=o(" \u2014 "),Yj=a("a"),fko=o("Data2VecTextForQuestionAnswering"),mko=o(" (Data2VecText model)"),gko=l(),e5=a("li"),xde=a("strong"),hko=o("deberta"),pko=o(" \u2014 "),Kj=a("a"),uko=o("DebertaForQuestionAnswering"),_ko=o(" (DeBERTa model)"),bko=l(),o5=a("li"),$de=a("strong"),Fko=o("deberta-v2"),vko=o(" \u2014 "),Zj=a("a"),Tko=o("DebertaV2ForQuestionAnswering"),Mko=o(" (DeBERTa-v2 model)"),Eko=l(),r5=a("li"),kde=a("strong"),Cko=o("distilbert"),wko=o(" \u2014 "),eD=a("a"),Ako=o("DistilBertForQuestionAnswering"),yko=o(" (DistilBERT model)"),Lko=l(),t5=a("li"),Sde=a("strong"),xko=o("electra"),$ko=o(" \u2014 "),oD=a("a"),kko=o("ElectraForQuestionAnswering"),Sko=o(" (ELECTRA model)"),Rko=l(),a5=a("li"),Rde=a("strong"),Bko=o("flaubert"),Pko=o(" \u2014 "),rD=a("a"),Iko=o("FlaubertForQuestionAnsweringSimple"),qko=o(" (FlauBERT model)"),Nko=l(),n5=a("li"),Bde=a("strong"),jko=o("fnet"),Dko=o(" \u2014 "),tD=a("a"),Gko=o("FNetForQuestionAnswering"),Oko=o(" (FNet model)"),Vko=l(),s5=a("li"),Pde=a("strong"),Xko=o("funnel"),zko=o(" \u2014 "),aD=a("a"),Qko=o("FunnelForQuestionAnswering"),Wko=o(" (Funnel Transformer model)"),Hko=l(),l5=a("li"),Ide=a("strong"),Uko=o("gptj"),Jko=o(" \u2014 "),nD=a("a"),Yko=o("GPTJForQuestionAnswering"),Kko=o(" (GPT-J model)"),Zko=l(),i5=a("li"),qde=a("strong"),eSo=o("ibert"),oSo=o(" \u2014 "),sD=a("a"),rSo=o("IBertForQuestionAnswering"),tSo=o(" (I-BERT model)"),aSo=l(),d5=a("li"),Nde=a("strong"),nSo=o("layoutlmv2"),sSo=o(" \u2014 "),lD=a("a"),lSo=o("LayoutLMv2ForQuestionAnswering"),iSo=o(" (LayoutLMv2 model)"),dSo=l(),c5=a("li"),jde=a("strong"),cSo=o("led"),fSo=o(" \u2014 "),iD=a("a"),mSo=o("LEDForQuestionAnswering"),gSo=o(" (LED model)"),hSo=l(),f5=a("li"),Dde=a("strong"),pSo=o("longformer"),uSo=o(" \u2014 "),dD=a("a"),_So=o("LongformerForQuestionAnswering"),bSo=o(" (Longformer model)"),FSo=l(),m5=a("li"),Gde=a("strong"),vSo=o("lxmert"),TSo=o(" \u2014 "),cD=a("a"),MSo=o("LxmertForQuestionAnswering"),ESo=o(" (LXMERT model)"),CSo=l(),g5=a("li"),Ode=a("strong"),wSo=o("mbart"),ASo=o(" \u2014 "),fD=a("a"),ySo=o("MBartForQuestionAnswering"),LSo=o(" (mBART model)"),xSo=l(),h5=a("li"),Vde=a("strong"),$So=o("megatron-bert"),kSo=o(" \u2014 "),mD=a("a"),SSo=o("MegatronBertForQuestionAnswering"),RSo=o(" (MegatronBert model)"),BSo=l(),p5=a("li"),Xde=a("strong"),PSo=o("mobilebert"),ISo=o(" \u2014 "),gD=a("a"),qSo=o("MobileBertForQuestionAnswering"),NSo=o(" (MobileBERT model)"),jSo=l(),u5=a("li"),zde=a("strong"),DSo=o("mpnet"),GSo=o(" \u2014 "),hD=a("a"),OSo=o("MPNetForQuestionAnswering"),VSo=o(" (MPNet model)"),XSo=l(),_5=a("li"),Qde=a("strong"),zSo=o("nystromformer"),QSo=o(" \u2014 "),pD=a("a"),WSo=o("NystromformerForQuestionAnswering"),HSo=o(" (Nystromformer model)"),USo=l(),b5=a("li"),Wde=a("strong"),JSo=o("qdqbert"),YSo=o(" \u2014 "),Hde=a("code"),KSo=o("QDQBertForQuestionAnswering"),ZSo=o(" (QDQBert model)"),eRo=l(),F5=a("li"),Ude=a("strong"),oRo=o("reformer"),rRo=o(" \u2014 "),uD=a("a"),tRo=o("ReformerForQuestionAnswering"),aRo=o(" (Reformer model)"),nRo=l(),v5=a("li"),Jde=a("strong"),sRo=o("rembert"),lRo=o(" \u2014 "),_D=a("a"),iRo=o("RemBertForQuestionAnswering"),dRo=o(" (RemBERT model)"),cRo=l(),T5=a("li"),Yde=a("strong"),fRo=o("roberta"),mRo=o(" \u2014 "),bD=a("a"),gRo=o("RobertaForQuestionAnswering"),hRo=o(" (RoBERTa model)"),pRo=l(),M5=a("li"),Kde=a("strong"),uRo=o("roformer"),_Ro=o(" \u2014 "),FD=a("a"),bRo=o("RoFormerForQuestionAnswering"),FRo=o(" (RoFormer model)"),vRo=l(),E5=a("li"),Zde=a("strong"),TRo=o("splinter"),MRo=o(" \u2014 "),vD=a("a"),ERo=o("SplinterForQuestionAnswering"),CRo=o(" (Splinter model)"),wRo=l(),C5=a("li"),ece=a("strong"),ARo=o("squeezebert"),yRo=o(" \u2014 "),TD=a("a"),LRo=o("SqueezeBertForQuestionAnswering"),xRo=o(" (SqueezeBERT model)"),$Ro=l(),w5=a("li"),oce=a("strong"),kRo=o("xlm"),SRo=o(" \u2014 "),MD=a("a"),RRo=o("XLMForQuestionAnsweringSimple"),BRo=o(" (XLM model)"),PRo=l(),A5=a("li"),rce=a("strong"),IRo=o("xlm-roberta"),qRo=o(" \u2014 "),ED=a("a"),NRo=o("XLMRobertaForQuestionAnswering"),jRo=o(" (XLM-RoBERTa model)"),DRo=l(),y5=a("li"),tce=a("strong"),GRo=o("xlm-roberta-xl"),ORo=o(" \u2014 "),CD=a("a"),VRo=o("XLMRobertaXLForQuestionAnswering"),XRo=o(" (XLM-RoBERTa-XL model)"),zRo=l(),L5=a("li"),ace=a("strong"),QRo=o("xlnet"),WRo=o(" \u2014 "),wD=a("a"),HRo=o("XLNetForQuestionAnsweringSimple"),URo=o(" (XLNet model)"),JRo=l(),x5=a("li"),nce=a("strong"),YRo=o("yoso"),KRo=o(" \u2014 "),AD=a("a"),ZRo=o("YosoForQuestionAnswering"),eBo=o(" (YOSO model)"),oBo=l(),$5=a("p"),rBo=o("The model is set in evaluation mode by default using "),sce=a("code"),tBo=o("model.eval()"),aBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lce=a("code"),nBo=o("model.train()"),sBo=l(),v(k5.$$.fragment),lke=l(),Ii=a("h2"),S5=a("a"),ice=a("span"),v(UA.$$.fragment),lBo=l(),dce=a("span"),iBo=o("AutoModelForTableQuestionAnswering"),ike=l(),Io=a("div"),v(JA.$$.fragment),dBo=l(),qi=a("p"),cBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),yD=a("a"),fBo=o("from_pretrained()"),mBo=o(" class method or the "),LD=a("a"),gBo=o("from_config()"),hBo=o(` class
method.`),pBo=l(),YA=a("p"),uBo=o("This class cannot be instantiated directly using "),cce=a("code"),_Bo=o("__init__()"),bBo=o(" (throws an error)."),FBo=l(),it=a("div"),v(KA.$$.fragment),vBo=l(),fce=a("p"),TBo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),MBo=l(),Ni=a("p"),EBo=o(`Note:
Loading a model from its configuration file does `),mce=a("strong"),CBo=o("not"),wBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xD=a("a"),ABo=o("from_pretrained()"),yBo=o(" to load the model weights."),LBo=l(),v(R5.$$.fragment),xBo=l(),oo=a("div"),v(ZA.$$.fragment),$Bo=l(),gce=a("p"),kBo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),SBo=l(),Sa=a("p"),RBo=o("The model class to instantiate is selected based on the "),hce=a("code"),BBo=o("model_type"),PBo=o(` property of the config object (either
passed as an argument or loaded from `),pce=a("code"),IBo=o("pretrained_model_name_or_path"),qBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uce=a("code"),NBo=o("pretrained_model_name_or_path"),jBo=o(":"),DBo=l(),_ce=a("ul"),B5=a("li"),bce=a("strong"),GBo=o("tapas"),OBo=o(" \u2014 "),$D=a("a"),VBo=o("TapasForQuestionAnswering"),XBo=o(" (TAPAS model)"),zBo=l(),P5=a("p"),QBo=o("The model is set in evaluation mode by default using "),Fce=a("code"),WBo=o("model.eval()"),HBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vce=a("code"),UBo=o("model.train()"),JBo=l(),v(I5.$$.fragment),dke=l(),ji=a("h2"),q5=a("a"),Tce=a("span"),v(e0.$$.fragment),YBo=l(),Mce=a("span"),KBo=o("AutoModelForImageClassification"),cke=l(),qo=a("div"),v(o0.$$.fragment),ZBo=l(),Di=a("p"),ePo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),kD=a("a"),oPo=o("from_pretrained()"),rPo=o(" class method or the "),SD=a("a"),tPo=o("from_config()"),aPo=o(` class
method.`),nPo=l(),r0=a("p"),sPo=o("This class cannot be instantiated directly using "),Ece=a("code"),lPo=o("__init__()"),iPo=o(" (throws an error)."),dPo=l(),dt=a("div"),v(t0.$$.fragment),cPo=l(),Cce=a("p"),fPo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),mPo=l(),Gi=a("p"),gPo=o(`Note:
Loading a model from its configuration file does `),wce=a("strong"),hPo=o("not"),pPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RD=a("a"),uPo=o("from_pretrained()"),_Po=o(" to load the model weights."),bPo=l(),v(N5.$$.fragment),FPo=l(),ro=a("div"),v(a0.$$.fragment),vPo=l(),Ace=a("p"),TPo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),MPo=l(),Ra=a("p"),EPo=o("The model class to instantiate is selected based on the "),yce=a("code"),CPo=o("model_type"),wPo=o(` property of the config object (either
passed as an argument or loaded from `),Lce=a("code"),APo=o("pretrained_model_name_or_path"),yPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xce=a("code"),LPo=o("pretrained_model_name_or_path"),xPo=o(":"),$Po=l(),Fe=a("ul"),j5=a("li"),$ce=a("strong"),kPo=o("beit"),SPo=o(" \u2014 "),BD=a("a"),RPo=o("BeitForImageClassification"),BPo=o(" (BEiT model)"),PPo=l(),D5=a("li"),kce=a("strong"),IPo=o("convnext"),qPo=o(" \u2014 "),PD=a("a"),NPo=o("ConvNextForImageClassification"),jPo=o(" (ConvNext model)"),DPo=l(),Fs=a("li"),Sce=a("strong"),GPo=o("deit"),OPo=o(" \u2014 "),ID=a("a"),VPo=o("DeiTForImageClassification"),XPo=o(" or "),qD=a("a"),zPo=o("DeiTForImageClassificationWithTeacher"),QPo=o(" (DeiT model)"),WPo=l(),G5=a("li"),Rce=a("strong"),HPo=o("imagegpt"),UPo=o(" \u2014 "),ND=a("a"),JPo=o("ImageGPTForImageClassification"),YPo=o(" (ImageGPT model)"),KPo=l(),ct=a("li"),Bce=a("strong"),ZPo=o("perceiver"),eIo=o(" \u2014 "),jD=a("a"),oIo=o("PerceiverForImageClassificationLearned"),rIo=o(" or "),DD=a("a"),tIo=o("PerceiverForImageClassificationFourier"),aIo=o(" or "),GD=a("a"),nIo=o("PerceiverForImageClassificationConvProcessing"),sIo=o(" (Perceiver model)"),lIo=l(),O5=a("li"),Pce=a("strong"),iIo=o("poolformer"),dIo=o(" \u2014 "),OD=a("a"),cIo=o("PoolFormerForImageClassification"),fIo=o(" (PoolFormer model)"),mIo=l(),V5=a("li"),Ice=a("strong"),gIo=o("resnet"),hIo=o(" \u2014 "),VD=a("a"),pIo=o("ResNetForImageClassification"),uIo=o(" (ResNet model)"),_Io=l(),X5=a("li"),qce=a("strong"),bIo=o("segformer"),FIo=o(" \u2014 "),XD=a("a"),vIo=o("SegformerForImageClassification"),TIo=o(" (SegFormer model)"),MIo=l(),z5=a("li"),Nce=a("strong"),EIo=o("swin"),CIo=o(" \u2014 "),zD=a("a"),wIo=o("SwinForImageClassification"),AIo=o(" (Swin model)"),yIo=l(),Q5=a("li"),jce=a("strong"),LIo=o("van"),xIo=o(" \u2014 "),QD=a("a"),$Io=o("VanForImageClassification"),kIo=o(" (VAN model)"),SIo=l(),W5=a("li"),Dce=a("strong"),RIo=o("vit"),BIo=o(" \u2014 "),WD=a("a"),PIo=o("ViTForImageClassification"),IIo=o(" (ViT model)"),qIo=l(),H5=a("p"),NIo=o("The model is set in evaluation mode by default using "),Gce=a("code"),jIo=o("model.eval()"),DIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oce=a("code"),GIo=o("model.train()"),OIo=l(),v(U5.$$.fragment),fke=l(),Oi=a("h2"),J5=a("a"),Vce=a("span"),v(n0.$$.fragment),VIo=l(),Xce=a("span"),XIo=o("AutoModelForVision2Seq"),mke=l(),No=a("div"),v(s0.$$.fragment),zIo=l(),Vi=a("p"),QIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),HD=a("a"),WIo=o("from_pretrained()"),HIo=o(" class method or the "),UD=a("a"),UIo=o("from_config()"),JIo=o(` class
method.`),YIo=l(),l0=a("p"),KIo=o("This class cannot be instantiated directly using "),zce=a("code"),ZIo=o("__init__()"),eqo=o(" (throws an error)."),oqo=l(),ft=a("div"),v(i0.$$.fragment),rqo=l(),Qce=a("p"),tqo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),aqo=l(),Xi=a("p"),nqo=o(`Note:
Loading a model from its configuration file does `),Wce=a("strong"),sqo=o("not"),lqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JD=a("a"),iqo=o("from_pretrained()"),dqo=o(" to load the model weights."),cqo=l(),v(Y5.$$.fragment),fqo=l(),to=a("div"),v(d0.$$.fragment),mqo=l(),Hce=a("p"),gqo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),hqo=l(),Ba=a("p"),pqo=o("The model class to instantiate is selected based on the "),Uce=a("code"),uqo=o("model_type"),_qo=o(` property of the config object (either
passed as an argument or loaded from `),Jce=a("code"),bqo=o("pretrained_model_name_or_path"),Fqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yce=a("code"),vqo=o("pretrained_model_name_or_path"),Tqo=o(":"),Mqo=l(),Kce=a("ul"),K5=a("li"),Zce=a("strong"),Eqo=o("vision-encoder-decoder"),Cqo=o(" \u2014 "),YD=a("a"),wqo=o("VisionEncoderDecoderModel"),Aqo=o(" (Vision Encoder decoder model)"),yqo=l(),Z5=a("p"),Lqo=o("The model is set in evaluation mode by default using "),efe=a("code"),xqo=o("model.eval()"),$qo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ofe=a("code"),kqo=o("model.train()"),Sqo=l(),v(eF.$$.fragment),gke=l(),zi=a("h2"),oF=a("a"),rfe=a("span"),v(c0.$$.fragment),Rqo=l(),tfe=a("span"),Bqo=o("AutoModelForAudioClassification"),hke=l(),jo=a("div"),v(f0.$$.fragment),Pqo=l(),Qi=a("p"),Iqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),KD=a("a"),qqo=o("from_pretrained()"),Nqo=o(" class method or the "),ZD=a("a"),jqo=o("from_config()"),Dqo=o(` class
method.`),Gqo=l(),m0=a("p"),Oqo=o("This class cannot be instantiated directly using "),afe=a("code"),Vqo=o("__init__()"),Xqo=o(" (throws an error)."),zqo=l(),mt=a("div"),v(g0.$$.fragment),Qqo=l(),nfe=a("p"),Wqo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Hqo=l(),Wi=a("p"),Uqo=o(`Note:
Loading a model from its configuration file does `),sfe=a("strong"),Jqo=o("not"),Yqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eG=a("a"),Kqo=o("from_pretrained()"),Zqo=o(" to load the model weights."),eNo=l(),v(rF.$$.fragment),oNo=l(),ao=a("div"),v(h0.$$.fragment),rNo=l(),lfe=a("p"),tNo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),aNo=l(),Pa=a("p"),nNo=o("The model class to instantiate is selected based on the "),ife=a("code"),sNo=o("model_type"),lNo=o(` property of the config object (either
passed as an argument or loaded from `),dfe=a("code"),iNo=o("pretrained_model_name_or_path"),dNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cfe=a("code"),cNo=o("pretrained_model_name_or_path"),fNo=o(":"),mNo=l(),Ie=a("ul"),tF=a("li"),ffe=a("strong"),gNo=o("data2vec-audio"),hNo=o(" \u2014 "),oG=a("a"),pNo=o("Data2VecAudioForSequenceClassification"),uNo=o(" (Data2VecAudio model)"),_No=l(),aF=a("li"),mfe=a("strong"),bNo=o("hubert"),FNo=o(" \u2014 "),rG=a("a"),vNo=o("HubertForSequenceClassification"),TNo=o(" (Hubert model)"),MNo=l(),nF=a("li"),gfe=a("strong"),ENo=o("sew"),CNo=o(" \u2014 "),tG=a("a"),wNo=o("SEWForSequenceClassification"),ANo=o(" (SEW model)"),yNo=l(),sF=a("li"),hfe=a("strong"),LNo=o("sew-d"),xNo=o(" \u2014 "),aG=a("a"),$No=o("SEWDForSequenceClassification"),kNo=o(" (SEW-D model)"),SNo=l(),lF=a("li"),pfe=a("strong"),RNo=o("unispeech"),BNo=o(" \u2014 "),nG=a("a"),PNo=o("UniSpeechForSequenceClassification"),INo=o(" (UniSpeech model)"),qNo=l(),iF=a("li"),ufe=a("strong"),NNo=o("unispeech-sat"),jNo=o(" \u2014 "),sG=a("a"),DNo=o("UniSpeechSatForSequenceClassification"),GNo=o(" (UniSpeechSat model)"),ONo=l(),dF=a("li"),_fe=a("strong"),VNo=o("wav2vec2"),XNo=o(" \u2014 "),lG=a("a"),zNo=o("Wav2Vec2ForSequenceClassification"),QNo=o(" (Wav2Vec2 model)"),WNo=l(),cF=a("li"),bfe=a("strong"),HNo=o("wavlm"),UNo=o(" \u2014 "),iG=a("a"),JNo=o("WavLMForSequenceClassification"),YNo=o(" (WavLM model)"),KNo=l(),fF=a("p"),ZNo=o("The model is set in evaluation mode by default using "),Ffe=a("code"),ejo=o("model.eval()"),ojo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vfe=a("code"),rjo=o("model.train()"),tjo=l(),v(mF.$$.fragment),pke=l(),Hi=a("h2"),gF=a("a"),Tfe=a("span"),v(p0.$$.fragment),ajo=l(),Mfe=a("span"),njo=o("AutoModelForAudioFrameClassification"),uke=l(),Do=a("div"),v(u0.$$.fragment),sjo=l(),Ui=a("p"),ljo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),dG=a("a"),ijo=o("from_pretrained()"),djo=o(" class method or the "),cG=a("a"),cjo=o("from_config()"),fjo=o(` class
method.`),mjo=l(),_0=a("p"),gjo=o("This class cannot be instantiated directly using "),Efe=a("code"),hjo=o("__init__()"),pjo=o(" (throws an error)."),ujo=l(),gt=a("div"),v(b0.$$.fragment),_jo=l(),Cfe=a("p"),bjo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Fjo=l(),Ji=a("p"),vjo=o(`Note:
Loading a model from its configuration file does `),wfe=a("strong"),Tjo=o("not"),Mjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fG=a("a"),Ejo=o("from_pretrained()"),Cjo=o(" to load the model weights."),wjo=l(),v(hF.$$.fragment),Ajo=l(),no=a("div"),v(F0.$$.fragment),yjo=l(),Afe=a("p"),Ljo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),xjo=l(),Ia=a("p"),$jo=o("The model class to instantiate is selected based on the "),yfe=a("code"),kjo=o("model_type"),Sjo=o(` property of the config object (either
passed as an argument or loaded from `),Lfe=a("code"),Rjo=o("pretrained_model_name_or_path"),Bjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xfe=a("code"),Pjo=o("pretrained_model_name_or_path"),Ijo=o(":"),qjo=l(),qa=a("ul"),pF=a("li"),$fe=a("strong"),Njo=o("data2vec-audio"),jjo=o(" \u2014 "),mG=a("a"),Djo=o("Data2VecAudioForAudioFrameClassification"),Gjo=o(" (Data2VecAudio model)"),Ojo=l(),uF=a("li"),kfe=a("strong"),Vjo=o("unispeech-sat"),Xjo=o(" \u2014 "),gG=a("a"),zjo=o("UniSpeechSatForAudioFrameClassification"),Qjo=o(" (UniSpeechSat model)"),Wjo=l(),_F=a("li"),Sfe=a("strong"),Hjo=o("wav2vec2"),Ujo=o(" \u2014 "),hG=a("a"),Jjo=o("Wav2Vec2ForAudioFrameClassification"),Yjo=o(" (Wav2Vec2 model)"),Kjo=l(),bF=a("li"),Rfe=a("strong"),Zjo=o("wavlm"),eDo=o(" \u2014 "),pG=a("a"),oDo=o("WavLMForAudioFrameClassification"),rDo=o(" (WavLM model)"),tDo=l(),FF=a("p"),aDo=o("The model is set in evaluation mode by default using "),Bfe=a("code"),nDo=o("model.eval()"),sDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pfe=a("code"),lDo=o("model.train()"),iDo=l(),v(vF.$$.fragment),_ke=l(),Yi=a("h2"),TF=a("a"),Ife=a("span"),v(v0.$$.fragment),dDo=l(),qfe=a("span"),cDo=o("AutoModelForCTC"),bke=l(),Go=a("div"),v(T0.$$.fragment),fDo=l(),Ki=a("p"),mDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),uG=a("a"),gDo=o("from_pretrained()"),hDo=o(" class method or the "),_G=a("a"),pDo=o("from_config()"),uDo=o(` class
method.`),_Do=l(),M0=a("p"),bDo=o("This class cannot be instantiated directly using "),Nfe=a("code"),FDo=o("__init__()"),vDo=o(" (throws an error)."),TDo=l(),ht=a("div"),v(E0.$$.fragment),MDo=l(),jfe=a("p"),EDo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),CDo=l(),Zi=a("p"),wDo=o(`Note:
Loading a model from its configuration file does `),Dfe=a("strong"),ADo=o("not"),yDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bG=a("a"),LDo=o("from_pretrained()"),xDo=o(" to load the model weights."),$Do=l(),v(MF.$$.fragment),kDo=l(),so=a("div"),v(C0.$$.fragment),SDo=l(),Gfe=a("p"),RDo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),BDo=l(),Na=a("p"),PDo=o("The model class to instantiate is selected based on the "),Ofe=a("code"),IDo=o("model_type"),qDo=o(` property of the config object (either
passed as an argument or loaded from `),Vfe=a("code"),NDo=o("pretrained_model_name_or_path"),jDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xfe=a("code"),DDo=o("pretrained_model_name_or_path"),GDo=o(":"),ODo=l(),qe=a("ul"),EF=a("li"),zfe=a("strong"),VDo=o("data2vec-audio"),XDo=o(" \u2014 "),FG=a("a"),zDo=o("Data2VecAudioForCTC"),QDo=o(" (Data2VecAudio model)"),WDo=l(),CF=a("li"),Qfe=a("strong"),HDo=o("hubert"),UDo=o(" \u2014 "),vG=a("a"),JDo=o("HubertForCTC"),YDo=o(" (Hubert model)"),KDo=l(),wF=a("li"),Wfe=a("strong"),ZDo=o("sew"),eGo=o(" \u2014 "),TG=a("a"),oGo=o("SEWForCTC"),rGo=o(" (SEW model)"),tGo=l(),AF=a("li"),Hfe=a("strong"),aGo=o("sew-d"),nGo=o(" \u2014 "),MG=a("a"),sGo=o("SEWDForCTC"),lGo=o(" (SEW-D model)"),iGo=l(),yF=a("li"),Ufe=a("strong"),dGo=o("unispeech"),cGo=o(" \u2014 "),EG=a("a"),fGo=o("UniSpeechForCTC"),mGo=o(" (UniSpeech model)"),gGo=l(),LF=a("li"),Jfe=a("strong"),hGo=o("unispeech-sat"),pGo=o(" \u2014 "),CG=a("a"),uGo=o("UniSpeechSatForCTC"),_Go=o(" (UniSpeechSat model)"),bGo=l(),xF=a("li"),Yfe=a("strong"),FGo=o("wav2vec2"),vGo=o(" \u2014 "),wG=a("a"),TGo=o("Wav2Vec2ForCTC"),MGo=o(" (Wav2Vec2 model)"),EGo=l(),$F=a("li"),Kfe=a("strong"),CGo=o("wavlm"),wGo=o(" \u2014 "),AG=a("a"),AGo=o("WavLMForCTC"),yGo=o(" (WavLM model)"),LGo=l(),kF=a("p"),xGo=o("The model is set in evaluation mode by default using "),Zfe=a("code"),$Go=o("model.eval()"),kGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eme=a("code"),SGo=o("model.train()"),RGo=l(),v(SF.$$.fragment),Fke=l(),ed=a("h2"),RF=a("a"),ome=a("span"),v(w0.$$.fragment),BGo=l(),rme=a("span"),PGo=o("AutoModelForSpeechSeq2Seq"),vke=l(),Oo=a("div"),v(A0.$$.fragment),IGo=l(),od=a("p"),qGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),yG=a("a"),NGo=o("from_pretrained()"),jGo=o(" class method or the "),LG=a("a"),DGo=o("from_config()"),GGo=o(` class
method.`),OGo=l(),y0=a("p"),VGo=o("This class cannot be instantiated directly using "),tme=a("code"),XGo=o("__init__()"),zGo=o(" (throws an error)."),QGo=l(),pt=a("div"),v(L0.$$.fragment),WGo=l(),ame=a("p"),HGo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),UGo=l(),rd=a("p"),JGo=o(`Note:
Loading a model from its configuration file does `),nme=a("strong"),YGo=o("not"),KGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xG=a("a"),ZGo=o("from_pretrained()"),eOo=o(" to load the model weights."),oOo=l(),v(BF.$$.fragment),rOo=l(),lo=a("div"),v(x0.$$.fragment),tOo=l(),sme=a("p"),aOo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),nOo=l(),ja=a("p"),sOo=o("The model class to instantiate is selected based on the "),lme=a("code"),lOo=o("model_type"),iOo=o(` property of the config object (either
passed as an argument or loaded from `),ime=a("code"),dOo=o("pretrained_model_name_or_path"),cOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dme=a("code"),fOo=o("pretrained_model_name_or_path"),mOo=o(":"),gOo=l(),$0=a("ul"),PF=a("li"),cme=a("strong"),hOo=o("speech-encoder-decoder"),pOo=o(" \u2014 "),$G=a("a"),uOo=o("SpeechEncoderDecoderModel"),_Oo=o(" (Speech Encoder decoder model)"),bOo=l(),IF=a("li"),fme=a("strong"),FOo=o("speech_to_text"),vOo=o(" \u2014 "),kG=a("a"),TOo=o("Speech2TextForConditionalGeneration"),MOo=o(" (Speech2Text model)"),EOo=l(),qF=a("p"),COo=o("The model is set in evaluation mode by default using "),mme=a("code"),wOo=o("model.eval()"),AOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gme=a("code"),yOo=o("model.train()"),LOo=l(),v(NF.$$.fragment),Tke=l(),td=a("h2"),jF=a("a"),hme=a("span"),v(k0.$$.fragment),xOo=l(),pme=a("span"),$Oo=o("AutoModelForAudioXVector"),Mke=l(),Vo=a("div"),v(S0.$$.fragment),kOo=l(),ad=a("p"),SOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),SG=a("a"),ROo=o("from_pretrained()"),BOo=o(" class method or the "),RG=a("a"),POo=o("from_config()"),IOo=o(` class
method.`),qOo=l(),R0=a("p"),NOo=o("This class cannot be instantiated directly using "),ume=a("code"),jOo=o("__init__()"),DOo=o(" (throws an error)."),GOo=l(),ut=a("div"),v(B0.$$.fragment),OOo=l(),_me=a("p"),VOo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),XOo=l(),nd=a("p"),zOo=o(`Note:
Loading a model from its configuration file does `),bme=a("strong"),QOo=o("not"),WOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BG=a("a"),HOo=o("from_pretrained()"),UOo=o(" to load the model weights."),JOo=l(),v(DF.$$.fragment),YOo=l(),io=a("div"),v(P0.$$.fragment),KOo=l(),Fme=a("p"),ZOo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),eVo=l(),Da=a("p"),oVo=o("The model class to instantiate is selected based on the "),vme=a("code"),rVo=o("model_type"),tVo=o(` property of the config object (either
passed as an argument or loaded from `),Tme=a("code"),aVo=o("pretrained_model_name_or_path"),nVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mme=a("code"),sVo=o("pretrained_model_name_or_path"),lVo=o(":"),iVo=l(),Ga=a("ul"),GF=a("li"),Eme=a("strong"),dVo=o("data2vec-audio"),cVo=o(" \u2014 "),PG=a("a"),fVo=o("Data2VecAudioForXVector"),mVo=o(" (Data2VecAudio model)"),gVo=l(),OF=a("li"),Cme=a("strong"),hVo=o("unispeech-sat"),pVo=o(" \u2014 "),IG=a("a"),uVo=o("UniSpeechSatForXVector"),_Vo=o(" (UniSpeechSat model)"),bVo=l(),VF=a("li"),wme=a("strong"),FVo=o("wav2vec2"),vVo=o(" \u2014 "),qG=a("a"),TVo=o("Wav2Vec2ForXVector"),MVo=o(" (Wav2Vec2 model)"),EVo=l(),XF=a("li"),Ame=a("strong"),CVo=o("wavlm"),wVo=o(" \u2014 "),NG=a("a"),AVo=o("WavLMForXVector"),yVo=o(" (WavLM model)"),LVo=l(),zF=a("p"),xVo=o("The model is set in evaluation mode by default using "),yme=a("code"),$Vo=o("model.eval()"),kVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lme=a("code"),SVo=o("model.train()"),RVo=l(),v(QF.$$.fragment),Eke=l(),sd=a("h2"),WF=a("a"),xme=a("span"),v(I0.$$.fragment),BVo=l(),$me=a("span"),PVo=o("AutoModelForMaskedImageModeling"),Cke=l(),Xo=a("div"),v(q0.$$.fragment),IVo=l(),ld=a("p"),qVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),jG=a("a"),NVo=o("from_pretrained()"),jVo=o(" class method or the "),DG=a("a"),DVo=o("from_config()"),GVo=o(` class
method.`),OVo=l(),N0=a("p"),VVo=o("This class cannot be instantiated directly using "),kme=a("code"),XVo=o("__init__()"),zVo=o(" (throws an error)."),QVo=l(),_t=a("div"),v(j0.$$.fragment),WVo=l(),Sme=a("p"),HVo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),UVo=l(),id=a("p"),JVo=o(`Note:
Loading a model from its configuration file does `),Rme=a("strong"),YVo=o("not"),KVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GG=a("a"),ZVo=o("from_pretrained()"),eXo=o(" to load the model weights."),oXo=l(),v(HF.$$.fragment),rXo=l(),co=a("div"),v(D0.$$.fragment),tXo=l(),Bme=a("p"),aXo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),nXo=l(),Oa=a("p"),sXo=o("The model class to instantiate is selected based on the "),Pme=a("code"),lXo=o("model_type"),iXo=o(` property of the config object (either
passed as an argument or loaded from `),Ime=a("code"),dXo=o("pretrained_model_name_or_path"),cXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qme=a("code"),fXo=o("pretrained_model_name_or_path"),mXo=o(":"),gXo=l(),dd=a("ul"),UF=a("li"),Nme=a("strong"),hXo=o("deit"),pXo=o(" \u2014 "),OG=a("a"),uXo=o("DeiTForMaskedImageModeling"),_Xo=o(" (DeiT model)"),bXo=l(),JF=a("li"),jme=a("strong"),FXo=o("swin"),vXo=o(" \u2014 "),VG=a("a"),TXo=o("SwinForMaskedImageModeling"),MXo=o(" (Swin model)"),EXo=l(),YF=a("li"),Dme=a("strong"),CXo=o("vit"),wXo=o(" \u2014 "),XG=a("a"),AXo=o("ViTForMaskedImageModeling"),yXo=o(" (ViT model)"),LXo=l(),KF=a("p"),xXo=o("The model is set in evaluation mode by default using "),Gme=a("code"),$Xo=o("model.eval()"),kXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ome=a("code"),SXo=o("model.train()"),RXo=l(),v(ZF.$$.fragment),wke=l(),cd=a("h2"),ev=a("a"),Vme=a("span"),v(G0.$$.fragment),BXo=l(),Xme=a("span"),PXo=o("AutoModelForObjectDetection"),Ake=l(),zo=a("div"),v(O0.$$.fragment),IXo=l(),fd=a("p"),qXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),zG=a("a"),NXo=o("from_pretrained()"),jXo=o(" class method or the "),QG=a("a"),DXo=o("from_config()"),GXo=o(` class
method.`),OXo=l(),V0=a("p"),VXo=o("This class cannot be instantiated directly using "),zme=a("code"),XXo=o("__init__()"),zXo=o(" (throws an error)."),QXo=l(),bt=a("div"),v(X0.$$.fragment),WXo=l(),Qme=a("p"),HXo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),UXo=l(),md=a("p"),JXo=o(`Note:
Loading a model from its configuration file does `),Wme=a("strong"),YXo=o("not"),KXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WG=a("a"),ZXo=o("from_pretrained()"),ezo=o(" to load the model weights."),ozo=l(),v(ov.$$.fragment),rzo=l(),fo=a("div"),v(z0.$$.fragment),tzo=l(),Hme=a("p"),azo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),nzo=l(),Va=a("p"),szo=o("The model class to instantiate is selected based on the "),Ume=a("code"),lzo=o("model_type"),izo=o(` property of the config object (either
passed as an argument or loaded from `),Jme=a("code"),dzo=o("pretrained_model_name_or_path"),czo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yme=a("code"),fzo=o("pretrained_model_name_or_path"),mzo=o(":"),gzo=l(),Kme=a("ul"),rv=a("li"),Zme=a("strong"),hzo=o("detr"),pzo=o(" \u2014 "),HG=a("a"),uzo=o("DetrForObjectDetection"),_zo=o(" (DETR model)"),bzo=l(),tv=a("p"),Fzo=o("The model is set in evaluation mode by default using "),ege=a("code"),vzo=o("model.eval()"),Tzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oge=a("code"),Mzo=o("model.train()"),Ezo=l(),v(av.$$.fragment),yke=l(),gd=a("h2"),nv=a("a"),rge=a("span"),v(Q0.$$.fragment),Czo=l(),tge=a("span"),wzo=o("AutoModelForImageSegmentation"),Lke=l(),Qo=a("div"),v(W0.$$.fragment),Azo=l(),hd=a("p"),yzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),UG=a("a"),Lzo=o("from_pretrained()"),xzo=o(" class method or the "),JG=a("a"),$zo=o("from_config()"),kzo=o(` class
method.`),Szo=l(),H0=a("p"),Rzo=o("This class cannot be instantiated directly using "),age=a("code"),Bzo=o("__init__()"),Pzo=o(" (throws an error)."),Izo=l(),Ft=a("div"),v(U0.$$.fragment),qzo=l(),nge=a("p"),Nzo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),jzo=l(),pd=a("p"),Dzo=o(`Note:
Loading a model from its configuration file does `),sge=a("strong"),Gzo=o("not"),Ozo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YG=a("a"),Vzo=o("from_pretrained()"),Xzo=o(" to load the model weights."),zzo=l(),v(sv.$$.fragment),Qzo=l(),mo=a("div"),v(J0.$$.fragment),Wzo=l(),lge=a("p"),Hzo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Uzo=l(),Xa=a("p"),Jzo=o("The model class to instantiate is selected based on the "),ige=a("code"),Yzo=o("model_type"),Kzo=o(` property of the config object (either
passed as an argument or loaded from `),dge=a("code"),Zzo=o("pretrained_model_name_or_path"),eQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cge=a("code"),oQo=o("pretrained_model_name_or_path"),rQo=o(":"),tQo=l(),fge=a("ul"),lv=a("li"),mge=a("strong"),aQo=o("detr"),nQo=o(" \u2014 "),KG=a("a"),sQo=o("DetrForSegmentation"),lQo=o(" (DETR model)"),iQo=l(),iv=a("p"),dQo=o("The model is set in evaluation mode by default using "),gge=a("code"),cQo=o("model.eval()"),fQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hge=a("code"),mQo=o("model.train()"),gQo=l(),v(dv.$$.fragment),xke=l(),ud=a("h2"),cv=a("a"),pge=a("span"),v(Y0.$$.fragment),hQo=l(),uge=a("span"),pQo=o("AutoModelForSemanticSegmentation"),$ke=l(),Wo=a("div"),v(K0.$$.fragment),uQo=l(),_d=a("p"),_Qo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),ZG=a("a"),bQo=o("from_pretrained()"),FQo=o(" class method or the "),eO=a("a"),vQo=o("from_config()"),TQo=o(` class
method.`),MQo=l(),Z0=a("p"),EQo=o("This class cannot be instantiated directly using "),_ge=a("code"),CQo=o("__init__()"),wQo=o(" (throws an error)."),AQo=l(),vt=a("div"),v(ey.$$.fragment),yQo=l(),bge=a("p"),LQo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),xQo=l(),bd=a("p"),$Qo=o(`Note:
Loading a model from its configuration file does `),Fge=a("strong"),kQo=o("not"),SQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oO=a("a"),RQo=o("from_pretrained()"),BQo=o(" to load the model weights."),PQo=l(),v(fv.$$.fragment),IQo=l(),go=a("div"),v(oy.$$.fragment),qQo=l(),vge=a("p"),NQo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),jQo=l(),za=a("p"),DQo=o("The model class to instantiate is selected based on the "),Tge=a("code"),GQo=o("model_type"),OQo=o(` property of the config object (either
passed as an argument or loaded from `),Mge=a("code"),VQo=o("pretrained_model_name_or_path"),XQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ege=a("code"),zQo=o("pretrained_model_name_or_path"),QQo=o(":"),WQo=l(),ry=a("ul"),mv=a("li"),Cge=a("strong"),HQo=o("beit"),UQo=o(" \u2014 "),rO=a("a"),JQo=o("BeitForSemanticSegmentation"),YQo=o(" (BEiT model)"),KQo=l(),gv=a("li"),wge=a("strong"),ZQo=o("segformer"),eWo=o(" \u2014 "),tO=a("a"),oWo=o("SegformerForSemanticSegmentation"),rWo=o(" (SegFormer model)"),tWo=l(),hv=a("p"),aWo=o("The model is set in evaluation mode by default using "),Age=a("code"),nWo=o("model.eval()"),sWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yge=a("code"),lWo=o("model.train()"),iWo=l(),v(pv.$$.fragment),kke=l(),Fd=a("h2"),uv=a("a"),Lge=a("span"),v(ty.$$.fragment),dWo=l(),xge=a("span"),cWo=o("AutoModelForInstanceSegmentation"),Ske=l(),Ho=a("div"),v(ay.$$.fragment),fWo=l(),vd=a("p"),mWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),aO=a("a"),gWo=o("from_pretrained()"),hWo=o(" class method or the "),nO=a("a"),pWo=o("from_config()"),uWo=o(` class
method.`),_Wo=l(),ny=a("p"),bWo=o("This class cannot be instantiated directly using "),$ge=a("code"),FWo=o("__init__()"),vWo=o(" (throws an error)."),TWo=l(),Tt=a("div"),v(sy.$$.fragment),MWo=l(),kge=a("p"),EWo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),CWo=l(),Td=a("p"),wWo=o(`Note:
Loading a model from its configuration file does `),Sge=a("strong"),AWo=o("not"),yWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sO=a("a"),LWo=o("from_pretrained()"),xWo=o(" to load the model weights."),$Wo=l(),v(_v.$$.fragment),kWo=l(),ho=a("div"),v(ly.$$.fragment),SWo=l(),Rge=a("p"),RWo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),BWo=l(),Qa=a("p"),PWo=o("The model class to instantiate is selected based on the "),Bge=a("code"),IWo=o("model_type"),qWo=o(` property of the config object (either
passed as an argument or loaded from `),Pge=a("code"),NWo=o("pretrained_model_name_or_path"),jWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ige=a("code"),DWo=o("pretrained_model_name_or_path"),GWo=o(":"),OWo=l(),qge=a("ul"),bv=a("li"),Nge=a("strong"),VWo=o("maskformer"),XWo=o(" \u2014 "),lO=a("a"),zWo=o("MaskFormerForInstanceSegmentation"),QWo=o(" (MaskFormer model)"),WWo=l(),Fv=a("p"),HWo=o("The model is set in evaluation mode by default using "),jge=a("code"),UWo=o("model.eval()"),JWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dge=a("code"),YWo=o("model.train()"),KWo=l(),v(vv.$$.fragment),Rke=l(),Md=a("h2"),Tv=a("a"),Gge=a("span"),v(iy.$$.fragment),ZWo=l(),Oge=a("span"),eHo=o("TFAutoModel"),Bke=l(),Uo=a("div"),v(dy.$$.fragment),oHo=l(),Ed=a("p"),rHo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),iO=a("a"),tHo=o("from_pretrained()"),aHo=o(" class method or the "),dO=a("a"),nHo=o("from_config()"),sHo=o(` class
method.`),lHo=l(),cy=a("p"),iHo=o("This class cannot be instantiated directly using "),Vge=a("code"),dHo=o("__init__()"),cHo=o(" (throws an error)."),fHo=l(),Mt=a("div"),v(fy.$$.fragment),mHo=l(),Xge=a("p"),gHo=o("Instantiates one of the base model classes of the library from a configuration."),hHo=l(),Cd=a("p"),pHo=o(`Note:
Loading a model from its configuration file does `),zge=a("strong"),uHo=o("not"),_Ho=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cO=a("a"),bHo=o("from_pretrained()"),FHo=o(" to load the model weights."),vHo=l(),v(Mv.$$.fragment),THo=l(),Mr=a("div"),v(my.$$.fragment),MHo=l(),Qge=a("p"),EHo=o("Instantiate one of the base model classes of the library from a pretrained model."),CHo=l(),Wa=a("p"),wHo=o("The model class to instantiate is selected based on the "),Wge=a("code"),AHo=o("model_type"),yHo=o(` property of the config object (either
passed as an argument or loaded from `),Hge=a("code"),LHo=o("pretrained_model_name_or_path"),xHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uge=a("code"),$Ho=o("pretrained_model_name_or_path"),kHo=o(":"),SHo=l(),j=a("ul"),Ev=a("li"),Jge=a("strong"),RHo=o("albert"),BHo=o(" \u2014 "),fO=a("a"),PHo=o("TFAlbertModel"),IHo=o(" (ALBERT model)"),qHo=l(),Cv=a("li"),Yge=a("strong"),NHo=o("bart"),jHo=o(" \u2014 "),mO=a("a"),DHo=o("TFBartModel"),GHo=o(" (BART model)"),OHo=l(),wv=a("li"),Kge=a("strong"),VHo=o("bert"),XHo=o(" \u2014 "),gO=a("a"),zHo=o("TFBertModel"),QHo=o(" (BERT model)"),WHo=l(),Av=a("li"),Zge=a("strong"),HHo=o("blenderbot"),UHo=o(" \u2014 "),hO=a("a"),JHo=o("TFBlenderbotModel"),YHo=o(" (Blenderbot model)"),KHo=l(),yv=a("li"),ehe=a("strong"),ZHo=o("blenderbot-small"),eUo=o(" \u2014 "),pO=a("a"),oUo=o("TFBlenderbotSmallModel"),rUo=o(" (BlenderbotSmall model)"),tUo=l(),Lv=a("li"),ohe=a("strong"),aUo=o("camembert"),nUo=o(" \u2014 "),uO=a("a"),sUo=o("TFCamembertModel"),lUo=o(" (CamemBERT model)"),iUo=l(),xv=a("li"),rhe=a("strong"),dUo=o("clip"),cUo=o(" \u2014 "),_O=a("a"),fUo=o("TFCLIPModel"),mUo=o(" (CLIP model)"),gUo=l(),$v=a("li"),the=a("strong"),hUo=o("convbert"),pUo=o(" \u2014 "),bO=a("a"),uUo=o("TFConvBertModel"),_Uo=o(" (ConvBERT model)"),bUo=l(),kv=a("li"),ahe=a("strong"),FUo=o("convnext"),vUo=o(" \u2014 "),FO=a("a"),TUo=o("TFConvNextModel"),MUo=o(" (ConvNext model)"),EUo=l(),Sv=a("li"),nhe=a("strong"),CUo=o("ctrl"),wUo=o(" \u2014 "),vO=a("a"),AUo=o("TFCTRLModel"),yUo=o(" (CTRL model)"),LUo=l(),Rv=a("li"),she=a("strong"),xUo=o("deberta"),$Uo=o(" \u2014 "),TO=a("a"),kUo=o("TFDebertaModel"),SUo=o(" (DeBERTa model)"),RUo=l(),Bv=a("li"),lhe=a("strong"),BUo=o("deberta-v2"),PUo=o(" \u2014 "),MO=a("a"),IUo=o("TFDebertaV2Model"),qUo=o(" (DeBERTa-v2 model)"),NUo=l(),Pv=a("li"),ihe=a("strong"),jUo=o("distilbert"),DUo=o(" \u2014 "),EO=a("a"),GUo=o("TFDistilBertModel"),OUo=o(" (DistilBERT model)"),VUo=l(),Iv=a("li"),dhe=a("strong"),XUo=o("dpr"),zUo=o(" \u2014 "),CO=a("a"),QUo=o("TFDPRQuestionEncoder"),WUo=o(" (DPR model)"),HUo=l(),qv=a("li"),che=a("strong"),UUo=o("electra"),JUo=o(" \u2014 "),wO=a("a"),YUo=o("TFElectraModel"),KUo=o(" (ELECTRA model)"),ZUo=l(),Nv=a("li"),fhe=a("strong"),eJo=o("flaubert"),oJo=o(" \u2014 "),AO=a("a"),rJo=o("TFFlaubertModel"),tJo=o(" (FlauBERT model)"),aJo=l(),vs=a("li"),mhe=a("strong"),nJo=o("funnel"),sJo=o(" \u2014 "),yO=a("a"),lJo=o("TFFunnelModel"),iJo=o(" or "),LO=a("a"),dJo=o("TFFunnelBaseModel"),cJo=o(" (Funnel Transformer model)"),fJo=l(),jv=a("li"),ghe=a("strong"),mJo=o("gpt2"),gJo=o(" \u2014 "),xO=a("a"),hJo=o("TFGPT2Model"),pJo=o(" (OpenAI GPT-2 model)"),uJo=l(),Dv=a("li"),hhe=a("strong"),_Jo=o("hubert"),bJo=o(" \u2014 "),$O=a("a"),FJo=o("TFHubertModel"),vJo=o(" (Hubert model)"),TJo=l(),Gv=a("li"),phe=a("strong"),MJo=o("layoutlm"),EJo=o(" \u2014 "),kO=a("a"),CJo=o("TFLayoutLMModel"),wJo=o(" (LayoutLM model)"),AJo=l(),Ov=a("li"),uhe=a("strong"),yJo=o("led"),LJo=o(" \u2014 "),SO=a("a"),xJo=o("TFLEDModel"),$Jo=o(" (LED model)"),kJo=l(),Vv=a("li"),_he=a("strong"),SJo=o("longformer"),RJo=o(" \u2014 "),RO=a("a"),BJo=o("TFLongformerModel"),PJo=o(" (Longformer model)"),IJo=l(),Xv=a("li"),bhe=a("strong"),qJo=o("lxmert"),NJo=o(" \u2014 "),BO=a("a"),jJo=o("TFLxmertModel"),DJo=o(" (LXMERT model)"),GJo=l(),zv=a("li"),Fhe=a("strong"),OJo=o("marian"),VJo=o(" \u2014 "),PO=a("a"),XJo=o("TFMarianModel"),zJo=o(" (Marian model)"),QJo=l(),Qv=a("li"),vhe=a("strong"),WJo=o("mbart"),HJo=o(" \u2014 "),IO=a("a"),UJo=o("TFMBartModel"),JJo=o(" (mBART model)"),YJo=l(),Wv=a("li"),The=a("strong"),KJo=o("mobilebert"),ZJo=o(" \u2014 "),qO=a("a"),eYo=o("TFMobileBertModel"),oYo=o(" (MobileBERT model)"),rYo=l(),Hv=a("li"),Mhe=a("strong"),tYo=o("mpnet"),aYo=o(" \u2014 "),NO=a("a"),nYo=o("TFMPNetModel"),sYo=o(" (MPNet model)"),lYo=l(),Uv=a("li"),Ehe=a("strong"),iYo=o("mt5"),dYo=o(" \u2014 "),jO=a("a"),cYo=o("TFMT5Model"),fYo=o(" (mT5 model)"),mYo=l(),Jv=a("li"),Che=a("strong"),gYo=o("openai-gpt"),hYo=o(" \u2014 "),DO=a("a"),pYo=o("TFOpenAIGPTModel"),uYo=o(" (OpenAI GPT model)"),_Yo=l(),Yv=a("li"),whe=a("strong"),bYo=o("pegasus"),FYo=o(" \u2014 "),GO=a("a"),vYo=o("TFPegasusModel"),TYo=o(" (Pegasus model)"),MYo=l(),Kv=a("li"),Ahe=a("strong"),EYo=o("rembert"),CYo=o(" \u2014 "),OO=a("a"),wYo=o("TFRemBertModel"),AYo=o(" (RemBERT model)"),yYo=l(),Zv=a("li"),yhe=a("strong"),LYo=o("roberta"),xYo=o(" \u2014 "),VO=a("a"),$Yo=o("TFRobertaModel"),kYo=o(" (RoBERTa model)"),SYo=l(),e6=a("li"),Lhe=a("strong"),RYo=o("roformer"),BYo=o(" \u2014 "),XO=a("a"),PYo=o("TFRoFormerModel"),IYo=o(" (RoFormer model)"),qYo=l(),o6=a("li"),xhe=a("strong"),NYo=o("speech_to_text"),jYo=o(" \u2014 "),zO=a("a"),DYo=o("TFSpeech2TextModel"),GYo=o(" (Speech2Text model)"),OYo=l(),r6=a("li"),$he=a("strong"),VYo=o("t5"),XYo=o(" \u2014 "),QO=a("a"),zYo=o("TFT5Model"),QYo=o(" (T5 model)"),WYo=l(),t6=a("li"),khe=a("strong"),HYo=o("tapas"),UYo=o(" \u2014 "),WO=a("a"),JYo=o("TFTapasModel"),YYo=o(" (TAPAS model)"),KYo=l(),a6=a("li"),She=a("strong"),ZYo=o("transfo-xl"),eKo=o(" \u2014 "),HO=a("a"),oKo=o("TFTransfoXLModel"),rKo=o(" (Transformer-XL model)"),tKo=l(),n6=a("li"),Rhe=a("strong"),aKo=o("vit"),nKo=o(" \u2014 "),UO=a("a"),sKo=o("TFViTModel"),lKo=o(" (ViT model)"),iKo=l(),s6=a("li"),Bhe=a("strong"),dKo=o("wav2vec2"),cKo=o(" \u2014 "),JO=a("a"),fKo=o("TFWav2Vec2Model"),mKo=o(" (Wav2Vec2 model)"),gKo=l(),l6=a("li"),Phe=a("strong"),hKo=o("xlm"),pKo=o(" \u2014 "),YO=a("a"),uKo=o("TFXLMModel"),_Ko=o(" (XLM model)"),bKo=l(),i6=a("li"),Ihe=a("strong"),FKo=o("xlm-roberta"),vKo=o(" \u2014 "),KO=a("a"),TKo=o("TFXLMRobertaModel"),MKo=o(" (XLM-RoBERTa model)"),EKo=l(),d6=a("li"),qhe=a("strong"),CKo=o("xlnet"),wKo=o(" \u2014 "),ZO=a("a"),AKo=o("TFXLNetModel"),yKo=o(" (XLNet model)"),LKo=l(),v(c6.$$.fragment),Pke=l(),wd=a("h2"),f6=a("a"),Nhe=a("span"),v(gy.$$.fragment),xKo=l(),jhe=a("span"),$Ko=o("TFAutoModelForPreTraining"),Ike=l(),Jo=a("div"),v(hy.$$.fragment),kKo=l(),Ad=a("p"),SKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),eV=a("a"),RKo=o("from_pretrained()"),BKo=o(" class method or the "),oV=a("a"),PKo=o("from_config()"),IKo=o(` class
method.`),qKo=l(),py=a("p"),NKo=o("This class cannot be instantiated directly using "),Dhe=a("code"),jKo=o("__init__()"),DKo=o(" (throws an error)."),GKo=l(),Et=a("div"),v(uy.$$.fragment),OKo=l(),Ghe=a("p"),VKo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),XKo=l(),yd=a("p"),zKo=o(`Note:
Loading a model from its configuration file does `),Ohe=a("strong"),QKo=o("not"),WKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rV=a("a"),HKo=o("from_pretrained()"),UKo=o(" to load the model weights."),JKo=l(),v(m6.$$.fragment),YKo=l(),Er=a("div"),v(_y.$$.fragment),KKo=l(),Vhe=a("p"),ZKo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),eZo=l(),Ha=a("p"),oZo=o("The model class to instantiate is selected based on the "),Xhe=a("code"),rZo=o("model_type"),tZo=o(` property of the config object (either
passed as an argument or loaded from `),zhe=a("code"),aZo=o("pretrained_model_name_or_path"),nZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qhe=a("code"),sZo=o("pretrained_model_name_or_path"),lZo=o(":"),iZo=l(),ae=a("ul"),g6=a("li"),Whe=a("strong"),dZo=o("albert"),cZo=o(" \u2014 "),tV=a("a"),fZo=o("TFAlbertForPreTraining"),mZo=o(" (ALBERT model)"),gZo=l(),h6=a("li"),Hhe=a("strong"),hZo=o("bart"),pZo=o(" \u2014 "),aV=a("a"),uZo=o("TFBartForConditionalGeneration"),_Zo=o(" (BART model)"),bZo=l(),p6=a("li"),Uhe=a("strong"),FZo=o("bert"),vZo=o(" \u2014 "),nV=a("a"),TZo=o("TFBertForPreTraining"),MZo=o(" (BERT model)"),EZo=l(),u6=a("li"),Jhe=a("strong"),CZo=o("camembert"),wZo=o(" \u2014 "),sV=a("a"),AZo=o("TFCamembertForMaskedLM"),yZo=o(" (CamemBERT model)"),LZo=l(),_6=a("li"),Yhe=a("strong"),xZo=o("ctrl"),$Zo=o(" \u2014 "),lV=a("a"),kZo=o("TFCTRLLMHeadModel"),SZo=o(" (CTRL model)"),RZo=l(),b6=a("li"),Khe=a("strong"),BZo=o("distilbert"),PZo=o(" \u2014 "),iV=a("a"),IZo=o("TFDistilBertForMaskedLM"),qZo=o(" (DistilBERT model)"),NZo=l(),F6=a("li"),Zhe=a("strong"),jZo=o("electra"),DZo=o(" \u2014 "),dV=a("a"),GZo=o("TFElectraForPreTraining"),OZo=o(" (ELECTRA model)"),VZo=l(),v6=a("li"),epe=a("strong"),XZo=o("flaubert"),zZo=o(" \u2014 "),cV=a("a"),QZo=o("TFFlaubertWithLMHeadModel"),WZo=o(" (FlauBERT model)"),HZo=l(),T6=a("li"),ope=a("strong"),UZo=o("funnel"),JZo=o(" \u2014 "),fV=a("a"),YZo=o("TFFunnelForPreTraining"),KZo=o(" (Funnel Transformer model)"),ZZo=l(),M6=a("li"),rpe=a("strong"),eer=o("gpt2"),oer=o(" \u2014 "),mV=a("a"),rer=o("TFGPT2LMHeadModel"),ter=o(" (OpenAI GPT-2 model)"),aer=l(),E6=a("li"),tpe=a("strong"),ner=o("layoutlm"),ser=o(" \u2014 "),gV=a("a"),ler=o("TFLayoutLMForMaskedLM"),ier=o(" (LayoutLM model)"),der=l(),C6=a("li"),ape=a("strong"),cer=o("lxmert"),fer=o(" \u2014 "),hV=a("a"),mer=o("TFLxmertForPreTraining"),ger=o(" (LXMERT model)"),her=l(),w6=a("li"),npe=a("strong"),per=o("mobilebert"),uer=o(" \u2014 "),pV=a("a"),_er=o("TFMobileBertForPreTraining"),ber=o(" (MobileBERT model)"),Fer=l(),A6=a("li"),spe=a("strong"),ver=o("mpnet"),Ter=o(" \u2014 "),uV=a("a"),Mer=o("TFMPNetForMaskedLM"),Eer=o(" (MPNet model)"),Cer=l(),y6=a("li"),lpe=a("strong"),wer=o("openai-gpt"),Aer=o(" \u2014 "),_V=a("a"),yer=o("TFOpenAIGPTLMHeadModel"),Ler=o(" (OpenAI GPT model)"),xer=l(),L6=a("li"),ipe=a("strong"),$er=o("roberta"),ker=o(" \u2014 "),bV=a("a"),Ser=o("TFRobertaForMaskedLM"),Rer=o(" (RoBERTa model)"),Ber=l(),x6=a("li"),dpe=a("strong"),Per=o("t5"),Ier=o(" \u2014 "),FV=a("a"),qer=o("TFT5ForConditionalGeneration"),Ner=o(" (T5 model)"),jer=l(),$6=a("li"),cpe=a("strong"),Der=o("tapas"),Ger=o(" \u2014 "),vV=a("a"),Oer=o("TFTapasForMaskedLM"),Ver=o(" (TAPAS model)"),Xer=l(),k6=a("li"),fpe=a("strong"),zer=o("transfo-xl"),Qer=o(" \u2014 "),TV=a("a"),Wer=o("TFTransfoXLLMHeadModel"),Her=o(" (Transformer-XL model)"),Uer=l(),S6=a("li"),mpe=a("strong"),Jer=o("xlm"),Yer=o(" \u2014 "),MV=a("a"),Ker=o("TFXLMWithLMHeadModel"),Zer=o(" (XLM model)"),eor=l(),R6=a("li"),gpe=a("strong"),oor=o("xlm-roberta"),ror=o(" \u2014 "),EV=a("a"),tor=o("TFXLMRobertaForMaskedLM"),aor=o(" (XLM-RoBERTa model)"),nor=l(),B6=a("li"),hpe=a("strong"),sor=o("xlnet"),lor=o(" \u2014 "),CV=a("a"),ior=o("TFXLNetLMHeadModel"),dor=o(" (XLNet model)"),cor=l(),v(P6.$$.fragment),qke=l(),Ld=a("h2"),I6=a("a"),ppe=a("span"),v(by.$$.fragment),mor=l(),upe=a("span"),gor=o("TFAutoModelForCausalLM"),Nke=l(),Yo=a("div"),v(Fy.$$.fragment),hor=l(),xd=a("p"),por=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),wV=a("a"),uor=o("from_pretrained()"),_or=o(" class method or the "),AV=a("a"),bor=o("from_config()"),For=o(` class
method.`),vor=l(),vy=a("p"),Tor=o("This class cannot be instantiated directly using "),_pe=a("code"),Mor=o("__init__()"),Eor=o(" (throws an error)."),Cor=l(),Ct=a("div"),v(Ty.$$.fragment),wor=l(),bpe=a("p"),Aor=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),yor=l(),$d=a("p"),Lor=o(`Note:
Loading a model from its configuration file does `),Fpe=a("strong"),xor=o("not"),$or=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yV=a("a"),kor=o("from_pretrained()"),Sor=o(" to load the model weights."),Ror=l(),v(q6.$$.fragment),Bor=l(),Cr=a("div"),v(My.$$.fragment),Por=l(),vpe=a("p"),Ior=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),qor=l(),Ua=a("p"),Nor=o("The model class to instantiate is selected based on the "),Tpe=a("code"),jor=o("model_type"),Dor=o(` property of the config object (either
passed as an argument or loaded from `),Mpe=a("code"),Gor=o("pretrained_model_name_or_path"),Oor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Epe=a("code"),Vor=o("pretrained_model_name_or_path"),Xor=o(":"),zor=l(),ve=a("ul"),N6=a("li"),Cpe=a("strong"),Qor=o("bert"),Wor=o(" \u2014 "),LV=a("a"),Hor=o("TFBertLMHeadModel"),Uor=o(" (BERT model)"),Jor=l(),j6=a("li"),wpe=a("strong"),Yor=o("camembert"),Kor=o(" \u2014 "),xV=a("a"),Zor=o("TFCamembertForCausalLM"),err=o(" (CamemBERT model)"),orr=l(),D6=a("li"),Ape=a("strong"),rrr=o("ctrl"),trr=o(" \u2014 "),$V=a("a"),arr=o("TFCTRLLMHeadModel"),nrr=o(" (CTRL model)"),srr=l(),G6=a("li"),ype=a("strong"),lrr=o("gpt2"),irr=o(" \u2014 "),kV=a("a"),drr=o("TFGPT2LMHeadModel"),crr=o(" (OpenAI GPT-2 model)"),frr=l(),O6=a("li"),Lpe=a("strong"),mrr=o("openai-gpt"),grr=o(" \u2014 "),SV=a("a"),hrr=o("TFOpenAIGPTLMHeadModel"),prr=o(" (OpenAI GPT model)"),urr=l(),V6=a("li"),xpe=a("strong"),_rr=o("rembert"),brr=o(" \u2014 "),RV=a("a"),Frr=o("TFRemBertForCausalLM"),vrr=o(" (RemBERT model)"),Trr=l(),X6=a("li"),$pe=a("strong"),Mrr=o("roberta"),Err=o(" \u2014 "),BV=a("a"),Crr=o("TFRobertaForCausalLM"),wrr=o(" (RoBERTa model)"),Arr=l(),z6=a("li"),kpe=a("strong"),yrr=o("roformer"),Lrr=o(" \u2014 "),PV=a("a"),xrr=o("TFRoFormerForCausalLM"),$rr=o(" (RoFormer model)"),krr=l(),Q6=a("li"),Spe=a("strong"),Srr=o("transfo-xl"),Rrr=o(" \u2014 "),IV=a("a"),Brr=o("TFTransfoXLLMHeadModel"),Prr=o(" (Transformer-XL model)"),Irr=l(),W6=a("li"),Rpe=a("strong"),qrr=o("xlm"),Nrr=o(" \u2014 "),qV=a("a"),jrr=o("TFXLMWithLMHeadModel"),Drr=o(" (XLM model)"),Grr=l(),H6=a("li"),Bpe=a("strong"),Orr=o("xlnet"),Vrr=o(" \u2014 "),NV=a("a"),Xrr=o("TFXLNetLMHeadModel"),zrr=o(" (XLNet model)"),Qrr=l(),v(U6.$$.fragment),jke=l(),kd=a("h2"),J6=a("a"),Ppe=a("span"),v(Ey.$$.fragment),Wrr=l(),Ipe=a("span"),Hrr=o("TFAutoModelForImageClassification"),Dke=l(),Ko=a("div"),v(Cy.$$.fragment),Urr=l(),Sd=a("p"),Jrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),jV=a("a"),Yrr=o("from_pretrained()"),Krr=o(" class method or the "),DV=a("a"),Zrr=o("from_config()"),etr=o(` class
method.`),otr=l(),wy=a("p"),rtr=o("This class cannot be instantiated directly using "),qpe=a("code"),ttr=o("__init__()"),atr=o(" (throws an error)."),ntr=l(),wt=a("div"),v(Ay.$$.fragment),str=l(),Npe=a("p"),ltr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),itr=l(),Rd=a("p"),dtr=o(`Note:
Loading a model from its configuration file does `),jpe=a("strong"),ctr=o("not"),ftr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GV=a("a"),mtr=o("from_pretrained()"),gtr=o(" to load the model weights."),htr=l(),v(Y6.$$.fragment),ptr=l(),wr=a("div"),v(yy.$$.fragment),utr=l(),Dpe=a("p"),_tr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),btr=l(),Ja=a("p"),Ftr=o("The model class to instantiate is selected based on the "),Gpe=a("code"),vtr=o("model_type"),Ttr=o(` property of the config object (either
passed as an argument or loaded from `),Ope=a("code"),Mtr=o("pretrained_model_name_or_path"),Etr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vpe=a("code"),Ctr=o("pretrained_model_name_or_path"),wtr=o(":"),Atr=l(),Ly=a("ul"),K6=a("li"),Xpe=a("strong"),ytr=o("convnext"),Ltr=o(" \u2014 "),OV=a("a"),xtr=o("TFConvNextForImageClassification"),$tr=o(" (ConvNext model)"),ktr=l(),Z6=a("li"),zpe=a("strong"),Str=o("vit"),Rtr=o(" \u2014 "),VV=a("a"),Btr=o("TFViTForImageClassification"),Ptr=o(" (ViT model)"),Itr=l(),v(eT.$$.fragment),Gke=l(),Bd=a("h2"),oT=a("a"),Qpe=a("span"),v(xy.$$.fragment),qtr=l(),Wpe=a("span"),Ntr=o("TFAutoModelForMaskedLM"),Oke=l(),Zo=a("div"),v($y.$$.fragment),jtr=l(),Pd=a("p"),Dtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),XV=a("a"),Gtr=o("from_pretrained()"),Otr=o(" class method or the "),zV=a("a"),Vtr=o("from_config()"),Xtr=o(` class
method.`),ztr=l(),ky=a("p"),Qtr=o("This class cannot be instantiated directly using "),Hpe=a("code"),Wtr=o("__init__()"),Htr=o(" (throws an error)."),Utr=l(),At=a("div"),v(Sy.$$.fragment),Jtr=l(),Upe=a("p"),Ytr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Ktr=l(),Id=a("p"),Ztr=o(`Note:
Loading a model from its configuration file does `),Jpe=a("strong"),ear=o("not"),oar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QV=a("a"),rar=o("from_pretrained()"),tar=o(" to load the model weights."),aar=l(),v(rT.$$.fragment),nar=l(),Ar=a("div"),v(Ry.$$.fragment),sar=l(),Ype=a("p"),lar=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),iar=l(),Ya=a("p"),dar=o("The model class to instantiate is selected based on the "),Kpe=a("code"),car=o("model_type"),far=o(` property of the config object (either
passed as an argument or loaded from `),Zpe=a("code"),mar=o("pretrained_model_name_or_path"),gar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eue=a("code"),har=o("pretrained_model_name_or_path"),par=o(":"),uar=l(),se=a("ul"),tT=a("li"),oue=a("strong"),_ar=o("albert"),bar=o(" \u2014 "),WV=a("a"),Far=o("TFAlbertForMaskedLM"),Tar=o(" (ALBERT model)"),Mar=l(),aT=a("li"),rue=a("strong"),Ear=o("bert"),Car=o(" \u2014 "),HV=a("a"),war=o("TFBertForMaskedLM"),Aar=o(" (BERT model)"),yar=l(),nT=a("li"),tue=a("strong"),Lar=o("camembert"),xar=o(" \u2014 "),UV=a("a"),$ar=o("TFCamembertForMaskedLM"),kar=o(" (CamemBERT model)"),Sar=l(),sT=a("li"),aue=a("strong"),Rar=o("convbert"),Bar=o(" \u2014 "),JV=a("a"),Par=o("TFConvBertForMaskedLM"),Iar=o(" (ConvBERT model)"),qar=l(),lT=a("li"),nue=a("strong"),Nar=o("deberta"),jar=o(" \u2014 "),YV=a("a"),Dar=o("TFDebertaForMaskedLM"),Gar=o(" (DeBERTa model)"),Oar=l(),iT=a("li"),sue=a("strong"),Var=o("deberta-v2"),Xar=o(" \u2014 "),KV=a("a"),zar=o("TFDebertaV2ForMaskedLM"),Qar=o(" (DeBERTa-v2 model)"),War=l(),dT=a("li"),lue=a("strong"),Har=o("distilbert"),Uar=o(" \u2014 "),ZV=a("a"),Jar=o("TFDistilBertForMaskedLM"),Yar=o(" (DistilBERT model)"),Kar=l(),cT=a("li"),iue=a("strong"),Zar=o("electra"),enr=o(" \u2014 "),eX=a("a"),onr=o("TFElectraForMaskedLM"),rnr=o(" (ELECTRA model)"),tnr=l(),fT=a("li"),due=a("strong"),anr=o("flaubert"),nnr=o(" \u2014 "),oX=a("a"),snr=o("TFFlaubertWithLMHeadModel"),lnr=o(" (FlauBERT model)"),inr=l(),mT=a("li"),cue=a("strong"),dnr=o("funnel"),cnr=o(" \u2014 "),rX=a("a"),fnr=o("TFFunnelForMaskedLM"),mnr=o(" (Funnel Transformer model)"),gnr=l(),gT=a("li"),fue=a("strong"),hnr=o("layoutlm"),pnr=o(" \u2014 "),tX=a("a"),unr=o("TFLayoutLMForMaskedLM"),_nr=o(" (LayoutLM model)"),bnr=l(),hT=a("li"),mue=a("strong"),Fnr=o("longformer"),vnr=o(" \u2014 "),aX=a("a"),Tnr=o("TFLongformerForMaskedLM"),Mnr=o(" (Longformer model)"),Enr=l(),pT=a("li"),gue=a("strong"),Cnr=o("mobilebert"),wnr=o(" \u2014 "),nX=a("a"),Anr=o("TFMobileBertForMaskedLM"),ynr=o(" (MobileBERT model)"),Lnr=l(),uT=a("li"),hue=a("strong"),xnr=o("mpnet"),$nr=o(" \u2014 "),sX=a("a"),knr=o("TFMPNetForMaskedLM"),Snr=o(" (MPNet model)"),Rnr=l(),_T=a("li"),pue=a("strong"),Bnr=o("rembert"),Pnr=o(" \u2014 "),lX=a("a"),Inr=o("TFRemBertForMaskedLM"),qnr=o(" (RemBERT model)"),Nnr=l(),bT=a("li"),uue=a("strong"),jnr=o("roberta"),Dnr=o(" \u2014 "),iX=a("a"),Gnr=o("TFRobertaForMaskedLM"),Onr=o(" (RoBERTa model)"),Vnr=l(),FT=a("li"),_ue=a("strong"),Xnr=o("roformer"),znr=o(" \u2014 "),dX=a("a"),Qnr=o("TFRoFormerForMaskedLM"),Wnr=o(" (RoFormer model)"),Hnr=l(),vT=a("li"),bue=a("strong"),Unr=o("tapas"),Jnr=o(" \u2014 "),cX=a("a"),Ynr=o("TFTapasForMaskedLM"),Knr=o(" (TAPAS model)"),Znr=l(),TT=a("li"),Fue=a("strong"),esr=o("xlm"),osr=o(" \u2014 "),fX=a("a"),rsr=o("TFXLMWithLMHeadModel"),tsr=o(" (XLM model)"),asr=l(),MT=a("li"),vue=a("strong"),nsr=o("xlm-roberta"),ssr=o(" \u2014 "),mX=a("a"),lsr=o("TFXLMRobertaForMaskedLM"),isr=o(" (XLM-RoBERTa model)"),dsr=l(),v(ET.$$.fragment),Vke=l(),qd=a("h2"),CT=a("a"),Tue=a("span"),v(By.$$.fragment),csr=l(),Mue=a("span"),fsr=o("TFAutoModelForSeq2SeqLM"),Xke=l(),er=a("div"),v(Py.$$.fragment),msr=l(),Nd=a("p"),gsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gX=a("a"),hsr=o("from_pretrained()"),psr=o(" class method or the "),hX=a("a"),usr=o("from_config()"),_sr=o(` class
method.`),bsr=l(),Iy=a("p"),Fsr=o("This class cannot be instantiated directly using "),Eue=a("code"),vsr=o("__init__()"),Tsr=o(" (throws an error)."),Msr=l(),yt=a("div"),v(qy.$$.fragment),Esr=l(),Cue=a("p"),Csr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),wsr=l(),jd=a("p"),Asr=o(`Note:
Loading a model from its configuration file does `),wue=a("strong"),ysr=o("not"),Lsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pX=a("a"),xsr=o("from_pretrained()"),$sr=o(" to load the model weights."),ksr=l(),v(wT.$$.fragment),Ssr=l(),yr=a("div"),v(Ny.$$.fragment),Rsr=l(),Aue=a("p"),Bsr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Psr=l(),Ka=a("p"),Isr=o("The model class to instantiate is selected based on the "),yue=a("code"),qsr=o("model_type"),Nsr=o(` property of the config object (either
passed as an argument or loaded from `),Lue=a("code"),jsr=o("pretrained_model_name_or_path"),Dsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xue=a("code"),Gsr=o("pretrained_model_name_or_path"),Osr=o(":"),Vsr=l(),Ee=a("ul"),AT=a("li"),$ue=a("strong"),Xsr=o("bart"),zsr=o(" \u2014 "),uX=a("a"),Qsr=o("TFBartForConditionalGeneration"),Wsr=o(" (BART model)"),Hsr=l(),yT=a("li"),kue=a("strong"),Usr=o("blenderbot"),Jsr=o(" \u2014 "),_X=a("a"),Ysr=o("TFBlenderbotForConditionalGeneration"),Ksr=o(" (Blenderbot model)"),Zsr=l(),LT=a("li"),Sue=a("strong"),elr=o("blenderbot-small"),olr=o(" \u2014 "),bX=a("a"),rlr=o("TFBlenderbotSmallForConditionalGeneration"),tlr=o(" (BlenderbotSmall model)"),alr=l(),xT=a("li"),Rue=a("strong"),nlr=o("encoder-decoder"),slr=o(" \u2014 "),FX=a("a"),llr=o("TFEncoderDecoderModel"),ilr=o(" (Encoder decoder model)"),dlr=l(),$T=a("li"),Bue=a("strong"),clr=o("led"),flr=o(" \u2014 "),vX=a("a"),mlr=o("TFLEDForConditionalGeneration"),glr=o(" (LED model)"),hlr=l(),kT=a("li"),Pue=a("strong"),plr=o("marian"),ulr=o(" \u2014 "),TX=a("a"),_lr=o("TFMarianMTModel"),blr=o(" (Marian model)"),Flr=l(),ST=a("li"),Iue=a("strong"),vlr=o("mbart"),Tlr=o(" \u2014 "),MX=a("a"),Mlr=o("TFMBartForConditionalGeneration"),Elr=o(" (mBART model)"),Clr=l(),RT=a("li"),que=a("strong"),wlr=o("mt5"),Alr=o(" \u2014 "),EX=a("a"),ylr=o("TFMT5ForConditionalGeneration"),Llr=o(" (mT5 model)"),xlr=l(),BT=a("li"),Nue=a("strong"),$lr=o("pegasus"),klr=o(" \u2014 "),CX=a("a"),Slr=o("TFPegasusForConditionalGeneration"),Rlr=o(" (Pegasus model)"),Blr=l(),PT=a("li"),jue=a("strong"),Plr=o("t5"),Ilr=o(" \u2014 "),wX=a("a"),qlr=o("TFT5ForConditionalGeneration"),Nlr=o(" (T5 model)"),jlr=l(),v(IT.$$.fragment),zke=l(),Dd=a("h2"),qT=a("a"),Due=a("span"),v(jy.$$.fragment),Dlr=l(),Gue=a("span"),Glr=o("TFAutoModelForSequenceClassification"),Qke=l(),or=a("div"),v(Dy.$$.fragment),Olr=l(),Gd=a("p"),Vlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),AX=a("a"),Xlr=o("from_pretrained()"),zlr=o(" class method or the "),yX=a("a"),Qlr=o("from_config()"),Wlr=o(` class
method.`),Hlr=l(),Gy=a("p"),Ulr=o("This class cannot be instantiated directly using "),Oue=a("code"),Jlr=o("__init__()"),Ylr=o(" (throws an error)."),Klr=l(),Lt=a("div"),v(Oy.$$.fragment),Zlr=l(),Vue=a("p"),eir=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),oir=l(),Od=a("p"),rir=o(`Note:
Loading a model from its configuration file does `),Xue=a("strong"),tir=o("not"),air=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LX=a("a"),nir=o("from_pretrained()"),sir=o(" to load the model weights."),lir=l(),v(NT.$$.fragment),iir=l(),Lr=a("div"),v(Vy.$$.fragment),dir=l(),zue=a("p"),cir=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),fir=l(),Za=a("p"),mir=o("The model class to instantiate is selected based on the "),Que=a("code"),gir=o("model_type"),hir=o(` property of the config object (either
passed as an argument or loaded from `),Wue=a("code"),pir=o("pretrained_model_name_or_path"),uir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hue=a("code"),_ir=o("pretrained_model_name_or_path"),bir=o(":"),Fir=l(),ee=a("ul"),jT=a("li"),Uue=a("strong"),vir=o("albert"),Tir=o(" \u2014 "),xX=a("a"),Mir=o("TFAlbertForSequenceClassification"),Eir=o(" (ALBERT model)"),Cir=l(),DT=a("li"),Jue=a("strong"),wir=o("bert"),Air=o(" \u2014 "),$X=a("a"),yir=o("TFBertForSequenceClassification"),Lir=o(" (BERT model)"),xir=l(),GT=a("li"),Yue=a("strong"),$ir=o("camembert"),kir=o(" \u2014 "),kX=a("a"),Sir=o("TFCamembertForSequenceClassification"),Rir=o(" (CamemBERT model)"),Bir=l(),OT=a("li"),Kue=a("strong"),Pir=o("convbert"),Iir=o(" \u2014 "),SX=a("a"),qir=o("TFConvBertForSequenceClassification"),Nir=o(" (ConvBERT model)"),jir=l(),VT=a("li"),Zue=a("strong"),Dir=o("ctrl"),Gir=o(" \u2014 "),RX=a("a"),Oir=o("TFCTRLForSequenceClassification"),Vir=o(" (CTRL model)"),Xir=l(),XT=a("li"),e_e=a("strong"),zir=o("deberta"),Qir=o(" \u2014 "),BX=a("a"),Wir=o("TFDebertaForSequenceClassification"),Hir=o(" (DeBERTa model)"),Uir=l(),zT=a("li"),o_e=a("strong"),Jir=o("deberta-v2"),Yir=o(" \u2014 "),PX=a("a"),Kir=o("TFDebertaV2ForSequenceClassification"),Zir=o(" (DeBERTa-v2 model)"),edr=l(),QT=a("li"),r_e=a("strong"),odr=o("distilbert"),rdr=o(" \u2014 "),IX=a("a"),tdr=o("TFDistilBertForSequenceClassification"),adr=o(" (DistilBERT model)"),ndr=l(),WT=a("li"),t_e=a("strong"),sdr=o("electra"),ldr=o(" \u2014 "),qX=a("a"),idr=o("TFElectraForSequenceClassification"),ddr=o(" (ELECTRA model)"),cdr=l(),HT=a("li"),a_e=a("strong"),fdr=o("flaubert"),mdr=o(" \u2014 "),NX=a("a"),gdr=o("TFFlaubertForSequenceClassification"),hdr=o(" (FlauBERT model)"),pdr=l(),UT=a("li"),n_e=a("strong"),udr=o("funnel"),_dr=o(" \u2014 "),jX=a("a"),bdr=o("TFFunnelForSequenceClassification"),Fdr=o(" (Funnel Transformer model)"),vdr=l(),JT=a("li"),s_e=a("strong"),Tdr=o("gpt2"),Mdr=o(" \u2014 "),DX=a("a"),Edr=o("TFGPT2ForSequenceClassification"),Cdr=o(" (OpenAI GPT-2 model)"),wdr=l(),YT=a("li"),l_e=a("strong"),Adr=o("layoutlm"),ydr=o(" \u2014 "),GX=a("a"),Ldr=o("TFLayoutLMForSequenceClassification"),xdr=o(" (LayoutLM model)"),$dr=l(),KT=a("li"),i_e=a("strong"),kdr=o("longformer"),Sdr=o(" \u2014 "),OX=a("a"),Rdr=o("TFLongformerForSequenceClassification"),Bdr=o(" (Longformer model)"),Pdr=l(),ZT=a("li"),d_e=a("strong"),Idr=o("mobilebert"),qdr=o(" \u2014 "),VX=a("a"),Ndr=o("TFMobileBertForSequenceClassification"),jdr=o(" (MobileBERT model)"),Ddr=l(),eM=a("li"),c_e=a("strong"),Gdr=o("mpnet"),Odr=o(" \u2014 "),XX=a("a"),Vdr=o("TFMPNetForSequenceClassification"),Xdr=o(" (MPNet model)"),zdr=l(),oM=a("li"),f_e=a("strong"),Qdr=o("openai-gpt"),Wdr=o(" \u2014 "),zX=a("a"),Hdr=o("TFOpenAIGPTForSequenceClassification"),Udr=o(" (OpenAI GPT model)"),Jdr=l(),rM=a("li"),m_e=a("strong"),Ydr=o("rembert"),Kdr=o(" \u2014 "),QX=a("a"),Zdr=o("TFRemBertForSequenceClassification"),ecr=o(" (RemBERT model)"),ocr=l(),tM=a("li"),g_e=a("strong"),rcr=o("roberta"),tcr=o(" \u2014 "),WX=a("a"),acr=o("TFRobertaForSequenceClassification"),ncr=o(" (RoBERTa model)"),scr=l(),aM=a("li"),h_e=a("strong"),lcr=o("roformer"),icr=o(" \u2014 "),HX=a("a"),dcr=o("TFRoFormerForSequenceClassification"),ccr=o(" (RoFormer model)"),fcr=l(),nM=a("li"),p_e=a("strong"),mcr=o("tapas"),gcr=o(" \u2014 "),UX=a("a"),hcr=o("TFTapasForSequenceClassification"),pcr=o(" (TAPAS model)"),ucr=l(),sM=a("li"),u_e=a("strong"),_cr=o("transfo-xl"),bcr=o(" \u2014 "),JX=a("a"),Fcr=o("TFTransfoXLForSequenceClassification"),vcr=o(" (Transformer-XL model)"),Tcr=l(),lM=a("li"),__e=a("strong"),Mcr=o("xlm"),Ecr=o(" \u2014 "),YX=a("a"),Ccr=o("TFXLMForSequenceClassification"),wcr=o(" (XLM model)"),Acr=l(),iM=a("li"),b_e=a("strong"),ycr=o("xlm-roberta"),Lcr=o(" \u2014 "),KX=a("a"),xcr=o("TFXLMRobertaForSequenceClassification"),$cr=o(" (XLM-RoBERTa model)"),kcr=l(),dM=a("li"),F_e=a("strong"),Scr=o("xlnet"),Rcr=o(" \u2014 "),ZX=a("a"),Bcr=o("TFXLNetForSequenceClassification"),Pcr=o(" (XLNet model)"),Icr=l(),v(cM.$$.fragment),Wke=l(),Vd=a("h2"),fM=a("a"),v_e=a("span"),v(Xy.$$.fragment),qcr=l(),T_e=a("span"),Ncr=o("TFAutoModelForMultipleChoice"),Hke=l(),rr=a("div"),v(zy.$$.fragment),jcr=l(),Xd=a("p"),Dcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ez=a("a"),Gcr=o("from_pretrained()"),Ocr=o(" class method or the "),oz=a("a"),Vcr=o("from_config()"),Xcr=o(` class
method.`),zcr=l(),Qy=a("p"),Qcr=o("This class cannot be instantiated directly using "),M_e=a("code"),Wcr=o("__init__()"),Hcr=o(" (throws an error)."),Ucr=l(),xt=a("div"),v(Wy.$$.fragment),Jcr=l(),E_e=a("p"),Ycr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Kcr=l(),zd=a("p"),Zcr=o(`Note:
Loading a model from its configuration file does `),C_e=a("strong"),efr=o("not"),ofr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rz=a("a"),rfr=o("from_pretrained()"),tfr=o(" to load the model weights."),afr=l(),v(mM.$$.fragment),nfr=l(),xr=a("div"),v(Hy.$$.fragment),sfr=l(),w_e=a("p"),lfr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ifr=l(),en=a("p"),dfr=o("The model class to instantiate is selected based on the "),A_e=a("code"),cfr=o("model_type"),ffr=o(` property of the config object (either
passed as an argument or loaded from `),y_e=a("code"),mfr=o("pretrained_model_name_or_path"),gfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L_e=a("code"),hfr=o("pretrained_model_name_or_path"),pfr=o(":"),ufr=l(),ge=a("ul"),gM=a("li"),x_e=a("strong"),_fr=o("albert"),bfr=o(" \u2014 "),tz=a("a"),Ffr=o("TFAlbertForMultipleChoice"),vfr=o(" (ALBERT model)"),Tfr=l(),hM=a("li"),$_e=a("strong"),Mfr=o("bert"),Efr=o(" \u2014 "),az=a("a"),Cfr=o("TFBertForMultipleChoice"),wfr=o(" (BERT model)"),Afr=l(),pM=a("li"),k_e=a("strong"),yfr=o("camembert"),Lfr=o(" \u2014 "),nz=a("a"),xfr=o("TFCamembertForMultipleChoice"),$fr=o(" (CamemBERT model)"),kfr=l(),uM=a("li"),S_e=a("strong"),Sfr=o("convbert"),Rfr=o(" \u2014 "),sz=a("a"),Bfr=o("TFConvBertForMultipleChoice"),Pfr=o(" (ConvBERT model)"),Ifr=l(),_M=a("li"),R_e=a("strong"),qfr=o("distilbert"),Nfr=o(" \u2014 "),lz=a("a"),jfr=o("TFDistilBertForMultipleChoice"),Dfr=o(" (DistilBERT model)"),Gfr=l(),bM=a("li"),B_e=a("strong"),Ofr=o("electra"),Vfr=o(" \u2014 "),iz=a("a"),Xfr=o("TFElectraForMultipleChoice"),zfr=o(" (ELECTRA model)"),Qfr=l(),FM=a("li"),P_e=a("strong"),Wfr=o("flaubert"),Hfr=o(" \u2014 "),dz=a("a"),Ufr=o("TFFlaubertForMultipleChoice"),Jfr=o(" (FlauBERT model)"),Yfr=l(),vM=a("li"),I_e=a("strong"),Kfr=o("funnel"),Zfr=o(" \u2014 "),cz=a("a"),emr=o("TFFunnelForMultipleChoice"),omr=o(" (Funnel Transformer model)"),rmr=l(),TM=a("li"),q_e=a("strong"),tmr=o("longformer"),amr=o(" \u2014 "),fz=a("a"),nmr=o("TFLongformerForMultipleChoice"),smr=o(" (Longformer model)"),lmr=l(),MM=a("li"),N_e=a("strong"),imr=o("mobilebert"),dmr=o(" \u2014 "),mz=a("a"),cmr=o("TFMobileBertForMultipleChoice"),fmr=o(" (MobileBERT model)"),mmr=l(),EM=a("li"),j_e=a("strong"),gmr=o("mpnet"),hmr=o(" \u2014 "),gz=a("a"),pmr=o("TFMPNetForMultipleChoice"),umr=o(" (MPNet model)"),_mr=l(),CM=a("li"),D_e=a("strong"),bmr=o("rembert"),Fmr=o(" \u2014 "),hz=a("a"),vmr=o("TFRemBertForMultipleChoice"),Tmr=o(" (RemBERT model)"),Mmr=l(),wM=a("li"),G_e=a("strong"),Emr=o("roberta"),Cmr=o(" \u2014 "),pz=a("a"),wmr=o("TFRobertaForMultipleChoice"),Amr=o(" (RoBERTa model)"),ymr=l(),AM=a("li"),O_e=a("strong"),Lmr=o("roformer"),xmr=o(" \u2014 "),uz=a("a"),$mr=o("TFRoFormerForMultipleChoice"),kmr=o(" (RoFormer model)"),Smr=l(),yM=a("li"),V_e=a("strong"),Rmr=o("xlm"),Bmr=o(" \u2014 "),_z=a("a"),Pmr=o("TFXLMForMultipleChoice"),Imr=o(" (XLM model)"),qmr=l(),LM=a("li"),X_e=a("strong"),Nmr=o("xlm-roberta"),jmr=o(" \u2014 "),bz=a("a"),Dmr=o("TFXLMRobertaForMultipleChoice"),Gmr=o(" (XLM-RoBERTa model)"),Omr=l(),xM=a("li"),z_e=a("strong"),Vmr=o("xlnet"),Xmr=o(" \u2014 "),Fz=a("a"),zmr=o("TFXLNetForMultipleChoice"),Qmr=o(" (XLNet model)"),Wmr=l(),v($M.$$.fragment),Uke=l(),Qd=a("h2"),kM=a("a"),Q_e=a("span"),v(Uy.$$.fragment),Hmr=l(),W_e=a("span"),Umr=o("TFAutoModelForTableQuestionAnswering"),Jke=l(),tr=a("div"),v(Jy.$$.fragment),Jmr=l(),Wd=a("p"),Ymr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),vz=a("a"),Kmr=o("from_pretrained()"),Zmr=o(" class method or the "),Tz=a("a"),egr=o("from_config()"),ogr=o(` class
method.`),rgr=l(),Yy=a("p"),tgr=o("This class cannot be instantiated directly using "),H_e=a("code"),agr=o("__init__()"),ngr=o(" (throws an error)."),sgr=l(),$t=a("div"),v(Ky.$$.fragment),lgr=l(),U_e=a("p"),igr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),dgr=l(),Hd=a("p"),cgr=o(`Note:
Loading a model from its configuration file does `),J_e=a("strong"),fgr=o("not"),mgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mz=a("a"),ggr=o("from_pretrained()"),hgr=o(" to load the model weights."),pgr=l(),v(SM.$$.fragment),ugr=l(),$r=a("div"),v(Zy.$$.fragment),_gr=l(),Y_e=a("p"),bgr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Fgr=l(),on=a("p"),vgr=o("The model class to instantiate is selected based on the "),K_e=a("code"),Tgr=o("model_type"),Mgr=o(` property of the config object (either
passed as an argument or loaded from `),Z_e=a("code"),Egr=o("pretrained_model_name_or_path"),Cgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e2e=a("code"),wgr=o("pretrained_model_name_or_path"),Agr=o(":"),ygr=l(),o2e=a("ul"),RM=a("li"),r2e=a("strong"),Lgr=o("tapas"),xgr=o(" \u2014 "),Ez=a("a"),$gr=o("TFTapasForQuestionAnswering"),kgr=o(" (TAPAS model)"),Sgr=l(),v(BM.$$.fragment),Yke=l(),Ud=a("h2"),PM=a("a"),t2e=a("span"),v(eL.$$.fragment),Rgr=l(),a2e=a("span"),Bgr=o("TFAutoModelForTokenClassification"),Kke=l(),ar=a("div"),v(oL.$$.fragment),Pgr=l(),Jd=a("p"),Igr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Cz=a("a"),qgr=o("from_pretrained()"),Ngr=o(" class method or the "),wz=a("a"),jgr=o("from_config()"),Dgr=o(` class
method.`),Ggr=l(),rL=a("p"),Ogr=o("This class cannot be instantiated directly using "),n2e=a("code"),Vgr=o("__init__()"),Xgr=o(" (throws an error)."),zgr=l(),kt=a("div"),v(tL.$$.fragment),Qgr=l(),s2e=a("p"),Wgr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Hgr=l(),Yd=a("p"),Ugr=o(`Note:
Loading a model from its configuration file does `),l2e=a("strong"),Jgr=o("not"),Ygr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Az=a("a"),Kgr=o("from_pretrained()"),Zgr=o(" to load the model weights."),ehr=l(),v(IM.$$.fragment),ohr=l(),kr=a("div"),v(aL.$$.fragment),rhr=l(),i2e=a("p"),thr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ahr=l(),rn=a("p"),nhr=o("The model class to instantiate is selected based on the "),d2e=a("code"),shr=o("model_type"),lhr=o(` property of the config object (either
passed as an argument or loaded from `),c2e=a("code"),ihr=o("pretrained_model_name_or_path"),dhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f2e=a("code"),chr=o("pretrained_model_name_or_path"),fhr=o(":"),mhr=l(),le=a("ul"),qM=a("li"),m2e=a("strong"),ghr=o("albert"),hhr=o(" \u2014 "),yz=a("a"),phr=o("TFAlbertForTokenClassification"),uhr=o(" (ALBERT model)"),_hr=l(),NM=a("li"),g2e=a("strong"),bhr=o("bert"),Fhr=o(" \u2014 "),Lz=a("a"),vhr=o("TFBertForTokenClassification"),Thr=o(" (BERT model)"),Mhr=l(),jM=a("li"),h2e=a("strong"),Ehr=o("camembert"),Chr=o(" \u2014 "),xz=a("a"),whr=o("TFCamembertForTokenClassification"),Ahr=o(" (CamemBERT model)"),yhr=l(),DM=a("li"),p2e=a("strong"),Lhr=o("convbert"),xhr=o(" \u2014 "),$z=a("a"),$hr=o("TFConvBertForTokenClassification"),khr=o(" (ConvBERT model)"),Shr=l(),GM=a("li"),u2e=a("strong"),Rhr=o("deberta"),Bhr=o(" \u2014 "),kz=a("a"),Phr=o("TFDebertaForTokenClassification"),Ihr=o(" (DeBERTa model)"),qhr=l(),OM=a("li"),_2e=a("strong"),Nhr=o("deberta-v2"),jhr=o(" \u2014 "),Sz=a("a"),Dhr=o("TFDebertaV2ForTokenClassification"),Ghr=o(" (DeBERTa-v2 model)"),Ohr=l(),VM=a("li"),b2e=a("strong"),Vhr=o("distilbert"),Xhr=o(" \u2014 "),Rz=a("a"),zhr=o("TFDistilBertForTokenClassification"),Qhr=o(" (DistilBERT model)"),Whr=l(),XM=a("li"),F2e=a("strong"),Hhr=o("electra"),Uhr=o(" \u2014 "),Bz=a("a"),Jhr=o("TFElectraForTokenClassification"),Yhr=o(" (ELECTRA model)"),Khr=l(),zM=a("li"),v2e=a("strong"),Zhr=o("flaubert"),epr=o(" \u2014 "),Pz=a("a"),opr=o("TFFlaubertForTokenClassification"),rpr=o(" (FlauBERT model)"),tpr=l(),QM=a("li"),T2e=a("strong"),apr=o("funnel"),npr=o(" \u2014 "),Iz=a("a"),spr=o("TFFunnelForTokenClassification"),lpr=o(" (Funnel Transformer model)"),ipr=l(),WM=a("li"),M2e=a("strong"),dpr=o("layoutlm"),cpr=o(" \u2014 "),qz=a("a"),fpr=o("TFLayoutLMForTokenClassification"),mpr=o(" (LayoutLM model)"),gpr=l(),HM=a("li"),E2e=a("strong"),hpr=o("longformer"),ppr=o(" \u2014 "),Nz=a("a"),upr=o("TFLongformerForTokenClassification"),_pr=o(" (Longformer model)"),bpr=l(),UM=a("li"),C2e=a("strong"),Fpr=o("mobilebert"),vpr=o(" \u2014 "),jz=a("a"),Tpr=o("TFMobileBertForTokenClassification"),Mpr=o(" (MobileBERT model)"),Epr=l(),JM=a("li"),w2e=a("strong"),Cpr=o("mpnet"),wpr=o(" \u2014 "),Dz=a("a"),Apr=o("TFMPNetForTokenClassification"),ypr=o(" (MPNet model)"),Lpr=l(),YM=a("li"),A2e=a("strong"),xpr=o("rembert"),$pr=o(" \u2014 "),Gz=a("a"),kpr=o("TFRemBertForTokenClassification"),Spr=o(" (RemBERT model)"),Rpr=l(),KM=a("li"),y2e=a("strong"),Bpr=o("roberta"),Ppr=o(" \u2014 "),Oz=a("a"),Ipr=o("TFRobertaForTokenClassification"),qpr=o(" (RoBERTa model)"),Npr=l(),ZM=a("li"),L2e=a("strong"),jpr=o("roformer"),Dpr=o(" \u2014 "),Vz=a("a"),Gpr=o("TFRoFormerForTokenClassification"),Opr=o(" (RoFormer model)"),Vpr=l(),e9=a("li"),x2e=a("strong"),Xpr=o("xlm"),zpr=o(" \u2014 "),Xz=a("a"),Qpr=o("TFXLMForTokenClassification"),Wpr=o(" (XLM model)"),Hpr=l(),o9=a("li"),$2e=a("strong"),Upr=o("xlm-roberta"),Jpr=o(" \u2014 "),zz=a("a"),Ypr=o("TFXLMRobertaForTokenClassification"),Kpr=o(" (XLM-RoBERTa model)"),Zpr=l(),r9=a("li"),k2e=a("strong"),eur=o("xlnet"),our=o(" \u2014 "),Qz=a("a"),rur=o("TFXLNetForTokenClassification"),tur=o(" (XLNet model)"),aur=l(),v(t9.$$.fragment),Zke=l(),Kd=a("h2"),a9=a("a"),S2e=a("span"),v(nL.$$.fragment),nur=l(),R2e=a("span"),sur=o("TFAutoModelForQuestionAnswering"),eSe=l(),nr=a("div"),v(sL.$$.fragment),lur=l(),Zd=a("p"),iur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Wz=a("a"),dur=o("from_pretrained()"),cur=o(" class method or the "),Hz=a("a"),fur=o("from_config()"),mur=o(` class
method.`),gur=l(),lL=a("p"),hur=o("This class cannot be instantiated directly using "),B2e=a("code"),pur=o("__init__()"),uur=o(" (throws an error)."),_ur=l(),St=a("div"),v(iL.$$.fragment),bur=l(),P2e=a("p"),Fur=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),vur=l(),ec=a("p"),Tur=o(`Note:
Loading a model from its configuration file does `),I2e=a("strong"),Mur=o("not"),Eur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uz=a("a"),Cur=o("from_pretrained()"),wur=o(" to load the model weights."),Aur=l(),v(n9.$$.fragment),yur=l(),Sr=a("div"),v(dL.$$.fragment),Lur=l(),q2e=a("p"),xur=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),$ur=l(),tn=a("p"),kur=o("The model class to instantiate is selected based on the "),N2e=a("code"),Sur=o("model_type"),Rur=o(` property of the config object (either
passed as an argument or loaded from `),j2e=a("code"),Bur=o("pretrained_model_name_or_path"),Pur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D2e=a("code"),Iur=o("pretrained_model_name_or_path"),qur=o(":"),Nur=l(),ie=a("ul"),s9=a("li"),G2e=a("strong"),jur=o("albert"),Dur=o(" \u2014 "),Jz=a("a"),Gur=o("TFAlbertForQuestionAnswering"),Our=o(" (ALBERT model)"),Vur=l(),l9=a("li"),O2e=a("strong"),Xur=o("bert"),zur=o(" \u2014 "),Yz=a("a"),Qur=o("TFBertForQuestionAnswering"),Wur=o(" (BERT model)"),Hur=l(),i9=a("li"),V2e=a("strong"),Uur=o("camembert"),Jur=o(" \u2014 "),Kz=a("a"),Yur=o("TFCamembertForQuestionAnswering"),Kur=o(" (CamemBERT model)"),Zur=l(),d9=a("li"),X2e=a("strong"),e_r=o("convbert"),o_r=o(" \u2014 "),Zz=a("a"),r_r=o("TFConvBertForQuestionAnswering"),t_r=o(" (ConvBERT model)"),a_r=l(),c9=a("li"),z2e=a("strong"),n_r=o("deberta"),s_r=o(" \u2014 "),eQ=a("a"),l_r=o("TFDebertaForQuestionAnswering"),i_r=o(" (DeBERTa model)"),d_r=l(),f9=a("li"),Q2e=a("strong"),c_r=o("deberta-v2"),f_r=o(" \u2014 "),oQ=a("a"),m_r=o("TFDebertaV2ForQuestionAnswering"),g_r=o(" (DeBERTa-v2 model)"),h_r=l(),m9=a("li"),W2e=a("strong"),p_r=o("distilbert"),u_r=o(" \u2014 "),rQ=a("a"),__r=o("TFDistilBertForQuestionAnswering"),b_r=o(" (DistilBERT model)"),F_r=l(),g9=a("li"),H2e=a("strong"),v_r=o("electra"),T_r=o(" \u2014 "),tQ=a("a"),M_r=o("TFElectraForQuestionAnswering"),E_r=o(" (ELECTRA model)"),C_r=l(),h9=a("li"),U2e=a("strong"),w_r=o("flaubert"),A_r=o(" \u2014 "),aQ=a("a"),y_r=o("TFFlaubertForQuestionAnsweringSimple"),L_r=o(" (FlauBERT model)"),x_r=l(),p9=a("li"),J2e=a("strong"),$_r=o("funnel"),k_r=o(" \u2014 "),nQ=a("a"),S_r=o("TFFunnelForQuestionAnswering"),R_r=o(" (Funnel Transformer model)"),B_r=l(),u9=a("li"),Y2e=a("strong"),P_r=o("longformer"),I_r=o(" \u2014 "),sQ=a("a"),q_r=o("TFLongformerForQuestionAnswering"),N_r=o(" (Longformer model)"),j_r=l(),_9=a("li"),K2e=a("strong"),D_r=o("mobilebert"),G_r=o(" \u2014 "),lQ=a("a"),O_r=o("TFMobileBertForQuestionAnswering"),V_r=o(" (MobileBERT model)"),X_r=l(),b9=a("li"),Z2e=a("strong"),z_r=o("mpnet"),Q_r=o(" \u2014 "),iQ=a("a"),W_r=o("TFMPNetForQuestionAnswering"),H_r=o(" (MPNet model)"),U_r=l(),F9=a("li"),e1e=a("strong"),J_r=o("rembert"),Y_r=o(" \u2014 "),dQ=a("a"),K_r=o("TFRemBertForQuestionAnswering"),Z_r=o(" (RemBERT model)"),e2r=l(),v9=a("li"),o1e=a("strong"),o2r=o("roberta"),r2r=o(" \u2014 "),cQ=a("a"),t2r=o("TFRobertaForQuestionAnswering"),a2r=o(" (RoBERTa model)"),n2r=l(),T9=a("li"),r1e=a("strong"),s2r=o("roformer"),l2r=o(" \u2014 "),fQ=a("a"),i2r=o("TFRoFormerForQuestionAnswering"),d2r=o(" (RoFormer model)"),c2r=l(),M9=a("li"),t1e=a("strong"),f2r=o("xlm"),m2r=o(" \u2014 "),mQ=a("a"),g2r=o("TFXLMForQuestionAnsweringSimple"),h2r=o(" (XLM model)"),p2r=l(),E9=a("li"),a1e=a("strong"),u2r=o("xlm-roberta"),_2r=o(" \u2014 "),gQ=a("a"),b2r=o("TFXLMRobertaForQuestionAnswering"),F2r=o(" (XLM-RoBERTa model)"),v2r=l(),C9=a("li"),n1e=a("strong"),T2r=o("xlnet"),M2r=o(" \u2014 "),hQ=a("a"),E2r=o("TFXLNetForQuestionAnsweringSimple"),C2r=o(" (XLNet model)"),w2r=l(),v(w9.$$.fragment),oSe=l(),oc=a("h2"),A9=a("a"),s1e=a("span"),v(cL.$$.fragment),A2r=l(),l1e=a("span"),y2r=o("TFAutoModelForVision2Seq"),rSe=l(),sr=a("div"),v(fL.$$.fragment),L2r=l(),rc=a("p"),x2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),pQ=a("a"),$2r=o("from_pretrained()"),k2r=o(" class method or the "),uQ=a("a"),S2r=o("from_config()"),R2r=o(` class
method.`),B2r=l(),mL=a("p"),P2r=o("This class cannot be instantiated directly using "),i1e=a("code"),I2r=o("__init__()"),q2r=o(" (throws an error)."),N2r=l(),Rt=a("div"),v(gL.$$.fragment),j2r=l(),d1e=a("p"),D2r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),G2r=l(),tc=a("p"),O2r=o(`Note:
Loading a model from its configuration file does `),c1e=a("strong"),V2r=o("not"),X2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_Q=a("a"),z2r=o("from_pretrained()"),Q2r=o(" to load the model weights."),W2r=l(),v(y9.$$.fragment),H2r=l(),Rr=a("div"),v(hL.$$.fragment),U2r=l(),f1e=a("p"),J2r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Y2r=l(),an=a("p"),K2r=o("The model class to instantiate is selected based on the "),m1e=a("code"),Z2r=o("model_type"),e1r=o(` property of the config object (either
passed as an argument or loaded from `),g1e=a("code"),o1r=o("pretrained_model_name_or_path"),r1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h1e=a("code"),t1r=o("pretrained_model_name_or_path"),a1r=o(":"),n1r=l(),p1e=a("ul"),L9=a("li"),u1e=a("strong"),s1r=o("vision-encoder-decoder"),l1r=o(" \u2014 "),bQ=a("a"),i1r=o("TFVisionEncoderDecoderModel"),d1r=o(" (Vision Encoder decoder model)"),c1r=l(),v(x9.$$.fragment),tSe=l(),ac=a("h2"),$9=a("a"),_1e=a("span"),v(pL.$$.fragment),f1r=l(),b1e=a("span"),m1r=o("TFAutoModelForSpeechSeq2Seq"),aSe=l(),lr=a("div"),v(uL.$$.fragment),g1r=l(),nc=a("p"),h1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),FQ=a("a"),p1r=o("from_pretrained()"),u1r=o(" class method or the "),vQ=a("a"),_1r=o("from_config()"),b1r=o(` class
method.`),F1r=l(),_L=a("p"),v1r=o("This class cannot be instantiated directly using "),F1e=a("code"),T1r=o("__init__()"),M1r=o(" (throws an error)."),E1r=l(),Bt=a("div"),v(bL.$$.fragment),C1r=l(),v1e=a("p"),w1r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),A1r=l(),sc=a("p"),y1r=o(`Note:
Loading a model from its configuration file does `),T1e=a("strong"),L1r=o("not"),x1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=a("a"),$1r=o("from_pretrained()"),k1r=o(" to load the model weights."),S1r=l(),v(k9.$$.fragment),R1r=l(),Br=a("div"),v(FL.$$.fragment),B1r=l(),M1e=a("p"),P1r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),I1r=l(),nn=a("p"),q1r=o("The model class to instantiate is selected based on the "),E1e=a("code"),N1r=o("model_type"),j1r=o(` property of the config object (either
passed as an argument or loaded from `),C1e=a("code"),D1r=o("pretrained_model_name_or_path"),G1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w1e=a("code"),O1r=o("pretrained_model_name_or_path"),V1r=o(":"),X1r=l(),A1e=a("ul"),S9=a("li"),y1e=a("strong"),z1r=o("speech_to_text"),Q1r=o(" \u2014 "),MQ=a("a"),W1r=o("TFSpeech2TextForConditionalGeneration"),H1r=o(" (Speech2Text model)"),U1r=l(),v(R9.$$.fragment),nSe=l(),lc=a("h2"),B9=a("a"),L1e=a("span"),v(vL.$$.fragment),J1r=l(),x1e=a("span"),Y1r=o("FlaxAutoModel"),sSe=l(),ir=a("div"),v(TL.$$.fragment),K1r=l(),ic=a("p"),Z1r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),EQ=a("a"),ebr=o("from_pretrained()"),obr=o(" class method or the "),CQ=a("a"),rbr=o("from_config()"),tbr=o(` class
method.`),abr=l(),ML=a("p"),nbr=o("This class cannot be instantiated directly using "),$1e=a("code"),sbr=o("__init__()"),lbr=o(" (throws an error)."),ibr=l(),Pt=a("div"),v(EL.$$.fragment),dbr=l(),k1e=a("p"),cbr=o("Instantiates one of the base model classes of the library from a configuration."),fbr=l(),dc=a("p"),mbr=o(`Note:
Loading a model from its configuration file does `),S1e=a("strong"),gbr=o("not"),hbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wQ=a("a"),pbr=o("from_pretrained()"),ubr=o(" to load the model weights."),_br=l(),v(P9.$$.fragment),bbr=l(),Pr=a("div"),v(CL.$$.fragment),Fbr=l(),R1e=a("p"),vbr=o("Instantiate one of the base model classes of the library from a pretrained model."),Tbr=l(),sn=a("p"),Mbr=o("The model class to instantiate is selected based on the "),B1e=a("code"),Ebr=o("model_type"),Cbr=o(` property of the config object (either
passed as an argument or loaded from `),P1e=a("code"),wbr=o("pretrained_model_name_or_path"),Abr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I1e=a("code"),ybr=o("pretrained_model_name_or_path"),Lbr=o(":"),xbr=l(),oe=a("ul"),I9=a("li"),q1e=a("strong"),$br=o("albert"),kbr=o(" \u2014 "),AQ=a("a"),Sbr=o("FlaxAlbertModel"),Rbr=o(" (ALBERT model)"),Bbr=l(),q9=a("li"),N1e=a("strong"),Pbr=o("bart"),Ibr=o(" \u2014 "),yQ=a("a"),qbr=o("FlaxBartModel"),Nbr=o(" (BART model)"),jbr=l(),N9=a("li"),j1e=a("strong"),Dbr=o("beit"),Gbr=o(" \u2014 "),LQ=a("a"),Obr=o("FlaxBeitModel"),Vbr=o(" (BEiT model)"),Xbr=l(),j9=a("li"),D1e=a("strong"),zbr=o("bert"),Qbr=o(" \u2014 "),xQ=a("a"),Wbr=o("FlaxBertModel"),Hbr=o(" (BERT model)"),Ubr=l(),D9=a("li"),G1e=a("strong"),Jbr=o("big_bird"),Ybr=o(" \u2014 "),$Q=a("a"),Kbr=o("FlaxBigBirdModel"),Zbr=o(" (BigBird model)"),e5r=l(),G9=a("li"),O1e=a("strong"),o5r=o("blenderbot"),r5r=o(" \u2014 "),kQ=a("a"),t5r=o("FlaxBlenderbotModel"),a5r=o(" (Blenderbot model)"),n5r=l(),O9=a("li"),V1e=a("strong"),s5r=o("blenderbot-small"),l5r=o(" \u2014 "),SQ=a("a"),i5r=o("FlaxBlenderbotSmallModel"),d5r=o(" (BlenderbotSmall model)"),c5r=l(),V9=a("li"),X1e=a("strong"),f5r=o("clip"),m5r=o(" \u2014 "),RQ=a("a"),g5r=o("FlaxCLIPModel"),h5r=o(" (CLIP model)"),p5r=l(),X9=a("li"),z1e=a("strong"),u5r=o("distilbert"),_5r=o(" \u2014 "),BQ=a("a"),b5r=o("FlaxDistilBertModel"),F5r=o(" (DistilBERT model)"),v5r=l(),z9=a("li"),Q1e=a("strong"),T5r=o("electra"),M5r=o(" \u2014 "),PQ=a("a"),E5r=o("FlaxElectraModel"),C5r=o(" (ELECTRA model)"),w5r=l(),Q9=a("li"),W1e=a("strong"),A5r=o("gpt2"),y5r=o(" \u2014 "),IQ=a("a"),L5r=o("FlaxGPT2Model"),x5r=o(" (OpenAI GPT-2 model)"),$5r=l(),W9=a("li"),H1e=a("strong"),k5r=o("gpt_neo"),S5r=o(" \u2014 "),qQ=a("a"),R5r=o("FlaxGPTNeoModel"),B5r=o(" (GPT Neo model)"),P5r=l(),H9=a("li"),U1e=a("strong"),I5r=o("gptj"),q5r=o(" \u2014 "),NQ=a("a"),N5r=o("FlaxGPTJModel"),j5r=o(" (GPT-J model)"),D5r=l(),U9=a("li"),J1e=a("strong"),G5r=o("marian"),O5r=o(" \u2014 "),jQ=a("a"),V5r=o("FlaxMarianModel"),X5r=o(" (Marian model)"),z5r=l(),J9=a("li"),Y1e=a("strong"),Q5r=o("mbart"),W5r=o(" \u2014 "),DQ=a("a"),H5r=o("FlaxMBartModel"),U5r=o(" (mBART model)"),J5r=l(),Y9=a("li"),K1e=a("strong"),Y5r=o("mt5"),K5r=o(" \u2014 "),GQ=a("a"),Z5r=o("FlaxMT5Model"),eFr=o(" (mT5 model)"),oFr=l(),K9=a("li"),Z1e=a("strong"),rFr=o("pegasus"),tFr=o(" \u2014 "),OQ=a("a"),aFr=o("FlaxPegasusModel"),nFr=o(" (Pegasus model)"),sFr=l(),Z9=a("li"),ebe=a("strong"),lFr=o("roberta"),iFr=o(" \u2014 "),VQ=a("a"),dFr=o("FlaxRobertaModel"),cFr=o(" (RoBERTa model)"),fFr=l(),e4=a("li"),obe=a("strong"),mFr=o("roformer"),gFr=o(" \u2014 "),XQ=a("a"),hFr=o("FlaxRoFormerModel"),pFr=o(" (RoFormer model)"),uFr=l(),o4=a("li"),rbe=a("strong"),_Fr=o("t5"),bFr=o(" \u2014 "),zQ=a("a"),FFr=o("FlaxT5Model"),vFr=o(" (T5 model)"),TFr=l(),r4=a("li"),tbe=a("strong"),MFr=o("vision-text-dual-encoder"),EFr=o(" \u2014 "),QQ=a("a"),CFr=o("FlaxVisionTextDualEncoderModel"),wFr=o(" (VisionTextDualEncoder model)"),AFr=l(),t4=a("li"),abe=a("strong"),yFr=o("vit"),LFr=o(" \u2014 "),WQ=a("a"),xFr=o("FlaxViTModel"),$Fr=o(" (ViT model)"),kFr=l(),a4=a("li"),nbe=a("strong"),SFr=o("wav2vec2"),RFr=o(" \u2014 "),HQ=a("a"),BFr=o("FlaxWav2Vec2Model"),PFr=o(" (Wav2Vec2 model)"),IFr=l(),n4=a("li"),sbe=a("strong"),qFr=o("xglm"),NFr=o(" \u2014 "),UQ=a("a"),jFr=o("FlaxXGLMModel"),DFr=o(" (XGLM model)"),GFr=l(),s4=a("li"),lbe=a("strong"),OFr=o("xlm-roberta"),VFr=o(" \u2014 "),JQ=a("a"),XFr=o("FlaxXLMRobertaModel"),zFr=o(" (XLM-RoBERTa model)"),QFr=l(),v(l4.$$.fragment),lSe=l(),cc=a("h2"),i4=a("a"),ibe=a("span"),v(wL.$$.fragment),WFr=l(),dbe=a("span"),HFr=o("FlaxAutoModelForCausalLM"),iSe=l(),dr=a("div"),v(AL.$$.fragment),UFr=l(),fc=a("p"),JFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),YQ=a("a"),YFr=o("from_pretrained()"),KFr=o(" class method or the "),KQ=a("a"),ZFr=o("from_config()"),evr=o(` class
method.`),ovr=l(),yL=a("p"),rvr=o("This class cannot be instantiated directly using "),cbe=a("code"),tvr=o("__init__()"),avr=o(" (throws an error)."),nvr=l(),It=a("div"),v(LL.$$.fragment),svr=l(),fbe=a("p"),lvr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ivr=l(),mc=a("p"),dvr=o(`Note:
Loading a model from its configuration file does `),mbe=a("strong"),cvr=o("not"),fvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZQ=a("a"),mvr=o("from_pretrained()"),gvr=o(" to load the model weights."),hvr=l(),v(d4.$$.fragment),pvr=l(),Ir=a("div"),v(xL.$$.fragment),uvr=l(),gbe=a("p"),_vr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),bvr=l(),ln=a("p"),Fvr=o("The model class to instantiate is selected based on the "),hbe=a("code"),vvr=o("model_type"),Tvr=o(` property of the config object (either
passed as an argument or loaded from `),pbe=a("code"),Mvr=o("pretrained_model_name_or_path"),Evr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ube=a("code"),Cvr=o("pretrained_model_name_or_path"),wvr=o(":"),Avr=l(),Hr=a("ul"),c4=a("li"),_be=a("strong"),yvr=o("bart"),Lvr=o(" \u2014 "),eW=a("a"),xvr=o("FlaxBartForCausalLM"),$vr=o(" (BART model)"),kvr=l(),f4=a("li"),bbe=a("strong"),Svr=o("gpt2"),Rvr=o(" \u2014 "),oW=a("a"),Bvr=o("FlaxGPT2LMHeadModel"),Pvr=o(" (OpenAI GPT-2 model)"),Ivr=l(),m4=a("li"),Fbe=a("strong"),qvr=o("gpt_neo"),Nvr=o(" \u2014 "),rW=a("a"),jvr=o("FlaxGPTNeoForCausalLM"),Dvr=o(" (GPT Neo model)"),Gvr=l(),g4=a("li"),vbe=a("strong"),Ovr=o("gptj"),Vvr=o(" \u2014 "),tW=a("a"),Xvr=o("FlaxGPTJForCausalLM"),zvr=o(" (GPT-J model)"),Qvr=l(),h4=a("li"),Tbe=a("strong"),Wvr=o("xglm"),Hvr=o(" \u2014 "),aW=a("a"),Uvr=o("FlaxXGLMForCausalLM"),Jvr=o(" (XGLM model)"),Yvr=l(),v(p4.$$.fragment),dSe=l(),gc=a("h2"),u4=a("a"),Mbe=a("span"),v($L.$$.fragment),Kvr=l(),Ebe=a("span"),Zvr=o("FlaxAutoModelForPreTraining"),cSe=l(),cr=a("div"),v(kL.$$.fragment),e6r=l(),hc=a("p"),o6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),nW=a("a"),r6r=o("from_pretrained()"),t6r=o(" class method or the "),sW=a("a"),a6r=o("from_config()"),n6r=o(` class
method.`),s6r=l(),SL=a("p"),l6r=o("This class cannot be instantiated directly using "),Cbe=a("code"),i6r=o("__init__()"),d6r=o(" (throws an error)."),c6r=l(),qt=a("div"),v(RL.$$.fragment),f6r=l(),wbe=a("p"),m6r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),g6r=l(),pc=a("p"),h6r=o(`Note:
Loading a model from its configuration file does `),Abe=a("strong"),p6r=o("not"),u6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=a("a"),_6r=o("from_pretrained()"),b6r=o(" to load the model weights."),F6r=l(),v(_4.$$.fragment),v6r=l(),qr=a("div"),v(BL.$$.fragment),T6r=l(),ybe=a("p"),M6r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),E6r=l(),dn=a("p"),C6r=o("The model class to instantiate is selected based on the "),Lbe=a("code"),w6r=o("model_type"),A6r=o(` property of the config object (either
passed as an argument or loaded from `),xbe=a("code"),y6r=o("pretrained_model_name_or_path"),L6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$be=a("code"),x6r=o("pretrained_model_name_or_path"),$6r=o(":"),k6r=l(),be=a("ul"),b4=a("li"),kbe=a("strong"),S6r=o("albert"),R6r=o(" \u2014 "),iW=a("a"),B6r=o("FlaxAlbertForPreTraining"),P6r=o(" (ALBERT model)"),I6r=l(),F4=a("li"),Sbe=a("strong"),q6r=o("bart"),N6r=o(" \u2014 "),dW=a("a"),j6r=o("FlaxBartForConditionalGeneration"),D6r=o(" (BART model)"),G6r=l(),v4=a("li"),Rbe=a("strong"),O6r=o("bert"),V6r=o(" \u2014 "),cW=a("a"),X6r=o("FlaxBertForPreTraining"),z6r=o(" (BERT model)"),Q6r=l(),T4=a("li"),Bbe=a("strong"),W6r=o("big_bird"),H6r=o(" \u2014 "),fW=a("a"),U6r=o("FlaxBigBirdForPreTraining"),J6r=o(" (BigBird model)"),Y6r=l(),M4=a("li"),Pbe=a("strong"),K6r=o("electra"),Z6r=o(" \u2014 "),mW=a("a"),eTr=o("FlaxElectraForPreTraining"),oTr=o(" (ELECTRA model)"),rTr=l(),E4=a("li"),Ibe=a("strong"),tTr=o("mbart"),aTr=o(" \u2014 "),gW=a("a"),nTr=o("FlaxMBartForConditionalGeneration"),sTr=o(" (mBART model)"),lTr=l(),C4=a("li"),qbe=a("strong"),iTr=o("mt5"),dTr=o(" \u2014 "),hW=a("a"),cTr=o("FlaxMT5ForConditionalGeneration"),fTr=o(" (mT5 model)"),mTr=l(),w4=a("li"),Nbe=a("strong"),gTr=o("roberta"),hTr=o(" \u2014 "),pW=a("a"),pTr=o("FlaxRobertaForMaskedLM"),uTr=o(" (RoBERTa model)"),_Tr=l(),A4=a("li"),jbe=a("strong"),bTr=o("roformer"),FTr=o(" \u2014 "),uW=a("a"),vTr=o("FlaxRoFormerForMaskedLM"),TTr=o(" (RoFormer model)"),MTr=l(),y4=a("li"),Dbe=a("strong"),ETr=o("t5"),CTr=o(" \u2014 "),_W=a("a"),wTr=o("FlaxT5ForConditionalGeneration"),ATr=o(" (T5 model)"),yTr=l(),L4=a("li"),Gbe=a("strong"),LTr=o("wav2vec2"),xTr=o(" \u2014 "),bW=a("a"),$Tr=o("FlaxWav2Vec2ForPreTraining"),kTr=o(" (Wav2Vec2 model)"),STr=l(),x4=a("li"),Obe=a("strong"),RTr=o("xlm-roberta"),BTr=o(" \u2014 "),FW=a("a"),PTr=o("FlaxXLMRobertaForMaskedLM"),ITr=o(" (XLM-RoBERTa model)"),qTr=l(),v($4.$$.fragment),fSe=l(),uc=a("h2"),k4=a("a"),Vbe=a("span"),v(PL.$$.fragment),NTr=l(),Xbe=a("span"),jTr=o("FlaxAutoModelForMaskedLM"),mSe=l(),fr=a("div"),v(IL.$$.fragment),DTr=l(),_c=a("p"),GTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),vW=a("a"),OTr=o("from_pretrained()"),VTr=o(" class method or the "),TW=a("a"),XTr=o("from_config()"),zTr=o(` class
method.`),QTr=l(),qL=a("p"),WTr=o("This class cannot be instantiated directly using "),zbe=a("code"),HTr=o("__init__()"),UTr=o(" (throws an error)."),JTr=l(),Nt=a("div"),v(NL.$$.fragment),YTr=l(),Qbe=a("p"),KTr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ZTr=l(),bc=a("p"),eMr=o(`Note:
Loading a model from its configuration file does `),Wbe=a("strong"),oMr=o("not"),rMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MW=a("a"),tMr=o("from_pretrained()"),aMr=o(" to load the model weights."),nMr=l(),v(S4.$$.fragment),sMr=l(),Nr=a("div"),v(jL.$$.fragment),lMr=l(),Hbe=a("p"),iMr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),dMr=l(),cn=a("p"),cMr=o("The model class to instantiate is selected based on the "),Ube=a("code"),fMr=o("model_type"),mMr=o(` property of the config object (either
passed as an argument or loaded from `),Jbe=a("code"),gMr=o("pretrained_model_name_or_path"),hMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ybe=a("code"),pMr=o("pretrained_model_name_or_path"),uMr=o(":"),_Mr=l(),Ce=a("ul"),R4=a("li"),Kbe=a("strong"),bMr=o("albert"),FMr=o(" \u2014 "),EW=a("a"),vMr=o("FlaxAlbertForMaskedLM"),TMr=o(" (ALBERT model)"),MMr=l(),B4=a("li"),Zbe=a("strong"),EMr=o("bart"),CMr=o(" \u2014 "),CW=a("a"),wMr=o("FlaxBartForConditionalGeneration"),AMr=o(" (BART model)"),yMr=l(),P4=a("li"),e5e=a("strong"),LMr=o("bert"),xMr=o(" \u2014 "),wW=a("a"),$Mr=o("FlaxBertForMaskedLM"),kMr=o(" (BERT model)"),SMr=l(),I4=a("li"),o5e=a("strong"),RMr=o("big_bird"),BMr=o(" \u2014 "),AW=a("a"),PMr=o("FlaxBigBirdForMaskedLM"),IMr=o(" (BigBird model)"),qMr=l(),q4=a("li"),r5e=a("strong"),NMr=o("distilbert"),jMr=o(" \u2014 "),yW=a("a"),DMr=o("FlaxDistilBertForMaskedLM"),GMr=o(" (DistilBERT model)"),OMr=l(),N4=a("li"),t5e=a("strong"),VMr=o("electra"),XMr=o(" \u2014 "),LW=a("a"),zMr=o("FlaxElectraForMaskedLM"),QMr=o(" (ELECTRA model)"),WMr=l(),j4=a("li"),a5e=a("strong"),HMr=o("mbart"),UMr=o(" \u2014 "),xW=a("a"),JMr=o("FlaxMBartForConditionalGeneration"),YMr=o(" (mBART model)"),KMr=l(),D4=a("li"),n5e=a("strong"),ZMr=o("roberta"),e9r=o(" \u2014 "),$W=a("a"),o9r=o("FlaxRobertaForMaskedLM"),r9r=o(" (RoBERTa model)"),t9r=l(),G4=a("li"),s5e=a("strong"),a9r=o("roformer"),n9r=o(" \u2014 "),kW=a("a"),s9r=o("FlaxRoFormerForMaskedLM"),l9r=o(" (RoFormer model)"),i9r=l(),O4=a("li"),l5e=a("strong"),d9r=o("xlm-roberta"),c9r=o(" \u2014 "),SW=a("a"),f9r=o("FlaxXLMRobertaForMaskedLM"),m9r=o(" (XLM-RoBERTa model)"),g9r=l(),v(V4.$$.fragment),gSe=l(),Fc=a("h2"),X4=a("a"),i5e=a("span"),v(DL.$$.fragment),h9r=l(),d5e=a("span"),p9r=o("FlaxAutoModelForSeq2SeqLM"),hSe=l(),mr=a("div"),v(GL.$$.fragment),u9r=l(),vc=a("p"),_9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),RW=a("a"),b9r=o("from_pretrained()"),F9r=o(" class method or the "),BW=a("a"),v9r=o("from_config()"),T9r=o(` class
method.`),M9r=l(),OL=a("p"),E9r=o("This class cannot be instantiated directly using "),c5e=a("code"),C9r=o("__init__()"),w9r=o(" (throws an error)."),A9r=l(),jt=a("div"),v(VL.$$.fragment),y9r=l(),f5e=a("p"),L9r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),x9r=l(),Tc=a("p"),$9r=o(`Note:
Loading a model from its configuration file does `),m5e=a("strong"),k9r=o("not"),S9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PW=a("a"),R9r=o("from_pretrained()"),B9r=o(" to load the model weights."),P9r=l(),v(z4.$$.fragment),I9r=l(),jr=a("div"),v(XL.$$.fragment),q9r=l(),g5e=a("p"),N9r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),j9r=l(),fn=a("p"),D9r=o("The model class to instantiate is selected based on the "),h5e=a("code"),G9r=o("model_type"),O9r=o(` property of the config object (either
passed as an argument or loaded from `),p5e=a("code"),V9r=o("pretrained_model_name_or_path"),X9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u5e=a("code"),z9r=o("pretrained_model_name_or_path"),Q9r=o(":"),W9r=l(),xe=a("ul"),Q4=a("li"),_5e=a("strong"),H9r=o("bart"),U9r=o(" \u2014 "),IW=a("a"),J9r=o("FlaxBartForConditionalGeneration"),Y9r=o(" (BART model)"),K9r=l(),W4=a("li"),b5e=a("strong"),Z9r=o("blenderbot"),e4r=o(" \u2014 "),qW=a("a"),o4r=o("FlaxBlenderbotForConditionalGeneration"),r4r=o(" (Blenderbot model)"),t4r=l(),H4=a("li"),F5e=a("strong"),a4r=o("blenderbot-small"),n4r=o(" \u2014 "),NW=a("a"),s4r=o("FlaxBlenderbotSmallForConditionalGeneration"),l4r=o(" (BlenderbotSmall model)"),i4r=l(),U4=a("li"),v5e=a("strong"),d4r=o("encoder-decoder"),c4r=o(" \u2014 "),jW=a("a"),f4r=o("FlaxEncoderDecoderModel"),m4r=o(" (Encoder decoder model)"),g4r=l(),J4=a("li"),T5e=a("strong"),h4r=o("marian"),p4r=o(" \u2014 "),DW=a("a"),u4r=o("FlaxMarianMTModel"),_4r=o(" (Marian model)"),b4r=l(),Y4=a("li"),M5e=a("strong"),F4r=o("mbart"),v4r=o(" \u2014 "),GW=a("a"),T4r=o("FlaxMBartForConditionalGeneration"),M4r=o(" (mBART model)"),E4r=l(),K4=a("li"),E5e=a("strong"),C4r=o("mt5"),w4r=o(" \u2014 "),OW=a("a"),A4r=o("FlaxMT5ForConditionalGeneration"),y4r=o(" (mT5 model)"),L4r=l(),Z4=a("li"),C5e=a("strong"),x4r=o("pegasus"),$4r=o(" \u2014 "),VW=a("a"),k4r=o("FlaxPegasusForConditionalGeneration"),S4r=o(" (Pegasus model)"),R4r=l(),eE=a("li"),w5e=a("strong"),B4r=o("t5"),P4r=o(" \u2014 "),XW=a("a"),I4r=o("FlaxT5ForConditionalGeneration"),q4r=o(" (T5 model)"),N4r=l(),v(oE.$$.fragment),pSe=l(),Mc=a("h2"),rE=a("a"),A5e=a("span"),v(zL.$$.fragment),j4r=l(),y5e=a("span"),D4r=o("FlaxAutoModelForSequenceClassification"),uSe=l(),gr=a("div"),v(QL.$$.fragment),G4r=l(),Ec=a("p"),O4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),zW=a("a"),V4r=o("from_pretrained()"),X4r=o(" class method or the "),QW=a("a"),z4r=o("from_config()"),Q4r=o(` class
method.`),W4r=l(),WL=a("p"),H4r=o("This class cannot be instantiated directly using "),L5e=a("code"),U4r=o("__init__()"),J4r=o(" (throws an error)."),Y4r=l(),Dt=a("div"),v(HL.$$.fragment),K4r=l(),x5e=a("p"),Z4r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),eEr=l(),Cc=a("p"),oEr=o(`Note:
Loading a model from its configuration file does `),$5e=a("strong"),rEr=o("not"),tEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WW=a("a"),aEr=o("from_pretrained()"),nEr=o(" to load the model weights."),sEr=l(),v(tE.$$.fragment),lEr=l(),Dr=a("div"),v(UL.$$.fragment),iEr=l(),k5e=a("p"),dEr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),cEr=l(),mn=a("p"),fEr=o("The model class to instantiate is selected based on the "),S5e=a("code"),mEr=o("model_type"),gEr=o(` property of the config object (either
passed as an argument or loaded from `),R5e=a("code"),hEr=o("pretrained_model_name_or_path"),pEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B5e=a("code"),uEr=o("pretrained_model_name_or_path"),_Er=o(":"),bEr=l(),we=a("ul"),aE=a("li"),P5e=a("strong"),FEr=o("albert"),vEr=o(" \u2014 "),HW=a("a"),TEr=o("FlaxAlbertForSequenceClassification"),MEr=o(" (ALBERT model)"),EEr=l(),nE=a("li"),I5e=a("strong"),CEr=o("bart"),wEr=o(" \u2014 "),UW=a("a"),AEr=o("FlaxBartForSequenceClassification"),yEr=o(" (BART model)"),LEr=l(),sE=a("li"),q5e=a("strong"),xEr=o("bert"),$Er=o(" \u2014 "),JW=a("a"),kEr=o("FlaxBertForSequenceClassification"),SEr=o(" (BERT model)"),REr=l(),lE=a("li"),N5e=a("strong"),BEr=o("big_bird"),PEr=o(" \u2014 "),YW=a("a"),IEr=o("FlaxBigBirdForSequenceClassification"),qEr=o(" (BigBird model)"),NEr=l(),iE=a("li"),j5e=a("strong"),jEr=o("distilbert"),DEr=o(" \u2014 "),KW=a("a"),GEr=o("FlaxDistilBertForSequenceClassification"),OEr=o(" (DistilBERT model)"),VEr=l(),dE=a("li"),D5e=a("strong"),XEr=o("electra"),zEr=o(" \u2014 "),ZW=a("a"),QEr=o("FlaxElectraForSequenceClassification"),WEr=o(" (ELECTRA model)"),HEr=l(),cE=a("li"),G5e=a("strong"),UEr=o("mbart"),JEr=o(" \u2014 "),eH=a("a"),YEr=o("FlaxMBartForSequenceClassification"),KEr=o(" (mBART model)"),ZEr=l(),fE=a("li"),O5e=a("strong"),eCr=o("roberta"),oCr=o(" \u2014 "),oH=a("a"),rCr=o("FlaxRobertaForSequenceClassification"),tCr=o(" (RoBERTa model)"),aCr=l(),mE=a("li"),V5e=a("strong"),nCr=o("roformer"),sCr=o(" \u2014 "),rH=a("a"),lCr=o("FlaxRoFormerForSequenceClassification"),iCr=o(" (RoFormer model)"),dCr=l(),gE=a("li"),X5e=a("strong"),cCr=o("xlm-roberta"),fCr=o(" \u2014 "),tH=a("a"),mCr=o("FlaxXLMRobertaForSequenceClassification"),gCr=o(" (XLM-RoBERTa model)"),hCr=l(),v(hE.$$.fragment),_Se=l(),wc=a("h2"),pE=a("a"),z5e=a("span"),v(JL.$$.fragment),pCr=l(),Q5e=a("span"),uCr=o("FlaxAutoModelForQuestionAnswering"),bSe=l(),hr=a("div"),v(YL.$$.fragment),_Cr=l(),Ac=a("p"),bCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),aH=a("a"),FCr=o("from_pretrained()"),vCr=o(" class method or the "),nH=a("a"),TCr=o("from_config()"),MCr=o(` class
method.`),ECr=l(),KL=a("p"),CCr=o("This class cannot be instantiated directly using "),W5e=a("code"),wCr=o("__init__()"),ACr=o(" (throws an error)."),yCr=l(),Gt=a("div"),v(ZL.$$.fragment),LCr=l(),H5e=a("p"),xCr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$Cr=l(),yc=a("p"),kCr=o(`Note:
Loading a model from its configuration file does `),U5e=a("strong"),SCr=o("not"),RCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sH=a("a"),BCr=o("from_pretrained()"),PCr=o(" to load the model weights."),ICr=l(),v(uE.$$.fragment),qCr=l(),Gr=a("div"),v(e8.$$.fragment),NCr=l(),J5e=a("p"),jCr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),DCr=l(),gn=a("p"),GCr=o("The model class to instantiate is selected based on the "),Y5e=a("code"),OCr=o("model_type"),VCr=o(` property of the config object (either
passed as an argument or loaded from `),K5e=a("code"),XCr=o("pretrained_model_name_or_path"),zCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z5e=a("code"),QCr=o("pretrained_model_name_or_path"),WCr=o(":"),HCr=l(),Ae=a("ul"),_E=a("li"),eFe=a("strong"),UCr=o("albert"),JCr=o(" \u2014 "),lH=a("a"),YCr=o("FlaxAlbertForQuestionAnswering"),KCr=o(" (ALBERT model)"),ZCr=l(),bE=a("li"),oFe=a("strong"),e3r=o("bart"),o3r=o(" \u2014 "),iH=a("a"),r3r=o("FlaxBartForQuestionAnswering"),t3r=o(" (BART model)"),a3r=l(),FE=a("li"),rFe=a("strong"),n3r=o("bert"),s3r=o(" \u2014 "),dH=a("a"),l3r=o("FlaxBertForQuestionAnswering"),i3r=o(" (BERT model)"),d3r=l(),vE=a("li"),tFe=a("strong"),c3r=o("big_bird"),f3r=o(" \u2014 "),cH=a("a"),m3r=o("FlaxBigBirdForQuestionAnswering"),g3r=o(" (BigBird model)"),h3r=l(),TE=a("li"),aFe=a("strong"),p3r=o("distilbert"),u3r=o(" \u2014 "),fH=a("a"),_3r=o("FlaxDistilBertForQuestionAnswering"),b3r=o(" (DistilBERT model)"),F3r=l(),ME=a("li"),nFe=a("strong"),v3r=o("electra"),T3r=o(" \u2014 "),mH=a("a"),M3r=o("FlaxElectraForQuestionAnswering"),E3r=o(" (ELECTRA model)"),C3r=l(),EE=a("li"),sFe=a("strong"),w3r=o("mbart"),A3r=o(" \u2014 "),gH=a("a"),y3r=o("FlaxMBartForQuestionAnswering"),L3r=o(" (mBART model)"),x3r=l(),CE=a("li"),lFe=a("strong"),$3r=o("roberta"),k3r=o(" \u2014 "),hH=a("a"),S3r=o("FlaxRobertaForQuestionAnswering"),R3r=o(" (RoBERTa model)"),B3r=l(),wE=a("li"),iFe=a("strong"),P3r=o("roformer"),I3r=o(" \u2014 "),pH=a("a"),q3r=o("FlaxRoFormerForQuestionAnswering"),N3r=o(" (RoFormer model)"),j3r=l(),AE=a("li"),dFe=a("strong"),D3r=o("xlm-roberta"),G3r=o(" \u2014 "),uH=a("a"),O3r=o("FlaxXLMRobertaForQuestionAnswering"),V3r=o(" (XLM-RoBERTa model)"),X3r=l(),v(yE.$$.fragment),FSe=l(),Lc=a("h2"),LE=a("a"),cFe=a("span"),v(o8.$$.fragment),z3r=l(),fFe=a("span"),Q3r=o("FlaxAutoModelForTokenClassification"),vSe=l(),pr=a("div"),v(r8.$$.fragment),W3r=l(),xc=a("p"),H3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),_H=a("a"),U3r=o("from_pretrained()"),J3r=o(" class method or the "),bH=a("a"),Y3r=o("from_config()"),K3r=o(` class
method.`),Z3r=l(),t8=a("p"),ewr=o("This class cannot be instantiated directly using "),mFe=a("code"),owr=o("__init__()"),rwr=o(" (throws an error)."),twr=l(),Ot=a("div"),v(a8.$$.fragment),awr=l(),gFe=a("p"),nwr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),swr=l(),$c=a("p"),lwr=o(`Note:
Loading a model from its configuration file does `),hFe=a("strong"),iwr=o("not"),dwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=a("a"),cwr=o("from_pretrained()"),fwr=o(" to load the model weights."),mwr=l(),v(xE.$$.fragment),gwr=l(),Or=a("div"),v(n8.$$.fragment),hwr=l(),pFe=a("p"),pwr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),uwr=l(),hn=a("p"),_wr=o("The model class to instantiate is selected based on the "),uFe=a("code"),bwr=o("model_type"),Fwr=o(` property of the config object (either
passed as an argument or loaded from `),_Fe=a("code"),vwr=o("pretrained_model_name_or_path"),Twr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bFe=a("code"),Mwr=o("pretrained_model_name_or_path"),Ewr=o(":"),Cwr=l(),Ne=a("ul"),$E=a("li"),FFe=a("strong"),wwr=o("albert"),Awr=o(" \u2014 "),vH=a("a"),ywr=o("FlaxAlbertForTokenClassification"),Lwr=o(" (ALBERT model)"),xwr=l(),kE=a("li"),vFe=a("strong"),$wr=o("bert"),kwr=o(" \u2014 "),TH=a("a"),Swr=o("FlaxBertForTokenClassification"),Rwr=o(" (BERT model)"),Bwr=l(),SE=a("li"),TFe=a("strong"),Pwr=o("big_bird"),Iwr=o(" \u2014 "),MH=a("a"),qwr=o("FlaxBigBirdForTokenClassification"),Nwr=o(" (BigBird model)"),jwr=l(),RE=a("li"),MFe=a("strong"),Dwr=o("distilbert"),Gwr=o(" \u2014 "),EH=a("a"),Owr=o("FlaxDistilBertForTokenClassification"),Vwr=o(" (DistilBERT model)"),Xwr=l(),BE=a("li"),EFe=a("strong"),zwr=o("electra"),Qwr=o(" \u2014 "),CH=a("a"),Wwr=o("FlaxElectraForTokenClassification"),Hwr=o(" (ELECTRA model)"),Uwr=l(),PE=a("li"),CFe=a("strong"),Jwr=o("roberta"),Ywr=o(" \u2014 "),wH=a("a"),Kwr=o("FlaxRobertaForTokenClassification"),Zwr=o(" (RoBERTa model)"),eAr=l(),IE=a("li"),wFe=a("strong"),oAr=o("roformer"),rAr=o(" \u2014 "),AH=a("a"),tAr=o("FlaxRoFormerForTokenClassification"),aAr=o(" (RoFormer model)"),nAr=l(),qE=a("li"),AFe=a("strong"),sAr=o("xlm-roberta"),lAr=o(" \u2014 "),yH=a("a"),iAr=o("FlaxXLMRobertaForTokenClassification"),dAr=o(" (XLM-RoBERTa model)"),cAr=l(),v(NE.$$.fragment),TSe=l(),kc=a("h2"),jE=a("a"),yFe=a("span"),v(s8.$$.fragment),fAr=l(),LFe=a("span"),mAr=o("FlaxAutoModelForMultipleChoice"),MSe=l(),ur=a("div"),v(l8.$$.fragment),gAr=l(),Sc=a("p"),hAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),LH=a("a"),pAr=o("from_pretrained()"),uAr=o(" class method or the "),xH=a("a"),_Ar=o("from_config()"),bAr=o(` class
method.`),FAr=l(),i8=a("p"),vAr=o("This class cannot be instantiated directly using "),xFe=a("code"),TAr=o("__init__()"),MAr=o(" (throws an error)."),EAr=l(),Vt=a("div"),v(d8.$$.fragment),CAr=l(),$Fe=a("p"),wAr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),AAr=l(),Rc=a("p"),yAr=o(`Note:
Loading a model from its configuration file does `),kFe=a("strong"),LAr=o("not"),xAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=a("a"),$Ar=o("from_pretrained()"),kAr=o(" to load the model weights."),SAr=l(),v(DE.$$.fragment),RAr=l(),Vr=a("div"),v(c8.$$.fragment),BAr=l(),SFe=a("p"),PAr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),IAr=l(),pn=a("p"),qAr=o("The model class to instantiate is selected based on the "),RFe=a("code"),NAr=o("model_type"),jAr=o(` property of the config object (either
passed as an argument or loaded from `),BFe=a("code"),DAr=o("pretrained_model_name_or_path"),GAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PFe=a("code"),OAr=o("pretrained_model_name_or_path"),VAr=o(":"),XAr=l(),je=a("ul"),GE=a("li"),IFe=a("strong"),zAr=o("albert"),QAr=o(" \u2014 "),kH=a("a"),WAr=o("FlaxAlbertForMultipleChoice"),HAr=o(" (ALBERT model)"),UAr=l(),OE=a("li"),qFe=a("strong"),JAr=o("bert"),YAr=o(" \u2014 "),SH=a("a"),KAr=o("FlaxBertForMultipleChoice"),ZAr=o(" (BERT model)"),e0r=l(),VE=a("li"),NFe=a("strong"),o0r=o("big_bird"),r0r=o(" \u2014 "),RH=a("a"),t0r=o("FlaxBigBirdForMultipleChoice"),a0r=o(" (BigBird model)"),n0r=l(),XE=a("li"),jFe=a("strong"),s0r=o("distilbert"),l0r=o(" \u2014 "),BH=a("a"),i0r=o("FlaxDistilBertForMultipleChoice"),d0r=o(" (DistilBERT model)"),c0r=l(),zE=a("li"),DFe=a("strong"),f0r=o("electra"),m0r=o(" \u2014 "),PH=a("a"),g0r=o("FlaxElectraForMultipleChoice"),h0r=o(" (ELECTRA model)"),p0r=l(),QE=a("li"),GFe=a("strong"),u0r=o("roberta"),_0r=o(" \u2014 "),IH=a("a"),b0r=o("FlaxRobertaForMultipleChoice"),F0r=o(" (RoBERTa model)"),v0r=l(),WE=a("li"),OFe=a("strong"),T0r=o("roformer"),M0r=o(" \u2014 "),qH=a("a"),E0r=o("FlaxRoFormerForMultipleChoice"),C0r=o(" (RoFormer model)"),w0r=l(),HE=a("li"),VFe=a("strong"),A0r=o("xlm-roberta"),y0r=o(" \u2014 "),NH=a("a"),L0r=o("FlaxXLMRobertaForMultipleChoice"),x0r=o(" (XLM-RoBERTa model)"),$0r=l(),v(UE.$$.fragment),ESe=l(),Bc=a("h2"),JE=a("a"),XFe=a("span"),v(f8.$$.fragment),k0r=l(),zFe=a("span"),S0r=o("FlaxAutoModelForNextSentencePrediction"),CSe=l(),_r=a("div"),v(m8.$$.fragment),R0r=l(),Pc=a("p"),B0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),jH=a("a"),P0r=o("from_pretrained()"),I0r=o(" class method or the "),DH=a("a"),q0r=o("from_config()"),N0r=o(` class
method.`),j0r=l(),g8=a("p"),D0r=o("This class cannot be instantiated directly using "),QFe=a("code"),G0r=o("__init__()"),O0r=o(" (throws an error)."),V0r=l(),Xt=a("div"),v(h8.$$.fragment),X0r=l(),WFe=a("p"),z0r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Q0r=l(),Ic=a("p"),W0r=o(`Note:
Loading a model from its configuration file does `),HFe=a("strong"),H0r=o("not"),U0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GH=a("a"),J0r=o("from_pretrained()"),Y0r=o(" to load the model weights."),K0r=l(),v(YE.$$.fragment),Z0r=l(),Xr=a("div"),v(p8.$$.fragment),eyr=l(),UFe=a("p"),oyr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ryr=l(),un=a("p"),tyr=o("The model class to instantiate is selected based on the "),JFe=a("code"),ayr=o("model_type"),nyr=o(` property of the config object (either
passed as an argument or loaded from `),YFe=a("code"),syr=o("pretrained_model_name_or_path"),lyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KFe=a("code"),iyr=o("pretrained_model_name_or_path"),dyr=o(":"),cyr=l(),ZFe=a("ul"),KE=a("li"),eve=a("strong"),fyr=o("bert"),myr=o(" \u2014 "),OH=a("a"),gyr=o("FlaxBertForNextSentencePrediction"),hyr=o(" (BERT model)"),pyr=l(),v(ZE.$$.fragment),wSe=l(),qc=a("h2"),eC=a("a"),ove=a("span"),v(u8.$$.fragment),uyr=l(),rve=a("span"),_yr=o("FlaxAutoModelForImageClassification"),ASe=l(),br=a("div"),v(_8.$$.fragment),byr=l(),Nc=a("p"),Fyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),VH=a("a"),vyr=o("from_pretrained()"),Tyr=o(" class method or the "),XH=a("a"),Myr=o("from_config()"),Eyr=o(` class
method.`),Cyr=l(),b8=a("p"),wyr=o("This class cannot be instantiated directly using "),tve=a("code"),Ayr=o("__init__()"),yyr=o(" (throws an error)."),Lyr=l(),zt=a("div"),v(F8.$$.fragment),xyr=l(),ave=a("p"),$yr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),kyr=l(),jc=a("p"),Syr=o(`Note:
Loading a model from its configuration file does `),nve=a("strong"),Ryr=o("not"),Byr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zH=a("a"),Pyr=o("from_pretrained()"),Iyr=o(" to load the model weights."),qyr=l(),v(oC.$$.fragment),Nyr=l(),zr=a("div"),v(v8.$$.fragment),jyr=l(),sve=a("p"),Dyr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Gyr=l(),_n=a("p"),Oyr=o("The model class to instantiate is selected based on the "),lve=a("code"),Vyr=o("model_type"),Xyr=o(` property of the config object (either
passed as an argument or loaded from `),ive=a("code"),zyr=o("pretrained_model_name_or_path"),Qyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dve=a("code"),Wyr=o("pretrained_model_name_or_path"),Hyr=o(":"),Uyr=l(),T8=a("ul"),rC=a("li"),cve=a("strong"),Jyr=o("beit"),Yyr=o(" \u2014 "),QH=a("a"),Kyr=o("FlaxBeitForImageClassification"),Zyr=o(" (BEiT model)"),eLr=l(),tC=a("li"),fve=a("strong"),oLr=o("vit"),rLr=o(" \u2014 "),WH=a("a"),tLr=o("FlaxViTForImageClassification"),aLr=o(" (ViT model)"),nLr=l(),v(aC.$$.fragment),ySe=l(),Dc=a("h2"),nC=a("a"),mve=a("span"),v(M8.$$.fragment),sLr=l(),gve=a("span"),lLr=o("FlaxAutoModelForVision2Seq"),LSe=l(),Fr=a("div"),v(E8.$$.fragment),iLr=l(),Gc=a("p"),dLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),HH=a("a"),cLr=o("from_pretrained()"),fLr=o(" class method or the "),UH=a("a"),mLr=o("from_config()"),gLr=o(` class
method.`),hLr=l(),C8=a("p"),pLr=o("This class cannot be instantiated directly using "),hve=a("code"),uLr=o("__init__()"),_Lr=o(" (throws an error)."),bLr=l(),Qt=a("div"),v(w8.$$.fragment),FLr=l(),pve=a("p"),vLr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),TLr=l(),Oc=a("p"),MLr=o(`Note:
Loading a model from its configuration file does `),uve=a("strong"),ELr=o("not"),CLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JH=a("a"),wLr=o("from_pretrained()"),ALr=o(" to load the model weights."),yLr=l(),v(sC.$$.fragment),LLr=l(),Qr=a("div"),v(A8.$$.fragment),xLr=l(),_ve=a("p"),$Lr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),kLr=l(),bn=a("p"),SLr=o("The model class to instantiate is selected based on the "),bve=a("code"),RLr=o("model_type"),BLr=o(` property of the config object (either
passed as an argument or loaded from `),Fve=a("code"),PLr=o("pretrained_model_name_or_path"),ILr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vve=a("code"),qLr=o("pretrained_model_name_or_path"),NLr=o(":"),jLr=l(),Tve=a("ul"),lC=a("li"),Mve=a("strong"),DLr=o("vision-encoder-decoder"),GLr=o(" \u2014 "),YH=a("a"),OLr=o("FlaxVisionEncoderDecoderModel"),VLr=o(" (Vision Encoder decoder model)"),XLr=l(),v(iC.$$.fragment),this.h()},l(f){const _=O1t('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),F=i(f),p=n(f,"H1",{class:!0});var y8=s(p);m=n(y8,"A",{id:!0,class:!0,href:!0});var Eve=s(m);u=n(Eve,"SPAN",{});var Cve=s(u);T(d.$$.fragment,Cve),Cve.forEach(t),Eve.forEach(t),h=i(y8),vo=n(y8,"SPAN",{});var wve=s(vo);Ql=r(wve,"Auto Classes"),wve.forEach(t),y8.forEach(t),Qc=i(f),Yr=n(f,"P",{});var L8=s(Yr);Wl=r(L8,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Hl=n(L8,"CODE",{});var Ave=s(Hl);Ew=r(Ave,"from_pretrained()"),Ave.forEach(t),Wc=r(L8,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),L8.forEach(t),Be=i(f),Ge=n(f,"P",{});var Fn=s(Ge);Ul=r(Fn,"Instantiating one of "),vn=n(Fn,"A",{href:!0});var yve=s(vn);Cw=r(yve,"AutoConfig"),yve.forEach(t),Tn=r(Fn,", "),Mn=n(Fn,"A",{href:!0});var Lve=s(Mn);ww=r(Lve,"AutoModel"),Lve.forEach(t),Jl=r(Fn,`, and
`),En=n(Fn,"A",{href:!0});var xve=s(En);Aw=r(xve,"AutoTokenizer"),xve.forEach(t),Yl=r(Fn," will directly create a class of the relevant architecture. For instance"),Fn.forEach(t),Hc=i(f),T(ba.$$.fragment,f),Oe=i(f),Me=n(f,"P",{});var x8=s(Me);kx=r(x8,"will create a model that is an instance of "),Kl=n(x8,"A",{href:!0});var $ve=s(Kl);Sx=r($ve,"BertModel"),$ve.forEach(t),Rx=r(x8,"."),x8.forEach(t),To=i(f),Fa=n(f,"P",{});var $8=s(Fa);Bx=r($8,"There is one class of "),Uc=n($8,"CODE",{});var kve=s(Uc);Px=r(kve,"AutoModel"),kve.forEach(t),PBe=r($8," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),$8.forEach(t),L$e=i(f),Zl=n(f,"H2",{class:!0});var k8=s(Zl);Jc=n(k8,"A",{id:!0,class:!0,href:!0});var Sve=s(Jc);OJ=n(Sve,"SPAN",{});var Rve=s(OJ);T(yw.$$.fragment,Rve),Rve.forEach(t),Sve.forEach(t),IBe=i(k8),VJ=n(k8,"SPAN",{});var Bve=s(VJ);qBe=r(Bve,"Extending the Auto Classes"),Bve.forEach(t),k8.forEach(t),x$e=i(f),Cn=n(f,"P",{});var Vc=s(Cn);NBe=r(Vc,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),XJ=n(Vc,"CODE",{});var Pve=s(XJ);jBe=r(Pve,"NewModel"),Pve.forEach(t),DBe=r(Vc,", make sure you have a "),zJ=n(Vc,"CODE",{});var Ive=s(zJ);GBe=r(Ive,"NewModelConfig"),Ive.forEach(t),OBe=r(Vc,` then you can add those to the auto
classes like this:`),Vc.forEach(t),$$e=i(f),T(Lw.$$.fragment,f),k$e=i(f),Ix=n(f,"P",{});var qve=s(Ix);VBe=r(qve,"You will then be able to use the auto classes like you would usually do!"),qve.forEach(t),S$e=i(f),T(Yc.$$.fragment,f),R$e=i(f),ei=n(f,"H2",{class:!0});var S8=s(ei);Kc=n(S8,"A",{id:!0,class:!0,href:!0});var Nve=s(Kc);QJ=n(Nve,"SPAN",{});var jve=s(QJ);T(xw.$$.fragment,jve),jve.forEach(t),Nve.forEach(t),XBe=i(S8),WJ=n(S8,"SPAN",{});var Dve=s(WJ);zBe=r(Dve,"AutoConfig"),Dve.forEach(t),S8.forEach(t),B$e=i(f),Mo=n(f,"DIV",{class:!0});var Ur=s(Mo);T($w.$$.fragment,Ur),QBe=i(Ur),kw=n(Ur,"P",{});var R8=s(kw);WBe=r(R8,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),qx=n(R8,"A",{href:!0});var Gve=s(qx);HBe=r(Gve,"from_pretrained()"),Gve.forEach(t),UBe=r(R8," class method."),R8.forEach(t),JBe=i(Ur),Sw=n(Ur,"P",{});var B8=s(Sw);YBe=r(B8,"This class cannot be instantiated directly using "),HJ=n(B8,"CODE",{});var Ove=s(HJ);KBe=r(Ove,"__init__()"),Ove.forEach(t),ZBe=r(B8," (throws an error)."),B8.forEach(t),ePe=i(Ur),vr=n(Ur,"DIV",{class:!0});var Jr=s(vr);T(Rw.$$.fragment,Jr),oPe=i(Jr),UJ=n(Jr,"P",{});var Vve=s(UJ);rPe=r(Vve,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),Vve.forEach(t),tPe=i(Jr),oi=n(Jr,"P",{});var Xc=s(oi);aPe=r(Xc,"The configuration class to instantiate is selected based on the "),JJ=n(Xc,"CODE",{});var Xve=s(JJ);nPe=r(Xve,"model_type"),Xve.forEach(t),sPe=r(Xc,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),YJ=n(Xc,"CODE",{});var zve=s(YJ);lPe=r(zve,"pretrained_model_name_or_path"),zve.forEach(t),iPe=r(Xc,":"),Xc.forEach(t),dPe=i(Jr),y=n(Jr,"UL",{});var L=s(y);Zc=n(L,"LI",{});var dC=s(Zc);KJ=n(dC,"STRONG",{});var Qve=s(KJ);cPe=r(Qve,"albert"),Qve.forEach(t),fPe=r(dC," \u2014 "),Nx=n(dC,"A",{href:!0});var Wve=s(Nx);mPe=r(Wve,"AlbertConfig"),Wve.forEach(t),gPe=r(dC," (ALBERT model)"),dC.forEach(t),hPe=i(L),ef=n(L,"LI",{});var cC=s(ef);ZJ=n(cC,"STRONG",{});var Hve=s(ZJ);pPe=r(Hve,"bart"),Hve.forEach(t),uPe=r(cC," \u2014 "),jx=n(cC,"A",{href:!0});var Uve=s(jx);_Pe=r(Uve,"BartConfig"),Uve.forEach(t),bPe=r(cC," (BART model)"),cC.forEach(t),FPe=i(L),of=n(L,"LI",{});var fC=s(of);eY=n(fC,"STRONG",{});var Jve=s(eY);vPe=r(Jve,"beit"),Jve.forEach(t),TPe=r(fC," \u2014 "),Dx=n(fC,"A",{href:!0});var Yve=s(Dx);MPe=r(Yve,"BeitConfig"),Yve.forEach(t),EPe=r(fC," (BEiT model)"),fC.forEach(t),CPe=i(L),rf=n(L,"LI",{});var mC=s(rf);oY=n(mC,"STRONG",{});var Kve=s(oY);wPe=r(Kve,"bert"),Kve.forEach(t),APe=r(mC," \u2014 "),Gx=n(mC,"A",{href:!0});var Zve=s(Gx);yPe=r(Zve,"BertConfig"),Zve.forEach(t),LPe=r(mC," (BERT model)"),mC.forEach(t),xPe=i(L),tf=n(L,"LI",{});var gC=s(tf);rY=n(gC,"STRONG",{});var e6e=s(rY);$Pe=r(e6e,"bert-generation"),e6e.forEach(t),kPe=r(gC," \u2014 "),Ox=n(gC,"A",{href:!0});var o6e=s(Ox);SPe=r(o6e,"BertGenerationConfig"),o6e.forEach(t),RPe=r(gC," (Bert Generation model)"),gC.forEach(t),BPe=i(L),af=n(L,"LI",{});var hC=s(af);tY=n(hC,"STRONG",{});var r6e=s(tY);PPe=r(r6e,"big_bird"),r6e.forEach(t),IPe=r(hC," \u2014 "),Vx=n(hC,"A",{href:!0});var t6e=s(Vx);qPe=r(t6e,"BigBirdConfig"),t6e.forEach(t),NPe=r(hC," (BigBird model)"),hC.forEach(t),jPe=i(L),nf=n(L,"LI",{});var pC=s(nf);aY=n(pC,"STRONG",{});var a6e=s(aY);DPe=r(a6e,"bigbird_pegasus"),a6e.forEach(t),GPe=r(pC," \u2014 "),Xx=n(pC,"A",{href:!0});var n6e=s(Xx);OPe=r(n6e,"BigBirdPegasusConfig"),n6e.forEach(t),VPe=r(pC," (BigBirdPegasus model)"),pC.forEach(t),XPe=i(L),sf=n(L,"LI",{});var uC=s(sf);nY=n(uC,"STRONG",{});var s6e=s(nY);zPe=r(s6e,"blenderbot"),s6e.forEach(t),QPe=r(uC," \u2014 "),zx=n(uC,"A",{href:!0});var l6e=s(zx);WPe=r(l6e,"BlenderbotConfig"),l6e.forEach(t),HPe=r(uC," (Blenderbot model)"),uC.forEach(t),UPe=i(L),lf=n(L,"LI",{});var _C=s(lf);sY=n(_C,"STRONG",{});var i6e=s(sY);JPe=r(i6e,"blenderbot-small"),i6e.forEach(t),YPe=r(_C," \u2014 "),Qx=n(_C,"A",{href:!0});var d6e=s(Qx);KPe=r(d6e,"BlenderbotSmallConfig"),d6e.forEach(t),ZPe=r(_C," (BlenderbotSmall model)"),_C.forEach(t),eIe=i(L),df=n(L,"LI",{});var bC=s(df);lY=n(bC,"STRONG",{});var c6e=s(lY);oIe=r(c6e,"camembert"),c6e.forEach(t),rIe=r(bC," \u2014 "),Wx=n(bC,"A",{href:!0});var f6e=s(Wx);tIe=r(f6e,"CamembertConfig"),f6e.forEach(t),aIe=r(bC," (CamemBERT model)"),bC.forEach(t),nIe=i(L),cf=n(L,"LI",{});var FC=s(cf);iY=n(FC,"STRONG",{});var m6e=s(iY);sIe=r(m6e,"canine"),m6e.forEach(t),lIe=r(FC," \u2014 "),Hx=n(FC,"A",{href:!0});var g6e=s(Hx);iIe=r(g6e,"CanineConfig"),g6e.forEach(t),dIe=r(FC," (Canine model)"),FC.forEach(t),cIe=i(L),ff=n(L,"LI",{});var vC=s(ff);dY=n(vC,"STRONG",{});var h6e=s(dY);fIe=r(h6e,"clip"),h6e.forEach(t),mIe=r(vC," \u2014 "),Ux=n(vC,"A",{href:!0});var p6e=s(Ux);gIe=r(p6e,"CLIPConfig"),p6e.forEach(t),hIe=r(vC," (CLIP model)"),vC.forEach(t),pIe=i(L),mf=n(L,"LI",{});var TC=s(mf);cY=n(TC,"STRONG",{});var u6e=s(cY);uIe=r(u6e,"convbert"),u6e.forEach(t),_Ie=r(TC," \u2014 "),Jx=n(TC,"A",{href:!0});var _6e=s(Jx);bIe=r(_6e,"ConvBertConfig"),_6e.forEach(t),FIe=r(TC," (ConvBERT model)"),TC.forEach(t),vIe=i(L),gf=n(L,"LI",{});var MC=s(gf);fY=n(MC,"STRONG",{});var b6e=s(fY);TIe=r(b6e,"convnext"),b6e.forEach(t),MIe=r(MC," \u2014 "),Yx=n(MC,"A",{href:!0});var F6e=s(Yx);EIe=r(F6e,"ConvNextConfig"),F6e.forEach(t),CIe=r(MC," (ConvNext model)"),MC.forEach(t),wIe=i(L),hf=n(L,"LI",{});var EC=s(hf);mY=n(EC,"STRONG",{});var v6e=s(mY);AIe=r(v6e,"ctrl"),v6e.forEach(t),yIe=r(EC," \u2014 "),Kx=n(EC,"A",{href:!0});var T6e=s(Kx);LIe=r(T6e,"CTRLConfig"),T6e.forEach(t),xIe=r(EC," (CTRL model)"),EC.forEach(t),$Ie=i(L),pf=n(L,"LI",{});var CC=s(pf);gY=n(CC,"STRONG",{});var M6e=s(gY);kIe=r(M6e,"data2vec-audio"),M6e.forEach(t),SIe=r(CC," \u2014 "),Zx=n(CC,"A",{href:!0});var E6e=s(Zx);RIe=r(E6e,"Data2VecAudioConfig"),E6e.forEach(t),BIe=r(CC," (Data2VecAudio model)"),CC.forEach(t),PIe=i(L),uf=n(L,"LI",{});var wC=s(uf);hY=n(wC,"STRONG",{});var C6e=s(hY);IIe=r(C6e,"data2vec-text"),C6e.forEach(t),qIe=r(wC," \u2014 "),e7=n(wC,"A",{href:!0});var w6e=s(e7);NIe=r(w6e,"Data2VecTextConfig"),w6e.forEach(t),jIe=r(wC," (Data2VecText model)"),wC.forEach(t),DIe=i(L),_f=n(L,"LI",{});var AC=s(_f);pY=n(AC,"STRONG",{});var A6e=s(pY);GIe=r(A6e,"deberta"),A6e.forEach(t),OIe=r(AC," \u2014 "),o7=n(AC,"A",{href:!0});var y6e=s(o7);VIe=r(y6e,"DebertaConfig"),y6e.forEach(t),XIe=r(AC," (DeBERTa model)"),AC.forEach(t),zIe=i(L),bf=n(L,"LI",{});var yC=s(bf);uY=n(yC,"STRONG",{});var L6e=s(uY);QIe=r(L6e,"deberta-v2"),L6e.forEach(t),WIe=r(yC," \u2014 "),r7=n(yC,"A",{href:!0});var x6e=s(r7);HIe=r(x6e,"DebertaV2Config"),x6e.forEach(t),UIe=r(yC," (DeBERTa-v2 model)"),yC.forEach(t),JIe=i(L),Ff=n(L,"LI",{});var LC=s(Ff);_Y=n(LC,"STRONG",{});var $6e=s(_Y);YIe=r($6e,"decision_transformer"),$6e.forEach(t),KIe=r(LC," \u2014 "),t7=n(LC,"A",{href:!0});var k6e=s(t7);ZIe=r(k6e,"DecisionTransformerConfig"),k6e.forEach(t),eqe=r(LC," (Decision Transformer model)"),LC.forEach(t),oqe=i(L),vf=n(L,"LI",{});var xC=s(vf);bY=n(xC,"STRONG",{});var S6e=s(bY);rqe=r(S6e,"deit"),S6e.forEach(t),tqe=r(xC," \u2014 "),a7=n(xC,"A",{href:!0});var R6e=s(a7);aqe=r(R6e,"DeiTConfig"),R6e.forEach(t),nqe=r(xC," (DeiT model)"),xC.forEach(t),sqe=i(L),Tf=n(L,"LI",{});var $C=s(Tf);FY=n($C,"STRONG",{});var B6e=s(FY);lqe=r(B6e,"detr"),B6e.forEach(t),iqe=r($C," \u2014 "),n7=n($C,"A",{href:!0});var P6e=s(n7);dqe=r(P6e,"DetrConfig"),P6e.forEach(t),cqe=r($C," (DETR model)"),$C.forEach(t),fqe=i(L),Mf=n(L,"LI",{});var I6e=s(Mf);vY=n(I6e,"STRONG",{});var QLr=s(vY);mqe=r(QLr,"distilbert"),QLr.forEach(t),gqe=r(I6e," \u2014 "),s7=n(I6e,"A",{href:!0});var WLr=s(s7);hqe=r(WLr,"DistilBertConfig"),WLr.forEach(t),pqe=r(I6e," (DistilBERT model)"),I6e.forEach(t),uqe=i(L),Ef=n(L,"LI",{});var q6e=s(Ef);TY=n(q6e,"STRONG",{});var HLr=s(TY);_qe=r(HLr,"dpr"),HLr.forEach(t),bqe=r(q6e," \u2014 "),l7=n(q6e,"A",{href:!0});var ULr=s(l7);Fqe=r(ULr,"DPRConfig"),ULr.forEach(t),vqe=r(q6e," (DPR model)"),q6e.forEach(t),Tqe=i(L),Cf=n(L,"LI",{});var N6e=s(Cf);MY=n(N6e,"STRONG",{});var JLr=s(MY);Mqe=r(JLr,"electra"),JLr.forEach(t),Eqe=r(N6e," \u2014 "),i7=n(N6e,"A",{href:!0});var YLr=s(i7);Cqe=r(YLr,"ElectraConfig"),YLr.forEach(t),wqe=r(N6e," (ELECTRA model)"),N6e.forEach(t),Aqe=i(L),wf=n(L,"LI",{});var j6e=s(wf);EY=n(j6e,"STRONG",{});var KLr=s(EY);yqe=r(KLr,"encoder-decoder"),KLr.forEach(t),Lqe=r(j6e," \u2014 "),d7=n(j6e,"A",{href:!0});var ZLr=s(d7);xqe=r(ZLr,"EncoderDecoderConfig"),ZLr.forEach(t),$qe=r(j6e," (Encoder decoder model)"),j6e.forEach(t),kqe=i(L),Af=n(L,"LI",{});var D6e=s(Af);CY=n(D6e,"STRONG",{});var e8r=s(CY);Sqe=r(e8r,"flaubert"),e8r.forEach(t),Rqe=r(D6e," \u2014 "),c7=n(D6e,"A",{href:!0});var o8r=s(c7);Bqe=r(o8r,"FlaubertConfig"),o8r.forEach(t),Pqe=r(D6e," (FlauBERT model)"),D6e.forEach(t),Iqe=i(L),yf=n(L,"LI",{});var G6e=s(yf);wY=n(G6e,"STRONG",{});var r8r=s(wY);qqe=r(r8r,"fnet"),r8r.forEach(t),Nqe=r(G6e," \u2014 "),f7=n(G6e,"A",{href:!0});var t8r=s(f7);jqe=r(t8r,"FNetConfig"),t8r.forEach(t),Dqe=r(G6e," (FNet model)"),G6e.forEach(t),Gqe=i(L),Lf=n(L,"LI",{});var O6e=s(Lf);AY=n(O6e,"STRONG",{});var a8r=s(AY);Oqe=r(a8r,"fsmt"),a8r.forEach(t),Vqe=r(O6e," \u2014 "),m7=n(O6e,"A",{href:!0});var n8r=s(m7);Xqe=r(n8r,"FSMTConfig"),n8r.forEach(t),zqe=r(O6e," (FairSeq Machine-Translation model)"),O6e.forEach(t),Qqe=i(L),xf=n(L,"LI",{});var V6e=s(xf);yY=n(V6e,"STRONG",{});var s8r=s(yY);Wqe=r(s8r,"funnel"),s8r.forEach(t),Hqe=r(V6e," \u2014 "),g7=n(V6e,"A",{href:!0});var l8r=s(g7);Uqe=r(l8r,"FunnelConfig"),l8r.forEach(t),Jqe=r(V6e," (Funnel Transformer model)"),V6e.forEach(t),Yqe=i(L),$f=n(L,"LI",{});var X6e=s($f);LY=n(X6e,"STRONG",{});var i8r=s(LY);Kqe=r(i8r,"glpn"),i8r.forEach(t),Zqe=r(X6e," \u2014 "),h7=n(X6e,"A",{href:!0});var d8r=s(h7);eNe=r(d8r,"GLPNConfig"),d8r.forEach(t),oNe=r(X6e," (GLPN model)"),X6e.forEach(t),rNe=i(L),kf=n(L,"LI",{});var z6e=s(kf);xY=n(z6e,"STRONG",{});var c8r=s(xY);tNe=r(c8r,"gpt2"),c8r.forEach(t),aNe=r(z6e," \u2014 "),p7=n(z6e,"A",{href:!0});var f8r=s(p7);nNe=r(f8r,"GPT2Config"),f8r.forEach(t),sNe=r(z6e," (OpenAI GPT-2 model)"),z6e.forEach(t),lNe=i(L),Sf=n(L,"LI",{});var Q6e=s(Sf);$Y=n(Q6e,"STRONG",{});var m8r=s($Y);iNe=r(m8r,"gpt_neo"),m8r.forEach(t),dNe=r(Q6e," \u2014 "),u7=n(Q6e,"A",{href:!0});var g8r=s(u7);cNe=r(g8r,"GPTNeoConfig"),g8r.forEach(t),fNe=r(Q6e," (GPT Neo model)"),Q6e.forEach(t),mNe=i(L),Rf=n(L,"LI",{});var W6e=s(Rf);kY=n(W6e,"STRONG",{});var h8r=s(kY);gNe=r(h8r,"gptj"),h8r.forEach(t),hNe=r(W6e," \u2014 "),_7=n(W6e,"A",{href:!0});var p8r=s(_7);pNe=r(p8r,"GPTJConfig"),p8r.forEach(t),uNe=r(W6e," (GPT-J model)"),W6e.forEach(t),_Ne=i(L),Bf=n(L,"LI",{});var H6e=s(Bf);SY=n(H6e,"STRONG",{});var u8r=s(SY);bNe=r(u8r,"hubert"),u8r.forEach(t),FNe=r(H6e," \u2014 "),b7=n(H6e,"A",{href:!0});var _8r=s(b7);vNe=r(_8r,"HubertConfig"),_8r.forEach(t),TNe=r(H6e," (Hubert model)"),H6e.forEach(t),MNe=i(L),Pf=n(L,"LI",{});var U6e=s(Pf);RY=n(U6e,"STRONG",{});var b8r=s(RY);ENe=r(b8r,"ibert"),b8r.forEach(t),CNe=r(U6e," \u2014 "),F7=n(U6e,"A",{href:!0});var F8r=s(F7);wNe=r(F8r,"IBertConfig"),F8r.forEach(t),ANe=r(U6e," (I-BERT model)"),U6e.forEach(t),yNe=i(L),If=n(L,"LI",{});var J6e=s(If);BY=n(J6e,"STRONG",{});var v8r=s(BY);LNe=r(v8r,"imagegpt"),v8r.forEach(t),xNe=r(J6e," \u2014 "),v7=n(J6e,"A",{href:!0});var T8r=s(v7);$Ne=r(T8r,"ImageGPTConfig"),T8r.forEach(t),kNe=r(J6e," (ImageGPT model)"),J6e.forEach(t),SNe=i(L),qf=n(L,"LI",{});var Y6e=s(qf);PY=n(Y6e,"STRONG",{});var M8r=s(PY);RNe=r(M8r,"layoutlm"),M8r.forEach(t),BNe=r(Y6e," \u2014 "),T7=n(Y6e,"A",{href:!0});var E8r=s(T7);PNe=r(E8r,"LayoutLMConfig"),E8r.forEach(t),INe=r(Y6e," (LayoutLM model)"),Y6e.forEach(t),qNe=i(L),Nf=n(L,"LI",{});var K6e=s(Nf);IY=n(K6e,"STRONG",{});var C8r=s(IY);NNe=r(C8r,"layoutlmv2"),C8r.forEach(t),jNe=r(K6e," \u2014 "),M7=n(K6e,"A",{href:!0});var w8r=s(M7);DNe=r(w8r,"LayoutLMv2Config"),w8r.forEach(t),GNe=r(K6e," (LayoutLMv2 model)"),K6e.forEach(t),ONe=i(L),jf=n(L,"LI",{});var Z6e=s(jf);qY=n(Z6e,"STRONG",{});var A8r=s(qY);VNe=r(A8r,"led"),A8r.forEach(t),XNe=r(Z6e," \u2014 "),E7=n(Z6e,"A",{href:!0});var y8r=s(E7);zNe=r(y8r,"LEDConfig"),y8r.forEach(t),QNe=r(Z6e," (LED model)"),Z6e.forEach(t),WNe=i(L),Df=n(L,"LI",{});var eTe=s(Df);NY=n(eTe,"STRONG",{});var L8r=s(NY);HNe=r(L8r,"longformer"),L8r.forEach(t),UNe=r(eTe," \u2014 "),C7=n(eTe,"A",{href:!0});var x8r=s(C7);JNe=r(x8r,"LongformerConfig"),x8r.forEach(t),YNe=r(eTe," (Longformer model)"),eTe.forEach(t),KNe=i(L),Gf=n(L,"LI",{});var oTe=s(Gf);jY=n(oTe,"STRONG",{});var $8r=s(jY);ZNe=r($8r,"luke"),$8r.forEach(t),eje=r(oTe," \u2014 "),w7=n(oTe,"A",{href:!0});var k8r=s(w7);oje=r(k8r,"LukeConfig"),k8r.forEach(t),rje=r(oTe," (LUKE model)"),oTe.forEach(t),tje=i(L),Of=n(L,"LI",{});var rTe=s(Of);DY=n(rTe,"STRONG",{});var S8r=s(DY);aje=r(S8r,"lxmert"),S8r.forEach(t),nje=r(rTe," \u2014 "),A7=n(rTe,"A",{href:!0});var R8r=s(A7);sje=r(R8r,"LxmertConfig"),R8r.forEach(t),lje=r(rTe," (LXMERT model)"),rTe.forEach(t),ije=i(L),Vf=n(L,"LI",{});var tTe=s(Vf);GY=n(tTe,"STRONG",{});var B8r=s(GY);dje=r(B8r,"m2m_100"),B8r.forEach(t),cje=r(tTe," \u2014 "),y7=n(tTe,"A",{href:!0});var P8r=s(y7);fje=r(P8r,"M2M100Config"),P8r.forEach(t),mje=r(tTe," (M2M100 model)"),tTe.forEach(t),gje=i(L),Xf=n(L,"LI",{});var aTe=s(Xf);OY=n(aTe,"STRONG",{});var I8r=s(OY);hje=r(I8r,"marian"),I8r.forEach(t),pje=r(aTe," \u2014 "),L7=n(aTe,"A",{href:!0});var q8r=s(L7);uje=r(q8r,"MarianConfig"),q8r.forEach(t),_je=r(aTe," (Marian model)"),aTe.forEach(t),bje=i(L),zf=n(L,"LI",{});var nTe=s(zf);VY=n(nTe,"STRONG",{});var N8r=s(VY);Fje=r(N8r,"maskformer"),N8r.forEach(t),vje=r(nTe," \u2014 "),x7=n(nTe,"A",{href:!0});var j8r=s(x7);Tje=r(j8r,"MaskFormerConfig"),j8r.forEach(t),Mje=r(nTe," (MaskFormer model)"),nTe.forEach(t),Eje=i(L),Qf=n(L,"LI",{});var sTe=s(Qf);XY=n(sTe,"STRONG",{});var D8r=s(XY);Cje=r(D8r,"mbart"),D8r.forEach(t),wje=r(sTe," \u2014 "),$7=n(sTe,"A",{href:!0});var G8r=s($7);Aje=r(G8r,"MBartConfig"),G8r.forEach(t),yje=r(sTe," (mBART model)"),sTe.forEach(t),Lje=i(L),Wf=n(L,"LI",{});var lTe=s(Wf);zY=n(lTe,"STRONG",{});var O8r=s(zY);xje=r(O8r,"megatron-bert"),O8r.forEach(t),$je=r(lTe," \u2014 "),k7=n(lTe,"A",{href:!0});var V8r=s(k7);kje=r(V8r,"MegatronBertConfig"),V8r.forEach(t),Sje=r(lTe," (MegatronBert model)"),lTe.forEach(t),Rje=i(L),Hf=n(L,"LI",{});var iTe=s(Hf);QY=n(iTe,"STRONG",{});var X8r=s(QY);Bje=r(X8r,"mobilebert"),X8r.forEach(t),Pje=r(iTe," \u2014 "),S7=n(iTe,"A",{href:!0});var z8r=s(S7);Ije=r(z8r,"MobileBertConfig"),z8r.forEach(t),qje=r(iTe," (MobileBERT model)"),iTe.forEach(t),Nje=i(L),Uf=n(L,"LI",{});var dTe=s(Uf);WY=n(dTe,"STRONG",{});var Q8r=s(WY);jje=r(Q8r,"mpnet"),Q8r.forEach(t),Dje=r(dTe," \u2014 "),R7=n(dTe,"A",{href:!0});var W8r=s(R7);Gje=r(W8r,"MPNetConfig"),W8r.forEach(t),Oje=r(dTe," (MPNet model)"),dTe.forEach(t),Vje=i(L),Jf=n(L,"LI",{});var cTe=s(Jf);HY=n(cTe,"STRONG",{});var H8r=s(HY);Xje=r(H8r,"mt5"),H8r.forEach(t),zje=r(cTe," \u2014 "),B7=n(cTe,"A",{href:!0});var U8r=s(B7);Qje=r(U8r,"MT5Config"),U8r.forEach(t),Wje=r(cTe," (mT5 model)"),cTe.forEach(t),Hje=i(L),Yf=n(L,"LI",{});var fTe=s(Yf);UY=n(fTe,"STRONG",{});var J8r=s(UY);Uje=r(J8r,"nystromformer"),J8r.forEach(t),Jje=r(fTe," \u2014 "),P7=n(fTe,"A",{href:!0});var Y8r=s(P7);Yje=r(Y8r,"NystromformerConfig"),Y8r.forEach(t),Kje=r(fTe," (Nystromformer model)"),fTe.forEach(t),Zje=i(L),Kf=n(L,"LI",{});var mTe=s(Kf);JY=n(mTe,"STRONG",{});var K8r=s(JY);eDe=r(K8r,"openai-gpt"),K8r.forEach(t),oDe=r(mTe," \u2014 "),I7=n(mTe,"A",{href:!0});var Z8r=s(I7);rDe=r(Z8r,"OpenAIGPTConfig"),Z8r.forEach(t),tDe=r(mTe," (OpenAI GPT model)"),mTe.forEach(t),aDe=i(L),Zf=n(L,"LI",{});var gTe=s(Zf);YY=n(gTe,"STRONG",{});var exr=s(YY);nDe=r(exr,"pegasus"),exr.forEach(t),sDe=r(gTe," \u2014 "),q7=n(gTe,"A",{href:!0});var oxr=s(q7);lDe=r(oxr,"PegasusConfig"),oxr.forEach(t),iDe=r(gTe," (Pegasus model)"),gTe.forEach(t),dDe=i(L),em=n(L,"LI",{});var hTe=s(em);KY=n(hTe,"STRONG",{});var rxr=s(KY);cDe=r(rxr,"perceiver"),rxr.forEach(t),fDe=r(hTe," \u2014 "),N7=n(hTe,"A",{href:!0});var txr=s(N7);mDe=r(txr,"PerceiverConfig"),txr.forEach(t),gDe=r(hTe," (Perceiver model)"),hTe.forEach(t),hDe=i(L),om=n(L,"LI",{});var pTe=s(om);ZY=n(pTe,"STRONG",{});var axr=s(ZY);pDe=r(axr,"plbart"),axr.forEach(t),uDe=r(pTe," \u2014 "),j7=n(pTe,"A",{href:!0});var nxr=s(j7);_De=r(nxr,"PLBartConfig"),nxr.forEach(t),bDe=r(pTe," (PLBart model)"),pTe.forEach(t),FDe=i(L),rm=n(L,"LI",{});var uTe=s(rm);eK=n(uTe,"STRONG",{});var sxr=s(eK);vDe=r(sxr,"poolformer"),sxr.forEach(t),TDe=r(uTe," \u2014 "),D7=n(uTe,"A",{href:!0});var lxr=s(D7);MDe=r(lxr,"PoolFormerConfig"),lxr.forEach(t),EDe=r(uTe," (PoolFormer model)"),uTe.forEach(t),CDe=i(L),tm=n(L,"LI",{});var _Te=s(tm);oK=n(_Te,"STRONG",{});var ixr=s(oK);wDe=r(ixr,"prophetnet"),ixr.forEach(t),ADe=r(_Te," \u2014 "),G7=n(_Te,"A",{href:!0});var dxr=s(G7);yDe=r(dxr,"ProphetNetConfig"),dxr.forEach(t),LDe=r(_Te," (ProphetNet model)"),_Te.forEach(t),xDe=i(L),am=n(L,"LI",{});var bTe=s(am);rK=n(bTe,"STRONG",{});var cxr=s(rK);$De=r(cxr,"qdqbert"),cxr.forEach(t),kDe=r(bTe," \u2014 "),tK=n(bTe,"CODE",{});var fxr=s(tK);SDe=r(fxr,"QDQBertConfig"),fxr.forEach(t),RDe=r(bTe," (QDQBert model)"),bTe.forEach(t),BDe=i(L),nm=n(L,"LI",{});var FTe=s(nm);aK=n(FTe,"STRONG",{});var mxr=s(aK);PDe=r(mxr,"rag"),mxr.forEach(t),IDe=r(FTe," \u2014 "),O7=n(FTe,"A",{href:!0});var gxr=s(O7);qDe=r(gxr,"RagConfig"),gxr.forEach(t),NDe=r(FTe," (RAG model)"),FTe.forEach(t),jDe=i(L),sm=n(L,"LI",{});var vTe=s(sm);nK=n(vTe,"STRONG",{});var hxr=s(nK);DDe=r(hxr,"realm"),hxr.forEach(t),GDe=r(vTe," \u2014 "),V7=n(vTe,"A",{href:!0});var pxr=s(V7);ODe=r(pxr,"RealmConfig"),pxr.forEach(t),VDe=r(vTe," (Realm model)"),vTe.forEach(t),XDe=i(L),lm=n(L,"LI",{});var TTe=s(lm);sK=n(TTe,"STRONG",{});var uxr=s(sK);zDe=r(uxr,"reformer"),uxr.forEach(t),QDe=r(TTe," \u2014 "),X7=n(TTe,"A",{href:!0});var _xr=s(X7);WDe=r(_xr,"ReformerConfig"),_xr.forEach(t),HDe=r(TTe," (Reformer model)"),TTe.forEach(t),UDe=i(L),im=n(L,"LI",{});var MTe=s(im);lK=n(MTe,"STRONG",{});var bxr=s(lK);JDe=r(bxr,"rembert"),bxr.forEach(t),YDe=r(MTe," \u2014 "),z7=n(MTe,"A",{href:!0});var Fxr=s(z7);KDe=r(Fxr,"RemBertConfig"),Fxr.forEach(t),ZDe=r(MTe," (RemBERT model)"),MTe.forEach(t),eGe=i(L),dm=n(L,"LI",{});var ETe=s(dm);iK=n(ETe,"STRONG",{});var vxr=s(iK);oGe=r(vxr,"resnet"),vxr.forEach(t),rGe=r(ETe," \u2014 "),Q7=n(ETe,"A",{href:!0});var Txr=s(Q7);tGe=r(Txr,"ResNetConfig"),Txr.forEach(t),aGe=r(ETe," (ResNet model)"),ETe.forEach(t),nGe=i(L),cm=n(L,"LI",{});var CTe=s(cm);dK=n(CTe,"STRONG",{});var Mxr=s(dK);sGe=r(Mxr,"retribert"),Mxr.forEach(t),lGe=r(CTe," \u2014 "),W7=n(CTe,"A",{href:!0});var Exr=s(W7);iGe=r(Exr,"RetriBertConfig"),Exr.forEach(t),dGe=r(CTe," (RetriBERT model)"),CTe.forEach(t),cGe=i(L),fm=n(L,"LI",{});var wTe=s(fm);cK=n(wTe,"STRONG",{});var Cxr=s(cK);fGe=r(Cxr,"roberta"),Cxr.forEach(t),mGe=r(wTe," \u2014 "),H7=n(wTe,"A",{href:!0});var wxr=s(H7);gGe=r(wxr,"RobertaConfig"),wxr.forEach(t),hGe=r(wTe," (RoBERTa model)"),wTe.forEach(t),pGe=i(L),mm=n(L,"LI",{});var ATe=s(mm);fK=n(ATe,"STRONG",{});var Axr=s(fK);uGe=r(Axr,"roformer"),Axr.forEach(t),_Ge=r(ATe," \u2014 "),U7=n(ATe,"A",{href:!0});var yxr=s(U7);bGe=r(yxr,"RoFormerConfig"),yxr.forEach(t),FGe=r(ATe," (RoFormer model)"),ATe.forEach(t),vGe=i(L),gm=n(L,"LI",{});var yTe=s(gm);mK=n(yTe,"STRONG",{});var Lxr=s(mK);TGe=r(Lxr,"segformer"),Lxr.forEach(t),MGe=r(yTe," \u2014 "),J7=n(yTe,"A",{href:!0});var xxr=s(J7);EGe=r(xxr,"SegformerConfig"),xxr.forEach(t),CGe=r(yTe," (SegFormer model)"),yTe.forEach(t),wGe=i(L),hm=n(L,"LI",{});var LTe=s(hm);gK=n(LTe,"STRONG",{});var $xr=s(gK);AGe=r($xr,"sew"),$xr.forEach(t),yGe=r(LTe," \u2014 "),Y7=n(LTe,"A",{href:!0});var kxr=s(Y7);LGe=r(kxr,"SEWConfig"),kxr.forEach(t),xGe=r(LTe," (SEW model)"),LTe.forEach(t),$Ge=i(L),pm=n(L,"LI",{});var xTe=s(pm);hK=n(xTe,"STRONG",{});var Sxr=s(hK);kGe=r(Sxr,"sew-d"),Sxr.forEach(t),SGe=r(xTe," \u2014 "),K7=n(xTe,"A",{href:!0});var Rxr=s(K7);RGe=r(Rxr,"SEWDConfig"),Rxr.forEach(t),BGe=r(xTe," (SEW-D model)"),xTe.forEach(t),PGe=i(L),um=n(L,"LI",{});var $Te=s(um);pK=n($Te,"STRONG",{});var Bxr=s(pK);IGe=r(Bxr,"speech-encoder-decoder"),Bxr.forEach(t),qGe=r($Te," \u2014 "),Z7=n($Te,"A",{href:!0});var Pxr=s(Z7);NGe=r(Pxr,"SpeechEncoderDecoderConfig"),Pxr.forEach(t),jGe=r($Te," (Speech Encoder decoder model)"),$Te.forEach(t),DGe=i(L),_m=n(L,"LI",{});var kTe=s(_m);uK=n(kTe,"STRONG",{});var Ixr=s(uK);GGe=r(Ixr,"speech_to_text"),Ixr.forEach(t),OGe=r(kTe," \u2014 "),e$=n(kTe,"A",{href:!0});var qxr=s(e$);VGe=r(qxr,"Speech2TextConfig"),qxr.forEach(t),XGe=r(kTe," (Speech2Text model)"),kTe.forEach(t),zGe=i(L),bm=n(L,"LI",{});var STe=s(bm);_K=n(STe,"STRONG",{});var Nxr=s(_K);QGe=r(Nxr,"speech_to_text_2"),Nxr.forEach(t),WGe=r(STe," \u2014 "),o$=n(STe,"A",{href:!0});var jxr=s(o$);HGe=r(jxr,"Speech2Text2Config"),jxr.forEach(t),UGe=r(STe," (Speech2Text2 model)"),STe.forEach(t),JGe=i(L),Fm=n(L,"LI",{});var RTe=s(Fm);bK=n(RTe,"STRONG",{});var Dxr=s(bK);YGe=r(Dxr,"splinter"),Dxr.forEach(t),KGe=r(RTe," \u2014 "),r$=n(RTe,"A",{href:!0});var Gxr=s(r$);ZGe=r(Gxr,"SplinterConfig"),Gxr.forEach(t),eOe=r(RTe," (Splinter model)"),RTe.forEach(t),oOe=i(L),vm=n(L,"LI",{});var BTe=s(vm);FK=n(BTe,"STRONG",{});var Oxr=s(FK);rOe=r(Oxr,"squeezebert"),Oxr.forEach(t),tOe=r(BTe," \u2014 "),t$=n(BTe,"A",{href:!0});var Vxr=s(t$);aOe=r(Vxr,"SqueezeBertConfig"),Vxr.forEach(t),nOe=r(BTe," (SqueezeBERT model)"),BTe.forEach(t),sOe=i(L),Tm=n(L,"LI",{});var PTe=s(Tm);vK=n(PTe,"STRONG",{});var Xxr=s(vK);lOe=r(Xxr,"swin"),Xxr.forEach(t),iOe=r(PTe," \u2014 "),a$=n(PTe,"A",{href:!0});var zxr=s(a$);dOe=r(zxr,"SwinConfig"),zxr.forEach(t),cOe=r(PTe," (Swin model)"),PTe.forEach(t),fOe=i(L),Mm=n(L,"LI",{});var ITe=s(Mm);TK=n(ITe,"STRONG",{});var Qxr=s(TK);mOe=r(Qxr,"t5"),Qxr.forEach(t),gOe=r(ITe," \u2014 "),n$=n(ITe,"A",{href:!0});var Wxr=s(n$);hOe=r(Wxr,"T5Config"),Wxr.forEach(t),pOe=r(ITe," (T5 model)"),ITe.forEach(t),uOe=i(L),Em=n(L,"LI",{});var qTe=s(Em);MK=n(qTe,"STRONG",{});var Hxr=s(MK);_Oe=r(Hxr,"tapas"),Hxr.forEach(t),bOe=r(qTe," \u2014 "),s$=n(qTe,"A",{href:!0});var Uxr=s(s$);FOe=r(Uxr,"TapasConfig"),Uxr.forEach(t),vOe=r(qTe," (TAPAS model)"),qTe.forEach(t),TOe=i(L),Cm=n(L,"LI",{});var NTe=s(Cm);EK=n(NTe,"STRONG",{});var Jxr=s(EK);MOe=r(Jxr,"transfo-xl"),Jxr.forEach(t),EOe=r(NTe," \u2014 "),l$=n(NTe,"A",{href:!0});var Yxr=s(l$);COe=r(Yxr,"TransfoXLConfig"),Yxr.forEach(t),wOe=r(NTe," (Transformer-XL model)"),NTe.forEach(t),AOe=i(L),wm=n(L,"LI",{});var jTe=s(wm);CK=n(jTe,"STRONG",{});var Kxr=s(CK);yOe=r(Kxr,"trocr"),Kxr.forEach(t),LOe=r(jTe," \u2014 "),i$=n(jTe,"A",{href:!0});var Zxr=s(i$);xOe=r(Zxr,"TrOCRConfig"),Zxr.forEach(t),$Oe=r(jTe," (TrOCR model)"),jTe.forEach(t),kOe=i(L),Am=n(L,"LI",{});var DTe=s(Am);wK=n(DTe,"STRONG",{});var e7r=s(wK);SOe=r(e7r,"unispeech"),e7r.forEach(t),ROe=r(DTe," \u2014 "),d$=n(DTe,"A",{href:!0});var o7r=s(d$);BOe=r(o7r,"UniSpeechConfig"),o7r.forEach(t),POe=r(DTe," (UniSpeech model)"),DTe.forEach(t),IOe=i(L),ym=n(L,"LI",{});var GTe=s(ym);AK=n(GTe,"STRONG",{});var r7r=s(AK);qOe=r(r7r,"unispeech-sat"),r7r.forEach(t),NOe=r(GTe," \u2014 "),c$=n(GTe,"A",{href:!0});var t7r=s(c$);jOe=r(t7r,"UniSpeechSatConfig"),t7r.forEach(t),DOe=r(GTe," (UniSpeechSat model)"),GTe.forEach(t),GOe=i(L),Lm=n(L,"LI",{});var OTe=s(Lm);yK=n(OTe,"STRONG",{});var a7r=s(yK);OOe=r(a7r,"van"),a7r.forEach(t),VOe=r(OTe," \u2014 "),f$=n(OTe,"A",{href:!0});var n7r=s(f$);XOe=r(n7r,"VanConfig"),n7r.forEach(t),zOe=r(OTe," (VAN model)"),OTe.forEach(t),QOe=i(L),xm=n(L,"LI",{});var VTe=s(xm);LK=n(VTe,"STRONG",{});var s7r=s(LK);WOe=r(s7r,"vilt"),s7r.forEach(t),HOe=r(VTe," \u2014 "),m$=n(VTe,"A",{href:!0});var l7r=s(m$);UOe=r(l7r,"ViltConfig"),l7r.forEach(t),JOe=r(VTe," (ViLT model)"),VTe.forEach(t),YOe=i(L),$m=n(L,"LI",{});var XTe=s($m);xK=n(XTe,"STRONG",{});var i7r=s(xK);KOe=r(i7r,"vision-encoder-decoder"),i7r.forEach(t),ZOe=r(XTe," \u2014 "),g$=n(XTe,"A",{href:!0});var d7r=s(g$);eVe=r(d7r,"VisionEncoderDecoderConfig"),d7r.forEach(t),oVe=r(XTe," (Vision Encoder decoder model)"),XTe.forEach(t),rVe=i(L),km=n(L,"LI",{});var zTe=s(km);$K=n(zTe,"STRONG",{});var c7r=s($K);tVe=r(c7r,"vision-text-dual-encoder"),c7r.forEach(t),aVe=r(zTe," \u2014 "),h$=n(zTe,"A",{href:!0});var f7r=s(h$);nVe=r(f7r,"VisionTextDualEncoderConfig"),f7r.forEach(t),sVe=r(zTe," (VisionTextDualEncoder model)"),zTe.forEach(t),lVe=i(L),Sm=n(L,"LI",{});var QTe=s(Sm);kK=n(QTe,"STRONG",{});var m7r=s(kK);iVe=r(m7r,"visual_bert"),m7r.forEach(t),dVe=r(QTe," \u2014 "),p$=n(QTe,"A",{href:!0});var g7r=s(p$);cVe=r(g7r,"VisualBertConfig"),g7r.forEach(t),fVe=r(QTe," (VisualBert model)"),QTe.forEach(t),mVe=i(L),Rm=n(L,"LI",{});var WTe=s(Rm);SK=n(WTe,"STRONG",{});var h7r=s(SK);gVe=r(h7r,"vit"),h7r.forEach(t),hVe=r(WTe," \u2014 "),u$=n(WTe,"A",{href:!0});var p7r=s(u$);pVe=r(p7r,"ViTConfig"),p7r.forEach(t),uVe=r(WTe," (ViT model)"),WTe.forEach(t),_Ve=i(L),Bm=n(L,"LI",{});var HTe=s(Bm);RK=n(HTe,"STRONG",{});var u7r=s(RK);bVe=r(u7r,"vit_mae"),u7r.forEach(t),FVe=r(HTe," \u2014 "),_$=n(HTe,"A",{href:!0});var _7r=s(_$);vVe=r(_7r,"ViTMAEConfig"),_7r.forEach(t),TVe=r(HTe," (ViTMAE model)"),HTe.forEach(t),MVe=i(L),Pm=n(L,"LI",{});var UTe=s(Pm);BK=n(UTe,"STRONG",{});var b7r=s(BK);EVe=r(b7r,"wav2vec2"),b7r.forEach(t),CVe=r(UTe," \u2014 "),b$=n(UTe,"A",{href:!0});var F7r=s(b$);wVe=r(F7r,"Wav2Vec2Config"),F7r.forEach(t),AVe=r(UTe," (Wav2Vec2 model)"),UTe.forEach(t),yVe=i(L),Im=n(L,"LI",{});var JTe=s(Im);PK=n(JTe,"STRONG",{});var v7r=s(PK);LVe=r(v7r,"wavlm"),v7r.forEach(t),xVe=r(JTe," \u2014 "),F$=n(JTe,"A",{href:!0});var T7r=s(F$);$Ve=r(T7r,"WavLMConfig"),T7r.forEach(t),kVe=r(JTe," (WavLM model)"),JTe.forEach(t),SVe=i(L),qm=n(L,"LI",{});var YTe=s(qm);IK=n(YTe,"STRONG",{});var M7r=s(IK);RVe=r(M7r,"xglm"),M7r.forEach(t),BVe=r(YTe," \u2014 "),v$=n(YTe,"A",{href:!0});var E7r=s(v$);PVe=r(E7r,"XGLMConfig"),E7r.forEach(t),IVe=r(YTe," (XGLM model)"),YTe.forEach(t),qVe=i(L),Nm=n(L,"LI",{});var KTe=s(Nm);qK=n(KTe,"STRONG",{});var C7r=s(qK);NVe=r(C7r,"xlm"),C7r.forEach(t),jVe=r(KTe," \u2014 "),T$=n(KTe,"A",{href:!0});var w7r=s(T$);DVe=r(w7r,"XLMConfig"),w7r.forEach(t),GVe=r(KTe," (XLM model)"),KTe.forEach(t),OVe=i(L),jm=n(L,"LI",{});var ZTe=s(jm);NK=n(ZTe,"STRONG",{});var A7r=s(NK);VVe=r(A7r,"xlm-prophetnet"),A7r.forEach(t),XVe=r(ZTe," \u2014 "),M$=n(ZTe,"A",{href:!0});var y7r=s(M$);zVe=r(y7r,"XLMProphetNetConfig"),y7r.forEach(t),QVe=r(ZTe," (XLMProphetNet model)"),ZTe.forEach(t),WVe=i(L),Dm=n(L,"LI",{});var eMe=s(Dm);jK=n(eMe,"STRONG",{});var L7r=s(jK);HVe=r(L7r,"xlm-roberta"),L7r.forEach(t),UVe=r(eMe," \u2014 "),E$=n(eMe,"A",{href:!0});var x7r=s(E$);JVe=r(x7r,"XLMRobertaConfig"),x7r.forEach(t),YVe=r(eMe," (XLM-RoBERTa model)"),eMe.forEach(t),KVe=i(L),Gm=n(L,"LI",{});var oMe=s(Gm);DK=n(oMe,"STRONG",{});var $7r=s(DK);ZVe=r($7r,"xlm-roberta-xl"),$7r.forEach(t),eXe=r(oMe," \u2014 "),C$=n(oMe,"A",{href:!0});var k7r=s(C$);oXe=r(k7r,"XLMRobertaXLConfig"),k7r.forEach(t),rXe=r(oMe," (XLM-RoBERTa-XL model)"),oMe.forEach(t),tXe=i(L),Om=n(L,"LI",{});var rMe=s(Om);GK=n(rMe,"STRONG",{});var S7r=s(GK);aXe=r(S7r,"xlnet"),S7r.forEach(t),nXe=r(rMe," \u2014 "),w$=n(rMe,"A",{href:!0});var R7r=s(w$);sXe=r(R7r,"XLNetConfig"),R7r.forEach(t),lXe=r(rMe," (XLNet model)"),rMe.forEach(t),iXe=i(L),Vm=n(L,"LI",{});var tMe=s(Vm);OK=n(tMe,"STRONG",{});var B7r=s(OK);dXe=r(B7r,"yoso"),B7r.forEach(t),cXe=r(tMe," \u2014 "),A$=n(tMe,"A",{href:!0});var P7r=s(A$);fXe=r(P7r,"YosoConfig"),P7r.forEach(t),mXe=r(tMe," (YOSO model)"),tMe.forEach(t),L.forEach(t),gXe=i(Jr),T(Xm.$$.fragment,Jr),Jr.forEach(t),hXe=i(Ur),zm=n(Ur,"DIV",{class:!0});var $Se=s(zm);T(Bw.$$.fragment,$Se),pXe=i($Se),VK=n($Se,"P",{});var I7r=s(VK);uXe=r(I7r,"Register a new configuration for this class."),I7r.forEach(t),$Se.forEach(t),Ur.forEach(t),P$e=i(f),ri=n(f,"H2",{class:!0});var kSe=s(ri);Qm=n(kSe,"A",{id:!0,class:!0,href:!0});var q7r=s(Qm);XK=n(q7r,"SPAN",{});var N7r=s(XK);T(Pw.$$.fragment,N7r),N7r.forEach(t),q7r.forEach(t),_Xe=i(kSe),zK=n(kSe,"SPAN",{});var j7r=s(zK);bXe=r(j7r,"AutoTokenizer"),j7r.forEach(t),kSe.forEach(t),I$e=i(f),Eo=n(f,"DIV",{class:!0});var Ts=s(Eo);T(Iw.$$.fragment,Ts),FXe=i(Ts),qw=n(Ts,"P",{});var SSe=s(qw);vXe=r(SSe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),y$=n(SSe,"A",{href:!0});var D7r=s(y$);TXe=r(D7r,"AutoTokenizer.from_pretrained()"),D7r.forEach(t),MXe=r(SSe," class method."),SSe.forEach(t),EXe=i(Ts),Nw=n(Ts,"P",{});var RSe=s(Nw);CXe=r(RSe,"This class cannot be instantiated directly using "),QK=n(RSe,"CODE",{});var G7r=s(QK);wXe=r(G7r,"__init__()"),G7r.forEach(t),AXe=r(RSe," (throws an error)."),RSe.forEach(t),yXe=i(Ts),Tr=n(Ts,"DIV",{class:!0});var Ms=s(Tr);T(jw.$$.fragment,Ms),LXe=i(Ms),WK=n(Ms,"P",{});var O7r=s(WK);xXe=r(O7r,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),O7r.forEach(t),$Xe=i(Ms),va=n(Ms,"P",{});var kC=s(va);kXe=r(kC,"The tokenizer class to instantiate is selected based on the "),HK=n(kC,"CODE",{});var V7r=s(HK);SXe=r(V7r,"model_type"),V7r.forEach(t),RXe=r(kC,` property of the config object (either
passed as an argument or loaded from `),UK=n(kC,"CODE",{});var X7r=s(UK);BXe=r(X7r,"pretrained_model_name_or_path"),X7r.forEach(t),PXe=r(kC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JK=n(kC,"CODE",{});var z7r=s(JK);IXe=r(z7r,"pretrained_model_name_or_path"),z7r.forEach(t),qXe=r(kC,":"),kC.forEach(t),NXe=i(Ms),S=n(Ms,"UL",{});var R=s(S);wn=n(R,"LI",{});var P8=s(wn);YK=n(P8,"STRONG",{});var Q7r=s(YK);jXe=r(Q7r,"albert"),Q7r.forEach(t),DXe=r(P8," \u2014 "),L$=n(P8,"A",{href:!0});var W7r=s(L$);GXe=r(W7r,"AlbertTokenizer"),W7r.forEach(t),OXe=r(P8," or "),x$=n(P8,"A",{href:!0});var H7r=s(x$);VXe=r(H7r,"AlbertTokenizerFast"),H7r.forEach(t),XXe=r(P8," (ALBERT model)"),P8.forEach(t),zXe=i(R),An=n(R,"LI",{});var I8=s(An);KK=n(I8,"STRONG",{});var U7r=s(KK);QXe=r(U7r,"bart"),U7r.forEach(t),WXe=r(I8," \u2014 "),$$=n(I8,"A",{href:!0});var J7r=s($$);HXe=r(J7r,"BartTokenizer"),J7r.forEach(t),UXe=r(I8," or "),k$=n(I8,"A",{href:!0});var Y7r=s(k$);JXe=r(Y7r,"BartTokenizerFast"),Y7r.forEach(t),YXe=r(I8," (BART model)"),I8.forEach(t),KXe=i(R),yn=n(R,"LI",{});var q8=s(yn);ZK=n(q8,"STRONG",{});var K7r=s(ZK);ZXe=r(K7r,"barthez"),K7r.forEach(t),eze=r(q8," \u2014 "),S$=n(q8,"A",{href:!0});var Z7r=s(S$);oze=r(Z7r,"BarthezTokenizer"),Z7r.forEach(t),rze=r(q8," or "),R$=n(q8,"A",{href:!0});var e$r=s(R$);tze=r(e$r,"BarthezTokenizerFast"),e$r.forEach(t),aze=r(q8," (BARThez model)"),q8.forEach(t),nze=i(R),Wm=n(R,"LI",{});var aMe=s(Wm);eZ=n(aMe,"STRONG",{});var o$r=s(eZ);sze=r(o$r,"bartpho"),o$r.forEach(t),lze=r(aMe," \u2014 "),B$=n(aMe,"A",{href:!0});var r$r=s(B$);ize=r(r$r,"BartphoTokenizer"),r$r.forEach(t),dze=r(aMe," (BARTpho model)"),aMe.forEach(t),cze=i(R),Ln=n(R,"LI",{});var N8=s(Ln);oZ=n(N8,"STRONG",{});var t$r=s(oZ);fze=r(t$r,"bert"),t$r.forEach(t),mze=r(N8," \u2014 "),P$=n(N8,"A",{href:!0});var a$r=s(P$);gze=r(a$r,"BertTokenizer"),a$r.forEach(t),hze=r(N8," or "),I$=n(N8,"A",{href:!0});var n$r=s(I$);pze=r(n$r,"BertTokenizerFast"),n$r.forEach(t),uze=r(N8," (BERT model)"),N8.forEach(t),_ze=i(R),Hm=n(R,"LI",{});var nMe=s(Hm);rZ=n(nMe,"STRONG",{});var s$r=s(rZ);bze=r(s$r,"bert-generation"),s$r.forEach(t),Fze=r(nMe," \u2014 "),q$=n(nMe,"A",{href:!0});var l$r=s(q$);vze=r(l$r,"BertGenerationTokenizer"),l$r.forEach(t),Tze=r(nMe," (Bert Generation model)"),nMe.forEach(t),Mze=i(R),Um=n(R,"LI",{});var sMe=s(Um);tZ=n(sMe,"STRONG",{});var i$r=s(tZ);Eze=r(i$r,"bert-japanese"),i$r.forEach(t),Cze=r(sMe," \u2014 "),N$=n(sMe,"A",{href:!0});var d$r=s(N$);wze=r(d$r,"BertJapaneseTokenizer"),d$r.forEach(t),Aze=r(sMe," (BertJapanese model)"),sMe.forEach(t),yze=i(R),Jm=n(R,"LI",{});var lMe=s(Jm);aZ=n(lMe,"STRONG",{});var c$r=s(aZ);Lze=r(c$r,"bertweet"),c$r.forEach(t),xze=r(lMe," \u2014 "),j$=n(lMe,"A",{href:!0});var f$r=s(j$);$ze=r(f$r,"BertweetTokenizer"),f$r.forEach(t),kze=r(lMe," (Bertweet model)"),lMe.forEach(t),Sze=i(R),xn=n(R,"LI",{});var j8=s(xn);nZ=n(j8,"STRONG",{});var m$r=s(nZ);Rze=r(m$r,"big_bird"),m$r.forEach(t),Bze=r(j8," \u2014 "),D$=n(j8,"A",{href:!0});var g$r=s(D$);Pze=r(g$r,"BigBirdTokenizer"),g$r.forEach(t),Ize=r(j8," or "),G$=n(j8,"A",{href:!0});var h$r=s(G$);qze=r(h$r,"BigBirdTokenizerFast"),h$r.forEach(t),Nze=r(j8," (BigBird model)"),j8.forEach(t),jze=i(R),$n=n(R,"LI",{});var D8=s($n);sZ=n(D8,"STRONG",{});var p$r=s(sZ);Dze=r(p$r,"bigbird_pegasus"),p$r.forEach(t),Gze=r(D8," \u2014 "),O$=n(D8,"A",{href:!0});var u$r=s(O$);Oze=r(u$r,"PegasusTokenizer"),u$r.forEach(t),Vze=r(D8," or "),V$=n(D8,"A",{href:!0});var _$r=s(V$);Xze=r(_$r,"PegasusTokenizerFast"),_$r.forEach(t),zze=r(D8," (BigBirdPegasus model)"),D8.forEach(t),Qze=i(R),kn=n(R,"LI",{});var G8=s(kn);lZ=n(G8,"STRONG",{});var b$r=s(lZ);Wze=r(b$r,"blenderbot"),b$r.forEach(t),Hze=r(G8," \u2014 "),X$=n(G8,"A",{href:!0});var F$r=s(X$);Uze=r(F$r,"BlenderbotTokenizer"),F$r.forEach(t),Jze=r(G8," or "),z$=n(G8,"A",{href:!0});var v$r=s(z$);Yze=r(v$r,"BlenderbotTokenizerFast"),v$r.forEach(t),Kze=r(G8," (Blenderbot model)"),G8.forEach(t),Zze=i(R),Ym=n(R,"LI",{});var iMe=s(Ym);iZ=n(iMe,"STRONG",{});var T$r=s(iZ);eQe=r(T$r,"blenderbot-small"),T$r.forEach(t),oQe=r(iMe," \u2014 "),Q$=n(iMe,"A",{href:!0});var M$r=s(Q$);rQe=r(M$r,"BlenderbotSmallTokenizer"),M$r.forEach(t),tQe=r(iMe," (BlenderbotSmall model)"),iMe.forEach(t),aQe=i(R),Km=n(R,"LI",{});var dMe=s(Km);dZ=n(dMe,"STRONG",{});var E$r=s(dZ);nQe=r(E$r,"byt5"),E$r.forEach(t),sQe=r(dMe," \u2014 "),W$=n(dMe,"A",{href:!0});var C$r=s(W$);lQe=r(C$r,"ByT5Tokenizer"),C$r.forEach(t),iQe=r(dMe," (ByT5 model)"),dMe.forEach(t),dQe=i(R),Sn=n(R,"LI",{});var O8=s(Sn);cZ=n(O8,"STRONG",{});var w$r=s(cZ);cQe=r(w$r,"camembert"),w$r.forEach(t),fQe=r(O8," \u2014 "),H$=n(O8,"A",{href:!0});var A$r=s(H$);mQe=r(A$r,"CamembertTokenizer"),A$r.forEach(t),gQe=r(O8," or "),U$=n(O8,"A",{href:!0});var y$r=s(U$);hQe=r(y$r,"CamembertTokenizerFast"),y$r.forEach(t),pQe=r(O8," (CamemBERT model)"),O8.forEach(t),uQe=i(R),Zm=n(R,"LI",{});var cMe=s(Zm);fZ=n(cMe,"STRONG",{});var L$r=s(fZ);_Qe=r(L$r,"canine"),L$r.forEach(t),bQe=r(cMe," \u2014 "),J$=n(cMe,"A",{href:!0});var x$r=s(J$);FQe=r(x$r,"CanineTokenizer"),x$r.forEach(t),vQe=r(cMe," (Canine model)"),cMe.forEach(t),TQe=i(R),Rn=n(R,"LI",{});var V8=s(Rn);mZ=n(V8,"STRONG",{});var $$r=s(mZ);MQe=r($$r,"clip"),$$r.forEach(t),EQe=r(V8," \u2014 "),Y$=n(V8,"A",{href:!0});var k$r=s(Y$);CQe=r(k$r,"CLIPTokenizer"),k$r.forEach(t),wQe=r(V8," or "),K$=n(V8,"A",{href:!0});var S$r=s(K$);AQe=r(S$r,"CLIPTokenizerFast"),S$r.forEach(t),yQe=r(V8," (CLIP model)"),V8.forEach(t),LQe=i(R),Bn=n(R,"LI",{});var X8=s(Bn);gZ=n(X8,"STRONG",{});var R$r=s(gZ);xQe=r(R$r,"convbert"),R$r.forEach(t),$Qe=r(X8," \u2014 "),Z$=n(X8,"A",{href:!0});var B$r=s(Z$);kQe=r(B$r,"ConvBertTokenizer"),B$r.forEach(t),SQe=r(X8," or "),ek=n(X8,"A",{href:!0});var P$r=s(ek);RQe=r(P$r,"ConvBertTokenizerFast"),P$r.forEach(t),BQe=r(X8," (ConvBERT model)"),X8.forEach(t),PQe=i(R),Pn=n(R,"LI",{});var z8=s(Pn);hZ=n(z8,"STRONG",{});var I$r=s(hZ);IQe=r(I$r,"cpm"),I$r.forEach(t),qQe=r(z8," \u2014 "),ok=n(z8,"A",{href:!0});var q$r=s(ok);NQe=r(q$r,"CpmTokenizer"),q$r.forEach(t),jQe=r(z8," or "),pZ=n(z8,"CODE",{});var N$r=s(pZ);DQe=r(N$r,"CpmTokenizerFast"),N$r.forEach(t),GQe=r(z8," (CPM model)"),z8.forEach(t),OQe=i(R),eg=n(R,"LI",{});var fMe=s(eg);uZ=n(fMe,"STRONG",{});var j$r=s(uZ);VQe=r(j$r,"ctrl"),j$r.forEach(t),XQe=r(fMe," \u2014 "),rk=n(fMe,"A",{href:!0});var D$r=s(rk);zQe=r(D$r,"CTRLTokenizer"),D$r.forEach(t),QQe=r(fMe," (CTRL model)"),fMe.forEach(t),WQe=i(R),In=n(R,"LI",{});var Q8=s(In);_Z=n(Q8,"STRONG",{});var G$r=s(_Z);HQe=r(G$r,"deberta"),G$r.forEach(t),UQe=r(Q8," \u2014 "),tk=n(Q8,"A",{href:!0});var O$r=s(tk);JQe=r(O$r,"DebertaTokenizer"),O$r.forEach(t),YQe=r(Q8," or "),ak=n(Q8,"A",{href:!0});var V$r=s(ak);KQe=r(V$r,"DebertaTokenizerFast"),V$r.forEach(t),ZQe=r(Q8," (DeBERTa model)"),Q8.forEach(t),eWe=i(R),og=n(R,"LI",{});var mMe=s(og);bZ=n(mMe,"STRONG",{});var X$r=s(bZ);oWe=r(X$r,"deberta-v2"),X$r.forEach(t),rWe=r(mMe," \u2014 "),nk=n(mMe,"A",{href:!0});var z$r=s(nk);tWe=r(z$r,"DebertaV2Tokenizer"),z$r.forEach(t),aWe=r(mMe," (DeBERTa-v2 model)"),mMe.forEach(t),nWe=i(R),qn=n(R,"LI",{});var W8=s(qn);FZ=n(W8,"STRONG",{});var Q$r=s(FZ);sWe=r(Q$r,"distilbert"),Q$r.forEach(t),lWe=r(W8," \u2014 "),sk=n(W8,"A",{href:!0});var W$r=s(sk);iWe=r(W$r,"DistilBertTokenizer"),W$r.forEach(t),dWe=r(W8," or "),lk=n(W8,"A",{href:!0});var H$r=s(lk);cWe=r(H$r,"DistilBertTokenizerFast"),H$r.forEach(t),fWe=r(W8," (DistilBERT model)"),W8.forEach(t),mWe=i(R),Nn=n(R,"LI",{});var H8=s(Nn);vZ=n(H8,"STRONG",{});var U$r=s(vZ);gWe=r(U$r,"dpr"),U$r.forEach(t),hWe=r(H8," \u2014 "),ik=n(H8,"A",{href:!0});var J$r=s(ik);pWe=r(J$r,"DPRQuestionEncoderTokenizer"),J$r.forEach(t),uWe=r(H8," or "),dk=n(H8,"A",{href:!0});var Y$r=s(dk);_We=r(Y$r,"DPRQuestionEncoderTokenizerFast"),Y$r.forEach(t),bWe=r(H8," (DPR model)"),H8.forEach(t),FWe=i(R),jn=n(R,"LI",{});var U8=s(jn);TZ=n(U8,"STRONG",{});var K$r=s(TZ);vWe=r(K$r,"electra"),K$r.forEach(t),TWe=r(U8," \u2014 "),ck=n(U8,"A",{href:!0});var Z$r=s(ck);MWe=r(Z$r,"ElectraTokenizer"),Z$r.forEach(t),EWe=r(U8," or "),fk=n(U8,"A",{href:!0});var ekr=s(fk);CWe=r(ekr,"ElectraTokenizerFast"),ekr.forEach(t),wWe=r(U8," (ELECTRA model)"),U8.forEach(t),AWe=i(R),rg=n(R,"LI",{});var gMe=s(rg);MZ=n(gMe,"STRONG",{});var okr=s(MZ);yWe=r(okr,"flaubert"),okr.forEach(t),LWe=r(gMe," \u2014 "),mk=n(gMe,"A",{href:!0});var rkr=s(mk);xWe=r(rkr,"FlaubertTokenizer"),rkr.forEach(t),$We=r(gMe," (FlauBERT model)"),gMe.forEach(t),kWe=i(R),Dn=n(R,"LI",{});var J8=s(Dn);EZ=n(J8,"STRONG",{});var tkr=s(EZ);SWe=r(tkr,"fnet"),tkr.forEach(t),RWe=r(J8," \u2014 "),gk=n(J8,"A",{href:!0});var akr=s(gk);BWe=r(akr,"FNetTokenizer"),akr.forEach(t),PWe=r(J8," or "),hk=n(J8,"A",{href:!0});var nkr=s(hk);IWe=r(nkr,"FNetTokenizerFast"),nkr.forEach(t),qWe=r(J8," (FNet model)"),J8.forEach(t),NWe=i(R),tg=n(R,"LI",{});var hMe=s(tg);CZ=n(hMe,"STRONG",{});var skr=s(CZ);jWe=r(skr,"fsmt"),skr.forEach(t),DWe=r(hMe," \u2014 "),pk=n(hMe,"A",{href:!0});var lkr=s(pk);GWe=r(lkr,"FSMTTokenizer"),lkr.forEach(t),OWe=r(hMe," (FairSeq Machine-Translation model)"),hMe.forEach(t),VWe=i(R),Gn=n(R,"LI",{});var Y8=s(Gn);wZ=n(Y8,"STRONG",{});var ikr=s(wZ);XWe=r(ikr,"funnel"),ikr.forEach(t),zWe=r(Y8," \u2014 "),uk=n(Y8,"A",{href:!0});var dkr=s(uk);QWe=r(dkr,"FunnelTokenizer"),dkr.forEach(t),WWe=r(Y8," or "),_k=n(Y8,"A",{href:!0});var ckr=s(_k);HWe=r(ckr,"FunnelTokenizerFast"),ckr.forEach(t),UWe=r(Y8," (Funnel Transformer model)"),Y8.forEach(t),JWe=i(R),On=n(R,"LI",{});var K8=s(On);AZ=n(K8,"STRONG",{});var fkr=s(AZ);YWe=r(fkr,"gpt2"),fkr.forEach(t),KWe=r(K8," \u2014 "),bk=n(K8,"A",{href:!0});var mkr=s(bk);ZWe=r(mkr,"GPT2Tokenizer"),mkr.forEach(t),eHe=r(K8," or "),Fk=n(K8,"A",{href:!0});var gkr=s(Fk);oHe=r(gkr,"GPT2TokenizerFast"),gkr.forEach(t),rHe=r(K8," (OpenAI GPT-2 model)"),K8.forEach(t),tHe=i(R),Vn=n(R,"LI",{});var Z8=s(Vn);yZ=n(Z8,"STRONG",{});var hkr=s(yZ);aHe=r(hkr,"gpt_neo"),hkr.forEach(t),nHe=r(Z8," \u2014 "),vk=n(Z8,"A",{href:!0});var pkr=s(vk);sHe=r(pkr,"GPT2Tokenizer"),pkr.forEach(t),lHe=r(Z8," or "),Tk=n(Z8,"A",{href:!0});var ukr=s(Tk);iHe=r(ukr,"GPT2TokenizerFast"),ukr.forEach(t),dHe=r(Z8," (GPT Neo model)"),Z8.forEach(t),cHe=i(R),Xn=n(R,"LI",{});var ex=s(Xn);LZ=n(ex,"STRONG",{});var _kr=s(LZ);fHe=r(_kr,"herbert"),_kr.forEach(t),mHe=r(ex," \u2014 "),Mk=n(ex,"A",{href:!0});var bkr=s(Mk);gHe=r(bkr,"HerbertTokenizer"),bkr.forEach(t),hHe=r(ex," or "),Ek=n(ex,"A",{href:!0});var Fkr=s(Ek);pHe=r(Fkr,"HerbertTokenizerFast"),Fkr.forEach(t),uHe=r(ex," (HerBERT model)"),ex.forEach(t),_He=i(R),ag=n(R,"LI",{});var pMe=s(ag);xZ=n(pMe,"STRONG",{});var vkr=s(xZ);bHe=r(vkr,"hubert"),vkr.forEach(t),FHe=r(pMe," \u2014 "),Ck=n(pMe,"A",{href:!0});var Tkr=s(Ck);vHe=r(Tkr,"Wav2Vec2CTCTokenizer"),Tkr.forEach(t),THe=r(pMe," (Hubert model)"),pMe.forEach(t),MHe=i(R),zn=n(R,"LI",{});var ox=s(zn);$Z=n(ox,"STRONG",{});var Mkr=s($Z);EHe=r(Mkr,"ibert"),Mkr.forEach(t),CHe=r(ox," \u2014 "),wk=n(ox,"A",{href:!0});var Ekr=s(wk);wHe=r(Ekr,"RobertaTokenizer"),Ekr.forEach(t),AHe=r(ox," or "),Ak=n(ox,"A",{href:!0});var Ckr=s(Ak);yHe=r(Ckr,"RobertaTokenizerFast"),Ckr.forEach(t),LHe=r(ox," (I-BERT model)"),ox.forEach(t),xHe=i(R),Qn=n(R,"LI",{});var rx=s(Qn);kZ=n(rx,"STRONG",{});var wkr=s(kZ);$He=r(wkr,"layoutlm"),wkr.forEach(t),kHe=r(rx," \u2014 "),yk=n(rx,"A",{href:!0});var Akr=s(yk);SHe=r(Akr,"LayoutLMTokenizer"),Akr.forEach(t),RHe=r(rx," or "),Lk=n(rx,"A",{href:!0});var ykr=s(Lk);BHe=r(ykr,"LayoutLMTokenizerFast"),ykr.forEach(t),PHe=r(rx," (LayoutLM model)"),rx.forEach(t),IHe=i(R),Wn=n(R,"LI",{});var tx=s(Wn);SZ=n(tx,"STRONG",{});var Lkr=s(SZ);qHe=r(Lkr,"layoutlmv2"),Lkr.forEach(t),NHe=r(tx," \u2014 "),xk=n(tx,"A",{href:!0});var xkr=s(xk);jHe=r(xkr,"LayoutLMv2Tokenizer"),xkr.forEach(t),DHe=r(tx," or "),$k=n(tx,"A",{href:!0});var $kr=s($k);GHe=r($kr,"LayoutLMv2TokenizerFast"),$kr.forEach(t),OHe=r(tx," (LayoutLMv2 model)"),tx.forEach(t),VHe=i(R),Hn=n(R,"LI",{});var ax=s(Hn);RZ=n(ax,"STRONG",{});var kkr=s(RZ);XHe=r(kkr,"layoutxlm"),kkr.forEach(t),zHe=r(ax," \u2014 "),kk=n(ax,"A",{href:!0});var Skr=s(kk);QHe=r(Skr,"LayoutXLMTokenizer"),Skr.forEach(t),WHe=r(ax," or "),Sk=n(ax,"A",{href:!0});var Rkr=s(Sk);HHe=r(Rkr,"LayoutXLMTokenizerFast"),Rkr.forEach(t),UHe=r(ax," (LayoutXLM model)"),ax.forEach(t),JHe=i(R),Un=n(R,"LI",{});var nx=s(Un);BZ=n(nx,"STRONG",{});var Bkr=s(BZ);YHe=r(Bkr,"led"),Bkr.forEach(t),KHe=r(nx," \u2014 "),Rk=n(nx,"A",{href:!0});var Pkr=s(Rk);ZHe=r(Pkr,"LEDTokenizer"),Pkr.forEach(t),eUe=r(nx," or "),Bk=n(nx,"A",{href:!0});var Ikr=s(Bk);oUe=r(Ikr,"LEDTokenizerFast"),Ikr.forEach(t),rUe=r(nx," (LED model)"),nx.forEach(t),tUe=i(R),Jn=n(R,"LI",{});var sx=s(Jn);PZ=n(sx,"STRONG",{});var qkr=s(PZ);aUe=r(qkr,"longformer"),qkr.forEach(t),nUe=r(sx," \u2014 "),Pk=n(sx,"A",{href:!0});var Nkr=s(Pk);sUe=r(Nkr,"LongformerTokenizer"),Nkr.forEach(t),lUe=r(sx," or "),Ik=n(sx,"A",{href:!0});var jkr=s(Ik);iUe=r(jkr,"LongformerTokenizerFast"),jkr.forEach(t),dUe=r(sx," (Longformer model)"),sx.forEach(t),cUe=i(R),ng=n(R,"LI",{});var uMe=s(ng);IZ=n(uMe,"STRONG",{});var Dkr=s(IZ);fUe=r(Dkr,"luke"),Dkr.forEach(t),mUe=r(uMe," \u2014 "),qk=n(uMe,"A",{href:!0});var Gkr=s(qk);gUe=r(Gkr,"LukeTokenizer"),Gkr.forEach(t),hUe=r(uMe," (LUKE model)"),uMe.forEach(t),pUe=i(R),Yn=n(R,"LI",{});var lx=s(Yn);qZ=n(lx,"STRONG",{});var Okr=s(qZ);uUe=r(Okr,"lxmert"),Okr.forEach(t),_Ue=r(lx," \u2014 "),Nk=n(lx,"A",{href:!0});var Vkr=s(Nk);bUe=r(Vkr,"LxmertTokenizer"),Vkr.forEach(t),FUe=r(lx," or "),jk=n(lx,"A",{href:!0});var Xkr=s(jk);vUe=r(Xkr,"LxmertTokenizerFast"),Xkr.forEach(t),TUe=r(lx," (LXMERT model)"),lx.forEach(t),MUe=i(R),sg=n(R,"LI",{});var _Me=s(sg);NZ=n(_Me,"STRONG",{});var zkr=s(NZ);EUe=r(zkr,"m2m_100"),zkr.forEach(t),CUe=r(_Me," \u2014 "),Dk=n(_Me,"A",{href:!0});var Qkr=s(Dk);wUe=r(Qkr,"M2M100Tokenizer"),Qkr.forEach(t),AUe=r(_Me," (M2M100 model)"),_Me.forEach(t),yUe=i(R),lg=n(R,"LI",{});var bMe=s(lg);jZ=n(bMe,"STRONG",{});var Wkr=s(jZ);LUe=r(Wkr,"marian"),Wkr.forEach(t),xUe=r(bMe," \u2014 "),Gk=n(bMe,"A",{href:!0});var Hkr=s(Gk);$Ue=r(Hkr,"MarianTokenizer"),Hkr.forEach(t),kUe=r(bMe," (Marian model)"),bMe.forEach(t),SUe=i(R),Kn=n(R,"LI",{});var ix=s(Kn);DZ=n(ix,"STRONG",{});var Ukr=s(DZ);RUe=r(Ukr,"mbart"),Ukr.forEach(t),BUe=r(ix," \u2014 "),Ok=n(ix,"A",{href:!0});var Jkr=s(Ok);PUe=r(Jkr,"MBartTokenizer"),Jkr.forEach(t),IUe=r(ix," or "),Vk=n(ix,"A",{href:!0});var Ykr=s(Vk);qUe=r(Ykr,"MBartTokenizerFast"),Ykr.forEach(t),NUe=r(ix," (mBART model)"),ix.forEach(t),jUe=i(R),Zn=n(R,"LI",{});var dx=s(Zn);GZ=n(dx,"STRONG",{});var Kkr=s(GZ);DUe=r(Kkr,"mbart50"),Kkr.forEach(t),GUe=r(dx," \u2014 "),Xk=n(dx,"A",{href:!0});var Zkr=s(Xk);OUe=r(Zkr,"MBart50Tokenizer"),Zkr.forEach(t),VUe=r(dx," or "),zk=n(dx,"A",{href:!0});var eSr=s(zk);XUe=r(eSr,"MBart50TokenizerFast"),eSr.forEach(t),zUe=r(dx," (mBART-50 model)"),dx.forEach(t),QUe=i(R),ig=n(R,"LI",{});var FMe=s(ig);OZ=n(FMe,"STRONG",{});var oSr=s(OZ);WUe=r(oSr,"mluke"),oSr.forEach(t),HUe=r(FMe," \u2014 "),Qk=n(FMe,"A",{href:!0});var rSr=s(Qk);UUe=r(rSr,"MLukeTokenizer"),rSr.forEach(t),JUe=r(FMe," (mLUKE model)"),FMe.forEach(t),YUe=i(R),es=n(R,"LI",{});var cx=s(es);VZ=n(cx,"STRONG",{});var tSr=s(VZ);KUe=r(tSr,"mobilebert"),tSr.forEach(t),ZUe=r(cx," \u2014 "),Wk=n(cx,"A",{href:!0});var aSr=s(Wk);eJe=r(aSr,"MobileBertTokenizer"),aSr.forEach(t),oJe=r(cx," or "),Hk=n(cx,"A",{href:!0});var nSr=s(Hk);rJe=r(nSr,"MobileBertTokenizerFast"),nSr.forEach(t),tJe=r(cx," (MobileBERT model)"),cx.forEach(t),aJe=i(R),os=n(R,"LI",{});var fx=s(os);XZ=n(fx,"STRONG",{});var sSr=s(XZ);nJe=r(sSr,"mpnet"),sSr.forEach(t),sJe=r(fx," \u2014 "),Uk=n(fx,"A",{href:!0});var lSr=s(Uk);lJe=r(lSr,"MPNetTokenizer"),lSr.forEach(t),iJe=r(fx," or "),Jk=n(fx,"A",{href:!0});var iSr=s(Jk);dJe=r(iSr,"MPNetTokenizerFast"),iSr.forEach(t),cJe=r(fx," (MPNet model)"),fx.forEach(t),fJe=i(R),rs=n(R,"LI",{});var mx=s(rs);zZ=n(mx,"STRONG",{});var dSr=s(zZ);mJe=r(dSr,"mt5"),dSr.forEach(t),gJe=r(mx," \u2014 "),Yk=n(mx,"A",{href:!0});var cSr=s(Yk);hJe=r(cSr,"MT5Tokenizer"),cSr.forEach(t),pJe=r(mx," or "),Kk=n(mx,"A",{href:!0});var fSr=s(Kk);uJe=r(fSr,"MT5TokenizerFast"),fSr.forEach(t),_Je=r(mx," (mT5 model)"),mx.forEach(t),bJe=i(R),ts=n(R,"LI",{});var gx=s(ts);QZ=n(gx,"STRONG",{});var mSr=s(QZ);FJe=r(mSr,"openai-gpt"),mSr.forEach(t),vJe=r(gx," \u2014 "),Zk=n(gx,"A",{href:!0});var gSr=s(Zk);TJe=r(gSr,"OpenAIGPTTokenizer"),gSr.forEach(t),MJe=r(gx," or "),eS=n(gx,"A",{href:!0});var hSr=s(eS);EJe=r(hSr,"OpenAIGPTTokenizerFast"),hSr.forEach(t),CJe=r(gx," (OpenAI GPT model)"),gx.forEach(t),wJe=i(R),as=n(R,"LI",{});var hx=s(as);WZ=n(hx,"STRONG",{});var pSr=s(WZ);AJe=r(pSr,"pegasus"),pSr.forEach(t),yJe=r(hx," \u2014 "),oS=n(hx,"A",{href:!0});var uSr=s(oS);LJe=r(uSr,"PegasusTokenizer"),uSr.forEach(t),xJe=r(hx," or "),rS=n(hx,"A",{href:!0});var _Sr=s(rS);$Je=r(_Sr,"PegasusTokenizerFast"),_Sr.forEach(t),kJe=r(hx," (Pegasus model)"),hx.forEach(t),SJe=i(R),dg=n(R,"LI",{});var vMe=s(dg);HZ=n(vMe,"STRONG",{});var bSr=s(HZ);RJe=r(bSr,"perceiver"),bSr.forEach(t),BJe=r(vMe," \u2014 "),tS=n(vMe,"A",{href:!0});var FSr=s(tS);PJe=r(FSr,"PerceiverTokenizer"),FSr.forEach(t),IJe=r(vMe," (Perceiver model)"),vMe.forEach(t),qJe=i(R),cg=n(R,"LI",{});var TMe=s(cg);UZ=n(TMe,"STRONG",{});var vSr=s(UZ);NJe=r(vSr,"phobert"),vSr.forEach(t),jJe=r(TMe," \u2014 "),aS=n(TMe,"A",{href:!0});var TSr=s(aS);DJe=r(TSr,"PhobertTokenizer"),TSr.forEach(t),GJe=r(TMe," (PhoBERT model)"),TMe.forEach(t),OJe=i(R),fg=n(R,"LI",{});var MMe=s(fg);JZ=n(MMe,"STRONG",{});var MSr=s(JZ);VJe=r(MSr,"plbart"),MSr.forEach(t),XJe=r(MMe," \u2014 "),nS=n(MMe,"A",{href:!0});var ESr=s(nS);zJe=r(ESr,"PLBartTokenizer"),ESr.forEach(t),QJe=r(MMe," (PLBart model)"),MMe.forEach(t),WJe=i(R),mg=n(R,"LI",{});var EMe=s(mg);YZ=n(EMe,"STRONG",{});var CSr=s(YZ);HJe=r(CSr,"prophetnet"),CSr.forEach(t),UJe=r(EMe," \u2014 "),sS=n(EMe,"A",{href:!0});var wSr=s(sS);JJe=r(wSr,"ProphetNetTokenizer"),wSr.forEach(t),YJe=r(EMe," (ProphetNet model)"),EMe.forEach(t),KJe=i(R),ns=n(R,"LI",{});var px=s(ns);KZ=n(px,"STRONG",{});var ASr=s(KZ);ZJe=r(ASr,"qdqbert"),ASr.forEach(t),eYe=r(px," \u2014 "),lS=n(px,"A",{href:!0});var ySr=s(lS);oYe=r(ySr,"BertTokenizer"),ySr.forEach(t),rYe=r(px," or "),iS=n(px,"A",{href:!0});var LSr=s(iS);tYe=r(LSr,"BertTokenizerFast"),LSr.forEach(t),aYe=r(px," (QDQBert model)"),px.forEach(t),nYe=i(R),gg=n(R,"LI",{});var CMe=s(gg);ZZ=n(CMe,"STRONG",{});var xSr=s(ZZ);sYe=r(xSr,"rag"),xSr.forEach(t),lYe=r(CMe," \u2014 "),dS=n(CMe,"A",{href:!0});var $Sr=s(dS);iYe=r($Sr,"RagTokenizer"),$Sr.forEach(t),dYe=r(CMe," (RAG model)"),CMe.forEach(t),cYe=i(R),ss=n(R,"LI",{});var ux=s(ss);eee=n(ux,"STRONG",{});var kSr=s(eee);fYe=r(kSr,"realm"),kSr.forEach(t),mYe=r(ux," \u2014 "),cS=n(ux,"A",{href:!0});var SSr=s(cS);gYe=r(SSr,"RealmTokenizer"),SSr.forEach(t),hYe=r(ux," or "),fS=n(ux,"A",{href:!0});var RSr=s(fS);pYe=r(RSr,"RealmTokenizerFast"),RSr.forEach(t),uYe=r(ux," (Realm model)"),ux.forEach(t),_Ye=i(R),ls=n(R,"LI",{});var _x=s(ls);oee=n(_x,"STRONG",{});var BSr=s(oee);bYe=r(BSr,"reformer"),BSr.forEach(t),FYe=r(_x," \u2014 "),mS=n(_x,"A",{href:!0});var PSr=s(mS);vYe=r(PSr,"ReformerTokenizer"),PSr.forEach(t),TYe=r(_x," or "),gS=n(_x,"A",{href:!0});var ISr=s(gS);MYe=r(ISr,"ReformerTokenizerFast"),ISr.forEach(t),EYe=r(_x," (Reformer model)"),_x.forEach(t),CYe=i(R),is=n(R,"LI",{});var bx=s(is);ree=n(bx,"STRONG",{});var qSr=s(ree);wYe=r(qSr,"rembert"),qSr.forEach(t),AYe=r(bx," \u2014 "),hS=n(bx,"A",{href:!0});var NSr=s(hS);yYe=r(NSr,"RemBertTokenizer"),NSr.forEach(t),LYe=r(bx," or "),pS=n(bx,"A",{href:!0});var jSr=s(pS);xYe=r(jSr,"RemBertTokenizerFast"),jSr.forEach(t),$Ye=r(bx," (RemBERT model)"),bx.forEach(t),kYe=i(R),ds=n(R,"LI",{});var Fx=s(ds);tee=n(Fx,"STRONG",{});var DSr=s(tee);SYe=r(DSr,"retribert"),DSr.forEach(t),RYe=r(Fx," \u2014 "),uS=n(Fx,"A",{href:!0});var GSr=s(uS);BYe=r(GSr,"RetriBertTokenizer"),GSr.forEach(t),PYe=r(Fx," or "),_S=n(Fx,"A",{href:!0});var OSr=s(_S);IYe=r(OSr,"RetriBertTokenizerFast"),OSr.forEach(t),qYe=r(Fx," (RetriBERT model)"),Fx.forEach(t),NYe=i(R),cs=n(R,"LI",{});var vx=s(cs);aee=n(vx,"STRONG",{});var VSr=s(aee);jYe=r(VSr,"roberta"),VSr.forEach(t),DYe=r(vx," \u2014 "),bS=n(vx,"A",{href:!0});var XSr=s(bS);GYe=r(XSr,"RobertaTokenizer"),XSr.forEach(t),OYe=r(vx," or "),FS=n(vx,"A",{href:!0});var zSr=s(FS);VYe=r(zSr,"RobertaTokenizerFast"),zSr.forEach(t),XYe=r(vx," (RoBERTa model)"),vx.forEach(t),zYe=i(R),fs=n(R,"LI",{});var Tx=s(fs);nee=n(Tx,"STRONG",{});var QSr=s(nee);QYe=r(QSr,"roformer"),QSr.forEach(t),WYe=r(Tx," \u2014 "),vS=n(Tx,"A",{href:!0});var WSr=s(vS);HYe=r(WSr,"RoFormerTokenizer"),WSr.forEach(t),UYe=r(Tx," or "),TS=n(Tx,"A",{href:!0});var HSr=s(TS);JYe=r(HSr,"RoFormerTokenizerFast"),HSr.forEach(t),YYe=r(Tx," (RoFormer model)"),Tx.forEach(t),KYe=i(R),hg=n(R,"LI",{});var wMe=s(hg);see=n(wMe,"STRONG",{});var USr=s(see);ZYe=r(USr,"speech_to_text"),USr.forEach(t),eKe=r(wMe," \u2014 "),MS=n(wMe,"A",{href:!0});var JSr=s(MS);oKe=r(JSr,"Speech2TextTokenizer"),JSr.forEach(t),rKe=r(wMe," (Speech2Text model)"),wMe.forEach(t),tKe=i(R),pg=n(R,"LI",{});var AMe=s(pg);lee=n(AMe,"STRONG",{});var YSr=s(lee);aKe=r(YSr,"speech_to_text_2"),YSr.forEach(t),nKe=r(AMe," \u2014 "),ES=n(AMe,"A",{href:!0});var KSr=s(ES);sKe=r(KSr,"Speech2Text2Tokenizer"),KSr.forEach(t),lKe=r(AMe," (Speech2Text2 model)"),AMe.forEach(t),iKe=i(R),ms=n(R,"LI",{});var Mx=s(ms);iee=n(Mx,"STRONG",{});var ZSr=s(iee);dKe=r(ZSr,"splinter"),ZSr.forEach(t),cKe=r(Mx," \u2014 "),CS=n(Mx,"A",{href:!0});var eRr=s(CS);fKe=r(eRr,"SplinterTokenizer"),eRr.forEach(t),mKe=r(Mx," or "),wS=n(Mx,"A",{href:!0});var oRr=s(wS);gKe=r(oRr,"SplinterTokenizerFast"),oRr.forEach(t),hKe=r(Mx," (Splinter model)"),Mx.forEach(t),pKe=i(R),gs=n(R,"LI",{});var Ex=s(gs);dee=n(Ex,"STRONG",{});var rRr=s(dee);uKe=r(rRr,"squeezebert"),rRr.forEach(t),_Ke=r(Ex," \u2014 "),AS=n(Ex,"A",{href:!0});var tRr=s(AS);bKe=r(tRr,"SqueezeBertTokenizer"),tRr.forEach(t),FKe=r(Ex," or "),yS=n(Ex,"A",{href:!0});var aRr=s(yS);vKe=r(aRr,"SqueezeBertTokenizerFast"),aRr.forEach(t),TKe=r(Ex," (SqueezeBERT model)"),Ex.forEach(t),MKe=i(R),hs=n(R,"LI",{});var Cx=s(hs);cee=n(Cx,"STRONG",{});var nRr=s(cee);EKe=r(nRr,"t5"),nRr.forEach(t),CKe=r(Cx," \u2014 "),LS=n(Cx,"A",{href:!0});var sRr=s(LS);wKe=r(sRr,"T5Tokenizer"),sRr.forEach(t),AKe=r(Cx," or "),xS=n(Cx,"A",{href:!0});var lRr=s(xS);yKe=r(lRr,"T5TokenizerFast"),lRr.forEach(t),LKe=r(Cx," (T5 model)"),Cx.forEach(t),xKe=i(R),ug=n(R,"LI",{});var yMe=s(ug);fee=n(yMe,"STRONG",{});var iRr=s(fee);$Ke=r(iRr,"tapas"),iRr.forEach(t),kKe=r(yMe," \u2014 "),$S=n(yMe,"A",{href:!0});var dRr=s($S);SKe=r(dRr,"TapasTokenizer"),dRr.forEach(t),RKe=r(yMe," (TAPAS model)"),yMe.forEach(t),BKe=i(R),_g=n(R,"LI",{});var LMe=s(_g);mee=n(LMe,"STRONG",{});var cRr=s(mee);PKe=r(cRr,"transfo-xl"),cRr.forEach(t),IKe=r(LMe," \u2014 "),kS=n(LMe,"A",{href:!0});var fRr=s(kS);qKe=r(fRr,"TransfoXLTokenizer"),fRr.forEach(t),NKe=r(LMe," (Transformer-XL model)"),LMe.forEach(t),jKe=i(R),bg=n(R,"LI",{});var xMe=s(bg);gee=n(xMe,"STRONG",{});var mRr=s(gee);DKe=r(mRr,"wav2vec2"),mRr.forEach(t),GKe=r(xMe," \u2014 "),SS=n(xMe,"A",{href:!0});var gRr=s(SS);OKe=r(gRr,"Wav2Vec2CTCTokenizer"),gRr.forEach(t),VKe=r(xMe," (Wav2Vec2 model)"),xMe.forEach(t),XKe=i(R),Fg=n(R,"LI",{});var $Me=s(Fg);hee=n($Me,"STRONG",{});var hRr=s(hee);zKe=r(hRr,"wav2vec2_phoneme"),hRr.forEach(t),QKe=r($Me," \u2014 "),RS=n($Me,"A",{href:!0});var pRr=s(RS);WKe=r(pRr,"Wav2Vec2PhonemeCTCTokenizer"),pRr.forEach(t),HKe=r($Me," (Wav2Vec2Phoneme model)"),$Me.forEach(t),UKe=i(R),ps=n(R,"LI",{});var wx=s(ps);pee=n(wx,"STRONG",{});var uRr=s(pee);JKe=r(uRr,"xglm"),uRr.forEach(t),YKe=r(wx," \u2014 "),BS=n(wx,"A",{href:!0});var _Rr=s(BS);KKe=r(_Rr,"XGLMTokenizer"),_Rr.forEach(t),ZKe=r(wx," or "),PS=n(wx,"A",{href:!0});var bRr=s(PS);eZe=r(bRr,"XGLMTokenizerFast"),bRr.forEach(t),oZe=r(wx," (XGLM model)"),wx.forEach(t),rZe=i(R),vg=n(R,"LI",{});var kMe=s(vg);uee=n(kMe,"STRONG",{});var FRr=s(uee);tZe=r(FRr,"xlm"),FRr.forEach(t),aZe=r(kMe," \u2014 "),IS=n(kMe,"A",{href:!0});var vRr=s(IS);nZe=r(vRr,"XLMTokenizer"),vRr.forEach(t),sZe=r(kMe," (XLM model)"),kMe.forEach(t),lZe=i(R),Tg=n(R,"LI",{});var SMe=s(Tg);_ee=n(SMe,"STRONG",{});var TRr=s(_ee);iZe=r(TRr,"xlm-prophetnet"),TRr.forEach(t),dZe=r(SMe," \u2014 "),qS=n(SMe,"A",{href:!0});var MRr=s(qS);cZe=r(MRr,"XLMProphetNetTokenizer"),MRr.forEach(t),fZe=r(SMe," (XLMProphetNet model)"),SMe.forEach(t),mZe=i(R),us=n(R,"LI",{});var Ax=s(us);bee=n(Ax,"STRONG",{});var ERr=s(bee);gZe=r(ERr,"xlm-roberta"),ERr.forEach(t),hZe=r(Ax," \u2014 "),NS=n(Ax,"A",{href:!0});var CRr=s(NS);pZe=r(CRr,"XLMRobertaTokenizer"),CRr.forEach(t),uZe=r(Ax," or "),jS=n(Ax,"A",{href:!0});var wRr=s(jS);_Ze=r(wRr,"XLMRobertaTokenizerFast"),wRr.forEach(t),bZe=r(Ax," (XLM-RoBERTa model)"),Ax.forEach(t),FZe=i(R),_s=n(R,"LI",{});var yx=s(_s);Fee=n(yx,"STRONG",{});var ARr=s(Fee);vZe=r(ARr,"xlnet"),ARr.forEach(t),TZe=r(yx," \u2014 "),DS=n(yx,"A",{href:!0});var yRr=s(DS);MZe=r(yRr,"XLNetTokenizer"),yRr.forEach(t),EZe=r(yx," or "),GS=n(yx,"A",{href:!0});var LRr=s(GS);CZe=r(LRr,"XLNetTokenizerFast"),LRr.forEach(t),wZe=r(yx," (XLNet model)"),yx.forEach(t),R.forEach(t),AZe=i(Ms),T(Mg.$$.fragment,Ms),Ms.forEach(t),yZe=i(Ts),Eg=n(Ts,"DIV",{class:!0});var BSe=s(Eg);T(Dw.$$.fragment,BSe),LZe=i(BSe),vee=n(BSe,"P",{});var xRr=s(vee);xZe=r(xRr,"Register a new tokenizer in this mapping."),xRr.forEach(t),BSe.forEach(t),Ts.forEach(t),q$e=i(f),ti=n(f,"H2",{class:!0});var PSe=s(ti);Cg=n(PSe,"A",{id:!0,class:!0,href:!0});var $Rr=s(Cg);Tee=n($Rr,"SPAN",{});var kRr=s(Tee);T(Gw.$$.fragment,kRr),kRr.forEach(t),$Rr.forEach(t),$Ze=i(PSe),Mee=n(PSe,"SPAN",{});var SRr=s(Mee);kZe=r(SRr,"AutoFeatureExtractor"),SRr.forEach(t),PSe.forEach(t),N$e=i(f),Co=n(f,"DIV",{class:!0});var Es=s(Co);T(Ow.$$.fragment,Es),SZe=i(Es),Vw=n(Es,"P",{});var ISe=s(Vw);RZe=r(ISe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),OS=n(ISe,"A",{href:!0});var RRr=s(OS);BZe=r(RRr,"AutoFeatureExtractor.from_pretrained()"),RRr.forEach(t),PZe=r(ISe," class method."),ISe.forEach(t),IZe=i(Es),Xw=n(Es,"P",{});var qSe=s(Xw);qZe=r(qSe,"This class cannot be instantiated directly using "),Eee=n(qSe,"CODE",{});var BRr=s(Eee);NZe=r(BRr,"__init__()"),BRr.forEach(t),jZe=r(qSe," (throws an error)."),qSe.forEach(t),DZe=i(Es),Ve=n(Es,"DIV",{class:!0});var Wt=s(Ve);T(zw.$$.fragment,Wt),GZe=i(Wt),Cee=n(Wt,"P",{});var PRr=s(Cee);OZe=r(PRr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),PRr.forEach(t),VZe=i(Wt),Ta=n(Wt,"P",{});var SC=s(Ta);XZe=r(SC,"The feature extractor class to instantiate is selected based on the "),wee=n(SC,"CODE",{});var IRr=s(wee);zZe=r(IRr,"model_type"),IRr.forEach(t),QZe=r(SC,` property of the config object
(either passed as an argument or loaded from `),Aee=n(SC,"CODE",{});var qRr=s(Aee);WZe=r(qRr,"pretrained_model_name_or_path"),qRr.forEach(t),HZe=r(SC,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),yee=n(SC,"CODE",{});var NRr=s(yee);UZe=r(NRr,"pretrained_model_name_or_path"),NRr.forEach(t),JZe=r(SC,":"),SC.forEach(t),YZe=i(Wt),fe=n(Wt,"UL",{});var he=s(fe);wg=n(he,"LI",{});var RMe=s(wg);Lee=n(RMe,"STRONG",{});var jRr=s(Lee);KZe=r(jRr,"beit"),jRr.forEach(t),ZZe=r(RMe," \u2014 "),VS=n(RMe,"A",{href:!0});var DRr=s(VS);eeo=r(DRr,"BeitFeatureExtractor"),DRr.forEach(t),oeo=r(RMe," (BEiT model)"),RMe.forEach(t),reo=i(he),Ag=n(he,"LI",{});var BMe=s(Ag);xee=n(BMe,"STRONG",{});var GRr=s(xee);teo=r(GRr,"clip"),GRr.forEach(t),aeo=r(BMe," \u2014 "),XS=n(BMe,"A",{href:!0});var ORr=s(XS);neo=r(ORr,"CLIPFeatureExtractor"),ORr.forEach(t),seo=r(BMe," (CLIP model)"),BMe.forEach(t),leo=i(he),yg=n(he,"LI",{});var PMe=s(yg);$ee=n(PMe,"STRONG",{});var VRr=s($ee);ieo=r(VRr,"convnext"),VRr.forEach(t),deo=r(PMe," \u2014 "),zS=n(PMe,"A",{href:!0});var XRr=s(zS);ceo=r(XRr,"ConvNextFeatureExtractor"),XRr.forEach(t),feo=r(PMe," (ConvNext model)"),PMe.forEach(t),meo=i(he),Lg=n(he,"LI",{});var IMe=s(Lg);kee=n(IMe,"STRONG",{});var zRr=s(kee);geo=r(zRr,"deit"),zRr.forEach(t),heo=r(IMe," \u2014 "),QS=n(IMe,"A",{href:!0});var QRr=s(QS);peo=r(QRr,"DeiTFeatureExtractor"),QRr.forEach(t),ueo=r(IMe," (DeiT model)"),IMe.forEach(t),_eo=i(he),xg=n(he,"LI",{});var qMe=s(xg);See=n(qMe,"STRONG",{});var WRr=s(See);beo=r(WRr,"detr"),WRr.forEach(t),Feo=r(qMe," \u2014 "),WS=n(qMe,"A",{href:!0});var HRr=s(WS);veo=r(HRr,"DetrFeatureExtractor"),HRr.forEach(t),Teo=r(qMe," (DETR model)"),qMe.forEach(t),Meo=i(he),$g=n(he,"LI",{});var NMe=s($g);Ree=n(NMe,"STRONG",{});var URr=s(Ree);Eeo=r(URr,"hubert"),URr.forEach(t),Ceo=r(NMe," \u2014 "),HS=n(NMe,"A",{href:!0});var JRr=s(HS);weo=r(JRr,"Wav2Vec2FeatureExtractor"),JRr.forEach(t),Aeo=r(NMe," (Hubert model)"),NMe.forEach(t),yeo=i(he),kg=n(he,"LI",{});var jMe=s(kg);Bee=n(jMe,"STRONG",{});var YRr=s(Bee);Leo=r(YRr,"layoutlmv2"),YRr.forEach(t),xeo=r(jMe," \u2014 "),US=n(jMe,"A",{href:!0});var KRr=s(US);$eo=r(KRr,"LayoutLMv2FeatureExtractor"),KRr.forEach(t),keo=r(jMe," (LayoutLMv2 model)"),jMe.forEach(t),Seo=i(he),Sg=n(he,"LI",{});var DMe=s(Sg);Pee=n(DMe,"STRONG",{});var ZRr=s(Pee);Reo=r(ZRr,"maskformer"),ZRr.forEach(t),Beo=r(DMe," \u2014 "),JS=n(DMe,"A",{href:!0});var eBr=s(JS);Peo=r(eBr,"MaskFormerFeatureExtractor"),eBr.forEach(t),Ieo=r(DMe," (MaskFormer model)"),DMe.forEach(t),qeo=i(he),Rg=n(he,"LI",{});var GMe=s(Rg);Iee=n(GMe,"STRONG",{});var oBr=s(Iee);Neo=r(oBr,"perceiver"),oBr.forEach(t),jeo=r(GMe," \u2014 "),YS=n(GMe,"A",{href:!0});var rBr=s(YS);Deo=r(rBr,"PerceiverFeatureExtractor"),rBr.forEach(t),Geo=r(GMe," (Perceiver model)"),GMe.forEach(t),Oeo=i(he),Bg=n(he,"LI",{});var OMe=s(Bg);qee=n(OMe,"STRONG",{});var tBr=s(qee);Veo=r(tBr,"poolformer"),tBr.forEach(t),Xeo=r(OMe," \u2014 "),KS=n(OMe,"A",{href:!0});var aBr=s(KS);zeo=r(aBr,"PoolFormerFeatureExtractor"),aBr.forEach(t),Qeo=r(OMe," (PoolFormer model)"),OMe.forEach(t),Weo=i(he),Pg=n(he,"LI",{});var VMe=s(Pg);Nee=n(VMe,"STRONG",{});var nBr=s(Nee);Heo=r(nBr,"resnet"),nBr.forEach(t),Ueo=r(VMe," \u2014 "),ZS=n(VMe,"A",{href:!0});var sBr=s(ZS);Jeo=r(sBr,"ConvNextFeatureExtractor"),sBr.forEach(t),Yeo=r(VMe," (ResNet model)"),VMe.forEach(t),Keo=i(he),Ig=n(he,"LI",{});var XMe=s(Ig);jee=n(XMe,"STRONG",{});var lBr=s(jee);Zeo=r(lBr,"segformer"),lBr.forEach(t),eoo=r(XMe," \u2014 "),eR=n(XMe,"A",{href:!0});var iBr=s(eR);ooo=r(iBr,"SegformerFeatureExtractor"),iBr.forEach(t),roo=r(XMe," (SegFormer model)"),XMe.forEach(t),too=i(he),qg=n(he,"LI",{});var zMe=s(qg);Dee=n(zMe,"STRONG",{});var dBr=s(Dee);aoo=r(dBr,"speech_to_text"),dBr.forEach(t),noo=r(zMe," \u2014 "),oR=n(zMe,"A",{href:!0});var cBr=s(oR);soo=r(cBr,"Speech2TextFeatureExtractor"),cBr.forEach(t),loo=r(zMe," (Speech2Text model)"),zMe.forEach(t),ioo=i(he),Ng=n(he,"LI",{});var QMe=s(Ng);Gee=n(QMe,"STRONG",{});var fBr=s(Gee);doo=r(fBr,"swin"),fBr.forEach(t),coo=r(QMe," \u2014 "),rR=n(QMe,"A",{href:!0});var mBr=s(rR);foo=r(mBr,"ViTFeatureExtractor"),mBr.forEach(t),moo=r(QMe," (Swin model)"),QMe.forEach(t),goo=i(he),jg=n(he,"LI",{});var WMe=s(jg);Oee=n(WMe,"STRONG",{});var gBr=s(Oee);hoo=r(gBr,"van"),gBr.forEach(t),poo=r(WMe," \u2014 "),tR=n(WMe,"A",{href:!0});var hBr=s(tR);uoo=r(hBr,"ConvNextFeatureExtractor"),hBr.forEach(t),_oo=r(WMe," (VAN model)"),WMe.forEach(t),boo=i(he),Dg=n(he,"LI",{});var HMe=s(Dg);Vee=n(HMe,"STRONG",{});var pBr=s(Vee);Foo=r(pBr,"vit"),pBr.forEach(t),voo=r(HMe," \u2014 "),aR=n(HMe,"A",{href:!0});var uBr=s(aR);Too=r(uBr,"ViTFeatureExtractor"),uBr.forEach(t),Moo=r(HMe," (ViT model)"),HMe.forEach(t),Eoo=i(he),Gg=n(he,"LI",{});var UMe=s(Gg);Xee=n(UMe,"STRONG",{});var _Br=s(Xee);Coo=r(_Br,"vit_mae"),_Br.forEach(t),woo=r(UMe," \u2014 "),nR=n(UMe,"A",{href:!0});var bBr=s(nR);Aoo=r(bBr,"ViTFeatureExtractor"),bBr.forEach(t),yoo=r(UMe," (ViTMAE model)"),UMe.forEach(t),Loo=i(he),Og=n(he,"LI",{});var JMe=s(Og);zee=n(JMe,"STRONG",{});var FBr=s(zee);xoo=r(FBr,"wav2vec2"),FBr.forEach(t),$oo=r(JMe," \u2014 "),sR=n(JMe,"A",{href:!0});var vBr=s(sR);koo=r(vBr,"Wav2Vec2FeatureExtractor"),vBr.forEach(t),Soo=r(JMe," (Wav2Vec2 model)"),JMe.forEach(t),he.forEach(t),Roo=i(Wt),T(Vg.$$.fragment,Wt),Boo=i(Wt),T(Xg.$$.fragment,Wt),Wt.forEach(t),Poo=i(Es),zg=n(Es,"DIV",{class:!0});var NSe=s(zg);T(Qw.$$.fragment,NSe),Ioo=i(NSe),Qee=n(NSe,"P",{});var TBr=s(Qee);qoo=r(TBr,"Register a new feature extractor for this class."),TBr.forEach(t),NSe.forEach(t),Es.forEach(t),j$e=i(f),ai=n(f,"H2",{class:!0});var jSe=s(ai);Qg=n(jSe,"A",{id:!0,class:!0,href:!0});var MBr=s(Qg);Wee=n(MBr,"SPAN",{});var EBr=s(Wee);T(Ww.$$.fragment,EBr),EBr.forEach(t),MBr.forEach(t),Noo=i(jSe),Hee=n(jSe,"SPAN",{});var CBr=s(Hee);joo=r(CBr,"AutoProcessor"),CBr.forEach(t),jSe.forEach(t),D$e=i(f),wo=n(f,"DIV",{class:!0});var Cs=s(wo);T(Hw.$$.fragment,Cs),Doo=i(Cs),Uw=n(Cs,"P",{});var DSe=s(Uw);Goo=r(DSe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),lR=n(DSe,"A",{href:!0});var wBr=s(lR);Ooo=r(wBr,"AutoProcessor.from_pretrained()"),wBr.forEach(t),Voo=r(DSe," class method."),DSe.forEach(t),Xoo=i(Cs),Jw=n(Cs,"P",{});var GSe=s(Jw);zoo=r(GSe,"This class cannot be instantiated directly using "),Uee=n(GSe,"CODE",{});var ABr=s(Uee);Qoo=r(ABr,"__init__()"),ABr.forEach(t),Woo=r(GSe," (throws an error)."),GSe.forEach(t),Hoo=i(Cs),Xe=n(Cs,"DIV",{class:!0});var Ht=s(Xe);T(Yw.$$.fragment,Ht),Uoo=i(Ht),Jee=n(Ht,"P",{});var yBr=s(Jee);Joo=r(yBr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),yBr.forEach(t),Yoo=i(Ht),ni=n(Ht,"P",{});var KH=s(ni);Koo=r(KH,"The processor class to instantiate is selected based on the "),Yee=n(KH,"CODE",{});var LBr=s(Yee);Zoo=r(LBr,"model_type"),LBr.forEach(t),ero=r(KH,` property of the config object (either
passed as an argument or loaded from `),Kee=n(KH,"CODE",{});var xBr=s(Kee);oro=r(xBr,"pretrained_model_name_or_path"),xBr.forEach(t),rro=r(KH," if possible):"),KH.forEach(t),tro=i(Ht),Pe=n(Ht,"UL",{});var po=s(Pe);Wg=n(po,"LI",{});var YMe=s(Wg);Zee=n(YMe,"STRONG",{});var $Br=s(Zee);aro=r($Br,"clip"),$Br.forEach(t),nro=r(YMe," \u2014 "),iR=n(YMe,"A",{href:!0});var kBr=s(iR);sro=r(kBr,"CLIPProcessor"),kBr.forEach(t),lro=r(YMe," (CLIP model)"),YMe.forEach(t),iro=i(po),Hg=n(po,"LI",{});var KMe=s(Hg);eoe=n(KMe,"STRONG",{});var SBr=s(eoe);dro=r(SBr,"layoutlmv2"),SBr.forEach(t),cro=r(KMe," \u2014 "),dR=n(KMe,"A",{href:!0});var RBr=s(dR);fro=r(RBr,"LayoutLMv2Processor"),RBr.forEach(t),mro=r(KMe," (LayoutLMv2 model)"),KMe.forEach(t),gro=i(po),Ug=n(po,"LI",{});var ZMe=s(Ug);ooe=n(ZMe,"STRONG",{});var BBr=s(ooe);hro=r(BBr,"layoutxlm"),BBr.forEach(t),pro=r(ZMe," \u2014 "),cR=n(ZMe,"A",{href:!0});var PBr=s(cR);uro=r(PBr,"LayoutXLMProcessor"),PBr.forEach(t),_ro=r(ZMe," (LayoutXLM model)"),ZMe.forEach(t),bro=i(po),Jg=n(po,"LI",{});var e9e=s(Jg);roe=n(e9e,"STRONG",{});var IBr=s(roe);Fro=r(IBr,"speech_to_text"),IBr.forEach(t),vro=r(e9e," \u2014 "),fR=n(e9e,"A",{href:!0});var qBr=s(fR);Tro=r(qBr,"Speech2TextProcessor"),qBr.forEach(t),Mro=r(e9e," (Speech2Text model)"),e9e.forEach(t),Ero=i(po),Yg=n(po,"LI",{});var o9e=s(Yg);toe=n(o9e,"STRONG",{});var NBr=s(toe);Cro=r(NBr,"speech_to_text_2"),NBr.forEach(t),wro=r(o9e," \u2014 "),mR=n(o9e,"A",{href:!0});var jBr=s(mR);Aro=r(jBr,"Speech2Text2Processor"),jBr.forEach(t),yro=r(o9e," (Speech2Text2 model)"),o9e.forEach(t),Lro=i(po),Kg=n(po,"LI",{});var r9e=s(Kg);aoe=n(r9e,"STRONG",{});var DBr=s(aoe);xro=r(DBr,"trocr"),DBr.forEach(t),$ro=r(r9e," \u2014 "),gR=n(r9e,"A",{href:!0});var GBr=s(gR);kro=r(GBr,"TrOCRProcessor"),GBr.forEach(t),Sro=r(r9e," (TrOCR model)"),r9e.forEach(t),Rro=i(po),Zg=n(po,"LI",{});var t9e=s(Zg);noe=n(t9e,"STRONG",{});var OBr=s(noe);Bro=r(OBr,"vision-text-dual-encoder"),OBr.forEach(t),Pro=r(t9e," \u2014 "),hR=n(t9e,"A",{href:!0});var VBr=s(hR);Iro=r(VBr,"VisionTextDualEncoderProcessor"),VBr.forEach(t),qro=r(t9e," (VisionTextDualEncoder model)"),t9e.forEach(t),Nro=i(po),eh=n(po,"LI",{});var a9e=s(eh);soe=n(a9e,"STRONG",{});var XBr=s(soe);jro=r(XBr,"wav2vec2"),XBr.forEach(t),Dro=r(a9e," \u2014 "),pR=n(a9e,"A",{href:!0});var zBr=s(pR);Gro=r(zBr,"Wav2Vec2Processor"),zBr.forEach(t),Oro=r(a9e," (Wav2Vec2 model)"),a9e.forEach(t),po.forEach(t),Vro=i(Ht),T(oh.$$.fragment,Ht),Xro=i(Ht),T(rh.$$.fragment,Ht),Ht.forEach(t),zro=i(Cs),th=n(Cs,"DIV",{class:!0});var OSe=s(th);T(Kw.$$.fragment,OSe),Qro=i(OSe),loe=n(OSe,"P",{});var QBr=s(loe);Wro=r(QBr,"Register a new processor for this class."),QBr.forEach(t),OSe.forEach(t),Cs.forEach(t),G$e=i(f),si=n(f,"H2",{class:!0});var VSe=s(si);ah=n(VSe,"A",{id:!0,class:!0,href:!0});var WBr=s(ah);ioe=n(WBr,"SPAN",{});var HBr=s(ioe);T(Zw.$$.fragment,HBr),HBr.forEach(t),WBr.forEach(t),Hro=i(VSe),doe=n(VSe,"SPAN",{});var UBr=s(doe);Uro=r(UBr,"AutoModel"),UBr.forEach(t),VSe.forEach(t),O$e=i(f),Ao=n(f,"DIV",{class:!0});var ws=s(Ao);T(eA.$$.fragment,ws),Jro=i(ws),li=n(ws,"P",{});var ZH=s(li);Yro=r(ZH,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),uR=n(ZH,"A",{href:!0});var JBr=s(uR);Kro=r(JBr,"from_pretrained()"),JBr.forEach(t),Zro=r(ZH," class method or the "),_R=n(ZH,"A",{href:!0});var YBr=s(_R);eto=r(YBr,"from_config()"),YBr.forEach(t),oto=r(ZH,` class
method.`),ZH.forEach(t),rto=i(ws),oA=n(ws,"P",{});var XSe=s(oA);tto=r(XSe,"This class cannot be instantiated directly using "),coe=n(XSe,"CODE",{});var KBr=s(coe);ato=r(KBr,"__init__()"),KBr.forEach(t),nto=r(XSe," (throws an error)."),XSe.forEach(t),sto=i(ws),Kr=n(ws,"DIV",{class:!0});var RC=s(Kr);T(rA.$$.fragment,RC),lto=i(RC),foe=n(RC,"P",{});var ZBr=s(foe);ito=r(ZBr,"Instantiates one of the base model classes of the library from a configuration."),ZBr.forEach(t),dto=i(RC),ii=n(RC,"P",{});var eU=s(ii);cto=r(eU,`Note:
Loading a model from its configuration file does `),moe=n(eU,"STRONG",{});var ePr=s(moe);fto=r(ePr,"not"),ePr.forEach(t),mto=r(eU,` load the model weights. It only affects the
model\u2019s configuration. Use `),bR=n(eU,"A",{href:!0});var oPr=s(bR);gto=r(oPr,"from_pretrained()"),oPr.forEach(t),hto=r(eU," to load the model weights."),eU.forEach(t),pto=i(RC),T(nh.$$.fragment,RC),RC.forEach(t),uto=i(ws),ze=n(ws,"DIV",{class:!0});var Ut=s(ze);T(tA.$$.fragment,Ut),_to=i(Ut),goe=n(Ut,"P",{});var rPr=s(goe);bto=r(rPr,"Instantiate one of the base model classes of the library from a pretrained model."),rPr.forEach(t),Fto=i(Ut),Ma=n(Ut,"P",{});var BC=s(Ma);vto=r(BC,"The model class to instantiate is selected based on the "),hoe=n(BC,"CODE",{});var tPr=s(hoe);Tto=r(tPr,"model_type"),tPr.forEach(t),Mto=r(BC,` property of the config object (either
passed as an argument or loaded from `),poe=n(BC,"CODE",{});var aPr=s(poe);Eto=r(aPr,"pretrained_model_name_or_path"),aPr.forEach(t),Cto=r(BC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uoe=n(BC,"CODE",{});var nPr=s(uoe);wto=r(nPr,"pretrained_model_name_or_path"),nPr.forEach(t),Ato=r(BC,":"),BC.forEach(t),yto=i(Ut),x=n(Ut,"UL",{});var $=s(x);sh=n($,"LI",{});var n9e=s(sh);_oe=n(n9e,"STRONG",{});var sPr=s(_oe);Lto=r(sPr,"albert"),sPr.forEach(t),xto=r(n9e," \u2014 "),FR=n(n9e,"A",{href:!0});var lPr=s(FR);$to=r(lPr,"AlbertModel"),lPr.forEach(t),kto=r(n9e," (ALBERT model)"),n9e.forEach(t),Sto=i($),lh=n($,"LI",{});var s9e=s(lh);boe=n(s9e,"STRONG",{});var iPr=s(boe);Rto=r(iPr,"bart"),iPr.forEach(t),Bto=r(s9e," \u2014 "),vR=n(s9e,"A",{href:!0});var dPr=s(vR);Pto=r(dPr,"BartModel"),dPr.forEach(t),Ito=r(s9e," (BART model)"),s9e.forEach(t),qto=i($),ih=n($,"LI",{});var l9e=s(ih);Foe=n(l9e,"STRONG",{});var cPr=s(Foe);Nto=r(cPr,"beit"),cPr.forEach(t),jto=r(l9e," \u2014 "),TR=n(l9e,"A",{href:!0});var fPr=s(TR);Dto=r(fPr,"BeitModel"),fPr.forEach(t),Gto=r(l9e," (BEiT model)"),l9e.forEach(t),Oto=i($),dh=n($,"LI",{});var i9e=s(dh);voe=n(i9e,"STRONG",{});var mPr=s(voe);Vto=r(mPr,"bert"),mPr.forEach(t),Xto=r(i9e," \u2014 "),MR=n(i9e,"A",{href:!0});var gPr=s(MR);zto=r(gPr,"BertModel"),gPr.forEach(t),Qto=r(i9e," (BERT model)"),i9e.forEach(t),Wto=i($),ch=n($,"LI",{});var d9e=s(ch);Toe=n(d9e,"STRONG",{});var hPr=s(Toe);Hto=r(hPr,"bert-generation"),hPr.forEach(t),Uto=r(d9e," \u2014 "),ER=n(d9e,"A",{href:!0});var pPr=s(ER);Jto=r(pPr,"BertGenerationEncoder"),pPr.forEach(t),Yto=r(d9e," (Bert Generation model)"),d9e.forEach(t),Kto=i($),fh=n($,"LI",{});var c9e=s(fh);Moe=n(c9e,"STRONG",{});var uPr=s(Moe);Zto=r(uPr,"big_bird"),uPr.forEach(t),eao=r(c9e," \u2014 "),CR=n(c9e,"A",{href:!0});var _Pr=s(CR);oao=r(_Pr,"BigBirdModel"),_Pr.forEach(t),rao=r(c9e," (BigBird model)"),c9e.forEach(t),tao=i($),mh=n($,"LI",{});var f9e=s(mh);Eoe=n(f9e,"STRONG",{});var bPr=s(Eoe);aao=r(bPr,"bigbird_pegasus"),bPr.forEach(t),nao=r(f9e," \u2014 "),wR=n(f9e,"A",{href:!0});var FPr=s(wR);sao=r(FPr,"BigBirdPegasusModel"),FPr.forEach(t),lao=r(f9e," (BigBirdPegasus model)"),f9e.forEach(t),iao=i($),gh=n($,"LI",{});var m9e=s(gh);Coe=n(m9e,"STRONG",{});var vPr=s(Coe);dao=r(vPr,"blenderbot"),vPr.forEach(t),cao=r(m9e," \u2014 "),AR=n(m9e,"A",{href:!0});var TPr=s(AR);fao=r(TPr,"BlenderbotModel"),TPr.forEach(t),mao=r(m9e," (Blenderbot model)"),m9e.forEach(t),gao=i($),hh=n($,"LI",{});var g9e=s(hh);woe=n(g9e,"STRONG",{});var MPr=s(woe);hao=r(MPr,"blenderbot-small"),MPr.forEach(t),pao=r(g9e," \u2014 "),yR=n(g9e,"A",{href:!0});var EPr=s(yR);uao=r(EPr,"BlenderbotSmallModel"),EPr.forEach(t),_ao=r(g9e," (BlenderbotSmall model)"),g9e.forEach(t),bao=i($),ph=n($,"LI",{});var h9e=s(ph);Aoe=n(h9e,"STRONG",{});var CPr=s(Aoe);Fao=r(CPr,"camembert"),CPr.forEach(t),vao=r(h9e," \u2014 "),LR=n(h9e,"A",{href:!0});var wPr=s(LR);Tao=r(wPr,"CamembertModel"),wPr.forEach(t),Mao=r(h9e," (CamemBERT model)"),h9e.forEach(t),Eao=i($),uh=n($,"LI",{});var p9e=s(uh);yoe=n(p9e,"STRONG",{});var APr=s(yoe);Cao=r(APr,"canine"),APr.forEach(t),wao=r(p9e," \u2014 "),xR=n(p9e,"A",{href:!0});var yPr=s(xR);Aao=r(yPr,"CanineModel"),yPr.forEach(t),yao=r(p9e," (Canine model)"),p9e.forEach(t),Lao=i($),_h=n($,"LI",{});var u9e=s(_h);Loe=n(u9e,"STRONG",{});var LPr=s(Loe);xao=r(LPr,"clip"),LPr.forEach(t),$ao=r(u9e," \u2014 "),$R=n(u9e,"A",{href:!0});var xPr=s($R);kao=r(xPr,"CLIPModel"),xPr.forEach(t),Sao=r(u9e," (CLIP model)"),u9e.forEach(t),Rao=i($),bh=n($,"LI",{});var _9e=s(bh);xoe=n(_9e,"STRONG",{});var $Pr=s(xoe);Bao=r($Pr,"convbert"),$Pr.forEach(t),Pao=r(_9e," \u2014 "),kR=n(_9e,"A",{href:!0});var kPr=s(kR);Iao=r(kPr,"ConvBertModel"),kPr.forEach(t),qao=r(_9e," (ConvBERT model)"),_9e.forEach(t),Nao=i($),Fh=n($,"LI",{});var b9e=s(Fh);$oe=n(b9e,"STRONG",{});var SPr=s($oe);jao=r(SPr,"convnext"),SPr.forEach(t),Dao=r(b9e," \u2014 "),SR=n(b9e,"A",{href:!0});var RPr=s(SR);Gao=r(RPr,"ConvNextModel"),RPr.forEach(t),Oao=r(b9e," (ConvNext model)"),b9e.forEach(t),Vao=i($),vh=n($,"LI",{});var F9e=s(vh);koe=n(F9e,"STRONG",{});var BPr=s(koe);Xao=r(BPr,"ctrl"),BPr.forEach(t),zao=r(F9e," \u2014 "),RR=n(F9e,"A",{href:!0});var PPr=s(RR);Qao=r(PPr,"CTRLModel"),PPr.forEach(t),Wao=r(F9e," (CTRL model)"),F9e.forEach(t),Hao=i($),Th=n($,"LI",{});var v9e=s(Th);Soe=n(v9e,"STRONG",{});var IPr=s(Soe);Uao=r(IPr,"data2vec-audio"),IPr.forEach(t),Jao=r(v9e," \u2014 "),BR=n(v9e,"A",{href:!0});var qPr=s(BR);Yao=r(qPr,"Data2VecAudioModel"),qPr.forEach(t),Kao=r(v9e," (Data2VecAudio model)"),v9e.forEach(t),Zao=i($),Mh=n($,"LI",{});var T9e=s(Mh);Roe=n(T9e,"STRONG",{});var NPr=s(Roe);eno=r(NPr,"data2vec-text"),NPr.forEach(t),ono=r(T9e," \u2014 "),PR=n(T9e,"A",{href:!0});var jPr=s(PR);rno=r(jPr,"Data2VecTextModel"),jPr.forEach(t),tno=r(T9e," (Data2VecText model)"),T9e.forEach(t),ano=i($),Eh=n($,"LI",{});var M9e=s(Eh);Boe=n(M9e,"STRONG",{});var DPr=s(Boe);nno=r(DPr,"deberta"),DPr.forEach(t),sno=r(M9e," \u2014 "),IR=n(M9e,"A",{href:!0});var GPr=s(IR);lno=r(GPr,"DebertaModel"),GPr.forEach(t),ino=r(M9e," (DeBERTa model)"),M9e.forEach(t),dno=i($),Ch=n($,"LI",{});var E9e=s(Ch);Poe=n(E9e,"STRONG",{});var OPr=s(Poe);cno=r(OPr,"deberta-v2"),OPr.forEach(t),fno=r(E9e," \u2014 "),qR=n(E9e,"A",{href:!0});var VPr=s(qR);mno=r(VPr,"DebertaV2Model"),VPr.forEach(t),gno=r(E9e," (DeBERTa-v2 model)"),E9e.forEach(t),hno=i($),wh=n($,"LI",{});var C9e=s(wh);Ioe=n(C9e,"STRONG",{});var XPr=s(Ioe);pno=r(XPr,"decision_transformer"),XPr.forEach(t),uno=r(C9e," \u2014 "),NR=n(C9e,"A",{href:!0});var zPr=s(NR);_no=r(zPr,"DecisionTransformerModel"),zPr.forEach(t),bno=r(C9e," (Decision Transformer model)"),C9e.forEach(t),Fno=i($),Ah=n($,"LI",{});var w9e=s(Ah);qoe=n(w9e,"STRONG",{});var QPr=s(qoe);vno=r(QPr,"deit"),QPr.forEach(t),Tno=r(w9e," \u2014 "),jR=n(w9e,"A",{href:!0});var WPr=s(jR);Mno=r(WPr,"DeiTModel"),WPr.forEach(t),Eno=r(w9e," (DeiT model)"),w9e.forEach(t),Cno=i($),yh=n($,"LI",{});var A9e=s(yh);Noe=n(A9e,"STRONG",{});var HPr=s(Noe);wno=r(HPr,"detr"),HPr.forEach(t),Ano=r(A9e," \u2014 "),DR=n(A9e,"A",{href:!0});var UPr=s(DR);yno=r(UPr,"DetrModel"),UPr.forEach(t),Lno=r(A9e," (DETR model)"),A9e.forEach(t),xno=i($),Lh=n($,"LI",{});var y9e=s(Lh);joe=n(y9e,"STRONG",{});var JPr=s(joe);$no=r(JPr,"distilbert"),JPr.forEach(t),kno=r(y9e," \u2014 "),GR=n(y9e,"A",{href:!0});var YPr=s(GR);Sno=r(YPr,"DistilBertModel"),YPr.forEach(t),Rno=r(y9e," (DistilBERT model)"),y9e.forEach(t),Bno=i($),xh=n($,"LI",{});var L9e=s(xh);Doe=n(L9e,"STRONG",{});var KPr=s(Doe);Pno=r(KPr,"dpr"),KPr.forEach(t),Ino=r(L9e," \u2014 "),OR=n(L9e,"A",{href:!0});var ZPr=s(OR);qno=r(ZPr,"DPRQuestionEncoder"),ZPr.forEach(t),Nno=r(L9e," (DPR model)"),L9e.forEach(t),jno=i($),$h=n($,"LI",{});var x9e=s($h);Goe=n(x9e,"STRONG",{});var eIr=s(Goe);Dno=r(eIr,"electra"),eIr.forEach(t),Gno=r(x9e," \u2014 "),VR=n(x9e,"A",{href:!0});var oIr=s(VR);Ono=r(oIr,"ElectraModel"),oIr.forEach(t),Vno=r(x9e," (ELECTRA model)"),x9e.forEach(t),Xno=i($),kh=n($,"LI",{});var $9e=s(kh);Ooe=n($9e,"STRONG",{});var rIr=s(Ooe);zno=r(rIr,"flaubert"),rIr.forEach(t),Qno=r($9e," \u2014 "),XR=n($9e,"A",{href:!0});var tIr=s(XR);Wno=r(tIr,"FlaubertModel"),tIr.forEach(t),Hno=r($9e," (FlauBERT model)"),$9e.forEach(t),Uno=i($),Sh=n($,"LI",{});var k9e=s(Sh);Voe=n(k9e,"STRONG",{});var aIr=s(Voe);Jno=r(aIr,"fnet"),aIr.forEach(t),Yno=r(k9e," \u2014 "),zR=n(k9e,"A",{href:!0});var nIr=s(zR);Kno=r(nIr,"FNetModel"),nIr.forEach(t),Zno=r(k9e," (FNet model)"),k9e.forEach(t),eso=i($),Rh=n($,"LI",{});var S9e=s(Rh);Xoe=n(S9e,"STRONG",{});var sIr=s(Xoe);oso=r(sIr,"fsmt"),sIr.forEach(t),rso=r(S9e," \u2014 "),QR=n(S9e,"A",{href:!0});var lIr=s(QR);tso=r(lIr,"FSMTModel"),lIr.forEach(t),aso=r(S9e," (FairSeq Machine-Translation model)"),S9e.forEach(t),nso=i($),bs=n($,"LI",{});var Lx=s(bs);zoe=n(Lx,"STRONG",{});var iIr=s(zoe);sso=r(iIr,"funnel"),iIr.forEach(t),lso=r(Lx," \u2014 "),WR=n(Lx,"A",{href:!0});var dIr=s(WR);iso=r(dIr,"FunnelModel"),dIr.forEach(t),dso=r(Lx," or "),HR=n(Lx,"A",{href:!0});var cIr=s(HR);cso=r(cIr,"FunnelBaseModel"),cIr.forEach(t),fso=r(Lx," (Funnel Transformer model)"),Lx.forEach(t),mso=i($),Bh=n($,"LI",{});var R9e=s(Bh);Qoe=n(R9e,"STRONG",{});var fIr=s(Qoe);gso=r(fIr,"glpn"),fIr.forEach(t),hso=r(R9e," \u2014 "),UR=n(R9e,"A",{href:!0});var mIr=s(UR);pso=r(mIr,"GLPNModel"),mIr.forEach(t),uso=r(R9e," (GLPN model)"),R9e.forEach(t),_so=i($),Ph=n($,"LI",{});var B9e=s(Ph);Woe=n(B9e,"STRONG",{});var gIr=s(Woe);bso=r(gIr,"gpt2"),gIr.forEach(t),Fso=r(B9e," \u2014 "),JR=n(B9e,"A",{href:!0});var hIr=s(JR);vso=r(hIr,"GPT2Model"),hIr.forEach(t),Tso=r(B9e," (OpenAI GPT-2 model)"),B9e.forEach(t),Mso=i($),Ih=n($,"LI",{});var P9e=s(Ih);Hoe=n(P9e,"STRONG",{});var pIr=s(Hoe);Eso=r(pIr,"gpt_neo"),pIr.forEach(t),Cso=r(P9e," \u2014 "),YR=n(P9e,"A",{href:!0});var uIr=s(YR);wso=r(uIr,"GPTNeoModel"),uIr.forEach(t),Aso=r(P9e," (GPT Neo model)"),P9e.forEach(t),yso=i($),qh=n($,"LI",{});var I9e=s(qh);Uoe=n(I9e,"STRONG",{});var _Ir=s(Uoe);Lso=r(_Ir,"gptj"),_Ir.forEach(t),xso=r(I9e," \u2014 "),KR=n(I9e,"A",{href:!0});var bIr=s(KR);$so=r(bIr,"GPTJModel"),bIr.forEach(t),kso=r(I9e," (GPT-J model)"),I9e.forEach(t),Sso=i($),Nh=n($,"LI",{});var q9e=s(Nh);Joe=n(q9e,"STRONG",{});var FIr=s(Joe);Rso=r(FIr,"hubert"),FIr.forEach(t),Bso=r(q9e," \u2014 "),ZR=n(q9e,"A",{href:!0});var vIr=s(ZR);Pso=r(vIr,"HubertModel"),vIr.forEach(t),Iso=r(q9e," (Hubert model)"),q9e.forEach(t),qso=i($),jh=n($,"LI",{});var N9e=s(jh);Yoe=n(N9e,"STRONG",{});var TIr=s(Yoe);Nso=r(TIr,"ibert"),TIr.forEach(t),jso=r(N9e," \u2014 "),eB=n(N9e,"A",{href:!0});var MIr=s(eB);Dso=r(MIr,"IBertModel"),MIr.forEach(t),Gso=r(N9e," (I-BERT model)"),N9e.forEach(t),Oso=i($),Dh=n($,"LI",{});var j9e=s(Dh);Koe=n(j9e,"STRONG",{});var EIr=s(Koe);Vso=r(EIr,"imagegpt"),EIr.forEach(t),Xso=r(j9e," \u2014 "),oB=n(j9e,"A",{href:!0});var CIr=s(oB);zso=r(CIr,"ImageGPTModel"),CIr.forEach(t),Qso=r(j9e," (ImageGPT model)"),j9e.forEach(t),Wso=i($),Gh=n($,"LI",{});var D9e=s(Gh);Zoe=n(D9e,"STRONG",{});var wIr=s(Zoe);Hso=r(wIr,"layoutlm"),wIr.forEach(t),Uso=r(D9e," \u2014 "),rB=n(D9e,"A",{href:!0});var AIr=s(rB);Jso=r(AIr,"LayoutLMModel"),AIr.forEach(t),Yso=r(D9e," (LayoutLM model)"),D9e.forEach(t),Kso=i($),Oh=n($,"LI",{});var G9e=s(Oh);ere=n(G9e,"STRONG",{});var yIr=s(ere);Zso=r(yIr,"layoutlmv2"),yIr.forEach(t),elo=r(G9e," \u2014 "),tB=n(G9e,"A",{href:!0});var LIr=s(tB);olo=r(LIr,"LayoutLMv2Model"),LIr.forEach(t),rlo=r(G9e," (LayoutLMv2 model)"),G9e.forEach(t),tlo=i($),Vh=n($,"LI",{});var O9e=s(Vh);ore=n(O9e,"STRONG",{});var xIr=s(ore);alo=r(xIr,"led"),xIr.forEach(t),nlo=r(O9e," \u2014 "),aB=n(O9e,"A",{href:!0});var $Ir=s(aB);slo=r($Ir,"LEDModel"),$Ir.forEach(t),llo=r(O9e," (LED model)"),O9e.forEach(t),ilo=i($),Xh=n($,"LI",{});var V9e=s(Xh);rre=n(V9e,"STRONG",{});var kIr=s(rre);dlo=r(kIr,"longformer"),kIr.forEach(t),clo=r(V9e," \u2014 "),nB=n(V9e,"A",{href:!0});var SIr=s(nB);flo=r(SIr,"LongformerModel"),SIr.forEach(t),mlo=r(V9e," (Longformer model)"),V9e.forEach(t),glo=i($),zh=n($,"LI",{});var X9e=s(zh);tre=n(X9e,"STRONG",{});var RIr=s(tre);hlo=r(RIr,"luke"),RIr.forEach(t),plo=r(X9e," \u2014 "),sB=n(X9e,"A",{href:!0});var BIr=s(sB);ulo=r(BIr,"LukeModel"),BIr.forEach(t),_lo=r(X9e," (LUKE model)"),X9e.forEach(t),blo=i($),Qh=n($,"LI",{});var z9e=s(Qh);are=n(z9e,"STRONG",{});var PIr=s(are);Flo=r(PIr,"lxmert"),PIr.forEach(t),vlo=r(z9e," \u2014 "),lB=n(z9e,"A",{href:!0});var IIr=s(lB);Tlo=r(IIr,"LxmertModel"),IIr.forEach(t),Mlo=r(z9e," (LXMERT model)"),z9e.forEach(t),Elo=i($),Wh=n($,"LI",{});var Q9e=s(Wh);nre=n(Q9e,"STRONG",{});var qIr=s(nre);Clo=r(qIr,"m2m_100"),qIr.forEach(t),wlo=r(Q9e," \u2014 "),iB=n(Q9e,"A",{href:!0});var NIr=s(iB);Alo=r(NIr,"M2M100Model"),NIr.forEach(t),ylo=r(Q9e," (M2M100 model)"),Q9e.forEach(t),Llo=i($),Hh=n($,"LI",{});var W9e=s(Hh);sre=n(W9e,"STRONG",{});var jIr=s(sre);xlo=r(jIr,"marian"),jIr.forEach(t),$lo=r(W9e," \u2014 "),dB=n(W9e,"A",{href:!0});var DIr=s(dB);klo=r(DIr,"MarianModel"),DIr.forEach(t),Slo=r(W9e," (Marian model)"),W9e.forEach(t),Rlo=i($),Uh=n($,"LI",{});var H9e=s(Uh);lre=n(H9e,"STRONG",{});var GIr=s(lre);Blo=r(GIr,"maskformer"),GIr.forEach(t),Plo=r(H9e," \u2014 "),cB=n(H9e,"A",{href:!0});var OIr=s(cB);Ilo=r(OIr,"MaskFormerModel"),OIr.forEach(t),qlo=r(H9e," (MaskFormer model)"),H9e.forEach(t),Nlo=i($),Jh=n($,"LI",{});var U9e=s(Jh);ire=n(U9e,"STRONG",{});var VIr=s(ire);jlo=r(VIr,"mbart"),VIr.forEach(t),Dlo=r(U9e," \u2014 "),fB=n(U9e,"A",{href:!0});var XIr=s(fB);Glo=r(XIr,"MBartModel"),XIr.forEach(t),Olo=r(U9e," (mBART model)"),U9e.forEach(t),Vlo=i($),Yh=n($,"LI",{});var J9e=s(Yh);dre=n(J9e,"STRONG",{});var zIr=s(dre);Xlo=r(zIr,"megatron-bert"),zIr.forEach(t),zlo=r(J9e," \u2014 "),mB=n(J9e,"A",{href:!0});var QIr=s(mB);Qlo=r(QIr,"MegatronBertModel"),QIr.forEach(t),Wlo=r(J9e," (MegatronBert model)"),J9e.forEach(t),Hlo=i($),Kh=n($,"LI",{});var Y9e=s(Kh);cre=n(Y9e,"STRONG",{});var WIr=s(cre);Ulo=r(WIr,"mobilebert"),WIr.forEach(t),Jlo=r(Y9e," \u2014 "),gB=n(Y9e,"A",{href:!0});var HIr=s(gB);Ylo=r(HIr,"MobileBertModel"),HIr.forEach(t),Klo=r(Y9e," (MobileBERT model)"),Y9e.forEach(t),Zlo=i($),Zh=n($,"LI",{});var K9e=s(Zh);fre=n(K9e,"STRONG",{});var UIr=s(fre);eio=r(UIr,"mpnet"),UIr.forEach(t),oio=r(K9e," \u2014 "),hB=n(K9e,"A",{href:!0});var JIr=s(hB);rio=r(JIr,"MPNetModel"),JIr.forEach(t),tio=r(K9e," (MPNet model)"),K9e.forEach(t),aio=i($),ep=n($,"LI",{});var Z9e=s(ep);mre=n(Z9e,"STRONG",{});var YIr=s(mre);nio=r(YIr,"mt5"),YIr.forEach(t),sio=r(Z9e," \u2014 "),pB=n(Z9e,"A",{href:!0});var KIr=s(pB);lio=r(KIr,"MT5Model"),KIr.forEach(t),iio=r(Z9e," (mT5 model)"),Z9e.forEach(t),dio=i($),op=n($,"LI",{});var e4e=s(op);gre=n(e4e,"STRONG",{});var ZIr=s(gre);cio=r(ZIr,"nystromformer"),ZIr.forEach(t),fio=r(e4e," \u2014 "),uB=n(e4e,"A",{href:!0});var eqr=s(uB);mio=r(eqr,"NystromformerModel"),eqr.forEach(t),gio=r(e4e," (Nystromformer model)"),e4e.forEach(t),hio=i($),rp=n($,"LI",{});var o4e=s(rp);hre=n(o4e,"STRONG",{});var oqr=s(hre);pio=r(oqr,"openai-gpt"),oqr.forEach(t),uio=r(o4e," \u2014 "),_B=n(o4e,"A",{href:!0});var rqr=s(_B);_io=r(rqr,"OpenAIGPTModel"),rqr.forEach(t),bio=r(o4e," (OpenAI GPT model)"),o4e.forEach(t),Fio=i($),tp=n($,"LI",{});var r4e=s(tp);pre=n(r4e,"STRONG",{});var tqr=s(pre);vio=r(tqr,"pegasus"),tqr.forEach(t),Tio=r(r4e," \u2014 "),bB=n(r4e,"A",{href:!0});var aqr=s(bB);Mio=r(aqr,"PegasusModel"),aqr.forEach(t),Eio=r(r4e," (Pegasus model)"),r4e.forEach(t),Cio=i($),ap=n($,"LI",{});var t4e=s(ap);ure=n(t4e,"STRONG",{});var nqr=s(ure);wio=r(nqr,"perceiver"),nqr.forEach(t),Aio=r(t4e," \u2014 "),FB=n(t4e,"A",{href:!0});var sqr=s(FB);yio=r(sqr,"PerceiverModel"),sqr.forEach(t),Lio=r(t4e," (Perceiver model)"),t4e.forEach(t),xio=i($),np=n($,"LI",{});var a4e=s(np);_re=n(a4e,"STRONG",{});var lqr=s(_re);$io=r(lqr,"plbart"),lqr.forEach(t),kio=r(a4e," \u2014 "),vB=n(a4e,"A",{href:!0});var iqr=s(vB);Sio=r(iqr,"PLBartModel"),iqr.forEach(t),Rio=r(a4e," (PLBart model)"),a4e.forEach(t),Bio=i($),sp=n($,"LI",{});var n4e=s(sp);bre=n(n4e,"STRONG",{});var dqr=s(bre);Pio=r(dqr,"poolformer"),dqr.forEach(t),Iio=r(n4e," \u2014 "),TB=n(n4e,"A",{href:!0});var cqr=s(TB);qio=r(cqr,"PoolFormerModel"),cqr.forEach(t),Nio=r(n4e," (PoolFormer model)"),n4e.forEach(t),jio=i($),lp=n($,"LI",{});var s4e=s(lp);Fre=n(s4e,"STRONG",{});var fqr=s(Fre);Dio=r(fqr,"prophetnet"),fqr.forEach(t),Gio=r(s4e," \u2014 "),MB=n(s4e,"A",{href:!0});var mqr=s(MB);Oio=r(mqr,"ProphetNetModel"),mqr.forEach(t),Vio=r(s4e," (ProphetNet model)"),s4e.forEach(t),Xio=i($),ip=n($,"LI",{});var l4e=s(ip);vre=n(l4e,"STRONG",{});var gqr=s(vre);zio=r(gqr,"qdqbert"),gqr.forEach(t),Qio=r(l4e," \u2014 "),Tre=n(l4e,"CODE",{});var hqr=s(Tre);Wio=r(hqr,"QDQBertModel"),hqr.forEach(t),Hio=r(l4e," (QDQBert model)"),l4e.forEach(t),Uio=i($),dp=n($,"LI",{});var i4e=s(dp);Mre=n(i4e,"STRONG",{});var pqr=s(Mre);Jio=r(pqr,"reformer"),pqr.forEach(t),Yio=r(i4e," \u2014 "),EB=n(i4e,"A",{href:!0});var uqr=s(EB);Kio=r(uqr,"ReformerModel"),uqr.forEach(t),Zio=r(i4e," (Reformer model)"),i4e.forEach(t),edo=i($),cp=n($,"LI",{});var d4e=s(cp);Ere=n(d4e,"STRONG",{});var _qr=s(Ere);odo=r(_qr,"rembert"),_qr.forEach(t),rdo=r(d4e," \u2014 "),CB=n(d4e,"A",{href:!0});var bqr=s(CB);tdo=r(bqr,"RemBertModel"),bqr.forEach(t),ado=r(d4e," (RemBERT model)"),d4e.forEach(t),ndo=i($),fp=n($,"LI",{});var c4e=s(fp);Cre=n(c4e,"STRONG",{});var Fqr=s(Cre);sdo=r(Fqr,"resnet"),Fqr.forEach(t),ldo=r(c4e," \u2014 "),wB=n(c4e,"A",{href:!0});var vqr=s(wB);ido=r(vqr,"ResNetModel"),vqr.forEach(t),ddo=r(c4e," (ResNet model)"),c4e.forEach(t),cdo=i($),mp=n($,"LI",{});var f4e=s(mp);wre=n(f4e,"STRONG",{});var Tqr=s(wre);fdo=r(Tqr,"retribert"),Tqr.forEach(t),mdo=r(f4e," \u2014 "),AB=n(f4e,"A",{href:!0});var Mqr=s(AB);gdo=r(Mqr,"RetriBertModel"),Mqr.forEach(t),hdo=r(f4e," (RetriBERT model)"),f4e.forEach(t),pdo=i($),gp=n($,"LI",{});var m4e=s(gp);Are=n(m4e,"STRONG",{});var Eqr=s(Are);udo=r(Eqr,"roberta"),Eqr.forEach(t),_do=r(m4e," \u2014 "),yB=n(m4e,"A",{href:!0});var Cqr=s(yB);bdo=r(Cqr,"RobertaModel"),Cqr.forEach(t),Fdo=r(m4e," (RoBERTa model)"),m4e.forEach(t),vdo=i($),hp=n($,"LI",{});var g4e=s(hp);yre=n(g4e,"STRONG",{});var wqr=s(yre);Tdo=r(wqr,"roformer"),wqr.forEach(t),Mdo=r(g4e," \u2014 "),LB=n(g4e,"A",{href:!0});var Aqr=s(LB);Edo=r(Aqr,"RoFormerModel"),Aqr.forEach(t),Cdo=r(g4e," (RoFormer model)"),g4e.forEach(t),wdo=i($),pp=n($,"LI",{});var h4e=s(pp);Lre=n(h4e,"STRONG",{});var yqr=s(Lre);Ado=r(yqr,"segformer"),yqr.forEach(t),ydo=r(h4e," \u2014 "),xB=n(h4e,"A",{href:!0});var Lqr=s(xB);Ldo=r(Lqr,"SegformerModel"),Lqr.forEach(t),xdo=r(h4e," (SegFormer model)"),h4e.forEach(t),$do=i($),up=n($,"LI",{});var p4e=s(up);xre=n(p4e,"STRONG",{});var xqr=s(xre);kdo=r(xqr,"sew"),xqr.forEach(t),Sdo=r(p4e," \u2014 "),$B=n(p4e,"A",{href:!0});var $qr=s($B);Rdo=r($qr,"SEWModel"),$qr.forEach(t),Bdo=r(p4e," (SEW model)"),p4e.forEach(t),Pdo=i($),_p=n($,"LI",{});var u4e=s(_p);$re=n(u4e,"STRONG",{});var kqr=s($re);Ido=r(kqr,"sew-d"),kqr.forEach(t),qdo=r(u4e," \u2014 "),kB=n(u4e,"A",{href:!0});var Sqr=s(kB);Ndo=r(Sqr,"SEWDModel"),Sqr.forEach(t),jdo=r(u4e," (SEW-D model)"),u4e.forEach(t),Ddo=i($),bp=n($,"LI",{});var _4e=s(bp);kre=n(_4e,"STRONG",{});var Rqr=s(kre);Gdo=r(Rqr,"speech_to_text"),Rqr.forEach(t),Odo=r(_4e," \u2014 "),SB=n(_4e,"A",{href:!0});var Bqr=s(SB);Vdo=r(Bqr,"Speech2TextModel"),Bqr.forEach(t),Xdo=r(_4e," (Speech2Text model)"),_4e.forEach(t),zdo=i($),Fp=n($,"LI",{});var b4e=s(Fp);Sre=n(b4e,"STRONG",{});var Pqr=s(Sre);Qdo=r(Pqr,"splinter"),Pqr.forEach(t),Wdo=r(b4e," \u2014 "),RB=n(b4e,"A",{href:!0});var Iqr=s(RB);Hdo=r(Iqr,"SplinterModel"),Iqr.forEach(t),Udo=r(b4e," (Splinter model)"),b4e.forEach(t),Jdo=i($),vp=n($,"LI",{});var F4e=s(vp);Rre=n(F4e,"STRONG",{});var qqr=s(Rre);Ydo=r(qqr,"squeezebert"),qqr.forEach(t),Kdo=r(F4e," \u2014 "),BB=n(F4e,"A",{href:!0});var Nqr=s(BB);Zdo=r(Nqr,"SqueezeBertModel"),Nqr.forEach(t),eco=r(F4e," (SqueezeBERT model)"),F4e.forEach(t),oco=i($),Tp=n($,"LI",{});var v4e=s(Tp);Bre=n(v4e,"STRONG",{});var jqr=s(Bre);rco=r(jqr,"swin"),jqr.forEach(t),tco=r(v4e," \u2014 "),PB=n(v4e,"A",{href:!0});var Dqr=s(PB);aco=r(Dqr,"SwinModel"),Dqr.forEach(t),nco=r(v4e," (Swin model)"),v4e.forEach(t),sco=i($),Mp=n($,"LI",{});var T4e=s(Mp);Pre=n(T4e,"STRONG",{});var Gqr=s(Pre);lco=r(Gqr,"t5"),Gqr.forEach(t),ico=r(T4e," \u2014 "),IB=n(T4e,"A",{href:!0});var Oqr=s(IB);dco=r(Oqr,"T5Model"),Oqr.forEach(t),cco=r(T4e," (T5 model)"),T4e.forEach(t),fco=i($),Ep=n($,"LI",{});var M4e=s(Ep);Ire=n(M4e,"STRONG",{});var Vqr=s(Ire);mco=r(Vqr,"tapas"),Vqr.forEach(t),gco=r(M4e," \u2014 "),qB=n(M4e,"A",{href:!0});var Xqr=s(qB);hco=r(Xqr,"TapasModel"),Xqr.forEach(t),pco=r(M4e," (TAPAS model)"),M4e.forEach(t),uco=i($),Cp=n($,"LI",{});var E4e=s(Cp);qre=n(E4e,"STRONG",{});var zqr=s(qre);_co=r(zqr,"transfo-xl"),zqr.forEach(t),bco=r(E4e," \u2014 "),NB=n(E4e,"A",{href:!0});var Qqr=s(NB);Fco=r(Qqr,"TransfoXLModel"),Qqr.forEach(t),vco=r(E4e," (Transformer-XL model)"),E4e.forEach(t),Tco=i($),wp=n($,"LI",{});var C4e=s(wp);Nre=n(C4e,"STRONG",{});var Wqr=s(Nre);Mco=r(Wqr,"unispeech"),Wqr.forEach(t),Eco=r(C4e," \u2014 "),jB=n(C4e,"A",{href:!0});var Hqr=s(jB);Cco=r(Hqr,"UniSpeechModel"),Hqr.forEach(t),wco=r(C4e," (UniSpeech model)"),C4e.forEach(t),Aco=i($),Ap=n($,"LI",{});var w4e=s(Ap);jre=n(w4e,"STRONG",{});var Uqr=s(jre);yco=r(Uqr,"unispeech-sat"),Uqr.forEach(t),Lco=r(w4e," \u2014 "),DB=n(w4e,"A",{href:!0});var Jqr=s(DB);xco=r(Jqr,"UniSpeechSatModel"),Jqr.forEach(t),$co=r(w4e," (UniSpeechSat model)"),w4e.forEach(t),kco=i($),yp=n($,"LI",{});var A4e=s(yp);Dre=n(A4e,"STRONG",{});var Yqr=s(Dre);Sco=r(Yqr,"van"),Yqr.forEach(t),Rco=r(A4e," \u2014 "),GB=n(A4e,"A",{href:!0});var Kqr=s(GB);Bco=r(Kqr,"VanModel"),Kqr.forEach(t),Pco=r(A4e," (VAN model)"),A4e.forEach(t),Ico=i($),Lp=n($,"LI",{});var y4e=s(Lp);Gre=n(y4e,"STRONG",{});var Zqr=s(Gre);qco=r(Zqr,"vilt"),Zqr.forEach(t),Nco=r(y4e," \u2014 "),OB=n(y4e,"A",{href:!0});var eNr=s(OB);jco=r(eNr,"ViltModel"),eNr.forEach(t),Dco=r(y4e," (ViLT model)"),y4e.forEach(t),Gco=i($),xp=n($,"LI",{});var L4e=s(xp);Ore=n(L4e,"STRONG",{});var oNr=s(Ore);Oco=r(oNr,"vision-text-dual-encoder"),oNr.forEach(t),Vco=r(L4e," \u2014 "),VB=n(L4e,"A",{href:!0});var rNr=s(VB);Xco=r(rNr,"VisionTextDualEncoderModel"),rNr.forEach(t),zco=r(L4e," (VisionTextDualEncoder model)"),L4e.forEach(t),Qco=i($),$p=n($,"LI",{});var x4e=s($p);Vre=n(x4e,"STRONG",{});var tNr=s(Vre);Wco=r(tNr,"visual_bert"),tNr.forEach(t),Hco=r(x4e," \u2014 "),XB=n(x4e,"A",{href:!0});var aNr=s(XB);Uco=r(aNr,"VisualBertModel"),aNr.forEach(t),Jco=r(x4e," (VisualBert model)"),x4e.forEach(t),Yco=i($),kp=n($,"LI",{});var $4e=s(kp);Xre=n($4e,"STRONG",{});var nNr=s(Xre);Kco=r(nNr,"vit"),nNr.forEach(t),Zco=r($4e," \u2014 "),zB=n($4e,"A",{href:!0});var sNr=s(zB);efo=r(sNr,"ViTModel"),sNr.forEach(t),ofo=r($4e," (ViT model)"),$4e.forEach(t),rfo=i($),Sp=n($,"LI",{});var k4e=s(Sp);zre=n(k4e,"STRONG",{});var lNr=s(zre);tfo=r(lNr,"vit_mae"),lNr.forEach(t),afo=r(k4e," \u2014 "),QB=n(k4e,"A",{href:!0});var iNr=s(QB);nfo=r(iNr,"ViTMAEModel"),iNr.forEach(t),sfo=r(k4e," (ViTMAE model)"),k4e.forEach(t),lfo=i($),Rp=n($,"LI",{});var S4e=s(Rp);Qre=n(S4e,"STRONG",{});var dNr=s(Qre);ifo=r(dNr,"wav2vec2"),dNr.forEach(t),dfo=r(S4e," \u2014 "),WB=n(S4e,"A",{href:!0});var cNr=s(WB);cfo=r(cNr,"Wav2Vec2Model"),cNr.forEach(t),ffo=r(S4e," (Wav2Vec2 model)"),S4e.forEach(t),mfo=i($),Bp=n($,"LI",{});var R4e=s(Bp);Wre=n(R4e,"STRONG",{});var fNr=s(Wre);gfo=r(fNr,"wavlm"),fNr.forEach(t),hfo=r(R4e," \u2014 "),HB=n(R4e,"A",{href:!0});var mNr=s(HB);pfo=r(mNr,"WavLMModel"),mNr.forEach(t),ufo=r(R4e," (WavLM model)"),R4e.forEach(t),_fo=i($),Pp=n($,"LI",{});var B4e=s(Pp);Hre=n(B4e,"STRONG",{});var gNr=s(Hre);bfo=r(gNr,"xglm"),gNr.forEach(t),Ffo=r(B4e," \u2014 "),UB=n(B4e,"A",{href:!0});var hNr=s(UB);vfo=r(hNr,"XGLMModel"),hNr.forEach(t),Tfo=r(B4e," (XGLM model)"),B4e.forEach(t),Mfo=i($),Ip=n($,"LI",{});var P4e=s(Ip);Ure=n(P4e,"STRONG",{});var pNr=s(Ure);Efo=r(pNr,"xlm"),pNr.forEach(t),Cfo=r(P4e," \u2014 "),JB=n(P4e,"A",{href:!0});var uNr=s(JB);wfo=r(uNr,"XLMModel"),uNr.forEach(t),Afo=r(P4e," (XLM model)"),P4e.forEach(t),yfo=i($),qp=n($,"LI",{});var I4e=s(qp);Jre=n(I4e,"STRONG",{});var _Nr=s(Jre);Lfo=r(_Nr,"xlm-prophetnet"),_Nr.forEach(t),xfo=r(I4e," \u2014 "),YB=n(I4e,"A",{href:!0});var bNr=s(YB);$fo=r(bNr,"XLMProphetNetModel"),bNr.forEach(t),kfo=r(I4e," (XLMProphetNet model)"),I4e.forEach(t),Sfo=i($),Np=n($,"LI",{});var q4e=s(Np);Yre=n(q4e,"STRONG",{});var FNr=s(Yre);Rfo=r(FNr,"xlm-roberta"),FNr.forEach(t),Bfo=r(q4e," \u2014 "),KB=n(q4e,"A",{href:!0});var vNr=s(KB);Pfo=r(vNr,"XLMRobertaModel"),vNr.forEach(t),Ifo=r(q4e," (XLM-RoBERTa model)"),q4e.forEach(t),qfo=i($),jp=n($,"LI",{});var N4e=s(jp);Kre=n(N4e,"STRONG",{});var TNr=s(Kre);Nfo=r(TNr,"xlm-roberta-xl"),TNr.forEach(t),jfo=r(N4e," \u2014 "),ZB=n(N4e,"A",{href:!0});var MNr=s(ZB);Dfo=r(MNr,"XLMRobertaXLModel"),MNr.forEach(t),Gfo=r(N4e," (XLM-RoBERTa-XL model)"),N4e.forEach(t),Ofo=i($),Dp=n($,"LI",{});var j4e=s(Dp);Zre=n(j4e,"STRONG",{});var ENr=s(Zre);Vfo=r(ENr,"xlnet"),ENr.forEach(t),Xfo=r(j4e," \u2014 "),eP=n(j4e,"A",{href:!0});var CNr=s(eP);zfo=r(CNr,"XLNetModel"),CNr.forEach(t),Qfo=r(j4e," (XLNet model)"),j4e.forEach(t),Wfo=i($),Gp=n($,"LI",{});var D4e=s(Gp);ete=n(D4e,"STRONG",{});var wNr=s(ete);Hfo=r(wNr,"yoso"),wNr.forEach(t),Ufo=r(D4e," \u2014 "),oP=n(D4e,"A",{href:!0});var ANr=s(oP);Jfo=r(ANr,"YosoModel"),ANr.forEach(t),Yfo=r(D4e," (YOSO model)"),D4e.forEach(t),$.forEach(t),Kfo=i(Ut),Op=n(Ut,"P",{});var G4e=s(Op);Zfo=r(G4e,"The model is set in evaluation mode by default using "),ote=n(G4e,"CODE",{});var yNr=s(ote);emo=r(yNr,"model.eval()"),yNr.forEach(t),omo=r(G4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rte=n(G4e,"CODE",{});var LNr=s(rte);rmo=r(LNr,"model.train()"),LNr.forEach(t),G4e.forEach(t),tmo=i(Ut),T(Vp.$$.fragment,Ut),Ut.forEach(t),ws.forEach(t),V$e=i(f),di=n(f,"H2",{class:!0});var zSe=s(di);Xp=n(zSe,"A",{id:!0,class:!0,href:!0});var xNr=s(Xp);tte=n(xNr,"SPAN",{});var $Nr=s(tte);T(aA.$$.fragment,$Nr),$Nr.forEach(t),xNr.forEach(t),amo=i(zSe),ate=n(zSe,"SPAN",{});var kNr=s(ate);nmo=r(kNr,"AutoModelForPreTraining"),kNr.forEach(t),zSe.forEach(t),X$e=i(f),yo=n(f,"DIV",{class:!0});var As=s(yo);T(nA.$$.fragment,As),smo=i(As),ci=n(As,"P",{});var oU=s(ci);lmo=r(oU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),rP=n(oU,"A",{href:!0});var SNr=s(rP);imo=r(SNr,"from_pretrained()"),SNr.forEach(t),dmo=r(oU," class method or the "),tP=n(oU,"A",{href:!0});var RNr=s(tP);cmo=r(RNr,"from_config()"),RNr.forEach(t),fmo=r(oU,` class
method.`),oU.forEach(t),mmo=i(As),sA=n(As,"P",{});var QSe=s(sA);gmo=r(QSe,"This class cannot be instantiated directly using "),nte=n(QSe,"CODE",{});var BNr=s(nte);hmo=r(BNr,"__init__()"),BNr.forEach(t),pmo=r(QSe," (throws an error)."),QSe.forEach(t),umo=i(As),Zr=n(As,"DIV",{class:!0});var PC=s(Zr);T(lA.$$.fragment,PC),_mo=i(PC),ste=n(PC,"P",{});var PNr=s(ste);bmo=r(PNr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),PNr.forEach(t),Fmo=i(PC),fi=n(PC,"P",{});var rU=s(fi);vmo=r(rU,`Note:
Loading a model from its configuration file does `),lte=n(rU,"STRONG",{});var INr=s(lte);Tmo=r(INr,"not"),INr.forEach(t),Mmo=r(rU,` load the model weights. It only affects the
model\u2019s configuration. Use `),aP=n(rU,"A",{href:!0});var qNr=s(aP);Emo=r(qNr,"from_pretrained()"),qNr.forEach(t),Cmo=r(rU," to load the model weights."),rU.forEach(t),wmo=i(PC),T(zp.$$.fragment,PC),PC.forEach(t),Amo=i(As),Qe=n(As,"DIV",{class:!0});var Jt=s(Qe);T(iA.$$.fragment,Jt),ymo=i(Jt),ite=n(Jt,"P",{});var NNr=s(ite);Lmo=r(NNr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),NNr.forEach(t),xmo=i(Jt),Ea=n(Jt,"P",{});var IC=s(Ea);$mo=r(IC,"The model class to instantiate is selected based on the "),dte=n(IC,"CODE",{});var jNr=s(dte);kmo=r(jNr,"model_type"),jNr.forEach(t),Smo=r(IC,` property of the config object (either
passed as an argument or loaded from `),cte=n(IC,"CODE",{});var DNr=s(cte);Rmo=r(DNr,"pretrained_model_name_or_path"),DNr.forEach(t),Bmo=r(IC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fte=n(IC,"CODE",{});var GNr=s(fte);Pmo=r(GNr,"pretrained_model_name_or_path"),GNr.forEach(t),Imo=r(IC,":"),IC.forEach(t),qmo=i(Jt),G=n(Jt,"UL",{});var V=s(G);Qp=n(V,"LI",{});var O4e=s(Qp);mte=n(O4e,"STRONG",{});var ONr=s(mte);Nmo=r(ONr,"albert"),ONr.forEach(t),jmo=r(O4e," \u2014 "),nP=n(O4e,"A",{href:!0});var VNr=s(nP);Dmo=r(VNr,"AlbertForPreTraining"),VNr.forEach(t),Gmo=r(O4e," (ALBERT model)"),O4e.forEach(t),Omo=i(V),Wp=n(V,"LI",{});var V4e=s(Wp);gte=n(V4e,"STRONG",{});var XNr=s(gte);Vmo=r(XNr,"bart"),XNr.forEach(t),Xmo=r(V4e," \u2014 "),sP=n(V4e,"A",{href:!0});var zNr=s(sP);zmo=r(zNr,"BartForConditionalGeneration"),zNr.forEach(t),Qmo=r(V4e," (BART model)"),V4e.forEach(t),Wmo=i(V),Hp=n(V,"LI",{});var X4e=s(Hp);hte=n(X4e,"STRONG",{});var QNr=s(hte);Hmo=r(QNr,"bert"),QNr.forEach(t),Umo=r(X4e," \u2014 "),lP=n(X4e,"A",{href:!0});var WNr=s(lP);Jmo=r(WNr,"BertForPreTraining"),WNr.forEach(t),Ymo=r(X4e," (BERT model)"),X4e.forEach(t),Kmo=i(V),Up=n(V,"LI",{});var z4e=s(Up);pte=n(z4e,"STRONG",{});var HNr=s(pte);Zmo=r(HNr,"big_bird"),HNr.forEach(t),ego=r(z4e," \u2014 "),iP=n(z4e,"A",{href:!0});var UNr=s(iP);ogo=r(UNr,"BigBirdForPreTraining"),UNr.forEach(t),rgo=r(z4e," (BigBird model)"),z4e.forEach(t),tgo=i(V),Jp=n(V,"LI",{});var Q4e=s(Jp);ute=n(Q4e,"STRONG",{});var JNr=s(ute);ago=r(JNr,"camembert"),JNr.forEach(t),ngo=r(Q4e," \u2014 "),dP=n(Q4e,"A",{href:!0});var YNr=s(dP);sgo=r(YNr,"CamembertForMaskedLM"),YNr.forEach(t),lgo=r(Q4e," (CamemBERT model)"),Q4e.forEach(t),igo=i(V),Yp=n(V,"LI",{});var W4e=s(Yp);_te=n(W4e,"STRONG",{});var KNr=s(_te);dgo=r(KNr,"ctrl"),KNr.forEach(t),cgo=r(W4e," \u2014 "),cP=n(W4e,"A",{href:!0});var ZNr=s(cP);fgo=r(ZNr,"CTRLLMHeadModel"),ZNr.forEach(t),mgo=r(W4e," (CTRL model)"),W4e.forEach(t),ggo=i(V),Kp=n(V,"LI",{});var H4e=s(Kp);bte=n(H4e,"STRONG",{});var ejr=s(bte);hgo=r(ejr,"data2vec-text"),ejr.forEach(t),pgo=r(H4e," \u2014 "),fP=n(H4e,"A",{href:!0});var ojr=s(fP);ugo=r(ojr,"Data2VecTextForMaskedLM"),ojr.forEach(t),_go=r(H4e," (Data2VecText model)"),H4e.forEach(t),bgo=i(V),Zp=n(V,"LI",{});var U4e=s(Zp);Fte=n(U4e,"STRONG",{});var rjr=s(Fte);Fgo=r(rjr,"deberta"),rjr.forEach(t),vgo=r(U4e," \u2014 "),mP=n(U4e,"A",{href:!0});var tjr=s(mP);Tgo=r(tjr,"DebertaForMaskedLM"),tjr.forEach(t),Mgo=r(U4e," (DeBERTa model)"),U4e.forEach(t),Ego=i(V),eu=n(V,"LI",{});var J4e=s(eu);vte=n(J4e,"STRONG",{});var ajr=s(vte);Cgo=r(ajr,"deberta-v2"),ajr.forEach(t),wgo=r(J4e," \u2014 "),gP=n(J4e,"A",{href:!0});var njr=s(gP);Ago=r(njr,"DebertaV2ForMaskedLM"),njr.forEach(t),ygo=r(J4e," (DeBERTa-v2 model)"),J4e.forEach(t),Lgo=i(V),ou=n(V,"LI",{});var Y4e=s(ou);Tte=n(Y4e,"STRONG",{});var sjr=s(Tte);xgo=r(sjr,"distilbert"),sjr.forEach(t),$go=r(Y4e," \u2014 "),hP=n(Y4e,"A",{href:!0});var ljr=s(hP);kgo=r(ljr,"DistilBertForMaskedLM"),ljr.forEach(t),Sgo=r(Y4e," (DistilBERT model)"),Y4e.forEach(t),Rgo=i(V),ru=n(V,"LI",{});var K4e=s(ru);Mte=n(K4e,"STRONG",{});var ijr=s(Mte);Bgo=r(ijr,"electra"),ijr.forEach(t),Pgo=r(K4e," \u2014 "),pP=n(K4e,"A",{href:!0});var djr=s(pP);Igo=r(djr,"ElectraForPreTraining"),djr.forEach(t),qgo=r(K4e," (ELECTRA model)"),K4e.forEach(t),Ngo=i(V),tu=n(V,"LI",{});var Z4e=s(tu);Ete=n(Z4e,"STRONG",{});var cjr=s(Ete);jgo=r(cjr,"flaubert"),cjr.forEach(t),Dgo=r(Z4e," \u2014 "),uP=n(Z4e,"A",{href:!0});var fjr=s(uP);Ggo=r(fjr,"FlaubertWithLMHeadModel"),fjr.forEach(t),Ogo=r(Z4e," (FlauBERT model)"),Z4e.forEach(t),Vgo=i(V),au=n(V,"LI",{});var eEe=s(au);Cte=n(eEe,"STRONG",{});var mjr=s(Cte);Xgo=r(mjr,"fnet"),mjr.forEach(t),zgo=r(eEe," \u2014 "),_P=n(eEe,"A",{href:!0});var gjr=s(_P);Qgo=r(gjr,"FNetForPreTraining"),gjr.forEach(t),Wgo=r(eEe," (FNet model)"),eEe.forEach(t),Hgo=i(V),nu=n(V,"LI",{});var oEe=s(nu);wte=n(oEe,"STRONG",{});var hjr=s(wte);Ugo=r(hjr,"fsmt"),hjr.forEach(t),Jgo=r(oEe," \u2014 "),bP=n(oEe,"A",{href:!0});var pjr=s(bP);Ygo=r(pjr,"FSMTForConditionalGeneration"),pjr.forEach(t),Kgo=r(oEe," (FairSeq Machine-Translation model)"),oEe.forEach(t),Zgo=i(V),su=n(V,"LI",{});var rEe=s(su);Ate=n(rEe,"STRONG",{});var ujr=s(Ate);eho=r(ujr,"funnel"),ujr.forEach(t),oho=r(rEe," \u2014 "),FP=n(rEe,"A",{href:!0});var _jr=s(FP);rho=r(_jr,"FunnelForPreTraining"),_jr.forEach(t),tho=r(rEe," (Funnel Transformer model)"),rEe.forEach(t),aho=i(V),lu=n(V,"LI",{});var tEe=s(lu);yte=n(tEe,"STRONG",{});var bjr=s(yte);nho=r(bjr,"gpt2"),bjr.forEach(t),sho=r(tEe," \u2014 "),vP=n(tEe,"A",{href:!0});var Fjr=s(vP);lho=r(Fjr,"GPT2LMHeadModel"),Fjr.forEach(t),iho=r(tEe," (OpenAI GPT-2 model)"),tEe.forEach(t),dho=i(V),iu=n(V,"LI",{});var aEe=s(iu);Lte=n(aEe,"STRONG",{});var vjr=s(Lte);cho=r(vjr,"ibert"),vjr.forEach(t),fho=r(aEe," \u2014 "),TP=n(aEe,"A",{href:!0});var Tjr=s(TP);mho=r(Tjr,"IBertForMaskedLM"),Tjr.forEach(t),gho=r(aEe," (I-BERT model)"),aEe.forEach(t),hho=i(V),du=n(V,"LI",{});var nEe=s(du);xte=n(nEe,"STRONG",{});var Mjr=s(xte);pho=r(Mjr,"layoutlm"),Mjr.forEach(t),uho=r(nEe," \u2014 "),MP=n(nEe,"A",{href:!0});var Ejr=s(MP);_ho=r(Ejr,"LayoutLMForMaskedLM"),Ejr.forEach(t),bho=r(nEe," (LayoutLM model)"),nEe.forEach(t),Fho=i(V),cu=n(V,"LI",{});var sEe=s(cu);$te=n(sEe,"STRONG",{});var Cjr=s($te);vho=r(Cjr,"longformer"),Cjr.forEach(t),Tho=r(sEe," \u2014 "),EP=n(sEe,"A",{href:!0});var wjr=s(EP);Mho=r(wjr,"LongformerForMaskedLM"),wjr.forEach(t),Eho=r(sEe," (Longformer model)"),sEe.forEach(t),Cho=i(V),fu=n(V,"LI",{});var lEe=s(fu);kte=n(lEe,"STRONG",{});var Ajr=s(kte);who=r(Ajr,"lxmert"),Ajr.forEach(t),Aho=r(lEe," \u2014 "),CP=n(lEe,"A",{href:!0});var yjr=s(CP);yho=r(yjr,"LxmertForPreTraining"),yjr.forEach(t),Lho=r(lEe," (LXMERT model)"),lEe.forEach(t),xho=i(V),mu=n(V,"LI",{});var iEe=s(mu);Ste=n(iEe,"STRONG",{});var Ljr=s(Ste);$ho=r(Ljr,"megatron-bert"),Ljr.forEach(t),kho=r(iEe," \u2014 "),wP=n(iEe,"A",{href:!0});var xjr=s(wP);Sho=r(xjr,"MegatronBertForPreTraining"),xjr.forEach(t),Rho=r(iEe," (MegatronBert model)"),iEe.forEach(t),Bho=i(V),gu=n(V,"LI",{});var dEe=s(gu);Rte=n(dEe,"STRONG",{});var $jr=s(Rte);Pho=r($jr,"mobilebert"),$jr.forEach(t),Iho=r(dEe," \u2014 "),AP=n(dEe,"A",{href:!0});var kjr=s(AP);qho=r(kjr,"MobileBertForPreTraining"),kjr.forEach(t),Nho=r(dEe," (MobileBERT model)"),dEe.forEach(t),jho=i(V),hu=n(V,"LI",{});var cEe=s(hu);Bte=n(cEe,"STRONG",{});var Sjr=s(Bte);Dho=r(Sjr,"mpnet"),Sjr.forEach(t),Gho=r(cEe," \u2014 "),yP=n(cEe,"A",{href:!0});var Rjr=s(yP);Oho=r(Rjr,"MPNetForMaskedLM"),Rjr.forEach(t),Vho=r(cEe," (MPNet model)"),cEe.forEach(t),Xho=i(V),pu=n(V,"LI",{});var fEe=s(pu);Pte=n(fEe,"STRONG",{});var Bjr=s(Pte);zho=r(Bjr,"openai-gpt"),Bjr.forEach(t),Qho=r(fEe," \u2014 "),LP=n(fEe,"A",{href:!0});var Pjr=s(LP);Who=r(Pjr,"OpenAIGPTLMHeadModel"),Pjr.forEach(t),Hho=r(fEe," (OpenAI GPT model)"),fEe.forEach(t),Uho=i(V),uu=n(V,"LI",{});var mEe=s(uu);Ite=n(mEe,"STRONG",{});var Ijr=s(Ite);Jho=r(Ijr,"retribert"),Ijr.forEach(t),Yho=r(mEe," \u2014 "),xP=n(mEe,"A",{href:!0});var qjr=s(xP);Kho=r(qjr,"RetriBertModel"),qjr.forEach(t),Zho=r(mEe," (RetriBERT model)"),mEe.forEach(t),epo=i(V),_u=n(V,"LI",{});var gEe=s(_u);qte=n(gEe,"STRONG",{});var Njr=s(qte);opo=r(Njr,"roberta"),Njr.forEach(t),rpo=r(gEe," \u2014 "),$P=n(gEe,"A",{href:!0});var jjr=s($P);tpo=r(jjr,"RobertaForMaskedLM"),jjr.forEach(t),apo=r(gEe," (RoBERTa model)"),gEe.forEach(t),npo=i(V),bu=n(V,"LI",{});var hEe=s(bu);Nte=n(hEe,"STRONG",{});var Djr=s(Nte);spo=r(Djr,"squeezebert"),Djr.forEach(t),lpo=r(hEe," \u2014 "),kP=n(hEe,"A",{href:!0});var Gjr=s(kP);ipo=r(Gjr,"SqueezeBertForMaskedLM"),Gjr.forEach(t),dpo=r(hEe," (SqueezeBERT model)"),hEe.forEach(t),cpo=i(V),Fu=n(V,"LI",{});var pEe=s(Fu);jte=n(pEe,"STRONG",{});var Ojr=s(jte);fpo=r(Ojr,"t5"),Ojr.forEach(t),mpo=r(pEe," \u2014 "),SP=n(pEe,"A",{href:!0});var Vjr=s(SP);gpo=r(Vjr,"T5ForConditionalGeneration"),Vjr.forEach(t),hpo=r(pEe," (T5 model)"),pEe.forEach(t),ppo=i(V),vu=n(V,"LI",{});var uEe=s(vu);Dte=n(uEe,"STRONG",{});var Xjr=s(Dte);upo=r(Xjr,"tapas"),Xjr.forEach(t),_po=r(uEe," \u2014 "),RP=n(uEe,"A",{href:!0});var zjr=s(RP);bpo=r(zjr,"TapasForMaskedLM"),zjr.forEach(t),Fpo=r(uEe," (TAPAS model)"),uEe.forEach(t),vpo=i(V),Tu=n(V,"LI",{});var _Ee=s(Tu);Gte=n(_Ee,"STRONG",{});var Qjr=s(Gte);Tpo=r(Qjr,"transfo-xl"),Qjr.forEach(t),Mpo=r(_Ee," \u2014 "),BP=n(_Ee,"A",{href:!0});var Wjr=s(BP);Epo=r(Wjr,"TransfoXLLMHeadModel"),Wjr.forEach(t),Cpo=r(_Ee," (Transformer-XL model)"),_Ee.forEach(t),wpo=i(V),Mu=n(V,"LI",{});var bEe=s(Mu);Ote=n(bEe,"STRONG",{});var Hjr=s(Ote);Apo=r(Hjr,"unispeech"),Hjr.forEach(t),ypo=r(bEe," \u2014 "),PP=n(bEe,"A",{href:!0});var Ujr=s(PP);Lpo=r(Ujr,"UniSpeechForPreTraining"),Ujr.forEach(t),xpo=r(bEe," (UniSpeech model)"),bEe.forEach(t),$po=i(V),Eu=n(V,"LI",{});var FEe=s(Eu);Vte=n(FEe,"STRONG",{});var Jjr=s(Vte);kpo=r(Jjr,"unispeech-sat"),Jjr.forEach(t),Spo=r(FEe," \u2014 "),IP=n(FEe,"A",{href:!0});var Yjr=s(IP);Rpo=r(Yjr,"UniSpeechSatForPreTraining"),Yjr.forEach(t),Bpo=r(FEe," (UniSpeechSat model)"),FEe.forEach(t),Ppo=i(V),Cu=n(V,"LI",{});var vEe=s(Cu);Xte=n(vEe,"STRONG",{});var Kjr=s(Xte);Ipo=r(Kjr,"visual_bert"),Kjr.forEach(t),qpo=r(vEe," \u2014 "),qP=n(vEe,"A",{href:!0});var Zjr=s(qP);Npo=r(Zjr,"VisualBertForPreTraining"),Zjr.forEach(t),jpo=r(vEe," (VisualBert model)"),vEe.forEach(t),Dpo=i(V),wu=n(V,"LI",{});var TEe=s(wu);zte=n(TEe,"STRONG",{});var eDr=s(zte);Gpo=r(eDr,"vit_mae"),eDr.forEach(t),Opo=r(TEe," \u2014 "),NP=n(TEe,"A",{href:!0});var oDr=s(NP);Vpo=r(oDr,"ViTMAEForPreTraining"),oDr.forEach(t),Xpo=r(TEe," (ViTMAE model)"),TEe.forEach(t),zpo=i(V),Au=n(V,"LI",{});var MEe=s(Au);Qte=n(MEe,"STRONG",{});var rDr=s(Qte);Qpo=r(rDr,"wav2vec2"),rDr.forEach(t),Wpo=r(MEe," \u2014 "),jP=n(MEe,"A",{href:!0});var tDr=s(jP);Hpo=r(tDr,"Wav2Vec2ForPreTraining"),tDr.forEach(t),Upo=r(MEe," (Wav2Vec2 model)"),MEe.forEach(t),Jpo=i(V),yu=n(V,"LI",{});var EEe=s(yu);Wte=n(EEe,"STRONG",{});var aDr=s(Wte);Ypo=r(aDr,"xlm"),aDr.forEach(t),Kpo=r(EEe," \u2014 "),DP=n(EEe,"A",{href:!0});var nDr=s(DP);Zpo=r(nDr,"XLMWithLMHeadModel"),nDr.forEach(t),euo=r(EEe," (XLM model)"),EEe.forEach(t),ouo=i(V),Lu=n(V,"LI",{});var CEe=s(Lu);Hte=n(CEe,"STRONG",{});var sDr=s(Hte);ruo=r(sDr,"xlm-roberta"),sDr.forEach(t),tuo=r(CEe," \u2014 "),GP=n(CEe,"A",{href:!0});var lDr=s(GP);auo=r(lDr,"XLMRobertaForMaskedLM"),lDr.forEach(t),nuo=r(CEe," (XLM-RoBERTa model)"),CEe.forEach(t),suo=i(V),xu=n(V,"LI",{});var wEe=s(xu);Ute=n(wEe,"STRONG",{});var iDr=s(Ute);luo=r(iDr,"xlm-roberta-xl"),iDr.forEach(t),iuo=r(wEe," \u2014 "),OP=n(wEe,"A",{href:!0});var dDr=s(OP);duo=r(dDr,"XLMRobertaXLForMaskedLM"),dDr.forEach(t),cuo=r(wEe," (XLM-RoBERTa-XL model)"),wEe.forEach(t),fuo=i(V),$u=n(V,"LI",{});var AEe=s($u);Jte=n(AEe,"STRONG",{});var cDr=s(Jte);muo=r(cDr,"xlnet"),cDr.forEach(t),guo=r(AEe," \u2014 "),VP=n(AEe,"A",{href:!0});var fDr=s(VP);huo=r(fDr,"XLNetLMHeadModel"),fDr.forEach(t),puo=r(AEe," (XLNet model)"),AEe.forEach(t),V.forEach(t),uuo=i(Jt),ku=n(Jt,"P",{});var yEe=s(ku);_uo=r(yEe,"The model is set in evaluation mode by default using "),Yte=n(yEe,"CODE",{});var mDr=s(Yte);buo=r(mDr,"model.eval()"),mDr.forEach(t),Fuo=r(yEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kte=n(yEe,"CODE",{});var gDr=s(Kte);vuo=r(gDr,"model.train()"),gDr.forEach(t),yEe.forEach(t),Tuo=i(Jt),T(Su.$$.fragment,Jt),Jt.forEach(t),As.forEach(t),z$e=i(f),mi=n(f,"H2",{class:!0});var WSe=s(mi);Ru=n(WSe,"A",{id:!0,class:!0,href:!0});var hDr=s(Ru);Zte=n(hDr,"SPAN",{});var pDr=s(Zte);T(dA.$$.fragment,pDr),pDr.forEach(t),hDr.forEach(t),Muo=i(WSe),eae=n(WSe,"SPAN",{});var uDr=s(eae);Euo=r(uDr,"AutoModelForCausalLM"),uDr.forEach(t),WSe.forEach(t),Q$e=i(f),Lo=n(f,"DIV",{class:!0});var ys=s(Lo);T(cA.$$.fragment,ys),Cuo=i(ys),gi=n(ys,"P",{});var tU=s(gi);wuo=r(tU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),XP=n(tU,"A",{href:!0});var _Dr=s(XP);Auo=r(_Dr,"from_pretrained()"),_Dr.forEach(t),yuo=r(tU," class method or the "),zP=n(tU,"A",{href:!0});var bDr=s(zP);Luo=r(bDr,"from_config()"),bDr.forEach(t),xuo=r(tU,` class
method.`),tU.forEach(t),$uo=i(ys),fA=n(ys,"P",{});var HSe=s(fA);kuo=r(HSe,"This class cannot be instantiated directly using "),oae=n(HSe,"CODE",{});var FDr=s(oae);Suo=r(FDr,"__init__()"),FDr.forEach(t),Ruo=r(HSe," (throws an error)."),HSe.forEach(t),Buo=i(ys),et=n(ys,"DIV",{class:!0});var qC=s(et);T(mA.$$.fragment,qC),Puo=i(qC),rae=n(qC,"P",{});var vDr=s(rae);Iuo=r(vDr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),vDr.forEach(t),quo=i(qC),hi=n(qC,"P",{});var aU=s(hi);Nuo=r(aU,`Note:
Loading a model from its configuration file does `),tae=n(aU,"STRONG",{});var TDr=s(tae);juo=r(TDr,"not"),TDr.forEach(t),Duo=r(aU,` load the model weights. It only affects the
model\u2019s configuration. Use `),QP=n(aU,"A",{href:!0});var MDr=s(QP);Guo=r(MDr,"from_pretrained()"),MDr.forEach(t),Ouo=r(aU," to load the model weights."),aU.forEach(t),Vuo=i(qC),T(Bu.$$.fragment,qC),qC.forEach(t),Xuo=i(ys),We=n(ys,"DIV",{class:!0});var Yt=s(We);T(gA.$$.fragment,Yt),zuo=i(Yt),aae=n(Yt,"P",{});var EDr=s(aae);Quo=r(EDr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),EDr.forEach(t),Wuo=i(Yt),Ca=n(Yt,"P",{});var NC=s(Ca);Huo=r(NC,"The model class to instantiate is selected based on the "),nae=n(NC,"CODE",{});var CDr=s(nae);Uuo=r(CDr,"model_type"),CDr.forEach(t),Juo=r(NC,` property of the config object (either
passed as an argument or loaded from `),sae=n(NC,"CODE",{});var wDr=s(sae);Yuo=r(wDr,"pretrained_model_name_or_path"),wDr.forEach(t),Kuo=r(NC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lae=n(NC,"CODE",{});var ADr=s(lae);Zuo=r(ADr,"pretrained_model_name_or_path"),ADr.forEach(t),e_o=r(NC,":"),NC.forEach(t),o_o=i(Yt),z=n(Yt,"UL",{});var W=s(z);Pu=n(W,"LI",{});var LEe=s(Pu);iae=n(LEe,"STRONG",{});var yDr=s(iae);r_o=r(yDr,"bart"),yDr.forEach(t),t_o=r(LEe," \u2014 "),WP=n(LEe,"A",{href:!0});var LDr=s(WP);a_o=r(LDr,"BartForCausalLM"),LDr.forEach(t),n_o=r(LEe," (BART model)"),LEe.forEach(t),s_o=i(W),Iu=n(W,"LI",{});var xEe=s(Iu);dae=n(xEe,"STRONG",{});var xDr=s(dae);l_o=r(xDr,"bert"),xDr.forEach(t),i_o=r(xEe," \u2014 "),HP=n(xEe,"A",{href:!0});var $Dr=s(HP);d_o=r($Dr,"BertLMHeadModel"),$Dr.forEach(t),c_o=r(xEe," (BERT model)"),xEe.forEach(t),f_o=i(W),qu=n(W,"LI",{});var $Ee=s(qu);cae=n($Ee,"STRONG",{});var kDr=s(cae);m_o=r(kDr,"bert-generation"),kDr.forEach(t),g_o=r($Ee," \u2014 "),UP=n($Ee,"A",{href:!0});var SDr=s(UP);h_o=r(SDr,"BertGenerationDecoder"),SDr.forEach(t),p_o=r($Ee," (Bert Generation model)"),$Ee.forEach(t),u_o=i(W),Nu=n(W,"LI",{});var kEe=s(Nu);fae=n(kEe,"STRONG",{});var RDr=s(fae);__o=r(RDr,"big_bird"),RDr.forEach(t),b_o=r(kEe," \u2014 "),JP=n(kEe,"A",{href:!0});var BDr=s(JP);F_o=r(BDr,"BigBirdForCausalLM"),BDr.forEach(t),v_o=r(kEe," (BigBird model)"),kEe.forEach(t),T_o=i(W),ju=n(W,"LI",{});var SEe=s(ju);mae=n(SEe,"STRONG",{});var PDr=s(mae);M_o=r(PDr,"bigbird_pegasus"),PDr.forEach(t),E_o=r(SEe," \u2014 "),YP=n(SEe,"A",{href:!0});var IDr=s(YP);C_o=r(IDr,"BigBirdPegasusForCausalLM"),IDr.forEach(t),w_o=r(SEe," (BigBirdPegasus model)"),SEe.forEach(t),A_o=i(W),Du=n(W,"LI",{});var REe=s(Du);gae=n(REe,"STRONG",{});var qDr=s(gae);y_o=r(qDr,"blenderbot"),qDr.forEach(t),L_o=r(REe," \u2014 "),KP=n(REe,"A",{href:!0});var NDr=s(KP);x_o=r(NDr,"BlenderbotForCausalLM"),NDr.forEach(t),$_o=r(REe," (Blenderbot model)"),REe.forEach(t),k_o=i(W),Gu=n(W,"LI",{});var BEe=s(Gu);hae=n(BEe,"STRONG",{});var jDr=s(hae);S_o=r(jDr,"blenderbot-small"),jDr.forEach(t),R_o=r(BEe," \u2014 "),ZP=n(BEe,"A",{href:!0});var DDr=s(ZP);B_o=r(DDr,"BlenderbotSmallForCausalLM"),DDr.forEach(t),P_o=r(BEe," (BlenderbotSmall model)"),BEe.forEach(t),I_o=i(W),Ou=n(W,"LI",{});var PEe=s(Ou);pae=n(PEe,"STRONG",{});var GDr=s(pae);q_o=r(GDr,"camembert"),GDr.forEach(t),N_o=r(PEe," \u2014 "),eI=n(PEe,"A",{href:!0});var ODr=s(eI);j_o=r(ODr,"CamembertForCausalLM"),ODr.forEach(t),D_o=r(PEe," (CamemBERT model)"),PEe.forEach(t),G_o=i(W),Vu=n(W,"LI",{});var IEe=s(Vu);uae=n(IEe,"STRONG",{});var VDr=s(uae);O_o=r(VDr,"ctrl"),VDr.forEach(t),V_o=r(IEe," \u2014 "),oI=n(IEe,"A",{href:!0});var XDr=s(oI);X_o=r(XDr,"CTRLLMHeadModel"),XDr.forEach(t),z_o=r(IEe," (CTRL model)"),IEe.forEach(t),Q_o=i(W),Xu=n(W,"LI",{});var qEe=s(Xu);_ae=n(qEe,"STRONG",{});var zDr=s(_ae);W_o=r(zDr,"data2vec-text"),zDr.forEach(t),H_o=r(qEe," \u2014 "),rI=n(qEe,"A",{href:!0});var QDr=s(rI);U_o=r(QDr,"Data2VecTextForCausalLM"),QDr.forEach(t),J_o=r(qEe," (Data2VecText model)"),qEe.forEach(t),Y_o=i(W),zu=n(W,"LI",{});var NEe=s(zu);bae=n(NEe,"STRONG",{});var WDr=s(bae);K_o=r(WDr,"electra"),WDr.forEach(t),Z_o=r(NEe," \u2014 "),tI=n(NEe,"A",{href:!0});var HDr=s(tI);e2o=r(HDr,"ElectraForCausalLM"),HDr.forEach(t),o2o=r(NEe," (ELECTRA model)"),NEe.forEach(t),r2o=i(W),Qu=n(W,"LI",{});var jEe=s(Qu);Fae=n(jEe,"STRONG",{});var UDr=s(Fae);t2o=r(UDr,"gpt2"),UDr.forEach(t),a2o=r(jEe," \u2014 "),aI=n(jEe,"A",{href:!0});var JDr=s(aI);n2o=r(JDr,"GPT2LMHeadModel"),JDr.forEach(t),s2o=r(jEe," (OpenAI GPT-2 model)"),jEe.forEach(t),l2o=i(W),Wu=n(W,"LI",{});var DEe=s(Wu);vae=n(DEe,"STRONG",{});var YDr=s(vae);i2o=r(YDr,"gpt_neo"),YDr.forEach(t),d2o=r(DEe," \u2014 "),nI=n(DEe,"A",{href:!0});var KDr=s(nI);c2o=r(KDr,"GPTNeoForCausalLM"),KDr.forEach(t),f2o=r(DEe," (GPT Neo model)"),DEe.forEach(t),m2o=i(W),Hu=n(W,"LI",{});var GEe=s(Hu);Tae=n(GEe,"STRONG",{});var ZDr=s(Tae);g2o=r(ZDr,"gptj"),ZDr.forEach(t),h2o=r(GEe," \u2014 "),sI=n(GEe,"A",{href:!0});var eGr=s(sI);p2o=r(eGr,"GPTJForCausalLM"),eGr.forEach(t),u2o=r(GEe," (GPT-J model)"),GEe.forEach(t),_2o=i(W),Uu=n(W,"LI",{});var OEe=s(Uu);Mae=n(OEe,"STRONG",{});var oGr=s(Mae);b2o=r(oGr,"marian"),oGr.forEach(t),F2o=r(OEe," \u2014 "),lI=n(OEe,"A",{href:!0});var rGr=s(lI);v2o=r(rGr,"MarianForCausalLM"),rGr.forEach(t),T2o=r(OEe," (Marian model)"),OEe.forEach(t),M2o=i(W),Ju=n(W,"LI",{});var VEe=s(Ju);Eae=n(VEe,"STRONG",{});var tGr=s(Eae);E2o=r(tGr,"mbart"),tGr.forEach(t),C2o=r(VEe," \u2014 "),iI=n(VEe,"A",{href:!0});var aGr=s(iI);w2o=r(aGr,"MBartForCausalLM"),aGr.forEach(t),A2o=r(VEe," (mBART model)"),VEe.forEach(t),y2o=i(W),Yu=n(W,"LI",{});var XEe=s(Yu);Cae=n(XEe,"STRONG",{});var nGr=s(Cae);L2o=r(nGr,"megatron-bert"),nGr.forEach(t),x2o=r(XEe," \u2014 "),dI=n(XEe,"A",{href:!0});var sGr=s(dI);$2o=r(sGr,"MegatronBertForCausalLM"),sGr.forEach(t),k2o=r(XEe," (MegatronBert model)"),XEe.forEach(t),S2o=i(W),Ku=n(W,"LI",{});var zEe=s(Ku);wae=n(zEe,"STRONG",{});var lGr=s(wae);R2o=r(lGr,"openai-gpt"),lGr.forEach(t),B2o=r(zEe," \u2014 "),cI=n(zEe,"A",{href:!0});var iGr=s(cI);P2o=r(iGr,"OpenAIGPTLMHeadModel"),iGr.forEach(t),I2o=r(zEe," (OpenAI GPT model)"),zEe.forEach(t),q2o=i(W),Zu=n(W,"LI",{});var QEe=s(Zu);Aae=n(QEe,"STRONG",{});var dGr=s(Aae);N2o=r(dGr,"pegasus"),dGr.forEach(t),j2o=r(QEe," \u2014 "),fI=n(QEe,"A",{href:!0});var cGr=s(fI);D2o=r(cGr,"PegasusForCausalLM"),cGr.forEach(t),G2o=r(QEe," (Pegasus model)"),QEe.forEach(t),O2o=i(W),e_=n(W,"LI",{});var WEe=s(e_);yae=n(WEe,"STRONG",{});var fGr=s(yae);V2o=r(fGr,"plbart"),fGr.forEach(t),X2o=r(WEe," \u2014 "),mI=n(WEe,"A",{href:!0});var mGr=s(mI);z2o=r(mGr,"PLBartForCausalLM"),mGr.forEach(t),Q2o=r(WEe," (PLBart model)"),WEe.forEach(t),W2o=i(W),o_=n(W,"LI",{});var HEe=s(o_);Lae=n(HEe,"STRONG",{});var gGr=s(Lae);H2o=r(gGr,"prophetnet"),gGr.forEach(t),U2o=r(HEe," \u2014 "),gI=n(HEe,"A",{href:!0});var hGr=s(gI);J2o=r(hGr,"ProphetNetForCausalLM"),hGr.forEach(t),Y2o=r(HEe," (ProphetNet model)"),HEe.forEach(t),K2o=i(W),r_=n(W,"LI",{});var UEe=s(r_);xae=n(UEe,"STRONG",{});var pGr=s(xae);Z2o=r(pGr,"qdqbert"),pGr.forEach(t),e1o=r(UEe," \u2014 "),$ae=n(UEe,"CODE",{});var uGr=s($ae);o1o=r(uGr,"QDQBertLMHeadModel"),uGr.forEach(t),r1o=r(UEe," (QDQBert model)"),UEe.forEach(t),t1o=i(W),t_=n(W,"LI",{});var JEe=s(t_);kae=n(JEe,"STRONG",{});var _Gr=s(kae);a1o=r(_Gr,"reformer"),_Gr.forEach(t),n1o=r(JEe," \u2014 "),hI=n(JEe,"A",{href:!0});var bGr=s(hI);s1o=r(bGr,"ReformerModelWithLMHead"),bGr.forEach(t),l1o=r(JEe," (Reformer model)"),JEe.forEach(t),i1o=i(W),a_=n(W,"LI",{});var YEe=s(a_);Sae=n(YEe,"STRONG",{});var FGr=s(Sae);d1o=r(FGr,"rembert"),FGr.forEach(t),c1o=r(YEe," \u2014 "),pI=n(YEe,"A",{href:!0});var vGr=s(pI);f1o=r(vGr,"RemBertForCausalLM"),vGr.forEach(t),m1o=r(YEe," (RemBERT model)"),YEe.forEach(t),g1o=i(W),n_=n(W,"LI",{});var KEe=s(n_);Rae=n(KEe,"STRONG",{});var TGr=s(Rae);h1o=r(TGr,"roberta"),TGr.forEach(t),p1o=r(KEe," \u2014 "),uI=n(KEe,"A",{href:!0});var MGr=s(uI);u1o=r(MGr,"RobertaForCausalLM"),MGr.forEach(t),_1o=r(KEe," (RoBERTa model)"),KEe.forEach(t),b1o=i(W),s_=n(W,"LI",{});var ZEe=s(s_);Bae=n(ZEe,"STRONG",{});var EGr=s(Bae);F1o=r(EGr,"roformer"),EGr.forEach(t),v1o=r(ZEe," \u2014 "),_I=n(ZEe,"A",{href:!0});var CGr=s(_I);T1o=r(CGr,"RoFormerForCausalLM"),CGr.forEach(t),M1o=r(ZEe," (RoFormer model)"),ZEe.forEach(t),E1o=i(W),l_=n(W,"LI",{});var eCe=s(l_);Pae=n(eCe,"STRONG",{});var wGr=s(Pae);C1o=r(wGr,"speech_to_text_2"),wGr.forEach(t),w1o=r(eCe," \u2014 "),bI=n(eCe,"A",{href:!0});var AGr=s(bI);A1o=r(AGr,"Speech2Text2ForCausalLM"),AGr.forEach(t),y1o=r(eCe," (Speech2Text2 model)"),eCe.forEach(t),L1o=i(W),i_=n(W,"LI",{});var oCe=s(i_);Iae=n(oCe,"STRONG",{});var yGr=s(Iae);x1o=r(yGr,"transfo-xl"),yGr.forEach(t),$1o=r(oCe," \u2014 "),FI=n(oCe,"A",{href:!0});var LGr=s(FI);k1o=r(LGr,"TransfoXLLMHeadModel"),LGr.forEach(t),S1o=r(oCe," (Transformer-XL model)"),oCe.forEach(t),R1o=i(W),d_=n(W,"LI",{});var rCe=s(d_);qae=n(rCe,"STRONG",{});var xGr=s(qae);B1o=r(xGr,"trocr"),xGr.forEach(t),P1o=r(rCe," \u2014 "),vI=n(rCe,"A",{href:!0});var $Gr=s(vI);I1o=r($Gr,"TrOCRForCausalLM"),$Gr.forEach(t),q1o=r(rCe," (TrOCR model)"),rCe.forEach(t),N1o=i(W),c_=n(W,"LI",{});var tCe=s(c_);Nae=n(tCe,"STRONG",{});var kGr=s(Nae);j1o=r(kGr,"xglm"),kGr.forEach(t),D1o=r(tCe," \u2014 "),TI=n(tCe,"A",{href:!0});var SGr=s(TI);G1o=r(SGr,"XGLMForCausalLM"),SGr.forEach(t),O1o=r(tCe," (XGLM model)"),tCe.forEach(t),V1o=i(W),f_=n(W,"LI",{});var aCe=s(f_);jae=n(aCe,"STRONG",{});var RGr=s(jae);X1o=r(RGr,"xlm"),RGr.forEach(t),z1o=r(aCe," \u2014 "),MI=n(aCe,"A",{href:!0});var BGr=s(MI);Q1o=r(BGr,"XLMWithLMHeadModel"),BGr.forEach(t),W1o=r(aCe," (XLM model)"),aCe.forEach(t),H1o=i(W),m_=n(W,"LI",{});var nCe=s(m_);Dae=n(nCe,"STRONG",{});var PGr=s(Dae);U1o=r(PGr,"xlm-prophetnet"),PGr.forEach(t),J1o=r(nCe," \u2014 "),EI=n(nCe,"A",{href:!0});var IGr=s(EI);Y1o=r(IGr,"XLMProphetNetForCausalLM"),IGr.forEach(t),K1o=r(nCe," (XLMProphetNet model)"),nCe.forEach(t),Z1o=i(W),g_=n(W,"LI",{});var sCe=s(g_);Gae=n(sCe,"STRONG",{});var qGr=s(Gae);ebo=r(qGr,"xlm-roberta"),qGr.forEach(t),obo=r(sCe," \u2014 "),CI=n(sCe,"A",{href:!0});var NGr=s(CI);rbo=r(NGr,"XLMRobertaForCausalLM"),NGr.forEach(t),tbo=r(sCe," (XLM-RoBERTa model)"),sCe.forEach(t),abo=i(W),h_=n(W,"LI",{});var lCe=s(h_);Oae=n(lCe,"STRONG",{});var jGr=s(Oae);nbo=r(jGr,"xlm-roberta-xl"),jGr.forEach(t),sbo=r(lCe," \u2014 "),wI=n(lCe,"A",{href:!0});var DGr=s(wI);lbo=r(DGr,"XLMRobertaXLForCausalLM"),DGr.forEach(t),ibo=r(lCe," (XLM-RoBERTa-XL model)"),lCe.forEach(t),dbo=i(W),p_=n(W,"LI",{});var iCe=s(p_);Vae=n(iCe,"STRONG",{});var GGr=s(Vae);cbo=r(GGr,"xlnet"),GGr.forEach(t),fbo=r(iCe," \u2014 "),AI=n(iCe,"A",{href:!0});var OGr=s(AI);mbo=r(OGr,"XLNetLMHeadModel"),OGr.forEach(t),gbo=r(iCe," (XLNet model)"),iCe.forEach(t),W.forEach(t),hbo=i(Yt),u_=n(Yt,"P",{});var dCe=s(u_);pbo=r(dCe,"The model is set in evaluation mode by default using "),Xae=n(dCe,"CODE",{});var VGr=s(Xae);ubo=r(VGr,"model.eval()"),VGr.forEach(t),_bo=r(dCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zae=n(dCe,"CODE",{});var XGr=s(zae);bbo=r(XGr,"model.train()"),XGr.forEach(t),dCe.forEach(t),Fbo=i(Yt),T(__.$$.fragment,Yt),Yt.forEach(t),ys.forEach(t),W$e=i(f),pi=n(f,"H2",{class:!0});var USe=s(pi);b_=n(USe,"A",{id:!0,class:!0,href:!0});var zGr=s(b_);Qae=n(zGr,"SPAN",{});var QGr=s(Qae);T(hA.$$.fragment,QGr),QGr.forEach(t),zGr.forEach(t),vbo=i(USe),Wae=n(USe,"SPAN",{});var WGr=s(Wae);Tbo=r(WGr,"AutoModelForMaskedLM"),WGr.forEach(t),USe.forEach(t),H$e=i(f),xo=n(f,"DIV",{class:!0});var Ls=s(xo);T(pA.$$.fragment,Ls),Mbo=i(Ls),ui=n(Ls,"P",{});var nU=s(ui);Ebo=r(nU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),yI=n(nU,"A",{href:!0});var HGr=s(yI);Cbo=r(HGr,"from_pretrained()"),HGr.forEach(t),wbo=r(nU," class method or the "),LI=n(nU,"A",{href:!0});var UGr=s(LI);Abo=r(UGr,"from_config()"),UGr.forEach(t),ybo=r(nU,` class
method.`),nU.forEach(t),Lbo=i(Ls),uA=n(Ls,"P",{});var JSe=s(uA);xbo=r(JSe,"This class cannot be instantiated directly using "),Hae=n(JSe,"CODE",{});var JGr=s(Hae);$bo=r(JGr,"__init__()"),JGr.forEach(t),kbo=r(JSe," (throws an error)."),JSe.forEach(t),Sbo=i(Ls),ot=n(Ls,"DIV",{class:!0});var jC=s(ot);T(_A.$$.fragment,jC),Rbo=i(jC),Uae=n(jC,"P",{});var YGr=s(Uae);Bbo=r(YGr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),YGr.forEach(t),Pbo=i(jC),_i=n(jC,"P",{});var sU=s(_i);Ibo=r(sU,`Note:
Loading a model from its configuration file does `),Jae=n(sU,"STRONG",{});var KGr=s(Jae);qbo=r(KGr,"not"),KGr.forEach(t),Nbo=r(sU,` load the model weights. It only affects the
model\u2019s configuration. Use `),xI=n(sU,"A",{href:!0});var ZGr=s(xI);jbo=r(ZGr,"from_pretrained()"),ZGr.forEach(t),Dbo=r(sU," to load the model weights."),sU.forEach(t),Gbo=i(jC),T(F_.$$.fragment,jC),jC.forEach(t),Obo=i(Ls),He=n(Ls,"DIV",{class:!0});var Kt=s(He);T(bA.$$.fragment,Kt),Vbo=i(Kt),Yae=n(Kt,"P",{});var eOr=s(Yae);Xbo=r(eOr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),eOr.forEach(t),zbo=i(Kt),wa=n(Kt,"P",{});var DC=s(wa);Qbo=r(DC,"The model class to instantiate is selected based on the "),Kae=n(DC,"CODE",{});var oOr=s(Kae);Wbo=r(oOr,"model_type"),oOr.forEach(t),Hbo=r(DC,` property of the config object (either
passed as an argument or loaded from `),Zae=n(DC,"CODE",{});var rOr=s(Zae);Ubo=r(rOr,"pretrained_model_name_or_path"),rOr.forEach(t),Jbo=r(DC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ene=n(DC,"CODE",{});var tOr=s(ene);Ybo=r(tOr,"pretrained_model_name_or_path"),tOr.forEach(t),Kbo=r(DC,":"),DC.forEach(t),Zbo=i(Kt),Q=n(Kt,"UL",{});var H=s(Q);v_=n(H,"LI",{});var cCe=s(v_);one=n(cCe,"STRONG",{});var aOr=s(one);e5o=r(aOr,"albert"),aOr.forEach(t),o5o=r(cCe," \u2014 "),$I=n(cCe,"A",{href:!0});var nOr=s($I);r5o=r(nOr,"AlbertForMaskedLM"),nOr.forEach(t),t5o=r(cCe," (ALBERT model)"),cCe.forEach(t),a5o=i(H),T_=n(H,"LI",{});var fCe=s(T_);rne=n(fCe,"STRONG",{});var sOr=s(rne);n5o=r(sOr,"bart"),sOr.forEach(t),s5o=r(fCe," \u2014 "),kI=n(fCe,"A",{href:!0});var lOr=s(kI);l5o=r(lOr,"BartForConditionalGeneration"),lOr.forEach(t),i5o=r(fCe," (BART model)"),fCe.forEach(t),d5o=i(H),M_=n(H,"LI",{});var mCe=s(M_);tne=n(mCe,"STRONG",{});var iOr=s(tne);c5o=r(iOr,"bert"),iOr.forEach(t),f5o=r(mCe," \u2014 "),SI=n(mCe,"A",{href:!0});var dOr=s(SI);m5o=r(dOr,"BertForMaskedLM"),dOr.forEach(t),g5o=r(mCe," (BERT model)"),mCe.forEach(t),h5o=i(H),E_=n(H,"LI",{});var gCe=s(E_);ane=n(gCe,"STRONG",{});var cOr=s(ane);p5o=r(cOr,"big_bird"),cOr.forEach(t),u5o=r(gCe," \u2014 "),RI=n(gCe,"A",{href:!0});var fOr=s(RI);_5o=r(fOr,"BigBirdForMaskedLM"),fOr.forEach(t),b5o=r(gCe," (BigBird model)"),gCe.forEach(t),F5o=i(H),C_=n(H,"LI",{});var hCe=s(C_);nne=n(hCe,"STRONG",{});var mOr=s(nne);v5o=r(mOr,"camembert"),mOr.forEach(t),T5o=r(hCe," \u2014 "),BI=n(hCe,"A",{href:!0});var gOr=s(BI);M5o=r(gOr,"CamembertForMaskedLM"),gOr.forEach(t),E5o=r(hCe," (CamemBERT model)"),hCe.forEach(t),C5o=i(H),w_=n(H,"LI",{});var pCe=s(w_);sne=n(pCe,"STRONG",{});var hOr=s(sne);w5o=r(hOr,"convbert"),hOr.forEach(t),A5o=r(pCe," \u2014 "),PI=n(pCe,"A",{href:!0});var pOr=s(PI);y5o=r(pOr,"ConvBertForMaskedLM"),pOr.forEach(t),L5o=r(pCe," (ConvBERT model)"),pCe.forEach(t),x5o=i(H),A_=n(H,"LI",{});var uCe=s(A_);lne=n(uCe,"STRONG",{});var uOr=s(lne);$5o=r(uOr,"data2vec-text"),uOr.forEach(t),k5o=r(uCe," \u2014 "),II=n(uCe,"A",{href:!0});var _Or=s(II);S5o=r(_Or,"Data2VecTextForMaskedLM"),_Or.forEach(t),R5o=r(uCe," (Data2VecText model)"),uCe.forEach(t),B5o=i(H),y_=n(H,"LI",{});var _Ce=s(y_);ine=n(_Ce,"STRONG",{});var bOr=s(ine);P5o=r(bOr,"deberta"),bOr.forEach(t),I5o=r(_Ce," \u2014 "),qI=n(_Ce,"A",{href:!0});var FOr=s(qI);q5o=r(FOr,"DebertaForMaskedLM"),FOr.forEach(t),N5o=r(_Ce," (DeBERTa model)"),_Ce.forEach(t),j5o=i(H),L_=n(H,"LI",{});var bCe=s(L_);dne=n(bCe,"STRONG",{});var vOr=s(dne);D5o=r(vOr,"deberta-v2"),vOr.forEach(t),G5o=r(bCe," \u2014 "),NI=n(bCe,"A",{href:!0});var TOr=s(NI);O5o=r(TOr,"DebertaV2ForMaskedLM"),TOr.forEach(t),V5o=r(bCe," (DeBERTa-v2 model)"),bCe.forEach(t),X5o=i(H),x_=n(H,"LI",{});var FCe=s(x_);cne=n(FCe,"STRONG",{});var MOr=s(cne);z5o=r(MOr,"distilbert"),MOr.forEach(t),Q5o=r(FCe," \u2014 "),jI=n(FCe,"A",{href:!0});var EOr=s(jI);W5o=r(EOr,"DistilBertForMaskedLM"),EOr.forEach(t),H5o=r(FCe," (DistilBERT model)"),FCe.forEach(t),U5o=i(H),$_=n(H,"LI",{});var vCe=s($_);fne=n(vCe,"STRONG",{});var COr=s(fne);J5o=r(COr,"electra"),COr.forEach(t),Y5o=r(vCe," \u2014 "),DI=n(vCe,"A",{href:!0});var wOr=s(DI);K5o=r(wOr,"ElectraForMaskedLM"),wOr.forEach(t),Z5o=r(vCe," (ELECTRA model)"),vCe.forEach(t),eFo=i(H),k_=n(H,"LI",{});var TCe=s(k_);mne=n(TCe,"STRONG",{});var AOr=s(mne);oFo=r(AOr,"flaubert"),AOr.forEach(t),rFo=r(TCe," \u2014 "),GI=n(TCe,"A",{href:!0});var yOr=s(GI);tFo=r(yOr,"FlaubertWithLMHeadModel"),yOr.forEach(t),aFo=r(TCe," (FlauBERT model)"),TCe.forEach(t),nFo=i(H),S_=n(H,"LI",{});var MCe=s(S_);gne=n(MCe,"STRONG",{});var LOr=s(gne);sFo=r(LOr,"fnet"),LOr.forEach(t),lFo=r(MCe," \u2014 "),OI=n(MCe,"A",{href:!0});var xOr=s(OI);iFo=r(xOr,"FNetForMaskedLM"),xOr.forEach(t),dFo=r(MCe," (FNet model)"),MCe.forEach(t),cFo=i(H),R_=n(H,"LI",{});var ECe=s(R_);hne=n(ECe,"STRONG",{});var $Or=s(hne);fFo=r($Or,"funnel"),$Or.forEach(t),mFo=r(ECe," \u2014 "),VI=n(ECe,"A",{href:!0});var kOr=s(VI);gFo=r(kOr,"FunnelForMaskedLM"),kOr.forEach(t),hFo=r(ECe," (Funnel Transformer model)"),ECe.forEach(t),pFo=i(H),B_=n(H,"LI",{});var CCe=s(B_);pne=n(CCe,"STRONG",{});var SOr=s(pne);uFo=r(SOr,"ibert"),SOr.forEach(t),_Fo=r(CCe," \u2014 "),XI=n(CCe,"A",{href:!0});var ROr=s(XI);bFo=r(ROr,"IBertForMaskedLM"),ROr.forEach(t),FFo=r(CCe," (I-BERT model)"),CCe.forEach(t),vFo=i(H),P_=n(H,"LI",{});var wCe=s(P_);une=n(wCe,"STRONG",{});var BOr=s(une);TFo=r(BOr,"layoutlm"),BOr.forEach(t),MFo=r(wCe," \u2014 "),zI=n(wCe,"A",{href:!0});var POr=s(zI);EFo=r(POr,"LayoutLMForMaskedLM"),POr.forEach(t),CFo=r(wCe," (LayoutLM model)"),wCe.forEach(t),wFo=i(H),I_=n(H,"LI",{});var ACe=s(I_);_ne=n(ACe,"STRONG",{});var IOr=s(_ne);AFo=r(IOr,"longformer"),IOr.forEach(t),yFo=r(ACe," \u2014 "),QI=n(ACe,"A",{href:!0});var qOr=s(QI);LFo=r(qOr,"LongformerForMaskedLM"),qOr.forEach(t),xFo=r(ACe," (Longformer model)"),ACe.forEach(t),$Fo=i(H),q_=n(H,"LI",{});var yCe=s(q_);bne=n(yCe,"STRONG",{});var NOr=s(bne);kFo=r(NOr,"mbart"),NOr.forEach(t),SFo=r(yCe," \u2014 "),WI=n(yCe,"A",{href:!0});var jOr=s(WI);RFo=r(jOr,"MBartForConditionalGeneration"),jOr.forEach(t),BFo=r(yCe," (mBART model)"),yCe.forEach(t),PFo=i(H),N_=n(H,"LI",{});var LCe=s(N_);Fne=n(LCe,"STRONG",{});var DOr=s(Fne);IFo=r(DOr,"megatron-bert"),DOr.forEach(t),qFo=r(LCe," \u2014 "),HI=n(LCe,"A",{href:!0});var GOr=s(HI);NFo=r(GOr,"MegatronBertForMaskedLM"),GOr.forEach(t),jFo=r(LCe," (MegatronBert model)"),LCe.forEach(t),DFo=i(H),j_=n(H,"LI",{});var xCe=s(j_);vne=n(xCe,"STRONG",{});var OOr=s(vne);GFo=r(OOr,"mobilebert"),OOr.forEach(t),OFo=r(xCe," \u2014 "),UI=n(xCe,"A",{href:!0});var VOr=s(UI);VFo=r(VOr,"MobileBertForMaskedLM"),VOr.forEach(t),XFo=r(xCe," (MobileBERT model)"),xCe.forEach(t),zFo=i(H),D_=n(H,"LI",{});var $Ce=s(D_);Tne=n($Ce,"STRONG",{});var XOr=s(Tne);QFo=r(XOr,"mpnet"),XOr.forEach(t),WFo=r($Ce," \u2014 "),JI=n($Ce,"A",{href:!0});var zOr=s(JI);HFo=r(zOr,"MPNetForMaskedLM"),zOr.forEach(t),UFo=r($Ce," (MPNet model)"),$Ce.forEach(t),JFo=i(H),G_=n(H,"LI",{});var kCe=s(G_);Mne=n(kCe,"STRONG",{});var QOr=s(Mne);YFo=r(QOr,"nystromformer"),QOr.forEach(t),KFo=r(kCe," \u2014 "),YI=n(kCe,"A",{href:!0});var WOr=s(YI);ZFo=r(WOr,"NystromformerForMaskedLM"),WOr.forEach(t),evo=r(kCe," (Nystromformer model)"),kCe.forEach(t),ovo=i(H),O_=n(H,"LI",{});var SCe=s(O_);Ene=n(SCe,"STRONG",{});var HOr=s(Ene);rvo=r(HOr,"perceiver"),HOr.forEach(t),tvo=r(SCe," \u2014 "),KI=n(SCe,"A",{href:!0});var UOr=s(KI);avo=r(UOr,"PerceiverForMaskedLM"),UOr.forEach(t),nvo=r(SCe," (Perceiver model)"),SCe.forEach(t),svo=i(H),V_=n(H,"LI",{});var RCe=s(V_);Cne=n(RCe,"STRONG",{});var JOr=s(Cne);lvo=r(JOr,"qdqbert"),JOr.forEach(t),ivo=r(RCe," \u2014 "),wne=n(RCe,"CODE",{});var YOr=s(wne);dvo=r(YOr,"QDQBertForMaskedLM"),YOr.forEach(t),cvo=r(RCe," (QDQBert model)"),RCe.forEach(t),fvo=i(H),X_=n(H,"LI",{});var BCe=s(X_);Ane=n(BCe,"STRONG",{});var KOr=s(Ane);mvo=r(KOr,"reformer"),KOr.forEach(t),gvo=r(BCe," \u2014 "),ZI=n(BCe,"A",{href:!0});var ZOr=s(ZI);hvo=r(ZOr,"ReformerForMaskedLM"),ZOr.forEach(t),pvo=r(BCe," (Reformer model)"),BCe.forEach(t),uvo=i(H),z_=n(H,"LI",{});var PCe=s(z_);yne=n(PCe,"STRONG",{});var eVr=s(yne);_vo=r(eVr,"rembert"),eVr.forEach(t),bvo=r(PCe," \u2014 "),eq=n(PCe,"A",{href:!0});var oVr=s(eq);Fvo=r(oVr,"RemBertForMaskedLM"),oVr.forEach(t),vvo=r(PCe," (RemBERT model)"),PCe.forEach(t),Tvo=i(H),Q_=n(H,"LI",{});var ICe=s(Q_);Lne=n(ICe,"STRONG",{});var rVr=s(Lne);Mvo=r(rVr,"roberta"),rVr.forEach(t),Evo=r(ICe," \u2014 "),oq=n(ICe,"A",{href:!0});var tVr=s(oq);Cvo=r(tVr,"RobertaForMaskedLM"),tVr.forEach(t),wvo=r(ICe," (RoBERTa model)"),ICe.forEach(t),Avo=i(H),W_=n(H,"LI",{});var qCe=s(W_);xne=n(qCe,"STRONG",{});var aVr=s(xne);yvo=r(aVr,"roformer"),aVr.forEach(t),Lvo=r(qCe," \u2014 "),rq=n(qCe,"A",{href:!0});var nVr=s(rq);xvo=r(nVr,"RoFormerForMaskedLM"),nVr.forEach(t),$vo=r(qCe," (RoFormer model)"),qCe.forEach(t),kvo=i(H),H_=n(H,"LI",{});var NCe=s(H_);$ne=n(NCe,"STRONG",{});var sVr=s($ne);Svo=r(sVr,"squeezebert"),sVr.forEach(t),Rvo=r(NCe," \u2014 "),tq=n(NCe,"A",{href:!0});var lVr=s(tq);Bvo=r(lVr,"SqueezeBertForMaskedLM"),lVr.forEach(t),Pvo=r(NCe," (SqueezeBERT model)"),NCe.forEach(t),Ivo=i(H),U_=n(H,"LI",{});var jCe=s(U_);kne=n(jCe,"STRONG",{});var iVr=s(kne);qvo=r(iVr,"tapas"),iVr.forEach(t),Nvo=r(jCe," \u2014 "),aq=n(jCe,"A",{href:!0});var dVr=s(aq);jvo=r(dVr,"TapasForMaskedLM"),dVr.forEach(t),Dvo=r(jCe," (TAPAS model)"),jCe.forEach(t),Gvo=i(H),J_=n(H,"LI",{});var DCe=s(J_);Sne=n(DCe,"STRONG",{});var cVr=s(Sne);Ovo=r(cVr,"wav2vec2"),cVr.forEach(t),Vvo=r(DCe," \u2014 "),Rne=n(DCe,"CODE",{});var fVr=s(Rne);Xvo=r(fVr,"Wav2Vec2ForMaskedLM"),fVr.forEach(t),zvo=r(DCe," (Wav2Vec2 model)"),DCe.forEach(t),Qvo=i(H),Y_=n(H,"LI",{});var GCe=s(Y_);Bne=n(GCe,"STRONG",{});var mVr=s(Bne);Wvo=r(mVr,"xlm"),mVr.forEach(t),Hvo=r(GCe," \u2014 "),nq=n(GCe,"A",{href:!0});var gVr=s(nq);Uvo=r(gVr,"XLMWithLMHeadModel"),gVr.forEach(t),Jvo=r(GCe," (XLM model)"),GCe.forEach(t),Yvo=i(H),K_=n(H,"LI",{});var OCe=s(K_);Pne=n(OCe,"STRONG",{});var hVr=s(Pne);Kvo=r(hVr,"xlm-roberta"),hVr.forEach(t),Zvo=r(OCe," \u2014 "),sq=n(OCe,"A",{href:!0});var pVr=s(sq);e6o=r(pVr,"XLMRobertaForMaskedLM"),pVr.forEach(t),o6o=r(OCe," (XLM-RoBERTa model)"),OCe.forEach(t),r6o=i(H),Z_=n(H,"LI",{});var VCe=s(Z_);Ine=n(VCe,"STRONG",{});var uVr=s(Ine);t6o=r(uVr,"xlm-roberta-xl"),uVr.forEach(t),a6o=r(VCe," \u2014 "),lq=n(VCe,"A",{href:!0});var _Vr=s(lq);n6o=r(_Vr,"XLMRobertaXLForMaskedLM"),_Vr.forEach(t),s6o=r(VCe," (XLM-RoBERTa-XL model)"),VCe.forEach(t),l6o=i(H),e2=n(H,"LI",{});var XCe=s(e2);qne=n(XCe,"STRONG",{});var bVr=s(qne);i6o=r(bVr,"yoso"),bVr.forEach(t),d6o=r(XCe," \u2014 "),iq=n(XCe,"A",{href:!0});var FVr=s(iq);c6o=r(FVr,"YosoForMaskedLM"),FVr.forEach(t),f6o=r(XCe," (YOSO model)"),XCe.forEach(t),H.forEach(t),m6o=i(Kt),o2=n(Kt,"P",{});var zCe=s(o2);g6o=r(zCe,"The model is set in evaluation mode by default using "),Nne=n(zCe,"CODE",{});var vVr=s(Nne);h6o=r(vVr,"model.eval()"),vVr.forEach(t),p6o=r(zCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jne=n(zCe,"CODE",{});var TVr=s(jne);u6o=r(TVr,"model.train()"),TVr.forEach(t),zCe.forEach(t),_6o=i(Kt),T(r2.$$.fragment,Kt),Kt.forEach(t),Ls.forEach(t),U$e=i(f),bi=n(f,"H2",{class:!0});var YSe=s(bi);t2=n(YSe,"A",{id:!0,class:!0,href:!0});var MVr=s(t2);Dne=n(MVr,"SPAN",{});var EVr=s(Dne);T(FA.$$.fragment,EVr),EVr.forEach(t),MVr.forEach(t),b6o=i(YSe),Gne=n(YSe,"SPAN",{});var CVr=s(Gne);F6o=r(CVr,"AutoModelForSeq2SeqLM"),CVr.forEach(t),YSe.forEach(t),J$e=i(f),$o=n(f,"DIV",{class:!0});var xs=s($o);T(vA.$$.fragment,xs),v6o=i(xs),Fi=n(xs,"P",{});var lU=s(Fi);T6o=r(lU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),dq=n(lU,"A",{href:!0});var wVr=s(dq);M6o=r(wVr,"from_pretrained()"),wVr.forEach(t),E6o=r(lU," class method or the "),cq=n(lU,"A",{href:!0});var AVr=s(cq);C6o=r(AVr,"from_config()"),AVr.forEach(t),w6o=r(lU,` class
method.`),lU.forEach(t),A6o=i(xs),TA=n(xs,"P",{});var KSe=s(TA);y6o=r(KSe,"This class cannot be instantiated directly using "),One=n(KSe,"CODE",{});var yVr=s(One);L6o=r(yVr,"__init__()"),yVr.forEach(t),x6o=r(KSe," (throws an error)."),KSe.forEach(t),$6o=i(xs),rt=n(xs,"DIV",{class:!0});var GC=s(rt);T(MA.$$.fragment,GC),k6o=i(GC),Vne=n(GC,"P",{});var LVr=s(Vne);S6o=r(LVr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),LVr.forEach(t),R6o=i(GC),vi=n(GC,"P",{});var iU=s(vi);B6o=r(iU,`Note:
Loading a model from its configuration file does `),Xne=n(iU,"STRONG",{});var xVr=s(Xne);P6o=r(xVr,"not"),xVr.forEach(t),I6o=r(iU,` load the model weights. It only affects the
model\u2019s configuration. Use `),fq=n(iU,"A",{href:!0});var $Vr=s(fq);q6o=r($Vr,"from_pretrained()"),$Vr.forEach(t),N6o=r(iU," to load the model weights."),iU.forEach(t),j6o=i(GC),T(a2.$$.fragment,GC),GC.forEach(t),D6o=i(xs),Ue=n(xs,"DIV",{class:!0});var Zt=s(Ue);T(EA.$$.fragment,Zt),G6o=i(Zt),zne=n(Zt,"P",{});var kVr=s(zne);O6o=r(kVr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),kVr.forEach(t),V6o=i(Zt),Aa=n(Zt,"P",{});var OC=s(Aa);X6o=r(OC,"The model class to instantiate is selected based on the "),Qne=n(OC,"CODE",{});var SVr=s(Qne);z6o=r(SVr,"model_type"),SVr.forEach(t),Q6o=r(OC,` property of the config object (either
passed as an argument or loaded from `),Wne=n(OC,"CODE",{});var RVr=s(Wne);W6o=r(RVr,"pretrained_model_name_or_path"),RVr.forEach(t),H6o=r(OC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hne=n(OC,"CODE",{});var BVr=s(Hne);U6o=r(BVr,"pretrained_model_name_or_path"),BVr.forEach(t),J6o=r(OC,":"),OC.forEach(t),Y6o=i(Zt),pe=n(Zt,"UL",{});var _e=s(pe);n2=n(_e,"LI",{});var QCe=s(n2);Une=n(QCe,"STRONG",{});var PVr=s(Une);K6o=r(PVr,"bart"),PVr.forEach(t),Z6o=r(QCe," \u2014 "),mq=n(QCe,"A",{href:!0});var IVr=s(mq);eTo=r(IVr,"BartForConditionalGeneration"),IVr.forEach(t),oTo=r(QCe," (BART model)"),QCe.forEach(t),rTo=i(_e),s2=n(_e,"LI",{});var WCe=s(s2);Jne=n(WCe,"STRONG",{});var qVr=s(Jne);tTo=r(qVr,"bigbird_pegasus"),qVr.forEach(t),aTo=r(WCe," \u2014 "),gq=n(WCe,"A",{href:!0});var NVr=s(gq);nTo=r(NVr,"BigBirdPegasusForConditionalGeneration"),NVr.forEach(t),sTo=r(WCe," (BigBirdPegasus model)"),WCe.forEach(t),lTo=i(_e),l2=n(_e,"LI",{});var HCe=s(l2);Yne=n(HCe,"STRONG",{});var jVr=s(Yne);iTo=r(jVr,"blenderbot"),jVr.forEach(t),dTo=r(HCe," \u2014 "),hq=n(HCe,"A",{href:!0});var DVr=s(hq);cTo=r(DVr,"BlenderbotForConditionalGeneration"),DVr.forEach(t),fTo=r(HCe," (Blenderbot model)"),HCe.forEach(t),mTo=i(_e),i2=n(_e,"LI",{});var UCe=s(i2);Kne=n(UCe,"STRONG",{});var GVr=s(Kne);gTo=r(GVr,"blenderbot-small"),GVr.forEach(t),hTo=r(UCe," \u2014 "),pq=n(UCe,"A",{href:!0});var OVr=s(pq);pTo=r(OVr,"BlenderbotSmallForConditionalGeneration"),OVr.forEach(t),uTo=r(UCe," (BlenderbotSmall model)"),UCe.forEach(t),_To=i(_e),d2=n(_e,"LI",{});var JCe=s(d2);Zne=n(JCe,"STRONG",{});var VVr=s(Zne);bTo=r(VVr,"encoder-decoder"),VVr.forEach(t),FTo=r(JCe," \u2014 "),uq=n(JCe,"A",{href:!0});var XVr=s(uq);vTo=r(XVr,"EncoderDecoderModel"),XVr.forEach(t),TTo=r(JCe," (Encoder decoder model)"),JCe.forEach(t),MTo=i(_e),c2=n(_e,"LI",{});var YCe=s(c2);ese=n(YCe,"STRONG",{});var zVr=s(ese);ETo=r(zVr,"fsmt"),zVr.forEach(t),CTo=r(YCe," \u2014 "),_q=n(YCe,"A",{href:!0});var QVr=s(_q);wTo=r(QVr,"FSMTForConditionalGeneration"),QVr.forEach(t),ATo=r(YCe," (FairSeq Machine-Translation model)"),YCe.forEach(t),yTo=i(_e),f2=n(_e,"LI",{});var KCe=s(f2);ose=n(KCe,"STRONG",{});var WVr=s(ose);LTo=r(WVr,"led"),WVr.forEach(t),xTo=r(KCe," \u2014 "),bq=n(KCe,"A",{href:!0});var HVr=s(bq);$To=r(HVr,"LEDForConditionalGeneration"),HVr.forEach(t),kTo=r(KCe," (LED model)"),KCe.forEach(t),STo=i(_e),m2=n(_e,"LI",{});var ZCe=s(m2);rse=n(ZCe,"STRONG",{});var UVr=s(rse);RTo=r(UVr,"m2m_100"),UVr.forEach(t),BTo=r(ZCe," \u2014 "),Fq=n(ZCe,"A",{href:!0});var JVr=s(Fq);PTo=r(JVr,"M2M100ForConditionalGeneration"),JVr.forEach(t),ITo=r(ZCe," (M2M100 model)"),ZCe.forEach(t),qTo=i(_e),g2=n(_e,"LI",{});var e3e=s(g2);tse=n(e3e,"STRONG",{});var YVr=s(tse);NTo=r(YVr,"marian"),YVr.forEach(t),jTo=r(e3e," \u2014 "),vq=n(e3e,"A",{href:!0});var KVr=s(vq);DTo=r(KVr,"MarianMTModel"),KVr.forEach(t),GTo=r(e3e," (Marian model)"),e3e.forEach(t),OTo=i(_e),h2=n(_e,"LI",{});var o3e=s(h2);ase=n(o3e,"STRONG",{});var ZVr=s(ase);VTo=r(ZVr,"mbart"),ZVr.forEach(t),XTo=r(o3e," \u2014 "),Tq=n(o3e,"A",{href:!0});var eXr=s(Tq);zTo=r(eXr,"MBartForConditionalGeneration"),eXr.forEach(t),QTo=r(o3e," (mBART model)"),o3e.forEach(t),WTo=i(_e),p2=n(_e,"LI",{});var r3e=s(p2);nse=n(r3e,"STRONG",{});var oXr=s(nse);HTo=r(oXr,"mt5"),oXr.forEach(t),UTo=r(r3e," \u2014 "),Mq=n(r3e,"A",{href:!0});var rXr=s(Mq);JTo=r(rXr,"MT5ForConditionalGeneration"),rXr.forEach(t),YTo=r(r3e," (mT5 model)"),r3e.forEach(t),KTo=i(_e),u2=n(_e,"LI",{});var t3e=s(u2);sse=n(t3e,"STRONG",{});var tXr=s(sse);ZTo=r(tXr,"pegasus"),tXr.forEach(t),eMo=r(t3e," \u2014 "),Eq=n(t3e,"A",{href:!0});var aXr=s(Eq);oMo=r(aXr,"PegasusForConditionalGeneration"),aXr.forEach(t),rMo=r(t3e," (Pegasus model)"),t3e.forEach(t),tMo=i(_e),_2=n(_e,"LI",{});var a3e=s(_2);lse=n(a3e,"STRONG",{});var nXr=s(lse);aMo=r(nXr,"plbart"),nXr.forEach(t),nMo=r(a3e," \u2014 "),Cq=n(a3e,"A",{href:!0});var sXr=s(Cq);sMo=r(sXr,"PLBartForConditionalGeneration"),sXr.forEach(t),lMo=r(a3e," (PLBart model)"),a3e.forEach(t),iMo=i(_e),b2=n(_e,"LI",{});var n3e=s(b2);ise=n(n3e,"STRONG",{});var lXr=s(ise);dMo=r(lXr,"prophetnet"),lXr.forEach(t),cMo=r(n3e," \u2014 "),wq=n(n3e,"A",{href:!0});var iXr=s(wq);fMo=r(iXr,"ProphetNetForConditionalGeneration"),iXr.forEach(t),mMo=r(n3e," (ProphetNet model)"),n3e.forEach(t),gMo=i(_e),F2=n(_e,"LI",{});var s3e=s(F2);dse=n(s3e,"STRONG",{});var dXr=s(dse);hMo=r(dXr,"t5"),dXr.forEach(t),pMo=r(s3e," \u2014 "),Aq=n(s3e,"A",{href:!0});var cXr=s(Aq);uMo=r(cXr,"T5ForConditionalGeneration"),cXr.forEach(t),_Mo=r(s3e," (T5 model)"),s3e.forEach(t),bMo=i(_e),v2=n(_e,"LI",{});var l3e=s(v2);cse=n(l3e,"STRONG",{});var fXr=s(cse);FMo=r(fXr,"xlm-prophetnet"),fXr.forEach(t),vMo=r(l3e," \u2014 "),yq=n(l3e,"A",{href:!0});var mXr=s(yq);TMo=r(mXr,"XLMProphetNetForConditionalGeneration"),mXr.forEach(t),MMo=r(l3e," (XLMProphetNet model)"),l3e.forEach(t),_e.forEach(t),EMo=i(Zt),T2=n(Zt,"P",{});var i3e=s(T2);CMo=r(i3e,"The model is set in evaluation mode by default using "),fse=n(i3e,"CODE",{});var gXr=s(fse);wMo=r(gXr,"model.eval()"),gXr.forEach(t),AMo=r(i3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mse=n(i3e,"CODE",{});var hXr=s(mse);yMo=r(hXr,"model.train()"),hXr.forEach(t),i3e.forEach(t),LMo=i(Zt),T(M2.$$.fragment,Zt),Zt.forEach(t),xs.forEach(t),Y$e=i(f),Ti=n(f,"H2",{class:!0});var ZSe=s(Ti);E2=n(ZSe,"A",{id:!0,class:!0,href:!0});var pXr=s(E2);gse=n(pXr,"SPAN",{});var uXr=s(gse);T(CA.$$.fragment,uXr),uXr.forEach(t),pXr.forEach(t),xMo=i(ZSe),hse=n(ZSe,"SPAN",{});var _Xr=s(hse);$Mo=r(_Xr,"AutoModelForSequenceClassification"),_Xr.forEach(t),ZSe.forEach(t),K$e=i(f),ko=n(f,"DIV",{class:!0});var $s=s(ko);T(wA.$$.fragment,$s),kMo=i($s),Mi=n($s,"P",{});var dU=s(Mi);SMo=r(dU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Lq=n(dU,"A",{href:!0});var bXr=s(Lq);RMo=r(bXr,"from_pretrained()"),bXr.forEach(t),BMo=r(dU," class method or the "),xq=n(dU,"A",{href:!0});var FXr=s(xq);PMo=r(FXr,"from_config()"),FXr.forEach(t),IMo=r(dU,` class
method.`),dU.forEach(t),qMo=i($s),AA=n($s,"P",{});var eRe=s(AA);NMo=r(eRe,"This class cannot be instantiated directly using "),pse=n(eRe,"CODE",{});var vXr=s(pse);jMo=r(vXr,"__init__()"),vXr.forEach(t),DMo=r(eRe," (throws an error)."),eRe.forEach(t),GMo=i($s),tt=n($s,"DIV",{class:!0});var VC=s(tt);T(yA.$$.fragment,VC),OMo=i(VC),use=n(VC,"P",{});var TXr=s(use);VMo=r(TXr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),TXr.forEach(t),XMo=i(VC),Ei=n(VC,"P",{});var cU=s(Ei);zMo=r(cU,`Note:
Loading a model from its configuration file does `),_se=n(cU,"STRONG",{});var MXr=s(_se);QMo=r(MXr,"not"),MXr.forEach(t),WMo=r(cU,` load the model weights. It only affects the
model\u2019s configuration. Use `),$q=n(cU,"A",{href:!0});var EXr=s($q);HMo=r(EXr,"from_pretrained()"),EXr.forEach(t),UMo=r(cU," to load the model weights."),cU.forEach(t),JMo=i(VC),T(C2.$$.fragment,VC),VC.forEach(t),YMo=i($s),Je=n($s,"DIV",{class:!0});var ea=s(Je);T(LA.$$.fragment,ea),KMo=i(ea),bse=n(ea,"P",{});var CXr=s(bse);ZMo=r(CXr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),CXr.forEach(t),e9o=i(ea),ya=n(ea,"P",{});var XC=s(ya);o9o=r(XC,"The model class to instantiate is selected based on the "),Fse=n(XC,"CODE",{});var wXr=s(Fse);r9o=r(wXr,"model_type"),wXr.forEach(t),t9o=r(XC,` property of the config object (either
passed as an argument or loaded from `),vse=n(XC,"CODE",{});var AXr=s(vse);a9o=r(AXr,"pretrained_model_name_or_path"),AXr.forEach(t),n9o=r(XC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tse=n(XC,"CODE",{});var yXr=s(Tse);s9o=r(yXr,"pretrained_model_name_or_path"),yXr.forEach(t),l9o=r(XC,":"),XC.forEach(t),i9o=i(ea),q=n(ea,"UL",{});var N=s(q);w2=n(N,"LI",{});var d3e=s(w2);Mse=n(d3e,"STRONG",{});var LXr=s(Mse);d9o=r(LXr,"albert"),LXr.forEach(t),c9o=r(d3e," \u2014 "),kq=n(d3e,"A",{href:!0});var xXr=s(kq);f9o=r(xXr,"AlbertForSequenceClassification"),xXr.forEach(t),m9o=r(d3e," (ALBERT model)"),d3e.forEach(t),g9o=i(N),A2=n(N,"LI",{});var c3e=s(A2);Ese=n(c3e,"STRONG",{});var $Xr=s(Ese);h9o=r($Xr,"bart"),$Xr.forEach(t),p9o=r(c3e," \u2014 "),Sq=n(c3e,"A",{href:!0});var kXr=s(Sq);u9o=r(kXr,"BartForSequenceClassification"),kXr.forEach(t),_9o=r(c3e," (BART model)"),c3e.forEach(t),b9o=i(N),y2=n(N,"LI",{});var f3e=s(y2);Cse=n(f3e,"STRONG",{});var SXr=s(Cse);F9o=r(SXr,"bert"),SXr.forEach(t),v9o=r(f3e," \u2014 "),Rq=n(f3e,"A",{href:!0});var RXr=s(Rq);T9o=r(RXr,"BertForSequenceClassification"),RXr.forEach(t),M9o=r(f3e," (BERT model)"),f3e.forEach(t),E9o=i(N),L2=n(N,"LI",{});var m3e=s(L2);wse=n(m3e,"STRONG",{});var BXr=s(wse);C9o=r(BXr,"big_bird"),BXr.forEach(t),w9o=r(m3e," \u2014 "),Bq=n(m3e,"A",{href:!0});var PXr=s(Bq);A9o=r(PXr,"BigBirdForSequenceClassification"),PXr.forEach(t),y9o=r(m3e," (BigBird model)"),m3e.forEach(t),L9o=i(N),x2=n(N,"LI",{});var g3e=s(x2);Ase=n(g3e,"STRONG",{});var IXr=s(Ase);x9o=r(IXr,"bigbird_pegasus"),IXr.forEach(t),$9o=r(g3e," \u2014 "),Pq=n(g3e,"A",{href:!0});var qXr=s(Pq);k9o=r(qXr,"BigBirdPegasusForSequenceClassification"),qXr.forEach(t),S9o=r(g3e," (BigBirdPegasus model)"),g3e.forEach(t),R9o=i(N),$2=n(N,"LI",{});var h3e=s($2);yse=n(h3e,"STRONG",{});var NXr=s(yse);B9o=r(NXr,"camembert"),NXr.forEach(t),P9o=r(h3e," \u2014 "),Iq=n(h3e,"A",{href:!0});var jXr=s(Iq);I9o=r(jXr,"CamembertForSequenceClassification"),jXr.forEach(t),q9o=r(h3e," (CamemBERT model)"),h3e.forEach(t),N9o=i(N),k2=n(N,"LI",{});var p3e=s(k2);Lse=n(p3e,"STRONG",{});var DXr=s(Lse);j9o=r(DXr,"canine"),DXr.forEach(t),D9o=r(p3e," \u2014 "),qq=n(p3e,"A",{href:!0});var GXr=s(qq);G9o=r(GXr,"CanineForSequenceClassification"),GXr.forEach(t),O9o=r(p3e," (Canine model)"),p3e.forEach(t),V9o=i(N),S2=n(N,"LI",{});var u3e=s(S2);xse=n(u3e,"STRONG",{});var OXr=s(xse);X9o=r(OXr,"convbert"),OXr.forEach(t),z9o=r(u3e," \u2014 "),Nq=n(u3e,"A",{href:!0});var VXr=s(Nq);Q9o=r(VXr,"ConvBertForSequenceClassification"),VXr.forEach(t),W9o=r(u3e," (ConvBERT model)"),u3e.forEach(t),H9o=i(N),R2=n(N,"LI",{});var _3e=s(R2);$se=n(_3e,"STRONG",{});var XXr=s($se);U9o=r(XXr,"ctrl"),XXr.forEach(t),J9o=r(_3e," \u2014 "),jq=n(_3e,"A",{href:!0});var zXr=s(jq);Y9o=r(zXr,"CTRLForSequenceClassification"),zXr.forEach(t),K9o=r(_3e," (CTRL model)"),_3e.forEach(t),Z9o=i(N),B2=n(N,"LI",{});var b3e=s(B2);kse=n(b3e,"STRONG",{});var QXr=s(kse);e4o=r(QXr,"data2vec-text"),QXr.forEach(t),o4o=r(b3e," \u2014 "),Dq=n(b3e,"A",{href:!0});var WXr=s(Dq);r4o=r(WXr,"Data2VecTextForSequenceClassification"),WXr.forEach(t),t4o=r(b3e," (Data2VecText model)"),b3e.forEach(t),a4o=i(N),P2=n(N,"LI",{});var F3e=s(P2);Sse=n(F3e,"STRONG",{});var HXr=s(Sse);n4o=r(HXr,"deberta"),HXr.forEach(t),s4o=r(F3e," \u2014 "),Gq=n(F3e,"A",{href:!0});var UXr=s(Gq);l4o=r(UXr,"DebertaForSequenceClassification"),UXr.forEach(t),i4o=r(F3e," (DeBERTa model)"),F3e.forEach(t),d4o=i(N),I2=n(N,"LI",{});var v3e=s(I2);Rse=n(v3e,"STRONG",{});var JXr=s(Rse);c4o=r(JXr,"deberta-v2"),JXr.forEach(t),f4o=r(v3e," \u2014 "),Oq=n(v3e,"A",{href:!0});var YXr=s(Oq);m4o=r(YXr,"DebertaV2ForSequenceClassification"),YXr.forEach(t),g4o=r(v3e," (DeBERTa-v2 model)"),v3e.forEach(t),h4o=i(N),q2=n(N,"LI",{});var T3e=s(q2);Bse=n(T3e,"STRONG",{});var KXr=s(Bse);p4o=r(KXr,"distilbert"),KXr.forEach(t),u4o=r(T3e," \u2014 "),Vq=n(T3e,"A",{href:!0});var ZXr=s(Vq);_4o=r(ZXr,"DistilBertForSequenceClassification"),ZXr.forEach(t),b4o=r(T3e," (DistilBERT model)"),T3e.forEach(t),F4o=i(N),N2=n(N,"LI",{});var M3e=s(N2);Pse=n(M3e,"STRONG",{});var ezr=s(Pse);v4o=r(ezr,"electra"),ezr.forEach(t),T4o=r(M3e," \u2014 "),Xq=n(M3e,"A",{href:!0});var ozr=s(Xq);M4o=r(ozr,"ElectraForSequenceClassification"),ozr.forEach(t),E4o=r(M3e," (ELECTRA model)"),M3e.forEach(t),C4o=i(N),j2=n(N,"LI",{});var E3e=s(j2);Ise=n(E3e,"STRONG",{});var rzr=s(Ise);w4o=r(rzr,"flaubert"),rzr.forEach(t),A4o=r(E3e," \u2014 "),zq=n(E3e,"A",{href:!0});var tzr=s(zq);y4o=r(tzr,"FlaubertForSequenceClassification"),tzr.forEach(t),L4o=r(E3e," (FlauBERT model)"),E3e.forEach(t),x4o=i(N),D2=n(N,"LI",{});var C3e=s(D2);qse=n(C3e,"STRONG",{});var azr=s(qse);$4o=r(azr,"fnet"),azr.forEach(t),k4o=r(C3e," \u2014 "),Qq=n(C3e,"A",{href:!0});var nzr=s(Qq);S4o=r(nzr,"FNetForSequenceClassification"),nzr.forEach(t),R4o=r(C3e," (FNet model)"),C3e.forEach(t),B4o=i(N),G2=n(N,"LI",{});var w3e=s(G2);Nse=n(w3e,"STRONG",{});var szr=s(Nse);P4o=r(szr,"funnel"),szr.forEach(t),I4o=r(w3e," \u2014 "),Wq=n(w3e,"A",{href:!0});var lzr=s(Wq);q4o=r(lzr,"FunnelForSequenceClassification"),lzr.forEach(t),N4o=r(w3e," (Funnel Transformer model)"),w3e.forEach(t),j4o=i(N),O2=n(N,"LI",{});var A3e=s(O2);jse=n(A3e,"STRONG",{});var izr=s(jse);D4o=r(izr,"gpt2"),izr.forEach(t),G4o=r(A3e," \u2014 "),Hq=n(A3e,"A",{href:!0});var dzr=s(Hq);O4o=r(dzr,"GPT2ForSequenceClassification"),dzr.forEach(t),V4o=r(A3e," (OpenAI GPT-2 model)"),A3e.forEach(t),X4o=i(N),V2=n(N,"LI",{});var y3e=s(V2);Dse=n(y3e,"STRONG",{});var czr=s(Dse);z4o=r(czr,"gpt_neo"),czr.forEach(t),Q4o=r(y3e," \u2014 "),Uq=n(y3e,"A",{href:!0});var fzr=s(Uq);W4o=r(fzr,"GPTNeoForSequenceClassification"),fzr.forEach(t),H4o=r(y3e," (GPT Neo model)"),y3e.forEach(t),U4o=i(N),X2=n(N,"LI",{});var L3e=s(X2);Gse=n(L3e,"STRONG",{});var mzr=s(Gse);J4o=r(mzr,"gptj"),mzr.forEach(t),Y4o=r(L3e," \u2014 "),Jq=n(L3e,"A",{href:!0});var gzr=s(Jq);K4o=r(gzr,"GPTJForSequenceClassification"),gzr.forEach(t),Z4o=r(L3e," (GPT-J model)"),L3e.forEach(t),eEo=i(N),z2=n(N,"LI",{});var x3e=s(z2);Ose=n(x3e,"STRONG",{});var hzr=s(Ose);oEo=r(hzr,"ibert"),hzr.forEach(t),rEo=r(x3e," \u2014 "),Yq=n(x3e,"A",{href:!0});var pzr=s(Yq);tEo=r(pzr,"IBertForSequenceClassification"),pzr.forEach(t),aEo=r(x3e," (I-BERT model)"),x3e.forEach(t),nEo=i(N),Q2=n(N,"LI",{});var $3e=s(Q2);Vse=n($3e,"STRONG",{});var uzr=s(Vse);sEo=r(uzr,"layoutlm"),uzr.forEach(t),lEo=r($3e," \u2014 "),Kq=n($3e,"A",{href:!0});var _zr=s(Kq);iEo=r(_zr,"LayoutLMForSequenceClassification"),_zr.forEach(t),dEo=r($3e," (LayoutLM model)"),$3e.forEach(t),cEo=i(N),W2=n(N,"LI",{});var k3e=s(W2);Xse=n(k3e,"STRONG",{});var bzr=s(Xse);fEo=r(bzr,"layoutlmv2"),bzr.forEach(t),mEo=r(k3e," \u2014 "),Zq=n(k3e,"A",{href:!0});var Fzr=s(Zq);gEo=r(Fzr,"LayoutLMv2ForSequenceClassification"),Fzr.forEach(t),hEo=r(k3e," (LayoutLMv2 model)"),k3e.forEach(t),pEo=i(N),H2=n(N,"LI",{});var S3e=s(H2);zse=n(S3e,"STRONG",{});var vzr=s(zse);uEo=r(vzr,"led"),vzr.forEach(t),_Eo=r(S3e," \u2014 "),eN=n(S3e,"A",{href:!0});var Tzr=s(eN);bEo=r(Tzr,"LEDForSequenceClassification"),Tzr.forEach(t),FEo=r(S3e," (LED model)"),S3e.forEach(t),vEo=i(N),U2=n(N,"LI",{});var R3e=s(U2);Qse=n(R3e,"STRONG",{});var Mzr=s(Qse);TEo=r(Mzr,"longformer"),Mzr.forEach(t),MEo=r(R3e," \u2014 "),oN=n(R3e,"A",{href:!0});var Ezr=s(oN);EEo=r(Ezr,"LongformerForSequenceClassification"),Ezr.forEach(t),CEo=r(R3e," (Longformer model)"),R3e.forEach(t),wEo=i(N),J2=n(N,"LI",{});var B3e=s(J2);Wse=n(B3e,"STRONG",{});var Czr=s(Wse);AEo=r(Czr,"mbart"),Czr.forEach(t),yEo=r(B3e," \u2014 "),rN=n(B3e,"A",{href:!0});var wzr=s(rN);LEo=r(wzr,"MBartForSequenceClassification"),wzr.forEach(t),xEo=r(B3e," (mBART model)"),B3e.forEach(t),$Eo=i(N),Y2=n(N,"LI",{});var P3e=s(Y2);Hse=n(P3e,"STRONG",{});var Azr=s(Hse);kEo=r(Azr,"megatron-bert"),Azr.forEach(t),SEo=r(P3e," \u2014 "),tN=n(P3e,"A",{href:!0});var yzr=s(tN);REo=r(yzr,"MegatronBertForSequenceClassification"),yzr.forEach(t),BEo=r(P3e," (MegatronBert model)"),P3e.forEach(t),PEo=i(N),K2=n(N,"LI",{});var I3e=s(K2);Use=n(I3e,"STRONG",{});var Lzr=s(Use);IEo=r(Lzr,"mobilebert"),Lzr.forEach(t),qEo=r(I3e," \u2014 "),aN=n(I3e,"A",{href:!0});var xzr=s(aN);NEo=r(xzr,"MobileBertForSequenceClassification"),xzr.forEach(t),jEo=r(I3e," (MobileBERT model)"),I3e.forEach(t),DEo=i(N),Z2=n(N,"LI",{});var q3e=s(Z2);Jse=n(q3e,"STRONG",{});var $zr=s(Jse);GEo=r($zr,"mpnet"),$zr.forEach(t),OEo=r(q3e," \u2014 "),nN=n(q3e,"A",{href:!0});var kzr=s(nN);VEo=r(kzr,"MPNetForSequenceClassification"),kzr.forEach(t),XEo=r(q3e," (MPNet model)"),q3e.forEach(t),zEo=i(N),e1=n(N,"LI",{});var N3e=s(e1);Yse=n(N3e,"STRONG",{});var Szr=s(Yse);QEo=r(Szr,"nystromformer"),Szr.forEach(t),WEo=r(N3e," \u2014 "),sN=n(N3e,"A",{href:!0});var Rzr=s(sN);HEo=r(Rzr,"NystromformerForSequenceClassification"),Rzr.forEach(t),UEo=r(N3e," (Nystromformer model)"),N3e.forEach(t),JEo=i(N),o1=n(N,"LI",{});var j3e=s(o1);Kse=n(j3e,"STRONG",{});var Bzr=s(Kse);YEo=r(Bzr,"openai-gpt"),Bzr.forEach(t),KEo=r(j3e," \u2014 "),lN=n(j3e,"A",{href:!0});var Pzr=s(lN);ZEo=r(Pzr,"OpenAIGPTForSequenceClassification"),Pzr.forEach(t),eCo=r(j3e," (OpenAI GPT model)"),j3e.forEach(t),oCo=i(N),r1=n(N,"LI",{});var D3e=s(r1);Zse=n(D3e,"STRONG",{});var Izr=s(Zse);rCo=r(Izr,"perceiver"),Izr.forEach(t),tCo=r(D3e," \u2014 "),iN=n(D3e,"A",{href:!0});var qzr=s(iN);aCo=r(qzr,"PerceiverForSequenceClassification"),qzr.forEach(t),nCo=r(D3e," (Perceiver model)"),D3e.forEach(t),sCo=i(N),t1=n(N,"LI",{});var G3e=s(t1);ele=n(G3e,"STRONG",{});var Nzr=s(ele);lCo=r(Nzr,"plbart"),Nzr.forEach(t),iCo=r(G3e," \u2014 "),dN=n(G3e,"A",{href:!0});var jzr=s(dN);dCo=r(jzr,"PLBartForSequenceClassification"),jzr.forEach(t),cCo=r(G3e," (PLBart model)"),G3e.forEach(t),fCo=i(N),a1=n(N,"LI",{});var O3e=s(a1);ole=n(O3e,"STRONG",{});var Dzr=s(ole);mCo=r(Dzr,"qdqbert"),Dzr.forEach(t),gCo=r(O3e," \u2014 "),rle=n(O3e,"CODE",{});var Gzr=s(rle);hCo=r(Gzr,"QDQBertForSequenceClassification"),Gzr.forEach(t),pCo=r(O3e," (QDQBert model)"),O3e.forEach(t),uCo=i(N),n1=n(N,"LI",{});var V3e=s(n1);tle=n(V3e,"STRONG",{});var Ozr=s(tle);_Co=r(Ozr,"reformer"),Ozr.forEach(t),bCo=r(V3e," \u2014 "),cN=n(V3e,"A",{href:!0});var Vzr=s(cN);FCo=r(Vzr,"ReformerForSequenceClassification"),Vzr.forEach(t),vCo=r(V3e," (Reformer model)"),V3e.forEach(t),TCo=i(N),s1=n(N,"LI",{});var X3e=s(s1);ale=n(X3e,"STRONG",{});var Xzr=s(ale);MCo=r(Xzr,"rembert"),Xzr.forEach(t),ECo=r(X3e," \u2014 "),fN=n(X3e,"A",{href:!0});var zzr=s(fN);CCo=r(zzr,"RemBertForSequenceClassification"),zzr.forEach(t),wCo=r(X3e," (RemBERT model)"),X3e.forEach(t),ACo=i(N),l1=n(N,"LI",{});var z3e=s(l1);nle=n(z3e,"STRONG",{});var Qzr=s(nle);yCo=r(Qzr,"roberta"),Qzr.forEach(t),LCo=r(z3e," \u2014 "),mN=n(z3e,"A",{href:!0});var Wzr=s(mN);xCo=r(Wzr,"RobertaForSequenceClassification"),Wzr.forEach(t),$Co=r(z3e," (RoBERTa model)"),z3e.forEach(t),kCo=i(N),i1=n(N,"LI",{});var Q3e=s(i1);sle=n(Q3e,"STRONG",{});var Hzr=s(sle);SCo=r(Hzr,"roformer"),Hzr.forEach(t),RCo=r(Q3e," \u2014 "),gN=n(Q3e,"A",{href:!0});var Uzr=s(gN);BCo=r(Uzr,"RoFormerForSequenceClassification"),Uzr.forEach(t),PCo=r(Q3e," (RoFormer model)"),Q3e.forEach(t),ICo=i(N),d1=n(N,"LI",{});var W3e=s(d1);lle=n(W3e,"STRONG",{});var Jzr=s(lle);qCo=r(Jzr,"squeezebert"),Jzr.forEach(t),NCo=r(W3e," \u2014 "),hN=n(W3e,"A",{href:!0});var Yzr=s(hN);jCo=r(Yzr,"SqueezeBertForSequenceClassification"),Yzr.forEach(t),DCo=r(W3e," (SqueezeBERT model)"),W3e.forEach(t),GCo=i(N),c1=n(N,"LI",{});var H3e=s(c1);ile=n(H3e,"STRONG",{});var Kzr=s(ile);OCo=r(Kzr,"tapas"),Kzr.forEach(t),VCo=r(H3e," \u2014 "),pN=n(H3e,"A",{href:!0});var Zzr=s(pN);XCo=r(Zzr,"TapasForSequenceClassification"),Zzr.forEach(t),zCo=r(H3e," (TAPAS model)"),H3e.forEach(t),QCo=i(N),f1=n(N,"LI",{});var U3e=s(f1);dle=n(U3e,"STRONG",{});var eQr=s(dle);WCo=r(eQr,"transfo-xl"),eQr.forEach(t),HCo=r(U3e," \u2014 "),uN=n(U3e,"A",{href:!0});var oQr=s(uN);UCo=r(oQr,"TransfoXLForSequenceClassification"),oQr.forEach(t),JCo=r(U3e," (Transformer-XL model)"),U3e.forEach(t),YCo=i(N),m1=n(N,"LI",{});var J3e=s(m1);cle=n(J3e,"STRONG",{});var rQr=s(cle);KCo=r(rQr,"xlm"),rQr.forEach(t),ZCo=r(J3e," \u2014 "),_N=n(J3e,"A",{href:!0});var tQr=s(_N);e3o=r(tQr,"XLMForSequenceClassification"),tQr.forEach(t),o3o=r(J3e," (XLM model)"),J3e.forEach(t),r3o=i(N),g1=n(N,"LI",{});var Y3e=s(g1);fle=n(Y3e,"STRONG",{});var aQr=s(fle);t3o=r(aQr,"xlm-roberta"),aQr.forEach(t),a3o=r(Y3e," \u2014 "),bN=n(Y3e,"A",{href:!0});var nQr=s(bN);n3o=r(nQr,"XLMRobertaForSequenceClassification"),nQr.forEach(t),s3o=r(Y3e," (XLM-RoBERTa model)"),Y3e.forEach(t),l3o=i(N),h1=n(N,"LI",{});var K3e=s(h1);mle=n(K3e,"STRONG",{});var sQr=s(mle);i3o=r(sQr,"xlm-roberta-xl"),sQr.forEach(t),d3o=r(K3e," \u2014 "),FN=n(K3e,"A",{href:!0});var lQr=s(FN);c3o=r(lQr,"XLMRobertaXLForSequenceClassification"),lQr.forEach(t),f3o=r(K3e," (XLM-RoBERTa-XL model)"),K3e.forEach(t),m3o=i(N),p1=n(N,"LI",{});var Z3e=s(p1);gle=n(Z3e,"STRONG",{});var iQr=s(gle);g3o=r(iQr,"xlnet"),iQr.forEach(t),h3o=r(Z3e," \u2014 "),vN=n(Z3e,"A",{href:!0});var dQr=s(vN);p3o=r(dQr,"XLNetForSequenceClassification"),dQr.forEach(t),u3o=r(Z3e," (XLNet model)"),Z3e.forEach(t),_3o=i(N),u1=n(N,"LI",{});var ewe=s(u1);hle=n(ewe,"STRONG",{});var cQr=s(hle);b3o=r(cQr,"yoso"),cQr.forEach(t),F3o=r(ewe," \u2014 "),TN=n(ewe,"A",{href:!0});var fQr=s(TN);v3o=r(fQr,"YosoForSequenceClassification"),fQr.forEach(t),T3o=r(ewe," (YOSO model)"),ewe.forEach(t),N.forEach(t),M3o=i(ea),_1=n(ea,"P",{});var owe=s(_1);E3o=r(owe,"The model is set in evaluation mode by default using "),ple=n(owe,"CODE",{});var mQr=s(ple);C3o=r(mQr,"model.eval()"),mQr.forEach(t),w3o=r(owe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ule=n(owe,"CODE",{});var gQr=s(ule);A3o=r(gQr,"model.train()"),gQr.forEach(t),owe.forEach(t),y3o=i(ea),T(b1.$$.fragment,ea),ea.forEach(t),$s.forEach(t),Z$e=i(f),Ci=n(f,"H2",{class:!0});var oRe=s(Ci);F1=n(oRe,"A",{id:!0,class:!0,href:!0});var hQr=s(F1);_le=n(hQr,"SPAN",{});var pQr=s(_le);T(xA.$$.fragment,pQr),pQr.forEach(t),hQr.forEach(t),L3o=i(oRe),ble=n(oRe,"SPAN",{});var uQr=s(ble);x3o=r(uQr,"AutoModelForMultipleChoice"),uQr.forEach(t),oRe.forEach(t),eke=i(f),So=n(f,"DIV",{class:!0});var ks=s(So);T($A.$$.fragment,ks),$3o=i(ks),wi=n(ks,"P",{});var fU=s(wi);k3o=r(fU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),MN=n(fU,"A",{href:!0});var _Qr=s(MN);S3o=r(_Qr,"from_pretrained()"),_Qr.forEach(t),R3o=r(fU," class method or the "),EN=n(fU,"A",{href:!0});var bQr=s(EN);B3o=r(bQr,"from_config()"),bQr.forEach(t),P3o=r(fU,` class
method.`),fU.forEach(t),I3o=i(ks),kA=n(ks,"P",{});var rRe=s(kA);q3o=r(rRe,"This class cannot be instantiated directly using "),Fle=n(rRe,"CODE",{});var FQr=s(Fle);N3o=r(FQr,"__init__()"),FQr.forEach(t),j3o=r(rRe," (throws an error)."),rRe.forEach(t),D3o=i(ks),at=n(ks,"DIV",{class:!0});var zC=s(at);T(SA.$$.fragment,zC),G3o=i(zC),vle=n(zC,"P",{});var vQr=s(vle);O3o=r(vQr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),vQr.forEach(t),V3o=i(zC),Ai=n(zC,"P",{});var mU=s(Ai);X3o=r(mU,`Note:
Loading a model from its configuration file does `),Tle=n(mU,"STRONG",{});var TQr=s(Tle);z3o=r(TQr,"not"),TQr.forEach(t),Q3o=r(mU,` load the model weights. It only affects the
model\u2019s configuration. Use `),CN=n(mU,"A",{href:!0});var MQr=s(CN);W3o=r(MQr,"from_pretrained()"),MQr.forEach(t),H3o=r(mU," to load the model weights."),mU.forEach(t),U3o=i(zC),T(v1.$$.fragment,zC),zC.forEach(t),J3o=i(ks),Ye=n(ks,"DIV",{class:!0});var oa=s(Ye);T(RA.$$.fragment,oa),Y3o=i(oa),Mle=n(oa,"P",{});var EQr=s(Mle);K3o=r(EQr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),EQr.forEach(t),Z3o=i(oa),La=n(oa,"P",{});var QC=s(La);ewo=r(QC,"The model class to instantiate is selected based on the "),Ele=n(QC,"CODE",{});var CQr=s(Ele);owo=r(CQr,"model_type"),CQr.forEach(t),rwo=r(QC,` property of the config object (either
passed as an argument or loaded from `),Cle=n(QC,"CODE",{});var wQr=s(Cle);two=r(wQr,"pretrained_model_name_or_path"),wQr.forEach(t),awo=r(QC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wle=n(QC,"CODE",{});var AQr=s(wle);nwo=r(AQr,"pretrained_model_name_or_path"),AQr.forEach(t),swo=r(QC,":"),QC.forEach(t),lwo=i(oa),Y=n(oa,"UL",{});var K=s(Y);T1=n(K,"LI",{});var rwe=s(T1);Ale=n(rwe,"STRONG",{});var yQr=s(Ale);iwo=r(yQr,"albert"),yQr.forEach(t),dwo=r(rwe," \u2014 "),wN=n(rwe,"A",{href:!0});var LQr=s(wN);cwo=r(LQr,"AlbertForMultipleChoice"),LQr.forEach(t),fwo=r(rwe," (ALBERT model)"),rwe.forEach(t),mwo=i(K),M1=n(K,"LI",{});var twe=s(M1);yle=n(twe,"STRONG",{});var xQr=s(yle);gwo=r(xQr,"bert"),xQr.forEach(t),hwo=r(twe," \u2014 "),AN=n(twe,"A",{href:!0});var $Qr=s(AN);pwo=r($Qr,"BertForMultipleChoice"),$Qr.forEach(t),uwo=r(twe," (BERT model)"),twe.forEach(t),_wo=i(K),E1=n(K,"LI",{});var awe=s(E1);Lle=n(awe,"STRONG",{});var kQr=s(Lle);bwo=r(kQr,"big_bird"),kQr.forEach(t),Fwo=r(awe," \u2014 "),yN=n(awe,"A",{href:!0});var SQr=s(yN);vwo=r(SQr,"BigBirdForMultipleChoice"),SQr.forEach(t),Two=r(awe," (BigBird model)"),awe.forEach(t),Mwo=i(K),C1=n(K,"LI",{});var nwe=s(C1);xle=n(nwe,"STRONG",{});var RQr=s(xle);Ewo=r(RQr,"camembert"),RQr.forEach(t),Cwo=r(nwe," \u2014 "),LN=n(nwe,"A",{href:!0});var BQr=s(LN);wwo=r(BQr,"CamembertForMultipleChoice"),BQr.forEach(t),Awo=r(nwe," (CamemBERT model)"),nwe.forEach(t),ywo=i(K),w1=n(K,"LI",{});var swe=s(w1);$le=n(swe,"STRONG",{});var PQr=s($le);Lwo=r(PQr,"canine"),PQr.forEach(t),xwo=r(swe," \u2014 "),xN=n(swe,"A",{href:!0});var IQr=s(xN);$wo=r(IQr,"CanineForMultipleChoice"),IQr.forEach(t),kwo=r(swe," (Canine model)"),swe.forEach(t),Swo=i(K),A1=n(K,"LI",{});var lwe=s(A1);kle=n(lwe,"STRONG",{});var qQr=s(kle);Rwo=r(qQr,"convbert"),qQr.forEach(t),Bwo=r(lwe," \u2014 "),$N=n(lwe,"A",{href:!0});var NQr=s($N);Pwo=r(NQr,"ConvBertForMultipleChoice"),NQr.forEach(t),Iwo=r(lwe," (ConvBERT model)"),lwe.forEach(t),qwo=i(K),y1=n(K,"LI",{});var iwe=s(y1);Sle=n(iwe,"STRONG",{});var jQr=s(Sle);Nwo=r(jQr,"data2vec-text"),jQr.forEach(t),jwo=r(iwe," \u2014 "),kN=n(iwe,"A",{href:!0});var DQr=s(kN);Dwo=r(DQr,"Data2VecTextForMultipleChoice"),DQr.forEach(t),Gwo=r(iwe," (Data2VecText model)"),iwe.forEach(t),Owo=i(K),L1=n(K,"LI",{});var dwe=s(L1);Rle=n(dwe,"STRONG",{});var GQr=s(Rle);Vwo=r(GQr,"distilbert"),GQr.forEach(t),Xwo=r(dwe," \u2014 "),SN=n(dwe,"A",{href:!0});var OQr=s(SN);zwo=r(OQr,"DistilBertForMultipleChoice"),OQr.forEach(t),Qwo=r(dwe," (DistilBERT model)"),dwe.forEach(t),Wwo=i(K),x1=n(K,"LI",{});var cwe=s(x1);Ble=n(cwe,"STRONG",{});var VQr=s(Ble);Hwo=r(VQr,"electra"),VQr.forEach(t),Uwo=r(cwe," \u2014 "),RN=n(cwe,"A",{href:!0});var XQr=s(RN);Jwo=r(XQr,"ElectraForMultipleChoice"),XQr.forEach(t),Ywo=r(cwe," (ELECTRA model)"),cwe.forEach(t),Kwo=i(K),$1=n(K,"LI",{});var fwe=s($1);Ple=n(fwe,"STRONG",{});var zQr=s(Ple);Zwo=r(zQr,"flaubert"),zQr.forEach(t),eAo=r(fwe," \u2014 "),BN=n(fwe,"A",{href:!0});var QQr=s(BN);oAo=r(QQr,"FlaubertForMultipleChoice"),QQr.forEach(t),rAo=r(fwe," (FlauBERT model)"),fwe.forEach(t),tAo=i(K),k1=n(K,"LI",{});var mwe=s(k1);Ile=n(mwe,"STRONG",{});var WQr=s(Ile);aAo=r(WQr,"fnet"),WQr.forEach(t),nAo=r(mwe," \u2014 "),PN=n(mwe,"A",{href:!0});var HQr=s(PN);sAo=r(HQr,"FNetForMultipleChoice"),HQr.forEach(t),lAo=r(mwe," (FNet model)"),mwe.forEach(t),iAo=i(K),S1=n(K,"LI",{});var gwe=s(S1);qle=n(gwe,"STRONG",{});var UQr=s(qle);dAo=r(UQr,"funnel"),UQr.forEach(t),cAo=r(gwe," \u2014 "),IN=n(gwe,"A",{href:!0});var JQr=s(IN);fAo=r(JQr,"FunnelForMultipleChoice"),JQr.forEach(t),mAo=r(gwe," (Funnel Transformer model)"),gwe.forEach(t),gAo=i(K),R1=n(K,"LI",{});var hwe=s(R1);Nle=n(hwe,"STRONG",{});var YQr=s(Nle);hAo=r(YQr,"ibert"),YQr.forEach(t),pAo=r(hwe," \u2014 "),qN=n(hwe,"A",{href:!0});var KQr=s(qN);uAo=r(KQr,"IBertForMultipleChoice"),KQr.forEach(t),_Ao=r(hwe," (I-BERT model)"),hwe.forEach(t),bAo=i(K),B1=n(K,"LI",{});var pwe=s(B1);jle=n(pwe,"STRONG",{});var ZQr=s(jle);FAo=r(ZQr,"longformer"),ZQr.forEach(t),vAo=r(pwe," \u2014 "),NN=n(pwe,"A",{href:!0});var eWr=s(NN);TAo=r(eWr,"LongformerForMultipleChoice"),eWr.forEach(t),MAo=r(pwe," (Longformer model)"),pwe.forEach(t),EAo=i(K),P1=n(K,"LI",{});var uwe=s(P1);Dle=n(uwe,"STRONG",{});var oWr=s(Dle);CAo=r(oWr,"megatron-bert"),oWr.forEach(t),wAo=r(uwe," \u2014 "),jN=n(uwe,"A",{href:!0});var rWr=s(jN);AAo=r(rWr,"MegatronBertForMultipleChoice"),rWr.forEach(t),yAo=r(uwe," (MegatronBert model)"),uwe.forEach(t),LAo=i(K),I1=n(K,"LI",{});var _we=s(I1);Gle=n(_we,"STRONG",{});var tWr=s(Gle);xAo=r(tWr,"mobilebert"),tWr.forEach(t),$Ao=r(_we," \u2014 "),DN=n(_we,"A",{href:!0});var aWr=s(DN);kAo=r(aWr,"MobileBertForMultipleChoice"),aWr.forEach(t),SAo=r(_we," (MobileBERT model)"),_we.forEach(t),RAo=i(K),q1=n(K,"LI",{});var bwe=s(q1);Ole=n(bwe,"STRONG",{});var nWr=s(Ole);BAo=r(nWr,"mpnet"),nWr.forEach(t),PAo=r(bwe," \u2014 "),GN=n(bwe,"A",{href:!0});var sWr=s(GN);IAo=r(sWr,"MPNetForMultipleChoice"),sWr.forEach(t),qAo=r(bwe," (MPNet model)"),bwe.forEach(t),NAo=i(K),N1=n(K,"LI",{});var Fwe=s(N1);Vle=n(Fwe,"STRONG",{});var lWr=s(Vle);jAo=r(lWr,"nystromformer"),lWr.forEach(t),DAo=r(Fwe," \u2014 "),ON=n(Fwe,"A",{href:!0});var iWr=s(ON);GAo=r(iWr,"NystromformerForMultipleChoice"),iWr.forEach(t),OAo=r(Fwe," (Nystromformer model)"),Fwe.forEach(t),VAo=i(K),j1=n(K,"LI",{});var vwe=s(j1);Xle=n(vwe,"STRONG",{});var dWr=s(Xle);XAo=r(dWr,"qdqbert"),dWr.forEach(t),zAo=r(vwe," \u2014 "),zle=n(vwe,"CODE",{});var cWr=s(zle);QAo=r(cWr,"QDQBertForMultipleChoice"),cWr.forEach(t),WAo=r(vwe," (QDQBert model)"),vwe.forEach(t),HAo=i(K),D1=n(K,"LI",{});var Twe=s(D1);Qle=n(Twe,"STRONG",{});var fWr=s(Qle);UAo=r(fWr,"rembert"),fWr.forEach(t),JAo=r(Twe," \u2014 "),VN=n(Twe,"A",{href:!0});var mWr=s(VN);YAo=r(mWr,"RemBertForMultipleChoice"),mWr.forEach(t),KAo=r(Twe," (RemBERT model)"),Twe.forEach(t),ZAo=i(K),G1=n(K,"LI",{});var Mwe=s(G1);Wle=n(Mwe,"STRONG",{});var gWr=s(Wle);e0o=r(gWr,"roberta"),gWr.forEach(t),o0o=r(Mwe," \u2014 "),XN=n(Mwe,"A",{href:!0});var hWr=s(XN);r0o=r(hWr,"RobertaForMultipleChoice"),hWr.forEach(t),t0o=r(Mwe," (RoBERTa model)"),Mwe.forEach(t),a0o=i(K),O1=n(K,"LI",{});var Ewe=s(O1);Hle=n(Ewe,"STRONG",{});var pWr=s(Hle);n0o=r(pWr,"roformer"),pWr.forEach(t),s0o=r(Ewe," \u2014 "),zN=n(Ewe,"A",{href:!0});var uWr=s(zN);l0o=r(uWr,"RoFormerForMultipleChoice"),uWr.forEach(t),i0o=r(Ewe," (RoFormer model)"),Ewe.forEach(t),d0o=i(K),V1=n(K,"LI",{});var Cwe=s(V1);Ule=n(Cwe,"STRONG",{});var _Wr=s(Ule);c0o=r(_Wr,"squeezebert"),_Wr.forEach(t),f0o=r(Cwe," \u2014 "),QN=n(Cwe,"A",{href:!0});var bWr=s(QN);m0o=r(bWr,"SqueezeBertForMultipleChoice"),bWr.forEach(t),g0o=r(Cwe," (SqueezeBERT model)"),Cwe.forEach(t),h0o=i(K),X1=n(K,"LI",{});var wwe=s(X1);Jle=n(wwe,"STRONG",{});var FWr=s(Jle);p0o=r(FWr,"xlm"),FWr.forEach(t),u0o=r(wwe," \u2014 "),WN=n(wwe,"A",{href:!0});var vWr=s(WN);_0o=r(vWr,"XLMForMultipleChoice"),vWr.forEach(t),b0o=r(wwe," (XLM model)"),wwe.forEach(t),F0o=i(K),z1=n(K,"LI",{});var Awe=s(z1);Yle=n(Awe,"STRONG",{});var TWr=s(Yle);v0o=r(TWr,"xlm-roberta"),TWr.forEach(t),T0o=r(Awe," \u2014 "),HN=n(Awe,"A",{href:!0});var MWr=s(HN);M0o=r(MWr,"XLMRobertaForMultipleChoice"),MWr.forEach(t),E0o=r(Awe," (XLM-RoBERTa model)"),Awe.forEach(t),C0o=i(K),Q1=n(K,"LI",{});var ywe=s(Q1);Kle=n(ywe,"STRONG",{});var EWr=s(Kle);w0o=r(EWr,"xlm-roberta-xl"),EWr.forEach(t),A0o=r(ywe," \u2014 "),UN=n(ywe,"A",{href:!0});var CWr=s(UN);y0o=r(CWr,"XLMRobertaXLForMultipleChoice"),CWr.forEach(t),L0o=r(ywe," (XLM-RoBERTa-XL model)"),ywe.forEach(t),x0o=i(K),W1=n(K,"LI",{});var Lwe=s(W1);Zle=n(Lwe,"STRONG",{});var wWr=s(Zle);$0o=r(wWr,"xlnet"),wWr.forEach(t),k0o=r(Lwe," \u2014 "),JN=n(Lwe,"A",{href:!0});var AWr=s(JN);S0o=r(AWr,"XLNetForMultipleChoice"),AWr.forEach(t),R0o=r(Lwe," (XLNet model)"),Lwe.forEach(t),B0o=i(K),H1=n(K,"LI",{});var xwe=s(H1);eie=n(xwe,"STRONG",{});var yWr=s(eie);P0o=r(yWr,"yoso"),yWr.forEach(t),I0o=r(xwe," \u2014 "),YN=n(xwe,"A",{href:!0});var LWr=s(YN);q0o=r(LWr,"YosoForMultipleChoice"),LWr.forEach(t),N0o=r(xwe," (YOSO model)"),xwe.forEach(t),K.forEach(t),j0o=i(oa),U1=n(oa,"P",{});var $we=s(U1);D0o=r($we,"The model is set in evaluation mode by default using "),oie=n($we,"CODE",{});var xWr=s(oie);G0o=r(xWr,"model.eval()"),xWr.forEach(t),O0o=r($we,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rie=n($we,"CODE",{});var $Wr=s(rie);V0o=r($Wr,"model.train()"),$Wr.forEach(t),$we.forEach(t),X0o=i(oa),T(J1.$$.fragment,oa),oa.forEach(t),ks.forEach(t),oke=i(f),yi=n(f,"H2",{class:!0});var tRe=s(yi);Y1=n(tRe,"A",{id:!0,class:!0,href:!0});var kWr=s(Y1);tie=n(kWr,"SPAN",{});var SWr=s(tie);T(BA.$$.fragment,SWr),SWr.forEach(t),kWr.forEach(t),z0o=i(tRe),aie=n(tRe,"SPAN",{});var RWr=s(aie);Q0o=r(RWr,"AutoModelForNextSentencePrediction"),RWr.forEach(t),tRe.forEach(t),rke=i(f),Ro=n(f,"DIV",{class:!0});var Ss=s(Ro);T(PA.$$.fragment,Ss),W0o=i(Ss),Li=n(Ss,"P",{});var gU=s(Li);H0o=r(gU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),KN=n(gU,"A",{href:!0});var BWr=s(KN);U0o=r(BWr,"from_pretrained()"),BWr.forEach(t),J0o=r(gU," class method or the "),ZN=n(gU,"A",{href:!0});var PWr=s(ZN);Y0o=r(PWr,"from_config()"),PWr.forEach(t),K0o=r(gU,` class
method.`),gU.forEach(t),Z0o=i(Ss),IA=n(Ss,"P",{});var aRe=s(IA);eyo=r(aRe,"This class cannot be instantiated directly using "),nie=n(aRe,"CODE",{});var IWr=s(nie);oyo=r(IWr,"__init__()"),IWr.forEach(t),ryo=r(aRe," (throws an error)."),aRe.forEach(t),tyo=i(Ss),nt=n(Ss,"DIV",{class:!0});var WC=s(nt);T(qA.$$.fragment,WC),ayo=i(WC),sie=n(WC,"P",{});var qWr=s(sie);nyo=r(qWr,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),qWr.forEach(t),syo=i(WC),xi=n(WC,"P",{});var hU=s(xi);lyo=r(hU,`Note:
Loading a model from its configuration file does `),lie=n(hU,"STRONG",{});var NWr=s(lie);iyo=r(NWr,"not"),NWr.forEach(t),dyo=r(hU,` load the model weights. It only affects the
model\u2019s configuration. Use `),ej=n(hU,"A",{href:!0});var jWr=s(ej);cyo=r(jWr,"from_pretrained()"),jWr.forEach(t),fyo=r(hU," to load the model weights."),hU.forEach(t),myo=i(WC),T(K1.$$.fragment,WC),WC.forEach(t),gyo=i(Ss),Ke=n(Ss,"DIV",{class:!0});var ra=s(Ke);T(NA.$$.fragment,ra),hyo=i(ra),iie=n(ra,"P",{});var DWr=s(iie);pyo=r(DWr,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),DWr.forEach(t),uyo=i(ra),xa=n(ra,"P",{});var HC=s(xa);_yo=r(HC,"The model class to instantiate is selected based on the "),die=n(HC,"CODE",{});var GWr=s(die);byo=r(GWr,"model_type"),GWr.forEach(t),Fyo=r(HC,` property of the config object (either
passed as an argument or loaded from `),cie=n(HC,"CODE",{});var OWr=s(cie);vyo=r(OWr,"pretrained_model_name_or_path"),OWr.forEach(t),Tyo=r(HC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fie=n(HC,"CODE",{});var VWr=s(fie);Myo=r(VWr,"pretrained_model_name_or_path"),VWr.forEach(t),Eyo=r(HC,":"),HC.forEach(t),Cyo=i(ra),Wr=n(ra,"UL",{});var Rs=s(Wr);Z1=n(Rs,"LI",{});var kwe=s(Z1);mie=n(kwe,"STRONG",{});var XWr=s(mie);wyo=r(XWr,"bert"),XWr.forEach(t),Ayo=r(kwe," \u2014 "),oj=n(kwe,"A",{href:!0});var zWr=s(oj);yyo=r(zWr,"BertForNextSentencePrediction"),zWr.forEach(t),Lyo=r(kwe," (BERT model)"),kwe.forEach(t),xyo=i(Rs),eb=n(Rs,"LI",{});var Swe=s(eb);gie=n(Swe,"STRONG",{});var QWr=s(gie);$yo=r(QWr,"fnet"),QWr.forEach(t),kyo=r(Swe," \u2014 "),rj=n(Swe,"A",{href:!0});var WWr=s(rj);Syo=r(WWr,"FNetForNextSentencePrediction"),WWr.forEach(t),Ryo=r(Swe," (FNet model)"),Swe.forEach(t),Byo=i(Rs),ob=n(Rs,"LI",{});var Rwe=s(ob);hie=n(Rwe,"STRONG",{});var HWr=s(hie);Pyo=r(HWr,"megatron-bert"),HWr.forEach(t),Iyo=r(Rwe," \u2014 "),tj=n(Rwe,"A",{href:!0});var UWr=s(tj);qyo=r(UWr,"MegatronBertForNextSentencePrediction"),UWr.forEach(t),Nyo=r(Rwe," (MegatronBert model)"),Rwe.forEach(t),jyo=i(Rs),rb=n(Rs,"LI",{});var Bwe=s(rb);pie=n(Bwe,"STRONG",{});var JWr=s(pie);Dyo=r(JWr,"mobilebert"),JWr.forEach(t),Gyo=r(Bwe," \u2014 "),aj=n(Bwe,"A",{href:!0});var YWr=s(aj);Oyo=r(YWr,"MobileBertForNextSentencePrediction"),YWr.forEach(t),Vyo=r(Bwe," (MobileBERT model)"),Bwe.forEach(t),Xyo=i(Rs),tb=n(Rs,"LI",{});var Pwe=s(tb);uie=n(Pwe,"STRONG",{});var KWr=s(uie);zyo=r(KWr,"qdqbert"),KWr.forEach(t),Qyo=r(Pwe," \u2014 "),_ie=n(Pwe,"CODE",{});var ZWr=s(_ie);Wyo=r(ZWr,"QDQBertForNextSentencePrediction"),ZWr.forEach(t),Hyo=r(Pwe," (QDQBert model)"),Pwe.forEach(t),Rs.forEach(t),Uyo=i(ra),ab=n(ra,"P",{});var Iwe=s(ab);Jyo=r(Iwe,"The model is set in evaluation mode by default using "),bie=n(Iwe,"CODE",{});var eHr=s(bie);Yyo=r(eHr,"model.eval()"),eHr.forEach(t),Kyo=r(Iwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fie=n(Iwe,"CODE",{});var oHr=s(Fie);Zyo=r(oHr,"model.train()"),oHr.forEach(t),Iwe.forEach(t),eLo=i(ra),T(nb.$$.fragment,ra),ra.forEach(t),Ss.forEach(t),tke=i(f),$i=n(f,"H2",{class:!0});var nRe=s($i);sb=n(nRe,"A",{id:!0,class:!0,href:!0});var rHr=s(sb);vie=n(rHr,"SPAN",{});var tHr=s(vie);T(jA.$$.fragment,tHr),tHr.forEach(t),rHr.forEach(t),oLo=i(nRe),Tie=n(nRe,"SPAN",{});var aHr=s(Tie);rLo=r(aHr,"AutoModelForTokenClassification"),aHr.forEach(t),nRe.forEach(t),ake=i(f),Bo=n(f,"DIV",{class:!0});var Bs=s(Bo);T(DA.$$.fragment,Bs),tLo=i(Bs),ki=n(Bs,"P",{});var pU=s(ki);aLo=r(pU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),nj=n(pU,"A",{href:!0});var nHr=s(nj);nLo=r(nHr,"from_pretrained()"),nHr.forEach(t),sLo=r(pU," class method or the "),sj=n(pU,"A",{href:!0});var sHr=s(sj);lLo=r(sHr,"from_config()"),sHr.forEach(t),iLo=r(pU,` class
method.`),pU.forEach(t),dLo=i(Bs),GA=n(Bs,"P",{});var sRe=s(GA);cLo=r(sRe,"This class cannot be instantiated directly using "),Mie=n(sRe,"CODE",{});var lHr=s(Mie);fLo=r(lHr,"__init__()"),lHr.forEach(t),mLo=r(sRe," (throws an error)."),sRe.forEach(t),gLo=i(Bs),st=n(Bs,"DIV",{class:!0});var UC=s(st);T(OA.$$.fragment,UC),hLo=i(UC),Eie=n(UC,"P",{});var iHr=s(Eie);pLo=r(iHr,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),iHr.forEach(t),uLo=i(UC),Si=n(UC,"P",{});var uU=s(Si);_Lo=r(uU,`Note:
Loading a model from its configuration file does `),Cie=n(uU,"STRONG",{});var dHr=s(Cie);bLo=r(dHr,"not"),dHr.forEach(t),FLo=r(uU,` load the model weights. It only affects the
model\u2019s configuration. Use `),lj=n(uU,"A",{href:!0});var cHr=s(lj);vLo=r(cHr,"from_pretrained()"),cHr.forEach(t),TLo=r(uU," to load the model weights."),uU.forEach(t),MLo=i(UC),T(lb.$$.fragment,UC),UC.forEach(t),ELo=i(Bs),Ze=n(Bs,"DIV",{class:!0});var ta=s(Ze);T(VA.$$.fragment,ta),CLo=i(ta),wie=n(ta,"P",{});var fHr=s(wie);wLo=r(fHr,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),fHr.forEach(t),ALo=i(ta),$a=n(ta,"P",{});var JC=s($a);yLo=r(JC,"The model class to instantiate is selected based on the "),Aie=n(JC,"CODE",{});var mHr=s(Aie);LLo=r(mHr,"model_type"),mHr.forEach(t),xLo=r(JC,` property of the config object (either
passed as an argument or loaded from `),yie=n(JC,"CODE",{});var gHr=s(yie);$Lo=r(gHr,"pretrained_model_name_or_path"),gHr.forEach(t),kLo=r(JC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lie=n(JC,"CODE",{});var hHr=s(Lie);SLo=r(hHr,"pretrained_model_name_or_path"),hHr.forEach(t),RLo=r(JC,":"),JC.forEach(t),BLo=i(ta),U=n(ta,"UL",{});var J=s(U);ib=n(J,"LI",{});var qwe=s(ib);xie=n(qwe,"STRONG",{});var pHr=s(xie);PLo=r(pHr,"albert"),pHr.forEach(t),ILo=r(qwe," \u2014 "),ij=n(qwe,"A",{href:!0});var uHr=s(ij);qLo=r(uHr,"AlbertForTokenClassification"),uHr.forEach(t),NLo=r(qwe," (ALBERT model)"),qwe.forEach(t),jLo=i(J),db=n(J,"LI",{});var Nwe=s(db);$ie=n(Nwe,"STRONG",{});var _Hr=s($ie);DLo=r(_Hr,"bert"),_Hr.forEach(t),GLo=r(Nwe," \u2014 "),dj=n(Nwe,"A",{href:!0});var bHr=s(dj);OLo=r(bHr,"BertForTokenClassification"),bHr.forEach(t),VLo=r(Nwe," (BERT model)"),Nwe.forEach(t),XLo=i(J),cb=n(J,"LI",{});var jwe=s(cb);kie=n(jwe,"STRONG",{});var FHr=s(kie);zLo=r(FHr,"big_bird"),FHr.forEach(t),QLo=r(jwe," \u2014 "),cj=n(jwe,"A",{href:!0});var vHr=s(cj);WLo=r(vHr,"BigBirdForTokenClassification"),vHr.forEach(t),HLo=r(jwe," (BigBird model)"),jwe.forEach(t),ULo=i(J),fb=n(J,"LI",{});var Dwe=s(fb);Sie=n(Dwe,"STRONG",{});var THr=s(Sie);JLo=r(THr,"camembert"),THr.forEach(t),YLo=r(Dwe," \u2014 "),fj=n(Dwe,"A",{href:!0});var MHr=s(fj);KLo=r(MHr,"CamembertForTokenClassification"),MHr.forEach(t),ZLo=r(Dwe," (CamemBERT model)"),Dwe.forEach(t),e8o=i(J),mb=n(J,"LI",{});var Gwe=s(mb);Rie=n(Gwe,"STRONG",{});var EHr=s(Rie);o8o=r(EHr,"canine"),EHr.forEach(t),r8o=r(Gwe," \u2014 "),mj=n(Gwe,"A",{href:!0});var CHr=s(mj);t8o=r(CHr,"CanineForTokenClassification"),CHr.forEach(t),a8o=r(Gwe," (Canine model)"),Gwe.forEach(t),n8o=i(J),gb=n(J,"LI",{});var Owe=s(gb);Bie=n(Owe,"STRONG",{});var wHr=s(Bie);s8o=r(wHr,"convbert"),wHr.forEach(t),l8o=r(Owe," \u2014 "),gj=n(Owe,"A",{href:!0});var AHr=s(gj);i8o=r(AHr,"ConvBertForTokenClassification"),AHr.forEach(t),d8o=r(Owe," (ConvBERT model)"),Owe.forEach(t),c8o=i(J),hb=n(J,"LI",{});var Vwe=s(hb);Pie=n(Vwe,"STRONG",{});var yHr=s(Pie);f8o=r(yHr,"data2vec-text"),yHr.forEach(t),m8o=r(Vwe," \u2014 "),hj=n(Vwe,"A",{href:!0});var LHr=s(hj);g8o=r(LHr,"Data2VecTextForTokenClassification"),LHr.forEach(t),h8o=r(Vwe," (Data2VecText model)"),Vwe.forEach(t),p8o=i(J),pb=n(J,"LI",{});var Xwe=s(pb);Iie=n(Xwe,"STRONG",{});var xHr=s(Iie);u8o=r(xHr,"deberta"),xHr.forEach(t),_8o=r(Xwe," \u2014 "),pj=n(Xwe,"A",{href:!0});var $Hr=s(pj);b8o=r($Hr,"DebertaForTokenClassification"),$Hr.forEach(t),F8o=r(Xwe," (DeBERTa model)"),Xwe.forEach(t),v8o=i(J),ub=n(J,"LI",{});var zwe=s(ub);qie=n(zwe,"STRONG",{});var kHr=s(qie);T8o=r(kHr,"deberta-v2"),kHr.forEach(t),M8o=r(zwe," \u2014 "),uj=n(zwe,"A",{href:!0});var SHr=s(uj);E8o=r(SHr,"DebertaV2ForTokenClassification"),SHr.forEach(t),C8o=r(zwe," (DeBERTa-v2 model)"),zwe.forEach(t),w8o=i(J),_b=n(J,"LI",{});var Qwe=s(_b);Nie=n(Qwe,"STRONG",{});var RHr=s(Nie);A8o=r(RHr,"distilbert"),RHr.forEach(t),y8o=r(Qwe," \u2014 "),_j=n(Qwe,"A",{href:!0});var BHr=s(_j);L8o=r(BHr,"DistilBertForTokenClassification"),BHr.forEach(t),x8o=r(Qwe," (DistilBERT model)"),Qwe.forEach(t),$8o=i(J),bb=n(J,"LI",{});var Wwe=s(bb);jie=n(Wwe,"STRONG",{});var PHr=s(jie);k8o=r(PHr,"electra"),PHr.forEach(t),S8o=r(Wwe," \u2014 "),bj=n(Wwe,"A",{href:!0});var IHr=s(bj);R8o=r(IHr,"ElectraForTokenClassification"),IHr.forEach(t),B8o=r(Wwe," (ELECTRA model)"),Wwe.forEach(t),P8o=i(J),Fb=n(J,"LI",{});var Hwe=s(Fb);Die=n(Hwe,"STRONG",{});var qHr=s(Die);I8o=r(qHr,"flaubert"),qHr.forEach(t),q8o=r(Hwe," \u2014 "),Fj=n(Hwe,"A",{href:!0});var NHr=s(Fj);N8o=r(NHr,"FlaubertForTokenClassification"),NHr.forEach(t),j8o=r(Hwe," (FlauBERT model)"),Hwe.forEach(t),D8o=i(J),vb=n(J,"LI",{});var Uwe=s(vb);Gie=n(Uwe,"STRONG",{});var jHr=s(Gie);G8o=r(jHr,"fnet"),jHr.forEach(t),O8o=r(Uwe," \u2014 "),vj=n(Uwe,"A",{href:!0});var DHr=s(vj);V8o=r(DHr,"FNetForTokenClassification"),DHr.forEach(t),X8o=r(Uwe," (FNet model)"),Uwe.forEach(t),z8o=i(J),Tb=n(J,"LI",{});var Jwe=s(Tb);Oie=n(Jwe,"STRONG",{});var GHr=s(Oie);Q8o=r(GHr,"funnel"),GHr.forEach(t),W8o=r(Jwe," \u2014 "),Tj=n(Jwe,"A",{href:!0});var OHr=s(Tj);H8o=r(OHr,"FunnelForTokenClassification"),OHr.forEach(t),U8o=r(Jwe," (Funnel Transformer model)"),Jwe.forEach(t),J8o=i(J),Mb=n(J,"LI",{});var Ywe=s(Mb);Vie=n(Ywe,"STRONG",{});var VHr=s(Vie);Y8o=r(VHr,"gpt2"),VHr.forEach(t),K8o=r(Ywe," \u2014 "),Mj=n(Ywe,"A",{href:!0});var XHr=s(Mj);Z8o=r(XHr,"GPT2ForTokenClassification"),XHr.forEach(t),exo=r(Ywe," (OpenAI GPT-2 model)"),Ywe.forEach(t),oxo=i(J),Eb=n(J,"LI",{});var Kwe=s(Eb);Xie=n(Kwe,"STRONG",{});var zHr=s(Xie);rxo=r(zHr,"ibert"),zHr.forEach(t),txo=r(Kwe," \u2014 "),Ej=n(Kwe,"A",{href:!0});var QHr=s(Ej);axo=r(QHr,"IBertForTokenClassification"),QHr.forEach(t),nxo=r(Kwe," (I-BERT model)"),Kwe.forEach(t),sxo=i(J),Cb=n(J,"LI",{});var Zwe=s(Cb);zie=n(Zwe,"STRONG",{});var WHr=s(zie);lxo=r(WHr,"layoutlm"),WHr.forEach(t),ixo=r(Zwe," \u2014 "),Cj=n(Zwe,"A",{href:!0});var HHr=s(Cj);dxo=r(HHr,"LayoutLMForTokenClassification"),HHr.forEach(t),cxo=r(Zwe," (LayoutLM model)"),Zwe.forEach(t),fxo=i(J),wb=n(J,"LI",{});var eAe=s(wb);Qie=n(eAe,"STRONG",{});var UHr=s(Qie);mxo=r(UHr,"layoutlmv2"),UHr.forEach(t),gxo=r(eAe," \u2014 "),wj=n(eAe,"A",{href:!0});var JHr=s(wj);hxo=r(JHr,"LayoutLMv2ForTokenClassification"),JHr.forEach(t),pxo=r(eAe," (LayoutLMv2 model)"),eAe.forEach(t),uxo=i(J),Ab=n(J,"LI",{});var oAe=s(Ab);Wie=n(oAe,"STRONG",{});var YHr=s(Wie);_xo=r(YHr,"longformer"),YHr.forEach(t),bxo=r(oAe," \u2014 "),Aj=n(oAe,"A",{href:!0});var KHr=s(Aj);Fxo=r(KHr,"LongformerForTokenClassification"),KHr.forEach(t),vxo=r(oAe," (Longformer model)"),oAe.forEach(t),Txo=i(J),yb=n(J,"LI",{});var rAe=s(yb);Hie=n(rAe,"STRONG",{});var ZHr=s(Hie);Mxo=r(ZHr,"megatron-bert"),ZHr.forEach(t),Exo=r(rAe," \u2014 "),yj=n(rAe,"A",{href:!0});var eUr=s(yj);Cxo=r(eUr,"MegatronBertForTokenClassification"),eUr.forEach(t),wxo=r(rAe," (MegatronBert model)"),rAe.forEach(t),Axo=i(J),Lb=n(J,"LI",{});var tAe=s(Lb);Uie=n(tAe,"STRONG",{});var oUr=s(Uie);yxo=r(oUr,"mobilebert"),oUr.forEach(t),Lxo=r(tAe," \u2014 "),Lj=n(tAe,"A",{href:!0});var rUr=s(Lj);xxo=r(rUr,"MobileBertForTokenClassification"),rUr.forEach(t),$xo=r(tAe," (MobileBERT model)"),tAe.forEach(t),kxo=i(J),xb=n(J,"LI",{});var aAe=s(xb);Jie=n(aAe,"STRONG",{});var tUr=s(Jie);Sxo=r(tUr,"mpnet"),tUr.forEach(t),Rxo=r(aAe," \u2014 "),xj=n(aAe,"A",{href:!0});var aUr=s(xj);Bxo=r(aUr,"MPNetForTokenClassification"),aUr.forEach(t),Pxo=r(aAe," (MPNet model)"),aAe.forEach(t),Ixo=i(J),$b=n(J,"LI",{});var nAe=s($b);Yie=n(nAe,"STRONG",{});var nUr=s(Yie);qxo=r(nUr,"nystromformer"),nUr.forEach(t),Nxo=r(nAe," \u2014 "),$j=n(nAe,"A",{href:!0});var sUr=s($j);jxo=r(sUr,"NystromformerForTokenClassification"),sUr.forEach(t),Dxo=r(nAe," (Nystromformer model)"),nAe.forEach(t),Gxo=i(J),kb=n(J,"LI",{});var sAe=s(kb);Kie=n(sAe,"STRONG",{});var lUr=s(Kie);Oxo=r(lUr,"qdqbert"),lUr.forEach(t),Vxo=r(sAe," \u2014 "),Zie=n(sAe,"CODE",{});var iUr=s(Zie);Xxo=r(iUr,"QDQBertForTokenClassification"),iUr.forEach(t),zxo=r(sAe," (QDQBert model)"),sAe.forEach(t),Qxo=i(J),Sb=n(J,"LI",{});var lAe=s(Sb);ede=n(lAe,"STRONG",{});var dUr=s(ede);Wxo=r(dUr,"rembert"),dUr.forEach(t),Hxo=r(lAe," \u2014 "),kj=n(lAe,"A",{href:!0});var cUr=s(kj);Uxo=r(cUr,"RemBertForTokenClassification"),cUr.forEach(t),Jxo=r(lAe," (RemBERT model)"),lAe.forEach(t),Yxo=i(J),Rb=n(J,"LI",{});var iAe=s(Rb);ode=n(iAe,"STRONG",{});var fUr=s(ode);Kxo=r(fUr,"roberta"),fUr.forEach(t),Zxo=r(iAe," \u2014 "),Sj=n(iAe,"A",{href:!0});var mUr=s(Sj);e7o=r(mUr,"RobertaForTokenClassification"),mUr.forEach(t),o7o=r(iAe," (RoBERTa model)"),iAe.forEach(t),r7o=i(J),Bb=n(J,"LI",{});var dAe=s(Bb);rde=n(dAe,"STRONG",{});var gUr=s(rde);t7o=r(gUr,"roformer"),gUr.forEach(t),a7o=r(dAe," \u2014 "),Rj=n(dAe,"A",{href:!0});var hUr=s(Rj);n7o=r(hUr,"RoFormerForTokenClassification"),hUr.forEach(t),s7o=r(dAe," (RoFormer model)"),dAe.forEach(t),l7o=i(J),Pb=n(J,"LI",{});var cAe=s(Pb);tde=n(cAe,"STRONG",{});var pUr=s(tde);i7o=r(pUr,"squeezebert"),pUr.forEach(t),d7o=r(cAe," \u2014 "),Bj=n(cAe,"A",{href:!0});var uUr=s(Bj);c7o=r(uUr,"SqueezeBertForTokenClassification"),uUr.forEach(t),f7o=r(cAe," (SqueezeBERT model)"),cAe.forEach(t),m7o=i(J),Ib=n(J,"LI",{});var fAe=s(Ib);ade=n(fAe,"STRONG",{});var _Ur=s(ade);g7o=r(_Ur,"xlm"),_Ur.forEach(t),h7o=r(fAe," \u2014 "),Pj=n(fAe,"A",{href:!0});var bUr=s(Pj);p7o=r(bUr,"XLMForTokenClassification"),bUr.forEach(t),u7o=r(fAe," (XLM model)"),fAe.forEach(t),_7o=i(J),qb=n(J,"LI",{});var mAe=s(qb);nde=n(mAe,"STRONG",{});var FUr=s(nde);b7o=r(FUr,"xlm-roberta"),FUr.forEach(t),F7o=r(mAe," \u2014 "),Ij=n(mAe,"A",{href:!0});var vUr=s(Ij);v7o=r(vUr,"XLMRobertaForTokenClassification"),vUr.forEach(t),T7o=r(mAe," (XLM-RoBERTa model)"),mAe.forEach(t),M7o=i(J),Nb=n(J,"LI",{});var gAe=s(Nb);sde=n(gAe,"STRONG",{});var TUr=s(sde);E7o=r(TUr,"xlm-roberta-xl"),TUr.forEach(t),C7o=r(gAe," \u2014 "),qj=n(gAe,"A",{href:!0});var MUr=s(qj);w7o=r(MUr,"XLMRobertaXLForTokenClassification"),MUr.forEach(t),A7o=r(gAe," (XLM-RoBERTa-XL model)"),gAe.forEach(t),y7o=i(J),jb=n(J,"LI",{});var hAe=s(jb);lde=n(hAe,"STRONG",{});var EUr=s(lde);L7o=r(EUr,"xlnet"),EUr.forEach(t),x7o=r(hAe," \u2014 "),Nj=n(hAe,"A",{href:!0});var CUr=s(Nj);$7o=r(CUr,"XLNetForTokenClassification"),CUr.forEach(t),k7o=r(hAe," (XLNet model)"),hAe.forEach(t),S7o=i(J),Db=n(J,"LI",{});var pAe=s(Db);ide=n(pAe,"STRONG",{});var wUr=s(ide);R7o=r(wUr,"yoso"),wUr.forEach(t),B7o=r(pAe," \u2014 "),jj=n(pAe,"A",{href:!0});var AUr=s(jj);P7o=r(AUr,"YosoForTokenClassification"),AUr.forEach(t),I7o=r(pAe," (YOSO model)"),pAe.forEach(t),J.forEach(t),q7o=i(ta),Gb=n(ta,"P",{});var uAe=s(Gb);N7o=r(uAe,"The model is set in evaluation mode by default using "),dde=n(uAe,"CODE",{});var yUr=s(dde);j7o=r(yUr,"model.eval()"),yUr.forEach(t),D7o=r(uAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cde=n(uAe,"CODE",{});var LUr=s(cde);G7o=r(LUr,"model.train()"),LUr.forEach(t),uAe.forEach(t),O7o=i(ta),T(Ob.$$.fragment,ta),ta.forEach(t),Bs.forEach(t),nke=i(f),Ri=n(f,"H2",{class:!0});var lRe=s(Ri);Vb=n(lRe,"A",{id:!0,class:!0,href:!0});var xUr=s(Vb);fde=n(xUr,"SPAN",{});var $Ur=s(fde);T(XA.$$.fragment,$Ur),$Ur.forEach(t),xUr.forEach(t),V7o=i(lRe),mde=n(lRe,"SPAN",{});var kUr=s(mde);X7o=r(kUr,"AutoModelForQuestionAnswering"),kUr.forEach(t),lRe.forEach(t),ske=i(f),Po=n(f,"DIV",{class:!0});var Ps=s(Po);T(zA.$$.fragment,Ps),z7o=i(Ps),Bi=n(Ps,"P",{});var _U=s(Bi);Q7o=r(_U,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Dj=n(_U,"A",{href:!0});var SUr=s(Dj);W7o=r(SUr,"from_pretrained()"),SUr.forEach(t),H7o=r(_U," class method or the "),Gj=n(_U,"A",{href:!0});var RUr=s(Gj);U7o=r(RUr,"from_config()"),RUr.forEach(t),J7o=r(_U,` class
method.`),_U.forEach(t),Y7o=i(Ps),QA=n(Ps,"P",{});var iRe=s(QA);K7o=r(iRe,"This class cannot be instantiated directly using "),gde=n(iRe,"CODE",{});var BUr=s(gde);Z7o=r(BUr,"__init__()"),BUr.forEach(t),e$o=r(iRe," (throws an error)."),iRe.forEach(t),o$o=i(Ps),lt=n(Ps,"DIV",{class:!0});var YC=s(lt);T(WA.$$.fragment,YC),r$o=i(YC),hde=n(YC,"P",{});var PUr=s(hde);t$o=r(PUr,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),PUr.forEach(t),a$o=i(YC),Pi=n(YC,"P",{});var bU=s(Pi);n$o=r(bU,`Note:
Loading a model from its configuration file does `),pde=n(bU,"STRONG",{});var IUr=s(pde);s$o=r(IUr,"not"),IUr.forEach(t),l$o=r(bU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Oj=n(bU,"A",{href:!0});var qUr=s(Oj);i$o=r(qUr,"from_pretrained()"),qUr.forEach(t),d$o=r(bU," to load the model weights."),bU.forEach(t),c$o=i(YC),T(Xb.$$.fragment,YC),YC.forEach(t),f$o=i(Ps),eo=n(Ps,"DIV",{class:!0});var aa=s(eo);T(HA.$$.fragment,aa),m$o=i(aa),ude=n(aa,"P",{});var NUr=s(ude);g$o=r(NUr,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),NUr.forEach(t),h$o=i(aa),ka=n(aa,"P",{});var KC=s(ka);p$o=r(KC,"The model class to instantiate is selected based on the "),_de=n(KC,"CODE",{});var jUr=s(_de);u$o=r(jUr,"model_type"),jUr.forEach(t),_$o=r(KC,` property of the config object (either
passed as an argument or loaded from `),bde=n(KC,"CODE",{});var DUr=s(bde);b$o=r(DUr,"pretrained_model_name_or_path"),DUr.forEach(t),F$o=r(KC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fde=n(KC,"CODE",{});var GUr=s(Fde);v$o=r(GUr,"pretrained_model_name_or_path"),GUr.forEach(t),T$o=r(KC,":"),KC.forEach(t),M$o=i(aa),O=n(aa,"UL",{});var X=s(O);zb=n(X,"LI",{});var _Ae=s(zb);vde=n(_Ae,"STRONG",{});var OUr=s(vde);E$o=r(OUr,"albert"),OUr.forEach(t),C$o=r(_Ae," \u2014 "),Vj=n(_Ae,"A",{href:!0});var VUr=s(Vj);w$o=r(VUr,"AlbertForQuestionAnswering"),VUr.forEach(t),A$o=r(_Ae," (ALBERT model)"),_Ae.forEach(t),y$o=i(X),Qb=n(X,"LI",{});var bAe=s(Qb);Tde=n(bAe,"STRONG",{});var XUr=s(Tde);L$o=r(XUr,"bart"),XUr.forEach(t),x$o=r(bAe," \u2014 "),Xj=n(bAe,"A",{href:!0});var zUr=s(Xj);$$o=r(zUr,"BartForQuestionAnswering"),zUr.forEach(t),k$o=r(bAe," (BART model)"),bAe.forEach(t),S$o=i(X),Wb=n(X,"LI",{});var FAe=s(Wb);Mde=n(FAe,"STRONG",{});var QUr=s(Mde);R$o=r(QUr,"bert"),QUr.forEach(t),B$o=r(FAe," \u2014 "),zj=n(FAe,"A",{href:!0});var WUr=s(zj);P$o=r(WUr,"BertForQuestionAnswering"),WUr.forEach(t),I$o=r(FAe," (BERT model)"),FAe.forEach(t),q$o=i(X),Hb=n(X,"LI",{});var vAe=s(Hb);Ede=n(vAe,"STRONG",{});var HUr=s(Ede);N$o=r(HUr,"big_bird"),HUr.forEach(t),j$o=r(vAe," \u2014 "),Qj=n(vAe,"A",{href:!0});var UUr=s(Qj);D$o=r(UUr,"BigBirdForQuestionAnswering"),UUr.forEach(t),G$o=r(vAe," (BigBird model)"),vAe.forEach(t),O$o=i(X),Ub=n(X,"LI",{});var TAe=s(Ub);Cde=n(TAe,"STRONG",{});var JUr=s(Cde);V$o=r(JUr,"bigbird_pegasus"),JUr.forEach(t),X$o=r(TAe," \u2014 "),Wj=n(TAe,"A",{href:!0});var YUr=s(Wj);z$o=r(YUr,"BigBirdPegasusForQuestionAnswering"),YUr.forEach(t),Q$o=r(TAe," (BigBirdPegasus model)"),TAe.forEach(t),W$o=i(X),Jb=n(X,"LI",{});var MAe=s(Jb);wde=n(MAe,"STRONG",{});var KUr=s(wde);H$o=r(KUr,"camembert"),KUr.forEach(t),U$o=r(MAe," \u2014 "),Hj=n(MAe,"A",{href:!0});var ZUr=s(Hj);J$o=r(ZUr,"CamembertForQuestionAnswering"),ZUr.forEach(t),Y$o=r(MAe," (CamemBERT model)"),MAe.forEach(t),K$o=i(X),Yb=n(X,"LI",{});var EAe=s(Yb);Ade=n(EAe,"STRONG",{});var eJr=s(Ade);Z$o=r(eJr,"canine"),eJr.forEach(t),eko=r(EAe," \u2014 "),Uj=n(EAe,"A",{href:!0});var oJr=s(Uj);oko=r(oJr,"CanineForQuestionAnswering"),oJr.forEach(t),rko=r(EAe," (Canine model)"),EAe.forEach(t),tko=i(X),Kb=n(X,"LI",{});var CAe=s(Kb);yde=n(CAe,"STRONG",{});var rJr=s(yde);ako=r(rJr,"convbert"),rJr.forEach(t),nko=r(CAe," \u2014 "),Jj=n(CAe,"A",{href:!0});var tJr=s(Jj);sko=r(tJr,"ConvBertForQuestionAnswering"),tJr.forEach(t),lko=r(CAe," (ConvBERT model)"),CAe.forEach(t),iko=i(X),Zb=n(X,"LI",{});var wAe=s(Zb);Lde=n(wAe,"STRONG",{});var aJr=s(Lde);dko=r(aJr,"data2vec-text"),aJr.forEach(t),cko=r(wAe," \u2014 "),Yj=n(wAe,"A",{href:!0});var nJr=s(Yj);fko=r(nJr,"Data2VecTextForQuestionAnswering"),nJr.forEach(t),mko=r(wAe," (Data2VecText model)"),wAe.forEach(t),gko=i(X),e5=n(X,"LI",{});var AAe=s(e5);xde=n(AAe,"STRONG",{});var sJr=s(xde);hko=r(sJr,"deberta"),sJr.forEach(t),pko=r(AAe," \u2014 "),Kj=n(AAe,"A",{href:!0});var lJr=s(Kj);uko=r(lJr,"DebertaForQuestionAnswering"),lJr.forEach(t),_ko=r(AAe," (DeBERTa model)"),AAe.forEach(t),bko=i(X),o5=n(X,"LI",{});var yAe=s(o5);$de=n(yAe,"STRONG",{});var iJr=s($de);Fko=r(iJr,"deberta-v2"),iJr.forEach(t),vko=r(yAe," \u2014 "),Zj=n(yAe,"A",{href:!0});var dJr=s(Zj);Tko=r(dJr,"DebertaV2ForQuestionAnswering"),dJr.forEach(t),Mko=r(yAe," (DeBERTa-v2 model)"),yAe.forEach(t),Eko=i(X),r5=n(X,"LI",{});var LAe=s(r5);kde=n(LAe,"STRONG",{});var cJr=s(kde);Cko=r(cJr,"distilbert"),cJr.forEach(t),wko=r(LAe," \u2014 "),eD=n(LAe,"A",{href:!0});var fJr=s(eD);Ako=r(fJr,"DistilBertForQuestionAnswering"),fJr.forEach(t),yko=r(LAe," (DistilBERT model)"),LAe.forEach(t),Lko=i(X),t5=n(X,"LI",{});var xAe=s(t5);Sde=n(xAe,"STRONG",{});var mJr=s(Sde);xko=r(mJr,"electra"),mJr.forEach(t),$ko=r(xAe," \u2014 "),oD=n(xAe,"A",{href:!0});var gJr=s(oD);kko=r(gJr,"ElectraForQuestionAnswering"),gJr.forEach(t),Sko=r(xAe," (ELECTRA model)"),xAe.forEach(t),Rko=i(X),a5=n(X,"LI",{});var $Ae=s(a5);Rde=n($Ae,"STRONG",{});var hJr=s(Rde);Bko=r(hJr,"flaubert"),hJr.forEach(t),Pko=r($Ae," \u2014 "),rD=n($Ae,"A",{href:!0});var pJr=s(rD);Iko=r(pJr,"FlaubertForQuestionAnsweringSimple"),pJr.forEach(t),qko=r($Ae," (FlauBERT model)"),$Ae.forEach(t),Nko=i(X),n5=n(X,"LI",{});var kAe=s(n5);Bde=n(kAe,"STRONG",{});var uJr=s(Bde);jko=r(uJr,"fnet"),uJr.forEach(t),Dko=r(kAe," \u2014 "),tD=n(kAe,"A",{href:!0});var _Jr=s(tD);Gko=r(_Jr,"FNetForQuestionAnswering"),_Jr.forEach(t),Oko=r(kAe," (FNet model)"),kAe.forEach(t),Vko=i(X),s5=n(X,"LI",{});var SAe=s(s5);Pde=n(SAe,"STRONG",{});var bJr=s(Pde);Xko=r(bJr,"funnel"),bJr.forEach(t),zko=r(SAe," \u2014 "),aD=n(SAe,"A",{href:!0});var FJr=s(aD);Qko=r(FJr,"FunnelForQuestionAnswering"),FJr.forEach(t),Wko=r(SAe," (Funnel Transformer model)"),SAe.forEach(t),Hko=i(X),l5=n(X,"LI",{});var RAe=s(l5);Ide=n(RAe,"STRONG",{});var vJr=s(Ide);Uko=r(vJr,"gptj"),vJr.forEach(t),Jko=r(RAe," \u2014 "),nD=n(RAe,"A",{href:!0});var TJr=s(nD);Yko=r(TJr,"GPTJForQuestionAnswering"),TJr.forEach(t),Kko=r(RAe," (GPT-J model)"),RAe.forEach(t),Zko=i(X),i5=n(X,"LI",{});var BAe=s(i5);qde=n(BAe,"STRONG",{});var MJr=s(qde);eSo=r(MJr,"ibert"),MJr.forEach(t),oSo=r(BAe," \u2014 "),sD=n(BAe,"A",{href:!0});var EJr=s(sD);rSo=r(EJr,"IBertForQuestionAnswering"),EJr.forEach(t),tSo=r(BAe," (I-BERT model)"),BAe.forEach(t),aSo=i(X),d5=n(X,"LI",{});var PAe=s(d5);Nde=n(PAe,"STRONG",{});var CJr=s(Nde);nSo=r(CJr,"layoutlmv2"),CJr.forEach(t),sSo=r(PAe," \u2014 "),lD=n(PAe,"A",{href:!0});var wJr=s(lD);lSo=r(wJr,"LayoutLMv2ForQuestionAnswering"),wJr.forEach(t),iSo=r(PAe," (LayoutLMv2 model)"),PAe.forEach(t),dSo=i(X),c5=n(X,"LI",{});var IAe=s(c5);jde=n(IAe,"STRONG",{});var AJr=s(jde);cSo=r(AJr,"led"),AJr.forEach(t),fSo=r(IAe," \u2014 "),iD=n(IAe,"A",{href:!0});var yJr=s(iD);mSo=r(yJr,"LEDForQuestionAnswering"),yJr.forEach(t),gSo=r(IAe," (LED model)"),IAe.forEach(t),hSo=i(X),f5=n(X,"LI",{});var qAe=s(f5);Dde=n(qAe,"STRONG",{});var LJr=s(Dde);pSo=r(LJr,"longformer"),LJr.forEach(t),uSo=r(qAe," \u2014 "),dD=n(qAe,"A",{href:!0});var xJr=s(dD);_So=r(xJr,"LongformerForQuestionAnswering"),xJr.forEach(t),bSo=r(qAe," (Longformer model)"),qAe.forEach(t),FSo=i(X),m5=n(X,"LI",{});var NAe=s(m5);Gde=n(NAe,"STRONG",{});var $Jr=s(Gde);vSo=r($Jr,"lxmert"),$Jr.forEach(t),TSo=r(NAe," \u2014 "),cD=n(NAe,"A",{href:!0});var kJr=s(cD);MSo=r(kJr,"LxmertForQuestionAnswering"),kJr.forEach(t),ESo=r(NAe," (LXMERT model)"),NAe.forEach(t),CSo=i(X),g5=n(X,"LI",{});var jAe=s(g5);Ode=n(jAe,"STRONG",{});var SJr=s(Ode);wSo=r(SJr,"mbart"),SJr.forEach(t),ASo=r(jAe," \u2014 "),fD=n(jAe,"A",{href:!0});var RJr=s(fD);ySo=r(RJr,"MBartForQuestionAnswering"),RJr.forEach(t),LSo=r(jAe," (mBART model)"),jAe.forEach(t),xSo=i(X),h5=n(X,"LI",{});var DAe=s(h5);Vde=n(DAe,"STRONG",{});var BJr=s(Vde);$So=r(BJr,"megatron-bert"),BJr.forEach(t),kSo=r(DAe," \u2014 "),mD=n(DAe,"A",{href:!0});var PJr=s(mD);SSo=r(PJr,"MegatronBertForQuestionAnswering"),PJr.forEach(t),RSo=r(DAe," (MegatronBert model)"),DAe.forEach(t),BSo=i(X),p5=n(X,"LI",{});var GAe=s(p5);Xde=n(GAe,"STRONG",{});var IJr=s(Xde);PSo=r(IJr,"mobilebert"),IJr.forEach(t),ISo=r(GAe," \u2014 "),gD=n(GAe,"A",{href:!0});var qJr=s(gD);qSo=r(qJr,"MobileBertForQuestionAnswering"),qJr.forEach(t),NSo=r(GAe," (MobileBERT model)"),GAe.forEach(t),jSo=i(X),u5=n(X,"LI",{});var OAe=s(u5);zde=n(OAe,"STRONG",{});var NJr=s(zde);DSo=r(NJr,"mpnet"),NJr.forEach(t),GSo=r(OAe," \u2014 "),hD=n(OAe,"A",{href:!0});var jJr=s(hD);OSo=r(jJr,"MPNetForQuestionAnswering"),jJr.forEach(t),VSo=r(OAe," (MPNet model)"),OAe.forEach(t),XSo=i(X),_5=n(X,"LI",{});var VAe=s(_5);Qde=n(VAe,"STRONG",{});var DJr=s(Qde);zSo=r(DJr,"nystromformer"),DJr.forEach(t),QSo=r(VAe," \u2014 "),pD=n(VAe,"A",{href:!0});var GJr=s(pD);WSo=r(GJr,"NystromformerForQuestionAnswering"),GJr.forEach(t),HSo=r(VAe," (Nystromformer model)"),VAe.forEach(t),USo=i(X),b5=n(X,"LI",{});var XAe=s(b5);Wde=n(XAe,"STRONG",{});var OJr=s(Wde);JSo=r(OJr,"qdqbert"),OJr.forEach(t),YSo=r(XAe," \u2014 "),Hde=n(XAe,"CODE",{});var VJr=s(Hde);KSo=r(VJr,"QDQBertForQuestionAnswering"),VJr.forEach(t),ZSo=r(XAe," (QDQBert model)"),XAe.forEach(t),eRo=i(X),F5=n(X,"LI",{});var zAe=s(F5);Ude=n(zAe,"STRONG",{});var XJr=s(Ude);oRo=r(XJr,"reformer"),XJr.forEach(t),rRo=r(zAe," \u2014 "),uD=n(zAe,"A",{href:!0});var zJr=s(uD);tRo=r(zJr,"ReformerForQuestionAnswering"),zJr.forEach(t),aRo=r(zAe," (Reformer model)"),zAe.forEach(t),nRo=i(X),v5=n(X,"LI",{});var QAe=s(v5);Jde=n(QAe,"STRONG",{});var QJr=s(Jde);sRo=r(QJr,"rembert"),QJr.forEach(t),lRo=r(QAe," \u2014 "),_D=n(QAe,"A",{href:!0});var WJr=s(_D);iRo=r(WJr,"RemBertForQuestionAnswering"),WJr.forEach(t),dRo=r(QAe," (RemBERT model)"),QAe.forEach(t),cRo=i(X),T5=n(X,"LI",{});var WAe=s(T5);Yde=n(WAe,"STRONG",{});var HJr=s(Yde);fRo=r(HJr,"roberta"),HJr.forEach(t),mRo=r(WAe," \u2014 "),bD=n(WAe,"A",{href:!0});var UJr=s(bD);gRo=r(UJr,"RobertaForQuestionAnswering"),UJr.forEach(t),hRo=r(WAe," (RoBERTa model)"),WAe.forEach(t),pRo=i(X),M5=n(X,"LI",{});var HAe=s(M5);Kde=n(HAe,"STRONG",{});var JJr=s(Kde);uRo=r(JJr,"roformer"),JJr.forEach(t),_Ro=r(HAe," \u2014 "),FD=n(HAe,"A",{href:!0});var YJr=s(FD);bRo=r(YJr,"RoFormerForQuestionAnswering"),YJr.forEach(t),FRo=r(HAe," (RoFormer model)"),HAe.forEach(t),vRo=i(X),E5=n(X,"LI",{});var UAe=s(E5);Zde=n(UAe,"STRONG",{});var KJr=s(Zde);TRo=r(KJr,"splinter"),KJr.forEach(t),MRo=r(UAe," \u2014 "),vD=n(UAe,"A",{href:!0});var ZJr=s(vD);ERo=r(ZJr,"SplinterForQuestionAnswering"),ZJr.forEach(t),CRo=r(UAe," (Splinter model)"),UAe.forEach(t),wRo=i(X),C5=n(X,"LI",{});var JAe=s(C5);ece=n(JAe,"STRONG",{});var eYr=s(ece);ARo=r(eYr,"squeezebert"),eYr.forEach(t),yRo=r(JAe," \u2014 "),TD=n(JAe,"A",{href:!0});var oYr=s(TD);LRo=r(oYr,"SqueezeBertForQuestionAnswering"),oYr.forEach(t),xRo=r(JAe," (SqueezeBERT model)"),JAe.forEach(t),$Ro=i(X),w5=n(X,"LI",{});var YAe=s(w5);oce=n(YAe,"STRONG",{});var rYr=s(oce);kRo=r(rYr,"xlm"),rYr.forEach(t),SRo=r(YAe," \u2014 "),MD=n(YAe,"A",{href:!0});var tYr=s(MD);RRo=r(tYr,"XLMForQuestionAnsweringSimple"),tYr.forEach(t),BRo=r(YAe," (XLM model)"),YAe.forEach(t),PRo=i(X),A5=n(X,"LI",{});var KAe=s(A5);rce=n(KAe,"STRONG",{});var aYr=s(rce);IRo=r(aYr,"xlm-roberta"),aYr.forEach(t),qRo=r(KAe," \u2014 "),ED=n(KAe,"A",{href:!0});var nYr=s(ED);NRo=r(nYr,"XLMRobertaForQuestionAnswering"),nYr.forEach(t),jRo=r(KAe," (XLM-RoBERTa model)"),KAe.forEach(t),DRo=i(X),y5=n(X,"LI",{});var ZAe=s(y5);tce=n(ZAe,"STRONG",{});var sYr=s(tce);GRo=r(sYr,"xlm-roberta-xl"),sYr.forEach(t),ORo=r(ZAe," \u2014 "),CD=n(ZAe,"A",{href:!0});var lYr=s(CD);VRo=r(lYr,"XLMRobertaXLForQuestionAnswering"),lYr.forEach(t),XRo=r(ZAe," (XLM-RoBERTa-XL model)"),ZAe.forEach(t),zRo=i(X),L5=n(X,"LI",{});var e0e=s(L5);ace=n(e0e,"STRONG",{});var iYr=s(ace);QRo=r(iYr,"xlnet"),iYr.forEach(t),WRo=r(e0e," \u2014 "),wD=n(e0e,"A",{href:!0});var dYr=s(wD);HRo=r(dYr,"XLNetForQuestionAnsweringSimple"),dYr.forEach(t),URo=r(e0e," (XLNet model)"),e0e.forEach(t),JRo=i(X),x5=n(X,"LI",{});var o0e=s(x5);nce=n(o0e,"STRONG",{});var cYr=s(nce);YRo=r(cYr,"yoso"),cYr.forEach(t),KRo=r(o0e," \u2014 "),AD=n(o0e,"A",{href:!0});var fYr=s(AD);ZRo=r(fYr,"YosoForQuestionAnswering"),fYr.forEach(t),eBo=r(o0e," (YOSO model)"),o0e.forEach(t),X.forEach(t),oBo=i(aa),$5=n(aa,"P",{});var r0e=s($5);rBo=r(r0e,"The model is set in evaluation mode by default using "),sce=n(r0e,"CODE",{});var mYr=s(sce);tBo=r(mYr,"model.eval()"),mYr.forEach(t),aBo=r(r0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lce=n(r0e,"CODE",{});var gYr=s(lce);nBo=r(gYr,"model.train()"),gYr.forEach(t),r0e.forEach(t),sBo=i(aa),T(k5.$$.fragment,aa),aa.forEach(t),Ps.forEach(t),lke=i(f),Ii=n(f,"H2",{class:!0});var dRe=s(Ii);S5=n(dRe,"A",{id:!0,class:!0,href:!0});var hYr=s(S5);ice=n(hYr,"SPAN",{});var pYr=s(ice);T(UA.$$.fragment,pYr),pYr.forEach(t),hYr.forEach(t),lBo=i(dRe),dce=n(dRe,"SPAN",{});var uYr=s(dce);iBo=r(uYr,"AutoModelForTableQuestionAnswering"),uYr.forEach(t),dRe.forEach(t),ike=i(f),Io=n(f,"DIV",{class:!0});var Is=s(Io);T(JA.$$.fragment,Is),dBo=i(Is),qi=n(Is,"P",{});var FU=s(qi);cBo=r(FU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),yD=n(FU,"A",{href:!0});var _Yr=s(yD);fBo=r(_Yr,"from_pretrained()"),_Yr.forEach(t),mBo=r(FU," class method or the "),LD=n(FU,"A",{href:!0});var bYr=s(LD);gBo=r(bYr,"from_config()"),bYr.forEach(t),hBo=r(FU,` class
method.`),FU.forEach(t),pBo=i(Is),YA=n(Is,"P",{});var cRe=s(YA);uBo=r(cRe,"This class cannot be instantiated directly using "),cce=n(cRe,"CODE",{});var FYr=s(cce);_Bo=r(FYr,"__init__()"),FYr.forEach(t),bBo=r(cRe," (throws an error)."),cRe.forEach(t),FBo=i(Is),it=n(Is,"DIV",{class:!0});var ZC=s(it);T(KA.$$.fragment,ZC),vBo=i(ZC),fce=n(ZC,"P",{});var vYr=s(fce);TBo=r(vYr,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),vYr.forEach(t),MBo=i(ZC),Ni=n(ZC,"P",{});var vU=s(Ni);EBo=r(vU,`Note:
Loading a model from its configuration file does `),mce=n(vU,"STRONG",{});var TYr=s(mce);CBo=r(TYr,"not"),TYr.forEach(t),wBo=r(vU,` load the model weights. It only affects the
model\u2019s configuration. Use `),xD=n(vU,"A",{href:!0});var MYr=s(xD);ABo=r(MYr,"from_pretrained()"),MYr.forEach(t),yBo=r(vU," to load the model weights."),vU.forEach(t),LBo=i(ZC),T(R5.$$.fragment,ZC),ZC.forEach(t),xBo=i(Is),oo=n(Is,"DIV",{class:!0});var na=s(oo);T(ZA.$$.fragment,na),$Bo=i(na),gce=n(na,"P",{});var EYr=s(gce);kBo=r(EYr,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),EYr.forEach(t),SBo=i(na),Sa=n(na,"P",{});var e3=s(Sa);RBo=r(e3,"The model class to instantiate is selected based on the "),hce=n(e3,"CODE",{});var CYr=s(hce);BBo=r(CYr,"model_type"),CYr.forEach(t),PBo=r(e3,` property of the config object (either
passed as an argument or loaded from `),pce=n(e3,"CODE",{});var wYr=s(pce);IBo=r(wYr,"pretrained_model_name_or_path"),wYr.forEach(t),qBo=r(e3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uce=n(e3,"CODE",{});var AYr=s(uce);NBo=r(AYr,"pretrained_model_name_or_path"),AYr.forEach(t),jBo=r(e3,":"),e3.forEach(t),DBo=i(na),_ce=n(na,"UL",{});var yYr=s(_ce);B5=n(yYr,"LI",{});var t0e=s(B5);bce=n(t0e,"STRONG",{});var LYr=s(bce);GBo=r(LYr,"tapas"),LYr.forEach(t),OBo=r(t0e," \u2014 "),$D=n(t0e,"A",{href:!0});var xYr=s($D);VBo=r(xYr,"TapasForQuestionAnswering"),xYr.forEach(t),XBo=r(t0e," (TAPAS model)"),t0e.forEach(t),yYr.forEach(t),zBo=i(na),P5=n(na,"P",{});var a0e=s(P5);QBo=r(a0e,"The model is set in evaluation mode by default using "),Fce=n(a0e,"CODE",{});var $Yr=s(Fce);WBo=r($Yr,"model.eval()"),$Yr.forEach(t),HBo=r(a0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vce=n(a0e,"CODE",{});var kYr=s(vce);UBo=r(kYr,"model.train()"),kYr.forEach(t),a0e.forEach(t),JBo=i(na),T(I5.$$.fragment,na),na.forEach(t),Is.forEach(t),dke=i(f),ji=n(f,"H2",{class:!0});var fRe=s(ji);q5=n(fRe,"A",{id:!0,class:!0,href:!0});var SYr=s(q5);Tce=n(SYr,"SPAN",{});var RYr=s(Tce);T(e0.$$.fragment,RYr),RYr.forEach(t),SYr.forEach(t),YBo=i(fRe),Mce=n(fRe,"SPAN",{});var BYr=s(Mce);KBo=r(BYr,"AutoModelForImageClassification"),BYr.forEach(t),fRe.forEach(t),cke=i(f),qo=n(f,"DIV",{class:!0});var qs=s(qo);T(o0.$$.fragment,qs),ZBo=i(qs),Di=n(qs,"P",{});var TU=s(Di);ePo=r(TU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),kD=n(TU,"A",{href:!0});var PYr=s(kD);oPo=r(PYr,"from_pretrained()"),PYr.forEach(t),rPo=r(TU," class method or the "),SD=n(TU,"A",{href:!0});var IYr=s(SD);tPo=r(IYr,"from_config()"),IYr.forEach(t),aPo=r(TU,` class
method.`),TU.forEach(t),nPo=i(qs),r0=n(qs,"P",{});var mRe=s(r0);sPo=r(mRe,"This class cannot be instantiated directly using "),Ece=n(mRe,"CODE",{});var qYr=s(Ece);lPo=r(qYr,"__init__()"),qYr.forEach(t),iPo=r(mRe," (throws an error)."),mRe.forEach(t),dPo=i(qs),dt=n(qs,"DIV",{class:!0});var o3=s(dt);T(t0.$$.fragment,o3),cPo=i(o3),Cce=n(o3,"P",{});var NYr=s(Cce);fPo=r(NYr,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),NYr.forEach(t),mPo=i(o3),Gi=n(o3,"P",{});var MU=s(Gi);gPo=r(MU,`Note:
Loading a model from its configuration file does `),wce=n(MU,"STRONG",{});var jYr=s(wce);hPo=r(jYr,"not"),jYr.forEach(t),pPo=r(MU,` load the model weights. It only affects the
model\u2019s configuration. Use `),RD=n(MU,"A",{href:!0});var DYr=s(RD);uPo=r(DYr,"from_pretrained()"),DYr.forEach(t),_Po=r(MU," to load the model weights."),MU.forEach(t),bPo=i(o3),T(N5.$$.fragment,o3),o3.forEach(t),FPo=i(qs),ro=n(qs,"DIV",{class:!0});var sa=s(ro);T(a0.$$.fragment,sa),vPo=i(sa),Ace=n(sa,"P",{});var GYr=s(Ace);TPo=r(GYr,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),GYr.forEach(t),MPo=i(sa),Ra=n(sa,"P",{});var r3=s(Ra);EPo=r(r3,"The model class to instantiate is selected based on the "),yce=n(r3,"CODE",{});var OYr=s(yce);CPo=r(OYr,"model_type"),OYr.forEach(t),wPo=r(r3,` property of the config object (either
passed as an argument or loaded from `),Lce=n(r3,"CODE",{});var VYr=s(Lce);APo=r(VYr,"pretrained_model_name_or_path"),VYr.forEach(t),yPo=r(r3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xce=n(r3,"CODE",{});var XYr=s(xce);LPo=r(XYr,"pretrained_model_name_or_path"),XYr.forEach(t),xPo=r(r3,":"),r3.forEach(t),$Po=i(sa),Fe=n(sa,"UL",{});var ye=s(Fe);j5=n(ye,"LI",{});var n0e=s(j5);$ce=n(n0e,"STRONG",{});var zYr=s($ce);kPo=r(zYr,"beit"),zYr.forEach(t),SPo=r(n0e," \u2014 "),BD=n(n0e,"A",{href:!0});var QYr=s(BD);RPo=r(QYr,"BeitForImageClassification"),QYr.forEach(t),BPo=r(n0e," (BEiT model)"),n0e.forEach(t),PPo=i(ye),D5=n(ye,"LI",{});var s0e=s(D5);kce=n(s0e,"STRONG",{});var WYr=s(kce);IPo=r(WYr,"convnext"),WYr.forEach(t),qPo=r(s0e," \u2014 "),PD=n(s0e,"A",{href:!0});var HYr=s(PD);NPo=r(HYr,"ConvNextForImageClassification"),HYr.forEach(t),jPo=r(s0e," (ConvNext model)"),s0e.forEach(t),DPo=i(ye),Fs=n(ye,"LI",{});var xx=s(Fs);Sce=n(xx,"STRONG",{});var UYr=s(Sce);GPo=r(UYr,"deit"),UYr.forEach(t),OPo=r(xx," \u2014 "),ID=n(xx,"A",{href:!0});var JYr=s(ID);VPo=r(JYr,"DeiTForImageClassification"),JYr.forEach(t),XPo=r(xx," or "),qD=n(xx,"A",{href:!0});var YYr=s(qD);zPo=r(YYr,"DeiTForImageClassificationWithTeacher"),YYr.forEach(t),QPo=r(xx," (DeiT model)"),xx.forEach(t),WPo=i(ye),G5=n(ye,"LI",{});var l0e=s(G5);Rce=n(l0e,"STRONG",{});var KYr=s(Rce);HPo=r(KYr,"imagegpt"),KYr.forEach(t),UPo=r(l0e," \u2014 "),ND=n(l0e,"A",{href:!0});var ZYr=s(ND);JPo=r(ZYr,"ImageGPTForImageClassification"),ZYr.forEach(t),YPo=r(l0e," (ImageGPT model)"),l0e.forEach(t),KPo=i(ye),ct=n(ye,"LI",{});var zc=s(ct);Bce=n(zc,"STRONG",{});var eKr=s(Bce);ZPo=r(eKr,"perceiver"),eKr.forEach(t),eIo=r(zc," \u2014 "),jD=n(zc,"A",{href:!0});var oKr=s(jD);oIo=r(oKr,"PerceiverForImageClassificationLearned"),oKr.forEach(t),rIo=r(zc," or "),DD=n(zc,"A",{href:!0});var rKr=s(DD);tIo=r(rKr,"PerceiverForImageClassificationFourier"),rKr.forEach(t),aIo=r(zc," or "),GD=n(zc,"A",{href:!0});var tKr=s(GD);nIo=r(tKr,"PerceiverForImageClassificationConvProcessing"),tKr.forEach(t),sIo=r(zc," (Perceiver model)"),zc.forEach(t),lIo=i(ye),O5=n(ye,"LI",{});var i0e=s(O5);Pce=n(i0e,"STRONG",{});var aKr=s(Pce);iIo=r(aKr,"poolformer"),aKr.forEach(t),dIo=r(i0e," \u2014 "),OD=n(i0e,"A",{href:!0});var nKr=s(OD);cIo=r(nKr,"PoolFormerForImageClassification"),nKr.forEach(t),fIo=r(i0e," (PoolFormer model)"),i0e.forEach(t),mIo=i(ye),V5=n(ye,"LI",{});var d0e=s(V5);Ice=n(d0e,"STRONG",{});var sKr=s(Ice);gIo=r(sKr,"resnet"),sKr.forEach(t),hIo=r(d0e," \u2014 "),VD=n(d0e,"A",{href:!0});var lKr=s(VD);pIo=r(lKr,"ResNetForImageClassification"),lKr.forEach(t),uIo=r(d0e," (ResNet model)"),d0e.forEach(t),_Io=i(ye),X5=n(ye,"LI",{});var c0e=s(X5);qce=n(c0e,"STRONG",{});var iKr=s(qce);bIo=r(iKr,"segformer"),iKr.forEach(t),FIo=r(c0e," \u2014 "),XD=n(c0e,"A",{href:!0});var dKr=s(XD);vIo=r(dKr,"SegformerForImageClassification"),dKr.forEach(t),TIo=r(c0e," (SegFormer model)"),c0e.forEach(t),MIo=i(ye),z5=n(ye,"LI",{});var f0e=s(z5);Nce=n(f0e,"STRONG",{});var cKr=s(Nce);EIo=r(cKr,"swin"),cKr.forEach(t),CIo=r(f0e," \u2014 "),zD=n(f0e,"A",{href:!0});var fKr=s(zD);wIo=r(fKr,"SwinForImageClassification"),fKr.forEach(t),AIo=r(f0e," (Swin model)"),f0e.forEach(t),yIo=i(ye),Q5=n(ye,"LI",{});var m0e=s(Q5);jce=n(m0e,"STRONG",{});var mKr=s(jce);LIo=r(mKr,"van"),mKr.forEach(t),xIo=r(m0e," \u2014 "),QD=n(m0e,"A",{href:!0});var gKr=s(QD);$Io=r(gKr,"VanForImageClassification"),gKr.forEach(t),kIo=r(m0e," (VAN model)"),m0e.forEach(t),SIo=i(ye),W5=n(ye,"LI",{});var g0e=s(W5);Dce=n(g0e,"STRONG",{});var hKr=s(Dce);RIo=r(hKr,"vit"),hKr.forEach(t),BIo=r(g0e," \u2014 "),WD=n(g0e,"A",{href:!0});var pKr=s(WD);PIo=r(pKr,"ViTForImageClassification"),pKr.forEach(t),IIo=r(g0e," (ViT model)"),g0e.forEach(t),ye.forEach(t),qIo=i(sa),H5=n(sa,"P",{});var h0e=s(H5);NIo=r(h0e,"The model is set in evaluation mode by default using "),Gce=n(h0e,"CODE",{});var uKr=s(Gce);jIo=r(uKr,"model.eval()"),uKr.forEach(t),DIo=r(h0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oce=n(h0e,"CODE",{});var _Kr=s(Oce);GIo=r(_Kr,"model.train()"),_Kr.forEach(t),h0e.forEach(t),OIo=i(sa),T(U5.$$.fragment,sa),sa.forEach(t),qs.forEach(t),fke=i(f),Oi=n(f,"H2",{class:!0});var gRe=s(Oi);J5=n(gRe,"A",{id:!0,class:!0,href:!0});var bKr=s(J5);Vce=n(bKr,"SPAN",{});var FKr=s(Vce);T(n0.$$.fragment,FKr),FKr.forEach(t),bKr.forEach(t),VIo=i(gRe),Xce=n(gRe,"SPAN",{});var vKr=s(Xce);XIo=r(vKr,"AutoModelForVision2Seq"),vKr.forEach(t),gRe.forEach(t),mke=i(f),No=n(f,"DIV",{class:!0});var Ns=s(No);T(s0.$$.fragment,Ns),zIo=i(Ns),Vi=n(Ns,"P",{});var EU=s(Vi);QIo=r(EU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),HD=n(EU,"A",{href:!0});var TKr=s(HD);WIo=r(TKr,"from_pretrained()"),TKr.forEach(t),HIo=r(EU," class method or the "),UD=n(EU,"A",{href:!0});var MKr=s(UD);UIo=r(MKr,"from_config()"),MKr.forEach(t),JIo=r(EU,` class
method.`),EU.forEach(t),YIo=i(Ns),l0=n(Ns,"P",{});var hRe=s(l0);KIo=r(hRe,"This class cannot be instantiated directly using "),zce=n(hRe,"CODE",{});var EKr=s(zce);ZIo=r(EKr,"__init__()"),EKr.forEach(t),eqo=r(hRe," (throws an error)."),hRe.forEach(t),oqo=i(Ns),ft=n(Ns,"DIV",{class:!0});var t3=s(ft);T(i0.$$.fragment,t3),rqo=i(t3),Qce=n(t3,"P",{});var CKr=s(Qce);tqo=r(CKr,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),CKr.forEach(t),aqo=i(t3),Xi=n(t3,"P",{});var CU=s(Xi);nqo=r(CU,`Note:
Loading a model from its configuration file does `),Wce=n(CU,"STRONG",{});var wKr=s(Wce);sqo=r(wKr,"not"),wKr.forEach(t),lqo=r(CU,` load the model weights. It only affects the
model\u2019s configuration. Use `),JD=n(CU,"A",{href:!0});var AKr=s(JD);iqo=r(AKr,"from_pretrained()"),AKr.forEach(t),dqo=r(CU," to load the model weights."),CU.forEach(t),cqo=i(t3),T(Y5.$$.fragment,t3),t3.forEach(t),fqo=i(Ns),to=n(Ns,"DIV",{class:!0});var la=s(to);T(d0.$$.fragment,la),mqo=i(la),Hce=n(la,"P",{});var yKr=s(Hce);gqo=r(yKr,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),yKr.forEach(t),hqo=i(la),Ba=n(la,"P",{});var a3=s(Ba);pqo=r(a3,"The model class to instantiate is selected based on the "),Uce=n(a3,"CODE",{});var LKr=s(Uce);uqo=r(LKr,"model_type"),LKr.forEach(t),_qo=r(a3,` property of the config object (either
passed as an argument or loaded from `),Jce=n(a3,"CODE",{});var xKr=s(Jce);bqo=r(xKr,"pretrained_model_name_or_path"),xKr.forEach(t),Fqo=r(a3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yce=n(a3,"CODE",{});var $Kr=s(Yce);vqo=r($Kr,"pretrained_model_name_or_path"),$Kr.forEach(t),Tqo=r(a3,":"),a3.forEach(t),Mqo=i(la),Kce=n(la,"UL",{});var kKr=s(Kce);K5=n(kKr,"LI",{});var p0e=s(K5);Zce=n(p0e,"STRONG",{});var SKr=s(Zce);Eqo=r(SKr,"vision-encoder-decoder"),SKr.forEach(t),Cqo=r(p0e," \u2014 "),YD=n(p0e,"A",{href:!0});var RKr=s(YD);wqo=r(RKr,"VisionEncoderDecoderModel"),RKr.forEach(t),Aqo=r(p0e," (Vision Encoder decoder model)"),p0e.forEach(t),kKr.forEach(t),yqo=i(la),Z5=n(la,"P",{});var u0e=s(Z5);Lqo=r(u0e,"The model is set in evaluation mode by default using "),efe=n(u0e,"CODE",{});var BKr=s(efe);xqo=r(BKr,"model.eval()"),BKr.forEach(t),$qo=r(u0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ofe=n(u0e,"CODE",{});var PKr=s(ofe);kqo=r(PKr,"model.train()"),PKr.forEach(t),u0e.forEach(t),Sqo=i(la),T(eF.$$.fragment,la),la.forEach(t),Ns.forEach(t),gke=i(f),zi=n(f,"H2",{class:!0});var pRe=s(zi);oF=n(pRe,"A",{id:!0,class:!0,href:!0});var IKr=s(oF);rfe=n(IKr,"SPAN",{});var qKr=s(rfe);T(c0.$$.fragment,qKr),qKr.forEach(t),IKr.forEach(t),Rqo=i(pRe),tfe=n(pRe,"SPAN",{});var NKr=s(tfe);Bqo=r(NKr,"AutoModelForAudioClassification"),NKr.forEach(t),pRe.forEach(t),hke=i(f),jo=n(f,"DIV",{class:!0});var js=s(jo);T(f0.$$.fragment,js),Pqo=i(js),Qi=n(js,"P",{});var wU=s(Qi);Iqo=r(wU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),KD=n(wU,"A",{href:!0});var jKr=s(KD);qqo=r(jKr,"from_pretrained()"),jKr.forEach(t),Nqo=r(wU," class method or the "),ZD=n(wU,"A",{href:!0});var DKr=s(ZD);jqo=r(DKr,"from_config()"),DKr.forEach(t),Dqo=r(wU,` class
method.`),wU.forEach(t),Gqo=i(js),m0=n(js,"P",{});var uRe=s(m0);Oqo=r(uRe,"This class cannot be instantiated directly using "),afe=n(uRe,"CODE",{});var GKr=s(afe);Vqo=r(GKr,"__init__()"),GKr.forEach(t),Xqo=r(uRe," (throws an error)."),uRe.forEach(t),zqo=i(js),mt=n(js,"DIV",{class:!0});var n3=s(mt);T(g0.$$.fragment,n3),Qqo=i(n3),nfe=n(n3,"P",{});var OKr=s(nfe);Wqo=r(OKr,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),OKr.forEach(t),Hqo=i(n3),Wi=n(n3,"P",{});var AU=s(Wi);Uqo=r(AU,`Note:
Loading a model from its configuration file does `),sfe=n(AU,"STRONG",{});var VKr=s(sfe);Jqo=r(VKr,"not"),VKr.forEach(t),Yqo=r(AU,` load the model weights. It only affects the
model\u2019s configuration. Use `),eG=n(AU,"A",{href:!0});var XKr=s(eG);Kqo=r(XKr,"from_pretrained()"),XKr.forEach(t),Zqo=r(AU," to load the model weights."),AU.forEach(t),eNo=i(n3),T(rF.$$.fragment,n3),n3.forEach(t),oNo=i(js),ao=n(js,"DIV",{class:!0});var ia=s(ao);T(h0.$$.fragment,ia),rNo=i(ia),lfe=n(ia,"P",{});var zKr=s(lfe);tNo=r(zKr,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),zKr.forEach(t),aNo=i(ia),Pa=n(ia,"P",{});var s3=s(Pa);nNo=r(s3,"The model class to instantiate is selected based on the "),ife=n(s3,"CODE",{});var QKr=s(ife);sNo=r(QKr,"model_type"),QKr.forEach(t),lNo=r(s3,` property of the config object (either
passed as an argument or loaded from `),dfe=n(s3,"CODE",{});var WKr=s(dfe);iNo=r(WKr,"pretrained_model_name_or_path"),WKr.forEach(t),dNo=r(s3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cfe=n(s3,"CODE",{});var HKr=s(cfe);cNo=r(HKr,"pretrained_model_name_or_path"),HKr.forEach(t),fNo=r(s3,":"),s3.forEach(t),mNo=i(ia),Ie=n(ia,"UL",{});var uo=s(Ie);tF=n(uo,"LI",{});var _0e=s(tF);ffe=n(_0e,"STRONG",{});var UKr=s(ffe);gNo=r(UKr,"data2vec-audio"),UKr.forEach(t),hNo=r(_0e," \u2014 "),oG=n(_0e,"A",{href:!0});var JKr=s(oG);pNo=r(JKr,"Data2VecAudioForSequenceClassification"),JKr.forEach(t),uNo=r(_0e," (Data2VecAudio model)"),_0e.forEach(t),_No=i(uo),aF=n(uo,"LI",{});var b0e=s(aF);mfe=n(b0e,"STRONG",{});var YKr=s(mfe);bNo=r(YKr,"hubert"),YKr.forEach(t),FNo=r(b0e," \u2014 "),rG=n(b0e,"A",{href:!0});var KKr=s(rG);vNo=r(KKr,"HubertForSequenceClassification"),KKr.forEach(t),TNo=r(b0e," (Hubert model)"),b0e.forEach(t),MNo=i(uo),nF=n(uo,"LI",{});var F0e=s(nF);gfe=n(F0e,"STRONG",{});var ZKr=s(gfe);ENo=r(ZKr,"sew"),ZKr.forEach(t),CNo=r(F0e," \u2014 "),tG=n(F0e,"A",{href:!0});var eZr=s(tG);wNo=r(eZr,"SEWForSequenceClassification"),eZr.forEach(t),ANo=r(F0e," (SEW model)"),F0e.forEach(t),yNo=i(uo),sF=n(uo,"LI",{});var v0e=s(sF);hfe=n(v0e,"STRONG",{});var oZr=s(hfe);LNo=r(oZr,"sew-d"),oZr.forEach(t),xNo=r(v0e," \u2014 "),aG=n(v0e,"A",{href:!0});var rZr=s(aG);$No=r(rZr,"SEWDForSequenceClassification"),rZr.forEach(t),kNo=r(v0e," (SEW-D model)"),v0e.forEach(t),SNo=i(uo),lF=n(uo,"LI",{});var T0e=s(lF);pfe=n(T0e,"STRONG",{});var tZr=s(pfe);RNo=r(tZr,"unispeech"),tZr.forEach(t),BNo=r(T0e," \u2014 "),nG=n(T0e,"A",{href:!0});var aZr=s(nG);PNo=r(aZr,"UniSpeechForSequenceClassification"),aZr.forEach(t),INo=r(T0e," (UniSpeech model)"),T0e.forEach(t),qNo=i(uo),iF=n(uo,"LI",{});var M0e=s(iF);ufe=n(M0e,"STRONG",{});var nZr=s(ufe);NNo=r(nZr,"unispeech-sat"),nZr.forEach(t),jNo=r(M0e," \u2014 "),sG=n(M0e,"A",{href:!0});var sZr=s(sG);DNo=r(sZr,"UniSpeechSatForSequenceClassification"),sZr.forEach(t),GNo=r(M0e," (UniSpeechSat model)"),M0e.forEach(t),ONo=i(uo),dF=n(uo,"LI",{});var E0e=s(dF);_fe=n(E0e,"STRONG",{});var lZr=s(_fe);VNo=r(lZr,"wav2vec2"),lZr.forEach(t),XNo=r(E0e," \u2014 "),lG=n(E0e,"A",{href:!0});var iZr=s(lG);zNo=r(iZr,"Wav2Vec2ForSequenceClassification"),iZr.forEach(t),QNo=r(E0e," (Wav2Vec2 model)"),E0e.forEach(t),WNo=i(uo),cF=n(uo,"LI",{});var C0e=s(cF);bfe=n(C0e,"STRONG",{});var dZr=s(bfe);HNo=r(dZr,"wavlm"),dZr.forEach(t),UNo=r(C0e," \u2014 "),iG=n(C0e,"A",{href:!0});var cZr=s(iG);JNo=r(cZr,"WavLMForSequenceClassification"),cZr.forEach(t),YNo=r(C0e," (WavLM model)"),C0e.forEach(t),uo.forEach(t),KNo=i(ia),fF=n(ia,"P",{});var w0e=s(fF);ZNo=r(w0e,"The model is set in evaluation mode by default using "),Ffe=n(w0e,"CODE",{});var fZr=s(Ffe);ejo=r(fZr,"model.eval()"),fZr.forEach(t),ojo=r(w0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vfe=n(w0e,"CODE",{});var mZr=s(vfe);rjo=r(mZr,"model.train()"),mZr.forEach(t),w0e.forEach(t),tjo=i(ia),T(mF.$$.fragment,ia),ia.forEach(t),js.forEach(t),pke=i(f),Hi=n(f,"H2",{class:!0});var _Re=s(Hi);gF=n(_Re,"A",{id:!0,class:!0,href:!0});var gZr=s(gF);Tfe=n(gZr,"SPAN",{});var hZr=s(Tfe);T(p0.$$.fragment,hZr),hZr.forEach(t),gZr.forEach(t),ajo=i(_Re),Mfe=n(_Re,"SPAN",{});var pZr=s(Mfe);njo=r(pZr,"AutoModelForAudioFrameClassification"),pZr.forEach(t),_Re.forEach(t),uke=i(f),Do=n(f,"DIV",{class:!0});var Ds=s(Do);T(u0.$$.fragment,Ds),sjo=i(Ds),Ui=n(Ds,"P",{});var yU=s(Ui);ljo=r(yU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),dG=n(yU,"A",{href:!0});var uZr=s(dG);ijo=r(uZr,"from_pretrained()"),uZr.forEach(t),djo=r(yU," class method or the "),cG=n(yU,"A",{href:!0});var _Zr=s(cG);cjo=r(_Zr,"from_config()"),_Zr.forEach(t),fjo=r(yU,` class
method.`),yU.forEach(t),mjo=i(Ds),_0=n(Ds,"P",{});var bRe=s(_0);gjo=r(bRe,"This class cannot be instantiated directly using "),Efe=n(bRe,"CODE",{});var bZr=s(Efe);hjo=r(bZr,"__init__()"),bZr.forEach(t),pjo=r(bRe," (throws an error)."),bRe.forEach(t),ujo=i(Ds),gt=n(Ds,"DIV",{class:!0});var l3=s(gt);T(b0.$$.fragment,l3),_jo=i(l3),Cfe=n(l3,"P",{});var FZr=s(Cfe);bjo=r(FZr,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),FZr.forEach(t),Fjo=i(l3),Ji=n(l3,"P",{});var LU=s(Ji);vjo=r(LU,`Note:
Loading a model from its configuration file does `),wfe=n(LU,"STRONG",{});var vZr=s(wfe);Tjo=r(vZr,"not"),vZr.forEach(t),Mjo=r(LU,` load the model weights. It only affects the
model\u2019s configuration. Use `),fG=n(LU,"A",{href:!0});var TZr=s(fG);Ejo=r(TZr,"from_pretrained()"),TZr.forEach(t),Cjo=r(LU," to load the model weights."),LU.forEach(t),wjo=i(l3),T(hF.$$.fragment,l3),l3.forEach(t),Ajo=i(Ds),no=n(Ds,"DIV",{class:!0});var da=s(no);T(F0.$$.fragment,da),yjo=i(da),Afe=n(da,"P",{});var MZr=s(Afe);Ljo=r(MZr,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),MZr.forEach(t),xjo=i(da),Ia=n(da,"P",{});var i3=s(Ia);$jo=r(i3,"The model class to instantiate is selected based on the "),yfe=n(i3,"CODE",{});var EZr=s(yfe);kjo=r(EZr,"model_type"),EZr.forEach(t),Sjo=r(i3,` property of the config object (either
passed as an argument or loaded from `),Lfe=n(i3,"CODE",{});var CZr=s(Lfe);Rjo=r(CZr,"pretrained_model_name_or_path"),CZr.forEach(t),Bjo=r(i3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xfe=n(i3,"CODE",{});var wZr=s(xfe);Pjo=r(wZr,"pretrained_model_name_or_path"),wZr.forEach(t),Ijo=r(i3,":"),i3.forEach(t),qjo=i(da),qa=n(da,"UL",{});var d3=s(qa);pF=n(d3,"LI",{});var A0e=s(pF);$fe=n(A0e,"STRONG",{});var AZr=s($fe);Njo=r(AZr,"data2vec-audio"),AZr.forEach(t),jjo=r(A0e," \u2014 "),mG=n(A0e,"A",{href:!0});var yZr=s(mG);Djo=r(yZr,"Data2VecAudioForAudioFrameClassification"),yZr.forEach(t),Gjo=r(A0e," (Data2VecAudio model)"),A0e.forEach(t),Ojo=i(d3),uF=n(d3,"LI",{});var y0e=s(uF);kfe=n(y0e,"STRONG",{});var LZr=s(kfe);Vjo=r(LZr,"unispeech-sat"),LZr.forEach(t),Xjo=r(y0e," \u2014 "),gG=n(y0e,"A",{href:!0});var xZr=s(gG);zjo=r(xZr,"UniSpeechSatForAudioFrameClassification"),xZr.forEach(t),Qjo=r(y0e," (UniSpeechSat model)"),y0e.forEach(t),Wjo=i(d3),_F=n(d3,"LI",{});var L0e=s(_F);Sfe=n(L0e,"STRONG",{});var $Zr=s(Sfe);Hjo=r($Zr,"wav2vec2"),$Zr.forEach(t),Ujo=r(L0e," \u2014 "),hG=n(L0e,"A",{href:!0});var kZr=s(hG);Jjo=r(kZr,"Wav2Vec2ForAudioFrameClassification"),kZr.forEach(t),Yjo=r(L0e," (Wav2Vec2 model)"),L0e.forEach(t),Kjo=i(d3),bF=n(d3,"LI",{});var x0e=s(bF);Rfe=n(x0e,"STRONG",{});var SZr=s(Rfe);Zjo=r(SZr,"wavlm"),SZr.forEach(t),eDo=r(x0e," \u2014 "),pG=n(x0e,"A",{href:!0});var RZr=s(pG);oDo=r(RZr,"WavLMForAudioFrameClassification"),RZr.forEach(t),rDo=r(x0e," (WavLM model)"),x0e.forEach(t),d3.forEach(t),tDo=i(da),FF=n(da,"P",{});var $0e=s(FF);aDo=r($0e,"The model is set in evaluation mode by default using "),Bfe=n($0e,"CODE",{});var BZr=s(Bfe);nDo=r(BZr,"model.eval()"),BZr.forEach(t),sDo=r($0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pfe=n($0e,"CODE",{});var PZr=s(Pfe);lDo=r(PZr,"model.train()"),PZr.forEach(t),$0e.forEach(t),iDo=i(da),T(vF.$$.fragment,da),da.forEach(t),Ds.forEach(t),_ke=i(f),Yi=n(f,"H2",{class:!0});var FRe=s(Yi);TF=n(FRe,"A",{id:!0,class:!0,href:!0});var IZr=s(TF);Ife=n(IZr,"SPAN",{});var qZr=s(Ife);T(v0.$$.fragment,qZr),qZr.forEach(t),IZr.forEach(t),dDo=i(FRe),qfe=n(FRe,"SPAN",{});var NZr=s(qfe);cDo=r(NZr,"AutoModelForCTC"),NZr.forEach(t),FRe.forEach(t),bke=i(f),Go=n(f,"DIV",{class:!0});var Gs=s(Go);T(T0.$$.fragment,Gs),fDo=i(Gs),Ki=n(Gs,"P",{});var xU=s(Ki);mDo=r(xU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),uG=n(xU,"A",{href:!0});var jZr=s(uG);gDo=r(jZr,"from_pretrained()"),jZr.forEach(t),hDo=r(xU," class method or the "),_G=n(xU,"A",{href:!0});var DZr=s(_G);pDo=r(DZr,"from_config()"),DZr.forEach(t),uDo=r(xU,` class
method.`),xU.forEach(t),_Do=i(Gs),M0=n(Gs,"P",{});var vRe=s(M0);bDo=r(vRe,"This class cannot be instantiated directly using "),Nfe=n(vRe,"CODE",{});var GZr=s(Nfe);FDo=r(GZr,"__init__()"),GZr.forEach(t),vDo=r(vRe," (throws an error)."),vRe.forEach(t),TDo=i(Gs),ht=n(Gs,"DIV",{class:!0});var c3=s(ht);T(E0.$$.fragment,c3),MDo=i(c3),jfe=n(c3,"P",{});var OZr=s(jfe);EDo=r(OZr,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),OZr.forEach(t),CDo=i(c3),Zi=n(c3,"P",{});var $U=s(Zi);wDo=r($U,`Note:
Loading a model from its configuration file does `),Dfe=n($U,"STRONG",{});var VZr=s(Dfe);ADo=r(VZr,"not"),VZr.forEach(t),yDo=r($U,` load the model weights. It only affects the
model\u2019s configuration. Use `),bG=n($U,"A",{href:!0});var XZr=s(bG);LDo=r(XZr,"from_pretrained()"),XZr.forEach(t),xDo=r($U," to load the model weights."),$U.forEach(t),$Do=i(c3),T(MF.$$.fragment,c3),c3.forEach(t),kDo=i(Gs),so=n(Gs,"DIV",{class:!0});var ca=s(so);T(C0.$$.fragment,ca),SDo=i(ca),Gfe=n(ca,"P",{});var zZr=s(Gfe);RDo=r(zZr,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),zZr.forEach(t),BDo=i(ca),Na=n(ca,"P",{});var f3=s(Na);PDo=r(f3,"The model class to instantiate is selected based on the "),Ofe=n(f3,"CODE",{});var QZr=s(Ofe);IDo=r(QZr,"model_type"),QZr.forEach(t),qDo=r(f3,` property of the config object (either
passed as an argument or loaded from `),Vfe=n(f3,"CODE",{});var WZr=s(Vfe);NDo=r(WZr,"pretrained_model_name_or_path"),WZr.forEach(t),jDo=r(f3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xfe=n(f3,"CODE",{});var HZr=s(Xfe);DDo=r(HZr,"pretrained_model_name_or_path"),HZr.forEach(t),GDo=r(f3,":"),f3.forEach(t),ODo=i(ca),qe=n(ca,"UL",{});var _o=s(qe);EF=n(_o,"LI",{});var k0e=s(EF);zfe=n(k0e,"STRONG",{});var UZr=s(zfe);VDo=r(UZr,"data2vec-audio"),UZr.forEach(t),XDo=r(k0e," \u2014 "),FG=n(k0e,"A",{href:!0});var JZr=s(FG);zDo=r(JZr,"Data2VecAudioForCTC"),JZr.forEach(t),QDo=r(k0e," (Data2VecAudio model)"),k0e.forEach(t),WDo=i(_o),CF=n(_o,"LI",{});var S0e=s(CF);Qfe=n(S0e,"STRONG",{});var YZr=s(Qfe);HDo=r(YZr,"hubert"),YZr.forEach(t),UDo=r(S0e," \u2014 "),vG=n(S0e,"A",{href:!0});var KZr=s(vG);JDo=r(KZr,"HubertForCTC"),KZr.forEach(t),YDo=r(S0e," (Hubert model)"),S0e.forEach(t),KDo=i(_o),wF=n(_o,"LI",{});var R0e=s(wF);Wfe=n(R0e,"STRONG",{});var ZZr=s(Wfe);ZDo=r(ZZr,"sew"),ZZr.forEach(t),eGo=r(R0e," \u2014 "),TG=n(R0e,"A",{href:!0});var eet=s(TG);oGo=r(eet,"SEWForCTC"),eet.forEach(t),rGo=r(R0e," (SEW model)"),R0e.forEach(t),tGo=i(_o),AF=n(_o,"LI",{});var B0e=s(AF);Hfe=n(B0e,"STRONG",{});var oet=s(Hfe);aGo=r(oet,"sew-d"),oet.forEach(t),nGo=r(B0e," \u2014 "),MG=n(B0e,"A",{href:!0});var ret=s(MG);sGo=r(ret,"SEWDForCTC"),ret.forEach(t),lGo=r(B0e," (SEW-D model)"),B0e.forEach(t),iGo=i(_o),yF=n(_o,"LI",{});var P0e=s(yF);Ufe=n(P0e,"STRONG",{});var tet=s(Ufe);dGo=r(tet,"unispeech"),tet.forEach(t),cGo=r(P0e," \u2014 "),EG=n(P0e,"A",{href:!0});var aet=s(EG);fGo=r(aet,"UniSpeechForCTC"),aet.forEach(t),mGo=r(P0e," (UniSpeech model)"),P0e.forEach(t),gGo=i(_o),LF=n(_o,"LI",{});var I0e=s(LF);Jfe=n(I0e,"STRONG",{});var net=s(Jfe);hGo=r(net,"unispeech-sat"),net.forEach(t),pGo=r(I0e," \u2014 "),CG=n(I0e,"A",{href:!0});var set=s(CG);uGo=r(set,"UniSpeechSatForCTC"),set.forEach(t),_Go=r(I0e," (UniSpeechSat model)"),I0e.forEach(t),bGo=i(_o),xF=n(_o,"LI",{});var q0e=s(xF);Yfe=n(q0e,"STRONG",{});var iet=s(Yfe);FGo=r(iet,"wav2vec2"),iet.forEach(t),vGo=r(q0e," \u2014 "),wG=n(q0e,"A",{href:!0});var det=s(wG);TGo=r(det,"Wav2Vec2ForCTC"),det.forEach(t),MGo=r(q0e," (Wav2Vec2 model)"),q0e.forEach(t),EGo=i(_o),$F=n(_o,"LI",{});var N0e=s($F);Kfe=n(N0e,"STRONG",{});var cet=s(Kfe);CGo=r(cet,"wavlm"),cet.forEach(t),wGo=r(N0e," \u2014 "),AG=n(N0e,"A",{href:!0});var fet=s(AG);AGo=r(fet,"WavLMForCTC"),fet.forEach(t),yGo=r(N0e," (WavLM model)"),N0e.forEach(t),_o.forEach(t),LGo=i(ca),kF=n(ca,"P",{});var j0e=s(kF);xGo=r(j0e,"The model is set in evaluation mode by default using "),Zfe=n(j0e,"CODE",{});var met=s(Zfe);$Go=r(met,"model.eval()"),met.forEach(t),kGo=r(j0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eme=n(j0e,"CODE",{});var get=s(eme);SGo=r(get,"model.train()"),get.forEach(t),j0e.forEach(t),RGo=i(ca),T(SF.$$.fragment,ca),ca.forEach(t),Gs.forEach(t),Fke=i(f),ed=n(f,"H2",{class:!0});var TRe=s(ed);RF=n(TRe,"A",{id:!0,class:!0,href:!0});var het=s(RF);ome=n(het,"SPAN",{});var pet=s(ome);T(w0.$$.fragment,pet),pet.forEach(t),het.forEach(t),BGo=i(TRe),rme=n(TRe,"SPAN",{});var uet=s(rme);PGo=r(uet,"AutoModelForSpeechSeq2Seq"),uet.forEach(t),TRe.forEach(t),vke=i(f),Oo=n(f,"DIV",{class:!0});var Os=s(Oo);T(A0.$$.fragment,Os),IGo=i(Os),od=n(Os,"P",{});var kU=s(od);qGo=r(kU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),yG=n(kU,"A",{href:!0});var _et=s(yG);NGo=r(_et,"from_pretrained()"),_et.forEach(t),jGo=r(kU," class method or the "),LG=n(kU,"A",{href:!0});var bet=s(LG);DGo=r(bet,"from_config()"),bet.forEach(t),GGo=r(kU,` class
method.`),kU.forEach(t),OGo=i(Os),y0=n(Os,"P",{});var MRe=s(y0);VGo=r(MRe,"This class cannot be instantiated directly using "),tme=n(MRe,"CODE",{});var Fet=s(tme);XGo=r(Fet,"__init__()"),Fet.forEach(t),zGo=r(MRe," (throws an error)."),MRe.forEach(t),QGo=i(Os),pt=n(Os,"DIV",{class:!0});var m3=s(pt);T(L0.$$.fragment,m3),WGo=i(m3),ame=n(m3,"P",{});var vet=s(ame);HGo=r(vet,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),vet.forEach(t),UGo=i(m3),rd=n(m3,"P",{});var SU=s(rd);JGo=r(SU,`Note:
Loading a model from its configuration file does `),nme=n(SU,"STRONG",{});var Tet=s(nme);YGo=r(Tet,"not"),Tet.forEach(t),KGo=r(SU,` load the model weights. It only affects the
model\u2019s configuration. Use `),xG=n(SU,"A",{href:!0});var Met=s(xG);ZGo=r(Met,"from_pretrained()"),Met.forEach(t),eOo=r(SU," to load the model weights."),SU.forEach(t),oOo=i(m3),T(BF.$$.fragment,m3),m3.forEach(t),rOo=i(Os),lo=n(Os,"DIV",{class:!0});var fa=s(lo);T(x0.$$.fragment,fa),tOo=i(fa),sme=n(fa,"P",{});var Eet=s(sme);aOo=r(Eet,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Eet.forEach(t),nOo=i(fa),ja=n(fa,"P",{});var g3=s(ja);sOo=r(g3,"The model class to instantiate is selected based on the "),lme=n(g3,"CODE",{});var Cet=s(lme);lOo=r(Cet,"model_type"),Cet.forEach(t),iOo=r(g3,` property of the config object (either
passed as an argument or loaded from `),ime=n(g3,"CODE",{});var wet=s(ime);dOo=r(wet,"pretrained_model_name_or_path"),wet.forEach(t),cOo=r(g3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dme=n(g3,"CODE",{});var Aet=s(dme);fOo=r(Aet,"pretrained_model_name_or_path"),Aet.forEach(t),mOo=r(g3,":"),g3.forEach(t),gOo=i(fa),$0=n(fa,"UL",{});var ERe=s($0);PF=n(ERe,"LI",{});var D0e=s(PF);cme=n(D0e,"STRONG",{});var yet=s(cme);hOo=r(yet,"speech-encoder-decoder"),yet.forEach(t),pOo=r(D0e," \u2014 "),$G=n(D0e,"A",{href:!0});var Let=s($G);uOo=r(Let,"SpeechEncoderDecoderModel"),Let.forEach(t),_Oo=r(D0e," (Speech Encoder decoder model)"),D0e.forEach(t),bOo=i(ERe),IF=n(ERe,"LI",{});var G0e=s(IF);fme=n(G0e,"STRONG",{});var xet=s(fme);FOo=r(xet,"speech_to_text"),xet.forEach(t),vOo=r(G0e," \u2014 "),kG=n(G0e,"A",{href:!0});var $et=s(kG);TOo=r($et,"Speech2TextForConditionalGeneration"),$et.forEach(t),MOo=r(G0e," (Speech2Text model)"),G0e.forEach(t),ERe.forEach(t),EOo=i(fa),qF=n(fa,"P",{});var O0e=s(qF);COo=r(O0e,"The model is set in evaluation mode by default using "),mme=n(O0e,"CODE",{});var ket=s(mme);wOo=r(ket,"model.eval()"),ket.forEach(t),AOo=r(O0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gme=n(O0e,"CODE",{});var Set=s(gme);yOo=r(Set,"model.train()"),Set.forEach(t),O0e.forEach(t),LOo=i(fa),T(NF.$$.fragment,fa),fa.forEach(t),Os.forEach(t),Tke=i(f),td=n(f,"H2",{class:!0});var CRe=s(td);jF=n(CRe,"A",{id:!0,class:!0,href:!0});var Ret=s(jF);hme=n(Ret,"SPAN",{});var Bet=s(hme);T(k0.$$.fragment,Bet),Bet.forEach(t),Ret.forEach(t),xOo=i(CRe),pme=n(CRe,"SPAN",{});var Pet=s(pme);$Oo=r(Pet,"AutoModelForAudioXVector"),Pet.forEach(t),CRe.forEach(t),Mke=i(f),Vo=n(f,"DIV",{class:!0});var Vs=s(Vo);T(S0.$$.fragment,Vs),kOo=i(Vs),ad=n(Vs,"P",{});var RU=s(ad);SOo=r(RU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),SG=n(RU,"A",{href:!0});var Iet=s(SG);ROo=r(Iet,"from_pretrained()"),Iet.forEach(t),BOo=r(RU," class method or the "),RG=n(RU,"A",{href:!0});var qet=s(RG);POo=r(qet,"from_config()"),qet.forEach(t),IOo=r(RU,` class
method.`),RU.forEach(t),qOo=i(Vs),R0=n(Vs,"P",{});var wRe=s(R0);NOo=r(wRe,"This class cannot be instantiated directly using "),ume=n(wRe,"CODE",{});var Net=s(ume);jOo=r(Net,"__init__()"),Net.forEach(t),DOo=r(wRe," (throws an error)."),wRe.forEach(t),GOo=i(Vs),ut=n(Vs,"DIV",{class:!0});var h3=s(ut);T(B0.$$.fragment,h3),OOo=i(h3),_me=n(h3,"P",{});var jet=s(_me);VOo=r(jet,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),jet.forEach(t),XOo=i(h3),nd=n(h3,"P",{});var BU=s(nd);zOo=r(BU,`Note:
Loading a model from its configuration file does `),bme=n(BU,"STRONG",{});var Det=s(bme);QOo=r(Det,"not"),Det.forEach(t),WOo=r(BU,` load the model weights. It only affects the
model\u2019s configuration. Use `),BG=n(BU,"A",{href:!0});var Get=s(BG);HOo=r(Get,"from_pretrained()"),Get.forEach(t),UOo=r(BU," to load the model weights."),BU.forEach(t),JOo=i(h3),T(DF.$$.fragment,h3),h3.forEach(t),YOo=i(Vs),io=n(Vs,"DIV",{class:!0});var ma=s(io);T(P0.$$.fragment,ma),KOo=i(ma),Fme=n(ma,"P",{});var Oet=s(Fme);ZOo=r(Oet,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Oet.forEach(t),eVo=i(ma),Da=n(ma,"P",{});var p3=s(Da);oVo=r(p3,"The model class to instantiate is selected based on the "),vme=n(p3,"CODE",{});var Vet=s(vme);rVo=r(Vet,"model_type"),Vet.forEach(t),tVo=r(p3,` property of the config object (either
passed as an argument or loaded from `),Tme=n(p3,"CODE",{});var Xet=s(Tme);aVo=r(Xet,"pretrained_model_name_or_path"),Xet.forEach(t),nVo=r(p3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mme=n(p3,"CODE",{});var zet=s(Mme);sVo=r(zet,"pretrained_model_name_or_path"),zet.forEach(t),lVo=r(p3,":"),p3.forEach(t),iVo=i(ma),Ga=n(ma,"UL",{});var u3=s(Ga);GF=n(u3,"LI",{});var V0e=s(GF);Eme=n(V0e,"STRONG",{});var Qet=s(Eme);dVo=r(Qet,"data2vec-audio"),Qet.forEach(t),cVo=r(V0e," \u2014 "),PG=n(V0e,"A",{href:!0});var Wet=s(PG);fVo=r(Wet,"Data2VecAudioForXVector"),Wet.forEach(t),mVo=r(V0e," (Data2VecAudio model)"),V0e.forEach(t),gVo=i(u3),OF=n(u3,"LI",{});var X0e=s(OF);Cme=n(X0e,"STRONG",{});var Het=s(Cme);hVo=r(Het,"unispeech-sat"),Het.forEach(t),pVo=r(X0e," \u2014 "),IG=n(X0e,"A",{href:!0});var Uet=s(IG);uVo=r(Uet,"UniSpeechSatForXVector"),Uet.forEach(t),_Vo=r(X0e," (UniSpeechSat model)"),X0e.forEach(t),bVo=i(u3),VF=n(u3,"LI",{});var z0e=s(VF);wme=n(z0e,"STRONG",{});var Jet=s(wme);FVo=r(Jet,"wav2vec2"),Jet.forEach(t),vVo=r(z0e," \u2014 "),qG=n(z0e,"A",{href:!0});var Yet=s(qG);TVo=r(Yet,"Wav2Vec2ForXVector"),Yet.forEach(t),MVo=r(z0e," (Wav2Vec2 model)"),z0e.forEach(t),EVo=i(u3),XF=n(u3,"LI",{});var Q0e=s(XF);Ame=n(Q0e,"STRONG",{});var Ket=s(Ame);CVo=r(Ket,"wavlm"),Ket.forEach(t),wVo=r(Q0e," \u2014 "),NG=n(Q0e,"A",{href:!0});var Zet=s(NG);AVo=r(Zet,"WavLMForXVector"),Zet.forEach(t),yVo=r(Q0e," (WavLM model)"),Q0e.forEach(t),u3.forEach(t),LVo=i(ma),zF=n(ma,"P",{});var W0e=s(zF);xVo=r(W0e,"The model is set in evaluation mode by default using "),yme=n(W0e,"CODE",{});var eot=s(yme);$Vo=r(eot,"model.eval()"),eot.forEach(t),kVo=r(W0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lme=n(W0e,"CODE",{});var oot=s(Lme);SVo=r(oot,"model.train()"),oot.forEach(t),W0e.forEach(t),RVo=i(ma),T(QF.$$.fragment,ma),ma.forEach(t),Vs.forEach(t),Eke=i(f),sd=n(f,"H2",{class:!0});var ARe=s(sd);WF=n(ARe,"A",{id:!0,class:!0,href:!0});var rot=s(WF);xme=n(rot,"SPAN",{});var tot=s(xme);T(I0.$$.fragment,tot),tot.forEach(t),rot.forEach(t),BVo=i(ARe),$me=n(ARe,"SPAN",{});var aot=s($me);PVo=r(aot,"AutoModelForMaskedImageModeling"),aot.forEach(t),ARe.forEach(t),Cke=i(f),Xo=n(f,"DIV",{class:!0});var Xs=s(Xo);T(q0.$$.fragment,Xs),IVo=i(Xs),ld=n(Xs,"P",{});var PU=s(ld);qVo=r(PU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),jG=n(PU,"A",{href:!0});var not=s(jG);NVo=r(not,"from_pretrained()"),not.forEach(t),jVo=r(PU," class method or the "),DG=n(PU,"A",{href:!0});var sot=s(DG);DVo=r(sot,"from_config()"),sot.forEach(t),GVo=r(PU,` class
method.`),PU.forEach(t),OVo=i(Xs),N0=n(Xs,"P",{});var yRe=s(N0);VVo=r(yRe,"This class cannot be instantiated directly using "),kme=n(yRe,"CODE",{});var lot=s(kme);XVo=r(lot,"__init__()"),lot.forEach(t),zVo=r(yRe," (throws an error)."),yRe.forEach(t),QVo=i(Xs),_t=n(Xs,"DIV",{class:!0});var _3=s(_t);T(j0.$$.fragment,_3),WVo=i(_3),Sme=n(_3,"P",{});var iot=s(Sme);HVo=r(iot,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),iot.forEach(t),UVo=i(_3),id=n(_3,"P",{});var IU=s(id);JVo=r(IU,`Note:
Loading a model from its configuration file does `),Rme=n(IU,"STRONG",{});var dot=s(Rme);YVo=r(dot,"not"),dot.forEach(t),KVo=r(IU,` load the model weights. It only affects the
model\u2019s configuration. Use `),GG=n(IU,"A",{href:!0});var cot=s(GG);ZVo=r(cot,"from_pretrained()"),cot.forEach(t),eXo=r(IU," to load the model weights."),IU.forEach(t),oXo=i(_3),T(HF.$$.fragment,_3),_3.forEach(t),rXo=i(Xs),co=n(Xs,"DIV",{class:!0});var ga=s(co);T(D0.$$.fragment,ga),tXo=i(ga),Bme=n(ga,"P",{});var fot=s(Bme);aXo=r(fot,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),fot.forEach(t),nXo=i(ga),Oa=n(ga,"P",{});var b3=s(Oa);sXo=r(b3,"The model class to instantiate is selected based on the "),Pme=n(b3,"CODE",{});var mot=s(Pme);lXo=r(mot,"model_type"),mot.forEach(t),iXo=r(b3,` property of the config object (either
passed as an argument or loaded from `),Ime=n(b3,"CODE",{});var got=s(Ime);dXo=r(got,"pretrained_model_name_or_path"),got.forEach(t),cXo=r(b3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qme=n(b3,"CODE",{});var hot=s(qme);fXo=r(hot,"pretrained_model_name_or_path"),hot.forEach(t),mXo=r(b3,":"),b3.forEach(t),gXo=i(ga),dd=n(ga,"UL",{});var qU=s(dd);UF=n(qU,"LI",{});var H0e=s(UF);Nme=n(H0e,"STRONG",{});var pot=s(Nme);hXo=r(pot,"deit"),pot.forEach(t),pXo=r(H0e," \u2014 "),OG=n(H0e,"A",{href:!0});var uot=s(OG);uXo=r(uot,"DeiTForMaskedImageModeling"),uot.forEach(t),_Xo=r(H0e," (DeiT model)"),H0e.forEach(t),bXo=i(qU),JF=n(qU,"LI",{});var U0e=s(JF);jme=n(U0e,"STRONG",{});var _ot=s(jme);FXo=r(_ot,"swin"),_ot.forEach(t),vXo=r(U0e," \u2014 "),VG=n(U0e,"A",{href:!0});var bot=s(VG);TXo=r(bot,"SwinForMaskedImageModeling"),bot.forEach(t),MXo=r(U0e," (Swin model)"),U0e.forEach(t),EXo=i(qU),YF=n(qU,"LI",{});var J0e=s(YF);Dme=n(J0e,"STRONG",{});var Fot=s(Dme);CXo=r(Fot,"vit"),Fot.forEach(t),wXo=r(J0e," \u2014 "),XG=n(J0e,"A",{href:!0});var vot=s(XG);AXo=r(vot,"ViTForMaskedImageModeling"),vot.forEach(t),yXo=r(J0e," (ViT model)"),J0e.forEach(t),qU.forEach(t),LXo=i(ga),KF=n(ga,"P",{});var Y0e=s(KF);xXo=r(Y0e,"The model is set in evaluation mode by default using "),Gme=n(Y0e,"CODE",{});var Tot=s(Gme);$Xo=r(Tot,"model.eval()"),Tot.forEach(t),kXo=r(Y0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ome=n(Y0e,"CODE",{});var Mot=s(Ome);SXo=r(Mot,"model.train()"),Mot.forEach(t),Y0e.forEach(t),RXo=i(ga),T(ZF.$$.fragment,ga),ga.forEach(t),Xs.forEach(t),wke=i(f),cd=n(f,"H2",{class:!0});var LRe=s(cd);ev=n(LRe,"A",{id:!0,class:!0,href:!0});var Eot=s(ev);Vme=n(Eot,"SPAN",{});var Cot=s(Vme);T(G0.$$.fragment,Cot),Cot.forEach(t),Eot.forEach(t),BXo=i(LRe),Xme=n(LRe,"SPAN",{});var wot=s(Xme);PXo=r(wot,"AutoModelForObjectDetection"),wot.forEach(t),LRe.forEach(t),Ake=i(f),zo=n(f,"DIV",{class:!0});var zs=s(zo);T(O0.$$.fragment,zs),IXo=i(zs),fd=n(zs,"P",{});var NU=s(fd);qXo=r(NU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),zG=n(NU,"A",{href:!0});var Aot=s(zG);NXo=r(Aot,"from_pretrained()"),Aot.forEach(t),jXo=r(NU," class method or the "),QG=n(NU,"A",{href:!0});var yot=s(QG);DXo=r(yot,"from_config()"),yot.forEach(t),GXo=r(NU,` class
method.`),NU.forEach(t),OXo=i(zs),V0=n(zs,"P",{});var xRe=s(V0);VXo=r(xRe,"This class cannot be instantiated directly using "),zme=n(xRe,"CODE",{});var Lot=s(zme);XXo=r(Lot,"__init__()"),Lot.forEach(t),zXo=r(xRe," (throws an error)."),xRe.forEach(t),QXo=i(zs),bt=n(zs,"DIV",{class:!0});var F3=s(bt);T(X0.$$.fragment,F3),WXo=i(F3),Qme=n(F3,"P",{});var xot=s(Qme);HXo=r(xot,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),xot.forEach(t),UXo=i(F3),md=n(F3,"P",{});var jU=s(md);JXo=r(jU,`Note:
Loading a model from its configuration file does `),Wme=n(jU,"STRONG",{});var $ot=s(Wme);YXo=r($ot,"not"),$ot.forEach(t),KXo=r(jU,` load the model weights. It only affects the
model\u2019s configuration. Use `),WG=n(jU,"A",{href:!0});var kot=s(WG);ZXo=r(kot,"from_pretrained()"),kot.forEach(t),ezo=r(jU," to load the model weights."),jU.forEach(t),ozo=i(F3),T(ov.$$.fragment,F3),F3.forEach(t),rzo=i(zs),fo=n(zs,"DIV",{class:!0});var ha=s(fo);T(z0.$$.fragment,ha),tzo=i(ha),Hme=n(ha,"P",{});var Sot=s(Hme);azo=r(Sot,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Sot.forEach(t),nzo=i(ha),Va=n(ha,"P",{});var v3=s(Va);szo=r(v3,"The model class to instantiate is selected based on the "),Ume=n(v3,"CODE",{});var Rot=s(Ume);lzo=r(Rot,"model_type"),Rot.forEach(t),izo=r(v3,` property of the config object (either
passed as an argument or loaded from `),Jme=n(v3,"CODE",{});var Bot=s(Jme);dzo=r(Bot,"pretrained_model_name_or_path"),Bot.forEach(t),czo=r(v3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yme=n(v3,"CODE",{});var Pot=s(Yme);fzo=r(Pot,"pretrained_model_name_or_path"),Pot.forEach(t),mzo=r(v3,":"),v3.forEach(t),gzo=i(ha),Kme=n(ha,"UL",{});var Iot=s(Kme);rv=n(Iot,"LI",{});var K0e=s(rv);Zme=n(K0e,"STRONG",{});var qot=s(Zme);hzo=r(qot,"detr"),qot.forEach(t),pzo=r(K0e," \u2014 "),HG=n(K0e,"A",{href:!0});var Not=s(HG);uzo=r(Not,"DetrForObjectDetection"),Not.forEach(t),_zo=r(K0e," (DETR model)"),K0e.forEach(t),Iot.forEach(t),bzo=i(ha),tv=n(ha,"P",{});var Z0e=s(tv);Fzo=r(Z0e,"The model is set in evaluation mode by default using "),ege=n(Z0e,"CODE",{});var jot=s(ege);vzo=r(jot,"model.eval()"),jot.forEach(t),Tzo=r(Z0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oge=n(Z0e,"CODE",{});var Dot=s(oge);Mzo=r(Dot,"model.train()"),Dot.forEach(t),Z0e.forEach(t),Ezo=i(ha),T(av.$$.fragment,ha),ha.forEach(t),zs.forEach(t),yke=i(f),gd=n(f,"H2",{class:!0});var $Re=s(gd);nv=n($Re,"A",{id:!0,class:!0,href:!0});var Got=s(nv);rge=n(Got,"SPAN",{});var Oot=s(rge);T(Q0.$$.fragment,Oot),Oot.forEach(t),Got.forEach(t),Czo=i($Re),tge=n($Re,"SPAN",{});var Vot=s(tge);wzo=r(Vot,"AutoModelForImageSegmentation"),Vot.forEach(t),$Re.forEach(t),Lke=i(f),Qo=n(f,"DIV",{class:!0});var Qs=s(Qo);T(W0.$$.fragment,Qs),Azo=i(Qs),hd=n(Qs,"P",{});var DU=s(hd);yzo=r(DU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),UG=n(DU,"A",{href:!0});var Xot=s(UG);Lzo=r(Xot,"from_pretrained()"),Xot.forEach(t),xzo=r(DU," class method or the "),JG=n(DU,"A",{href:!0});var zot=s(JG);$zo=r(zot,"from_config()"),zot.forEach(t),kzo=r(DU,` class
method.`),DU.forEach(t),Szo=i(Qs),H0=n(Qs,"P",{});var kRe=s(H0);Rzo=r(kRe,"This class cannot be instantiated directly using "),age=n(kRe,"CODE",{});var Qot=s(age);Bzo=r(Qot,"__init__()"),Qot.forEach(t),Pzo=r(kRe," (throws an error)."),kRe.forEach(t),Izo=i(Qs),Ft=n(Qs,"DIV",{class:!0});var T3=s(Ft);T(U0.$$.fragment,T3),qzo=i(T3),nge=n(T3,"P",{});var Wot=s(nge);Nzo=r(Wot,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Wot.forEach(t),jzo=i(T3),pd=n(T3,"P",{});var GU=s(pd);Dzo=r(GU,`Note:
Loading a model from its configuration file does `),sge=n(GU,"STRONG",{});var Hot=s(sge);Gzo=r(Hot,"not"),Hot.forEach(t),Ozo=r(GU,` load the model weights. It only affects the
model\u2019s configuration. Use `),YG=n(GU,"A",{href:!0});var Uot=s(YG);Vzo=r(Uot,"from_pretrained()"),Uot.forEach(t),Xzo=r(GU," to load the model weights."),GU.forEach(t),zzo=i(T3),T(sv.$$.fragment,T3),T3.forEach(t),Qzo=i(Qs),mo=n(Qs,"DIV",{class:!0});var pa=s(mo);T(J0.$$.fragment,pa),Wzo=i(pa),lge=n(pa,"P",{});var Jot=s(lge);Hzo=r(Jot,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Jot.forEach(t),Uzo=i(pa),Xa=n(pa,"P",{});var M3=s(Xa);Jzo=r(M3,"The model class to instantiate is selected based on the "),ige=n(M3,"CODE",{});var Yot=s(ige);Yzo=r(Yot,"model_type"),Yot.forEach(t),Kzo=r(M3,` property of the config object (either
passed as an argument or loaded from `),dge=n(M3,"CODE",{});var Kot=s(dge);Zzo=r(Kot,"pretrained_model_name_or_path"),Kot.forEach(t),eQo=r(M3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cge=n(M3,"CODE",{});var Zot=s(cge);oQo=r(Zot,"pretrained_model_name_or_path"),Zot.forEach(t),rQo=r(M3,":"),M3.forEach(t),tQo=i(pa),fge=n(pa,"UL",{});var ert=s(fge);lv=n(ert,"LI",{});var eye=s(lv);mge=n(eye,"STRONG",{});var ort=s(mge);aQo=r(ort,"detr"),ort.forEach(t),nQo=r(eye," \u2014 "),KG=n(eye,"A",{href:!0});var rrt=s(KG);sQo=r(rrt,"DetrForSegmentation"),rrt.forEach(t),lQo=r(eye," (DETR model)"),eye.forEach(t),ert.forEach(t),iQo=i(pa),iv=n(pa,"P",{});var oye=s(iv);dQo=r(oye,"The model is set in evaluation mode by default using "),gge=n(oye,"CODE",{});var trt=s(gge);cQo=r(trt,"model.eval()"),trt.forEach(t),fQo=r(oye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hge=n(oye,"CODE",{});var art=s(hge);mQo=r(art,"model.train()"),art.forEach(t),oye.forEach(t),gQo=i(pa),T(dv.$$.fragment,pa),pa.forEach(t),Qs.forEach(t),xke=i(f),ud=n(f,"H2",{class:!0});var SRe=s(ud);cv=n(SRe,"A",{id:!0,class:!0,href:!0});var nrt=s(cv);pge=n(nrt,"SPAN",{});var srt=s(pge);T(Y0.$$.fragment,srt),srt.forEach(t),nrt.forEach(t),hQo=i(SRe),uge=n(SRe,"SPAN",{});var lrt=s(uge);pQo=r(lrt,"AutoModelForSemanticSegmentation"),lrt.forEach(t),SRe.forEach(t),$ke=i(f),Wo=n(f,"DIV",{class:!0});var Ws=s(Wo);T(K0.$$.fragment,Ws),uQo=i(Ws),_d=n(Ws,"P",{});var OU=s(_d);_Qo=r(OU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),ZG=n(OU,"A",{href:!0});var irt=s(ZG);bQo=r(irt,"from_pretrained()"),irt.forEach(t),FQo=r(OU," class method or the "),eO=n(OU,"A",{href:!0});var drt=s(eO);vQo=r(drt,"from_config()"),drt.forEach(t),TQo=r(OU,` class
method.`),OU.forEach(t),MQo=i(Ws),Z0=n(Ws,"P",{});var RRe=s(Z0);EQo=r(RRe,"This class cannot be instantiated directly using "),_ge=n(RRe,"CODE",{});var crt=s(_ge);CQo=r(crt,"__init__()"),crt.forEach(t),wQo=r(RRe," (throws an error)."),RRe.forEach(t),AQo=i(Ws),vt=n(Ws,"DIV",{class:!0});var E3=s(vt);T(ey.$$.fragment,E3),yQo=i(E3),bge=n(E3,"P",{});var frt=s(bge);LQo=r(frt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),frt.forEach(t),xQo=i(E3),bd=n(E3,"P",{});var VU=s(bd);$Qo=r(VU,`Note:
Loading a model from its configuration file does `),Fge=n(VU,"STRONG",{});var mrt=s(Fge);kQo=r(mrt,"not"),mrt.forEach(t),SQo=r(VU,` load the model weights. It only affects the
model\u2019s configuration. Use `),oO=n(VU,"A",{href:!0});var grt=s(oO);RQo=r(grt,"from_pretrained()"),grt.forEach(t),BQo=r(VU," to load the model weights."),VU.forEach(t),PQo=i(E3),T(fv.$$.fragment,E3),E3.forEach(t),IQo=i(Ws),go=n(Ws,"DIV",{class:!0});var ua=s(go);T(oy.$$.fragment,ua),qQo=i(ua),vge=n(ua,"P",{});var hrt=s(vge);NQo=r(hrt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),hrt.forEach(t),jQo=i(ua),za=n(ua,"P",{});var C3=s(za);DQo=r(C3,"The model class to instantiate is selected based on the "),Tge=n(C3,"CODE",{});var prt=s(Tge);GQo=r(prt,"model_type"),prt.forEach(t),OQo=r(C3,` property of the config object (either
passed as an argument or loaded from `),Mge=n(C3,"CODE",{});var urt=s(Mge);VQo=r(urt,"pretrained_model_name_or_path"),urt.forEach(t),XQo=r(C3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ege=n(C3,"CODE",{});var _rt=s(Ege);zQo=r(_rt,"pretrained_model_name_or_path"),_rt.forEach(t),QQo=r(C3,":"),C3.forEach(t),WQo=i(ua),ry=n(ua,"UL",{});var BRe=s(ry);mv=n(BRe,"LI",{});var rye=s(mv);Cge=n(rye,"STRONG",{});var brt=s(Cge);HQo=r(brt,"beit"),brt.forEach(t),UQo=r(rye," \u2014 "),rO=n(rye,"A",{href:!0});var Frt=s(rO);JQo=r(Frt,"BeitForSemanticSegmentation"),Frt.forEach(t),YQo=r(rye," (BEiT model)"),rye.forEach(t),KQo=i(BRe),gv=n(BRe,"LI",{});var tye=s(gv);wge=n(tye,"STRONG",{});var vrt=s(wge);ZQo=r(vrt,"segformer"),vrt.forEach(t),eWo=r(tye," \u2014 "),tO=n(tye,"A",{href:!0});var Trt=s(tO);oWo=r(Trt,"SegformerForSemanticSegmentation"),Trt.forEach(t),rWo=r(tye," (SegFormer model)"),tye.forEach(t),BRe.forEach(t),tWo=i(ua),hv=n(ua,"P",{});var aye=s(hv);aWo=r(aye,"The model is set in evaluation mode by default using "),Age=n(aye,"CODE",{});var Mrt=s(Age);nWo=r(Mrt,"model.eval()"),Mrt.forEach(t),sWo=r(aye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yge=n(aye,"CODE",{});var Ert=s(yge);lWo=r(Ert,"model.train()"),Ert.forEach(t),aye.forEach(t),iWo=i(ua),T(pv.$$.fragment,ua),ua.forEach(t),Ws.forEach(t),kke=i(f),Fd=n(f,"H2",{class:!0});var PRe=s(Fd);uv=n(PRe,"A",{id:!0,class:!0,href:!0});var Crt=s(uv);Lge=n(Crt,"SPAN",{});var wrt=s(Lge);T(ty.$$.fragment,wrt),wrt.forEach(t),Crt.forEach(t),dWo=i(PRe),xge=n(PRe,"SPAN",{});var Art=s(xge);cWo=r(Art,"AutoModelForInstanceSegmentation"),Art.forEach(t),PRe.forEach(t),Ske=i(f),Ho=n(f,"DIV",{class:!0});var Hs=s(Ho);T(ay.$$.fragment,Hs),fWo=i(Hs),vd=n(Hs,"P",{});var XU=s(vd);mWo=r(XU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),aO=n(XU,"A",{href:!0});var yrt=s(aO);gWo=r(yrt,"from_pretrained()"),yrt.forEach(t),hWo=r(XU," class method or the "),nO=n(XU,"A",{href:!0});var Lrt=s(nO);pWo=r(Lrt,"from_config()"),Lrt.forEach(t),uWo=r(XU,` class
method.`),XU.forEach(t),_Wo=i(Hs),ny=n(Hs,"P",{});var IRe=s(ny);bWo=r(IRe,"This class cannot be instantiated directly using "),$ge=n(IRe,"CODE",{});var xrt=s($ge);FWo=r(xrt,"__init__()"),xrt.forEach(t),vWo=r(IRe," (throws an error)."),IRe.forEach(t),TWo=i(Hs),Tt=n(Hs,"DIV",{class:!0});var w3=s(Tt);T(sy.$$.fragment,w3),MWo=i(w3),kge=n(w3,"P",{});var $rt=s(kge);EWo=r($rt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),$rt.forEach(t),CWo=i(w3),Td=n(w3,"P",{});var zU=s(Td);wWo=r(zU,`Note:
Loading a model from its configuration file does `),Sge=n(zU,"STRONG",{});var krt=s(Sge);AWo=r(krt,"not"),krt.forEach(t),yWo=r(zU,` load the model weights. It only affects the
model\u2019s configuration. Use `),sO=n(zU,"A",{href:!0});var Srt=s(sO);LWo=r(Srt,"from_pretrained()"),Srt.forEach(t),xWo=r(zU," to load the model weights."),zU.forEach(t),$Wo=i(w3),T(_v.$$.fragment,w3),w3.forEach(t),kWo=i(Hs),ho=n(Hs,"DIV",{class:!0});var _a=s(ho);T(ly.$$.fragment,_a),SWo=i(_a),Rge=n(_a,"P",{});var Rrt=s(Rge);RWo=r(Rrt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Rrt.forEach(t),BWo=i(_a),Qa=n(_a,"P",{});var A3=s(Qa);PWo=r(A3,"The model class to instantiate is selected based on the "),Bge=n(A3,"CODE",{});var Brt=s(Bge);IWo=r(Brt,"model_type"),Brt.forEach(t),qWo=r(A3,` property of the config object (either
passed as an argument or loaded from `),Pge=n(A3,"CODE",{});var Prt=s(Pge);NWo=r(Prt,"pretrained_model_name_or_path"),Prt.forEach(t),jWo=r(A3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ige=n(A3,"CODE",{});var Irt=s(Ige);DWo=r(Irt,"pretrained_model_name_or_path"),Irt.forEach(t),GWo=r(A3,":"),A3.forEach(t),OWo=i(_a),qge=n(_a,"UL",{});var qrt=s(qge);bv=n(qrt,"LI",{});var nye=s(bv);Nge=n(nye,"STRONG",{});var Nrt=s(Nge);VWo=r(Nrt,"maskformer"),Nrt.forEach(t),XWo=r(nye," \u2014 "),lO=n(nye,"A",{href:!0});var jrt=s(lO);zWo=r(jrt,"MaskFormerForInstanceSegmentation"),jrt.forEach(t),QWo=r(nye," (MaskFormer model)"),nye.forEach(t),qrt.forEach(t),WWo=i(_a),Fv=n(_a,"P",{});var sye=s(Fv);HWo=r(sye,"The model is set in evaluation mode by default using "),jge=n(sye,"CODE",{});var Drt=s(jge);UWo=r(Drt,"model.eval()"),Drt.forEach(t),JWo=r(sye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dge=n(sye,"CODE",{});var Grt=s(Dge);YWo=r(Grt,"model.train()"),Grt.forEach(t),sye.forEach(t),KWo=i(_a),T(vv.$$.fragment,_a),_a.forEach(t),Hs.forEach(t),Rke=i(f),Md=n(f,"H2",{class:!0});var qRe=s(Md);Tv=n(qRe,"A",{id:!0,class:!0,href:!0});var Ort=s(Tv);Gge=n(Ort,"SPAN",{});var Vrt=s(Gge);T(iy.$$.fragment,Vrt),Vrt.forEach(t),Ort.forEach(t),ZWo=i(qRe),Oge=n(qRe,"SPAN",{});var Xrt=s(Oge);eHo=r(Xrt,"TFAutoModel"),Xrt.forEach(t),qRe.forEach(t),Bke=i(f),Uo=n(f,"DIV",{class:!0});var Us=s(Uo);T(dy.$$.fragment,Us),oHo=i(Us),Ed=n(Us,"P",{});var QU=s(Ed);rHo=r(QU,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),iO=n(QU,"A",{href:!0});var zrt=s(iO);tHo=r(zrt,"from_pretrained()"),zrt.forEach(t),aHo=r(QU," class method or the "),dO=n(QU,"A",{href:!0});var Qrt=s(dO);nHo=r(Qrt,"from_config()"),Qrt.forEach(t),sHo=r(QU,` class
method.`),QU.forEach(t),lHo=i(Us),cy=n(Us,"P",{});var NRe=s(cy);iHo=r(NRe,"This class cannot be instantiated directly using "),Vge=n(NRe,"CODE",{});var Wrt=s(Vge);dHo=r(Wrt,"__init__()"),Wrt.forEach(t),cHo=r(NRe," (throws an error)."),NRe.forEach(t),fHo=i(Us),Mt=n(Us,"DIV",{class:!0});var y3=s(Mt);T(fy.$$.fragment,y3),mHo=i(y3),Xge=n(y3,"P",{});var Hrt=s(Xge);gHo=r(Hrt,"Instantiates one of the base model classes of the library from a configuration."),Hrt.forEach(t),hHo=i(y3),Cd=n(y3,"P",{});var WU=s(Cd);pHo=r(WU,`Note:
Loading a model from its configuration file does `),zge=n(WU,"STRONG",{});var Urt=s(zge);uHo=r(Urt,"not"),Urt.forEach(t),_Ho=r(WU,` load the model weights. It only affects the
model\u2019s configuration. Use `),cO=n(WU,"A",{href:!0});var Jrt=s(cO);bHo=r(Jrt,"from_pretrained()"),Jrt.forEach(t),FHo=r(WU," to load the model weights."),WU.forEach(t),vHo=i(y3),T(Mv.$$.fragment,y3),y3.forEach(t),THo=i(Us),Mr=n(Us,"DIV",{class:!0});var Js=s(Mr);T(my.$$.fragment,Js),MHo=i(Js),Qge=n(Js,"P",{});var Yrt=s(Qge);EHo=r(Yrt,"Instantiate one of the base model classes of the library from a pretrained model."),Yrt.forEach(t),CHo=i(Js),Wa=n(Js,"P",{});var L3=s(Wa);wHo=r(L3,"The model class to instantiate is selected based on the "),Wge=n(L3,"CODE",{});var Krt=s(Wge);AHo=r(Krt,"model_type"),Krt.forEach(t),yHo=r(L3,` property of the config object (either
passed as an argument or loaded from `),Hge=n(L3,"CODE",{});var Zrt=s(Hge);LHo=r(Zrt,"pretrained_model_name_or_path"),Zrt.forEach(t),xHo=r(L3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uge=n(L3,"CODE",{});var ett=s(Uge);$Ho=r(ett,"pretrained_model_name_or_path"),ett.forEach(t),kHo=r(L3,":"),L3.forEach(t),SHo=i(Js),j=n(Js,"UL",{});var D=s(j);Ev=n(D,"LI",{});var lye=s(Ev);Jge=n(lye,"STRONG",{});var ott=s(Jge);RHo=r(ott,"albert"),ott.forEach(t),BHo=r(lye," \u2014 "),fO=n(lye,"A",{href:!0});var rtt=s(fO);PHo=r(rtt,"TFAlbertModel"),rtt.forEach(t),IHo=r(lye," (ALBERT model)"),lye.forEach(t),qHo=i(D),Cv=n(D,"LI",{});var iye=s(Cv);Yge=n(iye,"STRONG",{});var ttt=s(Yge);NHo=r(ttt,"bart"),ttt.forEach(t),jHo=r(iye," \u2014 "),mO=n(iye,"A",{href:!0});var att=s(mO);DHo=r(att,"TFBartModel"),att.forEach(t),GHo=r(iye," (BART model)"),iye.forEach(t),OHo=i(D),wv=n(D,"LI",{});var dye=s(wv);Kge=n(dye,"STRONG",{});var ntt=s(Kge);VHo=r(ntt,"bert"),ntt.forEach(t),XHo=r(dye," \u2014 "),gO=n(dye,"A",{href:!0});var stt=s(gO);zHo=r(stt,"TFBertModel"),stt.forEach(t),QHo=r(dye," (BERT model)"),dye.forEach(t),WHo=i(D),Av=n(D,"LI",{});var cye=s(Av);Zge=n(cye,"STRONG",{});var ltt=s(Zge);HHo=r(ltt,"blenderbot"),ltt.forEach(t),UHo=r(cye," \u2014 "),hO=n(cye,"A",{href:!0});var itt=s(hO);JHo=r(itt,"TFBlenderbotModel"),itt.forEach(t),YHo=r(cye," (Blenderbot model)"),cye.forEach(t),KHo=i(D),yv=n(D,"LI",{});var fye=s(yv);ehe=n(fye,"STRONG",{});var dtt=s(ehe);ZHo=r(dtt,"blenderbot-small"),dtt.forEach(t),eUo=r(fye," \u2014 "),pO=n(fye,"A",{href:!0});var ctt=s(pO);oUo=r(ctt,"TFBlenderbotSmallModel"),ctt.forEach(t),rUo=r(fye," (BlenderbotSmall model)"),fye.forEach(t),tUo=i(D),Lv=n(D,"LI",{});var mye=s(Lv);ohe=n(mye,"STRONG",{});var ftt=s(ohe);aUo=r(ftt,"camembert"),ftt.forEach(t),nUo=r(mye," \u2014 "),uO=n(mye,"A",{href:!0});var mtt=s(uO);sUo=r(mtt,"TFCamembertModel"),mtt.forEach(t),lUo=r(mye," (CamemBERT model)"),mye.forEach(t),iUo=i(D),xv=n(D,"LI",{});var gye=s(xv);rhe=n(gye,"STRONG",{});var gtt=s(rhe);dUo=r(gtt,"clip"),gtt.forEach(t),cUo=r(gye," \u2014 "),_O=n(gye,"A",{href:!0});var htt=s(_O);fUo=r(htt,"TFCLIPModel"),htt.forEach(t),mUo=r(gye," (CLIP model)"),gye.forEach(t),gUo=i(D),$v=n(D,"LI",{});var hye=s($v);the=n(hye,"STRONG",{});var ptt=s(the);hUo=r(ptt,"convbert"),ptt.forEach(t),pUo=r(hye," \u2014 "),bO=n(hye,"A",{href:!0});var utt=s(bO);uUo=r(utt,"TFConvBertModel"),utt.forEach(t),_Uo=r(hye," (ConvBERT model)"),hye.forEach(t),bUo=i(D),kv=n(D,"LI",{});var pye=s(kv);ahe=n(pye,"STRONG",{});var _tt=s(ahe);FUo=r(_tt,"convnext"),_tt.forEach(t),vUo=r(pye," \u2014 "),FO=n(pye,"A",{href:!0});var btt=s(FO);TUo=r(btt,"TFConvNextModel"),btt.forEach(t),MUo=r(pye," (ConvNext model)"),pye.forEach(t),EUo=i(D),Sv=n(D,"LI",{});var uye=s(Sv);nhe=n(uye,"STRONG",{});var Ftt=s(nhe);CUo=r(Ftt,"ctrl"),Ftt.forEach(t),wUo=r(uye," \u2014 "),vO=n(uye,"A",{href:!0});var vtt=s(vO);AUo=r(vtt,"TFCTRLModel"),vtt.forEach(t),yUo=r(uye," (CTRL model)"),uye.forEach(t),LUo=i(D),Rv=n(D,"LI",{});var _ye=s(Rv);she=n(_ye,"STRONG",{});var Ttt=s(she);xUo=r(Ttt,"deberta"),Ttt.forEach(t),$Uo=r(_ye," \u2014 "),TO=n(_ye,"A",{href:!0});var Mtt=s(TO);kUo=r(Mtt,"TFDebertaModel"),Mtt.forEach(t),SUo=r(_ye," (DeBERTa model)"),_ye.forEach(t),RUo=i(D),Bv=n(D,"LI",{});var bye=s(Bv);lhe=n(bye,"STRONG",{});var Ett=s(lhe);BUo=r(Ett,"deberta-v2"),Ett.forEach(t),PUo=r(bye," \u2014 "),MO=n(bye,"A",{href:!0});var Ctt=s(MO);IUo=r(Ctt,"TFDebertaV2Model"),Ctt.forEach(t),qUo=r(bye," (DeBERTa-v2 model)"),bye.forEach(t),NUo=i(D),Pv=n(D,"LI",{});var Fye=s(Pv);ihe=n(Fye,"STRONG",{});var wtt=s(ihe);jUo=r(wtt,"distilbert"),wtt.forEach(t),DUo=r(Fye," \u2014 "),EO=n(Fye,"A",{href:!0});var Att=s(EO);GUo=r(Att,"TFDistilBertModel"),Att.forEach(t),OUo=r(Fye," (DistilBERT model)"),Fye.forEach(t),VUo=i(D),Iv=n(D,"LI",{});var vye=s(Iv);dhe=n(vye,"STRONG",{});var ytt=s(dhe);XUo=r(ytt,"dpr"),ytt.forEach(t),zUo=r(vye," \u2014 "),CO=n(vye,"A",{href:!0});var Ltt=s(CO);QUo=r(Ltt,"TFDPRQuestionEncoder"),Ltt.forEach(t),WUo=r(vye," (DPR model)"),vye.forEach(t),HUo=i(D),qv=n(D,"LI",{});var Tye=s(qv);che=n(Tye,"STRONG",{});var xtt=s(che);UUo=r(xtt,"electra"),xtt.forEach(t),JUo=r(Tye," \u2014 "),wO=n(Tye,"A",{href:!0});var $tt=s(wO);YUo=r($tt,"TFElectraModel"),$tt.forEach(t),KUo=r(Tye," (ELECTRA model)"),Tye.forEach(t),ZUo=i(D),Nv=n(D,"LI",{});var Mye=s(Nv);fhe=n(Mye,"STRONG",{});var ktt=s(fhe);eJo=r(ktt,"flaubert"),ktt.forEach(t),oJo=r(Mye," \u2014 "),AO=n(Mye,"A",{href:!0});var Stt=s(AO);rJo=r(Stt,"TFFlaubertModel"),Stt.forEach(t),tJo=r(Mye," (FlauBERT model)"),Mye.forEach(t),aJo=i(D),vs=n(D,"LI",{});var $x=s(vs);mhe=n($x,"STRONG",{});var Rtt=s(mhe);nJo=r(Rtt,"funnel"),Rtt.forEach(t),sJo=r($x," \u2014 "),yO=n($x,"A",{href:!0});var Btt=s(yO);lJo=r(Btt,"TFFunnelModel"),Btt.forEach(t),iJo=r($x," or "),LO=n($x,"A",{href:!0});var Ptt=s(LO);dJo=r(Ptt,"TFFunnelBaseModel"),Ptt.forEach(t),cJo=r($x," (Funnel Transformer model)"),$x.forEach(t),fJo=i(D),jv=n(D,"LI",{});var Eye=s(jv);ghe=n(Eye,"STRONG",{});var Itt=s(ghe);mJo=r(Itt,"gpt2"),Itt.forEach(t),gJo=r(Eye," \u2014 "),xO=n(Eye,"A",{href:!0});var qtt=s(xO);hJo=r(qtt,"TFGPT2Model"),qtt.forEach(t),pJo=r(Eye," (OpenAI GPT-2 model)"),Eye.forEach(t),uJo=i(D),Dv=n(D,"LI",{});var Cye=s(Dv);hhe=n(Cye,"STRONG",{});var Ntt=s(hhe);_Jo=r(Ntt,"hubert"),Ntt.forEach(t),bJo=r(Cye," \u2014 "),$O=n(Cye,"A",{href:!0});var jtt=s($O);FJo=r(jtt,"TFHubertModel"),jtt.forEach(t),vJo=r(Cye," (Hubert model)"),Cye.forEach(t),TJo=i(D),Gv=n(D,"LI",{});var wye=s(Gv);phe=n(wye,"STRONG",{});var Dtt=s(phe);MJo=r(Dtt,"layoutlm"),Dtt.forEach(t),EJo=r(wye," \u2014 "),kO=n(wye,"A",{href:!0});var Gtt=s(kO);CJo=r(Gtt,"TFLayoutLMModel"),Gtt.forEach(t),wJo=r(wye," (LayoutLM model)"),wye.forEach(t),AJo=i(D),Ov=n(D,"LI",{});var Aye=s(Ov);uhe=n(Aye,"STRONG",{});var Ott=s(uhe);yJo=r(Ott,"led"),Ott.forEach(t),LJo=r(Aye," \u2014 "),SO=n(Aye,"A",{href:!0});var Vtt=s(SO);xJo=r(Vtt,"TFLEDModel"),Vtt.forEach(t),$Jo=r(Aye," (LED model)"),Aye.forEach(t),kJo=i(D),Vv=n(D,"LI",{});var yye=s(Vv);_he=n(yye,"STRONG",{});var Xtt=s(_he);SJo=r(Xtt,"longformer"),Xtt.forEach(t),RJo=r(yye," \u2014 "),RO=n(yye,"A",{href:!0});var ztt=s(RO);BJo=r(ztt,"TFLongformerModel"),ztt.forEach(t),PJo=r(yye," (Longformer model)"),yye.forEach(t),IJo=i(D),Xv=n(D,"LI",{});var Lye=s(Xv);bhe=n(Lye,"STRONG",{});var Qtt=s(bhe);qJo=r(Qtt,"lxmert"),Qtt.forEach(t),NJo=r(Lye," \u2014 "),BO=n(Lye,"A",{href:!0});var Wtt=s(BO);jJo=r(Wtt,"TFLxmertModel"),Wtt.forEach(t),DJo=r(Lye," (LXMERT model)"),Lye.forEach(t),GJo=i(D),zv=n(D,"LI",{});var xye=s(zv);Fhe=n(xye,"STRONG",{});var Htt=s(Fhe);OJo=r(Htt,"marian"),Htt.forEach(t),VJo=r(xye," \u2014 "),PO=n(xye,"A",{href:!0});var Utt=s(PO);XJo=r(Utt,"TFMarianModel"),Utt.forEach(t),zJo=r(xye," (Marian model)"),xye.forEach(t),QJo=i(D),Qv=n(D,"LI",{});var $ye=s(Qv);vhe=n($ye,"STRONG",{});var Jtt=s(vhe);WJo=r(Jtt,"mbart"),Jtt.forEach(t),HJo=r($ye," \u2014 "),IO=n($ye,"A",{href:!0});var Ytt=s(IO);UJo=r(Ytt,"TFMBartModel"),Ytt.forEach(t),JJo=r($ye," (mBART model)"),$ye.forEach(t),YJo=i(D),Wv=n(D,"LI",{});var kye=s(Wv);The=n(kye,"STRONG",{});var Ktt=s(The);KJo=r(Ktt,"mobilebert"),Ktt.forEach(t),ZJo=r(kye," \u2014 "),qO=n(kye,"A",{href:!0});var Ztt=s(qO);eYo=r(Ztt,"TFMobileBertModel"),Ztt.forEach(t),oYo=r(kye," (MobileBERT model)"),kye.forEach(t),rYo=i(D),Hv=n(D,"LI",{});var Sye=s(Hv);Mhe=n(Sye,"STRONG",{});var eat=s(Mhe);tYo=r(eat,"mpnet"),eat.forEach(t),aYo=r(Sye," \u2014 "),NO=n(Sye,"A",{href:!0});var oat=s(NO);nYo=r(oat,"TFMPNetModel"),oat.forEach(t),sYo=r(Sye," (MPNet model)"),Sye.forEach(t),lYo=i(D),Uv=n(D,"LI",{});var Rye=s(Uv);Ehe=n(Rye,"STRONG",{});var rat=s(Ehe);iYo=r(rat,"mt5"),rat.forEach(t),dYo=r(Rye," \u2014 "),jO=n(Rye,"A",{href:!0});var tat=s(jO);cYo=r(tat,"TFMT5Model"),tat.forEach(t),fYo=r(Rye," (mT5 model)"),Rye.forEach(t),mYo=i(D),Jv=n(D,"LI",{});var Bye=s(Jv);Che=n(Bye,"STRONG",{});var aat=s(Che);gYo=r(aat,"openai-gpt"),aat.forEach(t),hYo=r(Bye," \u2014 "),DO=n(Bye,"A",{href:!0});var nat=s(DO);pYo=r(nat,"TFOpenAIGPTModel"),nat.forEach(t),uYo=r(Bye," (OpenAI GPT model)"),Bye.forEach(t),_Yo=i(D),Yv=n(D,"LI",{});var Pye=s(Yv);whe=n(Pye,"STRONG",{});var sat=s(whe);bYo=r(sat,"pegasus"),sat.forEach(t),FYo=r(Pye," \u2014 "),GO=n(Pye,"A",{href:!0});var lat=s(GO);vYo=r(lat,"TFPegasusModel"),lat.forEach(t),TYo=r(Pye," (Pegasus model)"),Pye.forEach(t),MYo=i(D),Kv=n(D,"LI",{});var Iye=s(Kv);Ahe=n(Iye,"STRONG",{});var iat=s(Ahe);EYo=r(iat,"rembert"),iat.forEach(t),CYo=r(Iye," \u2014 "),OO=n(Iye,"A",{href:!0});var dat=s(OO);wYo=r(dat,"TFRemBertModel"),dat.forEach(t),AYo=r(Iye," (RemBERT model)"),Iye.forEach(t),yYo=i(D),Zv=n(D,"LI",{});var qye=s(Zv);yhe=n(qye,"STRONG",{});var cat=s(yhe);LYo=r(cat,"roberta"),cat.forEach(t),xYo=r(qye," \u2014 "),VO=n(qye,"A",{href:!0});var fat=s(VO);$Yo=r(fat,"TFRobertaModel"),fat.forEach(t),kYo=r(qye," (RoBERTa model)"),qye.forEach(t),SYo=i(D),e6=n(D,"LI",{});var Nye=s(e6);Lhe=n(Nye,"STRONG",{});var mat=s(Lhe);RYo=r(mat,"roformer"),mat.forEach(t),BYo=r(Nye," \u2014 "),XO=n(Nye,"A",{href:!0});var gat=s(XO);PYo=r(gat,"TFRoFormerModel"),gat.forEach(t),IYo=r(Nye," (RoFormer model)"),Nye.forEach(t),qYo=i(D),o6=n(D,"LI",{});var jye=s(o6);xhe=n(jye,"STRONG",{});var hat=s(xhe);NYo=r(hat,"speech_to_text"),hat.forEach(t),jYo=r(jye," \u2014 "),zO=n(jye,"A",{href:!0});var pat=s(zO);DYo=r(pat,"TFSpeech2TextModel"),pat.forEach(t),GYo=r(jye," (Speech2Text model)"),jye.forEach(t),OYo=i(D),r6=n(D,"LI",{});var Dye=s(r6);$he=n(Dye,"STRONG",{});var uat=s($he);VYo=r(uat,"t5"),uat.forEach(t),XYo=r(Dye," \u2014 "),QO=n(Dye,"A",{href:!0});var _at=s(QO);zYo=r(_at,"TFT5Model"),_at.forEach(t),QYo=r(Dye," (T5 model)"),Dye.forEach(t),WYo=i(D),t6=n(D,"LI",{});var Gye=s(t6);khe=n(Gye,"STRONG",{});var bat=s(khe);HYo=r(bat,"tapas"),bat.forEach(t),UYo=r(Gye," \u2014 "),WO=n(Gye,"A",{href:!0});var Fat=s(WO);JYo=r(Fat,"TFTapasModel"),Fat.forEach(t),YYo=r(Gye," (TAPAS model)"),Gye.forEach(t),KYo=i(D),a6=n(D,"LI",{});var Oye=s(a6);She=n(Oye,"STRONG",{});var vat=s(She);ZYo=r(vat,"transfo-xl"),vat.forEach(t),eKo=r(Oye," \u2014 "),HO=n(Oye,"A",{href:!0});var Tat=s(HO);oKo=r(Tat,"TFTransfoXLModel"),Tat.forEach(t),rKo=r(Oye," (Transformer-XL model)"),Oye.forEach(t),tKo=i(D),n6=n(D,"LI",{});var Vye=s(n6);Rhe=n(Vye,"STRONG",{});var Mat=s(Rhe);aKo=r(Mat,"vit"),Mat.forEach(t),nKo=r(Vye," \u2014 "),UO=n(Vye,"A",{href:!0});var Eat=s(UO);sKo=r(Eat,"TFViTModel"),Eat.forEach(t),lKo=r(Vye," (ViT model)"),Vye.forEach(t),iKo=i(D),s6=n(D,"LI",{});var Xye=s(s6);Bhe=n(Xye,"STRONG",{});var Cat=s(Bhe);dKo=r(Cat,"wav2vec2"),Cat.forEach(t),cKo=r(Xye," \u2014 "),JO=n(Xye,"A",{href:!0});var wat=s(JO);fKo=r(wat,"TFWav2Vec2Model"),wat.forEach(t),mKo=r(Xye," (Wav2Vec2 model)"),Xye.forEach(t),gKo=i(D),l6=n(D,"LI",{});var zye=s(l6);Phe=n(zye,"STRONG",{});var Aat=s(Phe);hKo=r(Aat,"xlm"),Aat.forEach(t),pKo=r(zye," \u2014 "),YO=n(zye,"A",{href:!0});var yat=s(YO);uKo=r(yat,"TFXLMModel"),yat.forEach(t),_Ko=r(zye," (XLM model)"),zye.forEach(t),bKo=i(D),i6=n(D,"LI",{});var Qye=s(i6);Ihe=n(Qye,"STRONG",{});var Lat=s(Ihe);FKo=r(Lat,"xlm-roberta"),Lat.forEach(t),vKo=r(Qye," \u2014 "),KO=n(Qye,"A",{href:!0});var xat=s(KO);TKo=r(xat,"TFXLMRobertaModel"),xat.forEach(t),MKo=r(Qye," (XLM-RoBERTa model)"),Qye.forEach(t),EKo=i(D),d6=n(D,"LI",{});var Wye=s(d6);qhe=n(Wye,"STRONG",{});var $at=s(qhe);CKo=r($at,"xlnet"),$at.forEach(t),wKo=r(Wye," \u2014 "),ZO=n(Wye,"A",{href:!0});var kat=s(ZO);AKo=r(kat,"TFXLNetModel"),kat.forEach(t),yKo=r(Wye," (XLNet model)"),Wye.forEach(t),D.forEach(t),LKo=i(Js),T(c6.$$.fragment,Js),Js.forEach(t),Us.forEach(t),Pke=i(f),wd=n(f,"H2",{class:!0});var jRe=s(wd);f6=n(jRe,"A",{id:!0,class:!0,href:!0});var Sat=s(f6);Nhe=n(Sat,"SPAN",{});var Rat=s(Nhe);T(gy.$$.fragment,Rat),Rat.forEach(t),Sat.forEach(t),xKo=i(jRe),jhe=n(jRe,"SPAN",{});var Bat=s(jhe);$Ko=r(Bat,"TFAutoModelForPreTraining"),Bat.forEach(t),jRe.forEach(t),Ike=i(f),Jo=n(f,"DIV",{class:!0});var Ys=s(Jo);T(hy.$$.fragment,Ys),kKo=i(Ys),Ad=n(Ys,"P",{});var HU=s(Ad);SKo=r(HU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),eV=n(HU,"A",{href:!0});var Pat=s(eV);RKo=r(Pat,"from_pretrained()"),Pat.forEach(t),BKo=r(HU," class method or the "),oV=n(HU,"A",{href:!0});var Iat=s(oV);PKo=r(Iat,"from_config()"),Iat.forEach(t),IKo=r(HU,` class
method.`),HU.forEach(t),qKo=i(Ys),py=n(Ys,"P",{});var DRe=s(py);NKo=r(DRe,"This class cannot be instantiated directly using "),Dhe=n(DRe,"CODE",{});var qat=s(Dhe);jKo=r(qat,"__init__()"),qat.forEach(t),DKo=r(DRe," (throws an error)."),DRe.forEach(t),GKo=i(Ys),Et=n(Ys,"DIV",{class:!0});var x3=s(Et);T(uy.$$.fragment,x3),OKo=i(x3),Ghe=n(x3,"P",{});var Nat=s(Ghe);VKo=r(Nat,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Nat.forEach(t),XKo=i(x3),yd=n(x3,"P",{});var UU=s(yd);zKo=r(UU,`Note:
Loading a model from its configuration file does `),Ohe=n(UU,"STRONG",{});var jat=s(Ohe);QKo=r(jat,"not"),jat.forEach(t),WKo=r(UU,` load the model weights. It only affects the
model\u2019s configuration. Use `),rV=n(UU,"A",{href:!0});var Dat=s(rV);HKo=r(Dat,"from_pretrained()"),Dat.forEach(t),UKo=r(UU," to load the model weights."),UU.forEach(t),JKo=i(x3),T(m6.$$.fragment,x3),x3.forEach(t),YKo=i(Ys),Er=n(Ys,"DIV",{class:!0});var Ks=s(Er);T(_y.$$.fragment,Ks),KKo=i(Ks),Vhe=n(Ks,"P",{});var Gat=s(Vhe);ZKo=r(Gat,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Gat.forEach(t),eZo=i(Ks),Ha=n(Ks,"P",{});var $3=s(Ha);oZo=r($3,"The model class to instantiate is selected based on the "),Xhe=n($3,"CODE",{});var Oat=s(Xhe);rZo=r(Oat,"model_type"),Oat.forEach(t),tZo=r($3,` property of the config object (either
passed as an argument or loaded from `),zhe=n($3,"CODE",{});var Vat=s(zhe);aZo=r(Vat,"pretrained_model_name_or_path"),Vat.forEach(t),nZo=r($3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qhe=n($3,"CODE",{});var Xat=s(Qhe);sZo=r(Xat,"pretrained_model_name_or_path"),Xat.forEach(t),lZo=r($3,":"),$3.forEach(t),iZo=i(Ks),ae=n(Ks,"UL",{});var ne=s(ae);g6=n(ne,"LI",{});var Hye=s(g6);Whe=n(Hye,"STRONG",{});var zat=s(Whe);dZo=r(zat,"albert"),zat.forEach(t),cZo=r(Hye," \u2014 "),tV=n(Hye,"A",{href:!0});var Qat=s(tV);fZo=r(Qat,"TFAlbertForPreTraining"),Qat.forEach(t),mZo=r(Hye," (ALBERT model)"),Hye.forEach(t),gZo=i(ne),h6=n(ne,"LI",{});var Uye=s(h6);Hhe=n(Uye,"STRONG",{});var Wat=s(Hhe);hZo=r(Wat,"bart"),Wat.forEach(t),pZo=r(Uye," \u2014 "),aV=n(Uye,"A",{href:!0});var Hat=s(aV);uZo=r(Hat,"TFBartForConditionalGeneration"),Hat.forEach(t),_Zo=r(Uye," (BART model)"),Uye.forEach(t),bZo=i(ne),p6=n(ne,"LI",{});var Jye=s(p6);Uhe=n(Jye,"STRONG",{});var Uat=s(Uhe);FZo=r(Uat,"bert"),Uat.forEach(t),vZo=r(Jye," \u2014 "),nV=n(Jye,"A",{href:!0});var Jat=s(nV);TZo=r(Jat,"TFBertForPreTraining"),Jat.forEach(t),MZo=r(Jye," (BERT model)"),Jye.forEach(t),EZo=i(ne),u6=n(ne,"LI",{});var Yye=s(u6);Jhe=n(Yye,"STRONG",{});var Yat=s(Jhe);CZo=r(Yat,"camembert"),Yat.forEach(t),wZo=r(Yye," \u2014 "),sV=n(Yye,"A",{href:!0});var Kat=s(sV);AZo=r(Kat,"TFCamembertForMaskedLM"),Kat.forEach(t),yZo=r(Yye," (CamemBERT model)"),Yye.forEach(t),LZo=i(ne),_6=n(ne,"LI",{});var Kye=s(_6);Yhe=n(Kye,"STRONG",{});var Zat=s(Yhe);xZo=r(Zat,"ctrl"),Zat.forEach(t),$Zo=r(Kye," \u2014 "),lV=n(Kye,"A",{href:!0});var ent=s(lV);kZo=r(ent,"TFCTRLLMHeadModel"),ent.forEach(t),SZo=r(Kye," (CTRL model)"),Kye.forEach(t),RZo=i(ne),b6=n(ne,"LI",{});var Zye=s(b6);Khe=n(Zye,"STRONG",{});var ont=s(Khe);BZo=r(ont,"distilbert"),ont.forEach(t),PZo=r(Zye," \u2014 "),iV=n(Zye,"A",{href:!0});var rnt=s(iV);IZo=r(rnt,"TFDistilBertForMaskedLM"),rnt.forEach(t),qZo=r(Zye," (DistilBERT model)"),Zye.forEach(t),NZo=i(ne),F6=n(ne,"LI",{});var eLe=s(F6);Zhe=n(eLe,"STRONG",{});var tnt=s(Zhe);jZo=r(tnt,"electra"),tnt.forEach(t),DZo=r(eLe," \u2014 "),dV=n(eLe,"A",{href:!0});var ant=s(dV);GZo=r(ant,"TFElectraForPreTraining"),ant.forEach(t),OZo=r(eLe," (ELECTRA model)"),eLe.forEach(t),VZo=i(ne),v6=n(ne,"LI",{});var oLe=s(v6);epe=n(oLe,"STRONG",{});var nnt=s(epe);XZo=r(nnt,"flaubert"),nnt.forEach(t),zZo=r(oLe," \u2014 "),cV=n(oLe,"A",{href:!0});var snt=s(cV);QZo=r(snt,"TFFlaubertWithLMHeadModel"),snt.forEach(t),WZo=r(oLe," (FlauBERT model)"),oLe.forEach(t),HZo=i(ne),T6=n(ne,"LI",{});var rLe=s(T6);ope=n(rLe,"STRONG",{});var lnt=s(ope);UZo=r(lnt,"funnel"),lnt.forEach(t),JZo=r(rLe," \u2014 "),fV=n(rLe,"A",{href:!0});var int=s(fV);YZo=r(int,"TFFunnelForPreTraining"),int.forEach(t),KZo=r(rLe," (Funnel Transformer model)"),rLe.forEach(t),ZZo=i(ne),M6=n(ne,"LI",{});var tLe=s(M6);rpe=n(tLe,"STRONG",{});var dnt=s(rpe);eer=r(dnt,"gpt2"),dnt.forEach(t),oer=r(tLe," \u2014 "),mV=n(tLe,"A",{href:!0});var cnt=s(mV);rer=r(cnt,"TFGPT2LMHeadModel"),cnt.forEach(t),ter=r(tLe," (OpenAI GPT-2 model)"),tLe.forEach(t),aer=i(ne),E6=n(ne,"LI",{});var aLe=s(E6);tpe=n(aLe,"STRONG",{});var fnt=s(tpe);ner=r(fnt,"layoutlm"),fnt.forEach(t),ser=r(aLe," \u2014 "),gV=n(aLe,"A",{href:!0});var mnt=s(gV);ler=r(mnt,"TFLayoutLMForMaskedLM"),mnt.forEach(t),ier=r(aLe," (LayoutLM model)"),aLe.forEach(t),der=i(ne),C6=n(ne,"LI",{});var nLe=s(C6);ape=n(nLe,"STRONG",{});var gnt=s(ape);cer=r(gnt,"lxmert"),gnt.forEach(t),fer=r(nLe," \u2014 "),hV=n(nLe,"A",{href:!0});var hnt=s(hV);mer=r(hnt,"TFLxmertForPreTraining"),hnt.forEach(t),ger=r(nLe," (LXMERT model)"),nLe.forEach(t),her=i(ne),w6=n(ne,"LI",{});var sLe=s(w6);npe=n(sLe,"STRONG",{});var pnt=s(npe);per=r(pnt,"mobilebert"),pnt.forEach(t),uer=r(sLe," \u2014 "),pV=n(sLe,"A",{href:!0});var unt=s(pV);_er=r(unt,"TFMobileBertForPreTraining"),unt.forEach(t),ber=r(sLe," (MobileBERT model)"),sLe.forEach(t),Fer=i(ne),A6=n(ne,"LI",{});var lLe=s(A6);spe=n(lLe,"STRONG",{});var _nt=s(spe);ver=r(_nt,"mpnet"),_nt.forEach(t),Ter=r(lLe," \u2014 "),uV=n(lLe,"A",{href:!0});var bnt=s(uV);Mer=r(bnt,"TFMPNetForMaskedLM"),bnt.forEach(t),Eer=r(lLe," (MPNet model)"),lLe.forEach(t),Cer=i(ne),y6=n(ne,"LI",{});var iLe=s(y6);lpe=n(iLe,"STRONG",{});var Fnt=s(lpe);wer=r(Fnt,"openai-gpt"),Fnt.forEach(t),Aer=r(iLe," \u2014 "),_V=n(iLe,"A",{href:!0});var vnt=s(_V);yer=r(vnt,"TFOpenAIGPTLMHeadModel"),vnt.forEach(t),Ler=r(iLe," (OpenAI GPT model)"),iLe.forEach(t),xer=i(ne),L6=n(ne,"LI",{});var dLe=s(L6);ipe=n(dLe,"STRONG",{});var Tnt=s(ipe);$er=r(Tnt,"roberta"),Tnt.forEach(t),ker=r(dLe," \u2014 "),bV=n(dLe,"A",{href:!0});var Mnt=s(bV);Ser=r(Mnt,"TFRobertaForMaskedLM"),Mnt.forEach(t),Rer=r(dLe," (RoBERTa model)"),dLe.forEach(t),Ber=i(ne),x6=n(ne,"LI",{});var cLe=s(x6);dpe=n(cLe,"STRONG",{});var Ent=s(dpe);Per=r(Ent,"t5"),Ent.forEach(t),Ier=r(cLe," \u2014 "),FV=n(cLe,"A",{href:!0});var Cnt=s(FV);qer=r(Cnt,"TFT5ForConditionalGeneration"),Cnt.forEach(t),Ner=r(cLe," (T5 model)"),cLe.forEach(t),jer=i(ne),$6=n(ne,"LI",{});var fLe=s($6);cpe=n(fLe,"STRONG",{});var wnt=s(cpe);Der=r(wnt,"tapas"),wnt.forEach(t),Ger=r(fLe," \u2014 "),vV=n(fLe,"A",{href:!0});var Ant=s(vV);Oer=r(Ant,"TFTapasForMaskedLM"),Ant.forEach(t),Ver=r(fLe," (TAPAS model)"),fLe.forEach(t),Xer=i(ne),k6=n(ne,"LI",{});var mLe=s(k6);fpe=n(mLe,"STRONG",{});var ynt=s(fpe);zer=r(ynt,"transfo-xl"),ynt.forEach(t),Qer=r(mLe," \u2014 "),TV=n(mLe,"A",{href:!0});var Lnt=s(TV);Wer=r(Lnt,"TFTransfoXLLMHeadModel"),Lnt.forEach(t),Her=r(mLe," (Transformer-XL model)"),mLe.forEach(t),Uer=i(ne),S6=n(ne,"LI",{});var gLe=s(S6);mpe=n(gLe,"STRONG",{});var xnt=s(mpe);Jer=r(xnt,"xlm"),xnt.forEach(t),Yer=r(gLe," \u2014 "),MV=n(gLe,"A",{href:!0});var $nt=s(MV);Ker=r($nt,"TFXLMWithLMHeadModel"),$nt.forEach(t),Zer=r(gLe," (XLM model)"),gLe.forEach(t),eor=i(ne),R6=n(ne,"LI",{});var hLe=s(R6);gpe=n(hLe,"STRONG",{});var knt=s(gpe);oor=r(knt,"xlm-roberta"),knt.forEach(t),ror=r(hLe," \u2014 "),EV=n(hLe,"A",{href:!0});var Snt=s(EV);tor=r(Snt,"TFXLMRobertaForMaskedLM"),Snt.forEach(t),aor=r(hLe," (XLM-RoBERTa model)"),hLe.forEach(t),nor=i(ne),B6=n(ne,"LI",{});var pLe=s(B6);hpe=n(pLe,"STRONG",{});var Rnt=s(hpe);sor=r(Rnt,"xlnet"),Rnt.forEach(t),lor=r(pLe," \u2014 "),CV=n(pLe,"A",{href:!0});var Bnt=s(CV);ior=r(Bnt,"TFXLNetLMHeadModel"),Bnt.forEach(t),dor=r(pLe," (XLNet model)"),pLe.forEach(t),ne.forEach(t),cor=i(Ks),T(P6.$$.fragment,Ks),Ks.forEach(t),Ys.forEach(t),qke=i(f),Ld=n(f,"H2",{class:!0});var GRe=s(Ld);I6=n(GRe,"A",{id:!0,class:!0,href:!0});var Pnt=s(I6);ppe=n(Pnt,"SPAN",{});var Int=s(ppe);T(by.$$.fragment,Int),Int.forEach(t),Pnt.forEach(t),mor=i(GRe),upe=n(GRe,"SPAN",{});var qnt=s(upe);gor=r(qnt,"TFAutoModelForCausalLM"),qnt.forEach(t),GRe.forEach(t),Nke=i(f),Yo=n(f,"DIV",{class:!0});var Zs=s(Yo);T(Fy.$$.fragment,Zs),hor=i(Zs),xd=n(Zs,"P",{});var JU=s(xd);por=r(JU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),wV=n(JU,"A",{href:!0});var Nnt=s(wV);uor=r(Nnt,"from_pretrained()"),Nnt.forEach(t),_or=r(JU," class method or the "),AV=n(JU,"A",{href:!0});var jnt=s(AV);bor=r(jnt,"from_config()"),jnt.forEach(t),For=r(JU,` class
method.`),JU.forEach(t),vor=i(Zs),vy=n(Zs,"P",{});var ORe=s(vy);Tor=r(ORe,"This class cannot be instantiated directly using "),_pe=n(ORe,"CODE",{});var Dnt=s(_pe);Mor=r(Dnt,"__init__()"),Dnt.forEach(t),Eor=r(ORe," (throws an error)."),ORe.forEach(t),Cor=i(Zs),Ct=n(Zs,"DIV",{class:!0});var k3=s(Ct);T(Ty.$$.fragment,k3),wor=i(k3),bpe=n(k3,"P",{});var Gnt=s(bpe);Aor=r(Gnt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Gnt.forEach(t),yor=i(k3),$d=n(k3,"P",{});var YU=s($d);Lor=r(YU,`Note:
Loading a model from its configuration file does `),Fpe=n(YU,"STRONG",{});var Ont=s(Fpe);xor=r(Ont,"not"),Ont.forEach(t),$or=r(YU,` load the model weights. It only affects the
model\u2019s configuration. Use `),yV=n(YU,"A",{href:!0});var Vnt=s(yV);kor=r(Vnt,"from_pretrained()"),Vnt.forEach(t),Sor=r(YU," to load the model weights."),YU.forEach(t),Ror=i(k3),T(q6.$$.fragment,k3),k3.forEach(t),Bor=i(Zs),Cr=n(Zs,"DIV",{class:!0});var el=s(Cr);T(My.$$.fragment,el),Por=i(el),vpe=n(el,"P",{});var Xnt=s(vpe);Ior=r(Xnt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Xnt.forEach(t),qor=i(el),Ua=n(el,"P",{});var S3=s(Ua);Nor=r(S3,"The model class to instantiate is selected based on the "),Tpe=n(S3,"CODE",{});var znt=s(Tpe);jor=r(znt,"model_type"),znt.forEach(t),Dor=r(S3,` property of the config object (either
passed as an argument or loaded from `),Mpe=n(S3,"CODE",{});var Qnt=s(Mpe);Gor=r(Qnt,"pretrained_model_name_or_path"),Qnt.forEach(t),Oor=r(S3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Epe=n(S3,"CODE",{});var Wnt=s(Epe);Vor=r(Wnt,"pretrained_model_name_or_path"),Wnt.forEach(t),Xor=r(S3,":"),S3.forEach(t),zor=i(el),ve=n(el,"UL",{});var Le=s(ve);N6=n(Le,"LI",{});var uLe=s(N6);Cpe=n(uLe,"STRONG",{});var Hnt=s(Cpe);Qor=r(Hnt,"bert"),Hnt.forEach(t),Wor=r(uLe," \u2014 "),LV=n(uLe,"A",{href:!0});var Unt=s(LV);Hor=r(Unt,"TFBertLMHeadModel"),Unt.forEach(t),Uor=r(uLe," (BERT model)"),uLe.forEach(t),Jor=i(Le),j6=n(Le,"LI",{});var _Le=s(j6);wpe=n(_Le,"STRONG",{});var Jnt=s(wpe);Yor=r(Jnt,"camembert"),Jnt.forEach(t),Kor=r(_Le," \u2014 "),xV=n(_Le,"A",{href:!0});var Ynt=s(xV);Zor=r(Ynt,"TFCamembertForCausalLM"),Ynt.forEach(t),err=r(_Le," (CamemBERT model)"),_Le.forEach(t),orr=i(Le),D6=n(Le,"LI",{});var bLe=s(D6);Ape=n(bLe,"STRONG",{});var Knt=s(Ape);rrr=r(Knt,"ctrl"),Knt.forEach(t),trr=r(bLe," \u2014 "),$V=n(bLe,"A",{href:!0});var Znt=s($V);arr=r(Znt,"TFCTRLLMHeadModel"),Znt.forEach(t),nrr=r(bLe," (CTRL model)"),bLe.forEach(t),srr=i(Le),G6=n(Le,"LI",{});var FLe=s(G6);ype=n(FLe,"STRONG",{});var est=s(ype);lrr=r(est,"gpt2"),est.forEach(t),irr=r(FLe," \u2014 "),kV=n(FLe,"A",{href:!0});var ost=s(kV);drr=r(ost,"TFGPT2LMHeadModel"),ost.forEach(t),crr=r(FLe," (OpenAI GPT-2 model)"),FLe.forEach(t),frr=i(Le),O6=n(Le,"LI",{});var vLe=s(O6);Lpe=n(vLe,"STRONG",{});var rst=s(Lpe);mrr=r(rst,"openai-gpt"),rst.forEach(t),grr=r(vLe," \u2014 "),SV=n(vLe,"A",{href:!0});var tst=s(SV);hrr=r(tst,"TFOpenAIGPTLMHeadModel"),tst.forEach(t),prr=r(vLe," (OpenAI GPT model)"),vLe.forEach(t),urr=i(Le),V6=n(Le,"LI",{});var TLe=s(V6);xpe=n(TLe,"STRONG",{});var ast=s(xpe);_rr=r(ast,"rembert"),ast.forEach(t),brr=r(TLe," \u2014 "),RV=n(TLe,"A",{href:!0});var nst=s(RV);Frr=r(nst,"TFRemBertForCausalLM"),nst.forEach(t),vrr=r(TLe," (RemBERT model)"),TLe.forEach(t),Trr=i(Le),X6=n(Le,"LI",{});var MLe=s(X6);$pe=n(MLe,"STRONG",{});var sst=s($pe);Mrr=r(sst,"roberta"),sst.forEach(t),Err=r(MLe," \u2014 "),BV=n(MLe,"A",{href:!0});var lst=s(BV);Crr=r(lst,"TFRobertaForCausalLM"),lst.forEach(t),wrr=r(MLe," (RoBERTa model)"),MLe.forEach(t),Arr=i(Le),z6=n(Le,"LI",{});var ELe=s(z6);kpe=n(ELe,"STRONG",{});var ist=s(kpe);yrr=r(ist,"roformer"),ist.forEach(t),Lrr=r(ELe," \u2014 "),PV=n(ELe,"A",{href:!0});var dst=s(PV);xrr=r(dst,"TFRoFormerForCausalLM"),dst.forEach(t),$rr=r(ELe," (RoFormer model)"),ELe.forEach(t),krr=i(Le),Q6=n(Le,"LI",{});var CLe=s(Q6);Spe=n(CLe,"STRONG",{});var cst=s(Spe);Srr=r(cst,"transfo-xl"),cst.forEach(t),Rrr=r(CLe," \u2014 "),IV=n(CLe,"A",{href:!0});var fst=s(IV);Brr=r(fst,"TFTransfoXLLMHeadModel"),fst.forEach(t),Prr=r(CLe," (Transformer-XL model)"),CLe.forEach(t),Irr=i(Le),W6=n(Le,"LI",{});var wLe=s(W6);Rpe=n(wLe,"STRONG",{});var mst=s(Rpe);qrr=r(mst,"xlm"),mst.forEach(t),Nrr=r(wLe," \u2014 "),qV=n(wLe,"A",{href:!0});var gst=s(qV);jrr=r(gst,"TFXLMWithLMHeadModel"),gst.forEach(t),Drr=r(wLe," (XLM model)"),wLe.forEach(t),Grr=i(Le),H6=n(Le,"LI",{});var ALe=s(H6);Bpe=n(ALe,"STRONG",{});var hst=s(Bpe);Orr=r(hst,"xlnet"),hst.forEach(t),Vrr=r(ALe," \u2014 "),NV=n(ALe,"A",{href:!0});var pst=s(NV);Xrr=r(pst,"TFXLNetLMHeadModel"),pst.forEach(t),zrr=r(ALe," (XLNet model)"),ALe.forEach(t),Le.forEach(t),Qrr=i(el),T(U6.$$.fragment,el),el.forEach(t),Zs.forEach(t),jke=i(f),kd=n(f,"H2",{class:!0});var VRe=s(kd);J6=n(VRe,"A",{id:!0,class:!0,href:!0});var ust=s(J6);Ppe=n(ust,"SPAN",{});var _st=s(Ppe);T(Ey.$$.fragment,_st),_st.forEach(t),ust.forEach(t),Wrr=i(VRe),Ipe=n(VRe,"SPAN",{});var bst=s(Ipe);Hrr=r(bst,"TFAutoModelForImageClassification"),bst.forEach(t),VRe.forEach(t),Dke=i(f),Ko=n(f,"DIV",{class:!0});var ol=s(Ko);T(Cy.$$.fragment,ol),Urr=i(ol),Sd=n(ol,"P",{});var KU=s(Sd);Jrr=r(KU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),jV=n(KU,"A",{href:!0});var Fst=s(jV);Yrr=r(Fst,"from_pretrained()"),Fst.forEach(t),Krr=r(KU," class method or the "),DV=n(KU,"A",{href:!0});var vst=s(DV);Zrr=r(vst,"from_config()"),vst.forEach(t),etr=r(KU,` class
method.`),KU.forEach(t),otr=i(ol),wy=n(ol,"P",{});var XRe=s(wy);rtr=r(XRe,"This class cannot be instantiated directly using "),qpe=n(XRe,"CODE",{});var Tst=s(qpe);ttr=r(Tst,"__init__()"),Tst.forEach(t),atr=r(XRe," (throws an error)."),XRe.forEach(t),ntr=i(ol),wt=n(ol,"DIV",{class:!0});var R3=s(wt);T(Ay.$$.fragment,R3),str=i(R3),Npe=n(R3,"P",{});var Mst=s(Npe);ltr=r(Mst,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Mst.forEach(t),itr=i(R3),Rd=n(R3,"P",{});var ZU=s(Rd);dtr=r(ZU,`Note:
Loading a model from its configuration file does `),jpe=n(ZU,"STRONG",{});var Est=s(jpe);ctr=r(Est,"not"),Est.forEach(t),ftr=r(ZU,` load the model weights. It only affects the
model\u2019s configuration. Use `),GV=n(ZU,"A",{href:!0});var Cst=s(GV);mtr=r(Cst,"from_pretrained()"),Cst.forEach(t),gtr=r(ZU," to load the model weights."),ZU.forEach(t),htr=i(R3),T(Y6.$$.fragment,R3),R3.forEach(t),ptr=i(ol),wr=n(ol,"DIV",{class:!0});var rl=s(wr);T(yy.$$.fragment,rl),utr=i(rl),Dpe=n(rl,"P",{});var wst=s(Dpe);_tr=r(wst,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),wst.forEach(t),btr=i(rl),Ja=n(rl,"P",{});var B3=s(Ja);Ftr=r(B3,"The model class to instantiate is selected based on the "),Gpe=n(B3,"CODE",{});var Ast=s(Gpe);vtr=r(Ast,"model_type"),Ast.forEach(t),Ttr=r(B3,` property of the config object (either
passed as an argument or loaded from `),Ope=n(B3,"CODE",{});var yst=s(Ope);Mtr=r(yst,"pretrained_model_name_or_path"),yst.forEach(t),Etr=r(B3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vpe=n(B3,"CODE",{});var Lst=s(Vpe);Ctr=r(Lst,"pretrained_model_name_or_path"),Lst.forEach(t),wtr=r(B3,":"),B3.forEach(t),Atr=i(rl),Ly=n(rl,"UL",{});var zRe=s(Ly);K6=n(zRe,"LI",{});var yLe=s(K6);Xpe=n(yLe,"STRONG",{});var xst=s(Xpe);ytr=r(xst,"convnext"),xst.forEach(t),Ltr=r(yLe," \u2014 "),OV=n(yLe,"A",{href:!0});var $st=s(OV);xtr=r($st,"TFConvNextForImageClassification"),$st.forEach(t),$tr=r(yLe," (ConvNext model)"),yLe.forEach(t),ktr=i(zRe),Z6=n(zRe,"LI",{});var LLe=s(Z6);zpe=n(LLe,"STRONG",{});var kst=s(zpe);Str=r(kst,"vit"),kst.forEach(t),Rtr=r(LLe," \u2014 "),VV=n(LLe,"A",{href:!0});var Sst=s(VV);Btr=r(Sst,"TFViTForImageClassification"),Sst.forEach(t),Ptr=r(LLe," (ViT model)"),LLe.forEach(t),zRe.forEach(t),Itr=i(rl),T(eT.$$.fragment,rl),rl.forEach(t),ol.forEach(t),Gke=i(f),Bd=n(f,"H2",{class:!0});var QRe=s(Bd);oT=n(QRe,"A",{id:!0,class:!0,href:!0});var Rst=s(oT);Qpe=n(Rst,"SPAN",{});var Bst=s(Qpe);T(xy.$$.fragment,Bst),Bst.forEach(t),Rst.forEach(t),qtr=i(QRe),Wpe=n(QRe,"SPAN",{});var Pst=s(Wpe);Ntr=r(Pst,"TFAutoModelForMaskedLM"),Pst.forEach(t),QRe.forEach(t),Oke=i(f),Zo=n(f,"DIV",{class:!0});var tl=s(Zo);T($y.$$.fragment,tl),jtr=i(tl),Pd=n(tl,"P",{});var eJ=s(Pd);Dtr=r(eJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),XV=n(eJ,"A",{href:!0});var Ist=s(XV);Gtr=r(Ist,"from_pretrained()"),Ist.forEach(t),Otr=r(eJ," class method or the "),zV=n(eJ,"A",{href:!0});var qst=s(zV);Vtr=r(qst,"from_config()"),qst.forEach(t),Xtr=r(eJ,` class
method.`),eJ.forEach(t),ztr=i(tl),ky=n(tl,"P",{});var WRe=s(ky);Qtr=r(WRe,"This class cannot be instantiated directly using "),Hpe=n(WRe,"CODE",{});var Nst=s(Hpe);Wtr=r(Nst,"__init__()"),Nst.forEach(t),Htr=r(WRe," (throws an error)."),WRe.forEach(t),Utr=i(tl),At=n(tl,"DIV",{class:!0});var P3=s(At);T(Sy.$$.fragment,P3),Jtr=i(P3),Upe=n(P3,"P",{});var jst=s(Upe);Ytr=r(jst,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),jst.forEach(t),Ktr=i(P3),Id=n(P3,"P",{});var oJ=s(Id);Ztr=r(oJ,`Note:
Loading a model from its configuration file does `),Jpe=n(oJ,"STRONG",{});var Dst=s(Jpe);ear=r(Dst,"not"),Dst.forEach(t),oar=r(oJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QV=n(oJ,"A",{href:!0});var Gst=s(QV);rar=r(Gst,"from_pretrained()"),Gst.forEach(t),tar=r(oJ," to load the model weights."),oJ.forEach(t),aar=i(P3),T(rT.$$.fragment,P3),P3.forEach(t),nar=i(tl),Ar=n(tl,"DIV",{class:!0});var al=s(Ar);T(Ry.$$.fragment,al),sar=i(al),Ype=n(al,"P",{});var Ost=s(Ype);lar=r(Ost,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Ost.forEach(t),iar=i(al),Ya=n(al,"P",{});var I3=s(Ya);dar=r(I3,"The model class to instantiate is selected based on the "),Kpe=n(I3,"CODE",{});var Vst=s(Kpe);car=r(Vst,"model_type"),Vst.forEach(t),far=r(I3,` property of the config object (either
passed as an argument or loaded from `),Zpe=n(I3,"CODE",{});var Xst=s(Zpe);mar=r(Xst,"pretrained_model_name_or_path"),Xst.forEach(t),gar=r(I3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eue=n(I3,"CODE",{});var zst=s(eue);har=r(zst,"pretrained_model_name_or_path"),zst.forEach(t),par=r(I3,":"),I3.forEach(t),uar=i(al),se=n(al,"UL",{});var de=s(se);tT=n(de,"LI",{});var xLe=s(tT);oue=n(xLe,"STRONG",{});var Qst=s(oue);_ar=r(Qst,"albert"),Qst.forEach(t),bar=r(xLe," \u2014 "),WV=n(xLe,"A",{href:!0});var Wst=s(WV);Far=r(Wst,"TFAlbertForMaskedLM"),Wst.forEach(t),Tar=r(xLe," (ALBERT model)"),xLe.forEach(t),Mar=i(de),aT=n(de,"LI",{});var $Le=s(aT);rue=n($Le,"STRONG",{});var Hst=s(rue);Ear=r(Hst,"bert"),Hst.forEach(t),Car=r($Le," \u2014 "),HV=n($Le,"A",{href:!0});var Ust=s(HV);war=r(Ust,"TFBertForMaskedLM"),Ust.forEach(t),Aar=r($Le," (BERT model)"),$Le.forEach(t),yar=i(de),nT=n(de,"LI",{});var kLe=s(nT);tue=n(kLe,"STRONG",{});var Jst=s(tue);Lar=r(Jst,"camembert"),Jst.forEach(t),xar=r(kLe," \u2014 "),UV=n(kLe,"A",{href:!0});var Yst=s(UV);$ar=r(Yst,"TFCamembertForMaskedLM"),Yst.forEach(t),kar=r(kLe," (CamemBERT model)"),kLe.forEach(t),Sar=i(de),sT=n(de,"LI",{});var SLe=s(sT);aue=n(SLe,"STRONG",{});var Kst=s(aue);Rar=r(Kst,"convbert"),Kst.forEach(t),Bar=r(SLe," \u2014 "),JV=n(SLe,"A",{href:!0});var Zst=s(JV);Par=r(Zst,"TFConvBertForMaskedLM"),Zst.forEach(t),Iar=r(SLe," (ConvBERT model)"),SLe.forEach(t),qar=i(de),lT=n(de,"LI",{});var RLe=s(lT);nue=n(RLe,"STRONG",{});var elt=s(nue);Nar=r(elt,"deberta"),elt.forEach(t),jar=r(RLe," \u2014 "),YV=n(RLe,"A",{href:!0});var olt=s(YV);Dar=r(olt,"TFDebertaForMaskedLM"),olt.forEach(t),Gar=r(RLe," (DeBERTa model)"),RLe.forEach(t),Oar=i(de),iT=n(de,"LI",{});var BLe=s(iT);sue=n(BLe,"STRONG",{});var rlt=s(sue);Var=r(rlt,"deberta-v2"),rlt.forEach(t),Xar=r(BLe," \u2014 "),KV=n(BLe,"A",{href:!0});var tlt=s(KV);zar=r(tlt,"TFDebertaV2ForMaskedLM"),tlt.forEach(t),Qar=r(BLe," (DeBERTa-v2 model)"),BLe.forEach(t),War=i(de),dT=n(de,"LI",{});var PLe=s(dT);lue=n(PLe,"STRONG",{});var alt=s(lue);Har=r(alt,"distilbert"),alt.forEach(t),Uar=r(PLe," \u2014 "),ZV=n(PLe,"A",{href:!0});var nlt=s(ZV);Jar=r(nlt,"TFDistilBertForMaskedLM"),nlt.forEach(t),Yar=r(PLe," (DistilBERT model)"),PLe.forEach(t),Kar=i(de),cT=n(de,"LI",{});var ILe=s(cT);iue=n(ILe,"STRONG",{});var slt=s(iue);Zar=r(slt,"electra"),slt.forEach(t),enr=r(ILe," \u2014 "),eX=n(ILe,"A",{href:!0});var llt=s(eX);onr=r(llt,"TFElectraForMaskedLM"),llt.forEach(t),rnr=r(ILe," (ELECTRA model)"),ILe.forEach(t),tnr=i(de),fT=n(de,"LI",{});var qLe=s(fT);due=n(qLe,"STRONG",{});var ilt=s(due);anr=r(ilt,"flaubert"),ilt.forEach(t),nnr=r(qLe," \u2014 "),oX=n(qLe,"A",{href:!0});var dlt=s(oX);snr=r(dlt,"TFFlaubertWithLMHeadModel"),dlt.forEach(t),lnr=r(qLe," (FlauBERT model)"),qLe.forEach(t),inr=i(de),mT=n(de,"LI",{});var NLe=s(mT);cue=n(NLe,"STRONG",{});var clt=s(cue);dnr=r(clt,"funnel"),clt.forEach(t),cnr=r(NLe," \u2014 "),rX=n(NLe,"A",{href:!0});var flt=s(rX);fnr=r(flt,"TFFunnelForMaskedLM"),flt.forEach(t),mnr=r(NLe," (Funnel Transformer model)"),NLe.forEach(t),gnr=i(de),gT=n(de,"LI",{});var jLe=s(gT);fue=n(jLe,"STRONG",{});var mlt=s(fue);hnr=r(mlt,"layoutlm"),mlt.forEach(t),pnr=r(jLe," \u2014 "),tX=n(jLe,"A",{href:!0});var glt=s(tX);unr=r(glt,"TFLayoutLMForMaskedLM"),glt.forEach(t),_nr=r(jLe," (LayoutLM model)"),jLe.forEach(t),bnr=i(de),hT=n(de,"LI",{});var DLe=s(hT);mue=n(DLe,"STRONG",{});var hlt=s(mue);Fnr=r(hlt,"longformer"),hlt.forEach(t),vnr=r(DLe," \u2014 "),aX=n(DLe,"A",{href:!0});var plt=s(aX);Tnr=r(plt,"TFLongformerForMaskedLM"),plt.forEach(t),Mnr=r(DLe," (Longformer model)"),DLe.forEach(t),Enr=i(de),pT=n(de,"LI",{});var GLe=s(pT);gue=n(GLe,"STRONG",{});var ult=s(gue);Cnr=r(ult,"mobilebert"),ult.forEach(t),wnr=r(GLe," \u2014 "),nX=n(GLe,"A",{href:!0});var _lt=s(nX);Anr=r(_lt,"TFMobileBertForMaskedLM"),_lt.forEach(t),ynr=r(GLe," (MobileBERT model)"),GLe.forEach(t),Lnr=i(de),uT=n(de,"LI",{});var OLe=s(uT);hue=n(OLe,"STRONG",{});var blt=s(hue);xnr=r(blt,"mpnet"),blt.forEach(t),$nr=r(OLe," \u2014 "),sX=n(OLe,"A",{href:!0});var Flt=s(sX);knr=r(Flt,"TFMPNetForMaskedLM"),Flt.forEach(t),Snr=r(OLe," (MPNet model)"),OLe.forEach(t),Rnr=i(de),_T=n(de,"LI",{});var VLe=s(_T);pue=n(VLe,"STRONG",{});var vlt=s(pue);Bnr=r(vlt,"rembert"),vlt.forEach(t),Pnr=r(VLe," \u2014 "),lX=n(VLe,"A",{href:!0});var Tlt=s(lX);Inr=r(Tlt,"TFRemBertForMaskedLM"),Tlt.forEach(t),qnr=r(VLe," (RemBERT model)"),VLe.forEach(t),Nnr=i(de),bT=n(de,"LI",{});var XLe=s(bT);uue=n(XLe,"STRONG",{});var Mlt=s(uue);jnr=r(Mlt,"roberta"),Mlt.forEach(t),Dnr=r(XLe," \u2014 "),iX=n(XLe,"A",{href:!0});var Elt=s(iX);Gnr=r(Elt,"TFRobertaForMaskedLM"),Elt.forEach(t),Onr=r(XLe," (RoBERTa model)"),XLe.forEach(t),Vnr=i(de),FT=n(de,"LI",{});var zLe=s(FT);_ue=n(zLe,"STRONG",{});var Clt=s(_ue);Xnr=r(Clt,"roformer"),Clt.forEach(t),znr=r(zLe," \u2014 "),dX=n(zLe,"A",{href:!0});var wlt=s(dX);Qnr=r(wlt,"TFRoFormerForMaskedLM"),wlt.forEach(t),Wnr=r(zLe," (RoFormer model)"),zLe.forEach(t),Hnr=i(de),vT=n(de,"LI",{});var QLe=s(vT);bue=n(QLe,"STRONG",{});var Alt=s(bue);Unr=r(Alt,"tapas"),Alt.forEach(t),Jnr=r(QLe," \u2014 "),cX=n(QLe,"A",{href:!0});var ylt=s(cX);Ynr=r(ylt,"TFTapasForMaskedLM"),ylt.forEach(t),Knr=r(QLe," (TAPAS model)"),QLe.forEach(t),Znr=i(de),TT=n(de,"LI",{});var WLe=s(TT);Fue=n(WLe,"STRONG",{});var Llt=s(Fue);esr=r(Llt,"xlm"),Llt.forEach(t),osr=r(WLe," \u2014 "),fX=n(WLe,"A",{href:!0});var xlt=s(fX);rsr=r(xlt,"TFXLMWithLMHeadModel"),xlt.forEach(t),tsr=r(WLe," (XLM model)"),WLe.forEach(t),asr=i(de),MT=n(de,"LI",{});var HLe=s(MT);vue=n(HLe,"STRONG",{});var $lt=s(vue);nsr=r($lt,"xlm-roberta"),$lt.forEach(t),ssr=r(HLe," \u2014 "),mX=n(HLe,"A",{href:!0});var klt=s(mX);lsr=r(klt,"TFXLMRobertaForMaskedLM"),klt.forEach(t),isr=r(HLe," (XLM-RoBERTa model)"),HLe.forEach(t),de.forEach(t),dsr=i(al),T(ET.$$.fragment,al),al.forEach(t),tl.forEach(t),Vke=i(f),qd=n(f,"H2",{class:!0});var HRe=s(qd);CT=n(HRe,"A",{id:!0,class:!0,href:!0});var Slt=s(CT);Tue=n(Slt,"SPAN",{});var Rlt=s(Tue);T(By.$$.fragment,Rlt),Rlt.forEach(t),Slt.forEach(t),csr=i(HRe),Mue=n(HRe,"SPAN",{});var Blt=s(Mue);fsr=r(Blt,"TFAutoModelForSeq2SeqLM"),Blt.forEach(t),HRe.forEach(t),Xke=i(f),er=n(f,"DIV",{class:!0});var nl=s(er);T(Py.$$.fragment,nl),msr=i(nl),Nd=n(nl,"P",{});var rJ=s(Nd);gsr=r(rJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gX=n(rJ,"A",{href:!0});var Plt=s(gX);hsr=r(Plt,"from_pretrained()"),Plt.forEach(t),psr=r(rJ," class method or the "),hX=n(rJ,"A",{href:!0});var Ilt=s(hX);usr=r(Ilt,"from_config()"),Ilt.forEach(t),_sr=r(rJ,` class
method.`),rJ.forEach(t),bsr=i(nl),Iy=n(nl,"P",{});var URe=s(Iy);Fsr=r(URe,"This class cannot be instantiated directly using "),Eue=n(URe,"CODE",{});var qlt=s(Eue);vsr=r(qlt,"__init__()"),qlt.forEach(t),Tsr=r(URe," (throws an error)."),URe.forEach(t),Msr=i(nl),yt=n(nl,"DIV",{class:!0});var q3=s(yt);T(qy.$$.fragment,q3),Esr=i(q3),Cue=n(q3,"P",{});var Nlt=s(Cue);Csr=r(Nlt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Nlt.forEach(t),wsr=i(q3),jd=n(q3,"P",{});var tJ=s(jd);Asr=r(tJ,`Note:
Loading a model from its configuration file does `),wue=n(tJ,"STRONG",{});var jlt=s(wue);ysr=r(jlt,"not"),jlt.forEach(t),Lsr=r(tJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pX=n(tJ,"A",{href:!0});var Dlt=s(pX);xsr=r(Dlt,"from_pretrained()"),Dlt.forEach(t),$sr=r(tJ," to load the model weights."),tJ.forEach(t),ksr=i(q3),T(wT.$$.fragment,q3),q3.forEach(t),Ssr=i(nl),yr=n(nl,"DIV",{class:!0});var sl=s(yr);T(Ny.$$.fragment,sl),Rsr=i(sl),Aue=n(sl,"P",{});var Glt=s(Aue);Bsr=r(Glt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Glt.forEach(t),Psr=i(sl),Ka=n(sl,"P",{});var N3=s(Ka);Isr=r(N3,"The model class to instantiate is selected based on the "),yue=n(N3,"CODE",{});var Olt=s(yue);qsr=r(Olt,"model_type"),Olt.forEach(t),Nsr=r(N3,` property of the config object (either
passed as an argument or loaded from `),Lue=n(N3,"CODE",{});var Vlt=s(Lue);jsr=r(Vlt,"pretrained_model_name_or_path"),Vlt.forEach(t),Dsr=r(N3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xue=n(N3,"CODE",{});var Xlt=s(xue);Gsr=r(Xlt,"pretrained_model_name_or_path"),Xlt.forEach(t),Osr=r(N3,":"),N3.forEach(t),Vsr=i(sl),Ee=n(sl,"UL",{});var $e=s(Ee);AT=n($e,"LI",{});var ULe=s(AT);$ue=n(ULe,"STRONG",{});var zlt=s($ue);Xsr=r(zlt,"bart"),zlt.forEach(t),zsr=r(ULe," \u2014 "),uX=n(ULe,"A",{href:!0});var Qlt=s(uX);Qsr=r(Qlt,"TFBartForConditionalGeneration"),Qlt.forEach(t),Wsr=r(ULe," (BART model)"),ULe.forEach(t),Hsr=i($e),yT=n($e,"LI",{});var JLe=s(yT);kue=n(JLe,"STRONG",{});var Wlt=s(kue);Usr=r(Wlt,"blenderbot"),Wlt.forEach(t),Jsr=r(JLe," \u2014 "),_X=n(JLe,"A",{href:!0});var Hlt=s(_X);Ysr=r(Hlt,"TFBlenderbotForConditionalGeneration"),Hlt.forEach(t),Ksr=r(JLe," (Blenderbot model)"),JLe.forEach(t),Zsr=i($e),LT=n($e,"LI",{});var YLe=s(LT);Sue=n(YLe,"STRONG",{});var Ult=s(Sue);elr=r(Ult,"blenderbot-small"),Ult.forEach(t),olr=r(YLe," \u2014 "),bX=n(YLe,"A",{href:!0});var Jlt=s(bX);rlr=r(Jlt,"TFBlenderbotSmallForConditionalGeneration"),Jlt.forEach(t),tlr=r(YLe," (BlenderbotSmall model)"),YLe.forEach(t),alr=i($e),xT=n($e,"LI",{});var KLe=s(xT);Rue=n(KLe,"STRONG",{});var Ylt=s(Rue);nlr=r(Ylt,"encoder-decoder"),Ylt.forEach(t),slr=r(KLe," \u2014 "),FX=n(KLe,"A",{href:!0});var Klt=s(FX);llr=r(Klt,"TFEncoderDecoderModel"),Klt.forEach(t),ilr=r(KLe," (Encoder decoder model)"),KLe.forEach(t),dlr=i($e),$T=n($e,"LI",{});var ZLe=s($T);Bue=n(ZLe,"STRONG",{});var Zlt=s(Bue);clr=r(Zlt,"led"),Zlt.forEach(t),flr=r(ZLe," \u2014 "),vX=n(ZLe,"A",{href:!0});var eit=s(vX);mlr=r(eit,"TFLEDForConditionalGeneration"),eit.forEach(t),glr=r(ZLe," (LED model)"),ZLe.forEach(t),hlr=i($e),kT=n($e,"LI",{});var e8e=s(kT);Pue=n(e8e,"STRONG",{});var oit=s(Pue);plr=r(oit,"marian"),oit.forEach(t),ulr=r(e8e," \u2014 "),TX=n(e8e,"A",{href:!0});var rit=s(TX);_lr=r(rit,"TFMarianMTModel"),rit.forEach(t),blr=r(e8e," (Marian model)"),e8e.forEach(t),Flr=i($e),ST=n($e,"LI",{});var o8e=s(ST);Iue=n(o8e,"STRONG",{});var tit=s(Iue);vlr=r(tit,"mbart"),tit.forEach(t),Tlr=r(o8e," \u2014 "),MX=n(o8e,"A",{href:!0});var ait=s(MX);Mlr=r(ait,"TFMBartForConditionalGeneration"),ait.forEach(t),Elr=r(o8e," (mBART model)"),o8e.forEach(t),Clr=i($e),RT=n($e,"LI",{});var r8e=s(RT);que=n(r8e,"STRONG",{});var nit=s(que);wlr=r(nit,"mt5"),nit.forEach(t),Alr=r(r8e," \u2014 "),EX=n(r8e,"A",{href:!0});var sit=s(EX);ylr=r(sit,"TFMT5ForConditionalGeneration"),sit.forEach(t),Llr=r(r8e," (mT5 model)"),r8e.forEach(t),xlr=i($e),BT=n($e,"LI",{});var t8e=s(BT);Nue=n(t8e,"STRONG",{});var lit=s(Nue);$lr=r(lit,"pegasus"),lit.forEach(t),klr=r(t8e," \u2014 "),CX=n(t8e,"A",{href:!0});var iit=s(CX);Slr=r(iit,"TFPegasusForConditionalGeneration"),iit.forEach(t),Rlr=r(t8e," (Pegasus model)"),t8e.forEach(t),Blr=i($e),PT=n($e,"LI",{});var a8e=s(PT);jue=n(a8e,"STRONG",{});var dit=s(jue);Plr=r(dit,"t5"),dit.forEach(t),Ilr=r(a8e," \u2014 "),wX=n(a8e,"A",{href:!0});var cit=s(wX);qlr=r(cit,"TFT5ForConditionalGeneration"),cit.forEach(t),Nlr=r(a8e," (T5 model)"),a8e.forEach(t),$e.forEach(t),jlr=i(sl),T(IT.$$.fragment,sl),sl.forEach(t),nl.forEach(t),zke=i(f),Dd=n(f,"H2",{class:!0});var JRe=s(Dd);qT=n(JRe,"A",{id:!0,class:!0,href:!0});var fit=s(qT);Due=n(fit,"SPAN",{});var mit=s(Due);T(jy.$$.fragment,mit),mit.forEach(t),fit.forEach(t),Dlr=i(JRe),Gue=n(JRe,"SPAN",{});var git=s(Gue);Glr=r(git,"TFAutoModelForSequenceClassification"),git.forEach(t),JRe.forEach(t),Qke=i(f),or=n(f,"DIV",{class:!0});var ll=s(or);T(Dy.$$.fragment,ll),Olr=i(ll),Gd=n(ll,"P",{});var aJ=s(Gd);Vlr=r(aJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),AX=n(aJ,"A",{href:!0});var hit=s(AX);Xlr=r(hit,"from_pretrained()"),hit.forEach(t),zlr=r(aJ," class method or the "),yX=n(aJ,"A",{href:!0});var pit=s(yX);Qlr=r(pit,"from_config()"),pit.forEach(t),Wlr=r(aJ,` class
method.`),aJ.forEach(t),Hlr=i(ll),Gy=n(ll,"P",{});var YRe=s(Gy);Ulr=r(YRe,"This class cannot be instantiated directly using "),Oue=n(YRe,"CODE",{});var uit=s(Oue);Jlr=r(uit,"__init__()"),uit.forEach(t),Ylr=r(YRe," (throws an error)."),YRe.forEach(t),Klr=i(ll),Lt=n(ll,"DIV",{class:!0});var j3=s(Lt);T(Oy.$$.fragment,j3),Zlr=i(j3),Vue=n(j3,"P",{});var _it=s(Vue);eir=r(_it,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),_it.forEach(t),oir=i(j3),Od=n(j3,"P",{});var nJ=s(Od);rir=r(nJ,`Note:
Loading a model from its configuration file does `),Xue=n(nJ,"STRONG",{});var bit=s(Xue);tir=r(bit,"not"),bit.forEach(t),air=r(nJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),LX=n(nJ,"A",{href:!0});var Fit=s(LX);nir=r(Fit,"from_pretrained()"),Fit.forEach(t),sir=r(nJ," to load the model weights."),nJ.forEach(t),lir=i(j3),T(NT.$$.fragment,j3),j3.forEach(t),iir=i(ll),Lr=n(ll,"DIV",{class:!0});var il=s(Lr);T(Vy.$$.fragment,il),dir=i(il),zue=n(il,"P",{});var vit=s(zue);cir=r(vit,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),vit.forEach(t),fir=i(il),Za=n(il,"P",{});var D3=s(Za);mir=r(D3,"The model class to instantiate is selected based on the "),Que=n(D3,"CODE",{});var Tit=s(Que);gir=r(Tit,"model_type"),Tit.forEach(t),hir=r(D3,` property of the config object (either
passed as an argument or loaded from `),Wue=n(D3,"CODE",{});var Mit=s(Wue);pir=r(Mit,"pretrained_model_name_or_path"),Mit.forEach(t),uir=r(D3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hue=n(D3,"CODE",{});var Eit=s(Hue);_ir=r(Eit,"pretrained_model_name_or_path"),Eit.forEach(t),bir=r(D3,":"),D3.forEach(t),Fir=i(il),ee=n(il,"UL",{});var re=s(ee);jT=n(re,"LI",{});var n8e=s(jT);Uue=n(n8e,"STRONG",{});var Cit=s(Uue);vir=r(Cit,"albert"),Cit.forEach(t),Tir=r(n8e," \u2014 "),xX=n(n8e,"A",{href:!0});var wit=s(xX);Mir=r(wit,"TFAlbertForSequenceClassification"),wit.forEach(t),Eir=r(n8e," (ALBERT model)"),n8e.forEach(t),Cir=i(re),DT=n(re,"LI",{});var s8e=s(DT);Jue=n(s8e,"STRONG",{});var Ait=s(Jue);wir=r(Ait,"bert"),Ait.forEach(t),Air=r(s8e," \u2014 "),$X=n(s8e,"A",{href:!0});var yit=s($X);yir=r(yit,"TFBertForSequenceClassification"),yit.forEach(t),Lir=r(s8e," (BERT model)"),s8e.forEach(t),xir=i(re),GT=n(re,"LI",{});var l8e=s(GT);Yue=n(l8e,"STRONG",{});var Lit=s(Yue);$ir=r(Lit,"camembert"),Lit.forEach(t),kir=r(l8e," \u2014 "),kX=n(l8e,"A",{href:!0});var xit=s(kX);Sir=r(xit,"TFCamembertForSequenceClassification"),xit.forEach(t),Rir=r(l8e," (CamemBERT model)"),l8e.forEach(t),Bir=i(re),OT=n(re,"LI",{});var i8e=s(OT);Kue=n(i8e,"STRONG",{});var $it=s(Kue);Pir=r($it,"convbert"),$it.forEach(t),Iir=r(i8e," \u2014 "),SX=n(i8e,"A",{href:!0});var kit=s(SX);qir=r(kit,"TFConvBertForSequenceClassification"),kit.forEach(t),Nir=r(i8e," (ConvBERT model)"),i8e.forEach(t),jir=i(re),VT=n(re,"LI",{});var d8e=s(VT);Zue=n(d8e,"STRONG",{});var Sit=s(Zue);Dir=r(Sit,"ctrl"),Sit.forEach(t),Gir=r(d8e," \u2014 "),RX=n(d8e,"A",{href:!0});var Rit=s(RX);Oir=r(Rit,"TFCTRLForSequenceClassification"),Rit.forEach(t),Vir=r(d8e," (CTRL model)"),d8e.forEach(t),Xir=i(re),XT=n(re,"LI",{});var c8e=s(XT);e_e=n(c8e,"STRONG",{});var Bit=s(e_e);zir=r(Bit,"deberta"),Bit.forEach(t),Qir=r(c8e," \u2014 "),BX=n(c8e,"A",{href:!0});var Pit=s(BX);Wir=r(Pit,"TFDebertaForSequenceClassification"),Pit.forEach(t),Hir=r(c8e," (DeBERTa model)"),c8e.forEach(t),Uir=i(re),zT=n(re,"LI",{});var f8e=s(zT);o_e=n(f8e,"STRONG",{});var Iit=s(o_e);Jir=r(Iit,"deberta-v2"),Iit.forEach(t),Yir=r(f8e," \u2014 "),PX=n(f8e,"A",{href:!0});var qit=s(PX);Kir=r(qit,"TFDebertaV2ForSequenceClassification"),qit.forEach(t),Zir=r(f8e," (DeBERTa-v2 model)"),f8e.forEach(t),edr=i(re),QT=n(re,"LI",{});var m8e=s(QT);r_e=n(m8e,"STRONG",{});var Nit=s(r_e);odr=r(Nit,"distilbert"),Nit.forEach(t),rdr=r(m8e," \u2014 "),IX=n(m8e,"A",{href:!0});var jit=s(IX);tdr=r(jit,"TFDistilBertForSequenceClassification"),jit.forEach(t),adr=r(m8e," (DistilBERT model)"),m8e.forEach(t),ndr=i(re),WT=n(re,"LI",{});var g8e=s(WT);t_e=n(g8e,"STRONG",{});var Dit=s(t_e);sdr=r(Dit,"electra"),Dit.forEach(t),ldr=r(g8e," \u2014 "),qX=n(g8e,"A",{href:!0});var Git=s(qX);idr=r(Git,"TFElectraForSequenceClassification"),Git.forEach(t),ddr=r(g8e," (ELECTRA model)"),g8e.forEach(t),cdr=i(re),HT=n(re,"LI",{});var h8e=s(HT);a_e=n(h8e,"STRONG",{});var Oit=s(a_e);fdr=r(Oit,"flaubert"),Oit.forEach(t),mdr=r(h8e," \u2014 "),NX=n(h8e,"A",{href:!0});var Vit=s(NX);gdr=r(Vit,"TFFlaubertForSequenceClassification"),Vit.forEach(t),hdr=r(h8e," (FlauBERT model)"),h8e.forEach(t),pdr=i(re),UT=n(re,"LI",{});var p8e=s(UT);n_e=n(p8e,"STRONG",{});var Xit=s(n_e);udr=r(Xit,"funnel"),Xit.forEach(t),_dr=r(p8e," \u2014 "),jX=n(p8e,"A",{href:!0});var zit=s(jX);bdr=r(zit,"TFFunnelForSequenceClassification"),zit.forEach(t),Fdr=r(p8e," (Funnel Transformer model)"),p8e.forEach(t),vdr=i(re),JT=n(re,"LI",{});var u8e=s(JT);s_e=n(u8e,"STRONG",{});var Qit=s(s_e);Tdr=r(Qit,"gpt2"),Qit.forEach(t),Mdr=r(u8e," \u2014 "),DX=n(u8e,"A",{href:!0});var Wit=s(DX);Edr=r(Wit,"TFGPT2ForSequenceClassification"),Wit.forEach(t),Cdr=r(u8e," (OpenAI GPT-2 model)"),u8e.forEach(t),wdr=i(re),YT=n(re,"LI",{});var _8e=s(YT);l_e=n(_8e,"STRONG",{});var Hit=s(l_e);Adr=r(Hit,"layoutlm"),Hit.forEach(t),ydr=r(_8e," \u2014 "),GX=n(_8e,"A",{href:!0});var Uit=s(GX);Ldr=r(Uit,"TFLayoutLMForSequenceClassification"),Uit.forEach(t),xdr=r(_8e," (LayoutLM model)"),_8e.forEach(t),$dr=i(re),KT=n(re,"LI",{});var b8e=s(KT);i_e=n(b8e,"STRONG",{});var Jit=s(i_e);kdr=r(Jit,"longformer"),Jit.forEach(t),Sdr=r(b8e," \u2014 "),OX=n(b8e,"A",{href:!0});var Yit=s(OX);Rdr=r(Yit,"TFLongformerForSequenceClassification"),Yit.forEach(t),Bdr=r(b8e," (Longformer model)"),b8e.forEach(t),Pdr=i(re),ZT=n(re,"LI",{});var F8e=s(ZT);d_e=n(F8e,"STRONG",{});var Kit=s(d_e);Idr=r(Kit,"mobilebert"),Kit.forEach(t),qdr=r(F8e," \u2014 "),VX=n(F8e,"A",{href:!0});var Zit=s(VX);Ndr=r(Zit,"TFMobileBertForSequenceClassification"),Zit.forEach(t),jdr=r(F8e," (MobileBERT model)"),F8e.forEach(t),Ddr=i(re),eM=n(re,"LI",{});var v8e=s(eM);c_e=n(v8e,"STRONG",{});var edt=s(c_e);Gdr=r(edt,"mpnet"),edt.forEach(t),Odr=r(v8e," \u2014 "),XX=n(v8e,"A",{href:!0});var odt=s(XX);Vdr=r(odt,"TFMPNetForSequenceClassification"),odt.forEach(t),Xdr=r(v8e," (MPNet model)"),v8e.forEach(t),zdr=i(re),oM=n(re,"LI",{});var T8e=s(oM);f_e=n(T8e,"STRONG",{});var rdt=s(f_e);Qdr=r(rdt,"openai-gpt"),rdt.forEach(t),Wdr=r(T8e," \u2014 "),zX=n(T8e,"A",{href:!0});var tdt=s(zX);Hdr=r(tdt,"TFOpenAIGPTForSequenceClassification"),tdt.forEach(t),Udr=r(T8e," (OpenAI GPT model)"),T8e.forEach(t),Jdr=i(re),rM=n(re,"LI",{});var M8e=s(rM);m_e=n(M8e,"STRONG",{});var adt=s(m_e);Ydr=r(adt,"rembert"),adt.forEach(t),Kdr=r(M8e," \u2014 "),QX=n(M8e,"A",{href:!0});var ndt=s(QX);Zdr=r(ndt,"TFRemBertForSequenceClassification"),ndt.forEach(t),ecr=r(M8e," (RemBERT model)"),M8e.forEach(t),ocr=i(re),tM=n(re,"LI",{});var E8e=s(tM);g_e=n(E8e,"STRONG",{});var sdt=s(g_e);rcr=r(sdt,"roberta"),sdt.forEach(t),tcr=r(E8e," \u2014 "),WX=n(E8e,"A",{href:!0});var ldt=s(WX);acr=r(ldt,"TFRobertaForSequenceClassification"),ldt.forEach(t),ncr=r(E8e," (RoBERTa model)"),E8e.forEach(t),scr=i(re),aM=n(re,"LI",{});var C8e=s(aM);h_e=n(C8e,"STRONG",{});var idt=s(h_e);lcr=r(idt,"roformer"),idt.forEach(t),icr=r(C8e," \u2014 "),HX=n(C8e,"A",{href:!0});var ddt=s(HX);dcr=r(ddt,"TFRoFormerForSequenceClassification"),ddt.forEach(t),ccr=r(C8e," (RoFormer model)"),C8e.forEach(t),fcr=i(re),nM=n(re,"LI",{});var w8e=s(nM);p_e=n(w8e,"STRONG",{});var cdt=s(p_e);mcr=r(cdt,"tapas"),cdt.forEach(t),gcr=r(w8e," \u2014 "),UX=n(w8e,"A",{href:!0});var fdt=s(UX);hcr=r(fdt,"TFTapasForSequenceClassification"),fdt.forEach(t),pcr=r(w8e," (TAPAS model)"),w8e.forEach(t),ucr=i(re),sM=n(re,"LI",{});var A8e=s(sM);u_e=n(A8e,"STRONG",{});var mdt=s(u_e);_cr=r(mdt,"transfo-xl"),mdt.forEach(t),bcr=r(A8e," \u2014 "),JX=n(A8e,"A",{href:!0});var gdt=s(JX);Fcr=r(gdt,"TFTransfoXLForSequenceClassification"),gdt.forEach(t),vcr=r(A8e," (Transformer-XL model)"),A8e.forEach(t),Tcr=i(re),lM=n(re,"LI",{});var y8e=s(lM);__e=n(y8e,"STRONG",{});var hdt=s(__e);Mcr=r(hdt,"xlm"),hdt.forEach(t),Ecr=r(y8e," \u2014 "),YX=n(y8e,"A",{href:!0});var pdt=s(YX);Ccr=r(pdt,"TFXLMForSequenceClassification"),pdt.forEach(t),wcr=r(y8e," (XLM model)"),y8e.forEach(t),Acr=i(re),iM=n(re,"LI",{});var L8e=s(iM);b_e=n(L8e,"STRONG",{});var udt=s(b_e);ycr=r(udt,"xlm-roberta"),udt.forEach(t),Lcr=r(L8e," \u2014 "),KX=n(L8e,"A",{href:!0});var _dt=s(KX);xcr=r(_dt,"TFXLMRobertaForSequenceClassification"),_dt.forEach(t),$cr=r(L8e," (XLM-RoBERTa model)"),L8e.forEach(t),kcr=i(re),dM=n(re,"LI",{});var x8e=s(dM);F_e=n(x8e,"STRONG",{});var bdt=s(F_e);Scr=r(bdt,"xlnet"),bdt.forEach(t),Rcr=r(x8e," \u2014 "),ZX=n(x8e,"A",{href:!0});var Fdt=s(ZX);Bcr=r(Fdt,"TFXLNetForSequenceClassification"),Fdt.forEach(t),Pcr=r(x8e," (XLNet model)"),x8e.forEach(t),re.forEach(t),Icr=i(il),T(cM.$$.fragment,il),il.forEach(t),ll.forEach(t),Wke=i(f),Vd=n(f,"H2",{class:!0});var KRe=s(Vd);fM=n(KRe,"A",{id:!0,class:!0,href:!0});var vdt=s(fM);v_e=n(vdt,"SPAN",{});var Tdt=s(v_e);T(Xy.$$.fragment,Tdt),Tdt.forEach(t),vdt.forEach(t),qcr=i(KRe),T_e=n(KRe,"SPAN",{});var Mdt=s(T_e);Ncr=r(Mdt,"TFAutoModelForMultipleChoice"),Mdt.forEach(t),KRe.forEach(t),Hke=i(f),rr=n(f,"DIV",{class:!0});var dl=s(rr);T(zy.$$.fragment,dl),jcr=i(dl),Xd=n(dl,"P",{});var sJ=s(Xd);Dcr=r(sJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ez=n(sJ,"A",{href:!0});var Edt=s(ez);Gcr=r(Edt,"from_pretrained()"),Edt.forEach(t),Ocr=r(sJ," class method or the "),oz=n(sJ,"A",{href:!0});var Cdt=s(oz);Vcr=r(Cdt,"from_config()"),Cdt.forEach(t),Xcr=r(sJ,` class
method.`),sJ.forEach(t),zcr=i(dl),Qy=n(dl,"P",{});var ZRe=s(Qy);Qcr=r(ZRe,"This class cannot be instantiated directly using "),M_e=n(ZRe,"CODE",{});var wdt=s(M_e);Wcr=r(wdt,"__init__()"),wdt.forEach(t),Hcr=r(ZRe," (throws an error)."),ZRe.forEach(t),Ucr=i(dl),xt=n(dl,"DIV",{class:!0});var G3=s(xt);T(Wy.$$.fragment,G3),Jcr=i(G3),E_e=n(G3,"P",{});var Adt=s(E_e);Ycr=r(Adt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Adt.forEach(t),Kcr=i(G3),zd=n(G3,"P",{});var lJ=s(zd);Zcr=r(lJ,`Note:
Loading a model from its configuration file does `),C_e=n(lJ,"STRONG",{});var ydt=s(C_e);efr=r(ydt,"not"),ydt.forEach(t),ofr=r(lJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rz=n(lJ,"A",{href:!0});var Ldt=s(rz);rfr=r(Ldt,"from_pretrained()"),Ldt.forEach(t),tfr=r(lJ," to load the model weights."),lJ.forEach(t),afr=i(G3),T(mM.$$.fragment,G3),G3.forEach(t),nfr=i(dl),xr=n(dl,"DIV",{class:!0});var cl=s(xr);T(Hy.$$.fragment,cl),sfr=i(cl),w_e=n(cl,"P",{});var xdt=s(w_e);lfr=r(xdt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),xdt.forEach(t),ifr=i(cl),en=n(cl,"P",{});var O3=s(en);dfr=r(O3,"The model class to instantiate is selected based on the "),A_e=n(O3,"CODE",{});var $dt=s(A_e);cfr=r($dt,"model_type"),$dt.forEach(t),ffr=r(O3,` property of the config object (either
passed as an argument or loaded from `),y_e=n(O3,"CODE",{});var kdt=s(y_e);mfr=r(kdt,"pretrained_model_name_or_path"),kdt.forEach(t),gfr=r(O3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L_e=n(O3,"CODE",{});var Sdt=s(L_e);hfr=r(Sdt,"pretrained_model_name_or_path"),Sdt.forEach(t),pfr=r(O3,":"),O3.forEach(t),ufr=i(cl),ge=n(cl,"UL",{});var ue=s(ge);gM=n(ue,"LI",{});var $8e=s(gM);x_e=n($8e,"STRONG",{});var Rdt=s(x_e);_fr=r(Rdt,"albert"),Rdt.forEach(t),bfr=r($8e," \u2014 "),tz=n($8e,"A",{href:!0});var Bdt=s(tz);Ffr=r(Bdt,"TFAlbertForMultipleChoice"),Bdt.forEach(t),vfr=r($8e," (ALBERT model)"),$8e.forEach(t),Tfr=i(ue),hM=n(ue,"LI",{});var k8e=s(hM);$_e=n(k8e,"STRONG",{});var Pdt=s($_e);Mfr=r(Pdt,"bert"),Pdt.forEach(t),Efr=r(k8e," \u2014 "),az=n(k8e,"A",{href:!0});var Idt=s(az);Cfr=r(Idt,"TFBertForMultipleChoice"),Idt.forEach(t),wfr=r(k8e," (BERT model)"),k8e.forEach(t),Afr=i(ue),pM=n(ue,"LI",{});var S8e=s(pM);k_e=n(S8e,"STRONG",{});var qdt=s(k_e);yfr=r(qdt,"camembert"),qdt.forEach(t),Lfr=r(S8e," \u2014 "),nz=n(S8e,"A",{href:!0});var Ndt=s(nz);xfr=r(Ndt,"TFCamembertForMultipleChoice"),Ndt.forEach(t),$fr=r(S8e," (CamemBERT model)"),S8e.forEach(t),kfr=i(ue),uM=n(ue,"LI",{});var R8e=s(uM);S_e=n(R8e,"STRONG",{});var jdt=s(S_e);Sfr=r(jdt,"convbert"),jdt.forEach(t),Rfr=r(R8e," \u2014 "),sz=n(R8e,"A",{href:!0});var Ddt=s(sz);Bfr=r(Ddt,"TFConvBertForMultipleChoice"),Ddt.forEach(t),Pfr=r(R8e," (ConvBERT model)"),R8e.forEach(t),Ifr=i(ue),_M=n(ue,"LI",{});var B8e=s(_M);R_e=n(B8e,"STRONG",{});var Gdt=s(R_e);qfr=r(Gdt,"distilbert"),Gdt.forEach(t),Nfr=r(B8e," \u2014 "),lz=n(B8e,"A",{href:!0});var Odt=s(lz);jfr=r(Odt,"TFDistilBertForMultipleChoice"),Odt.forEach(t),Dfr=r(B8e," (DistilBERT model)"),B8e.forEach(t),Gfr=i(ue),bM=n(ue,"LI",{});var P8e=s(bM);B_e=n(P8e,"STRONG",{});var Vdt=s(B_e);Ofr=r(Vdt,"electra"),Vdt.forEach(t),Vfr=r(P8e," \u2014 "),iz=n(P8e,"A",{href:!0});var Xdt=s(iz);Xfr=r(Xdt,"TFElectraForMultipleChoice"),Xdt.forEach(t),zfr=r(P8e," (ELECTRA model)"),P8e.forEach(t),Qfr=i(ue),FM=n(ue,"LI",{});var I8e=s(FM);P_e=n(I8e,"STRONG",{});var zdt=s(P_e);Wfr=r(zdt,"flaubert"),zdt.forEach(t),Hfr=r(I8e," \u2014 "),dz=n(I8e,"A",{href:!0});var Qdt=s(dz);Ufr=r(Qdt,"TFFlaubertForMultipleChoice"),Qdt.forEach(t),Jfr=r(I8e," (FlauBERT model)"),I8e.forEach(t),Yfr=i(ue),vM=n(ue,"LI",{});var q8e=s(vM);I_e=n(q8e,"STRONG",{});var Wdt=s(I_e);Kfr=r(Wdt,"funnel"),Wdt.forEach(t),Zfr=r(q8e," \u2014 "),cz=n(q8e,"A",{href:!0});var Hdt=s(cz);emr=r(Hdt,"TFFunnelForMultipleChoice"),Hdt.forEach(t),omr=r(q8e," (Funnel Transformer model)"),q8e.forEach(t),rmr=i(ue),TM=n(ue,"LI",{});var N8e=s(TM);q_e=n(N8e,"STRONG",{});var Udt=s(q_e);tmr=r(Udt,"longformer"),Udt.forEach(t),amr=r(N8e," \u2014 "),fz=n(N8e,"A",{href:!0});var Jdt=s(fz);nmr=r(Jdt,"TFLongformerForMultipleChoice"),Jdt.forEach(t),smr=r(N8e," (Longformer model)"),N8e.forEach(t),lmr=i(ue),MM=n(ue,"LI",{});var j8e=s(MM);N_e=n(j8e,"STRONG",{});var Ydt=s(N_e);imr=r(Ydt,"mobilebert"),Ydt.forEach(t),dmr=r(j8e," \u2014 "),mz=n(j8e,"A",{href:!0});var Kdt=s(mz);cmr=r(Kdt,"TFMobileBertForMultipleChoice"),Kdt.forEach(t),fmr=r(j8e," (MobileBERT model)"),j8e.forEach(t),mmr=i(ue),EM=n(ue,"LI",{});var D8e=s(EM);j_e=n(D8e,"STRONG",{});var Zdt=s(j_e);gmr=r(Zdt,"mpnet"),Zdt.forEach(t),hmr=r(D8e," \u2014 "),gz=n(D8e,"A",{href:!0});var ect=s(gz);pmr=r(ect,"TFMPNetForMultipleChoice"),ect.forEach(t),umr=r(D8e," (MPNet model)"),D8e.forEach(t),_mr=i(ue),CM=n(ue,"LI",{});var G8e=s(CM);D_e=n(G8e,"STRONG",{});var oct=s(D_e);bmr=r(oct,"rembert"),oct.forEach(t),Fmr=r(G8e," \u2014 "),hz=n(G8e,"A",{href:!0});var rct=s(hz);vmr=r(rct,"TFRemBertForMultipleChoice"),rct.forEach(t),Tmr=r(G8e," (RemBERT model)"),G8e.forEach(t),Mmr=i(ue),wM=n(ue,"LI",{});var O8e=s(wM);G_e=n(O8e,"STRONG",{});var tct=s(G_e);Emr=r(tct,"roberta"),tct.forEach(t),Cmr=r(O8e," \u2014 "),pz=n(O8e,"A",{href:!0});var act=s(pz);wmr=r(act,"TFRobertaForMultipleChoice"),act.forEach(t),Amr=r(O8e," (RoBERTa model)"),O8e.forEach(t),ymr=i(ue),AM=n(ue,"LI",{});var V8e=s(AM);O_e=n(V8e,"STRONG",{});var nct=s(O_e);Lmr=r(nct,"roformer"),nct.forEach(t),xmr=r(V8e," \u2014 "),uz=n(V8e,"A",{href:!0});var sct=s(uz);$mr=r(sct,"TFRoFormerForMultipleChoice"),sct.forEach(t),kmr=r(V8e," (RoFormer model)"),V8e.forEach(t),Smr=i(ue),yM=n(ue,"LI",{});var X8e=s(yM);V_e=n(X8e,"STRONG",{});var lct=s(V_e);Rmr=r(lct,"xlm"),lct.forEach(t),Bmr=r(X8e," \u2014 "),_z=n(X8e,"A",{href:!0});var ict=s(_z);Pmr=r(ict,"TFXLMForMultipleChoice"),ict.forEach(t),Imr=r(X8e," (XLM model)"),X8e.forEach(t),qmr=i(ue),LM=n(ue,"LI",{});var z8e=s(LM);X_e=n(z8e,"STRONG",{});var dct=s(X_e);Nmr=r(dct,"xlm-roberta"),dct.forEach(t),jmr=r(z8e," \u2014 "),bz=n(z8e,"A",{href:!0});var cct=s(bz);Dmr=r(cct,"TFXLMRobertaForMultipleChoice"),cct.forEach(t),Gmr=r(z8e," (XLM-RoBERTa model)"),z8e.forEach(t),Omr=i(ue),xM=n(ue,"LI",{});var Q8e=s(xM);z_e=n(Q8e,"STRONG",{});var fct=s(z_e);Vmr=r(fct,"xlnet"),fct.forEach(t),Xmr=r(Q8e," \u2014 "),Fz=n(Q8e,"A",{href:!0});var mct=s(Fz);zmr=r(mct,"TFXLNetForMultipleChoice"),mct.forEach(t),Qmr=r(Q8e," (XLNet model)"),Q8e.forEach(t),ue.forEach(t),Wmr=i(cl),T($M.$$.fragment,cl),cl.forEach(t),dl.forEach(t),Uke=i(f),Qd=n(f,"H2",{class:!0});var eBe=s(Qd);kM=n(eBe,"A",{id:!0,class:!0,href:!0});var gct=s(kM);Q_e=n(gct,"SPAN",{});var hct=s(Q_e);T(Uy.$$.fragment,hct),hct.forEach(t),gct.forEach(t),Hmr=i(eBe),W_e=n(eBe,"SPAN",{});var pct=s(W_e);Umr=r(pct,"TFAutoModelForTableQuestionAnswering"),pct.forEach(t),eBe.forEach(t),Jke=i(f),tr=n(f,"DIV",{class:!0});var fl=s(tr);T(Jy.$$.fragment,fl),Jmr=i(fl),Wd=n(fl,"P",{});var iJ=s(Wd);Ymr=r(iJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),vz=n(iJ,"A",{href:!0});var uct=s(vz);Kmr=r(uct,"from_pretrained()"),uct.forEach(t),Zmr=r(iJ," class method or the "),Tz=n(iJ,"A",{href:!0});var _ct=s(Tz);egr=r(_ct,"from_config()"),_ct.forEach(t),ogr=r(iJ,` class
method.`),iJ.forEach(t),rgr=i(fl),Yy=n(fl,"P",{});var oBe=s(Yy);tgr=r(oBe,"This class cannot be instantiated directly using "),H_e=n(oBe,"CODE",{});var bct=s(H_e);agr=r(bct,"__init__()"),bct.forEach(t),ngr=r(oBe," (throws an error)."),oBe.forEach(t),sgr=i(fl),$t=n(fl,"DIV",{class:!0});var V3=s($t);T(Ky.$$.fragment,V3),lgr=i(V3),U_e=n(V3,"P",{});var Fct=s(U_e);igr=r(Fct,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Fct.forEach(t),dgr=i(V3),Hd=n(V3,"P",{});var dJ=s(Hd);cgr=r(dJ,`Note:
Loading a model from its configuration file does `),J_e=n(dJ,"STRONG",{});var vct=s(J_e);fgr=r(vct,"not"),vct.forEach(t),mgr=r(dJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mz=n(dJ,"A",{href:!0});var Tct=s(Mz);ggr=r(Tct,"from_pretrained()"),Tct.forEach(t),hgr=r(dJ," to load the model weights."),dJ.forEach(t),pgr=i(V3),T(SM.$$.fragment,V3),V3.forEach(t),ugr=i(fl),$r=n(fl,"DIV",{class:!0});var ml=s($r);T(Zy.$$.fragment,ml),_gr=i(ml),Y_e=n(ml,"P",{});var Mct=s(Y_e);bgr=r(Mct,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Mct.forEach(t),Fgr=i(ml),on=n(ml,"P",{});var X3=s(on);vgr=r(X3,"The model class to instantiate is selected based on the "),K_e=n(X3,"CODE",{});var Ect=s(K_e);Tgr=r(Ect,"model_type"),Ect.forEach(t),Mgr=r(X3,` property of the config object (either
passed as an argument or loaded from `),Z_e=n(X3,"CODE",{});var Cct=s(Z_e);Egr=r(Cct,"pretrained_model_name_or_path"),Cct.forEach(t),Cgr=r(X3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e2e=n(X3,"CODE",{});var wct=s(e2e);wgr=r(wct,"pretrained_model_name_or_path"),wct.forEach(t),Agr=r(X3,":"),X3.forEach(t),ygr=i(ml),o2e=n(ml,"UL",{});var Act=s(o2e);RM=n(Act,"LI",{});var W8e=s(RM);r2e=n(W8e,"STRONG",{});var yct=s(r2e);Lgr=r(yct,"tapas"),yct.forEach(t),xgr=r(W8e," \u2014 "),Ez=n(W8e,"A",{href:!0});var Lct=s(Ez);$gr=r(Lct,"TFTapasForQuestionAnswering"),Lct.forEach(t),kgr=r(W8e," (TAPAS model)"),W8e.forEach(t),Act.forEach(t),Sgr=i(ml),T(BM.$$.fragment,ml),ml.forEach(t),fl.forEach(t),Yke=i(f),Ud=n(f,"H2",{class:!0});var rBe=s(Ud);PM=n(rBe,"A",{id:!0,class:!0,href:!0});var xct=s(PM);t2e=n(xct,"SPAN",{});var $ct=s(t2e);T(eL.$$.fragment,$ct),$ct.forEach(t),xct.forEach(t),Rgr=i(rBe),a2e=n(rBe,"SPAN",{});var kct=s(a2e);Bgr=r(kct,"TFAutoModelForTokenClassification"),kct.forEach(t),rBe.forEach(t),Kke=i(f),ar=n(f,"DIV",{class:!0});var gl=s(ar);T(oL.$$.fragment,gl),Pgr=i(gl),Jd=n(gl,"P",{});var cJ=s(Jd);Igr=r(cJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Cz=n(cJ,"A",{href:!0});var Sct=s(Cz);qgr=r(Sct,"from_pretrained()"),Sct.forEach(t),Ngr=r(cJ," class method or the "),wz=n(cJ,"A",{href:!0});var Rct=s(wz);jgr=r(Rct,"from_config()"),Rct.forEach(t),Dgr=r(cJ,` class
method.`),cJ.forEach(t),Ggr=i(gl),rL=n(gl,"P",{});var tBe=s(rL);Ogr=r(tBe,"This class cannot be instantiated directly using "),n2e=n(tBe,"CODE",{});var Bct=s(n2e);Vgr=r(Bct,"__init__()"),Bct.forEach(t),Xgr=r(tBe," (throws an error)."),tBe.forEach(t),zgr=i(gl),kt=n(gl,"DIV",{class:!0});var z3=s(kt);T(tL.$$.fragment,z3),Qgr=i(z3),s2e=n(z3,"P",{});var Pct=s(s2e);Wgr=r(Pct,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Pct.forEach(t),Hgr=i(z3),Yd=n(z3,"P",{});var fJ=s(Yd);Ugr=r(fJ,`Note:
Loading a model from its configuration file does `),l2e=n(fJ,"STRONG",{});var Ict=s(l2e);Jgr=r(Ict,"not"),Ict.forEach(t),Ygr=r(fJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Az=n(fJ,"A",{href:!0});var qct=s(Az);Kgr=r(qct,"from_pretrained()"),qct.forEach(t),Zgr=r(fJ," to load the model weights."),fJ.forEach(t),ehr=i(z3),T(IM.$$.fragment,z3),z3.forEach(t),ohr=i(gl),kr=n(gl,"DIV",{class:!0});var hl=s(kr);T(aL.$$.fragment,hl),rhr=i(hl),i2e=n(hl,"P",{});var Nct=s(i2e);thr=r(Nct,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Nct.forEach(t),ahr=i(hl),rn=n(hl,"P",{});var Q3=s(rn);nhr=r(Q3,"The model class to instantiate is selected based on the "),d2e=n(Q3,"CODE",{});var jct=s(d2e);shr=r(jct,"model_type"),jct.forEach(t),lhr=r(Q3,` property of the config object (either
passed as an argument or loaded from `),c2e=n(Q3,"CODE",{});var Dct=s(c2e);ihr=r(Dct,"pretrained_model_name_or_path"),Dct.forEach(t),dhr=r(Q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f2e=n(Q3,"CODE",{});var Gct=s(f2e);chr=r(Gct,"pretrained_model_name_or_path"),Gct.forEach(t),fhr=r(Q3,":"),Q3.forEach(t),mhr=i(hl),le=n(hl,"UL",{});var ce=s(le);qM=n(ce,"LI",{});var H8e=s(qM);m2e=n(H8e,"STRONG",{});var Oct=s(m2e);ghr=r(Oct,"albert"),Oct.forEach(t),hhr=r(H8e," \u2014 "),yz=n(H8e,"A",{href:!0});var Vct=s(yz);phr=r(Vct,"TFAlbertForTokenClassification"),Vct.forEach(t),uhr=r(H8e," (ALBERT model)"),H8e.forEach(t),_hr=i(ce),NM=n(ce,"LI",{});var U8e=s(NM);g2e=n(U8e,"STRONG",{});var Xct=s(g2e);bhr=r(Xct,"bert"),Xct.forEach(t),Fhr=r(U8e," \u2014 "),Lz=n(U8e,"A",{href:!0});var zct=s(Lz);vhr=r(zct,"TFBertForTokenClassification"),zct.forEach(t),Thr=r(U8e," (BERT model)"),U8e.forEach(t),Mhr=i(ce),jM=n(ce,"LI",{});var J8e=s(jM);h2e=n(J8e,"STRONG",{});var Qct=s(h2e);Ehr=r(Qct,"camembert"),Qct.forEach(t),Chr=r(J8e," \u2014 "),xz=n(J8e,"A",{href:!0});var Wct=s(xz);whr=r(Wct,"TFCamembertForTokenClassification"),Wct.forEach(t),Ahr=r(J8e," (CamemBERT model)"),J8e.forEach(t),yhr=i(ce),DM=n(ce,"LI",{});var Y8e=s(DM);p2e=n(Y8e,"STRONG",{});var Hct=s(p2e);Lhr=r(Hct,"convbert"),Hct.forEach(t),xhr=r(Y8e," \u2014 "),$z=n(Y8e,"A",{href:!0});var Uct=s($z);$hr=r(Uct,"TFConvBertForTokenClassification"),Uct.forEach(t),khr=r(Y8e," (ConvBERT model)"),Y8e.forEach(t),Shr=i(ce),GM=n(ce,"LI",{});var K8e=s(GM);u2e=n(K8e,"STRONG",{});var Jct=s(u2e);Rhr=r(Jct,"deberta"),Jct.forEach(t),Bhr=r(K8e," \u2014 "),kz=n(K8e,"A",{href:!0});var Yct=s(kz);Phr=r(Yct,"TFDebertaForTokenClassification"),Yct.forEach(t),Ihr=r(K8e," (DeBERTa model)"),K8e.forEach(t),qhr=i(ce),OM=n(ce,"LI",{});var Z8e=s(OM);_2e=n(Z8e,"STRONG",{});var Kct=s(_2e);Nhr=r(Kct,"deberta-v2"),Kct.forEach(t),jhr=r(Z8e," \u2014 "),Sz=n(Z8e,"A",{href:!0});var Zct=s(Sz);Dhr=r(Zct,"TFDebertaV2ForTokenClassification"),Zct.forEach(t),Ghr=r(Z8e," (DeBERTa-v2 model)"),Z8e.forEach(t),Ohr=i(ce),VM=n(ce,"LI",{});var exe=s(VM);b2e=n(exe,"STRONG",{});var eft=s(b2e);Vhr=r(eft,"distilbert"),eft.forEach(t),Xhr=r(exe," \u2014 "),Rz=n(exe,"A",{href:!0});var oft=s(Rz);zhr=r(oft,"TFDistilBertForTokenClassification"),oft.forEach(t),Qhr=r(exe," (DistilBERT model)"),exe.forEach(t),Whr=i(ce),XM=n(ce,"LI",{});var oxe=s(XM);F2e=n(oxe,"STRONG",{});var rft=s(F2e);Hhr=r(rft,"electra"),rft.forEach(t),Uhr=r(oxe," \u2014 "),Bz=n(oxe,"A",{href:!0});var tft=s(Bz);Jhr=r(tft,"TFElectraForTokenClassification"),tft.forEach(t),Yhr=r(oxe," (ELECTRA model)"),oxe.forEach(t),Khr=i(ce),zM=n(ce,"LI",{});var rxe=s(zM);v2e=n(rxe,"STRONG",{});var aft=s(v2e);Zhr=r(aft,"flaubert"),aft.forEach(t),epr=r(rxe," \u2014 "),Pz=n(rxe,"A",{href:!0});var nft=s(Pz);opr=r(nft,"TFFlaubertForTokenClassification"),nft.forEach(t),rpr=r(rxe," (FlauBERT model)"),rxe.forEach(t),tpr=i(ce),QM=n(ce,"LI",{});var txe=s(QM);T2e=n(txe,"STRONG",{});var sft=s(T2e);apr=r(sft,"funnel"),sft.forEach(t),npr=r(txe," \u2014 "),Iz=n(txe,"A",{href:!0});var lft=s(Iz);spr=r(lft,"TFFunnelForTokenClassification"),lft.forEach(t),lpr=r(txe," (Funnel Transformer model)"),txe.forEach(t),ipr=i(ce),WM=n(ce,"LI",{});var axe=s(WM);M2e=n(axe,"STRONG",{});var ift=s(M2e);dpr=r(ift,"layoutlm"),ift.forEach(t),cpr=r(axe," \u2014 "),qz=n(axe,"A",{href:!0});var dft=s(qz);fpr=r(dft,"TFLayoutLMForTokenClassification"),dft.forEach(t),mpr=r(axe," (LayoutLM model)"),axe.forEach(t),gpr=i(ce),HM=n(ce,"LI",{});var nxe=s(HM);E2e=n(nxe,"STRONG",{});var cft=s(E2e);hpr=r(cft,"longformer"),cft.forEach(t),ppr=r(nxe," \u2014 "),Nz=n(nxe,"A",{href:!0});var fft=s(Nz);upr=r(fft,"TFLongformerForTokenClassification"),fft.forEach(t),_pr=r(nxe," (Longformer model)"),nxe.forEach(t),bpr=i(ce),UM=n(ce,"LI",{});var sxe=s(UM);C2e=n(sxe,"STRONG",{});var mft=s(C2e);Fpr=r(mft,"mobilebert"),mft.forEach(t),vpr=r(sxe," \u2014 "),jz=n(sxe,"A",{href:!0});var gft=s(jz);Tpr=r(gft,"TFMobileBertForTokenClassification"),gft.forEach(t),Mpr=r(sxe," (MobileBERT model)"),sxe.forEach(t),Epr=i(ce),JM=n(ce,"LI",{});var lxe=s(JM);w2e=n(lxe,"STRONG",{});var hft=s(w2e);Cpr=r(hft,"mpnet"),hft.forEach(t),wpr=r(lxe," \u2014 "),Dz=n(lxe,"A",{href:!0});var pft=s(Dz);Apr=r(pft,"TFMPNetForTokenClassification"),pft.forEach(t),ypr=r(lxe," (MPNet model)"),lxe.forEach(t),Lpr=i(ce),YM=n(ce,"LI",{});var ixe=s(YM);A2e=n(ixe,"STRONG",{});var uft=s(A2e);xpr=r(uft,"rembert"),uft.forEach(t),$pr=r(ixe," \u2014 "),Gz=n(ixe,"A",{href:!0});var _ft=s(Gz);kpr=r(_ft,"TFRemBertForTokenClassification"),_ft.forEach(t),Spr=r(ixe," (RemBERT model)"),ixe.forEach(t),Rpr=i(ce),KM=n(ce,"LI",{});var dxe=s(KM);y2e=n(dxe,"STRONG",{});var bft=s(y2e);Bpr=r(bft,"roberta"),bft.forEach(t),Ppr=r(dxe," \u2014 "),Oz=n(dxe,"A",{href:!0});var Fft=s(Oz);Ipr=r(Fft,"TFRobertaForTokenClassification"),Fft.forEach(t),qpr=r(dxe," (RoBERTa model)"),dxe.forEach(t),Npr=i(ce),ZM=n(ce,"LI",{});var cxe=s(ZM);L2e=n(cxe,"STRONG",{});var vft=s(L2e);jpr=r(vft,"roformer"),vft.forEach(t),Dpr=r(cxe," \u2014 "),Vz=n(cxe,"A",{href:!0});var Tft=s(Vz);Gpr=r(Tft,"TFRoFormerForTokenClassification"),Tft.forEach(t),Opr=r(cxe," (RoFormer model)"),cxe.forEach(t),Vpr=i(ce),e9=n(ce,"LI",{});var fxe=s(e9);x2e=n(fxe,"STRONG",{});var Mft=s(x2e);Xpr=r(Mft,"xlm"),Mft.forEach(t),zpr=r(fxe," \u2014 "),Xz=n(fxe,"A",{href:!0});var Eft=s(Xz);Qpr=r(Eft,"TFXLMForTokenClassification"),Eft.forEach(t),Wpr=r(fxe," (XLM model)"),fxe.forEach(t),Hpr=i(ce),o9=n(ce,"LI",{});var mxe=s(o9);$2e=n(mxe,"STRONG",{});var Cft=s($2e);Upr=r(Cft,"xlm-roberta"),Cft.forEach(t),Jpr=r(mxe," \u2014 "),zz=n(mxe,"A",{href:!0});var wft=s(zz);Ypr=r(wft,"TFXLMRobertaForTokenClassification"),wft.forEach(t),Kpr=r(mxe," (XLM-RoBERTa model)"),mxe.forEach(t),Zpr=i(ce),r9=n(ce,"LI",{});var gxe=s(r9);k2e=n(gxe,"STRONG",{});var Aft=s(k2e);eur=r(Aft,"xlnet"),Aft.forEach(t),our=r(gxe," \u2014 "),Qz=n(gxe,"A",{href:!0});var yft=s(Qz);rur=r(yft,"TFXLNetForTokenClassification"),yft.forEach(t),tur=r(gxe," (XLNet model)"),gxe.forEach(t),ce.forEach(t),aur=i(hl),T(t9.$$.fragment,hl),hl.forEach(t),gl.forEach(t),Zke=i(f),Kd=n(f,"H2",{class:!0});var aBe=s(Kd);a9=n(aBe,"A",{id:!0,class:!0,href:!0});var Lft=s(a9);S2e=n(Lft,"SPAN",{});var xft=s(S2e);T(nL.$$.fragment,xft),xft.forEach(t),Lft.forEach(t),nur=i(aBe),R2e=n(aBe,"SPAN",{});var $ft=s(R2e);sur=r($ft,"TFAutoModelForQuestionAnswering"),$ft.forEach(t),aBe.forEach(t),eSe=i(f),nr=n(f,"DIV",{class:!0});var pl=s(nr);T(sL.$$.fragment,pl),lur=i(pl),Zd=n(pl,"P",{});var mJ=s(Zd);iur=r(mJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Wz=n(mJ,"A",{href:!0});var kft=s(Wz);dur=r(kft,"from_pretrained()"),kft.forEach(t),cur=r(mJ," class method or the "),Hz=n(mJ,"A",{href:!0});var Sft=s(Hz);fur=r(Sft,"from_config()"),Sft.forEach(t),mur=r(mJ,` class
method.`),mJ.forEach(t),gur=i(pl),lL=n(pl,"P",{});var nBe=s(lL);hur=r(nBe,"This class cannot be instantiated directly using "),B2e=n(nBe,"CODE",{});var Rft=s(B2e);pur=r(Rft,"__init__()"),Rft.forEach(t),uur=r(nBe," (throws an error)."),nBe.forEach(t),_ur=i(pl),St=n(pl,"DIV",{class:!0});var W3=s(St);T(iL.$$.fragment,W3),bur=i(W3),P2e=n(W3,"P",{});var Bft=s(P2e);Fur=r(Bft,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Bft.forEach(t),vur=i(W3),ec=n(W3,"P",{});var gJ=s(ec);Tur=r(gJ,`Note:
Loading a model from its configuration file does `),I2e=n(gJ,"STRONG",{});var Pft=s(I2e);Mur=r(Pft,"not"),Pft.forEach(t),Eur=r(gJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uz=n(gJ,"A",{href:!0});var Ift=s(Uz);Cur=r(Ift,"from_pretrained()"),Ift.forEach(t),wur=r(gJ," to load the model weights."),gJ.forEach(t),Aur=i(W3),T(n9.$$.fragment,W3),W3.forEach(t),yur=i(pl),Sr=n(pl,"DIV",{class:!0});var ul=s(Sr);T(dL.$$.fragment,ul),Lur=i(ul),q2e=n(ul,"P",{});var qft=s(q2e);xur=r(qft,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),qft.forEach(t),$ur=i(ul),tn=n(ul,"P",{});var H3=s(tn);kur=r(H3,"The model class to instantiate is selected based on the "),N2e=n(H3,"CODE",{});var Nft=s(N2e);Sur=r(Nft,"model_type"),Nft.forEach(t),Rur=r(H3,` property of the config object (either
passed as an argument or loaded from `),j2e=n(H3,"CODE",{});var jft=s(j2e);Bur=r(jft,"pretrained_model_name_or_path"),jft.forEach(t),Pur=r(H3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D2e=n(H3,"CODE",{});var Dft=s(D2e);Iur=r(Dft,"pretrained_model_name_or_path"),Dft.forEach(t),qur=r(H3,":"),H3.forEach(t),Nur=i(ul),ie=n(ul,"UL",{});var me=s(ie);s9=n(me,"LI",{});var hxe=s(s9);G2e=n(hxe,"STRONG",{});var Gft=s(G2e);jur=r(Gft,"albert"),Gft.forEach(t),Dur=r(hxe," \u2014 "),Jz=n(hxe,"A",{href:!0});var Oft=s(Jz);Gur=r(Oft,"TFAlbertForQuestionAnswering"),Oft.forEach(t),Our=r(hxe," (ALBERT model)"),hxe.forEach(t),Vur=i(me),l9=n(me,"LI",{});var pxe=s(l9);O2e=n(pxe,"STRONG",{});var Vft=s(O2e);Xur=r(Vft,"bert"),Vft.forEach(t),zur=r(pxe," \u2014 "),Yz=n(pxe,"A",{href:!0});var Xft=s(Yz);Qur=r(Xft,"TFBertForQuestionAnswering"),Xft.forEach(t),Wur=r(pxe," (BERT model)"),pxe.forEach(t),Hur=i(me),i9=n(me,"LI",{});var uxe=s(i9);V2e=n(uxe,"STRONG",{});var zft=s(V2e);Uur=r(zft,"camembert"),zft.forEach(t),Jur=r(uxe," \u2014 "),Kz=n(uxe,"A",{href:!0});var Qft=s(Kz);Yur=r(Qft,"TFCamembertForQuestionAnswering"),Qft.forEach(t),Kur=r(uxe," (CamemBERT model)"),uxe.forEach(t),Zur=i(me),d9=n(me,"LI",{});var _xe=s(d9);X2e=n(_xe,"STRONG",{});var Wft=s(X2e);e_r=r(Wft,"convbert"),Wft.forEach(t),o_r=r(_xe," \u2014 "),Zz=n(_xe,"A",{href:!0});var Hft=s(Zz);r_r=r(Hft,"TFConvBertForQuestionAnswering"),Hft.forEach(t),t_r=r(_xe," (ConvBERT model)"),_xe.forEach(t),a_r=i(me),c9=n(me,"LI",{});var bxe=s(c9);z2e=n(bxe,"STRONG",{});var Uft=s(z2e);n_r=r(Uft,"deberta"),Uft.forEach(t),s_r=r(bxe," \u2014 "),eQ=n(bxe,"A",{href:!0});var Jft=s(eQ);l_r=r(Jft,"TFDebertaForQuestionAnswering"),Jft.forEach(t),i_r=r(bxe," (DeBERTa model)"),bxe.forEach(t),d_r=i(me),f9=n(me,"LI",{});var Fxe=s(f9);Q2e=n(Fxe,"STRONG",{});var Yft=s(Q2e);c_r=r(Yft,"deberta-v2"),Yft.forEach(t),f_r=r(Fxe," \u2014 "),oQ=n(Fxe,"A",{href:!0});var Kft=s(oQ);m_r=r(Kft,"TFDebertaV2ForQuestionAnswering"),Kft.forEach(t),g_r=r(Fxe," (DeBERTa-v2 model)"),Fxe.forEach(t),h_r=i(me),m9=n(me,"LI",{});var vxe=s(m9);W2e=n(vxe,"STRONG",{});var Zft=s(W2e);p_r=r(Zft,"distilbert"),Zft.forEach(t),u_r=r(vxe," \u2014 "),rQ=n(vxe,"A",{href:!0});var emt=s(rQ);__r=r(emt,"TFDistilBertForQuestionAnswering"),emt.forEach(t),b_r=r(vxe," (DistilBERT model)"),vxe.forEach(t),F_r=i(me),g9=n(me,"LI",{});var Txe=s(g9);H2e=n(Txe,"STRONG",{});var omt=s(H2e);v_r=r(omt,"electra"),omt.forEach(t),T_r=r(Txe," \u2014 "),tQ=n(Txe,"A",{href:!0});var rmt=s(tQ);M_r=r(rmt,"TFElectraForQuestionAnswering"),rmt.forEach(t),E_r=r(Txe," (ELECTRA model)"),Txe.forEach(t),C_r=i(me),h9=n(me,"LI",{});var Mxe=s(h9);U2e=n(Mxe,"STRONG",{});var tmt=s(U2e);w_r=r(tmt,"flaubert"),tmt.forEach(t),A_r=r(Mxe," \u2014 "),aQ=n(Mxe,"A",{href:!0});var amt=s(aQ);y_r=r(amt,"TFFlaubertForQuestionAnsweringSimple"),amt.forEach(t),L_r=r(Mxe," (FlauBERT model)"),Mxe.forEach(t),x_r=i(me),p9=n(me,"LI",{});var Exe=s(p9);J2e=n(Exe,"STRONG",{});var nmt=s(J2e);$_r=r(nmt,"funnel"),nmt.forEach(t),k_r=r(Exe," \u2014 "),nQ=n(Exe,"A",{href:!0});var smt=s(nQ);S_r=r(smt,"TFFunnelForQuestionAnswering"),smt.forEach(t),R_r=r(Exe," (Funnel Transformer model)"),Exe.forEach(t),B_r=i(me),u9=n(me,"LI",{});var Cxe=s(u9);Y2e=n(Cxe,"STRONG",{});var lmt=s(Y2e);P_r=r(lmt,"longformer"),lmt.forEach(t),I_r=r(Cxe," \u2014 "),sQ=n(Cxe,"A",{href:!0});var imt=s(sQ);q_r=r(imt,"TFLongformerForQuestionAnswering"),imt.forEach(t),N_r=r(Cxe," (Longformer model)"),Cxe.forEach(t),j_r=i(me),_9=n(me,"LI",{});var wxe=s(_9);K2e=n(wxe,"STRONG",{});var dmt=s(K2e);D_r=r(dmt,"mobilebert"),dmt.forEach(t),G_r=r(wxe," \u2014 "),lQ=n(wxe,"A",{href:!0});var cmt=s(lQ);O_r=r(cmt,"TFMobileBertForQuestionAnswering"),cmt.forEach(t),V_r=r(wxe," (MobileBERT model)"),wxe.forEach(t),X_r=i(me),b9=n(me,"LI",{});var Axe=s(b9);Z2e=n(Axe,"STRONG",{});var fmt=s(Z2e);z_r=r(fmt,"mpnet"),fmt.forEach(t),Q_r=r(Axe," \u2014 "),iQ=n(Axe,"A",{href:!0});var mmt=s(iQ);W_r=r(mmt,"TFMPNetForQuestionAnswering"),mmt.forEach(t),H_r=r(Axe," (MPNet model)"),Axe.forEach(t),U_r=i(me),F9=n(me,"LI",{});var yxe=s(F9);e1e=n(yxe,"STRONG",{});var gmt=s(e1e);J_r=r(gmt,"rembert"),gmt.forEach(t),Y_r=r(yxe," \u2014 "),dQ=n(yxe,"A",{href:!0});var hmt=s(dQ);K_r=r(hmt,"TFRemBertForQuestionAnswering"),hmt.forEach(t),Z_r=r(yxe," (RemBERT model)"),yxe.forEach(t),e2r=i(me),v9=n(me,"LI",{});var Lxe=s(v9);o1e=n(Lxe,"STRONG",{});var pmt=s(o1e);o2r=r(pmt,"roberta"),pmt.forEach(t),r2r=r(Lxe," \u2014 "),cQ=n(Lxe,"A",{href:!0});var umt=s(cQ);t2r=r(umt,"TFRobertaForQuestionAnswering"),umt.forEach(t),a2r=r(Lxe," (RoBERTa model)"),Lxe.forEach(t),n2r=i(me),T9=n(me,"LI",{});var xxe=s(T9);r1e=n(xxe,"STRONG",{});var _mt=s(r1e);s2r=r(_mt,"roformer"),_mt.forEach(t),l2r=r(xxe," \u2014 "),fQ=n(xxe,"A",{href:!0});var bmt=s(fQ);i2r=r(bmt,"TFRoFormerForQuestionAnswering"),bmt.forEach(t),d2r=r(xxe," (RoFormer model)"),xxe.forEach(t),c2r=i(me),M9=n(me,"LI",{});var $xe=s(M9);t1e=n($xe,"STRONG",{});var Fmt=s(t1e);f2r=r(Fmt,"xlm"),Fmt.forEach(t),m2r=r($xe," \u2014 "),mQ=n($xe,"A",{href:!0});var vmt=s(mQ);g2r=r(vmt,"TFXLMForQuestionAnsweringSimple"),vmt.forEach(t),h2r=r($xe," (XLM model)"),$xe.forEach(t),p2r=i(me),E9=n(me,"LI",{});var kxe=s(E9);a1e=n(kxe,"STRONG",{});var Tmt=s(a1e);u2r=r(Tmt,"xlm-roberta"),Tmt.forEach(t),_2r=r(kxe," \u2014 "),gQ=n(kxe,"A",{href:!0});var Mmt=s(gQ);b2r=r(Mmt,"TFXLMRobertaForQuestionAnswering"),Mmt.forEach(t),F2r=r(kxe," (XLM-RoBERTa model)"),kxe.forEach(t),v2r=i(me),C9=n(me,"LI",{});var Sxe=s(C9);n1e=n(Sxe,"STRONG",{});var Emt=s(n1e);T2r=r(Emt,"xlnet"),Emt.forEach(t),M2r=r(Sxe," \u2014 "),hQ=n(Sxe,"A",{href:!0});var Cmt=s(hQ);E2r=r(Cmt,"TFXLNetForQuestionAnsweringSimple"),Cmt.forEach(t),C2r=r(Sxe," (XLNet model)"),Sxe.forEach(t),me.forEach(t),w2r=i(ul),T(w9.$$.fragment,ul),ul.forEach(t),pl.forEach(t),oSe=i(f),oc=n(f,"H2",{class:!0});var sBe=s(oc);A9=n(sBe,"A",{id:!0,class:!0,href:!0});var wmt=s(A9);s1e=n(wmt,"SPAN",{});var Amt=s(s1e);T(cL.$$.fragment,Amt),Amt.forEach(t),wmt.forEach(t),A2r=i(sBe),l1e=n(sBe,"SPAN",{});var ymt=s(l1e);y2r=r(ymt,"TFAutoModelForVision2Seq"),ymt.forEach(t),sBe.forEach(t),rSe=i(f),sr=n(f,"DIV",{class:!0});var _l=s(sr);T(fL.$$.fragment,_l),L2r=i(_l),rc=n(_l,"P",{});var hJ=s(rc);x2r=r(hJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),pQ=n(hJ,"A",{href:!0});var Lmt=s(pQ);$2r=r(Lmt,"from_pretrained()"),Lmt.forEach(t),k2r=r(hJ," class method or the "),uQ=n(hJ,"A",{href:!0});var xmt=s(uQ);S2r=r(xmt,"from_config()"),xmt.forEach(t),R2r=r(hJ,` class
method.`),hJ.forEach(t),B2r=i(_l),mL=n(_l,"P",{});var lBe=s(mL);P2r=r(lBe,"This class cannot be instantiated directly using "),i1e=n(lBe,"CODE",{});var $mt=s(i1e);I2r=r($mt,"__init__()"),$mt.forEach(t),q2r=r(lBe," (throws an error)."),lBe.forEach(t),N2r=i(_l),Rt=n(_l,"DIV",{class:!0});var U3=s(Rt);T(gL.$$.fragment,U3),j2r=i(U3),d1e=n(U3,"P",{});var kmt=s(d1e);D2r=r(kmt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),kmt.forEach(t),G2r=i(U3),tc=n(U3,"P",{});var pJ=s(tc);O2r=r(pJ,`Note:
Loading a model from its configuration file does `),c1e=n(pJ,"STRONG",{});var Smt=s(c1e);V2r=r(Smt,"not"),Smt.forEach(t),X2r=r(pJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_Q=n(pJ,"A",{href:!0});var Rmt=s(_Q);z2r=r(Rmt,"from_pretrained()"),Rmt.forEach(t),Q2r=r(pJ," to load the model weights."),pJ.forEach(t),W2r=i(U3),T(y9.$$.fragment,U3),U3.forEach(t),H2r=i(_l),Rr=n(_l,"DIV",{class:!0});var bl=s(Rr);T(hL.$$.fragment,bl),U2r=i(bl),f1e=n(bl,"P",{});var Bmt=s(f1e);J2r=r(Bmt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Bmt.forEach(t),Y2r=i(bl),an=n(bl,"P",{});var J3=s(an);K2r=r(J3,"The model class to instantiate is selected based on the "),m1e=n(J3,"CODE",{});var Pmt=s(m1e);Z2r=r(Pmt,"model_type"),Pmt.forEach(t),e1r=r(J3,` property of the config object (either
passed as an argument or loaded from `),g1e=n(J3,"CODE",{});var Imt=s(g1e);o1r=r(Imt,"pretrained_model_name_or_path"),Imt.forEach(t),r1r=r(J3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h1e=n(J3,"CODE",{});var qmt=s(h1e);t1r=r(qmt,"pretrained_model_name_or_path"),qmt.forEach(t),a1r=r(J3,":"),J3.forEach(t),n1r=i(bl),p1e=n(bl,"UL",{});var Nmt=s(p1e);L9=n(Nmt,"LI",{});var Rxe=s(L9);u1e=n(Rxe,"STRONG",{});var jmt=s(u1e);s1r=r(jmt,"vision-encoder-decoder"),jmt.forEach(t),l1r=r(Rxe," \u2014 "),bQ=n(Rxe,"A",{href:!0});var Dmt=s(bQ);i1r=r(Dmt,"TFVisionEncoderDecoderModel"),Dmt.forEach(t),d1r=r(Rxe," (Vision Encoder decoder model)"),Rxe.forEach(t),Nmt.forEach(t),c1r=i(bl),T(x9.$$.fragment,bl),bl.forEach(t),_l.forEach(t),tSe=i(f),ac=n(f,"H2",{class:!0});var iBe=s(ac);$9=n(iBe,"A",{id:!0,class:!0,href:!0});var Gmt=s($9);_1e=n(Gmt,"SPAN",{});var Omt=s(_1e);T(pL.$$.fragment,Omt),Omt.forEach(t),Gmt.forEach(t),f1r=i(iBe),b1e=n(iBe,"SPAN",{});var Vmt=s(b1e);m1r=r(Vmt,"TFAutoModelForSpeechSeq2Seq"),Vmt.forEach(t),iBe.forEach(t),aSe=i(f),lr=n(f,"DIV",{class:!0});var Fl=s(lr);T(uL.$$.fragment,Fl),g1r=i(Fl),nc=n(Fl,"P",{});var uJ=s(nc);h1r=r(uJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),FQ=n(uJ,"A",{href:!0});var Xmt=s(FQ);p1r=r(Xmt,"from_pretrained()"),Xmt.forEach(t),u1r=r(uJ," class method or the "),vQ=n(uJ,"A",{href:!0});var zmt=s(vQ);_1r=r(zmt,"from_config()"),zmt.forEach(t),b1r=r(uJ,` class
method.`),uJ.forEach(t),F1r=i(Fl),_L=n(Fl,"P",{});var dBe=s(_L);v1r=r(dBe,"This class cannot be instantiated directly using "),F1e=n(dBe,"CODE",{});var Qmt=s(F1e);T1r=r(Qmt,"__init__()"),Qmt.forEach(t),M1r=r(dBe," (throws an error)."),dBe.forEach(t),E1r=i(Fl),Bt=n(Fl,"DIV",{class:!0});var Y3=s(Bt);T(bL.$$.fragment,Y3),C1r=i(Y3),v1e=n(Y3,"P",{});var Wmt=s(v1e);w1r=r(Wmt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Wmt.forEach(t),A1r=i(Y3),sc=n(Y3,"P",{});var _J=s(sc);y1r=r(_J,`Note:
Loading a model from its configuration file does `),T1e=n(_J,"STRONG",{});var Hmt=s(T1e);L1r=r(Hmt,"not"),Hmt.forEach(t),x1r=r(_J,` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=n(_J,"A",{href:!0});var Umt=s(TQ);$1r=r(Umt,"from_pretrained()"),Umt.forEach(t),k1r=r(_J," to load the model weights."),_J.forEach(t),S1r=i(Y3),T(k9.$$.fragment,Y3),Y3.forEach(t),R1r=i(Fl),Br=n(Fl,"DIV",{class:!0});var vl=s(Br);T(FL.$$.fragment,vl),B1r=i(vl),M1e=n(vl,"P",{});var Jmt=s(M1e);P1r=r(Jmt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Jmt.forEach(t),I1r=i(vl),nn=n(vl,"P",{});var K3=s(nn);q1r=r(K3,"The model class to instantiate is selected based on the "),E1e=n(K3,"CODE",{});var Ymt=s(E1e);N1r=r(Ymt,"model_type"),Ymt.forEach(t),j1r=r(K3,` property of the config object (either
passed as an argument or loaded from `),C1e=n(K3,"CODE",{});var Kmt=s(C1e);D1r=r(Kmt,"pretrained_model_name_or_path"),Kmt.forEach(t),G1r=r(K3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w1e=n(K3,"CODE",{});var Zmt=s(w1e);O1r=r(Zmt,"pretrained_model_name_or_path"),Zmt.forEach(t),V1r=r(K3,":"),K3.forEach(t),X1r=i(vl),A1e=n(vl,"UL",{});var egt=s(A1e);S9=n(egt,"LI",{});var Bxe=s(S9);y1e=n(Bxe,"STRONG",{});var ogt=s(y1e);z1r=r(ogt,"speech_to_text"),ogt.forEach(t),Q1r=r(Bxe," \u2014 "),MQ=n(Bxe,"A",{href:!0});var rgt=s(MQ);W1r=r(rgt,"TFSpeech2TextForConditionalGeneration"),rgt.forEach(t),H1r=r(Bxe," (Speech2Text model)"),Bxe.forEach(t),egt.forEach(t),U1r=i(vl),T(R9.$$.fragment,vl),vl.forEach(t),Fl.forEach(t),nSe=i(f),lc=n(f,"H2",{class:!0});var cBe=s(lc);B9=n(cBe,"A",{id:!0,class:!0,href:!0});var tgt=s(B9);L1e=n(tgt,"SPAN",{});var agt=s(L1e);T(vL.$$.fragment,agt),agt.forEach(t),tgt.forEach(t),J1r=i(cBe),x1e=n(cBe,"SPAN",{});var ngt=s(x1e);Y1r=r(ngt,"FlaxAutoModel"),ngt.forEach(t),cBe.forEach(t),sSe=i(f),ir=n(f,"DIV",{class:!0});var Tl=s(ir);T(TL.$$.fragment,Tl),K1r=i(Tl),ic=n(Tl,"P",{});var bJ=s(ic);Z1r=r(bJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),EQ=n(bJ,"A",{href:!0});var sgt=s(EQ);ebr=r(sgt,"from_pretrained()"),sgt.forEach(t),obr=r(bJ," class method or the "),CQ=n(bJ,"A",{href:!0});var lgt=s(CQ);rbr=r(lgt,"from_config()"),lgt.forEach(t),tbr=r(bJ,` class
method.`),bJ.forEach(t),abr=i(Tl),ML=n(Tl,"P",{});var fBe=s(ML);nbr=r(fBe,"This class cannot be instantiated directly using "),$1e=n(fBe,"CODE",{});var igt=s($1e);sbr=r(igt,"__init__()"),igt.forEach(t),lbr=r(fBe," (throws an error)."),fBe.forEach(t),ibr=i(Tl),Pt=n(Tl,"DIV",{class:!0});var Z3=s(Pt);T(EL.$$.fragment,Z3),dbr=i(Z3),k1e=n(Z3,"P",{});var dgt=s(k1e);cbr=r(dgt,"Instantiates one of the base model classes of the library from a configuration."),dgt.forEach(t),fbr=i(Z3),dc=n(Z3,"P",{});var FJ=s(dc);mbr=r(FJ,`Note:
Loading a model from its configuration file does `),S1e=n(FJ,"STRONG",{});var cgt=s(S1e);gbr=r(cgt,"not"),cgt.forEach(t),hbr=r(FJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wQ=n(FJ,"A",{href:!0});var fgt=s(wQ);pbr=r(fgt,"from_pretrained()"),fgt.forEach(t),ubr=r(FJ," to load the model weights."),FJ.forEach(t),_br=i(Z3),T(P9.$$.fragment,Z3),Z3.forEach(t),bbr=i(Tl),Pr=n(Tl,"DIV",{class:!0});var Ml=s(Pr);T(CL.$$.fragment,Ml),Fbr=i(Ml),R1e=n(Ml,"P",{});var mgt=s(R1e);vbr=r(mgt,"Instantiate one of the base model classes of the library from a pretrained model."),mgt.forEach(t),Tbr=i(Ml),sn=n(Ml,"P",{});var ew=s(sn);Mbr=r(ew,"The model class to instantiate is selected based on the "),B1e=n(ew,"CODE",{});var ggt=s(B1e);Ebr=r(ggt,"model_type"),ggt.forEach(t),Cbr=r(ew,` property of the config object (either
passed as an argument or loaded from `),P1e=n(ew,"CODE",{});var hgt=s(P1e);wbr=r(hgt,"pretrained_model_name_or_path"),hgt.forEach(t),Abr=r(ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I1e=n(ew,"CODE",{});var pgt=s(I1e);ybr=r(pgt,"pretrained_model_name_or_path"),pgt.forEach(t),Lbr=r(ew,":"),ew.forEach(t),xbr=i(Ml),oe=n(Ml,"UL",{});var te=s(oe);I9=n(te,"LI",{});var Pxe=s(I9);q1e=n(Pxe,"STRONG",{});var ugt=s(q1e);$br=r(ugt,"albert"),ugt.forEach(t),kbr=r(Pxe," \u2014 "),AQ=n(Pxe,"A",{href:!0});var _gt=s(AQ);Sbr=r(_gt,"FlaxAlbertModel"),_gt.forEach(t),Rbr=r(Pxe," (ALBERT model)"),Pxe.forEach(t),Bbr=i(te),q9=n(te,"LI",{});var Ixe=s(q9);N1e=n(Ixe,"STRONG",{});var bgt=s(N1e);Pbr=r(bgt,"bart"),bgt.forEach(t),Ibr=r(Ixe," \u2014 "),yQ=n(Ixe,"A",{href:!0});var Fgt=s(yQ);qbr=r(Fgt,"FlaxBartModel"),Fgt.forEach(t),Nbr=r(Ixe," (BART model)"),Ixe.forEach(t),jbr=i(te),N9=n(te,"LI",{});var qxe=s(N9);j1e=n(qxe,"STRONG",{});var vgt=s(j1e);Dbr=r(vgt,"beit"),vgt.forEach(t),Gbr=r(qxe," \u2014 "),LQ=n(qxe,"A",{href:!0});var Tgt=s(LQ);Obr=r(Tgt,"FlaxBeitModel"),Tgt.forEach(t),Vbr=r(qxe," (BEiT model)"),qxe.forEach(t),Xbr=i(te),j9=n(te,"LI",{});var Nxe=s(j9);D1e=n(Nxe,"STRONG",{});var Mgt=s(D1e);zbr=r(Mgt,"bert"),Mgt.forEach(t),Qbr=r(Nxe," \u2014 "),xQ=n(Nxe,"A",{href:!0});var Egt=s(xQ);Wbr=r(Egt,"FlaxBertModel"),Egt.forEach(t),Hbr=r(Nxe," (BERT model)"),Nxe.forEach(t),Ubr=i(te),D9=n(te,"LI",{});var jxe=s(D9);G1e=n(jxe,"STRONG",{});var Cgt=s(G1e);Jbr=r(Cgt,"big_bird"),Cgt.forEach(t),Ybr=r(jxe," \u2014 "),$Q=n(jxe,"A",{href:!0});var wgt=s($Q);Kbr=r(wgt,"FlaxBigBirdModel"),wgt.forEach(t),Zbr=r(jxe," (BigBird model)"),jxe.forEach(t),e5r=i(te),G9=n(te,"LI",{});var Dxe=s(G9);O1e=n(Dxe,"STRONG",{});var Agt=s(O1e);o5r=r(Agt,"blenderbot"),Agt.forEach(t),r5r=r(Dxe," \u2014 "),kQ=n(Dxe,"A",{href:!0});var ygt=s(kQ);t5r=r(ygt,"FlaxBlenderbotModel"),ygt.forEach(t),a5r=r(Dxe," (Blenderbot model)"),Dxe.forEach(t),n5r=i(te),O9=n(te,"LI",{});var Gxe=s(O9);V1e=n(Gxe,"STRONG",{});var Lgt=s(V1e);s5r=r(Lgt,"blenderbot-small"),Lgt.forEach(t),l5r=r(Gxe," \u2014 "),SQ=n(Gxe,"A",{href:!0});var xgt=s(SQ);i5r=r(xgt,"FlaxBlenderbotSmallModel"),xgt.forEach(t),d5r=r(Gxe," (BlenderbotSmall model)"),Gxe.forEach(t),c5r=i(te),V9=n(te,"LI",{});var Oxe=s(V9);X1e=n(Oxe,"STRONG",{});var $gt=s(X1e);f5r=r($gt,"clip"),$gt.forEach(t),m5r=r(Oxe," \u2014 "),RQ=n(Oxe,"A",{href:!0});var kgt=s(RQ);g5r=r(kgt,"FlaxCLIPModel"),kgt.forEach(t),h5r=r(Oxe," (CLIP model)"),Oxe.forEach(t),p5r=i(te),X9=n(te,"LI",{});var Vxe=s(X9);z1e=n(Vxe,"STRONG",{});var Sgt=s(z1e);u5r=r(Sgt,"distilbert"),Sgt.forEach(t),_5r=r(Vxe," \u2014 "),BQ=n(Vxe,"A",{href:!0});var Rgt=s(BQ);b5r=r(Rgt,"FlaxDistilBertModel"),Rgt.forEach(t),F5r=r(Vxe," (DistilBERT model)"),Vxe.forEach(t),v5r=i(te),z9=n(te,"LI",{});var Xxe=s(z9);Q1e=n(Xxe,"STRONG",{});var Bgt=s(Q1e);T5r=r(Bgt,"electra"),Bgt.forEach(t),M5r=r(Xxe," \u2014 "),PQ=n(Xxe,"A",{href:!0});var Pgt=s(PQ);E5r=r(Pgt,"FlaxElectraModel"),Pgt.forEach(t),C5r=r(Xxe," (ELECTRA model)"),Xxe.forEach(t),w5r=i(te),Q9=n(te,"LI",{});var zxe=s(Q9);W1e=n(zxe,"STRONG",{});var Igt=s(W1e);A5r=r(Igt,"gpt2"),Igt.forEach(t),y5r=r(zxe," \u2014 "),IQ=n(zxe,"A",{href:!0});var qgt=s(IQ);L5r=r(qgt,"FlaxGPT2Model"),qgt.forEach(t),x5r=r(zxe," (OpenAI GPT-2 model)"),zxe.forEach(t),$5r=i(te),W9=n(te,"LI",{});var Qxe=s(W9);H1e=n(Qxe,"STRONG",{});var Ngt=s(H1e);k5r=r(Ngt,"gpt_neo"),Ngt.forEach(t),S5r=r(Qxe," \u2014 "),qQ=n(Qxe,"A",{href:!0});var jgt=s(qQ);R5r=r(jgt,"FlaxGPTNeoModel"),jgt.forEach(t),B5r=r(Qxe," (GPT Neo model)"),Qxe.forEach(t),P5r=i(te),H9=n(te,"LI",{});var Wxe=s(H9);U1e=n(Wxe,"STRONG",{});var Dgt=s(U1e);I5r=r(Dgt,"gptj"),Dgt.forEach(t),q5r=r(Wxe," \u2014 "),NQ=n(Wxe,"A",{href:!0});var Ggt=s(NQ);N5r=r(Ggt,"FlaxGPTJModel"),Ggt.forEach(t),j5r=r(Wxe," (GPT-J model)"),Wxe.forEach(t),D5r=i(te),U9=n(te,"LI",{});var Hxe=s(U9);J1e=n(Hxe,"STRONG",{});var Ogt=s(J1e);G5r=r(Ogt,"marian"),Ogt.forEach(t),O5r=r(Hxe," \u2014 "),jQ=n(Hxe,"A",{href:!0});var Vgt=s(jQ);V5r=r(Vgt,"FlaxMarianModel"),Vgt.forEach(t),X5r=r(Hxe," (Marian model)"),Hxe.forEach(t),z5r=i(te),J9=n(te,"LI",{});var Uxe=s(J9);Y1e=n(Uxe,"STRONG",{});var Xgt=s(Y1e);Q5r=r(Xgt,"mbart"),Xgt.forEach(t),W5r=r(Uxe," \u2014 "),DQ=n(Uxe,"A",{href:!0});var zgt=s(DQ);H5r=r(zgt,"FlaxMBartModel"),zgt.forEach(t),U5r=r(Uxe," (mBART model)"),Uxe.forEach(t),J5r=i(te),Y9=n(te,"LI",{});var Jxe=s(Y9);K1e=n(Jxe,"STRONG",{});var Qgt=s(K1e);Y5r=r(Qgt,"mt5"),Qgt.forEach(t),K5r=r(Jxe," \u2014 "),GQ=n(Jxe,"A",{href:!0});var Wgt=s(GQ);Z5r=r(Wgt,"FlaxMT5Model"),Wgt.forEach(t),eFr=r(Jxe," (mT5 model)"),Jxe.forEach(t),oFr=i(te),K9=n(te,"LI",{});var Yxe=s(K9);Z1e=n(Yxe,"STRONG",{});var Hgt=s(Z1e);rFr=r(Hgt,"pegasus"),Hgt.forEach(t),tFr=r(Yxe," \u2014 "),OQ=n(Yxe,"A",{href:!0});var Ugt=s(OQ);aFr=r(Ugt,"FlaxPegasusModel"),Ugt.forEach(t),nFr=r(Yxe," (Pegasus model)"),Yxe.forEach(t),sFr=i(te),Z9=n(te,"LI",{});var Kxe=s(Z9);ebe=n(Kxe,"STRONG",{});var Jgt=s(ebe);lFr=r(Jgt,"roberta"),Jgt.forEach(t),iFr=r(Kxe," \u2014 "),VQ=n(Kxe,"A",{href:!0});var Ygt=s(VQ);dFr=r(Ygt,"FlaxRobertaModel"),Ygt.forEach(t),cFr=r(Kxe," (RoBERTa model)"),Kxe.forEach(t),fFr=i(te),e4=n(te,"LI",{});var Zxe=s(e4);obe=n(Zxe,"STRONG",{});var Kgt=s(obe);mFr=r(Kgt,"roformer"),Kgt.forEach(t),gFr=r(Zxe," \u2014 "),XQ=n(Zxe,"A",{href:!0});var Zgt=s(XQ);hFr=r(Zgt,"FlaxRoFormerModel"),Zgt.forEach(t),pFr=r(Zxe," (RoFormer model)"),Zxe.forEach(t),uFr=i(te),o4=n(te,"LI",{});var e7e=s(o4);rbe=n(e7e,"STRONG",{});var eht=s(rbe);_Fr=r(eht,"t5"),eht.forEach(t),bFr=r(e7e," \u2014 "),zQ=n(e7e,"A",{href:!0});var oht=s(zQ);FFr=r(oht,"FlaxT5Model"),oht.forEach(t),vFr=r(e7e," (T5 model)"),e7e.forEach(t),TFr=i(te),r4=n(te,"LI",{});var o7e=s(r4);tbe=n(o7e,"STRONG",{});var rht=s(tbe);MFr=r(rht,"vision-text-dual-encoder"),rht.forEach(t),EFr=r(o7e," \u2014 "),QQ=n(o7e,"A",{href:!0});var tht=s(QQ);CFr=r(tht,"FlaxVisionTextDualEncoderModel"),tht.forEach(t),wFr=r(o7e," (VisionTextDualEncoder model)"),o7e.forEach(t),AFr=i(te),t4=n(te,"LI",{});var r7e=s(t4);abe=n(r7e,"STRONG",{});var aht=s(abe);yFr=r(aht,"vit"),aht.forEach(t),LFr=r(r7e," \u2014 "),WQ=n(r7e,"A",{href:!0});var nht=s(WQ);xFr=r(nht,"FlaxViTModel"),nht.forEach(t),$Fr=r(r7e," (ViT model)"),r7e.forEach(t),kFr=i(te),a4=n(te,"LI",{});var t7e=s(a4);nbe=n(t7e,"STRONG",{});var sht=s(nbe);SFr=r(sht,"wav2vec2"),sht.forEach(t),RFr=r(t7e," \u2014 "),HQ=n(t7e,"A",{href:!0});var lht=s(HQ);BFr=r(lht,"FlaxWav2Vec2Model"),lht.forEach(t),PFr=r(t7e," (Wav2Vec2 model)"),t7e.forEach(t),IFr=i(te),n4=n(te,"LI",{});var a7e=s(n4);sbe=n(a7e,"STRONG",{});var iht=s(sbe);qFr=r(iht,"xglm"),iht.forEach(t),NFr=r(a7e," \u2014 "),UQ=n(a7e,"A",{href:!0});var dht=s(UQ);jFr=r(dht,"FlaxXGLMModel"),dht.forEach(t),DFr=r(a7e," (XGLM model)"),a7e.forEach(t),GFr=i(te),s4=n(te,"LI",{});var n7e=s(s4);lbe=n(n7e,"STRONG",{});var cht=s(lbe);OFr=r(cht,"xlm-roberta"),cht.forEach(t),VFr=r(n7e," \u2014 "),JQ=n(n7e,"A",{href:!0});var fht=s(JQ);XFr=r(fht,"FlaxXLMRobertaModel"),fht.forEach(t),zFr=r(n7e," (XLM-RoBERTa model)"),n7e.forEach(t),te.forEach(t),QFr=i(Ml),T(l4.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),lSe=i(f),cc=n(f,"H2",{class:!0});var mBe=s(cc);i4=n(mBe,"A",{id:!0,class:!0,href:!0});var mht=s(i4);ibe=n(mht,"SPAN",{});var ght=s(ibe);T(wL.$$.fragment,ght),ght.forEach(t),mht.forEach(t),WFr=i(mBe),dbe=n(mBe,"SPAN",{});var hht=s(dbe);HFr=r(hht,"FlaxAutoModelForCausalLM"),hht.forEach(t),mBe.forEach(t),iSe=i(f),dr=n(f,"DIV",{class:!0});var El=s(dr);T(AL.$$.fragment,El),UFr=i(El),fc=n(El,"P",{});var vJ=s(fc);JFr=r(vJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),YQ=n(vJ,"A",{href:!0});var pht=s(YQ);YFr=r(pht,"from_pretrained()"),pht.forEach(t),KFr=r(vJ," class method or the "),KQ=n(vJ,"A",{href:!0});var uht=s(KQ);ZFr=r(uht,"from_config()"),uht.forEach(t),evr=r(vJ,` class
method.`),vJ.forEach(t),ovr=i(El),yL=n(El,"P",{});var gBe=s(yL);rvr=r(gBe,"This class cannot be instantiated directly using "),cbe=n(gBe,"CODE",{});var _ht=s(cbe);tvr=r(_ht,"__init__()"),_ht.forEach(t),avr=r(gBe," (throws an error)."),gBe.forEach(t),nvr=i(El),It=n(El,"DIV",{class:!0});var ow=s(It);T(LL.$$.fragment,ow),svr=i(ow),fbe=n(ow,"P",{});var bht=s(fbe);lvr=r(bht,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),bht.forEach(t),ivr=i(ow),mc=n(ow,"P",{});var TJ=s(mc);dvr=r(TJ,`Note:
Loading a model from its configuration file does `),mbe=n(TJ,"STRONG",{});var Fht=s(mbe);cvr=r(Fht,"not"),Fht.forEach(t),fvr=r(TJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZQ=n(TJ,"A",{href:!0});var vht=s(ZQ);mvr=r(vht,"from_pretrained()"),vht.forEach(t),gvr=r(TJ," to load the model weights."),TJ.forEach(t),hvr=i(ow),T(d4.$$.fragment,ow),ow.forEach(t),pvr=i(El),Ir=n(El,"DIV",{class:!0});var Cl=s(Ir);T(xL.$$.fragment,Cl),uvr=i(Cl),gbe=n(Cl,"P",{});var Tht=s(gbe);_vr=r(Tht,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Tht.forEach(t),bvr=i(Cl),ln=n(Cl,"P",{});var rw=s(ln);Fvr=r(rw,"The model class to instantiate is selected based on the "),hbe=n(rw,"CODE",{});var Mht=s(hbe);vvr=r(Mht,"model_type"),Mht.forEach(t),Tvr=r(rw,` property of the config object (either
passed as an argument or loaded from `),pbe=n(rw,"CODE",{});var Eht=s(pbe);Mvr=r(Eht,"pretrained_model_name_or_path"),Eht.forEach(t),Evr=r(rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ube=n(rw,"CODE",{});var Cht=s(ube);Cvr=r(Cht,"pretrained_model_name_or_path"),Cht.forEach(t),wvr=r(rw,":"),rw.forEach(t),Avr=i(Cl),Hr=n(Cl,"UL",{});var wl=s(Hr);c4=n(wl,"LI",{});var s7e=s(c4);_be=n(s7e,"STRONG",{});var wht=s(_be);yvr=r(wht,"bart"),wht.forEach(t),Lvr=r(s7e," \u2014 "),eW=n(s7e,"A",{href:!0});var Aht=s(eW);xvr=r(Aht,"FlaxBartForCausalLM"),Aht.forEach(t),$vr=r(s7e," (BART model)"),s7e.forEach(t),kvr=i(wl),f4=n(wl,"LI",{});var l7e=s(f4);bbe=n(l7e,"STRONG",{});var yht=s(bbe);Svr=r(yht,"gpt2"),yht.forEach(t),Rvr=r(l7e," \u2014 "),oW=n(l7e,"A",{href:!0});var Lht=s(oW);Bvr=r(Lht,"FlaxGPT2LMHeadModel"),Lht.forEach(t),Pvr=r(l7e," (OpenAI GPT-2 model)"),l7e.forEach(t),Ivr=i(wl),m4=n(wl,"LI",{});var i7e=s(m4);Fbe=n(i7e,"STRONG",{});var xht=s(Fbe);qvr=r(xht,"gpt_neo"),xht.forEach(t),Nvr=r(i7e," \u2014 "),rW=n(i7e,"A",{href:!0});var $ht=s(rW);jvr=r($ht,"FlaxGPTNeoForCausalLM"),$ht.forEach(t),Dvr=r(i7e," (GPT Neo model)"),i7e.forEach(t),Gvr=i(wl),g4=n(wl,"LI",{});var d7e=s(g4);vbe=n(d7e,"STRONG",{});var kht=s(vbe);Ovr=r(kht,"gptj"),kht.forEach(t),Vvr=r(d7e," \u2014 "),tW=n(d7e,"A",{href:!0});var Sht=s(tW);Xvr=r(Sht,"FlaxGPTJForCausalLM"),Sht.forEach(t),zvr=r(d7e," (GPT-J model)"),d7e.forEach(t),Qvr=i(wl),h4=n(wl,"LI",{});var c7e=s(h4);Tbe=n(c7e,"STRONG",{});var Rht=s(Tbe);Wvr=r(Rht,"xglm"),Rht.forEach(t),Hvr=r(c7e," \u2014 "),aW=n(c7e,"A",{href:!0});var Bht=s(aW);Uvr=r(Bht,"FlaxXGLMForCausalLM"),Bht.forEach(t),Jvr=r(c7e," (XGLM model)"),c7e.forEach(t),wl.forEach(t),Yvr=i(Cl),T(p4.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),dSe=i(f),gc=n(f,"H2",{class:!0});var hBe=s(gc);u4=n(hBe,"A",{id:!0,class:!0,href:!0});var Pht=s(u4);Mbe=n(Pht,"SPAN",{});var Iht=s(Mbe);T($L.$$.fragment,Iht),Iht.forEach(t),Pht.forEach(t),Kvr=i(hBe),Ebe=n(hBe,"SPAN",{});var qht=s(Ebe);Zvr=r(qht,"FlaxAutoModelForPreTraining"),qht.forEach(t),hBe.forEach(t),cSe=i(f),cr=n(f,"DIV",{class:!0});var Al=s(cr);T(kL.$$.fragment,Al),e6r=i(Al),hc=n(Al,"P",{});var MJ=s(hc);o6r=r(MJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),nW=n(MJ,"A",{href:!0});var Nht=s(nW);r6r=r(Nht,"from_pretrained()"),Nht.forEach(t),t6r=r(MJ," class method or the "),sW=n(MJ,"A",{href:!0});var jht=s(sW);a6r=r(jht,"from_config()"),jht.forEach(t),n6r=r(MJ,` class
method.`),MJ.forEach(t),s6r=i(Al),SL=n(Al,"P",{});var pBe=s(SL);l6r=r(pBe,"This class cannot be instantiated directly using "),Cbe=n(pBe,"CODE",{});var Dht=s(Cbe);i6r=r(Dht,"__init__()"),Dht.forEach(t),d6r=r(pBe," (throws an error)."),pBe.forEach(t),c6r=i(Al),qt=n(Al,"DIV",{class:!0});var tw=s(qt);T(RL.$$.fragment,tw),f6r=i(tw),wbe=n(tw,"P",{});var Ght=s(wbe);m6r=r(Ght,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ght.forEach(t),g6r=i(tw),pc=n(tw,"P",{});var EJ=s(pc);h6r=r(EJ,`Note:
Loading a model from its configuration file does `),Abe=n(EJ,"STRONG",{});var Oht=s(Abe);p6r=r(Oht,"not"),Oht.forEach(t),u6r=r(EJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=n(EJ,"A",{href:!0});var Vht=s(lW);_6r=r(Vht,"from_pretrained()"),Vht.forEach(t),b6r=r(EJ," to load the model weights."),EJ.forEach(t),F6r=i(tw),T(_4.$$.fragment,tw),tw.forEach(t),v6r=i(Al),qr=n(Al,"DIV",{class:!0});var yl=s(qr);T(BL.$$.fragment,yl),T6r=i(yl),ybe=n(yl,"P",{});var Xht=s(ybe);M6r=r(Xht,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Xht.forEach(t),E6r=i(yl),dn=n(yl,"P",{});var aw=s(dn);C6r=r(aw,"The model class to instantiate is selected based on the "),Lbe=n(aw,"CODE",{});var zht=s(Lbe);w6r=r(zht,"model_type"),zht.forEach(t),A6r=r(aw,` property of the config object (either
passed as an argument or loaded from `),xbe=n(aw,"CODE",{});var Qht=s(xbe);y6r=r(Qht,"pretrained_model_name_or_path"),Qht.forEach(t),L6r=r(aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$be=n(aw,"CODE",{});var Wht=s($be);x6r=r(Wht,"pretrained_model_name_or_path"),Wht.forEach(t),$6r=r(aw,":"),aw.forEach(t),k6r=i(yl),be=n(yl,"UL",{});var Te=s(be);b4=n(Te,"LI",{});var f7e=s(b4);kbe=n(f7e,"STRONG",{});var Hht=s(kbe);S6r=r(Hht,"albert"),Hht.forEach(t),R6r=r(f7e," \u2014 "),iW=n(f7e,"A",{href:!0});var Uht=s(iW);B6r=r(Uht,"FlaxAlbertForPreTraining"),Uht.forEach(t),P6r=r(f7e," (ALBERT model)"),f7e.forEach(t),I6r=i(Te),F4=n(Te,"LI",{});var m7e=s(F4);Sbe=n(m7e,"STRONG",{});var Jht=s(Sbe);q6r=r(Jht,"bart"),Jht.forEach(t),N6r=r(m7e," \u2014 "),dW=n(m7e,"A",{href:!0});var Yht=s(dW);j6r=r(Yht,"FlaxBartForConditionalGeneration"),Yht.forEach(t),D6r=r(m7e," (BART model)"),m7e.forEach(t),G6r=i(Te),v4=n(Te,"LI",{});var g7e=s(v4);Rbe=n(g7e,"STRONG",{});var Kht=s(Rbe);O6r=r(Kht,"bert"),Kht.forEach(t),V6r=r(g7e," \u2014 "),cW=n(g7e,"A",{href:!0});var Zht=s(cW);X6r=r(Zht,"FlaxBertForPreTraining"),Zht.forEach(t),z6r=r(g7e," (BERT model)"),g7e.forEach(t),Q6r=i(Te),T4=n(Te,"LI",{});var h7e=s(T4);Bbe=n(h7e,"STRONG",{});var ept=s(Bbe);W6r=r(ept,"big_bird"),ept.forEach(t),H6r=r(h7e," \u2014 "),fW=n(h7e,"A",{href:!0});var opt=s(fW);U6r=r(opt,"FlaxBigBirdForPreTraining"),opt.forEach(t),J6r=r(h7e," (BigBird model)"),h7e.forEach(t),Y6r=i(Te),M4=n(Te,"LI",{});var p7e=s(M4);Pbe=n(p7e,"STRONG",{});var rpt=s(Pbe);K6r=r(rpt,"electra"),rpt.forEach(t),Z6r=r(p7e," \u2014 "),mW=n(p7e,"A",{href:!0});var tpt=s(mW);eTr=r(tpt,"FlaxElectraForPreTraining"),tpt.forEach(t),oTr=r(p7e," (ELECTRA model)"),p7e.forEach(t),rTr=i(Te),E4=n(Te,"LI",{});var u7e=s(E4);Ibe=n(u7e,"STRONG",{});var apt=s(Ibe);tTr=r(apt,"mbart"),apt.forEach(t),aTr=r(u7e," \u2014 "),gW=n(u7e,"A",{href:!0});var npt=s(gW);nTr=r(npt,"FlaxMBartForConditionalGeneration"),npt.forEach(t),sTr=r(u7e," (mBART model)"),u7e.forEach(t),lTr=i(Te),C4=n(Te,"LI",{});var _7e=s(C4);qbe=n(_7e,"STRONG",{});var spt=s(qbe);iTr=r(spt,"mt5"),spt.forEach(t),dTr=r(_7e," \u2014 "),hW=n(_7e,"A",{href:!0});var lpt=s(hW);cTr=r(lpt,"FlaxMT5ForConditionalGeneration"),lpt.forEach(t),fTr=r(_7e," (mT5 model)"),_7e.forEach(t),mTr=i(Te),w4=n(Te,"LI",{});var b7e=s(w4);Nbe=n(b7e,"STRONG",{});var ipt=s(Nbe);gTr=r(ipt,"roberta"),ipt.forEach(t),hTr=r(b7e," \u2014 "),pW=n(b7e,"A",{href:!0});var dpt=s(pW);pTr=r(dpt,"FlaxRobertaForMaskedLM"),dpt.forEach(t),uTr=r(b7e," (RoBERTa model)"),b7e.forEach(t),_Tr=i(Te),A4=n(Te,"LI",{});var F7e=s(A4);jbe=n(F7e,"STRONG",{});var cpt=s(jbe);bTr=r(cpt,"roformer"),cpt.forEach(t),FTr=r(F7e," \u2014 "),uW=n(F7e,"A",{href:!0});var fpt=s(uW);vTr=r(fpt,"FlaxRoFormerForMaskedLM"),fpt.forEach(t),TTr=r(F7e," (RoFormer model)"),F7e.forEach(t),MTr=i(Te),y4=n(Te,"LI",{});var v7e=s(y4);Dbe=n(v7e,"STRONG",{});var mpt=s(Dbe);ETr=r(mpt,"t5"),mpt.forEach(t),CTr=r(v7e," \u2014 "),_W=n(v7e,"A",{href:!0});var gpt=s(_W);wTr=r(gpt,"FlaxT5ForConditionalGeneration"),gpt.forEach(t),ATr=r(v7e," (T5 model)"),v7e.forEach(t),yTr=i(Te),L4=n(Te,"LI",{});var T7e=s(L4);Gbe=n(T7e,"STRONG",{});var hpt=s(Gbe);LTr=r(hpt,"wav2vec2"),hpt.forEach(t),xTr=r(T7e," \u2014 "),bW=n(T7e,"A",{href:!0});var ppt=s(bW);$Tr=r(ppt,"FlaxWav2Vec2ForPreTraining"),ppt.forEach(t),kTr=r(T7e," (Wav2Vec2 model)"),T7e.forEach(t),STr=i(Te),x4=n(Te,"LI",{});var M7e=s(x4);Obe=n(M7e,"STRONG",{});var upt=s(Obe);RTr=r(upt,"xlm-roberta"),upt.forEach(t),BTr=r(M7e," \u2014 "),FW=n(M7e,"A",{href:!0});var _pt=s(FW);PTr=r(_pt,"FlaxXLMRobertaForMaskedLM"),_pt.forEach(t),ITr=r(M7e," (XLM-RoBERTa model)"),M7e.forEach(t),Te.forEach(t),qTr=i(yl),T($4.$$.fragment,yl),yl.forEach(t),Al.forEach(t),fSe=i(f),uc=n(f,"H2",{class:!0});var uBe=s(uc);k4=n(uBe,"A",{id:!0,class:!0,href:!0});var bpt=s(k4);Vbe=n(bpt,"SPAN",{});var Fpt=s(Vbe);T(PL.$$.fragment,Fpt),Fpt.forEach(t),bpt.forEach(t),NTr=i(uBe),Xbe=n(uBe,"SPAN",{});var vpt=s(Xbe);jTr=r(vpt,"FlaxAutoModelForMaskedLM"),vpt.forEach(t),uBe.forEach(t),mSe=i(f),fr=n(f,"DIV",{class:!0});var Ll=s(fr);T(IL.$$.fragment,Ll),DTr=i(Ll),_c=n(Ll,"P",{});var CJ=s(_c);GTr=r(CJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),vW=n(CJ,"A",{href:!0});var Tpt=s(vW);OTr=r(Tpt,"from_pretrained()"),Tpt.forEach(t),VTr=r(CJ," class method or the "),TW=n(CJ,"A",{href:!0});var Mpt=s(TW);XTr=r(Mpt,"from_config()"),Mpt.forEach(t),zTr=r(CJ,` class
method.`),CJ.forEach(t),QTr=i(Ll),qL=n(Ll,"P",{});var _Be=s(qL);WTr=r(_Be,"This class cannot be instantiated directly using "),zbe=n(_Be,"CODE",{});var Ept=s(zbe);HTr=r(Ept,"__init__()"),Ept.forEach(t),UTr=r(_Be," (throws an error)."),_Be.forEach(t),JTr=i(Ll),Nt=n(Ll,"DIV",{class:!0});var nw=s(Nt);T(NL.$$.fragment,nw),YTr=i(nw),Qbe=n(nw,"P",{});var Cpt=s(Qbe);KTr=r(Cpt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Cpt.forEach(t),ZTr=i(nw),bc=n(nw,"P",{});var wJ=s(bc);eMr=r(wJ,`Note:
Loading a model from its configuration file does `),Wbe=n(wJ,"STRONG",{});var wpt=s(Wbe);oMr=r(wpt,"not"),wpt.forEach(t),rMr=r(wJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MW=n(wJ,"A",{href:!0});var Apt=s(MW);tMr=r(Apt,"from_pretrained()"),Apt.forEach(t),aMr=r(wJ," to load the model weights."),wJ.forEach(t),nMr=i(nw),T(S4.$$.fragment,nw),nw.forEach(t),sMr=i(Ll),Nr=n(Ll,"DIV",{class:!0});var xl=s(Nr);T(jL.$$.fragment,xl),lMr=i(xl),Hbe=n(xl,"P",{});var ypt=s(Hbe);iMr=r(ypt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ypt.forEach(t),dMr=i(xl),cn=n(xl,"P",{});var sw=s(cn);cMr=r(sw,"The model class to instantiate is selected based on the "),Ube=n(sw,"CODE",{});var Lpt=s(Ube);fMr=r(Lpt,"model_type"),Lpt.forEach(t),mMr=r(sw,` property of the config object (either
passed as an argument or loaded from `),Jbe=n(sw,"CODE",{});var xpt=s(Jbe);gMr=r(xpt,"pretrained_model_name_or_path"),xpt.forEach(t),hMr=r(sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ybe=n(sw,"CODE",{});var $pt=s(Ybe);pMr=r($pt,"pretrained_model_name_or_path"),$pt.forEach(t),uMr=r(sw,":"),sw.forEach(t),_Mr=i(xl),Ce=n(xl,"UL",{});var ke=s(Ce);R4=n(ke,"LI",{});var E7e=s(R4);Kbe=n(E7e,"STRONG",{});var kpt=s(Kbe);bMr=r(kpt,"albert"),kpt.forEach(t),FMr=r(E7e," \u2014 "),EW=n(E7e,"A",{href:!0});var Spt=s(EW);vMr=r(Spt,"FlaxAlbertForMaskedLM"),Spt.forEach(t),TMr=r(E7e," (ALBERT model)"),E7e.forEach(t),MMr=i(ke),B4=n(ke,"LI",{});var C7e=s(B4);Zbe=n(C7e,"STRONG",{});var Rpt=s(Zbe);EMr=r(Rpt,"bart"),Rpt.forEach(t),CMr=r(C7e," \u2014 "),CW=n(C7e,"A",{href:!0});var Bpt=s(CW);wMr=r(Bpt,"FlaxBartForConditionalGeneration"),Bpt.forEach(t),AMr=r(C7e," (BART model)"),C7e.forEach(t),yMr=i(ke),P4=n(ke,"LI",{});var w7e=s(P4);e5e=n(w7e,"STRONG",{});var Ppt=s(e5e);LMr=r(Ppt,"bert"),Ppt.forEach(t),xMr=r(w7e," \u2014 "),wW=n(w7e,"A",{href:!0});var Ipt=s(wW);$Mr=r(Ipt,"FlaxBertForMaskedLM"),Ipt.forEach(t),kMr=r(w7e," (BERT model)"),w7e.forEach(t),SMr=i(ke),I4=n(ke,"LI",{});var A7e=s(I4);o5e=n(A7e,"STRONG",{});var qpt=s(o5e);RMr=r(qpt,"big_bird"),qpt.forEach(t),BMr=r(A7e," \u2014 "),AW=n(A7e,"A",{href:!0});var Npt=s(AW);PMr=r(Npt,"FlaxBigBirdForMaskedLM"),Npt.forEach(t),IMr=r(A7e," (BigBird model)"),A7e.forEach(t),qMr=i(ke),q4=n(ke,"LI",{});var y7e=s(q4);r5e=n(y7e,"STRONG",{});var jpt=s(r5e);NMr=r(jpt,"distilbert"),jpt.forEach(t),jMr=r(y7e," \u2014 "),yW=n(y7e,"A",{href:!0});var Dpt=s(yW);DMr=r(Dpt,"FlaxDistilBertForMaskedLM"),Dpt.forEach(t),GMr=r(y7e," (DistilBERT model)"),y7e.forEach(t),OMr=i(ke),N4=n(ke,"LI",{});var L7e=s(N4);t5e=n(L7e,"STRONG",{});var Gpt=s(t5e);VMr=r(Gpt,"electra"),Gpt.forEach(t),XMr=r(L7e," \u2014 "),LW=n(L7e,"A",{href:!0});var Opt=s(LW);zMr=r(Opt,"FlaxElectraForMaskedLM"),Opt.forEach(t),QMr=r(L7e," (ELECTRA model)"),L7e.forEach(t),WMr=i(ke),j4=n(ke,"LI",{});var x7e=s(j4);a5e=n(x7e,"STRONG",{});var Vpt=s(a5e);HMr=r(Vpt,"mbart"),Vpt.forEach(t),UMr=r(x7e," \u2014 "),xW=n(x7e,"A",{href:!0});var Xpt=s(xW);JMr=r(Xpt,"FlaxMBartForConditionalGeneration"),Xpt.forEach(t),YMr=r(x7e," (mBART model)"),x7e.forEach(t),KMr=i(ke),D4=n(ke,"LI",{});var $7e=s(D4);n5e=n($7e,"STRONG",{});var zpt=s(n5e);ZMr=r(zpt,"roberta"),zpt.forEach(t),e9r=r($7e," \u2014 "),$W=n($7e,"A",{href:!0});var Qpt=s($W);o9r=r(Qpt,"FlaxRobertaForMaskedLM"),Qpt.forEach(t),r9r=r($7e," (RoBERTa model)"),$7e.forEach(t),t9r=i(ke),G4=n(ke,"LI",{});var k7e=s(G4);s5e=n(k7e,"STRONG",{});var Wpt=s(s5e);a9r=r(Wpt,"roformer"),Wpt.forEach(t),n9r=r(k7e," \u2014 "),kW=n(k7e,"A",{href:!0});var Hpt=s(kW);s9r=r(Hpt,"FlaxRoFormerForMaskedLM"),Hpt.forEach(t),l9r=r(k7e," (RoFormer model)"),k7e.forEach(t),i9r=i(ke),O4=n(ke,"LI",{});var S7e=s(O4);l5e=n(S7e,"STRONG",{});var Upt=s(l5e);d9r=r(Upt,"xlm-roberta"),Upt.forEach(t),c9r=r(S7e," \u2014 "),SW=n(S7e,"A",{href:!0});var Jpt=s(SW);f9r=r(Jpt,"FlaxXLMRobertaForMaskedLM"),Jpt.forEach(t),m9r=r(S7e," (XLM-RoBERTa model)"),S7e.forEach(t),ke.forEach(t),g9r=i(xl),T(V4.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),gSe=i(f),Fc=n(f,"H2",{class:!0});var bBe=s(Fc);X4=n(bBe,"A",{id:!0,class:!0,href:!0});var Ypt=s(X4);i5e=n(Ypt,"SPAN",{});var Kpt=s(i5e);T(DL.$$.fragment,Kpt),Kpt.forEach(t),Ypt.forEach(t),h9r=i(bBe),d5e=n(bBe,"SPAN",{});var Zpt=s(d5e);p9r=r(Zpt,"FlaxAutoModelForSeq2SeqLM"),Zpt.forEach(t),bBe.forEach(t),hSe=i(f),mr=n(f,"DIV",{class:!0});var $l=s(mr);T(GL.$$.fragment,$l),u9r=i($l),vc=n($l,"P",{});var AJ=s(vc);_9r=r(AJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),RW=n(AJ,"A",{href:!0});var eut=s(RW);b9r=r(eut,"from_pretrained()"),eut.forEach(t),F9r=r(AJ," class method or the "),BW=n(AJ,"A",{href:!0});var out=s(BW);v9r=r(out,"from_config()"),out.forEach(t),T9r=r(AJ,` class
method.`),AJ.forEach(t),M9r=i($l),OL=n($l,"P",{});var FBe=s(OL);E9r=r(FBe,"This class cannot be instantiated directly using "),c5e=n(FBe,"CODE",{});var rut=s(c5e);C9r=r(rut,"__init__()"),rut.forEach(t),w9r=r(FBe," (throws an error)."),FBe.forEach(t),A9r=i($l),jt=n($l,"DIV",{class:!0});var lw=s(jt);T(VL.$$.fragment,lw),y9r=i(lw),f5e=n(lw,"P",{});var tut=s(f5e);L9r=r(tut,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),tut.forEach(t),x9r=i(lw),Tc=n(lw,"P",{});var yJ=s(Tc);$9r=r(yJ,`Note:
Loading a model from its configuration file does `),m5e=n(yJ,"STRONG",{});var aut=s(m5e);k9r=r(aut,"not"),aut.forEach(t),S9r=r(yJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PW=n(yJ,"A",{href:!0});var nut=s(PW);R9r=r(nut,"from_pretrained()"),nut.forEach(t),B9r=r(yJ," to load the model weights."),yJ.forEach(t),P9r=i(lw),T(z4.$$.fragment,lw),lw.forEach(t),I9r=i($l),jr=n($l,"DIV",{class:!0});var kl=s(jr);T(XL.$$.fragment,kl),q9r=i(kl),g5e=n(kl,"P",{});var sut=s(g5e);N9r=r(sut,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),sut.forEach(t),j9r=i(kl),fn=n(kl,"P",{});var iw=s(fn);D9r=r(iw,"The model class to instantiate is selected based on the "),h5e=n(iw,"CODE",{});var lut=s(h5e);G9r=r(lut,"model_type"),lut.forEach(t),O9r=r(iw,` property of the config object (either
passed as an argument or loaded from `),p5e=n(iw,"CODE",{});var iut=s(p5e);V9r=r(iut,"pretrained_model_name_or_path"),iut.forEach(t),X9r=r(iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u5e=n(iw,"CODE",{});var dut=s(u5e);z9r=r(dut,"pretrained_model_name_or_path"),dut.forEach(t),Q9r=r(iw,":"),iw.forEach(t),W9r=i(kl),xe=n(kl,"UL",{});var De=s(xe);Q4=n(De,"LI",{});var R7e=s(Q4);_5e=n(R7e,"STRONG",{});var cut=s(_5e);H9r=r(cut,"bart"),cut.forEach(t),U9r=r(R7e," \u2014 "),IW=n(R7e,"A",{href:!0});var fut=s(IW);J9r=r(fut,"FlaxBartForConditionalGeneration"),fut.forEach(t),Y9r=r(R7e," (BART model)"),R7e.forEach(t),K9r=i(De),W4=n(De,"LI",{});var B7e=s(W4);b5e=n(B7e,"STRONG",{});var mut=s(b5e);Z9r=r(mut,"blenderbot"),mut.forEach(t),e4r=r(B7e," \u2014 "),qW=n(B7e,"A",{href:!0});var gut=s(qW);o4r=r(gut,"FlaxBlenderbotForConditionalGeneration"),gut.forEach(t),r4r=r(B7e," (Blenderbot model)"),B7e.forEach(t),t4r=i(De),H4=n(De,"LI",{});var P7e=s(H4);F5e=n(P7e,"STRONG",{});var hut=s(F5e);a4r=r(hut,"blenderbot-small"),hut.forEach(t),n4r=r(P7e," \u2014 "),NW=n(P7e,"A",{href:!0});var put=s(NW);s4r=r(put,"FlaxBlenderbotSmallForConditionalGeneration"),put.forEach(t),l4r=r(P7e," (BlenderbotSmall model)"),P7e.forEach(t),i4r=i(De),U4=n(De,"LI",{});var I7e=s(U4);v5e=n(I7e,"STRONG",{});var uut=s(v5e);d4r=r(uut,"encoder-decoder"),uut.forEach(t),c4r=r(I7e," \u2014 "),jW=n(I7e,"A",{href:!0});var _ut=s(jW);f4r=r(_ut,"FlaxEncoderDecoderModel"),_ut.forEach(t),m4r=r(I7e," (Encoder decoder model)"),I7e.forEach(t),g4r=i(De),J4=n(De,"LI",{});var q7e=s(J4);T5e=n(q7e,"STRONG",{});var but=s(T5e);h4r=r(but,"marian"),but.forEach(t),p4r=r(q7e," \u2014 "),DW=n(q7e,"A",{href:!0});var Fut=s(DW);u4r=r(Fut,"FlaxMarianMTModel"),Fut.forEach(t),_4r=r(q7e," (Marian model)"),q7e.forEach(t),b4r=i(De),Y4=n(De,"LI",{});var N7e=s(Y4);M5e=n(N7e,"STRONG",{});var vut=s(M5e);F4r=r(vut,"mbart"),vut.forEach(t),v4r=r(N7e," \u2014 "),GW=n(N7e,"A",{href:!0});var Tut=s(GW);T4r=r(Tut,"FlaxMBartForConditionalGeneration"),Tut.forEach(t),M4r=r(N7e," (mBART model)"),N7e.forEach(t),E4r=i(De),K4=n(De,"LI",{});var j7e=s(K4);E5e=n(j7e,"STRONG",{});var Mut=s(E5e);C4r=r(Mut,"mt5"),Mut.forEach(t),w4r=r(j7e," \u2014 "),OW=n(j7e,"A",{href:!0});var Eut=s(OW);A4r=r(Eut,"FlaxMT5ForConditionalGeneration"),Eut.forEach(t),y4r=r(j7e," (mT5 model)"),j7e.forEach(t),L4r=i(De),Z4=n(De,"LI",{});var D7e=s(Z4);C5e=n(D7e,"STRONG",{});var Cut=s(C5e);x4r=r(Cut,"pegasus"),Cut.forEach(t),$4r=r(D7e," \u2014 "),VW=n(D7e,"A",{href:!0});var wut=s(VW);k4r=r(wut,"FlaxPegasusForConditionalGeneration"),wut.forEach(t),S4r=r(D7e," (Pegasus model)"),D7e.forEach(t),R4r=i(De),eE=n(De,"LI",{});var G7e=s(eE);w5e=n(G7e,"STRONG",{});var Aut=s(w5e);B4r=r(Aut,"t5"),Aut.forEach(t),P4r=r(G7e," \u2014 "),XW=n(G7e,"A",{href:!0});var yut=s(XW);I4r=r(yut,"FlaxT5ForConditionalGeneration"),yut.forEach(t),q4r=r(G7e," (T5 model)"),G7e.forEach(t),De.forEach(t),N4r=i(kl),T(oE.$$.fragment,kl),kl.forEach(t),$l.forEach(t),pSe=i(f),Mc=n(f,"H2",{class:!0});var vBe=s(Mc);rE=n(vBe,"A",{id:!0,class:!0,href:!0});var Lut=s(rE);A5e=n(Lut,"SPAN",{});var xut=s(A5e);T(zL.$$.fragment,xut),xut.forEach(t),Lut.forEach(t),j4r=i(vBe),y5e=n(vBe,"SPAN",{});var $ut=s(y5e);D4r=r($ut,"FlaxAutoModelForSequenceClassification"),$ut.forEach(t),vBe.forEach(t),uSe=i(f),gr=n(f,"DIV",{class:!0});var Sl=s(gr);T(QL.$$.fragment,Sl),G4r=i(Sl),Ec=n(Sl,"P",{});var LJ=s(Ec);O4r=r(LJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),zW=n(LJ,"A",{href:!0});var kut=s(zW);V4r=r(kut,"from_pretrained()"),kut.forEach(t),X4r=r(LJ," class method or the "),QW=n(LJ,"A",{href:!0});var Sut=s(QW);z4r=r(Sut,"from_config()"),Sut.forEach(t),Q4r=r(LJ,` class
method.`),LJ.forEach(t),W4r=i(Sl),WL=n(Sl,"P",{});var TBe=s(WL);H4r=r(TBe,"This class cannot be instantiated directly using "),L5e=n(TBe,"CODE",{});var Rut=s(L5e);U4r=r(Rut,"__init__()"),Rut.forEach(t),J4r=r(TBe," (throws an error)."),TBe.forEach(t),Y4r=i(Sl),Dt=n(Sl,"DIV",{class:!0});var dw=s(Dt);T(HL.$$.fragment,dw),K4r=i(dw),x5e=n(dw,"P",{});var But=s(x5e);Z4r=r(But,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),But.forEach(t),eEr=i(dw),Cc=n(dw,"P",{});var xJ=s(Cc);oEr=r(xJ,`Note:
Loading a model from its configuration file does `),$5e=n(xJ,"STRONG",{});var Put=s($5e);rEr=r(Put,"not"),Put.forEach(t),tEr=r(xJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WW=n(xJ,"A",{href:!0});var Iut=s(WW);aEr=r(Iut,"from_pretrained()"),Iut.forEach(t),nEr=r(xJ," to load the model weights."),xJ.forEach(t),sEr=i(dw),T(tE.$$.fragment,dw),dw.forEach(t),lEr=i(Sl),Dr=n(Sl,"DIV",{class:!0});var Rl=s(Dr);T(UL.$$.fragment,Rl),iEr=i(Rl),k5e=n(Rl,"P",{});var qut=s(k5e);dEr=r(qut,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),qut.forEach(t),cEr=i(Rl),mn=n(Rl,"P",{});var cw=s(mn);fEr=r(cw,"The model class to instantiate is selected based on the "),S5e=n(cw,"CODE",{});var Nut=s(S5e);mEr=r(Nut,"model_type"),Nut.forEach(t),gEr=r(cw,` property of the config object (either
passed as an argument or loaded from `),R5e=n(cw,"CODE",{});var jut=s(R5e);hEr=r(jut,"pretrained_model_name_or_path"),jut.forEach(t),pEr=r(cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B5e=n(cw,"CODE",{});var Dut=s(B5e);uEr=r(Dut,"pretrained_model_name_or_path"),Dut.forEach(t),_Er=r(cw,":"),cw.forEach(t),bEr=i(Rl),we=n(Rl,"UL",{});var Se=s(we);aE=n(Se,"LI",{});var O7e=s(aE);P5e=n(O7e,"STRONG",{});var Gut=s(P5e);FEr=r(Gut,"albert"),Gut.forEach(t),vEr=r(O7e," \u2014 "),HW=n(O7e,"A",{href:!0});var Out=s(HW);TEr=r(Out,"FlaxAlbertForSequenceClassification"),Out.forEach(t),MEr=r(O7e," (ALBERT model)"),O7e.forEach(t),EEr=i(Se),nE=n(Se,"LI",{});var V7e=s(nE);I5e=n(V7e,"STRONG",{});var Vut=s(I5e);CEr=r(Vut,"bart"),Vut.forEach(t),wEr=r(V7e," \u2014 "),UW=n(V7e,"A",{href:!0});var Xut=s(UW);AEr=r(Xut,"FlaxBartForSequenceClassification"),Xut.forEach(t),yEr=r(V7e," (BART model)"),V7e.forEach(t),LEr=i(Se),sE=n(Se,"LI",{});var X7e=s(sE);q5e=n(X7e,"STRONG",{});var zut=s(q5e);xEr=r(zut,"bert"),zut.forEach(t),$Er=r(X7e," \u2014 "),JW=n(X7e,"A",{href:!0});var Qut=s(JW);kEr=r(Qut,"FlaxBertForSequenceClassification"),Qut.forEach(t),SEr=r(X7e," (BERT model)"),X7e.forEach(t),REr=i(Se),lE=n(Se,"LI",{});var z7e=s(lE);N5e=n(z7e,"STRONG",{});var Wut=s(N5e);BEr=r(Wut,"big_bird"),Wut.forEach(t),PEr=r(z7e," \u2014 "),YW=n(z7e,"A",{href:!0});var Hut=s(YW);IEr=r(Hut,"FlaxBigBirdForSequenceClassification"),Hut.forEach(t),qEr=r(z7e," (BigBird model)"),z7e.forEach(t),NEr=i(Se),iE=n(Se,"LI",{});var Q7e=s(iE);j5e=n(Q7e,"STRONG",{});var Uut=s(j5e);jEr=r(Uut,"distilbert"),Uut.forEach(t),DEr=r(Q7e," \u2014 "),KW=n(Q7e,"A",{href:!0});var Jut=s(KW);GEr=r(Jut,"FlaxDistilBertForSequenceClassification"),Jut.forEach(t),OEr=r(Q7e," (DistilBERT model)"),Q7e.forEach(t),VEr=i(Se),dE=n(Se,"LI",{});var W7e=s(dE);D5e=n(W7e,"STRONG",{});var Yut=s(D5e);XEr=r(Yut,"electra"),Yut.forEach(t),zEr=r(W7e," \u2014 "),ZW=n(W7e,"A",{href:!0});var Kut=s(ZW);QEr=r(Kut,"FlaxElectraForSequenceClassification"),Kut.forEach(t),WEr=r(W7e," (ELECTRA model)"),W7e.forEach(t),HEr=i(Se),cE=n(Se,"LI",{});var H7e=s(cE);G5e=n(H7e,"STRONG",{});var Zut=s(G5e);UEr=r(Zut,"mbart"),Zut.forEach(t),JEr=r(H7e," \u2014 "),eH=n(H7e,"A",{href:!0});var e_t=s(eH);YEr=r(e_t,"FlaxMBartForSequenceClassification"),e_t.forEach(t),KEr=r(H7e," (mBART model)"),H7e.forEach(t),ZEr=i(Se),fE=n(Se,"LI",{});var U7e=s(fE);O5e=n(U7e,"STRONG",{});var o_t=s(O5e);eCr=r(o_t,"roberta"),o_t.forEach(t),oCr=r(U7e," \u2014 "),oH=n(U7e,"A",{href:!0});var r_t=s(oH);rCr=r(r_t,"FlaxRobertaForSequenceClassification"),r_t.forEach(t),tCr=r(U7e," (RoBERTa model)"),U7e.forEach(t),aCr=i(Se),mE=n(Se,"LI",{});var J7e=s(mE);V5e=n(J7e,"STRONG",{});var t_t=s(V5e);nCr=r(t_t,"roformer"),t_t.forEach(t),sCr=r(J7e," \u2014 "),rH=n(J7e,"A",{href:!0});var a_t=s(rH);lCr=r(a_t,"FlaxRoFormerForSequenceClassification"),a_t.forEach(t),iCr=r(J7e," (RoFormer model)"),J7e.forEach(t),dCr=i(Se),gE=n(Se,"LI",{});var Y7e=s(gE);X5e=n(Y7e,"STRONG",{});var n_t=s(X5e);cCr=r(n_t,"xlm-roberta"),n_t.forEach(t),fCr=r(Y7e," \u2014 "),tH=n(Y7e,"A",{href:!0});var s_t=s(tH);mCr=r(s_t,"FlaxXLMRobertaForSequenceClassification"),s_t.forEach(t),gCr=r(Y7e," (XLM-RoBERTa model)"),Y7e.forEach(t),Se.forEach(t),hCr=i(Rl),T(hE.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),_Se=i(f),wc=n(f,"H2",{class:!0});var MBe=s(wc);pE=n(MBe,"A",{id:!0,class:!0,href:!0});var l_t=s(pE);z5e=n(l_t,"SPAN",{});var i_t=s(z5e);T(JL.$$.fragment,i_t),i_t.forEach(t),l_t.forEach(t),pCr=i(MBe),Q5e=n(MBe,"SPAN",{});var d_t=s(Q5e);uCr=r(d_t,"FlaxAutoModelForQuestionAnswering"),d_t.forEach(t),MBe.forEach(t),bSe=i(f),hr=n(f,"DIV",{class:!0});var Bl=s(hr);T(YL.$$.fragment,Bl),_Cr=i(Bl),Ac=n(Bl,"P",{});var $J=s(Ac);bCr=r($J,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),aH=n($J,"A",{href:!0});var c_t=s(aH);FCr=r(c_t,"from_pretrained()"),c_t.forEach(t),vCr=r($J," class method or the "),nH=n($J,"A",{href:!0});var f_t=s(nH);TCr=r(f_t,"from_config()"),f_t.forEach(t),MCr=r($J,` class
method.`),$J.forEach(t),ECr=i(Bl),KL=n(Bl,"P",{});var EBe=s(KL);CCr=r(EBe,"This class cannot be instantiated directly using "),W5e=n(EBe,"CODE",{});var m_t=s(W5e);wCr=r(m_t,"__init__()"),m_t.forEach(t),ACr=r(EBe," (throws an error)."),EBe.forEach(t),yCr=i(Bl),Gt=n(Bl,"DIV",{class:!0});var fw=s(Gt);T(ZL.$$.fragment,fw),LCr=i(fw),H5e=n(fw,"P",{});var g_t=s(H5e);xCr=r(g_t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),g_t.forEach(t),$Cr=i(fw),yc=n(fw,"P",{});var kJ=s(yc);kCr=r(kJ,`Note:
Loading a model from its configuration file does `),U5e=n(kJ,"STRONG",{});var h_t=s(U5e);SCr=r(h_t,"not"),h_t.forEach(t),RCr=r(kJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sH=n(kJ,"A",{href:!0});var p_t=s(sH);BCr=r(p_t,"from_pretrained()"),p_t.forEach(t),PCr=r(kJ," to load the model weights."),kJ.forEach(t),ICr=i(fw),T(uE.$$.fragment,fw),fw.forEach(t),qCr=i(Bl),Gr=n(Bl,"DIV",{class:!0});var Pl=s(Gr);T(e8.$$.fragment,Pl),NCr=i(Pl),J5e=n(Pl,"P",{});var u_t=s(J5e);jCr=r(u_t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),u_t.forEach(t),DCr=i(Pl),gn=n(Pl,"P",{});var mw=s(gn);GCr=r(mw,"The model class to instantiate is selected based on the "),Y5e=n(mw,"CODE",{});var __t=s(Y5e);OCr=r(__t,"model_type"),__t.forEach(t),VCr=r(mw,` property of the config object (either
passed as an argument or loaded from `),K5e=n(mw,"CODE",{});var b_t=s(K5e);XCr=r(b_t,"pretrained_model_name_or_path"),b_t.forEach(t),zCr=r(mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z5e=n(mw,"CODE",{});var F_t=s(Z5e);QCr=r(F_t,"pretrained_model_name_or_path"),F_t.forEach(t),WCr=r(mw,":"),mw.forEach(t),HCr=i(Pl),Ae=n(Pl,"UL",{});var Re=s(Ae);_E=n(Re,"LI",{});var K7e=s(_E);eFe=n(K7e,"STRONG",{});var v_t=s(eFe);UCr=r(v_t,"albert"),v_t.forEach(t),JCr=r(K7e," \u2014 "),lH=n(K7e,"A",{href:!0});var T_t=s(lH);YCr=r(T_t,"FlaxAlbertForQuestionAnswering"),T_t.forEach(t),KCr=r(K7e," (ALBERT model)"),K7e.forEach(t),ZCr=i(Re),bE=n(Re,"LI",{});var Z7e=s(bE);oFe=n(Z7e,"STRONG",{});var M_t=s(oFe);e3r=r(M_t,"bart"),M_t.forEach(t),o3r=r(Z7e," \u2014 "),iH=n(Z7e,"A",{href:!0});var E_t=s(iH);r3r=r(E_t,"FlaxBartForQuestionAnswering"),E_t.forEach(t),t3r=r(Z7e," (BART model)"),Z7e.forEach(t),a3r=i(Re),FE=n(Re,"LI",{});var e$e=s(FE);rFe=n(e$e,"STRONG",{});var C_t=s(rFe);n3r=r(C_t,"bert"),C_t.forEach(t),s3r=r(e$e," \u2014 "),dH=n(e$e,"A",{href:!0});var w_t=s(dH);l3r=r(w_t,"FlaxBertForQuestionAnswering"),w_t.forEach(t),i3r=r(e$e," (BERT model)"),e$e.forEach(t),d3r=i(Re),vE=n(Re,"LI",{});var o$e=s(vE);tFe=n(o$e,"STRONG",{});var A_t=s(tFe);c3r=r(A_t,"big_bird"),A_t.forEach(t),f3r=r(o$e," \u2014 "),cH=n(o$e,"A",{href:!0});var y_t=s(cH);m3r=r(y_t,"FlaxBigBirdForQuestionAnswering"),y_t.forEach(t),g3r=r(o$e," (BigBird model)"),o$e.forEach(t),h3r=i(Re),TE=n(Re,"LI",{});var r$e=s(TE);aFe=n(r$e,"STRONG",{});var L_t=s(aFe);p3r=r(L_t,"distilbert"),L_t.forEach(t),u3r=r(r$e," \u2014 "),fH=n(r$e,"A",{href:!0});var x_t=s(fH);_3r=r(x_t,"FlaxDistilBertForQuestionAnswering"),x_t.forEach(t),b3r=r(r$e," (DistilBERT model)"),r$e.forEach(t),F3r=i(Re),ME=n(Re,"LI",{});var t$e=s(ME);nFe=n(t$e,"STRONG",{});var $_t=s(nFe);v3r=r($_t,"electra"),$_t.forEach(t),T3r=r(t$e," \u2014 "),mH=n(t$e,"A",{href:!0});var k_t=s(mH);M3r=r(k_t,"FlaxElectraForQuestionAnswering"),k_t.forEach(t),E3r=r(t$e," (ELECTRA model)"),t$e.forEach(t),C3r=i(Re),EE=n(Re,"LI",{});var a$e=s(EE);sFe=n(a$e,"STRONG",{});var S_t=s(sFe);w3r=r(S_t,"mbart"),S_t.forEach(t),A3r=r(a$e," \u2014 "),gH=n(a$e,"A",{href:!0});var R_t=s(gH);y3r=r(R_t,"FlaxMBartForQuestionAnswering"),R_t.forEach(t),L3r=r(a$e," (mBART model)"),a$e.forEach(t),x3r=i(Re),CE=n(Re,"LI",{});var n$e=s(CE);lFe=n(n$e,"STRONG",{});var B_t=s(lFe);$3r=r(B_t,"roberta"),B_t.forEach(t),k3r=r(n$e," \u2014 "),hH=n(n$e,"A",{href:!0});var P_t=s(hH);S3r=r(P_t,"FlaxRobertaForQuestionAnswering"),P_t.forEach(t),R3r=r(n$e," (RoBERTa model)"),n$e.forEach(t),B3r=i(Re),wE=n(Re,"LI",{});var s$e=s(wE);iFe=n(s$e,"STRONG",{});var I_t=s(iFe);P3r=r(I_t,"roformer"),I_t.forEach(t),I3r=r(s$e," \u2014 "),pH=n(s$e,"A",{href:!0});var q_t=s(pH);q3r=r(q_t,"FlaxRoFormerForQuestionAnswering"),q_t.forEach(t),N3r=r(s$e," (RoFormer model)"),s$e.forEach(t),j3r=i(Re),AE=n(Re,"LI",{});var l$e=s(AE);dFe=n(l$e,"STRONG",{});var N_t=s(dFe);D3r=r(N_t,"xlm-roberta"),N_t.forEach(t),G3r=r(l$e," \u2014 "),uH=n(l$e,"A",{href:!0});var j_t=s(uH);O3r=r(j_t,"FlaxXLMRobertaForQuestionAnswering"),j_t.forEach(t),V3r=r(l$e," (XLM-RoBERTa model)"),l$e.forEach(t),Re.forEach(t),X3r=i(Pl),T(yE.$$.fragment,Pl),Pl.forEach(t),Bl.forEach(t),FSe=i(f),Lc=n(f,"H2",{class:!0});var CBe=s(Lc);LE=n(CBe,"A",{id:!0,class:!0,href:!0});var D_t=s(LE);cFe=n(D_t,"SPAN",{});var G_t=s(cFe);T(o8.$$.fragment,G_t),G_t.forEach(t),D_t.forEach(t),z3r=i(CBe),fFe=n(CBe,"SPAN",{});var O_t=s(fFe);Q3r=r(O_t,"FlaxAutoModelForTokenClassification"),O_t.forEach(t),CBe.forEach(t),vSe=i(f),pr=n(f,"DIV",{class:!0});var Il=s(pr);T(r8.$$.fragment,Il),W3r=i(Il),xc=n(Il,"P",{});var SJ=s(xc);H3r=r(SJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),_H=n(SJ,"A",{href:!0});var V_t=s(_H);U3r=r(V_t,"from_pretrained()"),V_t.forEach(t),J3r=r(SJ," class method or the "),bH=n(SJ,"A",{href:!0});var X_t=s(bH);Y3r=r(X_t,"from_config()"),X_t.forEach(t),K3r=r(SJ,` class
method.`),SJ.forEach(t),Z3r=i(Il),t8=n(Il,"P",{});var wBe=s(t8);ewr=r(wBe,"This class cannot be instantiated directly using "),mFe=n(wBe,"CODE",{});var z_t=s(mFe);owr=r(z_t,"__init__()"),z_t.forEach(t),rwr=r(wBe," (throws an error)."),wBe.forEach(t),twr=i(Il),Ot=n(Il,"DIV",{class:!0});var gw=s(Ot);T(a8.$$.fragment,gw),awr=i(gw),gFe=n(gw,"P",{});var Q_t=s(gFe);nwr=r(Q_t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Q_t.forEach(t),swr=i(gw),$c=n(gw,"P",{});var RJ=s($c);lwr=r(RJ,`Note:
Loading a model from its configuration file does `),hFe=n(RJ,"STRONG",{});var W_t=s(hFe);iwr=r(W_t,"not"),W_t.forEach(t),dwr=r(RJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=n(RJ,"A",{href:!0});var H_t=s(FH);cwr=r(H_t,"from_pretrained()"),H_t.forEach(t),fwr=r(RJ," to load the model weights."),RJ.forEach(t),mwr=i(gw),T(xE.$$.fragment,gw),gw.forEach(t),gwr=i(Il),Or=n(Il,"DIV",{class:!0});var ql=s(Or);T(n8.$$.fragment,ql),hwr=i(ql),pFe=n(ql,"P",{});var U_t=s(pFe);pwr=r(U_t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),U_t.forEach(t),uwr=i(ql),hn=n(ql,"P",{});var hw=s(hn);_wr=r(hw,"The model class to instantiate is selected based on the "),uFe=n(hw,"CODE",{});var J_t=s(uFe);bwr=r(J_t,"model_type"),J_t.forEach(t),Fwr=r(hw,` property of the config object (either
passed as an argument or loaded from `),_Fe=n(hw,"CODE",{});var Y_t=s(_Fe);vwr=r(Y_t,"pretrained_model_name_or_path"),Y_t.forEach(t),Twr=r(hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bFe=n(hw,"CODE",{});var K_t=s(bFe);Mwr=r(K_t,"pretrained_model_name_or_path"),K_t.forEach(t),Ewr=r(hw,":"),hw.forEach(t),Cwr=i(ql),Ne=n(ql,"UL",{});var bo=s(Ne);$E=n(bo,"LI",{});var i$e=s($E);FFe=n(i$e,"STRONG",{});var Z_t=s(FFe);wwr=r(Z_t,"albert"),Z_t.forEach(t),Awr=r(i$e," \u2014 "),vH=n(i$e,"A",{href:!0});var e2t=s(vH);ywr=r(e2t,"FlaxAlbertForTokenClassification"),e2t.forEach(t),Lwr=r(i$e," (ALBERT model)"),i$e.forEach(t),xwr=i(bo),kE=n(bo,"LI",{});var d$e=s(kE);vFe=n(d$e,"STRONG",{});var o2t=s(vFe);$wr=r(o2t,"bert"),o2t.forEach(t),kwr=r(d$e," \u2014 "),TH=n(d$e,"A",{href:!0});var r2t=s(TH);Swr=r(r2t,"FlaxBertForTokenClassification"),r2t.forEach(t),Rwr=r(d$e," (BERT model)"),d$e.forEach(t),Bwr=i(bo),SE=n(bo,"LI",{});var c$e=s(SE);TFe=n(c$e,"STRONG",{});var t2t=s(TFe);Pwr=r(t2t,"big_bird"),t2t.forEach(t),Iwr=r(c$e," \u2014 "),MH=n(c$e,"A",{href:!0});var a2t=s(MH);qwr=r(a2t,"FlaxBigBirdForTokenClassification"),a2t.forEach(t),Nwr=r(c$e," (BigBird model)"),c$e.forEach(t),jwr=i(bo),RE=n(bo,"LI",{});var f$e=s(RE);MFe=n(f$e,"STRONG",{});var n2t=s(MFe);Dwr=r(n2t,"distilbert"),n2t.forEach(t),Gwr=r(f$e," \u2014 "),EH=n(f$e,"A",{href:!0});var s2t=s(EH);Owr=r(s2t,"FlaxDistilBertForTokenClassification"),s2t.forEach(t),Vwr=r(f$e," (DistilBERT model)"),f$e.forEach(t),Xwr=i(bo),BE=n(bo,"LI",{});var m$e=s(BE);EFe=n(m$e,"STRONG",{});var l2t=s(EFe);zwr=r(l2t,"electra"),l2t.forEach(t),Qwr=r(m$e," \u2014 "),CH=n(m$e,"A",{href:!0});var i2t=s(CH);Wwr=r(i2t,"FlaxElectraForTokenClassification"),i2t.forEach(t),Hwr=r(m$e," (ELECTRA model)"),m$e.forEach(t),Uwr=i(bo),PE=n(bo,"LI",{});var g$e=s(PE);CFe=n(g$e,"STRONG",{});var d2t=s(CFe);Jwr=r(d2t,"roberta"),d2t.forEach(t),Ywr=r(g$e," \u2014 "),wH=n(g$e,"A",{href:!0});var c2t=s(wH);Kwr=r(c2t,"FlaxRobertaForTokenClassification"),c2t.forEach(t),Zwr=r(g$e," (RoBERTa model)"),g$e.forEach(t),eAr=i(bo),IE=n(bo,"LI",{});var h$e=s(IE);wFe=n(h$e,"STRONG",{});var f2t=s(wFe);oAr=r(f2t,"roformer"),f2t.forEach(t),rAr=r(h$e," \u2014 "),AH=n(h$e,"A",{href:!0});var m2t=s(AH);tAr=r(m2t,"FlaxRoFormerForTokenClassification"),m2t.forEach(t),aAr=r(h$e," (RoFormer model)"),h$e.forEach(t),nAr=i(bo),qE=n(bo,"LI",{});var p$e=s(qE);AFe=n(p$e,"STRONG",{});var g2t=s(AFe);sAr=r(g2t,"xlm-roberta"),g2t.forEach(t),lAr=r(p$e," \u2014 "),yH=n(p$e,"A",{href:!0});var h2t=s(yH);iAr=r(h2t,"FlaxXLMRobertaForTokenClassification"),h2t.forEach(t),dAr=r(p$e," (XLM-RoBERTa model)"),p$e.forEach(t),bo.forEach(t),cAr=i(ql),T(NE.$$.fragment,ql),ql.forEach(t),Il.forEach(t),TSe=i(f),kc=n(f,"H2",{class:!0});var ABe=s(kc);jE=n(ABe,"A",{id:!0,class:!0,href:!0});var p2t=s(jE);yFe=n(p2t,"SPAN",{});var u2t=s(yFe);T(s8.$$.fragment,u2t),u2t.forEach(t),p2t.forEach(t),fAr=i(ABe),LFe=n(ABe,"SPAN",{});var _2t=s(LFe);mAr=r(_2t,"FlaxAutoModelForMultipleChoice"),_2t.forEach(t),ABe.forEach(t),MSe=i(f),ur=n(f,"DIV",{class:!0});var Nl=s(ur);T(l8.$$.fragment,Nl),gAr=i(Nl),Sc=n(Nl,"P",{});var BJ=s(Sc);hAr=r(BJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),LH=n(BJ,"A",{href:!0});var b2t=s(LH);pAr=r(b2t,"from_pretrained()"),b2t.forEach(t),uAr=r(BJ," class method or the "),xH=n(BJ,"A",{href:!0});var F2t=s(xH);_Ar=r(F2t,"from_config()"),F2t.forEach(t),bAr=r(BJ,` class
method.`),BJ.forEach(t),FAr=i(Nl),i8=n(Nl,"P",{});var yBe=s(i8);vAr=r(yBe,"This class cannot be instantiated directly using "),xFe=n(yBe,"CODE",{});var v2t=s(xFe);TAr=r(v2t,"__init__()"),v2t.forEach(t),MAr=r(yBe," (throws an error)."),yBe.forEach(t),EAr=i(Nl),Vt=n(Nl,"DIV",{class:!0});var pw=s(Vt);T(d8.$$.fragment,pw),CAr=i(pw),$Fe=n(pw,"P",{});var T2t=s($Fe);wAr=r(T2t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),T2t.forEach(t),AAr=i(pw),Rc=n(pw,"P",{});var PJ=s(Rc);yAr=r(PJ,`Note:
Loading a model from its configuration file does `),kFe=n(PJ,"STRONG",{});var M2t=s(kFe);LAr=r(M2t,"not"),M2t.forEach(t),xAr=r(PJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=n(PJ,"A",{href:!0});var E2t=s($H);$Ar=r(E2t,"from_pretrained()"),E2t.forEach(t),kAr=r(PJ," to load the model weights."),PJ.forEach(t),SAr=i(pw),T(DE.$$.fragment,pw),pw.forEach(t),RAr=i(Nl),Vr=n(Nl,"DIV",{class:!0});var jl=s(Vr);T(c8.$$.fragment,jl),BAr=i(jl),SFe=n(jl,"P",{});var C2t=s(SFe);PAr=r(C2t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),C2t.forEach(t),IAr=i(jl),pn=n(jl,"P",{});var uw=s(pn);qAr=r(uw,"The model class to instantiate is selected based on the "),RFe=n(uw,"CODE",{});var w2t=s(RFe);NAr=r(w2t,"model_type"),w2t.forEach(t),jAr=r(uw,` property of the config object (either
passed as an argument or loaded from `),BFe=n(uw,"CODE",{});var A2t=s(BFe);DAr=r(A2t,"pretrained_model_name_or_path"),A2t.forEach(t),GAr=r(uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PFe=n(uw,"CODE",{});var y2t=s(PFe);OAr=r(y2t,"pretrained_model_name_or_path"),y2t.forEach(t),VAr=r(uw,":"),uw.forEach(t),XAr=i(jl),je=n(jl,"UL",{});var Fo=s(je);GE=n(Fo,"LI",{});var u$e=s(GE);IFe=n(u$e,"STRONG",{});var L2t=s(IFe);zAr=r(L2t,"albert"),L2t.forEach(t),QAr=r(u$e," \u2014 "),kH=n(u$e,"A",{href:!0});var x2t=s(kH);WAr=r(x2t,"FlaxAlbertForMultipleChoice"),x2t.forEach(t),HAr=r(u$e," (ALBERT model)"),u$e.forEach(t),UAr=i(Fo),OE=n(Fo,"LI",{});var _$e=s(OE);qFe=n(_$e,"STRONG",{});var $2t=s(qFe);JAr=r($2t,"bert"),$2t.forEach(t),YAr=r(_$e," \u2014 "),SH=n(_$e,"A",{href:!0});var k2t=s(SH);KAr=r(k2t,"FlaxBertForMultipleChoice"),k2t.forEach(t),ZAr=r(_$e," (BERT model)"),_$e.forEach(t),e0r=i(Fo),VE=n(Fo,"LI",{});var b$e=s(VE);NFe=n(b$e,"STRONG",{});var S2t=s(NFe);o0r=r(S2t,"big_bird"),S2t.forEach(t),r0r=r(b$e," \u2014 "),RH=n(b$e,"A",{href:!0});var R2t=s(RH);t0r=r(R2t,"FlaxBigBirdForMultipleChoice"),R2t.forEach(t),a0r=r(b$e," (BigBird model)"),b$e.forEach(t),n0r=i(Fo),XE=n(Fo,"LI",{});var F$e=s(XE);jFe=n(F$e,"STRONG",{});var B2t=s(jFe);s0r=r(B2t,"distilbert"),B2t.forEach(t),l0r=r(F$e," \u2014 "),BH=n(F$e,"A",{href:!0});var P2t=s(BH);i0r=r(P2t,"FlaxDistilBertForMultipleChoice"),P2t.forEach(t),d0r=r(F$e," (DistilBERT model)"),F$e.forEach(t),c0r=i(Fo),zE=n(Fo,"LI",{});var v$e=s(zE);DFe=n(v$e,"STRONG",{});var I2t=s(DFe);f0r=r(I2t,"electra"),I2t.forEach(t),m0r=r(v$e," \u2014 "),PH=n(v$e,"A",{href:!0});var q2t=s(PH);g0r=r(q2t,"FlaxElectraForMultipleChoice"),q2t.forEach(t),h0r=r(v$e," (ELECTRA model)"),v$e.forEach(t),p0r=i(Fo),QE=n(Fo,"LI",{});var T$e=s(QE);GFe=n(T$e,"STRONG",{});var N2t=s(GFe);u0r=r(N2t,"roberta"),N2t.forEach(t),_0r=r(T$e," \u2014 "),IH=n(T$e,"A",{href:!0});var j2t=s(IH);b0r=r(j2t,"FlaxRobertaForMultipleChoice"),j2t.forEach(t),F0r=r(T$e," (RoBERTa model)"),T$e.forEach(t),v0r=i(Fo),WE=n(Fo,"LI",{});var M$e=s(WE);OFe=n(M$e,"STRONG",{});var D2t=s(OFe);T0r=r(D2t,"roformer"),D2t.forEach(t),M0r=r(M$e," \u2014 "),qH=n(M$e,"A",{href:!0});var G2t=s(qH);E0r=r(G2t,"FlaxRoFormerForMultipleChoice"),G2t.forEach(t),C0r=r(M$e," (RoFormer model)"),M$e.forEach(t),w0r=i(Fo),HE=n(Fo,"LI",{});var E$e=s(HE);VFe=n(E$e,"STRONG",{});var O2t=s(VFe);A0r=r(O2t,"xlm-roberta"),O2t.forEach(t),y0r=r(E$e," \u2014 "),NH=n(E$e,"A",{href:!0});var V2t=s(NH);L0r=r(V2t,"FlaxXLMRobertaForMultipleChoice"),V2t.forEach(t),x0r=r(E$e," (XLM-RoBERTa model)"),E$e.forEach(t),Fo.forEach(t),$0r=i(jl),T(UE.$$.fragment,jl),jl.forEach(t),Nl.forEach(t),ESe=i(f),Bc=n(f,"H2",{class:!0});var LBe=s(Bc);JE=n(LBe,"A",{id:!0,class:!0,href:!0});var X2t=s(JE);XFe=n(X2t,"SPAN",{});var z2t=s(XFe);T(f8.$$.fragment,z2t),z2t.forEach(t),X2t.forEach(t),k0r=i(LBe),zFe=n(LBe,"SPAN",{});var Q2t=s(zFe);S0r=r(Q2t,"FlaxAutoModelForNextSentencePrediction"),Q2t.forEach(t),LBe.forEach(t),CSe=i(f),_r=n(f,"DIV",{class:!0});var Dl=s(_r);T(m8.$$.fragment,Dl),R0r=i(Dl),Pc=n(Dl,"P",{});var IJ=s(Pc);B0r=r(IJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),jH=n(IJ,"A",{href:!0});var W2t=s(jH);P0r=r(W2t,"from_pretrained()"),W2t.forEach(t),I0r=r(IJ," class method or the "),DH=n(IJ,"A",{href:!0});var H2t=s(DH);q0r=r(H2t,"from_config()"),H2t.forEach(t),N0r=r(IJ,` class
method.`),IJ.forEach(t),j0r=i(Dl),g8=n(Dl,"P",{});var xBe=s(g8);D0r=r(xBe,"This class cannot be instantiated directly using "),QFe=n(xBe,"CODE",{});var U2t=s(QFe);G0r=r(U2t,"__init__()"),U2t.forEach(t),O0r=r(xBe," (throws an error)."),xBe.forEach(t),V0r=i(Dl),Xt=n(Dl,"DIV",{class:!0});var _w=s(Xt);T(h8.$$.fragment,_w),X0r=i(_w),WFe=n(_w,"P",{});var J2t=s(WFe);z0r=r(J2t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),J2t.forEach(t),Q0r=i(_w),Ic=n(_w,"P",{});var qJ=s(Ic);W0r=r(qJ,`Note:
Loading a model from its configuration file does `),HFe=n(qJ,"STRONG",{});var Y2t=s(HFe);H0r=r(Y2t,"not"),Y2t.forEach(t),U0r=r(qJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),GH=n(qJ,"A",{href:!0});var K2t=s(GH);J0r=r(K2t,"from_pretrained()"),K2t.forEach(t),Y0r=r(qJ," to load the model weights."),qJ.forEach(t),K0r=i(_w),T(YE.$$.fragment,_w),_w.forEach(t),Z0r=i(Dl),Xr=n(Dl,"DIV",{class:!0});var Gl=s(Xr);T(p8.$$.fragment,Gl),eyr=i(Gl),UFe=n(Gl,"P",{});var Z2t=s(UFe);oyr=r(Z2t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Z2t.forEach(t),ryr=i(Gl),un=n(Gl,"P",{});var bw=s(un);tyr=r(bw,"The model class to instantiate is selected based on the "),JFe=n(bw,"CODE",{});var e1t=s(JFe);ayr=r(e1t,"model_type"),e1t.forEach(t),nyr=r(bw,` property of the config object (either
passed as an argument or loaded from `),YFe=n(bw,"CODE",{});var o1t=s(YFe);syr=r(o1t,"pretrained_model_name_or_path"),o1t.forEach(t),lyr=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KFe=n(bw,"CODE",{});var r1t=s(KFe);iyr=r(r1t,"pretrained_model_name_or_path"),r1t.forEach(t),dyr=r(bw,":"),bw.forEach(t),cyr=i(Gl),ZFe=n(Gl,"UL",{});var t1t=s(ZFe);KE=n(t1t,"LI",{});var C$e=s(KE);eve=n(C$e,"STRONG",{});var a1t=s(eve);fyr=r(a1t,"bert"),a1t.forEach(t),myr=r(C$e," \u2014 "),OH=n(C$e,"A",{href:!0});var n1t=s(OH);gyr=r(n1t,"FlaxBertForNextSentencePrediction"),n1t.forEach(t),hyr=r(C$e," (BERT model)"),C$e.forEach(t),t1t.forEach(t),pyr=i(Gl),T(ZE.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),wSe=i(f),qc=n(f,"H2",{class:!0});var $Be=s(qc);eC=n($Be,"A",{id:!0,class:!0,href:!0});var s1t=s(eC);ove=n(s1t,"SPAN",{});var l1t=s(ove);T(u8.$$.fragment,l1t),l1t.forEach(t),s1t.forEach(t),uyr=i($Be),rve=n($Be,"SPAN",{});var i1t=s(rve);_yr=r(i1t,"FlaxAutoModelForImageClassification"),i1t.forEach(t),$Be.forEach(t),ASe=i(f),br=n(f,"DIV",{class:!0});var Ol=s(br);T(_8.$$.fragment,Ol),byr=i(Ol),Nc=n(Ol,"P",{});var NJ=s(Nc);Fyr=r(NJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),VH=n(NJ,"A",{href:!0});var d1t=s(VH);vyr=r(d1t,"from_pretrained()"),d1t.forEach(t),Tyr=r(NJ," class method or the "),XH=n(NJ,"A",{href:!0});var c1t=s(XH);Myr=r(c1t,"from_config()"),c1t.forEach(t),Eyr=r(NJ,` class
method.`),NJ.forEach(t),Cyr=i(Ol),b8=n(Ol,"P",{});var kBe=s(b8);wyr=r(kBe,"This class cannot be instantiated directly using "),tve=n(kBe,"CODE",{});var f1t=s(tve);Ayr=r(f1t,"__init__()"),f1t.forEach(t),yyr=r(kBe," (throws an error)."),kBe.forEach(t),Lyr=i(Ol),zt=n(Ol,"DIV",{class:!0});var Fw=s(zt);T(F8.$$.fragment,Fw),xyr=i(Fw),ave=n(Fw,"P",{});var m1t=s(ave);$yr=r(m1t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),m1t.forEach(t),kyr=i(Fw),jc=n(Fw,"P",{});var jJ=s(jc);Syr=r(jJ,`Note:
Loading a model from its configuration file does `),nve=n(jJ,"STRONG",{});var g1t=s(nve);Ryr=r(g1t,"not"),g1t.forEach(t),Byr=r(jJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zH=n(jJ,"A",{href:!0});var h1t=s(zH);Pyr=r(h1t,"from_pretrained()"),h1t.forEach(t),Iyr=r(jJ," to load the model weights."),jJ.forEach(t),qyr=i(Fw),T(oC.$$.fragment,Fw),Fw.forEach(t),Nyr=i(Ol),zr=n(Ol,"DIV",{class:!0});var Vl=s(zr);T(v8.$$.fragment,Vl),jyr=i(Vl),sve=n(Vl,"P",{});var p1t=s(sve);Dyr=r(p1t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),p1t.forEach(t),Gyr=i(Vl),_n=n(Vl,"P",{});var vw=s(_n);Oyr=r(vw,"The model class to instantiate is selected based on the "),lve=n(vw,"CODE",{});var u1t=s(lve);Vyr=r(u1t,"model_type"),u1t.forEach(t),Xyr=r(vw,` property of the config object (either
passed as an argument or loaded from `),ive=n(vw,"CODE",{});var _1t=s(ive);zyr=r(_1t,"pretrained_model_name_or_path"),_1t.forEach(t),Qyr=r(vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dve=n(vw,"CODE",{});var b1t=s(dve);Wyr=r(b1t,"pretrained_model_name_or_path"),b1t.forEach(t),Hyr=r(vw,":"),vw.forEach(t),Uyr=i(Vl),T8=n(Vl,"UL",{});var SBe=s(T8);rC=n(SBe,"LI",{});var w$e=s(rC);cve=n(w$e,"STRONG",{});var F1t=s(cve);Jyr=r(F1t,"beit"),F1t.forEach(t),Yyr=r(w$e," \u2014 "),QH=n(w$e,"A",{href:!0});var v1t=s(QH);Kyr=r(v1t,"FlaxBeitForImageClassification"),v1t.forEach(t),Zyr=r(w$e," (BEiT model)"),w$e.forEach(t),eLr=i(SBe),tC=n(SBe,"LI",{});var A$e=s(tC);fve=n(A$e,"STRONG",{});var T1t=s(fve);oLr=r(T1t,"vit"),T1t.forEach(t),rLr=r(A$e," \u2014 "),WH=n(A$e,"A",{href:!0});var M1t=s(WH);tLr=r(M1t,"FlaxViTForImageClassification"),M1t.forEach(t),aLr=r(A$e," (ViT model)"),A$e.forEach(t),SBe.forEach(t),nLr=i(Vl),T(aC.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),ySe=i(f),Dc=n(f,"H2",{class:!0});var RBe=s(Dc);nC=n(RBe,"A",{id:!0,class:!0,href:!0});var E1t=s(nC);mve=n(E1t,"SPAN",{});var C1t=s(mve);T(M8.$$.fragment,C1t),C1t.forEach(t),E1t.forEach(t),sLr=i(RBe),gve=n(RBe,"SPAN",{});var w1t=s(gve);lLr=r(w1t,"FlaxAutoModelForVision2Seq"),w1t.forEach(t),RBe.forEach(t),LSe=i(f),Fr=n(f,"DIV",{class:!0});var Xl=s(Fr);T(E8.$$.fragment,Xl),iLr=i(Xl),Gc=n(Xl,"P",{});var DJ=s(Gc);dLr=r(DJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),HH=n(DJ,"A",{href:!0});var A1t=s(HH);cLr=r(A1t,"from_pretrained()"),A1t.forEach(t),fLr=r(DJ," class method or the "),UH=n(DJ,"A",{href:!0});var y1t=s(UH);mLr=r(y1t,"from_config()"),y1t.forEach(t),gLr=r(DJ,` class
method.`),DJ.forEach(t),hLr=i(Xl),C8=n(Xl,"P",{});var BBe=s(C8);pLr=r(BBe,"This class cannot be instantiated directly using "),hve=n(BBe,"CODE",{});var L1t=s(hve);uLr=r(L1t,"__init__()"),L1t.forEach(t),_Lr=r(BBe," (throws an error)."),BBe.forEach(t),bLr=i(Xl),Qt=n(Xl,"DIV",{class:!0});var Tw=s(Qt);T(w8.$$.fragment,Tw),FLr=i(Tw),pve=n(Tw,"P",{});var x1t=s(pve);vLr=r(x1t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),x1t.forEach(t),TLr=i(Tw),Oc=n(Tw,"P",{});var GJ=s(Oc);MLr=r(GJ,`Note:
Loading a model from its configuration file does `),uve=n(GJ,"STRONG",{});var $1t=s(uve);ELr=r($1t,"not"),$1t.forEach(t),CLr=r(GJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JH=n(GJ,"A",{href:!0});var k1t=s(JH);wLr=r(k1t,"from_pretrained()"),k1t.forEach(t),ALr=r(GJ," to load the model weights."),GJ.forEach(t),yLr=i(Tw),T(sC.$$.fragment,Tw),Tw.forEach(t),LLr=i(Xl),Qr=n(Xl,"DIV",{class:!0});var zl=s(Qr);T(A8.$$.fragment,zl),xLr=i(zl),_ve=n(zl,"P",{});var S1t=s(_ve);$Lr=r(S1t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),S1t.forEach(t),kLr=i(zl),bn=n(zl,"P",{});var Mw=s(bn);SLr=r(Mw,"The model class to instantiate is selected based on the "),bve=n(Mw,"CODE",{});var R1t=s(bve);RLr=r(R1t,"model_type"),R1t.forEach(t),BLr=r(Mw,` property of the config object (either
passed as an argument or loaded from `),Fve=n(Mw,"CODE",{});var B1t=s(Fve);PLr=r(B1t,"pretrained_model_name_or_path"),B1t.forEach(t),ILr=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vve=n(Mw,"CODE",{});var P1t=s(vve);qLr=r(P1t,"pretrained_model_name_or_path"),P1t.forEach(t),NLr=r(Mw,":"),Mw.forEach(t),jLr=i(zl),Tve=n(zl,"UL",{});var I1t=s(Tve);lC=n(I1t,"LI",{});var y$e=s(lC);Mve=n(y$e,"STRONG",{});var q1t=s(Mve);DLr=r(q1t,"vision-encoder-decoder"),q1t.forEach(t),GLr=r(y$e," \u2014 "),YH=n(y$e,"A",{href:!0});var N1t=s(YH);OLr=r(N1t,"FlaxVisionEncoderDecoderModel"),N1t.forEach(t),VLr=r(y$e," (Vision Encoder decoder model)"),y$e.forEach(t),I1t.forEach(t),XLr=i(zl),T(iC.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(D5t)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(vn,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.AutoConfig"),c(Mn,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.AutoModel"),c(En,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.AutoTokenizer"),c(Kl,"href","/docs/transformers/pr_16925/en/model_doc/bert#transformers.BertModel"),c(Jc,"id","extending-the-auto-classes"),c(Jc,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jc,"href","#extending-the-auto-classes"),c(Zl,"class","relative group"),c(Kc,"id","transformers.AutoConfig"),c(Kc,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kc,"href","#transformers.AutoConfig"),c(ei,"class","relative group"),c(qx,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(Nx,"href","/docs/transformers/pr_16925/en/model_doc/albert#transformers.AlbertConfig"),c(jx,"href","/docs/transformers/pr_16925/en/model_doc/bart#transformers.BartConfig"),c(Dx,"href","/docs/transformers/pr_16925/en/model_doc/beit#transformers.BeitConfig"),c(Gx,"href","/docs/transformers/pr_16925/en/model_doc/bert#transformers.BertConfig"),c(Ox,"href","/docs/transformers/pr_16925/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(Vx,"href","/docs/transformers/pr_16925/en/model_doc/big_bird#transformers.BigBirdConfig"),c(Xx,"href","/docs/transformers/pr_16925/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(zx,"href","/docs/transformers/pr_16925/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(Qx,"href","/docs/transformers/pr_16925/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(Wx,"href","/docs/transformers/pr_16925/en/model_doc/camembert#transformers.CamembertConfig"),c(Hx,"href","/docs/transformers/pr_16925/en/model_doc/canine#transformers.CanineConfig"),c(Ux,"href","/docs/transformers/pr_16925/en/model_doc/clip#transformers.CLIPConfig"),c(Jx,"href","/docs/transformers/pr_16925/en/model_doc/convbert#transformers.ConvBertConfig"),c(Yx,"href","/docs/transformers/pr_16925/en/model_doc/convnext#transformers.ConvNextConfig"),c(Kx,"href","/docs/transformers/pr_16925/en/model_doc/ctrl#transformers.CTRLConfig"),c(Zx,"href","/docs/transformers/pr_16925/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(e7,"href","/docs/transformers/pr_16925/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(o7,"href","/docs/transformers/pr_16925/en/model_doc/deberta#transformers.DebertaConfig"),c(r7,"href","/docs/transformers/pr_16925/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(t7,"href","/docs/transformers/pr_16925/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(a7,"href","/docs/transformers/pr_16925/en/model_doc/deit#transformers.DeiTConfig"),c(n7,"href","/docs/transformers/pr_16925/en/model_doc/detr#transformers.DetrConfig"),c(s7,"href","/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.DistilBertConfig"),c(l7,"href","/docs/transformers/pr_16925/en/model_doc/dpr#transformers.DPRConfig"),c(i7,"href","/docs/transformers/pr_16925/en/model_doc/electra#transformers.ElectraConfig"),c(d7,"href","/docs/transformers/pr_16925/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(c7,"href","/docs/transformers/pr_16925/en/model_doc/flaubert#transformers.FlaubertConfig"),c(f7,"href","/docs/transformers/pr_16925/en/model_doc/fnet#transformers.FNetConfig"),c(m7,"href","/docs/transformers/pr_16925/en/model_doc/fsmt#transformers.FSMTConfig"),c(g7,"href","/docs/transformers/pr_16925/en/model_doc/funnel#transformers.FunnelConfig"),c(h7,"href","/docs/transformers/pr_16925/en/model_doc/glpn#transformers.GLPNConfig"),c(p7,"href","/docs/transformers/pr_16925/en/model_doc/gpt2#transformers.GPT2Config"),c(u7,"href","/docs/transformers/pr_16925/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(_7,"href","/docs/transformers/pr_16925/en/model_doc/gptj#transformers.GPTJConfig"),c(b7,"href","/docs/transformers/pr_16925/en/model_doc/hubert#transformers.HubertConfig"),c(F7,"href","/docs/transformers/pr_16925/en/model_doc/ibert#transformers.IBertConfig"),c(v7,"href","/docs/transformers/pr_16925/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(T7,"href","/docs/transformers/pr_16925/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(M7,"href","/docs/transformers/pr_16925/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(E7,"href","/docs/transformers/pr_16925/en/model_doc/led#transformers.LEDConfig"),c(C7,"href","/docs/transformers/pr_16925/en/model_doc/longformer#transformers.LongformerConfig"),c(w7,"href","/docs/transformers/pr_16925/en/model_doc/luke#transformers.LukeConfig"),c(A7,"href","/docs/transformers/pr_16925/en/model_doc/lxmert#transformers.LxmertConfig"),c(y7,"href","/docs/transformers/pr_16925/en/model_doc/m2m_100#transformers.M2M100Config"),c(L7,"href","/docs/transformers/pr_16925/en/model_doc/marian#transformers.MarianConfig"),c(x7,"href","/docs/transformers/pr_16925/en/model_doc/maskformer#transformers.MaskFormerConfig"),c($7,"href","/docs/transformers/pr_16925/en/model_doc/mbart#transformers.MBartConfig"),c(k7,"href","/docs/transformers/pr_16925/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(S7,"href","/docs/transformers/pr_16925/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(R7,"href","/docs/transformers/pr_16925/en/model_doc/mpnet#transformers.MPNetConfig"),c(B7,"href","/docs/transformers/pr_16925/en/model_doc/mt5#transformers.MT5Config"),c(P7,"href","/docs/transformers/pr_16925/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(I7,"href","/docs/transformers/pr_16925/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(q7,"href","/docs/transformers/pr_16925/en/model_doc/pegasus#transformers.PegasusConfig"),c(N7,"href","/docs/transformers/pr_16925/en/model_doc/perceiver#transformers.PerceiverConfig"),c(j7,"href","/docs/transformers/pr_16925/en/model_doc/plbart#transformers.PLBartConfig"),c(D7,"href","/docs/transformers/pr_16925/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(G7,"href","/docs/transformers/pr_16925/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(O7,"href","/docs/transformers/pr_16925/en/model_doc/rag#transformers.RagConfig"),c(V7,"href","/docs/transformers/pr_16925/en/model_doc/realm#transformers.RealmConfig"),c(X7,"href","/docs/transformers/pr_16925/en/model_doc/reformer#transformers.ReformerConfig"),c(z7,"href","/docs/transformers/pr_16925/en/model_doc/rembert#transformers.RemBertConfig"),c(Q7,"href","/docs/transformers/pr_16925/en/model_doc/resnet#transformers.ResNetConfig"),c(W7,"href","/docs/transformers/pr_16925/en/model_doc/retribert#transformers.RetriBertConfig"),c(H7,"href","/docs/transformers/pr_16925/en/model_doc/roberta#transformers.RobertaConfig"),c(U7,"href","/docs/transformers/pr_16925/en/model_doc/roformer#transformers.RoFormerConfig"),c(J7,"href","/docs/transformers/pr_16925/en/model_doc/segformer#transformers.SegformerConfig"),c(Y7,"href","/docs/transformers/pr_16925/en/model_doc/sew#transformers.SEWConfig"),c(K7,"href","/docs/transformers/pr_16925/en/model_doc/sew-d#transformers.SEWDConfig"),c(Z7,"href","/docs/transformers/pr_16925/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(e$,"href","/docs/transformers/pr_16925/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(o$,"href","/docs/transformers/pr_16925/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(r$,"href","/docs/transformers/pr_16925/en/model_doc/splinter#transformers.SplinterConfig"),c(t$,"href","/docs/transformers/pr_16925/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(a$,"href","/docs/transformers/pr_16925/en/model_doc/swin#transformers.SwinConfig"),c(n$,"href","/docs/transformers/pr_16925/en/model_doc/t5#transformers.T5Config"),c(s$,"href","/docs/transformers/pr_16925/en/model_doc/tapas#transformers.TapasConfig"),c(l$,"href","/docs/transformers/pr_16925/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(i$,"href","/docs/transformers/pr_16925/en/model_doc/trocr#transformers.TrOCRConfig"),c(d$,"href","/docs/transformers/pr_16925/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(c$,"href","/docs/transformers/pr_16925/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(f$,"href","/docs/transformers/pr_16925/en/model_doc/van#transformers.VanConfig"),c(m$,"href","/docs/transformers/pr_16925/en/model_doc/vilt#transformers.ViltConfig"),c(g$,"href","/docs/transformers/pr_16925/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(h$,"href","/docs/transformers/pr_16925/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(p$,"href","/docs/transformers/pr_16925/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(u$,"href","/docs/transformers/pr_16925/en/model_doc/vit#transformers.ViTConfig"),c(_$,"href","/docs/transformers/pr_16925/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(b$,"href","/docs/transformers/pr_16925/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(F$,"href","/docs/transformers/pr_16925/en/model_doc/wavlm#transformers.WavLMConfig"),c(v$,"href","/docs/transformers/pr_16925/en/model_doc/xglm#transformers.XGLMConfig"),c(T$,"href","/docs/transformers/pr_16925/en/model_doc/xlm#transformers.XLMConfig"),c(M$,"href","/docs/transformers/pr_16925/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(E$,"href","/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(C$,"href","/docs/transformers/pr_16925/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(w$,"href","/docs/transformers/pr_16925/en/model_doc/xlnet#transformers.XLNetConfig"),c(A$,"href","/docs/transformers/pr_16925/en/model_doc/yoso#transformers.YosoConfig"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zm,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qm,"id","transformers.AutoTokenizer"),c(Qm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qm,"href","#transformers.AutoTokenizer"),c(ri,"class","relative group"),c(y$,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(L$,"href","/docs/transformers/pr_16925/en/model_doc/albert#transformers.AlbertTokenizer"),c(x$,"href","/docs/transformers/pr_16925/en/model_doc/albert#transformers.AlbertTokenizerFast"),c($$,"href","/docs/transformers/pr_16925/en/model_doc/bart#transformers.BartTokenizer"),c(k$,"href","/docs/transformers/pr_16925/en/model_doc/bart#transformers.BartTokenizerFast"),c(S$,"href","/docs/transformers/pr_16925/en/model_doc/barthez#transformers.BarthezTokenizer"),c(R$,"href","/docs/transformers/pr_16925/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(B$,"href","/docs/transformers/pr_16925/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(P$,"href","/docs/transformers/pr_16925/en/model_doc/bert#transformers.BertTokenizer"),c(I$,"href","/docs/transformers/pr_16925/en/model_doc/bert#transformers.BertTokenizerFast"),c(q$,"href","/docs/transformers/pr_16925/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(N$,"href","/docs/transformers/pr_16925/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(j$,"href","/docs/transformers/pr_16925/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(D$,"href","/docs/transformers/pr_16925/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(G$,"href","/docs/transformers/pr_16925/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(O$,"href","/docs/transformers/pr_16925/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(V$,"href","/docs/transformers/pr_16925/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(X$,"href","/docs/transformers/pr_16925/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(z$,"href","/docs/transformers/pr_16925/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(Q$,"href","/docs/transformers/pr_16925/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(W$,"href","/docs/transformers/pr_16925/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(H$,"href","/docs/transformers/pr_16925/en/model_doc/camembert#transformers.CamembertTokenizer"),c(U$,"href","/docs/transformers/pr_16925/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(J$,"href","/docs/transformers/pr_16925/en/model_doc/canine#transformers.CanineTokenizer"),c(Y$,"href","/docs/transformers/pr_16925/en/model_doc/clip#transformers.CLIPTokenizer"),c(K$,"href","/docs/transformers/pr_16925/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(Z$,"href","/docs/transformers/pr_16925/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(ek,"href","/docs/transformers/pr_16925/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(ok,"href","/docs/transformers/pr_16925/en/model_doc/cpm#transformers.CpmTokenizer"),c(rk,"href","/docs/transformers/pr_16925/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(tk,"href","/docs/transformers/pr_16925/en/model_doc/deberta#transformers.DebertaTokenizer"),c(ak,"href","/docs/transformers/pr_16925/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(nk,"href","/docs/transformers/pr_16925/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(sk,"href","/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(lk,"href","/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(ik,"href","/docs/transformers/pr_16925/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(dk,"href","/docs/transformers/pr_16925/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(ck,"href","/docs/transformers/pr_16925/en/model_doc/electra#transformers.ElectraTokenizer"),c(fk,"href","/docs/transformers/pr_16925/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(mk,"href","/docs/transformers/pr_16925/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(gk,"href","/docs/transformers/pr_16925/en/model_doc/fnet#transformers.FNetTokenizer"),c(hk,"href","/docs/transformers/pr_16925/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(pk,"href","/docs/transformers/pr_16925/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(uk,"href","/docs/transformers/pr_16925/en/model_doc/funnel#transformers.FunnelTokenizer"),c(_k,"href","/docs/transformers/pr_16925/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(bk,"href","/docs/transformers/pr_16925/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(Fk,"href","/docs/transformers/pr_16925/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(vk,"href","/docs/transformers/pr_16925/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(Tk,"href","/docs/transformers/pr_16925/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(Mk,"href","/docs/transformers/pr_16925/en/model_doc/herbert#transformers.HerbertTokenizer"),c(Ek,"href","/docs/transformers/pr_16925/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(Ck,"href","/docs/transformers/pr_16925/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(wk,"href","/docs/transformers/pr_16925/en/model_doc/roberta#transformers.RobertaTokenizer"),c(Ak,"href","/docs/transformers/pr_16925/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(yk,"href","/docs/transformers/pr_16925/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(Lk,"href","/docs/transformers/pr_16925/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(xk,"href","/docs/transformers/pr_16925/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c($k,"href","/docs/transformers/pr_16925/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(kk,"href","/docs/transformers/pr_16925/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(Sk,"href","/docs/transformers/pr_16925/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(Rk,"href","/docs/transformers/pr_16925/en/model_doc/led#transformers.LEDTokenizer"),c(Bk,"href","/docs/transformers/pr_16925/en/model_doc/led#transformers.LEDTokenizerFast"),c(Pk,"href","/docs/transformers/pr_16925/en/model_doc/longformer#transformers.LongformerTokenizer"),c(Ik,"href","/docs/transformers/pr_16925/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(qk,"href","/docs/transformers/pr_16925/en/model_doc/luke#transformers.LukeTokenizer"),c(Nk,"href","/docs/transformers/pr_16925/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(jk,"href","/docs/transformers/pr_16925/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(Dk,"href","/docs/transformers/pr_16925/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(Gk,"href","/docs/transformers/pr_16925/en/model_doc/marian#transformers.MarianTokenizer"),c(Ok,"href","/docs/transformers/pr_16925/en/model_doc/mbart#transformers.MBartTokenizer"),c(Vk,"href","/docs/transformers/pr_16925/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(Xk,"href","/docs/transformers/pr_16925/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(zk,"href","/docs/transformers/pr_16925/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(Qk,"href","/docs/transformers/pr_16925/en/model_doc/mluke#transformers.MLukeTokenizer"),c(Wk,"href","/docs/transformers/pr_16925/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(Hk,"href","/docs/transformers/pr_16925/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(Uk,"href","/docs/transformers/pr_16925/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(Jk,"href","/docs/transformers/pr_16925/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(Yk,"href","/docs/transformers/pr_16925/en/model_doc/t5#transformers.T5Tokenizer"),c(Kk,"href","/docs/transformers/pr_16925/en/model_doc/t5#transformers.T5TokenizerFast"),c(Zk,"href","/docs/transformers/pr_16925/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(eS,"href","/docs/transformers/pr_16925/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(oS,"href","/docs/transformers/pr_16925/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(rS,"href","/docs/transformers/pr_16925/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(tS,"href","/docs/transformers/pr_16925/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(aS,"href","/docs/transformers/pr_16925/en/model_doc/phobert#transformers.PhobertTokenizer"),c(nS,"href","/docs/transformers/pr_16925/en/model_doc/plbart#transformers.PLBartTokenizer"),c(sS,"href","/docs/transformers/pr_16925/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(lS,"href","/docs/transformers/pr_16925/en/model_doc/bert#transformers.BertTokenizer"),c(iS,"href","/docs/transformers/pr_16925/en/model_doc/bert#transformers.BertTokenizerFast"),c(dS,"href","/docs/transformers/pr_16925/en/model_doc/rag#transformers.RagTokenizer"),c(cS,"href","/docs/transformers/pr_16925/en/model_doc/realm#transformers.RealmTokenizer"),c(fS,"href","/docs/transformers/pr_16925/en/model_doc/realm#transformers.RealmTokenizerFast"),c(mS,"href","/docs/transformers/pr_16925/en/model_doc/reformer#transformers.ReformerTokenizer"),c(gS,"href","/docs/transformers/pr_16925/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(hS,"href","/docs/transformers/pr_16925/en/model_doc/rembert#transformers.RemBertTokenizer"),c(pS,"href","/docs/transformers/pr_16925/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(uS,"href","/docs/transformers/pr_16925/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(_S,"href","/docs/transformers/pr_16925/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(bS,"href","/docs/transformers/pr_16925/en/model_doc/roberta#transformers.RobertaTokenizer"),c(FS,"href","/docs/transformers/pr_16925/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(vS,"href","/docs/transformers/pr_16925/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(TS,"href","/docs/transformers/pr_16925/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(MS,"href","/docs/transformers/pr_16925/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(ES,"href","/docs/transformers/pr_16925/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(CS,"href","/docs/transformers/pr_16925/en/model_doc/splinter#transformers.SplinterTokenizer"),c(wS,"href","/docs/transformers/pr_16925/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(AS,"href","/docs/transformers/pr_16925/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(yS,"href","/docs/transformers/pr_16925/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(LS,"href","/docs/transformers/pr_16925/en/model_doc/t5#transformers.T5Tokenizer"),c(xS,"href","/docs/transformers/pr_16925/en/model_doc/t5#transformers.T5TokenizerFast"),c($S,"href","/docs/transformers/pr_16925/en/model_doc/tapas#transformers.TapasTokenizer"),c(kS,"href","/docs/transformers/pr_16925/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(SS,"href","/docs/transformers/pr_16925/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(RS,"href","/docs/transformers/pr_16925/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(BS,"href","/docs/transformers/pr_16925/en/model_doc/xglm#transformers.XGLMTokenizer"),c(PS,"href","/docs/transformers/pr_16925/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(IS,"href","/docs/transformers/pr_16925/en/model_doc/xlm#transformers.XLMTokenizer"),c(qS,"href","/docs/transformers/pr_16925/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(NS,"href","/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(jS,"href","/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(DS,"href","/docs/transformers/pr_16925/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(GS,"href","/docs/transformers/pr_16925/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cg,"id","transformers.AutoFeatureExtractor"),c(Cg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Cg,"href","#transformers.AutoFeatureExtractor"),c(ti,"class","relative group"),c(OS,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(VS,"href","/docs/transformers/pr_16925/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(XS,"href","/docs/transformers/pr_16925/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(zS,"href","/docs/transformers/pr_16925/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(QS,"href","/docs/transformers/pr_16925/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(WS,"href","/docs/transformers/pr_16925/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(HS,"href","/docs/transformers/pr_16925/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(US,"href","/docs/transformers/pr_16925/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(JS,"href","/docs/transformers/pr_16925/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(YS,"href","/docs/transformers/pr_16925/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(KS,"href","/docs/transformers/pr_16925/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(ZS,"href","/docs/transformers/pr_16925/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(eR,"href","/docs/transformers/pr_16925/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(oR,"href","/docs/transformers/pr_16925/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(rR,"href","/docs/transformers/pr_16925/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(tR,"href","/docs/transformers/pr_16925/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(aR,"href","/docs/transformers/pr_16925/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(nR,"href","/docs/transformers/pr_16925/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(sR,"href","/docs/transformers/pr_16925/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qg,"id","transformers.AutoProcessor"),c(Qg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qg,"href","#transformers.AutoProcessor"),c(ai,"class","relative group"),c(lR,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(iR,"href","/docs/transformers/pr_16925/en/model_doc/clip#transformers.CLIPProcessor"),c(dR,"href","/docs/transformers/pr_16925/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(cR,"href","/docs/transformers/pr_16925/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(fR,"href","/docs/transformers/pr_16925/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(mR,"href","/docs/transformers/pr_16925/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(gR,"href","/docs/transformers/pr_16925/en/model_doc/trocr#transformers.TrOCRProcessor"),c(hR,"href","/docs/transformers/pr_16925/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(pR,"href","/docs/transformers/pr_16925/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(th,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ah,"id","transformers.AutoModel"),c(ah,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ah,"href","#transformers.AutoModel"),c(si,"class","relative group"),c(uR,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_R,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bR,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FR,"href","/docs/transformers/pr_16925/en/model_doc/albert#transformers.AlbertModel"),c(vR,"href","/docs/transformers/pr_16925/en/model_doc/bart#transformers.BartModel"),c(TR,"href","/docs/transformers/pr_16925/en/model_doc/beit#transformers.BeitModel"),c(MR,"href","/docs/transformers/pr_16925/en/model_doc/bert#transformers.BertModel"),c(ER,"href","/docs/transformers/pr_16925/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(CR,"href","/docs/transformers/pr_16925/en/model_doc/big_bird#transformers.BigBirdModel"),c(wR,"href","/docs/transformers/pr_16925/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(AR,"href","/docs/transformers/pr_16925/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(yR,"href","/docs/transformers/pr_16925/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(LR,"href","/docs/transformers/pr_16925/en/model_doc/camembert#transformers.CamembertModel"),c(xR,"href","/docs/transformers/pr_16925/en/model_doc/canine#transformers.CanineModel"),c($R,"href","/docs/transformers/pr_16925/en/model_doc/clip#transformers.CLIPModel"),c(kR,"href","/docs/transformers/pr_16925/en/model_doc/convbert#transformers.ConvBertModel"),c(SR,"href","/docs/transformers/pr_16925/en/model_doc/convnext#transformers.ConvNextModel"),c(RR,"href","/docs/transformers/pr_16925/en/model_doc/ctrl#transformers.CTRLModel"),c(BR,"href","/docs/transformers/pr_16925/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(PR,"href","/docs/transformers/pr_16925/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(IR,"href","/docs/transformers/pr_16925/en/model_doc/deberta#transformers.DebertaModel"),c(qR,"href","/docs/transformers/pr_16925/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(NR,"href","/docs/transformers/pr_16925/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(jR,"href","/docs/transformers/pr_16925/en/model_doc/deit#transformers.DeiTModel"),c(DR,"href","/docs/transformers/pr_16925/en/model_doc/detr#transformers.DetrModel"),c(GR,"href","/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.DistilBertModel"),c(OR,"href","/docs/transformers/pr_16925/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(VR,"href","/docs/transformers/pr_16925/en/model_doc/electra#transformers.ElectraModel"),c(XR,"href","/docs/transformers/pr_16925/en/model_doc/flaubert#transformers.FlaubertModel"),c(zR,"href","/docs/transformers/pr_16925/en/model_doc/fnet#transformers.FNetModel"),c(QR,"href","/docs/transformers/pr_16925/en/model_doc/fsmt#transformers.FSMTModel"),c(WR,"href","/docs/transformers/pr_16925/en/model_doc/funnel#transformers.FunnelModel"),c(HR,"href","/docs/transformers/pr_16925/en/model_doc/funnel#transformers.FunnelBaseModel"),c(UR,"href","/docs/transformers/pr_16925/en/model_doc/glpn#transformers.GLPNModel"),c(JR,"href","/docs/transformers/pr_16925/en/model_doc/gpt2#transformers.GPT2Model"),c(YR,"href","/docs/transformers/pr_16925/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(KR,"href","/docs/transformers/pr_16925/en/model_doc/gptj#transformers.GPTJModel"),c(ZR,"href","/docs/transformers/pr_16925/en/model_doc/hubert#transformers.HubertModel"),c(eB,"href","/docs/transformers/pr_16925/en/model_doc/ibert#transformers.IBertModel"),c(oB,"href","/docs/transformers/pr_16925/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(rB,"href","/docs/transformers/pr_16925/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(tB,"href","/docs/transformers/pr_16925/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(aB,"href","/docs/transformers/pr_16925/en/model_doc/led#transformers.LEDModel"),c(nB,"href","/docs/transformers/pr_16925/en/model_doc/longformer#transformers.LongformerModel"),c(sB,"href","/docs/transformers/pr_16925/en/model_doc/luke#transformers.LukeModel"),c(lB,"href","/docs/transformers/pr_16925/en/model_doc/lxmert#transformers.LxmertModel"),c(iB,"href","/docs/transformers/pr_16925/en/model_doc/m2m_100#transformers.M2M100Model"),c(dB,"href","/docs/transformers/pr_16925/en/model_doc/marian#transformers.MarianModel"),c(cB,"href","/docs/transformers/pr_16925/en/model_doc/maskformer#transformers.MaskFormerModel"),c(fB,"href","/docs/transformers/pr_16925/en/model_doc/mbart#transformers.MBartModel"),c(mB,"href","/docs/transformers/pr_16925/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(gB,"href","/docs/transformers/pr_16925/en/model_doc/mobilebert#transformers.MobileBertModel"),c(hB,"href","/docs/transformers/pr_16925/en/model_doc/mpnet#transformers.MPNetModel"),c(pB,"href","/docs/transformers/pr_16925/en/model_doc/mt5#transformers.MT5Model"),c(uB,"href","/docs/transformers/pr_16925/en/model_doc/nystromformer#transformers.NystromformerModel"),c(_B,"href","/docs/transformers/pr_16925/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(bB,"href","/docs/transformers/pr_16925/en/model_doc/pegasus#transformers.PegasusModel"),c(FB,"href","/docs/transformers/pr_16925/en/model_doc/perceiver#transformers.PerceiverModel"),c(vB,"href","/docs/transformers/pr_16925/en/model_doc/plbart#transformers.PLBartModel"),c(TB,"href","/docs/transformers/pr_16925/en/model_doc/poolformer#transformers.PoolFormerModel"),c(MB,"href","/docs/transformers/pr_16925/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(EB,"href","/docs/transformers/pr_16925/en/model_doc/reformer#transformers.ReformerModel"),c(CB,"href","/docs/transformers/pr_16925/en/model_doc/rembert#transformers.RemBertModel"),c(wB,"href","/docs/transformers/pr_16925/en/model_doc/resnet#transformers.ResNetModel"),c(AB,"href","/docs/transformers/pr_16925/en/model_doc/retribert#transformers.RetriBertModel"),c(yB,"href","/docs/transformers/pr_16925/en/model_doc/roberta#transformers.RobertaModel"),c(LB,"href","/docs/transformers/pr_16925/en/model_doc/roformer#transformers.RoFormerModel"),c(xB,"href","/docs/transformers/pr_16925/en/model_doc/segformer#transformers.SegformerModel"),c($B,"href","/docs/transformers/pr_16925/en/model_doc/sew#transformers.SEWModel"),c(kB,"href","/docs/transformers/pr_16925/en/model_doc/sew-d#transformers.SEWDModel"),c(SB,"href","/docs/transformers/pr_16925/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(RB,"href","/docs/transformers/pr_16925/en/model_doc/splinter#transformers.SplinterModel"),c(BB,"href","/docs/transformers/pr_16925/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(PB,"href","/docs/transformers/pr_16925/en/model_doc/swin#transformers.SwinModel"),c(IB,"href","/docs/transformers/pr_16925/en/model_doc/t5#transformers.T5Model"),c(qB,"href","/docs/transformers/pr_16925/en/model_doc/tapas#transformers.TapasModel"),c(NB,"href","/docs/transformers/pr_16925/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(jB,"href","/docs/transformers/pr_16925/en/model_doc/unispeech#transformers.UniSpeechModel"),c(DB,"href","/docs/transformers/pr_16925/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(GB,"href","/docs/transformers/pr_16925/en/model_doc/van#transformers.VanModel"),c(OB,"href","/docs/transformers/pr_16925/en/model_doc/vilt#transformers.ViltModel"),c(VB,"href","/docs/transformers/pr_16925/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(XB,"href","/docs/transformers/pr_16925/en/model_doc/visual_bert#transformers.VisualBertModel"),c(zB,"href","/docs/transformers/pr_16925/en/model_doc/vit#transformers.ViTModel"),c(QB,"href","/docs/transformers/pr_16925/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(WB,"href","/docs/transformers/pr_16925/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(HB,"href","/docs/transformers/pr_16925/en/model_doc/wavlm#transformers.WavLMModel"),c(UB,"href","/docs/transformers/pr_16925/en/model_doc/xglm#transformers.XGLMModel"),c(JB,"href","/docs/transformers/pr_16925/en/model_doc/xlm#transformers.XLMModel"),c(YB,"href","/docs/transformers/pr_16925/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(KB,"href","/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(ZB,"href","/docs/transformers/pr_16925/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(eP,"href","/docs/transformers/pr_16925/en/model_doc/xlnet#transformers.XLNetModel"),c(oP,"href","/docs/transformers/pr_16925/en/model_doc/yoso#transformers.YosoModel"),c(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xp,"id","transformers.AutoModelForPreTraining"),c(Xp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xp,"href","#transformers.AutoModelForPreTraining"),c(di,"class","relative group"),c(rP,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tP,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aP,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nP,"href","/docs/transformers/pr_16925/en/model_doc/albert#transformers.AlbertForPreTraining"),c(sP,"href","/docs/transformers/pr_16925/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(lP,"href","/docs/transformers/pr_16925/en/model_doc/bert#transformers.BertForPreTraining"),c(iP,"href","/docs/transformers/pr_16925/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(dP,"href","/docs/transformers/pr_16925/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(cP,"href","/docs/transformers/pr_16925/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(fP,"href","/docs/transformers/pr_16925/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(mP,"href","/docs/transformers/pr_16925/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(gP,"href","/docs/transformers/pr_16925/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(hP,"href","/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(pP,"href","/docs/transformers/pr_16925/en/model_doc/electra#transformers.ElectraForPreTraining"),c(uP,"href","/docs/transformers/pr_16925/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(_P,"href","/docs/transformers/pr_16925/en/model_doc/fnet#transformers.FNetForPreTraining"),c(bP,"href","/docs/transformers/pr_16925/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(FP,"href","/docs/transformers/pr_16925/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(vP,"href","/docs/transformers/pr_16925/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(TP,"href","/docs/transformers/pr_16925/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(MP,"href","/docs/transformers/pr_16925/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(EP,"href","/docs/transformers/pr_16925/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(CP,"href","/docs/transformers/pr_16925/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(wP,"href","/docs/transformers/pr_16925/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(AP,"href","/docs/transformers/pr_16925/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(yP,"href","/docs/transformers/pr_16925/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(LP,"href","/docs/transformers/pr_16925/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(xP,"href","/docs/transformers/pr_16925/en/model_doc/retribert#transformers.RetriBertModel"),c($P,"href","/docs/transformers/pr_16925/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(kP,"href","/docs/transformers/pr_16925/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(SP,"href","/docs/transformers/pr_16925/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(RP,"href","/docs/transformers/pr_16925/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(BP,"href","/docs/transformers/pr_16925/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(PP,"href","/docs/transformers/pr_16925/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(IP,"href","/docs/transformers/pr_16925/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(qP,"href","/docs/transformers/pr_16925/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(NP,"href","/docs/transformers/pr_16925/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(jP,"href","/docs/transformers/pr_16925/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(DP,"href","/docs/transformers/pr_16925/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(GP,"href","/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(OP,"href","/docs/transformers/pr_16925/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(VP,"href","/docs/transformers/pr_16925/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ru,"id","transformers.AutoModelForCausalLM"),c(Ru,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ru,"href","#transformers.AutoModelForCausalLM"),c(mi,"class","relative group"),c(XP,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zP,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QP,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WP,"href","/docs/transformers/pr_16925/en/model_doc/bart#transformers.BartForCausalLM"),c(HP,"href","/docs/transformers/pr_16925/en/model_doc/bert#transformers.BertLMHeadModel"),c(UP,"href","/docs/transformers/pr_16925/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(JP,"href","/docs/transformers/pr_16925/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(YP,"href","/docs/transformers/pr_16925/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(KP,"href","/docs/transformers/pr_16925/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(ZP,"href","/docs/transformers/pr_16925/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(eI,"href","/docs/transformers/pr_16925/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(oI,"href","/docs/transformers/pr_16925/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(rI,"href","/docs/transformers/pr_16925/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(tI,"href","/docs/transformers/pr_16925/en/model_doc/electra#transformers.ElectraForCausalLM"),c(aI,"href","/docs/transformers/pr_16925/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(nI,"href","/docs/transformers/pr_16925/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(sI,"href","/docs/transformers/pr_16925/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(lI,"href","/docs/transformers/pr_16925/en/model_doc/marian#transformers.MarianForCausalLM"),c(iI,"href","/docs/transformers/pr_16925/en/model_doc/mbart#transformers.MBartForCausalLM"),c(dI,"href","/docs/transformers/pr_16925/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(cI,"href","/docs/transformers/pr_16925/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(fI,"href","/docs/transformers/pr_16925/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(mI,"href","/docs/transformers/pr_16925/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(gI,"href","/docs/transformers/pr_16925/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(hI,"href","/docs/transformers/pr_16925/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(pI,"href","/docs/transformers/pr_16925/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(uI,"href","/docs/transformers/pr_16925/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(_I,"href","/docs/transformers/pr_16925/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(bI,"href","/docs/transformers/pr_16925/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(FI,"href","/docs/transformers/pr_16925/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(vI,"href","/docs/transformers/pr_16925/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(TI,"href","/docs/transformers/pr_16925/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(MI,"href","/docs/transformers/pr_16925/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(EI,"href","/docs/transformers/pr_16925/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(CI,"href","/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(wI,"href","/docs/transformers/pr_16925/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(AI,"href","/docs/transformers/pr_16925/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b_,"id","transformers.AutoModelForMaskedLM"),c(b_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b_,"href","#transformers.AutoModelForMaskedLM"),c(pi,"class","relative group"),c(yI,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LI,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xI,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($I,"href","/docs/transformers/pr_16925/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(kI,"href","/docs/transformers/pr_16925/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(SI,"href","/docs/transformers/pr_16925/en/model_doc/bert#transformers.BertForMaskedLM"),c(RI,"href","/docs/transformers/pr_16925/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(BI,"href","/docs/transformers/pr_16925/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(PI,"href","/docs/transformers/pr_16925/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(II,"href","/docs/transformers/pr_16925/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(qI,"href","/docs/transformers/pr_16925/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(NI,"href","/docs/transformers/pr_16925/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(jI,"href","/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(DI,"href","/docs/transformers/pr_16925/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(GI,"href","/docs/transformers/pr_16925/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(OI,"href","/docs/transformers/pr_16925/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(VI,"href","/docs/transformers/pr_16925/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(XI,"href","/docs/transformers/pr_16925/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(zI,"href","/docs/transformers/pr_16925/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(QI,"href","/docs/transformers/pr_16925/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(WI,"href","/docs/transformers/pr_16925/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(HI,"href","/docs/transformers/pr_16925/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(UI,"href","/docs/transformers/pr_16925/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(JI,"href","/docs/transformers/pr_16925/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(YI,"href","/docs/transformers/pr_16925/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(KI,"href","/docs/transformers/pr_16925/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(ZI,"href","/docs/transformers/pr_16925/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(eq,"href","/docs/transformers/pr_16925/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(oq,"href","/docs/transformers/pr_16925/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(rq,"href","/docs/transformers/pr_16925/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(tq,"href","/docs/transformers/pr_16925/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(aq,"href","/docs/transformers/pr_16925/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(nq,"href","/docs/transformers/pr_16925/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(sq,"href","/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(lq,"href","/docs/transformers/pr_16925/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(iq,"href","/docs/transformers/pr_16925/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t2,"id","transformers.AutoModelForSeq2SeqLM"),c(t2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t2,"href","#transformers.AutoModelForSeq2SeqLM"),c(bi,"class","relative group"),c(dq,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cq,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fq,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mq,"href","/docs/transformers/pr_16925/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(gq,"href","/docs/transformers/pr_16925/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(hq,"href","/docs/transformers/pr_16925/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(pq,"href","/docs/transformers/pr_16925/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(uq,"href","/docs/transformers/pr_16925/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(_q,"href","/docs/transformers/pr_16925/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(bq,"href","/docs/transformers/pr_16925/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(Fq,"href","/docs/transformers/pr_16925/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(vq,"href","/docs/transformers/pr_16925/en/model_doc/marian#transformers.MarianMTModel"),c(Tq,"href","/docs/transformers/pr_16925/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Mq,"href","/docs/transformers/pr_16925/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(Eq,"href","/docs/transformers/pr_16925/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(Cq,"href","/docs/transformers/pr_16925/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(wq,"href","/docs/transformers/pr_16925/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(Aq,"href","/docs/transformers/pr_16925/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(yq,"href","/docs/transformers/pr_16925/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E2,"id","transformers.AutoModelForSequenceClassification"),c(E2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E2,"href","#transformers.AutoModelForSequenceClassification"),c(Ti,"class","relative group"),c(Lq,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xq,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($q,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kq,"href","/docs/transformers/pr_16925/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(Sq,"href","/docs/transformers/pr_16925/en/model_doc/bart#transformers.BartForSequenceClassification"),c(Rq,"href","/docs/transformers/pr_16925/en/model_doc/bert#transformers.BertForSequenceClassification"),c(Bq,"href","/docs/transformers/pr_16925/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(Pq,"href","/docs/transformers/pr_16925/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(Iq,"href","/docs/transformers/pr_16925/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(qq,"href","/docs/transformers/pr_16925/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(Nq,"href","/docs/transformers/pr_16925/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(jq,"href","/docs/transformers/pr_16925/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(Dq,"href","/docs/transformers/pr_16925/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(Gq,"href","/docs/transformers/pr_16925/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(Oq,"href","/docs/transformers/pr_16925/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(Vq,"href","/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(Xq,"href","/docs/transformers/pr_16925/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(zq,"href","/docs/transformers/pr_16925/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(Qq,"href","/docs/transformers/pr_16925/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(Wq,"href","/docs/transformers/pr_16925/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(Hq,"href","/docs/transformers/pr_16925/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(Uq,"href","/docs/transformers/pr_16925/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(Jq,"href","/docs/transformers/pr_16925/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(Yq,"href","/docs/transformers/pr_16925/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(Kq,"href","/docs/transformers/pr_16925/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(Zq,"href","/docs/transformers/pr_16925/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(eN,"href","/docs/transformers/pr_16925/en/model_doc/led#transformers.LEDForSequenceClassification"),c(oN,"href","/docs/transformers/pr_16925/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(rN,"href","/docs/transformers/pr_16925/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(tN,"href","/docs/transformers/pr_16925/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(aN,"href","/docs/transformers/pr_16925/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(nN,"href","/docs/transformers/pr_16925/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(sN,"href","/docs/transformers/pr_16925/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(lN,"href","/docs/transformers/pr_16925/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(iN,"href","/docs/transformers/pr_16925/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(dN,"href","/docs/transformers/pr_16925/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(cN,"href","/docs/transformers/pr_16925/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(fN,"href","/docs/transformers/pr_16925/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(mN,"href","/docs/transformers/pr_16925/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(gN,"href","/docs/transformers/pr_16925/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(hN,"href","/docs/transformers/pr_16925/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(pN,"href","/docs/transformers/pr_16925/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(uN,"href","/docs/transformers/pr_16925/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(_N,"href","/docs/transformers/pr_16925/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(bN,"href","/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(FN,"href","/docs/transformers/pr_16925/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(vN,"href","/docs/transformers/pr_16925/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(TN,"href","/docs/transformers/pr_16925/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F1,"id","transformers.AutoModelForMultipleChoice"),c(F1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F1,"href","#transformers.AutoModelForMultipleChoice"),c(Ci,"class","relative group"),c(MN,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EN,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CN,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wN,"href","/docs/transformers/pr_16925/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(AN,"href","/docs/transformers/pr_16925/en/model_doc/bert#transformers.BertForMultipleChoice"),c(yN,"href","/docs/transformers/pr_16925/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(LN,"href","/docs/transformers/pr_16925/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(xN,"href","/docs/transformers/pr_16925/en/model_doc/canine#transformers.CanineForMultipleChoice"),c($N,"href","/docs/transformers/pr_16925/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(kN,"href","/docs/transformers/pr_16925/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(SN,"href","/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(RN,"href","/docs/transformers/pr_16925/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(BN,"href","/docs/transformers/pr_16925/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(PN,"href","/docs/transformers/pr_16925/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(IN,"href","/docs/transformers/pr_16925/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(qN,"href","/docs/transformers/pr_16925/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(NN,"href","/docs/transformers/pr_16925/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(jN,"href","/docs/transformers/pr_16925/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(DN,"href","/docs/transformers/pr_16925/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(GN,"href","/docs/transformers/pr_16925/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(ON,"href","/docs/transformers/pr_16925/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(VN,"href","/docs/transformers/pr_16925/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(XN,"href","/docs/transformers/pr_16925/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(zN,"href","/docs/transformers/pr_16925/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(QN,"href","/docs/transformers/pr_16925/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(WN,"href","/docs/transformers/pr_16925/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(HN,"href","/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(UN,"href","/docs/transformers/pr_16925/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(JN,"href","/docs/transformers/pr_16925/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(YN,"href","/docs/transformers/pr_16925/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y1,"id","transformers.AutoModelForNextSentencePrediction"),c(Y1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y1,"href","#transformers.AutoModelForNextSentencePrediction"),c(yi,"class","relative group"),c(KN,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZN,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ej,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oj,"href","/docs/transformers/pr_16925/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(rj,"href","/docs/transformers/pr_16925/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(tj,"href","/docs/transformers/pr_16925/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(aj,"href","/docs/transformers/pr_16925/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sb,"id","transformers.AutoModelForTokenClassification"),c(sb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sb,"href","#transformers.AutoModelForTokenClassification"),c($i,"class","relative group"),c(nj,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sj,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lj,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ij,"href","/docs/transformers/pr_16925/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(dj,"href","/docs/transformers/pr_16925/en/model_doc/bert#transformers.BertForTokenClassification"),c(cj,"href","/docs/transformers/pr_16925/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(fj,"href","/docs/transformers/pr_16925/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(mj,"href","/docs/transformers/pr_16925/en/model_doc/canine#transformers.CanineForTokenClassification"),c(gj,"href","/docs/transformers/pr_16925/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(hj,"href","/docs/transformers/pr_16925/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(pj,"href","/docs/transformers/pr_16925/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(uj,"href","/docs/transformers/pr_16925/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(_j,"href","/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(bj,"href","/docs/transformers/pr_16925/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(Fj,"href","/docs/transformers/pr_16925/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(vj,"href","/docs/transformers/pr_16925/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(Tj,"href","/docs/transformers/pr_16925/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(Mj,"href","/docs/transformers/pr_16925/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(Ej,"href","/docs/transformers/pr_16925/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(Cj,"href","/docs/transformers/pr_16925/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(wj,"href","/docs/transformers/pr_16925/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(Aj,"href","/docs/transformers/pr_16925/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(yj,"href","/docs/transformers/pr_16925/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(Lj,"href","/docs/transformers/pr_16925/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(xj,"href","/docs/transformers/pr_16925/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c($j,"href","/docs/transformers/pr_16925/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(kj,"href","/docs/transformers/pr_16925/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(Sj,"href","/docs/transformers/pr_16925/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(Rj,"href","/docs/transformers/pr_16925/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(Bj,"href","/docs/transformers/pr_16925/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(Pj,"href","/docs/transformers/pr_16925/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(Ij,"href","/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(qj,"href","/docs/transformers/pr_16925/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(Nj,"href","/docs/transformers/pr_16925/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(jj,"href","/docs/transformers/pr_16925/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vb,"id","transformers.AutoModelForQuestionAnswering"),c(Vb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vb,"href","#transformers.AutoModelForQuestionAnswering"),c(Ri,"class","relative group"),c(Dj,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gj,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Oj,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vj,"href","/docs/transformers/pr_16925/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(Xj,"href","/docs/transformers/pr_16925/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(zj,"href","/docs/transformers/pr_16925/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(Qj,"href","/docs/transformers/pr_16925/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(Wj,"href","/docs/transformers/pr_16925/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(Hj,"href","/docs/transformers/pr_16925/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(Uj,"href","/docs/transformers/pr_16925/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(Jj,"href","/docs/transformers/pr_16925/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(Yj,"href","/docs/transformers/pr_16925/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(Kj,"href","/docs/transformers/pr_16925/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(Zj,"href","/docs/transformers/pr_16925/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(eD,"href","/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(oD,"href","/docs/transformers/pr_16925/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(rD,"href","/docs/transformers/pr_16925/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(tD,"href","/docs/transformers/pr_16925/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(aD,"href","/docs/transformers/pr_16925/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(nD,"href","/docs/transformers/pr_16925/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(sD,"href","/docs/transformers/pr_16925/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(lD,"href","/docs/transformers/pr_16925/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(iD,"href","/docs/transformers/pr_16925/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(dD,"href","/docs/transformers/pr_16925/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(cD,"href","/docs/transformers/pr_16925/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(fD,"href","/docs/transformers/pr_16925/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(mD,"href","/docs/transformers/pr_16925/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(gD,"href","/docs/transformers/pr_16925/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(hD,"href","/docs/transformers/pr_16925/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(pD,"href","/docs/transformers/pr_16925/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(uD,"href","/docs/transformers/pr_16925/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(_D,"href","/docs/transformers/pr_16925/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(bD,"href","/docs/transformers/pr_16925/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(FD,"href","/docs/transformers/pr_16925/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(vD,"href","/docs/transformers/pr_16925/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(TD,"href","/docs/transformers/pr_16925/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(MD,"href","/docs/transformers/pr_16925/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(ED,"href","/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(CD,"href","/docs/transformers/pr_16925/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(wD,"href","/docs/transformers/pr_16925/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(AD,"href","/docs/transformers/pr_16925/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S5,"id","transformers.AutoModelForTableQuestionAnswering"),c(S5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S5,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Ii,"class","relative group"),c(yD,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LD,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xD,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($D,"href","/docs/transformers/pr_16925/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q5,"id","transformers.AutoModelForImageClassification"),c(q5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q5,"href","#transformers.AutoModelForImageClassification"),c(ji,"class","relative group"),c(kD,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SD,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RD,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BD,"href","/docs/transformers/pr_16925/en/model_doc/beit#transformers.BeitForImageClassification"),c(PD,"href","/docs/transformers/pr_16925/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(ID,"href","/docs/transformers/pr_16925/en/model_doc/deit#transformers.DeiTForImageClassification"),c(qD,"href","/docs/transformers/pr_16925/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(ND,"href","/docs/transformers/pr_16925/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(jD,"href","/docs/transformers/pr_16925/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(DD,"href","/docs/transformers/pr_16925/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(GD,"href","/docs/transformers/pr_16925/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(OD,"href","/docs/transformers/pr_16925/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(VD,"href","/docs/transformers/pr_16925/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(XD,"href","/docs/transformers/pr_16925/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(zD,"href","/docs/transformers/pr_16925/en/model_doc/swin#transformers.SwinForImageClassification"),c(QD,"href","/docs/transformers/pr_16925/en/model_doc/van#transformers.VanForImageClassification"),c(WD,"href","/docs/transformers/pr_16925/en/model_doc/vit#transformers.ViTForImageClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J5,"id","transformers.AutoModelForVision2Seq"),c(J5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J5,"href","#transformers.AutoModelForVision2Seq"),c(Oi,"class","relative group"),c(HD,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UD,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JD,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YD,"href","/docs/transformers/pr_16925/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oF,"id","transformers.AutoModelForAudioClassification"),c(oF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oF,"href","#transformers.AutoModelForAudioClassification"),c(zi,"class","relative group"),c(KD,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZD,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eG,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oG,"href","/docs/transformers/pr_16925/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(rG,"href","/docs/transformers/pr_16925/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(tG,"href","/docs/transformers/pr_16925/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(aG,"href","/docs/transformers/pr_16925/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(nG,"href","/docs/transformers/pr_16925/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(sG,"href","/docs/transformers/pr_16925/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(lG,"href","/docs/transformers/pr_16925/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(iG,"href","/docs/transformers/pr_16925/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gF,"id","transformers.AutoModelForAudioFrameClassification"),c(gF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gF,"href","#transformers.AutoModelForAudioFrameClassification"),c(Hi,"class","relative group"),c(dG,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cG,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fG,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mG,"href","/docs/transformers/pr_16925/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(gG,"href","/docs/transformers/pr_16925/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(hG,"href","/docs/transformers/pr_16925/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(pG,"href","/docs/transformers/pr_16925/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TF,"id","transformers.AutoModelForCTC"),c(TF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TF,"href","#transformers.AutoModelForCTC"),c(Yi,"class","relative group"),c(uG,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_G,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bG,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FG,"href","/docs/transformers/pr_16925/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(vG,"href","/docs/transformers/pr_16925/en/model_doc/hubert#transformers.HubertForCTC"),c(TG,"href","/docs/transformers/pr_16925/en/model_doc/sew#transformers.SEWForCTC"),c(MG,"href","/docs/transformers/pr_16925/en/model_doc/sew-d#transformers.SEWDForCTC"),c(EG,"href","/docs/transformers/pr_16925/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(CG,"href","/docs/transformers/pr_16925/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(wG,"href","/docs/transformers/pr_16925/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(AG,"href","/docs/transformers/pr_16925/en/model_doc/wavlm#transformers.WavLMForCTC"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(RF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(ed,"class","relative group"),c(yG,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LG,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xG,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($G,"href","/docs/transformers/pr_16925/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(kG,"href","/docs/transformers/pr_16925/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jF,"id","transformers.AutoModelForAudioXVector"),c(jF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jF,"href","#transformers.AutoModelForAudioXVector"),c(td,"class","relative group"),c(SG,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RG,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BG,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PG,"href","/docs/transformers/pr_16925/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(IG,"href","/docs/transformers/pr_16925/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(qG,"href","/docs/transformers/pr_16925/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(NG,"href","/docs/transformers/pr_16925/en/model_doc/wavlm#transformers.WavLMForXVector"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WF,"id","transformers.AutoModelForMaskedImageModeling"),c(WF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WF,"href","#transformers.AutoModelForMaskedImageModeling"),c(sd,"class","relative group"),c(jG,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DG,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GG,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OG,"href","/docs/transformers/pr_16925/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(VG,"href","/docs/transformers/pr_16925/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(XG,"href","/docs/transformers/pr_16925/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ev,"id","transformers.AutoModelForObjectDetection"),c(ev,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ev,"href","#transformers.AutoModelForObjectDetection"),c(cd,"class","relative group"),c(zG,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QG,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WG,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HG,"href","/docs/transformers/pr_16925/en/model_doc/detr#transformers.DetrForObjectDetection"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nv,"id","transformers.AutoModelForImageSegmentation"),c(nv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nv,"href","#transformers.AutoModelForImageSegmentation"),c(gd,"class","relative group"),c(UG,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JG,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YG,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KG,"href","/docs/transformers/pr_16925/en/model_doc/detr#transformers.DetrForSegmentation"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cv,"id","transformers.AutoModelForSemanticSegmentation"),c(cv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cv,"href","#transformers.AutoModelForSemanticSegmentation"),c(ud,"class","relative group"),c(ZG,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eO,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oO,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rO,"href","/docs/transformers/pr_16925/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(tO,"href","/docs/transformers/pr_16925/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uv,"id","transformers.AutoModelForInstanceSegmentation"),c(uv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uv,"href","#transformers.AutoModelForInstanceSegmentation"),c(Fd,"class","relative group"),c(aO,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nO,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sO,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lO,"href","/docs/transformers/pr_16925/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tv,"id","transformers.TFAutoModel"),c(Tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tv,"href","#transformers.TFAutoModel"),c(Md,"class","relative group"),c(iO,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dO,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cO,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fO,"href","/docs/transformers/pr_16925/en/model_doc/albert#transformers.TFAlbertModel"),c(mO,"href","/docs/transformers/pr_16925/en/model_doc/bart#transformers.TFBartModel"),c(gO,"href","/docs/transformers/pr_16925/en/model_doc/bert#transformers.TFBertModel"),c(hO,"href","/docs/transformers/pr_16925/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(pO,"href","/docs/transformers/pr_16925/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(uO,"href","/docs/transformers/pr_16925/en/model_doc/camembert#transformers.TFCamembertModel"),c(_O,"href","/docs/transformers/pr_16925/en/model_doc/clip#transformers.TFCLIPModel"),c(bO,"href","/docs/transformers/pr_16925/en/model_doc/convbert#transformers.TFConvBertModel"),c(FO,"href","/docs/transformers/pr_16925/en/model_doc/convnext#transformers.TFConvNextModel"),c(vO,"href","/docs/transformers/pr_16925/en/model_doc/ctrl#transformers.TFCTRLModel"),c(TO,"href","/docs/transformers/pr_16925/en/model_doc/deberta#transformers.TFDebertaModel"),c(MO,"href","/docs/transformers/pr_16925/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(EO,"href","/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(CO,"href","/docs/transformers/pr_16925/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(wO,"href","/docs/transformers/pr_16925/en/model_doc/electra#transformers.TFElectraModel"),c(AO,"href","/docs/transformers/pr_16925/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(yO,"href","/docs/transformers/pr_16925/en/model_doc/funnel#transformers.TFFunnelModel"),c(LO,"href","/docs/transformers/pr_16925/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(xO,"href","/docs/transformers/pr_16925/en/model_doc/gpt2#transformers.TFGPT2Model"),c($O,"href","/docs/transformers/pr_16925/en/model_doc/hubert#transformers.TFHubertModel"),c(kO,"href","/docs/transformers/pr_16925/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(SO,"href","/docs/transformers/pr_16925/en/model_doc/led#transformers.TFLEDModel"),c(RO,"href","/docs/transformers/pr_16925/en/model_doc/longformer#transformers.TFLongformerModel"),c(BO,"href","/docs/transformers/pr_16925/en/model_doc/lxmert#transformers.TFLxmertModel"),c(PO,"href","/docs/transformers/pr_16925/en/model_doc/marian#transformers.TFMarianModel"),c(IO,"href","/docs/transformers/pr_16925/en/model_doc/mbart#transformers.TFMBartModel"),c(qO,"href","/docs/transformers/pr_16925/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(NO,"href","/docs/transformers/pr_16925/en/model_doc/mpnet#transformers.TFMPNetModel"),c(jO,"href","/docs/transformers/pr_16925/en/model_doc/mt5#transformers.TFMT5Model"),c(DO,"href","/docs/transformers/pr_16925/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(GO,"href","/docs/transformers/pr_16925/en/model_doc/pegasus#transformers.TFPegasusModel"),c(OO,"href","/docs/transformers/pr_16925/en/model_doc/rembert#transformers.TFRemBertModel"),c(VO,"href","/docs/transformers/pr_16925/en/model_doc/roberta#transformers.TFRobertaModel"),c(XO,"href","/docs/transformers/pr_16925/en/model_doc/roformer#transformers.TFRoFormerModel"),c(zO,"href","/docs/transformers/pr_16925/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(QO,"href","/docs/transformers/pr_16925/en/model_doc/t5#transformers.TFT5Model"),c(WO,"href","/docs/transformers/pr_16925/en/model_doc/tapas#transformers.TFTapasModel"),c(HO,"href","/docs/transformers/pr_16925/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(UO,"href","/docs/transformers/pr_16925/en/model_doc/vit#transformers.TFViTModel"),c(JO,"href","/docs/transformers/pr_16925/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(YO,"href","/docs/transformers/pr_16925/en/model_doc/xlm#transformers.TFXLMModel"),c(KO,"href","/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(ZO,"href","/docs/transformers/pr_16925/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f6,"id","transformers.TFAutoModelForPreTraining"),c(f6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f6,"href","#transformers.TFAutoModelForPreTraining"),c(wd,"class","relative group"),c(eV,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oV,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rV,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tV,"href","/docs/transformers/pr_16925/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(aV,"href","/docs/transformers/pr_16925/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(nV,"href","/docs/transformers/pr_16925/en/model_doc/bert#transformers.TFBertForPreTraining"),c(sV,"href","/docs/transformers/pr_16925/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(lV,"href","/docs/transformers/pr_16925/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(iV,"href","/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(dV,"href","/docs/transformers/pr_16925/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(cV,"href","/docs/transformers/pr_16925/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(fV,"href","/docs/transformers/pr_16925/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(mV,"href","/docs/transformers/pr_16925/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(gV,"href","/docs/transformers/pr_16925/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(hV,"href","/docs/transformers/pr_16925/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(pV,"href","/docs/transformers/pr_16925/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(uV,"href","/docs/transformers/pr_16925/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(_V,"href","/docs/transformers/pr_16925/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(bV,"href","/docs/transformers/pr_16925/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(FV,"href","/docs/transformers/pr_16925/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(vV,"href","/docs/transformers/pr_16925/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(TV,"href","/docs/transformers/pr_16925/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(MV,"href","/docs/transformers/pr_16925/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(EV,"href","/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(CV,"href","/docs/transformers/pr_16925/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I6,"id","transformers.TFAutoModelForCausalLM"),c(I6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I6,"href","#transformers.TFAutoModelForCausalLM"),c(Ld,"class","relative group"),c(wV,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AV,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yV,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LV,"href","/docs/transformers/pr_16925/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(xV,"href","/docs/transformers/pr_16925/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c($V,"href","/docs/transformers/pr_16925/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(kV,"href","/docs/transformers/pr_16925/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(SV,"href","/docs/transformers/pr_16925/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(RV,"href","/docs/transformers/pr_16925/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(BV,"href","/docs/transformers/pr_16925/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(PV,"href","/docs/transformers/pr_16925/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(IV,"href","/docs/transformers/pr_16925/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(qV,"href","/docs/transformers/pr_16925/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(NV,"href","/docs/transformers/pr_16925/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J6,"id","transformers.TFAutoModelForImageClassification"),c(J6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J6,"href","#transformers.TFAutoModelForImageClassification"),c(kd,"class","relative group"),c(jV,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DV,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GV,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OV,"href","/docs/transformers/pr_16925/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(VV,"href","/docs/transformers/pr_16925/en/model_doc/vit#transformers.TFViTForImageClassification"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oT,"id","transformers.TFAutoModelForMaskedLM"),c(oT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oT,"href","#transformers.TFAutoModelForMaskedLM"),c(Bd,"class","relative group"),c(XV,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zV,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QV,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WV,"href","/docs/transformers/pr_16925/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(HV,"href","/docs/transformers/pr_16925/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(UV,"href","/docs/transformers/pr_16925/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(JV,"href","/docs/transformers/pr_16925/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(YV,"href","/docs/transformers/pr_16925/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(KV,"href","/docs/transformers/pr_16925/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(ZV,"href","/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(eX,"href","/docs/transformers/pr_16925/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(oX,"href","/docs/transformers/pr_16925/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(rX,"href","/docs/transformers/pr_16925/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(tX,"href","/docs/transformers/pr_16925/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(aX,"href","/docs/transformers/pr_16925/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(nX,"href","/docs/transformers/pr_16925/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(sX,"href","/docs/transformers/pr_16925/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(lX,"href","/docs/transformers/pr_16925/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(iX,"href","/docs/transformers/pr_16925/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(dX,"href","/docs/transformers/pr_16925/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(cX,"href","/docs/transformers/pr_16925/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(fX,"href","/docs/transformers/pr_16925/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(mX,"href","/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CT,"id","transformers.TFAutoModelForSeq2SeqLM"),c(CT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CT,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(qd,"class","relative group"),c(gX,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hX,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pX,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uX,"href","/docs/transformers/pr_16925/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(_X,"href","/docs/transformers/pr_16925/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(bX,"href","/docs/transformers/pr_16925/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(FX,"href","/docs/transformers/pr_16925/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(vX,"href","/docs/transformers/pr_16925/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(TX,"href","/docs/transformers/pr_16925/en/model_doc/marian#transformers.TFMarianMTModel"),c(MX,"href","/docs/transformers/pr_16925/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(EX,"href","/docs/transformers/pr_16925/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(CX,"href","/docs/transformers/pr_16925/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(wX,"href","/docs/transformers/pr_16925/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qT,"id","transformers.TFAutoModelForSequenceClassification"),c(qT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qT,"href","#transformers.TFAutoModelForSequenceClassification"),c(Dd,"class","relative group"),c(AX,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yX,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LX,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xX,"href","/docs/transformers/pr_16925/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c($X,"href","/docs/transformers/pr_16925/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(kX,"href","/docs/transformers/pr_16925/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(SX,"href","/docs/transformers/pr_16925/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(RX,"href","/docs/transformers/pr_16925/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(BX,"href","/docs/transformers/pr_16925/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(PX,"href","/docs/transformers/pr_16925/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(IX,"href","/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(qX,"href","/docs/transformers/pr_16925/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(NX,"href","/docs/transformers/pr_16925/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(jX,"href","/docs/transformers/pr_16925/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(DX,"href","/docs/transformers/pr_16925/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(GX,"href","/docs/transformers/pr_16925/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(OX,"href","/docs/transformers/pr_16925/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(VX,"href","/docs/transformers/pr_16925/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(XX,"href","/docs/transformers/pr_16925/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(zX,"href","/docs/transformers/pr_16925/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(QX,"href","/docs/transformers/pr_16925/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(WX,"href","/docs/transformers/pr_16925/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(HX,"href","/docs/transformers/pr_16925/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(UX,"href","/docs/transformers/pr_16925/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(JX,"href","/docs/transformers/pr_16925/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(YX,"href","/docs/transformers/pr_16925/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(KX,"href","/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(ZX,"href","/docs/transformers/pr_16925/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fM,"id","transformers.TFAutoModelForMultipleChoice"),c(fM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fM,"href","#transformers.TFAutoModelForMultipleChoice"),c(Vd,"class","relative group"),c(ez,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oz,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rz,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tz,"href","/docs/transformers/pr_16925/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(az,"href","/docs/transformers/pr_16925/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(nz,"href","/docs/transformers/pr_16925/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(sz,"href","/docs/transformers/pr_16925/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(lz,"href","/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(iz,"href","/docs/transformers/pr_16925/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(dz,"href","/docs/transformers/pr_16925/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(cz,"href","/docs/transformers/pr_16925/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(fz,"href","/docs/transformers/pr_16925/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(mz,"href","/docs/transformers/pr_16925/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(gz,"href","/docs/transformers/pr_16925/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(hz,"href","/docs/transformers/pr_16925/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(pz,"href","/docs/transformers/pr_16925/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(uz,"href","/docs/transformers/pr_16925/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(_z,"href","/docs/transformers/pr_16925/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(bz,"href","/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(Fz,"href","/docs/transformers/pr_16925/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kM,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(kM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Qd,"class","relative group"),c(vz,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tz,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Mz,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ez,"href","/docs/transformers/pr_16925/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PM,"id","transformers.TFAutoModelForTokenClassification"),c(PM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PM,"href","#transformers.TFAutoModelForTokenClassification"),c(Ud,"class","relative group"),c(Cz,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wz,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Az,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yz,"href","/docs/transformers/pr_16925/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(Lz,"href","/docs/transformers/pr_16925/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(xz,"href","/docs/transformers/pr_16925/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c($z,"href","/docs/transformers/pr_16925/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(kz,"href","/docs/transformers/pr_16925/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(Sz,"href","/docs/transformers/pr_16925/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(Rz,"href","/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(Bz,"href","/docs/transformers/pr_16925/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(Pz,"href","/docs/transformers/pr_16925/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(Iz,"href","/docs/transformers/pr_16925/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(qz,"href","/docs/transformers/pr_16925/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(Nz,"href","/docs/transformers/pr_16925/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(jz,"href","/docs/transformers/pr_16925/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(Dz,"href","/docs/transformers/pr_16925/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(Gz,"href","/docs/transformers/pr_16925/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(Oz,"href","/docs/transformers/pr_16925/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(Vz,"href","/docs/transformers/pr_16925/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(Xz,"href","/docs/transformers/pr_16925/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(zz,"href","/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(Qz,"href","/docs/transformers/pr_16925/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a9,"id","transformers.TFAutoModelForQuestionAnswering"),c(a9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a9,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Kd,"class","relative group"),c(Wz,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hz,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Uz,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jz,"href","/docs/transformers/pr_16925/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(Yz,"href","/docs/transformers/pr_16925/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(Kz,"href","/docs/transformers/pr_16925/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(Zz,"href","/docs/transformers/pr_16925/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(eQ,"href","/docs/transformers/pr_16925/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(oQ,"href","/docs/transformers/pr_16925/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(rQ,"href","/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(tQ,"href","/docs/transformers/pr_16925/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(aQ,"href","/docs/transformers/pr_16925/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(nQ,"href","/docs/transformers/pr_16925/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(sQ,"href","/docs/transformers/pr_16925/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(lQ,"href","/docs/transformers/pr_16925/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(iQ,"href","/docs/transformers/pr_16925/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(dQ,"href","/docs/transformers/pr_16925/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(cQ,"href","/docs/transformers/pr_16925/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(fQ,"href","/docs/transformers/pr_16925/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(mQ,"href","/docs/transformers/pr_16925/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(gQ,"href","/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(hQ,"href","/docs/transformers/pr_16925/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A9,"id","transformers.TFAutoModelForVision2Seq"),c(A9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A9,"href","#transformers.TFAutoModelForVision2Seq"),c(oc,"class","relative group"),c(pQ,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uQ,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_Q,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bQ,"href","/docs/transformers/pr_16925/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($9,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c($9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($9,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(ac,"class","relative group"),c(FQ,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vQ,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TQ,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MQ,"href","/docs/transformers/pr_16925/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B9,"id","transformers.FlaxAutoModel"),c(B9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B9,"href","#transformers.FlaxAutoModel"),c(lc,"class","relative group"),c(EQ,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CQ,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wQ,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AQ,"href","/docs/transformers/pr_16925/en/model_doc/albert#transformers.FlaxAlbertModel"),c(yQ,"href","/docs/transformers/pr_16925/en/model_doc/bart#transformers.FlaxBartModel"),c(LQ,"href","/docs/transformers/pr_16925/en/model_doc/beit#transformers.FlaxBeitModel"),c(xQ,"href","/docs/transformers/pr_16925/en/model_doc/bert#transformers.FlaxBertModel"),c($Q,"href","/docs/transformers/pr_16925/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(kQ,"href","/docs/transformers/pr_16925/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(SQ,"href","/docs/transformers/pr_16925/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(RQ,"href","/docs/transformers/pr_16925/en/model_doc/clip#transformers.FlaxCLIPModel"),c(BQ,"href","/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(PQ,"href","/docs/transformers/pr_16925/en/model_doc/electra#transformers.FlaxElectraModel"),c(IQ,"href","/docs/transformers/pr_16925/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(qQ,"href","/docs/transformers/pr_16925/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(NQ,"href","/docs/transformers/pr_16925/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(jQ,"href","/docs/transformers/pr_16925/en/model_doc/marian#transformers.FlaxMarianModel"),c(DQ,"href","/docs/transformers/pr_16925/en/model_doc/mbart#transformers.FlaxMBartModel"),c(GQ,"href","/docs/transformers/pr_16925/en/model_doc/mt5#transformers.FlaxMT5Model"),c(OQ,"href","/docs/transformers/pr_16925/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(VQ,"href","/docs/transformers/pr_16925/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(XQ,"href","/docs/transformers/pr_16925/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(zQ,"href","/docs/transformers/pr_16925/en/model_doc/t5#transformers.FlaxT5Model"),c(QQ,"href","/docs/transformers/pr_16925/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(WQ,"href","/docs/transformers/pr_16925/en/model_doc/vit#transformers.FlaxViTModel"),c(HQ,"href","/docs/transformers/pr_16925/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(UQ,"href","/docs/transformers/pr_16925/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(JQ,"href","/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i4,"id","transformers.FlaxAutoModelForCausalLM"),c(i4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i4,"href","#transformers.FlaxAutoModelForCausalLM"),c(cc,"class","relative group"),c(YQ,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KQ,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZQ,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eW,"href","/docs/transformers/pr_16925/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(oW,"href","/docs/transformers/pr_16925/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(rW,"href","/docs/transformers/pr_16925/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(tW,"href","/docs/transformers/pr_16925/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(aW,"href","/docs/transformers/pr_16925/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u4,"id","transformers.FlaxAutoModelForPreTraining"),c(u4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u4,"href","#transformers.FlaxAutoModelForPreTraining"),c(gc,"class","relative group"),c(nW,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sW,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lW,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iW,"href","/docs/transformers/pr_16925/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(dW,"href","/docs/transformers/pr_16925/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(cW,"href","/docs/transformers/pr_16925/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(fW,"href","/docs/transformers/pr_16925/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(mW,"href","/docs/transformers/pr_16925/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(gW,"href","/docs/transformers/pr_16925/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(hW,"href","/docs/transformers/pr_16925/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(pW,"href","/docs/transformers/pr_16925/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(uW,"href","/docs/transformers/pr_16925/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(_W,"href","/docs/transformers/pr_16925/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(bW,"href","/docs/transformers/pr_16925/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(FW,"href","/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k4,"id","transformers.FlaxAutoModelForMaskedLM"),c(k4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k4,"href","#transformers.FlaxAutoModelForMaskedLM"),c(uc,"class","relative group"),c(vW,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TW,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MW,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EW,"href","/docs/transformers/pr_16925/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(CW,"href","/docs/transformers/pr_16925/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(wW,"href","/docs/transformers/pr_16925/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(AW,"href","/docs/transformers/pr_16925/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(yW,"href","/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(LW,"href","/docs/transformers/pr_16925/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(xW,"href","/docs/transformers/pr_16925/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c($W,"href","/docs/transformers/pr_16925/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(kW,"href","/docs/transformers/pr_16925/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(SW,"href","/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X4,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(X4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X4,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Fc,"class","relative group"),c(RW,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BW,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PW,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IW,"href","/docs/transformers/pr_16925/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(qW,"href","/docs/transformers/pr_16925/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(NW,"href","/docs/transformers/pr_16925/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(jW,"href","/docs/transformers/pr_16925/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(DW,"href","/docs/transformers/pr_16925/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(GW,"href","/docs/transformers/pr_16925/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(OW,"href","/docs/transformers/pr_16925/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(VW,"href","/docs/transformers/pr_16925/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(XW,"href","/docs/transformers/pr_16925/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rE,"id","transformers.FlaxAutoModelForSequenceClassification"),c(rE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rE,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Mc,"class","relative group"),c(zW,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QW,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WW,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HW,"href","/docs/transformers/pr_16925/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(UW,"href","/docs/transformers/pr_16925/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(JW,"href","/docs/transformers/pr_16925/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(YW,"href","/docs/transformers/pr_16925/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(KW,"href","/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(ZW,"href","/docs/transformers/pr_16925/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(eH,"href","/docs/transformers/pr_16925/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(oH,"href","/docs/transformers/pr_16925/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(rH,"href","/docs/transformers/pr_16925/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(tH,"href","/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pE,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(pE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pE,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(wc,"class","relative group"),c(aH,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nH,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sH,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lH,"href","/docs/transformers/pr_16925/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(iH,"href","/docs/transformers/pr_16925/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(dH,"href","/docs/transformers/pr_16925/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(cH,"href","/docs/transformers/pr_16925/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(fH,"href","/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(mH,"href","/docs/transformers/pr_16925/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(gH,"href","/docs/transformers/pr_16925/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(hH,"href","/docs/transformers/pr_16925/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(pH,"href","/docs/transformers/pr_16925/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(uH,"href","/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LE,"id","transformers.FlaxAutoModelForTokenClassification"),c(LE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LE,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Lc,"class","relative group"),c(_H,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bH,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FH,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vH,"href","/docs/transformers/pr_16925/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(TH,"href","/docs/transformers/pr_16925/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(MH,"href","/docs/transformers/pr_16925/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(EH,"href","/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(CH,"href","/docs/transformers/pr_16925/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(wH,"href","/docs/transformers/pr_16925/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(AH,"href","/docs/transformers/pr_16925/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(yH,"href","/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jE,"id","transformers.FlaxAutoModelForMultipleChoice"),c(jE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jE,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(kc,"class","relative group"),c(LH,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xH,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($H,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kH,"href","/docs/transformers/pr_16925/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(SH,"href","/docs/transformers/pr_16925/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(RH,"href","/docs/transformers/pr_16925/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(BH,"href","/docs/transformers/pr_16925/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(PH,"href","/docs/transformers/pr_16925/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(IH,"href","/docs/transformers/pr_16925/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(qH,"href","/docs/transformers/pr_16925/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(NH,"href","/docs/transformers/pr_16925/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JE,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(JE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JE,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Bc,"class","relative group"),c(jH,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DH,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GH,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OH,"href","/docs/transformers/pr_16925/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eC,"id","transformers.FlaxAutoModelForImageClassification"),c(eC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eC,"href","#transformers.FlaxAutoModelForImageClassification"),c(qc,"class","relative group"),c(VH,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XH,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zH,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QH,"href","/docs/transformers/pr_16925/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(WH,"href","/docs/transformers/pr_16925/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nC,"id","transformers.FlaxAutoModelForVision2Seq"),c(nC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nC,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Dc,"class","relative group"),c(HH,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UH,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JH,"href","/docs/transformers/pr_16925/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YH,"href","/docs/transformers/pr_16925/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,F,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,vo),e(vo,Ql),b(f,Qc,_),b(f,Yr,_),e(Yr,Wl),e(Yr,Hl),e(Hl,Ew),e(Yr,Wc),b(f,Be,_),b(f,Ge,_),e(Ge,Ul),e(Ge,vn),e(vn,Cw),e(Ge,Tn),e(Ge,Mn),e(Mn,ww),e(Ge,Jl),e(Ge,En),e(En,Aw),e(Ge,Yl),b(f,Hc,_),M(ba,f,_),b(f,Oe,_),b(f,Me,_),e(Me,kx),e(Me,Kl),e(Kl,Sx),e(Me,Rx),b(f,To,_),b(f,Fa,_),e(Fa,Bx),e(Fa,Uc),e(Uc,Px),e(Fa,PBe),b(f,L$e,_),b(f,Zl,_),e(Zl,Jc),e(Jc,OJ),M(yw,OJ,null),e(Zl,IBe),e(Zl,VJ),e(VJ,qBe),b(f,x$e,_),b(f,Cn,_),e(Cn,NBe),e(Cn,XJ),e(XJ,jBe),e(Cn,DBe),e(Cn,zJ),e(zJ,GBe),e(Cn,OBe),b(f,$$e,_),M(Lw,f,_),b(f,k$e,_),b(f,Ix,_),e(Ix,VBe),b(f,S$e,_),M(Yc,f,_),b(f,R$e,_),b(f,ei,_),e(ei,Kc),e(Kc,QJ),M(xw,QJ,null),e(ei,XBe),e(ei,WJ),e(WJ,zBe),b(f,B$e,_),b(f,Mo,_),M($w,Mo,null),e(Mo,QBe),e(Mo,kw),e(kw,WBe),e(kw,qx),e(qx,HBe),e(kw,UBe),e(Mo,JBe),e(Mo,Sw),e(Sw,YBe),e(Sw,HJ),e(HJ,KBe),e(Sw,ZBe),e(Mo,ePe),e(Mo,vr),M(Rw,vr,null),e(vr,oPe),e(vr,UJ),e(UJ,rPe),e(vr,tPe),e(vr,oi),e(oi,aPe),e(oi,JJ),e(JJ,nPe),e(oi,sPe),e(oi,YJ),e(YJ,lPe),e(oi,iPe),e(vr,dPe),e(vr,y),e(y,Zc),e(Zc,KJ),e(KJ,cPe),e(Zc,fPe),e(Zc,Nx),e(Nx,mPe),e(Zc,gPe),e(y,hPe),e(y,ef),e(ef,ZJ),e(ZJ,pPe),e(ef,uPe),e(ef,jx),e(jx,_Pe),e(ef,bPe),e(y,FPe),e(y,of),e(of,eY),e(eY,vPe),e(of,TPe),e(of,Dx),e(Dx,MPe),e(of,EPe),e(y,CPe),e(y,rf),e(rf,oY),e(oY,wPe),e(rf,APe),e(rf,Gx),e(Gx,yPe),e(rf,LPe),e(y,xPe),e(y,tf),e(tf,rY),e(rY,$Pe),e(tf,kPe),e(tf,Ox),e(Ox,SPe),e(tf,RPe),e(y,BPe),e(y,af),e(af,tY),e(tY,PPe),e(af,IPe),e(af,Vx),e(Vx,qPe),e(af,NPe),e(y,jPe),e(y,nf),e(nf,aY),e(aY,DPe),e(nf,GPe),e(nf,Xx),e(Xx,OPe),e(nf,VPe),e(y,XPe),e(y,sf),e(sf,nY),e(nY,zPe),e(sf,QPe),e(sf,zx),e(zx,WPe),e(sf,HPe),e(y,UPe),e(y,lf),e(lf,sY),e(sY,JPe),e(lf,YPe),e(lf,Qx),e(Qx,KPe),e(lf,ZPe),e(y,eIe),e(y,df),e(df,lY),e(lY,oIe),e(df,rIe),e(df,Wx),e(Wx,tIe),e(df,aIe),e(y,nIe),e(y,cf),e(cf,iY),e(iY,sIe),e(cf,lIe),e(cf,Hx),e(Hx,iIe),e(cf,dIe),e(y,cIe),e(y,ff),e(ff,dY),e(dY,fIe),e(ff,mIe),e(ff,Ux),e(Ux,gIe),e(ff,hIe),e(y,pIe),e(y,mf),e(mf,cY),e(cY,uIe),e(mf,_Ie),e(mf,Jx),e(Jx,bIe),e(mf,FIe),e(y,vIe),e(y,gf),e(gf,fY),e(fY,TIe),e(gf,MIe),e(gf,Yx),e(Yx,EIe),e(gf,CIe),e(y,wIe),e(y,hf),e(hf,mY),e(mY,AIe),e(hf,yIe),e(hf,Kx),e(Kx,LIe),e(hf,xIe),e(y,$Ie),e(y,pf),e(pf,gY),e(gY,kIe),e(pf,SIe),e(pf,Zx),e(Zx,RIe),e(pf,BIe),e(y,PIe),e(y,uf),e(uf,hY),e(hY,IIe),e(uf,qIe),e(uf,e7),e(e7,NIe),e(uf,jIe),e(y,DIe),e(y,_f),e(_f,pY),e(pY,GIe),e(_f,OIe),e(_f,o7),e(o7,VIe),e(_f,XIe),e(y,zIe),e(y,bf),e(bf,uY),e(uY,QIe),e(bf,WIe),e(bf,r7),e(r7,HIe),e(bf,UIe),e(y,JIe),e(y,Ff),e(Ff,_Y),e(_Y,YIe),e(Ff,KIe),e(Ff,t7),e(t7,ZIe),e(Ff,eqe),e(y,oqe),e(y,vf),e(vf,bY),e(bY,rqe),e(vf,tqe),e(vf,a7),e(a7,aqe),e(vf,nqe),e(y,sqe),e(y,Tf),e(Tf,FY),e(FY,lqe),e(Tf,iqe),e(Tf,n7),e(n7,dqe),e(Tf,cqe),e(y,fqe),e(y,Mf),e(Mf,vY),e(vY,mqe),e(Mf,gqe),e(Mf,s7),e(s7,hqe),e(Mf,pqe),e(y,uqe),e(y,Ef),e(Ef,TY),e(TY,_qe),e(Ef,bqe),e(Ef,l7),e(l7,Fqe),e(Ef,vqe),e(y,Tqe),e(y,Cf),e(Cf,MY),e(MY,Mqe),e(Cf,Eqe),e(Cf,i7),e(i7,Cqe),e(Cf,wqe),e(y,Aqe),e(y,wf),e(wf,EY),e(EY,yqe),e(wf,Lqe),e(wf,d7),e(d7,xqe),e(wf,$qe),e(y,kqe),e(y,Af),e(Af,CY),e(CY,Sqe),e(Af,Rqe),e(Af,c7),e(c7,Bqe),e(Af,Pqe),e(y,Iqe),e(y,yf),e(yf,wY),e(wY,qqe),e(yf,Nqe),e(yf,f7),e(f7,jqe),e(yf,Dqe),e(y,Gqe),e(y,Lf),e(Lf,AY),e(AY,Oqe),e(Lf,Vqe),e(Lf,m7),e(m7,Xqe),e(Lf,zqe),e(y,Qqe),e(y,xf),e(xf,yY),e(yY,Wqe),e(xf,Hqe),e(xf,g7),e(g7,Uqe),e(xf,Jqe),e(y,Yqe),e(y,$f),e($f,LY),e(LY,Kqe),e($f,Zqe),e($f,h7),e(h7,eNe),e($f,oNe),e(y,rNe),e(y,kf),e(kf,xY),e(xY,tNe),e(kf,aNe),e(kf,p7),e(p7,nNe),e(kf,sNe),e(y,lNe),e(y,Sf),e(Sf,$Y),e($Y,iNe),e(Sf,dNe),e(Sf,u7),e(u7,cNe),e(Sf,fNe),e(y,mNe),e(y,Rf),e(Rf,kY),e(kY,gNe),e(Rf,hNe),e(Rf,_7),e(_7,pNe),e(Rf,uNe),e(y,_Ne),e(y,Bf),e(Bf,SY),e(SY,bNe),e(Bf,FNe),e(Bf,b7),e(b7,vNe),e(Bf,TNe),e(y,MNe),e(y,Pf),e(Pf,RY),e(RY,ENe),e(Pf,CNe),e(Pf,F7),e(F7,wNe),e(Pf,ANe),e(y,yNe),e(y,If),e(If,BY),e(BY,LNe),e(If,xNe),e(If,v7),e(v7,$Ne),e(If,kNe),e(y,SNe),e(y,qf),e(qf,PY),e(PY,RNe),e(qf,BNe),e(qf,T7),e(T7,PNe),e(qf,INe),e(y,qNe),e(y,Nf),e(Nf,IY),e(IY,NNe),e(Nf,jNe),e(Nf,M7),e(M7,DNe),e(Nf,GNe),e(y,ONe),e(y,jf),e(jf,qY),e(qY,VNe),e(jf,XNe),e(jf,E7),e(E7,zNe),e(jf,QNe),e(y,WNe),e(y,Df),e(Df,NY),e(NY,HNe),e(Df,UNe),e(Df,C7),e(C7,JNe),e(Df,YNe),e(y,KNe),e(y,Gf),e(Gf,jY),e(jY,ZNe),e(Gf,eje),e(Gf,w7),e(w7,oje),e(Gf,rje),e(y,tje),e(y,Of),e(Of,DY),e(DY,aje),e(Of,nje),e(Of,A7),e(A7,sje),e(Of,lje),e(y,ije),e(y,Vf),e(Vf,GY),e(GY,dje),e(Vf,cje),e(Vf,y7),e(y7,fje),e(Vf,mje),e(y,gje),e(y,Xf),e(Xf,OY),e(OY,hje),e(Xf,pje),e(Xf,L7),e(L7,uje),e(Xf,_je),e(y,bje),e(y,zf),e(zf,VY),e(VY,Fje),e(zf,vje),e(zf,x7),e(x7,Tje),e(zf,Mje),e(y,Eje),e(y,Qf),e(Qf,XY),e(XY,Cje),e(Qf,wje),e(Qf,$7),e($7,Aje),e(Qf,yje),e(y,Lje),e(y,Wf),e(Wf,zY),e(zY,xje),e(Wf,$je),e(Wf,k7),e(k7,kje),e(Wf,Sje),e(y,Rje),e(y,Hf),e(Hf,QY),e(QY,Bje),e(Hf,Pje),e(Hf,S7),e(S7,Ije),e(Hf,qje),e(y,Nje),e(y,Uf),e(Uf,WY),e(WY,jje),e(Uf,Dje),e(Uf,R7),e(R7,Gje),e(Uf,Oje),e(y,Vje),e(y,Jf),e(Jf,HY),e(HY,Xje),e(Jf,zje),e(Jf,B7),e(B7,Qje),e(Jf,Wje),e(y,Hje),e(y,Yf),e(Yf,UY),e(UY,Uje),e(Yf,Jje),e(Yf,P7),e(P7,Yje),e(Yf,Kje),e(y,Zje),e(y,Kf),e(Kf,JY),e(JY,eDe),e(Kf,oDe),e(Kf,I7),e(I7,rDe),e(Kf,tDe),e(y,aDe),e(y,Zf),e(Zf,YY),e(YY,nDe),e(Zf,sDe),e(Zf,q7),e(q7,lDe),e(Zf,iDe),e(y,dDe),e(y,em),e(em,KY),e(KY,cDe),e(em,fDe),e(em,N7),e(N7,mDe),e(em,gDe),e(y,hDe),e(y,om),e(om,ZY),e(ZY,pDe),e(om,uDe),e(om,j7),e(j7,_De),e(om,bDe),e(y,FDe),e(y,rm),e(rm,eK),e(eK,vDe),e(rm,TDe),e(rm,D7),e(D7,MDe),e(rm,EDe),e(y,CDe),e(y,tm),e(tm,oK),e(oK,wDe),e(tm,ADe),e(tm,G7),e(G7,yDe),e(tm,LDe),e(y,xDe),e(y,am),e(am,rK),e(rK,$De),e(am,kDe),e(am,tK),e(tK,SDe),e(am,RDe),e(y,BDe),e(y,nm),e(nm,aK),e(aK,PDe),e(nm,IDe),e(nm,O7),e(O7,qDe),e(nm,NDe),e(y,jDe),e(y,sm),e(sm,nK),e(nK,DDe),e(sm,GDe),e(sm,V7),e(V7,ODe),e(sm,VDe),e(y,XDe),e(y,lm),e(lm,sK),e(sK,zDe),e(lm,QDe),e(lm,X7),e(X7,WDe),e(lm,HDe),e(y,UDe),e(y,im),e(im,lK),e(lK,JDe),e(im,YDe),e(im,z7),e(z7,KDe),e(im,ZDe),e(y,eGe),e(y,dm),e(dm,iK),e(iK,oGe),e(dm,rGe),e(dm,Q7),e(Q7,tGe),e(dm,aGe),e(y,nGe),e(y,cm),e(cm,dK),e(dK,sGe),e(cm,lGe),e(cm,W7),e(W7,iGe),e(cm,dGe),e(y,cGe),e(y,fm),e(fm,cK),e(cK,fGe),e(fm,mGe),e(fm,H7),e(H7,gGe),e(fm,hGe),e(y,pGe),e(y,mm),e(mm,fK),e(fK,uGe),e(mm,_Ge),e(mm,U7),e(U7,bGe),e(mm,FGe),e(y,vGe),e(y,gm),e(gm,mK),e(mK,TGe),e(gm,MGe),e(gm,J7),e(J7,EGe),e(gm,CGe),e(y,wGe),e(y,hm),e(hm,gK),e(gK,AGe),e(hm,yGe),e(hm,Y7),e(Y7,LGe),e(hm,xGe),e(y,$Ge),e(y,pm),e(pm,hK),e(hK,kGe),e(pm,SGe),e(pm,K7),e(K7,RGe),e(pm,BGe),e(y,PGe),e(y,um),e(um,pK),e(pK,IGe),e(um,qGe),e(um,Z7),e(Z7,NGe),e(um,jGe),e(y,DGe),e(y,_m),e(_m,uK),e(uK,GGe),e(_m,OGe),e(_m,e$),e(e$,VGe),e(_m,XGe),e(y,zGe),e(y,bm),e(bm,_K),e(_K,QGe),e(bm,WGe),e(bm,o$),e(o$,HGe),e(bm,UGe),e(y,JGe),e(y,Fm),e(Fm,bK),e(bK,YGe),e(Fm,KGe),e(Fm,r$),e(r$,ZGe),e(Fm,eOe),e(y,oOe),e(y,vm),e(vm,FK),e(FK,rOe),e(vm,tOe),e(vm,t$),e(t$,aOe),e(vm,nOe),e(y,sOe),e(y,Tm),e(Tm,vK),e(vK,lOe),e(Tm,iOe),e(Tm,a$),e(a$,dOe),e(Tm,cOe),e(y,fOe),e(y,Mm),e(Mm,TK),e(TK,mOe),e(Mm,gOe),e(Mm,n$),e(n$,hOe),e(Mm,pOe),e(y,uOe),e(y,Em),e(Em,MK),e(MK,_Oe),e(Em,bOe),e(Em,s$),e(s$,FOe),e(Em,vOe),e(y,TOe),e(y,Cm),e(Cm,EK),e(EK,MOe),e(Cm,EOe),e(Cm,l$),e(l$,COe),e(Cm,wOe),e(y,AOe),e(y,wm),e(wm,CK),e(CK,yOe),e(wm,LOe),e(wm,i$),e(i$,xOe),e(wm,$Oe),e(y,kOe),e(y,Am),e(Am,wK),e(wK,SOe),e(Am,ROe),e(Am,d$),e(d$,BOe),e(Am,POe),e(y,IOe),e(y,ym),e(ym,AK),e(AK,qOe),e(ym,NOe),e(ym,c$),e(c$,jOe),e(ym,DOe),e(y,GOe),e(y,Lm),e(Lm,yK),e(yK,OOe),e(Lm,VOe),e(Lm,f$),e(f$,XOe),e(Lm,zOe),e(y,QOe),e(y,xm),e(xm,LK),e(LK,WOe),e(xm,HOe),e(xm,m$),e(m$,UOe),e(xm,JOe),e(y,YOe),e(y,$m),e($m,xK),e(xK,KOe),e($m,ZOe),e($m,g$),e(g$,eVe),e($m,oVe),e(y,rVe),e(y,km),e(km,$K),e($K,tVe),e(km,aVe),e(km,h$),e(h$,nVe),e(km,sVe),e(y,lVe),e(y,Sm),e(Sm,kK),e(kK,iVe),e(Sm,dVe),e(Sm,p$),e(p$,cVe),e(Sm,fVe),e(y,mVe),e(y,Rm),e(Rm,SK),e(SK,gVe),e(Rm,hVe),e(Rm,u$),e(u$,pVe),e(Rm,uVe),e(y,_Ve),e(y,Bm),e(Bm,RK),e(RK,bVe),e(Bm,FVe),e(Bm,_$),e(_$,vVe),e(Bm,TVe),e(y,MVe),e(y,Pm),e(Pm,BK),e(BK,EVe),e(Pm,CVe),e(Pm,b$),e(b$,wVe),e(Pm,AVe),e(y,yVe),e(y,Im),e(Im,PK),e(PK,LVe),e(Im,xVe),e(Im,F$),e(F$,$Ve),e(Im,kVe),e(y,SVe),e(y,qm),e(qm,IK),e(IK,RVe),e(qm,BVe),e(qm,v$),e(v$,PVe),e(qm,IVe),e(y,qVe),e(y,Nm),e(Nm,qK),e(qK,NVe),e(Nm,jVe),e(Nm,T$),e(T$,DVe),e(Nm,GVe),e(y,OVe),e(y,jm),e(jm,NK),e(NK,VVe),e(jm,XVe),e(jm,M$),e(M$,zVe),e(jm,QVe),e(y,WVe),e(y,Dm),e(Dm,jK),e(jK,HVe),e(Dm,UVe),e(Dm,E$),e(E$,JVe),e(Dm,YVe),e(y,KVe),e(y,Gm),e(Gm,DK),e(DK,ZVe),e(Gm,eXe),e(Gm,C$),e(C$,oXe),e(Gm,rXe),e(y,tXe),e(y,Om),e(Om,GK),e(GK,aXe),e(Om,nXe),e(Om,w$),e(w$,sXe),e(Om,lXe),e(y,iXe),e(y,Vm),e(Vm,OK),e(OK,dXe),e(Vm,cXe),e(Vm,A$),e(A$,fXe),e(Vm,mXe),e(vr,gXe),M(Xm,vr,null),e(Mo,hXe),e(Mo,zm),M(Bw,zm,null),e(zm,pXe),e(zm,VK),e(VK,uXe),b(f,P$e,_),b(f,ri,_),e(ri,Qm),e(Qm,XK),M(Pw,XK,null),e(ri,_Xe),e(ri,zK),e(zK,bXe),b(f,I$e,_),b(f,Eo,_),M(Iw,Eo,null),e(Eo,FXe),e(Eo,qw),e(qw,vXe),e(qw,y$),e(y$,TXe),e(qw,MXe),e(Eo,EXe),e(Eo,Nw),e(Nw,CXe),e(Nw,QK),e(QK,wXe),e(Nw,AXe),e(Eo,yXe),e(Eo,Tr),M(jw,Tr,null),e(Tr,LXe),e(Tr,WK),e(WK,xXe),e(Tr,$Xe),e(Tr,va),e(va,kXe),e(va,HK),e(HK,SXe),e(va,RXe),e(va,UK),e(UK,BXe),e(va,PXe),e(va,JK),e(JK,IXe),e(va,qXe),e(Tr,NXe),e(Tr,S),e(S,wn),e(wn,YK),e(YK,jXe),e(wn,DXe),e(wn,L$),e(L$,GXe),e(wn,OXe),e(wn,x$),e(x$,VXe),e(wn,XXe),e(S,zXe),e(S,An),e(An,KK),e(KK,QXe),e(An,WXe),e(An,$$),e($$,HXe),e(An,UXe),e(An,k$),e(k$,JXe),e(An,YXe),e(S,KXe),e(S,yn),e(yn,ZK),e(ZK,ZXe),e(yn,eze),e(yn,S$),e(S$,oze),e(yn,rze),e(yn,R$),e(R$,tze),e(yn,aze),e(S,nze),e(S,Wm),e(Wm,eZ),e(eZ,sze),e(Wm,lze),e(Wm,B$),e(B$,ize),e(Wm,dze),e(S,cze),e(S,Ln),e(Ln,oZ),e(oZ,fze),e(Ln,mze),e(Ln,P$),e(P$,gze),e(Ln,hze),e(Ln,I$),e(I$,pze),e(Ln,uze),e(S,_ze),e(S,Hm),e(Hm,rZ),e(rZ,bze),e(Hm,Fze),e(Hm,q$),e(q$,vze),e(Hm,Tze),e(S,Mze),e(S,Um),e(Um,tZ),e(tZ,Eze),e(Um,Cze),e(Um,N$),e(N$,wze),e(Um,Aze),e(S,yze),e(S,Jm),e(Jm,aZ),e(aZ,Lze),e(Jm,xze),e(Jm,j$),e(j$,$ze),e(Jm,kze),e(S,Sze),e(S,xn),e(xn,nZ),e(nZ,Rze),e(xn,Bze),e(xn,D$),e(D$,Pze),e(xn,Ize),e(xn,G$),e(G$,qze),e(xn,Nze),e(S,jze),e(S,$n),e($n,sZ),e(sZ,Dze),e($n,Gze),e($n,O$),e(O$,Oze),e($n,Vze),e($n,V$),e(V$,Xze),e($n,zze),e(S,Qze),e(S,kn),e(kn,lZ),e(lZ,Wze),e(kn,Hze),e(kn,X$),e(X$,Uze),e(kn,Jze),e(kn,z$),e(z$,Yze),e(kn,Kze),e(S,Zze),e(S,Ym),e(Ym,iZ),e(iZ,eQe),e(Ym,oQe),e(Ym,Q$),e(Q$,rQe),e(Ym,tQe),e(S,aQe),e(S,Km),e(Km,dZ),e(dZ,nQe),e(Km,sQe),e(Km,W$),e(W$,lQe),e(Km,iQe),e(S,dQe),e(S,Sn),e(Sn,cZ),e(cZ,cQe),e(Sn,fQe),e(Sn,H$),e(H$,mQe),e(Sn,gQe),e(Sn,U$),e(U$,hQe),e(Sn,pQe),e(S,uQe),e(S,Zm),e(Zm,fZ),e(fZ,_Qe),e(Zm,bQe),e(Zm,J$),e(J$,FQe),e(Zm,vQe),e(S,TQe),e(S,Rn),e(Rn,mZ),e(mZ,MQe),e(Rn,EQe),e(Rn,Y$),e(Y$,CQe),e(Rn,wQe),e(Rn,K$),e(K$,AQe),e(Rn,yQe),e(S,LQe),e(S,Bn),e(Bn,gZ),e(gZ,xQe),e(Bn,$Qe),e(Bn,Z$),e(Z$,kQe),e(Bn,SQe),e(Bn,ek),e(ek,RQe),e(Bn,BQe),e(S,PQe),e(S,Pn),e(Pn,hZ),e(hZ,IQe),e(Pn,qQe),e(Pn,ok),e(ok,NQe),e(Pn,jQe),e(Pn,pZ),e(pZ,DQe),e(Pn,GQe),e(S,OQe),e(S,eg),e(eg,uZ),e(uZ,VQe),e(eg,XQe),e(eg,rk),e(rk,zQe),e(eg,QQe),e(S,WQe),e(S,In),e(In,_Z),e(_Z,HQe),e(In,UQe),e(In,tk),e(tk,JQe),e(In,YQe),e(In,ak),e(ak,KQe),e(In,ZQe),e(S,eWe),e(S,og),e(og,bZ),e(bZ,oWe),e(og,rWe),e(og,nk),e(nk,tWe),e(og,aWe),e(S,nWe),e(S,qn),e(qn,FZ),e(FZ,sWe),e(qn,lWe),e(qn,sk),e(sk,iWe),e(qn,dWe),e(qn,lk),e(lk,cWe),e(qn,fWe),e(S,mWe),e(S,Nn),e(Nn,vZ),e(vZ,gWe),e(Nn,hWe),e(Nn,ik),e(ik,pWe),e(Nn,uWe),e(Nn,dk),e(dk,_We),e(Nn,bWe),e(S,FWe),e(S,jn),e(jn,TZ),e(TZ,vWe),e(jn,TWe),e(jn,ck),e(ck,MWe),e(jn,EWe),e(jn,fk),e(fk,CWe),e(jn,wWe),e(S,AWe),e(S,rg),e(rg,MZ),e(MZ,yWe),e(rg,LWe),e(rg,mk),e(mk,xWe),e(rg,$We),e(S,kWe),e(S,Dn),e(Dn,EZ),e(EZ,SWe),e(Dn,RWe),e(Dn,gk),e(gk,BWe),e(Dn,PWe),e(Dn,hk),e(hk,IWe),e(Dn,qWe),e(S,NWe),e(S,tg),e(tg,CZ),e(CZ,jWe),e(tg,DWe),e(tg,pk),e(pk,GWe),e(tg,OWe),e(S,VWe),e(S,Gn),e(Gn,wZ),e(wZ,XWe),e(Gn,zWe),e(Gn,uk),e(uk,QWe),e(Gn,WWe),e(Gn,_k),e(_k,HWe),e(Gn,UWe),e(S,JWe),e(S,On),e(On,AZ),e(AZ,YWe),e(On,KWe),e(On,bk),e(bk,ZWe),e(On,eHe),e(On,Fk),e(Fk,oHe),e(On,rHe),e(S,tHe),e(S,Vn),e(Vn,yZ),e(yZ,aHe),e(Vn,nHe),e(Vn,vk),e(vk,sHe),e(Vn,lHe),e(Vn,Tk),e(Tk,iHe),e(Vn,dHe),e(S,cHe),e(S,Xn),e(Xn,LZ),e(LZ,fHe),e(Xn,mHe),e(Xn,Mk),e(Mk,gHe),e(Xn,hHe),e(Xn,Ek),e(Ek,pHe),e(Xn,uHe),e(S,_He),e(S,ag),e(ag,xZ),e(xZ,bHe),e(ag,FHe),e(ag,Ck),e(Ck,vHe),e(ag,THe),e(S,MHe),e(S,zn),e(zn,$Z),e($Z,EHe),e(zn,CHe),e(zn,wk),e(wk,wHe),e(zn,AHe),e(zn,Ak),e(Ak,yHe),e(zn,LHe),e(S,xHe),e(S,Qn),e(Qn,kZ),e(kZ,$He),e(Qn,kHe),e(Qn,yk),e(yk,SHe),e(Qn,RHe),e(Qn,Lk),e(Lk,BHe),e(Qn,PHe),e(S,IHe),e(S,Wn),e(Wn,SZ),e(SZ,qHe),e(Wn,NHe),e(Wn,xk),e(xk,jHe),e(Wn,DHe),e(Wn,$k),e($k,GHe),e(Wn,OHe),e(S,VHe),e(S,Hn),e(Hn,RZ),e(RZ,XHe),e(Hn,zHe),e(Hn,kk),e(kk,QHe),e(Hn,WHe),e(Hn,Sk),e(Sk,HHe),e(Hn,UHe),e(S,JHe),e(S,Un),e(Un,BZ),e(BZ,YHe),e(Un,KHe),e(Un,Rk),e(Rk,ZHe),e(Un,eUe),e(Un,Bk),e(Bk,oUe),e(Un,rUe),e(S,tUe),e(S,Jn),e(Jn,PZ),e(PZ,aUe),e(Jn,nUe),e(Jn,Pk),e(Pk,sUe),e(Jn,lUe),e(Jn,Ik),e(Ik,iUe),e(Jn,dUe),e(S,cUe),e(S,ng),e(ng,IZ),e(IZ,fUe),e(ng,mUe),e(ng,qk),e(qk,gUe),e(ng,hUe),e(S,pUe),e(S,Yn),e(Yn,qZ),e(qZ,uUe),e(Yn,_Ue),e(Yn,Nk),e(Nk,bUe),e(Yn,FUe),e(Yn,jk),e(jk,vUe),e(Yn,TUe),e(S,MUe),e(S,sg),e(sg,NZ),e(NZ,EUe),e(sg,CUe),e(sg,Dk),e(Dk,wUe),e(sg,AUe),e(S,yUe),e(S,lg),e(lg,jZ),e(jZ,LUe),e(lg,xUe),e(lg,Gk),e(Gk,$Ue),e(lg,kUe),e(S,SUe),e(S,Kn),e(Kn,DZ),e(DZ,RUe),e(Kn,BUe),e(Kn,Ok),e(Ok,PUe),e(Kn,IUe),e(Kn,Vk),e(Vk,qUe),e(Kn,NUe),e(S,jUe),e(S,Zn),e(Zn,GZ),e(GZ,DUe),e(Zn,GUe),e(Zn,Xk),e(Xk,OUe),e(Zn,VUe),e(Zn,zk),e(zk,XUe),e(Zn,zUe),e(S,QUe),e(S,ig),e(ig,OZ),e(OZ,WUe),e(ig,HUe),e(ig,Qk),e(Qk,UUe),e(ig,JUe),e(S,YUe),e(S,es),e(es,VZ),e(VZ,KUe),e(es,ZUe),e(es,Wk),e(Wk,eJe),e(es,oJe),e(es,Hk),e(Hk,rJe),e(es,tJe),e(S,aJe),e(S,os),e(os,XZ),e(XZ,nJe),e(os,sJe),e(os,Uk),e(Uk,lJe),e(os,iJe),e(os,Jk),e(Jk,dJe),e(os,cJe),e(S,fJe),e(S,rs),e(rs,zZ),e(zZ,mJe),e(rs,gJe),e(rs,Yk),e(Yk,hJe),e(rs,pJe),e(rs,Kk),e(Kk,uJe),e(rs,_Je),e(S,bJe),e(S,ts),e(ts,QZ),e(QZ,FJe),e(ts,vJe),e(ts,Zk),e(Zk,TJe),e(ts,MJe),e(ts,eS),e(eS,EJe),e(ts,CJe),e(S,wJe),e(S,as),e(as,WZ),e(WZ,AJe),e(as,yJe),e(as,oS),e(oS,LJe),e(as,xJe),e(as,rS),e(rS,$Je),e(as,kJe),e(S,SJe),e(S,dg),e(dg,HZ),e(HZ,RJe),e(dg,BJe),e(dg,tS),e(tS,PJe),e(dg,IJe),e(S,qJe),e(S,cg),e(cg,UZ),e(UZ,NJe),e(cg,jJe),e(cg,aS),e(aS,DJe),e(cg,GJe),e(S,OJe),e(S,fg),e(fg,JZ),e(JZ,VJe),e(fg,XJe),e(fg,nS),e(nS,zJe),e(fg,QJe),e(S,WJe),e(S,mg),e(mg,YZ),e(YZ,HJe),e(mg,UJe),e(mg,sS),e(sS,JJe),e(mg,YJe),e(S,KJe),e(S,ns),e(ns,KZ),e(KZ,ZJe),e(ns,eYe),e(ns,lS),e(lS,oYe),e(ns,rYe),e(ns,iS),e(iS,tYe),e(ns,aYe),e(S,nYe),e(S,gg),e(gg,ZZ),e(ZZ,sYe),e(gg,lYe),e(gg,dS),e(dS,iYe),e(gg,dYe),e(S,cYe),e(S,ss),e(ss,eee),e(eee,fYe),e(ss,mYe),e(ss,cS),e(cS,gYe),e(ss,hYe),e(ss,fS),e(fS,pYe),e(ss,uYe),e(S,_Ye),e(S,ls),e(ls,oee),e(oee,bYe),e(ls,FYe),e(ls,mS),e(mS,vYe),e(ls,TYe),e(ls,gS),e(gS,MYe),e(ls,EYe),e(S,CYe),e(S,is),e(is,ree),e(ree,wYe),e(is,AYe),e(is,hS),e(hS,yYe),e(is,LYe),e(is,pS),e(pS,xYe),e(is,$Ye),e(S,kYe),e(S,ds),e(ds,tee),e(tee,SYe),e(ds,RYe),e(ds,uS),e(uS,BYe),e(ds,PYe),e(ds,_S),e(_S,IYe),e(ds,qYe),e(S,NYe),e(S,cs),e(cs,aee),e(aee,jYe),e(cs,DYe),e(cs,bS),e(bS,GYe),e(cs,OYe),e(cs,FS),e(FS,VYe),e(cs,XYe),e(S,zYe),e(S,fs),e(fs,nee),e(nee,QYe),e(fs,WYe),e(fs,vS),e(vS,HYe),e(fs,UYe),e(fs,TS),e(TS,JYe),e(fs,YYe),e(S,KYe),e(S,hg),e(hg,see),e(see,ZYe),e(hg,eKe),e(hg,MS),e(MS,oKe),e(hg,rKe),e(S,tKe),e(S,pg),e(pg,lee),e(lee,aKe),e(pg,nKe),e(pg,ES),e(ES,sKe),e(pg,lKe),e(S,iKe),e(S,ms),e(ms,iee),e(iee,dKe),e(ms,cKe),e(ms,CS),e(CS,fKe),e(ms,mKe),e(ms,wS),e(wS,gKe),e(ms,hKe),e(S,pKe),e(S,gs),e(gs,dee),e(dee,uKe),e(gs,_Ke),e(gs,AS),e(AS,bKe),e(gs,FKe),e(gs,yS),e(yS,vKe),e(gs,TKe),e(S,MKe),e(S,hs),e(hs,cee),e(cee,EKe),e(hs,CKe),e(hs,LS),e(LS,wKe),e(hs,AKe),e(hs,xS),e(xS,yKe),e(hs,LKe),e(S,xKe),e(S,ug),e(ug,fee),e(fee,$Ke),e(ug,kKe),e(ug,$S),e($S,SKe),e(ug,RKe),e(S,BKe),e(S,_g),e(_g,mee),e(mee,PKe),e(_g,IKe),e(_g,kS),e(kS,qKe),e(_g,NKe),e(S,jKe),e(S,bg),e(bg,gee),e(gee,DKe),e(bg,GKe),e(bg,SS),e(SS,OKe),e(bg,VKe),e(S,XKe),e(S,Fg),e(Fg,hee),e(hee,zKe),e(Fg,QKe),e(Fg,RS),e(RS,WKe),e(Fg,HKe),e(S,UKe),e(S,ps),e(ps,pee),e(pee,JKe),e(ps,YKe),e(ps,BS),e(BS,KKe),e(ps,ZKe),e(ps,PS),e(PS,eZe),e(ps,oZe),e(S,rZe),e(S,vg),e(vg,uee),e(uee,tZe),e(vg,aZe),e(vg,IS),e(IS,nZe),e(vg,sZe),e(S,lZe),e(S,Tg),e(Tg,_ee),e(_ee,iZe),e(Tg,dZe),e(Tg,qS),e(qS,cZe),e(Tg,fZe),e(S,mZe),e(S,us),e(us,bee),e(bee,gZe),e(us,hZe),e(us,NS),e(NS,pZe),e(us,uZe),e(us,jS),e(jS,_Ze),e(us,bZe),e(S,FZe),e(S,_s),e(_s,Fee),e(Fee,vZe),e(_s,TZe),e(_s,DS),e(DS,MZe),e(_s,EZe),e(_s,GS),e(GS,CZe),e(_s,wZe),e(Tr,AZe),M(Mg,Tr,null),e(Eo,yZe),e(Eo,Eg),M(Dw,Eg,null),e(Eg,LZe),e(Eg,vee),e(vee,xZe),b(f,q$e,_),b(f,ti,_),e(ti,Cg),e(Cg,Tee),M(Gw,Tee,null),e(ti,$Ze),e(ti,Mee),e(Mee,kZe),b(f,N$e,_),b(f,Co,_),M(Ow,Co,null),e(Co,SZe),e(Co,Vw),e(Vw,RZe),e(Vw,OS),e(OS,BZe),e(Vw,PZe),e(Co,IZe),e(Co,Xw),e(Xw,qZe),e(Xw,Eee),e(Eee,NZe),e(Xw,jZe),e(Co,DZe),e(Co,Ve),M(zw,Ve,null),e(Ve,GZe),e(Ve,Cee),e(Cee,OZe),e(Ve,VZe),e(Ve,Ta),e(Ta,XZe),e(Ta,wee),e(wee,zZe),e(Ta,QZe),e(Ta,Aee),e(Aee,WZe),e(Ta,HZe),e(Ta,yee),e(yee,UZe),e(Ta,JZe),e(Ve,YZe),e(Ve,fe),e(fe,wg),e(wg,Lee),e(Lee,KZe),e(wg,ZZe),e(wg,VS),e(VS,eeo),e(wg,oeo),e(fe,reo),e(fe,Ag),e(Ag,xee),e(xee,teo),e(Ag,aeo),e(Ag,XS),e(XS,neo),e(Ag,seo),e(fe,leo),e(fe,yg),e(yg,$ee),e($ee,ieo),e(yg,deo),e(yg,zS),e(zS,ceo),e(yg,feo),e(fe,meo),e(fe,Lg),e(Lg,kee),e(kee,geo),e(Lg,heo),e(Lg,QS),e(QS,peo),e(Lg,ueo),e(fe,_eo),e(fe,xg),e(xg,See),e(See,beo),e(xg,Feo),e(xg,WS),e(WS,veo),e(xg,Teo),e(fe,Meo),e(fe,$g),e($g,Ree),e(Ree,Eeo),e($g,Ceo),e($g,HS),e(HS,weo),e($g,Aeo),e(fe,yeo),e(fe,kg),e(kg,Bee),e(Bee,Leo),e(kg,xeo),e(kg,US),e(US,$eo),e(kg,keo),e(fe,Seo),e(fe,Sg),e(Sg,Pee),e(Pee,Reo),e(Sg,Beo),e(Sg,JS),e(JS,Peo),e(Sg,Ieo),e(fe,qeo),e(fe,Rg),e(Rg,Iee),e(Iee,Neo),e(Rg,jeo),e(Rg,YS),e(YS,Deo),e(Rg,Geo),e(fe,Oeo),e(fe,Bg),e(Bg,qee),e(qee,Veo),e(Bg,Xeo),e(Bg,KS),e(KS,zeo),e(Bg,Qeo),e(fe,Weo),e(fe,Pg),e(Pg,Nee),e(Nee,Heo),e(Pg,Ueo),e(Pg,ZS),e(ZS,Jeo),e(Pg,Yeo),e(fe,Keo),e(fe,Ig),e(Ig,jee),e(jee,Zeo),e(Ig,eoo),e(Ig,eR),e(eR,ooo),e(Ig,roo),e(fe,too),e(fe,qg),e(qg,Dee),e(Dee,aoo),e(qg,noo),e(qg,oR),e(oR,soo),e(qg,loo),e(fe,ioo),e(fe,Ng),e(Ng,Gee),e(Gee,doo),e(Ng,coo),e(Ng,rR),e(rR,foo),e(Ng,moo),e(fe,goo),e(fe,jg),e(jg,Oee),e(Oee,hoo),e(jg,poo),e(jg,tR),e(tR,uoo),e(jg,_oo),e(fe,boo),e(fe,Dg),e(Dg,Vee),e(Vee,Foo),e(Dg,voo),e(Dg,aR),e(aR,Too),e(Dg,Moo),e(fe,Eoo),e(fe,Gg),e(Gg,Xee),e(Xee,Coo),e(Gg,woo),e(Gg,nR),e(nR,Aoo),e(Gg,yoo),e(fe,Loo),e(fe,Og),e(Og,zee),e(zee,xoo),e(Og,$oo),e(Og,sR),e(sR,koo),e(Og,Soo),e(Ve,Roo),M(Vg,Ve,null),e(Ve,Boo),M(Xg,Ve,null),e(Co,Poo),e(Co,zg),M(Qw,zg,null),e(zg,Ioo),e(zg,Qee),e(Qee,qoo),b(f,j$e,_),b(f,ai,_),e(ai,Qg),e(Qg,Wee),M(Ww,Wee,null),e(ai,Noo),e(ai,Hee),e(Hee,joo),b(f,D$e,_),b(f,wo,_),M(Hw,wo,null),e(wo,Doo),e(wo,Uw),e(Uw,Goo),e(Uw,lR),e(lR,Ooo),e(Uw,Voo),e(wo,Xoo),e(wo,Jw),e(Jw,zoo),e(Jw,Uee),e(Uee,Qoo),e(Jw,Woo),e(wo,Hoo),e(wo,Xe),M(Yw,Xe,null),e(Xe,Uoo),e(Xe,Jee),e(Jee,Joo),e(Xe,Yoo),e(Xe,ni),e(ni,Koo),e(ni,Yee),e(Yee,Zoo),e(ni,ero),e(ni,Kee),e(Kee,oro),e(ni,rro),e(Xe,tro),e(Xe,Pe),e(Pe,Wg),e(Wg,Zee),e(Zee,aro),e(Wg,nro),e(Wg,iR),e(iR,sro),e(Wg,lro),e(Pe,iro),e(Pe,Hg),e(Hg,eoe),e(eoe,dro),e(Hg,cro),e(Hg,dR),e(dR,fro),e(Hg,mro),e(Pe,gro),e(Pe,Ug),e(Ug,ooe),e(ooe,hro),e(Ug,pro),e(Ug,cR),e(cR,uro),e(Ug,_ro),e(Pe,bro),e(Pe,Jg),e(Jg,roe),e(roe,Fro),e(Jg,vro),e(Jg,fR),e(fR,Tro),e(Jg,Mro),e(Pe,Ero),e(Pe,Yg),e(Yg,toe),e(toe,Cro),e(Yg,wro),e(Yg,mR),e(mR,Aro),e(Yg,yro),e(Pe,Lro),e(Pe,Kg),e(Kg,aoe),e(aoe,xro),e(Kg,$ro),e(Kg,gR),e(gR,kro),e(Kg,Sro),e(Pe,Rro),e(Pe,Zg),e(Zg,noe),e(noe,Bro),e(Zg,Pro),e(Zg,hR),e(hR,Iro),e(Zg,qro),e(Pe,Nro),e(Pe,eh),e(eh,soe),e(soe,jro),e(eh,Dro),e(eh,pR),e(pR,Gro),e(eh,Oro),e(Xe,Vro),M(oh,Xe,null),e(Xe,Xro),M(rh,Xe,null),e(wo,zro),e(wo,th),M(Kw,th,null),e(th,Qro),e(th,loe),e(loe,Wro),b(f,G$e,_),b(f,si,_),e(si,ah),e(ah,ioe),M(Zw,ioe,null),e(si,Hro),e(si,doe),e(doe,Uro),b(f,O$e,_),b(f,Ao,_),M(eA,Ao,null),e(Ao,Jro),e(Ao,li),e(li,Yro),e(li,uR),e(uR,Kro),e(li,Zro),e(li,_R),e(_R,eto),e(li,oto),e(Ao,rto),e(Ao,oA),e(oA,tto),e(oA,coe),e(coe,ato),e(oA,nto),e(Ao,sto),e(Ao,Kr),M(rA,Kr,null),e(Kr,lto),e(Kr,foe),e(foe,ito),e(Kr,dto),e(Kr,ii),e(ii,cto),e(ii,moe),e(moe,fto),e(ii,mto),e(ii,bR),e(bR,gto),e(ii,hto),e(Kr,pto),M(nh,Kr,null),e(Ao,uto),e(Ao,ze),M(tA,ze,null),e(ze,_to),e(ze,goe),e(goe,bto),e(ze,Fto),e(ze,Ma),e(Ma,vto),e(Ma,hoe),e(hoe,Tto),e(Ma,Mto),e(Ma,poe),e(poe,Eto),e(Ma,Cto),e(Ma,uoe),e(uoe,wto),e(Ma,Ato),e(ze,yto),e(ze,x),e(x,sh),e(sh,_oe),e(_oe,Lto),e(sh,xto),e(sh,FR),e(FR,$to),e(sh,kto),e(x,Sto),e(x,lh),e(lh,boe),e(boe,Rto),e(lh,Bto),e(lh,vR),e(vR,Pto),e(lh,Ito),e(x,qto),e(x,ih),e(ih,Foe),e(Foe,Nto),e(ih,jto),e(ih,TR),e(TR,Dto),e(ih,Gto),e(x,Oto),e(x,dh),e(dh,voe),e(voe,Vto),e(dh,Xto),e(dh,MR),e(MR,zto),e(dh,Qto),e(x,Wto),e(x,ch),e(ch,Toe),e(Toe,Hto),e(ch,Uto),e(ch,ER),e(ER,Jto),e(ch,Yto),e(x,Kto),e(x,fh),e(fh,Moe),e(Moe,Zto),e(fh,eao),e(fh,CR),e(CR,oao),e(fh,rao),e(x,tao),e(x,mh),e(mh,Eoe),e(Eoe,aao),e(mh,nao),e(mh,wR),e(wR,sao),e(mh,lao),e(x,iao),e(x,gh),e(gh,Coe),e(Coe,dao),e(gh,cao),e(gh,AR),e(AR,fao),e(gh,mao),e(x,gao),e(x,hh),e(hh,woe),e(woe,hao),e(hh,pao),e(hh,yR),e(yR,uao),e(hh,_ao),e(x,bao),e(x,ph),e(ph,Aoe),e(Aoe,Fao),e(ph,vao),e(ph,LR),e(LR,Tao),e(ph,Mao),e(x,Eao),e(x,uh),e(uh,yoe),e(yoe,Cao),e(uh,wao),e(uh,xR),e(xR,Aao),e(uh,yao),e(x,Lao),e(x,_h),e(_h,Loe),e(Loe,xao),e(_h,$ao),e(_h,$R),e($R,kao),e(_h,Sao),e(x,Rao),e(x,bh),e(bh,xoe),e(xoe,Bao),e(bh,Pao),e(bh,kR),e(kR,Iao),e(bh,qao),e(x,Nao),e(x,Fh),e(Fh,$oe),e($oe,jao),e(Fh,Dao),e(Fh,SR),e(SR,Gao),e(Fh,Oao),e(x,Vao),e(x,vh),e(vh,koe),e(koe,Xao),e(vh,zao),e(vh,RR),e(RR,Qao),e(vh,Wao),e(x,Hao),e(x,Th),e(Th,Soe),e(Soe,Uao),e(Th,Jao),e(Th,BR),e(BR,Yao),e(Th,Kao),e(x,Zao),e(x,Mh),e(Mh,Roe),e(Roe,eno),e(Mh,ono),e(Mh,PR),e(PR,rno),e(Mh,tno),e(x,ano),e(x,Eh),e(Eh,Boe),e(Boe,nno),e(Eh,sno),e(Eh,IR),e(IR,lno),e(Eh,ino),e(x,dno),e(x,Ch),e(Ch,Poe),e(Poe,cno),e(Ch,fno),e(Ch,qR),e(qR,mno),e(Ch,gno),e(x,hno),e(x,wh),e(wh,Ioe),e(Ioe,pno),e(wh,uno),e(wh,NR),e(NR,_no),e(wh,bno),e(x,Fno),e(x,Ah),e(Ah,qoe),e(qoe,vno),e(Ah,Tno),e(Ah,jR),e(jR,Mno),e(Ah,Eno),e(x,Cno),e(x,yh),e(yh,Noe),e(Noe,wno),e(yh,Ano),e(yh,DR),e(DR,yno),e(yh,Lno),e(x,xno),e(x,Lh),e(Lh,joe),e(joe,$no),e(Lh,kno),e(Lh,GR),e(GR,Sno),e(Lh,Rno),e(x,Bno),e(x,xh),e(xh,Doe),e(Doe,Pno),e(xh,Ino),e(xh,OR),e(OR,qno),e(xh,Nno),e(x,jno),e(x,$h),e($h,Goe),e(Goe,Dno),e($h,Gno),e($h,VR),e(VR,Ono),e($h,Vno),e(x,Xno),e(x,kh),e(kh,Ooe),e(Ooe,zno),e(kh,Qno),e(kh,XR),e(XR,Wno),e(kh,Hno),e(x,Uno),e(x,Sh),e(Sh,Voe),e(Voe,Jno),e(Sh,Yno),e(Sh,zR),e(zR,Kno),e(Sh,Zno),e(x,eso),e(x,Rh),e(Rh,Xoe),e(Xoe,oso),e(Rh,rso),e(Rh,QR),e(QR,tso),e(Rh,aso),e(x,nso),e(x,bs),e(bs,zoe),e(zoe,sso),e(bs,lso),e(bs,WR),e(WR,iso),e(bs,dso),e(bs,HR),e(HR,cso),e(bs,fso),e(x,mso),e(x,Bh),e(Bh,Qoe),e(Qoe,gso),e(Bh,hso),e(Bh,UR),e(UR,pso),e(Bh,uso),e(x,_so),e(x,Ph),e(Ph,Woe),e(Woe,bso),e(Ph,Fso),e(Ph,JR),e(JR,vso),e(Ph,Tso),e(x,Mso),e(x,Ih),e(Ih,Hoe),e(Hoe,Eso),e(Ih,Cso),e(Ih,YR),e(YR,wso),e(Ih,Aso),e(x,yso),e(x,qh),e(qh,Uoe),e(Uoe,Lso),e(qh,xso),e(qh,KR),e(KR,$so),e(qh,kso),e(x,Sso),e(x,Nh),e(Nh,Joe),e(Joe,Rso),e(Nh,Bso),e(Nh,ZR),e(ZR,Pso),e(Nh,Iso),e(x,qso),e(x,jh),e(jh,Yoe),e(Yoe,Nso),e(jh,jso),e(jh,eB),e(eB,Dso),e(jh,Gso),e(x,Oso),e(x,Dh),e(Dh,Koe),e(Koe,Vso),e(Dh,Xso),e(Dh,oB),e(oB,zso),e(Dh,Qso),e(x,Wso),e(x,Gh),e(Gh,Zoe),e(Zoe,Hso),e(Gh,Uso),e(Gh,rB),e(rB,Jso),e(Gh,Yso),e(x,Kso),e(x,Oh),e(Oh,ere),e(ere,Zso),e(Oh,elo),e(Oh,tB),e(tB,olo),e(Oh,rlo),e(x,tlo),e(x,Vh),e(Vh,ore),e(ore,alo),e(Vh,nlo),e(Vh,aB),e(aB,slo),e(Vh,llo),e(x,ilo),e(x,Xh),e(Xh,rre),e(rre,dlo),e(Xh,clo),e(Xh,nB),e(nB,flo),e(Xh,mlo),e(x,glo),e(x,zh),e(zh,tre),e(tre,hlo),e(zh,plo),e(zh,sB),e(sB,ulo),e(zh,_lo),e(x,blo),e(x,Qh),e(Qh,are),e(are,Flo),e(Qh,vlo),e(Qh,lB),e(lB,Tlo),e(Qh,Mlo),e(x,Elo),e(x,Wh),e(Wh,nre),e(nre,Clo),e(Wh,wlo),e(Wh,iB),e(iB,Alo),e(Wh,ylo),e(x,Llo),e(x,Hh),e(Hh,sre),e(sre,xlo),e(Hh,$lo),e(Hh,dB),e(dB,klo),e(Hh,Slo),e(x,Rlo),e(x,Uh),e(Uh,lre),e(lre,Blo),e(Uh,Plo),e(Uh,cB),e(cB,Ilo),e(Uh,qlo),e(x,Nlo),e(x,Jh),e(Jh,ire),e(ire,jlo),e(Jh,Dlo),e(Jh,fB),e(fB,Glo),e(Jh,Olo),e(x,Vlo),e(x,Yh),e(Yh,dre),e(dre,Xlo),e(Yh,zlo),e(Yh,mB),e(mB,Qlo),e(Yh,Wlo),e(x,Hlo),e(x,Kh),e(Kh,cre),e(cre,Ulo),e(Kh,Jlo),e(Kh,gB),e(gB,Ylo),e(Kh,Klo),e(x,Zlo),e(x,Zh),e(Zh,fre),e(fre,eio),e(Zh,oio),e(Zh,hB),e(hB,rio),e(Zh,tio),e(x,aio),e(x,ep),e(ep,mre),e(mre,nio),e(ep,sio),e(ep,pB),e(pB,lio),e(ep,iio),e(x,dio),e(x,op),e(op,gre),e(gre,cio),e(op,fio),e(op,uB),e(uB,mio),e(op,gio),e(x,hio),e(x,rp),e(rp,hre),e(hre,pio),e(rp,uio),e(rp,_B),e(_B,_io),e(rp,bio),e(x,Fio),e(x,tp),e(tp,pre),e(pre,vio),e(tp,Tio),e(tp,bB),e(bB,Mio),e(tp,Eio),e(x,Cio),e(x,ap),e(ap,ure),e(ure,wio),e(ap,Aio),e(ap,FB),e(FB,yio),e(ap,Lio),e(x,xio),e(x,np),e(np,_re),e(_re,$io),e(np,kio),e(np,vB),e(vB,Sio),e(np,Rio),e(x,Bio),e(x,sp),e(sp,bre),e(bre,Pio),e(sp,Iio),e(sp,TB),e(TB,qio),e(sp,Nio),e(x,jio),e(x,lp),e(lp,Fre),e(Fre,Dio),e(lp,Gio),e(lp,MB),e(MB,Oio),e(lp,Vio),e(x,Xio),e(x,ip),e(ip,vre),e(vre,zio),e(ip,Qio),e(ip,Tre),e(Tre,Wio),e(ip,Hio),e(x,Uio),e(x,dp),e(dp,Mre),e(Mre,Jio),e(dp,Yio),e(dp,EB),e(EB,Kio),e(dp,Zio),e(x,edo),e(x,cp),e(cp,Ere),e(Ere,odo),e(cp,rdo),e(cp,CB),e(CB,tdo),e(cp,ado),e(x,ndo),e(x,fp),e(fp,Cre),e(Cre,sdo),e(fp,ldo),e(fp,wB),e(wB,ido),e(fp,ddo),e(x,cdo),e(x,mp),e(mp,wre),e(wre,fdo),e(mp,mdo),e(mp,AB),e(AB,gdo),e(mp,hdo),e(x,pdo),e(x,gp),e(gp,Are),e(Are,udo),e(gp,_do),e(gp,yB),e(yB,bdo),e(gp,Fdo),e(x,vdo),e(x,hp),e(hp,yre),e(yre,Tdo),e(hp,Mdo),e(hp,LB),e(LB,Edo),e(hp,Cdo),e(x,wdo),e(x,pp),e(pp,Lre),e(Lre,Ado),e(pp,ydo),e(pp,xB),e(xB,Ldo),e(pp,xdo),e(x,$do),e(x,up),e(up,xre),e(xre,kdo),e(up,Sdo),e(up,$B),e($B,Rdo),e(up,Bdo),e(x,Pdo),e(x,_p),e(_p,$re),e($re,Ido),e(_p,qdo),e(_p,kB),e(kB,Ndo),e(_p,jdo),e(x,Ddo),e(x,bp),e(bp,kre),e(kre,Gdo),e(bp,Odo),e(bp,SB),e(SB,Vdo),e(bp,Xdo),e(x,zdo),e(x,Fp),e(Fp,Sre),e(Sre,Qdo),e(Fp,Wdo),e(Fp,RB),e(RB,Hdo),e(Fp,Udo),e(x,Jdo),e(x,vp),e(vp,Rre),e(Rre,Ydo),e(vp,Kdo),e(vp,BB),e(BB,Zdo),e(vp,eco),e(x,oco),e(x,Tp),e(Tp,Bre),e(Bre,rco),e(Tp,tco),e(Tp,PB),e(PB,aco),e(Tp,nco),e(x,sco),e(x,Mp),e(Mp,Pre),e(Pre,lco),e(Mp,ico),e(Mp,IB),e(IB,dco),e(Mp,cco),e(x,fco),e(x,Ep),e(Ep,Ire),e(Ire,mco),e(Ep,gco),e(Ep,qB),e(qB,hco),e(Ep,pco),e(x,uco),e(x,Cp),e(Cp,qre),e(qre,_co),e(Cp,bco),e(Cp,NB),e(NB,Fco),e(Cp,vco),e(x,Tco),e(x,wp),e(wp,Nre),e(Nre,Mco),e(wp,Eco),e(wp,jB),e(jB,Cco),e(wp,wco),e(x,Aco),e(x,Ap),e(Ap,jre),e(jre,yco),e(Ap,Lco),e(Ap,DB),e(DB,xco),e(Ap,$co),e(x,kco),e(x,yp),e(yp,Dre),e(Dre,Sco),e(yp,Rco),e(yp,GB),e(GB,Bco),e(yp,Pco),e(x,Ico),e(x,Lp),e(Lp,Gre),e(Gre,qco),e(Lp,Nco),e(Lp,OB),e(OB,jco),e(Lp,Dco),e(x,Gco),e(x,xp),e(xp,Ore),e(Ore,Oco),e(xp,Vco),e(xp,VB),e(VB,Xco),e(xp,zco),e(x,Qco),e(x,$p),e($p,Vre),e(Vre,Wco),e($p,Hco),e($p,XB),e(XB,Uco),e($p,Jco),e(x,Yco),e(x,kp),e(kp,Xre),e(Xre,Kco),e(kp,Zco),e(kp,zB),e(zB,efo),e(kp,ofo),e(x,rfo),e(x,Sp),e(Sp,zre),e(zre,tfo),e(Sp,afo),e(Sp,QB),e(QB,nfo),e(Sp,sfo),e(x,lfo),e(x,Rp),e(Rp,Qre),e(Qre,ifo),e(Rp,dfo),e(Rp,WB),e(WB,cfo),e(Rp,ffo),e(x,mfo),e(x,Bp),e(Bp,Wre),e(Wre,gfo),e(Bp,hfo),e(Bp,HB),e(HB,pfo),e(Bp,ufo),e(x,_fo),e(x,Pp),e(Pp,Hre),e(Hre,bfo),e(Pp,Ffo),e(Pp,UB),e(UB,vfo),e(Pp,Tfo),e(x,Mfo),e(x,Ip),e(Ip,Ure),e(Ure,Efo),e(Ip,Cfo),e(Ip,JB),e(JB,wfo),e(Ip,Afo),e(x,yfo),e(x,qp),e(qp,Jre),e(Jre,Lfo),e(qp,xfo),e(qp,YB),e(YB,$fo),e(qp,kfo),e(x,Sfo),e(x,Np),e(Np,Yre),e(Yre,Rfo),e(Np,Bfo),e(Np,KB),e(KB,Pfo),e(Np,Ifo),e(x,qfo),e(x,jp),e(jp,Kre),e(Kre,Nfo),e(jp,jfo),e(jp,ZB),e(ZB,Dfo),e(jp,Gfo),e(x,Ofo),e(x,Dp),e(Dp,Zre),e(Zre,Vfo),e(Dp,Xfo),e(Dp,eP),e(eP,zfo),e(Dp,Qfo),e(x,Wfo),e(x,Gp),e(Gp,ete),e(ete,Hfo),e(Gp,Ufo),e(Gp,oP),e(oP,Jfo),e(Gp,Yfo),e(ze,Kfo),e(ze,Op),e(Op,Zfo),e(Op,ote),e(ote,emo),e(Op,omo),e(Op,rte),e(rte,rmo),e(ze,tmo),M(Vp,ze,null),b(f,V$e,_),b(f,di,_),e(di,Xp),e(Xp,tte),M(aA,tte,null),e(di,amo),e(di,ate),e(ate,nmo),b(f,X$e,_),b(f,yo,_),M(nA,yo,null),e(yo,smo),e(yo,ci),e(ci,lmo),e(ci,rP),e(rP,imo),e(ci,dmo),e(ci,tP),e(tP,cmo),e(ci,fmo),e(yo,mmo),e(yo,sA),e(sA,gmo),e(sA,nte),e(nte,hmo),e(sA,pmo),e(yo,umo),e(yo,Zr),M(lA,Zr,null),e(Zr,_mo),e(Zr,ste),e(ste,bmo),e(Zr,Fmo),e(Zr,fi),e(fi,vmo),e(fi,lte),e(lte,Tmo),e(fi,Mmo),e(fi,aP),e(aP,Emo),e(fi,Cmo),e(Zr,wmo),M(zp,Zr,null),e(yo,Amo),e(yo,Qe),M(iA,Qe,null),e(Qe,ymo),e(Qe,ite),e(ite,Lmo),e(Qe,xmo),e(Qe,Ea),e(Ea,$mo),e(Ea,dte),e(dte,kmo),e(Ea,Smo),e(Ea,cte),e(cte,Rmo),e(Ea,Bmo),e(Ea,fte),e(fte,Pmo),e(Ea,Imo),e(Qe,qmo),e(Qe,G),e(G,Qp),e(Qp,mte),e(mte,Nmo),e(Qp,jmo),e(Qp,nP),e(nP,Dmo),e(Qp,Gmo),e(G,Omo),e(G,Wp),e(Wp,gte),e(gte,Vmo),e(Wp,Xmo),e(Wp,sP),e(sP,zmo),e(Wp,Qmo),e(G,Wmo),e(G,Hp),e(Hp,hte),e(hte,Hmo),e(Hp,Umo),e(Hp,lP),e(lP,Jmo),e(Hp,Ymo),e(G,Kmo),e(G,Up),e(Up,pte),e(pte,Zmo),e(Up,ego),e(Up,iP),e(iP,ogo),e(Up,rgo),e(G,tgo),e(G,Jp),e(Jp,ute),e(ute,ago),e(Jp,ngo),e(Jp,dP),e(dP,sgo),e(Jp,lgo),e(G,igo),e(G,Yp),e(Yp,_te),e(_te,dgo),e(Yp,cgo),e(Yp,cP),e(cP,fgo),e(Yp,mgo),e(G,ggo),e(G,Kp),e(Kp,bte),e(bte,hgo),e(Kp,pgo),e(Kp,fP),e(fP,ugo),e(Kp,_go),e(G,bgo),e(G,Zp),e(Zp,Fte),e(Fte,Fgo),e(Zp,vgo),e(Zp,mP),e(mP,Tgo),e(Zp,Mgo),e(G,Ego),e(G,eu),e(eu,vte),e(vte,Cgo),e(eu,wgo),e(eu,gP),e(gP,Ago),e(eu,ygo),e(G,Lgo),e(G,ou),e(ou,Tte),e(Tte,xgo),e(ou,$go),e(ou,hP),e(hP,kgo),e(ou,Sgo),e(G,Rgo),e(G,ru),e(ru,Mte),e(Mte,Bgo),e(ru,Pgo),e(ru,pP),e(pP,Igo),e(ru,qgo),e(G,Ngo),e(G,tu),e(tu,Ete),e(Ete,jgo),e(tu,Dgo),e(tu,uP),e(uP,Ggo),e(tu,Ogo),e(G,Vgo),e(G,au),e(au,Cte),e(Cte,Xgo),e(au,zgo),e(au,_P),e(_P,Qgo),e(au,Wgo),e(G,Hgo),e(G,nu),e(nu,wte),e(wte,Ugo),e(nu,Jgo),e(nu,bP),e(bP,Ygo),e(nu,Kgo),e(G,Zgo),e(G,su),e(su,Ate),e(Ate,eho),e(su,oho),e(su,FP),e(FP,rho),e(su,tho),e(G,aho),e(G,lu),e(lu,yte),e(yte,nho),e(lu,sho),e(lu,vP),e(vP,lho),e(lu,iho),e(G,dho),e(G,iu),e(iu,Lte),e(Lte,cho),e(iu,fho),e(iu,TP),e(TP,mho),e(iu,gho),e(G,hho),e(G,du),e(du,xte),e(xte,pho),e(du,uho),e(du,MP),e(MP,_ho),e(du,bho),e(G,Fho),e(G,cu),e(cu,$te),e($te,vho),e(cu,Tho),e(cu,EP),e(EP,Mho),e(cu,Eho),e(G,Cho),e(G,fu),e(fu,kte),e(kte,who),e(fu,Aho),e(fu,CP),e(CP,yho),e(fu,Lho),e(G,xho),e(G,mu),e(mu,Ste),e(Ste,$ho),e(mu,kho),e(mu,wP),e(wP,Sho),e(mu,Rho),e(G,Bho),e(G,gu),e(gu,Rte),e(Rte,Pho),e(gu,Iho),e(gu,AP),e(AP,qho),e(gu,Nho),e(G,jho),e(G,hu),e(hu,Bte),e(Bte,Dho),e(hu,Gho),e(hu,yP),e(yP,Oho),e(hu,Vho),e(G,Xho),e(G,pu),e(pu,Pte),e(Pte,zho),e(pu,Qho),e(pu,LP),e(LP,Who),e(pu,Hho),e(G,Uho),e(G,uu),e(uu,Ite),e(Ite,Jho),e(uu,Yho),e(uu,xP),e(xP,Kho),e(uu,Zho),e(G,epo),e(G,_u),e(_u,qte),e(qte,opo),e(_u,rpo),e(_u,$P),e($P,tpo),e(_u,apo),e(G,npo),e(G,bu),e(bu,Nte),e(Nte,spo),e(bu,lpo),e(bu,kP),e(kP,ipo),e(bu,dpo),e(G,cpo),e(G,Fu),e(Fu,jte),e(jte,fpo),e(Fu,mpo),e(Fu,SP),e(SP,gpo),e(Fu,hpo),e(G,ppo),e(G,vu),e(vu,Dte),e(Dte,upo),e(vu,_po),e(vu,RP),e(RP,bpo),e(vu,Fpo),e(G,vpo),e(G,Tu),e(Tu,Gte),e(Gte,Tpo),e(Tu,Mpo),e(Tu,BP),e(BP,Epo),e(Tu,Cpo),e(G,wpo),e(G,Mu),e(Mu,Ote),e(Ote,Apo),e(Mu,ypo),e(Mu,PP),e(PP,Lpo),e(Mu,xpo),e(G,$po),e(G,Eu),e(Eu,Vte),e(Vte,kpo),e(Eu,Spo),e(Eu,IP),e(IP,Rpo),e(Eu,Bpo),e(G,Ppo),e(G,Cu),e(Cu,Xte),e(Xte,Ipo),e(Cu,qpo),e(Cu,qP),e(qP,Npo),e(Cu,jpo),e(G,Dpo),e(G,wu),e(wu,zte),e(zte,Gpo),e(wu,Opo),e(wu,NP),e(NP,Vpo),e(wu,Xpo),e(G,zpo),e(G,Au),e(Au,Qte),e(Qte,Qpo),e(Au,Wpo),e(Au,jP),e(jP,Hpo),e(Au,Upo),e(G,Jpo),e(G,yu),e(yu,Wte),e(Wte,Ypo),e(yu,Kpo),e(yu,DP),e(DP,Zpo),e(yu,euo),e(G,ouo),e(G,Lu),e(Lu,Hte),e(Hte,ruo),e(Lu,tuo),e(Lu,GP),e(GP,auo),e(Lu,nuo),e(G,suo),e(G,xu),e(xu,Ute),e(Ute,luo),e(xu,iuo),e(xu,OP),e(OP,duo),e(xu,cuo),e(G,fuo),e(G,$u),e($u,Jte),e(Jte,muo),e($u,guo),e($u,VP),e(VP,huo),e($u,puo),e(Qe,uuo),e(Qe,ku),e(ku,_uo),e(ku,Yte),e(Yte,buo),e(ku,Fuo),e(ku,Kte),e(Kte,vuo),e(Qe,Tuo),M(Su,Qe,null),b(f,z$e,_),b(f,mi,_),e(mi,Ru),e(Ru,Zte),M(dA,Zte,null),e(mi,Muo),e(mi,eae),e(eae,Euo),b(f,Q$e,_),b(f,Lo,_),M(cA,Lo,null),e(Lo,Cuo),e(Lo,gi),e(gi,wuo),e(gi,XP),e(XP,Auo),e(gi,yuo),e(gi,zP),e(zP,Luo),e(gi,xuo),e(Lo,$uo),e(Lo,fA),e(fA,kuo),e(fA,oae),e(oae,Suo),e(fA,Ruo),e(Lo,Buo),e(Lo,et),M(mA,et,null),e(et,Puo),e(et,rae),e(rae,Iuo),e(et,quo),e(et,hi),e(hi,Nuo),e(hi,tae),e(tae,juo),e(hi,Duo),e(hi,QP),e(QP,Guo),e(hi,Ouo),e(et,Vuo),M(Bu,et,null),e(Lo,Xuo),e(Lo,We),M(gA,We,null),e(We,zuo),e(We,aae),e(aae,Quo),e(We,Wuo),e(We,Ca),e(Ca,Huo),e(Ca,nae),e(nae,Uuo),e(Ca,Juo),e(Ca,sae),e(sae,Yuo),e(Ca,Kuo),e(Ca,lae),e(lae,Zuo),e(Ca,e_o),e(We,o_o),e(We,z),e(z,Pu),e(Pu,iae),e(iae,r_o),e(Pu,t_o),e(Pu,WP),e(WP,a_o),e(Pu,n_o),e(z,s_o),e(z,Iu),e(Iu,dae),e(dae,l_o),e(Iu,i_o),e(Iu,HP),e(HP,d_o),e(Iu,c_o),e(z,f_o),e(z,qu),e(qu,cae),e(cae,m_o),e(qu,g_o),e(qu,UP),e(UP,h_o),e(qu,p_o),e(z,u_o),e(z,Nu),e(Nu,fae),e(fae,__o),e(Nu,b_o),e(Nu,JP),e(JP,F_o),e(Nu,v_o),e(z,T_o),e(z,ju),e(ju,mae),e(mae,M_o),e(ju,E_o),e(ju,YP),e(YP,C_o),e(ju,w_o),e(z,A_o),e(z,Du),e(Du,gae),e(gae,y_o),e(Du,L_o),e(Du,KP),e(KP,x_o),e(Du,$_o),e(z,k_o),e(z,Gu),e(Gu,hae),e(hae,S_o),e(Gu,R_o),e(Gu,ZP),e(ZP,B_o),e(Gu,P_o),e(z,I_o),e(z,Ou),e(Ou,pae),e(pae,q_o),e(Ou,N_o),e(Ou,eI),e(eI,j_o),e(Ou,D_o),e(z,G_o),e(z,Vu),e(Vu,uae),e(uae,O_o),e(Vu,V_o),e(Vu,oI),e(oI,X_o),e(Vu,z_o),e(z,Q_o),e(z,Xu),e(Xu,_ae),e(_ae,W_o),e(Xu,H_o),e(Xu,rI),e(rI,U_o),e(Xu,J_o),e(z,Y_o),e(z,zu),e(zu,bae),e(bae,K_o),e(zu,Z_o),e(zu,tI),e(tI,e2o),e(zu,o2o),e(z,r2o),e(z,Qu),e(Qu,Fae),e(Fae,t2o),e(Qu,a2o),e(Qu,aI),e(aI,n2o),e(Qu,s2o),e(z,l2o),e(z,Wu),e(Wu,vae),e(vae,i2o),e(Wu,d2o),e(Wu,nI),e(nI,c2o),e(Wu,f2o),e(z,m2o),e(z,Hu),e(Hu,Tae),e(Tae,g2o),e(Hu,h2o),e(Hu,sI),e(sI,p2o),e(Hu,u2o),e(z,_2o),e(z,Uu),e(Uu,Mae),e(Mae,b2o),e(Uu,F2o),e(Uu,lI),e(lI,v2o),e(Uu,T2o),e(z,M2o),e(z,Ju),e(Ju,Eae),e(Eae,E2o),e(Ju,C2o),e(Ju,iI),e(iI,w2o),e(Ju,A2o),e(z,y2o),e(z,Yu),e(Yu,Cae),e(Cae,L2o),e(Yu,x2o),e(Yu,dI),e(dI,$2o),e(Yu,k2o),e(z,S2o),e(z,Ku),e(Ku,wae),e(wae,R2o),e(Ku,B2o),e(Ku,cI),e(cI,P2o),e(Ku,I2o),e(z,q2o),e(z,Zu),e(Zu,Aae),e(Aae,N2o),e(Zu,j2o),e(Zu,fI),e(fI,D2o),e(Zu,G2o),e(z,O2o),e(z,e_),e(e_,yae),e(yae,V2o),e(e_,X2o),e(e_,mI),e(mI,z2o),e(e_,Q2o),e(z,W2o),e(z,o_),e(o_,Lae),e(Lae,H2o),e(o_,U2o),e(o_,gI),e(gI,J2o),e(o_,Y2o),e(z,K2o),e(z,r_),e(r_,xae),e(xae,Z2o),e(r_,e1o),e(r_,$ae),e($ae,o1o),e(r_,r1o),e(z,t1o),e(z,t_),e(t_,kae),e(kae,a1o),e(t_,n1o),e(t_,hI),e(hI,s1o),e(t_,l1o),e(z,i1o),e(z,a_),e(a_,Sae),e(Sae,d1o),e(a_,c1o),e(a_,pI),e(pI,f1o),e(a_,m1o),e(z,g1o),e(z,n_),e(n_,Rae),e(Rae,h1o),e(n_,p1o),e(n_,uI),e(uI,u1o),e(n_,_1o),e(z,b1o),e(z,s_),e(s_,Bae),e(Bae,F1o),e(s_,v1o),e(s_,_I),e(_I,T1o),e(s_,M1o),e(z,E1o),e(z,l_),e(l_,Pae),e(Pae,C1o),e(l_,w1o),e(l_,bI),e(bI,A1o),e(l_,y1o),e(z,L1o),e(z,i_),e(i_,Iae),e(Iae,x1o),e(i_,$1o),e(i_,FI),e(FI,k1o),e(i_,S1o),e(z,R1o),e(z,d_),e(d_,qae),e(qae,B1o),e(d_,P1o),e(d_,vI),e(vI,I1o),e(d_,q1o),e(z,N1o),e(z,c_),e(c_,Nae),e(Nae,j1o),e(c_,D1o),e(c_,TI),e(TI,G1o),e(c_,O1o),e(z,V1o),e(z,f_),e(f_,jae),e(jae,X1o),e(f_,z1o),e(f_,MI),e(MI,Q1o),e(f_,W1o),e(z,H1o),e(z,m_),e(m_,Dae),e(Dae,U1o),e(m_,J1o),e(m_,EI),e(EI,Y1o),e(m_,K1o),e(z,Z1o),e(z,g_),e(g_,Gae),e(Gae,ebo),e(g_,obo),e(g_,CI),e(CI,rbo),e(g_,tbo),e(z,abo),e(z,h_),e(h_,Oae),e(Oae,nbo),e(h_,sbo),e(h_,wI),e(wI,lbo),e(h_,ibo),e(z,dbo),e(z,p_),e(p_,Vae),e(Vae,cbo),e(p_,fbo),e(p_,AI),e(AI,mbo),e(p_,gbo),e(We,hbo),e(We,u_),e(u_,pbo),e(u_,Xae),e(Xae,ubo),e(u_,_bo),e(u_,zae),e(zae,bbo),e(We,Fbo),M(__,We,null),b(f,W$e,_),b(f,pi,_),e(pi,b_),e(b_,Qae),M(hA,Qae,null),e(pi,vbo),e(pi,Wae),e(Wae,Tbo),b(f,H$e,_),b(f,xo,_),M(pA,xo,null),e(xo,Mbo),e(xo,ui),e(ui,Ebo),e(ui,yI),e(yI,Cbo),e(ui,wbo),e(ui,LI),e(LI,Abo),e(ui,ybo),e(xo,Lbo),e(xo,uA),e(uA,xbo),e(uA,Hae),e(Hae,$bo),e(uA,kbo),e(xo,Sbo),e(xo,ot),M(_A,ot,null),e(ot,Rbo),e(ot,Uae),e(Uae,Bbo),e(ot,Pbo),e(ot,_i),e(_i,Ibo),e(_i,Jae),e(Jae,qbo),e(_i,Nbo),e(_i,xI),e(xI,jbo),e(_i,Dbo),e(ot,Gbo),M(F_,ot,null),e(xo,Obo),e(xo,He),M(bA,He,null),e(He,Vbo),e(He,Yae),e(Yae,Xbo),e(He,zbo),e(He,wa),e(wa,Qbo),e(wa,Kae),e(Kae,Wbo),e(wa,Hbo),e(wa,Zae),e(Zae,Ubo),e(wa,Jbo),e(wa,ene),e(ene,Ybo),e(wa,Kbo),e(He,Zbo),e(He,Q),e(Q,v_),e(v_,one),e(one,e5o),e(v_,o5o),e(v_,$I),e($I,r5o),e(v_,t5o),e(Q,a5o),e(Q,T_),e(T_,rne),e(rne,n5o),e(T_,s5o),e(T_,kI),e(kI,l5o),e(T_,i5o),e(Q,d5o),e(Q,M_),e(M_,tne),e(tne,c5o),e(M_,f5o),e(M_,SI),e(SI,m5o),e(M_,g5o),e(Q,h5o),e(Q,E_),e(E_,ane),e(ane,p5o),e(E_,u5o),e(E_,RI),e(RI,_5o),e(E_,b5o),e(Q,F5o),e(Q,C_),e(C_,nne),e(nne,v5o),e(C_,T5o),e(C_,BI),e(BI,M5o),e(C_,E5o),e(Q,C5o),e(Q,w_),e(w_,sne),e(sne,w5o),e(w_,A5o),e(w_,PI),e(PI,y5o),e(w_,L5o),e(Q,x5o),e(Q,A_),e(A_,lne),e(lne,$5o),e(A_,k5o),e(A_,II),e(II,S5o),e(A_,R5o),e(Q,B5o),e(Q,y_),e(y_,ine),e(ine,P5o),e(y_,I5o),e(y_,qI),e(qI,q5o),e(y_,N5o),e(Q,j5o),e(Q,L_),e(L_,dne),e(dne,D5o),e(L_,G5o),e(L_,NI),e(NI,O5o),e(L_,V5o),e(Q,X5o),e(Q,x_),e(x_,cne),e(cne,z5o),e(x_,Q5o),e(x_,jI),e(jI,W5o),e(x_,H5o),e(Q,U5o),e(Q,$_),e($_,fne),e(fne,J5o),e($_,Y5o),e($_,DI),e(DI,K5o),e($_,Z5o),e(Q,eFo),e(Q,k_),e(k_,mne),e(mne,oFo),e(k_,rFo),e(k_,GI),e(GI,tFo),e(k_,aFo),e(Q,nFo),e(Q,S_),e(S_,gne),e(gne,sFo),e(S_,lFo),e(S_,OI),e(OI,iFo),e(S_,dFo),e(Q,cFo),e(Q,R_),e(R_,hne),e(hne,fFo),e(R_,mFo),e(R_,VI),e(VI,gFo),e(R_,hFo),e(Q,pFo),e(Q,B_),e(B_,pne),e(pne,uFo),e(B_,_Fo),e(B_,XI),e(XI,bFo),e(B_,FFo),e(Q,vFo),e(Q,P_),e(P_,une),e(une,TFo),e(P_,MFo),e(P_,zI),e(zI,EFo),e(P_,CFo),e(Q,wFo),e(Q,I_),e(I_,_ne),e(_ne,AFo),e(I_,yFo),e(I_,QI),e(QI,LFo),e(I_,xFo),e(Q,$Fo),e(Q,q_),e(q_,bne),e(bne,kFo),e(q_,SFo),e(q_,WI),e(WI,RFo),e(q_,BFo),e(Q,PFo),e(Q,N_),e(N_,Fne),e(Fne,IFo),e(N_,qFo),e(N_,HI),e(HI,NFo),e(N_,jFo),e(Q,DFo),e(Q,j_),e(j_,vne),e(vne,GFo),e(j_,OFo),e(j_,UI),e(UI,VFo),e(j_,XFo),e(Q,zFo),e(Q,D_),e(D_,Tne),e(Tne,QFo),e(D_,WFo),e(D_,JI),e(JI,HFo),e(D_,UFo),e(Q,JFo),e(Q,G_),e(G_,Mne),e(Mne,YFo),e(G_,KFo),e(G_,YI),e(YI,ZFo),e(G_,evo),e(Q,ovo),e(Q,O_),e(O_,Ene),e(Ene,rvo),e(O_,tvo),e(O_,KI),e(KI,avo),e(O_,nvo),e(Q,svo),e(Q,V_),e(V_,Cne),e(Cne,lvo),e(V_,ivo),e(V_,wne),e(wne,dvo),e(V_,cvo),e(Q,fvo),e(Q,X_),e(X_,Ane),e(Ane,mvo),e(X_,gvo),e(X_,ZI),e(ZI,hvo),e(X_,pvo),e(Q,uvo),e(Q,z_),e(z_,yne),e(yne,_vo),e(z_,bvo),e(z_,eq),e(eq,Fvo),e(z_,vvo),e(Q,Tvo),e(Q,Q_),e(Q_,Lne),e(Lne,Mvo),e(Q_,Evo),e(Q_,oq),e(oq,Cvo),e(Q_,wvo),e(Q,Avo),e(Q,W_),e(W_,xne),e(xne,yvo),e(W_,Lvo),e(W_,rq),e(rq,xvo),e(W_,$vo),e(Q,kvo),e(Q,H_),e(H_,$ne),e($ne,Svo),e(H_,Rvo),e(H_,tq),e(tq,Bvo),e(H_,Pvo),e(Q,Ivo),e(Q,U_),e(U_,kne),e(kne,qvo),e(U_,Nvo),e(U_,aq),e(aq,jvo),e(U_,Dvo),e(Q,Gvo),e(Q,J_),e(J_,Sne),e(Sne,Ovo),e(J_,Vvo),e(J_,Rne),e(Rne,Xvo),e(J_,zvo),e(Q,Qvo),e(Q,Y_),e(Y_,Bne),e(Bne,Wvo),e(Y_,Hvo),e(Y_,nq),e(nq,Uvo),e(Y_,Jvo),e(Q,Yvo),e(Q,K_),e(K_,Pne),e(Pne,Kvo),e(K_,Zvo),e(K_,sq),e(sq,e6o),e(K_,o6o),e(Q,r6o),e(Q,Z_),e(Z_,Ine),e(Ine,t6o),e(Z_,a6o),e(Z_,lq),e(lq,n6o),e(Z_,s6o),e(Q,l6o),e(Q,e2),e(e2,qne),e(qne,i6o),e(e2,d6o),e(e2,iq),e(iq,c6o),e(e2,f6o),e(He,m6o),e(He,o2),e(o2,g6o),e(o2,Nne),e(Nne,h6o),e(o2,p6o),e(o2,jne),e(jne,u6o),e(He,_6o),M(r2,He,null),b(f,U$e,_),b(f,bi,_),e(bi,t2),e(t2,Dne),M(FA,Dne,null),e(bi,b6o),e(bi,Gne),e(Gne,F6o),b(f,J$e,_),b(f,$o,_),M(vA,$o,null),e($o,v6o),e($o,Fi),e(Fi,T6o),e(Fi,dq),e(dq,M6o),e(Fi,E6o),e(Fi,cq),e(cq,C6o),e(Fi,w6o),e($o,A6o),e($o,TA),e(TA,y6o),e(TA,One),e(One,L6o),e(TA,x6o),e($o,$6o),e($o,rt),M(MA,rt,null),e(rt,k6o),e(rt,Vne),e(Vne,S6o),e(rt,R6o),e(rt,vi),e(vi,B6o),e(vi,Xne),e(Xne,P6o),e(vi,I6o),e(vi,fq),e(fq,q6o),e(vi,N6o),e(rt,j6o),M(a2,rt,null),e($o,D6o),e($o,Ue),M(EA,Ue,null),e(Ue,G6o),e(Ue,zne),e(zne,O6o),e(Ue,V6o),e(Ue,Aa),e(Aa,X6o),e(Aa,Qne),e(Qne,z6o),e(Aa,Q6o),e(Aa,Wne),e(Wne,W6o),e(Aa,H6o),e(Aa,Hne),e(Hne,U6o),e(Aa,J6o),e(Ue,Y6o),e(Ue,pe),e(pe,n2),e(n2,Une),e(Une,K6o),e(n2,Z6o),e(n2,mq),e(mq,eTo),e(n2,oTo),e(pe,rTo),e(pe,s2),e(s2,Jne),e(Jne,tTo),e(s2,aTo),e(s2,gq),e(gq,nTo),e(s2,sTo),e(pe,lTo),e(pe,l2),e(l2,Yne),e(Yne,iTo),e(l2,dTo),e(l2,hq),e(hq,cTo),e(l2,fTo),e(pe,mTo),e(pe,i2),e(i2,Kne),e(Kne,gTo),e(i2,hTo),e(i2,pq),e(pq,pTo),e(i2,uTo),e(pe,_To),e(pe,d2),e(d2,Zne),e(Zne,bTo),e(d2,FTo),e(d2,uq),e(uq,vTo),e(d2,TTo),e(pe,MTo),e(pe,c2),e(c2,ese),e(ese,ETo),e(c2,CTo),e(c2,_q),e(_q,wTo),e(c2,ATo),e(pe,yTo),e(pe,f2),e(f2,ose),e(ose,LTo),e(f2,xTo),e(f2,bq),e(bq,$To),e(f2,kTo),e(pe,STo),e(pe,m2),e(m2,rse),e(rse,RTo),e(m2,BTo),e(m2,Fq),e(Fq,PTo),e(m2,ITo),e(pe,qTo),e(pe,g2),e(g2,tse),e(tse,NTo),e(g2,jTo),e(g2,vq),e(vq,DTo),e(g2,GTo),e(pe,OTo),e(pe,h2),e(h2,ase),e(ase,VTo),e(h2,XTo),e(h2,Tq),e(Tq,zTo),e(h2,QTo),e(pe,WTo),e(pe,p2),e(p2,nse),e(nse,HTo),e(p2,UTo),e(p2,Mq),e(Mq,JTo),e(p2,YTo),e(pe,KTo),e(pe,u2),e(u2,sse),e(sse,ZTo),e(u2,eMo),e(u2,Eq),e(Eq,oMo),e(u2,rMo),e(pe,tMo),e(pe,_2),e(_2,lse),e(lse,aMo),e(_2,nMo),e(_2,Cq),e(Cq,sMo),e(_2,lMo),e(pe,iMo),e(pe,b2),e(b2,ise),e(ise,dMo),e(b2,cMo),e(b2,wq),e(wq,fMo),e(b2,mMo),e(pe,gMo),e(pe,F2),e(F2,dse),e(dse,hMo),e(F2,pMo),e(F2,Aq),e(Aq,uMo),e(F2,_Mo),e(pe,bMo),e(pe,v2),e(v2,cse),e(cse,FMo),e(v2,vMo),e(v2,yq),e(yq,TMo),e(v2,MMo),e(Ue,EMo),e(Ue,T2),e(T2,CMo),e(T2,fse),e(fse,wMo),e(T2,AMo),e(T2,mse),e(mse,yMo),e(Ue,LMo),M(M2,Ue,null),b(f,Y$e,_),b(f,Ti,_),e(Ti,E2),e(E2,gse),M(CA,gse,null),e(Ti,xMo),e(Ti,hse),e(hse,$Mo),b(f,K$e,_),b(f,ko,_),M(wA,ko,null),e(ko,kMo),e(ko,Mi),e(Mi,SMo),e(Mi,Lq),e(Lq,RMo),e(Mi,BMo),e(Mi,xq),e(xq,PMo),e(Mi,IMo),e(ko,qMo),e(ko,AA),e(AA,NMo),e(AA,pse),e(pse,jMo),e(AA,DMo),e(ko,GMo),e(ko,tt),M(yA,tt,null),e(tt,OMo),e(tt,use),e(use,VMo),e(tt,XMo),e(tt,Ei),e(Ei,zMo),e(Ei,_se),e(_se,QMo),e(Ei,WMo),e(Ei,$q),e($q,HMo),e(Ei,UMo),e(tt,JMo),M(C2,tt,null),e(ko,YMo),e(ko,Je),M(LA,Je,null),e(Je,KMo),e(Je,bse),e(bse,ZMo),e(Je,e9o),e(Je,ya),e(ya,o9o),e(ya,Fse),e(Fse,r9o),e(ya,t9o),e(ya,vse),e(vse,a9o),e(ya,n9o),e(ya,Tse),e(Tse,s9o),e(ya,l9o),e(Je,i9o),e(Je,q),e(q,w2),e(w2,Mse),e(Mse,d9o),e(w2,c9o),e(w2,kq),e(kq,f9o),e(w2,m9o),e(q,g9o),e(q,A2),e(A2,Ese),e(Ese,h9o),e(A2,p9o),e(A2,Sq),e(Sq,u9o),e(A2,_9o),e(q,b9o),e(q,y2),e(y2,Cse),e(Cse,F9o),e(y2,v9o),e(y2,Rq),e(Rq,T9o),e(y2,M9o),e(q,E9o),e(q,L2),e(L2,wse),e(wse,C9o),e(L2,w9o),e(L2,Bq),e(Bq,A9o),e(L2,y9o),e(q,L9o),e(q,x2),e(x2,Ase),e(Ase,x9o),e(x2,$9o),e(x2,Pq),e(Pq,k9o),e(x2,S9o),e(q,R9o),e(q,$2),e($2,yse),e(yse,B9o),e($2,P9o),e($2,Iq),e(Iq,I9o),e($2,q9o),e(q,N9o),e(q,k2),e(k2,Lse),e(Lse,j9o),e(k2,D9o),e(k2,qq),e(qq,G9o),e(k2,O9o),e(q,V9o),e(q,S2),e(S2,xse),e(xse,X9o),e(S2,z9o),e(S2,Nq),e(Nq,Q9o),e(S2,W9o),e(q,H9o),e(q,R2),e(R2,$se),e($se,U9o),e(R2,J9o),e(R2,jq),e(jq,Y9o),e(R2,K9o),e(q,Z9o),e(q,B2),e(B2,kse),e(kse,e4o),e(B2,o4o),e(B2,Dq),e(Dq,r4o),e(B2,t4o),e(q,a4o),e(q,P2),e(P2,Sse),e(Sse,n4o),e(P2,s4o),e(P2,Gq),e(Gq,l4o),e(P2,i4o),e(q,d4o),e(q,I2),e(I2,Rse),e(Rse,c4o),e(I2,f4o),e(I2,Oq),e(Oq,m4o),e(I2,g4o),e(q,h4o),e(q,q2),e(q2,Bse),e(Bse,p4o),e(q2,u4o),e(q2,Vq),e(Vq,_4o),e(q2,b4o),e(q,F4o),e(q,N2),e(N2,Pse),e(Pse,v4o),e(N2,T4o),e(N2,Xq),e(Xq,M4o),e(N2,E4o),e(q,C4o),e(q,j2),e(j2,Ise),e(Ise,w4o),e(j2,A4o),e(j2,zq),e(zq,y4o),e(j2,L4o),e(q,x4o),e(q,D2),e(D2,qse),e(qse,$4o),e(D2,k4o),e(D2,Qq),e(Qq,S4o),e(D2,R4o),e(q,B4o),e(q,G2),e(G2,Nse),e(Nse,P4o),e(G2,I4o),e(G2,Wq),e(Wq,q4o),e(G2,N4o),e(q,j4o),e(q,O2),e(O2,jse),e(jse,D4o),e(O2,G4o),e(O2,Hq),e(Hq,O4o),e(O2,V4o),e(q,X4o),e(q,V2),e(V2,Dse),e(Dse,z4o),e(V2,Q4o),e(V2,Uq),e(Uq,W4o),e(V2,H4o),e(q,U4o),e(q,X2),e(X2,Gse),e(Gse,J4o),e(X2,Y4o),e(X2,Jq),e(Jq,K4o),e(X2,Z4o),e(q,eEo),e(q,z2),e(z2,Ose),e(Ose,oEo),e(z2,rEo),e(z2,Yq),e(Yq,tEo),e(z2,aEo),e(q,nEo),e(q,Q2),e(Q2,Vse),e(Vse,sEo),e(Q2,lEo),e(Q2,Kq),e(Kq,iEo),e(Q2,dEo),e(q,cEo),e(q,W2),e(W2,Xse),e(Xse,fEo),e(W2,mEo),e(W2,Zq),e(Zq,gEo),e(W2,hEo),e(q,pEo),e(q,H2),e(H2,zse),e(zse,uEo),e(H2,_Eo),e(H2,eN),e(eN,bEo),e(H2,FEo),e(q,vEo),e(q,U2),e(U2,Qse),e(Qse,TEo),e(U2,MEo),e(U2,oN),e(oN,EEo),e(U2,CEo),e(q,wEo),e(q,J2),e(J2,Wse),e(Wse,AEo),e(J2,yEo),e(J2,rN),e(rN,LEo),e(J2,xEo),e(q,$Eo),e(q,Y2),e(Y2,Hse),e(Hse,kEo),e(Y2,SEo),e(Y2,tN),e(tN,REo),e(Y2,BEo),e(q,PEo),e(q,K2),e(K2,Use),e(Use,IEo),e(K2,qEo),e(K2,aN),e(aN,NEo),e(K2,jEo),e(q,DEo),e(q,Z2),e(Z2,Jse),e(Jse,GEo),e(Z2,OEo),e(Z2,nN),e(nN,VEo),e(Z2,XEo),e(q,zEo),e(q,e1),e(e1,Yse),e(Yse,QEo),e(e1,WEo),e(e1,sN),e(sN,HEo),e(e1,UEo),e(q,JEo),e(q,o1),e(o1,Kse),e(Kse,YEo),e(o1,KEo),e(o1,lN),e(lN,ZEo),e(o1,eCo),e(q,oCo),e(q,r1),e(r1,Zse),e(Zse,rCo),e(r1,tCo),e(r1,iN),e(iN,aCo),e(r1,nCo),e(q,sCo),e(q,t1),e(t1,ele),e(ele,lCo),e(t1,iCo),e(t1,dN),e(dN,dCo),e(t1,cCo),e(q,fCo),e(q,a1),e(a1,ole),e(ole,mCo),e(a1,gCo),e(a1,rle),e(rle,hCo),e(a1,pCo),e(q,uCo),e(q,n1),e(n1,tle),e(tle,_Co),e(n1,bCo),e(n1,cN),e(cN,FCo),e(n1,vCo),e(q,TCo),e(q,s1),e(s1,ale),e(ale,MCo),e(s1,ECo),e(s1,fN),e(fN,CCo),e(s1,wCo),e(q,ACo),e(q,l1),e(l1,nle),e(nle,yCo),e(l1,LCo),e(l1,mN),e(mN,xCo),e(l1,$Co),e(q,kCo),e(q,i1),e(i1,sle),e(sle,SCo),e(i1,RCo),e(i1,gN),e(gN,BCo),e(i1,PCo),e(q,ICo),e(q,d1),e(d1,lle),e(lle,qCo),e(d1,NCo),e(d1,hN),e(hN,jCo),e(d1,DCo),e(q,GCo),e(q,c1),e(c1,ile),e(ile,OCo),e(c1,VCo),e(c1,pN),e(pN,XCo),e(c1,zCo),e(q,QCo),e(q,f1),e(f1,dle),e(dle,WCo),e(f1,HCo),e(f1,uN),e(uN,UCo),e(f1,JCo),e(q,YCo),e(q,m1),e(m1,cle),e(cle,KCo),e(m1,ZCo),e(m1,_N),e(_N,e3o),e(m1,o3o),e(q,r3o),e(q,g1),e(g1,fle),e(fle,t3o),e(g1,a3o),e(g1,bN),e(bN,n3o),e(g1,s3o),e(q,l3o),e(q,h1),e(h1,mle),e(mle,i3o),e(h1,d3o),e(h1,FN),e(FN,c3o),e(h1,f3o),e(q,m3o),e(q,p1),e(p1,gle),e(gle,g3o),e(p1,h3o),e(p1,vN),e(vN,p3o),e(p1,u3o),e(q,_3o),e(q,u1),e(u1,hle),e(hle,b3o),e(u1,F3o),e(u1,TN),e(TN,v3o),e(u1,T3o),e(Je,M3o),e(Je,_1),e(_1,E3o),e(_1,ple),e(ple,C3o),e(_1,w3o),e(_1,ule),e(ule,A3o),e(Je,y3o),M(b1,Je,null),b(f,Z$e,_),b(f,Ci,_),e(Ci,F1),e(F1,_le),M(xA,_le,null),e(Ci,L3o),e(Ci,ble),e(ble,x3o),b(f,eke,_),b(f,So,_),M($A,So,null),e(So,$3o),e(So,wi),e(wi,k3o),e(wi,MN),e(MN,S3o),e(wi,R3o),e(wi,EN),e(EN,B3o),e(wi,P3o),e(So,I3o),e(So,kA),e(kA,q3o),e(kA,Fle),e(Fle,N3o),e(kA,j3o),e(So,D3o),e(So,at),M(SA,at,null),e(at,G3o),e(at,vle),e(vle,O3o),e(at,V3o),e(at,Ai),e(Ai,X3o),e(Ai,Tle),e(Tle,z3o),e(Ai,Q3o),e(Ai,CN),e(CN,W3o),e(Ai,H3o),e(at,U3o),M(v1,at,null),e(So,J3o),e(So,Ye),M(RA,Ye,null),e(Ye,Y3o),e(Ye,Mle),e(Mle,K3o),e(Ye,Z3o),e(Ye,La),e(La,ewo),e(La,Ele),e(Ele,owo),e(La,rwo),e(La,Cle),e(Cle,two),e(La,awo),e(La,wle),e(wle,nwo),e(La,swo),e(Ye,lwo),e(Ye,Y),e(Y,T1),e(T1,Ale),e(Ale,iwo),e(T1,dwo),e(T1,wN),e(wN,cwo),e(T1,fwo),e(Y,mwo),e(Y,M1),e(M1,yle),e(yle,gwo),e(M1,hwo),e(M1,AN),e(AN,pwo),e(M1,uwo),e(Y,_wo),e(Y,E1),e(E1,Lle),e(Lle,bwo),e(E1,Fwo),e(E1,yN),e(yN,vwo),e(E1,Two),e(Y,Mwo),e(Y,C1),e(C1,xle),e(xle,Ewo),e(C1,Cwo),e(C1,LN),e(LN,wwo),e(C1,Awo),e(Y,ywo),e(Y,w1),e(w1,$le),e($le,Lwo),e(w1,xwo),e(w1,xN),e(xN,$wo),e(w1,kwo),e(Y,Swo),e(Y,A1),e(A1,kle),e(kle,Rwo),e(A1,Bwo),e(A1,$N),e($N,Pwo),e(A1,Iwo),e(Y,qwo),e(Y,y1),e(y1,Sle),e(Sle,Nwo),e(y1,jwo),e(y1,kN),e(kN,Dwo),e(y1,Gwo),e(Y,Owo),e(Y,L1),e(L1,Rle),e(Rle,Vwo),e(L1,Xwo),e(L1,SN),e(SN,zwo),e(L1,Qwo),e(Y,Wwo),e(Y,x1),e(x1,Ble),e(Ble,Hwo),e(x1,Uwo),e(x1,RN),e(RN,Jwo),e(x1,Ywo),e(Y,Kwo),e(Y,$1),e($1,Ple),e(Ple,Zwo),e($1,eAo),e($1,BN),e(BN,oAo),e($1,rAo),e(Y,tAo),e(Y,k1),e(k1,Ile),e(Ile,aAo),e(k1,nAo),e(k1,PN),e(PN,sAo),e(k1,lAo),e(Y,iAo),e(Y,S1),e(S1,qle),e(qle,dAo),e(S1,cAo),e(S1,IN),e(IN,fAo),e(S1,mAo),e(Y,gAo),e(Y,R1),e(R1,Nle),e(Nle,hAo),e(R1,pAo),e(R1,qN),e(qN,uAo),e(R1,_Ao),e(Y,bAo),e(Y,B1),e(B1,jle),e(jle,FAo),e(B1,vAo),e(B1,NN),e(NN,TAo),e(B1,MAo),e(Y,EAo),e(Y,P1),e(P1,Dle),e(Dle,CAo),e(P1,wAo),e(P1,jN),e(jN,AAo),e(P1,yAo),e(Y,LAo),e(Y,I1),e(I1,Gle),e(Gle,xAo),e(I1,$Ao),e(I1,DN),e(DN,kAo),e(I1,SAo),e(Y,RAo),e(Y,q1),e(q1,Ole),e(Ole,BAo),e(q1,PAo),e(q1,GN),e(GN,IAo),e(q1,qAo),e(Y,NAo),e(Y,N1),e(N1,Vle),e(Vle,jAo),e(N1,DAo),e(N1,ON),e(ON,GAo),e(N1,OAo),e(Y,VAo),e(Y,j1),e(j1,Xle),e(Xle,XAo),e(j1,zAo),e(j1,zle),e(zle,QAo),e(j1,WAo),e(Y,HAo),e(Y,D1),e(D1,Qle),e(Qle,UAo),e(D1,JAo),e(D1,VN),e(VN,YAo),e(D1,KAo),e(Y,ZAo),e(Y,G1),e(G1,Wle),e(Wle,e0o),e(G1,o0o),e(G1,XN),e(XN,r0o),e(G1,t0o),e(Y,a0o),e(Y,O1),e(O1,Hle),e(Hle,n0o),e(O1,s0o),e(O1,zN),e(zN,l0o),e(O1,i0o),e(Y,d0o),e(Y,V1),e(V1,Ule),e(Ule,c0o),e(V1,f0o),e(V1,QN),e(QN,m0o),e(V1,g0o),e(Y,h0o),e(Y,X1),e(X1,Jle),e(Jle,p0o),e(X1,u0o),e(X1,WN),e(WN,_0o),e(X1,b0o),e(Y,F0o),e(Y,z1),e(z1,Yle),e(Yle,v0o),e(z1,T0o),e(z1,HN),e(HN,M0o),e(z1,E0o),e(Y,C0o),e(Y,Q1),e(Q1,Kle),e(Kle,w0o),e(Q1,A0o),e(Q1,UN),e(UN,y0o),e(Q1,L0o),e(Y,x0o),e(Y,W1),e(W1,Zle),e(Zle,$0o),e(W1,k0o),e(W1,JN),e(JN,S0o),e(W1,R0o),e(Y,B0o),e(Y,H1),e(H1,eie),e(eie,P0o),e(H1,I0o),e(H1,YN),e(YN,q0o),e(H1,N0o),e(Ye,j0o),e(Ye,U1),e(U1,D0o),e(U1,oie),e(oie,G0o),e(U1,O0o),e(U1,rie),e(rie,V0o),e(Ye,X0o),M(J1,Ye,null),b(f,oke,_),b(f,yi,_),e(yi,Y1),e(Y1,tie),M(BA,tie,null),e(yi,z0o),e(yi,aie),e(aie,Q0o),b(f,rke,_),b(f,Ro,_),M(PA,Ro,null),e(Ro,W0o),e(Ro,Li),e(Li,H0o),e(Li,KN),e(KN,U0o),e(Li,J0o),e(Li,ZN),e(ZN,Y0o),e(Li,K0o),e(Ro,Z0o),e(Ro,IA),e(IA,eyo),e(IA,nie),e(nie,oyo),e(IA,ryo),e(Ro,tyo),e(Ro,nt),M(qA,nt,null),e(nt,ayo),e(nt,sie),e(sie,nyo),e(nt,syo),e(nt,xi),e(xi,lyo),e(xi,lie),e(lie,iyo),e(xi,dyo),e(xi,ej),e(ej,cyo),e(xi,fyo),e(nt,myo),M(K1,nt,null),e(Ro,gyo),e(Ro,Ke),M(NA,Ke,null),e(Ke,hyo),e(Ke,iie),e(iie,pyo),e(Ke,uyo),e(Ke,xa),e(xa,_yo),e(xa,die),e(die,byo),e(xa,Fyo),e(xa,cie),e(cie,vyo),e(xa,Tyo),e(xa,fie),e(fie,Myo),e(xa,Eyo),e(Ke,Cyo),e(Ke,Wr),e(Wr,Z1),e(Z1,mie),e(mie,wyo),e(Z1,Ayo),e(Z1,oj),e(oj,yyo),e(Z1,Lyo),e(Wr,xyo),e(Wr,eb),e(eb,gie),e(gie,$yo),e(eb,kyo),e(eb,rj),e(rj,Syo),e(eb,Ryo),e(Wr,Byo),e(Wr,ob),e(ob,hie),e(hie,Pyo),e(ob,Iyo),e(ob,tj),e(tj,qyo),e(ob,Nyo),e(Wr,jyo),e(Wr,rb),e(rb,pie),e(pie,Dyo),e(rb,Gyo),e(rb,aj),e(aj,Oyo),e(rb,Vyo),e(Wr,Xyo),e(Wr,tb),e(tb,uie),e(uie,zyo),e(tb,Qyo),e(tb,_ie),e(_ie,Wyo),e(tb,Hyo),e(Ke,Uyo),e(Ke,ab),e(ab,Jyo),e(ab,bie),e(bie,Yyo),e(ab,Kyo),e(ab,Fie),e(Fie,Zyo),e(Ke,eLo),M(nb,Ke,null),b(f,tke,_),b(f,$i,_),e($i,sb),e(sb,vie),M(jA,vie,null),e($i,oLo),e($i,Tie),e(Tie,rLo),b(f,ake,_),b(f,Bo,_),M(DA,Bo,null),e(Bo,tLo),e(Bo,ki),e(ki,aLo),e(ki,nj),e(nj,nLo),e(ki,sLo),e(ki,sj),e(sj,lLo),e(ki,iLo),e(Bo,dLo),e(Bo,GA),e(GA,cLo),e(GA,Mie),e(Mie,fLo),e(GA,mLo),e(Bo,gLo),e(Bo,st),M(OA,st,null),e(st,hLo),e(st,Eie),e(Eie,pLo),e(st,uLo),e(st,Si),e(Si,_Lo),e(Si,Cie),e(Cie,bLo),e(Si,FLo),e(Si,lj),e(lj,vLo),e(Si,TLo),e(st,MLo),M(lb,st,null),e(Bo,ELo),e(Bo,Ze),M(VA,Ze,null),e(Ze,CLo),e(Ze,wie),e(wie,wLo),e(Ze,ALo),e(Ze,$a),e($a,yLo),e($a,Aie),e(Aie,LLo),e($a,xLo),e($a,yie),e(yie,$Lo),e($a,kLo),e($a,Lie),e(Lie,SLo),e($a,RLo),e(Ze,BLo),e(Ze,U),e(U,ib),e(ib,xie),e(xie,PLo),e(ib,ILo),e(ib,ij),e(ij,qLo),e(ib,NLo),e(U,jLo),e(U,db),e(db,$ie),e($ie,DLo),e(db,GLo),e(db,dj),e(dj,OLo),e(db,VLo),e(U,XLo),e(U,cb),e(cb,kie),e(kie,zLo),e(cb,QLo),e(cb,cj),e(cj,WLo),e(cb,HLo),e(U,ULo),e(U,fb),e(fb,Sie),e(Sie,JLo),e(fb,YLo),e(fb,fj),e(fj,KLo),e(fb,ZLo),e(U,e8o),e(U,mb),e(mb,Rie),e(Rie,o8o),e(mb,r8o),e(mb,mj),e(mj,t8o),e(mb,a8o),e(U,n8o),e(U,gb),e(gb,Bie),e(Bie,s8o),e(gb,l8o),e(gb,gj),e(gj,i8o),e(gb,d8o),e(U,c8o),e(U,hb),e(hb,Pie),e(Pie,f8o),e(hb,m8o),e(hb,hj),e(hj,g8o),e(hb,h8o),e(U,p8o),e(U,pb),e(pb,Iie),e(Iie,u8o),e(pb,_8o),e(pb,pj),e(pj,b8o),e(pb,F8o),e(U,v8o),e(U,ub),e(ub,qie),e(qie,T8o),e(ub,M8o),e(ub,uj),e(uj,E8o),e(ub,C8o),e(U,w8o),e(U,_b),e(_b,Nie),e(Nie,A8o),e(_b,y8o),e(_b,_j),e(_j,L8o),e(_b,x8o),e(U,$8o),e(U,bb),e(bb,jie),e(jie,k8o),e(bb,S8o),e(bb,bj),e(bj,R8o),e(bb,B8o),e(U,P8o),e(U,Fb),e(Fb,Die),e(Die,I8o),e(Fb,q8o),e(Fb,Fj),e(Fj,N8o),e(Fb,j8o),e(U,D8o),e(U,vb),e(vb,Gie),e(Gie,G8o),e(vb,O8o),e(vb,vj),e(vj,V8o),e(vb,X8o),e(U,z8o),e(U,Tb),e(Tb,Oie),e(Oie,Q8o),e(Tb,W8o),e(Tb,Tj),e(Tj,H8o),e(Tb,U8o),e(U,J8o),e(U,Mb),e(Mb,Vie),e(Vie,Y8o),e(Mb,K8o),e(Mb,Mj),e(Mj,Z8o),e(Mb,exo),e(U,oxo),e(U,Eb),e(Eb,Xie),e(Xie,rxo),e(Eb,txo),e(Eb,Ej),e(Ej,axo),e(Eb,nxo),e(U,sxo),e(U,Cb),e(Cb,zie),e(zie,lxo),e(Cb,ixo),e(Cb,Cj),e(Cj,dxo),e(Cb,cxo),e(U,fxo),e(U,wb),e(wb,Qie),e(Qie,mxo),e(wb,gxo),e(wb,wj),e(wj,hxo),e(wb,pxo),e(U,uxo),e(U,Ab),e(Ab,Wie),e(Wie,_xo),e(Ab,bxo),e(Ab,Aj),e(Aj,Fxo),e(Ab,vxo),e(U,Txo),e(U,yb),e(yb,Hie),e(Hie,Mxo),e(yb,Exo),e(yb,yj),e(yj,Cxo),e(yb,wxo),e(U,Axo),e(U,Lb),e(Lb,Uie),e(Uie,yxo),e(Lb,Lxo),e(Lb,Lj),e(Lj,xxo),e(Lb,$xo),e(U,kxo),e(U,xb),e(xb,Jie),e(Jie,Sxo),e(xb,Rxo),e(xb,xj),e(xj,Bxo),e(xb,Pxo),e(U,Ixo),e(U,$b),e($b,Yie),e(Yie,qxo),e($b,Nxo),e($b,$j),e($j,jxo),e($b,Dxo),e(U,Gxo),e(U,kb),e(kb,Kie),e(Kie,Oxo),e(kb,Vxo),e(kb,Zie),e(Zie,Xxo),e(kb,zxo),e(U,Qxo),e(U,Sb),e(Sb,ede),e(ede,Wxo),e(Sb,Hxo),e(Sb,kj),e(kj,Uxo),e(Sb,Jxo),e(U,Yxo),e(U,Rb),e(Rb,ode),e(ode,Kxo),e(Rb,Zxo),e(Rb,Sj),e(Sj,e7o),e(Rb,o7o),e(U,r7o),e(U,Bb),e(Bb,rde),e(rde,t7o),e(Bb,a7o),e(Bb,Rj),e(Rj,n7o),e(Bb,s7o),e(U,l7o),e(U,Pb),e(Pb,tde),e(tde,i7o),e(Pb,d7o),e(Pb,Bj),e(Bj,c7o),e(Pb,f7o),e(U,m7o),e(U,Ib),e(Ib,ade),e(ade,g7o),e(Ib,h7o),e(Ib,Pj),e(Pj,p7o),e(Ib,u7o),e(U,_7o),e(U,qb),e(qb,nde),e(nde,b7o),e(qb,F7o),e(qb,Ij),e(Ij,v7o),e(qb,T7o),e(U,M7o),e(U,Nb),e(Nb,sde),e(sde,E7o),e(Nb,C7o),e(Nb,qj),e(qj,w7o),e(Nb,A7o),e(U,y7o),e(U,jb),e(jb,lde),e(lde,L7o),e(jb,x7o),e(jb,Nj),e(Nj,$7o),e(jb,k7o),e(U,S7o),e(U,Db),e(Db,ide),e(ide,R7o),e(Db,B7o),e(Db,jj),e(jj,P7o),e(Db,I7o),e(Ze,q7o),e(Ze,Gb),e(Gb,N7o),e(Gb,dde),e(dde,j7o),e(Gb,D7o),e(Gb,cde),e(cde,G7o),e(Ze,O7o),M(Ob,Ze,null),b(f,nke,_),b(f,Ri,_),e(Ri,Vb),e(Vb,fde),M(XA,fde,null),e(Ri,V7o),e(Ri,mde),e(mde,X7o),b(f,ske,_),b(f,Po,_),M(zA,Po,null),e(Po,z7o),e(Po,Bi),e(Bi,Q7o),e(Bi,Dj),e(Dj,W7o),e(Bi,H7o),e(Bi,Gj),e(Gj,U7o),e(Bi,J7o),e(Po,Y7o),e(Po,QA),e(QA,K7o),e(QA,gde),e(gde,Z7o),e(QA,e$o),e(Po,o$o),e(Po,lt),M(WA,lt,null),e(lt,r$o),e(lt,hde),e(hde,t$o),e(lt,a$o),e(lt,Pi),e(Pi,n$o),e(Pi,pde),e(pde,s$o),e(Pi,l$o),e(Pi,Oj),e(Oj,i$o),e(Pi,d$o),e(lt,c$o),M(Xb,lt,null),e(Po,f$o),e(Po,eo),M(HA,eo,null),e(eo,m$o),e(eo,ude),e(ude,g$o),e(eo,h$o),e(eo,ka),e(ka,p$o),e(ka,_de),e(_de,u$o),e(ka,_$o),e(ka,bde),e(bde,b$o),e(ka,F$o),e(ka,Fde),e(Fde,v$o),e(ka,T$o),e(eo,M$o),e(eo,O),e(O,zb),e(zb,vde),e(vde,E$o),e(zb,C$o),e(zb,Vj),e(Vj,w$o),e(zb,A$o),e(O,y$o),e(O,Qb),e(Qb,Tde),e(Tde,L$o),e(Qb,x$o),e(Qb,Xj),e(Xj,$$o),e(Qb,k$o),e(O,S$o),e(O,Wb),e(Wb,Mde),e(Mde,R$o),e(Wb,B$o),e(Wb,zj),e(zj,P$o),e(Wb,I$o),e(O,q$o),e(O,Hb),e(Hb,Ede),e(Ede,N$o),e(Hb,j$o),e(Hb,Qj),e(Qj,D$o),e(Hb,G$o),e(O,O$o),e(O,Ub),e(Ub,Cde),e(Cde,V$o),e(Ub,X$o),e(Ub,Wj),e(Wj,z$o),e(Ub,Q$o),e(O,W$o),e(O,Jb),e(Jb,wde),e(wde,H$o),e(Jb,U$o),e(Jb,Hj),e(Hj,J$o),e(Jb,Y$o),e(O,K$o),e(O,Yb),e(Yb,Ade),e(Ade,Z$o),e(Yb,eko),e(Yb,Uj),e(Uj,oko),e(Yb,rko),e(O,tko),e(O,Kb),e(Kb,yde),e(yde,ako),e(Kb,nko),e(Kb,Jj),e(Jj,sko),e(Kb,lko),e(O,iko),e(O,Zb),e(Zb,Lde),e(Lde,dko),e(Zb,cko),e(Zb,Yj),e(Yj,fko),e(Zb,mko),e(O,gko),e(O,e5),e(e5,xde),e(xde,hko),e(e5,pko),e(e5,Kj),e(Kj,uko),e(e5,_ko),e(O,bko),e(O,o5),e(o5,$de),e($de,Fko),e(o5,vko),e(o5,Zj),e(Zj,Tko),e(o5,Mko),e(O,Eko),e(O,r5),e(r5,kde),e(kde,Cko),e(r5,wko),e(r5,eD),e(eD,Ako),e(r5,yko),e(O,Lko),e(O,t5),e(t5,Sde),e(Sde,xko),e(t5,$ko),e(t5,oD),e(oD,kko),e(t5,Sko),e(O,Rko),e(O,a5),e(a5,Rde),e(Rde,Bko),e(a5,Pko),e(a5,rD),e(rD,Iko),e(a5,qko),e(O,Nko),e(O,n5),e(n5,Bde),e(Bde,jko),e(n5,Dko),e(n5,tD),e(tD,Gko),e(n5,Oko),e(O,Vko),e(O,s5),e(s5,Pde),e(Pde,Xko),e(s5,zko),e(s5,aD),e(aD,Qko),e(s5,Wko),e(O,Hko),e(O,l5),e(l5,Ide),e(Ide,Uko),e(l5,Jko),e(l5,nD),e(nD,Yko),e(l5,Kko),e(O,Zko),e(O,i5),e(i5,qde),e(qde,eSo),e(i5,oSo),e(i5,sD),e(sD,rSo),e(i5,tSo),e(O,aSo),e(O,d5),e(d5,Nde),e(Nde,nSo),e(d5,sSo),e(d5,lD),e(lD,lSo),e(d5,iSo),e(O,dSo),e(O,c5),e(c5,jde),e(jde,cSo),e(c5,fSo),e(c5,iD),e(iD,mSo),e(c5,gSo),e(O,hSo),e(O,f5),e(f5,Dde),e(Dde,pSo),e(f5,uSo),e(f5,dD),e(dD,_So),e(f5,bSo),e(O,FSo),e(O,m5),e(m5,Gde),e(Gde,vSo),e(m5,TSo),e(m5,cD),e(cD,MSo),e(m5,ESo),e(O,CSo),e(O,g5),e(g5,Ode),e(Ode,wSo),e(g5,ASo),e(g5,fD),e(fD,ySo),e(g5,LSo),e(O,xSo),e(O,h5),e(h5,Vde),e(Vde,$So),e(h5,kSo),e(h5,mD),e(mD,SSo),e(h5,RSo),e(O,BSo),e(O,p5),e(p5,Xde),e(Xde,PSo),e(p5,ISo),e(p5,gD),e(gD,qSo),e(p5,NSo),e(O,jSo),e(O,u5),e(u5,zde),e(zde,DSo),e(u5,GSo),e(u5,hD),e(hD,OSo),e(u5,VSo),e(O,XSo),e(O,_5),e(_5,Qde),e(Qde,zSo),e(_5,QSo),e(_5,pD),e(pD,WSo),e(_5,HSo),e(O,USo),e(O,b5),e(b5,Wde),e(Wde,JSo),e(b5,YSo),e(b5,Hde),e(Hde,KSo),e(b5,ZSo),e(O,eRo),e(O,F5),e(F5,Ude),e(Ude,oRo),e(F5,rRo),e(F5,uD),e(uD,tRo),e(F5,aRo),e(O,nRo),e(O,v5),e(v5,Jde),e(Jde,sRo),e(v5,lRo),e(v5,_D),e(_D,iRo),e(v5,dRo),e(O,cRo),e(O,T5),e(T5,Yde),e(Yde,fRo),e(T5,mRo),e(T5,bD),e(bD,gRo),e(T5,hRo),e(O,pRo),e(O,M5),e(M5,Kde),e(Kde,uRo),e(M5,_Ro),e(M5,FD),e(FD,bRo),e(M5,FRo),e(O,vRo),e(O,E5),e(E5,Zde),e(Zde,TRo),e(E5,MRo),e(E5,vD),e(vD,ERo),e(E5,CRo),e(O,wRo),e(O,C5),e(C5,ece),e(ece,ARo),e(C5,yRo),e(C5,TD),e(TD,LRo),e(C5,xRo),e(O,$Ro),e(O,w5),e(w5,oce),e(oce,kRo),e(w5,SRo),e(w5,MD),e(MD,RRo),e(w5,BRo),e(O,PRo),e(O,A5),e(A5,rce),e(rce,IRo),e(A5,qRo),e(A5,ED),e(ED,NRo),e(A5,jRo),e(O,DRo),e(O,y5),e(y5,tce),e(tce,GRo),e(y5,ORo),e(y5,CD),e(CD,VRo),e(y5,XRo),e(O,zRo),e(O,L5),e(L5,ace),e(ace,QRo),e(L5,WRo),e(L5,wD),e(wD,HRo),e(L5,URo),e(O,JRo),e(O,x5),e(x5,nce),e(nce,YRo),e(x5,KRo),e(x5,AD),e(AD,ZRo),e(x5,eBo),e(eo,oBo),e(eo,$5),e($5,rBo),e($5,sce),e(sce,tBo),e($5,aBo),e($5,lce),e(lce,nBo),e(eo,sBo),M(k5,eo,null),b(f,lke,_),b(f,Ii,_),e(Ii,S5),e(S5,ice),M(UA,ice,null),e(Ii,lBo),e(Ii,dce),e(dce,iBo),b(f,ike,_),b(f,Io,_),M(JA,Io,null),e(Io,dBo),e(Io,qi),e(qi,cBo),e(qi,yD),e(yD,fBo),e(qi,mBo),e(qi,LD),e(LD,gBo),e(qi,hBo),e(Io,pBo),e(Io,YA),e(YA,uBo),e(YA,cce),e(cce,_Bo),e(YA,bBo),e(Io,FBo),e(Io,it),M(KA,it,null),e(it,vBo),e(it,fce),e(fce,TBo),e(it,MBo),e(it,Ni),e(Ni,EBo),e(Ni,mce),e(mce,CBo),e(Ni,wBo),e(Ni,xD),e(xD,ABo),e(Ni,yBo),e(it,LBo),M(R5,it,null),e(Io,xBo),e(Io,oo),M(ZA,oo,null),e(oo,$Bo),e(oo,gce),e(gce,kBo),e(oo,SBo),e(oo,Sa),e(Sa,RBo),e(Sa,hce),e(hce,BBo),e(Sa,PBo),e(Sa,pce),e(pce,IBo),e(Sa,qBo),e(Sa,uce),e(uce,NBo),e(Sa,jBo),e(oo,DBo),e(oo,_ce),e(_ce,B5),e(B5,bce),e(bce,GBo),e(B5,OBo),e(B5,$D),e($D,VBo),e(B5,XBo),e(oo,zBo),e(oo,P5),e(P5,QBo),e(P5,Fce),e(Fce,WBo),e(P5,HBo),e(P5,vce),e(vce,UBo),e(oo,JBo),M(I5,oo,null),b(f,dke,_),b(f,ji,_),e(ji,q5),e(q5,Tce),M(e0,Tce,null),e(ji,YBo),e(ji,Mce),e(Mce,KBo),b(f,cke,_),b(f,qo,_),M(o0,qo,null),e(qo,ZBo),e(qo,Di),e(Di,ePo),e(Di,kD),e(kD,oPo),e(Di,rPo),e(Di,SD),e(SD,tPo),e(Di,aPo),e(qo,nPo),e(qo,r0),e(r0,sPo),e(r0,Ece),e(Ece,lPo),e(r0,iPo),e(qo,dPo),e(qo,dt),M(t0,dt,null),e(dt,cPo),e(dt,Cce),e(Cce,fPo),e(dt,mPo),e(dt,Gi),e(Gi,gPo),e(Gi,wce),e(wce,hPo),e(Gi,pPo),e(Gi,RD),e(RD,uPo),e(Gi,_Po),e(dt,bPo),M(N5,dt,null),e(qo,FPo),e(qo,ro),M(a0,ro,null),e(ro,vPo),e(ro,Ace),e(Ace,TPo),e(ro,MPo),e(ro,Ra),e(Ra,EPo),e(Ra,yce),e(yce,CPo),e(Ra,wPo),e(Ra,Lce),e(Lce,APo),e(Ra,yPo),e(Ra,xce),e(xce,LPo),e(Ra,xPo),e(ro,$Po),e(ro,Fe),e(Fe,j5),e(j5,$ce),e($ce,kPo),e(j5,SPo),e(j5,BD),e(BD,RPo),e(j5,BPo),e(Fe,PPo),e(Fe,D5),e(D5,kce),e(kce,IPo),e(D5,qPo),e(D5,PD),e(PD,NPo),e(D5,jPo),e(Fe,DPo),e(Fe,Fs),e(Fs,Sce),e(Sce,GPo),e(Fs,OPo),e(Fs,ID),e(ID,VPo),e(Fs,XPo),e(Fs,qD),e(qD,zPo),e(Fs,QPo),e(Fe,WPo),e(Fe,G5),e(G5,Rce),e(Rce,HPo),e(G5,UPo),e(G5,ND),e(ND,JPo),e(G5,YPo),e(Fe,KPo),e(Fe,ct),e(ct,Bce),e(Bce,ZPo),e(ct,eIo),e(ct,jD),e(jD,oIo),e(ct,rIo),e(ct,DD),e(DD,tIo),e(ct,aIo),e(ct,GD),e(GD,nIo),e(ct,sIo),e(Fe,lIo),e(Fe,O5),e(O5,Pce),e(Pce,iIo),e(O5,dIo),e(O5,OD),e(OD,cIo),e(O5,fIo),e(Fe,mIo),e(Fe,V5),e(V5,Ice),e(Ice,gIo),e(V5,hIo),e(V5,VD),e(VD,pIo),e(V5,uIo),e(Fe,_Io),e(Fe,X5),e(X5,qce),e(qce,bIo),e(X5,FIo),e(X5,XD),e(XD,vIo),e(X5,TIo),e(Fe,MIo),e(Fe,z5),e(z5,Nce),e(Nce,EIo),e(z5,CIo),e(z5,zD),e(zD,wIo),e(z5,AIo),e(Fe,yIo),e(Fe,Q5),e(Q5,jce),e(jce,LIo),e(Q5,xIo),e(Q5,QD),e(QD,$Io),e(Q5,kIo),e(Fe,SIo),e(Fe,W5),e(W5,Dce),e(Dce,RIo),e(W5,BIo),e(W5,WD),e(WD,PIo),e(W5,IIo),e(ro,qIo),e(ro,H5),e(H5,NIo),e(H5,Gce),e(Gce,jIo),e(H5,DIo),e(H5,Oce),e(Oce,GIo),e(ro,OIo),M(U5,ro,null),b(f,fke,_),b(f,Oi,_),e(Oi,J5),e(J5,Vce),M(n0,Vce,null),e(Oi,VIo),e(Oi,Xce),e(Xce,XIo),b(f,mke,_),b(f,No,_),M(s0,No,null),e(No,zIo),e(No,Vi),e(Vi,QIo),e(Vi,HD),e(HD,WIo),e(Vi,HIo),e(Vi,UD),e(UD,UIo),e(Vi,JIo),e(No,YIo),e(No,l0),e(l0,KIo),e(l0,zce),e(zce,ZIo),e(l0,eqo),e(No,oqo),e(No,ft),M(i0,ft,null),e(ft,rqo),e(ft,Qce),e(Qce,tqo),e(ft,aqo),e(ft,Xi),e(Xi,nqo),e(Xi,Wce),e(Wce,sqo),e(Xi,lqo),e(Xi,JD),e(JD,iqo),e(Xi,dqo),e(ft,cqo),M(Y5,ft,null),e(No,fqo),e(No,to),M(d0,to,null),e(to,mqo),e(to,Hce),e(Hce,gqo),e(to,hqo),e(to,Ba),e(Ba,pqo),e(Ba,Uce),e(Uce,uqo),e(Ba,_qo),e(Ba,Jce),e(Jce,bqo),e(Ba,Fqo),e(Ba,Yce),e(Yce,vqo),e(Ba,Tqo),e(to,Mqo),e(to,Kce),e(Kce,K5),e(K5,Zce),e(Zce,Eqo),e(K5,Cqo),e(K5,YD),e(YD,wqo),e(K5,Aqo),e(to,yqo),e(to,Z5),e(Z5,Lqo),e(Z5,efe),e(efe,xqo),e(Z5,$qo),e(Z5,ofe),e(ofe,kqo),e(to,Sqo),M(eF,to,null),b(f,gke,_),b(f,zi,_),e(zi,oF),e(oF,rfe),M(c0,rfe,null),e(zi,Rqo),e(zi,tfe),e(tfe,Bqo),b(f,hke,_),b(f,jo,_),M(f0,jo,null),e(jo,Pqo),e(jo,Qi),e(Qi,Iqo),e(Qi,KD),e(KD,qqo),e(Qi,Nqo),e(Qi,ZD),e(ZD,jqo),e(Qi,Dqo),e(jo,Gqo),e(jo,m0),e(m0,Oqo),e(m0,afe),e(afe,Vqo),e(m0,Xqo),e(jo,zqo),e(jo,mt),M(g0,mt,null),e(mt,Qqo),e(mt,nfe),e(nfe,Wqo),e(mt,Hqo),e(mt,Wi),e(Wi,Uqo),e(Wi,sfe),e(sfe,Jqo),e(Wi,Yqo),e(Wi,eG),e(eG,Kqo),e(Wi,Zqo),e(mt,eNo),M(rF,mt,null),e(jo,oNo),e(jo,ao),M(h0,ao,null),e(ao,rNo),e(ao,lfe),e(lfe,tNo),e(ao,aNo),e(ao,Pa),e(Pa,nNo),e(Pa,ife),e(ife,sNo),e(Pa,lNo),e(Pa,dfe),e(dfe,iNo),e(Pa,dNo),e(Pa,cfe),e(cfe,cNo),e(Pa,fNo),e(ao,mNo),e(ao,Ie),e(Ie,tF),e(tF,ffe),e(ffe,gNo),e(tF,hNo),e(tF,oG),e(oG,pNo),e(tF,uNo),e(Ie,_No),e(Ie,aF),e(aF,mfe),e(mfe,bNo),e(aF,FNo),e(aF,rG),e(rG,vNo),e(aF,TNo),e(Ie,MNo),e(Ie,nF),e(nF,gfe),e(gfe,ENo),e(nF,CNo),e(nF,tG),e(tG,wNo),e(nF,ANo),e(Ie,yNo),e(Ie,sF),e(sF,hfe),e(hfe,LNo),e(sF,xNo),e(sF,aG),e(aG,$No),e(sF,kNo),e(Ie,SNo),e(Ie,lF),e(lF,pfe),e(pfe,RNo),e(lF,BNo),e(lF,nG),e(nG,PNo),e(lF,INo),e(Ie,qNo),e(Ie,iF),e(iF,ufe),e(ufe,NNo),e(iF,jNo),e(iF,sG),e(sG,DNo),e(iF,GNo),e(Ie,ONo),e(Ie,dF),e(dF,_fe),e(_fe,VNo),e(dF,XNo),e(dF,lG),e(lG,zNo),e(dF,QNo),e(Ie,WNo),e(Ie,cF),e(cF,bfe),e(bfe,HNo),e(cF,UNo),e(cF,iG),e(iG,JNo),e(cF,YNo),e(ao,KNo),e(ao,fF),e(fF,ZNo),e(fF,Ffe),e(Ffe,ejo),e(fF,ojo),e(fF,vfe),e(vfe,rjo),e(ao,tjo),M(mF,ao,null),b(f,pke,_),b(f,Hi,_),e(Hi,gF),e(gF,Tfe),M(p0,Tfe,null),e(Hi,ajo),e(Hi,Mfe),e(Mfe,njo),b(f,uke,_),b(f,Do,_),M(u0,Do,null),e(Do,sjo),e(Do,Ui),e(Ui,ljo),e(Ui,dG),e(dG,ijo),e(Ui,djo),e(Ui,cG),e(cG,cjo),e(Ui,fjo),e(Do,mjo),e(Do,_0),e(_0,gjo),e(_0,Efe),e(Efe,hjo),e(_0,pjo),e(Do,ujo),e(Do,gt),M(b0,gt,null),e(gt,_jo),e(gt,Cfe),e(Cfe,bjo),e(gt,Fjo),e(gt,Ji),e(Ji,vjo),e(Ji,wfe),e(wfe,Tjo),e(Ji,Mjo),e(Ji,fG),e(fG,Ejo),e(Ji,Cjo),e(gt,wjo),M(hF,gt,null),e(Do,Ajo),e(Do,no),M(F0,no,null),e(no,yjo),e(no,Afe),e(Afe,Ljo),e(no,xjo),e(no,Ia),e(Ia,$jo),e(Ia,yfe),e(yfe,kjo),e(Ia,Sjo),e(Ia,Lfe),e(Lfe,Rjo),e(Ia,Bjo),e(Ia,xfe),e(xfe,Pjo),e(Ia,Ijo),e(no,qjo),e(no,qa),e(qa,pF),e(pF,$fe),e($fe,Njo),e(pF,jjo),e(pF,mG),e(mG,Djo),e(pF,Gjo),e(qa,Ojo),e(qa,uF),e(uF,kfe),e(kfe,Vjo),e(uF,Xjo),e(uF,gG),e(gG,zjo),e(uF,Qjo),e(qa,Wjo),e(qa,_F),e(_F,Sfe),e(Sfe,Hjo),e(_F,Ujo),e(_F,hG),e(hG,Jjo),e(_F,Yjo),e(qa,Kjo),e(qa,bF),e(bF,Rfe),e(Rfe,Zjo),e(bF,eDo),e(bF,pG),e(pG,oDo),e(bF,rDo),e(no,tDo),e(no,FF),e(FF,aDo),e(FF,Bfe),e(Bfe,nDo),e(FF,sDo),e(FF,Pfe),e(Pfe,lDo),e(no,iDo),M(vF,no,null),b(f,_ke,_),b(f,Yi,_),e(Yi,TF),e(TF,Ife),M(v0,Ife,null),e(Yi,dDo),e(Yi,qfe),e(qfe,cDo),b(f,bke,_),b(f,Go,_),M(T0,Go,null),e(Go,fDo),e(Go,Ki),e(Ki,mDo),e(Ki,uG),e(uG,gDo),e(Ki,hDo),e(Ki,_G),e(_G,pDo),e(Ki,uDo),e(Go,_Do),e(Go,M0),e(M0,bDo),e(M0,Nfe),e(Nfe,FDo),e(M0,vDo),e(Go,TDo),e(Go,ht),M(E0,ht,null),e(ht,MDo),e(ht,jfe),e(jfe,EDo),e(ht,CDo),e(ht,Zi),e(Zi,wDo),e(Zi,Dfe),e(Dfe,ADo),e(Zi,yDo),e(Zi,bG),e(bG,LDo),e(Zi,xDo),e(ht,$Do),M(MF,ht,null),e(Go,kDo),e(Go,so),M(C0,so,null),e(so,SDo),e(so,Gfe),e(Gfe,RDo),e(so,BDo),e(so,Na),e(Na,PDo),e(Na,Ofe),e(Ofe,IDo),e(Na,qDo),e(Na,Vfe),e(Vfe,NDo),e(Na,jDo),e(Na,Xfe),e(Xfe,DDo),e(Na,GDo),e(so,ODo),e(so,qe),e(qe,EF),e(EF,zfe),e(zfe,VDo),e(EF,XDo),e(EF,FG),e(FG,zDo),e(EF,QDo),e(qe,WDo),e(qe,CF),e(CF,Qfe),e(Qfe,HDo),e(CF,UDo),e(CF,vG),e(vG,JDo),e(CF,YDo),e(qe,KDo),e(qe,wF),e(wF,Wfe),e(Wfe,ZDo),e(wF,eGo),e(wF,TG),e(TG,oGo),e(wF,rGo),e(qe,tGo),e(qe,AF),e(AF,Hfe),e(Hfe,aGo),e(AF,nGo),e(AF,MG),e(MG,sGo),e(AF,lGo),e(qe,iGo),e(qe,yF),e(yF,Ufe),e(Ufe,dGo),e(yF,cGo),e(yF,EG),e(EG,fGo),e(yF,mGo),e(qe,gGo),e(qe,LF),e(LF,Jfe),e(Jfe,hGo),e(LF,pGo),e(LF,CG),e(CG,uGo),e(LF,_Go),e(qe,bGo),e(qe,xF),e(xF,Yfe),e(Yfe,FGo),e(xF,vGo),e(xF,wG),e(wG,TGo),e(xF,MGo),e(qe,EGo),e(qe,$F),e($F,Kfe),e(Kfe,CGo),e($F,wGo),e($F,AG),e(AG,AGo),e($F,yGo),e(so,LGo),e(so,kF),e(kF,xGo),e(kF,Zfe),e(Zfe,$Go),e(kF,kGo),e(kF,eme),e(eme,SGo),e(so,RGo),M(SF,so,null),b(f,Fke,_),b(f,ed,_),e(ed,RF),e(RF,ome),M(w0,ome,null),e(ed,BGo),e(ed,rme),e(rme,PGo),b(f,vke,_),b(f,Oo,_),M(A0,Oo,null),e(Oo,IGo),e(Oo,od),e(od,qGo),e(od,yG),e(yG,NGo),e(od,jGo),e(od,LG),e(LG,DGo),e(od,GGo),e(Oo,OGo),e(Oo,y0),e(y0,VGo),e(y0,tme),e(tme,XGo),e(y0,zGo),e(Oo,QGo),e(Oo,pt),M(L0,pt,null),e(pt,WGo),e(pt,ame),e(ame,HGo),e(pt,UGo),e(pt,rd),e(rd,JGo),e(rd,nme),e(nme,YGo),e(rd,KGo),e(rd,xG),e(xG,ZGo),e(rd,eOo),e(pt,oOo),M(BF,pt,null),e(Oo,rOo),e(Oo,lo),M(x0,lo,null),e(lo,tOo),e(lo,sme),e(sme,aOo),e(lo,nOo),e(lo,ja),e(ja,sOo),e(ja,lme),e(lme,lOo),e(ja,iOo),e(ja,ime),e(ime,dOo),e(ja,cOo),e(ja,dme),e(dme,fOo),e(ja,mOo),e(lo,gOo),e(lo,$0),e($0,PF),e(PF,cme),e(cme,hOo),e(PF,pOo),e(PF,$G),e($G,uOo),e(PF,_Oo),e($0,bOo),e($0,IF),e(IF,fme),e(fme,FOo),e(IF,vOo),e(IF,kG),e(kG,TOo),e(IF,MOo),e(lo,EOo),e(lo,qF),e(qF,COo),e(qF,mme),e(mme,wOo),e(qF,AOo),e(qF,gme),e(gme,yOo),e(lo,LOo),M(NF,lo,null),b(f,Tke,_),b(f,td,_),e(td,jF),e(jF,hme),M(k0,hme,null),e(td,xOo),e(td,pme),e(pme,$Oo),b(f,Mke,_),b(f,Vo,_),M(S0,Vo,null),e(Vo,kOo),e(Vo,ad),e(ad,SOo),e(ad,SG),e(SG,ROo),e(ad,BOo),e(ad,RG),e(RG,POo),e(ad,IOo),e(Vo,qOo),e(Vo,R0),e(R0,NOo),e(R0,ume),e(ume,jOo),e(R0,DOo),e(Vo,GOo),e(Vo,ut),M(B0,ut,null),e(ut,OOo),e(ut,_me),e(_me,VOo),e(ut,XOo),e(ut,nd),e(nd,zOo),e(nd,bme),e(bme,QOo),e(nd,WOo),e(nd,BG),e(BG,HOo),e(nd,UOo),e(ut,JOo),M(DF,ut,null),e(Vo,YOo),e(Vo,io),M(P0,io,null),e(io,KOo),e(io,Fme),e(Fme,ZOo),e(io,eVo),e(io,Da),e(Da,oVo),e(Da,vme),e(vme,rVo),e(Da,tVo),e(Da,Tme),e(Tme,aVo),e(Da,nVo),e(Da,Mme),e(Mme,sVo),e(Da,lVo),e(io,iVo),e(io,Ga),e(Ga,GF),e(GF,Eme),e(Eme,dVo),e(GF,cVo),e(GF,PG),e(PG,fVo),e(GF,mVo),e(Ga,gVo),e(Ga,OF),e(OF,Cme),e(Cme,hVo),e(OF,pVo),e(OF,IG),e(IG,uVo),e(OF,_Vo),e(Ga,bVo),e(Ga,VF),e(VF,wme),e(wme,FVo),e(VF,vVo),e(VF,qG),e(qG,TVo),e(VF,MVo),e(Ga,EVo),e(Ga,XF),e(XF,Ame),e(Ame,CVo),e(XF,wVo),e(XF,NG),e(NG,AVo),e(XF,yVo),e(io,LVo),e(io,zF),e(zF,xVo),e(zF,yme),e(yme,$Vo),e(zF,kVo),e(zF,Lme),e(Lme,SVo),e(io,RVo),M(QF,io,null),b(f,Eke,_),b(f,sd,_),e(sd,WF),e(WF,xme),M(I0,xme,null),e(sd,BVo),e(sd,$me),e($me,PVo),b(f,Cke,_),b(f,Xo,_),M(q0,Xo,null),e(Xo,IVo),e(Xo,ld),e(ld,qVo),e(ld,jG),e(jG,NVo),e(ld,jVo),e(ld,DG),e(DG,DVo),e(ld,GVo),e(Xo,OVo),e(Xo,N0),e(N0,VVo),e(N0,kme),e(kme,XVo),e(N0,zVo),e(Xo,QVo),e(Xo,_t),M(j0,_t,null),e(_t,WVo),e(_t,Sme),e(Sme,HVo),e(_t,UVo),e(_t,id),e(id,JVo),e(id,Rme),e(Rme,YVo),e(id,KVo),e(id,GG),e(GG,ZVo),e(id,eXo),e(_t,oXo),M(HF,_t,null),e(Xo,rXo),e(Xo,co),M(D0,co,null),e(co,tXo),e(co,Bme),e(Bme,aXo),e(co,nXo),e(co,Oa),e(Oa,sXo),e(Oa,Pme),e(Pme,lXo),e(Oa,iXo),e(Oa,Ime),e(Ime,dXo),e(Oa,cXo),e(Oa,qme),e(qme,fXo),e(Oa,mXo),e(co,gXo),e(co,dd),e(dd,UF),e(UF,Nme),e(Nme,hXo),e(UF,pXo),e(UF,OG),e(OG,uXo),e(UF,_Xo),e(dd,bXo),e(dd,JF),e(JF,jme),e(jme,FXo),e(JF,vXo),e(JF,VG),e(VG,TXo),e(JF,MXo),e(dd,EXo),e(dd,YF),e(YF,Dme),e(Dme,CXo),e(YF,wXo),e(YF,XG),e(XG,AXo),e(YF,yXo),e(co,LXo),e(co,KF),e(KF,xXo),e(KF,Gme),e(Gme,$Xo),e(KF,kXo),e(KF,Ome),e(Ome,SXo),e(co,RXo),M(ZF,co,null),b(f,wke,_),b(f,cd,_),e(cd,ev),e(ev,Vme),M(G0,Vme,null),e(cd,BXo),e(cd,Xme),e(Xme,PXo),b(f,Ake,_),b(f,zo,_),M(O0,zo,null),e(zo,IXo),e(zo,fd),e(fd,qXo),e(fd,zG),e(zG,NXo),e(fd,jXo),e(fd,QG),e(QG,DXo),e(fd,GXo),e(zo,OXo),e(zo,V0),e(V0,VXo),e(V0,zme),e(zme,XXo),e(V0,zXo),e(zo,QXo),e(zo,bt),M(X0,bt,null),e(bt,WXo),e(bt,Qme),e(Qme,HXo),e(bt,UXo),e(bt,md),e(md,JXo),e(md,Wme),e(Wme,YXo),e(md,KXo),e(md,WG),e(WG,ZXo),e(md,ezo),e(bt,ozo),M(ov,bt,null),e(zo,rzo),e(zo,fo),M(z0,fo,null),e(fo,tzo),e(fo,Hme),e(Hme,azo),e(fo,nzo),e(fo,Va),e(Va,szo),e(Va,Ume),e(Ume,lzo),e(Va,izo),e(Va,Jme),e(Jme,dzo),e(Va,czo),e(Va,Yme),e(Yme,fzo),e(Va,mzo),e(fo,gzo),e(fo,Kme),e(Kme,rv),e(rv,Zme),e(Zme,hzo),e(rv,pzo),e(rv,HG),e(HG,uzo),e(rv,_zo),e(fo,bzo),e(fo,tv),e(tv,Fzo),e(tv,ege),e(ege,vzo),e(tv,Tzo),e(tv,oge),e(oge,Mzo),e(fo,Ezo),M(av,fo,null),b(f,yke,_),b(f,gd,_),e(gd,nv),e(nv,rge),M(Q0,rge,null),e(gd,Czo),e(gd,tge),e(tge,wzo),b(f,Lke,_),b(f,Qo,_),M(W0,Qo,null),e(Qo,Azo),e(Qo,hd),e(hd,yzo),e(hd,UG),e(UG,Lzo),e(hd,xzo),e(hd,JG),e(JG,$zo),e(hd,kzo),e(Qo,Szo),e(Qo,H0),e(H0,Rzo),e(H0,age),e(age,Bzo),e(H0,Pzo),e(Qo,Izo),e(Qo,Ft),M(U0,Ft,null),e(Ft,qzo),e(Ft,nge),e(nge,Nzo),e(Ft,jzo),e(Ft,pd),e(pd,Dzo),e(pd,sge),e(sge,Gzo),e(pd,Ozo),e(pd,YG),e(YG,Vzo),e(pd,Xzo),e(Ft,zzo),M(sv,Ft,null),e(Qo,Qzo),e(Qo,mo),M(J0,mo,null),e(mo,Wzo),e(mo,lge),e(lge,Hzo),e(mo,Uzo),e(mo,Xa),e(Xa,Jzo),e(Xa,ige),e(ige,Yzo),e(Xa,Kzo),e(Xa,dge),e(dge,Zzo),e(Xa,eQo),e(Xa,cge),e(cge,oQo),e(Xa,rQo),e(mo,tQo),e(mo,fge),e(fge,lv),e(lv,mge),e(mge,aQo),e(lv,nQo),e(lv,KG),e(KG,sQo),e(lv,lQo),e(mo,iQo),e(mo,iv),e(iv,dQo),e(iv,gge),e(gge,cQo),e(iv,fQo),e(iv,hge),e(hge,mQo),e(mo,gQo),M(dv,mo,null),b(f,xke,_),b(f,ud,_),e(ud,cv),e(cv,pge),M(Y0,pge,null),e(ud,hQo),e(ud,uge),e(uge,pQo),b(f,$ke,_),b(f,Wo,_),M(K0,Wo,null),e(Wo,uQo),e(Wo,_d),e(_d,_Qo),e(_d,ZG),e(ZG,bQo),e(_d,FQo),e(_d,eO),e(eO,vQo),e(_d,TQo),e(Wo,MQo),e(Wo,Z0),e(Z0,EQo),e(Z0,_ge),e(_ge,CQo),e(Z0,wQo),e(Wo,AQo),e(Wo,vt),M(ey,vt,null),e(vt,yQo),e(vt,bge),e(bge,LQo),e(vt,xQo),e(vt,bd),e(bd,$Qo),e(bd,Fge),e(Fge,kQo),e(bd,SQo),e(bd,oO),e(oO,RQo),e(bd,BQo),e(vt,PQo),M(fv,vt,null),e(Wo,IQo),e(Wo,go),M(oy,go,null),e(go,qQo),e(go,vge),e(vge,NQo),e(go,jQo),e(go,za),e(za,DQo),e(za,Tge),e(Tge,GQo),e(za,OQo),e(za,Mge),e(Mge,VQo),e(za,XQo),e(za,Ege),e(Ege,zQo),e(za,QQo),e(go,WQo),e(go,ry),e(ry,mv),e(mv,Cge),e(Cge,HQo),e(mv,UQo),e(mv,rO),e(rO,JQo),e(mv,YQo),e(ry,KQo),e(ry,gv),e(gv,wge),e(wge,ZQo),e(gv,eWo),e(gv,tO),e(tO,oWo),e(gv,rWo),e(go,tWo),e(go,hv),e(hv,aWo),e(hv,Age),e(Age,nWo),e(hv,sWo),e(hv,yge),e(yge,lWo),e(go,iWo),M(pv,go,null),b(f,kke,_),b(f,Fd,_),e(Fd,uv),e(uv,Lge),M(ty,Lge,null),e(Fd,dWo),e(Fd,xge),e(xge,cWo),b(f,Ske,_),b(f,Ho,_),M(ay,Ho,null),e(Ho,fWo),e(Ho,vd),e(vd,mWo),e(vd,aO),e(aO,gWo),e(vd,hWo),e(vd,nO),e(nO,pWo),e(vd,uWo),e(Ho,_Wo),e(Ho,ny),e(ny,bWo),e(ny,$ge),e($ge,FWo),e(ny,vWo),e(Ho,TWo),e(Ho,Tt),M(sy,Tt,null),e(Tt,MWo),e(Tt,kge),e(kge,EWo),e(Tt,CWo),e(Tt,Td),e(Td,wWo),e(Td,Sge),e(Sge,AWo),e(Td,yWo),e(Td,sO),e(sO,LWo),e(Td,xWo),e(Tt,$Wo),M(_v,Tt,null),e(Ho,kWo),e(Ho,ho),M(ly,ho,null),e(ho,SWo),e(ho,Rge),e(Rge,RWo),e(ho,BWo),e(ho,Qa),e(Qa,PWo),e(Qa,Bge),e(Bge,IWo),e(Qa,qWo),e(Qa,Pge),e(Pge,NWo),e(Qa,jWo),e(Qa,Ige),e(Ige,DWo),e(Qa,GWo),e(ho,OWo),e(ho,qge),e(qge,bv),e(bv,Nge),e(Nge,VWo),e(bv,XWo),e(bv,lO),e(lO,zWo),e(bv,QWo),e(ho,WWo),e(ho,Fv),e(Fv,HWo),e(Fv,jge),e(jge,UWo),e(Fv,JWo),e(Fv,Dge),e(Dge,YWo),e(ho,KWo),M(vv,ho,null),b(f,Rke,_),b(f,Md,_),e(Md,Tv),e(Tv,Gge),M(iy,Gge,null),e(Md,ZWo),e(Md,Oge),e(Oge,eHo),b(f,Bke,_),b(f,Uo,_),M(dy,Uo,null),e(Uo,oHo),e(Uo,Ed),e(Ed,rHo),e(Ed,iO),e(iO,tHo),e(Ed,aHo),e(Ed,dO),e(dO,nHo),e(Ed,sHo),e(Uo,lHo),e(Uo,cy),e(cy,iHo),e(cy,Vge),e(Vge,dHo),e(cy,cHo),e(Uo,fHo),e(Uo,Mt),M(fy,Mt,null),e(Mt,mHo),e(Mt,Xge),e(Xge,gHo),e(Mt,hHo),e(Mt,Cd),e(Cd,pHo),e(Cd,zge),e(zge,uHo),e(Cd,_Ho),e(Cd,cO),e(cO,bHo),e(Cd,FHo),e(Mt,vHo),M(Mv,Mt,null),e(Uo,THo),e(Uo,Mr),M(my,Mr,null),e(Mr,MHo),e(Mr,Qge),e(Qge,EHo),e(Mr,CHo),e(Mr,Wa),e(Wa,wHo),e(Wa,Wge),e(Wge,AHo),e(Wa,yHo),e(Wa,Hge),e(Hge,LHo),e(Wa,xHo),e(Wa,Uge),e(Uge,$Ho),e(Wa,kHo),e(Mr,SHo),e(Mr,j),e(j,Ev),e(Ev,Jge),e(Jge,RHo),e(Ev,BHo),e(Ev,fO),e(fO,PHo),e(Ev,IHo),e(j,qHo),e(j,Cv),e(Cv,Yge),e(Yge,NHo),e(Cv,jHo),e(Cv,mO),e(mO,DHo),e(Cv,GHo),e(j,OHo),e(j,wv),e(wv,Kge),e(Kge,VHo),e(wv,XHo),e(wv,gO),e(gO,zHo),e(wv,QHo),e(j,WHo),e(j,Av),e(Av,Zge),e(Zge,HHo),e(Av,UHo),e(Av,hO),e(hO,JHo),e(Av,YHo),e(j,KHo),e(j,yv),e(yv,ehe),e(ehe,ZHo),e(yv,eUo),e(yv,pO),e(pO,oUo),e(yv,rUo),e(j,tUo),e(j,Lv),e(Lv,ohe),e(ohe,aUo),e(Lv,nUo),e(Lv,uO),e(uO,sUo),e(Lv,lUo),e(j,iUo),e(j,xv),e(xv,rhe),e(rhe,dUo),e(xv,cUo),e(xv,_O),e(_O,fUo),e(xv,mUo),e(j,gUo),e(j,$v),e($v,the),e(the,hUo),e($v,pUo),e($v,bO),e(bO,uUo),e($v,_Uo),e(j,bUo),e(j,kv),e(kv,ahe),e(ahe,FUo),e(kv,vUo),e(kv,FO),e(FO,TUo),e(kv,MUo),e(j,EUo),e(j,Sv),e(Sv,nhe),e(nhe,CUo),e(Sv,wUo),e(Sv,vO),e(vO,AUo),e(Sv,yUo),e(j,LUo),e(j,Rv),e(Rv,she),e(she,xUo),e(Rv,$Uo),e(Rv,TO),e(TO,kUo),e(Rv,SUo),e(j,RUo),e(j,Bv),e(Bv,lhe),e(lhe,BUo),e(Bv,PUo),e(Bv,MO),e(MO,IUo),e(Bv,qUo),e(j,NUo),e(j,Pv),e(Pv,ihe),e(ihe,jUo),e(Pv,DUo),e(Pv,EO),e(EO,GUo),e(Pv,OUo),e(j,VUo),e(j,Iv),e(Iv,dhe),e(dhe,XUo),e(Iv,zUo),e(Iv,CO),e(CO,QUo),e(Iv,WUo),e(j,HUo),e(j,qv),e(qv,che),e(che,UUo),e(qv,JUo),e(qv,wO),e(wO,YUo),e(qv,KUo),e(j,ZUo),e(j,Nv),e(Nv,fhe),e(fhe,eJo),e(Nv,oJo),e(Nv,AO),e(AO,rJo),e(Nv,tJo),e(j,aJo),e(j,vs),e(vs,mhe),e(mhe,nJo),e(vs,sJo),e(vs,yO),e(yO,lJo),e(vs,iJo),e(vs,LO),e(LO,dJo),e(vs,cJo),e(j,fJo),e(j,jv),e(jv,ghe),e(ghe,mJo),e(jv,gJo),e(jv,xO),e(xO,hJo),e(jv,pJo),e(j,uJo),e(j,Dv),e(Dv,hhe),e(hhe,_Jo),e(Dv,bJo),e(Dv,$O),e($O,FJo),e(Dv,vJo),e(j,TJo),e(j,Gv),e(Gv,phe),e(phe,MJo),e(Gv,EJo),e(Gv,kO),e(kO,CJo),e(Gv,wJo),e(j,AJo),e(j,Ov),e(Ov,uhe),e(uhe,yJo),e(Ov,LJo),e(Ov,SO),e(SO,xJo),e(Ov,$Jo),e(j,kJo),e(j,Vv),e(Vv,_he),e(_he,SJo),e(Vv,RJo),e(Vv,RO),e(RO,BJo),e(Vv,PJo),e(j,IJo),e(j,Xv),e(Xv,bhe),e(bhe,qJo),e(Xv,NJo),e(Xv,BO),e(BO,jJo),e(Xv,DJo),e(j,GJo),e(j,zv),e(zv,Fhe),e(Fhe,OJo),e(zv,VJo),e(zv,PO),e(PO,XJo),e(zv,zJo),e(j,QJo),e(j,Qv),e(Qv,vhe),e(vhe,WJo),e(Qv,HJo),e(Qv,IO),e(IO,UJo),e(Qv,JJo),e(j,YJo),e(j,Wv),e(Wv,The),e(The,KJo),e(Wv,ZJo),e(Wv,qO),e(qO,eYo),e(Wv,oYo),e(j,rYo),e(j,Hv),e(Hv,Mhe),e(Mhe,tYo),e(Hv,aYo),e(Hv,NO),e(NO,nYo),e(Hv,sYo),e(j,lYo),e(j,Uv),e(Uv,Ehe),e(Ehe,iYo),e(Uv,dYo),e(Uv,jO),e(jO,cYo),e(Uv,fYo),e(j,mYo),e(j,Jv),e(Jv,Che),e(Che,gYo),e(Jv,hYo),e(Jv,DO),e(DO,pYo),e(Jv,uYo),e(j,_Yo),e(j,Yv),e(Yv,whe),e(whe,bYo),e(Yv,FYo),e(Yv,GO),e(GO,vYo),e(Yv,TYo),e(j,MYo),e(j,Kv),e(Kv,Ahe),e(Ahe,EYo),e(Kv,CYo),e(Kv,OO),e(OO,wYo),e(Kv,AYo),e(j,yYo),e(j,Zv),e(Zv,yhe),e(yhe,LYo),e(Zv,xYo),e(Zv,VO),e(VO,$Yo),e(Zv,kYo),e(j,SYo),e(j,e6),e(e6,Lhe),e(Lhe,RYo),e(e6,BYo),e(e6,XO),e(XO,PYo),e(e6,IYo),e(j,qYo),e(j,o6),e(o6,xhe),e(xhe,NYo),e(o6,jYo),e(o6,zO),e(zO,DYo),e(o6,GYo),e(j,OYo),e(j,r6),e(r6,$he),e($he,VYo),e(r6,XYo),e(r6,QO),e(QO,zYo),e(r6,QYo),e(j,WYo),e(j,t6),e(t6,khe),e(khe,HYo),e(t6,UYo),e(t6,WO),e(WO,JYo),e(t6,YYo),e(j,KYo),e(j,a6),e(a6,She),e(She,ZYo),e(a6,eKo),e(a6,HO),e(HO,oKo),e(a6,rKo),e(j,tKo),e(j,n6),e(n6,Rhe),e(Rhe,aKo),e(n6,nKo),e(n6,UO),e(UO,sKo),e(n6,lKo),e(j,iKo),e(j,s6),e(s6,Bhe),e(Bhe,dKo),e(s6,cKo),e(s6,JO),e(JO,fKo),e(s6,mKo),e(j,gKo),e(j,l6),e(l6,Phe),e(Phe,hKo),e(l6,pKo),e(l6,YO),e(YO,uKo),e(l6,_Ko),e(j,bKo),e(j,i6),e(i6,Ihe),e(Ihe,FKo),e(i6,vKo),e(i6,KO),e(KO,TKo),e(i6,MKo),e(j,EKo),e(j,d6),e(d6,qhe),e(qhe,CKo),e(d6,wKo),e(d6,ZO),e(ZO,AKo),e(d6,yKo),e(Mr,LKo),M(c6,Mr,null),b(f,Pke,_),b(f,wd,_),e(wd,f6),e(f6,Nhe),M(gy,Nhe,null),e(wd,xKo),e(wd,jhe),e(jhe,$Ko),b(f,Ike,_),b(f,Jo,_),M(hy,Jo,null),e(Jo,kKo),e(Jo,Ad),e(Ad,SKo),e(Ad,eV),e(eV,RKo),e(Ad,BKo),e(Ad,oV),e(oV,PKo),e(Ad,IKo),e(Jo,qKo),e(Jo,py),e(py,NKo),e(py,Dhe),e(Dhe,jKo),e(py,DKo),e(Jo,GKo),e(Jo,Et),M(uy,Et,null),e(Et,OKo),e(Et,Ghe),e(Ghe,VKo),e(Et,XKo),e(Et,yd),e(yd,zKo),e(yd,Ohe),e(Ohe,QKo),e(yd,WKo),e(yd,rV),e(rV,HKo),e(yd,UKo),e(Et,JKo),M(m6,Et,null),e(Jo,YKo),e(Jo,Er),M(_y,Er,null),e(Er,KKo),e(Er,Vhe),e(Vhe,ZKo),e(Er,eZo),e(Er,Ha),e(Ha,oZo),e(Ha,Xhe),e(Xhe,rZo),e(Ha,tZo),e(Ha,zhe),e(zhe,aZo),e(Ha,nZo),e(Ha,Qhe),e(Qhe,sZo),e(Ha,lZo),e(Er,iZo),e(Er,ae),e(ae,g6),e(g6,Whe),e(Whe,dZo),e(g6,cZo),e(g6,tV),e(tV,fZo),e(g6,mZo),e(ae,gZo),e(ae,h6),e(h6,Hhe),e(Hhe,hZo),e(h6,pZo),e(h6,aV),e(aV,uZo),e(h6,_Zo),e(ae,bZo),e(ae,p6),e(p6,Uhe),e(Uhe,FZo),e(p6,vZo),e(p6,nV),e(nV,TZo),e(p6,MZo),e(ae,EZo),e(ae,u6),e(u6,Jhe),e(Jhe,CZo),e(u6,wZo),e(u6,sV),e(sV,AZo),e(u6,yZo),e(ae,LZo),e(ae,_6),e(_6,Yhe),e(Yhe,xZo),e(_6,$Zo),e(_6,lV),e(lV,kZo),e(_6,SZo),e(ae,RZo),e(ae,b6),e(b6,Khe),e(Khe,BZo),e(b6,PZo),e(b6,iV),e(iV,IZo),e(b6,qZo),e(ae,NZo),e(ae,F6),e(F6,Zhe),e(Zhe,jZo),e(F6,DZo),e(F6,dV),e(dV,GZo),e(F6,OZo),e(ae,VZo),e(ae,v6),e(v6,epe),e(epe,XZo),e(v6,zZo),e(v6,cV),e(cV,QZo),e(v6,WZo),e(ae,HZo),e(ae,T6),e(T6,ope),e(ope,UZo),e(T6,JZo),e(T6,fV),e(fV,YZo),e(T6,KZo),e(ae,ZZo),e(ae,M6),e(M6,rpe),e(rpe,eer),e(M6,oer),e(M6,mV),e(mV,rer),e(M6,ter),e(ae,aer),e(ae,E6),e(E6,tpe),e(tpe,ner),e(E6,ser),e(E6,gV),e(gV,ler),e(E6,ier),e(ae,der),e(ae,C6),e(C6,ape),e(ape,cer),e(C6,fer),e(C6,hV),e(hV,mer),e(C6,ger),e(ae,her),e(ae,w6),e(w6,npe),e(npe,per),e(w6,uer),e(w6,pV),e(pV,_er),e(w6,ber),e(ae,Fer),e(ae,A6),e(A6,spe),e(spe,ver),e(A6,Ter),e(A6,uV),e(uV,Mer),e(A6,Eer),e(ae,Cer),e(ae,y6),e(y6,lpe),e(lpe,wer),e(y6,Aer),e(y6,_V),e(_V,yer),e(y6,Ler),e(ae,xer),e(ae,L6),e(L6,ipe),e(ipe,$er),e(L6,ker),e(L6,bV),e(bV,Ser),e(L6,Rer),e(ae,Ber),e(ae,x6),e(x6,dpe),e(dpe,Per),e(x6,Ier),e(x6,FV),e(FV,qer),e(x6,Ner),e(ae,jer),e(ae,$6),e($6,cpe),e(cpe,Der),e($6,Ger),e($6,vV),e(vV,Oer),e($6,Ver),e(ae,Xer),e(ae,k6),e(k6,fpe),e(fpe,zer),e(k6,Qer),e(k6,TV),e(TV,Wer),e(k6,Her),e(ae,Uer),e(ae,S6),e(S6,mpe),e(mpe,Jer),e(S6,Yer),e(S6,MV),e(MV,Ker),e(S6,Zer),e(ae,eor),e(ae,R6),e(R6,gpe),e(gpe,oor),e(R6,ror),e(R6,EV),e(EV,tor),e(R6,aor),e(ae,nor),e(ae,B6),e(B6,hpe),e(hpe,sor),e(B6,lor),e(B6,CV),e(CV,ior),e(B6,dor),e(Er,cor),M(P6,Er,null),b(f,qke,_),b(f,Ld,_),e(Ld,I6),e(I6,ppe),M(by,ppe,null),e(Ld,mor),e(Ld,upe),e(upe,gor),b(f,Nke,_),b(f,Yo,_),M(Fy,Yo,null),e(Yo,hor),e(Yo,xd),e(xd,por),e(xd,wV),e(wV,uor),e(xd,_or),e(xd,AV),e(AV,bor),e(xd,For),e(Yo,vor),e(Yo,vy),e(vy,Tor),e(vy,_pe),e(_pe,Mor),e(vy,Eor),e(Yo,Cor),e(Yo,Ct),M(Ty,Ct,null),e(Ct,wor),e(Ct,bpe),e(bpe,Aor),e(Ct,yor),e(Ct,$d),e($d,Lor),e($d,Fpe),e(Fpe,xor),e($d,$or),e($d,yV),e(yV,kor),e($d,Sor),e(Ct,Ror),M(q6,Ct,null),e(Yo,Bor),e(Yo,Cr),M(My,Cr,null),e(Cr,Por),e(Cr,vpe),e(vpe,Ior),e(Cr,qor),e(Cr,Ua),e(Ua,Nor),e(Ua,Tpe),e(Tpe,jor),e(Ua,Dor),e(Ua,Mpe),e(Mpe,Gor),e(Ua,Oor),e(Ua,Epe),e(Epe,Vor),e(Ua,Xor),e(Cr,zor),e(Cr,ve),e(ve,N6),e(N6,Cpe),e(Cpe,Qor),e(N6,Wor),e(N6,LV),e(LV,Hor),e(N6,Uor),e(ve,Jor),e(ve,j6),e(j6,wpe),e(wpe,Yor),e(j6,Kor),e(j6,xV),e(xV,Zor),e(j6,err),e(ve,orr),e(ve,D6),e(D6,Ape),e(Ape,rrr),e(D6,trr),e(D6,$V),e($V,arr),e(D6,nrr),e(ve,srr),e(ve,G6),e(G6,ype),e(ype,lrr),e(G6,irr),e(G6,kV),e(kV,drr),e(G6,crr),e(ve,frr),e(ve,O6),e(O6,Lpe),e(Lpe,mrr),e(O6,grr),e(O6,SV),e(SV,hrr),e(O6,prr),e(ve,urr),e(ve,V6),e(V6,xpe),e(xpe,_rr),e(V6,brr),e(V6,RV),e(RV,Frr),e(V6,vrr),e(ve,Trr),e(ve,X6),e(X6,$pe),e($pe,Mrr),e(X6,Err),e(X6,BV),e(BV,Crr),e(X6,wrr),e(ve,Arr),e(ve,z6),e(z6,kpe),e(kpe,yrr),e(z6,Lrr),e(z6,PV),e(PV,xrr),e(z6,$rr),e(ve,krr),e(ve,Q6),e(Q6,Spe),e(Spe,Srr),e(Q6,Rrr),e(Q6,IV),e(IV,Brr),e(Q6,Prr),e(ve,Irr),e(ve,W6),e(W6,Rpe),e(Rpe,qrr),e(W6,Nrr),e(W6,qV),e(qV,jrr),e(W6,Drr),e(ve,Grr),e(ve,H6),e(H6,Bpe),e(Bpe,Orr),e(H6,Vrr),e(H6,NV),e(NV,Xrr),e(H6,zrr),e(Cr,Qrr),M(U6,Cr,null),b(f,jke,_),b(f,kd,_),e(kd,J6),e(J6,Ppe),M(Ey,Ppe,null),e(kd,Wrr),e(kd,Ipe),e(Ipe,Hrr),b(f,Dke,_),b(f,Ko,_),M(Cy,Ko,null),e(Ko,Urr),e(Ko,Sd),e(Sd,Jrr),e(Sd,jV),e(jV,Yrr),e(Sd,Krr),e(Sd,DV),e(DV,Zrr),e(Sd,etr),e(Ko,otr),e(Ko,wy),e(wy,rtr),e(wy,qpe),e(qpe,ttr),e(wy,atr),e(Ko,ntr),e(Ko,wt),M(Ay,wt,null),e(wt,str),e(wt,Npe),e(Npe,ltr),e(wt,itr),e(wt,Rd),e(Rd,dtr),e(Rd,jpe),e(jpe,ctr),e(Rd,ftr),e(Rd,GV),e(GV,mtr),e(Rd,gtr),e(wt,htr),M(Y6,wt,null),e(Ko,ptr),e(Ko,wr),M(yy,wr,null),e(wr,utr),e(wr,Dpe),e(Dpe,_tr),e(wr,btr),e(wr,Ja),e(Ja,Ftr),e(Ja,Gpe),e(Gpe,vtr),e(Ja,Ttr),e(Ja,Ope),e(Ope,Mtr),e(Ja,Etr),e(Ja,Vpe),e(Vpe,Ctr),e(Ja,wtr),e(wr,Atr),e(wr,Ly),e(Ly,K6),e(K6,Xpe),e(Xpe,ytr),e(K6,Ltr),e(K6,OV),e(OV,xtr),e(K6,$tr),e(Ly,ktr),e(Ly,Z6),e(Z6,zpe),e(zpe,Str),e(Z6,Rtr),e(Z6,VV),e(VV,Btr),e(Z6,Ptr),e(wr,Itr),M(eT,wr,null),b(f,Gke,_),b(f,Bd,_),e(Bd,oT),e(oT,Qpe),M(xy,Qpe,null),e(Bd,qtr),e(Bd,Wpe),e(Wpe,Ntr),b(f,Oke,_),b(f,Zo,_),M($y,Zo,null),e(Zo,jtr),e(Zo,Pd),e(Pd,Dtr),e(Pd,XV),e(XV,Gtr),e(Pd,Otr),e(Pd,zV),e(zV,Vtr),e(Pd,Xtr),e(Zo,ztr),e(Zo,ky),e(ky,Qtr),e(ky,Hpe),e(Hpe,Wtr),e(ky,Htr),e(Zo,Utr),e(Zo,At),M(Sy,At,null),e(At,Jtr),e(At,Upe),e(Upe,Ytr),e(At,Ktr),e(At,Id),e(Id,Ztr),e(Id,Jpe),e(Jpe,ear),e(Id,oar),e(Id,QV),e(QV,rar),e(Id,tar),e(At,aar),M(rT,At,null),e(Zo,nar),e(Zo,Ar),M(Ry,Ar,null),e(Ar,sar),e(Ar,Ype),e(Ype,lar),e(Ar,iar),e(Ar,Ya),e(Ya,dar),e(Ya,Kpe),e(Kpe,car),e(Ya,far),e(Ya,Zpe),e(Zpe,mar),e(Ya,gar),e(Ya,eue),e(eue,har),e(Ya,par),e(Ar,uar),e(Ar,se),e(se,tT),e(tT,oue),e(oue,_ar),e(tT,bar),e(tT,WV),e(WV,Far),e(tT,Tar),e(se,Mar),e(se,aT),e(aT,rue),e(rue,Ear),e(aT,Car),e(aT,HV),e(HV,war),e(aT,Aar),e(se,yar),e(se,nT),e(nT,tue),e(tue,Lar),e(nT,xar),e(nT,UV),e(UV,$ar),e(nT,kar),e(se,Sar),e(se,sT),e(sT,aue),e(aue,Rar),e(sT,Bar),e(sT,JV),e(JV,Par),e(sT,Iar),e(se,qar),e(se,lT),e(lT,nue),e(nue,Nar),e(lT,jar),e(lT,YV),e(YV,Dar),e(lT,Gar),e(se,Oar),e(se,iT),e(iT,sue),e(sue,Var),e(iT,Xar),e(iT,KV),e(KV,zar),e(iT,Qar),e(se,War),e(se,dT),e(dT,lue),e(lue,Har),e(dT,Uar),e(dT,ZV),e(ZV,Jar),e(dT,Yar),e(se,Kar),e(se,cT),e(cT,iue),e(iue,Zar),e(cT,enr),e(cT,eX),e(eX,onr),e(cT,rnr),e(se,tnr),e(se,fT),e(fT,due),e(due,anr),e(fT,nnr),e(fT,oX),e(oX,snr),e(fT,lnr),e(se,inr),e(se,mT),e(mT,cue),e(cue,dnr),e(mT,cnr),e(mT,rX),e(rX,fnr),e(mT,mnr),e(se,gnr),e(se,gT),e(gT,fue),e(fue,hnr),e(gT,pnr),e(gT,tX),e(tX,unr),e(gT,_nr),e(se,bnr),e(se,hT),e(hT,mue),e(mue,Fnr),e(hT,vnr),e(hT,aX),e(aX,Tnr),e(hT,Mnr),e(se,Enr),e(se,pT),e(pT,gue),e(gue,Cnr),e(pT,wnr),e(pT,nX),e(nX,Anr),e(pT,ynr),e(se,Lnr),e(se,uT),e(uT,hue),e(hue,xnr),e(uT,$nr),e(uT,sX),e(sX,knr),e(uT,Snr),e(se,Rnr),e(se,_T),e(_T,pue),e(pue,Bnr),e(_T,Pnr),e(_T,lX),e(lX,Inr),e(_T,qnr),e(se,Nnr),e(se,bT),e(bT,uue),e(uue,jnr),e(bT,Dnr),e(bT,iX),e(iX,Gnr),e(bT,Onr),e(se,Vnr),e(se,FT),e(FT,_ue),e(_ue,Xnr),e(FT,znr),e(FT,dX),e(dX,Qnr),e(FT,Wnr),e(se,Hnr),e(se,vT),e(vT,bue),e(bue,Unr),e(vT,Jnr),e(vT,cX),e(cX,Ynr),e(vT,Knr),e(se,Znr),e(se,TT),e(TT,Fue),e(Fue,esr),e(TT,osr),e(TT,fX),e(fX,rsr),e(TT,tsr),e(se,asr),e(se,MT),e(MT,vue),e(vue,nsr),e(MT,ssr),e(MT,mX),e(mX,lsr),e(MT,isr),e(Ar,dsr),M(ET,Ar,null),b(f,Vke,_),b(f,qd,_),e(qd,CT),e(CT,Tue),M(By,Tue,null),e(qd,csr),e(qd,Mue),e(Mue,fsr),b(f,Xke,_),b(f,er,_),M(Py,er,null),e(er,msr),e(er,Nd),e(Nd,gsr),e(Nd,gX),e(gX,hsr),e(Nd,psr),e(Nd,hX),e(hX,usr),e(Nd,_sr),e(er,bsr),e(er,Iy),e(Iy,Fsr),e(Iy,Eue),e(Eue,vsr),e(Iy,Tsr),e(er,Msr),e(er,yt),M(qy,yt,null),e(yt,Esr),e(yt,Cue),e(Cue,Csr),e(yt,wsr),e(yt,jd),e(jd,Asr),e(jd,wue),e(wue,ysr),e(jd,Lsr),e(jd,pX),e(pX,xsr),e(jd,$sr),e(yt,ksr),M(wT,yt,null),e(er,Ssr),e(er,yr),M(Ny,yr,null),e(yr,Rsr),e(yr,Aue),e(Aue,Bsr),e(yr,Psr),e(yr,Ka),e(Ka,Isr),e(Ka,yue),e(yue,qsr),e(Ka,Nsr),e(Ka,Lue),e(Lue,jsr),e(Ka,Dsr),e(Ka,xue),e(xue,Gsr),e(Ka,Osr),e(yr,Vsr),e(yr,Ee),e(Ee,AT),e(AT,$ue),e($ue,Xsr),e(AT,zsr),e(AT,uX),e(uX,Qsr),e(AT,Wsr),e(Ee,Hsr),e(Ee,yT),e(yT,kue),e(kue,Usr),e(yT,Jsr),e(yT,_X),e(_X,Ysr),e(yT,Ksr),e(Ee,Zsr),e(Ee,LT),e(LT,Sue),e(Sue,elr),e(LT,olr),e(LT,bX),e(bX,rlr),e(LT,tlr),e(Ee,alr),e(Ee,xT),e(xT,Rue),e(Rue,nlr),e(xT,slr),e(xT,FX),e(FX,llr),e(xT,ilr),e(Ee,dlr),e(Ee,$T),e($T,Bue),e(Bue,clr),e($T,flr),e($T,vX),e(vX,mlr),e($T,glr),e(Ee,hlr),e(Ee,kT),e(kT,Pue),e(Pue,plr),e(kT,ulr),e(kT,TX),e(TX,_lr),e(kT,blr),e(Ee,Flr),e(Ee,ST),e(ST,Iue),e(Iue,vlr),e(ST,Tlr),e(ST,MX),e(MX,Mlr),e(ST,Elr),e(Ee,Clr),e(Ee,RT),e(RT,que),e(que,wlr),e(RT,Alr),e(RT,EX),e(EX,ylr),e(RT,Llr),e(Ee,xlr),e(Ee,BT),e(BT,Nue),e(Nue,$lr),e(BT,klr),e(BT,CX),e(CX,Slr),e(BT,Rlr),e(Ee,Blr),e(Ee,PT),e(PT,jue),e(jue,Plr),e(PT,Ilr),e(PT,wX),e(wX,qlr),e(PT,Nlr),e(yr,jlr),M(IT,yr,null),b(f,zke,_),b(f,Dd,_),e(Dd,qT),e(qT,Due),M(jy,Due,null),e(Dd,Dlr),e(Dd,Gue),e(Gue,Glr),b(f,Qke,_),b(f,or,_),M(Dy,or,null),e(or,Olr),e(or,Gd),e(Gd,Vlr),e(Gd,AX),e(AX,Xlr),e(Gd,zlr),e(Gd,yX),e(yX,Qlr),e(Gd,Wlr),e(or,Hlr),e(or,Gy),e(Gy,Ulr),e(Gy,Oue),e(Oue,Jlr),e(Gy,Ylr),e(or,Klr),e(or,Lt),M(Oy,Lt,null),e(Lt,Zlr),e(Lt,Vue),e(Vue,eir),e(Lt,oir),e(Lt,Od),e(Od,rir),e(Od,Xue),e(Xue,tir),e(Od,air),e(Od,LX),e(LX,nir),e(Od,sir),e(Lt,lir),M(NT,Lt,null),e(or,iir),e(or,Lr),M(Vy,Lr,null),e(Lr,dir),e(Lr,zue),e(zue,cir),e(Lr,fir),e(Lr,Za),e(Za,mir),e(Za,Que),e(Que,gir),e(Za,hir),e(Za,Wue),e(Wue,pir),e(Za,uir),e(Za,Hue),e(Hue,_ir),e(Za,bir),e(Lr,Fir),e(Lr,ee),e(ee,jT),e(jT,Uue),e(Uue,vir),e(jT,Tir),e(jT,xX),e(xX,Mir),e(jT,Eir),e(ee,Cir),e(ee,DT),e(DT,Jue),e(Jue,wir),e(DT,Air),e(DT,$X),e($X,yir),e(DT,Lir),e(ee,xir),e(ee,GT),e(GT,Yue),e(Yue,$ir),e(GT,kir),e(GT,kX),e(kX,Sir),e(GT,Rir),e(ee,Bir),e(ee,OT),e(OT,Kue),e(Kue,Pir),e(OT,Iir),e(OT,SX),e(SX,qir),e(OT,Nir),e(ee,jir),e(ee,VT),e(VT,Zue),e(Zue,Dir),e(VT,Gir),e(VT,RX),e(RX,Oir),e(VT,Vir),e(ee,Xir),e(ee,XT),e(XT,e_e),e(e_e,zir),e(XT,Qir),e(XT,BX),e(BX,Wir),e(XT,Hir),e(ee,Uir),e(ee,zT),e(zT,o_e),e(o_e,Jir),e(zT,Yir),e(zT,PX),e(PX,Kir),e(zT,Zir),e(ee,edr),e(ee,QT),e(QT,r_e),e(r_e,odr),e(QT,rdr),e(QT,IX),e(IX,tdr),e(QT,adr),e(ee,ndr),e(ee,WT),e(WT,t_e),e(t_e,sdr),e(WT,ldr),e(WT,qX),e(qX,idr),e(WT,ddr),e(ee,cdr),e(ee,HT),e(HT,a_e),e(a_e,fdr),e(HT,mdr),e(HT,NX),e(NX,gdr),e(HT,hdr),e(ee,pdr),e(ee,UT),e(UT,n_e),e(n_e,udr),e(UT,_dr),e(UT,jX),e(jX,bdr),e(UT,Fdr),e(ee,vdr),e(ee,JT),e(JT,s_e),e(s_e,Tdr),e(JT,Mdr),e(JT,DX),e(DX,Edr),e(JT,Cdr),e(ee,wdr),e(ee,YT),e(YT,l_e),e(l_e,Adr),e(YT,ydr),e(YT,GX),e(GX,Ldr),e(YT,xdr),e(ee,$dr),e(ee,KT),e(KT,i_e),e(i_e,kdr),e(KT,Sdr),e(KT,OX),e(OX,Rdr),e(KT,Bdr),e(ee,Pdr),e(ee,ZT),e(ZT,d_e),e(d_e,Idr),e(ZT,qdr),e(ZT,VX),e(VX,Ndr),e(ZT,jdr),e(ee,Ddr),e(ee,eM),e(eM,c_e),e(c_e,Gdr),e(eM,Odr),e(eM,XX),e(XX,Vdr),e(eM,Xdr),e(ee,zdr),e(ee,oM),e(oM,f_e),e(f_e,Qdr),e(oM,Wdr),e(oM,zX),e(zX,Hdr),e(oM,Udr),e(ee,Jdr),e(ee,rM),e(rM,m_e),e(m_e,Ydr),e(rM,Kdr),e(rM,QX),e(QX,Zdr),e(rM,ecr),e(ee,ocr),e(ee,tM),e(tM,g_e),e(g_e,rcr),e(tM,tcr),e(tM,WX),e(WX,acr),e(tM,ncr),e(ee,scr),e(ee,aM),e(aM,h_e),e(h_e,lcr),e(aM,icr),e(aM,HX),e(HX,dcr),e(aM,ccr),e(ee,fcr),e(ee,nM),e(nM,p_e),e(p_e,mcr),e(nM,gcr),e(nM,UX),e(UX,hcr),e(nM,pcr),e(ee,ucr),e(ee,sM),e(sM,u_e),e(u_e,_cr),e(sM,bcr),e(sM,JX),e(JX,Fcr),e(sM,vcr),e(ee,Tcr),e(ee,lM),e(lM,__e),e(__e,Mcr),e(lM,Ecr),e(lM,YX),e(YX,Ccr),e(lM,wcr),e(ee,Acr),e(ee,iM),e(iM,b_e),e(b_e,ycr),e(iM,Lcr),e(iM,KX),e(KX,xcr),e(iM,$cr),e(ee,kcr),e(ee,dM),e(dM,F_e),e(F_e,Scr),e(dM,Rcr),e(dM,ZX),e(ZX,Bcr),e(dM,Pcr),e(Lr,Icr),M(cM,Lr,null),b(f,Wke,_),b(f,Vd,_),e(Vd,fM),e(fM,v_e),M(Xy,v_e,null),e(Vd,qcr),e(Vd,T_e),e(T_e,Ncr),b(f,Hke,_),b(f,rr,_),M(zy,rr,null),e(rr,jcr),e(rr,Xd),e(Xd,Dcr),e(Xd,ez),e(ez,Gcr),e(Xd,Ocr),e(Xd,oz),e(oz,Vcr),e(Xd,Xcr),e(rr,zcr),e(rr,Qy),e(Qy,Qcr),e(Qy,M_e),e(M_e,Wcr),e(Qy,Hcr),e(rr,Ucr),e(rr,xt),M(Wy,xt,null),e(xt,Jcr),e(xt,E_e),e(E_e,Ycr),e(xt,Kcr),e(xt,zd),e(zd,Zcr),e(zd,C_e),e(C_e,efr),e(zd,ofr),e(zd,rz),e(rz,rfr),e(zd,tfr),e(xt,afr),M(mM,xt,null),e(rr,nfr),e(rr,xr),M(Hy,xr,null),e(xr,sfr),e(xr,w_e),e(w_e,lfr),e(xr,ifr),e(xr,en),e(en,dfr),e(en,A_e),e(A_e,cfr),e(en,ffr),e(en,y_e),e(y_e,mfr),e(en,gfr),e(en,L_e),e(L_e,hfr),e(en,pfr),e(xr,ufr),e(xr,ge),e(ge,gM),e(gM,x_e),e(x_e,_fr),e(gM,bfr),e(gM,tz),e(tz,Ffr),e(gM,vfr),e(ge,Tfr),e(ge,hM),e(hM,$_e),e($_e,Mfr),e(hM,Efr),e(hM,az),e(az,Cfr),e(hM,wfr),e(ge,Afr),e(ge,pM),e(pM,k_e),e(k_e,yfr),e(pM,Lfr),e(pM,nz),e(nz,xfr),e(pM,$fr),e(ge,kfr),e(ge,uM),e(uM,S_e),e(S_e,Sfr),e(uM,Rfr),e(uM,sz),e(sz,Bfr),e(uM,Pfr),e(ge,Ifr),e(ge,_M),e(_M,R_e),e(R_e,qfr),e(_M,Nfr),e(_M,lz),e(lz,jfr),e(_M,Dfr),e(ge,Gfr),e(ge,bM),e(bM,B_e),e(B_e,Ofr),e(bM,Vfr),e(bM,iz),e(iz,Xfr),e(bM,zfr),e(ge,Qfr),e(ge,FM),e(FM,P_e),e(P_e,Wfr),e(FM,Hfr),e(FM,dz),e(dz,Ufr),e(FM,Jfr),e(ge,Yfr),e(ge,vM),e(vM,I_e),e(I_e,Kfr),e(vM,Zfr),e(vM,cz),e(cz,emr),e(vM,omr),e(ge,rmr),e(ge,TM),e(TM,q_e),e(q_e,tmr),e(TM,amr),e(TM,fz),e(fz,nmr),e(TM,smr),e(ge,lmr),e(ge,MM),e(MM,N_e),e(N_e,imr),e(MM,dmr),e(MM,mz),e(mz,cmr),e(MM,fmr),e(ge,mmr),e(ge,EM),e(EM,j_e),e(j_e,gmr),e(EM,hmr),e(EM,gz),e(gz,pmr),e(EM,umr),e(ge,_mr),e(ge,CM),e(CM,D_e),e(D_e,bmr),e(CM,Fmr),e(CM,hz),e(hz,vmr),e(CM,Tmr),e(ge,Mmr),e(ge,wM),e(wM,G_e),e(G_e,Emr),e(wM,Cmr),e(wM,pz),e(pz,wmr),e(wM,Amr),e(ge,ymr),e(ge,AM),e(AM,O_e),e(O_e,Lmr),e(AM,xmr),e(AM,uz),e(uz,$mr),e(AM,kmr),e(ge,Smr),e(ge,yM),e(yM,V_e),e(V_e,Rmr),e(yM,Bmr),e(yM,_z),e(_z,Pmr),e(yM,Imr),e(ge,qmr),e(ge,LM),e(LM,X_e),e(X_e,Nmr),e(LM,jmr),e(LM,bz),e(bz,Dmr),e(LM,Gmr),e(ge,Omr),e(ge,xM),e(xM,z_e),e(z_e,Vmr),e(xM,Xmr),e(xM,Fz),e(Fz,zmr),e(xM,Qmr),e(xr,Wmr),M($M,xr,null),b(f,Uke,_),b(f,Qd,_),e(Qd,kM),e(kM,Q_e),M(Uy,Q_e,null),e(Qd,Hmr),e(Qd,W_e),e(W_e,Umr),b(f,Jke,_),b(f,tr,_),M(Jy,tr,null),e(tr,Jmr),e(tr,Wd),e(Wd,Ymr),e(Wd,vz),e(vz,Kmr),e(Wd,Zmr),e(Wd,Tz),e(Tz,egr),e(Wd,ogr),e(tr,rgr),e(tr,Yy),e(Yy,tgr),e(Yy,H_e),e(H_e,agr),e(Yy,ngr),e(tr,sgr),e(tr,$t),M(Ky,$t,null),e($t,lgr),e($t,U_e),e(U_e,igr),e($t,dgr),e($t,Hd),e(Hd,cgr),e(Hd,J_e),e(J_e,fgr),e(Hd,mgr),e(Hd,Mz),e(Mz,ggr),e(Hd,hgr),e($t,pgr),M(SM,$t,null),e(tr,ugr),e(tr,$r),M(Zy,$r,null),e($r,_gr),e($r,Y_e),e(Y_e,bgr),e($r,Fgr),e($r,on),e(on,vgr),e(on,K_e),e(K_e,Tgr),e(on,Mgr),e(on,Z_e),e(Z_e,Egr),e(on,Cgr),e(on,e2e),e(e2e,wgr),e(on,Agr),e($r,ygr),e($r,o2e),e(o2e,RM),e(RM,r2e),e(r2e,Lgr),e(RM,xgr),e(RM,Ez),e(Ez,$gr),e(RM,kgr),e($r,Sgr),M(BM,$r,null),b(f,Yke,_),b(f,Ud,_),e(Ud,PM),e(PM,t2e),M(eL,t2e,null),e(Ud,Rgr),e(Ud,a2e),e(a2e,Bgr),b(f,Kke,_),b(f,ar,_),M(oL,ar,null),e(ar,Pgr),e(ar,Jd),e(Jd,Igr),e(Jd,Cz),e(Cz,qgr),e(Jd,Ngr),e(Jd,wz),e(wz,jgr),e(Jd,Dgr),e(ar,Ggr),e(ar,rL),e(rL,Ogr),e(rL,n2e),e(n2e,Vgr),e(rL,Xgr),e(ar,zgr),e(ar,kt),M(tL,kt,null),e(kt,Qgr),e(kt,s2e),e(s2e,Wgr),e(kt,Hgr),e(kt,Yd),e(Yd,Ugr),e(Yd,l2e),e(l2e,Jgr),e(Yd,Ygr),e(Yd,Az),e(Az,Kgr),e(Yd,Zgr),e(kt,ehr),M(IM,kt,null),e(ar,ohr),e(ar,kr),M(aL,kr,null),e(kr,rhr),e(kr,i2e),e(i2e,thr),e(kr,ahr),e(kr,rn),e(rn,nhr),e(rn,d2e),e(d2e,shr),e(rn,lhr),e(rn,c2e),e(c2e,ihr),e(rn,dhr),e(rn,f2e),e(f2e,chr),e(rn,fhr),e(kr,mhr),e(kr,le),e(le,qM),e(qM,m2e),e(m2e,ghr),e(qM,hhr),e(qM,yz),e(yz,phr),e(qM,uhr),e(le,_hr),e(le,NM),e(NM,g2e),e(g2e,bhr),e(NM,Fhr),e(NM,Lz),e(Lz,vhr),e(NM,Thr),e(le,Mhr),e(le,jM),e(jM,h2e),e(h2e,Ehr),e(jM,Chr),e(jM,xz),e(xz,whr),e(jM,Ahr),e(le,yhr),e(le,DM),e(DM,p2e),e(p2e,Lhr),e(DM,xhr),e(DM,$z),e($z,$hr),e(DM,khr),e(le,Shr),e(le,GM),e(GM,u2e),e(u2e,Rhr),e(GM,Bhr),e(GM,kz),e(kz,Phr),e(GM,Ihr),e(le,qhr),e(le,OM),e(OM,_2e),e(_2e,Nhr),e(OM,jhr),e(OM,Sz),e(Sz,Dhr),e(OM,Ghr),e(le,Ohr),e(le,VM),e(VM,b2e),e(b2e,Vhr),e(VM,Xhr),e(VM,Rz),e(Rz,zhr),e(VM,Qhr),e(le,Whr),e(le,XM),e(XM,F2e),e(F2e,Hhr),e(XM,Uhr),e(XM,Bz),e(Bz,Jhr),e(XM,Yhr),e(le,Khr),e(le,zM),e(zM,v2e),e(v2e,Zhr),e(zM,epr),e(zM,Pz),e(Pz,opr),e(zM,rpr),e(le,tpr),e(le,QM),e(QM,T2e),e(T2e,apr),e(QM,npr),e(QM,Iz),e(Iz,spr),e(QM,lpr),e(le,ipr),e(le,WM),e(WM,M2e),e(M2e,dpr),e(WM,cpr),e(WM,qz),e(qz,fpr),e(WM,mpr),e(le,gpr),e(le,HM),e(HM,E2e),e(E2e,hpr),e(HM,ppr),e(HM,Nz),e(Nz,upr),e(HM,_pr),e(le,bpr),e(le,UM),e(UM,C2e),e(C2e,Fpr),e(UM,vpr),e(UM,jz),e(jz,Tpr),e(UM,Mpr),e(le,Epr),e(le,JM),e(JM,w2e),e(w2e,Cpr),e(JM,wpr),e(JM,Dz),e(Dz,Apr),e(JM,ypr),e(le,Lpr),e(le,YM),e(YM,A2e),e(A2e,xpr),e(YM,$pr),e(YM,Gz),e(Gz,kpr),e(YM,Spr),e(le,Rpr),e(le,KM),e(KM,y2e),e(y2e,Bpr),e(KM,Ppr),e(KM,Oz),e(Oz,Ipr),e(KM,qpr),e(le,Npr),e(le,ZM),e(ZM,L2e),e(L2e,jpr),e(ZM,Dpr),e(ZM,Vz),e(Vz,Gpr),e(ZM,Opr),e(le,Vpr),e(le,e9),e(e9,x2e),e(x2e,Xpr),e(e9,zpr),e(e9,Xz),e(Xz,Qpr),e(e9,Wpr),e(le,Hpr),e(le,o9),e(o9,$2e),e($2e,Upr),e(o9,Jpr),e(o9,zz),e(zz,Ypr),e(o9,Kpr),e(le,Zpr),e(le,r9),e(r9,k2e),e(k2e,eur),e(r9,our),e(r9,Qz),e(Qz,rur),e(r9,tur),e(kr,aur),M(t9,kr,null),b(f,Zke,_),b(f,Kd,_),e(Kd,a9),e(a9,S2e),M(nL,S2e,null),e(Kd,nur),e(Kd,R2e),e(R2e,sur),b(f,eSe,_),b(f,nr,_),M(sL,nr,null),e(nr,lur),e(nr,Zd),e(Zd,iur),e(Zd,Wz),e(Wz,dur),e(Zd,cur),e(Zd,Hz),e(Hz,fur),e(Zd,mur),e(nr,gur),e(nr,lL),e(lL,hur),e(lL,B2e),e(B2e,pur),e(lL,uur),e(nr,_ur),e(nr,St),M(iL,St,null),e(St,bur),e(St,P2e),e(P2e,Fur),e(St,vur),e(St,ec),e(ec,Tur),e(ec,I2e),e(I2e,Mur),e(ec,Eur),e(ec,Uz),e(Uz,Cur),e(ec,wur),e(St,Aur),M(n9,St,null),e(nr,yur),e(nr,Sr),M(dL,Sr,null),e(Sr,Lur),e(Sr,q2e),e(q2e,xur),e(Sr,$ur),e(Sr,tn),e(tn,kur),e(tn,N2e),e(N2e,Sur),e(tn,Rur),e(tn,j2e),e(j2e,Bur),e(tn,Pur),e(tn,D2e),e(D2e,Iur),e(tn,qur),e(Sr,Nur),e(Sr,ie),e(ie,s9),e(s9,G2e),e(G2e,jur),e(s9,Dur),e(s9,Jz),e(Jz,Gur),e(s9,Our),e(ie,Vur),e(ie,l9),e(l9,O2e),e(O2e,Xur),e(l9,zur),e(l9,Yz),e(Yz,Qur),e(l9,Wur),e(ie,Hur),e(ie,i9),e(i9,V2e),e(V2e,Uur),e(i9,Jur),e(i9,Kz),e(Kz,Yur),e(i9,Kur),e(ie,Zur),e(ie,d9),e(d9,X2e),e(X2e,e_r),e(d9,o_r),e(d9,Zz),e(Zz,r_r),e(d9,t_r),e(ie,a_r),e(ie,c9),e(c9,z2e),e(z2e,n_r),e(c9,s_r),e(c9,eQ),e(eQ,l_r),e(c9,i_r),e(ie,d_r),e(ie,f9),e(f9,Q2e),e(Q2e,c_r),e(f9,f_r),e(f9,oQ),e(oQ,m_r),e(f9,g_r),e(ie,h_r),e(ie,m9),e(m9,W2e),e(W2e,p_r),e(m9,u_r),e(m9,rQ),e(rQ,__r),e(m9,b_r),e(ie,F_r),e(ie,g9),e(g9,H2e),e(H2e,v_r),e(g9,T_r),e(g9,tQ),e(tQ,M_r),e(g9,E_r),e(ie,C_r),e(ie,h9),e(h9,U2e),e(U2e,w_r),e(h9,A_r),e(h9,aQ),e(aQ,y_r),e(h9,L_r),e(ie,x_r),e(ie,p9),e(p9,J2e),e(J2e,$_r),e(p9,k_r),e(p9,nQ),e(nQ,S_r),e(p9,R_r),e(ie,B_r),e(ie,u9),e(u9,Y2e),e(Y2e,P_r),e(u9,I_r),e(u9,sQ),e(sQ,q_r),e(u9,N_r),e(ie,j_r),e(ie,_9),e(_9,K2e),e(K2e,D_r),e(_9,G_r),e(_9,lQ),e(lQ,O_r),e(_9,V_r),e(ie,X_r),e(ie,b9),e(b9,Z2e),e(Z2e,z_r),e(b9,Q_r),e(b9,iQ),e(iQ,W_r),e(b9,H_r),e(ie,U_r),e(ie,F9),e(F9,e1e),e(e1e,J_r),e(F9,Y_r),e(F9,dQ),e(dQ,K_r),e(F9,Z_r),e(ie,e2r),e(ie,v9),e(v9,o1e),e(o1e,o2r),e(v9,r2r),e(v9,cQ),e(cQ,t2r),e(v9,a2r),e(ie,n2r),e(ie,T9),e(T9,r1e),e(r1e,s2r),e(T9,l2r),e(T9,fQ),e(fQ,i2r),e(T9,d2r),e(ie,c2r),e(ie,M9),e(M9,t1e),e(t1e,f2r),e(M9,m2r),e(M9,mQ),e(mQ,g2r),e(M9,h2r),e(ie,p2r),e(ie,E9),e(E9,a1e),e(a1e,u2r),e(E9,_2r),e(E9,gQ),e(gQ,b2r),e(E9,F2r),e(ie,v2r),e(ie,C9),e(C9,n1e),e(n1e,T2r),e(C9,M2r),e(C9,hQ),e(hQ,E2r),e(C9,C2r),e(Sr,w2r),M(w9,Sr,null),b(f,oSe,_),b(f,oc,_),e(oc,A9),e(A9,s1e),M(cL,s1e,null),e(oc,A2r),e(oc,l1e),e(l1e,y2r),b(f,rSe,_),b(f,sr,_),M(fL,sr,null),e(sr,L2r),e(sr,rc),e(rc,x2r),e(rc,pQ),e(pQ,$2r),e(rc,k2r),e(rc,uQ),e(uQ,S2r),e(rc,R2r),e(sr,B2r),e(sr,mL),e(mL,P2r),e(mL,i1e),e(i1e,I2r),e(mL,q2r),e(sr,N2r),e(sr,Rt),M(gL,Rt,null),e(Rt,j2r),e(Rt,d1e),e(d1e,D2r),e(Rt,G2r),e(Rt,tc),e(tc,O2r),e(tc,c1e),e(c1e,V2r),e(tc,X2r),e(tc,_Q),e(_Q,z2r),e(tc,Q2r),e(Rt,W2r),M(y9,Rt,null),e(sr,H2r),e(sr,Rr),M(hL,Rr,null),e(Rr,U2r),e(Rr,f1e),e(f1e,J2r),e(Rr,Y2r),e(Rr,an),e(an,K2r),e(an,m1e),e(m1e,Z2r),e(an,e1r),e(an,g1e),e(g1e,o1r),e(an,r1r),e(an,h1e),e(h1e,t1r),e(an,a1r),e(Rr,n1r),e(Rr,p1e),e(p1e,L9),e(L9,u1e),e(u1e,s1r),e(L9,l1r),e(L9,bQ),e(bQ,i1r),e(L9,d1r),e(Rr,c1r),M(x9,Rr,null),b(f,tSe,_),b(f,ac,_),e(ac,$9),e($9,_1e),M(pL,_1e,null),e(ac,f1r),e(ac,b1e),e(b1e,m1r),b(f,aSe,_),b(f,lr,_),M(uL,lr,null),e(lr,g1r),e(lr,nc),e(nc,h1r),e(nc,FQ),e(FQ,p1r),e(nc,u1r),e(nc,vQ),e(vQ,_1r),e(nc,b1r),e(lr,F1r),e(lr,_L),e(_L,v1r),e(_L,F1e),e(F1e,T1r),e(_L,M1r),e(lr,E1r),e(lr,Bt),M(bL,Bt,null),e(Bt,C1r),e(Bt,v1e),e(v1e,w1r),e(Bt,A1r),e(Bt,sc),e(sc,y1r),e(sc,T1e),e(T1e,L1r),e(sc,x1r),e(sc,TQ),e(TQ,$1r),e(sc,k1r),e(Bt,S1r),M(k9,Bt,null),e(lr,R1r),e(lr,Br),M(FL,Br,null),e(Br,B1r),e(Br,M1e),e(M1e,P1r),e(Br,I1r),e(Br,nn),e(nn,q1r),e(nn,E1e),e(E1e,N1r),e(nn,j1r),e(nn,C1e),e(C1e,D1r),e(nn,G1r),e(nn,w1e),e(w1e,O1r),e(nn,V1r),e(Br,X1r),e(Br,A1e),e(A1e,S9),e(S9,y1e),e(y1e,z1r),e(S9,Q1r),e(S9,MQ),e(MQ,W1r),e(S9,H1r),e(Br,U1r),M(R9,Br,null),b(f,nSe,_),b(f,lc,_),e(lc,B9),e(B9,L1e),M(vL,L1e,null),e(lc,J1r),e(lc,x1e),e(x1e,Y1r),b(f,sSe,_),b(f,ir,_),M(TL,ir,null),e(ir,K1r),e(ir,ic),e(ic,Z1r),e(ic,EQ),e(EQ,ebr),e(ic,obr),e(ic,CQ),e(CQ,rbr),e(ic,tbr),e(ir,abr),e(ir,ML),e(ML,nbr),e(ML,$1e),e($1e,sbr),e(ML,lbr),e(ir,ibr),e(ir,Pt),M(EL,Pt,null),e(Pt,dbr),e(Pt,k1e),e(k1e,cbr),e(Pt,fbr),e(Pt,dc),e(dc,mbr),e(dc,S1e),e(S1e,gbr),e(dc,hbr),e(dc,wQ),e(wQ,pbr),e(dc,ubr),e(Pt,_br),M(P9,Pt,null),e(ir,bbr),e(ir,Pr),M(CL,Pr,null),e(Pr,Fbr),e(Pr,R1e),e(R1e,vbr),e(Pr,Tbr),e(Pr,sn),e(sn,Mbr),e(sn,B1e),e(B1e,Ebr),e(sn,Cbr),e(sn,P1e),e(P1e,wbr),e(sn,Abr),e(sn,I1e),e(I1e,ybr),e(sn,Lbr),e(Pr,xbr),e(Pr,oe),e(oe,I9),e(I9,q1e),e(q1e,$br),e(I9,kbr),e(I9,AQ),e(AQ,Sbr),e(I9,Rbr),e(oe,Bbr),e(oe,q9),e(q9,N1e),e(N1e,Pbr),e(q9,Ibr),e(q9,yQ),e(yQ,qbr),e(q9,Nbr),e(oe,jbr),e(oe,N9),e(N9,j1e),e(j1e,Dbr),e(N9,Gbr),e(N9,LQ),e(LQ,Obr),e(N9,Vbr),e(oe,Xbr),e(oe,j9),e(j9,D1e),e(D1e,zbr),e(j9,Qbr),e(j9,xQ),e(xQ,Wbr),e(j9,Hbr),e(oe,Ubr),e(oe,D9),e(D9,G1e),e(G1e,Jbr),e(D9,Ybr),e(D9,$Q),e($Q,Kbr),e(D9,Zbr),e(oe,e5r),e(oe,G9),e(G9,O1e),e(O1e,o5r),e(G9,r5r),e(G9,kQ),e(kQ,t5r),e(G9,a5r),e(oe,n5r),e(oe,O9),e(O9,V1e),e(V1e,s5r),e(O9,l5r),e(O9,SQ),e(SQ,i5r),e(O9,d5r),e(oe,c5r),e(oe,V9),e(V9,X1e),e(X1e,f5r),e(V9,m5r),e(V9,RQ),e(RQ,g5r),e(V9,h5r),e(oe,p5r),e(oe,X9),e(X9,z1e),e(z1e,u5r),e(X9,_5r),e(X9,BQ),e(BQ,b5r),e(X9,F5r),e(oe,v5r),e(oe,z9),e(z9,Q1e),e(Q1e,T5r),e(z9,M5r),e(z9,PQ),e(PQ,E5r),e(z9,C5r),e(oe,w5r),e(oe,Q9),e(Q9,W1e),e(W1e,A5r),e(Q9,y5r),e(Q9,IQ),e(IQ,L5r),e(Q9,x5r),e(oe,$5r),e(oe,W9),e(W9,H1e),e(H1e,k5r),e(W9,S5r),e(W9,qQ),e(qQ,R5r),e(W9,B5r),e(oe,P5r),e(oe,H9),e(H9,U1e),e(U1e,I5r),e(H9,q5r),e(H9,NQ),e(NQ,N5r),e(H9,j5r),e(oe,D5r),e(oe,U9),e(U9,J1e),e(J1e,G5r),e(U9,O5r),e(U9,jQ),e(jQ,V5r),e(U9,X5r),e(oe,z5r),e(oe,J9),e(J9,Y1e),e(Y1e,Q5r),e(J9,W5r),e(J9,DQ),e(DQ,H5r),e(J9,U5r),e(oe,J5r),e(oe,Y9),e(Y9,K1e),e(K1e,Y5r),e(Y9,K5r),e(Y9,GQ),e(GQ,Z5r),e(Y9,eFr),e(oe,oFr),e(oe,K9),e(K9,Z1e),e(Z1e,rFr),e(K9,tFr),e(K9,OQ),e(OQ,aFr),e(K9,nFr),e(oe,sFr),e(oe,Z9),e(Z9,ebe),e(ebe,lFr),e(Z9,iFr),e(Z9,VQ),e(VQ,dFr),e(Z9,cFr),e(oe,fFr),e(oe,e4),e(e4,obe),e(obe,mFr),e(e4,gFr),e(e4,XQ),e(XQ,hFr),e(e4,pFr),e(oe,uFr),e(oe,o4),e(o4,rbe),e(rbe,_Fr),e(o4,bFr),e(o4,zQ),e(zQ,FFr),e(o4,vFr),e(oe,TFr),e(oe,r4),e(r4,tbe),e(tbe,MFr),e(r4,EFr),e(r4,QQ),e(QQ,CFr),e(r4,wFr),e(oe,AFr),e(oe,t4),e(t4,abe),e(abe,yFr),e(t4,LFr),e(t4,WQ),e(WQ,xFr),e(t4,$Fr),e(oe,kFr),e(oe,a4),e(a4,nbe),e(nbe,SFr),e(a4,RFr),e(a4,HQ),e(HQ,BFr),e(a4,PFr),e(oe,IFr),e(oe,n4),e(n4,sbe),e(sbe,qFr),e(n4,NFr),e(n4,UQ),e(UQ,jFr),e(n4,DFr),e(oe,GFr),e(oe,s4),e(s4,lbe),e(lbe,OFr),e(s4,VFr),e(s4,JQ),e(JQ,XFr),e(s4,zFr),e(Pr,QFr),M(l4,Pr,null),b(f,lSe,_),b(f,cc,_),e(cc,i4),e(i4,ibe),M(wL,ibe,null),e(cc,WFr),e(cc,dbe),e(dbe,HFr),b(f,iSe,_),b(f,dr,_),M(AL,dr,null),e(dr,UFr),e(dr,fc),e(fc,JFr),e(fc,YQ),e(YQ,YFr),e(fc,KFr),e(fc,KQ),e(KQ,ZFr),e(fc,evr),e(dr,ovr),e(dr,yL),e(yL,rvr),e(yL,cbe),e(cbe,tvr),e(yL,avr),e(dr,nvr),e(dr,It),M(LL,It,null),e(It,svr),e(It,fbe),e(fbe,lvr),e(It,ivr),e(It,mc),e(mc,dvr),e(mc,mbe),e(mbe,cvr),e(mc,fvr),e(mc,ZQ),e(ZQ,mvr),e(mc,gvr),e(It,hvr),M(d4,It,null),e(dr,pvr),e(dr,Ir),M(xL,Ir,null),e(Ir,uvr),e(Ir,gbe),e(gbe,_vr),e(Ir,bvr),e(Ir,ln),e(ln,Fvr),e(ln,hbe),e(hbe,vvr),e(ln,Tvr),e(ln,pbe),e(pbe,Mvr),e(ln,Evr),e(ln,ube),e(ube,Cvr),e(ln,wvr),e(Ir,Avr),e(Ir,Hr),e(Hr,c4),e(c4,_be),e(_be,yvr),e(c4,Lvr),e(c4,eW),e(eW,xvr),e(c4,$vr),e(Hr,kvr),e(Hr,f4),e(f4,bbe),e(bbe,Svr),e(f4,Rvr),e(f4,oW),e(oW,Bvr),e(f4,Pvr),e(Hr,Ivr),e(Hr,m4),e(m4,Fbe),e(Fbe,qvr),e(m4,Nvr),e(m4,rW),e(rW,jvr),e(m4,Dvr),e(Hr,Gvr),e(Hr,g4),e(g4,vbe),e(vbe,Ovr),e(g4,Vvr),e(g4,tW),e(tW,Xvr),e(g4,zvr),e(Hr,Qvr),e(Hr,h4),e(h4,Tbe),e(Tbe,Wvr),e(h4,Hvr),e(h4,aW),e(aW,Uvr),e(h4,Jvr),e(Ir,Yvr),M(p4,Ir,null),b(f,dSe,_),b(f,gc,_),e(gc,u4),e(u4,Mbe),M($L,Mbe,null),e(gc,Kvr),e(gc,Ebe),e(Ebe,Zvr),b(f,cSe,_),b(f,cr,_),M(kL,cr,null),e(cr,e6r),e(cr,hc),e(hc,o6r),e(hc,nW),e(nW,r6r),e(hc,t6r),e(hc,sW),e(sW,a6r),e(hc,n6r),e(cr,s6r),e(cr,SL),e(SL,l6r),e(SL,Cbe),e(Cbe,i6r),e(SL,d6r),e(cr,c6r),e(cr,qt),M(RL,qt,null),e(qt,f6r),e(qt,wbe),e(wbe,m6r),e(qt,g6r),e(qt,pc),e(pc,h6r),e(pc,Abe),e(Abe,p6r),e(pc,u6r),e(pc,lW),e(lW,_6r),e(pc,b6r),e(qt,F6r),M(_4,qt,null),e(cr,v6r),e(cr,qr),M(BL,qr,null),e(qr,T6r),e(qr,ybe),e(ybe,M6r),e(qr,E6r),e(qr,dn),e(dn,C6r),e(dn,Lbe),e(Lbe,w6r),e(dn,A6r),e(dn,xbe),e(xbe,y6r),e(dn,L6r),e(dn,$be),e($be,x6r),e(dn,$6r),e(qr,k6r),e(qr,be),e(be,b4),e(b4,kbe),e(kbe,S6r),e(b4,R6r),e(b4,iW),e(iW,B6r),e(b4,P6r),e(be,I6r),e(be,F4),e(F4,Sbe),e(Sbe,q6r),e(F4,N6r),e(F4,dW),e(dW,j6r),e(F4,D6r),e(be,G6r),e(be,v4),e(v4,Rbe),e(Rbe,O6r),e(v4,V6r),e(v4,cW),e(cW,X6r),e(v4,z6r),e(be,Q6r),e(be,T4),e(T4,Bbe),e(Bbe,W6r),e(T4,H6r),e(T4,fW),e(fW,U6r),e(T4,J6r),e(be,Y6r),e(be,M4),e(M4,Pbe),e(Pbe,K6r),e(M4,Z6r),e(M4,mW),e(mW,eTr),e(M4,oTr),e(be,rTr),e(be,E4),e(E4,Ibe),e(Ibe,tTr),e(E4,aTr),e(E4,gW),e(gW,nTr),e(E4,sTr),e(be,lTr),e(be,C4),e(C4,qbe),e(qbe,iTr),e(C4,dTr),e(C4,hW),e(hW,cTr),e(C4,fTr),e(be,mTr),e(be,w4),e(w4,Nbe),e(Nbe,gTr),e(w4,hTr),e(w4,pW),e(pW,pTr),e(w4,uTr),e(be,_Tr),e(be,A4),e(A4,jbe),e(jbe,bTr),e(A4,FTr),e(A4,uW),e(uW,vTr),e(A4,TTr),e(be,MTr),e(be,y4),e(y4,Dbe),e(Dbe,ETr),e(y4,CTr),e(y4,_W),e(_W,wTr),e(y4,ATr),e(be,yTr),e(be,L4),e(L4,Gbe),e(Gbe,LTr),e(L4,xTr),e(L4,bW),e(bW,$Tr),e(L4,kTr),e(be,STr),e(be,x4),e(x4,Obe),e(Obe,RTr),e(x4,BTr),e(x4,FW),e(FW,PTr),e(x4,ITr),e(qr,qTr),M($4,qr,null),b(f,fSe,_),b(f,uc,_),e(uc,k4),e(k4,Vbe),M(PL,Vbe,null),e(uc,NTr),e(uc,Xbe),e(Xbe,jTr),b(f,mSe,_),b(f,fr,_),M(IL,fr,null),e(fr,DTr),e(fr,_c),e(_c,GTr),e(_c,vW),e(vW,OTr),e(_c,VTr),e(_c,TW),e(TW,XTr),e(_c,zTr),e(fr,QTr),e(fr,qL),e(qL,WTr),e(qL,zbe),e(zbe,HTr),e(qL,UTr),e(fr,JTr),e(fr,Nt),M(NL,Nt,null),e(Nt,YTr),e(Nt,Qbe),e(Qbe,KTr),e(Nt,ZTr),e(Nt,bc),e(bc,eMr),e(bc,Wbe),e(Wbe,oMr),e(bc,rMr),e(bc,MW),e(MW,tMr),e(bc,aMr),e(Nt,nMr),M(S4,Nt,null),e(fr,sMr),e(fr,Nr),M(jL,Nr,null),e(Nr,lMr),e(Nr,Hbe),e(Hbe,iMr),e(Nr,dMr),e(Nr,cn),e(cn,cMr),e(cn,Ube),e(Ube,fMr),e(cn,mMr),e(cn,Jbe),e(Jbe,gMr),e(cn,hMr),e(cn,Ybe),e(Ybe,pMr),e(cn,uMr),e(Nr,_Mr),e(Nr,Ce),e(Ce,R4),e(R4,Kbe),e(Kbe,bMr),e(R4,FMr),e(R4,EW),e(EW,vMr),e(R4,TMr),e(Ce,MMr),e(Ce,B4),e(B4,Zbe),e(Zbe,EMr),e(B4,CMr),e(B4,CW),e(CW,wMr),e(B4,AMr),e(Ce,yMr),e(Ce,P4),e(P4,e5e),e(e5e,LMr),e(P4,xMr),e(P4,wW),e(wW,$Mr),e(P4,kMr),e(Ce,SMr),e(Ce,I4),e(I4,o5e),e(o5e,RMr),e(I4,BMr),e(I4,AW),e(AW,PMr),e(I4,IMr),e(Ce,qMr),e(Ce,q4),e(q4,r5e),e(r5e,NMr),e(q4,jMr),e(q4,yW),e(yW,DMr),e(q4,GMr),e(Ce,OMr),e(Ce,N4),e(N4,t5e),e(t5e,VMr),e(N4,XMr),e(N4,LW),e(LW,zMr),e(N4,QMr),e(Ce,WMr),e(Ce,j4),e(j4,a5e),e(a5e,HMr),e(j4,UMr),e(j4,xW),e(xW,JMr),e(j4,YMr),e(Ce,KMr),e(Ce,D4),e(D4,n5e),e(n5e,ZMr),e(D4,e9r),e(D4,$W),e($W,o9r),e(D4,r9r),e(Ce,t9r),e(Ce,G4),e(G4,s5e),e(s5e,a9r),e(G4,n9r),e(G4,kW),e(kW,s9r),e(G4,l9r),e(Ce,i9r),e(Ce,O4),e(O4,l5e),e(l5e,d9r),e(O4,c9r),e(O4,SW),e(SW,f9r),e(O4,m9r),e(Nr,g9r),M(V4,Nr,null),b(f,gSe,_),b(f,Fc,_),e(Fc,X4),e(X4,i5e),M(DL,i5e,null),e(Fc,h9r),e(Fc,d5e),e(d5e,p9r),b(f,hSe,_),b(f,mr,_),M(GL,mr,null),e(mr,u9r),e(mr,vc),e(vc,_9r),e(vc,RW),e(RW,b9r),e(vc,F9r),e(vc,BW),e(BW,v9r),e(vc,T9r),e(mr,M9r),e(mr,OL),e(OL,E9r),e(OL,c5e),e(c5e,C9r),e(OL,w9r),e(mr,A9r),e(mr,jt),M(VL,jt,null),e(jt,y9r),e(jt,f5e),e(f5e,L9r),e(jt,x9r),e(jt,Tc),e(Tc,$9r),e(Tc,m5e),e(m5e,k9r),e(Tc,S9r),e(Tc,PW),e(PW,R9r),e(Tc,B9r),e(jt,P9r),M(z4,jt,null),e(mr,I9r),e(mr,jr),M(XL,jr,null),e(jr,q9r),e(jr,g5e),e(g5e,N9r),e(jr,j9r),e(jr,fn),e(fn,D9r),e(fn,h5e),e(h5e,G9r),e(fn,O9r),e(fn,p5e),e(p5e,V9r),e(fn,X9r),e(fn,u5e),e(u5e,z9r),e(fn,Q9r),e(jr,W9r),e(jr,xe),e(xe,Q4),e(Q4,_5e),e(_5e,H9r),e(Q4,U9r),e(Q4,IW),e(IW,J9r),e(Q4,Y9r),e(xe,K9r),e(xe,W4),e(W4,b5e),e(b5e,Z9r),e(W4,e4r),e(W4,qW),e(qW,o4r),e(W4,r4r),e(xe,t4r),e(xe,H4),e(H4,F5e),e(F5e,a4r),e(H4,n4r),e(H4,NW),e(NW,s4r),e(H4,l4r),e(xe,i4r),e(xe,U4),e(U4,v5e),e(v5e,d4r),e(U4,c4r),e(U4,jW),e(jW,f4r),e(U4,m4r),e(xe,g4r),e(xe,J4),e(J4,T5e),e(T5e,h4r),e(J4,p4r),e(J4,DW),e(DW,u4r),e(J4,_4r),e(xe,b4r),e(xe,Y4),e(Y4,M5e),e(M5e,F4r),e(Y4,v4r),e(Y4,GW),e(GW,T4r),e(Y4,M4r),e(xe,E4r),e(xe,K4),e(K4,E5e),e(E5e,C4r),e(K4,w4r),e(K4,OW),e(OW,A4r),e(K4,y4r),e(xe,L4r),e(xe,Z4),e(Z4,C5e),e(C5e,x4r),e(Z4,$4r),e(Z4,VW),e(VW,k4r),e(Z4,S4r),e(xe,R4r),e(xe,eE),e(eE,w5e),e(w5e,B4r),e(eE,P4r),e(eE,XW),e(XW,I4r),e(eE,q4r),e(jr,N4r),M(oE,jr,null),b(f,pSe,_),b(f,Mc,_),e(Mc,rE),e(rE,A5e),M(zL,A5e,null),e(Mc,j4r),e(Mc,y5e),e(y5e,D4r),b(f,uSe,_),b(f,gr,_),M(QL,gr,null),e(gr,G4r),e(gr,Ec),e(Ec,O4r),e(Ec,zW),e(zW,V4r),e(Ec,X4r),e(Ec,QW),e(QW,z4r),e(Ec,Q4r),e(gr,W4r),e(gr,WL),e(WL,H4r),e(WL,L5e),e(L5e,U4r),e(WL,J4r),e(gr,Y4r),e(gr,Dt),M(HL,Dt,null),e(Dt,K4r),e(Dt,x5e),e(x5e,Z4r),e(Dt,eEr),e(Dt,Cc),e(Cc,oEr),e(Cc,$5e),e($5e,rEr),e(Cc,tEr),e(Cc,WW),e(WW,aEr),e(Cc,nEr),e(Dt,sEr),M(tE,Dt,null),e(gr,lEr),e(gr,Dr),M(UL,Dr,null),e(Dr,iEr),e(Dr,k5e),e(k5e,dEr),e(Dr,cEr),e(Dr,mn),e(mn,fEr),e(mn,S5e),e(S5e,mEr),e(mn,gEr),e(mn,R5e),e(R5e,hEr),e(mn,pEr),e(mn,B5e),e(B5e,uEr),e(mn,_Er),e(Dr,bEr),e(Dr,we),e(we,aE),e(aE,P5e),e(P5e,FEr),e(aE,vEr),e(aE,HW),e(HW,TEr),e(aE,MEr),e(we,EEr),e(we,nE),e(nE,I5e),e(I5e,CEr),e(nE,wEr),e(nE,UW),e(UW,AEr),e(nE,yEr),e(we,LEr),e(we,sE),e(sE,q5e),e(q5e,xEr),e(sE,$Er),e(sE,JW),e(JW,kEr),e(sE,SEr),e(we,REr),e(we,lE),e(lE,N5e),e(N5e,BEr),e(lE,PEr),e(lE,YW),e(YW,IEr),e(lE,qEr),e(we,NEr),e(we,iE),e(iE,j5e),e(j5e,jEr),e(iE,DEr),e(iE,KW),e(KW,GEr),e(iE,OEr),e(we,VEr),e(we,dE),e(dE,D5e),e(D5e,XEr),e(dE,zEr),e(dE,ZW),e(ZW,QEr),e(dE,WEr),e(we,HEr),e(we,cE),e(cE,G5e),e(G5e,UEr),e(cE,JEr),e(cE,eH),e(eH,YEr),e(cE,KEr),e(we,ZEr),e(we,fE),e(fE,O5e),e(O5e,eCr),e(fE,oCr),e(fE,oH),e(oH,rCr),e(fE,tCr),e(we,aCr),e(we,mE),e(mE,V5e),e(V5e,nCr),e(mE,sCr),e(mE,rH),e(rH,lCr),e(mE,iCr),e(we,dCr),e(we,gE),e(gE,X5e),e(X5e,cCr),e(gE,fCr),e(gE,tH),e(tH,mCr),e(gE,gCr),e(Dr,hCr),M(hE,Dr,null),b(f,_Se,_),b(f,wc,_),e(wc,pE),e(pE,z5e),M(JL,z5e,null),e(wc,pCr),e(wc,Q5e),e(Q5e,uCr),b(f,bSe,_),b(f,hr,_),M(YL,hr,null),e(hr,_Cr),e(hr,Ac),e(Ac,bCr),e(Ac,aH),e(aH,FCr),e(Ac,vCr),e(Ac,nH),e(nH,TCr),e(Ac,MCr),e(hr,ECr),e(hr,KL),e(KL,CCr),e(KL,W5e),e(W5e,wCr),e(KL,ACr),e(hr,yCr),e(hr,Gt),M(ZL,Gt,null),e(Gt,LCr),e(Gt,H5e),e(H5e,xCr),e(Gt,$Cr),e(Gt,yc),e(yc,kCr),e(yc,U5e),e(U5e,SCr),e(yc,RCr),e(yc,sH),e(sH,BCr),e(yc,PCr),e(Gt,ICr),M(uE,Gt,null),e(hr,qCr),e(hr,Gr),M(e8,Gr,null),e(Gr,NCr),e(Gr,J5e),e(J5e,jCr),e(Gr,DCr),e(Gr,gn),e(gn,GCr),e(gn,Y5e),e(Y5e,OCr),e(gn,VCr),e(gn,K5e),e(K5e,XCr),e(gn,zCr),e(gn,Z5e),e(Z5e,QCr),e(gn,WCr),e(Gr,HCr),e(Gr,Ae),e(Ae,_E),e(_E,eFe),e(eFe,UCr),e(_E,JCr),e(_E,lH),e(lH,YCr),e(_E,KCr),e(Ae,ZCr),e(Ae,bE),e(bE,oFe),e(oFe,e3r),e(bE,o3r),e(bE,iH),e(iH,r3r),e(bE,t3r),e(Ae,a3r),e(Ae,FE),e(FE,rFe),e(rFe,n3r),e(FE,s3r),e(FE,dH),e(dH,l3r),e(FE,i3r),e(Ae,d3r),e(Ae,vE),e(vE,tFe),e(tFe,c3r),e(vE,f3r),e(vE,cH),e(cH,m3r),e(vE,g3r),e(Ae,h3r),e(Ae,TE),e(TE,aFe),e(aFe,p3r),e(TE,u3r),e(TE,fH),e(fH,_3r),e(TE,b3r),e(Ae,F3r),e(Ae,ME),e(ME,nFe),e(nFe,v3r),e(ME,T3r),e(ME,mH),e(mH,M3r),e(ME,E3r),e(Ae,C3r),e(Ae,EE),e(EE,sFe),e(sFe,w3r),e(EE,A3r),e(EE,gH),e(gH,y3r),e(EE,L3r),e(Ae,x3r),e(Ae,CE),e(CE,lFe),e(lFe,$3r),e(CE,k3r),e(CE,hH),e(hH,S3r),e(CE,R3r),e(Ae,B3r),e(Ae,wE),e(wE,iFe),e(iFe,P3r),e(wE,I3r),e(wE,pH),e(pH,q3r),e(wE,N3r),e(Ae,j3r),e(Ae,AE),e(AE,dFe),e(dFe,D3r),e(AE,G3r),e(AE,uH),e(uH,O3r),e(AE,V3r),e(Gr,X3r),M(yE,Gr,null),b(f,FSe,_),b(f,Lc,_),e(Lc,LE),e(LE,cFe),M(o8,cFe,null),e(Lc,z3r),e(Lc,fFe),e(fFe,Q3r),b(f,vSe,_),b(f,pr,_),M(r8,pr,null),e(pr,W3r),e(pr,xc),e(xc,H3r),e(xc,_H),e(_H,U3r),e(xc,J3r),e(xc,bH),e(bH,Y3r),e(xc,K3r),e(pr,Z3r),e(pr,t8),e(t8,ewr),e(t8,mFe),e(mFe,owr),e(t8,rwr),e(pr,twr),e(pr,Ot),M(a8,Ot,null),e(Ot,awr),e(Ot,gFe),e(gFe,nwr),e(Ot,swr),e(Ot,$c),e($c,lwr),e($c,hFe),e(hFe,iwr),e($c,dwr),e($c,FH),e(FH,cwr),e($c,fwr),e(Ot,mwr),M(xE,Ot,null),e(pr,gwr),e(pr,Or),M(n8,Or,null),e(Or,hwr),e(Or,pFe),e(pFe,pwr),e(Or,uwr),e(Or,hn),e(hn,_wr),e(hn,uFe),e(uFe,bwr),e(hn,Fwr),e(hn,_Fe),e(_Fe,vwr),e(hn,Twr),e(hn,bFe),e(bFe,Mwr),e(hn,Ewr),e(Or,Cwr),e(Or,Ne),e(Ne,$E),e($E,FFe),e(FFe,wwr),e($E,Awr),e($E,vH),e(vH,ywr),e($E,Lwr),e(Ne,xwr),e(Ne,kE),e(kE,vFe),e(vFe,$wr),e(kE,kwr),e(kE,TH),e(TH,Swr),e(kE,Rwr),e(Ne,Bwr),e(Ne,SE),e(SE,TFe),e(TFe,Pwr),e(SE,Iwr),e(SE,MH),e(MH,qwr),e(SE,Nwr),e(Ne,jwr),e(Ne,RE),e(RE,MFe),e(MFe,Dwr),e(RE,Gwr),e(RE,EH),e(EH,Owr),e(RE,Vwr),e(Ne,Xwr),e(Ne,BE),e(BE,EFe),e(EFe,zwr),e(BE,Qwr),e(BE,CH),e(CH,Wwr),e(BE,Hwr),e(Ne,Uwr),e(Ne,PE),e(PE,CFe),e(CFe,Jwr),e(PE,Ywr),e(PE,wH),e(wH,Kwr),e(PE,Zwr),e(Ne,eAr),e(Ne,IE),e(IE,wFe),e(wFe,oAr),e(IE,rAr),e(IE,AH),e(AH,tAr),e(IE,aAr),e(Ne,nAr),e(Ne,qE),e(qE,AFe),e(AFe,sAr),e(qE,lAr),e(qE,yH),e(yH,iAr),e(qE,dAr),e(Or,cAr),M(NE,Or,null),b(f,TSe,_),b(f,kc,_),e(kc,jE),e(jE,yFe),M(s8,yFe,null),e(kc,fAr),e(kc,LFe),e(LFe,mAr),b(f,MSe,_),b(f,ur,_),M(l8,ur,null),e(ur,gAr),e(ur,Sc),e(Sc,hAr),e(Sc,LH),e(LH,pAr),e(Sc,uAr),e(Sc,xH),e(xH,_Ar),e(Sc,bAr),e(ur,FAr),e(ur,i8),e(i8,vAr),e(i8,xFe),e(xFe,TAr),e(i8,MAr),e(ur,EAr),e(ur,Vt),M(d8,Vt,null),e(Vt,CAr),e(Vt,$Fe),e($Fe,wAr),e(Vt,AAr),e(Vt,Rc),e(Rc,yAr),e(Rc,kFe),e(kFe,LAr),e(Rc,xAr),e(Rc,$H),e($H,$Ar),e(Rc,kAr),e(Vt,SAr),M(DE,Vt,null),e(ur,RAr),e(ur,Vr),M(c8,Vr,null),e(Vr,BAr),e(Vr,SFe),e(SFe,PAr),e(Vr,IAr),e(Vr,pn),e(pn,qAr),e(pn,RFe),e(RFe,NAr),e(pn,jAr),e(pn,BFe),e(BFe,DAr),e(pn,GAr),e(pn,PFe),e(PFe,OAr),e(pn,VAr),e(Vr,XAr),e(Vr,je),e(je,GE),e(GE,IFe),e(IFe,zAr),e(GE,QAr),e(GE,kH),e(kH,WAr),e(GE,HAr),e(je,UAr),e(je,OE),e(OE,qFe),e(qFe,JAr),e(OE,YAr),e(OE,SH),e(SH,KAr),e(OE,ZAr),e(je,e0r),e(je,VE),e(VE,NFe),e(NFe,o0r),e(VE,r0r),e(VE,RH),e(RH,t0r),e(VE,a0r),e(je,n0r),e(je,XE),e(XE,jFe),e(jFe,s0r),e(XE,l0r),e(XE,BH),e(BH,i0r),e(XE,d0r),e(je,c0r),e(je,zE),e(zE,DFe),e(DFe,f0r),e(zE,m0r),e(zE,PH),e(PH,g0r),e(zE,h0r),e(je,p0r),e(je,QE),e(QE,GFe),e(GFe,u0r),e(QE,_0r),e(QE,IH),e(IH,b0r),e(QE,F0r),e(je,v0r),e(je,WE),e(WE,OFe),e(OFe,T0r),e(WE,M0r),e(WE,qH),e(qH,E0r),e(WE,C0r),e(je,w0r),e(je,HE),e(HE,VFe),e(VFe,A0r),e(HE,y0r),e(HE,NH),e(NH,L0r),e(HE,x0r),e(Vr,$0r),M(UE,Vr,null),b(f,ESe,_),b(f,Bc,_),e(Bc,JE),e(JE,XFe),M(f8,XFe,null),e(Bc,k0r),e(Bc,zFe),e(zFe,S0r),b(f,CSe,_),b(f,_r,_),M(m8,_r,null),e(_r,R0r),e(_r,Pc),e(Pc,B0r),e(Pc,jH),e(jH,P0r),e(Pc,I0r),e(Pc,DH),e(DH,q0r),e(Pc,N0r),e(_r,j0r),e(_r,g8),e(g8,D0r),e(g8,QFe),e(QFe,G0r),e(g8,O0r),e(_r,V0r),e(_r,Xt),M(h8,Xt,null),e(Xt,X0r),e(Xt,WFe),e(WFe,z0r),e(Xt,Q0r),e(Xt,Ic),e(Ic,W0r),e(Ic,HFe),e(HFe,H0r),e(Ic,U0r),e(Ic,GH),e(GH,J0r),e(Ic,Y0r),e(Xt,K0r),M(YE,Xt,null),e(_r,Z0r),e(_r,Xr),M(p8,Xr,null),e(Xr,eyr),e(Xr,UFe),e(UFe,oyr),e(Xr,ryr),e(Xr,un),e(un,tyr),e(un,JFe),e(JFe,ayr),e(un,nyr),e(un,YFe),e(YFe,syr),e(un,lyr),e(un,KFe),e(KFe,iyr),e(un,dyr),e(Xr,cyr),e(Xr,ZFe),e(ZFe,KE),e(KE,eve),e(eve,fyr),e(KE,myr),e(KE,OH),e(OH,gyr),e(KE,hyr),e(Xr,pyr),M(ZE,Xr,null),b(f,wSe,_),b(f,qc,_),e(qc,eC),e(eC,ove),M(u8,ove,null),e(qc,uyr),e(qc,rve),e(rve,_yr),b(f,ASe,_),b(f,br,_),M(_8,br,null),e(br,byr),e(br,Nc),e(Nc,Fyr),e(Nc,VH),e(VH,vyr),e(Nc,Tyr),e(Nc,XH),e(XH,Myr),e(Nc,Eyr),e(br,Cyr),e(br,b8),e(b8,wyr),e(b8,tve),e(tve,Ayr),e(b8,yyr),e(br,Lyr),e(br,zt),M(F8,zt,null),e(zt,xyr),e(zt,ave),e(ave,$yr),e(zt,kyr),e(zt,jc),e(jc,Syr),e(jc,nve),e(nve,Ryr),e(jc,Byr),e(jc,zH),e(zH,Pyr),e(jc,Iyr),e(zt,qyr),M(oC,zt,null),e(br,Nyr),e(br,zr),M(v8,zr,null),e(zr,jyr),e(zr,sve),e(sve,Dyr),e(zr,Gyr),e(zr,_n),e(_n,Oyr),e(_n,lve),e(lve,Vyr),e(_n,Xyr),e(_n,ive),e(ive,zyr),e(_n,Qyr),e(_n,dve),e(dve,Wyr),e(_n,Hyr),e(zr,Uyr),e(zr,T8),e(T8,rC),e(rC,cve),e(cve,Jyr),e(rC,Yyr),e(rC,QH),e(QH,Kyr),e(rC,Zyr),e(T8,eLr),e(T8,tC),e(tC,fve),e(fve,oLr),e(tC,rLr),e(tC,WH),e(WH,tLr),e(tC,aLr),e(zr,nLr),M(aC,zr,null),b(f,ySe,_),b(f,Dc,_),e(Dc,nC),e(nC,mve),M(M8,mve,null),e(Dc,sLr),e(Dc,gve),e(gve,lLr),b(f,LSe,_),b(f,Fr,_),M(E8,Fr,null),e(Fr,iLr),e(Fr,Gc),e(Gc,dLr),e(Gc,HH),e(HH,cLr),e(Gc,fLr),e(Gc,UH),e(UH,mLr),e(Gc,gLr),e(Fr,hLr),e(Fr,C8),e(C8,pLr),e(C8,hve),e(hve,uLr),e(C8,_Lr),e(Fr,bLr),e(Fr,Qt),M(w8,Qt,null),e(Qt,FLr),e(Qt,pve),e(pve,vLr),e(Qt,TLr),e(Qt,Oc),e(Oc,MLr),e(Oc,uve),e(uve,ELr),e(Oc,CLr),e(Oc,JH),e(JH,wLr),e(Oc,ALr),e(Qt,yLr),M(sC,Qt,null),e(Fr,LLr),e(Fr,Qr),M(A8,Qr,null),e(Qr,xLr),e(Qr,_ve),e(_ve,$Lr),e(Qr,kLr),e(Qr,bn),e(bn,SLr),e(bn,bve),e(bve,RLr),e(bn,BLr),e(bn,Fve),e(Fve,PLr),e(bn,ILr),e(bn,vve),e(vve,qLr),e(bn,NLr),e(Qr,jLr),e(Qr,Tve),e(Tve,lC),e(lC,Mve),e(Mve,DLr),e(lC,GLr),e(lC,YH),e(YH,OLr),e(lC,VLr),e(Qr,XLr),M(iC,Qr,null),xSe=!0},p(f,[_]){const y8={};_&2&&(y8.$$scope={dirty:_,ctx:f}),Yc.$set(y8);const Eve={};_&2&&(Eve.$$scope={dirty:_,ctx:f}),Xm.$set(Eve);const Cve={};_&2&&(Cve.$$scope={dirty:_,ctx:f}),Mg.$set(Cve);const wve={};_&2&&(wve.$$scope={dirty:_,ctx:f}),Vg.$set(wve);const L8={};_&2&&(L8.$$scope={dirty:_,ctx:f}),Xg.$set(L8);const Ave={};_&2&&(Ave.$$scope={dirty:_,ctx:f}),oh.$set(Ave);const Fn={};_&2&&(Fn.$$scope={dirty:_,ctx:f}),rh.$set(Fn);const yve={};_&2&&(yve.$$scope={dirty:_,ctx:f}),nh.$set(yve);const Lve={};_&2&&(Lve.$$scope={dirty:_,ctx:f}),Vp.$set(Lve);const xve={};_&2&&(xve.$$scope={dirty:_,ctx:f}),zp.$set(xve);const x8={};_&2&&(x8.$$scope={dirty:_,ctx:f}),Su.$set(x8);const $ve={};_&2&&($ve.$$scope={dirty:_,ctx:f}),Bu.$set($ve);const $8={};_&2&&($8.$$scope={dirty:_,ctx:f}),__.$set($8);const kve={};_&2&&(kve.$$scope={dirty:_,ctx:f}),F_.$set(kve);const k8={};_&2&&(k8.$$scope={dirty:_,ctx:f}),r2.$set(k8);const Sve={};_&2&&(Sve.$$scope={dirty:_,ctx:f}),a2.$set(Sve);const Rve={};_&2&&(Rve.$$scope={dirty:_,ctx:f}),M2.$set(Rve);const Bve={};_&2&&(Bve.$$scope={dirty:_,ctx:f}),C2.$set(Bve);const Vc={};_&2&&(Vc.$$scope={dirty:_,ctx:f}),b1.$set(Vc);const Pve={};_&2&&(Pve.$$scope={dirty:_,ctx:f}),v1.$set(Pve);const Ive={};_&2&&(Ive.$$scope={dirty:_,ctx:f}),J1.$set(Ive);const qve={};_&2&&(qve.$$scope={dirty:_,ctx:f}),K1.$set(qve);const S8={};_&2&&(S8.$$scope={dirty:_,ctx:f}),nb.$set(S8);const Nve={};_&2&&(Nve.$$scope={dirty:_,ctx:f}),lb.$set(Nve);const jve={};_&2&&(jve.$$scope={dirty:_,ctx:f}),Ob.$set(jve);const Dve={};_&2&&(Dve.$$scope={dirty:_,ctx:f}),Xb.$set(Dve);const Ur={};_&2&&(Ur.$$scope={dirty:_,ctx:f}),k5.$set(Ur);const R8={};_&2&&(R8.$$scope={dirty:_,ctx:f}),R5.$set(R8);const Gve={};_&2&&(Gve.$$scope={dirty:_,ctx:f}),I5.$set(Gve);const B8={};_&2&&(B8.$$scope={dirty:_,ctx:f}),N5.$set(B8);const Ove={};_&2&&(Ove.$$scope={dirty:_,ctx:f}),U5.$set(Ove);const Jr={};_&2&&(Jr.$$scope={dirty:_,ctx:f}),Y5.$set(Jr);const Vve={};_&2&&(Vve.$$scope={dirty:_,ctx:f}),eF.$set(Vve);const Xc={};_&2&&(Xc.$$scope={dirty:_,ctx:f}),rF.$set(Xc);const Xve={};_&2&&(Xve.$$scope={dirty:_,ctx:f}),mF.$set(Xve);const zve={};_&2&&(zve.$$scope={dirty:_,ctx:f}),hF.$set(zve);const L={};_&2&&(L.$$scope={dirty:_,ctx:f}),vF.$set(L);const dC={};_&2&&(dC.$$scope={dirty:_,ctx:f}),MF.$set(dC);const Qve={};_&2&&(Qve.$$scope={dirty:_,ctx:f}),SF.$set(Qve);const Wve={};_&2&&(Wve.$$scope={dirty:_,ctx:f}),BF.$set(Wve);const cC={};_&2&&(cC.$$scope={dirty:_,ctx:f}),NF.$set(cC);const Hve={};_&2&&(Hve.$$scope={dirty:_,ctx:f}),DF.$set(Hve);const Uve={};_&2&&(Uve.$$scope={dirty:_,ctx:f}),QF.$set(Uve);const fC={};_&2&&(fC.$$scope={dirty:_,ctx:f}),HF.$set(fC);const Jve={};_&2&&(Jve.$$scope={dirty:_,ctx:f}),ZF.$set(Jve);const Yve={};_&2&&(Yve.$$scope={dirty:_,ctx:f}),ov.$set(Yve);const mC={};_&2&&(mC.$$scope={dirty:_,ctx:f}),av.$set(mC);const Kve={};_&2&&(Kve.$$scope={dirty:_,ctx:f}),sv.$set(Kve);const Zve={};_&2&&(Zve.$$scope={dirty:_,ctx:f}),dv.$set(Zve);const gC={};_&2&&(gC.$$scope={dirty:_,ctx:f}),fv.$set(gC);const e6e={};_&2&&(e6e.$$scope={dirty:_,ctx:f}),pv.$set(e6e);const o6e={};_&2&&(o6e.$$scope={dirty:_,ctx:f}),_v.$set(o6e);const hC={};_&2&&(hC.$$scope={dirty:_,ctx:f}),vv.$set(hC);const r6e={};_&2&&(r6e.$$scope={dirty:_,ctx:f}),Mv.$set(r6e);const t6e={};_&2&&(t6e.$$scope={dirty:_,ctx:f}),c6.$set(t6e);const pC={};_&2&&(pC.$$scope={dirty:_,ctx:f}),m6.$set(pC);const a6e={};_&2&&(a6e.$$scope={dirty:_,ctx:f}),P6.$set(a6e);const n6e={};_&2&&(n6e.$$scope={dirty:_,ctx:f}),q6.$set(n6e);const uC={};_&2&&(uC.$$scope={dirty:_,ctx:f}),U6.$set(uC);const s6e={};_&2&&(s6e.$$scope={dirty:_,ctx:f}),Y6.$set(s6e);const l6e={};_&2&&(l6e.$$scope={dirty:_,ctx:f}),eT.$set(l6e);const _C={};_&2&&(_C.$$scope={dirty:_,ctx:f}),rT.$set(_C);const i6e={};_&2&&(i6e.$$scope={dirty:_,ctx:f}),ET.$set(i6e);const d6e={};_&2&&(d6e.$$scope={dirty:_,ctx:f}),wT.$set(d6e);const bC={};_&2&&(bC.$$scope={dirty:_,ctx:f}),IT.$set(bC);const c6e={};_&2&&(c6e.$$scope={dirty:_,ctx:f}),NT.$set(c6e);const f6e={};_&2&&(f6e.$$scope={dirty:_,ctx:f}),cM.$set(f6e);const FC={};_&2&&(FC.$$scope={dirty:_,ctx:f}),mM.$set(FC);const m6e={};_&2&&(m6e.$$scope={dirty:_,ctx:f}),$M.$set(m6e);const g6e={};_&2&&(g6e.$$scope={dirty:_,ctx:f}),SM.$set(g6e);const vC={};_&2&&(vC.$$scope={dirty:_,ctx:f}),BM.$set(vC);const h6e={};_&2&&(h6e.$$scope={dirty:_,ctx:f}),IM.$set(h6e);const p6e={};_&2&&(p6e.$$scope={dirty:_,ctx:f}),t9.$set(p6e);const TC={};_&2&&(TC.$$scope={dirty:_,ctx:f}),n9.$set(TC);const u6e={};_&2&&(u6e.$$scope={dirty:_,ctx:f}),w9.$set(u6e);const _6e={};_&2&&(_6e.$$scope={dirty:_,ctx:f}),y9.$set(_6e);const MC={};_&2&&(MC.$$scope={dirty:_,ctx:f}),x9.$set(MC);const b6e={};_&2&&(b6e.$$scope={dirty:_,ctx:f}),k9.$set(b6e);const F6e={};_&2&&(F6e.$$scope={dirty:_,ctx:f}),R9.$set(F6e);const EC={};_&2&&(EC.$$scope={dirty:_,ctx:f}),P9.$set(EC);const v6e={};_&2&&(v6e.$$scope={dirty:_,ctx:f}),l4.$set(v6e);const T6e={};_&2&&(T6e.$$scope={dirty:_,ctx:f}),d4.$set(T6e);const CC={};_&2&&(CC.$$scope={dirty:_,ctx:f}),p4.$set(CC);const M6e={};_&2&&(M6e.$$scope={dirty:_,ctx:f}),_4.$set(M6e);const E6e={};_&2&&(E6e.$$scope={dirty:_,ctx:f}),$4.$set(E6e);const wC={};_&2&&(wC.$$scope={dirty:_,ctx:f}),S4.$set(wC);const C6e={};_&2&&(C6e.$$scope={dirty:_,ctx:f}),V4.$set(C6e);const w6e={};_&2&&(w6e.$$scope={dirty:_,ctx:f}),z4.$set(w6e);const AC={};_&2&&(AC.$$scope={dirty:_,ctx:f}),oE.$set(AC);const A6e={};_&2&&(A6e.$$scope={dirty:_,ctx:f}),tE.$set(A6e);const y6e={};_&2&&(y6e.$$scope={dirty:_,ctx:f}),hE.$set(y6e);const yC={};_&2&&(yC.$$scope={dirty:_,ctx:f}),uE.$set(yC);const L6e={};_&2&&(L6e.$$scope={dirty:_,ctx:f}),yE.$set(L6e);const x6e={};_&2&&(x6e.$$scope={dirty:_,ctx:f}),xE.$set(x6e);const LC={};_&2&&(LC.$$scope={dirty:_,ctx:f}),NE.$set(LC);const $6e={};_&2&&($6e.$$scope={dirty:_,ctx:f}),DE.$set($6e);const k6e={};_&2&&(k6e.$$scope={dirty:_,ctx:f}),UE.$set(k6e);const xC={};_&2&&(xC.$$scope={dirty:_,ctx:f}),YE.$set(xC);const S6e={};_&2&&(S6e.$$scope={dirty:_,ctx:f}),ZE.$set(S6e);const R6e={};_&2&&(R6e.$$scope={dirty:_,ctx:f}),oC.$set(R6e);const $C={};_&2&&($C.$$scope={dirty:_,ctx:f}),aC.$set($C);const B6e={};_&2&&(B6e.$$scope={dirty:_,ctx:f}),sC.$set(B6e);const P6e={};_&2&&(P6e.$$scope={dirty:_,ctx:f}),iC.$set(P6e)},i(f){xSe||(E(d.$$.fragment,f),E(ba.$$.fragment,f),E(yw.$$.fragment,f),E(Lw.$$.fragment,f),E(Yc.$$.fragment,f),E(xw.$$.fragment,f),E($w.$$.fragment,f),E(Rw.$$.fragment,f),E(Xm.$$.fragment,f),E(Bw.$$.fragment,f),E(Pw.$$.fragment,f),E(Iw.$$.fragment,f),E(jw.$$.fragment,f),E(Mg.$$.fragment,f),E(Dw.$$.fragment,f),E(Gw.$$.fragment,f),E(Ow.$$.fragment,f),E(zw.$$.fragment,f),E(Vg.$$.fragment,f),E(Xg.$$.fragment,f),E(Qw.$$.fragment,f),E(Ww.$$.fragment,f),E(Hw.$$.fragment,f),E(Yw.$$.fragment,f),E(oh.$$.fragment,f),E(rh.$$.fragment,f),E(Kw.$$.fragment,f),E(Zw.$$.fragment,f),E(eA.$$.fragment,f),E(rA.$$.fragment,f),E(nh.$$.fragment,f),E(tA.$$.fragment,f),E(Vp.$$.fragment,f),E(aA.$$.fragment,f),E(nA.$$.fragment,f),E(lA.$$.fragment,f),E(zp.$$.fragment,f),E(iA.$$.fragment,f),E(Su.$$.fragment,f),E(dA.$$.fragment,f),E(cA.$$.fragment,f),E(mA.$$.fragment,f),E(Bu.$$.fragment,f),E(gA.$$.fragment,f),E(__.$$.fragment,f),E(hA.$$.fragment,f),E(pA.$$.fragment,f),E(_A.$$.fragment,f),E(F_.$$.fragment,f),E(bA.$$.fragment,f),E(r2.$$.fragment,f),E(FA.$$.fragment,f),E(vA.$$.fragment,f),E(MA.$$.fragment,f),E(a2.$$.fragment,f),E(EA.$$.fragment,f),E(M2.$$.fragment,f),E(CA.$$.fragment,f),E(wA.$$.fragment,f),E(yA.$$.fragment,f),E(C2.$$.fragment,f),E(LA.$$.fragment,f),E(b1.$$.fragment,f),E(xA.$$.fragment,f),E($A.$$.fragment,f),E(SA.$$.fragment,f),E(v1.$$.fragment,f),E(RA.$$.fragment,f),E(J1.$$.fragment,f),E(BA.$$.fragment,f),E(PA.$$.fragment,f),E(qA.$$.fragment,f),E(K1.$$.fragment,f),E(NA.$$.fragment,f),E(nb.$$.fragment,f),E(jA.$$.fragment,f),E(DA.$$.fragment,f),E(OA.$$.fragment,f),E(lb.$$.fragment,f),E(VA.$$.fragment,f),E(Ob.$$.fragment,f),E(XA.$$.fragment,f),E(zA.$$.fragment,f),E(WA.$$.fragment,f),E(Xb.$$.fragment,f),E(HA.$$.fragment,f),E(k5.$$.fragment,f),E(UA.$$.fragment,f),E(JA.$$.fragment,f),E(KA.$$.fragment,f),E(R5.$$.fragment,f),E(ZA.$$.fragment,f),E(I5.$$.fragment,f),E(e0.$$.fragment,f),E(o0.$$.fragment,f),E(t0.$$.fragment,f),E(N5.$$.fragment,f),E(a0.$$.fragment,f),E(U5.$$.fragment,f),E(n0.$$.fragment,f),E(s0.$$.fragment,f),E(i0.$$.fragment,f),E(Y5.$$.fragment,f),E(d0.$$.fragment,f),E(eF.$$.fragment,f),E(c0.$$.fragment,f),E(f0.$$.fragment,f),E(g0.$$.fragment,f),E(rF.$$.fragment,f),E(h0.$$.fragment,f),E(mF.$$.fragment,f),E(p0.$$.fragment,f),E(u0.$$.fragment,f),E(b0.$$.fragment,f),E(hF.$$.fragment,f),E(F0.$$.fragment,f),E(vF.$$.fragment,f),E(v0.$$.fragment,f),E(T0.$$.fragment,f),E(E0.$$.fragment,f),E(MF.$$.fragment,f),E(C0.$$.fragment,f),E(SF.$$.fragment,f),E(w0.$$.fragment,f),E(A0.$$.fragment,f),E(L0.$$.fragment,f),E(BF.$$.fragment,f),E(x0.$$.fragment,f),E(NF.$$.fragment,f),E(k0.$$.fragment,f),E(S0.$$.fragment,f),E(B0.$$.fragment,f),E(DF.$$.fragment,f),E(P0.$$.fragment,f),E(QF.$$.fragment,f),E(I0.$$.fragment,f),E(q0.$$.fragment,f),E(j0.$$.fragment,f),E(HF.$$.fragment,f),E(D0.$$.fragment,f),E(ZF.$$.fragment,f),E(G0.$$.fragment,f),E(O0.$$.fragment,f),E(X0.$$.fragment,f),E(ov.$$.fragment,f),E(z0.$$.fragment,f),E(av.$$.fragment,f),E(Q0.$$.fragment,f),E(W0.$$.fragment,f),E(U0.$$.fragment,f),E(sv.$$.fragment,f),E(J0.$$.fragment,f),E(dv.$$.fragment,f),E(Y0.$$.fragment,f),E(K0.$$.fragment,f),E(ey.$$.fragment,f),E(fv.$$.fragment,f),E(oy.$$.fragment,f),E(pv.$$.fragment,f),E(ty.$$.fragment,f),E(ay.$$.fragment,f),E(sy.$$.fragment,f),E(_v.$$.fragment,f),E(ly.$$.fragment,f),E(vv.$$.fragment,f),E(iy.$$.fragment,f),E(dy.$$.fragment,f),E(fy.$$.fragment,f),E(Mv.$$.fragment,f),E(my.$$.fragment,f),E(c6.$$.fragment,f),E(gy.$$.fragment,f),E(hy.$$.fragment,f),E(uy.$$.fragment,f),E(m6.$$.fragment,f),E(_y.$$.fragment,f),E(P6.$$.fragment,f),E(by.$$.fragment,f),E(Fy.$$.fragment,f),E(Ty.$$.fragment,f),E(q6.$$.fragment,f),E(My.$$.fragment,f),E(U6.$$.fragment,f),E(Ey.$$.fragment,f),E(Cy.$$.fragment,f),E(Ay.$$.fragment,f),E(Y6.$$.fragment,f),E(yy.$$.fragment,f),E(eT.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Sy.$$.fragment,f),E(rT.$$.fragment,f),E(Ry.$$.fragment,f),E(ET.$$.fragment,f),E(By.$$.fragment,f),E(Py.$$.fragment,f),E(qy.$$.fragment,f),E(wT.$$.fragment,f),E(Ny.$$.fragment,f),E(IT.$$.fragment,f),E(jy.$$.fragment,f),E(Dy.$$.fragment,f),E(Oy.$$.fragment,f),E(NT.$$.fragment,f),E(Vy.$$.fragment,f),E(cM.$$.fragment,f),E(Xy.$$.fragment,f),E(zy.$$.fragment,f),E(Wy.$$.fragment,f),E(mM.$$.fragment,f),E(Hy.$$.fragment,f),E($M.$$.fragment,f),E(Uy.$$.fragment,f),E(Jy.$$.fragment,f),E(Ky.$$.fragment,f),E(SM.$$.fragment,f),E(Zy.$$.fragment,f),E(BM.$$.fragment,f),E(eL.$$.fragment,f),E(oL.$$.fragment,f),E(tL.$$.fragment,f),E(IM.$$.fragment,f),E(aL.$$.fragment,f),E(t9.$$.fragment,f),E(nL.$$.fragment,f),E(sL.$$.fragment,f),E(iL.$$.fragment,f),E(n9.$$.fragment,f),E(dL.$$.fragment,f),E(w9.$$.fragment,f),E(cL.$$.fragment,f),E(fL.$$.fragment,f),E(gL.$$.fragment,f),E(y9.$$.fragment,f),E(hL.$$.fragment,f),E(x9.$$.fragment,f),E(pL.$$.fragment,f),E(uL.$$.fragment,f),E(bL.$$.fragment,f),E(k9.$$.fragment,f),E(FL.$$.fragment,f),E(R9.$$.fragment,f),E(vL.$$.fragment,f),E(TL.$$.fragment,f),E(EL.$$.fragment,f),E(P9.$$.fragment,f),E(CL.$$.fragment,f),E(l4.$$.fragment,f),E(wL.$$.fragment,f),E(AL.$$.fragment,f),E(LL.$$.fragment,f),E(d4.$$.fragment,f),E(xL.$$.fragment,f),E(p4.$$.fragment,f),E($L.$$.fragment,f),E(kL.$$.fragment,f),E(RL.$$.fragment,f),E(_4.$$.fragment,f),E(BL.$$.fragment,f),E($4.$$.fragment,f),E(PL.$$.fragment,f),E(IL.$$.fragment,f),E(NL.$$.fragment,f),E(S4.$$.fragment,f),E(jL.$$.fragment,f),E(V4.$$.fragment,f),E(DL.$$.fragment,f),E(GL.$$.fragment,f),E(VL.$$.fragment,f),E(z4.$$.fragment,f),E(XL.$$.fragment,f),E(oE.$$.fragment,f),E(zL.$$.fragment,f),E(QL.$$.fragment,f),E(HL.$$.fragment,f),E(tE.$$.fragment,f),E(UL.$$.fragment,f),E(hE.$$.fragment,f),E(JL.$$.fragment,f),E(YL.$$.fragment,f),E(ZL.$$.fragment,f),E(uE.$$.fragment,f),E(e8.$$.fragment,f),E(yE.$$.fragment,f),E(o8.$$.fragment,f),E(r8.$$.fragment,f),E(a8.$$.fragment,f),E(xE.$$.fragment,f),E(n8.$$.fragment,f),E(NE.$$.fragment,f),E(s8.$$.fragment,f),E(l8.$$.fragment,f),E(d8.$$.fragment,f),E(DE.$$.fragment,f),E(c8.$$.fragment,f),E(UE.$$.fragment,f),E(f8.$$.fragment,f),E(m8.$$.fragment,f),E(h8.$$.fragment,f),E(YE.$$.fragment,f),E(p8.$$.fragment,f),E(ZE.$$.fragment,f),E(u8.$$.fragment,f),E(_8.$$.fragment,f),E(F8.$$.fragment,f),E(oC.$$.fragment,f),E(v8.$$.fragment,f),E(aC.$$.fragment,f),E(M8.$$.fragment,f),E(E8.$$.fragment,f),E(w8.$$.fragment,f),E(sC.$$.fragment,f),E(A8.$$.fragment,f),E(iC.$$.fragment,f),xSe=!0)},o(f){C(d.$$.fragment,f),C(ba.$$.fragment,f),C(yw.$$.fragment,f),C(Lw.$$.fragment,f),C(Yc.$$.fragment,f),C(xw.$$.fragment,f),C($w.$$.fragment,f),C(Rw.$$.fragment,f),C(Xm.$$.fragment,f),C(Bw.$$.fragment,f),C(Pw.$$.fragment,f),C(Iw.$$.fragment,f),C(jw.$$.fragment,f),C(Mg.$$.fragment,f),C(Dw.$$.fragment,f),C(Gw.$$.fragment,f),C(Ow.$$.fragment,f),C(zw.$$.fragment,f),C(Vg.$$.fragment,f),C(Xg.$$.fragment,f),C(Qw.$$.fragment,f),C(Ww.$$.fragment,f),C(Hw.$$.fragment,f),C(Yw.$$.fragment,f),C(oh.$$.fragment,f),C(rh.$$.fragment,f),C(Kw.$$.fragment,f),C(Zw.$$.fragment,f),C(eA.$$.fragment,f),C(rA.$$.fragment,f),C(nh.$$.fragment,f),C(tA.$$.fragment,f),C(Vp.$$.fragment,f),C(aA.$$.fragment,f),C(nA.$$.fragment,f),C(lA.$$.fragment,f),C(zp.$$.fragment,f),C(iA.$$.fragment,f),C(Su.$$.fragment,f),C(dA.$$.fragment,f),C(cA.$$.fragment,f),C(mA.$$.fragment,f),C(Bu.$$.fragment,f),C(gA.$$.fragment,f),C(__.$$.fragment,f),C(hA.$$.fragment,f),C(pA.$$.fragment,f),C(_A.$$.fragment,f),C(F_.$$.fragment,f),C(bA.$$.fragment,f),C(r2.$$.fragment,f),C(FA.$$.fragment,f),C(vA.$$.fragment,f),C(MA.$$.fragment,f),C(a2.$$.fragment,f),C(EA.$$.fragment,f),C(M2.$$.fragment,f),C(CA.$$.fragment,f),C(wA.$$.fragment,f),C(yA.$$.fragment,f),C(C2.$$.fragment,f),C(LA.$$.fragment,f),C(b1.$$.fragment,f),C(xA.$$.fragment,f),C($A.$$.fragment,f),C(SA.$$.fragment,f),C(v1.$$.fragment,f),C(RA.$$.fragment,f),C(J1.$$.fragment,f),C(BA.$$.fragment,f),C(PA.$$.fragment,f),C(qA.$$.fragment,f),C(K1.$$.fragment,f),C(NA.$$.fragment,f),C(nb.$$.fragment,f),C(jA.$$.fragment,f),C(DA.$$.fragment,f),C(OA.$$.fragment,f),C(lb.$$.fragment,f),C(VA.$$.fragment,f),C(Ob.$$.fragment,f),C(XA.$$.fragment,f),C(zA.$$.fragment,f),C(WA.$$.fragment,f),C(Xb.$$.fragment,f),C(HA.$$.fragment,f),C(k5.$$.fragment,f),C(UA.$$.fragment,f),C(JA.$$.fragment,f),C(KA.$$.fragment,f),C(R5.$$.fragment,f),C(ZA.$$.fragment,f),C(I5.$$.fragment,f),C(e0.$$.fragment,f),C(o0.$$.fragment,f),C(t0.$$.fragment,f),C(N5.$$.fragment,f),C(a0.$$.fragment,f),C(U5.$$.fragment,f),C(n0.$$.fragment,f),C(s0.$$.fragment,f),C(i0.$$.fragment,f),C(Y5.$$.fragment,f),C(d0.$$.fragment,f),C(eF.$$.fragment,f),C(c0.$$.fragment,f),C(f0.$$.fragment,f),C(g0.$$.fragment,f),C(rF.$$.fragment,f),C(h0.$$.fragment,f),C(mF.$$.fragment,f),C(p0.$$.fragment,f),C(u0.$$.fragment,f),C(b0.$$.fragment,f),C(hF.$$.fragment,f),C(F0.$$.fragment,f),C(vF.$$.fragment,f),C(v0.$$.fragment,f),C(T0.$$.fragment,f),C(E0.$$.fragment,f),C(MF.$$.fragment,f),C(C0.$$.fragment,f),C(SF.$$.fragment,f),C(w0.$$.fragment,f),C(A0.$$.fragment,f),C(L0.$$.fragment,f),C(BF.$$.fragment,f),C(x0.$$.fragment,f),C(NF.$$.fragment,f),C(k0.$$.fragment,f),C(S0.$$.fragment,f),C(B0.$$.fragment,f),C(DF.$$.fragment,f),C(P0.$$.fragment,f),C(QF.$$.fragment,f),C(I0.$$.fragment,f),C(q0.$$.fragment,f),C(j0.$$.fragment,f),C(HF.$$.fragment,f),C(D0.$$.fragment,f),C(ZF.$$.fragment,f),C(G0.$$.fragment,f),C(O0.$$.fragment,f),C(X0.$$.fragment,f),C(ov.$$.fragment,f),C(z0.$$.fragment,f),C(av.$$.fragment,f),C(Q0.$$.fragment,f),C(W0.$$.fragment,f),C(U0.$$.fragment,f),C(sv.$$.fragment,f),C(J0.$$.fragment,f),C(dv.$$.fragment,f),C(Y0.$$.fragment,f),C(K0.$$.fragment,f),C(ey.$$.fragment,f),C(fv.$$.fragment,f),C(oy.$$.fragment,f),C(pv.$$.fragment,f),C(ty.$$.fragment,f),C(ay.$$.fragment,f),C(sy.$$.fragment,f),C(_v.$$.fragment,f),C(ly.$$.fragment,f),C(vv.$$.fragment,f),C(iy.$$.fragment,f),C(dy.$$.fragment,f),C(fy.$$.fragment,f),C(Mv.$$.fragment,f),C(my.$$.fragment,f),C(c6.$$.fragment,f),C(gy.$$.fragment,f),C(hy.$$.fragment,f),C(uy.$$.fragment,f),C(m6.$$.fragment,f),C(_y.$$.fragment,f),C(P6.$$.fragment,f),C(by.$$.fragment,f),C(Fy.$$.fragment,f),C(Ty.$$.fragment,f),C(q6.$$.fragment,f),C(My.$$.fragment,f),C(U6.$$.fragment,f),C(Ey.$$.fragment,f),C(Cy.$$.fragment,f),C(Ay.$$.fragment,f),C(Y6.$$.fragment,f),C(yy.$$.fragment,f),C(eT.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Sy.$$.fragment,f),C(rT.$$.fragment,f),C(Ry.$$.fragment,f),C(ET.$$.fragment,f),C(By.$$.fragment,f),C(Py.$$.fragment,f),C(qy.$$.fragment,f),C(wT.$$.fragment,f),C(Ny.$$.fragment,f),C(IT.$$.fragment,f),C(jy.$$.fragment,f),C(Dy.$$.fragment,f),C(Oy.$$.fragment,f),C(NT.$$.fragment,f),C(Vy.$$.fragment,f),C(cM.$$.fragment,f),C(Xy.$$.fragment,f),C(zy.$$.fragment,f),C(Wy.$$.fragment,f),C(mM.$$.fragment,f),C(Hy.$$.fragment,f),C($M.$$.fragment,f),C(Uy.$$.fragment,f),C(Jy.$$.fragment,f),C(Ky.$$.fragment,f),C(SM.$$.fragment,f),C(Zy.$$.fragment,f),C(BM.$$.fragment,f),C(eL.$$.fragment,f),C(oL.$$.fragment,f),C(tL.$$.fragment,f),C(IM.$$.fragment,f),C(aL.$$.fragment,f),C(t9.$$.fragment,f),C(nL.$$.fragment,f),C(sL.$$.fragment,f),C(iL.$$.fragment,f),C(n9.$$.fragment,f),C(dL.$$.fragment,f),C(w9.$$.fragment,f),C(cL.$$.fragment,f),C(fL.$$.fragment,f),C(gL.$$.fragment,f),C(y9.$$.fragment,f),C(hL.$$.fragment,f),C(x9.$$.fragment,f),C(pL.$$.fragment,f),C(uL.$$.fragment,f),C(bL.$$.fragment,f),C(k9.$$.fragment,f),C(FL.$$.fragment,f),C(R9.$$.fragment,f),C(vL.$$.fragment,f),C(TL.$$.fragment,f),C(EL.$$.fragment,f),C(P9.$$.fragment,f),C(CL.$$.fragment,f),C(l4.$$.fragment,f),C(wL.$$.fragment,f),C(AL.$$.fragment,f),C(LL.$$.fragment,f),C(d4.$$.fragment,f),C(xL.$$.fragment,f),C(p4.$$.fragment,f),C($L.$$.fragment,f),C(kL.$$.fragment,f),C(RL.$$.fragment,f),C(_4.$$.fragment,f),C(BL.$$.fragment,f),C($4.$$.fragment,f),C(PL.$$.fragment,f),C(IL.$$.fragment,f),C(NL.$$.fragment,f),C(S4.$$.fragment,f),C(jL.$$.fragment,f),C(V4.$$.fragment,f),C(DL.$$.fragment,f),C(GL.$$.fragment,f),C(VL.$$.fragment,f),C(z4.$$.fragment,f),C(XL.$$.fragment,f),C(oE.$$.fragment,f),C(zL.$$.fragment,f),C(QL.$$.fragment,f),C(HL.$$.fragment,f),C(tE.$$.fragment,f),C(UL.$$.fragment,f),C(hE.$$.fragment,f),C(JL.$$.fragment,f),C(YL.$$.fragment,f),C(ZL.$$.fragment,f),C(uE.$$.fragment,f),C(e8.$$.fragment,f),C(yE.$$.fragment,f),C(o8.$$.fragment,f),C(r8.$$.fragment,f),C(a8.$$.fragment,f),C(xE.$$.fragment,f),C(n8.$$.fragment,f),C(NE.$$.fragment,f),C(s8.$$.fragment,f),C(l8.$$.fragment,f),C(d8.$$.fragment,f),C(DE.$$.fragment,f),C(c8.$$.fragment,f),C(UE.$$.fragment,f),C(f8.$$.fragment,f),C(m8.$$.fragment,f),C(h8.$$.fragment,f),C(YE.$$.fragment,f),C(p8.$$.fragment,f),C(ZE.$$.fragment,f),C(u8.$$.fragment,f),C(_8.$$.fragment,f),C(F8.$$.fragment,f),C(oC.$$.fragment,f),C(v8.$$.fragment,f),C(aC.$$.fragment,f),C(M8.$$.fragment,f),C(E8.$$.fragment,f),C(w8.$$.fragment,f),C(sC.$$.fragment,f),C(A8.$$.fragment,f),C(iC.$$.fragment,f),xSe=!1},d(f){t(g),f&&t(F),f&&t(p),w(d),f&&t(Qc),f&&t(Yr),f&&t(Be),f&&t(Ge),f&&t(Hc),w(ba,f),f&&t(Oe),f&&t(Me),f&&t(To),f&&t(Fa),f&&t(L$e),f&&t(Zl),w(yw),f&&t(x$e),f&&t(Cn),f&&t($$e),w(Lw,f),f&&t(k$e),f&&t(Ix),f&&t(S$e),w(Yc,f),f&&t(R$e),f&&t(ei),w(xw),f&&t(B$e),f&&t(Mo),w($w),w(Rw),w(Xm),w(Bw),f&&t(P$e),f&&t(ri),w(Pw),f&&t(I$e),f&&t(Eo),w(Iw),w(jw),w(Mg),w(Dw),f&&t(q$e),f&&t(ti),w(Gw),f&&t(N$e),f&&t(Co),w(Ow),w(zw),w(Vg),w(Xg),w(Qw),f&&t(j$e),f&&t(ai),w(Ww),f&&t(D$e),f&&t(wo),w(Hw),w(Yw),w(oh),w(rh),w(Kw),f&&t(G$e),f&&t(si),w(Zw),f&&t(O$e),f&&t(Ao),w(eA),w(rA),w(nh),w(tA),w(Vp),f&&t(V$e),f&&t(di),w(aA),f&&t(X$e),f&&t(yo),w(nA),w(lA),w(zp),w(iA),w(Su),f&&t(z$e),f&&t(mi),w(dA),f&&t(Q$e),f&&t(Lo),w(cA),w(mA),w(Bu),w(gA),w(__),f&&t(W$e),f&&t(pi),w(hA),f&&t(H$e),f&&t(xo),w(pA),w(_A),w(F_),w(bA),w(r2),f&&t(U$e),f&&t(bi),w(FA),f&&t(J$e),f&&t($o),w(vA),w(MA),w(a2),w(EA),w(M2),f&&t(Y$e),f&&t(Ti),w(CA),f&&t(K$e),f&&t(ko),w(wA),w(yA),w(C2),w(LA),w(b1),f&&t(Z$e),f&&t(Ci),w(xA),f&&t(eke),f&&t(So),w($A),w(SA),w(v1),w(RA),w(J1),f&&t(oke),f&&t(yi),w(BA),f&&t(rke),f&&t(Ro),w(PA),w(qA),w(K1),w(NA),w(nb),f&&t(tke),f&&t($i),w(jA),f&&t(ake),f&&t(Bo),w(DA),w(OA),w(lb),w(VA),w(Ob),f&&t(nke),f&&t(Ri),w(XA),f&&t(ske),f&&t(Po),w(zA),w(WA),w(Xb),w(HA),w(k5),f&&t(lke),f&&t(Ii),w(UA),f&&t(ike),f&&t(Io),w(JA),w(KA),w(R5),w(ZA),w(I5),f&&t(dke),f&&t(ji),w(e0),f&&t(cke),f&&t(qo),w(o0),w(t0),w(N5),w(a0),w(U5),f&&t(fke),f&&t(Oi),w(n0),f&&t(mke),f&&t(No),w(s0),w(i0),w(Y5),w(d0),w(eF),f&&t(gke),f&&t(zi),w(c0),f&&t(hke),f&&t(jo),w(f0),w(g0),w(rF),w(h0),w(mF),f&&t(pke),f&&t(Hi),w(p0),f&&t(uke),f&&t(Do),w(u0),w(b0),w(hF),w(F0),w(vF),f&&t(_ke),f&&t(Yi),w(v0),f&&t(bke),f&&t(Go),w(T0),w(E0),w(MF),w(C0),w(SF),f&&t(Fke),f&&t(ed),w(w0),f&&t(vke),f&&t(Oo),w(A0),w(L0),w(BF),w(x0),w(NF),f&&t(Tke),f&&t(td),w(k0),f&&t(Mke),f&&t(Vo),w(S0),w(B0),w(DF),w(P0),w(QF),f&&t(Eke),f&&t(sd),w(I0),f&&t(Cke),f&&t(Xo),w(q0),w(j0),w(HF),w(D0),w(ZF),f&&t(wke),f&&t(cd),w(G0),f&&t(Ake),f&&t(zo),w(O0),w(X0),w(ov),w(z0),w(av),f&&t(yke),f&&t(gd),w(Q0),f&&t(Lke),f&&t(Qo),w(W0),w(U0),w(sv),w(J0),w(dv),f&&t(xke),f&&t(ud),w(Y0),f&&t($ke),f&&t(Wo),w(K0),w(ey),w(fv),w(oy),w(pv),f&&t(kke),f&&t(Fd),w(ty),f&&t(Ske),f&&t(Ho),w(ay),w(sy),w(_v),w(ly),w(vv),f&&t(Rke),f&&t(Md),w(iy),f&&t(Bke),f&&t(Uo),w(dy),w(fy),w(Mv),w(my),w(c6),f&&t(Pke),f&&t(wd),w(gy),f&&t(Ike),f&&t(Jo),w(hy),w(uy),w(m6),w(_y),w(P6),f&&t(qke),f&&t(Ld),w(by),f&&t(Nke),f&&t(Yo),w(Fy),w(Ty),w(q6),w(My),w(U6),f&&t(jke),f&&t(kd),w(Ey),f&&t(Dke),f&&t(Ko),w(Cy),w(Ay),w(Y6),w(yy),w(eT),f&&t(Gke),f&&t(Bd),w(xy),f&&t(Oke),f&&t(Zo),w($y),w(Sy),w(rT),w(Ry),w(ET),f&&t(Vke),f&&t(qd),w(By),f&&t(Xke),f&&t(er),w(Py),w(qy),w(wT),w(Ny),w(IT),f&&t(zke),f&&t(Dd),w(jy),f&&t(Qke),f&&t(or),w(Dy),w(Oy),w(NT),w(Vy),w(cM),f&&t(Wke),f&&t(Vd),w(Xy),f&&t(Hke),f&&t(rr),w(zy),w(Wy),w(mM),w(Hy),w($M),f&&t(Uke),f&&t(Qd),w(Uy),f&&t(Jke),f&&t(tr),w(Jy),w(Ky),w(SM),w(Zy),w(BM),f&&t(Yke),f&&t(Ud),w(eL),f&&t(Kke),f&&t(ar),w(oL),w(tL),w(IM),w(aL),w(t9),f&&t(Zke),f&&t(Kd),w(nL),f&&t(eSe),f&&t(nr),w(sL),w(iL),w(n9),w(dL),w(w9),f&&t(oSe),f&&t(oc),w(cL),f&&t(rSe),f&&t(sr),w(fL),w(gL),w(y9),w(hL),w(x9),f&&t(tSe),f&&t(ac),w(pL),f&&t(aSe),f&&t(lr),w(uL),w(bL),w(k9),w(FL),w(R9),f&&t(nSe),f&&t(lc),w(vL),f&&t(sSe),f&&t(ir),w(TL),w(EL),w(P9),w(CL),w(l4),f&&t(lSe),f&&t(cc),w(wL),f&&t(iSe),f&&t(dr),w(AL),w(LL),w(d4),w(xL),w(p4),f&&t(dSe),f&&t(gc),w($L),f&&t(cSe),f&&t(cr),w(kL),w(RL),w(_4),w(BL),w($4),f&&t(fSe),f&&t(uc),w(PL),f&&t(mSe),f&&t(fr),w(IL),w(NL),w(S4),w(jL),w(V4),f&&t(gSe),f&&t(Fc),w(DL),f&&t(hSe),f&&t(mr),w(GL),w(VL),w(z4),w(XL),w(oE),f&&t(pSe),f&&t(Mc),w(zL),f&&t(uSe),f&&t(gr),w(QL),w(HL),w(tE),w(UL),w(hE),f&&t(_Se),f&&t(wc),w(JL),f&&t(bSe),f&&t(hr),w(YL),w(ZL),w(uE),w(e8),w(yE),f&&t(FSe),f&&t(Lc),w(o8),f&&t(vSe),f&&t(pr),w(r8),w(a8),w(xE),w(n8),w(NE),f&&t(TSe),f&&t(kc),w(s8),f&&t(MSe),f&&t(ur),w(l8),w(d8),w(DE),w(c8),w(UE),f&&t(ESe),f&&t(Bc),w(f8),f&&t(CSe),f&&t(_r),w(m8),w(h8),w(YE),w(p8),w(ZE),f&&t(wSe),f&&t(qc),w(u8),f&&t(ASe),f&&t(br),w(_8),w(F8),w(oC),w(v8),w(aC),f&&t(ySe),f&&t(Dc),w(M8),f&&t(LSe),f&&t(Fr),w(E8),w(w8),w(sC),w(A8),w(iC)}}}const D5t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function G5t(A){return V1t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class H5t extends j1t{constructor(g){super();D1t(this,g,G5t,j5t,G1t,{})}}export{H5t as default,D5t as metadata};
