import{S as hi,i as pi,s as fi,e as r,k as c,w as u,t as n,M as ui,c as s,d as o,m as l,a,x as g,h as i,b as d,F as e,g as h,y as _,q as k,o as F,B as v}from"../../chunks/vendor-4833417e.js";import{T as tn}from"../../chunks/Tip-fffd6df1.js";import{D as I}from"../../chunks/Docstring-44c5af16.js";import{C as on}from"../../chunks/CodeBlock-90ffda97.js";import{I as ht}from"../../chunks/IconCopyLink-4b81c553.js";import"../../chunks/CopyButton-04a16537.js";function gi(U){let p,T;return{c(){p=r("p"),T=n(`NumPy arrays and PyTorch tensors are converted to PIL images when resizing, so the most efficient is to pass
PIL images.`)},l(f){p=s(f,"P",{});var b=a(p);T=i(b,`NumPy arrays and PyTorch tensors are converted to PIL images when resizing, so the most efficient is to pass
PIL images.`),b.forEach(o)},m(f,b){h(f,p,b),e(p,T)},d(f){f&&o(p)}}}function _i(U){let p,T,f,b,z;return{c(){p=r("p"),T=n("Although the recipe for forward pass needs to be defined within this function, one should call the "),f=r("code"),b=n("Module"),z=n(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(M){p=s(M,"P",{});var y=a(p);T=i(y,"Although the recipe for forward pass needs to be defined within this function, one should call the "),f=s(y,"CODE",{});var j=a(f);b=i(j,"Module"),j.forEach(o),z=i(y,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),y.forEach(o)},m(M,y){h(M,p,y),e(p,T),e(p,f),e(f,b),e(p,z)},d(M){M&&o(p)}}}function ki(U){let p,T,f,b,z;return{c(){p=r("p"),T=n("Although the recipe for forward pass needs to be defined within this function, one should call the "),f=r("code"),b=n("Module"),z=n(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(M){p=s(M,"P",{});var y=a(p);T=i(y,"Although the recipe for forward pass needs to be defined within this function, one should call the "),f=s(y,"CODE",{});var j=a(f);b=i(j,"Module"),j.forEach(o),z=i(y,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),y.forEach(o)},m(M,y){h(M,p,y),e(p,T),e(p,f),e(f,b),e(p,z)},d(M){M&&o(p)}}}function Fi(U){let p,T,f,b,z,M,y,j,pr,bo,R,ae,Vt,xe,fr,Ut,ur,wo,ne,gr,Me,_r,kr,xo,pt,Fr,Mo,ft,Rt,vr,To,ut,br,yo,S,D,wr,Bt,xr,Mr,gt,Tr,yr,Kt,$r,Er,Ir,C,Or,Gt,Pr,zr,Qt,Cr,Sr,Yt,jr,Dr,Te,Ar,qr,Nr,ye,Lr,_t,Hr,Wr,Vr,B,Ur,kt,Rr,Br,Ft,Kr,Gr,$o,N,Qr,$e,Yr,Jr,Ee,Xr,Zr,Eo,K,ie,Jt,Ie,es,Xt,ts,Io,G,Oe,os,Pe,rs,vt,ss,as,Oo,A,ze,ns,Ce,is,bt,ds,cs,ls,Q,ms,wt,hs,ps,xt,fs,us,Po,Y,de,Zt,Se,gs,eo,_s,zo,w,je,ks,J,Fs,Mt,vs,bs,De,ws,xs,Ms,X,Ts,Tt,ys,$s,yt,Es,Is,Os,Ae,Ps,$t,zs,Cs,Ss,to,js,Ds,qe,As,ce,Ne,qs,Le,Ns,Et,Ls,Hs,Ws,le,He,Vs,We,Us,It,Rs,Bs,Co,Z,me,oo,Ve,Ks,ro,Gs,So,x,Ue,Qs,so,Ys,Js,Re,Xs,Ot,Zs,ea,ta,L,Be,oa,ao,ra,sa,he,aa,pe,Ke,na,Ge,ia,no,da,ca,la,fe,Qe,ma,Ye,ha,io,pa,fa,ua,ue,Je,ga,Xe,_a,co,ka,Fa,va,ge,Ze,ba,et,wa,lo,xa,Ma,jo,ee,_e,mo,tt,Ta,ho,ya,Do,q,ot,$a,rt,Ea,st,Ia,Oa,Pa,O,at,za,te,Ca,Pt,Sa,ja,po,Da,Aa,qa,ke,Na,fo,La,Ha,nt,Ao,oe,Fe,uo,it,Wa,go,Va,qo,re,dt,Ua,P,ct,Ra,se,Ba,zt,Ka,Ga,_o,Qa,Ya,Ja,ve,Xa,ko,Za,en,lt,No;return M=new ht({}),xe=new ht({}),Ie=new ht({}),Oe=new I({props:{name:"class transformers.models.maskformer.modeling_maskformer.MaskFormerModelOutput",anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerModelOutput",parameters:[{name:"encoder_last_hidden_state",val:": typing.Optional[torch.FloatTensor] = None"},{name:"pixel_decoder_last_hidden_state",val:": typing.Optional[torch.FloatTensor] = None"},{name:"transformer_decoder_last_hidden_state",val:": typing.Optional[torch.FloatTensor] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"pixel_decoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"transformer_decoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15682/src/transformers/models/maskformer/modeling_maskformer.py#L214",parametersDescription:[{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerModelOutput.encoder_last_hidden_state",description:`<strong>encoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Last hidden states (final feature map) of the last stage of the encoder model (backbone).`,name:"encoder_last_hidden_state"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerModelOutput.pixel_decoder_last_hidden_state",description:`<strong>pixel_decoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Last hidden states (final feature map) of the last stage of the pixel decoder model (FPN).`,name:"pixel_decoder_last_hidden_state"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerModelOutput.transformer_decoder_last_hidden_state",description:`<strong>transformer_decoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) &#x2014;
Last hidden states (final feature map) of the last stage of the transformer decoder model.`,name:"transformer_decoder_last_hidden_state"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerModelOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also called feature maps) of the encoder
model at the output of each stage.`,name:"encoder_hidden_states"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerModelOutput.pixel_decoder_hidden_states",description:`<strong>pixel_decoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also called feature maps) of the pixel
decoder model at the output of each stage.`,name:"pixel_decoder_hidden_states"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerModelOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states (also called feature maps) of the
transformer decoder at the output of each stage.`,name:"decoder_hidden_states"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerModelOutput.hidden_states",description:`<strong>hidden_states</strong> <code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> containing <code>encoder_hidden_states</code>, <code>pixel_decoder_hidden_states</code> and
<code>decoder_hidden_states</code>`,name:"hidden_states"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerModelOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights from Detr&#x2019;s decoder after the attention softmax, used to compute the
weighted average in the self-attention heads.`,name:"attentions"}]}}),ze=new I({props:{name:"class transformers.models.maskformer.modeling_maskformer.MaskFormerForInstanceSegmentationOutput",anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerForInstanceSegmentationOutput",parameters:[{name:"loss",val:": typing.Optional[torch.FloatTensor] = None"},{name:"class_queries_logits",val:": FloatTensor = None"},{name:"masks_queries_logits",val:": FloatTensor = None"},{name:"auxilary_logits",val:": FloatTensor = None"},{name:"encoder_last_hidden_state",val:": typing.Optional[torch.FloatTensor] = None"},{name:"pixel_decoder_last_hidden_state",val:": typing.Optional[torch.FloatTensor] = None"},{name:"transformer_decoder_last_hidden_state",val:": typing.Optional[torch.FloatTensor] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"pixel_decoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"transformer_decoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15682/src/transformers/models/maskformer/modeling_maskformer.py#L257",parametersDescription:[{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerForInstanceSegmentationOutput.loss",description:`<strong>loss</strong> (<code>torch.Tensor</code>, <em>optional</em>) &#x2014;
The computed loss, returned when labels are present.`,name:"loss"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerForInstanceSegmentationOutput.class_queries_logits",description:`<strong>class_queries_logits</strong> (<code>torch.FloatTensor</code>) &#x2014;
A tensor of shape <code>(batch_size, num_queries, height, width)</code> representing the proposed masks for each
query.`,name:"class_queries_logits"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerForInstanceSegmentationOutput.masks_queries_logits",description:`<strong>masks_queries_logits</strong> (<code>torch.FloatTensor</code>) &#x2014;
A tensor of shape <code>(batch_size, num_queries, num_classes + 1)</code> representing the proposed classes for each
query. Note the <code>+ 1</code> is needed because we incorporate the null class.`,name:"masks_queries_logits"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerForInstanceSegmentationOutput.encoder_last_hidden_state",description:`<strong>encoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Last hidden states (final feature map) of the last stage of the encoder model (backbone).`,name:"encoder_last_hidden_state"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerForInstanceSegmentationOutput.pixel_decoder_last_hidden_state",description:`<strong>pixel_decoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Last hidden states (final feature map) of the last stage of the pixel decoder model (FPN).`,name:"pixel_decoder_last_hidden_state"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerForInstanceSegmentationOutput.transformer_decoder_last_hidden_state",description:`<strong>transformer_decoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) &#x2014;
Last hidden states (final feature map) of the last stage of the transformer decoder model.`,name:"transformer_decoder_last_hidden_state"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerForInstanceSegmentationOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also called feature maps) of the encoder
model at the output of each stage.`,name:"encoder_hidden_states"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerForInstanceSegmentationOutput.pixel_decoder_hidden_states",description:`<strong>pixel_decoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also called feature maps) of the pixel
decoder model at the output of each stage.`,name:"pixel_decoder_hidden_states"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerForInstanceSegmentationOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states (also called feature maps) of the
transformer decoder at the output of each stage.`,name:"decoder_hidden_states"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerForInstanceSegmentationOutput.hidden_states",description:`<strong>hidden_states</strong> <code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> containing <code>encoder_hidden_states</code>, <code>pixel_decoder_hidden_states</code> and
<code>decoder_hidden_states</code>.`,name:"hidden_states"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerForInstanceSegmentationOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights from Detr&#x2019;s decoder after the attention softmax, used to compute the
weighted average in the self-attention heads.`,name:"attentions"}]}}),Se=new ht({}),je=new I({props:{name:"class transformers.MaskFormerConfig",anchor:"transformers.MaskFormerConfig",parameters:[{name:"fpn_feature_size",val:": int = 256"},{name:"mask_feature_size",val:": int = 256"},{name:"no_object_weight",val:": float = 0.1"},{name:"use_auxilary_loss",val:": bool = False"},{name:"backbone_config",val:": typing.Optional[typing.Dict] = None"},{name:"detr_config",val:": typing.Optional[typing.Dict] = None"},{name:"init_std",val:": float = 0.02"},{name:"init_xavier_std",val:": float = 1.0"},{name:"dice_weight",val:": float = 1.0"},{name:"cross_entropy_weight",val:": float = 1.0"},{name:"mask_weight",val:": float = 20.0"},{name:"num_labels",val:": int = 150"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15682/src/transformers/models/maskformer/configuration_maskformer.py#L34",parametersDescription:[{anchor:"transformers.MaskFormerConfig.mask_feature_size",description:`<strong>mask_feature_size</strong> (<code>int</code>, <em>optional</em>, defaults to 256) &#x2014;
The masks&#x2019; features size, this value will also be used to specify the Feature Pyramid Network features&#x2019;
size.`,name:"mask_feature_size"},{anchor:"transformers.MaskFormerConfig.no_object_weight",description:`<strong>no_object_weight</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
Weight to apply to the null (no object) class.`,name:"no_object_weight"},{anchor:"transformers.MaskFormerConfig.use_auxilary_loss",description:`<strong>use_auxilary_loss</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>true</code> <code>MaskFormerOutput</code> will contain the axusilary losses computed using the logits from each
decoder&#x2019;s stage.`,name:"use_auxilary_loss"},{anchor:"transformers.MaskFormerConfig.backbone_config",description:`<strong>backbone_config</strong> (<code>Dict</code>, <em>optional</em>) &#x2014;
The configuration passed to the backbone, if unset, the configuration corresponding to
<code>swin-base-patch4-window12-384</code> will be used.`,name:"backbone_config"},{anchor:"transformers.MaskFormerConfig.detr_config",description:`<strong>detr_config</strong> (<code>Dict</code>, <em>optional</em>) &#x2014;
The configuration passed to the Detr model, if unset the base config for <code>detr-resnet-50</code> will be used.`,name:"detr_config"},{anchor:"transformers.MaskFormerConfig.init_std",description:`<strong>init_std</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"init_std"},{anchor:"transformers.MaskFormerConfig.init_xavier_std",description:`<strong>init_xavier_std</strong> (<code>float</code>, <em>optional</em>, defaults to 1) &#x2014;
The scaling factor used for the Xavier initialization gain in the HM Attention map module.`,name:"init_xavier_std"},{anchor:"transformers.MaskFormerConfig.dice_weight",description:`<strong>dice_weight</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
The weight for the dice loss.`,name:"dice_weight"},{anchor:"transformers.MaskFormerConfig.cross_entropy_weight",description:`<strong>cross_entropy_weight</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
The weight for the cross entropy loss.`,name:"cross_entropy_weight"},{anchor:"transformers.MaskFormerConfig.mask_weight",description:`<strong>mask_weight</strong> (<code>float</code>, <em>optional</em>, defaults to 20.0) &#x2014;
The weight for the mask loss.`,name:"mask_weight"},{anchor:"transformers.MaskFormerConfig.num_labels",description:`<strong>num_labels</strong> (<code>int</code>, <em>optional</em>, defaults to 150) &#x2014;
The number of labels.`,name:"num_labels"}]}}),qe=new on({props:{code:`from transformers import MaskFormerConfig, MaskFormerModel

# Initializing a MaskFormer facebook/maskformer-swin-base-ade configuration
configuration = MaskFormerConfig()

# Initializing a model from the facebook/maskformer-swin-base-ade style configuration
model = MaskFormerModel(configuration)

# Accessing the model configuration
configuration = model.config,`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MaskFormerConfig, MaskFormerModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a MaskFormer facebook/maskformer-swin-base-ade configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = MaskFormerConfig()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a model from the facebook/maskformer-swin-base-ade style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = MaskFormerModel(configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`}}),Ne=new I({props:{name:"from_backbone_and_detr_configs",anchor:"transformers.MaskFormerConfig.from_backbone_and_detr_configs",parameters:[{name:"backbone_config",val:": PretrainedConfig"},{name:"detr_config",val:": DetrConfig"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15682/src/transformers/models/maskformer/configuration_maskformer.py#L154",parametersDescription:[{anchor:"transformers.MaskFormerConfig.from_backbone_and_detr_configs.backbone_config",description:`<strong>backbone_config</strong> (<a href="/docs/transformers/pr_15682/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The backbone configuration.`,name:"backbone_config"},{anchor:"transformers.MaskFormerConfig.from_backbone_and_detr_configs.detr_config",description:`<strong>detr_config</strong> (<a href="/docs/transformers/pr_15682/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a>) &#x2014;
The transformer decoder configuration to use.`,name:"detr_config"}],returnDescription:`
<p>An instance of a configuration object</p>
`,returnType:`
<p><a
  href="/docs/transformers/pr_15682/en/model_doc/maskformer#transformers.MaskFormerConfig"
>MaskFormerConfig</a></p>
`}}),He=new I({props:{name:"to_dict",anchor:"transformers.MaskFormerConfig.to_dict",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15682/src/transformers/models/maskformer/configuration_maskformer.py#L170",returnDescription:`
<p>Dictionary of all the attributes that make up this configuration instance,</p>
`,returnType:`
<p><code>Dict[str, any]</code></p>
`}}),Ve=new ht({}),Ue=new I({props:{name:"class transformers.MaskFormerFeatureExtractor",anchor:"transformers.MaskFormerFeatureExtractor",parameters:[{name:"do_resize",val:" = True"},{name:"size",val:" = 800"},{name:"max_size",val:" = 1333"},{name:"size_divisibility",val:" = 32"},{name:"do_normalize",val:" = True"},{name:"image_mean",val:" = None"},{name:"image_std",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15682/src/transformers/models/maskformer/feature_extraction_maskformer.py#L39",parametersDescription:[{anchor:"transformers.MaskFormerFeatureExtractor.do_resize",description:`<strong>do_resize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to resize the input to a certain <code>size</code>.`,name:"do_resize"},{anchor:"transformers.MaskFormerFeatureExtractor.size",description:`<strong>size</strong> (<code>int</code>, <em>optional</em>, defaults to 800) &#x2014;
Resize the input to the given size. Only has an effect if <code>do_resize</code> is set to <code>True</code>. If size is a
sequence like <code>(width, height)</code>, output size will be matched to this. If size is an int, smaller edge of
the image will be matched to this number. i.e, if <code>height &gt; width</code>, then image will be rescaled to <code>(size * height / width, size)</code>.`,name:"size"},{anchor:"transformers.MaskFormerFeatureExtractor.max_size",description:`<strong>max_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1333) &#x2014;
The largest size an image dimension can have (otherwise it&#x2019;s capped). Only has an effect if <code>do_resize</code> is
set to <code>True</code>.`,name:"max_size"},{anchor:"transformers.MaskFormerFeatureExtractor.size_divisibility",description:`<strong>size_divisibility</strong> (<code>int</code>, <em>optional</em>, defaults to 32) &#x2014;
Some backbones need images divisible by a certain number, if not passes it detauls to the value used in
swin.`,name:"size_divisibility"},{anchor:"transformers.MaskFormerFeatureExtractor.do_normalize",description:`<strong>do_normalize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to normalize the input with mean and standard deviation.`,name:"do_normalize"},{anchor:"transformers.MaskFormerFeatureExtractor.image_mean",description:`<strong>image_mean</strong> (<code>int</code>, <em>optional</em>, defaults to <code>[0.485, 0.456, 0.406]</code>) &#x2014;
The sequence of means for each channel, to be used when normalizing images. Defaults to the ImageNet mean.`,name:"image_mean"},{anchor:"transformers.MaskFormerFeatureExtractor.image_std",description:`<strong>image_std</strong> (<code>int</code>, <em>optional</em>, defaults to <code>[0.229, 0.224, 0.225]</code>) &#x2014;
The sequence of standard deviations for each channel, to be used when normalizing images. Defaults to the
ImageNet std.`,name:"image_std"}]}}),Be=new I({props:{name:"__call__",anchor:"transformers.MaskFormerFeatureExtractor.__call__",parameters:[{name:"images",val:": typing.Union[PIL.Image.Image, numpy.ndarray, ForwardRef('torch.Tensor'), typing.List[PIL.Image.Image], typing.List[numpy.ndarray], typing.List[ForwardRef('torch.Tensor')]]"},{name:"annotations",val:": typing.Union[typing.List[typing.Dict], typing.List[typing.List[typing.Dict]]] = None"},{name:"pad_and_return_pixel_mask",val:": typing.Optional[bool] = True"},{name:"return_tensors",val:": typing.Union[str, transformers.file_utils.TensorType, NoneType] = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15682/src/transformers/models/maskformer/feature_extraction_maskformer.py#L167",parametersDescription:[{anchor:"transformers.MaskFormerFeatureExtractor.__call__.images",description:`<strong>images</strong> (<code>PIL.Image.Image</code>, <code>np.ndarray</code>, <code>torch.Tensor</code>, <code>List[PIL.Image.Image]</code>, <code>List[np.ndarray]</code>, <code>List[torch.Tensor]</code>) &#x2014;
The image or batch of images to be prepared. Each image can be a PIL image, NumPy array or PyTorch
tensor. In case of a NumPy array/PyTorch tensor, each image should be of shape (C, H, W), where C is a
number of channels, H and W are image height and width.`,name:"images"},{anchor:"transformers.MaskFormerFeatureExtractor.__call__.annotations",description:`<strong>annotations</strong> (<code>Dict</code>, <code>List[Dict]</code>, <em>optional</em>) &#x2014;
The corresponding annotations as dictionary of numpy arrays with the following keys:</p>
<ul>
<li><strong>masks</strong> (<code>np.ndarray</code>) The target mask of shape <code>(num_classes, height, width)</code>.</li>
<li><strong>labels</strong> (<code>np.ndarray</code>) The target labels of shape <code>(num_classes)</code>.</li>
</ul>`,name:"annotations"},{anchor:"transformers.MaskFormerFeatureExtractor.__call__.pad_and_return_pixel_mask",description:`<strong>pad_and_return_pixel_mask</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to pad images up to the largest image in a batch and create a pixel mask.</p>
<p>If left to the default, will return a pixel mask that is:</p>
<ul>
<li>1 for pixels that are real (i.e. <strong>not masked</strong>),</li>
<li>0 for pixels that are padding (i.e. <strong>masked</strong>).</li>
</ul>`,name:"pad_and_return_pixel_mask"},{anchor:"transformers.MaskFormerFeatureExtractor.__call__.return_tensors",description:`<strong>return_tensors</strong> (<code>str</code> or <a href="/docs/transformers/pr_15682/en/internal/file_utils#transformers.TensorType">TensorType</a>, <em>optional</em>) &#x2014;
If set, will return tensors instead of NumPy arrays. If set to <code>&apos;pt&apos;</code>, return PyTorch <code>torch.Tensor</code>
objects.`,name:"return_tensors"}],returnDescription:`
<p>A <a
  href="/docs/transformers/pr_15682/en/main_classes/feature_extractor#transformers.BatchFeature"
>BatchFeature</a> with the following fields:</p>
<ul>
<li><strong>pixel_values</strong> \u2014 Pixel values to be fed to a model.</li>
<li><strong>pixel_mask</strong> \u2014 Pixel mask to be fed to a model (when <code>pad_and_return_pixel_mask=True</code> or if
<code>"pixel_mask"</code> is in <code>self.model_input_names</code>).</li>
<li><strong>labels</strong> \u2014 Optional labels to be fed to a model (when <code>annotations</code> are provided)</li>
</ul>
`}}),he=new tn({props:{warning:"&lcub;true}",$$slots:{default:[gi]},$$scope:{ctx:U}}}),Ke=new I({props:{name:"encode_inputs",anchor:"transformers.MaskFormerFeatureExtractor.encode_inputs",parameters:[{name:"pixel_values_list",val:": typing.List[ForwardRef('torch.Tensor')]"},{name:"annotations",val:": typing.Optional[typing.List[typing.Dict]] = None"},{name:"pad_and_return_pixel_mask",val:": typing.Optional[bool] = True"},{name:"return_tensors",val:": typing.Union[str, transformers.file_utils.TensorType, NoneType] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15682/src/transformers/models/maskformer/feature_extraction_maskformer.py#L304",parametersDescription:[{anchor:"transformers.MaskFormerFeatureExtractor.encode_inputs.pixel_values_list",description:`<strong>pixel_values_list</strong> (<code>List[torch.Tensor]</code>) &#x2014;
List of images (pixel values) to be padded. Each image should be a tensor of shape <code>(channels, height, width)</code>.`,name:"pixel_values_list"},{anchor:"transformers.MaskFormerFeatureExtractor.encode_inputs.return_tensors",description:`<strong>return_tensors</strong> (<code>str</code> or <a href="/docs/transformers/pr_15682/en/internal/file_utils#transformers.TensorType">TensorType</a>, <em>optional</em>) &#x2014;
If set, will return tensors instead of NumPy arrays. If set to <code>&apos;pt&apos;</code>, return PyTorch <code>torch.Tensor</code>
objects.`,name:"return_tensors"}],returnDescription:`
<p>A <a
  href="/docs/transformers/pr_15682/en/main_classes/feature_extractor#transformers.BatchFeature"
>BatchFeature</a> with the following fields:</p>
<ul>
<li><strong>pixel_values</strong> \u2014 Pixel values to be fed to a model.</li>
<li><strong>pixel_mask</strong> \u2014 Pixel mask to be fed to a model (when <code>pad_and_return_pixel_mask=True</code> or if
<em>\u201Cpixel_mask\u201D</em> is in <code>self.model_input_names</code>).</li>
<li><strong>mask_labels</strong> \u2014 Optional mask labels of shape <code>(batch_size, num_classes, height, width) to be fed to a model (when </code>annotations\` are provided).</li>
<li><strong>class_labels</strong> \u2014 Optional class labels of shape <code>(batch_size, num_classes) to be fed to a model (when </code>annotations\` are provided).</li>
</ul>
`}}),Qe=new I({props:{name:"post_process_segmentation",anchor:"transformers.MaskFormerFeatureExtractor.post_process_segmentation",parameters:[{name:"outputs",val:": MaskFormerForInstanceSegmentationOutput"},{name:"target_size",val:": typing.Tuple[int, int] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15682/src/transformers/models/maskformer/feature_extraction_maskformer.py#L375",parametersDescription:[{anchor:"transformers.MaskFormerFeatureExtractor.post_process_segmentation.outputs",description:`<strong>outputs</strong> (<code>MaskFormerForInstanceSegmentationOutput</code>) &#x2014;
The outputs from <a href="/docs/transformers/pr_15682/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a>.`,name:"outputs"}],returnDescription:`
<p>A tensor of shape (<code>batch_size, num_labels, height, width</code>).</p>
`,returnType:`
<p><code>torch.Tensor</code></p>
`}}),Je=new I({props:{name:"post_process_semantic_segmentation",anchor:"transformers.MaskFormerFeatureExtractor.post_process_semantic_segmentation",parameters:[{name:"outputs",val:": MaskFormerForInstanceSegmentationOutput"},{name:"target_size",val:": typing.Tuple[int, int] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15682/src/transformers/models/maskformer/feature_extraction_maskformer.py#L443",parametersDescription:[{anchor:"transformers.MaskFormerFeatureExtractor.post_process_semantic_segmentation.outputs",description:`<strong>outputs</strong> (<code>MaskFormerForInstanceSegmentationOutput</code>) &#x2014;
The outputs from <a href="/docs/transformers/pr_15682/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a>.`,name:"outputs"}],returnDescription:`
<p>A tensor of shape <code>batch_size, height, width</code>.</p>
`,returnType:`
<p><code>torch.Tensor</code></p>
`}}),Ze=new I({props:{name:"post_process_panoptic_segmentation",anchor:"transformers.MaskFormerFeatureExtractor.post_process_panoptic_segmentation",parameters:[{name:"outputs",val:": MaskFormerForInstanceSegmentationOutput"},{name:"object_mask_threshold",val:": float = 0.8"},{name:"overlap_mask_area_threshold",val:": float = 0.8"},{name:"is_thing_map",val:": typing.Union[typing.Dict[int, bool], NoneType] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15682/src/transformers/models/maskformer/feature_extraction_maskformer.py#L461",parametersDescription:[{anchor:"transformers.MaskFormerFeatureExtractor.post_process_panoptic_segmentation.outputs",description:`<strong>outputs</strong> (<code>MaskFormerForInstanceSegmentationOutput</code>) &#x2014;
The outputs from <a href="/docs/transformers/pr_15682/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a>.`,name:"outputs"},{anchor:"transformers.MaskFormerFeatureExtractor.post_process_panoptic_segmentation.object_mask_threshold",description:`<strong>object_mask_threshold</strong> (<code>float</code>, <em>optional</em>, defaults to 0.8) &#x2014;
The object mask threshold.`,name:"object_mask_threshold"},{anchor:"transformers.MaskFormerFeatureExtractor.post_process_panoptic_segmentation.overlap_mask_area_threshold",description:`<strong>overlap_mask_area_threshold</strong> (<code>float</code>, <em>optional</em>, defaults to 0.8) &#x2014;
The overlap mask area threshold.`,name:"overlap_mask_area_threshold"},{anchor:"transformers.MaskFormerFeatureExtractor.post_process_panoptic_segmentation.is_thing_map",description:`<strong>is_thing_map</strong> (<code>Dict[int, bool]</code>, <em>optional</em>) &#x2014;
Dictionary mapping class indices to either <code>True</code> or <code>False</code>, depending on whether or not they are a
thing. If not set, defaults to the <code>is_thing_map</code> of COCO panoptic.`,name:"is_thing_map"}],returnDescription:`
<p>A list of dictionaries, one per image, each dictionary containing two keys:</p>
<ul>
<li><strong>segmentation</strong> \u2014 a tensor of shape <code>(height, width)</code> where each pixel represent a <code>segment_id</code>.</li>
<li><strong>segments</strong> \u2014 a dictionary with the following keys<ul>
<li><strong>id</strong> \u2014 an integer representing the <code>segment_id</code>.</li>
<li><strong>category_id</strong> \u2014 an integer representing the segment\u2019s label.</li>
<li><strong>is_thing</strong> \u2014 a boolean, <code>True</code> if <code>category_id</code> was in <code>is_thing_map</code>, <code>False</code> otherwise.</li>
</ul></li>
</ul>
`}}),tt=new ht({}),ot=new I({props:{name:"class transformers.MaskFormerModel",anchor:"transformers.MaskFormerModel",parameters:[{name:"config",val:": MaskFormerConfig"}],source:"https://github.com/huggingface/transformers/blob/pr_15682/src/transformers/models/maskformer/modeling_maskformer.py#L2258",parametersDescription:[{anchor:"transformers.MaskFormerModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15682/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_15682/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),at=new I({props:{name:"forward",anchor:"transformers.MaskFormerModel.forward",parameters:[{name:"pixel_values",val:": Tensor"},{name:"pixel_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15682/src/transformers/models/maskformer/modeling_maskformer.py#L2268",parametersDescription:[{anchor:"transformers.MaskFormerModel.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_15682/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See
<code>AutoFeatureExtractor.__call__()</code>for details.`,name:"pixel_values"},{anchor:"transformers.MaskFormerModel.forward.pixel_mask",description:`<strong>pixel_mask</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, height, width)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding pixel values. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for pixels that are real (i.e. <strong>not masked</strong>),</li>
<li>0 for pixels that are padding (i.e. <strong>masked</strong>).</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"pixel_mask"},{anchor:"transformers.MaskFormerModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.MaskFormerModel.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of Detr&#x2019;s decoder attention layers.`,name:"output_attentions"},{anchor:"transformers.MaskFormerModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <code>~MaskFormerModelOutput</code> instead of a plain tuple.`,name:"return_dict"}],returnDescription:`
<p>A <a
  href="/docs/transformers/pr_15682/en/model_doc/maskformer#transformers.models.maskformer.modeling_maskformer.MaskFormerModelOutput"
>transformers.models.maskformer.modeling_maskformer.MaskFormerModelOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_15682/en/model_doc/maskformer#transformers.MaskFormerConfig"
>MaskFormerConfig</a>) and inputs.</p>
<ul>
<li><strong>encoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) \u2014 Last hidden states (final feature map) of the last stage of the encoder model (backbone).</li>
<li><strong>pixel_decoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) \u2014 Last hidden states (final feature map) of the last stage of the pixel decoder model (FPN).</li>
<li><strong>transformer_decoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) \u2014 Last hidden states (final feature map) of the last stage of the transformer decoder model.</li>
<li><strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also called feature maps) of the encoder
model at the output of each stage.</li>
<li><strong>pixel_decoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also called feature maps) of the pixel
decoder model at the output of each stage.</li>
<li><strong>decoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states (also called feature maps) of the
transformer decoder at the output of each stage.</li>
<li><strong>hidden_states</strong> <code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> containing <code>encoder_hidden_states</code>, <code>pixel_decoder_hidden_states</code> and
<code>decoder_hidden_states</code></li>
<li><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights from Detr\u2019s decoder after the attention softmax, used to compute the
weighted average in the self-attention heads.</li>
</ul>
`}}),ke=new tn({props:{$$slots:{default:[_i]},$$scope:{ctx:U}}}),nt=new on({props:{code:`from transformers import MaskFormerFeatureExtractor, MaskFormerModel
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = MaskFormerFeatureExtractor.from_pretrained("facebook/maskformer-swin-base-ade")
model = MaskFormerModel.from_pretrained("facebook/maskformer-swin-base-ade")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state
list(last_hidden_states.shape)
,`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MaskFormerFeatureExtractor, MaskFormerModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = MaskFormerFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/maskformer-swin-base-ade&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = MaskFormerModel.from_pretrained(<span class="hljs-string">&quot;facebook/maskformer-swin-base-ade&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(last_hidden_states.shape)
`}}),it=new ht({}),dt=new I({props:{name:"class transformers.MaskFormerForInstanceSegmentation",anchor:"transformers.MaskFormerForInstanceSegmentation",parameters:[{name:"config",val:": MaskFormerConfig"}],source:"https://github.com/huggingface/transformers/blob/pr_15682/src/transformers/models/maskformer/modeling_maskformer.py#L2330"}}),ct=new I({props:{name:"forward",anchor:"transformers.MaskFormerForInstanceSegmentation.forward",parameters:[{name:"pixel_values",val:": Tensor"},{name:"mask_labels",val:": typing.Optional[torch.Tensor] = None"},{name:"class_labels",val:": typing.Optional[torch.Tensor] = None"},{name:"pixel_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15682/src/transformers/models/maskformer/modeling_maskformer.py#L2407",parametersDescription:[{anchor:"transformers.MaskFormerForInstanceSegmentation.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_15682/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See
<code>AutoFeatureExtractor.__call__()</code>for details.`,name:"pixel_values"},{anchor:"transformers.MaskFormerForInstanceSegmentation.forward.pixel_mask",description:`<strong>pixel_mask</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, height, width)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding pixel values. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for pixels that are real (i.e. <strong>not masked</strong>),</li>
<li>0 for pixels that are padding (i.e. <strong>masked</strong>).</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"pixel_mask"},{anchor:"transformers.MaskFormerForInstanceSegmentation.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.MaskFormerForInstanceSegmentation.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of Detr&#x2019;s decoder attention layers.`,name:"output_attentions"},{anchor:"transformers.MaskFormerForInstanceSegmentation.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <code>~MaskFormerModelOutput</code> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.MaskFormerForInstanceSegmentation.forward.mask_labels",description:`<strong>mask_labels</strong> (<code>torch.FloatTensor</code>, <em>optional</em>) &#x2014;
The target mask of shape <code>(num_classes, height, width)</code>.`,name:"mask_labels"},{anchor:"transformers.MaskFormerForInstanceSegmentation.forward.class_labels",description:`<strong>class_labels</strong> (<code>torch.LongTensor</code>, <em>optional</em>) &#x2014;
The target labels of shape <code>(num_classes)</code>.`,name:"class_labels"}],returnDescription:`
<p>A <a
  href="/docs/transformers/pr_15682/en/model_doc/maskformer#transformers.models.maskformer.modeling_maskformer.MaskFormerForInstanceSegmentationOutput"
>transformers.models.maskformer.modeling_maskformer.MaskFormerForInstanceSegmentationOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_15682/en/model_doc/maskformer#transformers.MaskFormerConfig"
>MaskFormerConfig</a>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<code>torch.Tensor</code>, <em>optional</em>) \u2014 The computed loss, returned when labels are present.</li>
<li><strong>class_queries_logits</strong> (<code>torch.FloatTensor</code>) \u2014 A tensor of shape <code>(batch_size, num_queries, height, width)</code> representing the proposed masks for each
query.</li>
<li><strong>masks_queries_logits</strong> (<code>torch.FloatTensor</code>) \u2014 A tensor of shape <code>(batch_size, num_queries, num_classes + 1)</code> representing the proposed classes for each
query. Note the <code>+ 1</code> is needed because we incorporate the null class.</li>
<li><strong>encoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) \u2014 Last hidden states (final feature map) of the last stage of the encoder model (backbone).</li>
<li><strong>pixel_decoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) \u2014 Last hidden states (final feature map) of the last stage of the pixel decoder model (FPN).</li>
<li><strong>transformer_decoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) \u2014 Last hidden states (final feature map) of the last stage of the transformer decoder model.</li>
<li><strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also called feature maps) of the encoder
model at the output of each stage.</li>
<li><strong>pixel_decoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also called feature maps) of the pixel
decoder model at the output of each stage.</li>
<li><strong>decoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states (also called feature maps) of the
transformer decoder at the output of each stage.</li>
<li><strong>hidden_states</strong> <code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> containing <code>encoder_hidden_states</code>, <code>pixel_decoder_hidden_states</code> and
<code>decoder_hidden_states</code>.</li>
<li><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights from Detr\u2019s decoder after the attention softmax, used to compute the
weighted average in the self-attention heads.</li>
</ul>
`}}),ve=new tn({props:{$$slots:{default:[ki]},$$scope:{ctx:U}}}),lt=new on({props:{code:`from transformers import MaskFormerFeatureExtractor, MaskFormerForInstanceSegmentation
from PIL import Image
import requests

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)
feature_extractor = MaskFormerFeatureExtractor.from_pretrained("facebook/maskformer-swin-base-ade")
inputs = feature_extractor(images=image, return_tensors="pt")

model = MaskFormerForInstanceSegmentation.from_pretrained("facebook/maskformer-swin-base-ade")
outputs = model(**inputs)
# model predicts class_queries_logits of shape \`(batch_size, num_queries)\`
# and masks_queries_logits of shape \`(batch_size, num_queries, height, width)\`
class_queries_logits = outputs.class_queries_logits
masks_queries_logits = outputs.masks_queries_logits

# you can pass them to feature_extractor for postprocessing
output = feature_extractor.post_process_segmentation(outputs)
output = feature_extractor.post_process_semantic_segmentation(outputs)

output = feature_extractor.post_process_panoptic_segmentation(outputs),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MaskFormerFeatureExtractor, MaskFormerForInstanceSegmentation
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = MaskFormerFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/maskformer-swin-base-ade&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(images=image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>model = MaskFormerForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;facebook/maskformer-swin-base-ade&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts class_queries_logits of shape \`(batch_size, num_queries)\`</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># and masks_queries_logits of shape \`(batch_size, num_queries, height, width)\`</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>class_queries_logits = outputs.class_queries_logits
<span class="hljs-meta">&gt;&gt;&gt; </span>masks_queries_logits = outputs.masks_queries_logits

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># you can pass them to feature_extractor for postprocessing</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>output = feature_extractor.post_process_segmentation(outputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>output = feature_extractor.post_process_semantic_segmentation(outputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>output = feature_extractor.post_process_panoptic_segmentation(outputs)`}}),{c(){p=r("meta"),T=c(),f=r("h1"),b=r("a"),z=r("span"),u(M.$$.fragment),y=c(),j=r("span"),pr=n("MaskFormer"),bo=c(),R=r("h2"),ae=r("a"),Vt=r("span"),u(xe.$$.fragment),fr=c(),Ut=r("span"),ur=n("Overview"),wo=c(),ne=r("p"),gr=n("The MaskFormer model was proposed in "),Me=r("a"),_r=n("Per-Pixel Classification is Not All You Need for Semantic Segmentation"),kr=n(" by Bowen Cheng, Alexander G. Schwing, Alexander Kirillov. MaskFormer addresses semantic segmentation with a mask classification paradigm instead of performing classic pixel-level classification."),xo=c(),pt=r("p"),Fr=n("The abstract from the paper is the following:"),Mo=c(),ft=r("p"),Rt=r("em"),vr=n("Modern approaches typically formulate semantic segmentation as a per-pixel classification task, while instance-level segmentation is handled with an alternative mask classification. Our key insight: mask classification is sufficiently general to solve both semantic- and instance-level segmentation tasks in a unified manner using the exact same model, loss, and training procedure. Following this observation, we propose MaskFormer, a simple mask classification model which predicts a set of binary masks, each associated with a single global class label prediction. Overall, the proposed mask classification-based method simplifies the landscape of effective approaches to semantic and panoptic segmentation tasks and shows excellent empirical results. In particular, we observe that MaskFormer outperforms per-pixel classification baselines when the number of classes is large. Our mask classification-based method outperforms both current state-of-the-art semantic (55.6 mIoU on ADE20K) and panoptic segmentation (52.7 PQ on COCO) models."),To=c(),ut=r("p"),br=n("Tips:"),yo=c(),S=r("ul"),D=r("li"),wr=n(`During training, the authors of DETR did find it helpful to use auxiliary losses in the decoder, especially to help
the model output the correct number of objects of each class. If you set the parameter `),Bt=r("code"),xr=n("use_auxilary_loss"),Mr=n(` of
`),gt=r("a"),Tr=n("MaskFormerConfig"),yr=n(" to "),Kt=r("code"),$r=n("True"),Er=n(`, then prediction feedforward neural networks and Hungarian losses
are added after each decoder layer (with the FFNs sharing parameters).`),Ir=c(),C=r("li"),Or=n(`If you want to train the model in a distributed environment across multiple nodes, then one should update the
`),Gt=r("code"),Pr=n("get_num_masks"),zr=n(" function inside in the "),Qt=r("code"),Cr=n("MaskFormerLoss"),Sr=n(" class of "),Yt=r("code"),jr=n("modeling_maskformer.py"),Dr=n(`. When training on multiple nodes, this should be
set to the average number of target masks across all nodes, as can be seen in the original implementation `),Te=r("a"),Ar=n("here"),qr=n("."),Nr=c(),ye=r("li"),Lr=n("One can use "),_t=r("a"),Hr=n("MaskFormerFeatureExtractor"),Wr=n(" to prepare images for the model."),Vr=c(),B=r("li"),Ur=n("To get the final segmentation, depending on the task, you can call "),kt=r("a"),Rr=n("post_process_semantic_segmentation()"),Br=n(" or "),Ft=r("a"),Kr=n("post_process_panoptic_segmentation()"),Gr=n("."),$o=c(),N=r("p"),Qr=n("This model was contributed by "),$e=r("a"),Yr=n("francesco"),Jr=n(". The original code can be found "),Ee=r("a"),Xr=n("here"),Zr=n("."),Eo=c(),K=r("h2"),ie=r("a"),Jt=r("span"),u(Ie.$$.fragment),es=c(),Xt=r("span"),ts=n("MaskFormer specific outputs"),Io=c(),G=r("div"),u(Oe.$$.fragment),os=c(),Pe=r("p"),rs=n("Class for outputs of "),vt=r("a"),ss=n("MaskFormerModel"),as=n(". This class returns all the needed hidden states to compute the logits."),Oo=c(),A=r("div"),u(ze.$$.fragment),ns=c(),Ce=r("p"),is=n("Class for outputs of "),bt=r("a"),ds=n("MaskFormerForInstanceSegmentation"),cs=n("."),ls=c(),Q=r("p"),ms=n("This output can be directly passed to "),wt=r("a"),hs=n("post_process_segmentation()"),ps=n(` or
`),xt=r("a"),fs=n("post_process_panoptic_segmentation()"),us=n(" depending on the task. Please, see\n[`~MaskFormerFeatureExtractor] for details regarding usage."),Po=c(),Y=r("h2"),de=r("a"),Zt=r("span"),u(Se.$$.fragment),gs=c(),eo=r("span"),_s=n("MaskFormerConfig"),zo=c(),w=r("div"),u(je.$$.fragment),ks=c(),J=r("p"),Fs=n("This is the configuration class to store the configuration of a "),Mt=r("a"),vs=n("MaskFormerModel"),bs=n(`. It is used to instantiate a
MaskFormer model according to the specified arguments, defining the model architecture. Instantiating a
configuration with the defaults will yield a similar configuration to that of the
\u201CFrancesco/maskformer-swin-base-ade\u201D architecture trained on
`),De=r("a"),ws=n("ADE20k-150"),xs=n("."),Ms=c(),X=r("p"),Ts=n("Configuration objects inherit from "),Tt=r("a"),ys=n("PretrainedConfig"),$s=n(` and can be used to control the model outputs. Read the
documentation from `),yt=r("a"),Es=n("PretrainedConfig"),Is=n(" for more information."),Os=c(),Ae=r("p"),Ps=n("Currently, MaskFormer only supports the "),$t=r("a"),zs=n("Swin Transformer"),Cs=n(" as backbone."),Ss=c(),to=r("p"),js=n("Examples:"),Ds=c(),u(qe.$$.fragment),As=c(),ce=r("div"),u(Ne.$$.fragment),qs=c(),Le=r("p"),Ns=n("Instantiate a "),Et=r("a"),Ls=n("MaskFormerConfig"),Hs=n(` (or a derived class) from a pre-trained backbone model configuration and DETR model
configuration.`),Ws=c(),le=r("div"),u(He.$$.fragment),Vs=c(),We=r("p"),Us=n("Serializes this instance to a Python dictionary. Override the default "),It=r("a"),Rs=n("to_dict()"),Bs=n("."),Co=c(),Z=r("h2"),me=r("a"),oo=r("span"),u(Ve.$$.fragment),Ks=c(),ro=r("span"),Gs=n("MaskFormerFeatureExtractor"),So=c(),x=r("div"),u(Ue.$$.fragment),Qs=c(),so=r("p"),Ys=n("Constructs a MaskFormer feature extractor."),Js=c(),Re=r("p"),Xs=n("This feature extractor inherits from "),Ot=r("a"),Zs=n("FeatureExtractionMixin"),ea=n(` which contains most of the main methods. Users
should refer to this superclass for more information regarding those methods.`),ta=c(),L=r("div"),u(Be.$$.fragment),oa=c(),ao=r("p"),ra=n(`Main method to prepare for the model one or several image(s) and optional annotations. Images are by default
padded up to the largest image in a batch, and a pixel mask is created that indicates which pixels are
real/which are padding.`),sa=c(),u(he.$$.fragment),aa=c(),pe=r("div"),u(Ke.$$.fragment),na=c(),Ge=r("p"),ia=n("Pad images up to the largest image in a batch and create a corresponding "),no=r("code"),da=n("pixel_mask"),ca=n("."),la=c(),fe=r("div"),u(Qe.$$.fragment),ma=c(),Ye=r("p"),ha=n("Converts the output of "),io=r("code"),pa=n("MaskFormerForInstanceSegmentationOutput"),fa=n(` into image segmentation predictions. Only
supports PyTorch.`),ua=c(),ue=r("div"),u(Je.$$.fragment),ga=c(),Xe=r("p"),_a=n("Converts the output of "),co=r("code"),ka=n("MaskFormerForInstanceSegmentationOutput"),Fa=n(` into semantic segmentation predictions. Only
supports PyTorch.`),va=c(),ge=r("div"),u(Ze.$$.fragment),ba=c(),et=r("p"),wa=n("Converts the output of "),lo=r("code"),xa=n("MaskFormerForInstanceSegmentationOutput"),Ma=n(` into image panoptic segmentation
predictions. Only supports PyTorch.`),jo=c(),ee=r("h2"),_e=r("a"),mo=r("span"),u(tt.$$.fragment),Ta=c(),ho=r("span"),ya=n("MaskFormerModel"),Do=c(),q=r("div"),u(ot.$$.fragment),$a=c(),rt=r("p"),Ea=n(`The bare MaskFormer Model outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),st=r("a"),Ia=n("torch.nn.Module"),Oa=n(` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Pa=c(),O=r("div"),u(at.$$.fragment),za=c(),te=r("p"),Ca=n("The "),Pt=r("a"),Sa=n("MaskFormerModel"),ja=n(" forward method, overrides the "),po=r("code"),Da=n("__call__"),Aa=n(" special method."),qa=c(),u(ke.$$.fragment),Na=c(),fo=r("p"),La=n("Example:"),Ha=c(),u(nt.$$.fragment),Ao=c(),oe=r("h2"),Fe=r("a"),uo=r("span"),u(it.$$.fragment),Wa=c(),go=r("span"),Va=n("MaskFormerForInstanceSegmentation"),qo=c(),re=r("div"),u(dt.$$.fragment),Ua=c(),P=r("div"),u(ct.$$.fragment),Ra=c(),se=r("p"),Ba=n("The "),zt=r("a"),Ka=n("MaskFormerForInstanceSegmentation"),Ga=n(" forward method, overrides the "),_o=r("code"),Qa=n("__call__"),Ya=n(" special method."),Ja=c(),u(ve.$$.fragment),Xa=c(),ko=r("p"),Za=n("Examples:"),en=c(),u(lt.$$.fragment),this.h()},l(t){const m=ui('[data-svelte="svelte-1phssyn"]',document.head);p=s(m,"META",{name:!0,content:!0}),m.forEach(o),T=l(t),f=s(t,"H1",{class:!0});var mt=a(f);b=s(mt,"A",{id:!0,class:!0,href:!0});var Fo=a(b);z=s(Fo,"SPAN",{});var vo=a(z);g(M.$$.fragment,vo),vo.forEach(o),Fo.forEach(o),y=l(mt),j=s(mt,"SPAN",{});var rn=a(j);pr=i(rn,"MaskFormer"),rn.forEach(o),mt.forEach(o),bo=l(t),R=s(t,"H2",{class:!0});var Lo=a(R);ae=s(Lo,"A",{id:!0,class:!0,href:!0});var sn=a(ae);Vt=s(sn,"SPAN",{});var an=a(Vt);g(xe.$$.fragment,an),an.forEach(o),sn.forEach(o),fr=l(Lo),Ut=s(Lo,"SPAN",{});var nn=a(Ut);ur=i(nn,"Overview"),nn.forEach(o),Lo.forEach(o),wo=l(t),ne=s(t,"P",{});var Ho=a(ne);gr=i(Ho,"The MaskFormer model was proposed in "),Me=s(Ho,"A",{href:!0,rel:!0});var dn=a(Me);_r=i(dn,"Per-Pixel Classification is Not All You Need for Semantic Segmentation"),dn.forEach(o),kr=i(Ho," by Bowen Cheng, Alexander G. Schwing, Alexander Kirillov. MaskFormer addresses semantic segmentation with a mask classification paradigm instead of performing classic pixel-level classification."),Ho.forEach(o),xo=l(t),pt=s(t,"P",{});var cn=a(pt);Fr=i(cn,"The abstract from the paper is the following:"),cn.forEach(o),Mo=l(t),ft=s(t,"P",{});var ln=a(ft);Rt=s(ln,"EM",{});var mn=a(Rt);vr=i(mn,"Modern approaches typically formulate semantic segmentation as a per-pixel classification task, while instance-level segmentation is handled with an alternative mask classification. Our key insight: mask classification is sufficiently general to solve both semantic- and instance-level segmentation tasks in a unified manner using the exact same model, loss, and training procedure. Following this observation, we propose MaskFormer, a simple mask classification model which predicts a set of binary masks, each associated with a single global class label prediction. Overall, the proposed mask classification-based method simplifies the landscape of effective approaches to semantic and panoptic segmentation tasks and shows excellent empirical results. In particular, we observe that MaskFormer outperforms per-pixel classification baselines when the number of classes is large. Our mask classification-based method outperforms both current state-of-the-art semantic (55.6 mIoU on ADE20K) and panoptic segmentation (52.7 PQ on COCO) models."),mn.forEach(o),ln.forEach(o),To=l(t),ut=s(t,"P",{});var hn=a(ut);br=i(hn,"Tips:"),hn.forEach(o),yo=l(t),S=s(t,"UL",{});var be=a(S);D=s(be,"LI",{});var we=a(D);wr=i(we,`During training, the authors of DETR did find it helpful to use auxiliary losses in the decoder, especially to help
the model output the correct number of objects of each class. If you set the parameter `),Bt=s(we,"CODE",{});var pn=a(Bt);xr=i(pn,"use_auxilary_loss"),pn.forEach(o),Mr=i(we,` of
`),gt=s(we,"A",{href:!0});var fn=a(gt);Tr=i(fn,"MaskFormerConfig"),fn.forEach(o),yr=i(we," to "),Kt=s(we,"CODE",{});var un=a(Kt);$r=i(un,"True"),un.forEach(o),Er=i(we,`, then prediction feedforward neural networks and Hungarian losses
are added after each decoder layer (with the FFNs sharing parameters).`),we.forEach(o),Ir=l(be),C=s(be,"LI",{});var H=a(C);Or=i(H,`If you want to train the model in a distributed environment across multiple nodes, then one should update the
`),Gt=s(H,"CODE",{});var gn=a(Gt);Pr=i(gn,"get_num_masks"),gn.forEach(o),zr=i(H," function inside in the "),Qt=s(H,"CODE",{});var _n=a(Qt);Cr=i(_n,"MaskFormerLoss"),_n.forEach(o),Sr=i(H," class of "),Yt=s(H,"CODE",{});var kn=a(Yt);jr=i(kn,"modeling_maskformer.py"),kn.forEach(o),Dr=i(H,`. When training on multiple nodes, this should be
set to the average number of target masks across all nodes, as can be seen in the original implementation `),Te=s(H,"A",{href:!0,rel:!0});var Fn=a(Te);Ar=i(Fn,"here"),Fn.forEach(o),qr=i(H,"."),H.forEach(o),Nr=l(be),ye=s(be,"LI",{});var Wo=a(ye);Lr=i(Wo,"One can use "),_t=s(Wo,"A",{href:!0});var vn=a(_t);Hr=i(vn,"MaskFormerFeatureExtractor"),vn.forEach(o),Wr=i(Wo," to prepare images for the model."),Wo.forEach(o),Vr=l(be),B=s(be,"LI",{});var Ct=a(B);Ur=i(Ct,"To get the final segmentation, depending on the task, you can call "),kt=s(Ct,"A",{href:!0});var bn=a(kt);Rr=i(bn,"post_process_semantic_segmentation()"),bn.forEach(o),Br=i(Ct," or "),Ft=s(Ct,"A",{href:!0});var wn=a(Ft);Kr=i(wn,"post_process_panoptic_segmentation()"),wn.forEach(o),Gr=i(Ct,"."),Ct.forEach(o),be.forEach(o),$o=l(t),N=s(t,"P",{});var St=a(N);Qr=i(St,"This model was contributed by "),$e=s(St,"A",{href:!0,rel:!0});var xn=a($e);Yr=i(xn,"francesco"),xn.forEach(o),Jr=i(St,". The original code can be found "),Ee=s(St,"A",{href:!0,rel:!0});var Mn=a(Ee);Xr=i(Mn,"here"),Mn.forEach(o),Zr=i(St,"."),St.forEach(o),Eo=l(t),K=s(t,"H2",{class:!0});var Vo=a(K);ie=s(Vo,"A",{id:!0,class:!0,href:!0});var Tn=a(ie);Jt=s(Tn,"SPAN",{});var yn=a(Jt);g(Ie.$$.fragment,yn),yn.forEach(o),Tn.forEach(o),es=l(Vo),Xt=s(Vo,"SPAN",{});var $n=a(Xt);ts=i($n,"MaskFormer specific outputs"),$n.forEach(o),Vo.forEach(o),Io=l(t),G=s(t,"DIV",{class:!0});var Uo=a(G);g(Oe.$$.fragment,Uo),os=l(Uo),Pe=s(Uo,"P",{});var Ro=a(Pe);rs=i(Ro,"Class for outputs of "),vt=s(Ro,"A",{href:!0});var En=a(vt);ss=i(En,"MaskFormerModel"),En.forEach(o),as=i(Ro,". This class returns all the needed hidden states to compute the logits."),Ro.forEach(o),Uo.forEach(o),Oo=l(t),A=s(t,"DIV",{class:!0});var jt=a(A);g(ze.$$.fragment,jt),ns=l(jt),Ce=s(jt,"P",{});var Bo=a(Ce);is=i(Bo,"Class for outputs of "),bt=s(Bo,"A",{href:!0});var In=a(bt);ds=i(In,"MaskFormerForInstanceSegmentation"),In.forEach(o),cs=i(Bo,"."),Bo.forEach(o),ls=l(jt),Q=s(jt,"P",{});var Dt=a(Q);ms=i(Dt,"This output can be directly passed to "),wt=s(Dt,"A",{href:!0});var On=a(wt);hs=i(On,"post_process_segmentation()"),On.forEach(o),ps=i(Dt,` or
`),xt=s(Dt,"A",{href:!0});var Pn=a(xt);fs=i(Pn,"post_process_panoptic_segmentation()"),Pn.forEach(o),us=i(Dt," depending on the task. Please, see\n[`~MaskFormerFeatureExtractor] for details regarding usage."),Dt.forEach(o),jt.forEach(o),Po=l(t),Y=s(t,"H2",{class:!0});var Ko=a(Y);de=s(Ko,"A",{id:!0,class:!0,href:!0});var zn=a(de);Zt=s(zn,"SPAN",{});var Cn=a(Zt);g(Se.$$.fragment,Cn),Cn.forEach(o),zn.forEach(o),gs=l(Ko),eo=s(Ko,"SPAN",{});var Sn=a(eo);_s=i(Sn,"MaskFormerConfig"),Sn.forEach(o),Ko.forEach(o),zo=l(t),w=s(t,"DIV",{class:!0});var $=a(w);g(je.$$.fragment,$),ks=l($),J=s($,"P",{});var At=a(J);Fs=i(At,"This is the configuration class to store the configuration of a "),Mt=s(At,"A",{href:!0});var jn=a(Mt);vs=i(jn,"MaskFormerModel"),jn.forEach(o),bs=i(At,`. It is used to instantiate a
MaskFormer model according to the specified arguments, defining the model architecture. Instantiating a
configuration with the defaults will yield a similar configuration to that of the
\u201CFrancesco/maskformer-swin-base-ade\u201D architecture trained on
`),De=s(At,"A",{href:!0,rel:!0});var Dn=a(De);ws=i(Dn,"ADE20k-150"),Dn.forEach(o),xs=i(At,"."),At.forEach(o),Ms=l($),X=s($,"P",{});var qt=a(X);Ts=i(qt,"Configuration objects inherit from "),Tt=s(qt,"A",{href:!0});var An=a(Tt);ys=i(An,"PretrainedConfig"),An.forEach(o),$s=i(qt,` and can be used to control the model outputs. Read the
documentation from `),yt=s(qt,"A",{href:!0});var qn=a(yt);Es=i(qn,"PretrainedConfig"),qn.forEach(o),Is=i(qt," for more information."),qt.forEach(o),Os=l($),Ae=s($,"P",{});var Go=a(Ae);Ps=i(Go,"Currently, MaskFormer only supports the "),$t=s(Go,"A",{href:!0});var Nn=a($t);zs=i(Nn,"Swin Transformer"),Nn.forEach(o),Cs=i(Go," as backbone."),Go.forEach(o),Ss=l($),to=s($,"P",{});var Ln=a(to);js=i(Ln,"Examples:"),Ln.forEach(o),Ds=l($),g(qe.$$.fragment,$),As=l($),ce=s($,"DIV",{class:!0});var Qo=a(ce);g(Ne.$$.fragment,Qo),qs=l(Qo),Le=s(Qo,"P",{});var Yo=a(Le);Ns=i(Yo,"Instantiate a "),Et=s(Yo,"A",{href:!0});var Hn=a(Et);Ls=i(Hn,"MaskFormerConfig"),Hn.forEach(o),Hs=i(Yo,` (or a derived class) from a pre-trained backbone model configuration and DETR model
configuration.`),Yo.forEach(o),Qo.forEach(o),Ws=l($),le=s($,"DIV",{class:!0});var Jo=a(le);g(He.$$.fragment,Jo),Vs=l(Jo),We=s(Jo,"P",{});var Xo=a(We);Us=i(Xo,"Serializes this instance to a Python dictionary. Override the default "),It=s(Xo,"A",{href:!0});var Wn=a(It);Rs=i(Wn,"to_dict()"),Wn.forEach(o),Bs=i(Xo,"."),Xo.forEach(o),Jo.forEach(o),$.forEach(o),Co=l(t),Z=s(t,"H2",{class:!0});var Zo=a(Z);me=s(Zo,"A",{id:!0,class:!0,href:!0});var Vn=a(me);oo=s(Vn,"SPAN",{});var Un=a(oo);g(Ve.$$.fragment,Un),Un.forEach(o),Vn.forEach(o),Ks=l(Zo),ro=s(Zo,"SPAN",{});var Rn=a(ro);Gs=i(Rn,"MaskFormerFeatureExtractor"),Rn.forEach(o),Zo.forEach(o),So=l(t),x=s(t,"DIV",{class:!0});var E=a(x);g(Ue.$$.fragment,E),Qs=l(E),so=s(E,"P",{});var Bn=a(so);Ys=i(Bn,"Constructs a MaskFormer feature extractor."),Bn.forEach(o),Js=l(E),Re=s(E,"P",{});var er=a(Re);Xs=i(er,"This feature extractor inherits from "),Ot=s(er,"A",{href:!0});var Kn=a(Ot);Zs=i(Kn,"FeatureExtractionMixin"),Kn.forEach(o),ea=i(er,` which contains most of the main methods. Users
should refer to this superclass for more information regarding those methods.`),er.forEach(o),ta=l(E),L=s(E,"DIV",{class:!0});var Nt=a(L);g(Be.$$.fragment,Nt),oa=l(Nt),ao=s(Nt,"P",{});var Gn=a(ao);ra=i(Gn,`Main method to prepare for the model one or several image(s) and optional annotations. Images are by default
padded up to the largest image in a batch, and a pixel mask is created that indicates which pixels are
real/which are padding.`),Gn.forEach(o),sa=l(Nt),g(he.$$.fragment,Nt),Nt.forEach(o),aa=l(E),pe=s(E,"DIV",{class:!0});var tr=a(pe);g(Ke.$$.fragment,tr),na=l(tr),Ge=s(tr,"P",{});var or=a(Ge);ia=i(or,"Pad images up to the largest image in a batch and create a corresponding "),no=s(or,"CODE",{});var Qn=a(no);da=i(Qn,"pixel_mask"),Qn.forEach(o),ca=i(or,"."),or.forEach(o),tr.forEach(o),la=l(E),fe=s(E,"DIV",{class:!0});var rr=a(fe);g(Qe.$$.fragment,rr),ma=l(rr),Ye=s(rr,"P",{});var sr=a(Ye);ha=i(sr,"Converts the output of "),io=s(sr,"CODE",{});var Yn=a(io);pa=i(Yn,"MaskFormerForInstanceSegmentationOutput"),Yn.forEach(o),fa=i(sr,` into image segmentation predictions. Only
supports PyTorch.`),sr.forEach(o),rr.forEach(o),ua=l(E),ue=s(E,"DIV",{class:!0});var ar=a(ue);g(Je.$$.fragment,ar),ga=l(ar),Xe=s(ar,"P",{});var nr=a(Xe);_a=i(nr,"Converts the output of "),co=s(nr,"CODE",{});var Jn=a(co);ka=i(Jn,"MaskFormerForInstanceSegmentationOutput"),Jn.forEach(o),Fa=i(nr,` into semantic segmentation predictions. Only
supports PyTorch.`),nr.forEach(o),ar.forEach(o),va=l(E),ge=s(E,"DIV",{class:!0});var ir=a(ge);g(Ze.$$.fragment,ir),ba=l(ir),et=s(ir,"P",{});var dr=a(et);wa=i(dr,"Converts the output of "),lo=s(dr,"CODE",{});var Xn=a(lo);xa=i(Xn,"MaskFormerForInstanceSegmentationOutput"),Xn.forEach(o),Ma=i(dr,` into image panoptic segmentation
predictions. Only supports PyTorch.`),dr.forEach(o),ir.forEach(o),E.forEach(o),jo=l(t),ee=s(t,"H2",{class:!0});var cr=a(ee);_e=s(cr,"A",{id:!0,class:!0,href:!0});var Zn=a(_e);mo=s(Zn,"SPAN",{});var ei=a(mo);g(tt.$$.fragment,ei),ei.forEach(o),Zn.forEach(o),Ta=l(cr),ho=s(cr,"SPAN",{});var ti=a(ho);ya=i(ti,"MaskFormerModel"),ti.forEach(o),cr.forEach(o),Do=l(t),q=s(t,"DIV",{class:!0});var Lt=a(q);g(ot.$$.fragment,Lt),$a=l(Lt),rt=s(Lt,"P",{});var lr=a(rt);Ea=i(lr,`The bare MaskFormer Model outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),st=s(lr,"A",{href:!0,rel:!0});var oi=a(st);Ia=i(oi,"torch.nn.Module"),oi.forEach(o),Oa=i(lr,` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),lr.forEach(o),Pa=l(Lt),O=s(Lt,"DIV",{class:!0});var W=a(O);g(at.$$.fragment,W),za=l(W),te=s(W,"P",{});var Ht=a(te);Ca=i(Ht,"The "),Pt=s(Ht,"A",{href:!0});var ri=a(Pt);Sa=i(ri,"MaskFormerModel"),ri.forEach(o),ja=i(Ht," forward method, overrides the "),po=s(Ht,"CODE",{});var si=a(po);Da=i(si,"__call__"),si.forEach(o),Aa=i(Ht," special method."),Ht.forEach(o),qa=l(W),g(ke.$$.fragment,W),Na=l(W),fo=s(W,"P",{});var ai=a(fo);La=i(ai,"Example:"),ai.forEach(o),Ha=l(W),g(nt.$$.fragment,W),W.forEach(o),Lt.forEach(o),Ao=l(t),oe=s(t,"H2",{class:!0});var mr=a(oe);Fe=s(mr,"A",{id:!0,class:!0,href:!0});var ni=a(Fe);uo=s(ni,"SPAN",{});var ii=a(uo);g(it.$$.fragment,ii),ii.forEach(o),ni.forEach(o),Wa=l(mr),go=s(mr,"SPAN",{});var di=a(go);Va=i(di,"MaskFormerForInstanceSegmentation"),di.forEach(o),mr.forEach(o),qo=l(t),re=s(t,"DIV",{class:!0});var hr=a(re);g(dt.$$.fragment,hr),Ua=l(hr),P=s(hr,"DIV",{class:!0});var V=a(P);g(ct.$$.fragment,V),Ra=l(V),se=s(V,"P",{});var Wt=a(se);Ba=i(Wt,"The "),zt=s(Wt,"A",{href:!0});var ci=a(zt);Ka=i(ci,"MaskFormerForInstanceSegmentation"),ci.forEach(o),Ga=i(Wt," forward method, overrides the "),_o=s(Wt,"CODE",{});var li=a(_o);Qa=i(li,"__call__"),li.forEach(o),Ya=i(Wt," special method."),Wt.forEach(o),Ja=l(V),g(ve.$$.fragment,V),Xa=l(V),ko=s(V,"P",{});var mi=a(ko);Za=i(mi,"Examples:"),mi.forEach(o),en=l(V),g(lt.$$.fragment,V),V.forEach(o),hr.forEach(o),this.h()},h(){d(p,"name","hf:doc:metadata"),d(p,"content",JSON.stringify(vi)),d(b,"id","maskformer"),d(b,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(b,"href","#maskformer"),d(f,"class","relative group"),d(ae,"id","overview"),d(ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ae,"href","#overview"),d(R,"class","relative group"),d(Me,"href","https://arxiv.org/abs/2107.06278"),d(Me,"rel","nofollow"),d(gt,"href","/docs/transformers/pr_15682/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(Te,"href","https://github.com/facebookresearch/MaskFormer/blob/da3e60d85fdeedcb31476b5edd7d328826ce56cc/mask_former/modeling/criterion.py#L169"),d(Te,"rel","nofollow"),d(_t,"href","/docs/transformers/pr_15682/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(kt,"href","/docs/transformers/pr_15682/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor.post_process_semantic_segmentation"),d(Ft,"href","/docs/transformers/pr_15682/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor.post_process_panoptic_segmentation"),d($e,"href","https://huggingface.co/francesco"),d($e,"rel","nofollow"),d(Ee,"href","https://github.com/facebookresearch/MaskFormer"),d(Ee,"rel","nofollow"),d(ie,"id","transformers.models.maskformer.modeling_maskformer.MaskFormerModelOutput"),d(ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ie,"href","#transformers.models.maskformer.modeling_maskformer.MaskFormerModelOutput"),d(K,"class","relative group"),d(vt,"href","/docs/transformers/pr_15682/en/model_doc/maskformer#transformers.MaskFormerModel"),d(G,"class","docstring"),d(bt,"href","/docs/transformers/pr_15682/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(wt,"href","/docs/transformers/pr_15682/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor.post_process_segmentation"),d(xt,"href","/docs/transformers/pr_15682/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor.post_process_panoptic_segmentation"),d(A,"class","docstring"),d(de,"id","transformers.MaskFormerConfig"),d(de,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(de,"href","#transformers.MaskFormerConfig"),d(Y,"class","relative group"),d(Mt,"href","/docs/transformers/pr_15682/en/model_doc/maskformer#transformers.MaskFormerModel"),d(De,"href","https://huggingface.co/datasets/scene_parse_150"),d(De,"rel","nofollow"),d(Tt,"href","/docs/transformers/pr_15682/en/main_classes/configuration#transformers.PretrainedConfig"),d(yt,"href","/docs/transformers/pr_15682/en/main_classes/configuration#transformers.PretrainedConfig"),d($t,"href","swin"),d(Et,"href","/docs/transformers/pr_15682/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(ce,"class","docstring"),d(It,"href","/docs/transformers/pr_15682/en/main_classes/configuration#transformers.PretrainedConfig.to_dict"),d(le,"class","docstring"),d(w,"class","docstring"),d(me,"id","transformers.MaskFormerFeatureExtractor"),d(me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(me,"href","#transformers.MaskFormerFeatureExtractor"),d(Z,"class","relative group"),d(Ot,"href","/docs/transformers/pr_15682/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin"),d(L,"class","docstring"),d(pe,"class","docstring"),d(fe,"class","docstring"),d(ue,"class","docstring"),d(ge,"class","docstring"),d(x,"class","docstring"),d(_e,"id","transformers.MaskFormerModel"),d(_e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_e,"href","#transformers.MaskFormerModel"),d(ee,"class","relative group"),d(st,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),d(st,"rel","nofollow"),d(Pt,"href","/docs/transformers/pr_15682/en/model_doc/maskformer#transformers.MaskFormerModel"),d(O,"class","docstring"),d(q,"class","docstring"),d(Fe,"id","transformers.MaskFormerForInstanceSegmentation"),d(Fe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Fe,"href","#transformers.MaskFormerForInstanceSegmentation"),d(oe,"class","relative group"),d(zt,"href","/docs/transformers/pr_15682/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(P,"class","docstring"),d(re,"class","docstring")},m(t,m){e(document.head,p),h(t,T,m),h(t,f,m),e(f,b),e(b,z),_(M,z,null),e(f,y),e(f,j),e(j,pr),h(t,bo,m),h(t,R,m),e(R,ae),e(ae,Vt),_(xe,Vt,null),e(R,fr),e(R,Ut),e(Ut,ur),h(t,wo,m),h(t,ne,m),e(ne,gr),e(ne,Me),e(Me,_r),e(ne,kr),h(t,xo,m),h(t,pt,m),e(pt,Fr),h(t,Mo,m),h(t,ft,m),e(ft,Rt),e(Rt,vr),h(t,To,m),h(t,ut,m),e(ut,br),h(t,yo,m),h(t,S,m),e(S,D),e(D,wr),e(D,Bt),e(Bt,xr),e(D,Mr),e(D,gt),e(gt,Tr),e(D,yr),e(D,Kt),e(Kt,$r),e(D,Er),e(S,Ir),e(S,C),e(C,Or),e(C,Gt),e(Gt,Pr),e(C,zr),e(C,Qt),e(Qt,Cr),e(C,Sr),e(C,Yt),e(Yt,jr),e(C,Dr),e(C,Te),e(Te,Ar),e(C,qr),e(S,Nr),e(S,ye),e(ye,Lr),e(ye,_t),e(_t,Hr),e(ye,Wr),e(S,Vr),e(S,B),e(B,Ur),e(B,kt),e(kt,Rr),e(B,Br),e(B,Ft),e(Ft,Kr),e(B,Gr),h(t,$o,m),h(t,N,m),e(N,Qr),e(N,$e),e($e,Yr),e(N,Jr),e(N,Ee),e(Ee,Xr),e(N,Zr),h(t,Eo,m),h(t,K,m),e(K,ie),e(ie,Jt),_(Ie,Jt,null),e(K,es),e(K,Xt),e(Xt,ts),h(t,Io,m),h(t,G,m),_(Oe,G,null),e(G,os),e(G,Pe),e(Pe,rs),e(Pe,vt),e(vt,ss),e(Pe,as),h(t,Oo,m),h(t,A,m),_(ze,A,null),e(A,ns),e(A,Ce),e(Ce,is),e(Ce,bt),e(bt,ds),e(Ce,cs),e(A,ls),e(A,Q),e(Q,ms),e(Q,wt),e(wt,hs),e(Q,ps),e(Q,xt),e(xt,fs),e(Q,us),h(t,Po,m),h(t,Y,m),e(Y,de),e(de,Zt),_(Se,Zt,null),e(Y,gs),e(Y,eo),e(eo,_s),h(t,zo,m),h(t,w,m),_(je,w,null),e(w,ks),e(w,J),e(J,Fs),e(J,Mt),e(Mt,vs),e(J,bs),e(J,De),e(De,ws),e(J,xs),e(w,Ms),e(w,X),e(X,Ts),e(X,Tt),e(Tt,ys),e(X,$s),e(X,yt),e(yt,Es),e(X,Is),e(w,Os),e(w,Ae),e(Ae,Ps),e(Ae,$t),e($t,zs),e(Ae,Cs),e(w,Ss),e(w,to),e(to,js),e(w,Ds),_(qe,w,null),e(w,As),e(w,ce),_(Ne,ce,null),e(ce,qs),e(ce,Le),e(Le,Ns),e(Le,Et),e(Et,Ls),e(Le,Hs),e(w,Ws),e(w,le),_(He,le,null),e(le,Vs),e(le,We),e(We,Us),e(We,It),e(It,Rs),e(We,Bs),h(t,Co,m),h(t,Z,m),e(Z,me),e(me,oo),_(Ve,oo,null),e(Z,Ks),e(Z,ro),e(ro,Gs),h(t,So,m),h(t,x,m),_(Ue,x,null),e(x,Qs),e(x,so),e(so,Ys),e(x,Js),e(x,Re),e(Re,Xs),e(Re,Ot),e(Ot,Zs),e(Re,ea),e(x,ta),e(x,L),_(Be,L,null),e(L,oa),e(L,ao),e(ao,ra),e(L,sa),_(he,L,null),e(x,aa),e(x,pe),_(Ke,pe,null),e(pe,na),e(pe,Ge),e(Ge,ia),e(Ge,no),e(no,da),e(Ge,ca),e(x,la),e(x,fe),_(Qe,fe,null),e(fe,ma),e(fe,Ye),e(Ye,ha),e(Ye,io),e(io,pa),e(Ye,fa),e(x,ua),e(x,ue),_(Je,ue,null),e(ue,ga),e(ue,Xe),e(Xe,_a),e(Xe,co),e(co,ka),e(Xe,Fa),e(x,va),e(x,ge),_(Ze,ge,null),e(ge,ba),e(ge,et),e(et,wa),e(et,lo),e(lo,xa),e(et,Ma),h(t,jo,m),h(t,ee,m),e(ee,_e),e(_e,mo),_(tt,mo,null),e(ee,Ta),e(ee,ho),e(ho,ya),h(t,Do,m),h(t,q,m),_(ot,q,null),e(q,$a),e(q,rt),e(rt,Ea),e(rt,st),e(st,Ia),e(rt,Oa),e(q,Pa),e(q,O),_(at,O,null),e(O,za),e(O,te),e(te,Ca),e(te,Pt),e(Pt,Sa),e(te,ja),e(te,po),e(po,Da),e(te,Aa),e(O,qa),_(ke,O,null),e(O,Na),e(O,fo),e(fo,La),e(O,Ha),_(nt,O,null),h(t,Ao,m),h(t,oe,m),e(oe,Fe),e(Fe,uo),_(it,uo,null),e(oe,Wa),e(oe,go),e(go,Va),h(t,qo,m),h(t,re,m),_(dt,re,null),e(re,Ua),e(re,P),_(ct,P,null),e(P,Ra),e(P,se),e(se,Ba),e(se,zt),e(zt,Ka),e(se,Ga),e(se,_o),e(_o,Qa),e(se,Ya),e(P,Ja),_(ve,P,null),e(P,Xa),e(P,ko),e(ko,Za),e(P,en),_(lt,P,null),No=!0},p(t,[m]){const mt={};m&2&&(mt.$$scope={dirty:m,ctx:t}),he.$set(mt);const Fo={};m&2&&(Fo.$$scope={dirty:m,ctx:t}),ke.$set(Fo);const vo={};m&2&&(vo.$$scope={dirty:m,ctx:t}),ve.$set(vo)},i(t){No||(k(M.$$.fragment,t),k(xe.$$.fragment,t),k(Ie.$$.fragment,t),k(Oe.$$.fragment,t),k(ze.$$.fragment,t),k(Se.$$.fragment,t),k(je.$$.fragment,t),k(qe.$$.fragment,t),k(Ne.$$.fragment,t),k(He.$$.fragment,t),k(Ve.$$.fragment,t),k(Ue.$$.fragment,t),k(Be.$$.fragment,t),k(he.$$.fragment,t),k(Ke.$$.fragment,t),k(Qe.$$.fragment,t),k(Je.$$.fragment,t),k(Ze.$$.fragment,t),k(tt.$$.fragment,t),k(ot.$$.fragment,t),k(at.$$.fragment,t),k(ke.$$.fragment,t),k(nt.$$.fragment,t),k(it.$$.fragment,t),k(dt.$$.fragment,t),k(ct.$$.fragment,t),k(ve.$$.fragment,t),k(lt.$$.fragment,t),No=!0)},o(t){F(M.$$.fragment,t),F(xe.$$.fragment,t),F(Ie.$$.fragment,t),F(Oe.$$.fragment,t),F(ze.$$.fragment,t),F(Se.$$.fragment,t),F(je.$$.fragment,t),F(qe.$$.fragment,t),F(Ne.$$.fragment,t),F(He.$$.fragment,t),F(Ve.$$.fragment,t),F(Ue.$$.fragment,t),F(Be.$$.fragment,t),F(he.$$.fragment,t),F(Ke.$$.fragment,t),F(Qe.$$.fragment,t),F(Je.$$.fragment,t),F(Ze.$$.fragment,t),F(tt.$$.fragment,t),F(ot.$$.fragment,t),F(at.$$.fragment,t),F(ke.$$.fragment,t),F(nt.$$.fragment,t),F(it.$$.fragment,t),F(dt.$$.fragment,t),F(ct.$$.fragment,t),F(ve.$$.fragment,t),F(lt.$$.fragment,t),No=!1},d(t){o(p),t&&o(T),t&&o(f),v(M),t&&o(bo),t&&o(R),v(xe),t&&o(wo),t&&o(ne),t&&o(xo),t&&o(pt),t&&o(Mo),t&&o(ft),t&&o(To),t&&o(ut),t&&o(yo),t&&o(S),t&&o($o),t&&o(N),t&&o(Eo),t&&o(K),v(Ie),t&&o(Io),t&&o(G),v(Oe),t&&o(Oo),t&&o(A),v(ze),t&&o(Po),t&&o(Y),v(Se),t&&o(zo),t&&o(w),v(je),v(qe),v(Ne),v(He),t&&o(Co),t&&o(Z),v(Ve),t&&o(So),t&&o(x),v(Ue),v(Be),v(he),v(Ke),v(Qe),v(Je),v(Ze),t&&o(jo),t&&o(ee),v(tt),t&&o(Do),t&&o(q),v(ot),v(at),v(ke),v(nt),t&&o(Ao),t&&o(oe),v(it),t&&o(qo),t&&o(re),v(dt),v(ct),v(ve),v(lt)}}}const vi={local:"maskformer",sections:[{local:"overview",title:"Overview"},{local:"transformers.models.maskformer.modeling_maskformer.MaskFormerModelOutput",title:"MaskFormer specific outputs"},{local:"transformers.MaskFormerConfig",title:"MaskFormerConfig"},{local:"transformers.MaskFormerFeatureExtractor",title:"MaskFormerFeatureExtractor"},{local:"transformers.MaskFormerModel",title:"MaskFormerModel"},{local:"transformers.MaskFormerForInstanceSegmentation",title:"MaskFormerForInstanceSegmentation"}],title:"MaskFormer"};function bi(U,p,T){let{fw:f}=p;return U.$$set=b=>{"fw"in b&&T(0,f=b.fw)},[f]}class Ei extends hi{constructor(p){super();pi(this,p,bi,Fi,fi,{fw:0})}}export{Ei as default,vi as metadata};
