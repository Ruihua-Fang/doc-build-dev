import{S as xAt,i as $At,s as kAt,e as a,k as l,w as F,t as o,M as SAt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as RAt,L as I}from"../../chunks/vendor-6b77c823.js";import{T as ejr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function BAt(L){let g,v,p,m,u,d,h,Mo,ii,mf,et,di,ci,Jw,gf,qe,Xe,fi,yn,Yw,Ln,xn,Kw,mi,$n,Zw,gi,hf,Ma;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),ii=a("code"),mf=o("model_type"),et=o(" attribute is set to the same key you use when registering the config (here "),di=a("code"),ci=o('"new-model"'),Jw=o(")."),gf=l(),qe=a("p"),Xe=o("Likewise, if your "),fi=a("code"),yn=o("NewModel"),Yw=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),Kw=o(`, make sure its
`),mi=a("code"),$n=o("config_class"),Zw=o(` attribute is set to the same class you use when registering the model (here
`),gi=a("code"),hf=o("NewModelConfig"),Ma=o(")."),this.h()},l(ze){g=n(ze,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var _$=s(p);m=r(_$,"NewModelConfig"),_$.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var hi=s(d);h=r(hi,"PretrainedConfig"),hi.forEach(t),Mo=r(Ae,`, make sure its
`),ii=n(Ae,"CODE",{});var b$=s(ii);mf=r(b$,"model_type"),b$.forEach(t),et=r(Ae," attribute is set to the same key you use when registering the config (here "),di=n(Ae,"CODE",{});var v$=s(di);ci=r(v$,'"new-model"'),v$.forEach(t),Jw=r(Ae,")."),Ae.forEach(t),gf=i(ze),qe=n(ze,"P",{});var Eo=s(qe);Xe=r(Eo,"Likewise, if your "),fi=n(Eo,"CODE",{});var Ea=s(fi);yn=r(Ea,"NewModel"),Ea.forEach(t),Yw=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var F$=s(Ln);xn=r(F$,"PreTrainedModel"),F$.forEach(t),Kw=r(Eo,`, make sure its
`),mi=n(Eo,"CODE",{});var pf=s(mi);$n=r(pf,"config_class"),pf.forEach(t),Zw=r(Eo,` attribute is set to the same class you use when registering the model (here
`),gi=n(Eo,"CODE",{});var T$=s(gi);hf=r(T$,"NewModelConfig"),T$.forEach(t),Ma=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel")},m(ze,Ae){b(ze,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,ii),e(ii,mf),e(g,et),e(g,di),e(di,ci),e(g,Jw),b(ze,gf,Ae),b(ze,qe,Ae),e(qe,Xe),e(qe,fi),e(fi,yn),e(qe,Yw),e(qe,Ln),e(Ln,xn),e(qe,Kw),e(qe,mi),e(mi,$n),e(qe,Zw),e(qe,gi),e(gi,hf),e(qe,Ma)},d(ze){ze&&t(g),ze&&t(gf),ze&&t(qe)}}}function PAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qAt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function NAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jAt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function DAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ryt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ayt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function syt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function myt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _yt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function byt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Myt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Eyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ayt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xyt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $yt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kyt(L){let g,v,p,m,u,d,h,Mo,ii,mf,et,di,ci,Jw,gf,qe,Xe,fi,yn,Yw,Ln,xn,Kw,mi,$n,Zw,gi,hf,Ma,ze,Ae,_$,hi,b$,v$,Eo,Ea,F$,pf,T$,iDe,YPe,pi,uf,aee,eA,dDe,nee,cDe,KPe,kn,fDe,see,mDe,gDe,lee,hDe,pDe,ZPe,oA,eIe,M$,uDe,oIe,_f,rIe,ui,bf,iee,rA,_De,dee,bDe,tIe,Co,tA,vDe,aA,FDe,E$,TDe,MDe,EDe,nA,CDe,cee,wDe,ADe,yDe,Er,sA,LDe,fee,xDe,$De,_i,kDe,mee,SDe,RDe,gee,BDe,PDe,IDe,A,vf,hee,qDe,NDe,C$,jDe,DDe,GDe,Ff,pee,ODe,VDe,w$,XDe,zDe,QDe,Tf,uee,WDe,HDe,A$,UDe,JDe,YDe,Mf,_ee,KDe,ZDe,y$,eGe,oGe,rGe,Ef,bee,tGe,aGe,L$,nGe,sGe,lGe,Cf,vee,iGe,dGe,x$,cGe,fGe,mGe,wf,Fee,gGe,hGe,$$,pGe,uGe,_Ge,Af,Tee,bGe,vGe,k$,FGe,TGe,MGe,yf,Mee,EGe,CGe,S$,wGe,AGe,yGe,Lf,Eee,LGe,xGe,R$,$Ge,kGe,SGe,xf,Cee,RGe,BGe,B$,PGe,IGe,qGe,$f,wee,NGe,jGe,P$,DGe,GGe,OGe,kf,Aee,VGe,XGe,I$,zGe,QGe,WGe,Sf,yee,HGe,UGe,q$,JGe,YGe,KGe,Rf,Lee,ZGe,eOe,N$,oOe,rOe,tOe,Bf,xee,aOe,nOe,j$,sOe,lOe,iOe,Pf,$ee,dOe,cOe,D$,fOe,mOe,gOe,If,kee,hOe,pOe,G$,uOe,_Oe,bOe,qf,See,vOe,FOe,O$,TOe,MOe,EOe,Nf,Ree,COe,wOe,V$,AOe,yOe,LOe,jf,Bee,xOe,$Oe,X$,kOe,SOe,ROe,Df,Pee,BOe,POe,z$,IOe,qOe,NOe,Gf,Iee,jOe,DOe,Q$,GOe,OOe,VOe,Of,qee,XOe,zOe,W$,QOe,WOe,HOe,Vf,Nee,UOe,JOe,H$,YOe,KOe,ZOe,Xf,jee,eVe,oVe,U$,rVe,tVe,aVe,zf,Dee,nVe,sVe,J$,lVe,iVe,dVe,Qf,Gee,cVe,fVe,Y$,mVe,gVe,hVe,Wf,Oee,pVe,uVe,K$,_Ve,bVe,vVe,Hf,Vee,FVe,TVe,Z$,MVe,EVe,CVe,Uf,Xee,wVe,AVe,ek,yVe,LVe,xVe,Jf,zee,$Ve,kVe,ok,SVe,RVe,BVe,Yf,Qee,PVe,IVe,rk,qVe,NVe,jVe,Kf,Wee,DVe,GVe,tk,OVe,VVe,XVe,Zf,Hee,zVe,QVe,ak,WVe,HVe,UVe,em,Uee,JVe,YVe,nk,KVe,ZVe,eXe,om,Jee,oXe,rXe,sk,tXe,aXe,nXe,rm,Yee,sXe,lXe,lk,iXe,dXe,cXe,tm,Kee,fXe,mXe,ik,gXe,hXe,pXe,am,Zee,uXe,_Xe,dk,bXe,vXe,FXe,nm,eoe,TXe,MXe,ck,EXe,CXe,wXe,sm,ooe,AXe,yXe,fk,LXe,xXe,$Xe,lm,roe,kXe,SXe,mk,RXe,BXe,PXe,im,toe,IXe,qXe,gk,NXe,jXe,DXe,dm,aoe,GXe,OXe,hk,VXe,XXe,zXe,cm,noe,QXe,WXe,pk,HXe,UXe,JXe,fm,soe,YXe,KXe,uk,ZXe,eze,oze,mm,loe,rze,tze,_k,aze,nze,sze,gm,ioe,lze,ize,bk,dze,cze,fze,hm,doe,mze,gze,vk,hze,pze,uze,pm,coe,_ze,bze,Fk,vze,Fze,Tze,um,foe,Mze,Eze,Tk,Cze,wze,Aze,_m,moe,yze,Lze,Mk,xze,$ze,kze,bm,goe,Sze,Rze,Ek,Bze,Pze,Ize,vm,hoe,qze,Nze,Ck,jze,Dze,Gze,Fm,poe,Oze,Vze,wk,Xze,zze,Qze,Tm,uoe,Wze,Hze,Ak,Uze,Jze,Yze,Mm,_oe,Kze,Zze,yk,eQe,oQe,rQe,Em,boe,tQe,aQe,Lk,nQe,sQe,lQe,Cm,voe,iQe,dQe,xk,cQe,fQe,mQe,wm,Foe,gQe,hQe,$k,pQe,uQe,_Qe,Am,Toe,bQe,vQe,kk,FQe,TQe,MQe,ym,Moe,EQe,CQe,Sk,wQe,AQe,yQe,Lm,Eoe,LQe,xQe,Rk,$Qe,kQe,SQe,xm,Coe,RQe,BQe,Bk,PQe,IQe,qQe,$m,woe,NQe,jQe,Pk,DQe,GQe,OQe,km,Aoe,VQe,XQe,Ik,zQe,QQe,WQe,Sm,yoe,HQe,UQe,qk,JQe,YQe,KQe,Rm,Loe,ZQe,eWe,Nk,oWe,rWe,tWe,Bm,xoe,aWe,nWe,jk,sWe,lWe,iWe,Pm,$oe,dWe,cWe,Dk,fWe,mWe,gWe,Im,koe,hWe,pWe,Gk,uWe,_We,bWe,qm,Soe,vWe,FWe,Ok,TWe,MWe,EWe,Nm,Roe,CWe,wWe,Vk,AWe,yWe,LWe,jm,Boe,xWe,$We,Xk,kWe,SWe,RWe,Dm,Poe,BWe,PWe,zk,IWe,qWe,NWe,Gm,Ioe,jWe,DWe,Qk,GWe,OWe,VWe,Om,qoe,XWe,zWe,Wk,QWe,WWe,HWe,Vm,Noe,UWe,JWe,Hk,YWe,KWe,ZWe,Xm,joe,eHe,oHe,Uk,rHe,tHe,aHe,zm,Doe,nHe,sHe,Jk,lHe,iHe,dHe,Qm,Goe,cHe,fHe,Yk,mHe,gHe,hHe,Wm,Ooe,pHe,uHe,Kk,_He,bHe,vHe,Hm,Voe,FHe,THe,Zk,MHe,EHe,CHe,Um,Xoe,wHe,AHe,eS,yHe,LHe,xHe,Jm,zoe,$He,kHe,oS,SHe,RHe,BHe,Ym,Qoe,PHe,IHe,rS,qHe,NHe,jHe,Km,Woe,DHe,GHe,tS,OHe,VHe,XHe,Zm,Hoe,zHe,QHe,aS,WHe,HHe,UHe,eg,Uoe,JHe,YHe,nS,KHe,ZHe,eUe,og,Joe,oUe,rUe,sS,tUe,aUe,nUe,rg,Yoe,sUe,lUe,lS,iUe,dUe,cUe,tg,Koe,fUe,mUe,iS,gUe,hUe,pUe,ag,Zoe,uUe,_Ue,dS,bUe,vUe,FUe,ng,ere,TUe,MUe,cS,EUe,CUe,wUe,sg,ore,AUe,yUe,fS,LUe,xUe,$Ue,lg,rre,kUe,SUe,mS,RUe,BUe,PUe,ig,tre,IUe,qUe,gS,NUe,jUe,DUe,dg,are,GUe,OUe,hS,VUe,XUe,zUe,cg,nre,QUe,WUe,pS,HUe,UUe,JUe,fg,sre,YUe,KUe,uS,ZUe,eJe,oJe,mg,lre,rJe,tJe,_S,aJe,nJe,sJe,gg,ire,lJe,iJe,bS,dJe,cJe,fJe,hg,dre,mJe,gJe,vS,hJe,pJe,uJe,pg,cre,_Je,bJe,FS,vJe,FJe,TJe,ug,MJe,_g,lA,EJe,fre,CJe,aIe,bi,bg,mre,iA,wJe,gre,AJe,nIe,wo,dA,yJe,cA,LJe,TS,xJe,$Je,kJe,fA,SJe,hre,RJe,BJe,PJe,Cr,mA,IJe,pre,qJe,NJe,Ca,jJe,ure,DJe,GJe,_re,OJe,VJe,bre,XJe,zJe,QJe,k,Sn,vre,WJe,HJe,MS,UJe,JJe,ES,YJe,KJe,ZJe,Rn,Fre,eYe,oYe,CS,rYe,tYe,wS,aYe,nYe,sYe,Bn,Tre,lYe,iYe,AS,dYe,cYe,yS,fYe,mYe,gYe,vg,Mre,hYe,pYe,LS,uYe,_Ye,bYe,Pn,Ere,vYe,FYe,xS,TYe,MYe,$S,EYe,CYe,wYe,Fg,Cre,AYe,yYe,kS,LYe,xYe,$Ye,Tg,wre,kYe,SYe,SS,RYe,BYe,PYe,Mg,Are,IYe,qYe,RS,NYe,jYe,DYe,In,yre,GYe,OYe,BS,VYe,XYe,PS,zYe,QYe,WYe,qn,Lre,HYe,UYe,IS,JYe,YYe,qS,KYe,ZYe,eKe,Nn,xre,oKe,rKe,NS,tKe,aKe,jS,nKe,sKe,lKe,Eg,$re,iKe,dKe,DS,cKe,fKe,mKe,Cg,kre,gKe,hKe,GS,pKe,uKe,_Ke,jn,Sre,bKe,vKe,OS,FKe,TKe,VS,MKe,EKe,CKe,wg,Rre,wKe,AKe,XS,yKe,LKe,xKe,Dn,Bre,$Ke,kKe,zS,SKe,RKe,QS,BKe,PKe,IKe,Gn,Pre,qKe,NKe,WS,jKe,DKe,HS,GKe,OKe,VKe,On,Ire,XKe,zKe,US,QKe,WKe,JS,HKe,UKe,JKe,Ag,qre,YKe,KKe,YS,ZKe,eZe,oZe,Vn,Nre,rZe,tZe,KS,aZe,nZe,ZS,sZe,lZe,iZe,Xn,jre,dZe,cZe,eR,fZe,mZe,oR,gZe,hZe,pZe,zn,Dre,uZe,_Ze,rR,bZe,vZe,tR,FZe,TZe,MZe,Qn,Gre,EZe,CZe,aR,wZe,AZe,nR,yZe,LZe,xZe,Wn,Ore,$Ze,kZe,sR,SZe,RZe,lR,BZe,PZe,IZe,Hn,Vre,qZe,NZe,iR,jZe,DZe,dR,GZe,OZe,VZe,yg,Xre,XZe,zZe,cR,QZe,WZe,HZe,Un,zre,UZe,JZe,fR,YZe,KZe,mR,ZZe,eeo,oeo,Lg,Qre,reo,teo,gR,aeo,neo,seo,Jn,Wre,leo,ieo,hR,deo,ceo,pR,feo,meo,geo,Yn,Hre,heo,peo,uR,ueo,_eo,_R,beo,veo,Feo,Kn,Ure,Teo,Meo,bR,Eeo,Ceo,vR,weo,Aeo,yeo,Zn,Jre,Leo,xeo,FR,$eo,keo,TR,Seo,Reo,Beo,es,Yre,Peo,Ieo,MR,qeo,Neo,ER,jeo,Deo,Geo,xg,Kre,Oeo,Veo,CR,Xeo,zeo,Qeo,os,Zre,Weo,Heo,wR,Ueo,Jeo,AR,Yeo,Keo,Zeo,rs,ete,eoo,ooo,yR,roo,too,LR,aoo,noo,soo,ts,ote,loo,ioo,xR,doo,coo,$R,foo,moo,goo,as,rte,hoo,poo,kR,uoo,_oo,SR,boo,voo,Foo,ns,tte,Too,Moo,RR,Eoo,Coo,BR,woo,Aoo,yoo,ss,ate,Loo,xoo,PR,$oo,koo,IR,Soo,Roo,Boo,$g,nte,Poo,Ioo,qR,qoo,Noo,joo,ls,ste,Doo,Goo,NR,Ooo,Voo,jR,Xoo,zoo,Qoo,kg,lte,Woo,Hoo,DR,Uoo,Joo,Yoo,Sg,ite,Koo,Zoo,GR,ero,oro,rro,is,dte,tro,aro,OR,nro,sro,VR,lro,iro,dro,ds,cte,cro,fro,XR,mro,gro,zR,hro,pro,uro,cs,fte,_ro,bro,QR,vro,Fro,WR,Tro,Mro,Ero,Rg,mte,Cro,wro,HR,Aro,yro,Lro,fs,gte,xro,$ro,UR,kro,Sro,JR,Rro,Bro,Pro,ms,hte,Iro,qro,YR,Nro,jro,KR,Dro,Gro,Oro,gs,pte,Vro,Xro,ZR,zro,Qro,eB,Wro,Hro,Uro,hs,ute,Jro,Yro,oB,Kro,Zro,rB,eto,oto,rto,ps,_te,tto,ato,tB,nto,sto,aB,lto,ito,dto,Bg,bte,cto,fto,nB,mto,gto,hto,us,vte,pto,uto,sB,_to,bto,lB,vto,Fto,Tto,Pg,Fte,Mto,Eto,iB,Cto,wto,Ato,Ig,Tte,yto,Lto,dB,xto,$to,kto,qg,Mte,Sto,Rto,cB,Bto,Pto,Ito,Ng,Ete,qto,Nto,fB,jto,Dto,Gto,_s,Cte,Oto,Vto,mB,Xto,zto,gB,Qto,Wto,Hto,jg,wte,Uto,Jto,hB,Yto,Kto,Zto,bs,Ate,eao,oao,pB,rao,tao,uB,aao,nao,sao,vs,yte,lao,iao,_B,dao,cao,bB,fao,mao,gao,Fs,Lte,hao,pao,vB,uao,_ao,FB,bao,vao,Fao,Ts,xte,Tao,Mao,TB,Eao,Cao,MB,wao,Aao,yao,Ms,$te,Lao,xao,EB,$ao,kao,CB,Sao,Rao,Bao,Es,kte,Pao,Iao,wB,qao,Nao,AB,jao,Dao,Gao,Dg,Ste,Oao,Vao,yB,Xao,zao,Qao,Gg,Rte,Wao,Hao,LB,Uao,Jao,Yao,Cs,Bte,Kao,Zao,xB,eno,ono,$B,rno,tno,ano,ws,Pte,nno,sno,kB,lno,ino,SB,dno,cno,fno,As,Ite,mno,gno,RB,hno,pno,BB,uno,_no,bno,Og,qte,vno,Fno,PB,Tno,Mno,Eno,Vg,Nte,Cno,wno,IB,Ano,yno,Lno,Xg,jte,xno,$no,qB,kno,Sno,Rno,ys,Dte,Bno,Pno,NB,Ino,qno,jB,Nno,jno,Dno,zg,Gte,Gno,Ono,DB,Vno,Xno,zno,Qg,Ote,Qno,Wno,GB,Hno,Uno,Jno,Ls,Vte,Yno,Kno,OB,Zno,eso,VB,oso,rso,tso,Wg,Xte,aso,nso,XB,sso,lso,iso,Hg,zte,dso,cso,zB,fso,mso,gso,xs,Qte,hso,pso,QB,uso,_so,WB,bso,vso,Fso,$s,Wte,Tso,Mso,HB,Eso,Cso,UB,wso,Aso,yso,ks,Hte,Lso,xso,JB,$so,kso,YB,Sso,Rso,Bso,Ss,Ute,Pso,Iso,KB,qso,Nso,ZB,jso,Dso,Gso,Ug,Oso,Jg,gA,Vso,Jte,Xso,sIe,vi,Yg,Yte,hA,zso,Kte,Qso,lIe,Ao,pA,Wso,uA,Hso,eP,Uso,Jso,Yso,_A,Kso,Zte,Zso,elo,olo,Qe,bA,rlo,eae,tlo,alo,wa,nlo,oae,slo,llo,rae,ilo,dlo,tae,clo,flo,mlo,oe,Kg,aae,glo,hlo,oP,plo,ulo,_lo,Zg,nae,blo,vlo,rP,Flo,Tlo,Mlo,eh,sae,Elo,Clo,tP,wlo,Alo,ylo,oh,lae,Llo,xlo,aP,$lo,klo,Slo,rh,iae,Rlo,Blo,nP,Plo,Ilo,qlo,th,dae,Nlo,jlo,sP,Dlo,Glo,Olo,ah,cae,Vlo,Xlo,lP,zlo,Qlo,Wlo,nh,fae,Hlo,Ulo,iP,Jlo,Ylo,Klo,sh,mae,Zlo,eio,dP,oio,rio,tio,lh,gae,aio,nio,cP,sio,lio,iio,ih,hae,dio,cio,fP,fio,mio,gio,dh,pae,hio,pio,mP,uio,_io,bio,ch,uae,vio,Fio,gP,Tio,Mio,Eio,fh,_ae,Cio,wio,hP,Aio,yio,Lio,mh,bae,xio,$io,pP,kio,Sio,Rio,gh,vae,Bio,Pio,uP,Iio,qio,Nio,hh,Fae,jio,Dio,_P,Gio,Oio,Vio,ph,Tae,Xio,zio,bP,Qio,Wio,Hio,uh,Mae,Uio,Jio,vP,Yio,Kio,Zio,_h,Eae,edo,odo,FP,rdo,tdo,ado,bh,Cae,ndo,sdo,TP,ldo,ido,ddo,vh,wae,cdo,fdo,MP,mdo,gdo,hdo,Fh,Aae,pdo,udo,EP,_do,bdo,vdo,Th,yae,Fdo,Tdo,CP,Mdo,Edo,Cdo,Mh,Lae,wdo,Ado,wP,ydo,Ldo,xdo,Eh,$do,Ch,kdo,wh,vA,Sdo,xae,Rdo,iIe,Fi,Ah,$ae,FA,Bdo,kae,Pdo,dIe,yo,TA,Ido,MA,qdo,AP,Ndo,jdo,Ddo,EA,Gdo,Sae,Odo,Vdo,Xdo,We,CA,zdo,Rae,Qdo,Wdo,Ti,Hdo,Bae,Udo,Jdo,Pae,Ydo,Kdo,Zdo,be,yh,Iae,eco,oco,yP,rco,tco,aco,Lh,qae,nco,sco,Nae,lco,ico,dco,xh,jae,cco,fco,LP,mco,gco,hco,$h,Dae,pco,uco,xP,_co,bco,vco,kh,Gae,Fco,Tco,$P,Mco,Eco,Cco,Sh,Oae,wco,Aco,kP,yco,Lco,xco,Rh,Vae,$co,kco,SP,Sco,Rco,Bco,Bh,Xae,Pco,Ico,RP,qco,Nco,jco,Ph,zae,Dco,Gco,BP,Oco,Vco,Xco,Ih,Qae,zco,Qco,PP,Wco,Hco,Uco,qh,Wae,Jco,Yco,IP,Kco,Zco,efo,Nh,Hae,ofo,rfo,qP,tfo,afo,nfo,jh,Uae,sfo,lfo,NP,ifo,dfo,cfo,Dh,Jae,ffo,mfo,jP,gfo,hfo,pfo,Gh,Yae,ufo,_fo,DP,bfo,vfo,Ffo,Oh,Tfo,Vh,Mfo,Xh,wA,Efo,Kae,Cfo,cIe,Mi,zh,Zae,AA,wfo,ene,Afo,fIe,Lo,yA,yfo,Ei,Lfo,GP,xfo,$fo,OP,kfo,Sfo,Rfo,LA,Bfo,one,Pfo,Ifo,qfo,ot,xA,Nfo,rne,jfo,Dfo,Ci,Gfo,tne,Ofo,Vfo,VP,Xfo,zfo,Qfo,Qh,Wfo,He,$A,Hfo,ane,Ufo,Jfo,Aa,Yfo,nne,Kfo,Zfo,sne,emo,omo,lne,rmo,tmo,amo,x,Wh,ine,nmo,smo,XP,lmo,imo,dmo,Hh,dne,cmo,fmo,zP,mmo,gmo,hmo,Uh,cne,pmo,umo,QP,_mo,bmo,vmo,Jh,fne,Fmo,Tmo,WP,Mmo,Emo,Cmo,Yh,mne,wmo,Amo,HP,ymo,Lmo,xmo,Kh,gne,$mo,kmo,UP,Smo,Rmo,Bmo,Zh,hne,Pmo,Imo,JP,qmo,Nmo,jmo,ep,pne,Dmo,Gmo,YP,Omo,Vmo,Xmo,op,une,zmo,Qmo,KP,Wmo,Hmo,Umo,rp,_ne,Jmo,Ymo,ZP,Kmo,Zmo,ego,tp,bne,ogo,rgo,eI,tgo,ago,ngo,ap,vne,sgo,lgo,oI,igo,dgo,cgo,np,Fne,fgo,mgo,rI,ggo,hgo,pgo,sp,Tne,ugo,_go,tI,bgo,vgo,Fgo,lp,Mne,Tgo,Mgo,aI,Ego,Cgo,wgo,ip,Ene,Ago,ygo,nI,Lgo,xgo,$go,dp,Cne,kgo,Sgo,sI,Rgo,Bgo,Pgo,cp,wne,Igo,qgo,lI,Ngo,jgo,Dgo,fp,Ane,Ggo,Ogo,iI,Vgo,Xgo,zgo,mp,yne,Qgo,Wgo,dI,Hgo,Ugo,Jgo,gp,Lne,Ygo,Kgo,cI,Zgo,eho,oho,hp,xne,rho,tho,fI,aho,nho,sho,pp,$ne,lho,iho,mI,dho,cho,fho,up,kne,mho,gho,gI,hho,pho,uho,_p,Sne,_ho,bho,hI,vho,Fho,Tho,bp,Rne,Mho,Eho,pI,Cho,who,Aho,vp,Bne,yho,Lho,uI,xho,$ho,kho,Fp,Pne,Sho,Rho,_I,Bho,Pho,Iho,Tp,Ine,qho,Nho,bI,jho,Dho,Gho,Mp,qne,Oho,Vho,vI,Xho,zho,Qho,Ep,Nne,Who,Hho,FI,Uho,Jho,Yho,Rs,jne,Kho,Zho,TI,epo,opo,MI,rpo,tpo,apo,Cp,Dne,npo,spo,EI,lpo,ipo,dpo,wp,Gne,cpo,fpo,CI,mpo,gpo,hpo,Ap,One,ppo,upo,wI,_po,bpo,vpo,yp,Vne,Fpo,Tpo,AI,Mpo,Epo,Cpo,Lp,Xne,wpo,Apo,yI,ypo,Lpo,xpo,xp,zne,$po,kpo,LI,Spo,Rpo,Bpo,$p,Qne,Ppo,Ipo,xI,qpo,Npo,jpo,kp,Wne,Dpo,Gpo,$I,Opo,Vpo,Xpo,Sp,Hne,zpo,Qpo,kI,Wpo,Hpo,Upo,Rp,Une,Jpo,Ypo,SI,Kpo,Zpo,euo,Bp,Jne,ouo,ruo,RI,tuo,auo,nuo,Pp,Yne,suo,luo,BI,iuo,duo,cuo,Ip,Kne,fuo,muo,PI,guo,huo,puo,qp,Zne,uuo,_uo,II,buo,vuo,Fuo,Np,ese,Tuo,Muo,qI,Euo,Cuo,wuo,jp,ose,Auo,yuo,NI,Luo,xuo,$uo,Dp,rse,kuo,Suo,jI,Ruo,Buo,Puo,Gp,tse,Iuo,quo,DI,Nuo,juo,Duo,Op,ase,Guo,Ouo,GI,Vuo,Xuo,zuo,Vp,nse,Quo,Wuo,OI,Huo,Uuo,Juo,Xp,sse,Yuo,Kuo,VI,Zuo,e_o,o_o,zp,lse,r_o,t_o,XI,a_o,n_o,s_o,Qp,ise,l_o,i_o,zI,d_o,c_o,f_o,Wp,dse,m_o,g_o,QI,h_o,p_o,u_o,Hp,cse,__o,b_o,WI,v_o,F_o,T_o,Up,fse,M_o,E_o,HI,C_o,w_o,A_o,Jp,mse,y_o,L_o,UI,x_o,$_o,k_o,Yp,gse,S_o,R_o,JI,B_o,P_o,I_o,Kp,hse,q_o,N_o,YI,j_o,D_o,G_o,Zp,pse,O_o,V_o,KI,X_o,z_o,Q_o,eu,use,W_o,H_o,ZI,U_o,J_o,Y_o,ou,_se,K_o,Z_o,eq,e1o,o1o,r1o,ru,bse,t1o,a1o,oq,n1o,s1o,l1o,tu,vse,i1o,d1o,rq,c1o,f1o,m1o,au,Fse,g1o,h1o,tq,p1o,u1o,_1o,nu,Tse,b1o,v1o,aq,F1o,T1o,M1o,su,Mse,E1o,C1o,nq,w1o,A1o,y1o,lu,Ese,L1o,x1o,sq,$1o,k1o,S1o,iu,Cse,R1o,B1o,lq,P1o,I1o,q1o,du,wse,N1o,j1o,iq,D1o,G1o,O1o,cu,Ase,V1o,X1o,dq,z1o,Q1o,W1o,fu,yse,H1o,U1o,cq,J1o,Y1o,K1o,mu,Lse,Z1o,e8o,fq,o8o,r8o,t8o,gu,xse,a8o,n8o,mq,s8o,l8o,i8o,hu,$se,d8o,c8o,gq,f8o,m8o,g8o,pu,kse,h8o,p8o,hq,u8o,_8o,b8o,uu,Sse,v8o,F8o,pq,T8o,M8o,E8o,_u,Rse,C8o,w8o,uq,A8o,y8o,L8o,bu,Bse,x8o,$8o,_q,k8o,S8o,R8o,vu,Pse,B8o,P8o,bq,I8o,q8o,N8o,Fu,Ise,j8o,D8o,vq,G8o,O8o,V8o,Tu,qse,X8o,z8o,Fq,Q8o,W8o,H8o,Mu,Nse,U8o,J8o,Tq,Y8o,K8o,Z8o,Eu,jse,ebo,obo,Mq,rbo,tbo,abo,Cu,Dse,nbo,sbo,Eq,lbo,ibo,dbo,wu,Gse,cbo,fbo,Cq,mbo,gbo,hbo,Au,Ose,pbo,ubo,wq,_bo,bbo,vbo,yu,Vse,Fbo,Tbo,Aq,Mbo,Ebo,Cbo,Lu,Xse,wbo,Abo,yq,ybo,Lbo,xbo,xu,zse,$bo,kbo,Lq,Sbo,Rbo,Bbo,$u,Qse,Pbo,Ibo,xq,qbo,Nbo,jbo,ku,Wse,Dbo,Gbo,$q,Obo,Vbo,Xbo,Su,Hse,zbo,Qbo,kq,Wbo,Hbo,Ubo,Ru,Use,Jbo,Ybo,Sq,Kbo,Zbo,e2o,Bu,Jse,o2o,r2o,Rq,t2o,a2o,n2o,Pu,s2o,Yse,l2o,i2o,Kse,d2o,c2o,Iu,mIe,wi,qu,Zse,kA,f2o,ele,m2o,gIe,xo,SA,g2o,Ai,h2o,Bq,p2o,u2o,Pq,_2o,b2o,v2o,RA,F2o,ole,T2o,M2o,E2o,rt,BA,C2o,rle,w2o,A2o,yi,y2o,tle,L2o,x2o,Iq,$2o,k2o,S2o,Nu,R2o,Ue,PA,B2o,ale,P2o,I2o,ya,q2o,nle,N2o,j2o,sle,D2o,G2o,lle,O2o,V2o,X2o,G,ju,ile,z2o,Q2o,qq,W2o,H2o,U2o,Du,dle,J2o,Y2o,Nq,K2o,Z2o,evo,Gu,cle,ovo,rvo,jq,tvo,avo,nvo,Ou,fle,svo,lvo,Dq,ivo,dvo,cvo,Vu,mle,fvo,mvo,Gq,gvo,hvo,pvo,Xu,gle,uvo,_vo,Oq,bvo,vvo,Fvo,zu,hle,Tvo,Mvo,Vq,Evo,Cvo,wvo,Qu,ple,Avo,yvo,Xq,Lvo,xvo,$vo,Wu,ule,kvo,Svo,zq,Rvo,Bvo,Pvo,Hu,_le,Ivo,qvo,Qq,Nvo,jvo,Dvo,Uu,ble,Gvo,Ovo,Wq,Vvo,Xvo,zvo,Ju,vle,Qvo,Wvo,Hq,Hvo,Uvo,Jvo,Yu,Fle,Yvo,Kvo,Uq,Zvo,eFo,oFo,Ku,Tle,rFo,tFo,Jq,aFo,nFo,sFo,Zu,Mle,lFo,iFo,Yq,dFo,cFo,fFo,e_,Ele,mFo,gFo,Kq,hFo,pFo,uFo,o_,Cle,_Fo,bFo,Zq,vFo,FFo,TFo,r_,wle,MFo,EFo,eN,CFo,wFo,AFo,t_,Ale,yFo,LFo,oN,xFo,$Fo,kFo,a_,yle,SFo,RFo,rN,BFo,PFo,IFo,n_,Lle,qFo,NFo,tN,jFo,DFo,GFo,s_,xle,OFo,VFo,aN,XFo,zFo,QFo,l_,$le,WFo,HFo,nN,UFo,JFo,YFo,i_,kle,KFo,ZFo,sN,e6o,o6o,r6o,d_,Sle,t6o,a6o,lN,n6o,s6o,l6o,c_,Rle,i6o,d6o,iN,c6o,f6o,m6o,f_,Ble,g6o,h6o,dN,p6o,u6o,_6o,m_,Ple,b6o,v6o,cN,F6o,T6o,M6o,g_,Ile,E6o,C6o,fN,w6o,A6o,y6o,h_,qle,L6o,x6o,mN,$6o,k6o,S6o,p_,Nle,R6o,B6o,gN,P6o,I6o,q6o,u_,jle,N6o,j6o,hN,D6o,G6o,O6o,__,Dle,V6o,X6o,pN,z6o,Q6o,W6o,b_,Gle,H6o,U6o,uN,J6o,Y6o,K6o,v_,Ole,Z6o,eTo,_N,oTo,rTo,tTo,F_,Vle,aTo,nTo,bN,sTo,lTo,iTo,T_,Xle,dTo,cTo,vN,fTo,mTo,gTo,M_,zle,hTo,pTo,FN,uTo,_To,bTo,E_,Qle,vTo,FTo,TN,TTo,MTo,ETo,C_,Wle,CTo,wTo,MN,ATo,yTo,LTo,w_,xTo,Hle,$To,kTo,Ule,STo,RTo,A_,hIe,Li,y_,Jle,IA,BTo,Yle,PTo,pIe,$o,qA,ITo,xi,qTo,EN,NTo,jTo,CN,DTo,GTo,OTo,NA,VTo,Kle,XTo,zTo,QTo,tt,jA,WTo,Zle,HTo,UTo,$i,JTo,eie,YTo,KTo,wN,ZTo,e9o,o9o,L_,r9o,Je,DA,t9o,oie,a9o,n9o,La,s9o,rie,l9o,i9o,tie,d9o,c9o,aie,f9o,m9o,g9o,z,x_,nie,h9o,p9o,AN,u9o,_9o,b9o,$_,sie,v9o,F9o,yN,T9o,M9o,E9o,k_,lie,C9o,w9o,LN,A9o,y9o,L9o,S_,iie,x9o,$9o,xN,k9o,S9o,R9o,R_,die,B9o,P9o,$N,I9o,q9o,N9o,B_,cie,j9o,D9o,kN,G9o,O9o,V9o,P_,fie,X9o,z9o,SN,Q9o,W9o,H9o,I_,mie,U9o,J9o,RN,Y9o,K9o,Z9o,q_,gie,eMo,oMo,BN,rMo,tMo,aMo,N_,hie,nMo,sMo,PN,lMo,iMo,dMo,j_,pie,cMo,fMo,IN,mMo,gMo,hMo,D_,uie,pMo,uMo,qN,_Mo,bMo,vMo,G_,_ie,FMo,TMo,NN,MMo,EMo,CMo,O_,bie,wMo,AMo,jN,yMo,LMo,xMo,V_,vie,$Mo,kMo,DN,SMo,RMo,BMo,X_,Fie,PMo,IMo,GN,qMo,NMo,jMo,z_,Tie,DMo,GMo,ON,OMo,VMo,XMo,Q_,Mie,zMo,QMo,VN,WMo,HMo,UMo,W_,Eie,JMo,YMo,XN,KMo,ZMo,e4o,H_,Cie,o4o,r4o,zN,t4o,a4o,n4o,U_,wie,s4o,l4o,QN,i4o,d4o,c4o,J_,Aie,f4o,m4o,WN,g4o,h4o,p4o,Y_,yie,u4o,_4o,HN,b4o,v4o,F4o,K_,Lie,T4o,M4o,UN,E4o,C4o,w4o,Z_,xie,A4o,y4o,JN,L4o,x4o,$4o,e1,$ie,k4o,S4o,YN,R4o,B4o,P4o,o1,kie,I4o,q4o,KN,N4o,j4o,D4o,r1,Sie,G4o,O4o,ZN,V4o,X4o,z4o,t1,Rie,Q4o,W4o,ej,H4o,U4o,J4o,a1,Bie,Y4o,K4o,oj,Z4o,eEo,oEo,n1,Pie,rEo,tEo,rj,aEo,nEo,sEo,s1,Iie,lEo,iEo,tj,dEo,cEo,fEo,l1,qie,mEo,gEo,aj,hEo,pEo,uEo,i1,Nie,_Eo,bEo,nj,vEo,FEo,TEo,d1,jie,MEo,EEo,sj,CEo,wEo,AEo,c1,Die,yEo,LEo,lj,xEo,$Eo,kEo,f1,SEo,Gie,REo,BEo,Oie,PEo,IEo,m1,uIe,ki,g1,Vie,GA,qEo,Xie,NEo,_Ie,ko,OA,jEo,Si,DEo,ij,GEo,OEo,dj,VEo,XEo,zEo,VA,QEo,zie,WEo,HEo,UEo,at,XA,JEo,Qie,YEo,KEo,Ri,ZEo,Wie,e5o,o5o,cj,r5o,t5o,a5o,h1,n5o,Ye,zA,s5o,Hie,l5o,i5o,xa,d5o,Uie,c5o,f5o,Jie,m5o,g5o,Yie,h5o,p5o,u5o,Q,p1,Kie,_5o,b5o,fj,v5o,F5o,T5o,u1,Zie,M5o,E5o,mj,C5o,w5o,A5o,_1,ede,y5o,L5o,gj,x5o,$5o,k5o,b1,ode,S5o,R5o,hj,B5o,P5o,I5o,v1,rde,q5o,N5o,pj,j5o,D5o,G5o,F1,tde,O5o,V5o,uj,X5o,z5o,Q5o,T1,ade,W5o,H5o,_j,U5o,J5o,Y5o,M1,nde,K5o,Z5o,bj,eCo,oCo,rCo,E1,sde,tCo,aCo,vj,nCo,sCo,lCo,C1,lde,iCo,dCo,Fj,cCo,fCo,mCo,w1,ide,gCo,hCo,Tj,pCo,uCo,_Co,A1,dde,bCo,vCo,Mj,FCo,TCo,MCo,y1,cde,ECo,CCo,Ej,wCo,ACo,yCo,L1,fde,LCo,xCo,Cj,$Co,kCo,SCo,x1,mde,RCo,BCo,wj,PCo,ICo,qCo,$1,gde,NCo,jCo,Aj,DCo,GCo,OCo,k1,hde,VCo,XCo,yj,zCo,QCo,WCo,S1,pde,HCo,UCo,Lj,JCo,YCo,KCo,R1,ude,ZCo,e3o,xj,o3o,r3o,t3o,B1,_de,a3o,n3o,$j,s3o,l3o,i3o,P1,bde,d3o,c3o,kj,f3o,m3o,g3o,I1,vde,h3o,p3o,Sj,u3o,_3o,b3o,q1,Fde,v3o,F3o,Rj,T3o,M3o,E3o,N1,Tde,C3o,w3o,Bj,A3o,y3o,L3o,j1,Mde,x3o,$3o,Pj,k3o,S3o,R3o,D1,Ede,B3o,P3o,Ij,I3o,q3o,N3o,G1,Cde,j3o,D3o,qj,G3o,O3o,V3o,O1,wde,X3o,z3o,Nj,Q3o,W3o,H3o,V1,Ade,U3o,J3o,jj,Y3o,K3o,Z3o,X1,yde,ewo,owo,Dj,rwo,two,awo,z1,Lde,nwo,swo,xde,lwo,iwo,dwo,Q1,$de,cwo,fwo,Gj,mwo,gwo,hwo,W1,kde,pwo,uwo,Oj,_wo,bwo,vwo,H1,Sde,Fwo,Two,Vj,Mwo,Ewo,Cwo,U1,Rde,wwo,Awo,Xj,ywo,Lwo,xwo,J1,$wo,Bde,kwo,Swo,Pde,Rwo,Bwo,Y1,bIe,Bi,K1,Ide,QA,Pwo,qde,Iwo,vIe,So,WA,qwo,Pi,Nwo,zj,jwo,Dwo,Qj,Gwo,Owo,Vwo,HA,Xwo,Nde,zwo,Qwo,Wwo,nt,UA,Hwo,jde,Uwo,Jwo,Ii,Ywo,Dde,Kwo,Zwo,Wj,eAo,oAo,rAo,Z1,tAo,Ke,JA,aAo,Gde,nAo,sAo,$a,lAo,Ode,iAo,dAo,Vde,cAo,fAo,Xde,mAo,gAo,hAo,he,e8,zde,pAo,uAo,Hj,_Ao,bAo,vAo,o8,Qde,FAo,TAo,Uj,MAo,EAo,CAo,r8,Wde,wAo,AAo,Jj,yAo,LAo,xAo,t8,Hde,$Ao,kAo,Yj,SAo,RAo,BAo,a8,Ude,PAo,IAo,Kj,qAo,NAo,jAo,n8,Jde,DAo,GAo,Zj,OAo,VAo,XAo,s8,Yde,zAo,QAo,eD,WAo,HAo,UAo,l8,Kde,JAo,YAo,oD,KAo,ZAo,e0o,i8,Zde,o0o,r0o,rD,t0o,a0o,n0o,d8,ece,s0o,l0o,tD,i0o,d0o,c0o,c8,oce,f0o,m0o,aD,g0o,h0o,p0o,f8,rce,u0o,_0o,nD,b0o,v0o,F0o,m8,tce,T0o,M0o,sD,E0o,C0o,w0o,g8,ace,A0o,y0o,lD,L0o,x0o,$0o,h8,nce,k0o,S0o,iD,R0o,B0o,P0o,p8,sce,I0o,q0o,dD,N0o,j0o,D0o,u8,lce,G0o,O0o,cD,V0o,X0o,z0o,_8,Q0o,ice,W0o,H0o,dce,U0o,J0o,b8,FIe,qi,v8,cce,YA,Y0o,fce,K0o,TIe,Ro,KA,Z0o,Ni,eyo,fD,oyo,ryo,mD,tyo,ayo,nyo,ZA,syo,mce,lyo,iyo,dyo,st,e0,cyo,gce,fyo,myo,ji,gyo,hce,hyo,pyo,gD,uyo,_yo,byo,F8,vyo,Ze,o0,Fyo,pce,Tyo,Myo,ka,Eyo,uce,Cyo,wyo,_ce,Ayo,yyo,bce,Lyo,xyo,$yo,q,T8,vce,kyo,Syo,hD,Ryo,Byo,Pyo,M8,Fce,Iyo,qyo,pD,Nyo,jyo,Dyo,E8,Tce,Gyo,Oyo,uD,Vyo,Xyo,zyo,C8,Mce,Qyo,Wyo,_D,Hyo,Uyo,Jyo,w8,Ece,Yyo,Kyo,bD,Zyo,eLo,oLo,A8,Cce,rLo,tLo,vD,aLo,nLo,sLo,y8,wce,lLo,iLo,FD,dLo,cLo,fLo,L8,Ace,mLo,gLo,TD,hLo,pLo,uLo,x8,yce,_Lo,bLo,MD,vLo,FLo,TLo,$8,Lce,MLo,ELo,ED,CLo,wLo,ALo,k8,xce,yLo,LLo,CD,xLo,$Lo,kLo,S8,$ce,SLo,RLo,wD,BLo,PLo,ILo,R8,kce,qLo,NLo,AD,jLo,DLo,GLo,B8,Sce,OLo,VLo,yD,XLo,zLo,QLo,P8,Rce,WLo,HLo,LD,ULo,JLo,YLo,I8,Bce,KLo,ZLo,xD,exo,oxo,rxo,q8,Pce,txo,axo,$D,nxo,sxo,lxo,N8,Ice,ixo,dxo,kD,cxo,fxo,mxo,j8,qce,gxo,hxo,SD,pxo,uxo,_xo,D8,Nce,bxo,vxo,RD,Fxo,Txo,Mxo,G8,jce,Exo,Cxo,BD,wxo,Axo,yxo,O8,Dce,Lxo,xxo,PD,$xo,kxo,Sxo,V8,Gce,Rxo,Bxo,ID,Pxo,Ixo,qxo,X8,Oce,Nxo,jxo,qD,Dxo,Gxo,Oxo,z8,Vce,Vxo,Xxo,ND,zxo,Qxo,Wxo,Q8,Xce,Hxo,Uxo,jD,Jxo,Yxo,Kxo,W8,zce,Zxo,e7o,DD,o7o,r7o,t7o,H8,Qce,a7o,n7o,GD,s7o,l7o,i7o,U8,Wce,d7o,c7o,OD,f7o,m7o,g7o,J8,Hce,h7o,p7o,VD,u7o,_7o,b7o,Y8,Uce,v7o,F7o,XD,T7o,M7o,E7o,K8,Jce,C7o,w7o,zD,A7o,y7o,L7o,Z8,Yce,x7o,$7o,QD,k7o,S7o,R7o,eb,Kce,B7o,P7o,WD,I7o,q7o,N7o,ob,Zce,j7o,D7o,HD,G7o,O7o,V7o,rb,efe,X7o,z7o,UD,Q7o,W7o,H7o,tb,ofe,U7o,J7o,JD,Y7o,K7o,Z7o,ab,rfe,e$o,o$o,YD,r$o,t$o,a$o,nb,tfe,n$o,s$o,KD,l$o,i$o,d$o,sb,afe,c$o,f$o,ZD,m$o,g$o,h$o,lb,nfe,p$o,u$o,eG,_$o,b$o,v$o,ib,sfe,F$o,T$o,oG,M$o,E$o,C$o,db,lfe,w$o,A$o,rG,y$o,L$o,x$o,cb,ife,$$o,k$o,tG,S$o,R$o,B$o,fb,dfe,P$o,I$o,aG,q$o,N$o,j$o,mb,cfe,D$o,G$o,nG,O$o,V$o,X$o,gb,ffe,z$o,Q$o,sG,W$o,H$o,U$o,hb,J$o,mfe,Y$o,K$o,gfe,Z$o,eko,pb,MIe,Di,ub,hfe,r0,oko,pfe,rko,EIe,Bo,t0,tko,Gi,ako,lG,nko,sko,iG,lko,iko,dko,a0,cko,ufe,fko,mko,gko,lt,n0,hko,_fe,pko,uko,Oi,_ko,bfe,bko,vko,dG,Fko,Tko,Mko,_b,Eko,eo,s0,Cko,vfe,wko,Ako,Sa,yko,Ffe,Lko,xko,Tfe,$ko,kko,Mfe,Sko,Rko,Bko,Y,bb,Efe,Pko,Iko,cG,qko,Nko,jko,vb,Cfe,Dko,Gko,fG,Oko,Vko,Xko,Fb,wfe,zko,Qko,mG,Wko,Hko,Uko,Tb,Afe,Jko,Yko,gG,Kko,Zko,eSo,Mb,yfe,oSo,rSo,hG,tSo,aSo,nSo,Eb,Lfe,sSo,lSo,pG,iSo,dSo,cSo,Cb,xfe,fSo,mSo,uG,gSo,hSo,pSo,wb,$fe,uSo,_So,_G,bSo,vSo,FSo,Ab,kfe,TSo,MSo,bG,ESo,CSo,wSo,yb,Sfe,ASo,ySo,vG,LSo,xSo,$So,Lb,Rfe,kSo,SSo,FG,RSo,BSo,PSo,xb,Bfe,ISo,qSo,TG,NSo,jSo,DSo,$b,Pfe,GSo,OSo,MG,VSo,XSo,zSo,kb,Ife,QSo,WSo,EG,HSo,USo,JSo,Sb,qfe,YSo,KSo,CG,ZSo,eRo,oRo,Rb,Nfe,rRo,tRo,wG,aRo,nRo,sRo,Bb,jfe,lRo,iRo,AG,dRo,cRo,fRo,Pb,Dfe,mRo,gRo,yG,hRo,pRo,uRo,Ib,Gfe,_Ro,bRo,LG,vRo,FRo,TRo,qb,Ofe,MRo,ERo,xG,CRo,wRo,ARo,Nb,Vfe,yRo,LRo,$G,xRo,$Ro,kRo,jb,Xfe,SRo,RRo,kG,BRo,PRo,IRo,Db,zfe,qRo,NRo,SG,jRo,DRo,GRo,Gb,Qfe,ORo,VRo,RG,XRo,zRo,QRo,Ob,Wfe,WRo,HRo,BG,URo,JRo,YRo,Vb,Hfe,KRo,ZRo,PG,eBo,oBo,rBo,Xb,Ufe,tBo,aBo,IG,nBo,sBo,lBo,zb,Jfe,iBo,dBo,qG,cBo,fBo,mBo,Qb,Yfe,gBo,hBo,NG,pBo,uBo,_Bo,Wb,bBo,Kfe,vBo,FBo,Zfe,TBo,MBo,Hb,CIe,Vi,Ub,eme,l0,EBo,ome,CBo,wIe,Po,i0,wBo,Xi,ABo,jG,yBo,LBo,DG,xBo,$Bo,kBo,d0,SBo,rme,RBo,BBo,PBo,it,c0,IBo,tme,qBo,NBo,zi,jBo,ame,DBo,GBo,GG,OBo,VBo,XBo,Jb,zBo,oo,f0,QBo,nme,WBo,HBo,Ra,UBo,sme,JBo,YBo,lme,KBo,ZBo,ime,ePo,oPo,rPo,Yr,Yb,dme,tPo,aPo,OG,nPo,sPo,lPo,Kb,cme,iPo,dPo,VG,cPo,fPo,mPo,Zb,fme,gPo,hPo,XG,pPo,uPo,_Po,e2,mme,bPo,vPo,zG,FPo,TPo,MPo,o2,gme,EPo,CPo,QG,wPo,APo,yPo,r2,LPo,hme,xPo,$Po,pme,kPo,SPo,t2,AIe,Qi,a2,ume,m0,RPo,_me,BPo,yIe,Io,g0,PPo,Wi,IPo,WG,qPo,NPo,HG,jPo,DPo,GPo,h0,OPo,bme,VPo,XPo,zPo,dt,p0,QPo,vme,WPo,HPo,Hi,UPo,Fme,JPo,YPo,UG,KPo,ZPo,eIo,n2,oIo,ro,u0,rIo,Tme,tIo,aIo,Ba,nIo,Mme,sIo,lIo,Eme,iIo,dIo,Cme,cIo,fIo,mIo,U,s2,wme,gIo,hIo,JG,pIo,uIo,_Io,l2,Ame,bIo,vIo,YG,FIo,TIo,MIo,i2,yme,EIo,CIo,KG,wIo,AIo,yIo,d2,Lme,LIo,xIo,ZG,$Io,kIo,SIo,c2,xme,RIo,BIo,eO,PIo,IIo,qIo,f2,$me,NIo,jIo,oO,DIo,GIo,OIo,m2,kme,VIo,XIo,rO,zIo,QIo,WIo,g2,Sme,HIo,UIo,tO,JIo,YIo,KIo,h2,Rme,ZIo,eqo,aO,oqo,rqo,tqo,p2,Bme,aqo,nqo,nO,sqo,lqo,iqo,u2,Pme,dqo,cqo,sO,fqo,mqo,gqo,_2,Ime,hqo,pqo,lO,uqo,_qo,bqo,b2,qme,vqo,Fqo,iO,Tqo,Mqo,Eqo,v2,Nme,Cqo,wqo,dO,Aqo,yqo,Lqo,F2,jme,xqo,$qo,cO,kqo,Sqo,Rqo,T2,Dme,Bqo,Pqo,fO,Iqo,qqo,Nqo,M2,Gme,jqo,Dqo,mO,Gqo,Oqo,Vqo,E2,Ome,Xqo,zqo,gO,Qqo,Wqo,Hqo,C2,Vme,Uqo,Jqo,hO,Yqo,Kqo,Zqo,w2,Xme,eNo,oNo,pO,rNo,tNo,aNo,A2,zme,nNo,sNo,uO,lNo,iNo,dNo,y2,Qme,cNo,fNo,_O,mNo,gNo,hNo,L2,Wme,pNo,uNo,bO,_No,bNo,vNo,x2,Hme,FNo,TNo,vO,MNo,ENo,CNo,$2,Ume,wNo,ANo,FO,yNo,LNo,xNo,k2,Jme,$No,kNo,TO,SNo,RNo,BNo,S2,Yme,PNo,INo,MO,qNo,NNo,jNo,R2,Kme,DNo,GNo,EO,ONo,VNo,XNo,B2,Zme,zNo,QNo,CO,WNo,HNo,UNo,P2,ege,JNo,YNo,wO,KNo,ZNo,ejo,I2,oge,ojo,rjo,AO,tjo,ajo,njo,q2,rge,sjo,ljo,yO,ijo,djo,cjo,N2,tge,fjo,mjo,LO,gjo,hjo,pjo,j2,ujo,age,_jo,bjo,nge,vjo,Fjo,D2,LIe,Ui,G2,sge,_0,Tjo,lge,Mjo,xIe,qo,b0,Ejo,Ji,Cjo,xO,wjo,Ajo,$O,yjo,Ljo,xjo,v0,$jo,ige,kjo,Sjo,Rjo,ct,F0,Bjo,dge,Pjo,Ijo,Yi,qjo,cge,Njo,jjo,kO,Djo,Gjo,Ojo,O2,Vjo,to,T0,Xjo,fge,zjo,Qjo,Pa,Wjo,mge,Hjo,Ujo,gge,Jjo,Yjo,hge,Kjo,Zjo,eDo,O,V2,pge,oDo,rDo,SO,tDo,aDo,nDo,X2,uge,sDo,lDo,RO,iDo,dDo,cDo,z2,_ge,fDo,mDo,BO,gDo,hDo,pDo,Q2,bge,uDo,_Do,PO,bDo,vDo,FDo,W2,vge,TDo,MDo,IO,EDo,CDo,wDo,H2,Fge,ADo,yDo,qO,LDo,xDo,$Do,U2,Tge,kDo,SDo,NO,RDo,BDo,PDo,J2,Mge,IDo,qDo,jO,NDo,jDo,DDo,Y2,Ege,GDo,ODo,DO,VDo,XDo,zDo,K2,Cge,QDo,WDo,GO,HDo,UDo,JDo,Z2,wge,YDo,KDo,OO,ZDo,eGo,oGo,ev,Age,rGo,tGo,VO,aGo,nGo,sGo,ov,yge,lGo,iGo,XO,dGo,cGo,fGo,rv,Lge,mGo,gGo,zO,hGo,pGo,uGo,tv,xge,_Go,bGo,QO,vGo,FGo,TGo,av,$ge,MGo,EGo,WO,CGo,wGo,AGo,nv,kge,yGo,LGo,HO,xGo,$Go,kGo,sv,Sge,SGo,RGo,UO,BGo,PGo,IGo,lv,Rge,qGo,NGo,JO,jGo,DGo,GGo,iv,Bge,OGo,VGo,YO,XGo,zGo,QGo,dv,Pge,WGo,HGo,KO,UGo,JGo,YGo,cv,Ige,KGo,ZGo,ZO,eOo,oOo,rOo,fv,qge,tOo,aOo,eV,nOo,sOo,lOo,mv,Nge,iOo,dOo,oV,cOo,fOo,mOo,gv,jge,gOo,hOo,rV,pOo,uOo,_Oo,hv,Dge,bOo,vOo,tV,FOo,TOo,MOo,pv,Gge,EOo,COo,aV,wOo,AOo,yOo,uv,Oge,LOo,xOo,nV,$Oo,kOo,SOo,_v,Vge,ROo,BOo,sV,POo,IOo,qOo,bv,Xge,NOo,jOo,lV,DOo,GOo,OOo,vv,zge,VOo,XOo,iV,zOo,QOo,WOo,Fv,Qge,HOo,UOo,dV,JOo,YOo,KOo,Tv,Wge,ZOo,eVo,cV,oVo,rVo,tVo,Mv,Hge,aVo,nVo,fV,sVo,lVo,iVo,Ev,Uge,dVo,cVo,mV,fVo,mVo,gVo,Cv,Jge,hVo,pVo,gV,uVo,_Vo,bVo,wv,Yge,vVo,FVo,hV,TVo,MVo,EVo,Av,Kge,CVo,wVo,pV,AVo,yVo,LVo,yv,Zge,xVo,$Vo,uV,kVo,SVo,RVo,Lv,BVo,ehe,PVo,IVo,ohe,qVo,NVo,xv,$Ie,Ki,$v,rhe,M0,jVo,the,DVo,kIe,No,E0,GVo,Zi,OVo,_V,VVo,XVo,bV,zVo,QVo,WVo,C0,HVo,ahe,UVo,JVo,YVo,ft,w0,KVo,nhe,ZVo,eXo,ed,oXo,she,rXo,tXo,vV,aXo,nXo,sXo,kv,lXo,ao,A0,iXo,lhe,dXo,cXo,Ia,fXo,ihe,mXo,gXo,dhe,hXo,pXo,che,uXo,_Xo,bXo,fhe,Sv,mhe,vXo,FXo,FV,TXo,MXo,EXo,Rv,CXo,ghe,wXo,AXo,hhe,yXo,LXo,Bv,SIe,od,Pv,phe,y0,xXo,uhe,$Xo,RIe,jo,L0,kXo,rd,SXo,TV,RXo,BXo,MV,PXo,IXo,qXo,x0,NXo,_he,jXo,DXo,GXo,mt,$0,OXo,bhe,VXo,XXo,td,zXo,vhe,QXo,WXo,EV,HXo,UXo,JXo,Iv,YXo,no,k0,KXo,Fhe,ZXo,ezo,qa,ozo,The,rzo,tzo,Mhe,azo,nzo,Ehe,szo,lzo,izo,Fe,qv,Che,dzo,czo,CV,fzo,mzo,gzo,Nv,whe,hzo,pzo,wV,uzo,_zo,bzo,jv,Ahe,vzo,Fzo,AV,Tzo,Mzo,Ezo,Bs,yhe,Czo,wzo,yV,Azo,yzo,LV,Lzo,xzo,$zo,Dv,Lhe,kzo,Szo,xV,Rzo,Bzo,Pzo,gt,xhe,Izo,qzo,$V,Nzo,jzo,kV,Dzo,Gzo,SV,Ozo,Vzo,Xzo,Gv,$he,zzo,Qzo,RV,Wzo,Hzo,Uzo,Ov,khe,Jzo,Yzo,BV,Kzo,Zzo,eQo,Vv,She,oQo,rQo,PV,tQo,aQo,nQo,Xv,Rhe,sQo,lQo,IV,iQo,dQo,cQo,zv,Bhe,fQo,mQo,qV,gQo,hQo,pQo,Qv,Phe,uQo,_Qo,NV,bQo,vQo,FQo,Wv,Ihe,TQo,MQo,jV,EQo,CQo,wQo,Hv,AQo,qhe,yQo,LQo,Nhe,xQo,$Qo,Uv,BIe,ad,Jv,jhe,S0,kQo,Dhe,SQo,PIe,Do,R0,RQo,nd,BQo,DV,PQo,IQo,GV,qQo,NQo,jQo,B0,DQo,Ghe,GQo,OQo,VQo,ht,P0,XQo,Ohe,zQo,QQo,sd,WQo,Vhe,HQo,UQo,OV,JQo,YQo,KQo,Yv,ZQo,so,I0,eWo,Xhe,oWo,rWo,Na,tWo,zhe,aWo,nWo,Qhe,sWo,lWo,Whe,iWo,dWo,cWo,Hhe,Kv,Uhe,fWo,mWo,VV,gWo,hWo,pWo,Zv,uWo,Jhe,_Wo,bWo,Yhe,vWo,FWo,eF,IIe,ld,oF,Khe,q0,TWo,Zhe,MWo,qIe,Go,N0,EWo,id,CWo,XV,wWo,AWo,zV,yWo,LWo,xWo,j0,$Wo,epe,kWo,SWo,RWo,pt,D0,BWo,ope,PWo,IWo,dd,qWo,rpe,NWo,jWo,QV,DWo,GWo,OWo,rF,VWo,lo,G0,XWo,tpe,zWo,QWo,ja,WWo,ape,HWo,UWo,npe,JWo,YWo,spe,KWo,ZWo,eHo,Ne,tF,lpe,oHo,rHo,WV,tHo,aHo,nHo,aF,ipe,sHo,lHo,HV,iHo,dHo,cHo,nF,dpe,fHo,mHo,UV,gHo,hHo,pHo,sF,cpe,uHo,_Ho,JV,bHo,vHo,FHo,lF,fpe,THo,MHo,YV,EHo,CHo,wHo,iF,mpe,AHo,yHo,KV,LHo,xHo,$Ho,dF,gpe,kHo,SHo,ZV,RHo,BHo,PHo,cF,hpe,IHo,qHo,eX,NHo,jHo,DHo,fF,GHo,ppe,OHo,VHo,upe,XHo,zHo,mF,NIe,cd,gF,_pe,O0,QHo,bpe,WHo,jIe,Oo,V0,HHo,fd,UHo,oX,JHo,YHo,rX,KHo,ZHo,eUo,X0,oUo,vpe,rUo,tUo,aUo,ut,z0,nUo,Fpe,sUo,lUo,md,iUo,Tpe,dUo,cUo,tX,fUo,mUo,gUo,hF,hUo,io,Q0,pUo,Mpe,uUo,_Uo,Da,bUo,Epe,vUo,FUo,Cpe,TUo,MUo,wpe,EUo,CUo,wUo,Ga,pF,Ape,AUo,yUo,aX,LUo,xUo,$Uo,uF,ype,kUo,SUo,nX,RUo,BUo,PUo,_F,Lpe,IUo,qUo,sX,NUo,jUo,DUo,bF,xpe,GUo,OUo,lX,VUo,XUo,zUo,vF,QUo,$pe,WUo,HUo,kpe,UUo,JUo,FF,DIe,gd,TF,Spe,W0,YUo,Rpe,KUo,GIe,Vo,H0,ZUo,hd,eJo,iX,oJo,rJo,dX,tJo,aJo,nJo,U0,sJo,Bpe,lJo,iJo,dJo,_t,J0,cJo,Ppe,fJo,mJo,pd,gJo,Ipe,hJo,pJo,cX,uJo,_Jo,bJo,MF,vJo,co,Y0,FJo,qpe,TJo,MJo,Oa,EJo,Npe,CJo,wJo,jpe,AJo,yJo,Dpe,LJo,xJo,$Jo,je,EF,Gpe,kJo,SJo,fX,RJo,BJo,PJo,CF,Ope,IJo,qJo,mX,NJo,jJo,DJo,wF,Vpe,GJo,OJo,gX,VJo,XJo,zJo,AF,Xpe,QJo,WJo,hX,HJo,UJo,JJo,yF,zpe,YJo,KJo,pX,ZJo,eYo,oYo,LF,Qpe,rYo,tYo,uX,aYo,nYo,sYo,xF,Wpe,lYo,iYo,_X,dYo,cYo,fYo,$F,Hpe,mYo,gYo,bX,hYo,pYo,uYo,kF,_Yo,Upe,bYo,vYo,Jpe,FYo,TYo,SF,OIe,ud,RF,Ype,K0,MYo,Kpe,EYo,VIe,Xo,Z0,CYo,_d,wYo,vX,AYo,yYo,FX,LYo,xYo,$Yo,ey,kYo,Zpe,SYo,RYo,BYo,bt,oy,PYo,eue,IYo,qYo,bd,NYo,oue,jYo,DYo,TX,GYo,OYo,VYo,BF,XYo,fo,ry,zYo,rue,QYo,WYo,Va,HYo,tue,UYo,JYo,aue,YYo,KYo,nue,ZYo,eKo,oKo,ty,PF,sue,rKo,tKo,MX,aKo,nKo,sKo,IF,lue,lKo,iKo,EX,dKo,cKo,fKo,qF,mKo,iue,gKo,hKo,due,pKo,uKo,NF,XIe,vd,jF,cue,ay,_Ko,fue,bKo,zIe,zo,ny,vKo,Fd,FKo,CX,TKo,MKo,wX,EKo,CKo,wKo,sy,AKo,mue,yKo,LKo,xKo,vt,ly,$Ko,gue,kKo,SKo,Td,RKo,hue,BKo,PKo,AX,IKo,qKo,NKo,DF,jKo,mo,iy,DKo,pue,GKo,OKo,Xa,VKo,uue,XKo,zKo,_ue,QKo,WKo,bue,HKo,UKo,JKo,za,GF,vue,YKo,KKo,yX,ZKo,eZo,oZo,OF,Fue,rZo,tZo,LX,aZo,nZo,sZo,VF,Tue,lZo,iZo,xX,dZo,cZo,fZo,XF,Mue,mZo,gZo,$X,hZo,pZo,uZo,zF,_Zo,Eue,bZo,vZo,Cue,FZo,TZo,QF,QIe,Md,WF,wue,dy,MZo,Aue,EZo,WIe,Qo,cy,CZo,Ed,wZo,kX,AZo,yZo,SX,LZo,xZo,$Zo,fy,kZo,yue,SZo,RZo,BZo,Ft,my,PZo,Lue,IZo,qZo,Cd,NZo,xue,jZo,DZo,RX,GZo,OZo,VZo,HF,XZo,go,gy,zZo,$ue,QZo,WZo,Qa,HZo,kue,UZo,JZo,Sue,YZo,KZo,Rue,ZZo,eer,oer,wd,UF,Bue,rer,ter,BX,aer,ner,ser,JF,Pue,ler,ier,PX,der,cer,fer,YF,Iue,mer,ger,IX,her,per,uer,KF,_er,que,ber,ver,Nue,Fer,Ter,ZF,HIe,Ad,e6,jue,hy,Mer,Due,Eer,UIe,Wo,py,Cer,yd,wer,qX,Aer,yer,NX,Ler,xer,$er,uy,ker,Gue,Ser,Rer,Ber,Tt,_y,Per,Oue,Ier,qer,Ld,Ner,Vue,jer,Der,jX,Ger,Oer,Ver,o6,Xer,ho,by,zer,Xue,Qer,Wer,Wa,Her,zue,Uer,Jer,Que,Yer,Ker,Wue,Zer,eor,oor,vy,r6,Hue,ror,tor,DX,aor,nor,sor,t6,Uue,lor,ior,GX,dor,cor,mor,a6,gor,Jue,hor,por,Yue,uor,_or,n6,JIe,xd,s6,Kue,Fy,bor,Zue,vor,YIe,Ho,Ty,For,$d,Tor,OX,Mor,Eor,VX,Cor,wor,Aor,My,yor,e_e,Lor,xor,$or,Mt,Ey,kor,o_e,Sor,Ror,kd,Bor,r_e,Por,Ior,XX,qor,Nor,jor,l6,Dor,po,Cy,Gor,t_e,Oor,Vor,Ha,Xor,a_e,zor,Qor,n_e,Wor,Hor,s_e,Uor,Jor,Yor,l_e,i6,i_e,Kor,Zor,zX,err,orr,rrr,d6,trr,d_e,arr,nrr,c_e,srr,lrr,c6,KIe,Sd,f6,f_e,wy,irr,m_e,drr,ZIe,Uo,Ay,crr,Rd,frr,QX,mrr,grr,WX,hrr,prr,urr,yy,_rr,g_e,brr,vrr,Frr,Et,Ly,Trr,h_e,Mrr,Err,Bd,Crr,p_e,wrr,Arr,HX,yrr,Lrr,xrr,m6,$rr,uo,xy,krr,u_e,Srr,Rrr,Ua,Brr,__e,Prr,Irr,b_e,qrr,Nrr,v_e,jrr,Drr,Grr,Ja,g6,F_e,Orr,Vrr,UX,Xrr,zrr,Qrr,h6,T_e,Wrr,Hrr,JX,Urr,Jrr,Yrr,p6,M_e,Krr,Zrr,YX,etr,otr,rtr,u6,E_e,ttr,atr,KX,ntr,str,ltr,_6,itr,C_e,dtr,ctr,w_e,ftr,mtr,b6,eqe,Pd,v6,A_e,$y,gtr,y_e,htr,oqe,Jo,ky,ptr,Id,utr,ZX,_tr,btr,ez,vtr,Ftr,Ttr,Sy,Mtr,L_e,Etr,Ctr,wtr,Ct,Ry,Atr,x_e,ytr,Ltr,qd,xtr,$_e,$tr,ktr,oz,Str,Rtr,Btr,F6,Ptr,_o,By,Itr,k_e,qtr,Ntr,Ya,jtr,S_e,Dtr,Gtr,R_e,Otr,Vtr,B_e,Xtr,ztr,Qtr,P_e,T6,I_e,Wtr,Htr,rz,Utr,Jtr,Ytr,M6,Ktr,q_e,Ztr,ear,N_e,oar,rar,E6,rqe,Nd,C6,j_e,Py,tar,D_e,aar,tqe,Yo,Iy,nar,jd,sar,tz,lar,iar,az,dar,car,far,qy,mar,G_e,gar,har,par,wt,Ny,uar,O_e,_ar,bar,Dd,Far,V_e,Tar,Mar,nz,Ear,Car,war,w6,Aar,wr,jy,yar,X_e,Lar,xar,Ka,$ar,z_e,kar,Sar,Q_e,Rar,Bar,W_e,Par,Iar,qar,N,A6,H_e,Nar,jar,sz,Dar,Gar,Oar,y6,U_e,Var,Xar,lz,zar,Qar,War,L6,J_e,Har,Uar,iz,Jar,Yar,Kar,x6,Y_e,Zar,enr,dz,onr,rnr,tnr,$6,K_e,anr,nnr,cz,snr,lnr,inr,k6,Z_e,dnr,cnr,fz,fnr,mnr,gnr,S6,e1e,hnr,pnr,mz,unr,_nr,bnr,R6,o1e,vnr,Fnr,gz,Tnr,Mnr,Enr,B6,r1e,Cnr,wnr,hz,Anr,ynr,Lnr,P6,t1e,xnr,$nr,pz,knr,Snr,Rnr,I6,a1e,Bnr,Pnr,uz,Inr,qnr,Nnr,q6,n1e,jnr,Dnr,_z,Gnr,Onr,Vnr,N6,s1e,Xnr,znr,bz,Qnr,Wnr,Hnr,j6,l1e,Unr,Jnr,vz,Ynr,Knr,Znr,D6,i1e,esr,osr,Fz,rsr,tsr,asr,G6,d1e,nsr,ssr,Tz,lsr,isr,dsr,O6,c1e,csr,fsr,Mz,msr,gsr,hsr,Ps,f1e,psr,usr,Ez,_sr,bsr,Cz,vsr,Fsr,Tsr,V6,m1e,Msr,Esr,wz,Csr,wsr,Asr,X6,g1e,ysr,Lsr,Az,xsr,$sr,ksr,z6,h1e,Ssr,Rsr,yz,Bsr,Psr,Isr,Q6,p1e,qsr,Nsr,Lz,jsr,Dsr,Gsr,W6,u1e,Osr,Vsr,xz,Xsr,zsr,Qsr,H6,_1e,Wsr,Hsr,$z,Usr,Jsr,Ysr,U6,b1e,Ksr,Zsr,kz,elr,olr,rlr,J6,v1e,tlr,alr,Sz,nlr,slr,llr,Y6,F1e,ilr,dlr,Rz,clr,flr,mlr,K6,T1e,glr,hlr,Bz,plr,ulr,_lr,Z6,M1e,blr,vlr,Pz,Flr,Tlr,Mlr,eT,E1e,Elr,Clr,Iz,wlr,Alr,ylr,oT,C1e,Llr,xlr,qz,$lr,klr,Slr,rT,w1e,Rlr,Blr,Nz,Plr,Ilr,qlr,tT,A1e,Nlr,jlr,jz,Dlr,Glr,Olr,aT,y1e,Vlr,Xlr,Dz,zlr,Qlr,Wlr,nT,L1e,Hlr,Ulr,Gz,Jlr,Ylr,Klr,sT,x1e,Zlr,eir,Oz,oir,rir,tir,lT,$1e,air,nir,Vz,sir,lir,iir,iT,k1e,dir,cir,Xz,fir,mir,gir,dT,S1e,hir,pir,zz,uir,_ir,bir,cT,R1e,vir,Fir,Qz,Tir,Mir,Eir,fT,B1e,Cir,wir,Wz,Air,yir,Lir,mT,P1e,xir,$ir,Hz,kir,Sir,Rir,gT,I1e,Bir,Pir,Uz,Iir,qir,Nir,hT,q1e,jir,Dir,Jz,Gir,Oir,Vir,pT,N1e,Xir,zir,Yz,Qir,Wir,Hir,uT,j1e,Uir,Jir,Kz,Yir,Kir,Zir,_T,aqe,Gd,bT,D1e,Dy,edr,G1e,odr,nqe,Ko,Gy,rdr,Od,tdr,Zz,adr,ndr,eQ,sdr,ldr,idr,Oy,ddr,O1e,cdr,fdr,mdr,At,Vy,gdr,V1e,hdr,pdr,Vd,udr,X1e,_dr,bdr,oQ,vdr,Fdr,Tdr,vT,Mdr,Ar,Xy,Edr,z1e,Cdr,wdr,Za,Adr,Q1e,ydr,Ldr,W1e,xdr,$dr,H1e,kdr,Sdr,Rdr,se,FT,U1e,Bdr,Pdr,rQ,Idr,qdr,Ndr,TT,J1e,jdr,Ddr,tQ,Gdr,Odr,Vdr,MT,Y1e,Xdr,zdr,aQ,Qdr,Wdr,Hdr,ET,K1e,Udr,Jdr,nQ,Ydr,Kdr,Zdr,CT,Z1e,ecr,ocr,sQ,rcr,tcr,acr,wT,e8e,ncr,scr,lQ,lcr,icr,dcr,AT,o8e,ccr,fcr,iQ,mcr,gcr,hcr,yT,r8e,pcr,ucr,dQ,_cr,bcr,vcr,LT,t8e,Fcr,Tcr,cQ,Mcr,Ecr,Ccr,xT,a8e,wcr,Acr,fQ,ycr,Lcr,xcr,$T,n8e,$cr,kcr,mQ,Scr,Rcr,Bcr,kT,s8e,Pcr,Icr,gQ,qcr,Ncr,jcr,ST,l8e,Dcr,Gcr,hQ,Ocr,Vcr,Xcr,RT,i8e,zcr,Qcr,pQ,Wcr,Hcr,Ucr,BT,d8e,Jcr,Ycr,uQ,Kcr,Zcr,efr,PT,c8e,ofr,rfr,_Q,tfr,afr,nfr,IT,f8e,sfr,lfr,bQ,ifr,dfr,cfr,qT,m8e,ffr,mfr,vQ,gfr,hfr,pfr,NT,g8e,ufr,_fr,FQ,bfr,vfr,Ffr,jT,h8e,Tfr,Mfr,TQ,Efr,Cfr,wfr,DT,p8e,Afr,yfr,MQ,Lfr,xfr,$fr,GT,u8e,kfr,Sfr,EQ,Rfr,Bfr,Pfr,OT,_8e,Ifr,qfr,CQ,Nfr,jfr,Dfr,VT,sqe,Xd,XT,b8e,zy,Gfr,v8e,Ofr,lqe,Zo,Qy,Vfr,zd,Xfr,wQ,zfr,Qfr,AQ,Wfr,Hfr,Ufr,Wy,Jfr,F8e,Yfr,Kfr,Zfr,yt,Hy,emr,T8e,omr,rmr,Qd,tmr,M8e,amr,nmr,yQ,smr,lmr,imr,zT,dmr,yr,Uy,cmr,E8e,fmr,mmr,en,gmr,C8e,hmr,pmr,w8e,umr,_mr,A8e,bmr,vmr,Fmr,Te,QT,y8e,Tmr,Mmr,LQ,Emr,Cmr,wmr,WT,L8e,Amr,ymr,xQ,Lmr,xmr,$mr,HT,x8e,kmr,Smr,$Q,Rmr,Bmr,Pmr,UT,$8e,Imr,qmr,kQ,Nmr,jmr,Dmr,JT,k8e,Gmr,Omr,SQ,Vmr,Xmr,zmr,YT,S8e,Qmr,Wmr,RQ,Hmr,Umr,Jmr,KT,R8e,Ymr,Kmr,BQ,Zmr,egr,ogr,ZT,B8e,rgr,tgr,PQ,agr,ngr,sgr,e9,P8e,lgr,igr,IQ,dgr,cgr,fgr,o9,I8e,mgr,ggr,qQ,hgr,pgr,ugr,r9,q8e,_gr,bgr,NQ,vgr,Fgr,Tgr,t9,N8e,Mgr,Egr,jQ,Cgr,wgr,Agr,a9,iqe,Wd,n9,j8e,Jy,ygr,D8e,Lgr,dqe,er,Yy,xgr,Hd,$gr,DQ,kgr,Sgr,GQ,Rgr,Bgr,Pgr,Ky,Igr,G8e,qgr,Ngr,jgr,Lt,Zy,Dgr,O8e,Ggr,Ogr,Ud,Vgr,V8e,Xgr,zgr,OQ,Qgr,Wgr,Hgr,s9,Ugr,Lr,eL,Jgr,X8e,Ygr,Kgr,on,Zgr,z8e,ehr,ohr,Q8e,rhr,thr,W8e,ahr,nhr,shr,rn,l9,H8e,lhr,ihr,VQ,dhr,chr,fhr,i9,U8e,mhr,ghr,XQ,hhr,phr,uhr,d9,J8e,_hr,bhr,zQ,vhr,Fhr,Thr,c9,Y8e,Mhr,Ehr,QQ,Chr,whr,Ahr,f9,cqe,Jd,m9,K8e,oL,yhr,Z8e,Lhr,fqe,or,rL,xhr,Yd,$hr,WQ,khr,Shr,HQ,Rhr,Bhr,Phr,tL,Ihr,ebe,qhr,Nhr,jhr,xt,aL,Dhr,obe,Ghr,Ohr,Kd,Vhr,rbe,Xhr,zhr,UQ,Qhr,Whr,Hhr,g9,Uhr,xr,nL,Jhr,tbe,Yhr,Khr,tn,Zhr,abe,epr,opr,nbe,rpr,tpr,sbe,apr,npr,spr,ie,h9,lbe,lpr,ipr,JQ,dpr,cpr,fpr,p9,ibe,mpr,gpr,YQ,hpr,ppr,upr,u9,dbe,_pr,bpr,KQ,vpr,Fpr,Tpr,_9,cbe,Mpr,Epr,ZQ,Cpr,wpr,Apr,b9,fbe,ypr,Lpr,eW,xpr,$pr,kpr,v9,mbe,Spr,Rpr,oW,Bpr,Ppr,Ipr,F9,gbe,qpr,Npr,rW,jpr,Dpr,Gpr,T9,hbe,Opr,Vpr,tW,Xpr,zpr,Qpr,M9,pbe,Wpr,Hpr,aW,Upr,Jpr,Ypr,E9,ube,Kpr,Zpr,nW,eur,our,rur,C9,_be,tur,aur,sW,nur,sur,lur,w9,bbe,iur,dur,lW,cur,fur,mur,A9,vbe,gur,hur,iW,pur,uur,_ur,y9,Fbe,bur,vur,dW,Fur,Tur,Mur,L9,Tbe,Eur,Cur,cW,wur,Aur,yur,x9,Mbe,Lur,xur,fW,$ur,kur,Sur,$9,Ebe,Rur,Bur,mW,Pur,Iur,qur,k9,Cbe,Nur,jur,gW,Dur,Gur,Our,S9,wbe,Vur,Xur,hW,zur,Qur,Wur,R9,Abe,Hur,Uur,pW,Jur,Yur,Kur,B9,mqe,Zd,P9,ybe,sL,Zur,Lbe,e_r,gqe,rr,lL,o_r,ec,r_r,uW,t_r,a_r,_W,n_r,s_r,l_r,iL,i_r,xbe,d_r,c_r,f_r,$t,dL,m_r,$be,g_r,h_r,oc,p_r,kbe,u_r,__r,bW,b_r,v_r,F_r,I9,T_r,$r,cL,M_r,Sbe,E_r,C_r,an,w_r,Rbe,A_r,y_r,Bbe,L_r,x_r,Pbe,$_r,k_r,S_r,ye,q9,Ibe,R_r,B_r,vW,P_r,I_r,q_r,N9,qbe,N_r,j_r,FW,D_r,G_r,O_r,j9,Nbe,V_r,X_r,TW,z_r,Q_r,W_r,D9,jbe,H_r,U_r,MW,J_r,Y_r,K_r,G9,Dbe,Z_r,e1r,EW,o1r,r1r,t1r,O9,Gbe,a1r,n1r,CW,s1r,l1r,i1r,V9,Obe,d1r,c1r,wW,f1r,m1r,g1r,X9,Vbe,h1r,p1r,AW,u1r,_1r,b1r,z9,Xbe,v1r,F1r,yW,T1r,M1r,E1r,Q9,zbe,C1r,w1r,LW,A1r,y1r,L1r,W9,hqe,rc,H9,Qbe,fL,x1r,Wbe,$1r,pqe,tr,mL,k1r,tc,S1r,xW,R1r,B1r,$W,P1r,I1r,q1r,gL,N1r,Hbe,j1r,D1r,G1r,kt,hL,O1r,Ube,V1r,X1r,ac,z1r,Jbe,Q1r,W1r,kW,H1r,U1r,J1r,U9,Y1r,kr,pL,K1r,Ybe,Z1r,e8r,nn,o8r,Kbe,r8r,t8r,Zbe,a8r,n8r,e2e,s8r,l8r,i8r,Z,J9,o2e,d8r,c8r,SW,f8r,m8r,g8r,Y9,r2e,h8r,p8r,RW,u8r,_8r,b8r,K9,t2e,v8r,F8r,BW,T8r,M8r,E8r,Z9,a2e,C8r,w8r,PW,A8r,y8r,L8r,eM,n2e,x8r,$8r,IW,k8r,S8r,R8r,oM,s2e,B8r,P8r,qW,I8r,q8r,N8r,rM,l2e,j8r,D8r,NW,G8r,O8r,V8r,tM,i2e,X8r,z8r,jW,Q8r,W8r,H8r,aM,d2e,U8r,J8r,DW,Y8r,K8r,Z8r,nM,c2e,ebr,obr,GW,rbr,tbr,abr,sM,f2e,nbr,sbr,OW,lbr,ibr,dbr,lM,m2e,cbr,fbr,VW,mbr,gbr,hbr,iM,g2e,pbr,ubr,XW,_br,bbr,vbr,dM,h2e,Fbr,Tbr,zW,Mbr,Ebr,Cbr,cM,p2e,wbr,Abr,QW,ybr,Lbr,xbr,fM,u2e,$br,kbr,WW,Sbr,Rbr,Bbr,mM,_2e,Pbr,Ibr,HW,qbr,Nbr,jbr,gM,b2e,Dbr,Gbr,UW,Obr,Vbr,Xbr,hM,v2e,zbr,Qbr,JW,Wbr,Hbr,Ubr,pM,F2e,Jbr,Ybr,YW,Kbr,Zbr,e2r,uM,T2e,o2r,r2r,KW,t2r,a2r,n2r,_M,M2e,s2r,l2r,ZW,i2r,d2r,c2r,bM,E2e,f2r,m2r,eH,g2r,h2r,p2r,vM,C2e,u2r,_2r,oH,b2r,v2r,F2r,FM,w2e,T2r,M2r,rH,E2r,C2r,w2r,TM,A2e,A2r,y2r,tH,L2r,x2r,$2r,MM,uqe,nc,EM,y2e,uL,k2r,L2e,S2r,_qe,ar,_L,R2r,sc,B2r,aH,P2r,I2r,nH,q2r,N2r,j2r,bL,D2r,x2e,G2r,O2r,V2r,St,vL,X2r,$2e,z2r,Q2r,lc,W2r,k2e,H2r,U2r,sH,J2r,Y2r,K2r,CM,Z2r,Sr,FL,evr,S2e,ovr,rvr,sn,tvr,R2e,avr,nvr,B2e,svr,lvr,P2e,ivr,dvr,cvr,pe,wM,I2e,fvr,mvr,lH,gvr,hvr,pvr,AM,q2e,uvr,_vr,iH,bvr,vvr,Fvr,yM,N2e,Tvr,Mvr,dH,Evr,Cvr,wvr,LM,j2e,Avr,yvr,cH,Lvr,xvr,$vr,xM,D2e,kvr,Svr,fH,Rvr,Bvr,Pvr,$M,G2e,Ivr,qvr,mH,Nvr,jvr,Dvr,kM,O2e,Gvr,Ovr,gH,Vvr,Xvr,zvr,SM,V2e,Qvr,Wvr,hH,Hvr,Uvr,Jvr,RM,X2e,Yvr,Kvr,pH,Zvr,eFr,oFr,BM,z2e,rFr,tFr,uH,aFr,nFr,sFr,PM,Q2e,lFr,iFr,_H,dFr,cFr,fFr,IM,W2e,mFr,gFr,bH,hFr,pFr,uFr,qM,H2e,_Fr,bFr,vH,vFr,FFr,TFr,NM,U2e,MFr,EFr,FH,CFr,wFr,AFr,jM,J2e,yFr,LFr,TH,xFr,$Fr,kFr,DM,Y2e,SFr,RFr,MH,BFr,PFr,IFr,GM,K2e,qFr,NFr,EH,jFr,DFr,GFr,OM,bqe,ic,VM,Z2e,TL,OFr,eve,VFr,vqe,nr,ML,XFr,dc,zFr,CH,QFr,WFr,wH,HFr,UFr,JFr,EL,YFr,ove,KFr,ZFr,e6r,Rt,CL,o6r,rve,r6r,t6r,cc,a6r,tve,n6r,s6r,AH,l6r,i6r,d6r,XM,c6r,Rr,wL,f6r,ave,m6r,g6r,ln,h6r,nve,p6r,u6r,sve,_6r,b6r,lve,v6r,F6r,T6r,AL,zM,ive,M6r,E6r,yH,C6r,w6r,A6r,QM,dve,y6r,L6r,LH,x6r,$6r,k6r,WM,Fqe,fc,HM,cve,yL,S6r,fve,R6r,Tqe,sr,LL,B6r,mc,P6r,xH,I6r,q6r,$H,N6r,j6r,D6r,xL,G6r,mve,O6r,V6r,X6r,Bt,$L,z6r,gve,Q6r,W6r,gc,H6r,hve,U6r,J6r,kH,Y6r,K6r,Z6r,UM,eTr,Br,kL,oTr,pve,rTr,tTr,dn,aTr,uve,nTr,sTr,_ve,lTr,iTr,bve,dTr,cTr,fTr,vve,JM,Fve,mTr,gTr,SH,hTr,pTr,uTr,YM,Mqe,hc,KM,Tve,SL,_Tr,Mve,bTr,Eqe,lr,RL,vTr,pc,FTr,RH,TTr,MTr,BH,ETr,CTr,wTr,BL,ATr,Eve,yTr,LTr,xTr,Pt,PL,$Tr,Cve,kTr,STr,uc,RTr,wve,BTr,PTr,PH,ITr,qTr,NTr,ZM,jTr,Pr,IL,DTr,Ave,GTr,OTr,cn,VTr,yve,XTr,zTr,Lve,QTr,WTr,xve,HTr,UTr,JTr,de,e4,$ve,YTr,KTr,IH,ZTr,e9r,o9r,o4,kve,r9r,t9r,qH,a9r,n9r,s9r,r4,Sve,l9r,i9r,NH,d9r,c9r,f9r,t4,Rve,m9r,g9r,jH,h9r,p9r,u9r,a4,Bve,_9r,b9r,DH,v9r,F9r,T9r,n4,Pve,M9r,E9r,GH,C9r,w9r,A9r,s4,Ive,y9r,L9r,OH,x9r,$9r,k9r,l4,qve,S9r,R9r,VH,B9r,P9r,I9r,i4,Nve,q9r,N9r,XH,j9r,D9r,G9r,d4,jve,O9r,V9r,zH,X9r,z9r,Q9r,c4,Dve,W9r,H9r,QH,U9r,J9r,Y9r,f4,Gve,K9r,Z9r,WH,eMr,oMr,rMr,m4,Ove,tMr,aMr,HH,nMr,sMr,lMr,g4,Vve,iMr,dMr,UH,cMr,fMr,mMr,h4,Xve,gMr,hMr,JH,pMr,uMr,_Mr,p4,zve,bMr,vMr,YH,FMr,TMr,MMr,u4,Qve,EMr,CMr,KH,wMr,AMr,yMr,_4,Wve,LMr,xMr,ZH,$Mr,kMr,SMr,b4,Hve,RMr,BMr,eU,PMr,IMr,qMr,v4,Uve,NMr,jMr,oU,DMr,GMr,OMr,F4,Cqe,_c,T4,Jve,qL,VMr,Yve,XMr,wqe,ir,NL,zMr,bc,QMr,rU,WMr,HMr,tU,UMr,JMr,YMr,jL,KMr,Kve,ZMr,e4r,o4r,It,DL,r4r,Zve,t4r,a4r,vc,n4r,eFe,s4r,l4r,aU,i4r,d4r,c4r,M4,f4r,Ir,GL,m4r,oFe,g4r,h4r,fn,p4r,rFe,u4r,_4r,tFe,b4r,v4r,aFe,F4r,T4r,M4r,ce,E4,nFe,E4r,C4r,nU,w4r,A4r,y4r,C4,sFe,L4r,x4r,sU,$4r,k4r,S4r,w4,lFe,R4r,B4r,lU,P4r,I4r,q4r,A4,iFe,N4r,j4r,iU,D4r,G4r,O4r,y4,dFe,V4r,X4r,dU,z4r,Q4r,W4r,L4,cFe,H4r,U4r,cU,J4r,Y4r,K4r,x4,fFe,Z4r,eEr,fU,oEr,rEr,tEr,$4,mFe,aEr,nEr,mU,sEr,lEr,iEr,k4,gFe,dEr,cEr,gU,fEr,mEr,gEr,S4,hFe,hEr,pEr,hU,uEr,_Er,bEr,R4,pFe,vEr,FEr,pU,TEr,MEr,EEr,B4,uFe,CEr,wEr,uU,AEr,yEr,LEr,P4,_Fe,xEr,$Er,_U,kEr,SEr,REr,I4,bFe,BEr,PEr,bU,IEr,qEr,NEr,q4,vFe,jEr,DEr,vU,GEr,OEr,VEr,N4,FFe,XEr,zEr,FU,QEr,WEr,HEr,j4,TFe,UEr,JEr,TU,YEr,KEr,ZEr,D4,MFe,e5r,o5r,MU,r5r,t5r,a5r,G4,EFe,n5r,s5r,EU,l5r,i5r,d5r,O4,CFe,c5r,f5r,CU,m5r,g5r,h5r,V4,Aqe,Fc,X4,wFe,OL,p5r,AFe,u5r,yqe,dr,VL,_5r,Tc,b5r,wU,v5r,F5r,AU,T5r,M5r,E5r,XL,C5r,yFe,w5r,A5r,y5r,qt,zL,L5r,LFe,x5r,$5r,Mc,k5r,xFe,S5r,R5r,yU,B5r,P5r,I5r,z4,q5r,qr,QL,N5r,$Fe,j5r,D5r,mn,G5r,kFe,O5r,V5r,SFe,X5r,z5r,RFe,Q5r,W5r,H5r,BFe,Q4,PFe,U5r,J5r,LU,Y5r,K5r,Z5r,W4,Lqe,Ec,H4,IFe,WL,eCr,qFe,oCr,xqe,cr,HL,rCr,Cc,tCr,xU,aCr,nCr,$U,sCr,lCr,iCr,UL,dCr,NFe,cCr,fCr,mCr,Nt,JL,gCr,jFe,hCr,pCr,wc,uCr,DFe,_Cr,bCr,kU,vCr,FCr,TCr,U4,MCr,Nr,YL,ECr,GFe,CCr,wCr,gn,ACr,OFe,yCr,LCr,VFe,xCr,$Cr,XFe,kCr,SCr,RCr,zFe,J4,QFe,BCr,PCr,SU,ICr,qCr,NCr,Y4,$qe,Ac,K4,WFe,KL,jCr,HFe,DCr,kqe,fr,ZL,GCr,yc,OCr,RU,VCr,XCr,BU,zCr,QCr,WCr,ex,HCr,UFe,UCr,JCr,YCr,jt,ox,KCr,JFe,ZCr,e3r,Lc,o3r,YFe,r3r,t3r,PU,a3r,n3r,s3r,Z4,l3r,jr,rx,i3r,KFe,d3r,c3r,hn,f3r,ZFe,m3r,g3r,e6e,h3r,p3r,o6e,u3r,_3r,b3r,re,eE,r6e,v3r,F3r,IU,T3r,M3r,E3r,oE,t6e,C3r,w3r,qU,A3r,y3r,L3r,rE,a6e,x3r,$3r,NU,k3r,S3r,R3r,tE,n6e,B3r,P3r,jU,I3r,q3r,N3r,aE,s6e,j3r,D3r,DU,G3r,O3r,V3r,nE,l6e,X3r,z3r,GU,Q3r,W3r,H3r,sE,i6e,U3r,J3r,OU,Y3r,K3r,Z3r,lE,d6e,ewr,owr,VU,rwr,twr,awr,iE,c6e,nwr,swr,XU,lwr,iwr,dwr,dE,f6e,cwr,fwr,zU,mwr,gwr,hwr,cE,m6e,pwr,uwr,QU,_wr,bwr,vwr,fE,g6e,Fwr,Twr,WU,Mwr,Ewr,Cwr,mE,h6e,wwr,Awr,HU,ywr,Lwr,xwr,gE,p6e,$wr,kwr,UU,Swr,Rwr,Bwr,hE,u6e,Pwr,Iwr,JU,qwr,Nwr,jwr,pE,_6e,Dwr,Gwr,YU,Owr,Vwr,Xwr,uE,b6e,zwr,Qwr,KU,Wwr,Hwr,Uwr,_E,v6e,Jwr,Ywr,ZU,Kwr,Zwr,eAr,bE,F6e,oAr,rAr,eJ,tAr,aAr,nAr,vE,T6e,sAr,lAr,oJ,iAr,dAr,cAr,FE,M6e,fAr,mAr,rJ,gAr,hAr,pAr,TE,E6e,uAr,_Ar,tJ,bAr,vAr,FAr,ME,C6e,TAr,MAr,aJ,EAr,CAr,wAr,EE,w6e,AAr,yAr,nJ,LAr,xAr,$Ar,CE,A6e,kAr,SAr,sJ,RAr,BAr,PAr,wE,Sqe,xc,AE,y6e,tx,IAr,L6e,qAr,Rqe,mr,ax,NAr,$c,jAr,lJ,DAr,GAr,iJ,OAr,VAr,XAr,nx,zAr,x6e,QAr,WAr,HAr,Dt,sx,UAr,$6e,JAr,YAr,kc,KAr,k6e,ZAr,e0r,dJ,o0r,r0r,t0r,yE,a0r,Dr,lx,n0r,S6e,s0r,l0r,pn,i0r,R6e,d0r,c0r,B6e,f0r,m0r,P6e,g0r,h0r,p0r,ke,LE,I6e,u0r,_0r,cJ,b0r,v0r,F0r,xE,q6e,T0r,M0r,fJ,E0r,C0r,w0r,$E,N6e,A0r,y0r,mJ,L0r,x0r,$0r,kE,j6e,k0r,S0r,gJ,R0r,B0r,P0r,SE,D6e,I0r,q0r,hJ,N0r,j0r,D0r,RE,G6e,G0r,O0r,pJ,V0r,X0r,z0r,BE,O6e,Q0r,W0r,uJ,H0r,U0r,J0r,PE,V6e,Y0r,K0r,_J,Z0r,eyr,oyr,IE,X6e,ryr,tyr,bJ,ayr,nyr,syr,qE,Bqe,Sc,NE,z6e,ix,lyr,Q6e,iyr,Pqe,gr,dx,dyr,Rc,cyr,vJ,fyr,myr,FJ,gyr,hyr,pyr,cx,uyr,W6e,_yr,byr,vyr,Gt,fx,Fyr,H6e,Tyr,Myr,Bc,Eyr,U6e,Cyr,wyr,TJ,Ayr,yyr,Lyr,jE,xyr,Gr,mx,$yr,J6e,kyr,Syr,un,Ryr,Y6e,Byr,Pyr,K6e,Iyr,qyr,Z6e,Nyr,jyr,Dyr,Me,DE,eTe,Gyr,Oyr,MJ,Vyr,Xyr,zyr,GE,oTe,Qyr,Wyr,EJ,Hyr,Uyr,Jyr,OE,rTe,Yyr,Kyr,CJ,Zyr,eLr,oLr,VE,tTe,rLr,tLr,wJ,aLr,nLr,sLr,XE,aTe,lLr,iLr,AJ,dLr,cLr,fLr,zE,nTe,mLr,gLr,yJ,hLr,pLr,uLr,QE,sTe,_Lr,bLr,LJ,vLr,FLr,TLr,WE,lTe,MLr,ELr,xJ,CLr,wLr,ALr,HE,iTe,yLr,LLr,$J,xLr,$Lr,kLr,UE,dTe,SLr,RLr,kJ,BLr,PLr,ILr,JE,cTe,qLr,NLr,SJ,jLr,DLr,GLr,YE,fTe,OLr,VLr,RJ,XLr,zLr,QLr,KE,Iqe,Pc,ZE,mTe,gx,WLr,gTe,HLr,qqe,hr,hx,ULr,Ic,JLr,BJ,YLr,KLr,PJ,ZLr,exr,oxr,px,rxr,hTe,txr,axr,nxr,Ot,ux,sxr,pTe,lxr,ixr,qc,dxr,uTe,cxr,fxr,IJ,mxr,gxr,hxr,e5,pxr,Or,_x,uxr,_Te,_xr,bxr,_n,vxr,bTe,Fxr,Txr,vTe,Mxr,Exr,FTe,Cxr,wxr,Axr,Le,o5,TTe,yxr,Lxr,qJ,xxr,$xr,kxr,r5,MTe,Sxr,Rxr,NJ,Bxr,Pxr,Ixr,t5,ETe,qxr,Nxr,jJ,jxr,Dxr,Gxr,a5,CTe,Oxr,Vxr,DJ,Xxr,zxr,Qxr,n5,wTe,Wxr,Hxr,GJ,Uxr,Jxr,Yxr,s5,ATe,Kxr,Zxr,OJ,e7r,o7r,r7r,l5,yTe,t7r,a7r,VJ,n7r,s7r,l7r,i5,LTe,i7r,d7r,XJ,c7r,f7r,m7r,d5,xTe,g7r,h7r,zJ,p7r,u7r,_7r,c5,$Te,b7r,v7r,QJ,F7r,T7r,M7r,f5,Nqe,Nc,m5,kTe,bx,E7r,STe,C7r,jqe,pr,vx,w7r,jc,A7r,WJ,y7r,L7r,HJ,x7r,$7r,k7r,Fx,S7r,RTe,R7r,B7r,P7r,Vt,Tx,I7r,BTe,q7r,N7r,Dc,j7r,PTe,D7r,G7r,UJ,O7r,V7r,X7r,g5,z7r,Vr,Mx,Q7r,ITe,W7r,H7r,bn,U7r,qTe,J7r,Y7r,NTe,K7r,Z7r,jTe,e$r,o$r,r$r,Se,h5,DTe,t$r,a$r,JJ,n$r,s$r,l$r,p5,GTe,i$r,d$r,YJ,c$r,f$r,m$r,u5,OTe,g$r,h$r,KJ,p$r,u$r,_$r,_5,VTe,b$r,v$r,ZJ,F$r,T$r,M$r,b5,XTe,E$r,C$r,eY,w$r,A$r,y$r,v5,zTe,L$r,x$r,oY,$$r,k$r,S$r,F5,QTe,R$r,B$r,rY,P$r,I$r,q$r,T5,WTe,N$r,j$r,tY,D$r,G$r,O$r,M5,HTe,V$r,X$r,aY,z$r,Q$r,W$r,E5,Dqe,Gc,C5,UTe,Ex,H$r,JTe,U$r,Gqe,ur,Cx,J$r,Oc,Y$r,nY,K$r,Z$r,sY,ekr,okr,rkr,wx,tkr,YTe,akr,nkr,skr,Xt,Ax,lkr,KTe,ikr,dkr,Vc,ckr,ZTe,fkr,mkr,lY,gkr,hkr,pkr,w5,ukr,Xr,yx,_kr,e9e,bkr,vkr,vn,Fkr,o9e,Tkr,Mkr,r9e,Ekr,Ckr,t9e,wkr,Akr,ykr,xe,A5,a9e,Lkr,xkr,iY,$kr,kkr,Skr,y5,n9e,Rkr,Bkr,dY,Pkr,Ikr,qkr,L5,s9e,Nkr,jkr,cY,Dkr,Gkr,Okr,x5,l9e,Vkr,Xkr,fY,zkr,Qkr,Wkr,$5,i9e,Hkr,Ukr,mY,Jkr,Ykr,Kkr,k5,d9e,Zkr,eSr,gY,oSr,rSr,tSr,S5,c9e,aSr,nSr,hY,sSr,lSr,iSr,R5,f9e,dSr,cSr,pY,fSr,mSr,gSr,B5,m9e,hSr,pSr,uY,uSr,_Sr,bSr,P5,g9e,vSr,FSr,_Y,TSr,MSr,ESr,I5,Oqe,Xc,q5,h9e,Lx,CSr,p9e,wSr,Vqe,_r,xx,ASr,zc,ySr,bY,LSr,xSr,vY,$Sr,kSr,SSr,$x,RSr,u9e,BSr,PSr,ISr,zt,kx,qSr,_9e,NSr,jSr,Qc,DSr,b9e,GSr,OSr,FY,VSr,XSr,zSr,N5,QSr,zr,Sx,WSr,v9e,HSr,USr,Fn,JSr,F9e,YSr,KSr,T9e,ZSr,eRr,M9e,oRr,rRr,tRr,$e,j5,E9e,aRr,nRr,TY,sRr,lRr,iRr,D5,C9e,dRr,cRr,MY,fRr,mRr,gRr,G5,w9e,hRr,pRr,EY,uRr,_Rr,bRr,O5,A9e,vRr,FRr,CY,TRr,MRr,ERr,V5,y9e,CRr,wRr,wY,ARr,yRr,LRr,X5,L9e,xRr,$Rr,AY,kRr,SRr,RRr,z5,x9e,BRr,PRr,yY,IRr,qRr,NRr,Q5,$9e,jRr,DRr,LY,GRr,ORr,VRr,W5,k9e,XRr,zRr,xY,QRr,WRr,HRr,H5,S9e,URr,JRr,$Y,YRr,KRr,ZRr,U5,Xqe,Wc,J5,R9e,Rx,eBr,B9e,oBr,zqe,br,Bx,rBr,Hc,tBr,kY,aBr,nBr,SY,sBr,lBr,iBr,Px,dBr,P9e,cBr,fBr,mBr,Qt,Ix,gBr,I9e,hBr,pBr,Uc,uBr,q9e,_Br,bBr,RY,vBr,FBr,TBr,Y5,MBr,Qr,qx,EBr,N9e,CBr,wBr,Tn,ABr,j9e,yBr,LBr,D9e,xBr,$Br,G9e,kBr,SBr,RBr,De,K5,O9e,BBr,PBr,BY,IBr,qBr,NBr,Z5,V9e,jBr,DBr,PY,GBr,OBr,VBr,eC,X9e,XBr,zBr,IY,QBr,WBr,HBr,oC,z9e,UBr,JBr,qY,YBr,KBr,ZBr,rC,Q9e,ePr,oPr,NY,rPr,tPr,aPr,tC,W9e,nPr,sPr,jY,lPr,iPr,dPr,aC,H9e,cPr,fPr,DY,mPr,gPr,hPr,nC,U9e,pPr,uPr,GY,_Pr,bPr,vPr,sC,Qqe,Jc,lC,J9e,Nx,FPr,Y9e,TPr,Wqe,vr,jx,MPr,Yc,EPr,OY,CPr,wPr,VY,APr,yPr,LPr,Dx,xPr,K9e,$Pr,kPr,SPr,Wt,Gx,RPr,Z9e,BPr,PPr,Kc,IPr,eMe,qPr,NPr,XY,jPr,DPr,GPr,iC,OPr,Wr,Ox,VPr,oMe,XPr,zPr,Mn,QPr,rMe,WPr,HPr,tMe,UPr,JPr,aMe,YPr,KPr,ZPr,Ge,dC,nMe,eIr,oIr,zY,rIr,tIr,aIr,cC,sMe,nIr,sIr,QY,lIr,iIr,dIr,fC,lMe,cIr,fIr,WY,mIr,gIr,hIr,mC,iMe,pIr,uIr,HY,_Ir,bIr,vIr,gC,dMe,FIr,TIr,UY,MIr,EIr,CIr,hC,cMe,wIr,AIr,JY,yIr,LIr,xIr,pC,fMe,$Ir,kIr,YY,SIr,RIr,BIr,uC,mMe,PIr,IIr,KY,qIr,NIr,jIr,_C,Hqe,Zc,bC,gMe,Vx,DIr,hMe,GIr,Uqe,Fr,Xx,OIr,ef,VIr,ZY,XIr,zIr,eK,QIr,WIr,HIr,zx,UIr,pMe,JIr,YIr,KIr,Ht,Qx,ZIr,uMe,eqr,oqr,of,rqr,_Me,tqr,aqr,oK,nqr,sqr,lqr,vC,iqr,Hr,Wx,dqr,bMe,cqr,fqr,En,mqr,vMe,gqr,hqr,FMe,pqr,uqr,TMe,_qr,bqr,vqr,MMe,FC,EMe,Fqr,Tqr,rK,Mqr,Eqr,Cqr,TC,Jqe,rf,MC,CMe,Hx,wqr,wMe,Aqr,Yqe,Tr,Ux,yqr,tf,Lqr,tK,xqr,$qr,aK,kqr,Sqr,Rqr,Jx,Bqr,AMe,Pqr,Iqr,qqr,Ut,Yx,Nqr,yMe,jqr,Dqr,af,Gqr,LMe,Oqr,Vqr,nK,Xqr,zqr,Qqr,EC,Wqr,Ur,Kx,Hqr,xMe,Uqr,Jqr,Cn,Yqr,$Me,Kqr,Zqr,kMe,eNr,oNr,SMe,rNr,tNr,aNr,Zx,CC,RMe,nNr,sNr,sK,lNr,iNr,dNr,wC,BMe,cNr,fNr,lK,mNr,gNr,hNr,AC,Kqe,nf,yC,PMe,e7,pNr,IMe,uNr,Zqe,Mr,o7,_Nr,sf,bNr,iK,vNr,FNr,dK,TNr,MNr,ENr,r7,CNr,qMe,wNr,ANr,yNr,Jt,t7,LNr,NMe,xNr,$Nr,lf,kNr,jMe,SNr,RNr,cK,BNr,PNr,INr,LC,qNr,Jr,a7,NNr,DMe,jNr,DNr,wn,GNr,GMe,ONr,VNr,OMe,XNr,zNr,VMe,QNr,WNr,HNr,XMe,xC,zMe,UNr,JNr,fK,YNr,KNr,ZNr,$C,eNe;return d=new ee({}),Ma=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),eA=new ee({}),oA=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),_f=new ejr({props:{warning:!0,$$slots:{default:[BAt]},$$scope:{ctx:L}}}),rA=new ee({}),tA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/configuration_auto.py#L571"}}),sA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/configuration_auto.py#L594"}}),ug=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[PAt]},$$scope:{ctx:L}}}),lA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/configuration_auto.py#L716"}}),iA=new ee({}),dA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/tokenization_auto.py#L378"}}),mA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16988/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/tokenization_auto.py#L392"}}),Ug=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[IAt]},$$scope:{ctx:L}}}),gA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/tokenization_auto.py#L588"}}),hA=new ee({}),pA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/feature_extraction_auto.py#L178"}}),bA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16988/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/feature_extraction_auto.py#L192"}}),Eh=new ejr({props:{$$slots:{default:[qAt]},$$scope:{ctx:L}}}),Ch=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[NAt]},$$scope:{ctx:L}}}),vA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/feature_extraction_auto.py#L319"}}),FA=new ee({}),TA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/processing_auto.py#L77"}}),CA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/processing_auto.py#L91"}}),Oh=new ejr({props:{$$slots:{default:[jAt]},$$scope:{ctx:L}}}),Vh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[DAt]},$$scope:{ctx:L}}}),wA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/processing_auto.py#L244"}}),AA=new ee({}),yA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L721"}}),xA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),Qh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[GAt]},$$scope:{ctx:L}}}),$A=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),Iu=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[OAt]},$$scope:{ctx:L}}}),kA=new ee({}),SA=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L728"}}),BA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),Nu=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[VAt]},$$scope:{ctx:L}}}),PA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),A_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[XAt]},$$scope:{ctx:L}}}),IA=new ee({}),qA=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L743"}}),jA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),L_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[zAt]},$$scope:{ctx:L}}}),DA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),m1=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[QAt]},$$scope:{ctx:L}}}),GA=new ee({}),OA=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L750"}}),XA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),h1=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[WAt]},$$scope:{ctx:L}}}),zA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),Y1=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[HAt]},$$scope:{ctx:L}}}),QA=new ee({}),WA=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L757"}}),UA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),Z1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[UAt]},$$scope:{ctx:L}}}),JA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),b8=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[JAt]},$$scope:{ctx:L}}}),YA=new ee({}),KA=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L766"}}),e0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),F8=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[YAt]},$$scope:{ctx:L}}}),o0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),pb=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[KAt]},$$scope:{ctx:L}}}),r0=new ee({}),t0=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L800"}}),n0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),_b=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[ZAt]},$$scope:{ctx:L}}}),s0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),Hb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[e0t]},$$scope:{ctx:L}}}),l0=new ee({}),i0=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L807"}}),c0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),Jb=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[o0t]},$$scope:{ctx:L}}}),f0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),t2=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[r0t]},$$scope:{ctx:L}}}),m0=new ee({}),g0=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L793"}}),p0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),n2=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[t0t]},$$scope:{ctx:L}}}),u0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),D2=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[a0t]},$$scope:{ctx:L}}}),_0=new ee({}),b0=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L775"}}),F0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),O2=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[n0t]},$$scope:{ctx:L}}}),T0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),xv=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[s0t]},$$scope:{ctx:L}}}),M0=new ee({}),E0=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L782"}}),w0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),kv=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[l0t]},$$scope:{ctx:L}}}),A0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),Bv=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[i0t]},$$scope:{ctx:L}}}),y0=new ee({}),L0=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L816"}}),$0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),Iv=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[d0t]},$$scope:{ctx:L}}}),k0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),Uv=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[c0t]},$$scope:{ctx:L}}}),S0=new ee({}),R0=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L855"}}),P0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),Yv=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[f0t]},$$scope:{ctx:L}}}),I0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),eF=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[m0t]},$$scope:{ctx:L}}}),q0=new ee({}),N0=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L862"}}),D0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),rF=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[g0t]},$$scope:{ctx:L}}}),G0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),mF=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[h0t]},$$scope:{ctx:L}}}),O0=new ee({}),V0=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L885"}}),z0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),hF=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[p0t]},$$scope:{ctx:L}}}),Q0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),FF=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[u0t]},$$scope:{ctx:L}}}),W0=new ee({}),H0=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L869"}}),J0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),MF=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[_0t]},$$scope:{ctx:L}}}),Y0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),SF=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[b0t]},$$scope:{ctx:L}}}),K0=new ee({}),Z0=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L876"}}),oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),BF=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[v0t]},$$scope:{ctx:L}}}),ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),NF=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[F0t]},$$scope:{ctx:L}}}),ay=new ee({}),ny=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L894"}}),ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),DF=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[T0t]},$$scope:{ctx:L}}}),iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),QF=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[M0t]},$$scope:{ctx:L}}}),dy=new ee({}),cy=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L901"}}),my=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),HF=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[E0t]},$$scope:{ctx:L}}}),gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),ZF=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[C0t]},$$scope:{ctx:L}}}),hy=new ee({}),py=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L848"}}),_y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),o6=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[w0t]},$$scope:{ctx:L}}}),by=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),n6=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[A0t]},$$scope:{ctx:L}}}),Fy=new ee({}),Ty=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L823"}}),Ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),l6=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[y0t]},$$scope:{ctx:L}}}),Cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),c6=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[L0t]},$$scope:{ctx:L}}}),wy=new ee({}),Ay=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L830"}}),Ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),m6=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[x0t]},$$scope:{ctx:L}}}),xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),b6=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[$0t]},$$scope:{ctx:L}}}),$y=new ee({}),ky=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L839"}}),Ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),F6=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[k0t]},$$scope:{ctx:L}}}),By=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),E6=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[S0t]},$$scope:{ctx:L}}}),Py=new ee({}),Iy=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),Ny=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),w6=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[R0t]},$$scope:{ctx:L}}}),jy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),_T=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[B0t]},$$scope:{ctx:L}}}),Dy=new ee({}),Gy=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),Vy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),vT=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[P0t]},$$scope:{ctx:L}}}),Xy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),VT=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[I0t]},$$scope:{ctx:L}}}),zy=new ee({}),Qy=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),Hy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),zT=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[q0t]},$$scope:{ctx:L}}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),a9=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[N0t]},$$scope:{ctx:L}}}),Jy=new ee({}),Yy=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),Zy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),s9=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[j0t]},$$scope:{ctx:L}}}),eL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),f9=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[D0t]},$$scope:{ctx:L}}}),oL=new ee({}),rL=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),aL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),g9=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[G0t]},$$scope:{ctx:L}}}),nL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),B9=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[O0t]},$$scope:{ctx:L}}}),sL=new ee({}),lL=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),dL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),I9=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[V0t]},$$scope:{ctx:L}}}),cL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),W9=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[X0t]},$$scope:{ctx:L}}}),fL=new ee({}),mL=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),hL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),U9=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[z0t]},$$scope:{ctx:L}}}),pL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),MM=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Q0t]},$$scope:{ctx:L}}}),uL=new ee({}),_L=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),vL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),CM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[W0t]},$$scope:{ctx:L}}}),FL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),OM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[H0t]},$$scope:{ctx:L}}}),TL=new ee({}),ML=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),CL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),XM=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[U0t]},$$scope:{ctx:L}}}),wL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),WM=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[J0t]},$$scope:{ctx:L}}}),yL=new ee({}),LL=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),$L=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),UM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Y0t]},$$scope:{ctx:L}}}),kL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),YM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[K0t]},$$scope:{ctx:L}}}),SL=new ee({}),RL=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),PL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),ZM=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[Z0t]},$$scope:{ctx:L}}}),IL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),F4=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[eyt]},$$scope:{ctx:L}}}),qL=new ee({}),NL=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),DL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),M4=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[oyt]},$$scope:{ctx:L}}}),GL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),V4=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[ryt]},$$scope:{ctx:L}}}),OL=new ee({}),VL=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),zL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),z4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[tyt]},$$scope:{ctx:L}}}),QL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),W4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[ayt]},$$scope:{ctx:L}}}),WL=new ee({}),HL=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),JL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),U4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[nyt]},$$scope:{ctx:L}}}),YL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),Y4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[syt]},$$scope:{ctx:L}}}),KL=new ee({}),ZL=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),ox=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),Z4=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[lyt]},$$scope:{ctx:L}}}),rx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),wE=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[iyt]},$$scope:{ctx:L}}}),tx=new ee({}),ax=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),sx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),yE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[dyt]},$$scope:{ctx:L}}}),lx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),qE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[cyt]},$$scope:{ctx:L}}}),ix=new ee({}),dx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),fx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),jE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[fyt]},$$scope:{ctx:L}}}),mx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),KE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[myt]},$$scope:{ctx:L}}}),gx=new ee({}),hx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),ux=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),e5=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[gyt]},$$scope:{ctx:L}}}),_x=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),f5=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[hyt]},$$scope:{ctx:L}}}),bx=new ee({}),vx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),Tx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),g5=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[pyt]},$$scope:{ctx:L}}}),Mx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),E5=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[uyt]},$$scope:{ctx:L}}}),Ex=new ee({}),Cx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),Ax=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),w5=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[_yt]},$$scope:{ctx:L}}}),yx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),I5=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[byt]},$$scope:{ctx:L}}}),Lx=new ee({}),xx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),kx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),N5=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[vyt]},$$scope:{ctx:L}}}),Sx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),U5=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Fyt]},$$scope:{ctx:L}}}),Rx=new ee({}),Bx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),Ix=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),Y5=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[Tyt]},$$scope:{ctx:L}}}),qx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),sC=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Myt]},$$scope:{ctx:L}}}),Nx=new ee({}),jx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),Gx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),iC=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Eyt]},$$scope:{ctx:L}}}),Ox=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),_C=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Cyt]},$$scope:{ctx:L}}}),Vx=new ee({}),Xx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),Qx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),vC=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[wyt]},$$scope:{ctx:L}}}),Wx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),TC=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Ayt]},$$scope:{ctx:L}}}),Hx=new ee({}),Ux=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),Yx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),EC=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[yyt]},$$scope:{ctx:L}}}),Kx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),AC=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Lyt]},$$scope:{ctx:L}}}),e7=new ee({}),o7=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),t7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),LC=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[xyt]},$$scope:{ctx:L}}}),a7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),$C=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[$yt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),ii=o("Auto Classes"),mf=l(),et=a("p"),di=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ci=a("code"),Jw=o("from_pretrained()"),gf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qe=l(),Xe=a("p"),fi=o("Instantiating one of "),yn=a("a"),Yw=o("AutoConfig"),Ln=o(", "),xn=a("a"),Kw=o("AutoModel"),mi=o(`, and
`),$n=a("a"),Zw=o("AutoTokenizer"),gi=o(" will directly create a class of the relevant architecture. For instance"),hf=l(),F(Ma.$$.fragment),ze=l(),Ae=a("p"),_$=o("will create a model that is an instance of "),hi=a("a"),b$=o("BertModel"),v$=o("."),Eo=l(),Ea=a("p"),F$=o("There is one class of "),pf=a("code"),T$=o("AutoModel"),iDe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),YPe=l(),pi=a("h2"),uf=a("a"),aee=a("span"),F(eA.$$.fragment),dDe=l(),nee=a("span"),cDe=o("Extending the Auto Classes"),KPe=l(),kn=a("p"),fDe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),see=a("code"),mDe=o("NewModel"),gDe=o(", make sure you have a "),lee=a("code"),hDe=o("NewModelConfig"),pDe=o(` then you can add those to the auto
classes like this:`),ZPe=l(),F(oA.$$.fragment),eIe=l(),M$=a("p"),uDe=o("You will then be able to use the auto classes like you would usually do!"),oIe=l(),F(_f.$$.fragment),rIe=l(),ui=a("h2"),bf=a("a"),iee=a("span"),F(rA.$$.fragment),_De=l(),dee=a("span"),bDe=o("AutoConfig"),tIe=l(),Co=a("div"),F(tA.$$.fragment),vDe=l(),aA=a("p"),FDe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),E$=a("a"),TDe=o("from_pretrained()"),MDe=o(" class method."),EDe=l(),nA=a("p"),CDe=o("This class cannot be instantiated directly using "),cee=a("code"),wDe=o("__init__()"),ADe=o(" (throws an error)."),yDe=l(),Er=a("div"),F(sA.$$.fragment),LDe=l(),fee=a("p"),xDe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),$De=l(),_i=a("p"),kDe=o("The configuration class to instantiate is selected based on the "),mee=a("code"),SDe=o("model_type"),RDe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),gee=a("code"),BDe=o("pretrained_model_name_or_path"),PDe=o(":"),IDe=l(),A=a("ul"),vf=a("li"),hee=a("strong"),qDe=o("albert"),NDe=o(" \u2014 "),C$=a("a"),jDe=o("AlbertConfig"),DDe=o(" (ALBERT model)"),GDe=l(),Ff=a("li"),pee=a("strong"),ODe=o("bart"),VDe=o(" \u2014 "),w$=a("a"),XDe=o("BartConfig"),zDe=o(" (BART model)"),QDe=l(),Tf=a("li"),uee=a("strong"),WDe=o("beit"),HDe=o(" \u2014 "),A$=a("a"),UDe=o("BeitConfig"),JDe=o(" (BEiT model)"),YDe=l(),Mf=a("li"),_ee=a("strong"),KDe=o("bert"),ZDe=o(" \u2014 "),y$=a("a"),eGe=o("BertConfig"),oGe=o(" (BERT model)"),rGe=l(),Ef=a("li"),bee=a("strong"),tGe=o("bert-generation"),aGe=o(" \u2014 "),L$=a("a"),nGe=o("BertGenerationConfig"),sGe=o(" (Bert Generation model)"),lGe=l(),Cf=a("li"),vee=a("strong"),iGe=o("big_bird"),dGe=o(" \u2014 "),x$=a("a"),cGe=o("BigBirdConfig"),fGe=o(" (BigBird model)"),mGe=l(),wf=a("li"),Fee=a("strong"),gGe=o("bigbird_pegasus"),hGe=o(" \u2014 "),$$=a("a"),pGe=o("BigBirdPegasusConfig"),uGe=o(" (BigBirdPegasus model)"),_Ge=l(),Af=a("li"),Tee=a("strong"),bGe=o("blenderbot"),vGe=o(" \u2014 "),k$=a("a"),FGe=o("BlenderbotConfig"),TGe=o(" (Blenderbot model)"),MGe=l(),yf=a("li"),Mee=a("strong"),EGe=o("blenderbot-small"),CGe=o(" \u2014 "),S$=a("a"),wGe=o("BlenderbotSmallConfig"),AGe=o(" (BlenderbotSmall model)"),yGe=l(),Lf=a("li"),Eee=a("strong"),LGe=o("camembert"),xGe=o(" \u2014 "),R$=a("a"),$Ge=o("CamembertConfig"),kGe=o(" (CamemBERT model)"),SGe=l(),xf=a("li"),Cee=a("strong"),RGe=o("canine"),BGe=o(" \u2014 "),B$=a("a"),PGe=o("CanineConfig"),IGe=o(" (Canine model)"),qGe=l(),$f=a("li"),wee=a("strong"),NGe=o("clip"),jGe=o(" \u2014 "),P$=a("a"),DGe=o("CLIPConfig"),GGe=o(" (CLIP model)"),OGe=l(),kf=a("li"),Aee=a("strong"),VGe=o("convbert"),XGe=o(" \u2014 "),I$=a("a"),zGe=o("ConvBertConfig"),QGe=o(" (ConvBERT model)"),WGe=l(),Sf=a("li"),yee=a("strong"),HGe=o("convnext"),UGe=o(" \u2014 "),q$=a("a"),JGe=o("ConvNextConfig"),YGe=o(" (ConvNext model)"),KGe=l(),Rf=a("li"),Lee=a("strong"),ZGe=o("ctrl"),eOe=o(" \u2014 "),N$=a("a"),oOe=o("CTRLConfig"),rOe=o(" (CTRL model)"),tOe=l(),Bf=a("li"),xee=a("strong"),aOe=o("data2vec-audio"),nOe=o(" \u2014 "),j$=a("a"),sOe=o("Data2VecAudioConfig"),lOe=o(" (Data2VecAudio model)"),iOe=l(),Pf=a("li"),$ee=a("strong"),dOe=o("data2vec-text"),cOe=o(" \u2014 "),D$=a("a"),fOe=o("Data2VecTextConfig"),mOe=o(" (Data2VecText model)"),gOe=l(),If=a("li"),kee=a("strong"),hOe=o("data2vec-vision"),pOe=o(" \u2014 "),G$=a("a"),uOe=o("Data2VecVisionConfig"),_Oe=o(" (Data2VecVision model)"),bOe=l(),qf=a("li"),See=a("strong"),vOe=o("deberta"),FOe=o(" \u2014 "),O$=a("a"),TOe=o("DebertaConfig"),MOe=o(" (DeBERTa model)"),EOe=l(),Nf=a("li"),Ree=a("strong"),COe=o("deberta-v2"),wOe=o(" \u2014 "),V$=a("a"),AOe=o("DebertaV2Config"),yOe=o(" (DeBERTa-v2 model)"),LOe=l(),jf=a("li"),Bee=a("strong"),xOe=o("decision_transformer"),$Oe=o(" \u2014 "),X$=a("a"),kOe=o("DecisionTransformerConfig"),SOe=o(" (Decision Transformer model)"),ROe=l(),Df=a("li"),Pee=a("strong"),BOe=o("deit"),POe=o(" \u2014 "),z$=a("a"),IOe=o("DeiTConfig"),qOe=o(" (DeiT model)"),NOe=l(),Gf=a("li"),Iee=a("strong"),jOe=o("detr"),DOe=o(" \u2014 "),Q$=a("a"),GOe=o("DetrConfig"),OOe=o(" (DETR model)"),VOe=l(),Of=a("li"),qee=a("strong"),XOe=o("distilbert"),zOe=o(" \u2014 "),W$=a("a"),QOe=o("DistilBertConfig"),WOe=o(" (DistilBERT model)"),HOe=l(),Vf=a("li"),Nee=a("strong"),UOe=o("dpr"),JOe=o(" \u2014 "),H$=a("a"),YOe=o("DPRConfig"),KOe=o(" (DPR model)"),ZOe=l(),Xf=a("li"),jee=a("strong"),eVe=o("dpt"),oVe=o(" \u2014 "),U$=a("a"),rVe=o("DPTConfig"),tVe=o(" (DPT model)"),aVe=l(),zf=a("li"),Dee=a("strong"),nVe=o("electra"),sVe=o(" \u2014 "),J$=a("a"),lVe=o("ElectraConfig"),iVe=o(" (ELECTRA model)"),dVe=l(),Qf=a("li"),Gee=a("strong"),cVe=o("encoder-decoder"),fVe=o(" \u2014 "),Y$=a("a"),mVe=o("EncoderDecoderConfig"),gVe=o(" (Encoder decoder model)"),hVe=l(),Wf=a("li"),Oee=a("strong"),pVe=o("flaubert"),uVe=o(" \u2014 "),K$=a("a"),_Ve=o("FlaubertConfig"),bVe=o(" (FlauBERT model)"),vVe=l(),Hf=a("li"),Vee=a("strong"),FVe=o("flava"),TVe=o(" \u2014 "),Z$=a("a"),MVe=o("FlavaConfig"),EVe=o(" (Flava model)"),CVe=l(),Uf=a("li"),Xee=a("strong"),wVe=o("fnet"),AVe=o(" \u2014 "),ek=a("a"),yVe=o("FNetConfig"),LVe=o(" (FNet model)"),xVe=l(),Jf=a("li"),zee=a("strong"),$Ve=o("fsmt"),kVe=o(" \u2014 "),ok=a("a"),SVe=o("FSMTConfig"),RVe=o(" (FairSeq Machine-Translation model)"),BVe=l(),Yf=a("li"),Qee=a("strong"),PVe=o("funnel"),IVe=o(" \u2014 "),rk=a("a"),qVe=o("FunnelConfig"),NVe=o(" (Funnel Transformer model)"),jVe=l(),Kf=a("li"),Wee=a("strong"),DVe=o("glpn"),GVe=o(" \u2014 "),tk=a("a"),OVe=o("GLPNConfig"),VVe=o(" (GLPN model)"),XVe=l(),Zf=a("li"),Hee=a("strong"),zVe=o("gpt2"),QVe=o(" \u2014 "),ak=a("a"),WVe=o("GPT2Config"),HVe=o(" (OpenAI GPT-2 model)"),UVe=l(),em=a("li"),Uee=a("strong"),JVe=o("gpt_neo"),YVe=o(" \u2014 "),nk=a("a"),KVe=o("GPTNeoConfig"),ZVe=o(" (GPT Neo model)"),eXe=l(),om=a("li"),Jee=a("strong"),oXe=o("gptj"),rXe=o(" \u2014 "),sk=a("a"),tXe=o("GPTJConfig"),aXe=o(" (GPT-J model)"),nXe=l(),rm=a("li"),Yee=a("strong"),sXe=o("hubert"),lXe=o(" \u2014 "),lk=a("a"),iXe=o("HubertConfig"),dXe=o(" (Hubert model)"),cXe=l(),tm=a("li"),Kee=a("strong"),fXe=o("ibert"),mXe=o(" \u2014 "),ik=a("a"),gXe=o("IBertConfig"),hXe=o(" (I-BERT model)"),pXe=l(),am=a("li"),Zee=a("strong"),uXe=o("imagegpt"),_Xe=o(" \u2014 "),dk=a("a"),bXe=o("ImageGPTConfig"),vXe=o(" (ImageGPT model)"),FXe=l(),nm=a("li"),eoe=a("strong"),TXe=o("layoutlm"),MXe=o(" \u2014 "),ck=a("a"),EXe=o("LayoutLMConfig"),CXe=o(" (LayoutLM model)"),wXe=l(),sm=a("li"),ooe=a("strong"),AXe=o("layoutlmv2"),yXe=o(" \u2014 "),fk=a("a"),LXe=o("LayoutLMv2Config"),xXe=o(" (LayoutLMv2 model)"),$Xe=l(),lm=a("li"),roe=a("strong"),kXe=o("led"),SXe=o(" \u2014 "),mk=a("a"),RXe=o("LEDConfig"),BXe=o(" (LED model)"),PXe=l(),im=a("li"),toe=a("strong"),IXe=o("longformer"),qXe=o(" \u2014 "),gk=a("a"),NXe=o("LongformerConfig"),jXe=o(" (Longformer model)"),DXe=l(),dm=a("li"),aoe=a("strong"),GXe=o("luke"),OXe=o(" \u2014 "),hk=a("a"),VXe=o("LukeConfig"),XXe=o(" (LUKE model)"),zXe=l(),cm=a("li"),noe=a("strong"),QXe=o("lxmert"),WXe=o(" \u2014 "),pk=a("a"),HXe=o("LxmertConfig"),UXe=o(" (LXMERT model)"),JXe=l(),fm=a("li"),soe=a("strong"),YXe=o("m2m_100"),KXe=o(" \u2014 "),uk=a("a"),ZXe=o("M2M100Config"),eze=o(" (M2M100 model)"),oze=l(),mm=a("li"),loe=a("strong"),rze=o("marian"),tze=o(" \u2014 "),_k=a("a"),aze=o("MarianConfig"),nze=o(" (Marian model)"),sze=l(),gm=a("li"),ioe=a("strong"),lze=o("maskformer"),ize=o(" \u2014 "),bk=a("a"),dze=o("MaskFormerConfig"),cze=o(" (MaskFormer model)"),fze=l(),hm=a("li"),doe=a("strong"),mze=o("mbart"),gze=o(" \u2014 "),vk=a("a"),hze=o("MBartConfig"),pze=o(" (mBART model)"),uze=l(),pm=a("li"),coe=a("strong"),_ze=o("megatron-bert"),bze=o(" \u2014 "),Fk=a("a"),vze=o("MegatronBertConfig"),Fze=o(" (MegatronBert model)"),Tze=l(),um=a("li"),foe=a("strong"),Mze=o("mobilebert"),Eze=o(" \u2014 "),Tk=a("a"),Cze=o("MobileBertConfig"),wze=o(" (MobileBERT model)"),Aze=l(),_m=a("li"),moe=a("strong"),yze=o("mpnet"),Lze=o(" \u2014 "),Mk=a("a"),xze=o("MPNetConfig"),$ze=o(" (MPNet model)"),kze=l(),bm=a("li"),goe=a("strong"),Sze=o("mt5"),Rze=o(" \u2014 "),Ek=a("a"),Bze=o("MT5Config"),Pze=o(" (mT5 model)"),Ize=l(),vm=a("li"),hoe=a("strong"),qze=o("nystromformer"),Nze=o(" \u2014 "),Ck=a("a"),jze=o("NystromformerConfig"),Dze=o(" (Nystromformer model)"),Gze=l(),Fm=a("li"),poe=a("strong"),Oze=o("openai-gpt"),Vze=o(" \u2014 "),wk=a("a"),Xze=o("OpenAIGPTConfig"),zze=o(" (OpenAI GPT model)"),Qze=l(),Tm=a("li"),uoe=a("strong"),Wze=o("opt"),Hze=o(" \u2014 "),Ak=a("a"),Uze=o("OPTConfig"),Jze=o(" (OPT model)"),Yze=l(),Mm=a("li"),_oe=a("strong"),Kze=o("pegasus"),Zze=o(" \u2014 "),yk=a("a"),eQe=o("PegasusConfig"),oQe=o(" (Pegasus model)"),rQe=l(),Em=a("li"),boe=a("strong"),tQe=o("perceiver"),aQe=o(" \u2014 "),Lk=a("a"),nQe=o("PerceiverConfig"),sQe=o(" (Perceiver model)"),lQe=l(),Cm=a("li"),voe=a("strong"),iQe=o("plbart"),dQe=o(" \u2014 "),xk=a("a"),cQe=o("PLBartConfig"),fQe=o(" (PLBart model)"),mQe=l(),wm=a("li"),Foe=a("strong"),gQe=o("poolformer"),hQe=o(" \u2014 "),$k=a("a"),pQe=o("PoolFormerConfig"),uQe=o(" (PoolFormer model)"),_Qe=l(),Am=a("li"),Toe=a("strong"),bQe=o("prophetnet"),vQe=o(" \u2014 "),kk=a("a"),FQe=o("ProphetNetConfig"),TQe=o(" (ProphetNet model)"),MQe=l(),ym=a("li"),Moe=a("strong"),EQe=o("qdqbert"),CQe=o(" \u2014 "),Sk=a("a"),wQe=o("QDQBertConfig"),AQe=o(" (QDQBert model)"),yQe=l(),Lm=a("li"),Eoe=a("strong"),LQe=o("rag"),xQe=o(" \u2014 "),Rk=a("a"),$Qe=o("RagConfig"),kQe=o(" (RAG model)"),SQe=l(),xm=a("li"),Coe=a("strong"),RQe=o("realm"),BQe=o(" \u2014 "),Bk=a("a"),PQe=o("RealmConfig"),IQe=o(" (Realm model)"),qQe=l(),$m=a("li"),woe=a("strong"),NQe=o("reformer"),jQe=o(" \u2014 "),Pk=a("a"),DQe=o("ReformerConfig"),GQe=o(" (Reformer model)"),OQe=l(),km=a("li"),Aoe=a("strong"),VQe=o("regnet"),XQe=o(" \u2014 "),Ik=a("a"),zQe=o("RegNetConfig"),QQe=o(" (RegNet model)"),WQe=l(),Sm=a("li"),yoe=a("strong"),HQe=o("rembert"),UQe=o(" \u2014 "),qk=a("a"),JQe=o("RemBertConfig"),YQe=o(" (RemBERT model)"),KQe=l(),Rm=a("li"),Loe=a("strong"),ZQe=o("resnet"),eWe=o(" \u2014 "),Nk=a("a"),oWe=o("ResNetConfig"),rWe=o(" (ResNet model)"),tWe=l(),Bm=a("li"),xoe=a("strong"),aWe=o("retribert"),nWe=o(" \u2014 "),jk=a("a"),sWe=o("RetriBertConfig"),lWe=o(" (RetriBERT model)"),iWe=l(),Pm=a("li"),$oe=a("strong"),dWe=o("roberta"),cWe=o(" \u2014 "),Dk=a("a"),fWe=o("RobertaConfig"),mWe=o(" (RoBERTa model)"),gWe=l(),Im=a("li"),koe=a("strong"),hWe=o("roformer"),pWe=o(" \u2014 "),Gk=a("a"),uWe=o("RoFormerConfig"),_We=o(" (RoFormer model)"),bWe=l(),qm=a("li"),Soe=a("strong"),vWe=o("segformer"),FWe=o(" \u2014 "),Ok=a("a"),TWe=o("SegformerConfig"),MWe=o(" (SegFormer model)"),EWe=l(),Nm=a("li"),Roe=a("strong"),CWe=o("sew"),wWe=o(" \u2014 "),Vk=a("a"),AWe=o("SEWConfig"),yWe=o(" (SEW model)"),LWe=l(),jm=a("li"),Boe=a("strong"),xWe=o("sew-d"),$We=o(" \u2014 "),Xk=a("a"),kWe=o("SEWDConfig"),SWe=o(" (SEW-D model)"),RWe=l(),Dm=a("li"),Poe=a("strong"),BWe=o("speech-encoder-decoder"),PWe=o(" \u2014 "),zk=a("a"),IWe=o("SpeechEncoderDecoderConfig"),qWe=o(" (Speech Encoder decoder model)"),NWe=l(),Gm=a("li"),Ioe=a("strong"),jWe=o("speech_to_text"),DWe=o(" \u2014 "),Qk=a("a"),GWe=o("Speech2TextConfig"),OWe=o(" (Speech2Text model)"),VWe=l(),Om=a("li"),qoe=a("strong"),XWe=o("speech_to_text_2"),zWe=o(" \u2014 "),Wk=a("a"),QWe=o("Speech2Text2Config"),WWe=o(" (Speech2Text2 model)"),HWe=l(),Vm=a("li"),Noe=a("strong"),UWe=o("splinter"),JWe=o(" \u2014 "),Hk=a("a"),YWe=o("SplinterConfig"),KWe=o(" (Splinter model)"),ZWe=l(),Xm=a("li"),joe=a("strong"),eHe=o("squeezebert"),oHe=o(" \u2014 "),Uk=a("a"),rHe=o("SqueezeBertConfig"),tHe=o(" (SqueezeBERT model)"),aHe=l(),zm=a("li"),Doe=a("strong"),nHe=o("swin"),sHe=o(" \u2014 "),Jk=a("a"),lHe=o("SwinConfig"),iHe=o(" (Swin model)"),dHe=l(),Qm=a("li"),Goe=a("strong"),cHe=o("t5"),fHe=o(" \u2014 "),Yk=a("a"),mHe=o("T5Config"),gHe=o(" (T5 model)"),hHe=l(),Wm=a("li"),Ooe=a("strong"),pHe=o("tapas"),uHe=o(" \u2014 "),Kk=a("a"),_He=o("TapasConfig"),bHe=o(" (TAPAS model)"),vHe=l(),Hm=a("li"),Voe=a("strong"),FHe=o("tapex"),THe=o(" \u2014 "),Zk=a("a"),MHe=o("BartConfig"),EHe=o(" (TAPEX model)"),CHe=l(),Um=a("li"),Xoe=a("strong"),wHe=o("transfo-xl"),AHe=o(" \u2014 "),eS=a("a"),yHe=o("TransfoXLConfig"),LHe=o(" (Transformer-XL model)"),xHe=l(),Jm=a("li"),zoe=a("strong"),$He=o("trocr"),kHe=o(" \u2014 "),oS=a("a"),SHe=o("TrOCRConfig"),RHe=o(" (TrOCR model)"),BHe=l(),Ym=a("li"),Qoe=a("strong"),PHe=o("unispeech"),IHe=o(" \u2014 "),rS=a("a"),qHe=o("UniSpeechConfig"),NHe=o(" (UniSpeech model)"),jHe=l(),Km=a("li"),Woe=a("strong"),DHe=o("unispeech-sat"),GHe=o(" \u2014 "),tS=a("a"),OHe=o("UniSpeechSatConfig"),VHe=o(" (UniSpeechSat model)"),XHe=l(),Zm=a("li"),Hoe=a("strong"),zHe=o("van"),QHe=o(" \u2014 "),aS=a("a"),WHe=o("VanConfig"),HHe=o(" (VAN model)"),UHe=l(),eg=a("li"),Uoe=a("strong"),JHe=o("vilt"),YHe=o(" \u2014 "),nS=a("a"),KHe=o("ViltConfig"),ZHe=o(" (ViLT model)"),eUe=l(),og=a("li"),Joe=a("strong"),oUe=o("vision-encoder-decoder"),rUe=o(" \u2014 "),sS=a("a"),tUe=o("VisionEncoderDecoderConfig"),aUe=o(" (Vision Encoder decoder model)"),nUe=l(),rg=a("li"),Yoe=a("strong"),sUe=o("vision-text-dual-encoder"),lUe=o(" \u2014 "),lS=a("a"),iUe=o("VisionTextDualEncoderConfig"),dUe=o(" (VisionTextDualEncoder model)"),cUe=l(),tg=a("li"),Koe=a("strong"),fUe=o("visual_bert"),mUe=o(" \u2014 "),iS=a("a"),gUe=o("VisualBertConfig"),hUe=o(" (VisualBert model)"),pUe=l(),ag=a("li"),Zoe=a("strong"),uUe=o("vit"),_Ue=o(" \u2014 "),dS=a("a"),bUe=o("ViTConfig"),vUe=o(" (ViT model)"),FUe=l(),ng=a("li"),ere=a("strong"),TUe=o("vit_mae"),MUe=o(" \u2014 "),cS=a("a"),EUe=o("ViTMAEConfig"),CUe=o(" (ViTMAE model)"),wUe=l(),sg=a("li"),ore=a("strong"),AUe=o("wav2vec2"),yUe=o(" \u2014 "),fS=a("a"),LUe=o("Wav2Vec2Config"),xUe=o(" (Wav2Vec2 model)"),$Ue=l(),lg=a("li"),rre=a("strong"),kUe=o("wavlm"),SUe=o(" \u2014 "),mS=a("a"),RUe=o("WavLMConfig"),BUe=o(" (WavLM model)"),PUe=l(),ig=a("li"),tre=a("strong"),IUe=o("xglm"),qUe=o(" \u2014 "),gS=a("a"),NUe=o("XGLMConfig"),jUe=o(" (XGLM model)"),DUe=l(),dg=a("li"),are=a("strong"),GUe=o("xlm"),OUe=o(" \u2014 "),hS=a("a"),VUe=o("XLMConfig"),XUe=o(" (XLM model)"),zUe=l(),cg=a("li"),nre=a("strong"),QUe=o("xlm-prophetnet"),WUe=o(" \u2014 "),pS=a("a"),HUe=o("XLMProphetNetConfig"),UUe=o(" (XLMProphetNet model)"),JUe=l(),fg=a("li"),sre=a("strong"),YUe=o("xlm-roberta"),KUe=o(" \u2014 "),uS=a("a"),ZUe=o("XLMRobertaConfig"),eJe=o(" (XLM-RoBERTa model)"),oJe=l(),mg=a("li"),lre=a("strong"),rJe=o("xlm-roberta-xl"),tJe=o(" \u2014 "),_S=a("a"),aJe=o("XLMRobertaXLConfig"),nJe=o(" (XLM-RoBERTa-XL model)"),sJe=l(),gg=a("li"),ire=a("strong"),lJe=o("xlnet"),iJe=o(" \u2014 "),bS=a("a"),dJe=o("XLNetConfig"),cJe=o(" (XLNet model)"),fJe=l(),hg=a("li"),dre=a("strong"),mJe=o("yolos"),gJe=o(" \u2014 "),vS=a("a"),hJe=o("YolosConfig"),pJe=o(" (YOLOS model)"),uJe=l(),pg=a("li"),cre=a("strong"),_Je=o("yoso"),bJe=o(" \u2014 "),FS=a("a"),vJe=o("YosoConfig"),FJe=o(" (YOSO model)"),TJe=l(),F(ug.$$.fragment),MJe=l(),_g=a("div"),F(lA.$$.fragment),EJe=l(),fre=a("p"),CJe=o("Register a new configuration for this class."),aIe=l(),bi=a("h2"),bg=a("a"),mre=a("span"),F(iA.$$.fragment),wJe=l(),gre=a("span"),AJe=o("AutoTokenizer"),nIe=l(),wo=a("div"),F(dA.$$.fragment),yJe=l(),cA=a("p"),LJe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),TS=a("a"),xJe=o("AutoTokenizer.from_pretrained()"),$Je=o(" class method."),kJe=l(),fA=a("p"),SJe=o("This class cannot be instantiated directly using "),hre=a("code"),RJe=o("__init__()"),BJe=o(" (throws an error)."),PJe=l(),Cr=a("div"),F(mA.$$.fragment),IJe=l(),pre=a("p"),qJe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),NJe=l(),Ca=a("p"),jJe=o("The tokenizer class to instantiate is selected based on the "),ure=a("code"),DJe=o("model_type"),GJe=o(` property of the config object (either
passed as an argument or loaded from `),_re=a("code"),OJe=o("pretrained_model_name_or_path"),VJe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bre=a("code"),XJe=o("pretrained_model_name_or_path"),zJe=o(":"),QJe=l(),k=a("ul"),Sn=a("li"),vre=a("strong"),WJe=o("albert"),HJe=o(" \u2014 "),MS=a("a"),UJe=o("AlbertTokenizer"),JJe=o(" or "),ES=a("a"),YJe=o("AlbertTokenizerFast"),KJe=o(" (ALBERT model)"),ZJe=l(),Rn=a("li"),Fre=a("strong"),eYe=o("bart"),oYe=o(" \u2014 "),CS=a("a"),rYe=o("BartTokenizer"),tYe=o(" or "),wS=a("a"),aYe=o("BartTokenizerFast"),nYe=o(" (BART model)"),sYe=l(),Bn=a("li"),Tre=a("strong"),lYe=o("barthez"),iYe=o(" \u2014 "),AS=a("a"),dYe=o("BarthezTokenizer"),cYe=o(" or "),yS=a("a"),fYe=o("BarthezTokenizerFast"),mYe=o(" (BARThez model)"),gYe=l(),vg=a("li"),Mre=a("strong"),hYe=o("bartpho"),pYe=o(" \u2014 "),LS=a("a"),uYe=o("BartphoTokenizer"),_Ye=o(" (BARTpho model)"),bYe=l(),Pn=a("li"),Ere=a("strong"),vYe=o("bert"),FYe=o(" \u2014 "),xS=a("a"),TYe=o("BertTokenizer"),MYe=o(" or "),$S=a("a"),EYe=o("BertTokenizerFast"),CYe=o(" (BERT model)"),wYe=l(),Fg=a("li"),Cre=a("strong"),AYe=o("bert-generation"),yYe=o(" \u2014 "),kS=a("a"),LYe=o("BertGenerationTokenizer"),xYe=o(" (Bert Generation model)"),$Ye=l(),Tg=a("li"),wre=a("strong"),kYe=o("bert-japanese"),SYe=o(" \u2014 "),SS=a("a"),RYe=o("BertJapaneseTokenizer"),BYe=o(" (BertJapanese model)"),PYe=l(),Mg=a("li"),Are=a("strong"),IYe=o("bertweet"),qYe=o(" \u2014 "),RS=a("a"),NYe=o("BertweetTokenizer"),jYe=o(" (Bertweet model)"),DYe=l(),In=a("li"),yre=a("strong"),GYe=o("big_bird"),OYe=o(" \u2014 "),BS=a("a"),VYe=o("BigBirdTokenizer"),XYe=o(" or "),PS=a("a"),zYe=o("BigBirdTokenizerFast"),QYe=o(" (BigBird model)"),WYe=l(),qn=a("li"),Lre=a("strong"),HYe=o("bigbird_pegasus"),UYe=o(" \u2014 "),IS=a("a"),JYe=o("PegasusTokenizer"),YYe=o(" or "),qS=a("a"),KYe=o("PegasusTokenizerFast"),ZYe=o(" (BigBirdPegasus model)"),eKe=l(),Nn=a("li"),xre=a("strong"),oKe=o("blenderbot"),rKe=o(" \u2014 "),NS=a("a"),tKe=o("BlenderbotTokenizer"),aKe=o(" or "),jS=a("a"),nKe=o("BlenderbotTokenizerFast"),sKe=o(" (Blenderbot model)"),lKe=l(),Eg=a("li"),$re=a("strong"),iKe=o("blenderbot-small"),dKe=o(" \u2014 "),DS=a("a"),cKe=o("BlenderbotSmallTokenizer"),fKe=o(" (BlenderbotSmall model)"),mKe=l(),Cg=a("li"),kre=a("strong"),gKe=o("byt5"),hKe=o(" \u2014 "),GS=a("a"),pKe=o("ByT5Tokenizer"),uKe=o(" (ByT5 model)"),_Ke=l(),jn=a("li"),Sre=a("strong"),bKe=o("camembert"),vKe=o(" \u2014 "),OS=a("a"),FKe=o("CamembertTokenizer"),TKe=o(" or "),VS=a("a"),MKe=o("CamembertTokenizerFast"),EKe=o(" (CamemBERT model)"),CKe=l(),wg=a("li"),Rre=a("strong"),wKe=o("canine"),AKe=o(" \u2014 "),XS=a("a"),yKe=o("CanineTokenizer"),LKe=o(" (Canine model)"),xKe=l(),Dn=a("li"),Bre=a("strong"),$Ke=o("clip"),kKe=o(" \u2014 "),zS=a("a"),SKe=o("CLIPTokenizer"),RKe=o(" or "),QS=a("a"),BKe=o("CLIPTokenizerFast"),PKe=o(" (CLIP model)"),IKe=l(),Gn=a("li"),Pre=a("strong"),qKe=o("convbert"),NKe=o(" \u2014 "),WS=a("a"),jKe=o("ConvBertTokenizer"),DKe=o(" or "),HS=a("a"),GKe=o("ConvBertTokenizerFast"),OKe=o(" (ConvBERT model)"),VKe=l(),On=a("li"),Ire=a("strong"),XKe=o("cpm"),zKe=o(" \u2014 "),US=a("a"),QKe=o("CpmTokenizer"),WKe=o(" or "),JS=a("a"),HKe=o("CpmTokenizerFast"),UKe=o(" (CPM model)"),JKe=l(),Ag=a("li"),qre=a("strong"),YKe=o("ctrl"),KKe=o(" \u2014 "),YS=a("a"),ZKe=o("CTRLTokenizer"),eZe=o(" (CTRL model)"),oZe=l(),Vn=a("li"),Nre=a("strong"),rZe=o("data2vec-text"),tZe=o(" \u2014 "),KS=a("a"),aZe=o("RobertaTokenizer"),nZe=o(" or "),ZS=a("a"),sZe=o("RobertaTokenizerFast"),lZe=o(" (Data2VecText model)"),iZe=l(),Xn=a("li"),jre=a("strong"),dZe=o("deberta"),cZe=o(" \u2014 "),eR=a("a"),fZe=o("DebertaTokenizer"),mZe=o(" or "),oR=a("a"),gZe=o("DebertaTokenizerFast"),hZe=o(" (DeBERTa model)"),pZe=l(),zn=a("li"),Dre=a("strong"),uZe=o("deberta-v2"),_Ze=o(" \u2014 "),rR=a("a"),bZe=o("DebertaV2Tokenizer"),vZe=o(" or "),tR=a("a"),FZe=o("DebertaV2TokenizerFast"),TZe=o(" (DeBERTa-v2 model)"),MZe=l(),Qn=a("li"),Gre=a("strong"),EZe=o("distilbert"),CZe=o(" \u2014 "),aR=a("a"),wZe=o("DistilBertTokenizer"),AZe=o(" or "),nR=a("a"),yZe=o("DistilBertTokenizerFast"),LZe=o(" (DistilBERT model)"),xZe=l(),Wn=a("li"),Ore=a("strong"),$Ze=o("dpr"),kZe=o(" \u2014 "),sR=a("a"),SZe=o("DPRQuestionEncoderTokenizer"),RZe=o(" or "),lR=a("a"),BZe=o("DPRQuestionEncoderTokenizerFast"),PZe=o(" (DPR model)"),IZe=l(),Hn=a("li"),Vre=a("strong"),qZe=o("electra"),NZe=o(" \u2014 "),iR=a("a"),jZe=o("ElectraTokenizer"),DZe=o(" or "),dR=a("a"),GZe=o("ElectraTokenizerFast"),OZe=o(" (ELECTRA model)"),VZe=l(),yg=a("li"),Xre=a("strong"),XZe=o("flaubert"),zZe=o(" \u2014 "),cR=a("a"),QZe=o("FlaubertTokenizer"),WZe=o(" (FlauBERT model)"),HZe=l(),Un=a("li"),zre=a("strong"),UZe=o("fnet"),JZe=o(" \u2014 "),fR=a("a"),YZe=o("FNetTokenizer"),KZe=o(" or "),mR=a("a"),ZZe=o("FNetTokenizerFast"),eeo=o(" (FNet model)"),oeo=l(),Lg=a("li"),Qre=a("strong"),reo=o("fsmt"),teo=o(" \u2014 "),gR=a("a"),aeo=o("FSMTTokenizer"),neo=o(" (FairSeq Machine-Translation model)"),seo=l(),Jn=a("li"),Wre=a("strong"),leo=o("funnel"),ieo=o(" \u2014 "),hR=a("a"),deo=o("FunnelTokenizer"),ceo=o(" or "),pR=a("a"),feo=o("FunnelTokenizerFast"),meo=o(" (Funnel Transformer model)"),geo=l(),Yn=a("li"),Hre=a("strong"),heo=o("gpt2"),peo=o(" \u2014 "),uR=a("a"),ueo=o("GPT2Tokenizer"),_eo=o(" or "),_R=a("a"),beo=o("GPT2TokenizerFast"),veo=o(" (OpenAI GPT-2 model)"),Feo=l(),Kn=a("li"),Ure=a("strong"),Teo=o("gpt_neo"),Meo=o(" \u2014 "),bR=a("a"),Eeo=o("GPT2Tokenizer"),Ceo=o(" or "),vR=a("a"),weo=o("GPT2TokenizerFast"),Aeo=o(" (GPT Neo model)"),yeo=l(),Zn=a("li"),Jre=a("strong"),Leo=o("gptj"),xeo=o(" \u2014 "),FR=a("a"),$eo=o("GPT2Tokenizer"),keo=o(" or "),TR=a("a"),Seo=o("GPT2TokenizerFast"),Reo=o(" (GPT-J model)"),Beo=l(),es=a("li"),Yre=a("strong"),Peo=o("herbert"),Ieo=o(" \u2014 "),MR=a("a"),qeo=o("HerbertTokenizer"),Neo=o(" or "),ER=a("a"),jeo=o("HerbertTokenizerFast"),Deo=o(" (HerBERT model)"),Geo=l(),xg=a("li"),Kre=a("strong"),Oeo=o("hubert"),Veo=o(" \u2014 "),CR=a("a"),Xeo=o("Wav2Vec2CTCTokenizer"),zeo=o(" (Hubert model)"),Qeo=l(),os=a("li"),Zre=a("strong"),Weo=o("ibert"),Heo=o(" \u2014 "),wR=a("a"),Ueo=o("RobertaTokenizer"),Jeo=o(" or "),AR=a("a"),Yeo=o("RobertaTokenizerFast"),Keo=o(" (I-BERT model)"),Zeo=l(),rs=a("li"),ete=a("strong"),eoo=o("layoutlm"),ooo=o(" \u2014 "),yR=a("a"),roo=o("LayoutLMTokenizer"),too=o(" or "),LR=a("a"),aoo=o("LayoutLMTokenizerFast"),noo=o(" (LayoutLM model)"),soo=l(),ts=a("li"),ote=a("strong"),loo=o("layoutlmv2"),ioo=o(" \u2014 "),xR=a("a"),doo=o("LayoutLMv2Tokenizer"),coo=o(" or "),$R=a("a"),foo=o("LayoutLMv2TokenizerFast"),moo=o(" (LayoutLMv2 model)"),goo=l(),as=a("li"),rte=a("strong"),hoo=o("layoutxlm"),poo=o(" \u2014 "),kR=a("a"),uoo=o("LayoutXLMTokenizer"),_oo=o(" or "),SR=a("a"),boo=o("LayoutXLMTokenizerFast"),voo=o(" (LayoutXLM model)"),Foo=l(),ns=a("li"),tte=a("strong"),Too=o("led"),Moo=o(" \u2014 "),RR=a("a"),Eoo=o("LEDTokenizer"),Coo=o(" or "),BR=a("a"),woo=o("LEDTokenizerFast"),Aoo=o(" (LED model)"),yoo=l(),ss=a("li"),ate=a("strong"),Loo=o("longformer"),xoo=o(" \u2014 "),PR=a("a"),$oo=o("LongformerTokenizer"),koo=o(" or "),IR=a("a"),Soo=o("LongformerTokenizerFast"),Roo=o(" (Longformer model)"),Boo=l(),$g=a("li"),nte=a("strong"),Poo=o("luke"),Ioo=o(" \u2014 "),qR=a("a"),qoo=o("LukeTokenizer"),Noo=o(" (LUKE model)"),joo=l(),ls=a("li"),ste=a("strong"),Doo=o("lxmert"),Goo=o(" \u2014 "),NR=a("a"),Ooo=o("LxmertTokenizer"),Voo=o(" or "),jR=a("a"),Xoo=o("LxmertTokenizerFast"),zoo=o(" (LXMERT model)"),Qoo=l(),kg=a("li"),lte=a("strong"),Woo=o("m2m_100"),Hoo=o(" \u2014 "),DR=a("a"),Uoo=o("M2M100Tokenizer"),Joo=o(" (M2M100 model)"),Yoo=l(),Sg=a("li"),ite=a("strong"),Koo=o("marian"),Zoo=o(" \u2014 "),GR=a("a"),ero=o("MarianTokenizer"),oro=o(" (Marian model)"),rro=l(),is=a("li"),dte=a("strong"),tro=o("mbart"),aro=o(" \u2014 "),OR=a("a"),nro=o("MBartTokenizer"),sro=o(" or "),VR=a("a"),lro=o("MBartTokenizerFast"),iro=o(" (mBART model)"),dro=l(),ds=a("li"),cte=a("strong"),cro=o("mbart50"),fro=o(" \u2014 "),XR=a("a"),mro=o("MBart50Tokenizer"),gro=o(" or "),zR=a("a"),hro=o("MBart50TokenizerFast"),pro=o(" (mBART-50 model)"),uro=l(),cs=a("li"),fte=a("strong"),_ro=o("megatron-bert"),bro=o(" \u2014 "),QR=a("a"),vro=o("BertTokenizer"),Fro=o(" or "),WR=a("a"),Tro=o("BertTokenizerFast"),Mro=o(" (MegatronBert model)"),Ero=l(),Rg=a("li"),mte=a("strong"),Cro=o("mluke"),wro=o(" \u2014 "),HR=a("a"),Aro=o("MLukeTokenizer"),yro=o(" (mLUKE model)"),Lro=l(),fs=a("li"),gte=a("strong"),xro=o("mobilebert"),$ro=o(" \u2014 "),UR=a("a"),kro=o("MobileBertTokenizer"),Sro=o(" or "),JR=a("a"),Rro=o("MobileBertTokenizerFast"),Bro=o(" (MobileBERT model)"),Pro=l(),ms=a("li"),hte=a("strong"),Iro=o("mpnet"),qro=o(" \u2014 "),YR=a("a"),Nro=o("MPNetTokenizer"),jro=o(" or "),KR=a("a"),Dro=o("MPNetTokenizerFast"),Gro=o(" (MPNet model)"),Oro=l(),gs=a("li"),pte=a("strong"),Vro=o("mt5"),Xro=o(" \u2014 "),ZR=a("a"),zro=o("MT5Tokenizer"),Qro=o(" or "),eB=a("a"),Wro=o("MT5TokenizerFast"),Hro=o(" (mT5 model)"),Uro=l(),hs=a("li"),ute=a("strong"),Jro=o("nystromformer"),Yro=o(" \u2014 "),oB=a("a"),Kro=o("AlbertTokenizer"),Zro=o(" or "),rB=a("a"),eto=o("AlbertTokenizerFast"),oto=o(" (Nystromformer model)"),rto=l(),ps=a("li"),_te=a("strong"),tto=o("openai-gpt"),ato=o(" \u2014 "),tB=a("a"),nto=o("OpenAIGPTTokenizer"),sto=o(" or "),aB=a("a"),lto=o("OpenAIGPTTokenizerFast"),ito=o(" (OpenAI GPT model)"),dto=l(),Bg=a("li"),bte=a("strong"),cto=o("opt"),fto=o(" \u2014 "),nB=a("a"),mto=o("GPT2Tokenizer"),gto=o(" (OPT model)"),hto=l(),us=a("li"),vte=a("strong"),pto=o("pegasus"),uto=o(" \u2014 "),sB=a("a"),_to=o("PegasusTokenizer"),bto=o(" or "),lB=a("a"),vto=o("PegasusTokenizerFast"),Fto=o(" (Pegasus model)"),Tto=l(),Pg=a("li"),Fte=a("strong"),Mto=o("perceiver"),Eto=o(" \u2014 "),iB=a("a"),Cto=o("PerceiverTokenizer"),wto=o(" (Perceiver model)"),Ato=l(),Ig=a("li"),Tte=a("strong"),yto=o("phobert"),Lto=o(" \u2014 "),dB=a("a"),xto=o("PhobertTokenizer"),$to=o(" (PhoBERT model)"),kto=l(),qg=a("li"),Mte=a("strong"),Sto=o("plbart"),Rto=o(" \u2014 "),cB=a("a"),Bto=o("PLBartTokenizer"),Pto=o(" (PLBart model)"),Ito=l(),Ng=a("li"),Ete=a("strong"),qto=o("prophetnet"),Nto=o(" \u2014 "),fB=a("a"),jto=o("ProphetNetTokenizer"),Dto=o(" (ProphetNet model)"),Gto=l(),_s=a("li"),Cte=a("strong"),Oto=o("qdqbert"),Vto=o(" \u2014 "),mB=a("a"),Xto=o("BertTokenizer"),zto=o(" or "),gB=a("a"),Qto=o("BertTokenizerFast"),Wto=o(" (QDQBert model)"),Hto=l(),jg=a("li"),wte=a("strong"),Uto=o("rag"),Jto=o(" \u2014 "),hB=a("a"),Yto=o("RagTokenizer"),Kto=o(" (RAG model)"),Zto=l(),bs=a("li"),Ate=a("strong"),eao=o("realm"),oao=o(" \u2014 "),pB=a("a"),rao=o("RealmTokenizer"),tao=o(" or "),uB=a("a"),aao=o("RealmTokenizerFast"),nao=o(" (Realm model)"),sao=l(),vs=a("li"),yte=a("strong"),lao=o("reformer"),iao=o(" \u2014 "),_B=a("a"),dao=o("ReformerTokenizer"),cao=o(" or "),bB=a("a"),fao=o("ReformerTokenizerFast"),mao=o(" (Reformer model)"),gao=l(),Fs=a("li"),Lte=a("strong"),hao=o("rembert"),pao=o(" \u2014 "),vB=a("a"),uao=o("RemBertTokenizer"),_ao=o(" or "),FB=a("a"),bao=o("RemBertTokenizerFast"),vao=o(" (RemBERT model)"),Fao=l(),Ts=a("li"),xte=a("strong"),Tao=o("retribert"),Mao=o(" \u2014 "),TB=a("a"),Eao=o("RetriBertTokenizer"),Cao=o(" or "),MB=a("a"),wao=o("RetriBertTokenizerFast"),Aao=o(" (RetriBERT model)"),yao=l(),Ms=a("li"),$te=a("strong"),Lao=o("roberta"),xao=o(" \u2014 "),EB=a("a"),$ao=o("RobertaTokenizer"),kao=o(" or "),CB=a("a"),Sao=o("RobertaTokenizerFast"),Rao=o(" (RoBERTa model)"),Bao=l(),Es=a("li"),kte=a("strong"),Pao=o("roformer"),Iao=o(" \u2014 "),wB=a("a"),qao=o("RoFormerTokenizer"),Nao=o(" or "),AB=a("a"),jao=o("RoFormerTokenizerFast"),Dao=o(" (RoFormer model)"),Gao=l(),Dg=a("li"),Ste=a("strong"),Oao=o("speech_to_text"),Vao=o(" \u2014 "),yB=a("a"),Xao=o("Speech2TextTokenizer"),zao=o(" (Speech2Text model)"),Qao=l(),Gg=a("li"),Rte=a("strong"),Wao=o("speech_to_text_2"),Hao=o(" \u2014 "),LB=a("a"),Uao=o("Speech2Text2Tokenizer"),Jao=o(" (Speech2Text2 model)"),Yao=l(),Cs=a("li"),Bte=a("strong"),Kao=o("splinter"),Zao=o(" \u2014 "),xB=a("a"),eno=o("SplinterTokenizer"),ono=o(" or "),$B=a("a"),rno=o("SplinterTokenizerFast"),tno=o(" (Splinter model)"),ano=l(),ws=a("li"),Pte=a("strong"),nno=o("squeezebert"),sno=o(" \u2014 "),kB=a("a"),lno=o("SqueezeBertTokenizer"),ino=o(" or "),SB=a("a"),dno=o("SqueezeBertTokenizerFast"),cno=o(" (SqueezeBERT model)"),fno=l(),As=a("li"),Ite=a("strong"),mno=o("t5"),gno=o(" \u2014 "),RB=a("a"),hno=o("T5Tokenizer"),pno=o(" or "),BB=a("a"),uno=o("T5TokenizerFast"),_no=o(" (T5 model)"),bno=l(),Og=a("li"),qte=a("strong"),vno=o("tapas"),Fno=o(" \u2014 "),PB=a("a"),Tno=o("TapasTokenizer"),Mno=o(" (TAPAS model)"),Eno=l(),Vg=a("li"),Nte=a("strong"),Cno=o("tapex"),wno=o(" \u2014 "),IB=a("a"),Ano=o("TapexTokenizer"),yno=o(" (TAPEX model)"),Lno=l(),Xg=a("li"),jte=a("strong"),xno=o("transfo-xl"),$no=o(" \u2014 "),qB=a("a"),kno=o("TransfoXLTokenizer"),Sno=o(" (Transformer-XL model)"),Rno=l(),ys=a("li"),Dte=a("strong"),Bno=o("visual_bert"),Pno=o(" \u2014 "),NB=a("a"),Ino=o("BertTokenizer"),qno=o(" or "),jB=a("a"),Nno=o("BertTokenizerFast"),jno=o(" (VisualBert model)"),Dno=l(),zg=a("li"),Gte=a("strong"),Gno=o("wav2vec2"),Ono=o(" \u2014 "),DB=a("a"),Vno=o("Wav2Vec2CTCTokenizer"),Xno=o(" (Wav2Vec2 model)"),zno=l(),Qg=a("li"),Ote=a("strong"),Qno=o("wav2vec2_phoneme"),Wno=o(" \u2014 "),GB=a("a"),Hno=o("Wav2Vec2PhonemeCTCTokenizer"),Uno=o(" (Wav2Vec2Phoneme model)"),Jno=l(),Ls=a("li"),Vte=a("strong"),Yno=o("xglm"),Kno=o(" \u2014 "),OB=a("a"),Zno=o("XGLMTokenizer"),eso=o(" or "),VB=a("a"),oso=o("XGLMTokenizerFast"),rso=o(" (XGLM model)"),tso=l(),Wg=a("li"),Xte=a("strong"),aso=o("xlm"),nso=o(" \u2014 "),XB=a("a"),sso=o("XLMTokenizer"),lso=o(" (XLM model)"),iso=l(),Hg=a("li"),zte=a("strong"),dso=o("xlm-prophetnet"),cso=o(" \u2014 "),zB=a("a"),fso=o("XLMProphetNetTokenizer"),mso=o(" (XLMProphetNet model)"),gso=l(),xs=a("li"),Qte=a("strong"),hso=o("xlm-roberta"),pso=o(" \u2014 "),QB=a("a"),uso=o("XLMRobertaTokenizer"),_so=o(" or "),WB=a("a"),bso=o("XLMRobertaTokenizerFast"),vso=o(" (XLM-RoBERTa model)"),Fso=l(),$s=a("li"),Wte=a("strong"),Tso=o("xlm-roberta-xl"),Mso=o(" \u2014 "),HB=a("a"),Eso=o("RobertaTokenizer"),Cso=o(" or "),UB=a("a"),wso=o("RobertaTokenizerFast"),Aso=o(" (XLM-RoBERTa-XL model)"),yso=l(),ks=a("li"),Hte=a("strong"),Lso=o("xlnet"),xso=o(" \u2014 "),JB=a("a"),$so=o("XLNetTokenizer"),kso=o(" or "),YB=a("a"),Sso=o("XLNetTokenizerFast"),Rso=o(" (XLNet model)"),Bso=l(),Ss=a("li"),Ute=a("strong"),Pso=o("yoso"),Iso=o(" \u2014 "),KB=a("a"),qso=o("AlbertTokenizer"),Nso=o(" or "),ZB=a("a"),jso=o("AlbertTokenizerFast"),Dso=o(" (YOSO model)"),Gso=l(),F(Ug.$$.fragment),Oso=l(),Jg=a("div"),F(gA.$$.fragment),Vso=l(),Jte=a("p"),Xso=o("Register a new tokenizer in this mapping."),sIe=l(),vi=a("h2"),Yg=a("a"),Yte=a("span"),F(hA.$$.fragment),zso=l(),Kte=a("span"),Qso=o("AutoFeatureExtractor"),lIe=l(),Ao=a("div"),F(pA.$$.fragment),Wso=l(),uA=a("p"),Hso=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),eP=a("a"),Uso=o("AutoFeatureExtractor.from_pretrained()"),Jso=o(" class method."),Yso=l(),_A=a("p"),Kso=o("This class cannot be instantiated directly using "),Zte=a("code"),Zso=o("__init__()"),elo=o(" (throws an error)."),olo=l(),Qe=a("div"),F(bA.$$.fragment),rlo=l(),eae=a("p"),tlo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),alo=l(),wa=a("p"),nlo=o("The feature extractor class to instantiate is selected based on the "),oae=a("code"),slo=o("model_type"),llo=o(` property of the config object
(either passed as an argument or loaded from `),rae=a("code"),ilo=o("pretrained_model_name_or_path"),dlo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),tae=a("code"),clo=o("pretrained_model_name_or_path"),flo=o(":"),mlo=l(),oe=a("ul"),Kg=a("li"),aae=a("strong"),glo=o("beit"),hlo=o(" \u2014 "),oP=a("a"),plo=o("BeitFeatureExtractor"),ulo=o(" (BEiT model)"),_lo=l(),Zg=a("li"),nae=a("strong"),blo=o("clip"),vlo=o(" \u2014 "),rP=a("a"),Flo=o("CLIPFeatureExtractor"),Tlo=o(" (CLIP model)"),Mlo=l(),eh=a("li"),sae=a("strong"),Elo=o("convnext"),Clo=o(" \u2014 "),tP=a("a"),wlo=o("ConvNextFeatureExtractor"),Alo=o(" (ConvNext model)"),ylo=l(),oh=a("li"),lae=a("strong"),Llo=o("data2vec-audio"),xlo=o(" \u2014 "),aP=a("a"),$lo=o("Wav2Vec2FeatureExtractor"),klo=o(" (Data2VecAudio model)"),Slo=l(),rh=a("li"),iae=a("strong"),Rlo=o("data2vec-vision"),Blo=o(" \u2014 "),nP=a("a"),Plo=o("BeitFeatureExtractor"),Ilo=o(" (Data2VecVision model)"),qlo=l(),th=a("li"),dae=a("strong"),Nlo=o("deit"),jlo=o(" \u2014 "),sP=a("a"),Dlo=o("DeiTFeatureExtractor"),Glo=o(" (DeiT model)"),Olo=l(),ah=a("li"),cae=a("strong"),Vlo=o("detr"),Xlo=o(" \u2014 "),lP=a("a"),zlo=o("DetrFeatureExtractor"),Qlo=o(" (DETR model)"),Wlo=l(),nh=a("li"),fae=a("strong"),Hlo=o("dpt"),Ulo=o(" \u2014 "),iP=a("a"),Jlo=o("DPTFeatureExtractor"),Ylo=o(" (DPT model)"),Klo=l(),sh=a("li"),mae=a("strong"),Zlo=o("flava"),eio=o(" \u2014 "),dP=a("a"),oio=o("FlavaFeatureExtractor"),rio=o(" (Flava model)"),tio=l(),lh=a("li"),gae=a("strong"),aio=o("glpn"),nio=o(" \u2014 "),cP=a("a"),sio=o("GLPNFeatureExtractor"),lio=o(" (GLPN model)"),iio=l(),ih=a("li"),hae=a("strong"),dio=o("hubert"),cio=o(" \u2014 "),fP=a("a"),fio=o("Wav2Vec2FeatureExtractor"),mio=o(" (Hubert model)"),gio=l(),dh=a("li"),pae=a("strong"),hio=o("layoutlmv2"),pio=o(" \u2014 "),mP=a("a"),uio=o("LayoutLMv2FeatureExtractor"),_io=o(" (LayoutLMv2 model)"),bio=l(),ch=a("li"),uae=a("strong"),vio=o("maskformer"),Fio=o(" \u2014 "),gP=a("a"),Tio=o("MaskFormerFeatureExtractor"),Mio=o(" (MaskFormer model)"),Eio=l(),fh=a("li"),_ae=a("strong"),Cio=o("perceiver"),wio=o(" \u2014 "),hP=a("a"),Aio=o("PerceiverFeatureExtractor"),yio=o(" (Perceiver model)"),Lio=l(),mh=a("li"),bae=a("strong"),xio=o("poolformer"),$io=o(" \u2014 "),pP=a("a"),kio=o("PoolFormerFeatureExtractor"),Sio=o(" (PoolFormer model)"),Rio=l(),gh=a("li"),vae=a("strong"),Bio=o("regnet"),Pio=o(" \u2014 "),uP=a("a"),Iio=o("ConvNextFeatureExtractor"),qio=o(" (RegNet model)"),Nio=l(),hh=a("li"),Fae=a("strong"),jio=o("resnet"),Dio=o(" \u2014 "),_P=a("a"),Gio=o("ConvNextFeatureExtractor"),Oio=o(" (ResNet model)"),Vio=l(),ph=a("li"),Tae=a("strong"),Xio=o("segformer"),zio=o(" \u2014 "),bP=a("a"),Qio=o("SegformerFeatureExtractor"),Wio=o(" (SegFormer model)"),Hio=l(),uh=a("li"),Mae=a("strong"),Uio=o("speech_to_text"),Jio=o(" \u2014 "),vP=a("a"),Yio=o("Speech2TextFeatureExtractor"),Kio=o(" (Speech2Text model)"),Zio=l(),_h=a("li"),Eae=a("strong"),edo=o("swin"),odo=o(" \u2014 "),FP=a("a"),rdo=o("ViTFeatureExtractor"),tdo=o(" (Swin model)"),ado=l(),bh=a("li"),Cae=a("strong"),ndo=o("van"),sdo=o(" \u2014 "),TP=a("a"),ldo=o("ConvNextFeatureExtractor"),ido=o(" (VAN model)"),ddo=l(),vh=a("li"),wae=a("strong"),cdo=o("vit"),fdo=o(" \u2014 "),MP=a("a"),mdo=o("ViTFeatureExtractor"),gdo=o(" (ViT model)"),hdo=l(),Fh=a("li"),Aae=a("strong"),pdo=o("vit_mae"),udo=o(" \u2014 "),EP=a("a"),_do=o("ViTFeatureExtractor"),bdo=o(" (ViTMAE model)"),vdo=l(),Th=a("li"),yae=a("strong"),Fdo=o("wav2vec2"),Tdo=o(" \u2014 "),CP=a("a"),Mdo=o("Wav2Vec2FeatureExtractor"),Edo=o(" (Wav2Vec2 model)"),Cdo=l(),Mh=a("li"),Lae=a("strong"),wdo=o("yolos"),Ado=o(" \u2014 "),wP=a("a"),ydo=o("YolosFeatureExtractor"),Ldo=o(" (YOLOS model)"),xdo=l(),F(Eh.$$.fragment),$do=l(),F(Ch.$$.fragment),kdo=l(),wh=a("div"),F(vA.$$.fragment),Sdo=l(),xae=a("p"),Rdo=o("Register a new feature extractor for this class."),iIe=l(),Fi=a("h2"),Ah=a("a"),$ae=a("span"),F(FA.$$.fragment),Bdo=l(),kae=a("span"),Pdo=o("AutoProcessor"),dIe=l(),yo=a("div"),F(TA.$$.fragment),Ido=l(),MA=a("p"),qdo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),AP=a("a"),Ndo=o("AutoProcessor.from_pretrained()"),jdo=o(" class method."),Ddo=l(),EA=a("p"),Gdo=o("This class cannot be instantiated directly using "),Sae=a("code"),Odo=o("__init__()"),Vdo=o(" (throws an error)."),Xdo=l(),We=a("div"),F(CA.$$.fragment),zdo=l(),Rae=a("p"),Qdo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Wdo=l(),Ti=a("p"),Hdo=o("The processor class to instantiate is selected based on the "),Bae=a("code"),Udo=o("model_type"),Jdo=o(` property of the config object (either
passed as an argument or loaded from `),Pae=a("code"),Ydo=o("pretrained_model_name_or_path"),Kdo=o(" if possible):"),Zdo=l(),be=a("ul"),yh=a("li"),Iae=a("strong"),eco=o("clip"),oco=o(" \u2014 "),yP=a("a"),rco=o("CLIPProcessor"),tco=o(" (CLIP model)"),aco=l(),Lh=a("li"),qae=a("strong"),nco=o("flava"),sco=o(" \u2014 "),Nae=a("code"),lco=o("FLAVAProcessor"),ico=o(" (Flava model)"),dco=l(),xh=a("li"),jae=a("strong"),cco=o("layoutlmv2"),fco=o(" \u2014 "),LP=a("a"),mco=o("LayoutLMv2Processor"),gco=o(" (LayoutLMv2 model)"),hco=l(),$h=a("li"),Dae=a("strong"),pco=o("layoutxlm"),uco=o(" \u2014 "),xP=a("a"),_co=o("LayoutXLMProcessor"),bco=o(" (LayoutXLM model)"),vco=l(),kh=a("li"),Gae=a("strong"),Fco=o("sew"),Tco=o(" \u2014 "),$P=a("a"),Mco=o("Wav2Vec2Processor"),Eco=o(" (SEW model)"),Cco=l(),Sh=a("li"),Oae=a("strong"),wco=o("sew-d"),Aco=o(" \u2014 "),kP=a("a"),yco=o("Wav2Vec2Processor"),Lco=o(" (SEW-D model)"),xco=l(),Rh=a("li"),Vae=a("strong"),$co=o("speech_to_text"),kco=o(" \u2014 "),SP=a("a"),Sco=o("Speech2TextProcessor"),Rco=o(" (Speech2Text model)"),Bco=l(),Bh=a("li"),Xae=a("strong"),Pco=o("speech_to_text_2"),Ico=o(" \u2014 "),RP=a("a"),qco=o("Speech2Text2Processor"),Nco=o(" (Speech2Text2 model)"),jco=l(),Ph=a("li"),zae=a("strong"),Dco=o("trocr"),Gco=o(" \u2014 "),BP=a("a"),Oco=o("TrOCRProcessor"),Vco=o(" (TrOCR model)"),Xco=l(),Ih=a("li"),Qae=a("strong"),zco=o("unispeech"),Qco=o(" \u2014 "),PP=a("a"),Wco=o("Wav2Vec2Processor"),Hco=o(" (UniSpeech model)"),Uco=l(),qh=a("li"),Wae=a("strong"),Jco=o("unispeech-sat"),Yco=o(" \u2014 "),IP=a("a"),Kco=o("Wav2Vec2Processor"),Zco=o(" (UniSpeechSat model)"),efo=l(),Nh=a("li"),Hae=a("strong"),ofo=o("vilt"),rfo=o(" \u2014 "),qP=a("a"),tfo=o("ViltProcessor"),afo=o(" (ViLT model)"),nfo=l(),jh=a("li"),Uae=a("strong"),sfo=o("vision-text-dual-encoder"),lfo=o(" \u2014 "),NP=a("a"),ifo=o("VisionTextDualEncoderProcessor"),dfo=o(" (VisionTextDualEncoder model)"),cfo=l(),Dh=a("li"),Jae=a("strong"),ffo=o("wav2vec2"),mfo=o(" \u2014 "),jP=a("a"),gfo=o("Wav2Vec2Processor"),hfo=o(" (Wav2Vec2 model)"),pfo=l(),Gh=a("li"),Yae=a("strong"),ufo=o("wavlm"),_fo=o(" \u2014 "),DP=a("a"),bfo=o("Wav2Vec2Processor"),vfo=o(" (WavLM model)"),Ffo=l(),F(Oh.$$.fragment),Tfo=l(),F(Vh.$$.fragment),Mfo=l(),Xh=a("div"),F(wA.$$.fragment),Efo=l(),Kae=a("p"),Cfo=o("Register a new processor for this class."),cIe=l(),Mi=a("h2"),zh=a("a"),Zae=a("span"),F(AA.$$.fragment),wfo=l(),ene=a("span"),Afo=o("AutoModel"),fIe=l(),Lo=a("div"),F(yA.$$.fragment),yfo=l(),Ei=a("p"),Lfo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),GP=a("a"),xfo=o("from_pretrained()"),$fo=o(" class method or the "),OP=a("a"),kfo=o("from_config()"),Sfo=o(` class
method.`),Rfo=l(),LA=a("p"),Bfo=o("This class cannot be instantiated directly using "),one=a("code"),Pfo=o("__init__()"),Ifo=o(" (throws an error)."),qfo=l(),ot=a("div"),F(xA.$$.fragment),Nfo=l(),rne=a("p"),jfo=o("Instantiates one of the base model classes of the library from a configuration."),Dfo=l(),Ci=a("p"),Gfo=o(`Note:
Loading a model from its configuration file does `),tne=a("strong"),Ofo=o("not"),Vfo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VP=a("a"),Xfo=o("from_pretrained()"),zfo=o(" to load the model weights."),Qfo=l(),F(Qh.$$.fragment),Wfo=l(),He=a("div"),F($A.$$.fragment),Hfo=l(),ane=a("p"),Ufo=o("Instantiate one of the base model classes of the library from a pretrained model."),Jfo=l(),Aa=a("p"),Yfo=o("The model class to instantiate is selected based on the "),nne=a("code"),Kfo=o("model_type"),Zfo=o(` property of the config object (either
passed as an argument or loaded from `),sne=a("code"),emo=o("pretrained_model_name_or_path"),omo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lne=a("code"),rmo=o("pretrained_model_name_or_path"),tmo=o(":"),amo=l(),x=a("ul"),Wh=a("li"),ine=a("strong"),nmo=o("albert"),smo=o(" \u2014 "),XP=a("a"),lmo=o("AlbertModel"),imo=o(" (ALBERT model)"),dmo=l(),Hh=a("li"),dne=a("strong"),cmo=o("bart"),fmo=o(" \u2014 "),zP=a("a"),mmo=o("BartModel"),gmo=o(" (BART model)"),hmo=l(),Uh=a("li"),cne=a("strong"),pmo=o("beit"),umo=o(" \u2014 "),QP=a("a"),_mo=o("BeitModel"),bmo=o(" (BEiT model)"),vmo=l(),Jh=a("li"),fne=a("strong"),Fmo=o("bert"),Tmo=o(" \u2014 "),WP=a("a"),Mmo=o("BertModel"),Emo=o(" (BERT model)"),Cmo=l(),Yh=a("li"),mne=a("strong"),wmo=o("bert-generation"),Amo=o(" \u2014 "),HP=a("a"),ymo=o("BertGenerationEncoder"),Lmo=o(" (Bert Generation model)"),xmo=l(),Kh=a("li"),gne=a("strong"),$mo=o("big_bird"),kmo=o(" \u2014 "),UP=a("a"),Smo=o("BigBirdModel"),Rmo=o(" (BigBird model)"),Bmo=l(),Zh=a("li"),hne=a("strong"),Pmo=o("bigbird_pegasus"),Imo=o(" \u2014 "),JP=a("a"),qmo=o("BigBirdPegasusModel"),Nmo=o(" (BigBirdPegasus model)"),jmo=l(),ep=a("li"),pne=a("strong"),Dmo=o("blenderbot"),Gmo=o(" \u2014 "),YP=a("a"),Omo=o("BlenderbotModel"),Vmo=o(" (Blenderbot model)"),Xmo=l(),op=a("li"),une=a("strong"),zmo=o("blenderbot-small"),Qmo=o(" \u2014 "),KP=a("a"),Wmo=o("BlenderbotSmallModel"),Hmo=o(" (BlenderbotSmall model)"),Umo=l(),rp=a("li"),_ne=a("strong"),Jmo=o("camembert"),Ymo=o(" \u2014 "),ZP=a("a"),Kmo=o("CamembertModel"),Zmo=o(" (CamemBERT model)"),ego=l(),tp=a("li"),bne=a("strong"),ogo=o("canine"),rgo=o(" \u2014 "),eI=a("a"),tgo=o("CanineModel"),ago=o(" (Canine model)"),ngo=l(),ap=a("li"),vne=a("strong"),sgo=o("clip"),lgo=o(" \u2014 "),oI=a("a"),igo=o("CLIPModel"),dgo=o(" (CLIP model)"),cgo=l(),np=a("li"),Fne=a("strong"),fgo=o("convbert"),mgo=o(" \u2014 "),rI=a("a"),ggo=o("ConvBertModel"),hgo=o(" (ConvBERT model)"),pgo=l(),sp=a("li"),Tne=a("strong"),ugo=o("convnext"),_go=o(" \u2014 "),tI=a("a"),bgo=o("ConvNextModel"),vgo=o(" (ConvNext model)"),Fgo=l(),lp=a("li"),Mne=a("strong"),Tgo=o("ctrl"),Mgo=o(" \u2014 "),aI=a("a"),Ego=o("CTRLModel"),Cgo=o(" (CTRL model)"),wgo=l(),ip=a("li"),Ene=a("strong"),Ago=o("data2vec-audio"),ygo=o(" \u2014 "),nI=a("a"),Lgo=o("Data2VecAudioModel"),xgo=o(" (Data2VecAudio model)"),$go=l(),dp=a("li"),Cne=a("strong"),kgo=o("data2vec-text"),Sgo=o(" \u2014 "),sI=a("a"),Rgo=o("Data2VecTextModel"),Bgo=o(" (Data2VecText model)"),Pgo=l(),cp=a("li"),wne=a("strong"),Igo=o("data2vec-vision"),qgo=o(" \u2014 "),lI=a("a"),Ngo=o("Data2VecVisionModel"),jgo=o(" (Data2VecVision model)"),Dgo=l(),fp=a("li"),Ane=a("strong"),Ggo=o("deberta"),Ogo=o(" \u2014 "),iI=a("a"),Vgo=o("DebertaModel"),Xgo=o(" (DeBERTa model)"),zgo=l(),mp=a("li"),yne=a("strong"),Qgo=o("deberta-v2"),Wgo=o(" \u2014 "),dI=a("a"),Hgo=o("DebertaV2Model"),Ugo=o(" (DeBERTa-v2 model)"),Jgo=l(),gp=a("li"),Lne=a("strong"),Ygo=o("decision_transformer"),Kgo=o(" \u2014 "),cI=a("a"),Zgo=o("DecisionTransformerModel"),eho=o(" (Decision Transformer model)"),oho=l(),hp=a("li"),xne=a("strong"),rho=o("deit"),tho=o(" \u2014 "),fI=a("a"),aho=o("DeiTModel"),nho=o(" (DeiT model)"),sho=l(),pp=a("li"),$ne=a("strong"),lho=o("detr"),iho=o(" \u2014 "),mI=a("a"),dho=o("DetrModel"),cho=o(" (DETR model)"),fho=l(),up=a("li"),kne=a("strong"),mho=o("distilbert"),gho=o(" \u2014 "),gI=a("a"),hho=o("DistilBertModel"),pho=o(" (DistilBERT model)"),uho=l(),_p=a("li"),Sne=a("strong"),_ho=o("dpr"),bho=o(" \u2014 "),hI=a("a"),vho=o("DPRQuestionEncoder"),Fho=o(" (DPR model)"),Tho=l(),bp=a("li"),Rne=a("strong"),Mho=o("dpt"),Eho=o(" \u2014 "),pI=a("a"),Cho=o("DPTModel"),who=o(" (DPT model)"),Aho=l(),vp=a("li"),Bne=a("strong"),yho=o("electra"),Lho=o(" \u2014 "),uI=a("a"),xho=o("ElectraModel"),$ho=o(" (ELECTRA model)"),kho=l(),Fp=a("li"),Pne=a("strong"),Sho=o("flaubert"),Rho=o(" \u2014 "),_I=a("a"),Bho=o("FlaubertModel"),Pho=o(" (FlauBERT model)"),Iho=l(),Tp=a("li"),Ine=a("strong"),qho=o("flava"),Nho=o(" \u2014 "),bI=a("a"),jho=o("FlavaModel"),Dho=o(" (Flava model)"),Gho=l(),Mp=a("li"),qne=a("strong"),Oho=o("fnet"),Vho=o(" \u2014 "),vI=a("a"),Xho=o("FNetModel"),zho=o(" (FNet model)"),Qho=l(),Ep=a("li"),Nne=a("strong"),Who=o("fsmt"),Hho=o(" \u2014 "),FI=a("a"),Uho=o("FSMTModel"),Jho=o(" (FairSeq Machine-Translation model)"),Yho=l(),Rs=a("li"),jne=a("strong"),Kho=o("funnel"),Zho=o(" \u2014 "),TI=a("a"),epo=o("FunnelModel"),opo=o(" or "),MI=a("a"),rpo=o("FunnelBaseModel"),tpo=o(" (Funnel Transformer model)"),apo=l(),Cp=a("li"),Dne=a("strong"),npo=o("glpn"),spo=o(" \u2014 "),EI=a("a"),lpo=o("GLPNModel"),ipo=o(" (GLPN model)"),dpo=l(),wp=a("li"),Gne=a("strong"),cpo=o("gpt2"),fpo=o(" \u2014 "),CI=a("a"),mpo=o("GPT2Model"),gpo=o(" (OpenAI GPT-2 model)"),hpo=l(),Ap=a("li"),One=a("strong"),ppo=o("gpt_neo"),upo=o(" \u2014 "),wI=a("a"),_po=o("GPTNeoModel"),bpo=o(" (GPT Neo model)"),vpo=l(),yp=a("li"),Vne=a("strong"),Fpo=o("gptj"),Tpo=o(" \u2014 "),AI=a("a"),Mpo=o("GPTJModel"),Epo=o(" (GPT-J model)"),Cpo=l(),Lp=a("li"),Xne=a("strong"),wpo=o("hubert"),Apo=o(" \u2014 "),yI=a("a"),ypo=o("HubertModel"),Lpo=o(" (Hubert model)"),xpo=l(),xp=a("li"),zne=a("strong"),$po=o("ibert"),kpo=o(" \u2014 "),LI=a("a"),Spo=o("IBertModel"),Rpo=o(" (I-BERT model)"),Bpo=l(),$p=a("li"),Qne=a("strong"),Ppo=o("imagegpt"),Ipo=o(" \u2014 "),xI=a("a"),qpo=o("ImageGPTModel"),Npo=o(" (ImageGPT model)"),jpo=l(),kp=a("li"),Wne=a("strong"),Dpo=o("layoutlm"),Gpo=o(" \u2014 "),$I=a("a"),Opo=o("LayoutLMModel"),Vpo=o(" (LayoutLM model)"),Xpo=l(),Sp=a("li"),Hne=a("strong"),zpo=o("layoutlmv2"),Qpo=o(" \u2014 "),kI=a("a"),Wpo=o("LayoutLMv2Model"),Hpo=o(" (LayoutLMv2 model)"),Upo=l(),Rp=a("li"),Une=a("strong"),Jpo=o("led"),Ypo=o(" \u2014 "),SI=a("a"),Kpo=o("LEDModel"),Zpo=o(" (LED model)"),euo=l(),Bp=a("li"),Jne=a("strong"),ouo=o("longformer"),ruo=o(" \u2014 "),RI=a("a"),tuo=o("LongformerModel"),auo=o(" (Longformer model)"),nuo=l(),Pp=a("li"),Yne=a("strong"),suo=o("luke"),luo=o(" \u2014 "),BI=a("a"),iuo=o("LukeModel"),duo=o(" (LUKE model)"),cuo=l(),Ip=a("li"),Kne=a("strong"),fuo=o("lxmert"),muo=o(" \u2014 "),PI=a("a"),guo=o("LxmertModel"),huo=o(" (LXMERT model)"),puo=l(),qp=a("li"),Zne=a("strong"),uuo=o("m2m_100"),_uo=o(" \u2014 "),II=a("a"),buo=o("M2M100Model"),vuo=o(" (M2M100 model)"),Fuo=l(),Np=a("li"),ese=a("strong"),Tuo=o("marian"),Muo=o(" \u2014 "),qI=a("a"),Euo=o("MarianModel"),Cuo=o(" (Marian model)"),wuo=l(),jp=a("li"),ose=a("strong"),Auo=o("maskformer"),yuo=o(" \u2014 "),NI=a("a"),Luo=o("MaskFormerModel"),xuo=o(" (MaskFormer model)"),$uo=l(),Dp=a("li"),rse=a("strong"),kuo=o("mbart"),Suo=o(" \u2014 "),jI=a("a"),Ruo=o("MBartModel"),Buo=o(" (mBART model)"),Puo=l(),Gp=a("li"),tse=a("strong"),Iuo=o("megatron-bert"),quo=o(" \u2014 "),DI=a("a"),Nuo=o("MegatronBertModel"),juo=o(" (MegatronBert model)"),Duo=l(),Op=a("li"),ase=a("strong"),Guo=o("mobilebert"),Ouo=o(" \u2014 "),GI=a("a"),Vuo=o("MobileBertModel"),Xuo=o(" (MobileBERT model)"),zuo=l(),Vp=a("li"),nse=a("strong"),Quo=o("mpnet"),Wuo=o(" \u2014 "),OI=a("a"),Huo=o("MPNetModel"),Uuo=o(" (MPNet model)"),Juo=l(),Xp=a("li"),sse=a("strong"),Yuo=o("mt5"),Kuo=o(" \u2014 "),VI=a("a"),Zuo=o("MT5Model"),e_o=o(" (mT5 model)"),o_o=l(),zp=a("li"),lse=a("strong"),r_o=o("nystromformer"),t_o=o(" \u2014 "),XI=a("a"),a_o=o("NystromformerModel"),n_o=o(" (Nystromformer model)"),s_o=l(),Qp=a("li"),ise=a("strong"),l_o=o("openai-gpt"),i_o=o(" \u2014 "),zI=a("a"),d_o=o("OpenAIGPTModel"),c_o=o(" (OpenAI GPT model)"),f_o=l(),Wp=a("li"),dse=a("strong"),m_o=o("opt"),g_o=o(" \u2014 "),QI=a("a"),h_o=o("OPTModel"),p_o=o(" (OPT model)"),u_o=l(),Hp=a("li"),cse=a("strong"),__o=o("pegasus"),b_o=o(" \u2014 "),WI=a("a"),v_o=o("PegasusModel"),F_o=o(" (Pegasus model)"),T_o=l(),Up=a("li"),fse=a("strong"),M_o=o("perceiver"),E_o=o(" \u2014 "),HI=a("a"),C_o=o("PerceiverModel"),w_o=o(" (Perceiver model)"),A_o=l(),Jp=a("li"),mse=a("strong"),y_o=o("plbart"),L_o=o(" \u2014 "),UI=a("a"),x_o=o("PLBartModel"),$_o=o(" (PLBart model)"),k_o=l(),Yp=a("li"),gse=a("strong"),S_o=o("poolformer"),R_o=o(" \u2014 "),JI=a("a"),B_o=o("PoolFormerModel"),P_o=o(" (PoolFormer model)"),I_o=l(),Kp=a("li"),hse=a("strong"),q_o=o("prophetnet"),N_o=o(" \u2014 "),YI=a("a"),j_o=o("ProphetNetModel"),D_o=o(" (ProphetNet model)"),G_o=l(),Zp=a("li"),pse=a("strong"),O_o=o("qdqbert"),V_o=o(" \u2014 "),KI=a("a"),X_o=o("QDQBertModel"),z_o=o(" (QDQBert model)"),Q_o=l(),eu=a("li"),use=a("strong"),W_o=o("reformer"),H_o=o(" \u2014 "),ZI=a("a"),U_o=o("ReformerModel"),J_o=o(" (Reformer model)"),Y_o=l(),ou=a("li"),_se=a("strong"),K_o=o("regnet"),Z_o=o(" \u2014 "),eq=a("a"),e1o=o("RegNetModel"),o1o=o(" (RegNet model)"),r1o=l(),ru=a("li"),bse=a("strong"),t1o=o("rembert"),a1o=o(" \u2014 "),oq=a("a"),n1o=o("RemBertModel"),s1o=o(" (RemBERT model)"),l1o=l(),tu=a("li"),vse=a("strong"),i1o=o("resnet"),d1o=o(" \u2014 "),rq=a("a"),c1o=o("ResNetModel"),f1o=o(" (ResNet model)"),m1o=l(),au=a("li"),Fse=a("strong"),g1o=o("retribert"),h1o=o(" \u2014 "),tq=a("a"),p1o=o("RetriBertModel"),u1o=o(" (RetriBERT model)"),_1o=l(),nu=a("li"),Tse=a("strong"),b1o=o("roberta"),v1o=o(" \u2014 "),aq=a("a"),F1o=o("RobertaModel"),T1o=o(" (RoBERTa model)"),M1o=l(),su=a("li"),Mse=a("strong"),E1o=o("roformer"),C1o=o(" \u2014 "),nq=a("a"),w1o=o("RoFormerModel"),A1o=o(" (RoFormer model)"),y1o=l(),lu=a("li"),Ese=a("strong"),L1o=o("segformer"),x1o=o(" \u2014 "),sq=a("a"),$1o=o("SegformerModel"),k1o=o(" (SegFormer model)"),S1o=l(),iu=a("li"),Cse=a("strong"),R1o=o("sew"),B1o=o(" \u2014 "),lq=a("a"),P1o=o("SEWModel"),I1o=o(" (SEW model)"),q1o=l(),du=a("li"),wse=a("strong"),N1o=o("sew-d"),j1o=o(" \u2014 "),iq=a("a"),D1o=o("SEWDModel"),G1o=o(" (SEW-D model)"),O1o=l(),cu=a("li"),Ase=a("strong"),V1o=o("speech_to_text"),X1o=o(" \u2014 "),dq=a("a"),z1o=o("Speech2TextModel"),Q1o=o(" (Speech2Text model)"),W1o=l(),fu=a("li"),yse=a("strong"),H1o=o("splinter"),U1o=o(" \u2014 "),cq=a("a"),J1o=o("SplinterModel"),Y1o=o(" (Splinter model)"),K1o=l(),mu=a("li"),Lse=a("strong"),Z1o=o("squeezebert"),e8o=o(" \u2014 "),fq=a("a"),o8o=o("SqueezeBertModel"),r8o=o(" (SqueezeBERT model)"),t8o=l(),gu=a("li"),xse=a("strong"),a8o=o("swin"),n8o=o(" \u2014 "),mq=a("a"),s8o=o("SwinModel"),l8o=o(" (Swin model)"),i8o=l(),hu=a("li"),$se=a("strong"),d8o=o("t5"),c8o=o(" \u2014 "),gq=a("a"),f8o=o("T5Model"),m8o=o(" (T5 model)"),g8o=l(),pu=a("li"),kse=a("strong"),h8o=o("tapas"),p8o=o(" \u2014 "),hq=a("a"),u8o=o("TapasModel"),_8o=o(" (TAPAS model)"),b8o=l(),uu=a("li"),Sse=a("strong"),v8o=o("transfo-xl"),F8o=o(" \u2014 "),pq=a("a"),T8o=o("TransfoXLModel"),M8o=o(" (Transformer-XL model)"),E8o=l(),_u=a("li"),Rse=a("strong"),C8o=o("unispeech"),w8o=o(" \u2014 "),uq=a("a"),A8o=o("UniSpeechModel"),y8o=o(" (UniSpeech model)"),L8o=l(),bu=a("li"),Bse=a("strong"),x8o=o("unispeech-sat"),$8o=o(" \u2014 "),_q=a("a"),k8o=o("UniSpeechSatModel"),S8o=o(" (UniSpeechSat model)"),R8o=l(),vu=a("li"),Pse=a("strong"),B8o=o("van"),P8o=o(" \u2014 "),bq=a("a"),I8o=o("VanModel"),q8o=o(" (VAN model)"),N8o=l(),Fu=a("li"),Ise=a("strong"),j8o=o("vilt"),D8o=o(" \u2014 "),vq=a("a"),G8o=o("ViltModel"),O8o=o(" (ViLT model)"),V8o=l(),Tu=a("li"),qse=a("strong"),X8o=o("vision-text-dual-encoder"),z8o=o(" \u2014 "),Fq=a("a"),Q8o=o("VisionTextDualEncoderModel"),W8o=o(" (VisionTextDualEncoder model)"),H8o=l(),Mu=a("li"),Nse=a("strong"),U8o=o("visual_bert"),J8o=o(" \u2014 "),Tq=a("a"),Y8o=o("VisualBertModel"),K8o=o(" (VisualBert model)"),Z8o=l(),Eu=a("li"),jse=a("strong"),ebo=o("vit"),obo=o(" \u2014 "),Mq=a("a"),rbo=o("ViTModel"),tbo=o(" (ViT model)"),abo=l(),Cu=a("li"),Dse=a("strong"),nbo=o("vit_mae"),sbo=o(" \u2014 "),Eq=a("a"),lbo=o("ViTMAEModel"),ibo=o(" (ViTMAE model)"),dbo=l(),wu=a("li"),Gse=a("strong"),cbo=o("wav2vec2"),fbo=o(" \u2014 "),Cq=a("a"),mbo=o("Wav2Vec2Model"),gbo=o(" (Wav2Vec2 model)"),hbo=l(),Au=a("li"),Ose=a("strong"),pbo=o("wavlm"),ubo=o(" \u2014 "),wq=a("a"),_bo=o("WavLMModel"),bbo=o(" (WavLM model)"),vbo=l(),yu=a("li"),Vse=a("strong"),Fbo=o("xglm"),Tbo=o(" \u2014 "),Aq=a("a"),Mbo=o("XGLMModel"),Ebo=o(" (XGLM model)"),Cbo=l(),Lu=a("li"),Xse=a("strong"),wbo=o("xlm"),Abo=o(" \u2014 "),yq=a("a"),ybo=o("XLMModel"),Lbo=o(" (XLM model)"),xbo=l(),xu=a("li"),zse=a("strong"),$bo=o("xlm-prophetnet"),kbo=o(" \u2014 "),Lq=a("a"),Sbo=o("XLMProphetNetModel"),Rbo=o(" (XLMProphetNet model)"),Bbo=l(),$u=a("li"),Qse=a("strong"),Pbo=o("xlm-roberta"),Ibo=o(" \u2014 "),xq=a("a"),qbo=o("XLMRobertaModel"),Nbo=o(" (XLM-RoBERTa model)"),jbo=l(),ku=a("li"),Wse=a("strong"),Dbo=o("xlm-roberta-xl"),Gbo=o(" \u2014 "),$q=a("a"),Obo=o("XLMRobertaXLModel"),Vbo=o(" (XLM-RoBERTa-XL model)"),Xbo=l(),Su=a("li"),Hse=a("strong"),zbo=o("xlnet"),Qbo=o(" \u2014 "),kq=a("a"),Wbo=o("XLNetModel"),Hbo=o(" (XLNet model)"),Ubo=l(),Ru=a("li"),Use=a("strong"),Jbo=o("yolos"),Ybo=o(" \u2014 "),Sq=a("a"),Kbo=o("YolosModel"),Zbo=o(" (YOLOS model)"),e2o=l(),Bu=a("li"),Jse=a("strong"),o2o=o("yoso"),r2o=o(" \u2014 "),Rq=a("a"),t2o=o("YosoModel"),a2o=o(" (YOSO model)"),n2o=l(),Pu=a("p"),s2o=o("The model is set in evaluation mode by default using "),Yse=a("code"),l2o=o("model.eval()"),i2o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kse=a("code"),d2o=o("model.train()"),c2o=l(),F(Iu.$$.fragment),mIe=l(),wi=a("h2"),qu=a("a"),Zse=a("span"),F(kA.$$.fragment),f2o=l(),ele=a("span"),m2o=o("AutoModelForPreTraining"),gIe=l(),xo=a("div"),F(SA.$$.fragment),g2o=l(),Ai=a("p"),h2o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Bq=a("a"),p2o=o("from_pretrained()"),u2o=o(" class method or the "),Pq=a("a"),_2o=o("from_config()"),b2o=o(` class
method.`),v2o=l(),RA=a("p"),F2o=o("This class cannot be instantiated directly using "),ole=a("code"),T2o=o("__init__()"),M2o=o(" (throws an error)."),E2o=l(),rt=a("div"),F(BA.$$.fragment),C2o=l(),rle=a("p"),w2o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),A2o=l(),yi=a("p"),y2o=o(`Note:
Loading a model from its configuration file does `),tle=a("strong"),L2o=o("not"),x2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Iq=a("a"),$2o=o("from_pretrained()"),k2o=o(" to load the model weights."),S2o=l(),F(Nu.$$.fragment),R2o=l(),Ue=a("div"),F(PA.$$.fragment),B2o=l(),ale=a("p"),P2o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),I2o=l(),ya=a("p"),q2o=o("The model class to instantiate is selected based on the "),nle=a("code"),N2o=o("model_type"),j2o=o(` property of the config object (either
passed as an argument or loaded from `),sle=a("code"),D2o=o("pretrained_model_name_or_path"),G2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lle=a("code"),O2o=o("pretrained_model_name_or_path"),V2o=o(":"),X2o=l(),G=a("ul"),ju=a("li"),ile=a("strong"),z2o=o("albert"),Q2o=o(" \u2014 "),qq=a("a"),W2o=o("AlbertForPreTraining"),H2o=o(" (ALBERT model)"),U2o=l(),Du=a("li"),dle=a("strong"),J2o=o("bart"),Y2o=o(" \u2014 "),Nq=a("a"),K2o=o("BartForConditionalGeneration"),Z2o=o(" (BART model)"),evo=l(),Gu=a("li"),cle=a("strong"),ovo=o("bert"),rvo=o(" \u2014 "),jq=a("a"),tvo=o("BertForPreTraining"),avo=o(" (BERT model)"),nvo=l(),Ou=a("li"),fle=a("strong"),svo=o("big_bird"),lvo=o(" \u2014 "),Dq=a("a"),ivo=o("BigBirdForPreTraining"),dvo=o(" (BigBird model)"),cvo=l(),Vu=a("li"),mle=a("strong"),fvo=o("camembert"),mvo=o(" \u2014 "),Gq=a("a"),gvo=o("CamembertForMaskedLM"),hvo=o(" (CamemBERT model)"),pvo=l(),Xu=a("li"),gle=a("strong"),uvo=o("ctrl"),_vo=o(" \u2014 "),Oq=a("a"),bvo=o("CTRLLMHeadModel"),vvo=o(" (CTRL model)"),Fvo=l(),zu=a("li"),hle=a("strong"),Tvo=o("data2vec-text"),Mvo=o(" \u2014 "),Vq=a("a"),Evo=o("Data2VecTextForMaskedLM"),Cvo=o(" (Data2VecText model)"),wvo=l(),Qu=a("li"),ple=a("strong"),Avo=o("deberta"),yvo=o(" \u2014 "),Xq=a("a"),Lvo=o("DebertaForMaskedLM"),xvo=o(" (DeBERTa model)"),$vo=l(),Wu=a("li"),ule=a("strong"),kvo=o("deberta-v2"),Svo=o(" \u2014 "),zq=a("a"),Rvo=o("DebertaV2ForMaskedLM"),Bvo=o(" (DeBERTa-v2 model)"),Pvo=l(),Hu=a("li"),_le=a("strong"),Ivo=o("distilbert"),qvo=o(" \u2014 "),Qq=a("a"),Nvo=o("DistilBertForMaskedLM"),jvo=o(" (DistilBERT model)"),Dvo=l(),Uu=a("li"),ble=a("strong"),Gvo=o("electra"),Ovo=o(" \u2014 "),Wq=a("a"),Vvo=o("ElectraForPreTraining"),Xvo=o(" (ELECTRA model)"),zvo=l(),Ju=a("li"),vle=a("strong"),Qvo=o("flaubert"),Wvo=o(" \u2014 "),Hq=a("a"),Hvo=o("FlaubertWithLMHeadModel"),Uvo=o(" (FlauBERT model)"),Jvo=l(),Yu=a("li"),Fle=a("strong"),Yvo=o("flava"),Kvo=o(" \u2014 "),Uq=a("a"),Zvo=o("FlavaForPreTraining"),eFo=o(" (Flava model)"),oFo=l(),Ku=a("li"),Tle=a("strong"),rFo=o("fnet"),tFo=o(" \u2014 "),Jq=a("a"),aFo=o("FNetForPreTraining"),nFo=o(" (FNet model)"),sFo=l(),Zu=a("li"),Mle=a("strong"),lFo=o("fsmt"),iFo=o(" \u2014 "),Yq=a("a"),dFo=o("FSMTForConditionalGeneration"),cFo=o(" (FairSeq Machine-Translation model)"),fFo=l(),e_=a("li"),Ele=a("strong"),mFo=o("funnel"),gFo=o(" \u2014 "),Kq=a("a"),hFo=o("FunnelForPreTraining"),pFo=o(" (Funnel Transformer model)"),uFo=l(),o_=a("li"),Cle=a("strong"),_Fo=o("gpt2"),bFo=o(" \u2014 "),Zq=a("a"),vFo=o("GPT2LMHeadModel"),FFo=o(" (OpenAI GPT-2 model)"),TFo=l(),r_=a("li"),wle=a("strong"),MFo=o("ibert"),EFo=o(" \u2014 "),eN=a("a"),CFo=o("IBertForMaskedLM"),wFo=o(" (I-BERT model)"),AFo=l(),t_=a("li"),Ale=a("strong"),yFo=o("layoutlm"),LFo=o(" \u2014 "),oN=a("a"),xFo=o("LayoutLMForMaskedLM"),$Fo=o(" (LayoutLM model)"),kFo=l(),a_=a("li"),yle=a("strong"),SFo=o("longformer"),RFo=o(" \u2014 "),rN=a("a"),BFo=o("LongformerForMaskedLM"),PFo=o(" (Longformer model)"),IFo=l(),n_=a("li"),Lle=a("strong"),qFo=o("lxmert"),NFo=o(" \u2014 "),tN=a("a"),jFo=o("LxmertForPreTraining"),DFo=o(" (LXMERT model)"),GFo=l(),s_=a("li"),xle=a("strong"),OFo=o("megatron-bert"),VFo=o(" \u2014 "),aN=a("a"),XFo=o("MegatronBertForPreTraining"),zFo=o(" (MegatronBert model)"),QFo=l(),l_=a("li"),$le=a("strong"),WFo=o("mobilebert"),HFo=o(" \u2014 "),nN=a("a"),UFo=o("MobileBertForPreTraining"),JFo=o(" (MobileBERT model)"),YFo=l(),i_=a("li"),kle=a("strong"),KFo=o("mpnet"),ZFo=o(" \u2014 "),sN=a("a"),e6o=o("MPNetForMaskedLM"),o6o=o(" (MPNet model)"),r6o=l(),d_=a("li"),Sle=a("strong"),t6o=o("openai-gpt"),a6o=o(" \u2014 "),lN=a("a"),n6o=o("OpenAIGPTLMHeadModel"),s6o=o(" (OpenAI GPT model)"),l6o=l(),c_=a("li"),Rle=a("strong"),i6o=o("retribert"),d6o=o(" \u2014 "),iN=a("a"),c6o=o("RetriBertModel"),f6o=o(" (RetriBERT model)"),m6o=l(),f_=a("li"),Ble=a("strong"),g6o=o("roberta"),h6o=o(" \u2014 "),dN=a("a"),p6o=o("RobertaForMaskedLM"),u6o=o(" (RoBERTa model)"),_6o=l(),m_=a("li"),Ple=a("strong"),b6o=o("squeezebert"),v6o=o(" \u2014 "),cN=a("a"),F6o=o("SqueezeBertForMaskedLM"),T6o=o(" (SqueezeBERT model)"),M6o=l(),g_=a("li"),Ile=a("strong"),E6o=o("t5"),C6o=o(" \u2014 "),fN=a("a"),w6o=o("T5ForConditionalGeneration"),A6o=o(" (T5 model)"),y6o=l(),h_=a("li"),qle=a("strong"),L6o=o("tapas"),x6o=o(" \u2014 "),mN=a("a"),$6o=o("TapasForMaskedLM"),k6o=o(" (TAPAS model)"),S6o=l(),p_=a("li"),Nle=a("strong"),R6o=o("transfo-xl"),B6o=o(" \u2014 "),gN=a("a"),P6o=o("TransfoXLLMHeadModel"),I6o=o(" (Transformer-XL model)"),q6o=l(),u_=a("li"),jle=a("strong"),N6o=o("unispeech"),j6o=o(" \u2014 "),hN=a("a"),D6o=o("UniSpeechForPreTraining"),G6o=o(" (UniSpeech model)"),O6o=l(),__=a("li"),Dle=a("strong"),V6o=o("unispeech-sat"),X6o=o(" \u2014 "),pN=a("a"),z6o=o("UniSpeechSatForPreTraining"),Q6o=o(" (UniSpeechSat model)"),W6o=l(),b_=a("li"),Gle=a("strong"),H6o=o("visual_bert"),U6o=o(" \u2014 "),uN=a("a"),J6o=o("VisualBertForPreTraining"),Y6o=o(" (VisualBert model)"),K6o=l(),v_=a("li"),Ole=a("strong"),Z6o=o("vit_mae"),eTo=o(" \u2014 "),_N=a("a"),oTo=o("ViTMAEForPreTraining"),rTo=o(" (ViTMAE model)"),tTo=l(),F_=a("li"),Vle=a("strong"),aTo=o("wav2vec2"),nTo=o(" \u2014 "),bN=a("a"),sTo=o("Wav2Vec2ForPreTraining"),lTo=o(" (Wav2Vec2 model)"),iTo=l(),T_=a("li"),Xle=a("strong"),dTo=o("xlm"),cTo=o(" \u2014 "),vN=a("a"),fTo=o("XLMWithLMHeadModel"),mTo=o(" (XLM model)"),gTo=l(),M_=a("li"),zle=a("strong"),hTo=o("xlm-roberta"),pTo=o(" \u2014 "),FN=a("a"),uTo=o("XLMRobertaForMaskedLM"),_To=o(" (XLM-RoBERTa model)"),bTo=l(),E_=a("li"),Qle=a("strong"),vTo=o("xlm-roberta-xl"),FTo=o(" \u2014 "),TN=a("a"),TTo=o("XLMRobertaXLForMaskedLM"),MTo=o(" (XLM-RoBERTa-XL model)"),ETo=l(),C_=a("li"),Wle=a("strong"),CTo=o("xlnet"),wTo=o(" \u2014 "),MN=a("a"),ATo=o("XLNetLMHeadModel"),yTo=o(" (XLNet model)"),LTo=l(),w_=a("p"),xTo=o("The model is set in evaluation mode by default using "),Hle=a("code"),$To=o("model.eval()"),kTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ule=a("code"),STo=o("model.train()"),RTo=l(),F(A_.$$.fragment),hIe=l(),Li=a("h2"),y_=a("a"),Jle=a("span"),F(IA.$$.fragment),BTo=l(),Yle=a("span"),PTo=o("AutoModelForCausalLM"),pIe=l(),$o=a("div"),F(qA.$$.fragment),ITo=l(),xi=a("p"),qTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),EN=a("a"),NTo=o("from_pretrained()"),jTo=o(" class method or the "),CN=a("a"),DTo=o("from_config()"),GTo=o(` class
method.`),OTo=l(),NA=a("p"),VTo=o("This class cannot be instantiated directly using "),Kle=a("code"),XTo=o("__init__()"),zTo=o(" (throws an error)."),QTo=l(),tt=a("div"),F(jA.$$.fragment),WTo=l(),Zle=a("p"),HTo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),UTo=l(),$i=a("p"),JTo=o(`Note:
Loading a model from its configuration file does `),eie=a("strong"),YTo=o("not"),KTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wN=a("a"),ZTo=o("from_pretrained()"),e9o=o(" to load the model weights."),o9o=l(),F(L_.$$.fragment),r9o=l(),Je=a("div"),F(DA.$$.fragment),t9o=l(),oie=a("p"),a9o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),n9o=l(),La=a("p"),s9o=o("The model class to instantiate is selected based on the "),rie=a("code"),l9o=o("model_type"),i9o=o(` property of the config object (either
passed as an argument or loaded from `),tie=a("code"),d9o=o("pretrained_model_name_or_path"),c9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aie=a("code"),f9o=o("pretrained_model_name_or_path"),m9o=o(":"),g9o=l(),z=a("ul"),x_=a("li"),nie=a("strong"),h9o=o("bart"),p9o=o(" \u2014 "),AN=a("a"),u9o=o("BartForCausalLM"),_9o=o(" (BART model)"),b9o=l(),$_=a("li"),sie=a("strong"),v9o=o("bert"),F9o=o(" \u2014 "),yN=a("a"),T9o=o("BertLMHeadModel"),M9o=o(" (BERT model)"),E9o=l(),k_=a("li"),lie=a("strong"),C9o=o("bert-generation"),w9o=o(" \u2014 "),LN=a("a"),A9o=o("BertGenerationDecoder"),y9o=o(" (Bert Generation model)"),L9o=l(),S_=a("li"),iie=a("strong"),x9o=o("big_bird"),$9o=o(" \u2014 "),xN=a("a"),k9o=o("BigBirdForCausalLM"),S9o=o(" (BigBird model)"),R9o=l(),R_=a("li"),die=a("strong"),B9o=o("bigbird_pegasus"),P9o=o(" \u2014 "),$N=a("a"),I9o=o("BigBirdPegasusForCausalLM"),q9o=o(" (BigBirdPegasus model)"),N9o=l(),B_=a("li"),cie=a("strong"),j9o=o("blenderbot"),D9o=o(" \u2014 "),kN=a("a"),G9o=o("BlenderbotForCausalLM"),O9o=o(" (Blenderbot model)"),V9o=l(),P_=a("li"),fie=a("strong"),X9o=o("blenderbot-small"),z9o=o(" \u2014 "),SN=a("a"),Q9o=o("BlenderbotSmallForCausalLM"),W9o=o(" (BlenderbotSmall model)"),H9o=l(),I_=a("li"),mie=a("strong"),U9o=o("camembert"),J9o=o(" \u2014 "),RN=a("a"),Y9o=o("CamembertForCausalLM"),K9o=o(" (CamemBERT model)"),Z9o=l(),q_=a("li"),gie=a("strong"),eMo=o("ctrl"),oMo=o(" \u2014 "),BN=a("a"),rMo=o("CTRLLMHeadModel"),tMo=o(" (CTRL model)"),aMo=l(),N_=a("li"),hie=a("strong"),nMo=o("data2vec-text"),sMo=o(" \u2014 "),PN=a("a"),lMo=o("Data2VecTextForCausalLM"),iMo=o(" (Data2VecText model)"),dMo=l(),j_=a("li"),pie=a("strong"),cMo=o("electra"),fMo=o(" \u2014 "),IN=a("a"),mMo=o("ElectraForCausalLM"),gMo=o(" (ELECTRA model)"),hMo=l(),D_=a("li"),uie=a("strong"),pMo=o("gpt2"),uMo=o(" \u2014 "),qN=a("a"),_Mo=o("GPT2LMHeadModel"),bMo=o(" (OpenAI GPT-2 model)"),vMo=l(),G_=a("li"),_ie=a("strong"),FMo=o("gpt_neo"),TMo=o(" \u2014 "),NN=a("a"),MMo=o("GPTNeoForCausalLM"),EMo=o(" (GPT Neo model)"),CMo=l(),O_=a("li"),bie=a("strong"),wMo=o("gptj"),AMo=o(" \u2014 "),jN=a("a"),yMo=o("GPTJForCausalLM"),LMo=o(" (GPT-J model)"),xMo=l(),V_=a("li"),vie=a("strong"),$Mo=o("marian"),kMo=o(" \u2014 "),DN=a("a"),SMo=o("MarianForCausalLM"),RMo=o(" (Marian model)"),BMo=l(),X_=a("li"),Fie=a("strong"),PMo=o("mbart"),IMo=o(" \u2014 "),GN=a("a"),qMo=o("MBartForCausalLM"),NMo=o(" (mBART model)"),jMo=l(),z_=a("li"),Tie=a("strong"),DMo=o("megatron-bert"),GMo=o(" \u2014 "),ON=a("a"),OMo=o("MegatronBertForCausalLM"),VMo=o(" (MegatronBert model)"),XMo=l(),Q_=a("li"),Mie=a("strong"),zMo=o("openai-gpt"),QMo=o(" \u2014 "),VN=a("a"),WMo=o("OpenAIGPTLMHeadModel"),HMo=o(" (OpenAI GPT model)"),UMo=l(),W_=a("li"),Eie=a("strong"),JMo=o("opt"),YMo=o(" \u2014 "),XN=a("a"),KMo=o("OPTForCausalLM"),ZMo=o(" (OPT model)"),e4o=l(),H_=a("li"),Cie=a("strong"),o4o=o("pegasus"),r4o=o(" \u2014 "),zN=a("a"),t4o=o("PegasusForCausalLM"),a4o=o(" (Pegasus model)"),n4o=l(),U_=a("li"),wie=a("strong"),s4o=o("plbart"),l4o=o(" \u2014 "),QN=a("a"),i4o=o("PLBartForCausalLM"),d4o=o(" (PLBart model)"),c4o=l(),J_=a("li"),Aie=a("strong"),f4o=o("prophetnet"),m4o=o(" \u2014 "),WN=a("a"),g4o=o("ProphetNetForCausalLM"),h4o=o(" (ProphetNet model)"),p4o=l(),Y_=a("li"),yie=a("strong"),u4o=o("qdqbert"),_4o=o(" \u2014 "),HN=a("a"),b4o=o("QDQBertLMHeadModel"),v4o=o(" (QDQBert model)"),F4o=l(),K_=a("li"),Lie=a("strong"),T4o=o("reformer"),M4o=o(" \u2014 "),UN=a("a"),E4o=o("ReformerModelWithLMHead"),C4o=o(" (Reformer model)"),w4o=l(),Z_=a("li"),xie=a("strong"),A4o=o("rembert"),y4o=o(" \u2014 "),JN=a("a"),L4o=o("RemBertForCausalLM"),x4o=o(" (RemBERT model)"),$4o=l(),e1=a("li"),$ie=a("strong"),k4o=o("roberta"),S4o=o(" \u2014 "),YN=a("a"),R4o=o("RobertaForCausalLM"),B4o=o(" (RoBERTa model)"),P4o=l(),o1=a("li"),kie=a("strong"),I4o=o("roformer"),q4o=o(" \u2014 "),KN=a("a"),N4o=o("RoFormerForCausalLM"),j4o=o(" (RoFormer model)"),D4o=l(),r1=a("li"),Sie=a("strong"),G4o=o("speech_to_text_2"),O4o=o(" \u2014 "),ZN=a("a"),V4o=o("Speech2Text2ForCausalLM"),X4o=o(" (Speech2Text2 model)"),z4o=l(),t1=a("li"),Rie=a("strong"),Q4o=o("transfo-xl"),W4o=o(" \u2014 "),ej=a("a"),H4o=o("TransfoXLLMHeadModel"),U4o=o(" (Transformer-XL model)"),J4o=l(),a1=a("li"),Bie=a("strong"),Y4o=o("trocr"),K4o=o(" \u2014 "),oj=a("a"),Z4o=o("TrOCRForCausalLM"),eEo=o(" (TrOCR model)"),oEo=l(),n1=a("li"),Pie=a("strong"),rEo=o("xglm"),tEo=o(" \u2014 "),rj=a("a"),aEo=o("XGLMForCausalLM"),nEo=o(" (XGLM model)"),sEo=l(),s1=a("li"),Iie=a("strong"),lEo=o("xlm"),iEo=o(" \u2014 "),tj=a("a"),dEo=o("XLMWithLMHeadModel"),cEo=o(" (XLM model)"),fEo=l(),l1=a("li"),qie=a("strong"),mEo=o("xlm-prophetnet"),gEo=o(" \u2014 "),aj=a("a"),hEo=o("XLMProphetNetForCausalLM"),pEo=o(" (XLMProphetNet model)"),uEo=l(),i1=a("li"),Nie=a("strong"),_Eo=o("xlm-roberta"),bEo=o(" \u2014 "),nj=a("a"),vEo=o("XLMRobertaForCausalLM"),FEo=o(" (XLM-RoBERTa model)"),TEo=l(),d1=a("li"),jie=a("strong"),MEo=o("xlm-roberta-xl"),EEo=o(" \u2014 "),sj=a("a"),CEo=o("XLMRobertaXLForCausalLM"),wEo=o(" (XLM-RoBERTa-XL model)"),AEo=l(),c1=a("li"),Die=a("strong"),yEo=o("xlnet"),LEo=o(" \u2014 "),lj=a("a"),xEo=o("XLNetLMHeadModel"),$Eo=o(" (XLNet model)"),kEo=l(),f1=a("p"),SEo=o("The model is set in evaluation mode by default using "),Gie=a("code"),REo=o("model.eval()"),BEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oie=a("code"),PEo=o("model.train()"),IEo=l(),F(m1.$$.fragment),uIe=l(),ki=a("h2"),g1=a("a"),Vie=a("span"),F(GA.$$.fragment),qEo=l(),Xie=a("span"),NEo=o("AutoModelForMaskedLM"),_Ie=l(),ko=a("div"),F(OA.$$.fragment),jEo=l(),Si=a("p"),DEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ij=a("a"),GEo=o("from_pretrained()"),OEo=o(" class method or the "),dj=a("a"),VEo=o("from_config()"),XEo=o(` class
method.`),zEo=l(),VA=a("p"),QEo=o("This class cannot be instantiated directly using "),zie=a("code"),WEo=o("__init__()"),HEo=o(" (throws an error)."),UEo=l(),at=a("div"),F(XA.$$.fragment),JEo=l(),Qie=a("p"),YEo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),KEo=l(),Ri=a("p"),ZEo=o(`Note:
Loading a model from its configuration file does `),Wie=a("strong"),e5o=o("not"),o5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cj=a("a"),r5o=o("from_pretrained()"),t5o=o(" to load the model weights."),a5o=l(),F(h1.$$.fragment),n5o=l(),Ye=a("div"),F(zA.$$.fragment),s5o=l(),Hie=a("p"),l5o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),i5o=l(),xa=a("p"),d5o=o("The model class to instantiate is selected based on the "),Uie=a("code"),c5o=o("model_type"),f5o=o(` property of the config object (either
passed as an argument or loaded from `),Jie=a("code"),m5o=o("pretrained_model_name_or_path"),g5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yie=a("code"),h5o=o("pretrained_model_name_or_path"),p5o=o(":"),u5o=l(),Q=a("ul"),p1=a("li"),Kie=a("strong"),_5o=o("albert"),b5o=o(" \u2014 "),fj=a("a"),v5o=o("AlbertForMaskedLM"),F5o=o(" (ALBERT model)"),T5o=l(),u1=a("li"),Zie=a("strong"),M5o=o("bart"),E5o=o(" \u2014 "),mj=a("a"),C5o=o("BartForConditionalGeneration"),w5o=o(" (BART model)"),A5o=l(),_1=a("li"),ede=a("strong"),y5o=o("bert"),L5o=o(" \u2014 "),gj=a("a"),x5o=o("BertForMaskedLM"),$5o=o(" (BERT model)"),k5o=l(),b1=a("li"),ode=a("strong"),S5o=o("big_bird"),R5o=o(" \u2014 "),hj=a("a"),B5o=o("BigBirdForMaskedLM"),P5o=o(" (BigBird model)"),I5o=l(),v1=a("li"),rde=a("strong"),q5o=o("camembert"),N5o=o(" \u2014 "),pj=a("a"),j5o=o("CamembertForMaskedLM"),D5o=o(" (CamemBERT model)"),G5o=l(),F1=a("li"),tde=a("strong"),O5o=o("convbert"),V5o=o(" \u2014 "),uj=a("a"),X5o=o("ConvBertForMaskedLM"),z5o=o(" (ConvBERT model)"),Q5o=l(),T1=a("li"),ade=a("strong"),W5o=o("data2vec-text"),H5o=o(" \u2014 "),_j=a("a"),U5o=o("Data2VecTextForMaskedLM"),J5o=o(" (Data2VecText model)"),Y5o=l(),M1=a("li"),nde=a("strong"),K5o=o("deberta"),Z5o=o(" \u2014 "),bj=a("a"),eCo=o("DebertaForMaskedLM"),oCo=o(" (DeBERTa model)"),rCo=l(),E1=a("li"),sde=a("strong"),tCo=o("deberta-v2"),aCo=o(" \u2014 "),vj=a("a"),nCo=o("DebertaV2ForMaskedLM"),sCo=o(" (DeBERTa-v2 model)"),lCo=l(),C1=a("li"),lde=a("strong"),iCo=o("distilbert"),dCo=o(" \u2014 "),Fj=a("a"),cCo=o("DistilBertForMaskedLM"),fCo=o(" (DistilBERT model)"),mCo=l(),w1=a("li"),ide=a("strong"),gCo=o("electra"),hCo=o(" \u2014 "),Tj=a("a"),pCo=o("ElectraForMaskedLM"),uCo=o(" (ELECTRA model)"),_Co=l(),A1=a("li"),dde=a("strong"),bCo=o("flaubert"),vCo=o(" \u2014 "),Mj=a("a"),FCo=o("FlaubertWithLMHeadModel"),TCo=o(" (FlauBERT model)"),MCo=l(),y1=a("li"),cde=a("strong"),ECo=o("fnet"),CCo=o(" \u2014 "),Ej=a("a"),wCo=o("FNetForMaskedLM"),ACo=o(" (FNet model)"),yCo=l(),L1=a("li"),fde=a("strong"),LCo=o("funnel"),xCo=o(" \u2014 "),Cj=a("a"),$Co=o("FunnelForMaskedLM"),kCo=o(" (Funnel Transformer model)"),SCo=l(),x1=a("li"),mde=a("strong"),RCo=o("ibert"),BCo=o(" \u2014 "),wj=a("a"),PCo=o("IBertForMaskedLM"),ICo=o(" (I-BERT model)"),qCo=l(),$1=a("li"),gde=a("strong"),NCo=o("layoutlm"),jCo=o(" \u2014 "),Aj=a("a"),DCo=o("LayoutLMForMaskedLM"),GCo=o(" (LayoutLM model)"),OCo=l(),k1=a("li"),hde=a("strong"),VCo=o("longformer"),XCo=o(" \u2014 "),yj=a("a"),zCo=o("LongformerForMaskedLM"),QCo=o(" (Longformer model)"),WCo=l(),S1=a("li"),pde=a("strong"),HCo=o("mbart"),UCo=o(" \u2014 "),Lj=a("a"),JCo=o("MBartForConditionalGeneration"),YCo=o(" (mBART model)"),KCo=l(),R1=a("li"),ude=a("strong"),ZCo=o("megatron-bert"),e3o=o(" \u2014 "),xj=a("a"),o3o=o("MegatronBertForMaskedLM"),r3o=o(" (MegatronBert model)"),t3o=l(),B1=a("li"),_de=a("strong"),a3o=o("mobilebert"),n3o=o(" \u2014 "),$j=a("a"),s3o=o("MobileBertForMaskedLM"),l3o=o(" (MobileBERT model)"),i3o=l(),P1=a("li"),bde=a("strong"),d3o=o("mpnet"),c3o=o(" \u2014 "),kj=a("a"),f3o=o("MPNetForMaskedLM"),m3o=o(" (MPNet model)"),g3o=l(),I1=a("li"),vde=a("strong"),h3o=o("nystromformer"),p3o=o(" \u2014 "),Sj=a("a"),u3o=o("NystromformerForMaskedLM"),_3o=o(" (Nystromformer model)"),b3o=l(),q1=a("li"),Fde=a("strong"),v3o=o("perceiver"),F3o=o(" \u2014 "),Rj=a("a"),T3o=o("PerceiverForMaskedLM"),M3o=o(" (Perceiver model)"),E3o=l(),N1=a("li"),Tde=a("strong"),C3o=o("qdqbert"),w3o=o(" \u2014 "),Bj=a("a"),A3o=o("QDQBertForMaskedLM"),y3o=o(" (QDQBert model)"),L3o=l(),j1=a("li"),Mde=a("strong"),x3o=o("reformer"),$3o=o(" \u2014 "),Pj=a("a"),k3o=o("ReformerForMaskedLM"),S3o=o(" (Reformer model)"),R3o=l(),D1=a("li"),Ede=a("strong"),B3o=o("rembert"),P3o=o(" \u2014 "),Ij=a("a"),I3o=o("RemBertForMaskedLM"),q3o=o(" (RemBERT model)"),N3o=l(),G1=a("li"),Cde=a("strong"),j3o=o("roberta"),D3o=o(" \u2014 "),qj=a("a"),G3o=o("RobertaForMaskedLM"),O3o=o(" (RoBERTa model)"),V3o=l(),O1=a("li"),wde=a("strong"),X3o=o("roformer"),z3o=o(" \u2014 "),Nj=a("a"),Q3o=o("RoFormerForMaskedLM"),W3o=o(" (RoFormer model)"),H3o=l(),V1=a("li"),Ade=a("strong"),U3o=o("squeezebert"),J3o=o(" \u2014 "),jj=a("a"),Y3o=o("SqueezeBertForMaskedLM"),K3o=o(" (SqueezeBERT model)"),Z3o=l(),X1=a("li"),yde=a("strong"),ewo=o("tapas"),owo=o(" \u2014 "),Dj=a("a"),rwo=o("TapasForMaskedLM"),two=o(" (TAPAS model)"),awo=l(),z1=a("li"),Lde=a("strong"),nwo=o("wav2vec2"),swo=o(" \u2014 "),xde=a("code"),lwo=o("Wav2Vec2ForMaskedLM"),iwo=o(" (Wav2Vec2 model)"),dwo=l(),Q1=a("li"),$de=a("strong"),cwo=o("xlm"),fwo=o(" \u2014 "),Gj=a("a"),mwo=o("XLMWithLMHeadModel"),gwo=o(" (XLM model)"),hwo=l(),W1=a("li"),kde=a("strong"),pwo=o("xlm-roberta"),uwo=o(" \u2014 "),Oj=a("a"),_wo=o("XLMRobertaForMaskedLM"),bwo=o(" (XLM-RoBERTa model)"),vwo=l(),H1=a("li"),Sde=a("strong"),Fwo=o("xlm-roberta-xl"),Two=o(" \u2014 "),Vj=a("a"),Mwo=o("XLMRobertaXLForMaskedLM"),Ewo=o(" (XLM-RoBERTa-XL model)"),Cwo=l(),U1=a("li"),Rde=a("strong"),wwo=o("yoso"),Awo=o(" \u2014 "),Xj=a("a"),ywo=o("YosoForMaskedLM"),Lwo=o(" (YOSO model)"),xwo=l(),J1=a("p"),$wo=o("The model is set in evaluation mode by default using "),Bde=a("code"),kwo=o("model.eval()"),Swo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pde=a("code"),Rwo=o("model.train()"),Bwo=l(),F(Y1.$$.fragment),bIe=l(),Bi=a("h2"),K1=a("a"),Ide=a("span"),F(QA.$$.fragment),Pwo=l(),qde=a("span"),Iwo=o("AutoModelForSeq2SeqLM"),vIe=l(),So=a("div"),F(WA.$$.fragment),qwo=l(),Pi=a("p"),Nwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),zj=a("a"),jwo=o("from_pretrained()"),Dwo=o(" class method or the "),Qj=a("a"),Gwo=o("from_config()"),Owo=o(` class
method.`),Vwo=l(),HA=a("p"),Xwo=o("This class cannot be instantiated directly using "),Nde=a("code"),zwo=o("__init__()"),Qwo=o(" (throws an error)."),Wwo=l(),nt=a("div"),F(UA.$$.fragment),Hwo=l(),jde=a("p"),Uwo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Jwo=l(),Ii=a("p"),Ywo=o(`Note:
Loading a model from its configuration file does `),Dde=a("strong"),Kwo=o("not"),Zwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wj=a("a"),eAo=o("from_pretrained()"),oAo=o(" to load the model weights."),rAo=l(),F(Z1.$$.fragment),tAo=l(),Ke=a("div"),F(JA.$$.fragment),aAo=l(),Gde=a("p"),nAo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),sAo=l(),$a=a("p"),lAo=o("The model class to instantiate is selected based on the "),Ode=a("code"),iAo=o("model_type"),dAo=o(` property of the config object (either
passed as an argument or loaded from `),Vde=a("code"),cAo=o("pretrained_model_name_or_path"),fAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xde=a("code"),mAo=o("pretrained_model_name_or_path"),gAo=o(":"),hAo=l(),he=a("ul"),e8=a("li"),zde=a("strong"),pAo=o("bart"),uAo=o(" \u2014 "),Hj=a("a"),_Ao=o("BartForConditionalGeneration"),bAo=o(" (BART model)"),vAo=l(),o8=a("li"),Qde=a("strong"),FAo=o("bigbird_pegasus"),TAo=o(" \u2014 "),Uj=a("a"),MAo=o("BigBirdPegasusForConditionalGeneration"),EAo=o(" (BigBirdPegasus model)"),CAo=l(),r8=a("li"),Wde=a("strong"),wAo=o("blenderbot"),AAo=o(" \u2014 "),Jj=a("a"),yAo=o("BlenderbotForConditionalGeneration"),LAo=o(" (Blenderbot model)"),xAo=l(),t8=a("li"),Hde=a("strong"),$Ao=o("blenderbot-small"),kAo=o(" \u2014 "),Yj=a("a"),SAo=o("BlenderbotSmallForConditionalGeneration"),RAo=o(" (BlenderbotSmall model)"),BAo=l(),a8=a("li"),Ude=a("strong"),PAo=o("encoder-decoder"),IAo=o(" \u2014 "),Kj=a("a"),qAo=o("EncoderDecoderModel"),NAo=o(" (Encoder decoder model)"),jAo=l(),n8=a("li"),Jde=a("strong"),DAo=o("fsmt"),GAo=o(" \u2014 "),Zj=a("a"),OAo=o("FSMTForConditionalGeneration"),VAo=o(" (FairSeq Machine-Translation model)"),XAo=l(),s8=a("li"),Yde=a("strong"),zAo=o("led"),QAo=o(" \u2014 "),eD=a("a"),WAo=o("LEDForConditionalGeneration"),HAo=o(" (LED model)"),UAo=l(),l8=a("li"),Kde=a("strong"),JAo=o("m2m_100"),YAo=o(" \u2014 "),oD=a("a"),KAo=o("M2M100ForConditionalGeneration"),ZAo=o(" (M2M100 model)"),e0o=l(),i8=a("li"),Zde=a("strong"),o0o=o("marian"),r0o=o(" \u2014 "),rD=a("a"),t0o=o("MarianMTModel"),a0o=o(" (Marian model)"),n0o=l(),d8=a("li"),ece=a("strong"),s0o=o("mbart"),l0o=o(" \u2014 "),tD=a("a"),i0o=o("MBartForConditionalGeneration"),d0o=o(" (mBART model)"),c0o=l(),c8=a("li"),oce=a("strong"),f0o=o("mt5"),m0o=o(" \u2014 "),aD=a("a"),g0o=o("MT5ForConditionalGeneration"),h0o=o(" (mT5 model)"),p0o=l(),f8=a("li"),rce=a("strong"),u0o=o("pegasus"),_0o=o(" \u2014 "),nD=a("a"),b0o=o("PegasusForConditionalGeneration"),v0o=o(" (Pegasus model)"),F0o=l(),m8=a("li"),tce=a("strong"),T0o=o("plbart"),M0o=o(" \u2014 "),sD=a("a"),E0o=o("PLBartForConditionalGeneration"),C0o=o(" (PLBart model)"),w0o=l(),g8=a("li"),ace=a("strong"),A0o=o("prophetnet"),y0o=o(" \u2014 "),lD=a("a"),L0o=o("ProphetNetForConditionalGeneration"),x0o=o(" (ProphetNet model)"),$0o=l(),h8=a("li"),nce=a("strong"),k0o=o("t5"),S0o=o(" \u2014 "),iD=a("a"),R0o=o("T5ForConditionalGeneration"),B0o=o(" (T5 model)"),P0o=l(),p8=a("li"),sce=a("strong"),I0o=o("tapex"),q0o=o(" \u2014 "),dD=a("a"),N0o=o("BartForConditionalGeneration"),j0o=o(" (TAPEX model)"),D0o=l(),u8=a("li"),lce=a("strong"),G0o=o("xlm-prophetnet"),O0o=o(" \u2014 "),cD=a("a"),V0o=o("XLMProphetNetForConditionalGeneration"),X0o=o(" (XLMProphetNet model)"),z0o=l(),_8=a("p"),Q0o=o("The model is set in evaluation mode by default using "),ice=a("code"),W0o=o("model.eval()"),H0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dce=a("code"),U0o=o("model.train()"),J0o=l(),F(b8.$$.fragment),FIe=l(),qi=a("h2"),v8=a("a"),cce=a("span"),F(YA.$$.fragment),Y0o=l(),fce=a("span"),K0o=o("AutoModelForSequenceClassification"),TIe=l(),Ro=a("div"),F(KA.$$.fragment),Z0o=l(),Ni=a("p"),eyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),fD=a("a"),oyo=o("from_pretrained()"),ryo=o(" class method or the "),mD=a("a"),tyo=o("from_config()"),ayo=o(` class
method.`),nyo=l(),ZA=a("p"),syo=o("This class cannot be instantiated directly using "),mce=a("code"),lyo=o("__init__()"),iyo=o(" (throws an error)."),dyo=l(),st=a("div"),F(e0.$$.fragment),cyo=l(),gce=a("p"),fyo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),myo=l(),ji=a("p"),gyo=o(`Note:
Loading a model from its configuration file does `),hce=a("strong"),hyo=o("not"),pyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gD=a("a"),uyo=o("from_pretrained()"),_yo=o(" to load the model weights."),byo=l(),F(F8.$$.fragment),vyo=l(),Ze=a("div"),F(o0.$$.fragment),Fyo=l(),pce=a("p"),Tyo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Myo=l(),ka=a("p"),Eyo=o("The model class to instantiate is selected based on the "),uce=a("code"),Cyo=o("model_type"),wyo=o(` property of the config object (either
passed as an argument or loaded from `),_ce=a("code"),Ayo=o("pretrained_model_name_or_path"),yyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bce=a("code"),Lyo=o("pretrained_model_name_or_path"),xyo=o(":"),$yo=l(),q=a("ul"),T8=a("li"),vce=a("strong"),kyo=o("albert"),Syo=o(" \u2014 "),hD=a("a"),Ryo=o("AlbertForSequenceClassification"),Byo=o(" (ALBERT model)"),Pyo=l(),M8=a("li"),Fce=a("strong"),Iyo=o("bart"),qyo=o(" \u2014 "),pD=a("a"),Nyo=o("BartForSequenceClassification"),jyo=o(" (BART model)"),Dyo=l(),E8=a("li"),Tce=a("strong"),Gyo=o("bert"),Oyo=o(" \u2014 "),uD=a("a"),Vyo=o("BertForSequenceClassification"),Xyo=o(" (BERT model)"),zyo=l(),C8=a("li"),Mce=a("strong"),Qyo=o("big_bird"),Wyo=o(" \u2014 "),_D=a("a"),Hyo=o("BigBirdForSequenceClassification"),Uyo=o(" (BigBird model)"),Jyo=l(),w8=a("li"),Ece=a("strong"),Yyo=o("bigbird_pegasus"),Kyo=o(" \u2014 "),bD=a("a"),Zyo=o("BigBirdPegasusForSequenceClassification"),eLo=o(" (BigBirdPegasus model)"),oLo=l(),A8=a("li"),Cce=a("strong"),rLo=o("camembert"),tLo=o(" \u2014 "),vD=a("a"),aLo=o("CamembertForSequenceClassification"),nLo=o(" (CamemBERT model)"),sLo=l(),y8=a("li"),wce=a("strong"),lLo=o("canine"),iLo=o(" \u2014 "),FD=a("a"),dLo=o("CanineForSequenceClassification"),cLo=o(" (Canine model)"),fLo=l(),L8=a("li"),Ace=a("strong"),mLo=o("convbert"),gLo=o(" \u2014 "),TD=a("a"),hLo=o("ConvBertForSequenceClassification"),pLo=o(" (ConvBERT model)"),uLo=l(),x8=a("li"),yce=a("strong"),_Lo=o("ctrl"),bLo=o(" \u2014 "),MD=a("a"),vLo=o("CTRLForSequenceClassification"),FLo=o(" (CTRL model)"),TLo=l(),$8=a("li"),Lce=a("strong"),MLo=o("data2vec-text"),ELo=o(" \u2014 "),ED=a("a"),CLo=o("Data2VecTextForSequenceClassification"),wLo=o(" (Data2VecText model)"),ALo=l(),k8=a("li"),xce=a("strong"),yLo=o("deberta"),LLo=o(" \u2014 "),CD=a("a"),xLo=o("DebertaForSequenceClassification"),$Lo=o(" (DeBERTa model)"),kLo=l(),S8=a("li"),$ce=a("strong"),SLo=o("deberta-v2"),RLo=o(" \u2014 "),wD=a("a"),BLo=o("DebertaV2ForSequenceClassification"),PLo=o(" (DeBERTa-v2 model)"),ILo=l(),R8=a("li"),kce=a("strong"),qLo=o("distilbert"),NLo=o(" \u2014 "),AD=a("a"),jLo=o("DistilBertForSequenceClassification"),DLo=o(" (DistilBERT model)"),GLo=l(),B8=a("li"),Sce=a("strong"),OLo=o("electra"),VLo=o(" \u2014 "),yD=a("a"),XLo=o("ElectraForSequenceClassification"),zLo=o(" (ELECTRA model)"),QLo=l(),P8=a("li"),Rce=a("strong"),WLo=o("flaubert"),HLo=o(" \u2014 "),LD=a("a"),ULo=o("FlaubertForSequenceClassification"),JLo=o(" (FlauBERT model)"),YLo=l(),I8=a("li"),Bce=a("strong"),KLo=o("fnet"),ZLo=o(" \u2014 "),xD=a("a"),exo=o("FNetForSequenceClassification"),oxo=o(" (FNet model)"),rxo=l(),q8=a("li"),Pce=a("strong"),txo=o("funnel"),axo=o(" \u2014 "),$D=a("a"),nxo=o("FunnelForSequenceClassification"),sxo=o(" (Funnel Transformer model)"),lxo=l(),N8=a("li"),Ice=a("strong"),ixo=o("gpt2"),dxo=o(" \u2014 "),kD=a("a"),cxo=o("GPT2ForSequenceClassification"),fxo=o(" (OpenAI GPT-2 model)"),mxo=l(),j8=a("li"),qce=a("strong"),gxo=o("gpt_neo"),hxo=o(" \u2014 "),SD=a("a"),pxo=o("GPTNeoForSequenceClassification"),uxo=o(" (GPT Neo model)"),_xo=l(),D8=a("li"),Nce=a("strong"),bxo=o("gptj"),vxo=o(" \u2014 "),RD=a("a"),Fxo=o("GPTJForSequenceClassification"),Txo=o(" (GPT-J model)"),Mxo=l(),G8=a("li"),jce=a("strong"),Exo=o("ibert"),Cxo=o(" \u2014 "),BD=a("a"),wxo=o("IBertForSequenceClassification"),Axo=o(" (I-BERT model)"),yxo=l(),O8=a("li"),Dce=a("strong"),Lxo=o("layoutlm"),xxo=o(" \u2014 "),PD=a("a"),$xo=o("LayoutLMForSequenceClassification"),kxo=o(" (LayoutLM model)"),Sxo=l(),V8=a("li"),Gce=a("strong"),Rxo=o("layoutlmv2"),Bxo=o(" \u2014 "),ID=a("a"),Pxo=o("LayoutLMv2ForSequenceClassification"),Ixo=o(" (LayoutLMv2 model)"),qxo=l(),X8=a("li"),Oce=a("strong"),Nxo=o("led"),jxo=o(" \u2014 "),qD=a("a"),Dxo=o("LEDForSequenceClassification"),Gxo=o(" (LED model)"),Oxo=l(),z8=a("li"),Vce=a("strong"),Vxo=o("longformer"),Xxo=o(" \u2014 "),ND=a("a"),zxo=o("LongformerForSequenceClassification"),Qxo=o(" (Longformer model)"),Wxo=l(),Q8=a("li"),Xce=a("strong"),Hxo=o("mbart"),Uxo=o(" \u2014 "),jD=a("a"),Jxo=o("MBartForSequenceClassification"),Yxo=o(" (mBART model)"),Kxo=l(),W8=a("li"),zce=a("strong"),Zxo=o("megatron-bert"),e7o=o(" \u2014 "),DD=a("a"),o7o=o("MegatronBertForSequenceClassification"),r7o=o(" (MegatronBert model)"),t7o=l(),H8=a("li"),Qce=a("strong"),a7o=o("mobilebert"),n7o=o(" \u2014 "),GD=a("a"),s7o=o("MobileBertForSequenceClassification"),l7o=o(" (MobileBERT model)"),i7o=l(),U8=a("li"),Wce=a("strong"),d7o=o("mpnet"),c7o=o(" \u2014 "),OD=a("a"),f7o=o("MPNetForSequenceClassification"),m7o=o(" (MPNet model)"),g7o=l(),J8=a("li"),Hce=a("strong"),h7o=o("nystromformer"),p7o=o(" \u2014 "),VD=a("a"),u7o=o("NystromformerForSequenceClassification"),_7o=o(" (Nystromformer model)"),b7o=l(),Y8=a("li"),Uce=a("strong"),v7o=o("openai-gpt"),F7o=o(" \u2014 "),XD=a("a"),T7o=o("OpenAIGPTForSequenceClassification"),M7o=o(" (OpenAI GPT model)"),E7o=l(),K8=a("li"),Jce=a("strong"),C7o=o("perceiver"),w7o=o(" \u2014 "),zD=a("a"),A7o=o("PerceiverForSequenceClassification"),y7o=o(" (Perceiver model)"),L7o=l(),Z8=a("li"),Yce=a("strong"),x7o=o("plbart"),$7o=o(" \u2014 "),QD=a("a"),k7o=o("PLBartForSequenceClassification"),S7o=o(" (PLBart model)"),R7o=l(),eb=a("li"),Kce=a("strong"),B7o=o("qdqbert"),P7o=o(" \u2014 "),WD=a("a"),I7o=o("QDQBertForSequenceClassification"),q7o=o(" (QDQBert model)"),N7o=l(),ob=a("li"),Zce=a("strong"),j7o=o("reformer"),D7o=o(" \u2014 "),HD=a("a"),G7o=o("ReformerForSequenceClassification"),O7o=o(" (Reformer model)"),V7o=l(),rb=a("li"),efe=a("strong"),X7o=o("rembert"),z7o=o(" \u2014 "),UD=a("a"),Q7o=o("RemBertForSequenceClassification"),W7o=o(" (RemBERT model)"),H7o=l(),tb=a("li"),ofe=a("strong"),U7o=o("roberta"),J7o=o(" \u2014 "),JD=a("a"),Y7o=o("RobertaForSequenceClassification"),K7o=o(" (RoBERTa model)"),Z7o=l(),ab=a("li"),rfe=a("strong"),e$o=o("roformer"),o$o=o(" \u2014 "),YD=a("a"),r$o=o("RoFormerForSequenceClassification"),t$o=o(" (RoFormer model)"),a$o=l(),nb=a("li"),tfe=a("strong"),n$o=o("squeezebert"),s$o=o(" \u2014 "),KD=a("a"),l$o=o("SqueezeBertForSequenceClassification"),i$o=o(" (SqueezeBERT model)"),d$o=l(),sb=a("li"),afe=a("strong"),c$o=o("tapas"),f$o=o(" \u2014 "),ZD=a("a"),m$o=o("TapasForSequenceClassification"),g$o=o(" (TAPAS model)"),h$o=l(),lb=a("li"),nfe=a("strong"),p$o=o("tapex"),u$o=o(" \u2014 "),eG=a("a"),_$o=o("BartForSequenceClassification"),b$o=o(" (TAPEX model)"),v$o=l(),ib=a("li"),sfe=a("strong"),F$o=o("transfo-xl"),T$o=o(" \u2014 "),oG=a("a"),M$o=o("TransfoXLForSequenceClassification"),E$o=o(" (Transformer-XL model)"),C$o=l(),db=a("li"),lfe=a("strong"),w$o=o("xlm"),A$o=o(" \u2014 "),rG=a("a"),y$o=o("XLMForSequenceClassification"),L$o=o(" (XLM model)"),x$o=l(),cb=a("li"),ife=a("strong"),$$o=o("xlm-roberta"),k$o=o(" \u2014 "),tG=a("a"),S$o=o("XLMRobertaForSequenceClassification"),R$o=o(" (XLM-RoBERTa model)"),B$o=l(),fb=a("li"),dfe=a("strong"),P$o=o("xlm-roberta-xl"),I$o=o(" \u2014 "),aG=a("a"),q$o=o("XLMRobertaXLForSequenceClassification"),N$o=o(" (XLM-RoBERTa-XL model)"),j$o=l(),mb=a("li"),cfe=a("strong"),D$o=o("xlnet"),G$o=o(" \u2014 "),nG=a("a"),O$o=o("XLNetForSequenceClassification"),V$o=o(" (XLNet model)"),X$o=l(),gb=a("li"),ffe=a("strong"),z$o=o("yoso"),Q$o=o(" \u2014 "),sG=a("a"),W$o=o("YosoForSequenceClassification"),H$o=o(" (YOSO model)"),U$o=l(),hb=a("p"),J$o=o("The model is set in evaluation mode by default using "),mfe=a("code"),Y$o=o("model.eval()"),K$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gfe=a("code"),Z$o=o("model.train()"),eko=l(),F(pb.$$.fragment),MIe=l(),Di=a("h2"),ub=a("a"),hfe=a("span"),F(r0.$$.fragment),oko=l(),pfe=a("span"),rko=o("AutoModelForMultipleChoice"),EIe=l(),Bo=a("div"),F(t0.$$.fragment),tko=l(),Gi=a("p"),ako=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),lG=a("a"),nko=o("from_pretrained()"),sko=o(" class method or the "),iG=a("a"),lko=o("from_config()"),iko=o(` class
method.`),dko=l(),a0=a("p"),cko=o("This class cannot be instantiated directly using "),ufe=a("code"),fko=o("__init__()"),mko=o(" (throws an error)."),gko=l(),lt=a("div"),F(n0.$$.fragment),hko=l(),_fe=a("p"),pko=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),uko=l(),Oi=a("p"),_ko=o(`Note:
Loading a model from its configuration file does `),bfe=a("strong"),bko=o("not"),vko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dG=a("a"),Fko=o("from_pretrained()"),Tko=o(" to load the model weights."),Mko=l(),F(_b.$$.fragment),Eko=l(),eo=a("div"),F(s0.$$.fragment),Cko=l(),vfe=a("p"),wko=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Ako=l(),Sa=a("p"),yko=o("The model class to instantiate is selected based on the "),Ffe=a("code"),Lko=o("model_type"),xko=o(` property of the config object (either
passed as an argument or loaded from `),Tfe=a("code"),$ko=o("pretrained_model_name_or_path"),kko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mfe=a("code"),Sko=o("pretrained_model_name_or_path"),Rko=o(":"),Bko=l(),Y=a("ul"),bb=a("li"),Efe=a("strong"),Pko=o("albert"),Iko=o(" \u2014 "),cG=a("a"),qko=o("AlbertForMultipleChoice"),Nko=o(" (ALBERT model)"),jko=l(),vb=a("li"),Cfe=a("strong"),Dko=o("bert"),Gko=o(" \u2014 "),fG=a("a"),Oko=o("BertForMultipleChoice"),Vko=o(" (BERT model)"),Xko=l(),Fb=a("li"),wfe=a("strong"),zko=o("big_bird"),Qko=o(" \u2014 "),mG=a("a"),Wko=o("BigBirdForMultipleChoice"),Hko=o(" (BigBird model)"),Uko=l(),Tb=a("li"),Afe=a("strong"),Jko=o("camembert"),Yko=o(" \u2014 "),gG=a("a"),Kko=o("CamembertForMultipleChoice"),Zko=o(" (CamemBERT model)"),eSo=l(),Mb=a("li"),yfe=a("strong"),oSo=o("canine"),rSo=o(" \u2014 "),hG=a("a"),tSo=o("CanineForMultipleChoice"),aSo=o(" (Canine model)"),nSo=l(),Eb=a("li"),Lfe=a("strong"),sSo=o("convbert"),lSo=o(" \u2014 "),pG=a("a"),iSo=o("ConvBertForMultipleChoice"),dSo=o(" (ConvBERT model)"),cSo=l(),Cb=a("li"),xfe=a("strong"),fSo=o("data2vec-text"),mSo=o(" \u2014 "),uG=a("a"),gSo=o("Data2VecTextForMultipleChoice"),hSo=o(" (Data2VecText model)"),pSo=l(),wb=a("li"),$fe=a("strong"),uSo=o("deberta-v2"),_So=o(" \u2014 "),_G=a("a"),bSo=o("DebertaV2ForMultipleChoice"),vSo=o(" (DeBERTa-v2 model)"),FSo=l(),Ab=a("li"),kfe=a("strong"),TSo=o("distilbert"),MSo=o(" \u2014 "),bG=a("a"),ESo=o("DistilBertForMultipleChoice"),CSo=o(" (DistilBERT model)"),wSo=l(),yb=a("li"),Sfe=a("strong"),ASo=o("electra"),ySo=o(" \u2014 "),vG=a("a"),LSo=o("ElectraForMultipleChoice"),xSo=o(" (ELECTRA model)"),$So=l(),Lb=a("li"),Rfe=a("strong"),kSo=o("flaubert"),SSo=o(" \u2014 "),FG=a("a"),RSo=o("FlaubertForMultipleChoice"),BSo=o(" (FlauBERT model)"),PSo=l(),xb=a("li"),Bfe=a("strong"),ISo=o("fnet"),qSo=o(" \u2014 "),TG=a("a"),NSo=o("FNetForMultipleChoice"),jSo=o(" (FNet model)"),DSo=l(),$b=a("li"),Pfe=a("strong"),GSo=o("funnel"),OSo=o(" \u2014 "),MG=a("a"),VSo=o("FunnelForMultipleChoice"),XSo=o(" (Funnel Transformer model)"),zSo=l(),kb=a("li"),Ife=a("strong"),QSo=o("ibert"),WSo=o(" \u2014 "),EG=a("a"),HSo=o("IBertForMultipleChoice"),USo=o(" (I-BERT model)"),JSo=l(),Sb=a("li"),qfe=a("strong"),YSo=o("longformer"),KSo=o(" \u2014 "),CG=a("a"),ZSo=o("LongformerForMultipleChoice"),eRo=o(" (Longformer model)"),oRo=l(),Rb=a("li"),Nfe=a("strong"),rRo=o("megatron-bert"),tRo=o(" \u2014 "),wG=a("a"),aRo=o("MegatronBertForMultipleChoice"),nRo=o(" (MegatronBert model)"),sRo=l(),Bb=a("li"),jfe=a("strong"),lRo=o("mobilebert"),iRo=o(" \u2014 "),AG=a("a"),dRo=o("MobileBertForMultipleChoice"),cRo=o(" (MobileBERT model)"),fRo=l(),Pb=a("li"),Dfe=a("strong"),mRo=o("mpnet"),gRo=o(" \u2014 "),yG=a("a"),hRo=o("MPNetForMultipleChoice"),pRo=o(" (MPNet model)"),uRo=l(),Ib=a("li"),Gfe=a("strong"),_Ro=o("nystromformer"),bRo=o(" \u2014 "),LG=a("a"),vRo=o("NystromformerForMultipleChoice"),FRo=o(" (Nystromformer model)"),TRo=l(),qb=a("li"),Ofe=a("strong"),MRo=o("qdqbert"),ERo=o(" \u2014 "),xG=a("a"),CRo=o("QDQBertForMultipleChoice"),wRo=o(" (QDQBert model)"),ARo=l(),Nb=a("li"),Vfe=a("strong"),yRo=o("rembert"),LRo=o(" \u2014 "),$G=a("a"),xRo=o("RemBertForMultipleChoice"),$Ro=o(" (RemBERT model)"),kRo=l(),jb=a("li"),Xfe=a("strong"),SRo=o("roberta"),RRo=o(" \u2014 "),kG=a("a"),BRo=o("RobertaForMultipleChoice"),PRo=o(" (RoBERTa model)"),IRo=l(),Db=a("li"),zfe=a("strong"),qRo=o("roformer"),NRo=o(" \u2014 "),SG=a("a"),jRo=o("RoFormerForMultipleChoice"),DRo=o(" (RoFormer model)"),GRo=l(),Gb=a("li"),Qfe=a("strong"),ORo=o("squeezebert"),VRo=o(" \u2014 "),RG=a("a"),XRo=o("SqueezeBertForMultipleChoice"),zRo=o(" (SqueezeBERT model)"),QRo=l(),Ob=a("li"),Wfe=a("strong"),WRo=o("xlm"),HRo=o(" \u2014 "),BG=a("a"),URo=o("XLMForMultipleChoice"),JRo=o(" (XLM model)"),YRo=l(),Vb=a("li"),Hfe=a("strong"),KRo=o("xlm-roberta"),ZRo=o(" \u2014 "),PG=a("a"),eBo=o("XLMRobertaForMultipleChoice"),oBo=o(" (XLM-RoBERTa model)"),rBo=l(),Xb=a("li"),Ufe=a("strong"),tBo=o("xlm-roberta-xl"),aBo=o(" \u2014 "),IG=a("a"),nBo=o("XLMRobertaXLForMultipleChoice"),sBo=o(" (XLM-RoBERTa-XL model)"),lBo=l(),zb=a("li"),Jfe=a("strong"),iBo=o("xlnet"),dBo=o(" \u2014 "),qG=a("a"),cBo=o("XLNetForMultipleChoice"),fBo=o(" (XLNet model)"),mBo=l(),Qb=a("li"),Yfe=a("strong"),gBo=o("yoso"),hBo=o(" \u2014 "),NG=a("a"),pBo=o("YosoForMultipleChoice"),uBo=o(" (YOSO model)"),_Bo=l(),Wb=a("p"),bBo=o("The model is set in evaluation mode by default using "),Kfe=a("code"),vBo=o("model.eval()"),FBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zfe=a("code"),TBo=o("model.train()"),MBo=l(),F(Hb.$$.fragment),CIe=l(),Vi=a("h2"),Ub=a("a"),eme=a("span"),F(l0.$$.fragment),EBo=l(),ome=a("span"),CBo=o("AutoModelForNextSentencePrediction"),wIe=l(),Po=a("div"),F(i0.$$.fragment),wBo=l(),Xi=a("p"),ABo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),jG=a("a"),yBo=o("from_pretrained()"),LBo=o(" class method or the "),DG=a("a"),xBo=o("from_config()"),$Bo=o(` class
method.`),kBo=l(),d0=a("p"),SBo=o("This class cannot be instantiated directly using "),rme=a("code"),RBo=o("__init__()"),BBo=o(" (throws an error)."),PBo=l(),it=a("div"),F(c0.$$.fragment),IBo=l(),tme=a("p"),qBo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),NBo=l(),zi=a("p"),jBo=o(`Note:
Loading a model from its configuration file does `),ame=a("strong"),DBo=o("not"),GBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GG=a("a"),OBo=o("from_pretrained()"),VBo=o(" to load the model weights."),XBo=l(),F(Jb.$$.fragment),zBo=l(),oo=a("div"),F(f0.$$.fragment),QBo=l(),nme=a("p"),WBo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),HBo=l(),Ra=a("p"),UBo=o("The model class to instantiate is selected based on the "),sme=a("code"),JBo=o("model_type"),YBo=o(` property of the config object (either
passed as an argument or loaded from `),lme=a("code"),KBo=o("pretrained_model_name_or_path"),ZBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ime=a("code"),ePo=o("pretrained_model_name_or_path"),oPo=o(":"),rPo=l(),Yr=a("ul"),Yb=a("li"),dme=a("strong"),tPo=o("bert"),aPo=o(" \u2014 "),OG=a("a"),nPo=o("BertForNextSentencePrediction"),sPo=o(" (BERT model)"),lPo=l(),Kb=a("li"),cme=a("strong"),iPo=o("fnet"),dPo=o(" \u2014 "),VG=a("a"),cPo=o("FNetForNextSentencePrediction"),fPo=o(" (FNet model)"),mPo=l(),Zb=a("li"),fme=a("strong"),gPo=o("megatron-bert"),hPo=o(" \u2014 "),XG=a("a"),pPo=o("MegatronBertForNextSentencePrediction"),uPo=o(" (MegatronBert model)"),_Po=l(),e2=a("li"),mme=a("strong"),bPo=o("mobilebert"),vPo=o(" \u2014 "),zG=a("a"),FPo=o("MobileBertForNextSentencePrediction"),TPo=o(" (MobileBERT model)"),MPo=l(),o2=a("li"),gme=a("strong"),EPo=o("qdqbert"),CPo=o(" \u2014 "),QG=a("a"),wPo=o("QDQBertForNextSentencePrediction"),APo=o(" (QDQBert model)"),yPo=l(),r2=a("p"),LPo=o("The model is set in evaluation mode by default using "),hme=a("code"),xPo=o("model.eval()"),$Po=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pme=a("code"),kPo=o("model.train()"),SPo=l(),F(t2.$$.fragment),AIe=l(),Qi=a("h2"),a2=a("a"),ume=a("span"),F(m0.$$.fragment),RPo=l(),_me=a("span"),BPo=o("AutoModelForTokenClassification"),yIe=l(),Io=a("div"),F(g0.$$.fragment),PPo=l(),Wi=a("p"),IPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),WG=a("a"),qPo=o("from_pretrained()"),NPo=o(" class method or the "),HG=a("a"),jPo=o("from_config()"),DPo=o(` class
method.`),GPo=l(),h0=a("p"),OPo=o("This class cannot be instantiated directly using "),bme=a("code"),VPo=o("__init__()"),XPo=o(" (throws an error)."),zPo=l(),dt=a("div"),F(p0.$$.fragment),QPo=l(),vme=a("p"),WPo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),HPo=l(),Hi=a("p"),UPo=o(`Note:
Loading a model from its configuration file does `),Fme=a("strong"),JPo=o("not"),YPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UG=a("a"),KPo=o("from_pretrained()"),ZPo=o(" to load the model weights."),eIo=l(),F(n2.$$.fragment),oIo=l(),ro=a("div"),F(u0.$$.fragment),rIo=l(),Tme=a("p"),tIo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),aIo=l(),Ba=a("p"),nIo=o("The model class to instantiate is selected based on the "),Mme=a("code"),sIo=o("model_type"),lIo=o(` property of the config object (either
passed as an argument or loaded from `),Eme=a("code"),iIo=o("pretrained_model_name_or_path"),dIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cme=a("code"),cIo=o("pretrained_model_name_or_path"),fIo=o(":"),mIo=l(),U=a("ul"),s2=a("li"),wme=a("strong"),gIo=o("albert"),hIo=o(" \u2014 "),JG=a("a"),pIo=o("AlbertForTokenClassification"),uIo=o(" (ALBERT model)"),_Io=l(),l2=a("li"),Ame=a("strong"),bIo=o("bert"),vIo=o(" \u2014 "),YG=a("a"),FIo=o("BertForTokenClassification"),TIo=o(" (BERT model)"),MIo=l(),i2=a("li"),yme=a("strong"),EIo=o("big_bird"),CIo=o(" \u2014 "),KG=a("a"),wIo=o("BigBirdForTokenClassification"),AIo=o(" (BigBird model)"),yIo=l(),d2=a("li"),Lme=a("strong"),LIo=o("camembert"),xIo=o(" \u2014 "),ZG=a("a"),$Io=o("CamembertForTokenClassification"),kIo=o(" (CamemBERT model)"),SIo=l(),c2=a("li"),xme=a("strong"),RIo=o("canine"),BIo=o(" \u2014 "),eO=a("a"),PIo=o("CanineForTokenClassification"),IIo=o(" (Canine model)"),qIo=l(),f2=a("li"),$me=a("strong"),NIo=o("convbert"),jIo=o(" \u2014 "),oO=a("a"),DIo=o("ConvBertForTokenClassification"),GIo=o(" (ConvBERT model)"),OIo=l(),m2=a("li"),kme=a("strong"),VIo=o("data2vec-text"),XIo=o(" \u2014 "),rO=a("a"),zIo=o("Data2VecTextForTokenClassification"),QIo=o(" (Data2VecText model)"),WIo=l(),g2=a("li"),Sme=a("strong"),HIo=o("deberta"),UIo=o(" \u2014 "),tO=a("a"),JIo=o("DebertaForTokenClassification"),YIo=o(" (DeBERTa model)"),KIo=l(),h2=a("li"),Rme=a("strong"),ZIo=o("deberta-v2"),eqo=o(" \u2014 "),aO=a("a"),oqo=o("DebertaV2ForTokenClassification"),rqo=o(" (DeBERTa-v2 model)"),tqo=l(),p2=a("li"),Bme=a("strong"),aqo=o("distilbert"),nqo=o(" \u2014 "),nO=a("a"),sqo=o("DistilBertForTokenClassification"),lqo=o(" (DistilBERT model)"),iqo=l(),u2=a("li"),Pme=a("strong"),dqo=o("electra"),cqo=o(" \u2014 "),sO=a("a"),fqo=o("ElectraForTokenClassification"),mqo=o(" (ELECTRA model)"),gqo=l(),_2=a("li"),Ime=a("strong"),hqo=o("flaubert"),pqo=o(" \u2014 "),lO=a("a"),uqo=o("FlaubertForTokenClassification"),_qo=o(" (FlauBERT model)"),bqo=l(),b2=a("li"),qme=a("strong"),vqo=o("fnet"),Fqo=o(" \u2014 "),iO=a("a"),Tqo=o("FNetForTokenClassification"),Mqo=o(" (FNet model)"),Eqo=l(),v2=a("li"),Nme=a("strong"),Cqo=o("funnel"),wqo=o(" \u2014 "),dO=a("a"),Aqo=o("FunnelForTokenClassification"),yqo=o(" (Funnel Transformer model)"),Lqo=l(),F2=a("li"),jme=a("strong"),xqo=o("gpt2"),$qo=o(" \u2014 "),cO=a("a"),kqo=o("GPT2ForTokenClassification"),Sqo=o(" (OpenAI GPT-2 model)"),Rqo=l(),T2=a("li"),Dme=a("strong"),Bqo=o("ibert"),Pqo=o(" \u2014 "),fO=a("a"),Iqo=o("IBertForTokenClassification"),qqo=o(" (I-BERT model)"),Nqo=l(),M2=a("li"),Gme=a("strong"),jqo=o("layoutlm"),Dqo=o(" \u2014 "),mO=a("a"),Gqo=o("LayoutLMForTokenClassification"),Oqo=o(" (LayoutLM model)"),Vqo=l(),E2=a("li"),Ome=a("strong"),Xqo=o("layoutlmv2"),zqo=o(" \u2014 "),gO=a("a"),Qqo=o("LayoutLMv2ForTokenClassification"),Wqo=o(" (LayoutLMv2 model)"),Hqo=l(),C2=a("li"),Vme=a("strong"),Uqo=o("longformer"),Jqo=o(" \u2014 "),hO=a("a"),Yqo=o("LongformerForTokenClassification"),Kqo=o(" (Longformer model)"),Zqo=l(),w2=a("li"),Xme=a("strong"),eNo=o("megatron-bert"),oNo=o(" \u2014 "),pO=a("a"),rNo=o("MegatronBertForTokenClassification"),tNo=o(" (MegatronBert model)"),aNo=l(),A2=a("li"),zme=a("strong"),nNo=o("mobilebert"),sNo=o(" \u2014 "),uO=a("a"),lNo=o("MobileBertForTokenClassification"),iNo=o(" (MobileBERT model)"),dNo=l(),y2=a("li"),Qme=a("strong"),cNo=o("mpnet"),fNo=o(" \u2014 "),_O=a("a"),mNo=o("MPNetForTokenClassification"),gNo=o(" (MPNet model)"),hNo=l(),L2=a("li"),Wme=a("strong"),pNo=o("nystromformer"),uNo=o(" \u2014 "),bO=a("a"),_No=o("NystromformerForTokenClassification"),bNo=o(" (Nystromformer model)"),vNo=l(),x2=a("li"),Hme=a("strong"),FNo=o("qdqbert"),TNo=o(" \u2014 "),vO=a("a"),MNo=o("QDQBertForTokenClassification"),ENo=o(" (QDQBert model)"),CNo=l(),$2=a("li"),Ume=a("strong"),wNo=o("rembert"),ANo=o(" \u2014 "),FO=a("a"),yNo=o("RemBertForTokenClassification"),LNo=o(" (RemBERT model)"),xNo=l(),k2=a("li"),Jme=a("strong"),$No=o("roberta"),kNo=o(" \u2014 "),TO=a("a"),SNo=o("RobertaForTokenClassification"),RNo=o(" (RoBERTa model)"),BNo=l(),S2=a("li"),Yme=a("strong"),PNo=o("roformer"),INo=o(" \u2014 "),MO=a("a"),qNo=o("RoFormerForTokenClassification"),NNo=o(" (RoFormer model)"),jNo=l(),R2=a("li"),Kme=a("strong"),DNo=o("squeezebert"),GNo=o(" \u2014 "),EO=a("a"),ONo=o("SqueezeBertForTokenClassification"),VNo=o(" (SqueezeBERT model)"),XNo=l(),B2=a("li"),Zme=a("strong"),zNo=o("xlm"),QNo=o(" \u2014 "),CO=a("a"),WNo=o("XLMForTokenClassification"),HNo=o(" (XLM model)"),UNo=l(),P2=a("li"),ege=a("strong"),JNo=o("xlm-roberta"),YNo=o(" \u2014 "),wO=a("a"),KNo=o("XLMRobertaForTokenClassification"),ZNo=o(" (XLM-RoBERTa model)"),ejo=l(),I2=a("li"),oge=a("strong"),ojo=o("xlm-roberta-xl"),rjo=o(" \u2014 "),AO=a("a"),tjo=o("XLMRobertaXLForTokenClassification"),ajo=o(" (XLM-RoBERTa-XL model)"),njo=l(),q2=a("li"),rge=a("strong"),sjo=o("xlnet"),ljo=o(" \u2014 "),yO=a("a"),ijo=o("XLNetForTokenClassification"),djo=o(" (XLNet model)"),cjo=l(),N2=a("li"),tge=a("strong"),fjo=o("yoso"),mjo=o(" \u2014 "),LO=a("a"),gjo=o("YosoForTokenClassification"),hjo=o(" (YOSO model)"),pjo=l(),j2=a("p"),ujo=o("The model is set in evaluation mode by default using "),age=a("code"),_jo=o("model.eval()"),bjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nge=a("code"),vjo=o("model.train()"),Fjo=l(),F(D2.$$.fragment),LIe=l(),Ui=a("h2"),G2=a("a"),sge=a("span"),F(_0.$$.fragment),Tjo=l(),lge=a("span"),Mjo=o("AutoModelForQuestionAnswering"),xIe=l(),qo=a("div"),F(b0.$$.fragment),Ejo=l(),Ji=a("p"),Cjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),xO=a("a"),wjo=o("from_pretrained()"),Ajo=o(" class method or the "),$O=a("a"),yjo=o("from_config()"),Ljo=o(` class
method.`),xjo=l(),v0=a("p"),$jo=o("This class cannot be instantiated directly using "),ige=a("code"),kjo=o("__init__()"),Sjo=o(" (throws an error)."),Rjo=l(),ct=a("div"),F(F0.$$.fragment),Bjo=l(),dge=a("p"),Pjo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Ijo=l(),Yi=a("p"),qjo=o(`Note:
Loading a model from its configuration file does `),cge=a("strong"),Njo=o("not"),jjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kO=a("a"),Djo=o("from_pretrained()"),Gjo=o(" to load the model weights."),Ojo=l(),F(O2.$$.fragment),Vjo=l(),to=a("div"),F(T0.$$.fragment),Xjo=l(),fge=a("p"),zjo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Qjo=l(),Pa=a("p"),Wjo=o("The model class to instantiate is selected based on the "),mge=a("code"),Hjo=o("model_type"),Ujo=o(` property of the config object (either
passed as an argument or loaded from `),gge=a("code"),Jjo=o("pretrained_model_name_or_path"),Yjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hge=a("code"),Kjo=o("pretrained_model_name_or_path"),Zjo=o(":"),eDo=l(),O=a("ul"),V2=a("li"),pge=a("strong"),oDo=o("albert"),rDo=o(" \u2014 "),SO=a("a"),tDo=o("AlbertForQuestionAnswering"),aDo=o(" (ALBERT model)"),nDo=l(),X2=a("li"),uge=a("strong"),sDo=o("bart"),lDo=o(" \u2014 "),RO=a("a"),iDo=o("BartForQuestionAnswering"),dDo=o(" (BART model)"),cDo=l(),z2=a("li"),_ge=a("strong"),fDo=o("bert"),mDo=o(" \u2014 "),BO=a("a"),gDo=o("BertForQuestionAnswering"),hDo=o(" (BERT model)"),pDo=l(),Q2=a("li"),bge=a("strong"),uDo=o("big_bird"),_Do=o(" \u2014 "),PO=a("a"),bDo=o("BigBirdForQuestionAnswering"),vDo=o(" (BigBird model)"),FDo=l(),W2=a("li"),vge=a("strong"),TDo=o("bigbird_pegasus"),MDo=o(" \u2014 "),IO=a("a"),EDo=o("BigBirdPegasusForQuestionAnswering"),CDo=o(" (BigBirdPegasus model)"),wDo=l(),H2=a("li"),Fge=a("strong"),ADo=o("camembert"),yDo=o(" \u2014 "),qO=a("a"),LDo=o("CamembertForQuestionAnswering"),xDo=o(" (CamemBERT model)"),$Do=l(),U2=a("li"),Tge=a("strong"),kDo=o("canine"),SDo=o(" \u2014 "),NO=a("a"),RDo=o("CanineForQuestionAnswering"),BDo=o(" (Canine model)"),PDo=l(),J2=a("li"),Mge=a("strong"),IDo=o("convbert"),qDo=o(" \u2014 "),jO=a("a"),NDo=o("ConvBertForQuestionAnswering"),jDo=o(" (ConvBERT model)"),DDo=l(),Y2=a("li"),Ege=a("strong"),GDo=o("data2vec-text"),ODo=o(" \u2014 "),DO=a("a"),VDo=o("Data2VecTextForQuestionAnswering"),XDo=o(" (Data2VecText model)"),zDo=l(),K2=a("li"),Cge=a("strong"),QDo=o("deberta"),WDo=o(" \u2014 "),GO=a("a"),HDo=o("DebertaForQuestionAnswering"),UDo=o(" (DeBERTa model)"),JDo=l(),Z2=a("li"),wge=a("strong"),YDo=o("deberta-v2"),KDo=o(" \u2014 "),OO=a("a"),ZDo=o("DebertaV2ForQuestionAnswering"),eGo=o(" (DeBERTa-v2 model)"),oGo=l(),ev=a("li"),Age=a("strong"),rGo=o("distilbert"),tGo=o(" \u2014 "),VO=a("a"),aGo=o("DistilBertForQuestionAnswering"),nGo=o(" (DistilBERT model)"),sGo=l(),ov=a("li"),yge=a("strong"),lGo=o("electra"),iGo=o(" \u2014 "),XO=a("a"),dGo=o("ElectraForQuestionAnswering"),cGo=o(" (ELECTRA model)"),fGo=l(),rv=a("li"),Lge=a("strong"),mGo=o("flaubert"),gGo=o(" \u2014 "),zO=a("a"),hGo=o("FlaubertForQuestionAnsweringSimple"),pGo=o(" (FlauBERT model)"),uGo=l(),tv=a("li"),xge=a("strong"),_Go=o("fnet"),bGo=o(" \u2014 "),QO=a("a"),vGo=o("FNetForQuestionAnswering"),FGo=o(" (FNet model)"),TGo=l(),av=a("li"),$ge=a("strong"),MGo=o("funnel"),EGo=o(" \u2014 "),WO=a("a"),CGo=o("FunnelForQuestionAnswering"),wGo=o(" (Funnel Transformer model)"),AGo=l(),nv=a("li"),kge=a("strong"),yGo=o("gptj"),LGo=o(" \u2014 "),HO=a("a"),xGo=o("GPTJForQuestionAnswering"),$Go=o(" (GPT-J model)"),kGo=l(),sv=a("li"),Sge=a("strong"),SGo=o("ibert"),RGo=o(" \u2014 "),UO=a("a"),BGo=o("IBertForQuestionAnswering"),PGo=o(" (I-BERT model)"),IGo=l(),lv=a("li"),Rge=a("strong"),qGo=o("layoutlmv2"),NGo=o(" \u2014 "),JO=a("a"),jGo=o("LayoutLMv2ForQuestionAnswering"),DGo=o(" (LayoutLMv2 model)"),GGo=l(),iv=a("li"),Bge=a("strong"),OGo=o("led"),VGo=o(" \u2014 "),YO=a("a"),XGo=o("LEDForQuestionAnswering"),zGo=o(" (LED model)"),QGo=l(),dv=a("li"),Pge=a("strong"),WGo=o("longformer"),HGo=o(" \u2014 "),KO=a("a"),UGo=o("LongformerForQuestionAnswering"),JGo=o(" (Longformer model)"),YGo=l(),cv=a("li"),Ige=a("strong"),KGo=o("lxmert"),ZGo=o(" \u2014 "),ZO=a("a"),eOo=o("LxmertForQuestionAnswering"),oOo=o(" (LXMERT model)"),rOo=l(),fv=a("li"),qge=a("strong"),tOo=o("mbart"),aOo=o(" \u2014 "),eV=a("a"),nOo=o("MBartForQuestionAnswering"),sOo=o(" (mBART model)"),lOo=l(),mv=a("li"),Nge=a("strong"),iOo=o("megatron-bert"),dOo=o(" \u2014 "),oV=a("a"),cOo=o("MegatronBertForQuestionAnswering"),fOo=o(" (MegatronBert model)"),mOo=l(),gv=a("li"),jge=a("strong"),gOo=o("mobilebert"),hOo=o(" \u2014 "),rV=a("a"),pOo=o("MobileBertForQuestionAnswering"),uOo=o(" (MobileBERT model)"),_Oo=l(),hv=a("li"),Dge=a("strong"),bOo=o("mpnet"),vOo=o(" \u2014 "),tV=a("a"),FOo=o("MPNetForQuestionAnswering"),TOo=o(" (MPNet model)"),MOo=l(),pv=a("li"),Gge=a("strong"),EOo=o("nystromformer"),COo=o(" \u2014 "),aV=a("a"),wOo=o("NystromformerForQuestionAnswering"),AOo=o(" (Nystromformer model)"),yOo=l(),uv=a("li"),Oge=a("strong"),LOo=o("qdqbert"),xOo=o(" \u2014 "),nV=a("a"),$Oo=o("QDQBertForQuestionAnswering"),kOo=o(" (QDQBert model)"),SOo=l(),_v=a("li"),Vge=a("strong"),ROo=o("reformer"),BOo=o(" \u2014 "),sV=a("a"),POo=o("ReformerForQuestionAnswering"),IOo=o(" (Reformer model)"),qOo=l(),bv=a("li"),Xge=a("strong"),NOo=o("rembert"),jOo=o(" \u2014 "),lV=a("a"),DOo=o("RemBertForQuestionAnswering"),GOo=o(" (RemBERT model)"),OOo=l(),vv=a("li"),zge=a("strong"),VOo=o("roberta"),XOo=o(" \u2014 "),iV=a("a"),zOo=o("RobertaForQuestionAnswering"),QOo=o(" (RoBERTa model)"),WOo=l(),Fv=a("li"),Qge=a("strong"),HOo=o("roformer"),UOo=o(" \u2014 "),dV=a("a"),JOo=o("RoFormerForQuestionAnswering"),YOo=o(" (RoFormer model)"),KOo=l(),Tv=a("li"),Wge=a("strong"),ZOo=o("splinter"),eVo=o(" \u2014 "),cV=a("a"),oVo=o("SplinterForQuestionAnswering"),rVo=o(" (Splinter model)"),tVo=l(),Mv=a("li"),Hge=a("strong"),aVo=o("squeezebert"),nVo=o(" \u2014 "),fV=a("a"),sVo=o("SqueezeBertForQuestionAnswering"),lVo=o(" (SqueezeBERT model)"),iVo=l(),Ev=a("li"),Uge=a("strong"),dVo=o("xlm"),cVo=o(" \u2014 "),mV=a("a"),fVo=o("XLMForQuestionAnsweringSimple"),mVo=o(" (XLM model)"),gVo=l(),Cv=a("li"),Jge=a("strong"),hVo=o("xlm-roberta"),pVo=o(" \u2014 "),gV=a("a"),uVo=o("XLMRobertaForQuestionAnswering"),_Vo=o(" (XLM-RoBERTa model)"),bVo=l(),wv=a("li"),Yge=a("strong"),vVo=o("xlm-roberta-xl"),FVo=o(" \u2014 "),hV=a("a"),TVo=o("XLMRobertaXLForQuestionAnswering"),MVo=o(" (XLM-RoBERTa-XL model)"),EVo=l(),Av=a("li"),Kge=a("strong"),CVo=o("xlnet"),wVo=o(" \u2014 "),pV=a("a"),AVo=o("XLNetForQuestionAnsweringSimple"),yVo=o(" (XLNet model)"),LVo=l(),yv=a("li"),Zge=a("strong"),xVo=o("yoso"),$Vo=o(" \u2014 "),uV=a("a"),kVo=o("YosoForQuestionAnswering"),SVo=o(" (YOSO model)"),RVo=l(),Lv=a("p"),BVo=o("The model is set in evaluation mode by default using "),ehe=a("code"),PVo=o("model.eval()"),IVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ohe=a("code"),qVo=o("model.train()"),NVo=l(),F(xv.$$.fragment),$Ie=l(),Ki=a("h2"),$v=a("a"),rhe=a("span"),F(M0.$$.fragment),jVo=l(),the=a("span"),DVo=o("AutoModelForTableQuestionAnswering"),kIe=l(),No=a("div"),F(E0.$$.fragment),GVo=l(),Zi=a("p"),OVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),_V=a("a"),VVo=o("from_pretrained()"),XVo=o(" class method or the "),bV=a("a"),zVo=o("from_config()"),QVo=o(` class
method.`),WVo=l(),C0=a("p"),HVo=o("This class cannot be instantiated directly using "),ahe=a("code"),UVo=o("__init__()"),JVo=o(" (throws an error)."),YVo=l(),ft=a("div"),F(w0.$$.fragment),KVo=l(),nhe=a("p"),ZVo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),eXo=l(),ed=a("p"),oXo=o(`Note:
Loading a model from its configuration file does `),she=a("strong"),rXo=o("not"),tXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vV=a("a"),aXo=o("from_pretrained()"),nXo=o(" to load the model weights."),sXo=l(),F(kv.$$.fragment),lXo=l(),ao=a("div"),F(A0.$$.fragment),iXo=l(),lhe=a("p"),dXo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),cXo=l(),Ia=a("p"),fXo=o("The model class to instantiate is selected based on the "),ihe=a("code"),mXo=o("model_type"),gXo=o(` property of the config object (either
passed as an argument or loaded from `),dhe=a("code"),hXo=o("pretrained_model_name_or_path"),pXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),che=a("code"),uXo=o("pretrained_model_name_or_path"),_Xo=o(":"),bXo=l(),fhe=a("ul"),Sv=a("li"),mhe=a("strong"),vXo=o("tapas"),FXo=o(" \u2014 "),FV=a("a"),TXo=o("TapasForQuestionAnswering"),MXo=o(" (TAPAS model)"),EXo=l(),Rv=a("p"),CXo=o("The model is set in evaluation mode by default using "),ghe=a("code"),wXo=o("model.eval()"),AXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hhe=a("code"),yXo=o("model.train()"),LXo=l(),F(Bv.$$.fragment),SIe=l(),od=a("h2"),Pv=a("a"),phe=a("span"),F(y0.$$.fragment),xXo=l(),uhe=a("span"),$Xo=o("AutoModelForImageClassification"),RIe=l(),jo=a("div"),F(L0.$$.fragment),kXo=l(),rd=a("p"),SXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),TV=a("a"),RXo=o("from_pretrained()"),BXo=o(" class method or the "),MV=a("a"),PXo=o("from_config()"),IXo=o(` class
method.`),qXo=l(),x0=a("p"),NXo=o("This class cannot be instantiated directly using "),_he=a("code"),jXo=o("__init__()"),DXo=o(" (throws an error)."),GXo=l(),mt=a("div"),F($0.$$.fragment),OXo=l(),bhe=a("p"),VXo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),XXo=l(),td=a("p"),zXo=o(`Note:
Loading a model from its configuration file does `),vhe=a("strong"),QXo=o("not"),WXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EV=a("a"),HXo=o("from_pretrained()"),UXo=o(" to load the model weights."),JXo=l(),F(Iv.$$.fragment),YXo=l(),no=a("div"),F(k0.$$.fragment),KXo=l(),Fhe=a("p"),ZXo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ezo=l(),qa=a("p"),ozo=o("The model class to instantiate is selected based on the "),The=a("code"),rzo=o("model_type"),tzo=o(` property of the config object (either
passed as an argument or loaded from `),Mhe=a("code"),azo=o("pretrained_model_name_or_path"),nzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ehe=a("code"),szo=o("pretrained_model_name_or_path"),lzo=o(":"),izo=l(),Fe=a("ul"),qv=a("li"),Che=a("strong"),dzo=o("beit"),czo=o(" \u2014 "),CV=a("a"),fzo=o("BeitForImageClassification"),mzo=o(" (BEiT model)"),gzo=l(),Nv=a("li"),whe=a("strong"),hzo=o("convnext"),pzo=o(" \u2014 "),wV=a("a"),uzo=o("ConvNextForImageClassification"),_zo=o(" (ConvNext model)"),bzo=l(),jv=a("li"),Ahe=a("strong"),vzo=o("data2vec-vision"),Fzo=o(" \u2014 "),AV=a("a"),Tzo=o("Data2VecVisionForImageClassification"),Mzo=o(" (Data2VecVision model)"),Ezo=l(),Bs=a("li"),yhe=a("strong"),Czo=o("deit"),wzo=o(" \u2014 "),yV=a("a"),Azo=o("DeiTForImageClassification"),yzo=o(" or "),LV=a("a"),Lzo=o("DeiTForImageClassificationWithTeacher"),xzo=o(" (DeiT model)"),$zo=l(),Dv=a("li"),Lhe=a("strong"),kzo=o("imagegpt"),Szo=o(" \u2014 "),xV=a("a"),Rzo=o("ImageGPTForImageClassification"),Bzo=o(" (ImageGPT model)"),Pzo=l(),gt=a("li"),xhe=a("strong"),Izo=o("perceiver"),qzo=o(" \u2014 "),$V=a("a"),Nzo=o("PerceiverForImageClassificationLearned"),jzo=o(" or "),kV=a("a"),Dzo=o("PerceiverForImageClassificationFourier"),Gzo=o(" or "),SV=a("a"),Ozo=o("PerceiverForImageClassificationConvProcessing"),Vzo=o(" (Perceiver model)"),Xzo=l(),Gv=a("li"),$he=a("strong"),zzo=o("poolformer"),Qzo=o(" \u2014 "),RV=a("a"),Wzo=o("PoolFormerForImageClassification"),Hzo=o(" (PoolFormer model)"),Uzo=l(),Ov=a("li"),khe=a("strong"),Jzo=o("regnet"),Yzo=o(" \u2014 "),BV=a("a"),Kzo=o("RegNetForImageClassification"),Zzo=o(" (RegNet model)"),eQo=l(),Vv=a("li"),She=a("strong"),oQo=o("resnet"),rQo=o(" \u2014 "),PV=a("a"),tQo=o("ResNetForImageClassification"),aQo=o(" (ResNet model)"),nQo=l(),Xv=a("li"),Rhe=a("strong"),sQo=o("segformer"),lQo=o(" \u2014 "),IV=a("a"),iQo=o("SegformerForImageClassification"),dQo=o(" (SegFormer model)"),cQo=l(),zv=a("li"),Bhe=a("strong"),fQo=o("swin"),mQo=o(" \u2014 "),qV=a("a"),gQo=o("SwinForImageClassification"),hQo=o(" (Swin model)"),pQo=l(),Qv=a("li"),Phe=a("strong"),uQo=o("van"),_Qo=o(" \u2014 "),NV=a("a"),bQo=o("VanForImageClassification"),vQo=o(" (VAN model)"),FQo=l(),Wv=a("li"),Ihe=a("strong"),TQo=o("vit"),MQo=o(" \u2014 "),jV=a("a"),EQo=o("ViTForImageClassification"),CQo=o(" (ViT model)"),wQo=l(),Hv=a("p"),AQo=o("The model is set in evaluation mode by default using "),qhe=a("code"),yQo=o("model.eval()"),LQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nhe=a("code"),xQo=o("model.train()"),$Qo=l(),F(Uv.$$.fragment),BIe=l(),ad=a("h2"),Jv=a("a"),jhe=a("span"),F(S0.$$.fragment),kQo=l(),Dhe=a("span"),SQo=o("AutoModelForVision2Seq"),PIe=l(),Do=a("div"),F(R0.$$.fragment),RQo=l(),nd=a("p"),BQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DV=a("a"),PQo=o("from_pretrained()"),IQo=o(" class method or the "),GV=a("a"),qQo=o("from_config()"),NQo=o(` class
method.`),jQo=l(),B0=a("p"),DQo=o("This class cannot be instantiated directly using "),Ghe=a("code"),GQo=o("__init__()"),OQo=o(" (throws an error)."),VQo=l(),ht=a("div"),F(P0.$$.fragment),XQo=l(),Ohe=a("p"),zQo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),QQo=l(),sd=a("p"),WQo=o(`Note:
Loading a model from its configuration file does `),Vhe=a("strong"),HQo=o("not"),UQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OV=a("a"),JQo=o("from_pretrained()"),YQo=o(" to load the model weights."),KQo=l(),F(Yv.$$.fragment),ZQo=l(),so=a("div"),F(I0.$$.fragment),eWo=l(),Xhe=a("p"),oWo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),rWo=l(),Na=a("p"),tWo=o("The model class to instantiate is selected based on the "),zhe=a("code"),aWo=o("model_type"),nWo=o(` property of the config object (either
passed as an argument or loaded from `),Qhe=a("code"),sWo=o("pretrained_model_name_or_path"),lWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Whe=a("code"),iWo=o("pretrained_model_name_or_path"),dWo=o(":"),cWo=l(),Hhe=a("ul"),Kv=a("li"),Uhe=a("strong"),fWo=o("vision-encoder-decoder"),mWo=o(" \u2014 "),VV=a("a"),gWo=o("VisionEncoderDecoderModel"),hWo=o(" (Vision Encoder decoder model)"),pWo=l(),Zv=a("p"),uWo=o("The model is set in evaluation mode by default using "),Jhe=a("code"),_Wo=o("model.eval()"),bWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yhe=a("code"),vWo=o("model.train()"),FWo=l(),F(eF.$$.fragment),IIe=l(),ld=a("h2"),oF=a("a"),Khe=a("span"),F(q0.$$.fragment),TWo=l(),Zhe=a("span"),MWo=o("AutoModelForAudioClassification"),qIe=l(),Go=a("div"),F(N0.$$.fragment),EWo=l(),id=a("p"),CWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),XV=a("a"),wWo=o("from_pretrained()"),AWo=o(" class method or the "),zV=a("a"),yWo=o("from_config()"),LWo=o(` class
method.`),xWo=l(),j0=a("p"),$Wo=o("This class cannot be instantiated directly using "),epe=a("code"),kWo=o("__init__()"),SWo=o(" (throws an error)."),RWo=l(),pt=a("div"),F(D0.$$.fragment),BWo=l(),ope=a("p"),PWo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),IWo=l(),dd=a("p"),qWo=o(`Note:
Loading a model from its configuration file does `),rpe=a("strong"),NWo=o("not"),jWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QV=a("a"),DWo=o("from_pretrained()"),GWo=o(" to load the model weights."),OWo=l(),F(rF.$$.fragment),VWo=l(),lo=a("div"),F(G0.$$.fragment),XWo=l(),tpe=a("p"),zWo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),QWo=l(),ja=a("p"),WWo=o("The model class to instantiate is selected based on the "),ape=a("code"),HWo=o("model_type"),UWo=o(` property of the config object (either
passed as an argument or loaded from `),npe=a("code"),JWo=o("pretrained_model_name_or_path"),YWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),spe=a("code"),KWo=o("pretrained_model_name_or_path"),ZWo=o(":"),eHo=l(),Ne=a("ul"),tF=a("li"),lpe=a("strong"),oHo=o("data2vec-audio"),rHo=o(" \u2014 "),WV=a("a"),tHo=o("Data2VecAudioForSequenceClassification"),aHo=o(" (Data2VecAudio model)"),nHo=l(),aF=a("li"),ipe=a("strong"),sHo=o("hubert"),lHo=o(" \u2014 "),HV=a("a"),iHo=o("HubertForSequenceClassification"),dHo=o(" (Hubert model)"),cHo=l(),nF=a("li"),dpe=a("strong"),fHo=o("sew"),mHo=o(" \u2014 "),UV=a("a"),gHo=o("SEWForSequenceClassification"),hHo=o(" (SEW model)"),pHo=l(),sF=a("li"),cpe=a("strong"),uHo=o("sew-d"),_Ho=o(" \u2014 "),JV=a("a"),bHo=o("SEWDForSequenceClassification"),vHo=o(" (SEW-D model)"),FHo=l(),lF=a("li"),fpe=a("strong"),THo=o("unispeech"),MHo=o(" \u2014 "),YV=a("a"),EHo=o("UniSpeechForSequenceClassification"),CHo=o(" (UniSpeech model)"),wHo=l(),iF=a("li"),mpe=a("strong"),AHo=o("unispeech-sat"),yHo=o(" \u2014 "),KV=a("a"),LHo=o("UniSpeechSatForSequenceClassification"),xHo=o(" (UniSpeechSat model)"),$Ho=l(),dF=a("li"),gpe=a("strong"),kHo=o("wav2vec2"),SHo=o(" \u2014 "),ZV=a("a"),RHo=o("Wav2Vec2ForSequenceClassification"),BHo=o(" (Wav2Vec2 model)"),PHo=l(),cF=a("li"),hpe=a("strong"),IHo=o("wavlm"),qHo=o(" \u2014 "),eX=a("a"),NHo=o("WavLMForSequenceClassification"),jHo=o(" (WavLM model)"),DHo=l(),fF=a("p"),GHo=o("The model is set in evaluation mode by default using "),ppe=a("code"),OHo=o("model.eval()"),VHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),upe=a("code"),XHo=o("model.train()"),zHo=l(),F(mF.$$.fragment),NIe=l(),cd=a("h2"),gF=a("a"),_pe=a("span"),F(O0.$$.fragment),QHo=l(),bpe=a("span"),WHo=o("AutoModelForAudioFrameClassification"),jIe=l(),Oo=a("div"),F(V0.$$.fragment),HHo=l(),fd=a("p"),UHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),oX=a("a"),JHo=o("from_pretrained()"),YHo=o(" class method or the "),rX=a("a"),KHo=o("from_config()"),ZHo=o(` class
method.`),eUo=l(),X0=a("p"),oUo=o("This class cannot be instantiated directly using "),vpe=a("code"),rUo=o("__init__()"),tUo=o(" (throws an error)."),aUo=l(),ut=a("div"),F(z0.$$.fragment),nUo=l(),Fpe=a("p"),sUo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),lUo=l(),md=a("p"),iUo=o(`Note:
Loading a model from its configuration file does `),Tpe=a("strong"),dUo=o("not"),cUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tX=a("a"),fUo=o("from_pretrained()"),mUo=o(" to load the model weights."),gUo=l(),F(hF.$$.fragment),hUo=l(),io=a("div"),F(Q0.$$.fragment),pUo=l(),Mpe=a("p"),uUo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),_Uo=l(),Da=a("p"),bUo=o("The model class to instantiate is selected based on the "),Epe=a("code"),vUo=o("model_type"),FUo=o(` property of the config object (either
passed as an argument or loaded from `),Cpe=a("code"),TUo=o("pretrained_model_name_or_path"),MUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wpe=a("code"),EUo=o("pretrained_model_name_or_path"),CUo=o(":"),wUo=l(),Ga=a("ul"),pF=a("li"),Ape=a("strong"),AUo=o("data2vec-audio"),yUo=o(" \u2014 "),aX=a("a"),LUo=o("Data2VecAudioForAudioFrameClassification"),xUo=o(" (Data2VecAudio model)"),$Uo=l(),uF=a("li"),ype=a("strong"),kUo=o("unispeech-sat"),SUo=o(" \u2014 "),nX=a("a"),RUo=o("UniSpeechSatForAudioFrameClassification"),BUo=o(" (UniSpeechSat model)"),PUo=l(),_F=a("li"),Lpe=a("strong"),IUo=o("wav2vec2"),qUo=o(" \u2014 "),sX=a("a"),NUo=o("Wav2Vec2ForAudioFrameClassification"),jUo=o(" (Wav2Vec2 model)"),DUo=l(),bF=a("li"),xpe=a("strong"),GUo=o("wavlm"),OUo=o(" \u2014 "),lX=a("a"),VUo=o("WavLMForAudioFrameClassification"),XUo=o(" (WavLM model)"),zUo=l(),vF=a("p"),QUo=o("The model is set in evaluation mode by default using "),$pe=a("code"),WUo=o("model.eval()"),HUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kpe=a("code"),UUo=o("model.train()"),JUo=l(),F(FF.$$.fragment),DIe=l(),gd=a("h2"),TF=a("a"),Spe=a("span"),F(W0.$$.fragment),YUo=l(),Rpe=a("span"),KUo=o("AutoModelForCTC"),GIe=l(),Vo=a("div"),F(H0.$$.fragment),ZUo=l(),hd=a("p"),eJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),iX=a("a"),oJo=o("from_pretrained()"),rJo=o(" class method or the "),dX=a("a"),tJo=o("from_config()"),aJo=o(` class
method.`),nJo=l(),U0=a("p"),sJo=o("This class cannot be instantiated directly using "),Bpe=a("code"),lJo=o("__init__()"),iJo=o(" (throws an error)."),dJo=l(),_t=a("div"),F(J0.$$.fragment),cJo=l(),Ppe=a("p"),fJo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),mJo=l(),pd=a("p"),gJo=o(`Note:
Loading a model from its configuration file does `),Ipe=a("strong"),hJo=o("not"),pJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cX=a("a"),uJo=o("from_pretrained()"),_Jo=o(" to load the model weights."),bJo=l(),F(MF.$$.fragment),vJo=l(),co=a("div"),F(Y0.$$.fragment),FJo=l(),qpe=a("p"),TJo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),MJo=l(),Oa=a("p"),EJo=o("The model class to instantiate is selected based on the "),Npe=a("code"),CJo=o("model_type"),wJo=o(` property of the config object (either
passed as an argument or loaded from `),jpe=a("code"),AJo=o("pretrained_model_name_or_path"),yJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dpe=a("code"),LJo=o("pretrained_model_name_or_path"),xJo=o(":"),$Jo=l(),je=a("ul"),EF=a("li"),Gpe=a("strong"),kJo=o("data2vec-audio"),SJo=o(" \u2014 "),fX=a("a"),RJo=o("Data2VecAudioForCTC"),BJo=o(" (Data2VecAudio model)"),PJo=l(),CF=a("li"),Ope=a("strong"),IJo=o("hubert"),qJo=o(" \u2014 "),mX=a("a"),NJo=o("HubertForCTC"),jJo=o(" (Hubert model)"),DJo=l(),wF=a("li"),Vpe=a("strong"),GJo=o("sew"),OJo=o(" \u2014 "),gX=a("a"),VJo=o("SEWForCTC"),XJo=o(" (SEW model)"),zJo=l(),AF=a("li"),Xpe=a("strong"),QJo=o("sew-d"),WJo=o(" \u2014 "),hX=a("a"),HJo=o("SEWDForCTC"),UJo=o(" (SEW-D model)"),JJo=l(),yF=a("li"),zpe=a("strong"),YJo=o("unispeech"),KJo=o(" \u2014 "),pX=a("a"),ZJo=o("UniSpeechForCTC"),eYo=o(" (UniSpeech model)"),oYo=l(),LF=a("li"),Qpe=a("strong"),rYo=o("unispeech-sat"),tYo=o(" \u2014 "),uX=a("a"),aYo=o("UniSpeechSatForCTC"),nYo=o(" (UniSpeechSat model)"),sYo=l(),xF=a("li"),Wpe=a("strong"),lYo=o("wav2vec2"),iYo=o(" \u2014 "),_X=a("a"),dYo=o("Wav2Vec2ForCTC"),cYo=o(" (Wav2Vec2 model)"),fYo=l(),$F=a("li"),Hpe=a("strong"),mYo=o("wavlm"),gYo=o(" \u2014 "),bX=a("a"),hYo=o("WavLMForCTC"),pYo=o(" (WavLM model)"),uYo=l(),kF=a("p"),_Yo=o("The model is set in evaluation mode by default using "),Upe=a("code"),bYo=o("model.eval()"),vYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jpe=a("code"),FYo=o("model.train()"),TYo=l(),F(SF.$$.fragment),OIe=l(),ud=a("h2"),RF=a("a"),Ype=a("span"),F(K0.$$.fragment),MYo=l(),Kpe=a("span"),EYo=o("AutoModelForSpeechSeq2Seq"),VIe=l(),Xo=a("div"),F(Z0.$$.fragment),CYo=l(),_d=a("p"),wYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),vX=a("a"),AYo=o("from_pretrained()"),yYo=o(" class method or the "),FX=a("a"),LYo=o("from_config()"),xYo=o(` class
method.`),$Yo=l(),ey=a("p"),kYo=o("This class cannot be instantiated directly using "),Zpe=a("code"),SYo=o("__init__()"),RYo=o(" (throws an error)."),BYo=l(),bt=a("div"),F(oy.$$.fragment),PYo=l(),eue=a("p"),IYo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),qYo=l(),bd=a("p"),NYo=o(`Note:
Loading a model from its configuration file does `),oue=a("strong"),jYo=o("not"),DYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TX=a("a"),GYo=o("from_pretrained()"),OYo=o(" to load the model weights."),VYo=l(),F(BF.$$.fragment),XYo=l(),fo=a("div"),F(ry.$$.fragment),zYo=l(),rue=a("p"),QYo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),WYo=l(),Va=a("p"),HYo=o("The model class to instantiate is selected based on the "),tue=a("code"),UYo=o("model_type"),JYo=o(` property of the config object (either
passed as an argument or loaded from `),aue=a("code"),YYo=o("pretrained_model_name_or_path"),KYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nue=a("code"),ZYo=o("pretrained_model_name_or_path"),eKo=o(":"),oKo=l(),ty=a("ul"),PF=a("li"),sue=a("strong"),rKo=o("speech-encoder-decoder"),tKo=o(" \u2014 "),MX=a("a"),aKo=o("SpeechEncoderDecoderModel"),nKo=o(" (Speech Encoder decoder model)"),sKo=l(),IF=a("li"),lue=a("strong"),lKo=o("speech_to_text"),iKo=o(" \u2014 "),EX=a("a"),dKo=o("Speech2TextForConditionalGeneration"),cKo=o(" (Speech2Text model)"),fKo=l(),qF=a("p"),mKo=o("The model is set in evaluation mode by default using "),iue=a("code"),gKo=o("model.eval()"),hKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),due=a("code"),pKo=o("model.train()"),uKo=l(),F(NF.$$.fragment),XIe=l(),vd=a("h2"),jF=a("a"),cue=a("span"),F(ay.$$.fragment),_Ko=l(),fue=a("span"),bKo=o("AutoModelForAudioXVector"),zIe=l(),zo=a("div"),F(ny.$$.fragment),vKo=l(),Fd=a("p"),FKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),CX=a("a"),TKo=o("from_pretrained()"),MKo=o(" class method or the "),wX=a("a"),EKo=o("from_config()"),CKo=o(` class
method.`),wKo=l(),sy=a("p"),AKo=o("This class cannot be instantiated directly using "),mue=a("code"),yKo=o("__init__()"),LKo=o(" (throws an error)."),xKo=l(),vt=a("div"),F(ly.$$.fragment),$Ko=l(),gue=a("p"),kKo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),SKo=l(),Td=a("p"),RKo=o(`Note:
Loading a model from its configuration file does `),hue=a("strong"),BKo=o("not"),PKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AX=a("a"),IKo=o("from_pretrained()"),qKo=o(" to load the model weights."),NKo=l(),F(DF.$$.fragment),jKo=l(),mo=a("div"),F(iy.$$.fragment),DKo=l(),pue=a("p"),GKo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),OKo=l(),Xa=a("p"),VKo=o("The model class to instantiate is selected based on the "),uue=a("code"),XKo=o("model_type"),zKo=o(` property of the config object (either
passed as an argument or loaded from `),_ue=a("code"),QKo=o("pretrained_model_name_or_path"),WKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bue=a("code"),HKo=o("pretrained_model_name_or_path"),UKo=o(":"),JKo=l(),za=a("ul"),GF=a("li"),vue=a("strong"),YKo=o("data2vec-audio"),KKo=o(" \u2014 "),yX=a("a"),ZKo=o("Data2VecAudioForXVector"),eZo=o(" (Data2VecAudio model)"),oZo=l(),OF=a("li"),Fue=a("strong"),rZo=o("unispeech-sat"),tZo=o(" \u2014 "),LX=a("a"),aZo=o("UniSpeechSatForXVector"),nZo=o(" (UniSpeechSat model)"),sZo=l(),VF=a("li"),Tue=a("strong"),lZo=o("wav2vec2"),iZo=o(" \u2014 "),xX=a("a"),dZo=o("Wav2Vec2ForXVector"),cZo=o(" (Wav2Vec2 model)"),fZo=l(),XF=a("li"),Mue=a("strong"),mZo=o("wavlm"),gZo=o(" \u2014 "),$X=a("a"),hZo=o("WavLMForXVector"),pZo=o(" (WavLM model)"),uZo=l(),zF=a("p"),_Zo=o("The model is set in evaluation mode by default using "),Eue=a("code"),bZo=o("model.eval()"),vZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cue=a("code"),FZo=o("model.train()"),TZo=l(),F(QF.$$.fragment),QIe=l(),Md=a("h2"),WF=a("a"),wue=a("span"),F(dy.$$.fragment),MZo=l(),Aue=a("span"),EZo=o("AutoModelForMaskedImageModeling"),WIe=l(),Qo=a("div"),F(cy.$$.fragment),CZo=l(),Ed=a("p"),wZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),kX=a("a"),AZo=o("from_pretrained()"),yZo=o(" class method or the "),SX=a("a"),LZo=o("from_config()"),xZo=o(` class
method.`),$Zo=l(),fy=a("p"),kZo=o("This class cannot be instantiated directly using "),yue=a("code"),SZo=o("__init__()"),RZo=o(" (throws an error)."),BZo=l(),Ft=a("div"),F(my.$$.fragment),PZo=l(),Lue=a("p"),IZo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),qZo=l(),Cd=a("p"),NZo=o(`Note:
Loading a model from its configuration file does `),xue=a("strong"),jZo=o("not"),DZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RX=a("a"),GZo=o("from_pretrained()"),OZo=o(" to load the model weights."),VZo=l(),F(HF.$$.fragment),XZo=l(),go=a("div"),F(gy.$$.fragment),zZo=l(),$ue=a("p"),QZo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),WZo=l(),Qa=a("p"),HZo=o("The model class to instantiate is selected based on the "),kue=a("code"),UZo=o("model_type"),JZo=o(` property of the config object (either
passed as an argument or loaded from `),Sue=a("code"),YZo=o("pretrained_model_name_or_path"),KZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rue=a("code"),ZZo=o("pretrained_model_name_or_path"),eer=o(":"),oer=l(),wd=a("ul"),UF=a("li"),Bue=a("strong"),rer=o("deit"),ter=o(" \u2014 "),BX=a("a"),aer=o("DeiTForMaskedImageModeling"),ner=o(" (DeiT model)"),ser=l(),JF=a("li"),Pue=a("strong"),ler=o("swin"),ier=o(" \u2014 "),PX=a("a"),der=o("SwinForMaskedImageModeling"),cer=o(" (Swin model)"),fer=l(),YF=a("li"),Iue=a("strong"),mer=o("vit"),ger=o(" \u2014 "),IX=a("a"),her=o("ViTForMaskedImageModeling"),per=o(" (ViT model)"),uer=l(),KF=a("p"),_er=o("The model is set in evaluation mode by default using "),que=a("code"),ber=o("model.eval()"),ver=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nue=a("code"),Fer=o("model.train()"),Ter=l(),F(ZF.$$.fragment),HIe=l(),Ad=a("h2"),e6=a("a"),jue=a("span"),F(hy.$$.fragment),Mer=l(),Due=a("span"),Eer=o("AutoModelForObjectDetection"),UIe=l(),Wo=a("div"),F(py.$$.fragment),Cer=l(),yd=a("p"),wer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),qX=a("a"),Aer=o("from_pretrained()"),yer=o(" class method or the "),NX=a("a"),Ler=o("from_config()"),xer=o(` class
method.`),$er=l(),uy=a("p"),ker=o("This class cannot be instantiated directly using "),Gue=a("code"),Ser=o("__init__()"),Rer=o(" (throws an error)."),Ber=l(),Tt=a("div"),F(_y.$$.fragment),Per=l(),Oue=a("p"),Ier=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),qer=l(),Ld=a("p"),Ner=o(`Note:
Loading a model from its configuration file does `),Vue=a("strong"),jer=o("not"),Der=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jX=a("a"),Ger=o("from_pretrained()"),Oer=o(" to load the model weights."),Ver=l(),F(o6.$$.fragment),Xer=l(),ho=a("div"),F(by.$$.fragment),zer=l(),Xue=a("p"),Qer=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Wer=l(),Wa=a("p"),Her=o("The model class to instantiate is selected based on the "),zue=a("code"),Uer=o("model_type"),Jer=o(` property of the config object (either
passed as an argument or loaded from `),Que=a("code"),Yer=o("pretrained_model_name_or_path"),Ker=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wue=a("code"),Zer=o("pretrained_model_name_or_path"),eor=o(":"),oor=l(),vy=a("ul"),r6=a("li"),Hue=a("strong"),ror=o("detr"),tor=o(" \u2014 "),DX=a("a"),aor=o("DetrForObjectDetection"),nor=o(" (DETR model)"),sor=l(),t6=a("li"),Uue=a("strong"),lor=o("yolos"),ior=o(" \u2014 "),GX=a("a"),dor=o("YolosForObjectDetection"),cor=o(" (YOLOS model)"),mor=l(),a6=a("p"),gor=o("The model is set in evaluation mode by default using "),Jue=a("code"),hor=o("model.eval()"),por=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yue=a("code"),uor=o("model.train()"),_or=l(),F(n6.$$.fragment),JIe=l(),xd=a("h2"),s6=a("a"),Kue=a("span"),F(Fy.$$.fragment),bor=l(),Zue=a("span"),vor=o("AutoModelForImageSegmentation"),YIe=l(),Ho=a("div"),F(Ty.$$.fragment),For=l(),$d=a("p"),Tor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),OX=a("a"),Mor=o("from_pretrained()"),Eor=o(" class method or the "),VX=a("a"),Cor=o("from_config()"),wor=o(` class
method.`),Aor=l(),My=a("p"),yor=o("This class cannot be instantiated directly using "),e_e=a("code"),Lor=o("__init__()"),xor=o(" (throws an error)."),$or=l(),Mt=a("div"),F(Ey.$$.fragment),kor=l(),o_e=a("p"),Sor=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Ror=l(),kd=a("p"),Bor=o(`Note:
Loading a model from its configuration file does `),r_e=a("strong"),Por=o("not"),Ior=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XX=a("a"),qor=o("from_pretrained()"),Nor=o(" to load the model weights."),jor=l(),F(l6.$$.fragment),Dor=l(),po=a("div"),F(Cy.$$.fragment),Gor=l(),t_e=a("p"),Oor=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Vor=l(),Ha=a("p"),Xor=o("The model class to instantiate is selected based on the "),a_e=a("code"),zor=o("model_type"),Qor=o(` property of the config object (either
passed as an argument or loaded from `),n_e=a("code"),Wor=o("pretrained_model_name_or_path"),Hor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s_e=a("code"),Uor=o("pretrained_model_name_or_path"),Jor=o(":"),Yor=l(),l_e=a("ul"),i6=a("li"),i_e=a("strong"),Kor=o("detr"),Zor=o(" \u2014 "),zX=a("a"),err=o("DetrForSegmentation"),orr=o(" (DETR model)"),rrr=l(),d6=a("p"),trr=o("The model is set in evaluation mode by default using "),d_e=a("code"),arr=o("model.eval()"),nrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c_e=a("code"),srr=o("model.train()"),lrr=l(),F(c6.$$.fragment),KIe=l(),Sd=a("h2"),f6=a("a"),f_e=a("span"),F(wy.$$.fragment),irr=l(),m_e=a("span"),drr=o("AutoModelForSemanticSegmentation"),ZIe=l(),Uo=a("div"),F(Ay.$$.fragment),crr=l(),Rd=a("p"),frr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),QX=a("a"),mrr=o("from_pretrained()"),grr=o(" class method or the "),WX=a("a"),hrr=o("from_config()"),prr=o(` class
method.`),urr=l(),yy=a("p"),_rr=o("This class cannot be instantiated directly using "),g_e=a("code"),brr=o("__init__()"),vrr=o(" (throws an error)."),Frr=l(),Et=a("div"),F(Ly.$$.fragment),Trr=l(),h_e=a("p"),Mrr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Err=l(),Bd=a("p"),Crr=o(`Note:
Loading a model from its configuration file does `),p_e=a("strong"),wrr=o("not"),Arr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HX=a("a"),yrr=o("from_pretrained()"),Lrr=o(" to load the model weights."),xrr=l(),F(m6.$$.fragment),$rr=l(),uo=a("div"),F(xy.$$.fragment),krr=l(),u_e=a("p"),Srr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Rrr=l(),Ua=a("p"),Brr=o("The model class to instantiate is selected based on the "),__e=a("code"),Prr=o("model_type"),Irr=o(` property of the config object (either
passed as an argument or loaded from `),b_e=a("code"),qrr=o("pretrained_model_name_or_path"),Nrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v_e=a("code"),jrr=o("pretrained_model_name_or_path"),Drr=o(":"),Grr=l(),Ja=a("ul"),g6=a("li"),F_e=a("strong"),Orr=o("beit"),Vrr=o(" \u2014 "),UX=a("a"),Xrr=o("BeitForSemanticSegmentation"),zrr=o(" (BEiT model)"),Qrr=l(),h6=a("li"),T_e=a("strong"),Wrr=o("data2vec-vision"),Hrr=o(" \u2014 "),JX=a("a"),Urr=o("Data2VecVisionForSemanticSegmentation"),Jrr=o(" (Data2VecVision model)"),Yrr=l(),p6=a("li"),M_e=a("strong"),Krr=o("dpt"),Zrr=o(" \u2014 "),YX=a("a"),etr=o("DPTForSemanticSegmentation"),otr=o(" (DPT model)"),rtr=l(),u6=a("li"),E_e=a("strong"),ttr=o("segformer"),atr=o(" \u2014 "),KX=a("a"),ntr=o("SegformerForSemanticSegmentation"),str=o(" (SegFormer model)"),ltr=l(),_6=a("p"),itr=o("The model is set in evaluation mode by default using "),C_e=a("code"),dtr=o("model.eval()"),ctr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w_e=a("code"),ftr=o("model.train()"),mtr=l(),F(b6.$$.fragment),eqe=l(),Pd=a("h2"),v6=a("a"),A_e=a("span"),F($y.$$.fragment),gtr=l(),y_e=a("span"),htr=o("AutoModelForInstanceSegmentation"),oqe=l(),Jo=a("div"),F(ky.$$.fragment),ptr=l(),Id=a("p"),utr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),ZX=a("a"),_tr=o("from_pretrained()"),btr=o(" class method or the "),ez=a("a"),vtr=o("from_config()"),Ftr=o(` class
method.`),Ttr=l(),Sy=a("p"),Mtr=o("This class cannot be instantiated directly using "),L_e=a("code"),Etr=o("__init__()"),Ctr=o(" (throws an error)."),wtr=l(),Ct=a("div"),F(Ry.$$.fragment),Atr=l(),x_e=a("p"),ytr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Ltr=l(),qd=a("p"),xtr=o(`Note:
Loading a model from its configuration file does `),$_e=a("strong"),$tr=o("not"),ktr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=a("a"),Str=o("from_pretrained()"),Rtr=o(" to load the model weights."),Btr=l(),F(F6.$$.fragment),Ptr=l(),_o=a("div"),F(By.$$.fragment),Itr=l(),k_e=a("p"),qtr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Ntr=l(),Ya=a("p"),jtr=o("The model class to instantiate is selected based on the "),S_e=a("code"),Dtr=o("model_type"),Gtr=o(` property of the config object (either
passed as an argument or loaded from `),R_e=a("code"),Otr=o("pretrained_model_name_or_path"),Vtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B_e=a("code"),Xtr=o("pretrained_model_name_or_path"),ztr=o(":"),Qtr=l(),P_e=a("ul"),T6=a("li"),I_e=a("strong"),Wtr=o("maskformer"),Htr=o(" \u2014 "),rz=a("a"),Utr=o("MaskFormerForInstanceSegmentation"),Jtr=o(" (MaskFormer model)"),Ytr=l(),M6=a("p"),Ktr=o("The model is set in evaluation mode by default using "),q_e=a("code"),Ztr=o("model.eval()"),ear=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N_e=a("code"),oar=o("model.train()"),rar=l(),F(E6.$$.fragment),rqe=l(),Nd=a("h2"),C6=a("a"),j_e=a("span"),F(Py.$$.fragment),tar=l(),D_e=a("span"),aar=o("TFAutoModel"),tqe=l(),Yo=a("div"),F(Iy.$$.fragment),nar=l(),jd=a("p"),sar=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),tz=a("a"),lar=o("from_pretrained()"),iar=o(" class method or the "),az=a("a"),dar=o("from_config()"),car=o(` class
method.`),far=l(),qy=a("p"),mar=o("This class cannot be instantiated directly using "),G_e=a("code"),gar=o("__init__()"),har=o(" (throws an error)."),par=l(),wt=a("div"),F(Ny.$$.fragment),uar=l(),O_e=a("p"),_ar=o("Instantiates one of the base model classes of the library from a configuration."),bar=l(),Dd=a("p"),Far=o(`Note:
Loading a model from its configuration file does `),V_e=a("strong"),Tar=o("not"),Mar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nz=a("a"),Ear=o("from_pretrained()"),Car=o(" to load the model weights."),war=l(),F(w6.$$.fragment),Aar=l(),wr=a("div"),F(jy.$$.fragment),yar=l(),X_e=a("p"),Lar=o("Instantiate one of the base model classes of the library from a pretrained model."),xar=l(),Ka=a("p"),$ar=o("The model class to instantiate is selected based on the "),z_e=a("code"),kar=o("model_type"),Sar=o(` property of the config object (either
passed as an argument or loaded from `),Q_e=a("code"),Rar=o("pretrained_model_name_or_path"),Bar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W_e=a("code"),Par=o("pretrained_model_name_or_path"),Iar=o(":"),qar=l(),N=a("ul"),A6=a("li"),H_e=a("strong"),Nar=o("albert"),jar=o(" \u2014 "),sz=a("a"),Dar=o("TFAlbertModel"),Gar=o(" (ALBERT model)"),Oar=l(),y6=a("li"),U_e=a("strong"),Var=o("bart"),Xar=o(" \u2014 "),lz=a("a"),zar=o("TFBartModel"),Qar=o(" (BART model)"),War=l(),L6=a("li"),J_e=a("strong"),Har=o("bert"),Uar=o(" \u2014 "),iz=a("a"),Jar=o("TFBertModel"),Yar=o(" (BERT model)"),Kar=l(),x6=a("li"),Y_e=a("strong"),Zar=o("blenderbot"),enr=o(" \u2014 "),dz=a("a"),onr=o("TFBlenderbotModel"),rnr=o(" (Blenderbot model)"),tnr=l(),$6=a("li"),K_e=a("strong"),anr=o("blenderbot-small"),nnr=o(" \u2014 "),cz=a("a"),snr=o("TFBlenderbotSmallModel"),lnr=o(" (BlenderbotSmall model)"),inr=l(),k6=a("li"),Z_e=a("strong"),dnr=o("camembert"),cnr=o(" \u2014 "),fz=a("a"),fnr=o("TFCamembertModel"),mnr=o(" (CamemBERT model)"),gnr=l(),S6=a("li"),e1e=a("strong"),hnr=o("clip"),pnr=o(" \u2014 "),mz=a("a"),unr=o("TFCLIPModel"),_nr=o(" (CLIP model)"),bnr=l(),R6=a("li"),o1e=a("strong"),vnr=o("convbert"),Fnr=o(" \u2014 "),gz=a("a"),Tnr=o("TFConvBertModel"),Mnr=o(" (ConvBERT model)"),Enr=l(),B6=a("li"),r1e=a("strong"),Cnr=o("convnext"),wnr=o(" \u2014 "),hz=a("a"),Anr=o("TFConvNextModel"),ynr=o(" (ConvNext model)"),Lnr=l(),P6=a("li"),t1e=a("strong"),xnr=o("ctrl"),$nr=o(" \u2014 "),pz=a("a"),knr=o("TFCTRLModel"),Snr=o(" (CTRL model)"),Rnr=l(),I6=a("li"),a1e=a("strong"),Bnr=o("data2vec-vision"),Pnr=o(" \u2014 "),uz=a("a"),Inr=o("TFData2VecVisionModel"),qnr=o(" (Data2VecVision model)"),Nnr=l(),q6=a("li"),n1e=a("strong"),jnr=o("deberta"),Dnr=o(" \u2014 "),_z=a("a"),Gnr=o("TFDebertaModel"),Onr=o(" (DeBERTa model)"),Vnr=l(),N6=a("li"),s1e=a("strong"),Xnr=o("deberta-v2"),znr=o(" \u2014 "),bz=a("a"),Qnr=o("TFDebertaV2Model"),Wnr=o(" (DeBERTa-v2 model)"),Hnr=l(),j6=a("li"),l1e=a("strong"),Unr=o("distilbert"),Jnr=o(" \u2014 "),vz=a("a"),Ynr=o("TFDistilBertModel"),Knr=o(" (DistilBERT model)"),Znr=l(),D6=a("li"),i1e=a("strong"),esr=o("dpr"),osr=o(" \u2014 "),Fz=a("a"),rsr=o("TFDPRQuestionEncoder"),tsr=o(" (DPR model)"),asr=l(),G6=a("li"),d1e=a("strong"),nsr=o("electra"),ssr=o(" \u2014 "),Tz=a("a"),lsr=o("TFElectraModel"),isr=o(" (ELECTRA model)"),dsr=l(),O6=a("li"),c1e=a("strong"),csr=o("flaubert"),fsr=o(" \u2014 "),Mz=a("a"),msr=o("TFFlaubertModel"),gsr=o(" (FlauBERT model)"),hsr=l(),Ps=a("li"),f1e=a("strong"),psr=o("funnel"),usr=o(" \u2014 "),Ez=a("a"),_sr=o("TFFunnelModel"),bsr=o(" or "),Cz=a("a"),vsr=o("TFFunnelBaseModel"),Fsr=o(" (Funnel Transformer model)"),Tsr=l(),V6=a("li"),m1e=a("strong"),Msr=o("gpt2"),Esr=o(" \u2014 "),wz=a("a"),Csr=o("TFGPT2Model"),wsr=o(" (OpenAI GPT-2 model)"),Asr=l(),X6=a("li"),g1e=a("strong"),ysr=o("gptj"),Lsr=o(" \u2014 "),Az=a("a"),xsr=o("TFGPTJModel"),$sr=o(" (GPT-J model)"),ksr=l(),z6=a("li"),h1e=a("strong"),Ssr=o("hubert"),Rsr=o(" \u2014 "),yz=a("a"),Bsr=o("TFHubertModel"),Psr=o(" (Hubert model)"),Isr=l(),Q6=a("li"),p1e=a("strong"),qsr=o("layoutlm"),Nsr=o(" \u2014 "),Lz=a("a"),jsr=o("TFLayoutLMModel"),Dsr=o(" (LayoutLM model)"),Gsr=l(),W6=a("li"),u1e=a("strong"),Osr=o("led"),Vsr=o(" \u2014 "),xz=a("a"),Xsr=o("TFLEDModel"),zsr=o(" (LED model)"),Qsr=l(),H6=a("li"),_1e=a("strong"),Wsr=o("longformer"),Hsr=o(" \u2014 "),$z=a("a"),Usr=o("TFLongformerModel"),Jsr=o(" (Longformer model)"),Ysr=l(),U6=a("li"),b1e=a("strong"),Ksr=o("lxmert"),Zsr=o(" \u2014 "),kz=a("a"),elr=o("TFLxmertModel"),olr=o(" (LXMERT model)"),rlr=l(),J6=a("li"),v1e=a("strong"),tlr=o("marian"),alr=o(" \u2014 "),Sz=a("a"),nlr=o("TFMarianModel"),slr=o(" (Marian model)"),llr=l(),Y6=a("li"),F1e=a("strong"),ilr=o("mbart"),dlr=o(" \u2014 "),Rz=a("a"),clr=o("TFMBartModel"),flr=o(" (mBART model)"),mlr=l(),K6=a("li"),T1e=a("strong"),glr=o("mobilebert"),hlr=o(" \u2014 "),Bz=a("a"),plr=o("TFMobileBertModel"),ulr=o(" (MobileBERT model)"),_lr=l(),Z6=a("li"),M1e=a("strong"),blr=o("mpnet"),vlr=o(" \u2014 "),Pz=a("a"),Flr=o("TFMPNetModel"),Tlr=o(" (MPNet model)"),Mlr=l(),eT=a("li"),E1e=a("strong"),Elr=o("mt5"),Clr=o(" \u2014 "),Iz=a("a"),wlr=o("TFMT5Model"),Alr=o(" (mT5 model)"),ylr=l(),oT=a("li"),C1e=a("strong"),Llr=o("openai-gpt"),xlr=o(" \u2014 "),qz=a("a"),$lr=o("TFOpenAIGPTModel"),klr=o(" (OpenAI GPT model)"),Slr=l(),rT=a("li"),w1e=a("strong"),Rlr=o("pegasus"),Blr=o(" \u2014 "),Nz=a("a"),Plr=o("TFPegasusModel"),Ilr=o(" (Pegasus model)"),qlr=l(),tT=a("li"),A1e=a("strong"),Nlr=o("rembert"),jlr=o(" \u2014 "),jz=a("a"),Dlr=o("TFRemBertModel"),Glr=o(" (RemBERT model)"),Olr=l(),aT=a("li"),y1e=a("strong"),Vlr=o("roberta"),Xlr=o(" \u2014 "),Dz=a("a"),zlr=o("TFRobertaModel"),Qlr=o(" (RoBERTa model)"),Wlr=l(),nT=a("li"),L1e=a("strong"),Hlr=o("roformer"),Ulr=o(" \u2014 "),Gz=a("a"),Jlr=o("TFRoFormerModel"),Ylr=o(" (RoFormer model)"),Klr=l(),sT=a("li"),x1e=a("strong"),Zlr=o("speech_to_text"),eir=o(" \u2014 "),Oz=a("a"),oir=o("TFSpeech2TextModel"),rir=o(" (Speech2Text model)"),tir=l(),lT=a("li"),$1e=a("strong"),air=o("swin"),nir=o(" \u2014 "),Vz=a("a"),sir=o("TFSwinModel"),lir=o(" (Swin model)"),iir=l(),iT=a("li"),k1e=a("strong"),dir=o("t5"),cir=o(" \u2014 "),Xz=a("a"),fir=o("TFT5Model"),mir=o(" (T5 model)"),gir=l(),dT=a("li"),S1e=a("strong"),hir=o("tapas"),pir=o(" \u2014 "),zz=a("a"),uir=o("TFTapasModel"),_ir=o(" (TAPAS model)"),bir=l(),cT=a("li"),R1e=a("strong"),vir=o("transfo-xl"),Fir=o(" \u2014 "),Qz=a("a"),Tir=o("TFTransfoXLModel"),Mir=o(" (Transformer-XL model)"),Eir=l(),fT=a("li"),B1e=a("strong"),Cir=o("vit"),wir=o(" \u2014 "),Wz=a("a"),Air=o("TFViTModel"),yir=o(" (ViT model)"),Lir=l(),mT=a("li"),P1e=a("strong"),xir=o("vit_mae"),$ir=o(" \u2014 "),Hz=a("a"),kir=o("TFViTMAEModel"),Sir=o(" (ViTMAE model)"),Rir=l(),gT=a("li"),I1e=a("strong"),Bir=o("wav2vec2"),Pir=o(" \u2014 "),Uz=a("a"),Iir=o("TFWav2Vec2Model"),qir=o(" (Wav2Vec2 model)"),Nir=l(),hT=a("li"),q1e=a("strong"),jir=o("xlm"),Dir=o(" \u2014 "),Jz=a("a"),Gir=o("TFXLMModel"),Oir=o(" (XLM model)"),Vir=l(),pT=a("li"),N1e=a("strong"),Xir=o("xlm-roberta"),zir=o(" \u2014 "),Yz=a("a"),Qir=o("TFXLMRobertaModel"),Wir=o(" (XLM-RoBERTa model)"),Hir=l(),uT=a("li"),j1e=a("strong"),Uir=o("xlnet"),Jir=o(" \u2014 "),Kz=a("a"),Yir=o("TFXLNetModel"),Kir=o(" (XLNet model)"),Zir=l(),F(_T.$$.fragment),aqe=l(),Gd=a("h2"),bT=a("a"),D1e=a("span"),F(Dy.$$.fragment),edr=l(),G1e=a("span"),odr=o("TFAutoModelForPreTraining"),nqe=l(),Ko=a("div"),F(Gy.$$.fragment),rdr=l(),Od=a("p"),tdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Zz=a("a"),adr=o("from_pretrained()"),ndr=o(" class method or the "),eQ=a("a"),sdr=o("from_config()"),ldr=o(` class
method.`),idr=l(),Oy=a("p"),ddr=o("This class cannot be instantiated directly using "),O1e=a("code"),cdr=o("__init__()"),fdr=o(" (throws an error)."),mdr=l(),At=a("div"),F(Vy.$$.fragment),gdr=l(),V1e=a("p"),hdr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),pdr=l(),Vd=a("p"),udr=o(`Note:
Loading a model from its configuration file does `),X1e=a("strong"),_dr=o("not"),bdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oQ=a("a"),vdr=o("from_pretrained()"),Fdr=o(" to load the model weights."),Tdr=l(),F(vT.$$.fragment),Mdr=l(),Ar=a("div"),F(Xy.$$.fragment),Edr=l(),z1e=a("p"),Cdr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),wdr=l(),Za=a("p"),Adr=o("The model class to instantiate is selected based on the "),Q1e=a("code"),ydr=o("model_type"),Ldr=o(` property of the config object (either
passed as an argument or loaded from `),W1e=a("code"),xdr=o("pretrained_model_name_or_path"),$dr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H1e=a("code"),kdr=o("pretrained_model_name_or_path"),Sdr=o(":"),Rdr=l(),se=a("ul"),FT=a("li"),U1e=a("strong"),Bdr=o("albert"),Pdr=o(" \u2014 "),rQ=a("a"),Idr=o("TFAlbertForPreTraining"),qdr=o(" (ALBERT model)"),Ndr=l(),TT=a("li"),J1e=a("strong"),jdr=o("bart"),Ddr=o(" \u2014 "),tQ=a("a"),Gdr=o("TFBartForConditionalGeneration"),Odr=o(" (BART model)"),Vdr=l(),MT=a("li"),Y1e=a("strong"),Xdr=o("bert"),zdr=o(" \u2014 "),aQ=a("a"),Qdr=o("TFBertForPreTraining"),Wdr=o(" (BERT model)"),Hdr=l(),ET=a("li"),K1e=a("strong"),Udr=o("camembert"),Jdr=o(" \u2014 "),nQ=a("a"),Ydr=o("TFCamembertForMaskedLM"),Kdr=o(" (CamemBERT model)"),Zdr=l(),CT=a("li"),Z1e=a("strong"),ecr=o("ctrl"),ocr=o(" \u2014 "),sQ=a("a"),rcr=o("TFCTRLLMHeadModel"),tcr=o(" (CTRL model)"),acr=l(),wT=a("li"),e8e=a("strong"),ncr=o("distilbert"),scr=o(" \u2014 "),lQ=a("a"),lcr=o("TFDistilBertForMaskedLM"),icr=o(" (DistilBERT model)"),dcr=l(),AT=a("li"),o8e=a("strong"),ccr=o("electra"),fcr=o(" \u2014 "),iQ=a("a"),mcr=o("TFElectraForPreTraining"),gcr=o(" (ELECTRA model)"),hcr=l(),yT=a("li"),r8e=a("strong"),pcr=o("flaubert"),ucr=o(" \u2014 "),dQ=a("a"),_cr=o("TFFlaubertWithLMHeadModel"),bcr=o(" (FlauBERT model)"),vcr=l(),LT=a("li"),t8e=a("strong"),Fcr=o("funnel"),Tcr=o(" \u2014 "),cQ=a("a"),Mcr=o("TFFunnelForPreTraining"),Ecr=o(" (Funnel Transformer model)"),Ccr=l(),xT=a("li"),a8e=a("strong"),wcr=o("gpt2"),Acr=o(" \u2014 "),fQ=a("a"),ycr=o("TFGPT2LMHeadModel"),Lcr=o(" (OpenAI GPT-2 model)"),xcr=l(),$T=a("li"),n8e=a("strong"),$cr=o("layoutlm"),kcr=o(" \u2014 "),mQ=a("a"),Scr=o("TFLayoutLMForMaskedLM"),Rcr=o(" (LayoutLM model)"),Bcr=l(),kT=a("li"),s8e=a("strong"),Pcr=o("lxmert"),Icr=o(" \u2014 "),gQ=a("a"),qcr=o("TFLxmertForPreTraining"),Ncr=o(" (LXMERT model)"),jcr=l(),ST=a("li"),l8e=a("strong"),Dcr=o("mobilebert"),Gcr=o(" \u2014 "),hQ=a("a"),Ocr=o("TFMobileBertForPreTraining"),Vcr=o(" (MobileBERT model)"),Xcr=l(),RT=a("li"),i8e=a("strong"),zcr=o("mpnet"),Qcr=o(" \u2014 "),pQ=a("a"),Wcr=o("TFMPNetForMaskedLM"),Hcr=o(" (MPNet model)"),Ucr=l(),BT=a("li"),d8e=a("strong"),Jcr=o("openai-gpt"),Ycr=o(" \u2014 "),uQ=a("a"),Kcr=o("TFOpenAIGPTLMHeadModel"),Zcr=o(" (OpenAI GPT model)"),efr=l(),PT=a("li"),c8e=a("strong"),ofr=o("roberta"),rfr=o(" \u2014 "),_Q=a("a"),tfr=o("TFRobertaForMaskedLM"),afr=o(" (RoBERTa model)"),nfr=l(),IT=a("li"),f8e=a("strong"),sfr=o("t5"),lfr=o(" \u2014 "),bQ=a("a"),ifr=o("TFT5ForConditionalGeneration"),dfr=o(" (T5 model)"),cfr=l(),qT=a("li"),m8e=a("strong"),ffr=o("tapas"),mfr=o(" \u2014 "),vQ=a("a"),gfr=o("TFTapasForMaskedLM"),hfr=o(" (TAPAS model)"),pfr=l(),NT=a("li"),g8e=a("strong"),ufr=o("transfo-xl"),_fr=o(" \u2014 "),FQ=a("a"),bfr=o("TFTransfoXLLMHeadModel"),vfr=o(" (Transformer-XL model)"),Ffr=l(),jT=a("li"),h8e=a("strong"),Tfr=o("vit_mae"),Mfr=o(" \u2014 "),TQ=a("a"),Efr=o("TFViTMAEForPreTraining"),Cfr=o(" (ViTMAE model)"),wfr=l(),DT=a("li"),p8e=a("strong"),Afr=o("xlm"),yfr=o(" \u2014 "),MQ=a("a"),Lfr=o("TFXLMWithLMHeadModel"),xfr=o(" (XLM model)"),$fr=l(),GT=a("li"),u8e=a("strong"),kfr=o("xlm-roberta"),Sfr=o(" \u2014 "),EQ=a("a"),Rfr=o("TFXLMRobertaForMaskedLM"),Bfr=o(" (XLM-RoBERTa model)"),Pfr=l(),OT=a("li"),_8e=a("strong"),Ifr=o("xlnet"),qfr=o(" \u2014 "),CQ=a("a"),Nfr=o("TFXLNetLMHeadModel"),jfr=o(" (XLNet model)"),Dfr=l(),F(VT.$$.fragment),sqe=l(),Xd=a("h2"),XT=a("a"),b8e=a("span"),F(zy.$$.fragment),Gfr=l(),v8e=a("span"),Ofr=o("TFAutoModelForCausalLM"),lqe=l(),Zo=a("div"),F(Qy.$$.fragment),Vfr=l(),zd=a("p"),Xfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),wQ=a("a"),zfr=o("from_pretrained()"),Qfr=o(" class method or the "),AQ=a("a"),Wfr=o("from_config()"),Hfr=o(` class
method.`),Ufr=l(),Wy=a("p"),Jfr=o("This class cannot be instantiated directly using "),F8e=a("code"),Yfr=o("__init__()"),Kfr=o(" (throws an error)."),Zfr=l(),yt=a("div"),F(Hy.$$.fragment),emr=l(),T8e=a("p"),omr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),rmr=l(),Qd=a("p"),tmr=o(`Note:
Loading a model from its configuration file does `),M8e=a("strong"),amr=o("not"),nmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=a("a"),smr=o("from_pretrained()"),lmr=o(" to load the model weights."),imr=l(),F(zT.$$.fragment),dmr=l(),yr=a("div"),F(Uy.$$.fragment),cmr=l(),E8e=a("p"),fmr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),mmr=l(),en=a("p"),gmr=o("The model class to instantiate is selected based on the "),C8e=a("code"),hmr=o("model_type"),pmr=o(` property of the config object (either
passed as an argument or loaded from `),w8e=a("code"),umr=o("pretrained_model_name_or_path"),_mr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A8e=a("code"),bmr=o("pretrained_model_name_or_path"),vmr=o(":"),Fmr=l(),Te=a("ul"),QT=a("li"),y8e=a("strong"),Tmr=o("bert"),Mmr=o(" \u2014 "),LQ=a("a"),Emr=o("TFBertLMHeadModel"),Cmr=o(" (BERT model)"),wmr=l(),WT=a("li"),L8e=a("strong"),Amr=o("camembert"),ymr=o(" \u2014 "),xQ=a("a"),Lmr=o("TFCamembertForCausalLM"),xmr=o(" (CamemBERT model)"),$mr=l(),HT=a("li"),x8e=a("strong"),kmr=o("ctrl"),Smr=o(" \u2014 "),$Q=a("a"),Rmr=o("TFCTRLLMHeadModel"),Bmr=o(" (CTRL model)"),Pmr=l(),UT=a("li"),$8e=a("strong"),Imr=o("gpt2"),qmr=o(" \u2014 "),kQ=a("a"),Nmr=o("TFGPT2LMHeadModel"),jmr=o(" (OpenAI GPT-2 model)"),Dmr=l(),JT=a("li"),k8e=a("strong"),Gmr=o("gptj"),Omr=o(" \u2014 "),SQ=a("a"),Vmr=o("TFGPTJForCausalLM"),Xmr=o(" (GPT-J model)"),zmr=l(),YT=a("li"),S8e=a("strong"),Qmr=o("openai-gpt"),Wmr=o(" \u2014 "),RQ=a("a"),Hmr=o("TFOpenAIGPTLMHeadModel"),Umr=o(" (OpenAI GPT model)"),Jmr=l(),KT=a("li"),R8e=a("strong"),Ymr=o("rembert"),Kmr=o(" \u2014 "),BQ=a("a"),Zmr=o("TFRemBertForCausalLM"),egr=o(" (RemBERT model)"),ogr=l(),ZT=a("li"),B8e=a("strong"),rgr=o("roberta"),tgr=o(" \u2014 "),PQ=a("a"),agr=o("TFRobertaForCausalLM"),ngr=o(" (RoBERTa model)"),sgr=l(),e9=a("li"),P8e=a("strong"),lgr=o("roformer"),igr=o(" \u2014 "),IQ=a("a"),dgr=o("TFRoFormerForCausalLM"),cgr=o(" (RoFormer model)"),fgr=l(),o9=a("li"),I8e=a("strong"),mgr=o("transfo-xl"),ggr=o(" \u2014 "),qQ=a("a"),hgr=o("TFTransfoXLLMHeadModel"),pgr=o(" (Transformer-XL model)"),ugr=l(),r9=a("li"),q8e=a("strong"),_gr=o("xlm"),bgr=o(" \u2014 "),NQ=a("a"),vgr=o("TFXLMWithLMHeadModel"),Fgr=o(" (XLM model)"),Tgr=l(),t9=a("li"),N8e=a("strong"),Mgr=o("xlnet"),Egr=o(" \u2014 "),jQ=a("a"),Cgr=o("TFXLNetLMHeadModel"),wgr=o(" (XLNet model)"),Agr=l(),F(a9.$$.fragment),iqe=l(),Wd=a("h2"),n9=a("a"),j8e=a("span"),F(Jy.$$.fragment),ygr=l(),D8e=a("span"),Lgr=o("TFAutoModelForImageClassification"),dqe=l(),er=a("div"),F(Yy.$$.fragment),xgr=l(),Hd=a("p"),$gr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),DQ=a("a"),kgr=o("from_pretrained()"),Sgr=o(" class method or the "),GQ=a("a"),Rgr=o("from_config()"),Bgr=o(` class
method.`),Pgr=l(),Ky=a("p"),Igr=o("This class cannot be instantiated directly using "),G8e=a("code"),qgr=o("__init__()"),Ngr=o(" (throws an error)."),jgr=l(),Lt=a("div"),F(Zy.$$.fragment),Dgr=l(),O8e=a("p"),Ggr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Ogr=l(),Ud=a("p"),Vgr=o(`Note:
Loading a model from its configuration file does `),V8e=a("strong"),Xgr=o("not"),zgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OQ=a("a"),Qgr=o("from_pretrained()"),Wgr=o(" to load the model weights."),Hgr=l(),F(s9.$$.fragment),Ugr=l(),Lr=a("div"),F(eL.$$.fragment),Jgr=l(),X8e=a("p"),Ygr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Kgr=l(),on=a("p"),Zgr=o("The model class to instantiate is selected based on the "),z8e=a("code"),ehr=o("model_type"),ohr=o(` property of the config object (either
passed as an argument or loaded from `),Q8e=a("code"),rhr=o("pretrained_model_name_or_path"),thr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W8e=a("code"),ahr=o("pretrained_model_name_or_path"),nhr=o(":"),shr=l(),rn=a("ul"),l9=a("li"),H8e=a("strong"),lhr=o("convnext"),ihr=o(" \u2014 "),VQ=a("a"),dhr=o("TFConvNextForImageClassification"),chr=o(" (ConvNext model)"),fhr=l(),i9=a("li"),U8e=a("strong"),mhr=o("data2vec-vision"),ghr=o(" \u2014 "),XQ=a("a"),hhr=o("TFData2VecVisionForImageClassification"),phr=o(" (Data2VecVision model)"),uhr=l(),d9=a("li"),J8e=a("strong"),_hr=o("swin"),bhr=o(" \u2014 "),zQ=a("a"),vhr=o("TFSwinForImageClassification"),Fhr=o(" (Swin model)"),Thr=l(),c9=a("li"),Y8e=a("strong"),Mhr=o("vit"),Ehr=o(" \u2014 "),QQ=a("a"),Chr=o("TFViTForImageClassification"),whr=o(" (ViT model)"),Ahr=l(),F(f9.$$.fragment),cqe=l(),Jd=a("h2"),m9=a("a"),K8e=a("span"),F(oL.$$.fragment),yhr=l(),Z8e=a("span"),Lhr=o("TFAutoModelForMaskedLM"),fqe=l(),or=a("div"),F(rL.$$.fragment),xhr=l(),Yd=a("p"),$hr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),WQ=a("a"),khr=o("from_pretrained()"),Shr=o(" class method or the "),HQ=a("a"),Rhr=o("from_config()"),Bhr=o(` class
method.`),Phr=l(),tL=a("p"),Ihr=o("This class cannot be instantiated directly using "),ebe=a("code"),qhr=o("__init__()"),Nhr=o(" (throws an error)."),jhr=l(),xt=a("div"),F(aL.$$.fragment),Dhr=l(),obe=a("p"),Ghr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Ohr=l(),Kd=a("p"),Vhr=o(`Note:
Loading a model from its configuration file does `),rbe=a("strong"),Xhr=o("not"),zhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UQ=a("a"),Qhr=o("from_pretrained()"),Whr=o(" to load the model weights."),Hhr=l(),F(g9.$$.fragment),Uhr=l(),xr=a("div"),F(nL.$$.fragment),Jhr=l(),tbe=a("p"),Yhr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Khr=l(),tn=a("p"),Zhr=o("The model class to instantiate is selected based on the "),abe=a("code"),epr=o("model_type"),opr=o(` property of the config object (either
passed as an argument or loaded from `),nbe=a("code"),rpr=o("pretrained_model_name_or_path"),tpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sbe=a("code"),apr=o("pretrained_model_name_or_path"),npr=o(":"),spr=l(),ie=a("ul"),h9=a("li"),lbe=a("strong"),lpr=o("albert"),ipr=o(" \u2014 "),JQ=a("a"),dpr=o("TFAlbertForMaskedLM"),cpr=o(" (ALBERT model)"),fpr=l(),p9=a("li"),ibe=a("strong"),mpr=o("bert"),gpr=o(" \u2014 "),YQ=a("a"),hpr=o("TFBertForMaskedLM"),ppr=o(" (BERT model)"),upr=l(),u9=a("li"),dbe=a("strong"),_pr=o("camembert"),bpr=o(" \u2014 "),KQ=a("a"),vpr=o("TFCamembertForMaskedLM"),Fpr=o(" (CamemBERT model)"),Tpr=l(),_9=a("li"),cbe=a("strong"),Mpr=o("convbert"),Epr=o(" \u2014 "),ZQ=a("a"),Cpr=o("TFConvBertForMaskedLM"),wpr=o(" (ConvBERT model)"),Apr=l(),b9=a("li"),fbe=a("strong"),ypr=o("deberta"),Lpr=o(" \u2014 "),eW=a("a"),xpr=o("TFDebertaForMaskedLM"),$pr=o(" (DeBERTa model)"),kpr=l(),v9=a("li"),mbe=a("strong"),Spr=o("deberta-v2"),Rpr=o(" \u2014 "),oW=a("a"),Bpr=o("TFDebertaV2ForMaskedLM"),Ppr=o(" (DeBERTa-v2 model)"),Ipr=l(),F9=a("li"),gbe=a("strong"),qpr=o("distilbert"),Npr=o(" \u2014 "),rW=a("a"),jpr=o("TFDistilBertForMaskedLM"),Dpr=o(" (DistilBERT model)"),Gpr=l(),T9=a("li"),hbe=a("strong"),Opr=o("electra"),Vpr=o(" \u2014 "),tW=a("a"),Xpr=o("TFElectraForMaskedLM"),zpr=o(" (ELECTRA model)"),Qpr=l(),M9=a("li"),pbe=a("strong"),Wpr=o("flaubert"),Hpr=o(" \u2014 "),aW=a("a"),Upr=o("TFFlaubertWithLMHeadModel"),Jpr=o(" (FlauBERT model)"),Ypr=l(),E9=a("li"),ube=a("strong"),Kpr=o("funnel"),Zpr=o(" \u2014 "),nW=a("a"),eur=o("TFFunnelForMaskedLM"),our=o(" (Funnel Transformer model)"),rur=l(),C9=a("li"),_be=a("strong"),tur=o("layoutlm"),aur=o(" \u2014 "),sW=a("a"),nur=o("TFLayoutLMForMaskedLM"),sur=o(" (LayoutLM model)"),lur=l(),w9=a("li"),bbe=a("strong"),iur=o("longformer"),dur=o(" \u2014 "),lW=a("a"),cur=o("TFLongformerForMaskedLM"),fur=o(" (Longformer model)"),mur=l(),A9=a("li"),vbe=a("strong"),gur=o("mobilebert"),hur=o(" \u2014 "),iW=a("a"),pur=o("TFMobileBertForMaskedLM"),uur=o(" (MobileBERT model)"),_ur=l(),y9=a("li"),Fbe=a("strong"),bur=o("mpnet"),vur=o(" \u2014 "),dW=a("a"),Fur=o("TFMPNetForMaskedLM"),Tur=o(" (MPNet model)"),Mur=l(),L9=a("li"),Tbe=a("strong"),Eur=o("rembert"),Cur=o(" \u2014 "),cW=a("a"),wur=o("TFRemBertForMaskedLM"),Aur=o(" (RemBERT model)"),yur=l(),x9=a("li"),Mbe=a("strong"),Lur=o("roberta"),xur=o(" \u2014 "),fW=a("a"),$ur=o("TFRobertaForMaskedLM"),kur=o(" (RoBERTa model)"),Sur=l(),$9=a("li"),Ebe=a("strong"),Rur=o("roformer"),Bur=o(" \u2014 "),mW=a("a"),Pur=o("TFRoFormerForMaskedLM"),Iur=o(" (RoFormer model)"),qur=l(),k9=a("li"),Cbe=a("strong"),Nur=o("tapas"),jur=o(" \u2014 "),gW=a("a"),Dur=o("TFTapasForMaskedLM"),Gur=o(" (TAPAS model)"),Our=l(),S9=a("li"),wbe=a("strong"),Vur=o("xlm"),Xur=o(" \u2014 "),hW=a("a"),zur=o("TFXLMWithLMHeadModel"),Qur=o(" (XLM model)"),Wur=l(),R9=a("li"),Abe=a("strong"),Hur=o("xlm-roberta"),Uur=o(" \u2014 "),pW=a("a"),Jur=o("TFXLMRobertaForMaskedLM"),Yur=o(" (XLM-RoBERTa model)"),Kur=l(),F(B9.$$.fragment),mqe=l(),Zd=a("h2"),P9=a("a"),ybe=a("span"),F(sL.$$.fragment),Zur=l(),Lbe=a("span"),e_r=o("TFAutoModelForSeq2SeqLM"),gqe=l(),rr=a("div"),F(lL.$$.fragment),o_r=l(),ec=a("p"),r_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),uW=a("a"),t_r=o("from_pretrained()"),a_r=o(" class method or the "),_W=a("a"),n_r=o("from_config()"),s_r=o(` class
method.`),l_r=l(),iL=a("p"),i_r=o("This class cannot be instantiated directly using "),xbe=a("code"),d_r=o("__init__()"),c_r=o(" (throws an error)."),f_r=l(),$t=a("div"),F(dL.$$.fragment),m_r=l(),$be=a("p"),g_r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),h_r=l(),oc=a("p"),p_r=o(`Note:
Loading a model from its configuration file does `),kbe=a("strong"),u_r=o("not"),__r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bW=a("a"),b_r=o("from_pretrained()"),v_r=o(" to load the model weights."),F_r=l(),F(I9.$$.fragment),T_r=l(),$r=a("div"),F(cL.$$.fragment),M_r=l(),Sbe=a("p"),E_r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),C_r=l(),an=a("p"),w_r=o("The model class to instantiate is selected based on the "),Rbe=a("code"),A_r=o("model_type"),y_r=o(` property of the config object (either
passed as an argument or loaded from `),Bbe=a("code"),L_r=o("pretrained_model_name_or_path"),x_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pbe=a("code"),$_r=o("pretrained_model_name_or_path"),k_r=o(":"),S_r=l(),ye=a("ul"),q9=a("li"),Ibe=a("strong"),R_r=o("bart"),B_r=o(" \u2014 "),vW=a("a"),P_r=o("TFBartForConditionalGeneration"),I_r=o(" (BART model)"),q_r=l(),N9=a("li"),qbe=a("strong"),N_r=o("blenderbot"),j_r=o(" \u2014 "),FW=a("a"),D_r=o("TFBlenderbotForConditionalGeneration"),G_r=o(" (Blenderbot model)"),O_r=l(),j9=a("li"),Nbe=a("strong"),V_r=o("blenderbot-small"),X_r=o(" \u2014 "),TW=a("a"),z_r=o("TFBlenderbotSmallForConditionalGeneration"),Q_r=o(" (BlenderbotSmall model)"),W_r=l(),D9=a("li"),jbe=a("strong"),H_r=o("encoder-decoder"),U_r=o(" \u2014 "),MW=a("a"),J_r=o("TFEncoderDecoderModel"),Y_r=o(" (Encoder decoder model)"),K_r=l(),G9=a("li"),Dbe=a("strong"),Z_r=o("led"),e1r=o(" \u2014 "),EW=a("a"),o1r=o("TFLEDForConditionalGeneration"),r1r=o(" (LED model)"),t1r=l(),O9=a("li"),Gbe=a("strong"),a1r=o("marian"),n1r=o(" \u2014 "),CW=a("a"),s1r=o("TFMarianMTModel"),l1r=o(" (Marian model)"),i1r=l(),V9=a("li"),Obe=a("strong"),d1r=o("mbart"),c1r=o(" \u2014 "),wW=a("a"),f1r=o("TFMBartForConditionalGeneration"),m1r=o(" (mBART model)"),g1r=l(),X9=a("li"),Vbe=a("strong"),h1r=o("mt5"),p1r=o(" \u2014 "),AW=a("a"),u1r=o("TFMT5ForConditionalGeneration"),_1r=o(" (mT5 model)"),b1r=l(),z9=a("li"),Xbe=a("strong"),v1r=o("pegasus"),F1r=o(" \u2014 "),yW=a("a"),T1r=o("TFPegasusForConditionalGeneration"),M1r=o(" (Pegasus model)"),E1r=l(),Q9=a("li"),zbe=a("strong"),C1r=o("t5"),w1r=o(" \u2014 "),LW=a("a"),A1r=o("TFT5ForConditionalGeneration"),y1r=o(" (T5 model)"),L1r=l(),F(W9.$$.fragment),hqe=l(),rc=a("h2"),H9=a("a"),Qbe=a("span"),F(fL.$$.fragment),x1r=l(),Wbe=a("span"),$1r=o("TFAutoModelForSequenceClassification"),pqe=l(),tr=a("div"),F(mL.$$.fragment),k1r=l(),tc=a("p"),S1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),xW=a("a"),R1r=o("from_pretrained()"),B1r=o(" class method or the "),$W=a("a"),P1r=o("from_config()"),I1r=o(` class
method.`),q1r=l(),gL=a("p"),N1r=o("This class cannot be instantiated directly using "),Hbe=a("code"),j1r=o("__init__()"),D1r=o(" (throws an error)."),G1r=l(),kt=a("div"),F(hL.$$.fragment),O1r=l(),Ube=a("p"),V1r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),X1r=l(),ac=a("p"),z1r=o(`Note:
Loading a model from its configuration file does `),Jbe=a("strong"),Q1r=o("not"),W1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kW=a("a"),H1r=o("from_pretrained()"),U1r=o(" to load the model weights."),J1r=l(),F(U9.$$.fragment),Y1r=l(),kr=a("div"),F(pL.$$.fragment),K1r=l(),Ybe=a("p"),Z1r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),e8r=l(),nn=a("p"),o8r=o("The model class to instantiate is selected based on the "),Kbe=a("code"),r8r=o("model_type"),t8r=o(` property of the config object (either
passed as an argument or loaded from `),Zbe=a("code"),a8r=o("pretrained_model_name_or_path"),n8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e2e=a("code"),s8r=o("pretrained_model_name_or_path"),l8r=o(":"),i8r=l(),Z=a("ul"),J9=a("li"),o2e=a("strong"),d8r=o("albert"),c8r=o(" \u2014 "),SW=a("a"),f8r=o("TFAlbertForSequenceClassification"),m8r=o(" (ALBERT model)"),g8r=l(),Y9=a("li"),r2e=a("strong"),h8r=o("bert"),p8r=o(" \u2014 "),RW=a("a"),u8r=o("TFBertForSequenceClassification"),_8r=o(" (BERT model)"),b8r=l(),K9=a("li"),t2e=a("strong"),v8r=o("camembert"),F8r=o(" \u2014 "),BW=a("a"),T8r=o("TFCamembertForSequenceClassification"),M8r=o(" (CamemBERT model)"),E8r=l(),Z9=a("li"),a2e=a("strong"),C8r=o("convbert"),w8r=o(" \u2014 "),PW=a("a"),A8r=o("TFConvBertForSequenceClassification"),y8r=o(" (ConvBERT model)"),L8r=l(),eM=a("li"),n2e=a("strong"),x8r=o("ctrl"),$8r=o(" \u2014 "),IW=a("a"),k8r=o("TFCTRLForSequenceClassification"),S8r=o(" (CTRL model)"),R8r=l(),oM=a("li"),s2e=a("strong"),B8r=o("deberta"),P8r=o(" \u2014 "),qW=a("a"),I8r=o("TFDebertaForSequenceClassification"),q8r=o(" (DeBERTa model)"),N8r=l(),rM=a("li"),l2e=a("strong"),j8r=o("deberta-v2"),D8r=o(" \u2014 "),NW=a("a"),G8r=o("TFDebertaV2ForSequenceClassification"),O8r=o(" (DeBERTa-v2 model)"),V8r=l(),tM=a("li"),i2e=a("strong"),X8r=o("distilbert"),z8r=o(" \u2014 "),jW=a("a"),Q8r=o("TFDistilBertForSequenceClassification"),W8r=o(" (DistilBERT model)"),H8r=l(),aM=a("li"),d2e=a("strong"),U8r=o("electra"),J8r=o(" \u2014 "),DW=a("a"),Y8r=o("TFElectraForSequenceClassification"),K8r=o(" (ELECTRA model)"),Z8r=l(),nM=a("li"),c2e=a("strong"),ebr=o("flaubert"),obr=o(" \u2014 "),GW=a("a"),rbr=o("TFFlaubertForSequenceClassification"),tbr=o(" (FlauBERT model)"),abr=l(),sM=a("li"),f2e=a("strong"),nbr=o("funnel"),sbr=o(" \u2014 "),OW=a("a"),lbr=o("TFFunnelForSequenceClassification"),ibr=o(" (Funnel Transformer model)"),dbr=l(),lM=a("li"),m2e=a("strong"),cbr=o("gpt2"),fbr=o(" \u2014 "),VW=a("a"),mbr=o("TFGPT2ForSequenceClassification"),gbr=o(" (OpenAI GPT-2 model)"),hbr=l(),iM=a("li"),g2e=a("strong"),pbr=o("gptj"),ubr=o(" \u2014 "),XW=a("a"),_br=o("TFGPTJForSequenceClassification"),bbr=o(" (GPT-J model)"),vbr=l(),dM=a("li"),h2e=a("strong"),Fbr=o("layoutlm"),Tbr=o(" \u2014 "),zW=a("a"),Mbr=o("TFLayoutLMForSequenceClassification"),Ebr=o(" (LayoutLM model)"),Cbr=l(),cM=a("li"),p2e=a("strong"),wbr=o("longformer"),Abr=o(" \u2014 "),QW=a("a"),ybr=o("TFLongformerForSequenceClassification"),Lbr=o(" (Longformer model)"),xbr=l(),fM=a("li"),u2e=a("strong"),$br=o("mobilebert"),kbr=o(" \u2014 "),WW=a("a"),Sbr=o("TFMobileBertForSequenceClassification"),Rbr=o(" (MobileBERT model)"),Bbr=l(),mM=a("li"),_2e=a("strong"),Pbr=o("mpnet"),Ibr=o(" \u2014 "),HW=a("a"),qbr=o("TFMPNetForSequenceClassification"),Nbr=o(" (MPNet model)"),jbr=l(),gM=a("li"),b2e=a("strong"),Dbr=o("openai-gpt"),Gbr=o(" \u2014 "),UW=a("a"),Obr=o("TFOpenAIGPTForSequenceClassification"),Vbr=o(" (OpenAI GPT model)"),Xbr=l(),hM=a("li"),v2e=a("strong"),zbr=o("rembert"),Qbr=o(" \u2014 "),JW=a("a"),Wbr=o("TFRemBertForSequenceClassification"),Hbr=o(" (RemBERT model)"),Ubr=l(),pM=a("li"),F2e=a("strong"),Jbr=o("roberta"),Ybr=o(" \u2014 "),YW=a("a"),Kbr=o("TFRobertaForSequenceClassification"),Zbr=o(" (RoBERTa model)"),e2r=l(),uM=a("li"),T2e=a("strong"),o2r=o("roformer"),r2r=o(" \u2014 "),KW=a("a"),t2r=o("TFRoFormerForSequenceClassification"),a2r=o(" (RoFormer model)"),n2r=l(),_M=a("li"),M2e=a("strong"),s2r=o("tapas"),l2r=o(" \u2014 "),ZW=a("a"),i2r=o("TFTapasForSequenceClassification"),d2r=o(" (TAPAS model)"),c2r=l(),bM=a("li"),E2e=a("strong"),f2r=o("transfo-xl"),m2r=o(" \u2014 "),eH=a("a"),g2r=o("TFTransfoXLForSequenceClassification"),h2r=o(" (Transformer-XL model)"),p2r=l(),vM=a("li"),C2e=a("strong"),u2r=o("xlm"),_2r=o(" \u2014 "),oH=a("a"),b2r=o("TFXLMForSequenceClassification"),v2r=o(" (XLM model)"),F2r=l(),FM=a("li"),w2e=a("strong"),T2r=o("xlm-roberta"),M2r=o(" \u2014 "),rH=a("a"),E2r=o("TFXLMRobertaForSequenceClassification"),C2r=o(" (XLM-RoBERTa model)"),w2r=l(),TM=a("li"),A2e=a("strong"),A2r=o("xlnet"),y2r=o(" \u2014 "),tH=a("a"),L2r=o("TFXLNetForSequenceClassification"),x2r=o(" (XLNet model)"),$2r=l(),F(MM.$$.fragment),uqe=l(),nc=a("h2"),EM=a("a"),y2e=a("span"),F(uL.$$.fragment),k2r=l(),L2e=a("span"),S2r=o("TFAutoModelForMultipleChoice"),_qe=l(),ar=a("div"),F(_L.$$.fragment),R2r=l(),sc=a("p"),B2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),aH=a("a"),P2r=o("from_pretrained()"),I2r=o(" class method or the "),nH=a("a"),q2r=o("from_config()"),N2r=o(` class
method.`),j2r=l(),bL=a("p"),D2r=o("This class cannot be instantiated directly using "),x2e=a("code"),G2r=o("__init__()"),O2r=o(" (throws an error)."),V2r=l(),St=a("div"),F(vL.$$.fragment),X2r=l(),$2e=a("p"),z2r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Q2r=l(),lc=a("p"),W2r=o(`Note:
Loading a model from its configuration file does `),k2e=a("strong"),H2r=o("not"),U2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sH=a("a"),J2r=o("from_pretrained()"),Y2r=o(" to load the model weights."),K2r=l(),F(CM.$$.fragment),Z2r=l(),Sr=a("div"),F(FL.$$.fragment),evr=l(),S2e=a("p"),ovr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),rvr=l(),sn=a("p"),tvr=o("The model class to instantiate is selected based on the "),R2e=a("code"),avr=o("model_type"),nvr=o(` property of the config object (either
passed as an argument or loaded from `),B2e=a("code"),svr=o("pretrained_model_name_or_path"),lvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P2e=a("code"),ivr=o("pretrained_model_name_or_path"),dvr=o(":"),cvr=l(),pe=a("ul"),wM=a("li"),I2e=a("strong"),fvr=o("albert"),mvr=o(" \u2014 "),lH=a("a"),gvr=o("TFAlbertForMultipleChoice"),hvr=o(" (ALBERT model)"),pvr=l(),AM=a("li"),q2e=a("strong"),uvr=o("bert"),_vr=o(" \u2014 "),iH=a("a"),bvr=o("TFBertForMultipleChoice"),vvr=o(" (BERT model)"),Fvr=l(),yM=a("li"),N2e=a("strong"),Tvr=o("camembert"),Mvr=o(" \u2014 "),dH=a("a"),Evr=o("TFCamembertForMultipleChoice"),Cvr=o(" (CamemBERT model)"),wvr=l(),LM=a("li"),j2e=a("strong"),Avr=o("convbert"),yvr=o(" \u2014 "),cH=a("a"),Lvr=o("TFConvBertForMultipleChoice"),xvr=o(" (ConvBERT model)"),$vr=l(),xM=a("li"),D2e=a("strong"),kvr=o("distilbert"),Svr=o(" \u2014 "),fH=a("a"),Rvr=o("TFDistilBertForMultipleChoice"),Bvr=o(" (DistilBERT model)"),Pvr=l(),$M=a("li"),G2e=a("strong"),Ivr=o("electra"),qvr=o(" \u2014 "),mH=a("a"),Nvr=o("TFElectraForMultipleChoice"),jvr=o(" (ELECTRA model)"),Dvr=l(),kM=a("li"),O2e=a("strong"),Gvr=o("flaubert"),Ovr=o(" \u2014 "),gH=a("a"),Vvr=o("TFFlaubertForMultipleChoice"),Xvr=o(" (FlauBERT model)"),zvr=l(),SM=a("li"),V2e=a("strong"),Qvr=o("funnel"),Wvr=o(" \u2014 "),hH=a("a"),Hvr=o("TFFunnelForMultipleChoice"),Uvr=o(" (Funnel Transformer model)"),Jvr=l(),RM=a("li"),X2e=a("strong"),Yvr=o("longformer"),Kvr=o(" \u2014 "),pH=a("a"),Zvr=o("TFLongformerForMultipleChoice"),eFr=o(" (Longformer model)"),oFr=l(),BM=a("li"),z2e=a("strong"),rFr=o("mobilebert"),tFr=o(" \u2014 "),uH=a("a"),aFr=o("TFMobileBertForMultipleChoice"),nFr=o(" (MobileBERT model)"),sFr=l(),PM=a("li"),Q2e=a("strong"),lFr=o("mpnet"),iFr=o(" \u2014 "),_H=a("a"),dFr=o("TFMPNetForMultipleChoice"),cFr=o(" (MPNet model)"),fFr=l(),IM=a("li"),W2e=a("strong"),mFr=o("rembert"),gFr=o(" \u2014 "),bH=a("a"),hFr=o("TFRemBertForMultipleChoice"),pFr=o(" (RemBERT model)"),uFr=l(),qM=a("li"),H2e=a("strong"),_Fr=o("roberta"),bFr=o(" \u2014 "),vH=a("a"),vFr=o("TFRobertaForMultipleChoice"),FFr=o(" (RoBERTa model)"),TFr=l(),NM=a("li"),U2e=a("strong"),MFr=o("roformer"),EFr=o(" \u2014 "),FH=a("a"),CFr=o("TFRoFormerForMultipleChoice"),wFr=o(" (RoFormer model)"),AFr=l(),jM=a("li"),J2e=a("strong"),yFr=o("xlm"),LFr=o(" \u2014 "),TH=a("a"),xFr=o("TFXLMForMultipleChoice"),$Fr=o(" (XLM model)"),kFr=l(),DM=a("li"),Y2e=a("strong"),SFr=o("xlm-roberta"),RFr=o(" \u2014 "),MH=a("a"),BFr=o("TFXLMRobertaForMultipleChoice"),PFr=o(" (XLM-RoBERTa model)"),IFr=l(),GM=a("li"),K2e=a("strong"),qFr=o("xlnet"),NFr=o(" \u2014 "),EH=a("a"),jFr=o("TFXLNetForMultipleChoice"),DFr=o(" (XLNet model)"),GFr=l(),F(OM.$$.fragment),bqe=l(),ic=a("h2"),VM=a("a"),Z2e=a("span"),F(TL.$$.fragment),OFr=l(),eve=a("span"),VFr=o("TFAutoModelForNextSentencePrediction"),vqe=l(),nr=a("div"),F(ML.$$.fragment),XFr=l(),dc=a("p"),zFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),CH=a("a"),QFr=o("from_pretrained()"),WFr=o(" class method or the "),wH=a("a"),HFr=o("from_config()"),UFr=o(` class
method.`),JFr=l(),EL=a("p"),YFr=o("This class cannot be instantiated directly using "),ove=a("code"),KFr=o("__init__()"),ZFr=o(" (throws an error)."),e6r=l(),Rt=a("div"),F(CL.$$.fragment),o6r=l(),rve=a("p"),r6r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),t6r=l(),cc=a("p"),a6r=o(`Note:
Loading a model from its configuration file does `),tve=a("strong"),n6r=o("not"),s6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AH=a("a"),l6r=o("from_pretrained()"),i6r=o(" to load the model weights."),d6r=l(),F(XM.$$.fragment),c6r=l(),Rr=a("div"),F(wL.$$.fragment),f6r=l(),ave=a("p"),m6r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),g6r=l(),ln=a("p"),h6r=o("The model class to instantiate is selected based on the "),nve=a("code"),p6r=o("model_type"),u6r=o(` property of the config object (either
passed as an argument or loaded from `),sve=a("code"),_6r=o("pretrained_model_name_or_path"),b6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lve=a("code"),v6r=o("pretrained_model_name_or_path"),F6r=o(":"),T6r=l(),AL=a("ul"),zM=a("li"),ive=a("strong"),M6r=o("bert"),E6r=o(" \u2014 "),yH=a("a"),C6r=o("TFBertForNextSentencePrediction"),w6r=o(" (BERT model)"),A6r=l(),QM=a("li"),dve=a("strong"),y6r=o("mobilebert"),L6r=o(" \u2014 "),LH=a("a"),x6r=o("TFMobileBertForNextSentencePrediction"),$6r=o(" (MobileBERT model)"),k6r=l(),F(WM.$$.fragment),Fqe=l(),fc=a("h2"),HM=a("a"),cve=a("span"),F(yL.$$.fragment),S6r=l(),fve=a("span"),R6r=o("TFAutoModelForTableQuestionAnswering"),Tqe=l(),sr=a("div"),F(LL.$$.fragment),B6r=l(),mc=a("p"),P6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),xH=a("a"),I6r=o("from_pretrained()"),q6r=o(" class method or the "),$H=a("a"),N6r=o("from_config()"),j6r=o(` class
method.`),D6r=l(),xL=a("p"),G6r=o("This class cannot be instantiated directly using "),mve=a("code"),O6r=o("__init__()"),V6r=o(" (throws an error)."),X6r=l(),Bt=a("div"),F($L.$$.fragment),z6r=l(),gve=a("p"),Q6r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),W6r=l(),gc=a("p"),H6r=o(`Note:
Loading a model from its configuration file does `),hve=a("strong"),U6r=o("not"),J6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kH=a("a"),Y6r=o("from_pretrained()"),K6r=o(" to load the model weights."),Z6r=l(),F(UM.$$.fragment),eTr=l(),Br=a("div"),F(kL.$$.fragment),oTr=l(),pve=a("p"),rTr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),tTr=l(),dn=a("p"),aTr=o("The model class to instantiate is selected based on the "),uve=a("code"),nTr=o("model_type"),sTr=o(` property of the config object (either
passed as an argument or loaded from `),_ve=a("code"),lTr=o("pretrained_model_name_or_path"),iTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bve=a("code"),dTr=o("pretrained_model_name_or_path"),cTr=o(":"),fTr=l(),vve=a("ul"),JM=a("li"),Fve=a("strong"),mTr=o("tapas"),gTr=o(" \u2014 "),SH=a("a"),hTr=o("TFTapasForQuestionAnswering"),pTr=o(" (TAPAS model)"),uTr=l(),F(YM.$$.fragment),Mqe=l(),hc=a("h2"),KM=a("a"),Tve=a("span"),F(SL.$$.fragment),_Tr=l(),Mve=a("span"),bTr=o("TFAutoModelForTokenClassification"),Eqe=l(),lr=a("div"),F(RL.$$.fragment),vTr=l(),pc=a("p"),FTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),RH=a("a"),TTr=o("from_pretrained()"),MTr=o(" class method or the "),BH=a("a"),ETr=o("from_config()"),CTr=o(` class
method.`),wTr=l(),BL=a("p"),ATr=o("This class cannot be instantiated directly using "),Eve=a("code"),yTr=o("__init__()"),LTr=o(" (throws an error)."),xTr=l(),Pt=a("div"),F(PL.$$.fragment),$Tr=l(),Cve=a("p"),kTr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),STr=l(),uc=a("p"),RTr=o(`Note:
Loading a model from its configuration file does `),wve=a("strong"),BTr=o("not"),PTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PH=a("a"),ITr=o("from_pretrained()"),qTr=o(" to load the model weights."),NTr=l(),F(ZM.$$.fragment),jTr=l(),Pr=a("div"),F(IL.$$.fragment),DTr=l(),Ave=a("p"),GTr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),OTr=l(),cn=a("p"),VTr=o("The model class to instantiate is selected based on the "),yve=a("code"),XTr=o("model_type"),zTr=o(` property of the config object (either
passed as an argument or loaded from `),Lve=a("code"),QTr=o("pretrained_model_name_or_path"),WTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xve=a("code"),HTr=o("pretrained_model_name_or_path"),UTr=o(":"),JTr=l(),de=a("ul"),e4=a("li"),$ve=a("strong"),YTr=o("albert"),KTr=o(" \u2014 "),IH=a("a"),ZTr=o("TFAlbertForTokenClassification"),e9r=o(" (ALBERT model)"),o9r=l(),o4=a("li"),kve=a("strong"),r9r=o("bert"),t9r=o(" \u2014 "),qH=a("a"),a9r=o("TFBertForTokenClassification"),n9r=o(" (BERT model)"),s9r=l(),r4=a("li"),Sve=a("strong"),l9r=o("camembert"),i9r=o(" \u2014 "),NH=a("a"),d9r=o("TFCamembertForTokenClassification"),c9r=o(" (CamemBERT model)"),f9r=l(),t4=a("li"),Rve=a("strong"),m9r=o("convbert"),g9r=o(" \u2014 "),jH=a("a"),h9r=o("TFConvBertForTokenClassification"),p9r=o(" (ConvBERT model)"),u9r=l(),a4=a("li"),Bve=a("strong"),_9r=o("deberta"),b9r=o(" \u2014 "),DH=a("a"),v9r=o("TFDebertaForTokenClassification"),F9r=o(" (DeBERTa model)"),T9r=l(),n4=a("li"),Pve=a("strong"),M9r=o("deberta-v2"),E9r=o(" \u2014 "),GH=a("a"),C9r=o("TFDebertaV2ForTokenClassification"),w9r=o(" (DeBERTa-v2 model)"),A9r=l(),s4=a("li"),Ive=a("strong"),y9r=o("distilbert"),L9r=o(" \u2014 "),OH=a("a"),x9r=o("TFDistilBertForTokenClassification"),$9r=o(" (DistilBERT model)"),k9r=l(),l4=a("li"),qve=a("strong"),S9r=o("electra"),R9r=o(" \u2014 "),VH=a("a"),B9r=o("TFElectraForTokenClassification"),P9r=o(" (ELECTRA model)"),I9r=l(),i4=a("li"),Nve=a("strong"),q9r=o("flaubert"),N9r=o(" \u2014 "),XH=a("a"),j9r=o("TFFlaubertForTokenClassification"),D9r=o(" (FlauBERT model)"),G9r=l(),d4=a("li"),jve=a("strong"),O9r=o("funnel"),V9r=o(" \u2014 "),zH=a("a"),X9r=o("TFFunnelForTokenClassification"),z9r=o(" (Funnel Transformer model)"),Q9r=l(),c4=a("li"),Dve=a("strong"),W9r=o("layoutlm"),H9r=o(" \u2014 "),QH=a("a"),U9r=o("TFLayoutLMForTokenClassification"),J9r=o(" (LayoutLM model)"),Y9r=l(),f4=a("li"),Gve=a("strong"),K9r=o("longformer"),Z9r=o(" \u2014 "),WH=a("a"),eMr=o("TFLongformerForTokenClassification"),oMr=o(" (Longformer model)"),rMr=l(),m4=a("li"),Ove=a("strong"),tMr=o("mobilebert"),aMr=o(" \u2014 "),HH=a("a"),nMr=o("TFMobileBertForTokenClassification"),sMr=o(" (MobileBERT model)"),lMr=l(),g4=a("li"),Vve=a("strong"),iMr=o("mpnet"),dMr=o(" \u2014 "),UH=a("a"),cMr=o("TFMPNetForTokenClassification"),fMr=o(" (MPNet model)"),mMr=l(),h4=a("li"),Xve=a("strong"),gMr=o("rembert"),hMr=o(" \u2014 "),JH=a("a"),pMr=o("TFRemBertForTokenClassification"),uMr=o(" (RemBERT model)"),_Mr=l(),p4=a("li"),zve=a("strong"),bMr=o("roberta"),vMr=o(" \u2014 "),YH=a("a"),FMr=o("TFRobertaForTokenClassification"),TMr=o(" (RoBERTa model)"),MMr=l(),u4=a("li"),Qve=a("strong"),EMr=o("roformer"),CMr=o(" \u2014 "),KH=a("a"),wMr=o("TFRoFormerForTokenClassification"),AMr=o(" (RoFormer model)"),yMr=l(),_4=a("li"),Wve=a("strong"),LMr=o("xlm"),xMr=o(" \u2014 "),ZH=a("a"),$Mr=o("TFXLMForTokenClassification"),kMr=o(" (XLM model)"),SMr=l(),b4=a("li"),Hve=a("strong"),RMr=o("xlm-roberta"),BMr=o(" \u2014 "),eU=a("a"),PMr=o("TFXLMRobertaForTokenClassification"),IMr=o(" (XLM-RoBERTa model)"),qMr=l(),v4=a("li"),Uve=a("strong"),NMr=o("xlnet"),jMr=o(" \u2014 "),oU=a("a"),DMr=o("TFXLNetForTokenClassification"),GMr=o(" (XLNet model)"),OMr=l(),F(F4.$$.fragment),Cqe=l(),_c=a("h2"),T4=a("a"),Jve=a("span"),F(qL.$$.fragment),VMr=l(),Yve=a("span"),XMr=o("TFAutoModelForQuestionAnswering"),wqe=l(),ir=a("div"),F(NL.$$.fragment),zMr=l(),bc=a("p"),QMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),rU=a("a"),WMr=o("from_pretrained()"),HMr=o(" class method or the "),tU=a("a"),UMr=o("from_config()"),JMr=o(` class
method.`),YMr=l(),jL=a("p"),KMr=o("This class cannot be instantiated directly using "),Kve=a("code"),ZMr=o("__init__()"),e4r=o(" (throws an error)."),o4r=l(),It=a("div"),F(DL.$$.fragment),r4r=l(),Zve=a("p"),t4r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),a4r=l(),vc=a("p"),n4r=o(`Note:
Loading a model from its configuration file does `),eFe=a("strong"),s4r=o("not"),l4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aU=a("a"),i4r=o("from_pretrained()"),d4r=o(" to load the model weights."),c4r=l(),F(M4.$$.fragment),f4r=l(),Ir=a("div"),F(GL.$$.fragment),m4r=l(),oFe=a("p"),g4r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),h4r=l(),fn=a("p"),p4r=o("The model class to instantiate is selected based on the "),rFe=a("code"),u4r=o("model_type"),_4r=o(` property of the config object (either
passed as an argument or loaded from `),tFe=a("code"),b4r=o("pretrained_model_name_or_path"),v4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aFe=a("code"),F4r=o("pretrained_model_name_or_path"),T4r=o(":"),M4r=l(),ce=a("ul"),E4=a("li"),nFe=a("strong"),E4r=o("albert"),C4r=o(" \u2014 "),nU=a("a"),w4r=o("TFAlbertForQuestionAnswering"),A4r=o(" (ALBERT model)"),y4r=l(),C4=a("li"),sFe=a("strong"),L4r=o("bert"),x4r=o(" \u2014 "),sU=a("a"),$4r=o("TFBertForQuestionAnswering"),k4r=o(" (BERT model)"),S4r=l(),w4=a("li"),lFe=a("strong"),R4r=o("camembert"),B4r=o(" \u2014 "),lU=a("a"),P4r=o("TFCamembertForQuestionAnswering"),I4r=o(" (CamemBERT model)"),q4r=l(),A4=a("li"),iFe=a("strong"),N4r=o("convbert"),j4r=o(" \u2014 "),iU=a("a"),D4r=o("TFConvBertForQuestionAnswering"),G4r=o(" (ConvBERT model)"),O4r=l(),y4=a("li"),dFe=a("strong"),V4r=o("deberta"),X4r=o(" \u2014 "),dU=a("a"),z4r=o("TFDebertaForQuestionAnswering"),Q4r=o(" (DeBERTa model)"),W4r=l(),L4=a("li"),cFe=a("strong"),H4r=o("deberta-v2"),U4r=o(" \u2014 "),cU=a("a"),J4r=o("TFDebertaV2ForQuestionAnswering"),Y4r=o(" (DeBERTa-v2 model)"),K4r=l(),x4=a("li"),fFe=a("strong"),Z4r=o("distilbert"),eEr=o(" \u2014 "),fU=a("a"),oEr=o("TFDistilBertForQuestionAnswering"),rEr=o(" (DistilBERT model)"),tEr=l(),$4=a("li"),mFe=a("strong"),aEr=o("electra"),nEr=o(" \u2014 "),mU=a("a"),sEr=o("TFElectraForQuestionAnswering"),lEr=o(" (ELECTRA model)"),iEr=l(),k4=a("li"),gFe=a("strong"),dEr=o("flaubert"),cEr=o(" \u2014 "),gU=a("a"),fEr=o("TFFlaubertForQuestionAnsweringSimple"),mEr=o(" (FlauBERT model)"),gEr=l(),S4=a("li"),hFe=a("strong"),hEr=o("funnel"),pEr=o(" \u2014 "),hU=a("a"),uEr=o("TFFunnelForQuestionAnswering"),_Er=o(" (Funnel Transformer model)"),bEr=l(),R4=a("li"),pFe=a("strong"),vEr=o("gptj"),FEr=o(" \u2014 "),pU=a("a"),TEr=o("TFGPTJForQuestionAnswering"),MEr=o(" (GPT-J model)"),EEr=l(),B4=a("li"),uFe=a("strong"),CEr=o("longformer"),wEr=o(" \u2014 "),uU=a("a"),AEr=o("TFLongformerForQuestionAnswering"),yEr=o(" (Longformer model)"),LEr=l(),P4=a("li"),_Fe=a("strong"),xEr=o("mobilebert"),$Er=o(" \u2014 "),_U=a("a"),kEr=o("TFMobileBertForQuestionAnswering"),SEr=o(" (MobileBERT model)"),REr=l(),I4=a("li"),bFe=a("strong"),BEr=o("mpnet"),PEr=o(" \u2014 "),bU=a("a"),IEr=o("TFMPNetForQuestionAnswering"),qEr=o(" (MPNet model)"),NEr=l(),q4=a("li"),vFe=a("strong"),jEr=o("rembert"),DEr=o(" \u2014 "),vU=a("a"),GEr=o("TFRemBertForQuestionAnswering"),OEr=o(" (RemBERT model)"),VEr=l(),N4=a("li"),FFe=a("strong"),XEr=o("roberta"),zEr=o(" \u2014 "),FU=a("a"),QEr=o("TFRobertaForQuestionAnswering"),WEr=o(" (RoBERTa model)"),HEr=l(),j4=a("li"),TFe=a("strong"),UEr=o("roformer"),JEr=o(" \u2014 "),TU=a("a"),YEr=o("TFRoFormerForQuestionAnswering"),KEr=o(" (RoFormer model)"),ZEr=l(),D4=a("li"),MFe=a("strong"),e5r=o("xlm"),o5r=o(" \u2014 "),MU=a("a"),r5r=o("TFXLMForQuestionAnsweringSimple"),t5r=o(" (XLM model)"),a5r=l(),G4=a("li"),EFe=a("strong"),n5r=o("xlm-roberta"),s5r=o(" \u2014 "),EU=a("a"),l5r=o("TFXLMRobertaForQuestionAnswering"),i5r=o(" (XLM-RoBERTa model)"),d5r=l(),O4=a("li"),CFe=a("strong"),c5r=o("xlnet"),f5r=o(" \u2014 "),CU=a("a"),m5r=o("TFXLNetForQuestionAnsweringSimple"),g5r=o(" (XLNet model)"),h5r=l(),F(V4.$$.fragment),Aqe=l(),Fc=a("h2"),X4=a("a"),wFe=a("span"),F(OL.$$.fragment),p5r=l(),AFe=a("span"),u5r=o("TFAutoModelForVision2Seq"),yqe=l(),dr=a("div"),F(VL.$$.fragment),_5r=l(),Tc=a("p"),b5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),wU=a("a"),v5r=o("from_pretrained()"),F5r=o(" class method or the "),AU=a("a"),T5r=o("from_config()"),M5r=o(` class
method.`),E5r=l(),XL=a("p"),C5r=o("This class cannot be instantiated directly using "),yFe=a("code"),w5r=o("__init__()"),A5r=o(" (throws an error)."),y5r=l(),qt=a("div"),F(zL.$$.fragment),L5r=l(),LFe=a("p"),x5r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),$5r=l(),Mc=a("p"),k5r=o(`Note:
Loading a model from its configuration file does `),xFe=a("strong"),S5r=o("not"),R5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yU=a("a"),B5r=o("from_pretrained()"),P5r=o(" to load the model weights."),I5r=l(),F(z4.$$.fragment),q5r=l(),qr=a("div"),F(QL.$$.fragment),N5r=l(),$Fe=a("p"),j5r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),D5r=l(),mn=a("p"),G5r=o("The model class to instantiate is selected based on the "),kFe=a("code"),O5r=o("model_type"),V5r=o(` property of the config object (either
passed as an argument or loaded from `),SFe=a("code"),X5r=o("pretrained_model_name_or_path"),z5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RFe=a("code"),Q5r=o("pretrained_model_name_or_path"),W5r=o(":"),H5r=l(),BFe=a("ul"),Q4=a("li"),PFe=a("strong"),U5r=o("vision-encoder-decoder"),J5r=o(" \u2014 "),LU=a("a"),Y5r=o("TFVisionEncoderDecoderModel"),K5r=o(" (Vision Encoder decoder model)"),Z5r=l(),F(W4.$$.fragment),Lqe=l(),Ec=a("h2"),H4=a("a"),IFe=a("span"),F(WL.$$.fragment),eCr=l(),qFe=a("span"),oCr=o("TFAutoModelForSpeechSeq2Seq"),xqe=l(),cr=a("div"),F(HL.$$.fragment),rCr=l(),Cc=a("p"),tCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),xU=a("a"),aCr=o("from_pretrained()"),nCr=o(" class method or the "),$U=a("a"),sCr=o("from_config()"),lCr=o(` class
method.`),iCr=l(),UL=a("p"),dCr=o("This class cannot be instantiated directly using "),NFe=a("code"),cCr=o("__init__()"),fCr=o(" (throws an error)."),mCr=l(),Nt=a("div"),F(JL.$$.fragment),gCr=l(),jFe=a("p"),hCr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),pCr=l(),wc=a("p"),uCr=o(`Note:
Loading a model from its configuration file does `),DFe=a("strong"),_Cr=o("not"),bCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kU=a("a"),vCr=o("from_pretrained()"),FCr=o(" to load the model weights."),TCr=l(),F(U4.$$.fragment),MCr=l(),Nr=a("div"),F(YL.$$.fragment),ECr=l(),GFe=a("p"),CCr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),wCr=l(),gn=a("p"),ACr=o("The model class to instantiate is selected based on the "),OFe=a("code"),yCr=o("model_type"),LCr=o(` property of the config object (either
passed as an argument or loaded from `),VFe=a("code"),xCr=o("pretrained_model_name_or_path"),$Cr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XFe=a("code"),kCr=o("pretrained_model_name_or_path"),SCr=o(":"),RCr=l(),zFe=a("ul"),J4=a("li"),QFe=a("strong"),BCr=o("speech_to_text"),PCr=o(" \u2014 "),SU=a("a"),ICr=o("TFSpeech2TextForConditionalGeneration"),qCr=o(" (Speech2Text model)"),NCr=l(),F(Y4.$$.fragment),$qe=l(),Ac=a("h2"),K4=a("a"),WFe=a("span"),F(KL.$$.fragment),jCr=l(),HFe=a("span"),DCr=o("FlaxAutoModel"),kqe=l(),fr=a("div"),F(ZL.$$.fragment),GCr=l(),yc=a("p"),OCr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),RU=a("a"),VCr=o("from_pretrained()"),XCr=o(" class method or the "),BU=a("a"),zCr=o("from_config()"),QCr=o(` class
method.`),WCr=l(),ex=a("p"),HCr=o("This class cannot be instantiated directly using "),UFe=a("code"),UCr=o("__init__()"),JCr=o(" (throws an error)."),YCr=l(),jt=a("div"),F(ox.$$.fragment),KCr=l(),JFe=a("p"),ZCr=o("Instantiates one of the base model classes of the library from a configuration."),e3r=l(),Lc=a("p"),o3r=o(`Note:
Loading a model from its configuration file does `),YFe=a("strong"),r3r=o("not"),t3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PU=a("a"),a3r=o("from_pretrained()"),n3r=o(" to load the model weights."),s3r=l(),F(Z4.$$.fragment),l3r=l(),jr=a("div"),F(rx.$$.fragment),i3r=l(),KFe=a("p"),d3r=o("Instantiate one of the base model classes of the library from a pretrained model."),c3r=l(),hn=a("p"),f3r=o("The model class to instantiate is selected based on the "),ZFe=a("code"),m3r=o("model_type"),g3r=o(` property of the config object (either
passed as an argument or loaded from `),e6e=a("code"),h3r=o("pretrained_model_name_or_path"),p3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o6e=a("code"),u3r=o("pretrained_model_name_or_path"),_3r=o(":"),b3r=l(),re=a("ul"),eE=a("li"),r6e=a("strong"),v3r=o("albert"),F3r=o(" \u2014 "),IU=a("a"),T3r=o("FlaxAlbertModel"),M3r=o(" (ALBERT model)"),E3r=l(),oE=a("li"),t6e=a("strong"),C3r=o("bart"),w3r=o(" \u2014 "),qU=a("a"),A3r=o("FlaxBartModel"),y3r=o(" (BART model)"),L3r=l(),rE=a("li"),a6e=a("strong"),x3r=o("beit"),$3r=o(" \u2014 "),NU=a("a"),k3r=o("FlaxBeitModel"),S3r=o(" (BEiT model)"),R3r=l(),tE=a("li"),n6e=a("strong"),B3r=o("bert"),P3r=o(" \u2014 "),jU=a("a"),I3r=o("FlaxBertModel"),q3r=o(" (BERT model)"),N3r=l(),aE=a("li"),s6e=a("strong"),j3r=o("big_bird"),D3r=o(" \u2014 "),DU=a("a"),G3r=o("FlaxBigBirdModel"),O3r=o(" (BigBird model)"),V3r=l(),nE=a("li"),l6e=a("strong"),X3r=o("blenderbot"),z3r=o(" \u2014 "),GU=a("a"),Q3r=o("FlaxBlenderbotModel"),W3r=o(" (Blenderbot model)"),H3r=l(),sE=a("li"),i6e=a("strong"),U3r=o("blenderbot-small"),J3r=o(" \u2014 "),OU=a("a"),Y3r=o("FlaxBlenderbotSmallModel"),K3r=o(" (BlenderbotSmall model)"),Z3r=l(),lE=a("li"),d6e=a("strong"),ewr=o("clip"),owr=o(" \u2014 "),VU=a("a"),rwr=o("FlaxCLIPModel"),twr=o(" (CLIP model)"),awr=l(),iE=a("li"),c6e=a("strong"),nwr=o("distilbert"),swr=o(" \u2014 "),XU=a("a"),lwr=o("FlaxDistilBertModel"),iwr=o(" (DistilBERT model)"),dwr=l(),dE=a("li"),f6e=a("strong"),cwr=o("electra"),fwr=o(" \u2014 "),zU=a("a"),mwr=o("FlaxElectraModel"),gwr=o(" (ELECTRA model)"),hwr=l(),cE=a("li"),m6e=a("strong"),pwr=o("gpt2"),uwr=o(" \u2014 "),QU=a("a"),_wr=o("FlaxGPT2Model"),bwr=o(" (OpenAI GPT-2 model)"),vwr=l(),fE=a("li"),g6e=a("strong"),Fwr=o("gpt_neo"),Twr=o(" \u2014 "),WU=a("a"),Mwr=o("FlaxGPTNeoModel"),Ewr=o(" (GPT Neo model)"),Cwr=l(),mE=a("li"),h6e=a("strong"),wwr=o("gptj"),Awr=o(" \u2014 "),HU=a("a"),ywr=o("FlaxGPTJModel"),Lwr=o(" (GPT-J model)"),xwr=l(),gE=a("li"),p6e=a("strong"),$wr=o("marian"),kwr=o(" \u2014 "),UU=a("a"),Swr=o("FlaxMarianModel"),Rwr=o(" (Marian model)"),Bwr=l(),hE=a("li"),u6e=a("strong"),Pwr=o("mbart"),Iwr=o(" \u2014 "),JU=a("a"),qwr=o("FlaxMBartModel"),Nwr=o(" (mBART model)"),jwr=l(),pE=a("li"),_6e=a("strong"),Dwr=o("mt5"),Gwr=o(" \u2014 "),YU=a("a"),Owr=o("FlaxMT5Model"),Vwr=o(" (mT5 model)"),Xwr=l(),uE=a("li"),b6e=a("strong"),zwr=o("pegasus"),Qwr=o(" \u2014 "),KU=a("a"),Wwr=o("FlaxPegasusModel"),Hwr=o(" (Pegasus model)"),Uwr=l(),_E=a("li"),v6e=a("strong"),Jwr=o("roberta"),Ywr=o(" \u2014 "),ZU=a("a"),Kwr=o("FlaxRobertaModel"),Zwr=o(" (RoBERTa model)"),eAr=l(),bE=a("li"),F6e=a("strong"),oAr=o("roformer"),rAr=o(" \u2014 "),eJ=a("a"),tAr=o("FlaxRoFormerModel"),aAr=o(" (RoFormer model)"),nAr=l(),vE=a("li"),T6e=a("strong"),sAr=o("t5"),lAr=o(" \u2014 "),oJ=a("a"),iAr=o("FlaxT5Model"),dAr=o(" (T5 model)"),cAr=l(),FE=a("li"),M6e=a("strong"),fAr=o("vision-text-dual-encoder"),mAr=o(" \u2014 "),rJ=a("a"),gAr=o("FlaxVisionTextDualEncoderModel"),hAr=o(" (VisionTextDualEncoder model)"),pAr=l(),TE=a("li"),E6e=a("strong"),uAr=o("vit"),_Ar=o(" \u2014 "),tJ=a("a"),bAr=o("FlaxViTModel"),vAr=o(" (ViT model)"),FAr=l(),ME=a("li"),C6e=a("strong"),TAr=o("wav2vec2"),MAr=o(" \u2014 "),aJ=a("a"),EAr=o("FlaxWav2Vec2Model"),CAr=o(" (Wav2Vec2 model)"),wAr=l(),EE=a("li"),w6e=a("strong"),AAr=o("xglm"),yAr=o(" \u2014 "),nJ=a("a"),LAr=o("FlaxXGLMModel"),xAr=o(" (XGLM model)"),$Ar=l(),CE=a("li"),A6e=a("strong"),kAr=o("xlm-roberta"),SAr=o(" \u2014 "),sJ=a("a"),RAr=o("FlaxXLMRobertaModel"),BAr=o(" (XLM-RoBERTa model)"),PAr=l(),F(wE.$$.fragment),Sqe=l(),xc=a("h2"),AE=a("a"),y6e=a("span"),F(tx.$$.fragment),IAr=l(),L6e=a("span"),qAr=o("FlaxAutoModelForCausalLM"),Rqe=l(),mr=a("div"),F(ax.$$.fragment),NAr=l(),$c=a("p"),jAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),lJ=a("a"),DAr=o("from_pretrained()"),GAr=o(" class method or the "),iJ=a("a"),OAr=o("from_config()"),VAr=o(` class
method.`),XAr=l(),nx=a("p"),zAr=o("This class cannot be instantiated directly using "),x6e=a("code"),QAr=o("__init__()"),WAr=o(" (throws an error)."),HAr=l(),Dt=a("div"),F(sx.$$.fragment),UAr=l(),$6e=a("p"),JAr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),YAr=l(),kc=a("p"),KAr=o(`Note:
Loading a model from its configuration file does `),k6e=a("strong"),ZAr=o("not"),e0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dJ=a("a"),o0r=o("from_pretrained()"),r0r=o(" to load the model weights."),t0r=l(),F(yE.$$.fragment),a0r=l(),Dr=a("div"),F(lx.$$.fragment),n0r=l(),S6e=a("p"),s0r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),l0r=l(),pn=a("p"),i0r=o("The model class to instantiate is selected based on the "),R6e=a("code"),d0r=o("model_type"),c0r=o(` property of the config object (either
passed as an argument or loaded from `),B6e=a("code"),f0r=o("pretrained_model_name_or_path"),m0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P6e=a("code"),g0r=o("pretrained_model_name_or_path"),h0r=o(":"),p0r=l(),ke=a("ul"),LE=a("li"),I6e=a("strong"),u0r=o("bart"),_0r=o(" \u2014 "),cJ=a("a"),b0r=o("FlaxBartForCausalLM"),v0r=o(" (BART model)"),F0r=l(),xE=a("li"),q6e=a("strong"),T0r=o("bert"),M0r=o(" \u2014 "),fJ=a("a"),E0r=o("FlaxBertForCausalLM"),C0r=o(" (BERT model)"),w0r=l(),$E=a("li"),N6e=a("strong"),A0r=o("big_bird"),y0r=o(" \u2014 "),mJ=a("a"),L0r=o("FlaxBigBirdForCausalLM"),x0r=o(" (BigBird model)"),$0r=l(),kE=a("li"),j6e=a("strong"),k0r=o("electra"),S0r=o(" \u2014 "),gJ=a("a"),R0r=o("FlaxElectraForCausalLM"),B0r=o(" (ELECTRA model)"),P0r=l(),SE=a("li"),D6e=a("strong"),I0r=o("gpt2"),q0r=o(" \u2014 "),hJ=a("a"),N0r=o("FlaxGPT2LMHeadModel"),j0r=o(" (OpenAI GPT-2 model)"),D0r=l(),RE=a("li"),G6e=a("strong"),G0r=o("gpt_neo"),O0r=o(" \u2014 "),pJ=a("a"),V0r=o("FlaxGPTNeoForCausalLM"),X0r=o(" (GPT Neo model)"),z0r=l(),BE=a("li"),O6e=a("strong"),Q0r=o("gptj"),W0r=o(" \u2014 "),uJ=a("a"),H0r=o("FlaxGPTJForCausalLM"),U0r=o(" (GPT-J model)"),J0r=l(),PE=a("li"),V6e=a("strong"),Y0r=o("roberta"),K0r=o(" \u2014 "),_J=a("a"),Z0r=o("FlaxRobertaForCausalLM"),eyr=o(" (RoBERTa model)"),oyr=l(),IE=a("li"),X6e=a("strong"),ryr=o("xglm"),tyr=o(" \u2014 "),bJ=a("a"),ayr=o("FlaxXGLMForCausalLM"),nyr=o(" (XGLM model)"),syr=l(),F(qE.$$.fragment),Bqe=l(),Sc=a("h2"),NE=a("a"),z6e=a("span"),F(ix.$$.fragment),lyr=l(),Q6e=a("span"),iyr=o("FlaxAutoModelForPreTraining"),Pqe=l(),gr=a("div"),F(dx.$$.fragment),dyr=l(),Rc=a("p"),cyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),vJ=a("a"),fyr=o("from_pretrained()"),myr=o(" class method or the "),FJ=a("a"),gyr=o("from_config()"),hyr=o(` class
method.`),pyr=l(),cx=a("p"),uyr=o("This class cannot be instantiated directly using "),W6e=a("code"),_yr=o("__init__()"),byr=o(" (throws an error)."),vyr=l(),Gt=a("div"),F(fx.$$.fragment),Fyr=l(),H6e=a("p"),Tyr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Myr=l(),Bc=a("p"),Eyr=o(`Note:
Loading a model from its configuration file does `),U6e=a("strong"),Cyr=o("not"),wyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TJ=a("a"),Ayr=o("from_pretrained()"),yyr=o(" to load the model weights."),Lyr=l(),F(jE.$$.fragment),xyr=l(),Gr=a("div"),F(mx.$$.fragment),$yr=l(),J6e=a("p"),kyr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Syr=l(),un=a("p"),Ryr=o("The model class to instantiate is selected based on the "),Y6e=a("code"),Byr=o("model_type"),Pyr=o(` property of the config object (either
passed as an argument or loaded from `),K6e=a("code"),Iyr=o("pretrained_model_name_or_path"),qyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z6e=a("code"),Nyr=o("pretrained_model_name_or_path"),jyr=o(":"),Dyr=l(),Me=a("ul"),DE=a("li"),eTe=a("strong"),Gyr=o("albert"),Oyr=o(" \u2014 "),MJ=a("a"),Vyr=o("FlaxAlbertForPreTraining"),Xyr=o(" (ALBERT model)"),zyr=l(),GE=a("li"),oTe=a("strong"),Qyr=o("bart"),Wyr=o(" \u2014 "),EJ=a("a"),Hyr=o("FlaxBartForConditionalGeneration"),Uyr=o(" (BART model)"),Jyr=l(),OE=a("li"),rTe=a("strong"),Yyr=o("bert"),Kyr=o(" \u2014 "),CJ=a("a"),Zyr=o("FlaxBertForPreTraining"),eLr=o(" (BERT model)"),oLr=l(),VE=a("li"),tTe=a("strong"),rLr=o("big_bird"),tLr=o(" \u2014 "),wJ=a("a"),aLr=o("FlaxBigBirdForPreTraining"),nLr=o(" (BigBird model)"),sLr=l(),XE=a("li"),aTe=a("strong"),lLr=o("electra"),iLr=o(" \u2014 "),AJ=a("a"),dLr=o("FlaxElectraForPreTraining"),cLr=o(" (ELECTRA model)"),fLr=l(),zE=a("li"),nTe=a("strong"),mLr=o("mbart"),gLr=o(" \u2014 "),yJ=a("a"),hLr=o("FlaxMBartForConditionalGeneration"),pLr=o(" (mBART model)"),uLr=l(),QE=a("li"),sTe=a("strong"),_Lr=o("mt5"),bLr=o(" \u2014 "),LJ=a("a"),vLr=o("FlaxMT5ForConditionalGeneration"),FLr=o(" (mT5 model)"),TLr=l(),WE=a("li"),lTe=a("strong"),MLr=o("roberta"),ELr=o(" \u2014 "),xJ=a("a"),CLr=o("FlaxRobertaForMaskedLM"),wLr=o(" (RoBERTa model)"),ALr=l(),HE=a("li"),iTe=a("strong"),yLr=o("roformer"),LLr=o(" \u2014 "),$J=a("a"),xLr=o("FlaxRoFormerForMaskedLM"),$Lr=o(" (RoFormer model)"),kLr=l(),UE=a("li"),dTe=a("strong"),SLr=o("t5"),RLr=o(" \u2014 "),kJ=a("a"),BLr=o("FlaxT5ForConditionalGeneration"),PLr=o(" (T5 model)"),ILr=l(),JE=a("li"),cTe=a("strong"),qLr=o("wav2vec2"),NLr=o(" \u2014 "),SJ=a("a"),jLr=o("FlaxWav2Vec2ForPreTraining"),DLr=o(" (Wav2Vec2 model)"),GLr=l(),YE=a("li"),fTe=a("strong"),OLr=o("xlm-roberta"),VLr=o(" \u2014 "),RJ=a("a"),XLr=o("FlaxXLMRobertaForMaskedLM"),zLr=o(" (XLM-RoBERTa model)"),QLr=l(),F(KE.$$.fragment),Iqe=l(),Pc=a("h2"),ZE=a("a"),mTe=a("span"),F(gx.$$.fragment),WLr=l(),gTe=a("span"),HLr=o("FlaxAutoModelForMaskedLM"),qqe=l(),hr=a("div"),F(hx.$$.fragment),ULr=l(),Ic=a("p"),JLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),BJ=a("a"),YLr=o("from_pretrained()"),KLr=o(" class method or the "),PJ=a("a"),ZLr=o("from_config()"),exr=o(` class
method.`),oxr=l(),px=a("p"),rxr=o("This class cannot be instantiated directly using "),hTe=a("code"),txr=o("__init__()"),axr=o(" (throws an error)."),nxr=l(),Ot=a("div"),F(ux.$$.fragment),sxr=l(),pTe=a("p"),lxr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ixr=l(),qc=a("p"),dxr=o(`Note:
Loading a model from its configuration file does `),uTe=a("strong"),cxr=o("not"),fxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IJ=a("a"),mxr=o("from_pretrained()"),gxr=o(" to load the model weights."),hxr=l(),F(e5.$$.fragment),pxr=l(),Or=a("div"),F(_x.$$.fragment),uxr=l(),_Te=a("p"),_xr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),bxr=l(),_n=a("p"),vxr=o("The model class to instantiate is selected based on the "),bTe=a("code"),Fxr=o("model_type"),Txr=o(` property of the config object (either
passed as an argument or loaded from `),vTe=a("code"),Mxr=o("pretrained_model_name_or_path"),Exr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FTe=a("code"),Cxr=o("pretrained_model_name_or_path"),wxr=o(":"),Axr=l(),Le=a("ul"),o5=a("li"),TTe=a("strong"),yxr=o("albert"),Lxr=o(" \u2014 "),qJ=a("a"),xxr=o("FlaxAlbertForMaskedLM"),$xr=o(" (ALBERT model)"),kxr=l(),r5=a("li"),MTe=a("strong"),Sxr=o("bart"),Rxr=o(" \u2014 "),NJ=a("a"),Bxr=o("FlaxBartForConditionalGeneration"),Pxr=o(" (BART model)"),Ixr=l(),t5=a("li"),ETe=a("strong"),qxr=o("bert"),Nxr=o(" \u2014 "),jJ=a("a"),jxr=o("FlaxBertForMaskedLM"),Dxr=o(" (BERT model)"),Gxr=l(),a5=a("li"),CTe=a("strong"),Oxr=o("big_bird"),Vxr=o(" \u2014 "),DJ=a("a"),Xxr=o("FlaxBigBirdForMaskedLM"),zxr=o(" (BigBird model)"),Qxr=l(),n5=a("li"),wTe=a("strong"),Wxr=o("distilbert"),Hxr=o(" \u2014 "),GJ=a("a"),Uxr=o("FlaxDistilBertForMaskedLM"),Jxr=o(" (DistilBERT model)"),Yxr=l(),s5=a("li"),ATe=a("strong"),Kxr=o("electra"),Zxr=o(" \u2014 "),OJ=a("a"),e7r=o("FlaxElectraForMaskedLM"),o7r=o(" (ELECTRA model)"),r7r=l(),l5=a("li"),yTe=a("strong"),t7r=o("mbart"),a7r=o(" \u2014 "),VJ=a("a"),n7r=o("FlaxMBartForConditionalGeneration"),s7r=o(" (mBART model)"),l7r=l(),i5=a("li"),LTe=a("strong"),i7r=o("roberta"),d7r=o(" \u2014 "),XJ=a("a"),c7r=o("FlaxRobertaForMaskedLM"),f7r=o(" (RoBERTa model)"),m7r=l(),d5=a("li"),xTe=a("strong"),g7r=o("roformer"),h7r=o(" \u2014 "),zJ=a("a"),p7r=o("FlaxRoFormerForMaskedLM"),u7r=o(" (RoFormer model)"),_7r=l(),c5=a("li"),$Te=a("strong"),b7r=o("xlm-roberta"),v7r=o(" \u2014 "),QJ=a("a"),F7r=o("FlaxXLMRobertaForMaskedLM"),T7r=o(" (XLM-RoBERTa model)"),M7r=l(),F(f5.$$.fragment),Nqe=l(),Nc=a("h2"),m5=a("a"),kTe=a("span"),F(bx.$$.fragment),E7r=l(),STe=a("span"),C7r=o("FlaxAutoModelForSeq2SeqLM"),jqe=l(),pr=a("div"),F(vx.$$.fragment),w7r=l(),jc=a("p"),A7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),WJ=a("a"),y7r=o("from_pretrained()"),L7r=o(" class method or the "),HJ=a("a"),x7r=o("from_config()"),$7r=o(` class
method.`),k7r=l(),Fx=a("p"),S7r=o("This class cannot be instantiated directly using "),RTe=a("code"),R7r=o("__init__()"),B7r=o(" (throws an error)."),P7r=l(),Vt=a("div"),F(Tx.$$.fragment),I7r=l(),BTe=a("p"),q7r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),N7r=l(),Dc=a("p"),j7r=o(`Note:
Loading a model from its configuration file does `),PTe=a("strong"),D7r=o("not"),G7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UJ=a("a"),O7r=o("from_pretrained()"),V7r=o(" to load the model weights."),X7r=l(),F(g5.$$.fragment),z7r=l(),Vr=a("div"),F(Mx.$$.fragment),Q7r=l(),ITe=a("p"),W7r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),H7r=l(),bn=a("p"),U7r=o("The model class to instantiate is selected based on the "),qTe=a("code"),J7r=o("model_type"),Y7r=o(` property of the config object (either
passed as an argument or loaded from `),NTe=a("code"),K7r=o("pretrained_model_name_or_path"),Z7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jTe=a("code"),e$r=o("pretrained_model_name_or_path"),o$r=o(":"),r$r=l(),Se=a("ul"),h5=a("li"),DTe=a("strong"),t$r=o("bart"),a$r=o(" \u2014 "),JJ=a("a"),n$r=o("FlaxBartForConditionalGeneration"),s$r=o(" (BART model)"),l$r=l(),p5=a("li"),GTe=a("strong"),i$r=o("blenderbot"),d$r=o(" \u2014 "),YJ=a("a"),c$r=o("FlaxBlenderbotForConditionalGeneration"),f$r=o(" (Blenderbot model)"),m$r=l(),u5=a("li"),OTe=a("strong"),g$r=o("blenderbot-small"),h$r=o(" \u2014 "),KJ=a("a"),p$r=o("FlaxBlenderbotSmallForConditionalGeneration"),u$r=o(" (BlenderbotSmall model)"),_$r=l(),_5=a("li"),VTe=a("strong"),b$r=o("encoder-decoder"),v$r=o(" \u2014 "),ZJ=a("a"),F$r=o("FlaxEncoderDecoderModel"),T$r=o(" (Encoder decoder model)"),M$r=l(),b5=a("li"),XTe=a("strong"),E$r=o("marian"),C$r=o(" \u2014 "),eY=a("a"),w$r=o("FlaxMarianMTModel"),A$r=o(" (Marian model)"),y$r=l(),v5=a("li"),zTe=a("strong"),L$r=o("mbart"),x$r=o(" \u2014 "),oY=a("a"),$$r=o("FlaxMBartForConditionalGeneration"),k$r=o(" (mBART model)"),S$r=l(),F5=a("li"),QTe=a("strong"),R$r=o("mt5"),B$r=o(" \u2014 "),rY=a("a"),P$r=o("FlaxMT5ForConditionalGeneration"),I$r=o(" (mT5 model)"),q$r=l(),T5=a("li"),WTe=a("strong"),N$r=o("pegasus"),j$r=o(" \u2014 "),tY=a("a"),D$r=o("FlaxPegasusForConditionalGeneration"),G$r=o(" (Pegasus model)"),O$r=l(),M5=a("li"),HTe=a("strong"),V$r=o("t5"),X$r=o(" \u2014 "),aY=a("a"),z$r=o("FlaxT5ForConditionalGeneration"),Q$r=o(" (T5 model)"),W$r=l(),F(E5.$$.fragment),Dqe=l(),Gc=a("h2"),C5=a("a"),UTe=a("span"),F(Ex.$$.fragment),H$r=l(),JTe=a("span"),U$r=o("FlaxAutoModelForSequenceClassification"),Gqe=l(),ur=a("div"),F(Cx.$$.fragment),J$r=l(),Oc=a("p"),Y$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),nY=a("a"),K$r=o("from_pretrained()"),Z$r=o(" class method or the "),sY=a("a"),ekr=o("from_config()"),okr=o(` class
method.`),rkr=l(),wx=a("p"),tkr=o("This class cannot be instantiated directly using "),YTe=a("code"),akr=o("__init__()"),nkr=o(" (throws an error)."),skr=l(),Xt=a("div"),F(Ax.$$.fragment),lkr=l(),KTe=a("p"),ikr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),dkr=l(),Vc=a("p"),ckr=o(`Note:
Loading a model from its configuration file does `),ZTe=a("strong"),fkr=o("not"),mkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lY=a("a"),gkr=o("from_pretrained()"),hkr=o(" to load the model weights."),pkr=l(),F(w5.$$.fragment),ukr=l(),Xr=a("div"),F(yx.$$.fragment),_kr=l(),e9e=a("p"),bkr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),vkr=l(),vn=a("p"),Fkr=o("The model class to instantiate is selected based on the "),o9e=a("code"),Tkr=o("model_type"),Mkr=o(` property of the config object (either
passed as an argument or loaded from `),r9e=a("code"),Ekr=o("pretrained_model_name_or_path"),Ckr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t9e=a("code"),wkr=o("pretrained_model_name_or_path"),Akr=o(":"),ykr=l(),xe=a("ul"),A5=a("li"),a9e=a("strong"),Lkr=o("albert"),xkr=o(" \u2014 "),iY=a("a"),$kr=o("FlaxAlbertForSequenceClassification"),kkr=o(" (ALBERT model)"),Skr=l(),y5=a("li"),n9e=a("strong"),Rkr=o("bart"),Bkr=o(" \u2014 "),dY=a("a"),Pkr=o("FlaxBartForSequenceClassification"),Ikr=o(" (BART model)"),qkr=l(),L5=a("li"),s9e=a("strong"),Nkr=o("bert"),jkr=o(" \u2014 "),cY=a("a"),Dkr=o("FlaxBertForSequenceClassification"),Gkr=o(" (BERT model)"),Okr=l(),x5=a("li"),l9e=a("strong"),Vkr=o("big_bird"),Xkr=o(" \u2014 "),fY=a("a"),zkr=o("FlaxBigBirdForSequenceClassification"),Qkr=o(" (BigBird model)"),Wkr=l(),$5=a("li"),i9e=a("strong"),Hkr=o("distilbert"),Ukr=o(" \u2014 "),mY=a("a"),Jkr=o("FlaxDistilBertForSequenceClassification"),Ykr=o(" (DistilBERT model)"),Kkr=l(),k5=a("li"),d9e=a("strong"),Zkr=o("electra"),eSr=o(" \u2014 "),gY=a("a"),oSr=o("FlaxElectraForSequenceClassification"),rSr=o(" (ELECTRA model)"),tSr=l(),S5=a("li"),c9e=a("strong"),aSr=o("mbart"),nSr=o(" \u2014 "),hY=a("a"),sSr=o("FlaxMBartForSequenceClassification"),lSr=o(" (mBART model)"),iSr=l(),R5=a("li"),f9e=a("strong"),dSr=o("roberta"),cSr=o(" \u2014 "),pY=a("a"),fSr=o("FlaxRobertaForSequenceClassification"),mSr=o(" (RoBERTa model)"),gSr=l(),B5=a("li"),m9e=a("strong"),hSr=o("roformer"),pSr=o(" \u2014 "),uY=a("a"),uSr=o("FlaxRoFormerForSequenceClassification"),_Sr=o(" (RoFormer model)"),bSr=l(),P5=a("li"),g9e=a("strong"),vSr=o("xlm-roberta"),FSr=o(" \u2014 "),_Y=a("a"),TSr=o("FlaxXLMRobertaForSequenceClassification"),MSr=o(" (XLM-RoBERTa model)"),ESr=l(),F(I5.$$.fragment),Oqe=l(),Xc=a("h2"),q5=a("a"),h9e=a("span"),F(Lx.$$.fragment),CSr=l(),p9e=a("span"),wSr=o("FlaxAutoModelForQuestionAnswering"),Vqe=l(),_r=a("div"),F(xx.$$.fragment),ASr=l(),zc=a("p"),ySr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),bY=a("a"),LSr=o("from_pretrained()"),xSr=o(" class method or the "),vY=a("a"),$Sr=o("from_config()"),kSr=o(` class
method.`),SSr=l(),$x=a("p"),RSr=o("This class cannot be instantiated directly using "),u9e=a("code"),BSr=o("__init__()"),PSr=o(" (throws an error)."),ISr=l(),zt=a("div"),F(kx.$$.fragment),qSr=l(),_9e=a("p"),NSr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),jSr=l(),Qc=a("p"),DSr=o(`Note:
Loading a model from its configuration file does `),b9e=a("strong"),GSr=o("not"),OSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FY=a("a"),VSr=o("from_pretrained()"),XSr=o(" to load the model weights."),zSr=l(),F(N5.$$.fragment),QSr=l(),zr=a("div"),F(Sx.$$.fragment),WSr=l(),v9e=a("p"),HSr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),USr=l(),Fn=a("p"),JSr=o("The model class to instantiate is selected based on the "),F9e=a("code"),YSr=o("model_type"),KSr=o(` property of the config object (either
passed as an argument or loaded from `),T9e=a("code"),ZSr=o("pretrained_model_name_or_path"),eRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M9e=a("code"),oRr=o("pretrained_model_name_or_path"),rRr=o(":"),tRr=l(),$e=a("ul"),j5=a("li"),E9e=a("strong"),aRr=o("albert"),nRr=o(" \u2014 "),TY=a("a"),sRr=o("FlaxAlbertForQuestionAnswering"),lRr=o(" (ALBERT model)"),iRr=l(),D5=a("li"),C9e=a("strong"),dRr=o("bart"),cRr=o(" \u2014 "),MY=a("a"),fRr=o("FlaxBartForQuestionAnswering"),mRr=o(" (BART model)"),gRr=l(),G5=a("li"),w9e=a("strong"),hRr=o("bert"),pRr=o(" \u2014 "),EY=a("a"),uRr=o("FlaxBertForQuestionAnswering"),_Rr=o(" (BERT model)"),bRr=l(),O5=a("li"),A9e=a("strong"),vRr=o("big_bird"),FRr=o(" \u2014 "),CY=a("a"),TRr=o("FlaxBigBirdForQuestionAnswering"),MRr=o(" (BigBird model)"),ERr=l(),V5=a("li"),y9e=a("strong"),CRr=o("distilbert"),wRr=o(" \u2014 "),wY=a("a"),ARr=o("FlaxDistilBertForQuestionAnswering"),yRr=o(" (DistilBERT model)"),LRr=l(),X5=a("li"),L9e=a("strong"),xRr=o("electra"),$Rr=o(" \u2014 "),AY=a("a"),kRr=o("FlaxElectraForQuestionAnswering"),SRr=o(" (ELECTRA model)"),RRr=l(),z5=a("li"),x9e=a("strong"),BRr=o("mbart"),PRr=o(" \u2014 "),yY=a("a"),IRr=o("FlaxMBartForQuestionAnswering"),qRr=o(" (mBART model)"),NRr=l(),Q5=a("li"),$9e=a("strong"),jRr=o("roberta"),DRr=o(" \u2014 "),LY=a("a"),GRr=o("FlaxRobertaForQuestionAnswering"),ORr=o(" (RoBERTa model)"),VRr=l(),W5=a("li"),k9e=a("strong"),XRr=o("roformer"),zRr=o(" \u2014 "),xY=a("a"),QRr=o("FlaxRoFormerForQuestionAnswering"),WRr=o(" (RoFormer model)"),HRr=l(),H5=a("li"),S9e=a("strong"),URr=o("xlm-roberta"),JRr=o(" \u2014 "),$Y=a("a"),YRr=o("FlaxXLMRobertaForQuestionAnswering"),KRr=o(" (XLM-RoBERTa model)"),ZRr=l(),F(U5.$$.fragment),Xqe=l(),Wc=a("h2"),J5=a("a"),R9e=a("span"),F(Rx.$$.fragment),eBr=l(),B9e=a("span"),oBr=o("FlaxAutoModelForTokenClassification"),zqe=l(),br=a("div"),F(Bx.$$.fragment),rBr=l(),Hc=a("p"),tBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),kY=a("a"),aBr=o("from_pretrained()"),nBr=o(" class method or the "),SY=a("a"),sBr=o("from_config()"),lBr=o(` class
method.`),iBr=l(),Px=a("p"),dBr=o("This class cannot be instantiated directly using "),P9e=a("code"),cBr=o("__init__()"),fBr=o(" (throws an error)."),mBr=l(),Qt=a("div"),F(Ix.$$.fragment),gBr=l(),I9e=a("p"),hBr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),pBr=l(),Uc=a("p"),uBr=o(`Note:
Loading a model from its configuration file does `),q9e=a("strong"),_Br=o("not"),bBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=a("a"),vBr=o("from_pretrained()"),FBr=o(" to load the model weights."),TBr=l(),F(Y5.$$.fragment),MBr=l(),Qr=a("div"),F(qx.$$.fragment),EBr=l(),N9e=a("p"),CBr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),wBr=l(),Tn=a("p"),ABr=o("The model class to instantiate is selected based on the "),j9e=a("code"),yBr=o("model_type"),LBr=o(` property of the config object (either
passed as an argument or loaded from `),D9e=a("code"),xBr=o("pretrained_model_name_or_path"),$Br=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G9e=a("code"),kBr=o("pretrained_model_name_or_path"),SBr=o(":"),RBr=l(),De=a("ul"),K5=a("li"),O9e=a("strong"),BBr=o("albert"),PBr=o(" \u2014 "),BY=a("a"),IBr=o("FlaxAlbertForTokenClassification"),qBr=o(" (ALBERT model)"),NBr=l(),Z5=a("li"),V9e=a("strong"),jBr=o("bert"),DBr=o(" \u2014 "),PY=a("a"),GBr=o("FlaxBertForTokenClassification"),OBr=o(" (BERT model)"),VBr=l(),eC=a("li"),X9e=a("strong"),XBr=o("big_bird"),zBr=o(" \u2014 "),IY=a("a"),QBr=o("FlaxBigBirdForTokenClassification"),WBr=o(" (BigBird model)"),HBr=l(),oC=a("li"),z9e=a("strong"),UBr=o("distilbert"),JBr=o(" \u2014 "),qY=a("a"),YBr=o("FlaxDistilBertForTokenClassification"),KBr=o(" (DistilBERT model)"),ZBr=l(),rC=a("li"),Q9e=a("strong"),ePr=o("electra"),oPr=o(" \u2014 "),NY=a("a"),rPr=o("FlaxElectraForTokenClassification"),tPr=o(" (ELECTRA model)"),aPr=l(),tC=a("li"),W9e=a("strong"),nPr=o("roberta"),sPr=o(" \u2014 "),jY=a("a"),lPr=o("FlaxRobertaForTokenClassification"),iPr=o(" (RoBERTa model)"),dPr=l(),aC=a("li"),H9e=a("strong"),cPr=o("roformer"),fPr=o(" \u2014 "),DY=a("a"),mPr=o("FlaxRoFormerForTokenClassification"),gPr=o(" (RoFormer model)"),hPr=l(),nC=a("li"),U9e=a("strong"),pPr=o("xlm-roberta"),uPr=o(" \u2014 "),GY=a("a"),_Pr=o("FlaxXLMRobertaForTokenClassification"),bPr=o(" (XLM-RoBERTa model)"),vPr=l(),F(sC.$$.fragment),Qqe=l(),Jc=a("h2"),lC=a("a"),J9e=a("span"),F(Nx.$$.fragment),FPr=l(),Y9e=a("span"),TPr=o("FlaxAutoModelForMultipleChoice"),Wqe=l(),vr=a("div"),F(jx.$$.fragment),MPr=l(),Yc=a("p"),EPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),OY=a("a"),CPr=o("from_pretrained()"),wPr=o(" class method or the "),VY=a("a"),APr=o("from_config()"),yPr=o(` class
method.`),LPr=l(),Dx=a("p"),xPr=o("This class cannot be instantiated directly using "),K9e=a("code"),$Pr=o("__init__()"),kPr=o(" (throws an error)."),SPr=l(),Wt=a("div"),F(Gx.$$.fragment),RPr=l(),Z9e=a("p"),BPr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),PPr=l(),Kc=a("p"),IPr=o(`Note:
Loading a model from its configuration file does `),eMe=a("strong"),qPr=o("not"),NPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XY=a("a"),jPr=o("from_pretrained()"),DPr=o(" to load the model weights."),GPr=l(),F(iC.$$.fragment),OPr=l(),Wr=a("div"),F(Ox.$$.fragment),VPr=l(),oMe=a("p"),XPr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),zPr=l(),Mn=a("p"),QPr=o("The model class to instantiate is selected based on the "),rMe=a("code"),WPr=o("model_type"),HPr=o(` property of the config object (either
passed as an argument or loaded from `),tMe=a("code"),UPr=o("pretrained_model_name_or_path"),JPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aMe=a("code"),YPr=o("pretrained_model_name_or_path"),KPr=o(":"),ZPr=l(),Ge=a("ul"),dC=a("li"),nMe=a("strong"),eIr=o("albert"),oIr=o(" \u2014 "),zY=a("a"),rIr=o("FlaxAlbertForMultipleChoice"),tIr=o(" (ALBERT model)"),aIr=l(),cC=a("li"),sMe=a("strong"),nIr=o("bert"),sIr=o(" \u2014 "),QY=a("a"),lIr=o("FlaxBertForMultipleChoice"),iIr=o(" (BERT model)"),dIr=l(),fC=a("li"),lMe=a("strong"),cIr=o("big_bird"),fIr=o(" \u2014 "),WY=a("a"),mIr=o("FlaxBigBirdForMultipleChoice"),gIr=o(" (BigBird model)"),hIr=l(),mC=a("li"),iMe=a("strong"),pIr=o("distilbert"),uIr=o(" \u2014 "),HY=a("a"),_Ir=o("FlaxDistilBertForMultipleChoice"),bIr=o(" (DistilBERT model)"),vIr=l(),gC=a("li"),dMe=a("strong"),FIr=o("electra"),TIr=o(" \u2014 "),UY=a("a"),MIr=o("FlaxElectraForMultipleChoice"),EIr=o(" (ELECTRA model)"),CIr=l(),hC=a("li"),cMe=a("strong"),wIr=o("roberta"),AIr=o(" \u2014 "),JY=a("a"),yIr=o("FlaxRobertaForMultipleChoice"),LIr=o(" (RoBERTa model)"),xIr=l(),pC=a("li"),fMe=a("strong"),$Ir=o("roformer"),kIr=o(" \u2014 "),YY=a("a"),SIr=o("FlaxRoFormerForMultipleChoice"),RIr=o(" (RoFormer model)"),BIr=l(),uC=a("li"),mMe=a("strong"),PIr=o("xlm-roberta"),IIr=o(" \u2014 "),KY=a("a"),qIr=o("FlaxXLMRobertaForMultipleChoice"),NIr=o(" (XLM-RoBERTa model)"),jIr=l(),F(_C.$$.fragment),Hqe=l(),Zc=a("h2"),bC=a("a"),gMe=a("span"),F(Vx.$$.fragment),DIr=l(),hMe=a("span"),GIr=o("FlaxAutoModelForNextSentencePrediction"),Uqe=l(),Fr=a("div"),F(Xx.$$.fragment),OIr=l(),ef=a("p"),VIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ZY=a("a"),XIr=o("from_pretrained()"),zIr=o(" class method or the "),eK=a("a"),QIr=o("from_config()"),WIr=o(` class
method.`),HIr=l(),zx=a("p"),UIr=o("This class cannot be instantiated directly using "),pMe=a("code"),JIr=o("__init__()"),YIr=o(" (throws an error)."),KIr=l(),Ht=a("div"),F(Qx.$$.fragment),ZIr=l(),uMe=a("p"),eqr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),oqr=l(),of=a("p"),rqr=o(`Note:
Loading a model from its configuration file does `),_Me=a("strong"),tqr=o("not"),aqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oK=a("a"),nqr=o("from_pretrained()"),sqr=o(" to load the model weights."),lqr=l(),F(vC.$$.fragment),iqr=l(),Hr=a("div"),F(Wx.$$.fragment),dqr=l(),bMe=a("p"),cqr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),fqr=l(),En=a("p"),mqr=o("The model class to instantiate is selected based on the "),vMe=a("code"),gqr=o("model_type"),hqr=o(` property of the config object (either
passed as an argument or loaded from `),FMe=a("code"),pqr=o("pretrained_model_name_or_path"),uqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TMe=a("code"),_qr=o("pretrained_model_name_or_path"),bqr=o(":"),vqr=l(),MMe=a("ul"),FC=a("li"),EMe=a("strong"),Fqr=o("bert"),Tqr=o(" \u2014 "),rK=a("a"),Mqr=o("FlaxBertForNextSentencePrediction"),Eqr=o(" (BERT model)"),Cqr=l(),F(TC.$$.fragment),Jqe=l(),rf=a("h2"),MC=a("a"),CMe=a("span"),F(Hx.$$.fragment),wqr=l(),wMe=a("span"),Aqr=o("FlaxAutoModelForImageClassification"),Yqe=l(),Tr=a("div"),F(Ux.$$.fragment),yqr=l(),tf=a("p"),Lqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),tK=a("a"),xqr=o("from_pretrained()"),$qr=o(" class method or the "),aK=a("a"),kqr=o("from_config()"),Sqr=o(` class
method.`),Rqr=l(),Jx=a("p"),Bqr=o("This class cannot be instantiated directly using "),AMe=a("code"),Pqr=o("__init__()"),Iqr=o(" (throws an error)."),qqr=l(),Ut=a("div"),F(Yx.$$.fragment),Nqr=l(),yMe=a("p"),jqr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Dqr=l(),af=a("p"),Gqr=o(`Note:
Loading a model from its configuration file does `),LMe=a("strong"),Oqr=o("not"),Vqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nK=a("a"),Xqr=o("from_pretrained()"),zqr=o(" to load the model weights."),Qqr=l(),F(EC.$$.fragment),Wqr=l(),Ur=a("div"),F(Kx.$$.fragment),Hqr=l(),xMe=a("p"),Uqr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Jqr=l(),Cn=a("p"),Yqr=o("The model class to instantiate is selected based on the "),$Me=a("code"),Kqr=o("model_type"),Zqr=o(` property of the config object (either
passed as an argument or loaded from `),kMe=a("code"),eNr=o("pretrained_model_name_or_path"),oNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SMe=a("code"),rNr=o("pretrained_model_name_or_path"),tNr=o(":"),aNr=l(),Zx=a("ul"),CC=a("li"),RMe=a("strong"),nNr=o("beit"),sNr=o(" \u2014 "),sK=a("a"),lNr=o("FlaxBeitForImageClassification"),iNr=o(" (BEiT model)"),dNr=l(),wC=a("li"),BMe=a("strong"),cNr=o("vit"),fNr=o(" \u2014 "),lK=a("a"),mNr=o("FlaxViTForImageClassification"),gNr=o(" (ViT model)"),hNr=l(),F(AC.$$.fragment),Kqe=l(),nf=a("h2"),yC=a("a"),PMe=a("span"),F(e7.$$.fragment),pNr=l(),IMe=a("span"),uNr=o("FlaxAutoModelForVision2Seq"),Zqe=l(),Mr=a("div"),F(o7.$$.fragment),_Nr=l(),sf=a("p"),bNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),iK=a("a"),vNr=o("from_pretrained()"),FNr=o(" class method or the "),dK=a("a"),TNr=o("from_config()"),MNr=o(` class
method.`),ENr=l(),r7=a("p"),CNr=o("This class cannot be instantiated directly using "),qMe=a("code"),wNr=o("__init__()"),ANr=o(" (throws an error)."),yNr=l(),Jt=a("div"),F(t7.$$.fragment),LNr=l(),NMe=a("p"),xNr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),$Nr=l(),lf=a("p"),kNr=o(`Note:
Loading a model from its configuration file does `),jMe=a("strong"),SNr=o("not"),RNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cK=a("a"),BNr=o("from_pretrained()"),PNr=o(" to load the model weights."),INr=l(),F(LC.$$.fragment),qNr=l(),Jr=a("div"),F(a7.$$.fragment),NNr=l(),DMe=a("p"),jNr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),DNr=l(),wn=a("p"),GNr=o("The model class to instantiate is selected based on the "),GMe=a("code"),ONr=o("model_type"),VNr=o(` property of the config object (either
passed as an argument or loaded from `),OMe=a("code"),XNr=o("pretrained_model_name_or_path"),zNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VMe=a("code"),QNr=o("pretrained_model_name_or_path"),WNr=o(":"),HNr=l(),XMe=a("ul"),xC=a("li"),zMe=a("strong"),UNr=o("vision-encoder-decoder"),JNr=o(" \u2014 "),fK=a("a"),YNr=o("FlaxVisionEncoderDecoderModel"),KNr=o(" (Vision Encoder decoder model)"),ZNr=l(),F($C.$$.fragment),this.h()},l(f){const _=SAt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var n7=s(p);m=n(n7,"A",{id:!0,class:!0,href:!0});var QMe=s(m);u=n(QMe,"SPAN",{});var WMe=s(u);T(d.$$.fragment,WMe),WMe.forEach(t),QMe.forEach(t),h=i(n7),Mo=n(n7,"SPAN",{});var HMe=s(Mo);ii=r(HMe,"Auto Classes"),HMe.forEach(t),n7.forEach(t),mf=i(f),et=n(f,"P",{});var s7=s(et);di=r(s7,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ci=n(s7,"CODE",{});var UMe=s(ci);Jw=r(UMe,"from_pretrained()"),UMe.forEach(t),gf=r(s7,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),s7.forEach(t),qe=i(f),Xe=n(f,"P",{});var An=s(Xe);fi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var JMe=s(yn);Yw=r(JMe,"AutoConfig"),JMe.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var YMe=s(xn);Kw=r(YMe,"AutoModel"),YMe.forEach(t),mi=r(An,`, and
`),$n=n(An,"A",{href:!0});var KMe=s($n);Zw=r(KMe,"AutoTokenizer"),KMe.forEach(t),gi=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),hf=i(f),T(Ma.$$.fragment,f),ze=i(f),Ae=n(f,"P",{});var l7=s(Ae);_$=r(l7,"will create a model that is an instance of "),hi=n(l7,"A",{href:!0});var ZMe=s(hi);b$=r(ZMe,"BertModel"),ZMe.forEach(t),v$=r(l7,"."),l7.forEach(t),Eo=i(f),Ea=n(f,"P",{});var i7=s(Ea);F$=r(i7,"There is one class of "),pf=n(i7,"CODE",{});var e4e=s(pf);T$=r(e4e,"AutoModel"),e4e.forEach(t),iDe=r(i7," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),i7.forEach(t),YPe=i(f),pi=n(f,"H2",{class:!0});var d7=s(pi);uf=n(d7,"A",{id:!0,class:!0,href:!0});var o4e=s(uf);aee=n(o4e,"SPAN",{});var r4e=s(aee);T(eA.$$.fragment,r4e),r4e.forEach(t),o4e.forEach(t),dDe=i(d7),nee=n(d7,"SPAN",{});var t4e=s(nee);cDe=r(t4e,"Extending the Auto Classes"),t4e.forEach(t),d7.forEach(t),KPe=i(f),kn=n(f,"P",{});var df=s(kn);fDe=r(df,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),see=n(df,"CODE",{});var a4e=s(see);mDe=r(a4e,"NewModel"),a4e.forEach(t),gDe=r(df,", make sure you have a "),lee=n(df,"CODE",{});var n4e=s(lee);hDe=r(n4e,"NewModelConfig"),n4e.forEach(t),pDe=r(df,` then you can add those to the auto
classes like this:`),df.forEach(t),ZPe=i(f),T(oA.$$.fragment,f),eIe=i(f),M$=n(f,"P",{});var s4e=s(M$);uDe=r(s4e,"You will then be able to use the auto classes like you would usually do!"),s4e.forEach(t),oIe=i(f),T(_f.$$.fragment,f),rIe=i(f),ui=n(f,"H2",{class:!0});var c7=s(ui);bf=n(c7,"A",{id:!0,class:!0,href:!0});var l4e=s(bf);iee=n(l4e,"SPAN",{});var i4e=s(iee);T(rA.$$.fragment,i4e),i4e.forEach(t),l4e.forEach(t),_De=i(c7),dee=n(c7,"SPAN",{});var d4e=s(dee);bDe=r(d4e,"AutoConfig"),d4e.forEach(t),c7.forEach(t),tIe=i(f),Co=n(f,"DIV",{class:!0});var Kr=s(Co);T(tA.$$.fragment,Kr),vDe=i(Kr),aA=n(Kr,"P",{});var f7=s(aA);FDe=r(f7,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),E$=n(f7,"A",{href:!0});var c4e=s(E$);TDe=r(c4e,"from_pretrained()"),c4e.forEach(t),MDe=r(f7," class method."),f7.forEach(t),EDe=i(Kr),nA=n(Kr,"P",{});var m7=s(nA);CDe=r(m7,"This class cannot be instantiated directly using "),cee=n(m7,"CODE",{});var f4e=s(cee);wDe=r(f4e,"__init__()"),f4e.forEach(t),ADe=r(m7," (throws an error)."),m7.forEach(t),yDe=i(Kr),Er=n(Kr,"DIV",{class:!0});var Zr=s(Er);T(sA.$$.fragment,Zr),LDe=i(Zr),fee=n(Zr,"P",{});var m4e=s(fee);xDe=r(m4e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),m4e.forEach(t),$De=i(Zr),_i=n(Zr,"P",{});var cf=s(_i);kDe=r(cf,"The configuration class to instantiate is selected based on the "),mee=n(cf,"CODE",{});var g4e=s(mee);SDe=r(g4e,"model_type"),g4e.forEach(t),RDe=r(cf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),gee=n(cf,"CODE",{});var h4e=s(gee);BDe=r(h4e,"pretrained_model_name_or_path"),h4e.forEach(t),PDe=r(cf,":"),cf.forEach(t),IDe=i(Zr),A=n(Zr,"UL",{});var y=s(A);vf=n(y,"LI",{});var kC=s(vf);hee=n(kC,"STRONG",{});var p4e=s(hee);qDe=r(p4e,"albert"),p4e.forEach(t),NDe=r(kC," \u2014 "),C$=n(kC,"A",{href:!0});var u4e=s(C$);jDe=r(u4e,"AlbertConfig"),u4e.forEach(t),DDe=r(kC," (ALBERT model)"),kC.forEach(t),GDe=i(y),Ff=n(y,"LI",{});var SC=s(Ff);pee=n(SC,"STRONG",{});var _4e=s(pee);ODe=r(_4e,"bart"),_4e.forEach(t),VDe=r(SC," \u2014 "),w$=n(SC,"A",{href:!0});var b4e=s(w$);XDe=r(b4e,"BartConfig"),b4e.forEach(t),zDe=r(SC," (BART model)"),SC.forEach(t),QDe=i(y),Tf=n(y,"LI",{});var RC=s(Tf);uee=n(RC,"STRONG",{});var v4e=s(uee);WDe=r(v4e,"beit"),v4e.forEach(t),HDe=r(RC," \u2014 "),A$=n(RC,"A",{href:!0});var F4e=s(A$);UDe=r(F4e,"BeitConfig"),F4e.forEach(t),JDe=r(RC," (BEiT model)"),RC.forEach(t),YDe=i(y),Mf=n(y,"LI",{});var BC=s(Mf);_ee=n(BC,"STRONG",{});var T4e=s(_ee);KDe=r(T4e,"bert"),T4e.forEach(t),ZDe=r(BC," \u2014 "),y$=n(BC,"A",{href:!0});var M4e=s(y$);eGe=r(M4e,"BertConfig"),M4e.forEach(t),oGe=r(BC," (BERT model)"),BC.forEach(t),rGe=i(y),Ef=n(y,"LI",{});var PC=s(Ef);bee=n(PC,"STRONG",{});var E4e=s(bee);tGe=r(E4e,"bert-generation"),E4e.forEach(t),aGe=r(PC," \u2014 "),L$=n(PC,"A",{href:!0});var C4e=s(L$);nGe=r(C4e,"BertGenerationConfig"),C4e.forEach(t),sGe=r(PC," (Bert Generation model)"),PC.forEach(t),lGe=i(y),Cf=n(y,"LI",{});var IC=s(Cf);vee=n(IC,"STRONG",{});var w4e=s(vee);iGe=r(w4e,"big_bird"),w4e.forEach(t),dGe=r(IC," \u2014 "),x$=n(IC,"A",{href:!0});var A4e=s(x$);cGe=r(A4e,"BigBirdConfig"),A4e.forEach(t),fGe=r(IC," (BigBird model)"),IC.forEach(t),mGe=i(y),wf=n(y,"LI",{});var qC=s(wf);Fee=n(qC,"STRONG",{});var y4e=s(Fee);gGe=r(y4e,"bigbird_pegasus"),y4e.forEach(t),hGe=r(qC," \u2014 "),$$=n(qC,"A",{href:!0});var L4e=s($$);pGe=r(L4e,"BigBirdPegasusConfig"),L4e.forEach(t),uGe=r(qC," (BigBirdPegasus model)"),qC.forEach(t),_Ge=i(y),Af=n(y,"LI",{});var NC=s(Af);Tee=n(NC,"STRONG",{});var x4e=s(Tee);bGe=r(x4e,"blenderbot"),x4e.forEach(t),vGe=r(NC," \u2014 "),k$=n(NC,"A",{href:!0});var $4e=s(k$);FGe=r($4e,"BlenderbotConfig"),$4e.forEach(t),TGe=r(NC," (Blenderbot model)"),NC.forEach(t),MGe=i(y),yf=n(y,"LI",{});var jC=s(yf);Mee=n(jC,"STRONG",{});var k4e=s(Mee);EGe=r(k4e,"blenderbot-small"),k4e.forEach(t),CGe=r(jC," \u2014 "),S$=n(jC,"A",{href:!0});var S4e=s(S$);wGe=r(S4e,"BlenderbotSmallConfig"),S4e.forEach(t),AGe=r(jC," (BlenderbotSmall model)"),jC.forEach(t),yGe=i(y),Lf=n(y,"LI",{});var DC=s(Lf);Eee=n(DC,"STRONG",{});var R4e=s(Eee);LGe=r(R4e,"camembert"),R4e.forEach(t),xGe=r(DC," \u2014 "),R$=n(DC,"A",{href:!0});var B4e=s(R$);$Ge=r(B4e,"CamembertConfig"),B4e.forEach(t),kGe=r(DC," (CamemBERT model)"),DC.forEach(t),SGe=i(y),xf=n(y,"LI",{});var GC=s(xf);Cee=n(GC,"STRONG",{});var P4e=s(Cee);RGe=r(P4e,"canine"),P4e.forEach(t),BGe=r(GC," \u2014 "),B$=n(GC,"A",{href:!0});var I4e=s(B$);PGe=r(I4e,"CanineConfig"),I4e.forEach(t),IGe=r(GC," (Canine model)"),GC.forEach(t),qGe=i(y),$f=n(y,"LI",{});var OC=s($f);wee=n(OC,"STRONG",{});var q4e=s(wee);NGe=r(q4e,"clip"),q4e.forEach(t),jGe=r(OC," \u2014 "),P$=n(OC,"A",{href:!0});var N4e=s(P$);DGe=r(N4e,"CLIPConfig"),N4e.forEach(t),GGe=r(OC," (CLIP model)"),OC.forEach(t),OGe=i(y),kf=n(y,"LI",{});var VC=s(kf);Aee=n(VC,"STRONG",{});var j4e=s(Aee);VGe=r(j4e,"convbert"),j4e.forEach(t),XGe=r(VC," \u2014 "),I$=n(VC,"A",{href:!0});var D4e=s(I$);zGe=r(D4e,"ConvBertConfig"),D4e.forEach(t),QGe=r(VC," (ConvBERT model)"),VC.forEach(t),WGe=i(y),Sf=n(y,"LI",{});var XC=s(Sf);yee=n(XC,"STRONG",{});var G4e=s(yee);HGe=r(G4e,"convnext"),G4e.forEach(t),UGe=r(XC," \u2014 "),q$=n(XC,"A",{href:!0});var O4e=s(q$);JGe=r(O4e,"ConvNextConfig"),O4e.forEach(t),YGe=r(XC," (ConvNext model)"),XC.forEach(t),KGe=i(y),Rf=n(y,"LI",{});var zC=s(Rf);Lee=n(zC,"STRONG",{});var V4e=s(Lee);ZGe=r(V4e,"ctrl"),V4e.forEach(t),eOe=r(zC," \u2014 "),N$=n(zC,"A",{href:!0});var X4e=s(N$);oOe=r(X4e,"CTRLConfig"),X4e.forEach(t),rOe=r(zC," (CTRL model)"),zC.forEach(t),tOe=i(y),Bf=n(y,"LI",{});var QC=s(Bf);xee=n(QC,"STRONG",{});var z4e=s(xee);aOe=r(z4e,"data2vec-audio"),z4e.forEach(t),nOe=r(QC," \u2014 "),j$=n(QC,"A",{href:!0});var Q4e=s(j$);sOe=r(Q4e,"Data2VecAudioConfig"),Q4e.forEach(t),lOe=r(QC," (Data2VecAudio model)"),QC.forEach(t),iOe=i(y),Pf=n(y,"LI",{});var WC=s(Pf);$ee=n(WC,"STRONG",{});var W4e=s($ee);dOe=r(W4e,"data2vec-text"),W4e.forEach(t),cOe=r(WC," \u2014 "),D$=n(WC,"A",{href:!0});var H4e=s(D$);fOe=r(H4e,"Data2VecTextConfig"),H4e.forEach(t),mOe=r(WC," (Data2VecText model)"),WC.forEach(t),gOe=i(y),If=n(y,"LI",{});var HC=s(If);kee=n(HC,"STRONG",{});var U4e=s(kee);hOe=r(U4e,"data2vec-vision"),U4e.forEach(t),pOe=r(HC," \u2014 "),G$=n(HC,"A",{href:!0});var J4e=s(G$);uOe=r(J4e,"Data2VecVisionConfig"),J4e.forEach(t),_Oe=r(HC," (Data2VecVision model)"),HC.forEach(t),bOe=i(y),qf=n(y,"LI",{});var UC=s(qf);See=n(UC,"STRONG",{});var Y4e=s(See);vOe=r(Y4e,"deberta"),Y4e.forEach(t),FOe=r(UC," \u2014 "),O$=n(UC,"A",{href:!0});var K4e=s(O$);TOe=r(K4e,"DebertaConfig"),K4e.forEach(t),MOe=r(UC," (DeBERTa model)"),UC.forEach(t),EOe=i(y),Nf=n(y,"LI",{});var JC=s(Nf);Ree=n(JC,"STRONG",{});var Z4e=s(Ree);COe=r(Z4e,"deberta-v2"),Z4e.forEach(t),wOe=r(JC," \u2014 "),V$=n(JC,"A",{href:!0});var eEe=s(V$);AOe=r(eEe,"DebertaV2Config"),eEe.forEach(t),yOe=r(JC," (DeBERTa-v2 model)"),JC.forEach(t),LOe=i(y),jf=n(y,"LI",{});var YC=s(jf);Bee=n(YC,"STRONG",{});var oEe=s(Bee);xOe=r(oEe,"decision_transformer"),oEe.forEach(t),$Oe=r(YC," \u2014 "),X$=n(YC,"A",{href:!0});var rEe=s(X$);kOe=r(rEe,"DecisionTransformerConfig"),rEe.forEach(t),SOe=r(YC," (Decision Transformer model)"),YC.forEach(t),ROe=i(y),Df=n(y,"LI",{});var KC=s(Df);Pee=n(KC,"STRONG",{});var tEe=s(Pee);BOe=r(tEe,"deit"),tEe.forEach(t),POe=r(KC," \u2014 "),z$=n(KC,"A",{href:!0});var aEe=s(z$);IOe=r(aEe,"DeiTConfig"),aEe.forEach(t),qOe=r(KC," (DeiT model)"),KC.forEach(t),NOe=i(y),Gf=n(y,"LI",{});var ZC=s(Gf);Iee=n(ZC,"STRONG",{});var nEe=s(Iee);jOe=r(nEe,"detr"),nEe.forEach(t),DOe=r(ZC," \u2014 "),Q$=n(ZC,"A",{href:!0});var ojr=s(Q$);GOe=r(ojr,"DetrConfig"),ojr.forEach(t),OOe=r(ZC," (DETR model)"),ZC.forEach(t),VOe=i(y),Of=n(y,"LI",{});var sEe=s(Of);qee=n(sEe,"STRONG",{});var rjr=s(qee);XOe=r(rjr,"distilbert"),rjr.forEach(t),zOe=r(sEe," \u2014 "),W$=n(sEe,"A",{href:!0});var tjr=s(W$);QOe=r(tjr,"DistilBertConfig"),tjr.forEach(t),WOe=r(sEe," (DistilBERT model)"),sEe.forEach(t),HOe=i(y),Vf=n(y,"LI",{});var lEe=s(Vf);Nee=n(lEe,"STRONG",{});var ajr=s(Nee);UOe=r(ajr,"dpr"),ajr.forEach(t),JOe=r(lEe," \u2014 "),H$=n(lEe,"A",{href:!0});var njr=s(H$);YOe=r(njr,"DPRConfig"),njr.forEach(t),KOe=r(lEe," (DPR model)"),lEe.forEach(t),ZOe=i(y),Xf=n(y,"LI",{});var iEe=s(Xf);jee=n(iEe,"STRONG",{});var sjr=s(jee);eVe=r(sjr,"dpt"),sjr.forEach(t),oVe=r(iEe," \u2014 "),U$=n(iEe,"A",{href:!0});var ljr=s(U$);rVe=r(ljr,"DPTConfig"),ljr.forEach(t),tVe=r(iEe," (DPT model)"),iEe.forEach(t),aVe=i(y),zf=n(y,"LI",{});var dEe=s(zf);Dee=n(dEe,"STRONG",{});var ijr=s(Dee);nVe=r(ijr,"electra"),ijr.forEach(t),sVe=r(dEe," \u2014 "),J$=n(dEe,"A",{href:!0});var djr=s(J$);lVe=r(djr,"ElectraConfig"),djr.forEach(t),iVe=r(dEe," (ELECTRA model)"),dEe.forEach(t),dVe=i(y),Qf=n(y,"LI",{});var cEe=s(Qf);Gee=n(cEe,"STRONG",{});var cjr=s(Gee);cVe=r(cjr,"encoder-decoder"),cjr.forEach(t),fVe=r(cEe," \u2014 "),Y$=n(cEe,"A",{href:!0});var fjr=s(Y$);mVe=r(fjr,"EncoderDecoderConfig"),fjr.forEach(t),gVe=r(cEe," (Encoder decoder model)"),cEe.forEach(t),hVe=i(y),Wf=n(y,"LI",{});var fEe=s(Wf);Oee=n(fEe,"STRONG",{});var mjr=s(Oee);pVe=r(mjr,"flaubert"),mjr.forEach(t),uVe=r(fEe," \u2014 "),K$=n(fEe,"A",{href:!0});var gjr=s(K$);_Ve=r(gjr,"FlaubertConfig"),gjr.forEach(t),bVe=r(fEe," (FlauBERT model)"),fEe.forEach(t),vVe=i(y),Hf=n(y,"LI",{});var mEe=s(Hf);Vee=n(mEe,"STRONG",{});var hjr=s(Vee);FVe=r(hjr,"flava"),hjr.forEach(t),TVe=r(mEe," \u2014 "),Z$=n(mEe,"A",{href:!0});var pjr=s(Z$);MVe=r(pjr,"FlavaConfig"),pjr.forEach(t),EVe=r(mEe," (Flava model)"),mEe.forEach(t),CVe=i(y),Uf=n(y,"LI",{});var gEe=s(Uf);Xee=n(gEe,"STRONG",{});var ujr=s(Xee);wVe=r(ujr,"fnet"),ujr.forEach(t),AVe=r(gEe," \u2014 "),ek=n(gEe,"A",{href:!0});var _jr=s(ek);yVe=r(_jr,"FNetConfig"),_jr.forEach(t),LVe=r(gEe," (FNet model)"),gEe.forEach(t),xVe=i(y),Jf=n(y,"LI",{});var hEe=s(Jf);zee=n(hEe,"STRONG",{});var bjr=s(zee);$Ve=r(bjr,"fsmt"),bjr.forEach(t),kVe=r(hEe," \u2014 "),ok=n(hEe,"A",{href:!0});var vjr=s(ok);SVe=r(vjr,"FSMTConfig"),vjr.forEach(t),RVe=r(hEe," (FairSeq Machine-Translation model)"),hEe.forEach(t),BVe=i(y),Yf=n(y,"LI",{});var pEe=s(Yf);Qee=n(pEe,"STRONG",{});var Fjr=s(Qee);PVe=r(Fjr,"funnel"),Fjr.forEach(t),IVe=r(pEe," \u2014 "),rk=n(pEe,"A",{href:!0});var Tjr=s(rk);qVe=r(Tjr,"FunnelConfig"),Tjr.forEach(t),NVe=r(pEe," (Funnel Transformer model)"),pEe.forEach(t),jVe=i(y),Kf=n(y,"LI",{});var uEe=s(Kf);Wee=n(uEe,"STRONG",{});var Mjr=s(Wee);DVe=r(Mjr,"glpn"),Mjr.forEach(t),GVe=r(uEe," \u2014 "),tk=n(uEe,"A",{href:!0});var Ejr=s(tk);OVe=r(Ejr,"GLPNConfig"),Ejr.forEach(t),VVe=r(uEe," (GLPN model)"),uEe.forEach(t),XVe=i(y),Zf=n(y,"LI",{});var _Ee=s(Zf);Hee=n(_Ee,"STRONG",{});var Cjr=s(Hee);zVe=r(Cjr,"gpt2"),Cjr.forEach(t),QVe=r(_Ee," \u2014 "),ak=n(_Ee,"A",{href:!0});var wjr=s(ak);WVe=r(wjr,"GPT2Config"),wjr.forEach(t),HVe=r(_Ee," (OpenAI GPT-2 model)"),_Ee.forEach(t),UVe=i(y),em=n(y,"LI",{});var bEe=s(em);Uee=n(bEe,"STRONG",{});var Ajr=s(Uee);JVe=r(Ajr,"gpt_neo"),Ajr.forEach(t),YVe=r(bEe," \u2014 "),nk=n(bEe,"A",{href:!0});var yjr=s(nk);KVe=r(yjr,"GPTNeoConfig"),yjr.forEach(t),ZVe=r(bEe," (GPT Neo model)"),bEe.forEach(t),eXe=i(y),om=n(y,"LI",{});var vEe=s(om);Jee=n(vEe,"STRONG",{});var Ljr=s(Jee);oXe=r(Ljr,"gptj"),Ljr.forEach(t),rXe=r(vEe," \u2014 "),sk=n(vEe,"A",{href:!0});var xjr=s(sk);tXe=r(xjr,"GPTJConfig"),xjr.forEach(t),aXe=r(vEe," (GPT-J model)"),vEe.forEach(t),nXe=i(y),rm=n(y,"LI",{});var FEe=s(rm);Yee=n(FEe,"STRONG",{});var $jr=s(Yee);sXe=r($jr,"hubert"),$jr.forEach(t),lXe=r(FEe," \u2014 "),lk=n(FEe,"A",{href:!0});var kjr=s(lk);iXe=r(kjr,"HubertConfig"),kjr.forEach(t),dXe=r(FEe," (Hubert model)"),FEe.forEach(t),cXe=i(y),tm=n(y,"LI",{});var TEe=s(tm);Kee=n(TEe,"STRONG",{});var Sjr=s(Kee);fXe=r(Sjr,"ibert"),Sjr.forEach(t),mXe=r(TEe," \u2014 "),ik=n(TEe,"A",{href:!0});var Rjr=s(ik);gXe=r(Rjr,"IBertConfig"),Rjr.forEach(t),hXe=r(TEe," (I-BERT model)"),TEe.forEach(t),pXe=i(y),am=n(y,"LI",{});var MEe=s(am);Zee=n(MEe,"STRONG",{});var Bjr=s(Zee);uXe=r(Bjr,"imagegpt"),Bjr.forEach(t),_Xe=r(MEe," \u2014 "),dk=n(MEe,"A",{href:!0});var Pjr=s(dk);bXe=r(Pjr,"ImageGPTConfig"),Pjr.forEach(t),vXe=r(MEe," (ImageGPT model)"),MEe.forEach(t),FXe=i(y),nm=n(y,"LI",{});var EEe=s(nm);eoe=n(EEe,"STRONG",{});var Ijr=s(eoe);TXe=r(Ijr,"layoutlm"),Ijr.forEach(t),MXe=r(EEe," \u2014 "),ck=n(EEe,"A",{href:!0});var qjr=s(ck);EXe=r(qjr,"LayoutLMConfig"),qjr.forEach(t),CXe=r(EEe," (LayoutLM model)"),EEe.forEach(t),wXe=i(y),sm=n(y,"LI",{});var CEe=s(sm);ooe=n(CEe,"STRONG",{});var Njr=s(ooe);AXe=r(Njr,"layoutlmv2"),Njr.forEach(t),yXe=r(CEe," \u2014 "),fk=n(CEe,"A",{href:!0});var jjr=s(fk);LXe=r(jjr,"LayoutLMv2Config"),jjr.forEach(t),xXe=r(CEe," (LayoutLMv2 model)"),CEe.forEach(t),$Xe=i(y),lm=n(y,"LI",{});var wEe=s(lm);roe=n(wEe,"STRONG",{});var Djr=s(roe);kXe=r(Djr,"led"),Djr.forEach(t),SXe=r(wEe," \u2014 "),mk=n(wEe,"A",{href:!0});var Gjr=s(mk);RXe=r(Gjr,"LEDConfig"),Gjr.forEach(t),BXe=r(wEe," (LED model)"),wEe.forEach(t),PXe=i(y),im=n(y,"LI",{});var AEe=s(im);toe=n(AEe,"STRONG",{});var Ojr=s(toe);IXe=r(Ojr,"longformer"),Ojr.forEach(t),qXe=r(AEe," \u2014 "),gk=n(AEe,"A",{href:!0});var Vjr=s(gk);NXe=r(Vjr,"LongformerConfig"),Vjr.forEach(t),jXe=r(AEe," (Longformer model)"),AEe.forEach(t),DXe=i(y),dm=n(y,"LI",{});var yEe=s(dm);aoe=n(yEe,"STRONG",{});var Xjr=s(aoe);GXe=r(Xjr,"luke"),Xjr.forEach(t),OXe=r(yEe," \u2014 "),hk=n(yEe,"A",{href:!0});var zjr=s(hk);VXe=r(zjr,"LukeConfig"),zjr.forEach(t),XXe=r(yEe," (LUKE model)"),yEe.forEach(t),zXe=i(y),cm=n(y,"LI",{});var LEe=s(cm);noe=n(LEe,"STRONG",{});var Qjr=s(noe);QXe=r(Qjr,"lxmert"),Qjr.forEach(t),WXe=r(LEe," \u2014 "),pk=n(LEe,"A",{href:!0});var Wjr=s(pk);HXe=r(Wjr,"LxmertConfig"),Wjr.forEach(t),UXe=r(LEe," (LXMERT model)"),LEe.forEach(t),JXe=i(y),fm=n(y,"LI",{});var xEe=s(fm);soe=n(xEe,"STRONG",{});var Hjr=s(soe);YXe=r(Hjr,"m2m_100"),Hjr.forEach(t),KXe=r(xEe," \u2014 "),uk=n(xEe,"A",{href:!0});var Ujr=s(uk);ZXe=r(Ujr,"M2M100Config"),Ujr.forEach(t),eze=r(xEe," (M2M100 model)"),xEe.forEach(t),oze=i(y),mm=n(y,"LI",{});var $Ee=s(mm);loe=n($Ee,"STRONG",{});var Jjr=s(loe);rze=r(Jjr,"marian"),Jjr.forEach(t),tze=r($Ee," \u2014 "),_k=n($Ee,"A",{href:!0});var Yjr=s(_k);aze=r(Yjr,"MarianConfig"),Yjr.forEach(t),nze=r($Ee," (Marian model)"),$Ee.forEach(t),sze=i(y),gm=n(y,"LI",{});var kEe=s(gm);ioe=n(kEe,"STRONG",{});var Kjr=s(ioe);lze=r(Kjr,"maskformer"),Kjr.forEach(t),ize=r(kEe," \u2014 "),bk=n(kEe,"A",{href:!0});var Zjr=s(bk);dze=r(Zjr,"MaskFormerConfig"),Zjr.forEach(t),cze=r(kEe," (MaskFormer model)"),kEe.forEach(t),fze=i(y),hm=n(y,"LI",{});var SEe=s(hm);doe=n(SEe,"STRONG",{});var eDr=s(doe);mze=r(eDr,"mbart"),eDr.forEach(t),gze=r(SEe," \u2014 "),vk=n(SEe,"A",{href:!0});var oDr=s(vk);hze=r(oDr,"MBartConfig"),oDr.forEach(t),pze=r(SEe," (mBART model)"),SEe.forEach(t),uze=i(y),pm=n(y,"LI",{});var REe=s(pm);coe=n(REe,"STRONG",{});var rDr=s(coe);_ze=r(rDr,"megatron-bert"),rDr.forEach(t),bze=r(REe," \u2014 "),Fk=n(REe,"A",{href:!0});var tDr=s(Fk);vze=r(tDr,"MegatronBertConfig"),tDr.forEach(t),Fze=r(REe," (MegatronBert model)"),REe.forEach(t),Tze=i(y),um=n(y,"LI",{});var BEe=s(um);foe=n(BEe,"STRONG",{});var aDr=s(foe);Mze=r(aDr,"mobilebert"),aDr.forEach(t),Eze=r(BEe," \u2014 "),Tk=n(BEe,"A",{href:!0});var nDr=s(Tk);Cze=r(nDr,"MobileBertConfig"),nDr.forEach(t),wze=r(BEe," (MobileBERT model)"),BEe.forEach(t),Aze=i(y),_m=n(y,"LI",{});var PEe=s(_m);moe=n(PEe,"STRONG",{});var sDr=s(moe);yze=r(sDr,"mpnet"),sDr.forEach(t),Lze=r(PEe," \u2014 "),Mk=n(PEe,"A",{href:!0});var lDr=s(Mk);xze=r(lDr,"MPNetConfig"),lDr.forEach(t),$ze=r(PEe," (MPNet model)"),PEe.forEach(t),kze=i(y),bm=n(y,"LI",{});var IEe=s(bm);goe=n(IEe,"STRONG",{});var iDr=s(goe);Sze=r(iDr,"mt5"),iDr.forEach(t),Rze=r(IEe," \u2014 "),Ek=n(IEe,"A",{href:!0});var dDr=s(Ek);Bze=r(dDr,"MT5Config"),dDr.forEach(t),Pze=r(IEe," (mT5 model)"),IEe.forEach(t),Ize=i(y),vm=n(y,"LI",{});var qEe=s(vm);hoe=n(qEe,"STRONG",{});var cDr=s(hoe);qze=r(cDr,"nystromformer"),cDr.forEach(t),Nze=r(qEe," \u2014 "),Ck=n(qEe,"A",{href:!0});var fDr=s(Ck);jze=r(fDr,"NystromformerConfig"),fDr.forEach(t),Dze=r(qEe," (Nystromformer model)"),qEe.forEach(t),Gze=i(y),Fm=n(y,"LI",{});var NEe=s(Fm);poe=n(NEe,"STRONG",{});var mDr=s(poe);Oze=r(mDr,"openai-gpt"),mDr.forEach(t),Vze=r(NEe," \u2014 "),wk=n(NEe,"A",{href:!0});var gDr=s(wk);Xze=r(gDr,"OpenAIGPTConfig"),gDr.forEach(t),zze=r(NEe," (OpenAI GPT model)"),NEe.forEach(t),Qze=i(y),Tm=n(y,"LI",{});var jEe=s(Tm);uoe=n(jEe,"STRONG",{});var hDr=s(uoe);Wze=r(hDr,"opt"),hDr.forEach(t),Hze=r(jEe," \u2014 "),Ak=n(jEe,"A",{href:!0});var pDr=s(Ak);Uze=r(pDr,"OPTConfig"),pDr.forEach(t),Jze=r(jEe," (OPT model)"),jEe.forEach(t),Yze=i(y),Mm=n(y,"LI",{});var DEe=s(Mm);_oe=n(DEe,"STRONG",{});var uDr=s(_oe);Kze=r(uDr,"pegasus"),uDr.forEach(t),Zze=r(DEe," \u2014 "),yk=n(DEe,"A",{href:!0});var _Dr=s(yk);eQe=r(_Dr,"PegasusConfig"),_Dr.forEach(t),oQe=r(DEe," (Pegasus model)"),DEe.forEach(t),rQe=i(y),Em=n(y,"LI",{});var GEe=s(Em);boe=n(GEe,"STRONG",{});var bDr=s(boe);tQe=r(bDr,"perceiver"),bDr.forEach(t),aQe=r(GEe," \u2014 "),Lk=n(GEe,"A",{href:!0});var vDr=s(Lk);nQe=r(vDr,"PerceiverConfig"),vDr.forEach(t),sQe=r(GEe," (Perceiver model)"),GEe.forEach(t),lQe=i(y),Cm=n(y,"LI",{});var OEe=s(Cm);voe=n(OEe,"STRONG",{});var FDr=s(voe);iQe=r(FDr,"plbart"),FDr.forEach(t),dQe=r(OEe," \u2014 "),xk=n(OEe,"A",{href:!0});var TDr=s(xk);cQe=r(TDr,"PLBartConfig"),TDr.forEach(t),fQe=r(OEe," (PLBart model)"),OEe.forEach(t),mQe=i(y),wm=n(y,"LI",{});var VEe=s(wm);Foe=n(VEe,"STRONG",{});var MDr=s(Foe);gQe=r(MDr,"poolformer"),MDr.forEach(t),hQe=r(VEe," \u2014 "),$k=n(VEe,"A",{href:!0});var EDr=s($k);pQe=r(EDr,"PoolFormerConfig"),EDr.forEach(t),uQe=r(VEe," (PoolFormer model)"),VEe.forEach(t),_Qe=i(y),Am=n(y,"LI",{});var XEe=s(Am);Toe=n(XEe,"STRONG",{});var CDr=s(Toe);bQe=r(CDr,"prophetnet"),CDr.forEach(t),vQe=r(XEe," \u2014 "),kk=n(XEe,"A",{href:!0});var wDr=s(kk);FQe=r(wDr,"ProphetNetConfig"),wDr.forEach(t),TQe=r(XEe," (ProphetNet model)"),XEe.forEach(t),MQe=i(y),ym=n(y,"LI",{});var zEe=s(ym);Moe=n(zEe,"STRONG",{});var ADr=s(Moe);EQe=r(ADr,"qdqbert"),ADr.forEach(t),CQe=r(zEe," \u2014 "),Sk=n(zEe,"A",{href:!0});var yDr=s(Sk);wQe=r(yDr,"QDQBertConfig"),yDr.forEach(t),AQe=r(zEe," (QDQBert model)"),zEe.forEach(t),yQe=i(y),Lm=n(y,"LI",{});var QEe=s(Lm);Eoe=n(QEe,"STRONG",{});var LDr=s(Eoe);LQe=r(LDr,"rag"),LDr.forEach(t),xQe=r(QEe," \u2014 "),Rk=n(QEe,"A",{href:!0});var xDr=s(Rk);$Qe=r(xDr,"RagConfig"),xDr.forEach(t),kQe=r(QEe," (RAG model)"),QEe.forEach(t),SQe=i(y),xm=n(y,"LI",{});var WEe=s(xm);Coe=n(WEe,"STRONG",{});var $Dr=s(Coe);RQe=r($Dr,"realm"),$Dr.forEach(t),BQe=r(WEe," \u2014 "),Bk=n(WEe,"A",{href:!0});var kDr=s(Bk);PQe=r(kDr,"RealmConfig"),kDr.forEach(t),IQe=r(WEe," (Realm model)"),WEe.forEach(t),qQe=i(y),$m=n(y,"LI",{});var HEe=s($m);woe=n(HEe,"STRONG",{});var SDr=s(woe);NQe=r(SDr,"reformer"),SDr.forEach(t),jQe=r(HEe," \u2014 "),Pk=n(HEe,"A",{href:!0});var RDr=s(Pk);DQe=r(RDr,"ReformerConfig"),RDr.forEach(t),GQe=r(HEe," (Reformer model)"),HEe.forEach(t),OQe=i(y),km=n(y,"LI",{});var UEe=s(km);Aoe=n(UEe,"STRONG",{});var BDr=s(Aoe);VQe=r(BDr,"regnet"),BDr.forEach(t),XQe=r(UEe," \u2014 "),Ik=n(UEe,"A",{href:!0});var PDr=s(Ik);zQe=r(PDr,"RegNetConfig"),PDr.forEach(t),QQe=r(UEe," (RegNet model)"),UEe.forEach(t),WQe=i(y),Sm=n(y,"LI",{});var JEe=s(Sm);yoe=n(JEe,"STRONG",{});var IDr=s(yoe);HQe=r(IDr,"rembert"),IDr.forEach(t),UQe=r(JEe," \u2014 "),qk=n(JEe,"A",{href:!0});var qDr=s(qk);JQe=r(qDr,"RemBertConfig"),qDr.forEach(t),YQe=r(JEe," (RemBERT model)"),JEe.forEach(t),KQe=i(y),Rm=n(y,"LI",{});var YEe=s(Rm);Loe=n(YEe,"STRONG",{});var NDr=s(Loe);ZQe=r(NDr,"resnet"),NDr.forEach(t),eWe=r(YEe," \u2014 "),Nk=n(YEe,"A",{href:!0});var jDr=s(Nk);oWe=r(jDr,"ResNetConfig"),jDr.forEach(t),rWe=r(YEe," (ResNet model)"),YEe.forEach(t),tWe=i(y),Bm=n(y,"LI",{});var KEe=s(Bm);xoe=n(KEe,"STRONG",{});var DDr=s(xoe);aWe=r(DDr,"retribert"),DDr.forEach(t),nWe=r(KEe," \u2014 "),jk=n(KEe,"A",{href:!0});var GDr=s(jk);sWe=r(GDr,"RetriBertConfig"),GDr.forEach(t),lWe=r(KEe," (RetriBERT model)"),KEe.forEach(t),iWe=i(y),Pm=n(y,"LI",{});var ZEe=s(Pm);$oe=n(ZEe,"STRONG",{});var ODr=s($oe);dWe=r(ODr,"roberta"),ODr.forEach(t),cWe=r(ZEe," \u2014 "),Dk=n(ZEe,"A",{href:!0});var VDr=s(Dk);fWe=r(VDr,"RobertaConfig"),VDr.forEach(t),mWe=r(ZEe," (RoBERTa model)"),ZEe.forEach(t),gWe=i(y),Im=n(y,"LI",{});var e5e=s(Im);koe=n(e5e,"STRONG",{});var XDr=s(koe);hWe=r(XDr,"roformer"),XDr.forEach(t),pWe=r(e5e," \u2014 "),Gk=n(e5e,"A",{href:!0});var zDr=s(Gk);uWe=r(zDr,"RoFormerConfig"),zDr.forEach(t),_We=r(e5e," (RoFormer model)"),e5e.forEach(t),bWe=i(y),qm=n(y,"LI",{});var o5e=s(qm);Soe=n(o5e,"STRONG",{});var QDr=s(Soe);vWe=r(QDr,"segformer"),QDr.forEach(t),FWe=r(o5e," \u2014 "),Ok=n(o5e,"A",{href:!0});var WDr=s(Ok);TWe=r(WDr,"SegformerConfig"),WDr.forEach(t),MWe=r(o5e," (SegFormer model)"),o5e.forEach(t),EWe=i(y),Nm=n(y,"LI",{});var r5e=s(Nm);Roe=n(r5e,"STRONG",{});var HDr=s(Roe);CWe=r(HDr,"sew"),HDr.forEach(t),wWe=r(r5e," \u2014 "),Vk=n(r5e,"A",{href:!0});var UDr=s(Vk);AWe=r(UDr,"SEWConfig"),UDr.forEach(t),yWe=r(r5e," (SEW model)"),r5e.forEach(t),LWe=i(y),jm=n(y,"LI",{});var t5e=s(jm);Boe=n(t5e,"STRONG",{});var JDr=s(Boe);xWe=r(JDr,"sew-d"),JDr.forEach(t),$We=r(t5e," \u2014 "),Xk=n(t5e,"A",{href:!0});var YDr=s(Xk);kWe=r(YDr,"SEWDConfig"),YDr.forEach(t),SWe=r(t5e," (SEW-D model)"),t5e.forEach(t),RWe=i(y),Dm=n(y,"LI",{});var a5e=s(Dm);Poe=n(a5e,"STRONG",{});var KDr=s(Poe);BWe=r(KDr,"speech-encoder-decoder"),KDr.forEach(t),PWe=r(a5e," \u2014 "),zk=n(a5e,"A",{href:!0});var ZDr=s(zk);IWe=r(ZDr,"SpeechEncoderDecoderConfig"),ZDr.forEach(t),qWe=r(a5e," (Speech Encoder decoder model)"),a5e.forEach(t),NWe=i(y),Gm=n(y,"LI",{});var n5e=s(Gm);Ioe=n(n5e,"STRONG",{});var eGr=s(Ioe);jWe=r(eGr,"speech_to_text"),eGr.forEach(t),DWe=r(n5e," \u2014 "),Qk=n(n5e,"A",{href:!0});var oGr=s(Qk);GWe=r(oGr,"Speech2TextConfig"),oGr.forEach(t),OWe=r(n5e," (Speech2Text model)"),n5e.forEach(t),VWe=i(y),Om=n(y,"LI",{});var s5e=s(Om);qoe=n(s5e,"STRONG",{});var rGr=s(qoe);XWe=r(rGr,"speech_to_text_2"),rGr.forEach(t),zWe=r(s5e," \u2014 "),Wk=n(s5e,"A",{href:!0});var tGr=s(Wk);QWe=r(tGr,"Speech2Text2Config"),tGr.forEach(t),WWe=r(s5e," (Speech2Text2 model)"),s5e.forEach(t),HWe=i(y),Vm=n(y,"LI",{});var l5e=s(Vm);Noe=n(l5e,"STRONG",{});var aGr=s(Noe);UWe=r(aGr,"splinter"),aGr.forEach(t),JWe=r(l5e," \u2014 "),Hk=n(l5e,"A",{href:!0});var nGr=s(Hk);YWe=r(nGr,"SplinterConfig"),nGr.forEach(t),KWe=r(l5e," (Splinter model)"),l5e.forEach(t),ZWe=i(y),Xm=n(y,"LI",{});var i5e=s(Xm);joe=n(i5e,"STRONG",{});var sGr=s(joe);eHe=r(sGr,"squeezebert"),sGr.forEach(t),oHe=r(i5e," \u2014 "),Uk=n(i5e,"A",{href:!0});var lGr=s(Uk);rHe=r(lGr,"SqueezeBertConfig"),lGr.forEach(t),tHe=r(i5e," (SqueezeBERT model)"),i5e.forEach(t),aHe=i(y),zm=n(y,"LI",{});var d5e=s(zm);Doe=n(d5e,"STRONG",{});var iGr=s(Doe);nHe=r(iGr,"swin"),iGr.forEach(t),sHe=r(d5e," \u2014 "),Jk=n(d5e,"A",{href:!0});var dGr=s(Jk);lHe=r(dGr,"SwinConfig"),dGr.forEach(t),iHe=r(d5e," (Swin model)"),d5e.forEach(t),dHe=i(y),Qm=n(y,"LI",{});var c5e=s(Qm);Goe=n(c5e,"STRONG",{});var cGr=s(Goe);cHe=r(cGr,"t5"),cGr.forEach(t),fHe=r(c5e," \u2014 "),Yk=n(c5e,"A",{href:!0});var fGr=s(Yk);mHe=r(fGr,"T5Config"),fGr.forEach(t),gHe=r(c5e," (T5 model)"),c5e.forEach(t),hHe=i(y),Wm=n(y,"LI",{});var f5e=s(Wm);Ooe=n(f5e,"STRONG",{});var mGr=s(Ooe);pHe=r(mGr,"tapas"),mGr.forEach(t),uHe=r(f5e," \u2014 "),Kk=n(f5e,"A",{href:!0});var gGr=s(Kk);_He=r(gGr,"TapasConfig"),gGr.forEach(t),bHe=r(f5e," (TAPAS model)"),f5e.forEach(t),vHe=i(y),Hm=n(y,"LI",{});var m5e=s(Hm);Voe=n(m5e,"STRONG",{});var hGr=s(Voe);FHe=r(hGr,"tapex"),hGr.forEach(t),THe=r(m5e," \u2014 "),Zk=n(m5e,"A",{href:!0});var pGr=s(Zk);MHe=r(pGr,"BartConfig"),pGr.forEach(t),EHe=r(m5e," (TAPEX model)"),m5e.forEach(t),CHe=i(y),Um=n(y,"LI",{});var g5e=s(Um);Xoe=n(g5e,"STRONG",{});var uGr=s(Xoe);wHe=r(uGr,"transfo-xl"),uGr.forEach(t),AHe=r(g5e," \u2014 "),eS=n(g5e,"A",{href:!0});var _Gr=s(eS);yHe=r(_Gr,"TransfoXLConfig"),_Gr.forEach(t),LHe=r(g5e," (Transformer-XL model)"),g5e.forEach(t),xHe=i(y),Jm=n(y,"LI",{});var h5e=s(Jm);zoe=n(h5e,"STRONG",{});var bGr=s(zoe);$He=r(bGr,"trocr"),bGr.forEach(t),kHe=r(h5e," \u2014 "),oS=n(h5e,"A",{href:!0});var vGr=s(oS);SHe=r(vGr,"TrOCRConfig"),vGr.forEach(t),RHe=r(h5e," (TrOCR model)"),h5e.forEach(t),BHe=i(y),Ym=n(y,"LI",{});var p5e=s(Ym);Qoe=n(p5e,"STRONG",{});var FGr=s(Qoe);PHe=r(FGr,"unispeech"),FGr.forEach(t),IHe=r(p5e," \u2014 "),rS=n(p5e,"A",{href:!0});var TGr=s(rS);qHe=r(TGr,"UniSpeechConfig"),TGr.forEach(t),NHe=r(p5e," (UniSpeech model)"),p5e.forEach(t),jHe=i(y),Km=n(y,"LI",{});var u5e=s(Km);Woe=n(u5e,"STRONG",{});var MGr=s(Woe);DHe=r(MGr,"unispeech-sat"),MGr.forEach(t),GHe=r(u5e," \u2014 "),tS=n(u5e,"A",{href:!0});var EGr=s(tS);OHe=r(EGr,"UniSpeechSatConfig"),EGr.forEach(t),VHe=r(u5e," (UniSpeechSat model)"),u5e.forEach(t),XHe=i(y),Zm=n(y,"LI",{});var _5e=s(Zm);Hoe=n(_5e,"STRONG",{});var CGr=s(Hoe);zHe=r(CGr,"van"),CGr.forEach(t),QHe=r(_5e," \u2014 "),aS=n(_5e,"A",{href:!0});var wGr=s(aS);WHe=r(wGr,"VanConfig"),wGr.forEach(t),HHe=r(_5e," (VAN model)"),_5e.forEach(t),UHe=i(y),eg=n(y,"LI",{});var b5e=s(eg);Uoe=n(b5e,"STRONG",{});var AGr=s(Uoe);JHe=r(AGr,"vilt"),AGr.forEach(t),YHe=r(b5e," \u2014 "),nS=n(b5e,"A",{href:!0});var yGr=s(nS);KHe=r(yGr,"ViltConfig"),yGr.forEach(t),ZHe=r(b5e," (ViLT model)"),b5e.forEach(t),eUe=i(y),og=n(y,"LI",{});var v5e=s(og);Joe=n(v5e,"STRONG",{});var LGr=s(Joe);oUe=r(LGr,"vision-encoder-decoder"),LGr.forEach(t),rUe=r(v5e," \u2014 "),sS=n(v5e,"A",{href:!0});var xGr=s(sS);tUe=r(xGr,"VisionEncoderDecoderConfig"),xGr.forEach(t),aUe=r(v5e," (Vision Encoder decoder model)"),v5e.forEach(t),nUe=i(y),rg=n(y,"LI",{});var F5e=s(rg);Yoe=n(F5e,"STRONG",{});var $Gr=s(Yoe);sUe=r($Gr,"vision-text-dual-encoder"),$Gr.forEach(t),lUe=r(F5e," \u2014 "),lS=n(F5e,"A",{href:!0});var kGr=s(lS);iUe=r(kGr,"VisionTextDualEncoderConfig"),kGr.forEach(t),dUe=r(F5e," (VisionTextDualEncoder model)"),F5e.forEach(t),cUe=i(y),tg=n(y,"LI",{});var T5e=s(tg);Koe=n(T5e,"STRONG",{});var SGr=s(Koe);fUe=r(SGr,"visual_bert"),SGr.forEach(t),mUe=r(T5e," \u2014 "),iS=n(T5e,"A",{href:!0});var RGr=s(iS);gUe=r(RGr,"VisualBertConfig"),RGr.forEach(t),hUe=r(T5e," (VisualBert model)"),T5e.forEach(t),pUe=i(y),ag=n(y,"LI",{});var M5e=s(ag);Zoe=n(M5e,"STRONG",{});var BGr=s(Zoe);uUe=r(BGr,"vit"),BGr.forEach(t),_Ue=r(M5e," \u2014 "),dS=n(M5e,"A",{href:!0});var PGr=s(dS);bUe=r(PGr,"ViTConfig"),PGr.forEach(t),vUe=r(M5e," (ViT model)"),M5e.forEach(t),FUe=i(y),ng=n(y,"LI",{});var E5e=s(ng);ere=n(E5e,"STRONG",{});var IGr=s(ere);TUe=r(IGr,"vit_mae"),IGr.forEach(t),MUe=r(E5e," \u2014 "),cS=n(E5e,"A",{href:!0});var qGr=s(cS);EUe=r(qGr,"ViTMAEConfig"),qGr.forEach(t),CUe=r(E5e," (ViTMAE model)"),E5e.forEach(t),wUe=i(y),sg=n(y,"LI",{});var C5e=s(sg);ore=n(C5e,"STRONG",{});var NGr=s(ore);AUe=r(NGr,"wav2vec2"),NGr.forEach(t),yUe=r(C5e," \u2014 "),fS=n(C5e,"A",{href:!0});var jGr=s(fS);LUe=r(jGr,"Wav2Vec2Config"),jGr.forEach(t),xUe=r(C5e," (Wav2Vec2 model)"),C5e.forEach(t),$Ue=i(y),lg=n(y,"LI",{});var w5e=s(lg);rre=n(w5e,"STRONG",{});var DGr=s(rre);kUe=r(DGr,"wavlm"),DGr.forEach(t),SUe=r(w5e," \u2014 "),mS=n(w5e,"A",{href:!0});var GGr=s(mS);RUe=r(GGr,"WavLMConfig"),GGr.forEach(t),BUe=r(w5e," (WavLM model)"),w5e.forEach(t),PUe=i(y),ig=n(y,"LI",{});var A5e=s(ig);tre=n(A5e,"STRONG",{});var OGr=s(tre);IUe=r(OGr,"xglm"),OGr.forEach(t),qUe=r(A5e," \u2014 "),gS=n(A5e,"A",{href:!0});var VGr=s(gS);NUe=r(VGr,"XGLMConfig"),VGr.forEach(t),jUe=r(A5e," (XGLM model)"),A5e.forEach(t),DUe=i(y),dg=n(y,"LI",{});var y5e=s(dg);are=n(y5e,"STRONG",{});var XGr=s(are);GUe=r(XGr,"xlm"),XGr.forEach(t),OUe=r(y5e," \u2014 "),hS=n(y5e,"A",{href:!0});var zGr=s(hS);VUe=r(zGr,"XLMConfig"),zGr.forEach(t),XUe=r(y5e," (XLM model)"),y5e.forEach(t),zUe=i(y),cg=n(y,"LI",{});var L5e=s(cg);nre=n(L5e,"STRONG",{});var QGr=s(nre);QUe=r(QGr,"xlm-prophetnet"),QGr.forEach(t),WUe=r(L5e," \u2014 "),pS=n(L5e,"A",{href:!0});var WGr=s(pS);HUe=r(WGr,"XLMProphetNetConfig"),WGr.forEach(t),UUe=r(L5e," (XLMProphetNet model)"),L5e.forEach(t),JUe=i(y),fg=n(y,"LI",{});var x5e=s(fg);sre=n(x5e,"STRONG",{});var HGr=s(sre);YUe=r(HGr,"xlm-roberta"),HGr.forEach(t),KUe=r(x5e," \u2014 "),uS=n(x5e,"A",{href:!0});var UGr=s(uS);ZUe=r(UGr,"XLMRobertaConfig"),UGr.forEach(t),eJe=r(x5e," (XLM-RoBERTa model)"),x5e.forEach(t),oJe=i(y),mg=n(y,"LI",{});var $5e=s(mg);lre=n($5e,"STRONG",{});var JGr=s(lre);rJe=r(JGr,"xlm-roberta-xl"),JGr.forEach(t),tJe=r($5e," \u2014 "),_S=n($5e,"A",{href:!0});var YGr=s(_S);aJe=r(YGr,"XLMRobertaXLConfig"),YGr.forEach(t),nJe=r($5e," (XLM-RoBERTa-XL model)"),$5e.forEach(t),sJe=i(y),gg=n(y,"LI",{});var k5e=s(gg);ire=n(k5e,"STRONG",{});var KGr=s(ire);lJe=r(KGr,"xlnet"),KGr.forEach(t),iJe=r(k5e," \u2014 "),bS=n(k5e,"A",{href:!0});var ZGr=s(bS);dJe=r(ZGr,"XLNetConfig"),ZGr.forEach(t),cJe=r(k5e," (XLNet model)"),k5e.forEach(t),fJe=i(y),hg=n(y,"LI",{});var S5e=s(hg);dre=n(S5e,"STRONG",{});var eOr=s(dre);mJe=r(eOr,"yolos"),eOr.forEach(t),gJe=r(S5e," \u2014 "),vS=n(S5e,"A",{href:!0});var oOr=s(vS);hJe=r(oOr,"YolosConfig"),oOr.forEach(t),pJe=r(S5e," (YOLOS model)"),S5e.forEach(t),uJe=i(y),pg=n(y,"LI",{});var R5e=s(pg);cre=n(R5e,"STRONG",{});var rOr=s(cre);_Je=r(rOr,"yoso"),rOr.forEach(t),bJe=r(R5e," \u2014 "),FS=n(R5e,"A",{href:!0});var tOr=s(FS);vJe=r(tOr,"YosoConfig"),tOr.forEach(t),FJe=r(R5e," (YOSO model)"),R5e.forEach(t),y.forEach(t),TJe=i(Zr),T(ug.$$.fragment,Zr),Zr.forEach(t),MJe=i(Kr),_g=n(Kr,"DIV",{class:!0});var oNe=s(_g);T(lA.$$.fragment,oNe),EJe=i(oNe),fre=n(oNe,"P",{});var aOr=s(fre);CJe=r(aOr,"Register a new configuration for this class."),aOr.forEach(t),oNe.forEach(t),Kr.forEach(t),aIe=i(f),bi=n(f,"H2",{class:!0});var rNe=s(bi);bg=n(rNe,"A",{id:!0,class:!0,href:!0});var nOr=s(bg);mre=n(nOr,"SPAN",{});var sOr=s(mre);T(iA.$$.fragment,sOr),sOr.forEach(t),nOr.forEach(t),wJe=i(rNe),gre=n(rNe,"SPAN",{});var lOr=s(gre);AJe=r(lOr,"AutoTokenizer"),lOr.forEach(t),rNe.forEach(t),nIe=i(f),wo=n(f,"DIV",{class:!0});var Is=s(wo);T(dA.$$.fragment,Is),yJe=i(Is),cA=n(Is,"P",{});var tNe=s(cA);LJe=r(tNe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),TS=n(tNe,"A",{href:!0});var iOr=s(TS);xJe=r(iOr,"AutoTokenizer.from_pretrained()"),iOr.forEach(t),$Je=r(tNe," class method."),tNe.forEach(t),kJe=i(Is),fA=n(Is,"P",{});var aNe=s(fA);SJe=r(aNe,"This class cannot be instantiated directly using "),hre=n(aNe,"CODE",{});var dOr=s(hre);RJe=r(dOr,"__init__()"),dOr.forEach(t),BJe=r(aNe," (throws an error)."),aNe.forEach(t),PJe=i(Is),Cr=n(Is,"DIV",{class:!0});var qs=s(Cr);T(mA.$$.fragment,qs),IJe=i(qs),pre=n(qs,"P",{});var cOr=s(pre);qJe=r(cOr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),cOr.forEach(t),NJe=i(qs),Ca=n(qs,"P",{});var e3=s(Ca);jJe=r(e3,"The tokenizer class to instantiate is selected based on the "),ure=n(e3,"CODE",{});var fOr=s(ure);DJe=r(fOr,"model_type"),fOr.forEach(t),GJe=r(e3,` property of the config object (either
passed as an argument or loaded from `),_re=n(e3,"CODE",{});var mOr=s(_re);OJe=r(mOr,"pretrained_model_name_or_path"),mOr.forEach(t),VJe=r(e3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bre=n(e3,"CODE",{});var gOr=s(bre);XJe=r(gOr,"pretrained_model_name_or_path"),gOr.forEach(t),zJe=r(e3,":"),e3.forEach(t),QJe=i(qs),k=n(qs,"UL",{});var S=s(k);Sn=n(S,"LI",{});var g7=s(Sn);vre=n(g7,"STRONG",{});var hOr=s(vre);WJe=r(hOr,"albert"),hOr.forEach(t),HJe=r(g7," \u2014 "),MS=n(g7,"A",{href:!0});var pOr=s(MS);UJe=r(pOr,"AlbertTokenizer"),pOr.forEach(t),JJe=r(g7," or "),ES=n(g7,"A",{href:!0});var uOr=s(ES);YJe=r(uOr,"AlbertTokenizerFast"),uOr.forEach(t),KJe=r(g7," (ALBERT model)"),g7.forEach(t),ZJe=i(S),Rn=n(S,"LI",{});var h7=s(Rn);Fre=n(h7,"STRONG",{});var _Or=s(Fre);eYe=r(_Or,"bart"),_Or.forEach(t),oYe=r(h7," \u2014 "),CS=n(h7,"A",{href:!0});var bOr=s(CS);rYe=r(bOr,"BartTokenizer"),bOr.forEach(t),tYe=r(h7," or "),wS=n(h7,"A",{href:!0});var vOr=s(wS);aYe=r(vOr,"BartTokenizerFast"),vOr.forEach(t),nYe=r(h7," (BART model)"),h7.forEach(t),sYe=i(S),Bn=n(S,"LI",{});var p7=s(Bn);Tre=n(p7,"STRONG",{});var FOr=s(Tre);lYe=r(FOr,"barthez"),FOr.forEach(t),iYe=r(p7," \u2014 "),AS=n(p7,"A",{href:!0});var TOr=s(AS);dYe=r(TOr,"BarthezTokenizer"),TOr.forEach(t),cYe=r(p7," or "),yS=n(p7,"A",{href:!0});var MOr=s(yS);fYe=r(MOr,"BarthezTokenizerFast"),MOr.forEach(t),mYe=r(p7," (BARThez model)"),p7.forEach(t),gYe=i(S),vg=n(S,"LI",{});var B5e=s(vg);Mre=n(B5e,"STRONG",{});var EOr=s(Mre);hYe=r(EOr,"bartpho"),EOr.forEach(t),pYe=r(B5e," \u2014 "),LS=n(B5e,"A",{href:!0});var COr=s(LS);uYe=r(COr,"BartphoTokenizer"),COr.forEach(t),_Ye=r(B5e," (BARTpho model)"),B5e.forEach(t),bYe=i(S),Pn=n(S,"LI",{});var u7=s(Pn);Ere=n(u7,"STRONG",{});var wOr=s(Ere);vYe=r(wOr,"bert"),wOr.forEach(t),FYe=r(u7," \u2014 "),xS=n(u7,"A",{href:!0});var AOr=s(xS);TYe=r(AOr,"BertTokenizer"),AOr.forEach(t),MYe=r(u7," or "),$S=n(u7,"A",{href:!0});var yOr=s($S);EYe=r(yOr,"BertTokenizerFast"),yOr.forEach(t),CYe=r(u7," (BERT model)"),u7.forEach(t),wYe=i(S),Fg=n(S,"LI",{});var P5e=s(Fg);Cre=n(P5e,"STRONG",{});var LOr=s(Cre);AYe=r(LOr,"bert-generation"),LOr.forEach(t),yYe=r(P5e," \u2014 "),kS=n(P5e,"A",{href:!0});var xOr=s(kS);LYe=r(xOr,"BertGenerationTokenizer"),xOr.forEach(t),xYe=r(P5e," (Bert Generation model)"),P5e.forEach(t),$Ye=i(S),Tg=n(S,"LI",{});var I5e=s(Tg);wre=n(I5e,"STRONG",{});var $Or=s(wre);kYe=r($Or,"bert-japanese"),$Or.forEach(t),SYe=r(I5e," \u2014 "),SS=n(I5e,"A",{href:!0});var kOr=s(SS);RYe=r(kOr,"BertJapaneseTokenizer"),kOr.forEach(t),BYe=r(I5e," (BertJapanese model)"),I5e.forEach(t),PYe=i(S),Mg=n(S,"LI",{});var q5e=s(Mg);Are=n(q5e,"STRONG",{});var SOr=s(Are);IYe=r(SOr,"bertweet"),SOr.forEach(t),qYe=r(q5e," \u2014 "),RS=n(q5e,"A",{href:!0});var ROr=s(RS);NYe=r(ROr,"BertweetTokenizer"),ROr.forEach(t),jYe=r(q5e," (Bertweet model)"),q5e.forEach(t),DYe=i(S),In=n(S,"LI",{});var _7=s(In);yre=n(_7,"STRONG",{});var BOr=s(yre);GYe=r(BOr,"big_bird"),BOr.forEach(t),OYe=r(_7," \u2014 "),BS=n(_7,"A",{href:!0});var POr=s(BS);VYe=r(POr,"BigBirdTokenizer"),POr.forEach(t),XYe=r(_7," or "),PS=n(_7,"A",{href:!0});var IOr=s(PS);zYe=r(IOr,"BigBirdTokenizerFast"),IOr.forEach(t),QYe=r(_7," (BigBird model)"),_7.forEach(t),WYe=i(S),qn=n(S,"LI",{});var b7=s(qn);Lre=n(b7,"STRONG",{});var qOr=s(Lre);HYe=r(qOr,"bigbird_pegasus"),qOr.forEach(t),UYe=r(b7," \u2014 "),IS=n(b7,"A",{href:!0});var NOr=s(IS);JYe=r(NOr,"PegasusTokenizer"),NOr.forEach(t),YYe=r(b7," or "),qS=n(b7,"A",{href:!0});var jOr=s(qS);KYe=r(jOr,"PegasusTokenizerFast"),jOr.forEach(t),ZYe=r(b7," (BigBirdPegasus model)"),b7.forEach(t),eKe=i(S),Nn=n(S,"LI",{});var v7=s(Nn);xre=n(v7,"STRONG",{});var DOr=s(xre);oKe=r(DOr,"blenderbot"),DOr.forEach(t),rKe=r(v7," \u2014 "),NS=n(v7,"A",{href:!0});var GOr=s(NS);tKe=r(GOr,"BlenderbotTokenizer"),GOr.forEach(t),aKe=r(v7," or "),jS=n(v7,"A",{href:!0});var OOr=s(jS);nKe=r(OOr,"BlenderbotTokenizerFast"),OOr.forEach(t),sKe=r(v7," (Blenderbot model)"),v7.forEach(t),lKe=i(S),Eg=n(S,"LI",{});var N5e=s(Eg);$re=n(N5e,"STRONG",{});var VOr=s($re);iKe=r(VOr,"blenderbot-small"),VOr.forEach(t),dKe=r(N5e," \u2014 "),DS=n(N5e,"A",{href:!0});var XOr=s(DS);cKe=r(XOr,"BlenderbotSmallTokenizer"),XOr.forEach(t),fKe=r(N5e," (BlenderbotSmall model)"),N5e.forEach(t),mKe=i(S),Cg=n(S,"LI",{});var j5e=s(Cg);kre=n(j5e,"STRONG",{});var zOr=s(kre);gKe=r(zOr,"byt5"),zOr.forEach(t),hKe=r(j5e," \u2014 "),GS=n(j5e,"A",{href:!0});var QOr=s(GS);pKe=r(QOr,"ByT5Tokenizer"),QOr.forEach(t),uKe=r(j5e," (ByT5 model)"),j5e.forEach(t),_Ke=i(S),jn=n(S,"LI",{});var F7=s(jn);Sre=n(F7,"STRONG",{});var WOr=s(Sre);bKe=r(WOr,"camembert"),WOr.forEach(t),vKe=r(F7," \u2014 "),OS=n(F7,"A",{href:!0});var HOr=s(OS);FKe=r(HOr,"CamembertTokenizer"),HOr.forEach(t),TKe=r(F7," or "),VS=n(F7,"A",{href:!0});var UOr=s(VS);MKe=r(UOr,"CamembertTokenizerFast"),UOr.forEach(t),EKe=r(F7," (CamemBERT model)"),F7.forEach(t),CKe=i(S),wg=n(S,"LI",{});var D5e=s(wg);Rre=n(D5e,"STRONG",{});var JOr=s(Rre);wKe=r(JOr,"canine"),JOr.forEach(t),AKe=r(D5e," \u2014 "),XS=n(D5e,"A",{href:!0});var YOr=s(XS);yKe=r(YOr,"CanineTokenizer"),YOr.forEach(t),LKe=r(D5e," (Canine model)"),D5e.forEach(t),xKe=i(S),Dn=n(S,"LI",{});var T7=s(Dn);Bre=n(T7,"STRONG",{});var KOr=s(Bre);$Ke=r(KOr,"clip"),KOr.forEach(t),kKe=r(T7," \u2014 "),zS=n(T7,"A",{href:!0});var ZOr=s(zS);SKe=r(ZOr,"CLIPTokenizer"),ZOr.forEach(t),RKe=r(T7," or "),QS=n(T7,"A",{href:!0});var eVr=s(QS);BKe=r(eVr,"CLIPTokenizerFast"),eVr.forEach(t),PKe=r(T7," (CLIP model)"),T7.forEach(t),IKe=i(S),Gn=n(S,"LI",{});var M7=s(Gn);Pre=n(M7,"STRONG",{});var oVr=s(Pre);qKe=r(oVr,"convbert"),oVr.forEach(t),NKe=r(M7," \u2014 "),WS=n(M7,"A",{href:!0});var rVr=s(WS);jKe=r(rVr,"ConvBertTokenizer"),rVr.forEach(t),DKe=r(M7," or "),HS=n(M7,"A",{href:!0});var tVr=s(HS);GKe=r(tVr,"ConvBertTokenizerFast"),tVr.forEach(t),OKe=r(M7," (ConvBERT model)"),M7.forEach(t),VKe=i(S),On=n(S,"LI",{});var E7=s(On);Ire=n(E7,"STRONG",{});var aVr=s(Ire);XKe=r(aVr,"cpm"),aVr.forEach(t),zKe=r(E7," \u2014 "),US=n(E7,"A",{href:!0});var nVr=s(US);QKe=r(nVr,"CpmTokenizer"),nVr.forEach(t),WKe=r(E7," or "),JS=n(E7,"A",{href:!0});var sVr=s(JS);HKe=r(sVr,"CpmTokenizerFast"),sVr.forEach(t),UKe=r(E7," (CPM model)"),E7.forEach(t),JKe=i(S),Ag=n(S,"LI",{});var G5e=s(Ag);qre=n(G5e,"STRONG",{});var lVr=s(qre);YKe=r(lVr,"ctrl"),lVr.forEach(t),KKe=r(G5e," \u2014 "),YS=n(G5e,"A",{href:!0});var iVr=s(YS);ZKe=r(iVr,"CTRLTokenizer"),iVr.forEach(t),eZe=r(G5e," (CTRL model)"),G5e.forEach(t),oZe=i(S),Vn=n(S,"LI",{});var C7=s(Vn);Nre=n(C7,"STRONG",{});var dVr=s(Nre);rZe=r(dVr,"data2vec-text"),dVr.forEach(t),tZe=r(C7," \u2014 "),KS=n(C7,"A",{href:!0});var cVr=s(KS);aZe=r(cVr,"RobertaTokenizer"),cVr.forEach(t),nZe=r(C7," or "),ZS=n(C7,"A",{href:!0});var fVr=s(ZS);sZe=r(fVr,"RobertaTokenizerFast"),fVr.forEach(t),lZe=r(C7," (Data2VecText model)"),C7.forEach(t),iZe=i(S),Xn=n(S,"LI",{});var w7=s(Xn);jre=n(w7,"STRONG",{});var mVr=s(jre);dZe=r(mVr,"deberta"),mVr.forEach(t),cZe=r(w7," \u2014 "),eR=n(w7,"A",{href:!0});var gVr=s(eR);fZe=r(gVr,"DebertaTokenizer"),gVr.forEach(t),mZe=r(w7," or "),oR=n(w7,"A",{href:!0});var hVr=s(oR);gZe=r(hVr,"DebertaTokenizerFast"),hVr.forEach(t),hZe=r(w7," (DeBERTa model)"),w7.forEach(t),pZe=i(S),zn=n(S,"LI",{});var A7=s(zn);Dre=n(A7,"STRONG",{});var pVr=s(Dre);uZe=r(pVr,"deberta-v2"),pVr.forEach(t),_Ze=r(A7," \u2014 "),rR=n(A7,"A",{href:!0});var uVr=s(rR);bZe=r(uVr,"DebertaV2Tokenizer"),uVr.forEach(t),vZe=r(A7," or "),tR=n(A7,"A",{href:!0});var _Vr=s(tR);FZe=r(_Vr,"DebertaV2TokenizerFast"),_Vr.forEach(t),TZe=r(A7," (DeBERTa-v2 model)"),A7.forEach(t),MZe=i(S),Qn=n(S,"LI",{});var y7=s(Qn);Gre=n(y7,"STRONG",{});var bVr=s(Gre);EZe=r(bVr,"distilbert"),bVr.forEach(t),CZe=r(y7," \u2014 "),aR=n(y7,"A",{href:!0});var vVr=s(aR);wZe=r(vVr,"DistilBertTokenizer"),vVr.forEach(t),AZe=r(y7," or "),nR=n(y7,"A",{href:!0});var FVr=s(nR);yZe=r(FVr,"DistilBertTokenizerFast"),FVr.forEach(t),LZe=r(y7," (DistilBERT model)"),y7.forEach(t),xZe=i(S),Wn=n(S,"LI",{});var L7=s(Wn);Ore=n(L7,"STRONG",{});var TVr=s(Ore);$Ze=r(TVr,"dpr"),TVr.forEach(t),kZe=r(L7," \u2014 "),sR=n(L7,"A",{href:!0});var MVr=s(sR);SZe=r(MVr,"DPRQuestionEncoderTokenizer"),MVr.forEach(t),RZe=r(L7," or "),lR=n(L7,"A",{href:!0});var EVr=s(lR);BZe=r(EVr,"DPRQuestionEncoderTokenizerFast"),EVr.forEach(t),PZe=r(L7," (DPR model)"),L7.forEach(t),IZe=i(S),Hn=n(S,"LI",{});var x7=s(Hn);Vre=n(x7,"STRONG",{});var CVr=s(Vre);qZe=r(CVr,"electra"),CVr.forEach(t),NZe=r(x7," \u2014 "),iR=n(x7,"A",{href:!0});var wVr=s(iR);jZe=r(wVr,"ElectraTokenizer"),wVr.forEach(t),DZe=r(x7," or "),dR=n(x7,"A",{href:!0});var AVr=s(dR);GZe=r(AVr,"ElectraTokenizerFast"),AVr.forEach(t),OZe=r(x7," (ELECTRA model)"),x7.forEach(t),VZe=i(S),yg=n(S,"LI",{});var O5e=s(yg);Xre=n(O5e,"STRONG",{});var yVr=s(Xre);XZe=r(yVr,"flaubert"),yVr.forEach(t),zZe=r(O5e," \u2014 "),cR=n(O5e,"A",{href:!0});var LVr=s(cR);QZe=r(LVr,"FlaubertTokenizer"),LVr.forEach(t),WZe=r(O5e," (FlauBERT model)"),O5e.forEach(t),HZe=i(S),Un=n(S,"LI",{});var $7=s(Un);zre=n($7,"STRONG",{});var xVr=s(zre);UZe=r(xVr,"fnet"),xVr.forEach(t),JZe=r($7," \u2014 "),fR=n($7,"A",{href:!0});var $Vr=s(fR);YZe=r($Vr,"FNetTokenizer"),$Vr.forEach(t),KZe=r($7," or "),mR=n($7,"A",{href:!0});var kVr=s(mR);ZZe=r(kVr,"FNetTokenizerFast"),kVr.forEach(t),eeo=r($7," (FNet model)"),$7.forEach(t),oeo=i(S),Lg=n(S,"LI",{});var V5e=s(Lg);Qre=n(V5e,"STRONG",{});var SVr=s(Qre);reo=r(SVr,"fsmt"),SVr.forEach(t),teo=r(V5e," \u2014 "),gR=n(V5e,"A",{href:!0});var RVr=s(gR);aeo=r(RVr,"FSMTTokenizer"),RVr.forEach(t),neo=r(V5e," (FairSeq Machine-Translation model)"),V5e.forEach(t),seo=i(S),Jn=n(S,"LI",{});var k7=s(Jn);Wre=n(k7,"STRONG",{});var BVr=s(Wre);leo=r(BVr,"funnel"),BVr.forEach(t),ieo=r(k7," \u2014 "),hR=n(k7,"A",{href:!0});var PVr=s(hR);deo=r(PVr,"FunnelTokenizer"),PVr.forEach(t),ceo=r(k7," or "),pR=n(k7,"A",{href:!0});var IVr=s(pR);feo=r(IVr,"FunnelTokenizerFast"),IVr.forEach(t),meo=r(k7," (Funnel Transformer model)"),k7.forEach(t),geo=i(S),Yn=n(S,"LI",{});var S7=s(Yn);Hre=n(S7,"STRONG",{});var qVr=s(Hre);heo=r(qVr,"gpt2"),qVr.forEach(t),peo=r(S7," \u2014 "),uR=n(S7,"A",{href:!0});var NVr=s(uR);ueo=r(NVr,"GPT2Tokenizer"),NVr.forEach(t),_eo=r(S7," or "),_R=n(S7,"A",{href:!0});var jVr=s(_R);beo=r(jVr,"GPT2TokenizerFast"),jVr.forEach(t),veo=r(S7," (OpenAI GPT-2 model)"),S7.forEach(t),Feo=i(S),Kn=n(S,"LI",{});var R7=s(Kn);Ure=n(R7,"STRONG",{});var DVr=s(Ure);Teo=r(DVr,"gpt_neo"),DVr.forEach(t),Meo=r(R7," \u2014 "),bR=n(R7,"A",{href:!0});var GVr=s(bR);Eeo=r(GVr,"GPT2Tokenizer"),GVr.forEach(t),Ceo=r(R7," or "),vR=n(R7,"A",{href:!0});var OVr=s(vR);weo=r(OVr,"GPT2TokenizerFast"),OVr.forEach(t),Aeo=r(R7," (GPT Neo model)"),R7.forEach(t),yeo=i(S),Zn=n(S,"LI",{});var B7=s(Zn);Jre=n(B7,"STRONG",{});var VVr=s(Jre);Leo=r(VVr,"gptj"),VVr.forEach(t),xeo=r(B7," \u2014 "),FR=n(B7,"A",{href:!0});var XVr=s(FR);$eo=r(XVr,"GPT2Tokenizer"),XVr.forEach(t),keo=r(B7," or "),TR=n(B7,"A",{href:!0});var zVr=s(TR);Seo=r(zVr,"GPT2TokenizerFast"),zVr.forEach(t),Reo=r(B7," (GPT-J model)"),B7.forEach(t),Beo=i(S),es=n(S,"LI",{});var P7=s(es);Yre=n(P7,"STRONG",{});var QVr=s(Yre);Peo=r(QVr,"herbert"),QVr.forEach(t),Ieo=r(P7," \u2014 "),MR=n(P7,"A",{href:!0});var WVr=s(MR);qeo=r(WVr,"HerbertTokenizer"),WVr.forEach(t),Neo=r(P7," or "),ER=n(P7,"A",{href:!0});var HVr=s(ER);jeo=r(HVr,"HerbertTokenizerFast"),HVr.forEach(t),Deo=r(P7," (HerBERT model)"),P7.forEach(t),Geo=i(S),xg=n(S,"LI",{});var X5e=s(xg);Kre=n(X5e,"STRONG",{});var UVr=s(Kre);Oeo=r(UVr,"hubert"),UVr.forEach(t),Veo=r(X5e," \u2014 "),CR=n(X5e,"A",{href:!0});var JVr=s(CR);Xeo=r(JVr,"Wav2Vec2CTCTokenizer"),JVr.forEach(t),zeo=r(X5e," (Hubert model)"),X5e.forEach(t),Qeo=i(S),os=n(S,"LI",{});var I7=s(os);Zre=n(I7,"STRONG",{});var YVr=s(Zre);Weo=r(YVr,"ibert"),YVr.forEach(t),Heo=r(I7," \u2014 "),wR=n(I7,"A",{href:!0});var KVr=s(wR);Ueo=r(KVr,"RobertaTokenizer"),KVr.forEach(t),Jeo=r(I7," or "),AR=n(I7,"A",{href:!0});var ZVr=s(AR);Yeo=r(ZVr,"RobertaTokenizerFast"),ZVr.forEach(t),Keo=r(I7," (I-BERT model)"),I7.forEach(t),Zeo=i(S),rs=n(S,"LI",{});var q7=s(rs);ete=n(q7,"STRONG",{});var eXr=s(ete);eoo=r(eXr,"layoutlm"),eXr.forEach(t),ooo=r(q7," \u2014 "),yR=n(q7,"A",{href:!0});var oXr=s(yR);roo=r(oXr,"LayoutLMTokenizer"),oXr.forEach(t),too=r(q7," or "),LR=n(q7,"A",{href:!0});var rXr=s(LR);aoo=r(rXr,"LayoutLMTokenizerFast"),rXr.forEach(t),noo=r(q7," (LayoutLM model)"),q7.forEach(t),soo=i(S),ts=n(S,"LI",{});var N7=s(ts);ote=n(N7,"STRONG",{});var tXr=s(ote);loo=r(tXr,"layoutlmv2"),tXr.forEach(t),ioo=r(N7," \u2014 "),xR=n(N7,"A",{href:!0});var aXr=s(xR);doo=r(aXr,"LayoutLMv2Tokenizer"),aXr.forEach(t),coo=r(N7," or "),$R=n(N7,"A",{href:!0});var nXr=s($R);foo=r(nXr,"LayoutLMv2TokenizerFast"),nXr.forEach(t),moo=r(N7," (LayoutLMv2 model)"),N7.forEach(t),goo=i(S),as=n(S,"LI",{});var j7=s(as);rte=n(j7,"STRONG",{});var sXr=s(rte);hoo=r(sXr,"layoutxlm"),sXr.forEach(t),poo=r(j7," \u2014 "),kR=n(j7,"A",{href:!0});var lXr=s(kR);uoo=r(lXr,"LayoutXLMTokenizer"),lXr.forEach(t),_oo=r(j7," or "),SR=n(j7,"A",{href:!0});var iXr=s(SR);boo=r(iXr,"LayoutXLMTokenizerFast"),iXr.forEach(t),voo=r(j7," (LayoutXLM model)"),j7.forEach(t),Foo=i(S),ns=n(S,"LI",{});var D7=s(ns);tte=n(D7,"STRONG",{});var dXr=s(tte);Too=r(dXr,"led"),dXr.forEach(t),Moo=r(D7," \u2014 "),RR=n(D7,"A",{href:!0});var cXr=s(RR);Eoo=r(cXr,"LEDTokenizer"),cXr.forEach(t),Coo=r(D7," or "),BR=n(D7,"A",{href:!0});var fXr=s(BR);woo=r(fXr,"LEDTokenizerFast"),fXr.forEach(t),Aoo=r(D7," (LED model)"),D7.forEach(t),yoo=i(S),ss=n(S,"LI",{});var G7=s(ss);ate=n(G7,"STRONG",{});var mXr=s(ate);Loo=r(mXr,"longformer"),mXr.forEach(t),xoo=r(G7," \u2014 "),PR=n(G7,"A",{href:!0});var gXr=s(PR);$oo=r(gXr,"LongformerTokenizer"),gXr.forEach(t),koo=r(G7," or "),IR=n(G7,"A",{href:!0});var hXr=s(IR);Soo=r(hXr,"LongformerTokenizerFast"),hXr.forEach(t),Roo=r(G7," (Longformer model)"),G7.forEach(t),Boo=i(S),$g=n(S,"LI",{});var z5e=s($g);nte=n(z5e,"STRONG",{});var pXr=s(nte);Poo=r(pXr,"luke"),pXr.forEach(t),Ioo=r(z5e," \u2014 "),qR=n(z5e,"A",{href:!0});var uXr=s(qR);qoo=r(uXr,"LukeTokenizer"),uXr.forEach(t),Noo=r(z5e," (LUKE model)"),z5e.forEach(t),joo=i(S),ls=n(S,"LI",{});var O7=s(ls);ste=n(O7,"STRONG",{});var _Xr=s(ste);Doo=r(_Xr,"lxmert"),_Xr.forEach(t),Goo=r(O7," \u2014 "),NR=n(O7,"A",{href:!0});var bXr=s(NR);Ooo=r(bXr,"LxmertTokenizer"),bXr.forEach(t),Voo=r(O7," or "),jR=n(O7,"A",{href:!0});var vXr=s(jR);Xoo=r(vXr,"LxmertTokenizerFast"),vXr.forEach(t),zoo=r(O7," (LXMERT model)"),O7.forEach(t),Qoo=i(S),kg=n(S,"LI",{});var Q5e=s(kg);lte=n(Q5e,"STRONG",{});var FXr=s(lte);Woo=r(FXr,"m2m_100"),FXr.forEach(t),Hoo=r(Q5e," \u2014 "),DR=n(Q5e,"A",{href:!0});var TXr=s(DR);Uoo=r(TXr,"M2M100Tokenizer"),TXr.forEach(t),Joo=r(Q5e," (M2M100 model)"),Q5e.forEach(t),Yoo=i(S),Sg=n(S,"LI",{});var W5e=s(Sg);ite=n(W5e,"STRONG",{});var MXr=s(ite);Koo=r(MXr,"marian"),MXr.forEach(t),Zoo=r(W5e," \u2014 "),GR=n(W5e,"A",{href:!0});var EXr=s(GR);ero=r(EXr,"MarianTokenizer"),EXr.forEach(t),oro=r(W5e," (Marian model)"),W5e.forEach(t),rro=i(S),is=n(S,"LI",{});var V7=s(is);dte=n(V7,"STRONG",{});var CXr=s(dte);tro=r(CXr,"mbart"),CXr.forEach(t),aro=r(V7," \u2014 "),OR=n(V7,"A",{href:!0});var wXr=s(OR);nro=r(wXr,"MBartTokenizer"),wXr.forEach(t),sro=r(V7," or "),VR=n(V7,"A",{href:!0});var AXr=s(VR);lro=r(AXr,"MBartTokenizerFast"),AXr.forEach(t),iro=r(V7," (mBART model)"),V7.forEach(t),dro=i(S),ds=n(S,"LI",{});var X7=s(ds);cte=n(X7,"STRONG",{});var yXr=s(cte);cro=r(yXr,"mbart50"),yXr.forEach(t),fro=r(X7," \u2014 "),XR=n(X7,"A",{href:!0});var LXr=s(XR);mro=r(LXr,"MBart50Tokenizer"),LXr.forEach(t),gro=r(X7," or "),zR=n(X7,"A",{href:!0});var xXr=s(zR);hro=r(xXr,"MBart50TokenizerFast"),xXr.forEach(t),pro=r(X7," (mBART-50 model)"),X7.forEach(t),uro=i(S),cs=n(S,"LI",{});var z7=s(cs);fte=n(z7,"STRONG",{});var $Xr=s(fte);_ro=r($Xr,"megatron-bert"),$Xr.forEach(t),bro=r(z7," \u2014 "),QR=n(z7,"A",{href:!0});var kXr=s(QR);vro=r(kXr,"BertTokenizer"),kXr.forEach(t),Fro=r(z7," or "),WR=n(z7,"A",{href:!0});var SXr=s(WR);Tro=r(SXr,"BertTokenizerFast"),SXr.forEach(t),Mro=r(z7," (MegatronBert model)"),z7.forEach(t),Ero=i(S),Rg=n(S,"LI",{});var H5e=s(Rg);mte=n(H5e,"STRONG",{});var RXr=s(mte);Cro=r(RXr,"mluke"),RXr.forEach(t),wro=r(H5e," \u2014 "),HR=n(H5e,"A",{href:!0});var BXr=s(HR);Aro=r(BXr,"MLukeTokenizer"),BXr.forEach(t),yro=r(H5e," (mLUKE model)"),H5e.forEach(t),Lro=i(S),fs=n(S,"LI",{});var Q7=s(fs);gte=n(Q7,"STRONG",{});var PXr=s(gte);xro=r(PXr,"mobilebert"),PXr.forEach(t),$ro=r(Q7," \u2014 "),UR=n(Q7,"A",{href:!0});var IXr=s(UR);kro=r(IXr,"MobileBertTokenizer"),IXr.forEach(t),Sro=r(Q7," or "),JR=n(Q7,"A",{href:!0});var qXr=s(JR);Rro=r(qXr,"MobileBertTokenizerFast"),qXr.forEach(t),Bro=r(Q7," (MobileBERT model)"),Q7.forEach(t),Pro=i(S),ms=n(S,"LI",{});var W7=s(ms);hte=n(W7,"STRONG",{});var NXr=s(hte);Iro=r(NXr,"mpnet"),NXr.forEach(t),qro=r(W7," \u2014 "),YR=n(W7,"A",{href:!0});var jXr=s(YR);Nro=r(jXr,"MPNetTokenizer"),jXr.forEach(t),jro=r(W7," or "),KR=n(W7,"A",{href:!0});var DXr=s(KR);Dro=r(DXr,"MPNetTokenizerFast"),DXr.forEach(t),Gro=r(W7," (MPNet model)"),W7.forEach(t),Oro=i(S),gs=n(S,"LI",{});var H7=s(gs);pte=n(H7,"STRONG",{});var GXr=s(pte);Vro=r(GXr,"mt5"),GXr.forEach(t),Xro=r(H7," \u2014 "),ZR=n(H7,"A",{href:!0});var OXr=s(ZR);zro=r(OXr,"MT5Tokenizer"),OXr.forEach(t),Qro=r(H7," or "),eB=n(H7,"A",{href:!0});var VXr=s(eB);Wro=r(VXr,"MT5TokenizerFast"),VXr.forEach(t),Hro=r(H7," (mT5 model)"),H7.forEach(t),Uro=i(S),hs=n(S,"LI",{});var U7=s(hs);ute=n(U7,"STRONG",{});var XXr=s(ute);Jro=r(XXr,"nystromformer"),XXr.forEach(t),Yro=r(U7," \u2014 "),oB=n(U7,"A",{href:!0});var zXr=s(oB);Kro=r(zXr,"AlbertTokenizer"),zXr.forEach(t),Zro=r(U7," or "),rB=n(U7,"A",{href:!0});var QXr=s(rB);eto=r(QXr,"AlbertTokenizerFast"),QXr.forEach(t),oto=r(U7," (Nystromformer model)"),U7.forEach(t),rto=i(S),ps=n(S,"LI",{});var J7=s(ps);_te=n(J7,"STRONG",{});var WXr=s(_te);tto=r(WXr,"openai-gpt"),WXr.forEach(t),ato=r(J7," \u2014 "),tB=n(J7,"A",{href:!0});var HXr=s(tB);nto=r(HXr,"OpenAIGPTTokenizer"),HXr.forEach(t),sto=r(J7," or "),aB=n(J7,"A",{href:!0});var UXr=s(aB);lto=r(UXr,"OpenAIGPTTokenizerFast"),UXr.forEach(t),ito=r(J7," (OpenAI GPT model)"),J7.forEach(t),dto=i(S),Bg=n(S,"LI",{});var U5e=s(Bg);bte=n(U5e,"STRONG",{});var JXr=s(bte);cto=r(JXr,"opt"),JXr.forEach(t),fto=r(U5e," \u2014 "),nB=n(U5e,"A",{href:!0});var YXr=s(nB);mto=r(YXr,"GPT2Tokenizer"),YXr.forEach(t),gto=r(U5e," (OPT model)"),U5e.forEach(t),hto=i(S),us=n(S,"LI",{});var Y7=s(us);vte=n(Y7,"STRONG",{});var KXr=s(vte);pto=r(KXr,"pegasus"),KXr.forEach(t),uto=r(Y7," \u2014 "),sB=n(Y7,"A",{href:!0});var ZXr=s(sB);_to=r(ZXr,"PegasusTokenizer"),ZXr.forEach(t),bto=r(Y7," or "),lB=n(Y7,"A",{href:!0});var ezr=s(lB);vto=r(ezr,"PegasusTokenizerFast"),ezr.forEach(t),Fto=r(Y7," (Pegasus model)"),Y7.forEach(t),Tto=i(S),Pg=n(S,"LI",{});var J5e=s(Pg);Fte=n(J5e,"STRONG",{});var ozr=s(Fte);Mto=r(ozr,"perceiver"),ozr.forEach(t),Eto=r(J5e," \u2014 "),iB=n(J5e,"A",{href:!0});var rzr=s(iB);Cto=r(rzr,"PerceiverTokenizer"),rzr.forEach(t),wto=r(J5e," (Perceiver model)"),J5e.forEach(t),Ato=i(S),Ig=n(S,"LI",{});var Y5e=s(Ig);Tte=n(Y5e,"STRONG",{});var tzr=s(Tte);yto=r(tzr,"phobert"),tzr.forEach(t),Lto=r(Y5e," \u2014 "),dB=n(Y5e,"A",{href:!0});var azr=s(dB);xto=r(azr,"PhobertTokenizer"),azr.forEach(t),$to=r(Y5e," (PhoBERT model)"),Y5e.forEach(t),kto=i(S),qg=n(S,"LI",{});var K5e=s(qg);Mte=n(K5e,"STRONG",{});var nzr=s(Mte);Sto=r(nzr,"plbart"),nzr.forEach(t),Rto=r(K5e," \u2014 "),cB=n(K5e,"A",{href:!0});var szr=s(cB);Bto=r(szr,"PLBartTokenizer"),szr.forEach(t),Pto=r(K5e," (PLBart model)"),K5e.forEach(t),Ito=i(S),Ng=n(S,"LI",{});var Z5e=s(Ng);Ete=n(Z5e,"STRONG",{});var lzr=s(Ete);qto=r(lzr,"prophetnet"),lzr.forEach(t),Nto=r(Z5e," \u2014 "),fB=n(Z5e,"A",{href:!0});var izr=s(fB);jto=r(izr,"ProphetNetTokenizer"),izr.forEach(t),Dto=r(Z5e," (ProphetNet model)"),Z5e.forEach(t),Gto=i(S),_s=n(S,"LI",{});var K7=s(_s);Cte=n(K7,"STRONG",{});var dzr=s(Cte);Oto=r(dzr,"qdqbert"),dzr.forEach(t),Vto=r(K7," \u2014 "),mB=n(K7,"A",{href:!0});var czr=s(mB);Xto=r(czr,"BertTokenizer"),czr.forEach(t),zto=r(K7," or "),gB=n(K7,"A",{href:!0});var fzr=s(gB);Qto=r(fzr,"BertTokenizerFast"),fzr.forEach(t),Wto=r(K7," (QDQBert model)"),K7.forEach(t),Hto=i(S),jg=n(S,"LI",{});var eCe=s(jg);wte=n(eCe,"STRONG",{});var mzr=s(wte);Uto=r(mzr,"rag"),mzr.forEach(t),Jto=r(eCe," \u2014 "),hB=n(eCe,"A",{href:!0});var gzr=s(hB);Yto=r(gzr,"RagTokenizer"),gzr.forEach(t),Kto=r(eCe," (RAG model)"),eCe.forEach(t),Zto=i(S),bs=n(S,"LI",{});var Z7=s(bs);Ate=n(Z7,"STRONG",{});var hzr=s(Ate);eao=r(hzr,"realm"),hzr.forEach(t),oao=r(Z7," \u2014 "),pB=n(Z7,"A",{href:!0});var pzr=s(pB);rao=r(pzr,"RealmTokenizer"),pzr.forEach(t),tao=r(Z7," or "),uB=n(Z7,"A",{href:!0});var uzr=s(uB);aao=r(uzr,"RealmTokenizerFast"),uzr.forEach(t),nao=r(Z7," (Realm model)"),Z7.forEach(t),sao=i(S),vs=n(S,"LI",{});var e$=s(vs);yte=n(e$,"STRONG",{});var _zr=s(yte);lao=r(_zr,"reformer"),_zr.forEach(t),iao=r(e$," \u2014 "),_B=n(e$,"A",{href:!0});var bzr=s(_B);dao=r(bzr,"ReformerTokenizer"),bzr.forEach(t),cao=r(e$," or "),bB=n(e$,"A",{href:!0});var vzr=s(bB);fao=r(vzr,"ReformerTokenizerFast"),vzr.forEach(t),mao=r(e$," (Reformer model)"),e$.forEach(t),gao=i(S),Fs=n(S,"LI",{});var o$=s(Fs);Lte=n(o$,"STRONG",{});var Fzr=s(Lte);hao=r(Fzr,"rembert"),Fzr.forEach(t),pao=r(o$," \u2014 "),vB=n(o$,"A",{href:!0});var Tzr=s(vB);uao=r(Tzr,"RemBertTokenizer"),Tzr.forEach(t),_ao=r(o$," or "),FB=n(o$,"A",{href:!0});var Mzr=s(FB);bao=r(Mzr,"RemBertTokenizerFast"),Mzr.forEach(t),vao=r(o$," (RemBERT model)"),o$.forEach(t),Fao=i(S),Ts=n(S,"LI",{});var r$=s(Ts);xte=n(r$,"STRONG",{});var Ezr=s(xte);Tao=r(Ezr,"retribert"),Ezr.forEach(t),Mao=r(r$," \u2014 "),TB=n(r$,"A",{href:!0});var Czr=s(TB);Eao=r(Czr,"RetriBertTokenizer"),Czr.forEach(t),Cao=r(r$," or "),MB=n(r$,"A",{href:!0});var wzr=s(MB);wao=r(wzr,"RetriBertTokenizerFast"),wzr.forEach(t),Aao=r(r$," (RetriBERT model)"),r$.forEach(t),yao=i(S),Ms=n(S,"LI",{});var t$=s(Ms);$te=n(t$,"STRONG",{});var Azr=s($te);Lao=r(Azr,"roberta"),Azr.forEach(t),xao=r(t$," \u2014 "),EB=n(t$,"A",{href:!0});var yzr=s(EB);$ao=r(yzr,"RobertaTokenizer"),yzr.forEach(t),kao=r(t$," or "),CB=n(t$,"A",{href:!0});var Lzr=s(CB);Sao=r(Lzr,"RobertaTokenizerFast"),Lzr.forEach(t),Rao=r(t$," (RoBERTa model)"),t$.forEach(t),Bao=i(S),Es=n(S,"LI",{});var a$=s(Es);kte=n(a$,"STRONG",{});var xzr=s(kte);Pao=r(xzr,"roformer"),xzr.forEach(t),Iao=r(a$," \u2014 "),wB=n(a$,"A",{href:!0});var $zr=s(wB);qao=r($zr,"RoFormerTokenizer"),$zr.forEach(t),Nao=r(a$," or "),AB=n(a$,"A",{href:!0});var kzr=s(AB);jao=r(kzr,"RoFormerTokenizerFast"),kzr.forEach(t),Dao=r(a$," (RoFormer model)"),a$.forEach(t),Gao=i(S),Dg=n(S,"LI",{});var oCe=s(Dg);Ste=n(oCe,"STRONG",{});var Szr=s(Ste);Oao=r(Szr,"speech_to_text"),Szr.forEach(t),Vao=r(oCe," \u2014 "),yB=n(oCe,"A",{href:!0});var Rzr=s(yB);Xao=r(Rzr,"Speech2TextTokenizer"),Rzr.forEach(t),zao=r(oCe," (Speech2Text model)"),oCe.forEach(t),Qao=i(S),Gg=n(S,"LI",{});var rCe=s(Gg);Rte=n(rCe,"STRONG",{});var Bzr=s(Rte);Wao=r(Bzr,"speech_to_text_2"),Bzr.forEach(t),Hao=r(rCe," \u2014 "),LB=n(rCe,"A",{href:!0});var Pzr=s(LB);Uao=r(Pzr,"Speech2Text2Tokenizer"),Pzr.forEach(t),Jao=r(rCe," (Speech2Text2 model)"),rCe.forEach(t),Yao=i(S),Cs=n(S,"LI",{});var n$=s(Cs);Bte=n(n$,"STRONG",{});var Izr=s(Bte);Kao=r(Izr,"splinter"),Izr.forEach(t),Zao=r(n$," \u2014 "),xB=n(n$,"A",{href:!0});var qzr=s(xB);eno=r(qzr,"SplinterTokenizer"),qzr.forEach(t),ono=r(n$," or "),$B=n(n$,"A",{href:!0});var Nzr=s($B);rno=r(Nzr,"SplinterTokenizerFast"),Nzr.forEach(t),tno=r(n$," (Splinter model)"),n$.forEach(t),ano=i(S),ws=n(S,"LI",{});var s$=s(ws);Pte=n(s$,"STRONG",{});var jzr=s(Pte);nno=r(jzr,"squeezebert"),jzr.forEach(t),sno=r(s$," \u2014 "),kB=n(s$,"A",{href:!0});var Dzr=s(kB);lno=r(Dzr,"SqueezeBertTokenizer"),Dzr.forEach(t),ino=r(s$," or "),SB=n(s$,"A",{href:!0});var Gzr=s(SB);dno=r(Gzr,"SqueezeBertTokenizerFast"),Gzr.forEach(t),cno=r(s$," (SqueezeBERT model)"),s$.forEach(t),fno=i(S),As=n(S,"LI",{});var l$=s(As);Ite=n(l$,"STRONG",{});var Ozr=s(Ite);mno=r(Ozr,"t5"),Ozr.forEach(t),gno=r(l$," \u2014 "),RB=n(l$,"A",{href:!0});var Vzr=s(RB);hno=r(Vzr,"T5Tokenizer"),Vzr.forEach(t),pno=r(l$," or "),BB=n(l$,"A",{href:!0});var Xzr=s(BB);uno=r(Xzr,"T5TokenizerFast"),Xzr.forEach(t),_no=r(l$," (T5 model)"),l$.forEach(t),bno=i(S),Og=n(S,"LI",{});var tCe=s(Og);qte=n(tCe,"STRONG",{});var zzr=s(qte);vno=r(zzr,"tapas"),zzr.forEach(t),Fno=r(tCe," \u2014 "),PB=n(tCe,"A",{href:!0});var Qzr=s(PB);Tno=r(Qzr,"TapasTokenizer"),Qzr.forEach(t),Mno=r(tCe," (TAPAS model)"),tCe.forEach(t),Eno=i(S),Vg=n(S,"LI",{});var aCe=s(Vg);Nte=n(aCe,"STRONG",{});var Wzr=s(Nte);Cno=r(Wzr,"tapex"),Wzr.forEach(t),wno=r(aCe," \u2014 "),IB=n(aCe,"A",{href:!0});var Hzr=s(IB);Ano=r(Hzr,"TapexTokenizer"),Hzr.forEach(t),yno=r(aCe," (TAPEX model)"),aCe.forEach(t),Lno=i(S),Xg=n(S,"LI",{});var nCe=s(Xg);jte=n(nCe,"STRONG",{});var Uzr=s(jte);xno=r(Uzr,"transfo-xl"),Uzr.forEach(t),$no=r(nCe," \u2014 "),qB=n(nCe,"A",{href:!0});var Jzr=s(qB);kno=r(Jzr,"TransfoXLTokenizer"),Jzr.forEach(t),Sno=r(nCe," (Transformer-XL model)"),nCe.forEach(t),Rno=i(S),ys=n(S,"LI",{});var i$=s(ys);Dte=n(i$,"STRONG",{});var Yzr=s(Dte);Bno=r(Yzr,"visual_bert"),Yzr.forEach(t),Pno=r(i$," \u2014 "),NB=n(i$,"A",{href:!0});var Kzr=s(NB);Ino=r(Kzr,"BertTokenizer"),Kzr.forEach(t),qno=r(i$," or "),jB=n(i$,"A",{href:!0});var Zzr=s(jB);Nno=r(Zzr,"BertTokenizerFast"),Zzr.forEach(t),jno=r(i$," (VisualBert model)"),i$.forEach(t),Dno=i(S),zg=n(S,"LI",{});var sCe=s(zg);Gte=n(sCe,"STRONG",{});var eQr=s(Gte);Gno=r(eQr,"wav2vec2"),eQr.forEach(t),Ono=r(sCe," \u2014 "),DB=n(sCe,"A",{href:!0});var oQr=s(DB);Vno=r(oQr,"Wav2Vec2CTCTokenizer"),oQr.forEach(t),Xno=r(sCe," (Wav2Vec2 model)"),sCe.forEach(t),zno=i(S),Qg=n(S,"LI",{});var lCe=s(Qg);Ote=n(lCe,"STRONG",{});var rQr=s(Ote);Qno=r(rQr,"wav2vec2_phoneme"),rQr.forEach(t),Wno=r(lCe," \u2014 "),GB=n(lCe,"A",{href:!0});var tQr=s(GB);Hno=r(tQr,"Wav2Vec2PhonemeCTCTokenizer"),tQr.forEach(t),Uno=r(lCe," (Wav2Vec2Phoneme model)"),lCe.forEach(t),Jno=i(S),Ls=n(S,"LI",{});var d$=s(Ls);Vte=n(d$,"STRONG",{});var aQr=s(Vte);Yno=r(aQr,"xglm"),aQr.forEach(t),Kno=r(d$," \u2014 "),OB=n(d$,"A",{href:!0});var nQr=s(OB);Zno=r(nQr,"XGLMTokenizer"),nQr.forEach(t),eso=r(d$," or "),VB=n(d$,"A",{href:!0});var sQr=s(VB);oso=r(sQr,"XGLMTokenizerFast"),sQr.forEach(t),rso=r(d$," (XGLM model)"),d$.forEach(t),tso=i(S),Wg=n(S,"LI",{});var iCe=s(Wg);Xte=n(iCe,"STRONG",{});var lQr=s(Xte);aso=r(lQr,"xlm"),lQr.forEach(t),nso=r(iCe," \u2014 "),XB=n(iCe,"A",{href:!0});var iQr=s(XB);sso=r(iQr,"XLMTokenizer"),iQr.forEach(t),lso=r(iCe," (XLM model)"),iCe.forEach(t),iso=i(S),Hg=n(S,"LI",{});var dCe=s(Hg);zte=n(dCe,"STRONG",{});var dQr=s(zte);dso=r(dQr,"xlm-prophetnet"),dQr.forEach(t),cso=r(dCe," \u2014 "),zB=n(dCe,"A",{href:!0});var cQr=s(zB);fso=r(cQr,"XLMProphetNetTokenizer"),cQr.forEach(t),mso=r(dCe," (XLMProphetNet model)"),dCe.forEach(t),gso=i(S),xs=n(S,"LI",{});var c$=s(xs);Qte=n(c$,"STRONG",{});var fQr=s(Qte);hso=r(fQr,"xlm-roberta"),fQr.forEach(t),pso=r(c$," \u2014 "),QB=n(c$,"A",{href:!0});var mQr=s(QB);uso=r(mQr,"XLMRobertaTokenizer"),mQr.forEach(t),_so=r(c$," or "),WB=n(c$,"A",{href:!0});var gQr=s(WB);bso=r(gQr,"XLMRobertaTokenizerFast"),gQr.forEach(t),vso=r(c$," (XLM-RoBERTa model)"),c$.forEach(t),Fso=i(S),$s=n(S,"LI",{});var f$=s($s);Wte=n(f$,"STRONG",{});var hQr=s(Wte);Tso=r(hQr,"xlm-roberta-xl"),hQr.forEach(t),Mso=r(f$," \u2014 "),HB=n(f$,"A",{href:!0});var pQr=s(HB);Eso=r(pQr,"RobertaTokenizer"),pQr.forEach(t),Cso=r(f$," or "),UB=n(f$,"A",{href:!0});var uQr=s(UB);wso=r(uQr,"RobertaTokenizerFast"),uQr.forEach(t),Aso=r(f$," (XLM-RoBERTa-XL model)"),f$.forEach(t),yso=i(S),ks=n(S,"LI",{});var m$=s(ks);Hte=n(m$,"STRONG",{});var _Qr=s(Hte);Lso=r(_Qr,"xlnet"),_Qr.forEach(t),xso=r(m$," \u2014 "),JB=n(m$,"A",{href:!0});var bQr=s(JB);$so=r(bQr,"XLNetTokenizer"),bQr.forEach(t),kso=r(m$," or "),YB=n(m$,"A",{href:!0});var vQr=s(YB);Sso=r(vQr,"XLNetTokenizerFast"),vQr.forEach(t),Rso=r(m$," (XLNet model)"),m$.forEach(t),Bso=i(S),Ss=n(S,"LI",{});var g$=s(Ss);Ute=n(g$,"STRONG",{});var FQr=s(Ute);Pso=r(FQr,"yoso"),FQr.forEach(t),Iso=r(g$," \u2014 "),KB=n(g$,"A",{href:!0});var TQr=s(KB);qso=r(TQr,"AlbertTokenizer"),TQr.forEach(t),Nso=r(g$," or "),ZB=n(g$,"A",{href:!0});var MQr=s(ZB);jso=r(MQr,"AlbertTokenizerFast"),MQr.forEach(t),Dso=r(g$," (YOSO model)"),g$.forEach(t),S.forEach(t),Gso=i(qs),T(Ug.$$.fragment,qs),qs.forEach(t),Oso=i(Is),Jg=n(Is,"DIV",{class:!0});var nNe=s(Jg);T(gA.$$.fragment,nNe),Vso=i(nNe),Jte=n(nNe,"P",{});var EQr=s(Jte);Xso=r(EQr,"Register a new tokenizer in this mapping."),EQr.forEach(t),nNe.forEach(t),Is.forEach(t),sIe=i(f),vi=n(f,"H2",{class:!0});var sNe=s(vi);Yg=n(sNe,"A",{id:!0,class:!0,href:!0});var CQr=s(Yg);Yte=n(CQr,"SPAN",{});var wQr=s(Yte);T(hA.$$.fragment,wQr),wQr.forEach(t),CQr.forEach(t),zso=i(sNe),Kte=n(sNe,"SPAN",{});var AQr=s(Kte);Qso=r(AQr,"AutoFeatureExtractor"),AQr.forEach(t),sNe.forEach(t),lIe=i(f),Ao=n(f,"DIV",{class:!0});var Ns=s(Ao);T(pA.$$.fragment,Ns),Wso=i(Ns),uA=n(Ns,"P",{});var lNe=s(uA);Hso=r(lNe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),eP=n(lNe,"A",{href:!0});var yQr=s(eP);Uso=r(yQr,"AutoFeatureExtractor.from_pretrained()"),yQr.forEach(t),Jso=r(lNe," class method."),lNe.forEach(t),Yso=i(Ns),_A=n(Ns,"P",{});var iNe=s(_A);Kso=r(iNe,"This class cannot be instantiated directly using "),Zte=n(iNe,"CODE",{});var LQr=s(Zte);Zso=r(LQr,"__init__()"),LQr.forEach(t),elo=r(iNe," (throws an error)."),iNe.forEach(t),olo=i(Ns),Qe=n(Ns,"DIV",{class:!0});var Yt=s(Qe);T(bA.$$.fragment,Yt),rlo=i(Yt),eae=n(Yt,"P",{});var xQr=s(eae);tlo=r(xQr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),xQr.forEach(t),alo=i(Yt),wa=n(Yt,"P",{});var o3=s(wa);nlo=r(o3,"The feature extractor class to instantiate is selected based on the "),oae=n(o3,"CODE",{});var $Qr=s(oae);slo=r($Qr,"model_type"),$Qr.forEach(t),llo=r(o3,` property of the config object
(either passed as an argument or loaded from `),rae=n(o3,"CODE",{});var kQr=s(rae);ilo=r(kQr,"pretrained_model_name_or_path"),kQr.forEach(t),dlo=r(o3,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),tae=n(o3,"CODE",{});var SQr=s(tae);clo=r(SQr,"pretrained_model_name_or_path"),SQr.forEach(t),flo=r(o3,":"),o3.forEach(t),mlo=i(Yt),oe=n(Yt,"UL",{});var ae=s(oe);Kg=n(ae,"LI",{});var cCe=s(Kg);aae=n(cCe,"STRONG",{});var RQr=s(aae);glo=r(RQr,"beit"),RQr.forEach(t),hlo=r(cCe," \u2014 "),oP=n(cCe,"A",{href:!0});var BQr=s(oP);plo=r(BQr,"BeitFeatureExtractor"),BQr.forEach(t),ulo=r(cCe," (BEiT model)"),cCe.forEach(t),_lo=i(ae),Zg=n(ae,"LI",{});var fCe=s(Zg);nae=n(fCe,"STRONG",{});var PQr=s(nae);blo=r(PQr,"clip"),PQr.forEach(t),vlo=r(fCe," \u2014 "),rP=n(fCe,"A",{href:!0});var IQr=s(rP);Flo=r(IQr,"CLIPFeatureExtractor"),IQr.forEach(t),Tlo=r(fCe," (CLIP model)"),fCe.forEach(t),Mlo=i(ae),eh=n(ae,"LI",{});var mCe=s(eh);sae=n(mCe,"STRONG",{});var qQr=s(sae);Elo=r(qQr,"convnext"),qQr.forEach(t),Clo=r(mCe," \u2014 "),tP=n(mCe,"A",{href:!0});var NQr=s(tP);wlo=r(NQr,"ConvNextFeatureExtractor"),NQr.forEach(t),Alo=r(mCe," (ConvNext model)"),mCe.forEach(t),ylo=i(ae),oh=n(ae,"LI",{});var gCe=s(oh);lae=n(gCe,"STRONG",{});var jQr=s(lae);Llo=r(jQr,"data2vec-audio"),jQr.forEach(t),xlo=r(gCe," \u2014 "),aP=n(gCe,"A",{href:!0});var DQr=s(aP);$lo=r(DQr,"Wav2Vec2FeatureExtractor"),DQr.forEach(t),klo=r(gCe," (Data2VecAudio model)"),gCe.forEach(t),Slo=i(ae),rh=n(ae,"LI",{});var hCe=s(rh);iae=n(hCe,"STRONG",{});var GQr=s(iae);Rlo=r(GQr,"data2vec-vision"),GQr.forEach(t),Blo=r(hCe," \u2014 "),nP=n(hCe,"A",{href:!0});var OQr=s(nP);Plo=r(OQr,"BeitFeatureExtractor"),OQr.forEach(t),Ilo=r(hCe," (Data2VecVision model)"),hCe.forEach(t),qlo=i(ae),th=n(ae,"LI",{});var pCe=s(th);dae=n(pCe,"STRONG",{});var VQr=s(dae);Nlo=r(VQr,"deit"),VQr.forEach(t),jlo=r(pCe," \u2014 "),sP=n(pCe,"A",{href:!0});var XQr=s(sP);Dlo=r(XQr,"DeiTFeatureExtractor"),XQr.forEach(t),Glo=r(pCe," (DeiT model)"),pCe.forEach(t),Olo=i(ae),ah=n(ae,"LI",{});var uCe=s(ah);cae=n(uCe,"STRONG",{});var zQr=s(cae);Vlo=r(zQr,"detr"),zQr.forEach(t),Xlo=r(uCe," \u2014 "),lP=n(uCe,"A",{href:!0});var QQr=s(lP);zlo=r(QQr,"DetrFeatureExtractor"),QQr.forEach(t),Qlo=r(uCe," (DETR model)"),uCe.forEach(t),Wlo=i(ae),nh=n(ae,"LI",{});var _Ce=s(nh);fae=n(_Ce,"STRONG",{});var WQr=s(fae);Hlo=r(WQr,"dpt"),WQr.forEach(t),Ulo=r(_Ce," \u2014 "),iP=n(_Ce,"A",{href:!0});var HQr=s(iP);Jlo=r(HQr,"DPTFeatureExtractor"),HQr.forEach(t),Ylo=r(_Ce," (DPT model)"),_Ce.forEach(t),Klo=i(ae),sh=n(ae,"LI",{});var bCe=s(sh);mae=n(bCe,"STRONG",{});var UQr=s(mae);Zlo=r(UQr,"flava"),UQr.forEach(t),eio=r(bCe," \u2014 "),dP=n(bCe,"A",{href:!0});var JQr=s(dP);oio=r(JQr,"FlavaFeatureExtractor"),JQr.forEach(t),rio=r(bCe," (Flava model)"),bCe.forEach(t),tio=i(ae),lh=n(ae,"LI",{});var vCe=s(lh);gae=n(vCe,"STRONG",{});var YQr=s(gae);aio=r(YQr,"glpn"),YQr.forEach(t),nio=r(vCe," \u2014 "),cP=n(vCe,"A",{href:!0});var KQr=s(cP);sio=r(KQr,"GLPNFeatureExtractor"),KQr.forEach(t),lio=r(vCe," (GLPN model)"),vCe.forEach(t),iio=i(ae),ih=n(ae,"LI",{});var FCe=s(ih);hae=n(FCe,"STRONG",{});var ZQr=s(hae);dio=r(ZQr,"hubert"),ZQr.forEach(t),cio=r(FCe," \u2014 "),fP=n(FCe,"A",{href:!0});var eWr=s(fP);fio=r(eWr,"Wav2Vec2FeatureExtractor"),eWr.forEach(t),mio=r(FCe," (Hubert model)"),FCe.forEach(t),gio=i(ae),dh=n(ae,"LI",{});var TCe=s(dh);pae=n(TCe,"STRONG",{});var oWr=s(pae);hio=r(oWr,"layoutlmv2"),oWr.forEach(t),pio=r(TCe," \u2014 "),mP=n(TCe,"A",{href:!0});var rWr=s(mP);uio=r(rWr,"LayoutLMv2FeatureExtractor"),rWr.forEach(t),_io=r(TCe," (LayoutLMv2 model)"),TCe.forEach(t),bio=i(ae),ch=n(ae,"LI",{});var MCe=s(ch);uae=n(MCe,"STRONG",{});var tWr=s(uae);vio=r(tWr,"maskformer"),tWr.forEach(t),Fio=r(MCe," \u2014 "),gP=n(MCe,"A",{href:!0});var aWr=s(gP);Tio=r(aWr,"MaskFormerFeatureExtractor"),aWr.forEach(t),Mio=r(MCe," (MaskFormer model)"),MCe.forEach(t),Eio=i(ae),fh=n(ae,"LI",{});var ECe=s(fh);_ae=n(ECe,"STRONG",{});var nWr=s(_ae);Cio=r(nWr,"perceiver"),nWr.forEach(t),wio=r(ECe," \u2014 "),hP=n(ECe,"A",{href:!0});var sWr=s(hP);Aio=r(sWr,"PerceiverFeatureExtractor"),sWr.forEach(t),yio=r(ECe," (Perceiver model)"),ECe.forEach(t),Lio=i(ae),mh=n(ae,"LI",{});var CCe=s(mh);bae=n(CCe,"STRONG",{});var lWr=s(bae);xio=r(lWr,"poolformer"),lWr.forEach(t),$io=r(CCe," \u2014 "),pP=n(CCe,"A",{href:!0});var iWr=s(pP);kio=r(iWr,"PoolFormerFeatureExtractor"),iWr.forEach(t),Sio=r(CCe," (PoolFormer model)"),CCe.forEach(t),Rio=i(ae),gh=n(ae,"LI",{});var wCe=s(gh);vae=n(wCe,"STRONG",{});var dWr=s(vae);Bio=r(dWr,"regnet"),dWr.forEach(t),Pio=r(wCe," \u2014 "),uP=n(wCe,"A",{href:!0});var cWr=s(uP);Iio=r(cWr,"ConvNextFeatureExtractor"),cWr.forEach(t),qio=r(wCe," (RegNet model)"),wCe.forEach(t),Nio=i(ae),hh=n(ae,"LI",{});var ACe=s(hh);Fae=n(ACe,"STRONG",{});var fWr=s(Fae);jio=r(fWr,"resnet"),fWr.forEach(t),Dio=r(ACe," \u2014 "),_P=n(ACe,"A",{href:!0});var mWr=s(_P);Gio=r(mWr,"ConvNextFeatureExtractor"),mWr.forEach(t),Oio=r(ACe," (ResNet model)"),ACe.forEach(t),Vio=i(ae),ph=n(ae,"LI",{});var yCe=s(ph);Tae=n(yCe,"STRONG",{});var gWr=s(Tae);Xio=r(gWr,"segformer"),gWr.forEach(t),zio=r(yCe," \u2014 "),bP=n(yCe,"A",{href:!0});var hWr=s(bP);Qio=r(hWr,"SegformerFeatureExtractor"),hWr.forEach(t),Wio=r(yCe," (SegFormer model)"),yCe.forEach(t),Hio=i(ae),uh=n(ae,"LI",{});var LCe=s(uh);Mae=n(LCe,"STRONG",{});var pWr=s(Mae);Uio=r(pWr,"speech_to_text"),pWr.forEach(t),Jio=r(LCe," \u2014 "),vP=n(LCe,"A",{href:!0});var uWr=s(vP);Yio=r(uWr,"Speech2TextFeatureExtractor"),uWr.forEach(t),Kio=r(LCe," (Speech2Text model)"),LCe.forEach(t),Zio=i(ae),_h=n(ae,"LI",{});var xCe=s(_h);Eae=n(xCe,"STRONG",{});var _Wr=s(Eae);edo=r(_Wr,"swin"),_Wr.forEach(t),odo=r(xCe," \u2014 "),FP=n(xCe,"A",{href:!0});var bWr=s(FP);rdo=r(bWr,"ViTFeatureExtractor"),bWr.forEach(t),tdo=r(xCe," (Swin model)"),xCe.forEach(t),ado=i(ae),bh=n(ae,"LI",{});var $Ce=s(bh);Cae=n($Ce,"STRONG",{});var vWr=s(Cae);ndo=r(vWr,"van"),vWr.forEach(t),sdo=r($Ce," \u2014 "),TP=n($Ce,"A",{href:!0});var FWr=s(TP);ldo=r(FWr,"ConvNextFeatureExtractor"),FWr.forEach(t),ido=r($Ce," (VAN model)"),$Ce.forEach(t),ddo=i(ae),vh=n(ae,"LI",{});var kCe=s(vh);wae=n(kCe,"STRONG",{});var TWr=s(wae);cdo=r(TWr,"vit"),TWr.forEach(t),fdo=r(kCe," \u2014 "),MP=n(kCe,"A",{href:!0});var MWr=s(MP);mdo=r(MWr,"ViTFeatureExtractor"),MWr.forEach(t),gdo=r(kCe," (ViT model)"),kCe.forEach(t),hdo=i(ae),Fh=n(ae,"LI",{});var SCe=s(Fh);Aae=n(SCe,"STRONG",{});var EWr=s(Aae);pdo=r(EWr,"vit_mae"),EWr.forEach(t),udo=r(SCe," \u2014 "),EP=n(SCe,"A",{href:!0});var CWr=s(EP);_do=r(CWr,"ViTFeatureExtractor"),CWr.forEach(t),bdo=r(SCe," (ViTMAE model)"),SCe.forEach(t),vdo=i(ae),Th=n(ae,"LI",{});var RCe=s(Th);yae=n(RCe,"STRONG",{});var wWr=s(yae);Fdo=r(wWr,"wav2vec2"),wWr.forEach(t),Tdo=r(RCe," \u2014 "),CP=n(RCe,"A",{href:!0});var AWr=s(CP);Mdo=r(AWr,"Wav2Vec2FeatureExtractor"),AWr.forEach(t),Edo=r(RCe," (Wav2Vec2 model)"),RCe.forEach(t),Cdo=i(ae),Mh=n(ae,"LI",{});var BCe=s(Mh);Lae=n(BCe,"STRONG",{});var yWr=s(Lae);wdo=r(yWr,"yolos"),yWr.forEach(t),Ado=r(BCe," \u2014 "),wP=n(BCe,"A",{href:!0});var LWr=s(wP);ydo=r(LWr,"YolosFeatureExtractor"),LWr.forEach(t),Ldo=r(BCe," (YOLOS model)"),BCe.forEach(t),ae.forEach(t),xdo=i(Yt),T(Eh.$$.fragment,Yt),$do=i(Yt),T(Ch.$$.fragment,Yt),Yt.forEach(t),kdo=i(Ns),wh=n(Ns,"DIV",{class:!0});var dNe=s(wh);T(vA.$$.fragment,dNe),Sdo=i(dNe),xae=n(dNe,"P",{});var xWr=s(xae);Rdo=r(xWr,"Register a new feature extractor for this class."),xWr.forEach(t),dNe.forEach(t),Ns.forEach(t),iIe=i(f),Fi=n(f,"H2",{class:!0});var cNe=s(Fi);Ah=n(cNe,"A",{id:!0,class:!0,href:!0});var $Wr=s(Ah);$ae=n($Wr,"SPAN",{});var kWr=s($ae);T(FA.$$.fragment,kWr),kWr.forEach(t),$Wr.forEach(t),Bdo=i(cNe),kae=n(cNe,"SPAN",{});var SWr=s(kae);Pdo=r(SWr,"AutoProcessor"),SWr.forEach(t),cNe.forEach(t),dIe=i(f),yo=n(f,"DIV",{class:!0});var js=s(yo);T(TA.$$.fragment,js),Ido=i(js),MA=n(js,"P",{});var fNe=s(MA);qdo=r(fNe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),AP=n(fNe,"A",{href:!0});var RWr=s(AP);Ndo=r(RWr,"AutoProcessor.from_pretrained()"),RWr.forEach(t),jdo=r(fNe," class method."),fNe.forEach(t),Ddo=i(js),EA=n(js,"P",{});var mNe=s(EA);Gdo=r(mNe,"This class cannot be instantiated directly using "),Sae=n(mNe,"CODE",{});var BWr=s(Sae);Odo=r(BWr,"__init__()"),BWr.forEach(t),Vdo=r(mNe," (throws an error)."),mNe.forEach(t),Xdo=i(js),We=n(js,"DIV",{class:!0});var Kt=s(We);T(CA.$$.fragment,Kt),zdo=i(Kt),Rae=n(Kt,"P",{});var PWr=s(Rae);Qdo=r(PWr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),PWr.forEach(t),Wdo=i(Kt),Ti=n(Kt,"P",{});var mK=s(Ti);Hdo=r(mK,"The processor class to instantiate is selected based on the "),Bae=n(mK,"CODE",{});var IWr=s(Bae);Udo=r(IWr,"model_type"),IWr.forEach(t),Jdo=r(mK,` property of the config object (either
passed as an argument or loaded from `),Pae=n(mK,"CODE",{});var qWr=s(Pae);Ydo=r(qWr,"pretrained_model_name_or_path"),qWr.forEach(t),Kdo=r(mK," if possible):"),mK.forEach(t),Zdo=i(Kt),be=n(Kt,"UL",{});var ve=s(be);yh=n(ve,"LI",{});var PCe=s(yh);Iae=n(PCe,"STRONG",{});var NWr=s(Iae);eco=r(NWr,"clip"),NWr.forEach(t),oco=r(PCe," \u2014 "),yP=n(PCe,"A",{href:!0});var jWr=s(yP);rco=r(jWr,"CLIPProcessor"),jWr.forEach(t),tco=r(PCe," (CLIP model)"),PCe.forEach(t),aco=i(ve),Lh=n(ve,"LI",{});var ICe=s(Lh);qae=n(ICe,"STRONG",{});var DWr=s(qae);nco=r(DWr,"flava"),DWr.forEach(t),sco=r(ICe," \u2014 "),Nae=n(ICe,"CODE",{});var GWr=s(Nae);lco=r(GWr,"FLAVAProcessor"),GWr.forEach(t),ico=r(ICe," (Flava model)"),ICe.forEach(t),dco=i(ve),xh=n(ve,"LI",{});var qCe=s(xh);jae=n(qCe,"STRONG",{});var OWr=s(jae);cco=r(OWr,"layoutlmv2"),OWr.forEach(t),fco=r(qCe," \u2014 "),LP=n(qCe,"A",{href:!0});var VWr=s(LP);mco=r(VWr,"LayoutLMv2Processor"),VWr.forEach(t),gco=r(qCe," (LayoutLMv2 model)"),qCe.forEach(t),hco=i(ve),$h=n(ve,"LI",{});var NCe=s($h);Dae=n(NCe,"STRONG",{});var XWr=s(Dae);pco=r(XWr,"layoutxlm"),XWr.forEach(t),uco=r(NCe," \u2014 "),xP=n(NCe,"A",{href:!0});var zWr=s(xP);_co=r(zWr,"LayoutXLMProcessor"),zWr.forEach(t),bco=r(NCe," (LayoutXLM model)"),NCe.forEach(t),vco=i(ve),kh=n(ve,"LI",{});var jCe=s(kh);Gae=n(jCe,"STRONG",{});var QWr=s(Gae);Fco=r(QWr,"sew"),QWr.forEach(t),Tco=r(jCe," \u2014 "),$P=n(jCe,"A",{href:!0});var WWr=s($P);Mco=r(WWr,"Wav2Vec2Processor"),WWr.forEach(t),Eco=r(jCe," (SEW model)"),jCe.forEach(t),Cco=i(ve),Sh=n(ve,"LI",{});var DCe=s(Sh);Oae=n(DCe,"STRONG",{});var HWr=s(Oae);wco=r(HWr,"sew-d"),HWr.forEach(t),Aco=r(DCe," \u2014 "),kP=n(DCe,"A",{href:!0});var UWr=s(kP);yco=r(UWr,"Wav2Vec2Processor"),UWr.forEach(t),Lco=r(DCe," (SEW-D model)"),DCe.forEach(t),xco=i(ve),Rh=n(ve,"LI",{});var GCe=s(Rh);Vae=n(GCe,"STRONG",{});var JWr=s(Vae);$co=r(JWr,"speech_to_text"),JWr.forEach(t),kco=r(GCe," \u2014 "),SP=n(GCe,"A",{href:!0});var YWr=s(SP);Sco=r(YWr,"Speech2TextProcessor"),YWr.forEach(t),Rco=r(GCe," (Speech2Text model)"),GCe.forEach(t),Bco=i(ve),Bh=n(ve,"LI",{});var OCe=s(Bh);Xae=n(OCe,"STRONG",{});var KWr=s(Xae);Pco=r(KWr,"speech_to_text_2"),KWr.forEach(t),Ico=r(OCe," \u2014 "),RP=n(OCe,"A",{href:!0});var ZWr=s(RP);qco=r(ZWr,"Speech2Text2Processor"),ZWr.forEach(t),Nco=r(OCe," (Speech2Text2 model)"),OCe.forEach(t),jco=i(ve),Ph=n(ve,"LI",{});var VCe=s(Ph);zae=n(VCe,"STRONG",{});var eHr=s(zae);Dco=r(eHr,"trocr"),eHr.forEach(t),Gco=r(VCe," \u2014 "),BP=n(VCe,"A",{href:!0});var oHr=s(BP);Oco=r(oHr,"TrOCRProcessor"),oHr.forEach(t),Vco=r(VCe," (TrOCR model)"),VCe.forEach(t),Xco=i(ve),Ih=n(ve,"LI",{});var XCe=s(Ih);Qae=n(XCe,"STRONG",{});var rHr=s(Qae);zco=r(rHr,"unispeech"),rHr.forEach(t),Qco=r(XCe," \u2014 "),PP=n(XCe,"A",{href:!0});var tHr=s(PP);Wco=r(tHr,"Wav2Vec2Processor"),tHr.forEach(t),Hco=r(XCe," (UniSpeech model)"),XCe.forEach(t),Uco=i(ve),qh=n(ve,"LI",{});var zCe=s(qh);Wae=n(zCe,"STRONG",{});var aHr=s(Wae);Jco=r(aHr,"unispeech-sat"),aHr.forEach(t),Yco=r(zCe," \u2014 "),IP=n(zCe,"A",{href:!0});var nHr=s(IP);Kco=r(nHr,"Wav2Vec2Processor"),nHr.forEach(t),Zco=r(zCe," (UniSpeechSat model)"),zCe.forEach(t),efo=i(ve),Nh=n(ve,"LI",{});var QCe=s(Nh);Hae=n(QCe,"STRONG",{});var sHr=s(Hae);ofo=r(sHr,"vilt"),sHr.forEach(t),rfo=r(QCe," \u2014 "),qP=n(QCe,"A",{href:!0});var lHr=s(qP);tfo=r(lHr,"ViltProcessor"),lHr.forEach(t),afo=r(QCe," (ViLT model)"),QCe.forEach(t),nfo=i(ve),jh=n(ve,"LI",{});var WCe=s(jh);Uae=n(WCe,"STRONG",{});var iHr=s(Uae);sfo=r(iHr,"vision-text-dual-encoder"),iHr.forEach(t),lfo=r(WCe," \u2014 "),NP=n(WCe,"A",{href:!0});var dHr=s(NP);ifo=r(dHr,"VisionTextDualEncoderProcessor"),dHr.forEach(t),dfo=r(WCe," (VisionTextDualEncoder model)"),WCe.forEach(t),cfo=i(ve),Dh=n(ve,"LI",{});var HCe=s(Dh);Jae=n(HCe,"STRONG",{});var cHr=s(Jae);ffo=r(cHr,"wav2vec2"),cHr.forEach(t),mfo=r(HCe," \u2014 "),jP=n(HCe,"A",{href:!0});var fHr=s(jP);gfo=r(fHr,"Wav2Vec2Processor"),fHr.forEach(t),hfo=r(HCe," (Wav2Vec2 model)"),HCe.forEach(t),pfo=i(ve),Gh=n(ve,"LI",{});var UCe=s(Gh);Yae=n(UCe,"STRONG",{});var mHr=s(Yae);ufo=r(mHr,"wavlm"),mHr.forEach(t),_fo=r(UCe," \u2014 "),DP=n(UCe,"A",{href:!0});var gHr=s(DP);bfo=r(gHr,"Wav2Vec2Processor"),gHr.forEach(t),vfo=r(UCe," (WavLM model)"),UCe.forEach(t),ve.forEach(t),Ffo=i(Kt),T(Oh.$$.fragment,Kt),Tfo=i(Kt),T(Vh.$$.fragment,Kt),Kt.forEach(t),Mfo=i(js),Xh=n(js,"DIV",{class:!0});var gNe=s(Xh);T(wA.$$.fragment,gNe),Efo=i(gNe),Kae=n(gNe,"P",{});var hHr=s(Kae);Cfo=r(hHr,"Register a new processor for this class."),hHr.forEach(t),gNe.forEach(t),js.forEach(t),cIe=i(f),Mi=n(f,"H2",{class:!0});var hNe=s(Mi);zh=n(hNe,"A",{id:!0,class:!0,href:!0});var pHr=s(zh);Zae=n(pHr,"SPAN",{});var uHr=s(Zae);T(AA.$$.fragment,uHr),uHr.forEach(t),pHr.forEach(t),wfo=i(hNe),ene=n(hNe,"SPAN",{});var _Hr=s(ene);Afo=r(_Hr,"AutoModel"),_Hr.forEach(t),hNe.forEach(t),fIe=i(f),Lo=n(f,"DIV",{class:!0});var Ds=s(Lo);T(yA.$$.fragment,Ds),yfo=i(Ds),Ei=n(Ds,"P",{});var gK=s(Ei);Lfo=r(gK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),GP=n(gK,"A",{href:!0});var bHr=s(GP);xfo=r(bHr,"from_pretrained()"),bHr.forEach(t),$fo=r(gK," class method or the "),OP=n(gK,"A",{href:!0});var vHr=s(OP);kfo=r(vHr,"from_config()"),vHr.forEach(t),Sfo=r(gK,` class
method.`),gK.forEach(t),Rfo=i(Ds),LA=n(Ds,"P",{});var pNe=s(LA);Bfo=r(pNe,"This class cannot be instantiated directly using "),one=n(pNe,"CODE",{});var FHr=s(one);Pfo=r(FHr,"__init__()"),FHr.forEach(t),Ifo=r(pNe," (throws an error)."),pNe.forEach(t),qfo=i(Ds),ot=n(Ds,"DIV",{class:!0});var r3=s(ot);T(xA.$$.fragment,r3),Nfo=i(r3),rne=n(r3,"P",{});var THr=s(rne);jfo=r(THr,"Instantiates one of the base model classes of the library from a configuration."),THr.forEach(t),Dfo=i(r3),Ci=n(r3,"P",{});var hK=s(Ci);Gfo=r(hK,`Note:
Loading a model from its configuration file does `),tne=n(hK,"STRONG",{});var MHr=s(tne);Ofo=r(MHr,"not"),MHr.forEach(t),Vfo=r(hK,` load the model weights. It only affects the
model\u2019s configuration. Use `),VP=n(hK,"A",{href:!0});var EHr=s(VP);Xfo=r(EHr,"from_pretrained()"),EHr.forEach(t),zfo=r(hK," to load the model weights."),hK.forEach(t),Qfo=i(r3),T(Qh.$$.fragment,r3),r3.forEach(t),Wfo=i(Ds),He=n(Ds,"DIV",{class:!0});var Zt=s(He);T($A.$$.fragment,Zt),Hfo=i(Zt),ane=n(Zt,"P",{});var CHr=s(ane);Ufo=r(CHr,"Instantiate one of the base model classes of the library from a pretrained model."),CHr.forEach(t),Jfo=i(Zt),Aa=n(Zt,"P",{});var t3=s(Aa);Yfo=r(t3,"The model class to instantiate is selected based on the "),nne=n(t3,"CODE",{});var wHr=s(nne);Kfo=r(wHr,"model_type"),wHr.forEach(t),Zfo=r(t3,` property of the config object (either
passed as an argument or loaded from `),sne=n(t3,"CODE",{});var AHr=s(sne);emo=r(AHr,"pretrained_model_name_or_path"),AHr.forEach(t),omo=r(t3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lne=n(t3,"CODE",{});var yHr=s(lne);rmo=r(yHr,"pretrained_model_name_or_path"),yHr.forEach(t),tmo=r(t3,":"),t3.forEach(t),amo=i(Zt),x=n(Zt,"UL",{});var $=s(x);Wh=n($,"LI",{});var JCe=s(Wh);ine=n(JCe,"STRONG",{});var LHr=s(ine);nmo=r(LHr,"albert"),LHr.forEach(t),smo=r(JCe," \u2014 "),XP=n(JCe,"A",{href:!0});var xHr=s(XP);lmo=r(xHr,"AlbertModel"),xHr.forEach(t),imo=r(JCe," (ALBERT model)"),JCe.forEach(t),dmo=i($),Hh=n($,"LI",{});var YCe=s(Hh);dne=n(YCe,"STRONG",{});var $Hr=s(dne);cmo=r($Hr,"bart"),$Hr.forEach(t),fmo=r(YCe," \u2014 "),zP=n(YCe,"A",{href:!0});var kHr=s(zP);mmo=r(kHr,"BartModel"),kHr.forEach(t),gmo=r(YCe," (BART model)"),YCe.forEach(t),hmo=i($),Uh=n($,"LI",{});var KCe=s(Uh);cne=n(KCe,"STRONG",{});var SHr=s(cne);pmo=r(SHr,"beit"),SHr.forEach(t),umo=r(KCe," \u2014 "),QP=n(KCe,"A",{href:!0});var RHr=s(QP);_mo=r(RHr,"BeitModel"),RHr.forEach(t),bmo=r(KCe," (BEiT model)"),KCe.forEach(t),vmo=i($),Jh=n($,"LI",{});var ZCe=s(Jh);fne=n(ZCe,"STRONG",{});var BHr=s(fne);Fmo=r(BHr,"bert"),BHr.forEach(t),Tmo=r(ZCe," \u2014 "),WP=n(ZCe,"A",{href:!0});var PHr=s(WP);Mmo=r(PHr,"BertModel"),PHr.forEach(t),Emo=r(ZCe," (BERT model)"),ZCe.forEach(t),Cmo=i($),Yh=n($,"LI",{});var e3e=s(Yh);mne=n(e3e,"STRONG",{});var IHr=s(mne);wmo=r(IHr,"bert-generation"),IHr.forEach(t),Amo=r(e3e," \u2014 "),HP=n(e3e,"A",{href:!0});var qHr=s(HP);ymo=r(qHr,"BertGenerationEncoder"),qHr.forEach(t),Lmo=r(e3e," (Bert Generation model)"),e3e.forEach(t),xmo=i($),Kh=n($,"LI",{});var o3e=s(Kh);gne=n(o3e,"STRONG",{});var NHr=s(gne);$mo=r(NHr,"big_bird"),NHr.forEach(t),kmo=r(o3e," \u2014 "),UP=n(o3e,"A",{href:!0});var jHr=s(UP);Smo=r(jHr,"BigBirdModel"),jHr.forEach(t),Rmo=r(o3e," (BigBird model)"),o3e.forEach(t),Bmo=i($),Zh=n($,"LI",{});var r3e=s(Zh);hne=n(r3e,"STRONG",{});var DHr=s(hne);Pmo=r(DHr,"bigbird_pegasus"),DHr.forEach(t),Imo=r(r3e," \u2014 "),JP=n(r3e,"A",{href:!0});var GHr=s(JP);qmo=r(GHr,"BigBirdPegasusModel"),GHr.forEach(t),Nmo=r(r3e," (BigBirdPegasus model)"),r3e.forEach(t),jmo=i($),ep=n($,"LI",{});var t3e=s(ep);pne=n(t3e,"STRONG",{});var OHr=s(pne);Dmo=r(OHr,"blenderbot"),OHr.forEach(t),Gmo=r(t3e," \u2014 "),YP=n(t3e,"A",{href:!0});var VHr=s(YP);Omo=r(VHr,"BlenderbotModel"),VHr.forEach(t),Vmo=r(t3e," (Blenderbot model)"),t3e.forEach(t),Xmo=i($),op=n($,"LI",{});var a3e=s(op);une=n(a3e,"STRONG",{});var XHr=s(une);zmo=r(XHr,"blenderbot-small"),XHr.forEach(t),Qmo=r(a3e," \u2014 "),KP=n(a3e,"A",{href:!0});var zHr=s(KP);Wmo=r(zHr,"BlenderbotSmallModel"),zHr.forEach(t),Hmo=r(a3e," (BlenderbotSmall model)"),a3e.forEach(t),Umo=i($),rp=n($,"LI",{});var n3e=s(rp);_ne=n(n3e,"STRONG",{});var QHr=s(_ne);Jmo=r(QHr,"camembert"),QHr.forEach(t),Ymo=r(n3e," \u2014 "),ZP=n(n3e,"A",{href:!0});var WHr=s(ZP);Kmo=r(WHr,"CamembertModel"),WHr.forEach(t),Zmo=r(n3e," (CamemBERT model)"),n3e.forEach(t),ego=i($),tp=n($,"LI",{});var s3e=s(tp);bne=n(s3e,"STRONG",{});var HHr=s(bne);ogo=r(HHr,"canine"),HHr.forEach(t),rgo=r(s3e," \u2014 "),eI=n(s3e,"A",{href:!0});var UHr=s(eI);tgo=r(UHr,"CanineModel"),UHr.forEach(t),ago=r(s3e," (Canine model)"),s3e.forEach(t),ngo=i($),ap=n($,"LI",{});var l3e=s(ap);vne=n(l3e,"STRONG",{});var JHr=s(vne);sgo=r(JHr,"clip"),JHr.forEach(t),lgo=r(l3e," \u2014 "),oI=n(l3e,"A",{href:!0});var YHr=s(oI);igo=r(YHr,"CLIPModel"),YHr.forEach(t),dgo=r(l3e," (CLIP model)"),l3e.forEach(t),cgo=i($),np=n($,"LI",{});var i3e=s(np);Fne=n(i3e,"STRONG",{});var KHr=s(Fne);fgo=r(KHr,"convbert"),KHr.forEach(t),mgo=r(i3e," \u2014 "),rI=n(i3e,"A",{href:!0});var ZHr=s(rI);ggo=r(ZHr,"ConvBertModel"),ZHr.forEach(t),hgo=r(i3e," (ConvBERT model)"),i3e.forEach(t),pgo=i($),sp=n($,"LI",{});var d3e=s(sp);Tne=n(d3e,"STRONG",{});var eUr=s(Tne);ugo=r(eUr,"convnext"),eUr.forEach(t),_go=r(d3e," \u2014 "),tI=n(d3e,"A",{href:!0});var oUr=s(tI);bgo=r(oUr,"ConvNextModel"),oUr.forEach(t),vgo=r(d3e," (ConvNext model)"),d3e.forEach(t),Fgo=i($),lp=n($,"LI",{});var c3e=s(lp);Mne=n(c3e,"STRONG",{});var rUr=s(Mne);Tgo=r(rUr,"ctrl"),rUr.forEach(t),Mgo=r(c3e," \u2014 "),aI=n(c3e,"A",{href:!0});var tUr=s(aI);Ego=r(tUr,"CTRLModel"),tUr.forEach(t),Cgo=r(c3e," (CTRL model)"),c3e.forEach(t),wgo=i($),ip=n($,"LI",{});var f3e=s(ip);Ene=n(f3e,"STRONG",{});var aUr=s(Ene);Ago=r(aUr,"data2vec-audio"),aUr.forEach(t),ygo=r(f3e," \u2014 "),nI=n(f3e,"A",{href:!0});var nUr=s(nI);Lgo=r(nUr,"Data2VecAudioModel"),nUr.forEach(t),xgo=r(f3e," (Data2VecAudio model)"),f3e.forEach(t),$go=i($),dp=n($,"LI",{});var m3e=s(dp);Cne=n(m3e,"STRONG",{});var sUr=s(Cne);kgo=r(sUr,"data2vec-text"),sUr.forEach(t),Sgo=r(m3e," \u2014 "),sI=n(m3e,"A",{href:!0});var lUr=s(sI);Rgo=r(lUr,"Data2VecTextModel"),lUr.forEach(t),Bgo=r(m3e," (Data2VecText model)"),m3e.forEach(t),Pgo=i($),cp=n($,"LI",{});var g3e=s(cp);wne=n(g3e,"STRONG",{});var iUr=s(wne);Igo=r(iUr,"data2vec-vision"),iUr.forEach(t),qgo=r(g3e," \u2014 "),lI=n(g3e,"A",{href:!0});var dUr=s(lI);Ngo=r(dUr,"Data2VecVisionModel"),dUr.forEach(t),jgo=r(g3e," (Data2VecVision model)"),g3e.forEach(t),Dgo=i($),fp=n($,"LI",{});var h3e=s(fp);Ane=n(h3e,"STRONG",{});var cUr=s(Ane);Ggo=r(cUr,"deberta"),cUr.forEach(t),Ogo=r(h3e," \u2014 "),iI=n(h3e,"A",{href:!0});var fUr=s(iI);Vgo=r(fUr,"DebertaModel"),fUr.forEach(t),Xgo=r(h3e," (DeBERTa model)"),h3e.forEach(t),zgo=i($),mp=n($,"LI",{});var p3e=s(mp);yne=n(p3e,"STRONG",{});var mUr=s(yne);Qgo=r(mUr,"deberta-v2"),mUr.forEach(t),Wgo=r(p3e," \u2014 "),dI=n(p3e,"A",{href:!0});var gUr=s(dI);Hgo=r(gUr,"DebertaV2Model"),gUr.forEach(t),Ugo=r(p3e," (DeBERTa-v2 model)"),p3e.forEach(t),Jgo=i($),gp=n($,"LI",{});var u3e=s(gp);Lne=n(u3e,"STRONG",{});var hUr=s(Lne);Ygo=r(hUr,"decision_transformer"),hUr.forEach(t),Kgo=r(u3e," \u2014 "),cI=n(u3e,"A",{href:!0});var pUr=s(cI);Zgo=r(pUr,"DecisionTransformerModel"),pUr.forEach(t),eho=r(u3e," (Decision Transformer model)"),u3e.forEach(t),oho=i($),hp=n($,"LI",{});var _3e=s(hp);xne=n(_3e,"STRONG",{});var uUr=s(xne);rho=r(uUr,"deit"),uUr.forEach(t),tho=r(_3e," \u2014 "),fI=n(_3e,"A",{href:!0});var _Ur=s(fI);aho=r(_Ur,"DeiTModel"),_Ur.forEach(t),nho=r(_3e," (DeiT model)"),_3e.forEach(t),sho=i($),pp=n($,"LI",{});var b3e=s(pp);$ne=n(b3e,"STRONG",{});var bUr=s($ne);lho=r(bUr,"detr"),bUr.forEach(t),iho=r(b3e," \u2014 "),mI=n(b3e,"A",{href:!0});var vUr=s(mI);dho=r(vUr,"DetrModel"),vUr.forEach(t),cho=r(b3e," (DETR model)"),b3e.forEach(t),fho=i($),up=n($,"LI",{});var v3e=s(up);kne=n(v3e,"STRONG",{});var FUr=s(kne);mho=r(FUr,"distilbert"),FUr.forEach(t),gho=r(v3e," \u2014 "),gI=n(v3e,"A",{href:!0});var TUr=s(gI);hho=r(TUr,"DistilBertModel"),TUr.forEach(t),pho=r(v3e," (DistilBERT model)"),v3e.forEach(t),uho=i($),_p=n($,"LI",{});var F3e=s(_p);Sne=n(F3e,"STRONG",{});var MUr=s(Sne);_ho=r(MUr,"dpr"),MUr.forEach(t),bho=r(F3e," \u2014 "),hI=n(F3e,"A",{href:!0});var EUr=s(hI);vho=r(EUr,"DPRQuestionEncoder"),EUr.forEach(t),Fho=r(F3e," (DPR model)"),F3e.forEach(t),Tho=i($),bp=n($,"LI",{});var T3e=s(bp);Rne=n(T3e,"STRONG",{});var CUr=s(Rne);Mho=r(CUr,"dpt"),CUr.forEach(t),Eho=r(T3e," \u2014 "),pI=n(T3e,"A",{href:!0});var wUr=s(pI);Cho=r(wUr,"DPTModel"),wUr.forEach(t),who=r(T3e," (DPT model)"),T3e.forEach(t),Aho=i($),vp=n($,"LI",{});var M3e=s(vp);Bne=n(M3e,"STRONG",{});var AUr=s(Bne);yho=r(AUr,"electra"),AUr.forEach(t),Lho=r(M3e," \u2014 "),uI=n(M3e,"A",{href:!0});var yUr=s(uI);xho=r(yUr,"ElectraModel"),yUr.forEach(t),$ho=r(M3e," (ELECTRA model)"),M3e.forEach(t),kho=i($),Fp=n($,"LI",{});var E3e=s(Fp);Pne=n(E3e,"STRONG",{});var LUr=s(Pne);Sho=r(LUr,"flaubert"),LUr.forEach(t),Rho=r(E3e," \u2014 "),_I=n(E3e,"A",{href:!0});var xUr=s(_I);Bho=r(xUr,"FlaubertModel"),xUr.forEach(t),Pho=r(E3e," (FlauBERT model)"),E3e.forEach(t),Iho=i($),Tp=n($,"LI",{});var C3e=s(Tp);Ine=n(C3e,"STRONG",{});var $Ur=s(Ine);qho=r($Ur,"flava"),$Ur.forEach(t),Nho=r(C3e," \u2014 "),bI=n(C3e,"A",{href:!0});var kUr=s(bI);jho=r(kUr,"FlavaModel"),kUr.forEach(t),Dho=r(C3e," (Flava model)"),C3e.forEach(t),Gho=i($),Mp=n($,"LI",{});var w3e=s(Mp);qne=n(w3e,"STRONG",{});var SUr=s(qne);Oho=r(SUr,"fnet"),SUr.forEach(t),Vho=r(w3e," \u2014 "),vI=n(w3e,"A",{href:!0});var RUr=s(vI);Xho=r(RUr,"FNetModel"),RUr.forEach(t),zho=r(w3e," (FNet model)"),w3e.forEach(t),Qho=i($),Ep=n($,"LI",{});var A3e=s(Ep);Nne=n(A3e,"STRONG",{});var BUr=s(Nne);Who=r(BUr,"fsmt"),BUr.forEach(t),Hho=r(A3e," \u2014 "),FI=n(A3e,"A",{href:!0});var PUr=s(FI);Uho=r(PUr,"FSMTModel"),PUr.forEach(t),Jho=r(A3e," (FairSeq Machine-Translation model)"),A3e.forEach(t),Yho=i($),Rs=n($,"LI",{});var h$=s(Rs);jne=n(h$,"STRONG",{});var IUr=s(jne);Kho=r(IUr,"funnel"),IUr.forEach(t),Zho=r(h$," \u2014 "),TI=n(h$,"A",{href:!0});var qUr=s(TI);epo=r(qUr,"FunnelModel"),qUr.forEach(t),opo=r(h$," or "),MI=n(h$,"A",{href:!0});var NUr=s(MI);rpo=r(NUr,"FunnelBaseModel"),NUr.forEach(t),tpo=r(h$," (Funnel Transformer model)"),h$.forEach(t),apo=i($),Cp=n($,"LI",{});var y3e=s(Cp);Dne=n(y3e,"STRONG",{});var jUr=s(Dne);npo=r(jUr,"glpn"),jUr.forEach(t),spo=r(y3e," \u2014 "),EI=n(y3e,"A",{href:!0});var DUr=s(EI);lpo=r(DUr,"GLPNModel"),DUr.forEach(t),ipo=r(y3e," (GLPN model)"),y3e.forEach(t),dpo=i($),wp=n($,"LI",{});var L3e=s(wp);Gne=n(L3e,"STRONG",{});var GUr=s(Gne);cpo=r(GUr,"gpt2"),GUr.forEach(t),fpo=r(L3e," \u2014 "),CI=n(L3e,"A",{href:!0});var OUr=s(CI);mpo=r(OUr,"GPT2Model"),OUr.forEach(t),gpo=r(L3e," (OpenAI GPT-2 model)"),L3e.forEach(t),hpo=i($),Ap=n($,"LI",{});var x3e=s(Ap);One=n(x3e,"STRONG",{});var VUr=s(One);ppo=r(VUr,"gpt_neo"),VUr.forEach(t),upo=r(x3e," \u2014 "),wI=n(x3e,"A",{href:!0});var XUr=s(wI);_po=r(XUr,"GPTNeoModel"),XUr.forEach(t),bpo=r(x3e," (GPT Neo model)"),x3e.forEach(t),vpo=i($),yp=n($,"LI",{});var $3e=s(yp);Vne=n($3e,"STRONG",{});var zUr=s(Vne);Fpo=r(zUr,"gptj"),zUr.forEach(t),Tpo=r($3e," \u2014 "),AI=n($3e,"A",{href:!0});var QUr=s(AI);Mpo=r(QUr,"GPTJModel"),QUr.forEach(t),Epo=r($3e," (GPT-J model)"),$3e.forEach(t),Cpo=i($),Lp=n($,"LI",{});var k3e=s(Lp);Xne=n(k3e,"STRONG",{});var WUr=s(Xne);wpo=r(WUr,"hubert"),WUr.forEach(t),Apo=r(k3e," \u2014 "),yI=n(k3e,"A",{href:!0});var HUr=s(yI);ypo=r(HUr,"HubertModel"),HUr.forEach(t),Lpo=r(k3e," (Hubert model)"),k3e.forEach(t),xpo=i($),xp=n($,"LI",{});var S3e=s(xp);zne=n(S3e,"STRONG",{});var UUr=s(zne);$po=r(UUr,"ibert"),UUr.forEach(t),kpo=r(S3e," \u2014 "),LI=n(S3e,"A",{href:!0});var JUr=s(LI);Spo=r(JUr,"IBertModel"),JUr.forEach(t),Rpo=r(S3e," (I-BERT model)"),S3e.forEach(t),Bpo=i($),$p=n($,"LI",{});var R3e=s($p);Qne=n(R3e,"STRONG",{});var YUr=s(Qne);Ppo=r(YUr,"imagegpt"),YUr.forEach(t),Ipo=r(R3e," \u2014 "),xI=n(R3e,"A",{href:!0});var KUr=s(xI);qpo=r(KUr,"ImageGPTModel"),KUr.forEach(t),Npo=r(R3e," (ImageGPT model)"),R3e.forEach(t),jpo=i($),kp=n($,"LI",{});var B3e=s(kp);Wne=n(B3e,"STRONG",{});var ZUr=s(Wne);Dpo=r(ZUr,"layoutlm"),ZUr.forEach(t),Gpo=r(B3e," \u2014 "),$I=n(B3e,"A",{href:!0});var eJr=s($I);Opo=r(eJr,"LayoutLMModel"),eJr.forEach(t),Vpo=r(B3e," (LayoutLM model)"),B3e.forEach(t),Xpo=i($),Sp=n($,"LI",{});var P3e=s(Sp);Hne=n(P3e,"STRONG",{});var oJr=s(Hne);zpo=r(oJr,"layoutlmv2"),oJr.forEach(t),Qpo=r(P3e," \u2014 "),kI=n(P3e,"A",{href:!0});var rJr=s(kI);Wpo=r(rJr,"LayoutLMv2Model"),rJr.forEach(t),Hpo=r(P3e," (LayoutLMv2 model)"),P3e.forEach(t),Upo=i($),Rp=n($,"LI",{});var I3e=s(Rp);Une=n(I3e,"STRONG",{});var tJr=s(Une);Jpo=r(tJr,"led"),tJr.forEach(t),Ypo=r(I3e," \u2014 "),SI=n(I3e,"A",{href:!0});var aJr=s(SI);Kpo=r(aJr,"LEDModel"),aJr.forEach(t),Zpo=r(I3e," (LED model)"),I3e.forEach(t),euo=i($),Bp=n($,"LI",{});var q3e=s(Bp);Jne=n(q3e,"STRONG",{});var nJr=s(Jne);ouo=r(nJr,"longformer"),nJr.forEach(t),ruo=r(q3e," \u2014 "),RI=n(q3e,"A",{href:!0});var sJr=s(RI);tuo=r(sJr,"LongformerModel"),sJr.forEach(t),auo=r(q3e," (Longformer model)"),q3e.forEach(t),nuo=i($),Pp=n($,"LI",{});var N3e=s(Pp);Yne=n(N3e,"STRONG",{});var lJr=s(Yne);suo=r(lJr,"luke"),lJr.forEach(t),luo=r(N3e," \u2014 "),BI=n(N3e,"A",{href:!0});var iJr=s(BI);iuo=r(iJr,"LukeModel"),iJr.forEach(t),duo=r(N3e," (LUKE model)"),N3e.forEach(t),cuo=i($),Ip=n($,"LI",{});var j3e=s(Ip);Kne=n(j3e,"STRONG",{});var dJr=s(Kne);fuo=r(dJr,"lxmert"),dJr.forEach(t),muo=r(j3e," \u2014 "),PI=n(j3e,"A",{href:!0});var cJr=s(PI);guo=r(cJr,"LxmertModel"),cJr.forEach(t),huo=r(j3e," (LXMERT model)"),j3e.forEach(t),puo=i($),qp=n($,"LI",{});var D3e=s(qp);Zne=n(D3e,"STRONG",{});var fJr=s(Zne);uuo=r(fJr,"m2m_100"),fJr.forEach(t),_uo=r(D3e," \u2014 "),II=n(D3e,"A",{href:!0});var mJr=s(II);buo=r(mJr,"M2M100Model"),mJr.forEach(t),vuo=r(D3e," (M2M100 model)"),D3e.forEach(t),Fuo=i($),Np=n($,"LI",{});var G3e=s(Np);ese=n(G3e,"STRONG",{});var gJr=s(ese);Tuo=r(gJr,"marian"),gJr.forEach(t),Muo=r(G3e," \u2014 "),qI=n(G3e,"A",{href:!0});var hJr=s(qI);Euo=r(hJr,"MarianModel"),hJr.forEach(t),Cuo=r(G3e," (Marian model)"),G3e.forEach(t),wuo=i($),jp=n($,"LI",{});var O3e=s(jp);ose=n(O3e,"STRONG",{});var pJr=s(ose);Auo=r(pJr,"maskformer"),pJr.forEach(t),yuo=r(O3e," \u2014 "),NI=n(O3e,"A",{href:!0});var uJr=s(NI);Luo=r(uJr,"MaskFormerModel"),uJr.forEach(t),xuo=r(O3e," (MaskFormer model)"),O3e.forEach(t),$uo=i($),Dp=n($,"LI",{});var V3e=s(Dp);rse=n(V3e,"STRONG",{});var _Jr=s(rse);kuo=r(_Jr,"mbart"),_Jr.forEach(t),Suo=r(V3e," \u2014 "),jI=n(V3e,"A",{href:!0});var bJr=s(jI);Ruo=r(bJr,"MBartModel"),bJr.forEach(t),Buo=r(V3e," (mBART model)"),V3e.forEach(t),Puo=i($),Gp=n($,"LI",{});var X3e=s(Gp);tse=n(X3e,"STRONG",{});var vJr=s(tse);Iuo=r(vJr,"megatron-bert"),vJr.forEach(t),quo=r(X3e," \u2014 "),DI=n(X3e,"A",{href:!0});var FJr=s(DI);Nuo=r(FJr,"MegatronBertModel"),FJr.forEach(t),juo=r(X3e," (MegatronBert model)"),X3e.forEach(t),Duo=i($),Op=n($,"LI",{});var z3e=s(Op);ase=n(z3e,"STRONG",{});var TJr=s(ase);Guo=r(TJr,"mobilebert"),TJr.forEach(t),Ouo=r(z3e," \u2014 "),GI=n(z3e,"A",{href:!0});var MJr=s(GI);Vuo=r(MJr,"MobileBertModel"),MJr.forEach(t),Xuo=r(z3e," (MobileBERT model)"),z3e.forEach(t),zuo=i($),Vp=n($,"LI",{});var Q3e=s(Vp);nse=n(Q3e,"STRONG",{});var EJr=s(nse);Quo=r(EJr,"mpnet"),EJr.forEach(t),Wuo=r(Q3e," \u2014 "),OI=n(Q3e,"A",{href:!0});var CJr=s(OI);Huo=r(CJr,"MPNetModel"),CJr.forEach(t),Uuo=r(Q3e," (MPNet model)"),Q3e.forEach(t),Juo=i($),Xp=n($,"LI",{});var W3e=s(Xp);sse=n(W3e,"STRONG",{});var wJr=s(sse);Yuo=r(wJr,"mt5"),wJr.forEach(t),Kuo=r(W3e," \u2014 "),VI=n(W3e,"A",{href:!0});var AJr=s(VI);Zuo=r(AJr,"MT5Model"),AJr.forEach(t),e_o=r(W3e," (mT5 model)"),W3e.forEach(t),o_o=i($),zp=n($,"LI",{});var H3e=s(zp);lse=n(H3e,"STRONG",{});var yJr=s(lse);r_o=r(yJr,"nystromformer"),yJr.forEach(t),t_o=r(H3e," \u2014 "),XI=n(H3e,"A",{href:!0});var LJr=s(XI);a_o=r(LJr,"NystromformerModel"),LJr.forEach(t),n_o=r(H3e," (Nystromformer model)"),H3e.forEach(t),s_o=i($),Qp=n($,"LI",{});var U3e=s(Qp);ise=n(U3e,"STRONG",{});var xJr=s(ise);l_o=r(xJr,"openai-gpt"),xJr.forEach(t),i_o=r(U3e," \u2014 "),zI=n(U3e,"A",{href:!0});var $Jr=s(zI);d_o=r($Jr,"OpenAIGPTModel"),$Jr.forEach(t),c_o=r(U3e," (OpenAI GPT model)"),U3e.forEach(t),f_o=i($),Wp=n($,"LI",{});var J3e=s(Wp);dse=n(J3e,"STRONG",{});var kJr=s(dse);m_o=r(kJr,"opt"),kJr.forEach(t),g_o=r(J3e," \u2014 "),QI=n(J3e,"A",{href:!0});var SJr=s(QI);h_o=r(SJr,"OPTModel"),SJr.forEach(t),p_o=r(J3e," (OPT model)"),J3e.forEach(t),u_o=i($),Hp=n($,"LI",{});var Y3e=s(Hp);cse=n(Y3e,"STRONG",{});var RJr=s(cse);__o=r(RJr,"pegasus"),RJr.forEach(t),b_o=r(Y3e," \u2014 "),WI=n(Y3e,"A",{href:!0});var BJr=s(WI);v_o=r(BJr,"PegasusModel"),BJr.forEach(t),F_o=r(Y3e," (Pegasus model)"),Y3e.forEach(t),T_o=i($),Up=n($,"LI",{});var K3e=s(Up);fse=n(K3e,"STRONG",{});var PJr=s(fse);M_o=r(PJr,"perceiver"),PJr.forEach(t),E_o=r(K3e," \u2014 "),HI=n(K3e,"A",{href:!0});var IJr=s(HI);C_o=r(IJr,"PerceiverModel"),IJr.forEach(t),w_o=r(K3e," (Perceiver model)"),K3e.forEach(t),A_o=i($),Jp=n($,"LI",{});var Z3e=s(Jp);mse=n(Z3e,"STRONG",{});var qJr=s(mse);y_o=r(qJr,"plbart"),qJr.forEach(t),L_o=r(Z3e," \u2014 "),UI=n(Z3e,"A",{href:!0});var NJr=s(UI);x_o=r(NJr,"PLBartModel"),NJr.forEach(t),$_o=r(Z3e," (PLBart model)"),Z3e.forEach(t),k_o=i($),Yp=n($,"LI",{});var ewe=s(Yp);gse=n(ewe,"STRONG",{});var jJr=s(gse);S_o=r(jJr,"poolformer"),jJr.forEach(t),R_o=r(ewe," \u2014 "),JI=n(ewe,"A",{href:!0});var DJr=s(JI);B_o=r(DJr,"PoolFormerModel"),DJr.forEach(t),P_o=r(ewe," (PoolFormer model)"),ewe.forEach(t),I_o=i($),Kp=n($,"LI",{});var owe=s(Kp);hse=n(owe,"STRONG",{});var GJr=s(hse);q_o=r(GJr,"prophetnet"),GJr.forEach(t),N_o=r(owe," \u2014 "),YI=n(owe,"A",{href:!0});var OJr=s(YI);j_o=r(OJr,"ProphetNetModel"),OJr.forEach(t),D_o=r(owe," (ProphetNet model)"),owe.forEach(t),G_o=i($),Zp=n($,"LI",{});var rwe=s(Zp);pse=n(rwe,"STRONG",{});var VJr=s(pse);O_o=r(VJr,"qdqbert"),VJr.forEach(t),V_o=r(rwe," \u2014 "),KI=n(rwe,"A",{href:!0});var XJr=s(KI);X_o=r(XJr,"QDQBertModel"),XJr.forEach(t),z_o=r(rwe," (QDQBert model)"),rwe.forEach(t),Q_o=i($),eu=n($,"LI",{});var twe=s(eu);use=n(twe,"STRONG",{});var zJr=s(use);W_o=r(zJr,"reformer"),zJr.forEach(t),H_o=r(twe," \u2014 "),ZI=n(twe,"A",{href:!0});var QJr=s(ZI);U_o=r(QJr,"ReformerModel"),QJr.forEach(t),J_o=r(twe," (Reformer model)"),twe.forEach(t),Y_o=i($),ou=n($,"LI",{});var awe=s(ou);_se=n(awe,"STRONG",{});var WJr=s(_se);K_o=r(WJr,"regnet"),WJr.forEach(t),Z_o=r(awe," \u2014 "),eq=n(awe,"A",{href:!0});var HJr=s(eq);e1o=r(HJr,"RegNetModel"),HJr.forEach(t),o1o=r(awe," (RegNet model)"),awe.forEach(t),r1o=i($),ru=n($,"LI",{});var nwe=s(ru);bse=n(nwe,"STRONG",{});var UJr=s(bse);t1o=r(UJr,"rembert"),UJr.forEach(t),a1o=r(nwe," \u2014 "),oq=n(nwe,"A",{href:!0});var JJr=s(oq);n1o=r(JJr,"RemBertModel"),JJr.forEach(t),s1o=r(nwe," (RemBERT model)"),nwe.forEach(t),l1o=i($),tu=n($,"LI",{});var swe=s(tu);vse=n(swe,"STRONG",{});var YJr=s(vse);i1o=r(YJr,"resnet"),YJr.forEach(t),d1o=r(swe," \u2014 "),rq=n(swe,"A",{href:!0});var KJr=s(rq);c1o=r(KJr,"ResNetModel"),KJr.forEach(t),f1o=r(swe," (ResNet model)"),swe.forEach(t),m1o=i($),au=n($,"LI",{});var lwe=s(au);Fse=n(lwe,"STRONG",{});var ZJr=s(Fse);g1o=r(ZJr,"retribert"),ZJr.forEach(t),h1o=r(lwe," \u2014 "),tq=n(lwe,"A",{href:!0});var eYr=s(tq);p1o=r(eYr,"RetriBertModel"),eYr.forEach(t),u1o=r(lwe," (RetriBERT model)"),lwe.forEach(t),_1o=i($),nu=n($,"LI",{});var iwe=s(nu);Tse=n(iwe,"STRONG",{});var oYr=s(Tse);b1o=r(oYr,"roberta"),oYr.forEach(t),v1o=r(iwe," \u2014 "),aq=n(iwe,"A",{href:!0});var rYr=s(aq);F1o=r(rYr,"RobertaModel"),rYr.forEach(t),T1o=r(iwe," (RoBERTa model)"),iwe.forEach(t),M1o=i($),su=n($,"LI",{});var dwe=s(su);Mse=n(dwe,"STRONG",{});var tYr=s(Mse);E1o=r(tYr,"roformer"),tYr.forEach(t),C1o=r(dwe," \u2014 "),nq=n(dwe,"A",{href:!0});var aYr=s(nq);w1o=r(aYr,"RoFormerModel"),aYr.forEach(t),A1o=r(dwe," (RoFormer model)"),dwe.forEach(t),y1o=i($),lu=n($,"LI",{});var cwe=s(lu);Ese=n(cwe,"STRONG",{});var nYr=s(Ese);L1o=r(nYr,"segformer"),nYr.forEach(t),x1o=r(cwe," \u2014 "),sq=n(cwe,"A",{href:!0});var sYr=s(sq);$1o=r(sYr,"SegformerModel"),sYr.forEach(t),k1o=r(cwe," (SegFormer model)"),cwe.forEach(t),S1o=i($),iu=n($,"LI",{});var fwe=s(iu);Cse=n(fwe,"STRONG",{});var lYr=s(Cse);R1o=r(lYr,"sew"),lYr.forEach(t),B1o=r(fwe," \u2014 "),lq=n(fwe,"A",{href:!0});var iYr=s(lq);P1o=r(iYr,"SEWModel"),iYr.forEach(t),I1o=r(fwe," (SEW model)"),fwe.forEach(t),q1o=i($),du=n($,"LI",{});var mwe=s(du);wse=n(mwe,"STRONG",{});var dYr=s(wse);N1o=r(dYr,"sew-d"),dYr.forEach(t),j1o=r(mwe," \u2014 "),iq=n(mwe,"A",{href:!0});var cYr=s(iq);D1o=r(cYr,"SEWDModel"),cYr.forEach(t),G1o=r(mwe," (SEW-D model)"),mwe.forEach(t),O1o=i($),cu=n($,"LI",{});var gwe=s(cu);Ase=n(gwe,"STRONG",{});var fYr=s(Ase);V1o=r(fYr,"speech_to_text"),fYr.forEach(t),X1o=r(gwe," \u2014 "),dq=n(gwe,"A",{href:!0});var mYr=s(dq);z1o=r(mYr,"Speech2TextModel"),mYr.forEach(t),Q1o=r(gwe," (Speech2Text model)"),gwe.forEach(t),W1o=i($),fu=n($,"LI",{});var hwe=s(fu);yse=n(hwe,"STRONG",{});var gYr=s(yse);H1o=r(gYr,"splinter"),gYr.forEach(t),U1o=r(hwe," \u2014 "),cq=n(hwe,"A",{href:!0});var hYr=s(cq);J1o=r(hYr,"SplinterModel"),hYr.forEach(t),Y1o=r(hwe," (Splinter model)"),hwe.forEach(t),K1o=i($),mu=n($,"LI",{});var pwe=s(mu);Lse=n(pwe,"STRONG",{});var pYr=s(Lse);Z1o=r(pYr,"squeezebert"),pYr.forEach(t),e8o=r(pwe," \u2014 "),fq=n(pwe,"A",{href:!0});var uYr=s(fq);o8o=r(uYr,"SqueezeBertModel"),uYr.forEach(t),r8o=r(pwe," (SqueezeBERT model)"),pwe.forEach(t),t8o=i($),gu=n($,"LI",{});var uwe=s(gu);xse=n(uwe,"STRONG",{});var _Yr=s(xse);a8o=r(_Yr,"swin"),_Yr.forEach(t),n8o=r(uwe," \u2014 "),mq=n(uwe,"A",{href:!0});var bYr=s(mq);s8o=r(bYr,"SwinModel"),bYr.forEach(t),l8o=r(uwe," (Swin model)"),uwe.forEach(t),i8o=i($),hu=n($,"LI",{});var _we=s(hu);$se=n(_we,"STRONG",{});var vYr=s($se);d8o=r(vYr,"t5"),vYr.forEach(t),c8o=r(_we," \u2014 "),gq=n(_we,"A",{href:!0});var FYr=s(gq);f8o=r(FYr,"T5Model"),FYr.forEach(t),m8o=r(_we," (T5 model)"),_we.forEach(t),g8o=i($),pu=n($,"LI",{});var bwe=s(pu);kse=n(bwe,"STRONG",{});var TYr=s(kse);h8o=r(TYr,"tapas"),TYr.forEach(t),p8o=r(bwe," \u2014 "),hq=n(bwe,"A",{href:!0});var MYr=s(hq);u8o=r(MYr,"TapasModel"),MYr.forEach(t),_8o=r(bwe," (TAPAS model)"),bwe.forEach(t),b8o=i($),uu=n($,"LI",{});var vwe=s(uu);Sse=n(vwe,"STRONG",{});var EYr=s(Sse);v8o=r(EYr,"transfo-xl"),EYr.forEach(t),F8o=r(vwe," \u2014 "),pq=n(vwe,"A",{href:!0});var CYr=s(pq);T8o=r(CYr,"TransfoXLModel"),CYr.forEach(t),M8o=r(vwe," (Transformer-XL model)"),vwe.forEach(t),E8o=i($),_u=n($,"LI",{});var Fwe=s(_u);Rse=n(Fwe,"STRONG",{});var wYr=s(Rse);C8o=r(wYr,"unispeech"),wYr.forEach(t),w8o=r(Fwe," \u2014 "),uq=n(Fwe,"A",{href:!0});var AYr=s(uq);A8o=r(AYr,"UniSpeechModel"),AYr.forEach(t),y8o=r(Fwe," (UniSpeech model)"),Fwe.forEach(t),L8o=i($),bu=n($,"LI",{});var Twe=s(bu);Bse=n(Twe,"STRONG",{});var yYr=s(Bse);x8o=r(yYr,"unispeech-sat"),yYr.forEach(t),$8o=r(Twe," \u2014 "),_q=n(Twe,"A",{href:!0});var LYr=s(_q);k8o=r(LYr,"UniSpeechSatModel"),LYr.forEach(t),S8o=r(Twe," (UniSpeechSat model)"),Twe.forEach(t),R8o=i($),vu=n($,"LI",{});var Mwe=s(vu);Pse=n(Mwe,"STRONG",{});var xYr=s(Pse);B8o=r(xYr,"van"),xYr.forEach(t),P8o=r(Mwe," \u2014 "),bq=n(Mwe,"A",{href:!0});var $Yr=s(bq);I8o=r($Yr,"VanModel"),$Yr.forEach(t),q8o=r(Mwe," (VAN model)"),Mwe.forEach(t),N8o=i($),Fu=n($,"LI",{});var Ewe=s(Fu);Ise=n(Ewe,"STRONG",{});var kYr=s(Ise);j8o=r(kYr,"vilt"),kYr.forEach(t),D8o=r(Ewe," \u2014 "),vq=n(Ewe,"A",{href:!0});var SYr=s(vq);G8o=r(SYr,"ViltModel"),SYr.forEach(t),O8o=r(Ewe," (ViLT model)"),Ewe.forEach(t),V8o=i($),Tu=n($,"LI",{});var Cwe=s(Tu);qse=n(Cwe,"STRONG",{});var RYr=s(qse);X8o=r(RYr,"vision-text-dual-encoder"),RYr.forEach(t),z8o=r(Cwe," \u2014 "),Fq=n(Cwe,"A",{href:!0});var BYr=s(Fq);Q8o=r(BYr,"VisionTextDualEncoderModel"),BYr.forEach(t),W8o=r(Cwe," (VisionTextDualEncoder model)"),Cwe.forEach(t),H8o=i($),Mu=n($,"LI",{});var wwe=s(Mu);Nse=n(wwe,"STRONG",{});var PYr=s(Nse);U8o=r(PYr,"visual_bert"),PYr.forEach(t),J8o=r(wwe," \u2014 "),Tq=n(wwe,"A",{href:!0});var IYr=s(Tq);Y8o=r(IYr,"VisualBertModel"),IYr.forEach(t),K8o=r(wwe," (VisualBert model)"),wwe.forEach(t),Z8o=i($),Eu=n($,"LI",{});var Awe=s(Eu);jse=n(Awe,"STRONG",{});var qYr=s(jse);ebo=r(qYr,"vit"),qYr.forEach(t),obo=r(Awe," \u2014 "),Mq=n(Awe,"A",{href:!0});var NYr=s(Mq);rbo=r(NYr,"ViTModel"),NYr.forEach(t),tbo=r(Awe," (ViT model)"),Awe.forEach(t),abo=i($),Cu=n($,"LI",{});var ywe=s(Cu);Dse=n(ywe,"STRONG",{});var jYr=s(Dse);nbo=r(jYr,"vit_mae"),jYr.forEach(t),sbo=r(ywe," \u2014 "),Eq=n(ywe,"A",{href:!0});var DYr=s(Eq);lbo=r(DYr,"ViTMAEModel"),DYr.forEach(t),ibo=r(ywe," (ViTMAE model)"),ywe.forEach(t),dbo=i($),wu=n($,"LI",{});var Lwe=s(wu);Gse=n(Lwe,"STRONG",{});var GYr=s(Gse);cbo=r(GYr,"wav2vec2"),GYr.forEach(t),fbo=r(Lwe," \u2014 "),Cq=n(Lwe,"A",{href:!0});var OYr=s(Cq);mbo=r(OYr,"Wav2Vec2Model"),OYr.forEach(t),gbo=r(Lwe," (Wav2Vec2 model)"),Lwe.forEach(t),hbo=i($),Au=n($,"LI",{});var xwe=s(Au);Ose=n(xwe,"STRONG",{});var VYr=s(Ose);pbo=r(VYr,"wavlm"),VYr.forEach(t),ubo=r(xwe," \u2014 "),wq=n(xwe,"A",{href:!0});var XYr=s(wq);_bo=r(XYr,"WavLMModel"),XYr.forEach(t),bbo=r(xwe," (WavLM model)"),xwe.forEach(t),vbo=i($),yu=n($,"LI",{});var $we=s(yu);Vse=n($we,"STRONG",{});var zYr=s(Vse);Fbo=r(zYr,"xglm"),zYr.forEach(t),Tbo=r($we," \u2014 "),Aq=n($we,"A",{href:!0});var QYr=s(Aq);Mbo=r(QYr,"XGLMModel"),QYr.forEach(t),Ebo=r($we," (XGLM model)"),$we.forEach(t),Cbo=i($),Lu=n($,"LI",{});var kwe=s(Lu);Xse=n(kwe,"STRONG",{});var WYr=s(Xse);wbo=r(WYr,"xlm"),WYr.forEach(t),Abo=r(kwe," \u2014 "),yq=n(kwe,"A",{href:!0});var HYr=s(yq);ybo=r(HYr,"XLMModel"),HYr.forEach(t),Lbo=r(kwe," (XLM model)"),kwe.forEach(t),xbo=i($),xu=n($,"LI",{});var Swe=s(xu);zse=n(Swe,"STRONG",{});var UYr=s(zse);$bo=r(UYr,"xlm-prophetnet"),UYr.forEach(t),kbo=r(Swe," \u2014 "),Lq=n(Swe,"A",{href:!0});var JYr=s(Lq);Sbo=r(JYr,"XLMProphetNetModel"),JYr.forEach(t),Rbo=r(Swe," (XLMProphetNet model)"),Swe.forEach(t),Bbo=i($),$u=n($,"LI",{});var Rwe=s($u);Qse=n(Rwe,"STRONG",{});var YYr=s(Qse);Pbo=r(YYr,"xlm-roberta"),YYr.forEach(t),Ibo=r(Rwe," \u2014 "),xq=n(Rwe,"A",{href:!0});var KYr=s(xq);qbo=r(KYr,"XLMRobertaModel"),KYr.forEach(t),Nbo=r(Rwe," (XLM-RoBERTa model)"),Rwe.forEach(t),jbo=i($),ku=n($,"LI",{});var Bwe=s(ku);Wse=n(Bwe,"STRONG",{});var ZYr=s(Wse);Dbo=r(ZYr,"xlm-roberta-xl"),ZYr.forEach(t),Gbo=r(Bwe," \u2014 "),$q=n(Bwe,"A",{href:!0});var eKr=s($q);Obo=r(eKr,"XLMRobertaXLModel"),eKr.forEach(t),Vbo=r(Bwe," (XLM-RoBERTa-XL model)"),Bwe.forEach(t),Xbo=i($),Su=n($,"LI",{});var Pwe=s(Su);Hse=n(Pwe,"STRONG",{});var oKr=s(Hse);zbo=r(oKr,"xlnet"),oKr.forEach(t),Qbo=r(Pwe," \u2014 "),kq=n(Pwe,"A",{href:!0});var rKr=s(kq);Wbo=r(rKr,"XLNetModel"),rKr.forEach(t),Hbo=r(Pwe," (XLNet model)"),Pwe.forEach(t),Ubo=i($),Ru=n($,"LI",{});var Iwe=s(Ru);Use=n(Iwe,"STRONG",{});var tKr=s(Use);Jbo=r(tKr,"yolos"),tKr.forEach(t),Ybo=r(Iwe," \u2014 "),Sq=n(Iwe,"A",{href:!0});var aKr=s(Sq);Kbo=r(aKr,"YolosModel"),aKr.forEach(t),Zbo=r(Iwe," (YOLOS model)"),Iwe.forEach(t),e2o=i($),Bu=n($,"LI",{});var qwe=s(Bu);Jse=n(qwe,"STRONG",{});var nKr=s(Jse);o2o=r(nKr,"yoso"),nKr.forEach(t),r2o=r(qwe," \u2014 "),Rq=n(qwe,"A",{href:!0});var sKr=s(Rq);t2o=r(sKr,"YosoModel"),sKr.forEach(t),a2o=r(qwe," (YOSO model)"),qwe.forEach(t),$.forEach(t),n2o=i(Zt),Pu=n(Zt,"P",{});var Nwe=s(Pu);s2o=r(Nwe,"The model is set in evaluation mode by default using "),Yse=n(Nwe,"CODE",{});var lKr=s(Yse);l2o=r(lKr,"model.eval()"),lKr.forEach(t),i2o=r(Nwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kse=n(Nwe,"CODE",{});var iKr=s(Kse);d2o=r(iKr,"model.train()"),iKr.forEach(t),Nwe.forEach(t),c2o=i(Zt),T(Iu.$$.fragment,Zt),Zt.forEach(t),Ds.forEach(t),mIe=i(f),wi=n(f,"H2",{class:!0});var uNe=s(wi);qu=n(uNe,"A",{id:!0,class:!0,href:!0});var dKr=s(qu);Zse=n(dKr,"SPAN",{});var cKr=s(Zse);T(kA.$$.fragment,cKr),cKr.forEach(t),dKr.forEach(t),f2o=i(uNe),ele=n(uNe,"SPAN",{});var fKr=s(ele);m2o=r(fKr,"AutoModelForPreTraining"),fKr.forEach(t),uNe.forEach(t),gIe=i(f),xo=n(f,"DIV",{class:!0});var Gs=s(xo);T(SA.$$.fragment,Gs),g2o=i(Gs),Ai=n(Gs,"P",{});var pK=s(Ai);h2o=r(pK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Bq=n(pK,"A",{href:!0});var mKr=s(Bq);p2o=r(mKr,"from_pretrained()"),mKr.forEach(t),u2o=r(pK," class method or the "),Pq=n(pK,"A",{href:!0});var gKr=s(Pq);_2o=r(gKr,"from_config()"),gKr.forEach(t),b2o=r(pK,` class
method.`),pK.forEach(t),v2o=i(Gs),RA=n(Gs,"P",{});var _Ne=s(RA);F2o=r(_Ne,"This class cannot be instantiated directly using "),ole=n(_Ne,"CODE",{});var hKr=s(ole);T2o=r(hKr,"__init__()"),hKr.forEach(t),M2o=r(_Ne," (throws an error)."),_Ne.forEach(t),E2o=i(Gs),rt=n(Gs,"DIV",{class:!0});var a3=s(rt);T(BA.$$.fragment,a3),C2o=i(a3),rle=n(a3,"P",{});var pKr=s(rle);w2o=r(pKr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),pKr.forEach(t),A2o=i(a3),yi=n(a3,"P",{});var uK=s(yi);y2o=r(uK,`Note:
Loading a model from its configuration file does `),tle=n(uK,"STRONG",{});var uKr=s(tle);L2o=r(uKr,"not"),uKr.forEach(t),x2o=r(uK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Iq=n(uK,"A",{href:!0});var _Kr=s(Iq);$2o=r(_Kr,"from_pretrained()"),_Kr.forEach(t),k2o=r(uK," to load the model weights."),uK.forEach(t),S2o=i(a3),T(Nu.$$.fragment,a3),a3.forEach(t),R2o=i(Gs),Ue=n(Gs,"DIV",{class:!0});var ea=s(Ue);T(PA.$$.fragment,ea),B2o=i(ea),ale=n(ea,"P",{});var bKr=s(ale);P2o=r(bKr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),bKr.forEach(t),I2o=i(ea),ya=n(ea,"P",{});var n3=s(ya);q2o=r(n3,"The model class to instantiate is selected based on the "),nle=n(n3,"CODE",{});var vKr=s(nle);N2o=r(vKr,"model_type"),vKr.forEach(t),j2o=r(n3,` property of the config object (either
passed as an argument or loaded from `),sle=n(n3,"CODE",{});var FKr=s(sle);D2o=r(FKr,"pretrained_model_name_or_path"),FKr.forEach(t),G2o=r(n3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lle=n(n3,"CODE",{});var TKr=s(lle);O2o=r(TKr,"pretrained_model_name_or_path"),TKr.forEach(t),V2o=r(n3,":"),n3.forEach(t),X2o=i(ea),G=n(ea,"UL",{});var V=s(G);ju=n(V,"LI",{});var jwe=s(ju);ile=n(jwe,"STRONG",{});var MKr=s(ile);z2o=r(MKr,"albert"),MKr.forEach(t),Q2o=r(jwe," \u2014 "),qq=n(jwe,"A",{href:!0});var EKr=s(qq);W2o=r(EKr,"AlbertForPreTraining"),EKr.forEach(t),H2o=r(jwe," (ALBERT model)"),jwe.forEach(t),U2o=i(V),Du=n(V,"LI",{});var Dwe=s(Du);dle=n(Dwe,"STRONG",{});var CKr=s(dle);J2o=r(CKr,"bart"),CKr.forEach(t),Y2o=r(Dwe," \u2014 "),Nq=n(Dwe,"A",{href:!0});var wKr=s(Nq);K2o=r(wKr,"BartForConditionalGeneration"),wKr.forEach(t),Z2o=r(Dwe," (BART model)"),Dwe.forEach(t),evo=i(V),Gu=n(V,"LI",{});var Gwe=s(Gu);cle=n(Gwe,"STRONG",{});var AKr=s(cle);ovo=r(AKr,"bert"),AKr.forEach(t),rvo=r(Gwe," \u2014 "),jq=n(Gwe,"A",{href:!0});var yKr=s(jq);tvo=r(yKr,"BertForPreTraining"),yKr.forEach(t),avo=r(Gwe," (BERT model)"),Gwe.forEach(t),nvo=i(V),Ou=n(V,"LI",{});var Owe=s(Ou);fle=n(Owe,"STRONG",{});var LKr=s(fle);svo=r(LKr,"big_bird"),LKr.forEach(t),lvo=r(Owe," \u2014 "),Dq=n(Owe,"A",{href:!0});var xKr=s(Dq);ivo=r(xKr,"BigBirdForPreTraining"),xKr.forEach(t),dvo=r(Owe," (BigBird model)"),Owe.forEach(t),cvo=i(V),Vu=n(V,"LI",{});var Vwe=s(Vu);mle=n(Vwe,"STRONG",{});var $Kr=s(mle);fvo=r($Kr,"camembert"),$Kr.forEach(t),mvo=r(Vwe," \u2014 "),Gq=n(Vwe,"A",{href:!0});var kKr=s(Gq);gvo=r(kKr,"CamembertForMaskedLM"),kKr.forEach(t),hvo=r(Vwe," (CamemBERT model)"),Vwe.forEach(t),pvo=i(V),Xu=n(V,"LI",{});var Xwe=s(Xu);gle=n(Xwe,"STRONG",{});var SKr=s(gle);uvo=r(SKr,"ctrl"),SKr.forEach(t),_vo=r(Xwe," \u2014 "),Oq=n(Xwe,"A",{href:!0});var RKr=s(Oq);bvo=r(RKr,"CTRLLMHeadModel"),RKr.forEach(t),vvo=r(Xwe," (CTRL model)"),Xwe.forEach(t),Fvo=i(V),zu=n(V,"LI",{});var zwe=s(zu);hle=n(zwe,"STRONG",{});var BKr=s(hle);Tvo=r(BKr,"data2vec-text"),BKr.forEach(t),Mvo=r(zwe," \u2014 "),Vq=n(zwe,"A",{href:!0});var PKr=s(Vq);Evo=r(PKr,"Data2VecTextForMaskedLM"),PKr.forEach(t),Cvo=r(zwe," (Data2VecText model)"),zwe.forEach(t),wvo=i(V),Qu=n(V,"LI",{});var Qwe=s(Qu);ple=n(Qwe,"STRONG",{});var IKr=s(ple);Avo=r(IKr,"deberta"),IKr.forEach(t),yvo=r(Qwe," \u2014 "),Xq=n(Qwe,"A",{href:!0});var qKr=s(Xq);Lvo=r(qKr,"DebertaForMaskedLM"),qKr.forEach(t),xvo=r(Qwe," (DeBERTa model)"),Qwe.forEach(t),$vo=i(V),Wu=n(V,"LI",{});var Wwe=s(Wu);ule=n(Wwe,"STRONG",{});var NKr=s(ule);kvo=r(NKr,"deberta-v2"),NKr.forEach(t),Svo=r(Wwe," \u2014 "),zq=n(Wwe,"A",{href:!0});var jKr=s(zq);Rvo=r(jKr,"DebertaV2ForMaskedLM"),jKr.forEach(t),Bvo=r(Wwe," (DeBERTa-v2 model)"),Wwe.forEach(t),Pvo=i(V),Hu=n(V,"LI",{});var Hwe=s(Hu);_le=n(Hwe,"STRONG",{});var DKr=s(_le);Ivo=r(DKr,"distilbert"),DKr.forEach(t),qvo=r(Hwe," \u2014 "),Qq=n(Hwe,"A",{href:!0});var GKr=s(Qq);Nvo=r(GKr,"DistilBertForMaskedLM"),GKr.forEach(t),jvo=r(Hwe," (DistilBERT model)"),Hwe.forEach(t),Dvo=i(V),Uu=n(V,"LI",{});var Uwe=s(Uu);ble=n(Uwe,"STRONG",{});var OKr=s(ble);Gvo=r(OKr,"electra"),OKr.forEach(t),Ovo=r(Uwe," \u2014 "),Wq=n(Uwe,"A",{href:!0});var VKr=s(Wq);Vvo=r(VKr,"ElectraForPreTraining"),VKr.forEach(t),Xvo=r(Uwe," (ELECTRA model)"),Uwe.forEach(t),zvo=i(V),Ju=n(V,"LI",{});var Jwe=s(Ju);vle=n(Jwe,"STRONG",{});var XKr=s(vle);Qvo=r(XKr,"flaubert"),XKr.forEach(t),Wvo=r(Jwe," \u2014 "),Hq=n(Jwe,"A",{href:!0});var zKr=s(Hq);Hvo=r(zKr,"FlaubertWithLMHeadModel"),zKr.forEach(t),Uvo=r(Jwe," (FlauBERT model)"),Jwe.forEach(t),Jvo=i(V),Yu=n(V,"LI",{});var Ywe=s(Yu);Fle=n(Ywe,"STRONG",{});var QKr=s(Fle);Yvo=r(QKr,"flava"),QKr.forEach(t),Kvo=r(Ywe," \u2014 "),Uq=n(Ywe,"A",{href:!0});var WKr=s(Uq);Zvo=r(WKr,"FlavaForPreTraining"),WKr.forEach(t),eFo=r(Ywe," (Flava model)"),Ywe.forEach(t),oFo=i(V),Ku=n(V,"LI",{});var Kwe=s(Ku);Tle=n(Kwe,"STRONG",{});var HKr=s(Tle);rFo=r(HKr,"fnet"),HKr.forEach(t),tFo=r(Kwe," \u2014 "),Jq=n(Kwe,"A",{href:!0});var UKr=s(Jq);aFo=r(UKr,"FNetForPreTraining"),UKr.forEach(t),nFo=r(Kwe," (FNet model)"),Kwe.forEach(t),sFo=i(V),Zu=n(V,"LI",{});var Zwe=s(Zu);Mle=n(Zwe,"STRONG",{});var JKr=s(Mle);lFo=r(JKr,"fsmt"),JKr.forEach(t),iFo=r(Zwe," \u2014 "),Yq=n(Zwe,"A",{href:!0});var YKr=s(Yq);dFo=r(YKr,"FSMTForConditionalGeneration"),YKr.forEach(t),cFo=r(Zwe," (FairSeq Machine-Translation model)"),Zwe.forEach(t),fFo=i(V),e_=n(V,"LI",{});var eAe=s(e_);Ele=n(eAe,"STRONG",{});var KKr=s(Ele);mFo=r(KKr,"funnel"),KKr.forEach(t),gFo=r(eAe," \u2014 "),Kq=n(eAe,"A",{href:!0});var ZKr=s(Kq);hFo=r(ZKr,"FunnelForPreTraining"),ZKr.forEach(t),pFo=r(eAe," (Funnel Transformer model)"),eAe.forEach(t),uFo=i(V),o_=n(V,"LI",{});var oAe=s(o_);Cle=n(oAe,"STRONG",{});var eZr=s(Cle);_Fo=r(eZr,"gpt2"),eZr.forEach(t),bFo=r(oAe," \u2014 "),Zq=n(oAe,"A",{href:!0});var oZr=s(Zq);vFo=r(oZr,"GPT2LMHeadModel"),oZr.forEach(t),FFo=r(oAe," (OpenAI GPT-2 model)"),oAe.forEach(t),TFo=i(V),r_=n(V,"LI",{});var rAe=s(r_);wle=n(rAe,"STRONG",{});var rZr=s(wle);MFo=r(rZr,"ibert"),rZr.forEach(t),EFo=r(rAe," \u2014 "),eN=n(rAe,"A",{href:!0});var tZr=s(eN);CFo=r(tZr,"IBertForMaskedLM"),tZr.forEach(t),wFo=r(rAe," (I-BERT model)"),rAe.forEach(t),AFo=i(V),t_=n(V,"LI",{});var tAe=s(t_);Ale=n(tAe,"STRONG",{});var aZr=s(Ale);yFo=r(aZr,"layoutlm"),aZr.forEach(t),LFo=r(tAe," \u2014 "),oN=n(tAe,"A",{href:!0});var nZr=s(oN);xFo=r(nZr,"LayoutLMForMaskedLM"),nZr.forEach(t),$Fo=r(tAe," (LayoutLM model)"),tAe.forEach(t),kFo=i(V),a_=n(V,"LI",{});var aAe=s(a_);yle=n(aAe,"STRONG",{});var sZr=s(yle);SFo=r(sZr,"longformer"),sZr.forEach(t),RFo=r(aAe," \u2014 "),rN=n(aAe,"A",{href:!0});var lZr=s(rN);BFo=r(lZr,"LongformerForMaskedLM"),lZr.forEach(t),PFo=r(aAe," (Longformer model)"),aAe.forEach(t),IFo=i(V),n_=n(V,"LI",{});var nAe=s(n_);Lle=n(nAe,"STRONG",{});var iZr=s(Lle);qFo=r(iZr,"lxmert"),iZr.forEach(t),NFo=r(nAe," \u2014 "),tN=n(nAe,"A",{href:!0});var dZr=s(tN);jFo=r(dZr,"LxmertForPreTraining"),dZr.forEach(t),DFo=r(nAe," (LXMERT model)"),nAe.forEach(t),GFo=i(V),s_=n(V,"LI",{});var sAe=s(s_);xle=n(sAe,"STRONG",{});var cZr=s(xle);OFo=r(cZr,"megatron-bert"),cZr.forEach(t),VFo=r(sAe," \u2014 "),aN=n(sAe,"A",{href:!0});var fZr=s(aN);XFo=r(fZr,"MegatronBertForPreTraining"),fZr.forEach(t),zFo=r(sAe," (MegatronBert model)"),sAe.forEach(t),QFo=i(V),l_=n(V,"LI",{});var lAe=s(l_);$le=n(lAe,"STRONG",{});var mZr=s($le);WFo=r(mZr,"mobilebert"),mZr.forEach(t),HFo=r(lAe," \u2014 "),nN=n(lAe,"A",{href:!0});var gZr=s(nN);UFo=r(gZr,"MobileBertForPreTraining"),gZr.forEach(t),JFo=r(lAe," (MobileBERT model)"),lAe.forEach(t),YFo=i(V),i_=n(V,"LI",{});var iAe=s(i_);kle=n(iAe,"STRONG",{});var hZr=s(kle);KFo=r(hZr,"mpnet"),hZr.forEach(t),ZFo=r(iAe," \u2014 "),sN=n(iAe,"A",{href:!0});var pZr=s(sN);e6o=r(pZr,"MPNetForMaskedLM"),pZr.forEach(t),o6o=r(iAe," (MPNet model)"),iAe.forEach(t),r6o=i(V),d_=n(V,"LI",{});var dAe=s(d_);Sle=n(dAe,"STRONG",{});var uZr=s(Sle);t6o=r(uZr,"openai-gpt"),uZr.forEach(t),a6o=r(dAe," \u2014 "),lN=n(dAe,"A",{href:!0});var _Zr=s(lN);n6o=r(_Zr,"OpenAIGPTLMHeadModel"),_Zr.forEach(t),s6o=r(dAe," (OpenAI GPT model)"),dAe.forEach(t),l6o=i(V),c_=n(V,"LI",{});var cAe=s(c_);Rle=n(cAe,"STRONG",{});var bZr=s(Rle);i6o=r(bZr,"retribert"),bZr.forEach(t),d6o=r(cAe," \u2014 "),iN=n(cAe,"A",{href:!0});var vZr=s(iN);c6o=r(vZr,"RetriBertModel"),vZr.forEach(t),f6o=r(cAe," (RetriBERT model)"),cAe.forEach(t),m6o=i(V),f_=n(V,"LI",{});var fAe=s(f_);Ble=n(fAe,"STRONG",{});var FZr=s(Ble);g6o=r(FZr,"roberta"),FZr.forEach(t),h6o=r(fAe," \u2014 "),dN=n(fAe,"A",{href:!0});var TZr=s(dN);p6o=r(TZr,"RobertaForMaskedLM"),TZr.forEach(t),u6o=r(fAe," (RoBERTa model)"),fAe.forEach(t),_6o=i(V),m_=n(V,"LI",{});var mAe=s(m_);Ple=n(mAe,"STRONG",{});var MZr=s(Ple);b6o=r(MZr,"squeezebert"),MZr.forEach(t),v6o=r(mAe," \u2014 "),cN=n(mAe,"A",{href:!0});var EZr=s(cN);F6o=r(EZr,"SqueezeBertForMaskedLM"),EZr.forEach(t),T6o=r(mAe," (SqueezeBERT model)"),mAe.forEach(t),M6o=i(V),g_=n(V,"LI",{});var gAe=s(g_);Ile=n(gAe,"STRONG",{});var CZr=s(Ile);E6o=r(CZr,"t5"),CZr.forEach(t),C6o=r(gAe," \u2014 "),fN=n(gAe,"A",{href:!0});var wZr=s(fN);w6o=r(wZr,"T5ForConditionalGeneration"),wZr.forEach(t),A6o=r(gAe," (T5 model)"),gAe.forEach(t),y6o=i(V),h_=n(V,"LI",{});var hAe=s(h_);qle=n(hAe,"STRONG",{});var AZr=s(qle);L6o=r(AZr,"tapas"),AZr.forEach(t),x6o=r(hAe," \u2014 "),mN=n(hAe,"A",{href:!0});var yZr=s(mN);$6o=r(yZr,"TapasForMaskedLM"),yZr.forEach(t),k6o=r(hAe," (TAPAS model)"),hAe.forEach(t),S6o=i(V),p_=n(V,"LI",{});var pAe=s(p_);Nle=n(pAe,"STRONG",{});var LZr=s(Nle);R6o=r(LZr,"transfo-xl"),LZr.forEach(t),B6o=r(pAe," \u2014 "),gN=n(pAe,"A",{href:!0});var xZr=s(gN);P6o=r(xZr,"TransfoXLLMHeadModel"),xZr.forEach(t),I6o=r(pAe," (Transformer-XL model)"),pAe.forEach(t),q6o=i(V),u_=n(V,"LI",{});var uAe=s(u_);jle=n(uAe,"STRONG",{});var $Zr=s(jle);N6o=r($Zr,"unispeech"),$Zr.forEach(t),j6o=r(uAe," \u2014 "),hN=n(uAe,"A",{href:!0});var kZr=s(hN);D6o=r(kZr,"UniSpeechForPreTraining"),kZr.forEach(t),G6o=r(uAe," (UniSpeech model)"),uAe.forEach(t),O6o=i(V),__=n(V,"LI",{});var _Ae=s(__);Dle=n(_Ae,"STRONG",{});var SZr=s(Dle);V6o=r(SZr,"unispeech-sat"),SZr.forEach(t),X6o=r(_Ae," \u2014 "),pN=n(_Ae,"A",{href:!0});var RZr=s(pN);z6o=r(RZr,"UniSpeechSatForPreTraining"),RZr.forEach(t),Q6o=r(_Ae," (UniSpeechSat model)"),_Ae.forEach(t),W6o=i(V),b_=n(V,"LI",{});var bAe=s(b_);Gle=n(bAe,"STRONG",{});var BZr=s(Gle);H6o=r(BZr,"visual_bert"),BZr.forEach(t),U6o=r(bAe," \u2014 "),uN=n(bAe,"A",{href:!0});var PZr=s(uN);J6o=r(PZr,"VisualBertForPreTraining"),PZr.forEach(t),Y6o=r(bAe," (VisualBert model)"),bAe.forEach(t),K6o=i(V),v_=n(V,"LI",{});var vAe=s(v_);Ole=n(vAe,"STRONG",{});var IZr=s(Ole);Z6o=r(IZr,"vit_mae"),IZr.forEach(t),eTo=r(vAe," \u2014 "),_N=n(vAe,"A",{href:!0});var qZr=s(_N);oTo=r(qZr,"ViTMAEForPreTraining"),qZr.forEach(t),rTo=r(vAe," (ViTMAE model)"),vAe.forEach(t),tTo=i(V),F_=n(V,"LI",{});var FAe=s(F_);Vle=n(FAe,"STRONG",{});var NZr=s(Vle);aTo=r(NZr,"wav2vec2"),NZr.forEach(t),nTo=r(FAe," \u2014 "),bN=n(FAe,"A",{href:!0});var jZr=s(bN);sTo=r(jZr,"Wav2Vec2ForPreTraining"),jZr.forEach(t),lTo=r(FAe," (Wav2Vec2 model)"),FAe.forEach(t),iTo=i(V),T_=n(V,"LI",{});var TAe=s(T_);Xle=n(TAe,"STRONG",{});var DZr=s(Xle);dTo=r(DZr,"xlm"),DZr.forEach(t),cTo=r(TAe," \u2014 "),vN=n(TAe,"A",{href:!0});var GZr=s(vN);fTo=r(GZr,"XLMWithLMHeadModel"),GZr.forEach(t),mTo=r(TAe," (XLM model)"),TAe.forEach(t),gTo=i(V),M_=n(V,"LI",{});var MAe=s(M_);zle=n(MAe,"STRONG",{});var OZr=s(zle);hTo=r(OZr,"xlm-roberta"),OZr.forEach(t),pTo=r(MAe," \u2014 "),FN=n(MAe,"A",{href:!0});var VZr=s(FN);uTo=r(VZr,"XLMRobertaForMaskedLM"),VZr.forEach(t),_To=r(MAe," (XLM-RoBERTa model)"),MAe.forEach(t),bTo=i(V),E_=n(V,"LI",{});var EAe=s(E_);Qle=n(EAe,"STRONG",{});var XZr=s(Qle);vTo=r(XZr,"xlm-roberta-xl"),XZr.forEach(t),FTo=r(EAe," \u2014 "),TN=n(EAe,"A",{href:!0});var zZr=s(TN);TTo=r(zZr,"XLMRobertaXLForMaskedLM"),zZr.forEach(t),MTo=r(EAe," (XLM-RoBERTa-XL model)"),EAe.forEach(t),ETo=i(V),C_=n(V,"LI",{});var CAe=s(C_);Wle=n(CAe,"STRONG",{});var QZr=s(Wle);CTo=r(QZr,"xlnet"),QZr.forEach(t),wTo=r(CAe," \u2014 "),MN=n(CAe,"A",{href:!0});var WZr=s(MN);ATo=r(WZr,"XLNetLMHeadModel"),WZr.forEach(t),yTo=r(CAe," (XLNet model)"),CAe.forEach(t),V.forEach(t),LTo=i(ea),w_=n(ea,"P",{});var wAe=s(w_);xTo=r(wAe,"The model is set in evaluation mode by default using "),Hle=n(wAe,"CODE",{});var HZr=s(Hle);$To=r(HZr,"model.eval()"),HZr.forEach(t),kTo=r(wAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ule=n(wAe,"CODE",{});var UZr=s(Ule);STo=r(UZr,"model.train()"),UZr.forEach(t),wAe.forEach(t),RTo=i(ea),T(A_.$$.fragment,ea),ea.forEach(t),Gs.forEach(t),hIe=i(f),Li=n(f,"H2",{class:!0});var bNe=s(Li);y_=n(bNe,"A",{id:!0,class:!0,href:!0});var JZr=s(y_);Jle=n(JZr,"SPAN",{});var YZr=s(Jle);T(IA.$$.fragment,YZr),YZr.forEach(t),JZr.forEach(t),BTo=i(bNe),Yle=n(bNe,"SPAN",{});var KZr=s(Yle);PTo=r(KZr,"AutoModelForCausalLM"),KZr.forEach(t),bNe.forEach(t),pIe=i(f),$o=n(f,"DIV",{class:!0});var Os=s($o);T(qA.$$.fragment,Os),ITo=i(Os),xi=n(Os,"P",{});var _K=s(xi);qTo=r(_K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),EN=n(_K,"A",{href:!0});var ZZr=s(EN);NTo=r(ZZr,"from_pretrained()"),ZZr.forEach(t),jTo=r(_K," class method or the "),CN=n(_K,"A",{href:!0});var eet=s(CN);DTo=r(eet,"from_config()"),eet.forEach(t),GTo=r(_K,` class
method.`),_K.forEach(t),OTo=i(Os),NA=n(Os,"P",{});var vNe=s(NA);VTo=r(vNe,"This class cannot be instantiated directly using "),Kle=n(vNe,"CODE",{});var oet=s(Kle);XTo=r(oet,"__init__()"),oet.forEach(t),zTo=r(vNe," (throws an error)."),vNe.forEach(t),QTo=i(Os),tt=n(Os,"DIV",{class:!0});var s3=s(tt);T(jA.$$.fragment,s3),WTo=i(s3),Zle=n(s3,"P",{});var ret=s(Zle);HTo=r(ret,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ret.forEach(t),UTo=i(s3),$i=n(s3,"P",{});var bK=s($i);JTo=r(bK,`Note:
Loading a model from its configuration file does `),eie=n(bK,"STRONG",{});var tet=s(eie);YTo=r(tet,"not"),tet.forEach(t),KTo=r(bK,` load the model weights. It only affects the
model\u2019s configuration. Use `),wN=n(bK,"A",{href:!0});var aet=s(wN);ZTo=r(aet,"from_pretrained()"),aet.forEach(t),e9o=r(bK," to load the model weights."),bK.forEach(t),o9o=i(s3),T(L_.$$.fragment,s3),s3.forEach(t),r9o=i(Os),Je=n(Os,"DIV",{class:!0});var oa=s(Je);T(DA.$$.fragment,oa),t9o=i(oa),oie=n(oa,"P",{});var net=s(oie);a9o=r(net,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),net.forEach(t),n9o=i(oa),La=n(oa,"P",{});var l3=s(La);s9o=r(l3,"The model class to instantiate is selected based on the "),rie=n(l3,"CODE",{});var set=s(rie);l9o=r(set,"model_type"),set.forEach(t),i9o=r(l3,` property of the config object (either
passed as an argument or loaded from `),tie=n(l3,"CODE",{});var iet=s(tie);d9o=r(iet,"pretrained_model_name_or_path"),iet.forEach(t),c9o=r(l3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aie=n(l3,"CODE",{});var det=s(aie);f9o=r(det,"pretrained_model_name_or_path"),det.forEach(t),m9o=r(l3,":"),l3.forEach(t),g9o=i(oa),z=n(oa,"UL",{});var W=s(z);x_=n(W,"LI",{});var AAe=s(x_);nie=n(AAe,"STRONG",{});var cet=s(nie);h9o=r(cet,"bart"),cet.forEach(t),p9o=r(AAe," \u2014 "),AN=n(AAe,"A",{href:!0});var fet=s(AN);u9o=r(fet,"BartForCausalLM"),fet.forEach(t),_9o=r(AAe," (BART model)"),AAe.forEach(t),b9o=i(W),$_=n(W,"LI",{});var yAe=s($_);sie=n(yAe,"STRONG",{});var met=s(sie);v9o=r(met,"bert"),met.forEach(t),F9o=r(yAe," \u2014 "),yN=n(yAe,"A",{href:!0});var get=s(yN);T9o=r(get,"BertLMHeadModel"),get.forEach(t),M9o=r(yAe," (BERT model)"),yAe.forEach(t),E9o=i(W),k_=n(W,"LI",{});var LAe=s(k_);lie=n(LAe,"STRONG",{});var het=s(lie);C9o=r(het,"bert-generation"),het.forEach(t),w9o=r(LAe," \u2014 "),LN=n(LAe,"A",{href:!0});var pet=s(LN);A9o=r(pet,"BertGenerationDecoder"),pet.forEach(t),y9o=r(LAe," (Bert Generation model)"),LAe.forEach(t),L9o=i(W),S_=n(W,"LI",{});var xAe=s(S_);iie=n(xAe,"STRONG",{});var uet=s(iie);x9o=r(uet,"big_bird"),uet.forEach(t),$9o=r(xAe," \u2014 "),xN=n(xAe,"A",{href:!0});var _et=s(xN);k9o=r(_et,"BigBirdForCausalLM"),_et.forEach(t),S9o=r(xAe," (BigBird model)"),xAe.forEach(t),R9o=i(W),R_=n(W,"LI",{});var $Ae=s(R_);die=n($Ae,"STRONG",{});var bet=s(die);B9o=r(bet,"bigbird_pegasus"),bet.forEach(t),P9o=r($Ae," \u2014 "),$N=n($Ae,"A",{href:!0});var vet=s($N);I9o=r(vet,"BigBirdPegasusForCausalLM"),vet.forEach(t),q9o=r($Ae," (BigBirdPegasus model)"),$Ae.forEach(t),N9o=i(W),B_=n(W,"LI",{});var kAe=s(B_);cie=n(kAe,"STRONG",{});var Fet=s(cie);j9o=r(Fet,"blenderbot"),Fet.forEach(t),D9o=r(kAe," \u2014 "),kN=n(kAe,"A",{href:!0});var Tet=s(kN);G9o=r(Tet,"BlenderbotForCausalLM"),Tet.forEach(t),O9o=r(kAe," (Blenderbot model)"),kAe.forEach(t),V9o=i(W),P_=n(W,"LI",{});var SAe=s(P_);fie=n(SAe,"STRONG",{});var Met=s(fie);X9o=r(Met,"blenderbot-small"),Met.forEach(t),z9o=r(SAe," \u2014 "),SN=n(SAe,"A",{href:!0});var Eet=s(SN);Q9o=r(Eet,"BlenderbotSmallForCausalLM"),Eet.forEach(t),W9o=r(SAe," (BlenderbotSmall model)"),SAe.forEach(t),H9o=i(W),I_=n(W,"LI",{});var RAe=s(I_);mie=n(RAe,"STRONG",{});var Cet=s(mie);U9o=r(Cet,"camembert"),Cet.forEach(t),J9o=r(RAe," \u2014 "),RN=n(RAe,"A",{href:!0});var wet=s(RN);Y9o=r(wet,"CamembertForCausalLM"),wet.forEach(t),K9o=r(RAe," (CamemBERT model)"),RAe.forEach(t),Z9o=i(W),q_=n(W,"LI",{});var BAe=s(q_);gie=n(BAe,"STRONG",{});var Aet=s(gie);eMo=r(Aet,"ctrl"),Aet.forEach(t),oMo=r(BAe," \u2014 "),BN=n(BAe,"A",{href:!0});var yet=s(BN);rMo=r(yet,"CTRLLMHeadModel"),yet.forEach(t),tMo=r(BAe," (CTRL model)"),BAe.forEach(t),aMo=i(W),N_=n(W,"LI",{});var PAe=s(N_);hie=n(PAe,"STRONG",{});var Let=s(hie);nMo=r(Let,"data2vec-text"),Let.forEach(t),sMo=r(PAe," \u2014 "),PN=n(PAe,"A",{href:!0});var xet=s(PN);lMo=r(xet,"Data2VecTextForCausalLM"),xet.forEach(t),iMo=r(PAe," (Data2VecText model)"),PAe.forEach(t),dMo=i(W),j_=n(W,"LI",{});var IAe=s(j_);pie=n(IAe,"STRONG",{});var $et=s(pie);cMo=r($et,"electra"),$et.forEach(t),fMo=r(IAe," \u2014 "),IN=n(IAe,"A",{href:!0});var ket=s(IN);mMo=r(ket,"ElectraForCausalLM"),ket.forEach(t),gMo=r(IAe," (ELECTRA model)"),IAe.forEach(t),hMo=i(W),D_=n(W,"LI",{});var qAe=s(D_);uie=n(qAe,"STRONG",{});var Set=s(uie);pMo=r(Set,"gpt2"),Set.forEach(t),uMo=r(qAe," \u2014 "),qN=n(qAe,"A",{href:!0});var Ret=s(qN);_Mo=r(Ret,"GPT2LMHeadModel"),Ret.forEach(t),bMo=r(qAe," (OpenAI GPT-2 model)"),qAe.forEach(t),vMo=i(W),G_=n(W,"LI",{});var NAe=s(G_);_ie=n(NAe,"STRONG",{});var Bet=s(_ie);FMo=r(Bet,"gpt_neo"),Bet.forEach(t),TMo=r(NAe," \u2014 "),NN=n(NAe,"A",{href:!0});var Pet=s(NN);MMo=r(Pet,"GPTNeoForCausalLM"),Pet.forEach(t),EMo=r(NAe," (GPT Neo model)"),NAe.forEach(t),CMo=i(W),O_=n(W,"LI",{});var jAe=s(O_);bie=n(jAe,"STRONG",{});var Iet=s(bie);wMo=r(Iet,"gptj"),Iet.forEach(t),AMo=r(jAe," \u2014 "),jN=n(jAe,"A",{href:!0});var qet=s(jN);yMo=r(qet,"GPTJForCausalLM"),qet.forEach(t),LMo=r(jAe," (GPT-J model)"),jAe.forEach(t),xMo=i(W),V_=n(W,"LI",{});var DAe=s(V_);vie=n(DAe,"STRONG",{});var Net=s(vie);$Mo=r(Net,"marian"),Net.forEach(t),kMo=r(DAe," \u2014 "),DN=n(DAe,"A",{href:!0});var jet=s(DN);SMo=r(jet,"MarianForCausalLM"),jet.forEach(t),RMo=r(DAe," (Marian model)"),DAe.forEach(t),BMo=i(W),X_=n(W,"LI",{});var GAe=s(X_);Fie=n(GAe,"STRONG",{});var Det=s(Fie);PMo=r(Det,"mbart"),Det.forEach(t),IMo=r(GAe," \u2014 "),GN=n(GAe,"A",{href:!0});var Get=s(GN);qMo=r(Get,"MBartForCausalLM"),Get.forEach(t),NMo=r(GAe," (mBART model)"),GAe.forEach(t),jMo=i(W),z_=n(W,"LI",{});var OAe=s(z_);Tie=n(OAe,"STRONG",{});var Oet=s(Tie);DMo=r(Oet,"megatron-bert"),Oet.forEach(t),GMo=r(OAe," \u2014 "),ON=n(OAe,"A",{href:!0});var Vet=s(ON);OMo=r(Vet,"MegatronBertForCausalLM"),Vet.forEach(t),VMo=r(OAe," (MegatronBert model)"),OAe.forEach(t),XMo=i(W),Q_=n(W,"LI",{});var VAe=s(Q_);Mie=n(VAe,"STRONG",{});var Xet=s(Mie);zMo=r(Xet,"openai-gpt"),Xet.forEach(t),QMo=r(VAe," \u2014 "),VN=n(VAe,"A",{href:!0});var zet=s(VN);WMo=r(zet,"OpenAIGPTLMHeadModel"),zet.forEach(t),HMo=r(VAe," (OpenAI GPT model)"),VAe.forEach(t),UMo=i(W),W_=n(W,"LI",{});var XAe=s(W_);Eie=n(XAe,"STRONG",{});var Qet=s(Eie);JMo=r(Qet,"opt"),Qet.forEach(t),YMo=r(XAe," \u2014 "),XN=n(XAe,"A",{href:!0});var Wet=s(XN);KMo=r(Wet,"OPTForCausalLM"),Wet.forEach(t),ZMo=r(XAe," (OPT model)"),XAe.forEach(t),e4o=i(W),H_=n(W,"LI",{});var zAe=s(H_);Cie=n(zAe,"STRONG",{});var Het=s(Cie);o4o=r(Het,"pegasus"),Het.forEach(t),r4o=r(zAe," \u2014 "),zN=n(zAe,"A",{href:!0});var Uet=s(zN);t4o=r(Uet,"PegasusForCausalLM"),Uet.forEach(t),a4o=r(zAe," (Pegasus model)"),zAe.forEach(t),n4o=i(W),U_=n(W,"LI",{});var QAe=s(U_);wie=n(QAe,"STRONG",{});var Jet=s(wie);s4o=r(Jet,"plbart"),Jet.forEach(t),l4o=r(QAe," \u2014 "),QN=n(QAe,"A",{href:!0});var Yet=s(QN);i4o=r(Yet,"PLBartForCausalLM"),Yet.forEach(t),d4o=r(QAe," (PLBart model)"),QAe.forEach(t),c4o=i(W),J_=n(W,"LI",{});var WAe=s(J_);Aie=n(WAe,"STRONG",{});var Ket=s(Aie);f4o=r(Ket,"prophetnet"),Ket.forEach(t),m4o=r(WAe," \u2014 "),WN=n(WAe,"A",{href:!0});var Zet=s(WN);g4o=r(Zet,"ProphetNetForCausalLM"),Zet.forEach(t),h4o=r(WAe," (ProphetNet model)"),WAe.forEach(t),p4o=i(W),Y_=n(W,"LI",{});var HAe=s(Y_);yie=n(HAe,"STRONG",{});var eot=s(yie);u4o=r(eot,"qdqbert"),eot.forEach(t),_4o=r(HAe," \u2014 "),HN=n(HAe,"A",{href:!0});var oot=s(HN);b4o=r(oot,"QDQBertLMHeadModel"),oot.forEach(t),v4o=r(HAe," (QDQBert model)"),HAe.forEach(t),F4o=i(W),K_=n(W,"LI",{});var UAe=s(K_);Lie=n(UAe,"STRONG",{});var rot=s(Lie);T4o=r(rot,"reformer"),rot.forEach(t),M4o=r(UAe," \u2014 "),UN=n(UAe,"A",{href:!0});var tot=s(UN);E4o=r(tot,"ReformerModelWithLMHead"),tot.forEach(t),C4o=r(UAe," (Reformer model)"),UAe.forEach(t),w4o=i(W),Z_=n(W,"LI",{});var JAe=s(Z_);xie=n(JAe,"STRONG",{});var aot=s(xie);A4o=r(aot,"rembert"),aot.forEach(t),y4o=r(JAe," \u2014 "),JN=n(JAe,"A",{href:!0});var not=s(JN);L4o=r(not,"RemBertForCausalLM"),not.forEach(t),x4o=r(JAe," (RemBERT model)"),JAe.forEach(t),$4o=i(W),e1=n(W,"LI",{});var YAe=s(e1);$ie=n(YAe,"STRONG",{});var sot=s($ie);k4o=r(sot,"roberta"),sot.forEach(t),S4o=r(YAe," \u2014 "),YN=n(YAe,"A",{href:!0});var lot=s(YN);R4o=r(lot,"RobertaForCausalLM"),lot.forEach(t),B4o=r(YAe," (RoBERTa model)"),YAe.forEach(t),P4o=i(W),o1=n(W,"LI",{});var KAe=s(o1);kie=n(KAe,"STRONG",{});var iot=s(kie);I4o=r(iot,"roformer"),iot.forEach(t),q4o=r(KAe," \u2014 "),KN=n(KAe,"A",{href:!0});var dot=s(KN);N4o=r(dot,"RoFormerForCausalLM"),dot.forEach(t),j4o=r(KAe," (RoFormer model)"),KAe.forEach(t),D4o=i(W),r1=n(W,"LI",{});var ZAe=s(r1);Sie=n(ZAe,"STRONG",{});var cot=s(Sie);G4o=r(cot,"speech_to_text_2"),cot.forEach(t),O4o=r(ZAe," \u2014 "),ZN=n(ZAe,"A",{href:!0});var fot=s(ZN);V4o=r(fot,"Speech2Text2ForCausalLM"),fot.forEach(t),X4o=r(ZAe," (Speech2Text2 model)"),ZAe.forEach(t),z4o=i(W),t1=n(W,"LI",{});var e0e=s(t1);Rie=n(e0e,"STRONG",{});var mot=s(Rie);Q4o=r(mot,"transfo-xl"),mot.forEach(t),W4o=r(e0e," \u2014 "),ej=n(e0e,"A",{href:!0});var got=s(ej);H4o=r(got,"TransfoXLLMHeadModel"),got.forEach(t),U4o=r(e0e," (Transformer-XL model)"),e0e.forEach(t),J4o=i(W),a1=n(W,"LI",{});var o0e=s(a1);Bie=n(o0e,"STRONG",{});var hot=s(Bie);Y4o=r(hot,"trocr"),hot.forEach(t),K4o=r(o0e," \u2014 "),oj=n(o0e,"A",{href:!0});var pot=s(oj);Z4o=r(pot,"TrOCRForCausalLM"),pot.forEach(t),eEo=r(o0e," (TrOCR model)"),o0e.forEach(t),oEo=i(W),n1=n(W,"LI",{});var r0e=s(n1);Pie=n(r0e,"STRONG",{});var uot=s(Pie);rEo=r(uot,"xglm"),uot.forEach(t),tEo=r(r0e," \u2014 "),rj=n(r0e,"A",{href:!0});var _ot=s(rj);aEo=r(_ot,"XGLMForCausalLM"),_ot.forEach(t),nEo=r(r0e," (XGLM model)"),r0e.forEach(t),sEo=i(W),s1=n(W,"LI",{});var t0e=s(s1);Iie=n(t0e,"STRONG",{});var bot=s(Iie);lEo=r(bot,"xlm"),bot.forEach(t),iEo=r(t0e," \u2014 "),tj=n(t0e,"A",{href:!0});var vot=s(tj);dEo=r(vot,"XLMWithLMHeadModel"),vot.forEach(t),cEo=r(t0e," (XLM model)"),t0e.forEach(t),fEo=i(W),l1=n(W,"LI",{});var a0e=s(l1);qie=n(a0e,"STRONG",{});var Fot=s(qie);mEo=r(Fot,"xlm-prophetnet"),Fot.forEach(t),gEo=r(a0e," \u2014 "),aj=n(a0e,"A",{href:!0});var Tot=s(aj);hEo=r(Tot,"XLMProphetNetForCausalLM"),Tot.forEach(t),pEo=r(a0e," (XLMProphetNet model)"),a0e.forEach(t),uEo=i(W),i1=n(W,"LI",{});var n0e=s(i1);Nie=n(n0e,"STRONG",{});var Mot=s(Nie);_Eo=r(Mot,"xlm-roberta"),Mot.forEach(t),bEo=r(n0e," \u2014 "),nj=n(n0e,"A",{href:!0});var Eot=s(nj);vEo=r(Eot,"XLMRobertaForCausalLM"),Eot.forEach(t),FEo=r(n0e," (XLM-RoBERTa model)"),n0e.forEach(t),TEo=i(W),d1=n(W,"LI",{});var s0e=s(d1);jie=n(s0e,"STRONG",{});var Cot=s(jie);MEo=r(Cot,"xlm-roberta-xl"),Cot.forEach(t),EEo=r(s0e," \u2014 "),sj=n(s0e,"A",{href:!0});var wot=s(sj);CEo=r(wot,"XLMRobertaXLForCausalLM"),wot.forEach(t),wEo=r(s0e," (XLM-RoBERTa-XL model)"),s0e.forEach(t),AEo=i(W),c1=n(W,"LI",{});var l0e=s(c1);Die=n(l0e,"STRONG",{});var Aot=s(Die);yEo=r(Aot,"xlnet"),Aot.forEach(t),LEo=r(l0e," \u2014 "),lj=n(l0e,"A",{href:!0});var yot=s(lj);xEo=r(yot,"XLNetLMHeadModel"),yot.forEach(t),$Eo=r(l0e," (XLNet model)"),l0e.forEach(t),W.forEach(t),kEo=i(oa),f1=n(oa,"P",{});var i0e=s(f1);SEo=r(i0e,"The model is set in evaluation mode by default using "),Gie=n(i0e,"CODE",{});var Lot=s(Gie);REo=r(Lot,"model.eval()"),Lot.forEach(t),BEo=r(i0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oie=n(i0e,"CODE",{});var xot=s(Oie);PEo=r(xot,"model.train()"),xot.forEach(t),i0e.forEach(t),IEo=i(oa),T(m1.$$.fragment,oa),oa.forEach(t),Os.forEach(t),uIe=i(f),ki=n(f,"H2",{class:!0});var FNe=s(ki);g1=n(FNe,"A",{id:!0,class:!0,href:!0});var $ot=s(g1);Vie=n($ot,"SPAN",{});var kot=s(Vie);T(GA.$$.fragment,kot),kot.forEach(t),$ot.forEach(t),qEo=i(FNe),Xie=n(FNe,"SPAN",{});var Sot=s(Xie);NEo=r(Sot,"AutoModelForMaskedLM"),Sot.forEach(t),FNe.forEach(t),_Ie=i(f),ko=n(f,"DIV",{class:!0});var Vs=s(ko);T(OA.$$.fragment,Vs),jEo=i(Vs),Si=n(Vs,"P",{});var vK=s(Si);DEo=r(vK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ij=n(vK,"A",{href:!0});var Rot=s(ij);GEo=r(Rot,"from_pretrained()"),Rot.forEach(t),OEo=r(vK," class method or the "),dj=n(vK,"A",{href:!0});var Bot=s(dj);VEo=r(Bot,"from_config()"),Bot.forEach(t),XEo=r(vK,` class
method.`),vK.forEach(t),zEo=i(Vs),VA=n(Vs,"P",{});var TNe=s(VA);QEo=r(TNe,"This class cannot be instantiated directly using "),zie=n(TNe,"CODE",{});var Pot=s(zie);WEo=r(Pot,"__init__()"),Pot.forEach(t),HEo=r(TNe," (throws an error)."),TNe.forEach(t),UEo=i(Vs),at=n(Vs,"DIV",{class:!0});var i3=s(at);T(XA.$$.fragment,i3),JEo=i(i3),Qie=n(i3,"P",{});var Iot=s(Qie);YEo=r(Iot,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Iot.forEach(t),KEo=i(i3),Ri=n(i3,"P",{});var FK=s(Ri);ZEo=r(FK,`Note:
Loading a model from its configuration file does `),Wie=n(FK,"STRONG",{});var qot=s(Wie);e5o=r(qot,"not"),qot.forEach(t),o5o=r(FK,` load the model weights. It only affects the
model\u2019s configuration. Use `),cj=n(FK,"A",{href:!0});var Not=s(cj);r5o=r(Not,"from_pretrained()"),Not.forEach(t),t5o=r(FK," to load the model weights."),FK.forEach(t),a5o=i(i3),T(h1.$$.fragment,i3),i3.forEach(t),n5o=i(Vs),Ye=n(Vs,"DIV",{class:!0});var ra=s(Ye);T(zA.$$.fragment,ra),s5o=i(ra),Hie=n(ra,"P",{});var jot=s(Hie);l5o=r(jot,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),jot.forEach(t),i5o=i(ra),xa=n(ra,"P",{});var d3=s(xa);d5o=r(d3,"The model class to instantiate is selected based on the "),Uie=n(d3,"CODE",{});var Dot=s(Uie);c5o=r(Dot,"model_type"),Dot.forEach(t),f5o=r(d3,` property of the config object (either
passed as an argument or loaded from `),Jie=n(d3,"CODE",{});var Got=s(Jie);m5o=r(Got,"pretrained_model_name_or_path"),Got.forEach(t),g5o=r(d3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yie=n(d3,"CODE",{});var Oot=s(Yie);h5o=r(Oot,"pretrained_model_name_or_path"),Oot.forEach(t),p5o=r(d3,":"),d3.forEach(t),u5o=i(ra),Q=n(ra,"UL",{});var H=s(Q);p1=n(H,"LI",{});var d0e=s(p1);Kie=n(d0e,"STRONG",{});var Vot=s(Kie);_5o=r(Vot,"albert"),Vot.forEach(t),b5o=r(d0e," \u2014 "),fj=n(d0e,"A",{href:!0});var Xot=s(fj);v5o=r(Xot,"AlbertForMaskedLM"),Xot.forEach(t),F5o=r(d0e," (ALBERT model)"),d0e.forEach(t),T5o=i(H),u1=n(H,"LI",{});var c0e=s(u1);Zie=n(c0e,"STRONG",{});var zot=s(Zie);M5o=r(zot,"bart"),zot.forEach(t),E5o=r(c0e," \u2014 "),mj=n(c0e,"A",{href:!0});var Qot=s(mj);C5o=r(Qot,"BartForConditionalGeneration"),Qot.forEach(t),w5o=r(c0e," (BART model)"),c0e.forEach(t),A5o=i(H),_1=n(H,"LI",{});var f0e=s(_1);ede=n(f0e,"STRONG",{});var Wot=s(ede);y5o=r(Wot,"bert"),Wot.forEach(t),L5o=r(f0e," \u2014 "),gj=n(f0e,"A",{href:!0});var Hot=s(gj);x5o=r(Hot,"BertForMaskedLM"),Hot.forEach(t),$5o=r(f0e," (BERT model)"),f0e.forEach(t),k5o=i(H),b1=n(H,"LI",{});var m0e=s(b1);ode=n(m0e,"STRONG",{});var Uot=s(ode);S5o=r(Uot,"big_bird"),Uot.forEach(t),R5o=r(m0e," \u2014 "),hj=n(m0e,"A",{href:!0});var Jot=s(hj);B5o=r(Jot,"BigBirdForMaskedLM"),Jot.forEach(t),P5o=r(m0e," (BigBird model)"),m0e.forEach(t),I5o=i(H),v1=n(H,"LI",{});var g0e=s(v1);rde=n(g0e,"STRONG",{});var Yot=s(rde);q5o=r(Yot,"camembert"),Yot.forEach(t),N5o=r(g0e," \u2014 "),pj=n(g0e,"A",{href:!0});var Kot=s(pj);j5o=r(Kot,"CamembertForMaskedLM"),Kot.forEach(t),D5o=r(g0e," (CamemBERT model)"),g0e.forEach(t),G5o=i(H),F1=n(H,"LI",{});var h0e=s(F1);tde=n(h0e,"STRONG",{});var Zot=s(tde);O5o=r(Zot,"convbert"),Zot.forEach(t),V5o=r(h0e," \u2014 "),uj=n(h0e,"A",{href:!0});var ert=s(uj);X5o=r(ert,"ConvBertForMaskedLM"),ert.forEach(t),z5o=r(h0e," (ConvBERT model)"),h0e.forEach(t),Q5o=i(H),T1=n(H,"LI",{});var p0e=s(T1);ade=n(p0e,"STRONG",{});var ort=s(ade);W5o=r(ort,"data2vec-text"),ort.forEach(t),H5o=r(p0e," \u2014 "),_j=n(p0e,"A",{href:!0});var rrt=s(_j);U5o=r(rrt,"Data2VecTextForMaskedLM"),rrt.forEach(t),J5o=r(p0e," (Data2VecText model)"),p0e.forEach(t),Y5o=i(H),M1=n(H,"LI",{});var u0e=s(M1);nde=n(u0e,"STRONG",{});var trt=s(nde);K5o=r(trt,"deberta"),trt.forEach(t),Z5o=r(u0e," \u2014 "),bj=n(u0e,"A",{href:!0});var art=s(bj);eCo=r(art,"DebertaForMaskedLM"),art.forEach(t),oCo=r(u0e," (DeBERTa model)"),u0e.forEach(t),rCo=i(H),E1=n(H,"LI",{});var _0e=s(E1);sde=n(_0e,"STRONG",{});var nrt=s(sde);tCo=r(nrt,"deberta-v2"),nrt.forEach(t),aCo=r(_0e," \u2014 "),vj=n(_0e,"A",{href:!0});var srt=s(vj);nCo=r(srt,"DebertaV2ForMaskedLM"),srt.forEach(t),sCo=r(_0e," (DeBERTa-v2 model)"),_0e.forEach(t),lCo=i(H),C1=n(H,"LI",{});var b0e=s(C1);lde=n(b0e,"STRONG",{});var lrt=s(lde);iCo=r(lrt,"distilbert"),lrt.forEach(t),dCo=r(b0e," \u2014 "),Fj=n(b0e,"A",{href:!0});var irt=s(Fj);cCo=r(irt,"DistilBertForMaskedLM"),irt.forEach(t),fCo=r(b0e," (DistilBERT model)"),b0e.forEach(t),mCo=i(H),w1=n(H,"LI",{});var v0e=s(w1);ide=n(v0e,"STRONG",{});var drt=s(ide);gCo=r(drt,"electra"),drt.forEach(t),hCo=r(v0e," \u2014 "),Tj=n(v0e,"A",{href:!0});var crt=s(Tj);pCo=r(crt,"ElectraForMaskedLM"),crt.forEach(t),uCo=r(v0e," (ELECTRA model)"),v0e.forEach(t),_Co=i(H),A1=n(H,"LI",{});var F0e=s(A1);dde=n(F0e,"STRONG",{});var frt=s(dde);bCo=r(frt,"flaubert"),frt.forEach(t),vCo=r(F0e," \u2014 "),Mj=n(F0e,"A",{href:!0});var mrt=s(Mj);FCo=r(mrt,"FlaubertWithLMHeadModel"),mrt.forEach(t),TCo=r(F0e," (FlauBERT model)"),F0e.forEach(t),MCo=i(H),y1=n(H,"LI",{});var T0e=s(y1);cde=n(T0e,"STRONG",{});var grt=s(cde);ECo=r(grt,"fnet"),grt.forEach(t),CCo=r(T0e," \u2014 "),Ej=n(T0e,"A",{href:!0});var hrt=s(Ej);wCo=r(hrt,"FNetForMaskedLM"),hrt.forEach(t),ACo=r(T0e," (FNet model)"),T0e.forEach(t),yCo=i(H),L1=n(H,"LI",{});var M0e=s(L1);fde=n(M0e,"STRONG",{});var prt=s(fde);LCo=r(prt,"funnel"),prt.forEach(t),xCo=r(M0e," \u2014 "),Cj=n(M0e,"A",{href:!0});var urt=s(Cj);$Co=r(urt,"FunnelForMaskedLM"),urt.forEach(t),kCo=r(M0e," (Funnel Transformer model)"),M0e.forEach(t),SCo=i(H),x1=n(H,"LI",{});var E0e=s(x1);mde=n(E0e,"STRONG",{});var _rt=s(mde);RCo=r(_rt,"ibert"),_rt.forEach(t),BCo=r(E0e," \u2014 "),wj=n(E0e,"A",{href:!0});var brt=s(wj);PCo=r(brt,"IBertForMaskedLM"),brt.forEach(t),ICo=r(E0e," (I-BERT model)"),E0e.forEach(t),qCo=i(H),$1=n(H,"LI",{});var C0e=s($1);gde=n(C0e,"STRONG",{});var vrt=s(gde);NCo=r(vrt,"layoutlm"),vrt.forEach(t),jCo=r(C0e," \u2014 "),Aj=n(C0e,"A",{href:!0});var Frt=s(Aj);DCo=r(Frt,"LayoutLMForMaskedLM"),Frt.forEach(t),GCo=r(C0e," (LayoutLM model)"),C0e.forEach(t),OCo=i(H),k1=n(H,"LI",{});var w0e=s(k1);hde=n(w0e,"STRONG",{});var Trt=s(hde);VCo=r(Trt,"longformer"),Trt.forEach(t),XCo=r(w0e," \u2014 "),yj=n(w0e,"A",{href:!0});var Mrt=s(yj);zCo=r(Mrt,"LongformerForMaskedLM"),Mrt.forEach(t),QCo=r(w0e," (Longformer model)"),w0e.forEach(t),WCo=i(H),S1=n(H,"LI",{});var A0e=s(S1);pde=n(A0e,"STRONG",{});var Ert=s(pde);HCo=r(Ert,"mbart"),Ert.forEach(t),UCo=r(A0e," \u2014 "),Lj=n(A0e,"A",{href:!0});var Crt=s(Lj);JCo=r(Crt,"MBartForConditionalGeneration"),Crt.forEach(t),YCo=r(A0e," (mBART model)"),A0e.forEach(t),KCo=i(H),R1=n(H,"LI",{});var y0e=s(R1);ude=n(y0e,"STRONG",{});var wrt=s(ude);ZCo=r(wrt,"megatron-bert"),wrt.forEach(t),e3o=r(y0e," \u2014 "),xj=n(y0e,"A",{href:!0});var Art=s(xj);o3o=r(Art,"MegatronBertForMaskedLM"),Art.forEach(t),r3o=r(y0e," (MegatronBert model)"),y0e.forEach(t),t3o=i(H),B1=n(H,"LI",{});var L0e=s(B1);_de=n(L0e,"STRONG",{});var yrt=s(_de);a3o=r(yrt,"mobilebert"),yrt.forEach(t),n3o=r(L0e," \u2014 "),$j=n(L0e,"A",{href:!0});var Lrt=s($j);s3o=r(Lrt,"MobileBertForMaskedLM"),Lrt.forEach(t),l3o=r(L0e," (MobileBERT model)"),L0e.forEach(t),i3o=i(H),P1=n(H,"LI",{});var x0e=s(P1);bde=n(x0e,"STRONG",{});var xrt=s(bde);d3o=r(xrt,"mpnet"),xrt.forEach(t),c3o=r(x0e," \u2014 "),kj=n(x0e,"A",{href:!0});var $rt=s(kj);f3o=r($rt,"MPNetForMaskedLM"),$rt.forEach(t),m3o=r(x0e," (MPNet model)"),x0e.forEach(t),g3o=i(H),I1=n(H,"LI",{});var $0e=s(I1);vde=n($0e,"STRONG",{});var krt=s(vde);h3o=r(krt,"nystromformer"),krt.forEach(t),p3o=r($0e," \u2014 "),Sj=n($0e,"A",{href:!0});var Srt=s(Sj);u3o=r(Srt,"NystromformerForMaskedLM"),Srt.forEach(t),_3o=r($0e," (Nystromformer model)"),$0e.forEach(t),b3o=i(H),q1=n(H,"LI",{});var k0e=s(q1);Fde=n(k0e,"STRONG",{});var Rrt=s(Fde);v3o=r(Rrt,"perceiver"),Rrt.forEach(t),F3o=r(k0e," \u2014 "),Rj=n(k0e,"A",{href:!0});var Brt=s(Rj);T3o=r(Brt,"PerceiverForMaskedLM"),Brt.forEach(t),M3o=r(k0e," (Perceiver model)"),k0e.forEach(t),E3o=i(H),N1=n(H,"LI",{});var S0e=s(N1);Tde=n(S0e,"STRONG",{});var Prt=s(Tde);C3o=r(Prt,"qdqbert"),Prt.forEach(t),w3o=r(S0e," \u2014 "),Bj=n(S0e,"A",{href:!0});var Irt=s(Bj);A3o=r(Irt,"QDQBertForMaskedLM"),Irt.forEach(t),y3o=r(S0e," (QDQBert model)"),S0e.forEach(t),L3o=i(H),j1=n(H,"LI",{});var R0e=s(j1);Mde=n(R0e,"STRONG",{});var qrt=s(Mde);x3o=r(qrt,"reformer"),qrt.forEach(t),$3o=r(R0e," \u2014 "),Pj=n(R0e,"A",{href:!0});var Nrt=s(Pj);k3o=r(Nrt,"ReformerForMaskedLM"),Nrt.forEach(t),S3o=r(R0e," (Reformer model)"),R0e.forEach(t),R3o=i(H),D1=n(H,"LI",{});var B0e=s(D1);Ede=n(B0e,"STRONG",{});var jrt=s(Ede);B3o=r(jrt,"rembert"),jrt.forEach(t),P3o=r(B0e," \u2014 "),Ij=n(B0e,"A",{href:!0});var Drt=s(Ij);I3o=r(Drt,"RemBertForMaskedLM"),Drt.forEach(t),q3o=r(B0e," (RemBERT model)"),B0e.forEach(t),N3o=i(H),G1=n(H,"LI",{});var P0e=s(G1);Cde=n(P0e,"STRONG",{});var Grt=s(Cde);j3o=r(Grt,"roberta"),Grt.forEach(t),D3o=r(P0e," \u2014 "),qj=n(P0e,"A",{href:!0});var Ort=s(qj);G3o=r(Ort,"RobertaForMaskedLM"),Ort.forEach(t),O3o=r(P0e," (RoBERTa model)"),P0e.forEach(t),V3o=i(H),O1=n(H,"LI",{});var I0e=s(O1);wde=n(I0e,"STRONG",{});var Vrt=s(wde);X3o=r(Vrt,"roformer"),Vrt.forEach(t),z3o=r(I0e," \u2014 "),Nj=n(I0e,"A",{href:!0});var Xrt=s(Nj);Q3o=r(Xrt,"RoFormerForMaskedLM"),Xrt.forEach(t),W3o=r(I0e," (RoFormer model)"),I0e.forEach(t),H3o=i(H),V1=n(H,"LI",{});var q0e=s(V1);Ade=n(q0e,"STRONG",{});var zrt=s(Ade);U3o=r(zrt,"squeezebert"),zrt.forEach(t),J3o=r(q0e," \u2014 "),jj=n(q0e,"A",{href:!0});var Qrt=s(jj);Y3o=r(Qrt,"SqueezeBertForMaskedLM"),Qrt.forEach(t),K3o=r(q0e," (SqueezeBERT model)"),q0e.forEach(t),Z3o=i(H),X1=n(H,"LI",{});var N0e=s(X1);yde=n(N0e,"STRONG",{});var Wrt=s(yde);ewo=r(Wrt,"tapas"),Wrt.forEach(t),owo=r(N0e," \u2014 "),Dj=n(N0e,"A",{href:!0});var Hrt=s(Dj);rwo=r(Hrt,"TapasForMaskedLM"),Hrt.forEach(t),two=r(N0e," (TAPAS model)"),N0e.forEach(t),awo=i(H),z1=n(H,"LI",{});var j0e=s(z1);Lde=n(j0e,"STRONG",{});var Urt=s(Lde);nwo=r(Urt,"wav2vec2"),Urt.forEach(t),swo=r(j0e," \u2014 "),xde=n(j0e,"CODE",{});var Jrt=s(xde);lwo=r(Jrt,"Wav2Vec2ForMaskedLM"),Jrt.forEach(t),iwo=r(j0e," (Wav2Vec2 model)"),j0e.forEach(t),dwo=i(H),Q1=n(H,"LI",{});var D0e=s(Q1);$de=n(D0e,"STRONG",{});var Yrt=s($de);cwo=r(Yrt,"xlm"),Yrt.forEach(t),fwo=r(D0e," \u2014 "),Gj=n(D0e,"A",{href:!0});var Krt=s(Gj);mwo=r(Krt,"XLMWithLMHeadModel"),Krt.forEach(t),gwo=r(D0e," (XLM model)"),D0e.forEach(t),hwo=i(H),W1=n(H,"LI",{});var G0e=s(W1);kde=n(G0e,"STRONG",{});var Zrt=s(kde);pwo=r(Zrt,"xlm-roberta"),Zrt.forEach(t),uwo=r(G0e," \u2014 "),Oj=n(G0e,"A",{href:!0});var ett=s(Oj);_wo=r(ett,"XLMRobertaForMaskedLM"),ett.forEach(t),bwo=r(G0e," (XLM-RoBERTa model)"),G0e.forEach(t),vwo=i(H),H1=n(H,"LI",{});var O0e=s(H1);Sde=n(O0e,"STRONG",{});var ott=s(Sde);Fwo=r(ott,"xlm-roberta-xl"),ott.forEach(t),Two=r(O0e," \u2014 "),Vj=n(O0e,"A",{href:!0});var rtt=s(Vj);Mwo=r(rtt,"XLMRobertaXLForMaskedLM"),rtt.forEach(t),Ewo=r(O0e," (XLM-RoBERTa-XL model)"),O0e.forEach(t),Cwo=i(H),U1=n(H,"LI",{});var V0e=s(U1);Rde=n(V0e,"STRONG",{});var ttt=s(Rde);wwo=r(ttt,"yoso"),ttt.forEach(t),Awo=r(V0e," \u2014 "),Xj=n(V0e,"A",{href:!0});var att=s(Xj);ywo=r(att,"YosoForMaskedLM"),att.forEach(t),Lwo=r(V0e," (YOSO model)"),V0e.forEach(t),H.forEach(t),xwo=i(ra),J1=n(ra,"P",{});var X0e=s(J1);$wo=r(X0e,"The model is set in evaluation mode by default using "),Bde=n(X0e,"CODE",{});var ntt=s(Bde);kwo=r(ntt,"model.eval()"),ntt.forEach(t),Swo=r(X0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pde=n(X0e,"CODE",{});var stt=s(Pde);Rwo=r(stt,"model.train()"),stt.forEach(t),X0e.forEach(t),Bwo=i(ra),T(Y1.$$.fragment,ra),ra.forEach(t),Vs.forEach(t),bIe=i(f),Bi=n(f,"H2",{class:!0});var MNe=s(Bi);K1=n(MNe,"A",{id:!0,class:!0,href:!0});var ltt=s(K1);Ide=n(ltt,"SPAN",{});var itt=s(Ide);T(QA.$$.fragment,itt),itt.forEach(t),ltt.forEach(t),Pwo=i(MNe),qde=n(MNe,"SPAN",{});var dtt=s(qde);Iwo=r(dtt,"AutoModelForSeq2SeqLM"),dtt.forEach(t),MNe.forEach(t),vIe=i(f),So=n(f,"DIV",{class:!0});var Xs=s(So);T(WA.$$.fragment,Xs),qwo=i(Xs),Pi=n(Xs,"P",{});var TK=s(Pi);Nwo=r(TK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),zj=n(TK,"A",{href:!0});var ctt=s(zj);jwo=r(ctt,"from_pretrained()"),ctt.forEach(t),Dwo=r(TK," class method or the "),Qj=n(TK,"A",{href:!0});var ftt=s(Qj);Gwo=r(ftt,"from_config()"),ftt.forEach(t),Owo=r(TK,` class
method.`),TK.forEach(t),Vwo=i(Xs),HA=n(Xs,"P",{});var ENe=s(HA);Xwo=r(ENe,"This class cannot be instantiated directly using "),Nde=n(ENe,"CODE",{});var mtt=s(Nde);zwo=r(mtt,"__init__()"),mtt.forEach(t),Qwo=r(ENe," (throws an error)."),ENe.forEach(t),Wwo=i(Xs),nt=n(Xs,"DIV",{class:!0});var c3=s(nt);T(UA.$$.fragment,c3),Hwo=i(c3),jde=n(c3,"P",{});var gtt=s(jde);Uwo=r(gtt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),gtt.forEach(t),Jwo=i(c3),Ii=n(c3,"P",{});var MK=s(Ii);Ywo=r(MK,`Note:
Loading a model from its configuration file does `),Dde=n(MK,"STRONG",{});var htt=s(Dde);Kwo=r(htt,"not"),htt.forEach(t),Zwo=r(MK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wj=n(MK,"A",{href:!0});var ptt=s(Wj);eAo=r(ptt,"from_pretrained()"),ptt.forEach(t),oAo=r(MK," to load the model weights."),MK.forEach(t),rAo=i(c3),T(Z1.$$.fragment,c3),c3.forEach(t),tAo=i(Xs),Ke=n(Xs,"DIV",{class:!0});var ta=s(Ke);T(JA.$$.fragment,ta),aAo=i(ta),Gde=n(ta,"P",{});var utt=s(Gde);nAo=r(utt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),utt.forEach(t),sAo=i(ta),$a=n(ta,"P",{});var f3=s($a);lAo=r(f3,"The model class to instantiate is selected based on the "),Ode=n(f3,"CODE",{});var _tt=s(Ode);iAo=r(_tt,"model_type"),_tt.forEach(t),dAo=r(f3,` property of the config object (either
passed as an argument or loaded from `),Vde=n(f3,"CODE",{});var btt=s(Vde);cAo=r(btt,"pretrained_model_name_or_path"),btt.forEach(t),fAo=r(f3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xde=n(f3,"CODE",{});var vtt=s(Xde);mAo=r(vtt,"pretrained_model_name_or_path"),vtt.forEach(t),gAo=r(f3,":"),f3.forEach(t),hAo=i(ta),he=n(ta,"UL",{});var ue=s(he);e8=n(ue,"LI",{});var z0e=s(e8);zde=n(z0e,"STRONG",{});var Ftt=s(zde);pAo=r(Ftt,"bart"),Ftt.forEach(t),uAo=r(z0e," \u2014 "),Hj=n(z0e,"A",{href:!0});var Ttt=s(Hj);_Ao=r(Ttt,"BartForConditionalGeneration"),Ttt.forEach(t),bAo=r(z0e," (BART model)"),z0e.forEach(t),vAo=i(ue),o8=n(ue,"LI",{});var Q0e=s(o8);Qde=n(Q0e,"STRONG",{});var Mtt=s(Qde);FAo=r(Mtt,"bigbird_pegasus"),Mtt.forEach(t),TAo=r(Q0e," \u2014 "),Uj=n(Q0e,"A",{href:!0});var Ett=s(Uj);MAo=r(Ett,"BigBirdPegasusForConditionalGeneration"),Ett.forEach(t),EAo=r(Q0e," (BigBirdPegasus model)"),Q0e.forEach(t),CAo=i(ue),r8=n(ue,"LI",{});var W0e=s(r8);Wde=n(W0e,"STRONG",{});var Ctt=s(Wde);wAo=r(Ctt,"blenderbot"),Ctt.forEach(t),AAo=r(W0e," \u2014 "),Jj=n(W0e,"A",{href:!0});var wtt=s(Jj);yAo=r(wtt,"BlenderbotForConditionalGeneration"),wtt.forEach(t),LAo=r(W0e," (Blenderbot model)"),W0e.forEach(t),xAo=i(ue),t8=n(ue,"LI",{});var H0e=s(t8);Hde=n(H0e,"STRONG",{});var Att=s(Hde);$Ao=r(Att,"blenderbot-small"),Att.forEach(t),kAo=r(H0e," \u2014 "),Yj=n(H0e,"A",{href:!0});var ytt=s(Yj);SAo=r(ytt,"BlenderbotSmallForConditionalGeneration"),ytt.forEach(t),RAo=r(H0e," (BlenderbotSmall model)"),H0e.forEach(t),BAo=i(ue),a8=n(ue,"LI",{});var U0e=s(a8);Ude=n(U0e,"STRONG",{});var Ltt=s(Ude);PAo=r(Ltt,"encoder-decoder"),Ltt.forEach(t),IAo=r(U0e," \u2014 "),Kj=n(U0e,"A",{href:!0});var xtt=s(Kj);qAo=r(xtt,"EncoderDecoderModel"),xtt.forEach(t),NAo=r(U0e," (Encoder decoder model)"),U0e.forEach(t),jAo=i(ue),n8=n(ue,"LI",{});var J0e=s(n8);Jde=n(J0e,"STRONG",{});var $tt=s(Jde);DAo=r($tt,"fsmt"),$tt.forEach(t),GAo=r(J0e," \u2014 "),Zj=n(J0e,"A",{href:!0});var ktt=s(Zj);OAo=r(ktt,"FSMTForConditionalGeneration"),ktt.forEach(t),VAo=r(J0e," (FairSeq Machine-Translation model)"),J0e.forEach(t),XAo=i(ue),s8=n(ue,"LI",{});var Y0e=s(s8);Yde=n(Y0e,"STRONG",{});var Stt=s(Yde);zAo=r(Stt,"led"),Stt.forEach(t),QAo=r(Y0e," \u2014 "),eD=n(Y0e,"A",{href:!0});var Rtt=s(eD);WAo=r(Rtt,"LEDForConditionalGeneration"),Rtt.forEach(t),HAo=r(Y0e," (LED model)"),Y0e.forEach(t),UAo=i(ue),l8=n(ue,"LI",{});var K0e=s(l8);Kde=n(K0e,"STRONG",{});var Btt=s(Kde);JAo=r(Btt,"m2m_100"),Btt.forEach(t),YAo=r(K0e," \u2014 "),oD=n(K0e,"A",{href:!0});var Ptt=s(oD);KAo=r(Ptt,"M2M100ForConditionalGeneration"),Ptt.forEach(t),ZAo=r(K0e," (M2M100 model)"),K0e.forEach(t),e0o=i(ue),i8=n(ue,"LI",{});var Z0e=s(i8);Zde=n(Z0e,"STRONG",{});var Itt=s(Zde);o0o=r(Itt,"marian"),Itt.forEach(t),r0o=r(Z0e," \u2014 "),rD=n(Z0e,"A",{href:!0});var qtt=s(rD);t0o=r(qtt,"MarianMTModel"),qtt.forEach(t),a0o=r(Z0e," (Marian model)"),Z0e.forEach(t),n0o=i(ue),d8=n(ue,"LI",{});var eye=s(d8);ece=n(eye,"STRONG",{});var Ntt=s(ece);s0o=r(Ntt,"mbart"),Ntt.forEach(t),l0o=r(eye," \u2014 "),tD=n(eye,"A",{href:!0});var jtt=s(tD);i0o=r(jtt,"MBartForConditionalGeneration"),jtt.forEach(t),d0o=r(eye," (mBART model)"),eye.forEach(t),c0o=i(ue),c8=n(ue,"LI",{});var oye=s(c8);oce=n(oye,"STRONG",{});var Dtt=s(oce);f0o=r(Dtt,"mt5"),Dtt.forEach(t),m0o=r(oye," \u2014 "),aD=n(oye,"A",{href:!0});var Gtt=s(aD);g0o=r(Gtt,"MT5ForConditionalGeneration"),Gtt.forEach(t),h0o=r(oye," (mT5 model)"),oye.forEach(t),p0o=i(ue),f8=n(ue,"LI",{});var rye=s(f8);rce=n(rye,"STRONG",{});var Ott=s(rce);u0o=r(Ott,"pegasus"),Ott.forEach(t),_0o=r(rye," \u2014 "),nD=n(rye,"A",{href:!0});var Vtt=s(nD);b0o=r(Vtt,"PegasusForConditionalGeneration"),Vtt.forEach(t),v0o=r(rye," (Pegasus model)"),rye.forEach(t),F0o=i(ue),m8=n(ue,"LI",{});var tye=s(m8);tce=n(tye,"STRONG",{});var Xtt=s(tce);T0o=r(Xtt,"plbart"),Xtt.forEach(t),M0o=r(tye," \u2014 "),sD=n(tye,"A",{href:!0});var ztt=s(sD);E0o=r(ztt,"PLBartForConditionalGeneration"),ztt.forEach(t),C0o=r(tye," (PLBart model)"),tye.forEach(t),w0o=i(ue),g8=n(ue,"LI",{});var aye=s(g8);ace=n(aye,"STRONG",{});var Qtt=s(ace);A0o=r(Qtt,"prophetnet"),Qtt.forEach(t),y0o=r(aye," \u2014 "),lD=n(aye,"A",{href:!0});var Wtt=s(lD);L0o=r(Wtt,"ProphetNetForConditionalGeneration"),Wtt.forEach(t),x0o=r(aye," (ProphetNet model)"),aye.forEach(t),$0o=i(ue),h8=n(ue,"LI",{});var nye=s(h8);nce=n(nye,"STRONG",{});var Htt=s(nce);k0o=r(Htt,"t5"),Htt.forEach(t),S0o=r(nye," \u2014 "),iD=n(nye,"A",{href:!0});var Utt=s(iD);R0o=r(Utt,"T5ForConditionalGeneration"),Utt.forEach(t),B0o=r(nye," (T5 model)"),nye.forEach(t),P0o=i(ue),p8=n(ue,"LI",{});var sye=s(p8);sce=n(sye,"STRONG",{});var Jtt=s(sce);I0o=r(Jtt,"tapex"),Jtt.forEach(t),q0o=r(sye," \u2014 "),dD=n(sye,"A",{href:!0});var Ytt=s(dD);N0o=r(Ytt,"BartForConditionalGeneration"),Ytt.forEach(t),j0o=r(sye," (TAPEX model)"),sye.forEach(t),D0o=i(ue),u8=n(ue,"LI",{});var lye=s(u8);lce=n(lye,"STRONG",{});var Ktt=s(lce);G0o=r(Ktt,"xlm-prophetnet"),Ktt.forEach(t),O0o=r(lye," \u2014 "),cD=n(lye,"A",{href:!0});var Ztt=s(cD);V0o=r(Ztt,"XLMProphetNetForConditionalGeneration"),Ztt.forEach(t),X0o=r(lye," (XLMProphetNet model)"),lye.forEach(t),ue.forEach(t),z0o=i(ta),_8=n(ta,"P",{});var iye=s(_8);Q0o=r(iye,"The model is set in evaluation mode by default using "),ice=n(iye,"CODE",{});var eat=s(ice);W0o=r(eat,"model.eval()"),eat.forEach(t),H0o=r(iye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dce=n(iye,"CODE",{});var oat=s(dce);U0o=r(oat,"model.train()"),oat.forEach(t),iye.forEach(t),J0o=i(ta),T(b8.$$.fragment,ta),ta.forEach(t),Xs.forEach(t),FIe=i(f),qi=n(f,"H2",{class:!0});var CNe=s(qi);v8=n(CNe,"A",{id:!0,class:!0,href:!0});var rat=s(v8);cce=n(rat,"SPAN",{});var tat=s(cce);T(YA.$$.fragment,tat),tat.forEach(t),rat.forEach(t),Y0o=i(CNe),fce=n(CNe,"SPAN",{});var aat=s(fce);K0o=r(aat,"AutoModelForSequenceClassification"),aat.forEach(t),CNe.forEach(t),TIe=i(f),Ro=n(f,"DIV",{class:!0});var zs=s(Ro);T(KA.$$.fragment,zs),Z0o=i(zs),Ni=n(zs,"P",{});var EK=s(Ni);eyo=r(EK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),fD=n(EK,"A",{href:!0});var nat=s(fD);oyo=r(nat,"from_pretrained()"),nat.forEach(t),ryo=r(EK," class method or the "),mD=n(EK,"A",{href:!0});var sat=s(mD);tyo=r(sat,"from_config()"),sat.forEach(t),ayo=r(EK,` class
method.`),EK.forEach(t),nyo=i(zs),ZA=n(zs,"P",{});var wNe=s(ZA);syo=r(wNe,"This class cannot be instantiated directly using "),mce=n(wNe,"CODE",{});var lat=s(mce);lyo=r(lat,"__init__()"),lat.forEach(t),iyo=r(wNe," (throws an error)."),wNe.forEach(t),dyo=i(zs),st=n(zs,"DIV",{class:!0});var m3=s(st);T(e0.$$.fragment,m3),cyo=i(m3),gce=n(m3,"P",{});var iat=s(gce);fyo=r(iat,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),iat.forEach(t),myo=i(m3),ji=n(m3,"P",{});var CK=s(ji);gyo=r(CK,`Note:
Loading a model from its configuration file does `),hce=n(CK,"STRONG",{});var dat=s(hce);hyo=r(dat,"not"),dat.forEach(t),pyo=r(CK,` load the model weights. It only affects the
model\u2019s configuration. Use `),gD=n(CK,"A",{href:!0});var cat=s(gD);uyo=r(cat,"from_pretrained()"),cat.forEach(t),_yo=r(CK," to load the model weights."),CK.forEach(t),byo=i(m3),T(F8.$$.fragment,m3),m3.forEach(t),vyo=i(zs),Ze=n(zs,"DIV",{class:!0});var aa=s(Ze);T(o0.$$.fragment,aa),Fyo=i(aa),pce=n(aa,"P",{});var fat=s(pce);Tyo=r(fat,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),fat.forEach(t),Myo=i(aa),ka=n(aa,"P",{});var g3=s(ka);Eyo=r(g3,"The model class to instantiate is selected based on the "),uce=n(g3,"CODE",{});var mat=s(uce);Cyo=r(mat,"model_type"),mat.forEach(t),wyo=r(g3,` property of the config object (either
passed as an argument or loaded from `),_ce=n(g3,"CODE",{});var gat=s(_ce);Ayo=r(gat,"pretrained_model_name_or_path"),gat.forEach(t),yyo=r(g3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bce=n(g3,"CODE",{});var hat=s(bce);Lyo=r(hat,"pretrained_model_name_or_path"),hat.forEach(t),xyo=r(g3,":"),g3.forEach(t),$yo=i(aa),q=n(aa,"UL",{});var j=s(q);T8=n(j,"LI",{});var dye=s(T8);vce=n(dye,"STRONG",{});var pat=s(vce);kyo=r(pat,"albert"),pat.forEach(t),Syo=r(dye," \u2014 "),hD=n(dye,"A",{href:!0});var uat=s(hD);Ryo=r(uat,"AlbertForSequenceClassification"),uat.forEach(t),Byo=r(dye," (ALBERT model)"),dye.forEach(t),Pyo=i(j),M8=n(j,"LI",{});var cye=s(M8);Fce=n(cye,"STRONG",{});var _at=s(Fce);Iyo=r(_at,"bart"),_at.forEach(t),qyo=r(cye," \u2014 "),pD=n(cye,"A",{href:!0});var bat=s(pD);Nyo=r(bat,"BartForSequenceClassification"),bat.forEach(t),jyo=r(cye," (BART model)"),cye.forEach(t),Dyo=i(j),E8=n(j,"LI",{});var fye=s(E8);Tce=n(fye,"STRONG",{});var vat=s(Tce);Gyo=r(vat,"bert"),vat.forEach(t),Oyo=r(fye," \u2014 "),uD=n(fye,"A",{href:!0});var Fat=s(uD);Vyo=r(Fat,"BertForSequenceClassification"),Fat.forEach(t),Xyo=r(fye," (BERT model)"),fye.forEach(t),zyo=i(j),C8=n(j,"LI",{});var mye=s(C8);Mce=n(mye,"STRONG",{});var Tat=s(Mce);Qyo=r(Tat,"big_bird"),Tat.forEach(t),Wyo=r(mye," \u2014 "),_D=n(mye,"A",{href:!0});var Mat=s(_D);Hyo=r(Mat,"BigBirdForSequenceClassification"),Mat.forEach(t),Uyo=r(mye," (BigBird model)"),mye.forEach(t),Jyo=i(j),w8=n(j,"LI",{});var gye=s(w8);Ece=n(gye,"STRONG",{});var Eat=s(Ece);Yyo=r(Eat,"bigbird_pegasus"),Eat.forEach(t),Kyo=r(gye," \u2014 "),bD=n(gye,"A",{href:!0});var Cat=s(bD);Zyo=r(Cat,"BigBirdPegasusForSequenceClassification"),Cat.forEach(t),eLo=r(gye," (BigBirdPegasus model)"),gye.forEach(t),oLo=i(j),A8=n(j,"LI",{});var hye=s(A8);Cce=n(hye,"STRONG",{});var wat=s(Cce);rLo=r(wat,"camembert"),wat.forEach(t),tLo=r(hye," \u2014 "),vD=n(hye,"A",{href:!0});var Aat=s(vD);aLo=r(Aat,"CamembertForSequenceClassification"),Aat.forEach(t),nLo=r(hye," (CamemBERT model)"),hye.forEach(t),sLo=i(j),y8=n(j,"LI",{});var pye=s(y8);wce=n(pye,"STRONG",{});var yat=s(wce);lLo=r(yat,"canine"),yat.forEach(t),iLo=r(pye," \u2014 "),FD=n(pye,"A",{href:!0});var Lat=s(FD);dLo=r(Lat,"CanineForSequenceClassification"),Lat.forEach(t),cLo=r(pye," (Canine model)"),pye.forEach(t),fLo=i(j),L8=n(j,"LI",{});var uye=s(L8);Ace=n(uye,"STRONG",{});var xat=s(Ace);mLo=r(xat,"convbert"),xat.forEach(t),gLo=r(uye," \u2014 "),TD=n(uye,"A",{href:!0});var $at=s(TD);hLo=r($at,"ConvBertForSequenceClassification"),$at.forEach(t),pLo=r(uye," (ConvBERT model)"),uye.forEach(t),uLo=i(j),x8=n(j,"LI",{});var _ye=s(x8);yce=n(_ye,"STRONG",{});var kat=s(yce);_Lo=r(kat,"ctrl"),kat.forEach(t),bLo=r(_ye," \u2014 "),MD=n(_ye,"A",{href:!0});var Sat=s(MD);vLo=r(Sat,"CTRLForSequenceClassification"),Sat.forEach(t),FLo=r(_ye," (CTRL model)"),_ye.forEach(t),TLo=i(j),$8=n(j,"LI",{});var bye=s($8);Lce=n(bye,"STRONG",{});var Rat=s(Lce);MLo=r(Rat,"data2vec-text"),Rat.forEach(t),ELo=r(bye," \u2014 "),ED=n(bye,"A",{href:!0});var Bat=s(ED);CLo=r(Bat,"Data2VecTextForSequenceClassification"),Bat.forEach(t),wLo=r(bye," (Data2VecText model)"),bye.forEach(t),ALo=i(j),k8=n(j,"LI",{});var vye=s(k8);xce=n(vye,"STRONG",{});var Pat=s(xce);yLo=r(Pat,"deberta"),Pat.forEach(t),LLo=r(vye," \u2014 "),CD=n(vye,"A",{href:!0});var Iat=s(CD);xLo=r(Iat,"DebertaForSequenceClassification"),Iat.forEach(t),$Lo=r(vye," (DeBERTa model)"),vye.forEach(t),kLo=i(j),S8=n(j,"LI",{});var Fye=s(S8);$ce=n(Fye,"STRONG",{});var qat=s($ce);SLo=r(qat,"deberta-v2"),qat.forEach(t),RLo=r(Fye," \u2014 "),wD=n(Fye,"A",{href:!0});var Nat=s(wD);BLo=r(Nat,"DebertaV2ForSequenceClassification"),Nat.forEach(t),PLo=r(Fye," (DeBERTa-v2 model)"),Fye.forEach(t),ILo=i(j),R8=n(j,"LI",{});var Tye=s(R8);kce=n(Tye,"STRONG",{});var jat=s(kce);qLo=r(jat,"distilbert"),jat.forEach(t),NLo=r(Tye," \u2014 "),AD=n(Tye,"A",{href:!0});var Dat=s(AD);jLo=r(Dat,"DistilBertForSequenceClassification"),Dat.forEach(t),DLo=r(Tye," (DistilBERT model)"),Tye.forEach(t),GLo=i(j),B8=n(j,"LI",{});var Mye=s(B8);Sce=n(Mye,"STRONG",{});var Gat=s(Sce);OLo=r(Gat,"electra"),Gat.forEach(t),VLo=r(Mye," \u2014 "),yD=n(Mye,"A",{href:!0});var Oat=s(yD);XLo=r(Oat,"ElectraForSequenceClassification"),Oat.forEach(t),zLo=r(Mye," (ELECTRA model)"),Mye.forEach(t),QLo=i(j),P8=n(j,"LI",{});var Eye=s(P8);Rce=n(Eye,"STRONG",{});var Vat=s(Rce);WLo=r(Vat,"flaubert"),Vat.forEach(t),HLo=r(Eye," \u2014 "),LD=n(Eye,"A",{href:!0});var Xat=s(LD);ULo=r(Xat,"FlaubertForSequenceClassification"),Xat.forEach(t),JLo=r(Eye," (FlauBERT model)"),Eye.forEach(t),YLo=i(j),I8=n(j,"LI",{});var Cye=s(I8);Bce=n(Cye,"STRONG",{});var zat=s(Bce);KLo=r(zat,"fnet"),zat.forEach(t),ZLo=r(Cye," \u2014 "),xD=n(Cye,"A",{href:!0});var Qat=s(xD);exo=r(Qat,"FNetForSequenceClassification"),Qat.forEach(t),oxo=r(Cye," (FNet model)"),Cye.forEach(t),rxo=i(j),q8=n(j,"LI",{});var wye=s(q8);Pce=n(wye,"STRONG",{});var Wat=s(Pce);txo=r(Wat,"funnel"),Wat.forEach(t),axo=r(wye," \u2014 "),$D=n(wye,"A",{href:!0});var Hat=s($D);nxo=r(Hat,"FunnelForSequenceClassification"),Hat.forEach(t),sxo=r(wye," (Funnel Transformer model)"),wye.forEach(t),lxo=i(j),N8=n(j,"LI",{});var Aye=s(N8);Ice=n(Aye,"STRONG",{});var Uat=s(Ice);ixo=r(Uat,"gpt2"),Uat.forEach(t),dxo=r(Aye," \u2014 "),kD=n(Aye,"A",{href:!0});var Jat=s(kD);cxo=r(Jat,"GPT2ForSequenceClassification"),Jat.forEach(t),fxo=r(Aye," (OpenAI GPT-2 model)"),Aye.forEach(t),mxo=i(j),j8=n(j,"LI",{});var yye=s(j8);qce=n(yye,"STRONG",{});var Yat=s(qce);gxo=r(Yat,"gpt_neo"),Yat.forEach(t),hxo=r(yye," \u2014 "),SD=n(yye,"A",{href:!0});var Kat=s(SD);pxo=r(Kat,"GPTNeoForSequenceClassification"),Kat.forEach(t),uxo=r(yye," (GPT Neo model)"),yye.forEach(t),_xo=i(j),D8=n(j,"LI",{});var Lye=s(D8);Nce=n(Lye,"STRONG",{});var Zat=s(Nce);bxo=r(Zat,"gptj"),Zat.forEach(t),vxo=r(Lye," \u2014 "),RD=n(Lye,"A",{href:!0});var ent=s(RD);Fxo=r(ent,"GPTJForSequenceClassification"),ent.forEach(t),Txo=r(Lye," (GPT-J model)"),Lye.forEach(t),Mxo=i(j),G8=n(j,"LI",{});var xye=s(G8);jce=n(xye,"STRONG",{});var ont=s(jce);Exo=r(ont,"ibert"),ont.forEach(t),Cxo=r(xye," \u2014 "),BD=n(xye,"A",{href:!0});var rnt=s(BD);wxo=r(rnt,"IBertForSequenceClassification"),rnt.forEach(t),Axo=r(xye," (I-BERT model)"),xye.forEach(t),yxo=i(j),O8=n(j,"LI",{});var $ye=s(O8);Dce=n($ye,"STRONG",{});var tnt=s(Dce);Lxo=r(tnt,"layoutlm"),tnt.forEach(t),xxo=r($ye," \u2014 "),PD=n($ye,"A",{href:!0});var ant=s(PD);$xo=r(ant,"LayoutLMForSequenceClassification"),ant.forEach(t),kxo=r($ye," (LayoutLM model)"),$ye.forEach(t),Sxo=i(j),V8=n(j,"LI",{});var kye=s(V8);Gce=n(kye,"STRONG",{});var nnt=s(Gce);Rxo=r(nnt,"layoutlmv2"),nnt.forEach(t),Bxo=r(kye," \u2014 "),ID=n(kye,"A",{href:!0});var snt=s(ID);Pxo=r(snt,"LayoutLMv2ForSequenceClassification"),snt.forEach(t),Ixo=r(kye," (LayoutLMv2 model)"),kye.forEach(t),qxo=i(j),X8=n(j,"LI",{});var Sye=s(X8);Oce=n(Sye,"STRONG",{});var lnt=s(Oce);Nxo=r(lnt,"led"),lnt.forEach(t),jxo=r(Sye," \u2014 "),qD=n(Sye,"A",{href:!0});var int=s(qD);Dxo=r(int,"LEDForSequenceClassification"),int.forEach(t),Gxo=r(Sye," (LED model)"),Sye.forEach(t),Oxo=i(j),z8=n(j,"LI",{});var Rye=s(z8);Vce=n(Rye,"STRONG",{});var dnt=s(Vce);Vxo=r(dnt,"longformer"),dnt.forEach(t),Xxo=r(Rye," \u2014 "),ND=n(Rye,"A",{href:!0});var cnt=s(ND);zxo=r(cnt,"LongformerForSequenceClassification"),cnt.forEach(t),Qxo=r(Rye," (Longformer model)"),Rye.forEach(t),Wxo=i(j),Q8=n(j,"LI",{});var Bye=s(Q8);Xce=n(Bye,"STRONG",{});var fnt=s(Xce);Hxo=r(fnt,"mbart"),fnt.forEach(t),Uxo=r(Bye," \u2014 "),jD=n(Bye,"A",{href:!0});var mnt=s(jD);Jxo=r(mnt,"MBartForSequenceClassification"),mnt.forEach(t),Yxo=r(Bye," (mBART model)"),Bye.forEach(t),Kxo=i(j),W8=n(j,"LI",{});var Pye=s(W8);zce=n(Pye,"STRONG",{});var gnt=s(zce);Zxo=r(gnt,"megatron-bert"),gnt.forEach(t),e7o=r(Pye," \u2014 "),DD=n(Pye,"A",{href:!0});var hnt=s(DD);o7o=r(hnt,"MegatronBertForSequenceClassification"),hnt.forEach(t),r7o=r(Pye," (MegatronBert model)"),Pye.forEach(t),t7o=i(j),H8=n(j,"LI",{});var Iye=s(H8);Qce=n(Iye,"STRONG",{});var pnt=s(Qce);a7o=r(pnt,"mobilebert"),pnt.forEach(t),n7o=r(Iye," \u2014 "),GD=n(Iye,"A",{href:!0});var unt=s(GD);s7o=r(unt,"MobileBertForSequenceClassification"),unt.forEach(t),l7o=r(Iye," (MobileBERT model)"),Iye.forEach(t),i7o=i(j),U8=n(j,"LI",{});var qye=s(U8);Wce=n(qye,"STRONG",{});var _nt=s(Wce);d7o=r(_nt,"mpnet"),_nt.forEach(t),c7o=r(qye," \u2014 "),OD=n(qye,"A",{href:!0});var bnt=s(OD);f7o=r(bnt,"MPNetForSequenceClassification"),bnt.forEach(t),m7o=r(qye," (MPNet model)"),qye.forEach(t),g7o=i(j),J8=n(j,"LI",{});var Nye=s(J8);Hce=n(Nye,"STRONG",{});var vnt=s(Hce);h7o=r(vnt,"nystromformer"),vnt.forEach(t),p7o=r(Nye," \u2014 "),VD=n(Nye,"A",{href:!0});var Fnt=s(VD);u7o=r(Fnt,"NystromformerForSequenceClassification"),Fnt.forEach(t),_7o=r(Nye," (Nystromformer model)"),Nye.forEach(t),b7o=i(j),Y8=n(j,"LI",{});var jye=s(Y8);Uce=n(jye,"STRONG",{});var Tnt=s(Uce);v7o=r(Tnt,"openai-gpt"),Tnt.forEach(t),F7o=r(jye," \u2014 "),XD=n(jye,"A",{href:!0});var Mnt=s(XD);T7o=r(Mnt,"OpenAIGPTForSequenceClassification"),Mnt.forEach(t),M7o=r(jye," (OpenAI GPT model)"),jye.forEach(t),E7o=i(j),K8=n(j,"LI",{});var Dye=s(K8);Jce=n(Dye,"STRONG",{});var Ent=s(Jce);C7o=r(Ent,"perceiver"),Ent.forEach(t),w7o=r(Dye," \u2014 "),zD=n(Dye,"A",{href:!0});var Cnt=s(zD);A7o=r(Cnt,"PerceiverForSequenceClassification"),Cnt.forEach(t),y7o=r(Dye," (Perceiver model)"),Dye.forEach(t),L7o=i(j),Z8=n(j,"LI",{});var Gye=s(Z8);Yce=n(Gye,"STRONG",{});var wnt=s(Yce);x7o=r(wnt,"plbart"),wnt.forEach(t),$7o=r(Gye," \u2014 "),QD=n(Gye,"A",{href:!0});var Ant=s(QD);k7o=r(Ant,"PLBartForSequenceClassification"),Ant.forEach(t),S7o=r(Gye," (PLBart model)"),Gye.forEach(t),R7o=i(j),eb=n(j,"LI",{});var Oye=s(eb);Kce=n(Oye,"STRONG",{});var ynt=s(Kce);B7o=r(ynt,"qdqbert"),ynt.forEach(t),P7o=r(Oye," \u2014 "),WD=n(Oye,"A",{href:!0});var Lnt=s(WD);I7o=r(Lnt,"QDQBertForSequenceClassification"),Lnt.forEach(t),q7o=r(Oye," (QDQBert model)"),Oye.forEach(t),N7o=i(j),ob=n(j,"LI",{});var Vye=s(ob);Zce=n(Vye,"STRONG",{});var xnt=s(Zce);j7o=r(xnt,"reformer"),xnt.forEach(t),D7o=r(Vye," \u2014 "),HD=n(Vye,"A",{href:!0});var $nt=s(HD);G7o=r($nt,"ReformerForSequenceClassification"),$nt.forEach(t),O7o=r(Vye," (Reformer model)"),Vye.forEach(t),V7o=i(j),rb=n(j,"LI",{});var Xye=s(rb);efe=n(Xye,"STRONG",{});var knt=s(efe);X7o=r(knt,"rembert"),knt.forEach(t),z7o=r(Xye," \u2014 "),UD=n(Xye,"A",{href:!0});var Snt=s(UD);Q7o=r(Snt,"RemBertForSequenceClassification"),Snt.forEach(t),W7o=r(Xye," (RemBERT model)"),Xye.forEach(t),H7o=i(j),tb=n(j,"LI",{});var zye=s(tb);ofe=n(zye,"STRONG",{});var Rnt=s(ofe);U7o=r(Rnt,"roberta"),Rnt.forEach(t),J7o=r(zye," \u2014 "),JD=n(zye,"A",{href:!0});var Bnt=s(JD);Y7o=r(Bnt,"RobertaForSequenceClassification"),Bnt.forEach(t),K7o=r(zye," (RoBERTa model)"),zye.forEach(t),Z7o=i(j),ab=n(j,"LI",{});var Qye=s(ab);rfe=n(Qye,"STRONG",{});var Pnt=s(rfe);e$o=r(Pnt,"roformer"),Pnt.forEach(t),o$o=r(Qye," \u2014 "),YD=n(Qye,"A",{href:!0});var Int=s(YD);r$o=r(Int,"RoFormerForSequenceClassification"),Int.forEach(t),t$o=r(Qye," (RoFormer model)"),Qye.forEach(t),a$o=i(j),nb=n(j,"LI",{});var Wye=s(nb);tfe=n(Wye,"STRONG",{});var qnt=s(tfe);n$o=r(qnt,"squeezebert"),qnt.forEach(t),s$o=r(Wye," \u2014 "),KD=n(Wye,"A",{href:!0});var Nnt=s(KD);l$o=r(Nnt,"SqueezeBertForSequenceClassification"),Nnt.forEach(t),i$o=r(Wye," (SqueezeBERT model)"),Wye.forEach(t),d$o=i(j),sb=n(j,"LI",{});var Hye=s(sb);afe=n(Hye,"STRONG",{});var jnt=s(afe);c$o=r(jnt,"tapas"),jnt.forEach(t),f$o=r(Hye," \u2014 "),ZD=n(Hye,"A",{href:!0});var Dnt=s(ZD);m$o=r(Dnt,"TapasForSequenceClassification"),Dnt.forEach(t),g$o=r(Hye," (TAPAS model)"),Hye.forEach(t),h$o=i(j),lb=n(j,"LI",{});var Uye=s(lb);nfe=n(Uye,"STRONG",{});var Gnt=s(nfe);p$o=r(Gnt,"tapex"),Gnt.forEach(t),u$o=r(Uye," \u2014 "),eG=n(Uye,"A",{href:!0});var Ont=s(eG);_$o=r(Ont,"BartForSequenceClassification"),Ont.forEach(t),b$o=r(Uye," (TAPEX model)"),Uye.forEach(t),v$o=i(j),ib=n(j,"LI",{});var Jye=s(ib);sfe=n(Jye,"STRONG",{});var Vnt=s(sfe);F$o=r(Vnt,"transfo-xl"),Vnt.forEach(t),T$o=r(Jye," \u2014 "),oG=n(Jye,"A",{href:!0});var Xnt=s(oG);M$o=r(Xnt,"TransfoXLForSequenceClassification"),Xnt.forEach(t),E$o=r(Jye," (Transformer-XL model)"),Jye.forEach(t),C$o=i(j),db=n(j,"LI",{});var Yye=s(db);lfe=n(Yye,"STRONG",{});var znt=s(lfe);w$o=r(znt,"xlm"),znt.forEach(t),A$o=r(Yye," \u2014 "),rG=n(Yye,"A",{href:!0});var Qnt=s(rG);y$o=r(Qnt,"XLMForSequenceClassification"),Qnt.forEach(t),L$o=r(Yye," (XLM model)"),Yye.forEach(t),x$o=i(j),cb=n(j,"LI",{});var Kye=s(cb);ife=n(Kye,"STRONG",{});var Wnt=s(ife);$$o=r(Wnt,"xlm-roberta"),Wnt.forEach(t),k$o=r(Kye," \u2014 "),tG=n(Kye,"A",{href:!0});var Hnt=s(tG);S$o=r(Hnt,"XLMRobertaForSequenceClassification"),Hnt.forEach(t),R$o=r(Kye," (XLM-RoBERTa model)"),Kye.forEach(t),B$o=i(j),fb=n(j,"LI",{});var Zye=s(fb);dfe=n(Zye,"STRONG",{});var Unt=s(dfe);P$o=r(Unt,"xlm-roberta-xl"),Unt.forEach(t),I$o=r(Zye," \u2014 "),aG=n(Zye,"A",{href:!0});var Jnt=s(aG);q$o=r(Jnt,"XLMRobertaXLForSequenceClassification"),Jnt.forEach(t),N$o=r(Zye," (XLM-RoBERTa-XL model)"),Zye.forEach(t),j$o=i(j),mb=n(j,"LI",{});var eLe=s(mb);cfe=n(eLe,"STRONG",{});var Ynt=s(cfe);D$o=r(Ynt,"xlnet"),Ynt.forEach(t),G$o=r(eLe," \u2014 "),nG=n(eLe,"A",{href:!0});var Knt=s(nG);O$o=r(Knt,"XLNetForSequenceClassification"),Knt.forEach(t),V$o=r(eLe," (XLNet model)"),eLe.forEach(t),X$o=i(j),gb=n(j,"LI",{});var oLe=s(gb);ffe=n(oLe,"STRONG",{});var Znt=s(ffe);z$o=r(Znt,"yoso"),Znt.forEach(t),Q$o=r(oLe," \u2014 "),sG=n(oLe,"A",{href:!0});var est=s(sG);W$o=r(est,"YosoForSequenceClassification"),est.forEach(t),H$o=r(oLe," (YOSO model)"),oLe.forEach(t),j.forEach(t),U$o=i(aa),hb=n(aa,"P",{});var rLe=s(hb);J$o=r(rLe,"The model is set in evaluation mode by default using "),mfe=n(rLe,"CODE",{});var ost=s(mfe);Y$o=r(ost,"model.eval()"),ost.forEach(t),K$o=r(rLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gfe=n(rLe,"CODE",{});var rst=s(gfe);Z$o=r(rst,"model.train()"),rst.forEach(t),rLe.forEach(t),eko=i(aa),T(pb.$$.fragment,aa),aa.forEach(t),zs.forEach(t),MIe=i(f),Di=n(f,"H2",{class:!0});var ANe=s(Di);ub=n(ANe,"A",{id:!0,class:!0,href:!0});var tst=s(ub);hfe=n(tst,"SPAN",{});var ast=s(hfe);T(r0.$$.fragment,ast),ast.forEach(t),tst.forEach(t),oko=i(ANe),pfe=n(ANe,"SPAN",{});var nst=s(pfe);rko=r(nst,"AutoModelForMultipleChoice"),nst.forEach(t),ANe.forEach(t),EIe=i(f),Bo=n(f,"DIV",{class:!0});var Qs=s(Bo);T(t0.$$.fragment,Qs),tko=i(Qs),Gi=n(Qs,"P",{});var wK=s(Gi);ako=r(wK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),lG=n(wK,"A",{href:!0});var sst=s(lG);nko=r(sst,"from_pretrained()"),sst.forEach(t),sko=r(wK," class method or the "),iG=n(wK,"A",{href:!0});var lst=s(iG);lko=r(lst,"from_config()"),lst.forEach(t),iko=r(wK,` class
method.`),wK.forEach(t),dko=i(Qs),a0=n(Qs,"P",{});var yNe=s(a0);cko=r(yNe,"This class cannot be instantiated directly using "),ufe=n(yNe,"CODE",{});var ist=s(ufe);fko=r(ist,"__init__()"),ist.forEach(t),mko=r(yNe," (throws an error)."),yNe.forEach(t),gko=i(Qs),lt=n(Qs,"DIV",{class:!0});var h3=s(lt);T(n0.$$.fragment,h3),hko=i(h3),_fe=n(h3,"P",{});var dst=s(_fe);pko=r(dst,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),dst.forEach(t),uko=i(h3),Oi=n(h3,"P",{});var AK=s(Oi);_ko=r(AK,`Note:
Loading a model from its configuration file does `),bfe=n(AK,"STRONG",{});var cst=s(bfe);bko=r(cst,"not"),cst.forEach(t),vko=r(AK,` load the model weights. It only affects the
model\u2019s configuration. Use `),dG=n(AK,"A",{href:!0});var fst=s(dG);Fko=r(fst,"from_pretrained()"),fst.forEach(t),Tko=r(AK," to load the model weights."),AK.forEach(t),Mko=i(h3),T(_b.$$.fragment,h3),h3.forEach(t),Eko=i(Qs),eo=n(Qs,"DIV",{class:!0});var na=s(eo);T(s0.$$.fragment,na),Cko=i(na),vfe=n(na,"P",{});var mst=s(vfe);wko=r(mst,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),mst.forEach(t),Ako=i(na),Sa=n(na,"P",{});var p3=s(Sa);yko=r(p3,"The model class to instantiate is selected based on the "),Ffe=n(p3,"CODE",{});var gst=s(Ffe);Lko=r(gst,"model_type"),gst.forEach(t),xko=r(p3,` property of the config object (either
passed as an argument or loaded from `),Tfe=n(p3,"CODE",{});var hst=s(Tfe);$ko=r(hst,"pretrained_model_name_or_path"),hst.forEach(t),kko=r(p3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mfe=n(p3,"CODE",{});var pst=s(Mfe);Sko=r(pst,"pretrained_model_name_or_path"),pst.forEach(t),Rko=r(p3,":"),p3.forEach(t),Bko=i(na),Y=n(na,"UL",{});var K=s(Y);bb=n(K,"LI",{});var tLe=s(bb);Efe=n(tLe,"STRONG",{});var ust=s(Efe);Pko=r(ust,"albert"),ust.forEach(t),Iko=r(tLe," \u2014 "),cG=n(tLe,"A",{href:!0});var _st=s(cG);qko=r(_st,"AlbertForMultipleChoice"),_st.forEach(t),Nko=r(tLe," (ALBERT model)"),tLe.forEach(t),jko=i(K),vb=n(K,"LI",{});var aLe=s(vb);Cfe=n(aLe,"STRONG",{});var bst=s(Cfe);Dko=r(bst,"bert"),bst.forEach(t),Gko=r(aLe," \u2014 "),fG=n(aLe,"A",{href:!0});var vst=s(fG);Oko=r(vst,"BertForMultipleChoice"),vst.forEach(t),Vko=r(aLe," (BERT model)"),aLe.forEach(t),Xko=i(K),Fb=n(K,"LI",{});var nLe=s(Fb);wfe=n(nLe,"STRONG",{});var Fst=s(wfe);zko=r(Fst,"big_bird"),Fst.forEach(t),Qko=r(nLe," \u2014 "),mG=n(nLe,"A",{href:!0});var Tst=s(mG);Wko=r(Tst,"BigBirdForMultipleChoice"),Tst.forEach(t),Hko=r(nLe," (BigBird model)"),nLe.forEach(t),Uko=i(K),Tb=n(K,"LI",{});var sLe=s(Tb);Afe=n(sLe,"STRONG",{});var Mst=s(Afe);Jko=r(Mst,"camembert"),Mst.forEach(t),Yko=r(sLe," \u2014 "),gG=n(sLe,"A",{href:!0});var Est=s(gG);Kko=r(Est,"CamembertForMultipleChoice"),Est.forEach(t),Zko=r(sLe," (CamemBERT model)"),sLe.forEach(t),eSo=i(K),Mb=n(K,"LI",{});var lLe=s(Mb);yfe=n(lLe,"STRONG",{});var Cst=s(yfe);oSo=r(Cst,"canine"),Cst.forEach(t),rSo=r(lLe," \u2014 "),hG=n(lLe,"A",{href:!0});var wst=s(hG);tSo=r(wst,"CanineForMultipleChoice"),wst.forEach(t),aSo=r(lLe," (Canine model)"),lLe.forEach(t),nSo=i(K),Eb=n(K,"LI",{});var iLe=s(Eb);Lfe=n(iLe,"STRONG",{});var Ast=s(Lfe);sSo=r(Ast,"convbert"),Ast.forEach(t),lSo=r(iLe," \u2014 "),pG=n(iLe,"A",{href:!0});var yst=s(pG);iSo=r(yst,"ConvBertForMultipleChoice"),yst.forEach(t),dSo=r(iLe," (ConvBERT model)"),iLe.forEach(t),cSo=i(K),Cb=n(K,"LI",{});var dLe=s(Cb);xfe=n(dLe,"STRONG",{});var Lst=s(xfe);fSo=r(Lst,"data2vec-text"),Lst.forEach(t),mSo=r(dLe," \u2014 "),uG=n(dLe,"A",{href:!0});var xst=s(uG);gSo=r(xst,"Data2VecTextForMultipleChoice"),xst.forEach(t),hSo=r(dLe," (Data2VecText model)"),dLe.forEach(t),pSo=i(K),wb=n(K,"LI",{});var cLe=s(wb);$fe=n(cLe,"STRONG",{});var $st=s($fe);uSo=r($st,"deberta-v2"),$st.forEach(t),_So=r(cLe," \u2014 "),_G=n(cLe,"A",{href:!0});var kst=s(_G);bSo=r(kst,"DebertaV2ForMultipleChoice"),kst.forEach(t),vSo=r(cLe," (DeBERTa-v2 model)"),cLe.forEach(t),FSo=i(K),Ab=n(K,"LI",{});var fLe=s(Ab);kfe=n(fLe,"STRONG",{});var Sst=s(kfe);TSo=r(Sst,"distilbert"),Sst.forEach(t),MSo=r(fLe," \u2014 "),bG=n(fLe,"A",{href:!0});var Rst=s(bG);ESo=r(Rst,"DistilBertForMultipleChoice"),Rst.forEach(t),CSo=r(fLe," (DistilBERT model)"),fLe.forEach(t),wSo=i(K),yb=n(K,"LI",{});var mLe=s(yb);Sfe=n(mLe,"STRONG",{});var Bst=s(Sfe);ASo=r(Bst,"electra"),Bst.forEach(t),ySo=r(mLe," \u2014 "),vG=n(mLe,"A",{href:!0});var Pst=s(vG);LSo=r(Pst,"ElectraForMultipleChoice"),Pst.forEach(t),xSo=r(mLe," (ELECTRA model)"),mLe.forEach(t),$So=i(K),Lb=n(K,"LI",{});var gLe=s(Lb);Rfe=n(gLe,"STRONG",{});var Ist=s(Rfe);kSo=r(Ist,"flaubert"),Ist.forEach(t),SSo=r(gLe," \u2014 "),FG=n(gLe,"A",{href:!0});var qst=s(FG);RSo=r(qst,"FlaubertForMultipleChoice"),qst.forEach(t),BSo=r(gLe," (FlauBERT model)"),gLe.forEach(t),PSo=i(K),xb=n(K,"LI",{});var hLe=s(xb);Bfe=n(hLe,"STRONG",{});var Nst=s(Bfe);ISo=r(Nst,"fnet"),Nst.forEach(t),qSo=r(hLe," \u2014 "),TG=n(hLe,"A",{href:!0});var jst=s(TG);NSo=r(jst,"FNetForMultipleChoice"),jst.forEach(t),jSo=r(hLe," (FNet model)"),hLe.forEach(t),DSo=i(K),$b=n(K,"LI",{});var pLe=s($b);Pfe=n(pLe,"STRONG",{});var Dst=s(Pfe);GSo=r(Dst,"funnel"),Dst.forEach(t),OSo=r(pLe," \u2014 "),MG=n(pLe,"A",{href:!0});var Gst=s(MG);VSo=r(Gst,"FunnelForMultipleChoice"),Gst.forEach(t),XSo=r(pLe," (Funnel Transformer model)"),pLe.forEach(t),zSo=i(K),kb=n(K,"LI",{});var uLe=s(kb);Ife=n(uLe,"STRONG",{});var Ost=s(Ife);QSo=r(Ost,"ibert"),Ost.forEach(t),WSo=r(uLe," \u2014 "),EG=n(uLe,"A",{href:!0});var Vst=s(EG);HSo=r(Vst,"IBertForMultipleChoice"),Vst.forEach(t),USo=r(uLe," (I-BERT model)"),uLe.forEach(t),JSo=i(K),Sb=n(K,"LI",{});var _Le=s(Sb);qfe=n(_Le,"STRONG",{});var Xst=s(qfe);YSo=r(Xst,"longformer"),Xst.forEach(t),KSo=r(_Le," \u2014 "),CG=n(_Le,"A",{href:!0});var zst=s(CG);ZSo=r(zst,"LongformerForMultipleChoice"),zst.forEach(t),eRo=r(_Le," (Longformer model)"),_Le.forEach(t),oRo=i(K),Rb=n(K,"LI",{});var bLe=s(Rb);Nfe=n(bLe,"STRONG",{});var Qst=s(Nfe);rRo=r(Qst,"megatron-bert"),Qst.forEach(t),tRo=r(bLe," \u2014 "),wG=n(bLe,"A",{href:!0});var Wst=s(wG);aRo=r(Wst,"MegatronBertForMultipleChoice"),Wst.forEach(t),nRo=r(bLe," (MegatronBert model)"),bLe.forEach(t),sRo=i(K),Bb=n(K,"LI",{});var vLe=s(Bb);jfe=n(vLe,"STRONG",{});var Hst=s(jfe);lRo=r(Hst,"mobilebert"),Hst.forEach(t),iRo=r(vLe," \u2014 "),AG=n(vLe,"A",{href:!0});var Ust=s(AG);dRo=r(Ust,"MobileBertForMultipleChoice"),Ust.forEach(t),cRo=r(vLe," (MobileBERT model)"),vLe.forEach(t),fRo=i(K),Pb=n(K,"LI",{});var FLe=s(Pb);Dfe=n(FLe,"STRONG",{});var Jst=s(Dfe);mRo=r(Jst,"mpnet"),Jst.forEach(t),gRo=r(FLe," \u2014 "),yG=n(FLe,"A",{href:!0});var Yst=s(yG);hRo=r(Yst,"MPNetForMultipleChoice"),Yst.forEach(t),pRo=r(FLe," (MPNet model)"),FLe.forEach(t),uRo=i(K),Ib=n(K,"LI",{});var TLe=s(Ib);Gfe=n(TLe,"STRONG",{});var Kst=s(Gfe);_Ro=r(Kst,"nystromformer"),Kst.forEach(t),bRo=r(TLe," \u2014 "),LG=n(TLe,"A",{href:!0});var Zst=s(LG);vRo=r(Zst,"NystromformerForMultipleChoice"),Zst.forEach(t),FRo=r(TLe," (Nystromformer model)"),TLe.forEach(t),TRo=i(K),qb=n(K,"LI",{});var MLe=s(qb);Ofe=n(MLe,"STRONG",{});var elt=s(Ofe);MRo=r(elt,"qdqbert"),elt.forEach(t),ERo=r(MLe," \u2014 "),xG=n(MLe,"A",{href:!0});var olt=s(xG);CRo=r(olt,"QDQBertForMultipleChoice"),olt.forEach(t),wRo=r(MLe," (QDQBert model)"),MLe.forEach(t),ARo=i(K),Nb=n(K,"LI",{});var ELe=s(Nb);Vfe=n(ELe,"STRONG",{});var rlt=s(Vfe);yRo=r(rlt,"rembert"),rlt.forEach(t),LRo=r(ELe," \u2014 "),$G=n(ELe,"A",{href:!0});var tlt=s($G);xRo=r(tlt,"RemBertForMultipleChoice"),tlt.forEach(t),$Ro=r(ELe," (RemBERT model)"),ELe.forEach(t),kRo=i(K),jb=n(K,"LI",{});var CLe=s(jb);Xfe=n(CLe,"STRONG",{});var alt=s(Xfe);SRo=r(alt,"roberta"),alt.forEach(t),RRo=r(CLe," \u2014 "),kG=n(CLe,"A",{href:!0});var nlt=s(kG);BRo=r(nlt,"RobertaForMultipleChoice"),nlt.forEach(t),PRo=r(CLe," (RoBERTa model)"),CLe.forEach(t),IRo=i(K),Db=n(K,"LI",{});var wLe=s(Db);zfe=n(wLe,"STRONG",{});var slt=s(zfe);qRo=r(slt,"roformer"),slt.forEach(t),NRo=r(wLe," \u2014 "),SG=n(wLe,"A",{href:!0});var llt=s(SG);jRo=r(llt,"RoFormerForMultipleChoice"),llt.forEach(t),DRo=r(wLe," (RoFormer model)"),wLe.forEach(t),GRo=i(K),Gb=n(K,"LI",{});var ALe=s(Gb);Qfe=n(ALe,"STRONG",{});var ilt=s(Qfe);ORo=r(ilt,"squeezebert"),ilt.forEach(t),VRo=r(ALe," \u2014 "),RG=n(ALe,"A",{href:!0});var dlt=s(RG);XRo=r(dlt,"SqueezeBertForMultipleChoice"),dlt.forEach(t),zRo=r(ALe," (SqueezeBERT model)"),ALe.forEach(t),QRo=i(K),Ob=n(K,"LI",{});var yLe=s(Ob);Wfe=n(yLe,"STRONG",{});var clt=s(Wfe);WRo=r(clt,"xlm"),clt.forEach(t),HRo=r(yLe," \u2014 "),BG=n(yLe,"A",{href:!0});var flt=s(BG);URo=r(flt,"XLMForMultipleChoice"),flt.forEach(t),JRo=r(yLe," (XLM model)"),yLe.forEach(t),YRo=i(K),Vb=n(K,"LI",{});var LLe=s(Vb);Hfe=n(LLe,"STRONG",{});var mlt=s(Hfe);KRo=r(mlt,"xlm-roberta"),mlt.forEach(t),ZRo=r(LLe," \u2014 "),PG=n(LLe,"A",{href:!0});var glt=s(PG);eBo=r(glt,"XLMRobertaForMultipleChoice"),glt.forEach(t),oBo=r(LLe," (XLM-RoBERTa model)"),LLe.forEach(t),rBo=i(K),Xb=n(K,"LI",{});var xLe=s(Xb);Ufe=n(xLe,"STRONG",{});var hlt=s(Ufe);tBo=r(hlt,"xlm-roberta-xl"),hlt.forEach(t),aBo=r(xLe," \u2014 "),IG=n(xLe,"A",{href:!0});var plt=s(IG);nBo=r(plt,"XLMRobertaXLForMultipleChoice"),plt.forEach(t),sBo=r(xLe," (XLM-RoBERTa-XL model)"),xLe.forEach(t),lBo=i(K),zb=n(K,"LI",{});var $Le=s(zb);Jfe=n($Le,"STRONG",{});var ult=s(Jfe);iBo=r(ult,"xlnet"),ult.forEach(t),dBo=r($Le," \u2014 "),qG=n($Le,"A",{href:!0});var _lt=s(qG);cBo=r(_lt,"XLNetForMultipleChoice"),_lt.forEach(t),fBo=r($Le," (XLNet model)"),$Le.forEach(t),mBo=i(K),Qb=n(K,"LI",{});var kLe=s(Qb);Yfe=n(kLe,"STRONG",{});var blt=s(Yfe);gBo=r(blt,"yoso"),blt.forEach(t),hBo=r(kLe," \u2014 "),NG=n(kLe,"A",{href:!0});var vlt=s(NG);pBo=r(vlt,"YosoForMultipleChoice"),vlt.forEach(t),uBo=r(kLe," (YOSO model)"),kLe.forEach(t),K.forEach(t),_Bo=i(na),Wb=n(na,"P",{});var SLe=s(Wb);bBo=r(SLe,"The model is set in evaluation mode by default using "),Kfe=n(SLe,"CODE",{});var Flt=s(Kfe);vBo=r(Flt,"model.eval()"),Flt.forEach(t),FBo=r(SLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zfe=n(SLe,"CODE",{});var Tlt=s(Zfe);TBo=r(Tlt,"model.train()"),Tlt.forEach(t),SLe.forEach(t),MBo=i(na),T(Hb.$$.fragment,na),na.forEach(t),Qs.forEach(t),CIe=i(f),Vi=n(f,"H2",{class:!0});var LNe=s(Vi);Ub=n(LNe,"A",{id:!0,class:!0,href:!0});var Mlt=s(Ub);eme=n(Mlt,"SPAN",{});var Elt=s(eme);T(l0.$$.fragment,Elt),Elt.forEach(t),Mlt.forEach(t),EBo=i(LNe),ome=n(LNe,"SPAN",{});var Clt=s(ome);CBo=r(Clt,"AutoModelForNextSentencePrediction"),Clt.forEach(t),LNe.forEach(t),wIe=i(f),Po=n(f,"DIV",{class:!0});var Ws=s(Po);T(i0.$$.fragment,Ws),wBo=i(Ws),Xi=n(Ws,"P",{});var yK=s(Xi);ABo=r(yK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),jG=n(yK,"A",{href:!0});var wlt=s(jG);yBo=r(wlt,"from_pretrained()"),wlt.forEach(t),LBo=r(yK," class method or the "),DG=n(yK,"A",{href:!0});var Alt=s(DG);xBo=r(Alt,"from_config()"),Alt.forEach(t),$Bo=r(yK,` class
method.`),yK.forEach(t),kBo=i(Ws),d0=n(Ws,"P",{});var xNe=s(d0);SBo=r(xNe,"This class cannot be instantiated directly using "),rme=n(xNe,"CODE",{});var ylt=s(rme);RBo=r(ylt,"__init__()"),ylt.forEach(t),BBo=r(xNe," (throws an error)."),xNe.forEach(t),PBo=i(Ws),it=n(Ws,"DIV",{class:!0});var u3=s(it);T(c0.$$.fragment,u3),IBo=i(u3),tme=n(u3,"P",{});var Llt=s(tme);qBo=r(Llt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Llt.forEach(t),NBo=i(u3),zi=n(u3,"P",{});var LK=s(zi);jBo=r(LK,`Note:
Loading a model from its configuration file does `),ame=n(LK,"STRONG",{});var xlt=s(ame);DBo=r(xlt,"not"),xlt.forEach(t),GBo=r(LK,` load the model weights. It only affects the
model\u2019s configuration. Use `),GG=n(LK,"A",{href:!0});var $lt=s(GG);OBo=r($lt,"from_pretrained()"),$lt.forEach(t),VBo=r(LK," to load the model weights."),LK.forEach(t),XBo=i(u3),T(Jb.$$.fragment,u3),u3.forEach(t),zBo=i(Ws),oo=n(Ws,"DIV",{class:!0});var sa=s(oo);T(f0.$$.fragment,sa),QBo=i(sa),nme=n(sa,"P",{});var klt=s(nme);WBo=r(klt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),klt.forEach(t),HBo=i(sa),Ra=n(sa,"P",{});var _3=s(Ra);UBo=r(_3,"The model class to instantiate is selected based on the "),sme=n(_3,"CODE",{});var Slt=s(sme);JBo=r(Slt,"model_type"),Slt.forEach(t),YBo=r(_3,` property of the config object (either
passed as an argument or loaded from `),lme=n(_3,"CODE",{});var Rlt=s(lme);KBo=r(Rlt,"pretrained_model_name_or_path"),Rlt.forEach(t),ZBo=r(_3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ime=n(_3,"CODE",{});var Blt=s(ime);ePo=r(Blt,"pretrained_model_name_or_path"),Blt.forEach(t),oPo=r(_3,":"),_3.forEach(t),rPo=i(sa),Yr=n(sa,"UL",{});var Hs=s(Yr);Yb=n(Hs,"LI",{});var RLe=s(Yb);dme=n(RLe,"STRONG",{});var Plt=s(dme);tPo=r(Plt,"bert"),Plt.forEach(t),aPo=r(RLe," \u2014 "),OG=n(RLe,"A",{href:!0});var Ilt=s(OG);nPo=r(Ilt,"BertForNextSentencePrediction"),Ilt.forEach(t),sPo=r(RLe," (BERT model)"),RLe.forEach(t),lPo=i(Hs),Kb=n(Hs,"LI",{});var BLe=s(Kb);cme=n(BLe,"STRONG",{});var qlt=s(cme);iPo=r(qlt,"fnet"),qlt.forEach(t),dPo=r(BLe," \u2014 "),VG=n(BLe,"A",{href:!0});var Nlt=s(VG);cPo=r(Nlt,"FNetForNextSentencePrediction"),Nlt.forEach(t),fPo=r(BLe," (FNet model)"),BLe.forEach(t),mPo=i(Hs),Zb=n(Hs,"LI",{});var PLe=s(Zb);fme=n(PLe,"STRONG",{});var jlt=s(fme);gPo=r(jlt,"megatron-bert"),jlt.forEach(t),hPo=r(PLe," \u2014 "),XG=n(PLe,"A",{href:!0});var Dlt=s(XG);pPo=r(Dlt,"MegatronBertForNextSentencePrediction"),Dlt.forEach(t),uPo=r(PLe," (MegatronBert model)"),PLe.forEach(t),_Po=i(Hs),e2=n(Hs,"LI",{});var ILe=s(e2);mme=n(ILe,"STRONG",{});var Glt=s(mme);bPo=r(Glt,"mobilebert"),Glt.forEach(t),vPo=r(ILe," \u2014 "),zG=n(ILe,"A",{href:!0});var Olt=s(zG);FPo=r(Olt,"MobileBertForNextSentencePrediction"),Olt.forEach(t),TPo=r(ILe," (MobileBERT model)"),ILe.forEach(t),MPo=i(Hs),o2=n(Hs,"LI",{});var qLe=s(o2);gme=n(qLe,"STRONG",{});var Vlt=s(gme);EPo=r(Vlt,"qdqbert"),Vlt.forEach(t),CPo=r(qLe," \u2014 "),QG=n(qLe,"A",{href:!0});var Xlt=s(QG);wPo=r(Xlt,"QDQBertForNextSentencePrediction"),Xlt.forEach(t),APo=r(qLe," (QDQBert model)"),qLe.forEach(t),Hs.forEach(t),yPo=i(sa),r2=n(sa,"P",{});var NLe=s(r2);LPo=r(NLe,"The model is set in evaluation mode by default using "),hme=n(NLe,"CODE",{});var zlt=s(hme);xPo=r(zlt,"model.eval()"),zlt.forEach(t),$Po=r(NLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pme=n(NLe,"CODE",{});var Qlt=s(pme);kPo=r(Qlt,"model.train()"),Qlt.forEach(t),NLe.forEach(t),SPo=i(sa),T(t2.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),AIe=i(f),Qi=n(f,"H2",{class:!0});var $Ne=s(Qi);a2=n($Ne,"A",{id:!0,class:!0,href:!0});var Wlt=s(a2);ume=n(Wlt,"SPAN",{});var Hlt=s(ume);T(m0.$$.fragment,Hlt),Hlt.forEach(t),Wlt.forEach(t),RPo=i($Ne),_me=n($Ne,"SPAN",{});var Ult=s(_me);BPo=r(Ult,"AutoModelForTokenClassification"),Ult.forEach(t),$Ne.forEach(t),yIe=i(f),Io=n(f,"DIV",{class:!0});var Us=s(Io);T(g0.$$.fragment,Us),PPo=i(Us),Wi=n(Us,"P",{});var xK=s(Wi);IPo=r(xK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),WG=n(xK,"A",{href:!0});var Jlt=s(WG);qPo=r(Jlt,"from_pretrained()"),Jlt.forEach(t),NPo=r(xK," class method or the "),HG=n(xK,"A",{href:!0});var Ylt=s(HG);jPo=r(Ylt,"from_config()"),Ylt.forEach(t),DPo=r(xK,` class
method.`),xK.forEach(t),GPo=i(Us),h0=n(Us,"P",{});var kNe=s(h0);OPo=r(kNe,"This class cannot be instantiated directly using "),bme=n(kNe,"CODE",{});var Klt=s(bme);VPo=r(Klt,"__init__()"),Klt.forEach(t),XPo=r(kNe," (throws an error)."),kNe.forEach(t),zPo=i(Us),dt=n(Us,"DIV",{class:!0});var b3=s(dt);T(p0.$$.fragment,b3),QPo=i(b3),vme=n(b3,"P",{});var Zlt=s(vme);WPo=r(Zlt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Zlt.forEach(t),HPo=i(b3),Hi=n(b3,"P",{});var $K=s(Hi);UPo=r($K,`Note:
Loading a model from its configuration file does `),Fme=n($K,"STRONG",{});var eit=s(Fme);JPo=r(eit,"not"),eit.forEach(t),YPo=r($K,` load the model weights. It only affects the
model\u2019s configuration. Use `),UG=n($K,"A",{href:!0});var oit=s(UG);KPo=r(oit,"from_pretrained()"),oit.forEach(t),ZPo=r($K," to load the model weights."),$K.forEach(t),eIo=i(b3),T(n2.$$.fragment,b3),b3.forEach(t),oIo=i(Us),ro=n(Us,"DIV",{class:!0});var la=s(ro);T(u0.$$.fragment,la),rIo=i(la),Tme=n(la,"P",{});var rit=s(Tme);tIo=r(rit,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),rit.forEach(t),aIo=i(la),Ba=n(la,"P",{});var v3=s(Ba);nIo=r(v3,"The model class to instantiate is selected based on the "),Mme=n(v3,"CODE",{});var tit=s(Mme);sIo=r(tit,"model_type"),tit.forEach(t),lIo=r(v3,` property of the config object (either
passed as an argument or loaded from `),Eme=n(v3,"CODE",{});var ait=s(Eme);iIo=r(ait,"pretrained_model_name_or_path"),ait.forEach(t),dIo=r(v3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cme=n(v3,"CODE",{});var nit=s(Cme);cIo=r(nit,"pretrained_model_name_or_path"),nit.forEach(t),fIo=r(v3,":"),v3.forEach(t),mIo=i(la),U=n(la,"UL",{});var J=s(U);s2=n(J,"LI",{});var jLe=s(s2);wme=n(jLe,"STRONG",{});var sit=s(wme);gIo=r(sit,"albert"),sit.forEach(t),hIo=r(jLe," \u2014 "),JG=n(jLe,"A",{href:!0});var lit=s(JG);pIo=r(lit,"AlbertForTokenClassification"),lit.forEach(t),uIo=r(jLe," (ALBERT model)"),jLe.forEach(t),_Io=i(J),l2=n(J,"LI",{});var DLe=s(l2);Ame=n(DLe,"STRONG",{});var iit=s(Ame);bIo=r(iit,"bert"),iit.forEach(t),vIo=r(DLe," \u2014 "),YG=n(DLe,"A",{href:!0});var dit=s(YG);FIo=r(dit,"BertForTokenClassification"),dit.forEach(t),TIo=r(DLe," (BERT model)"),DLe.forEach(t),MIo=i(J),i2=n(J,"LI",{});var GLe=s(i2);yme=n(GLe,"STRONG",{});var cit=s(yme);EIo=r(cit,"big_bird"),cit.forEach(t),CIo=r(GLe," \u2014 "),KG=n(GLe,"A",{href:!0});var fit=s(KG);wIo=r(fit,"BigBirdForTokenClassification"),fit.forEach(t),AIo=r(GLe," (BigBird model)"),GLe.forEach(t),yIo=i(J),d2=n(J,"LI",{});var OLe=s(d2);Lme=n(OLe,"STRONG",{});var mit=s(Lme);LIo=r(mit,"camembert"),mit.forEach(t),xIo=r(OLe," \u2014 "),ZG=n(OLe,"A",{href:!0});var git=s(ZG);$Io=r(git,"CamembertForTokenClassification"),git.forEach(t),kIo=r(OLe," (CamemBERT model)"),OLe.forEach(t),SIo=i(J),c2=n(J,"LI",{});var VLe=s(c2);xme=n(VLe,"STRONG",{});var hit=s(xme);RIo=r(hit,"canine"),hit.forEach(t),BIo=r(VLe," \u2014 "),eO=n(VLe,"A",{href:!0});var pit=s(eO);PIo=r(pit,"CanineForTokenClassification"),pit.forEach(t),IIo=r(VLe," (Canine model)"),VLe.forEach(t),qIo=i(J),f2=n(J,"LI",{});var XLe=s(f2);$me=n(XLe,"STRONG",{});var uit=s($me);NIo=r(uit,"convbert"),uit.forEach(t),jIo=r(XLe," \u2014 "),oO=n(XLe,"A",{href:!0});var _it=s(oO);DIo=r(_it,"ConvBertForTokenClassification"),_it.forEach(t),GIo=r(XLe," (ConvBERT model)"),XLe.forEach(t),OIo=i(J),m2=n(J,"LI",{});var zLe=s(m2);kme=n(zLe,"STRONG",{});var bit=s(kme);VIo=r(bit,"data2vec-text"),bit.forEach(t),XIo=r(zLe," \u2014 "),rO=n(zLe,"A",{href:!0});var vit=s(rO);zIo=r(vit,"Data2VecTextForTokenClassification"),vit.forEach(t),QIo=r(zLe," (Data2VecText model)"),zLe.forEach(t),WIo=i(J),g2=n(J,"LI",{});var QLe=s(g2);Sme=n(QLe,"STRONG",{});var Fit=s(Sme);HIo=r(Fit,"deberta"),Fit.forEach(t),UIo=r(QLe," \u2014 "),tO=n(QLe,"A",{href:!0});var Tit=s(tO);JIo=r(Tit,"DebertaForTokenClassification"),Tit.forEach(t),YIo=r(QLe," (DeBERTa model)"),QLe.forEach(t),KIo=i(J),h2=n(J,"LI",{});var WLe=s(h2);Rme=n(WLe,"STRONG",{});var Mit=s(Rme);ZIo=r(Mit,"deberta-v2"),Mit.forEach(t),eqo=r(WLe," \u2014 "),aO=n(WLe,"A",{href:!0});var Eit=s(aO);oqo=r(Eit,"DebertaV2ForTokenClassification"),Eit.forEach(t),rqo=r(WLe," (DeBERTa-v2 model)"),WLe.forEach(t),tqo=i(J),p2=n(J,"LI",{});var HLe=s(p2);Bme=n(HLe,"STRONG",{});var Cit=s(Bme);aqo=r(Cit,"distilbert"),Cit.forEach(t),nqo=r(HLe," \u2014 "),nO=n(HLe,"A",{href:!0});var wit=s(nO);sqo=r(wit,"DistilBertForTokenClassification"),wit.forEach(t),lqo=r(HLe," (DistilBERT model)"),HLe.forEach(t),iqo=i(J),u2=n(J,"LI",{});var ULe=s(u2);Pme=n(ULe,"STRONG",{});var Ait=s(Pme);dqo=r(Ait,"electra"),Ait.forEach(t),cqo=r(ULe," \u2014 "),sO=n(ULe,"A",{href:!0});var yit=s(sO);fqo=r(yit,"ElectraForTokenClassification"),yit.forEach(t),mqo=r(ULe," (ELECTRA model)"),ULe.forEach(t),gqo=i(J),_2=n(J,"LI",{});var JLe=s(_2);Ime=n(JLe,"STRONG",{});var Lit=s(Ime);hqo=r(Lit,"flaubert"),Lit.forEach(t),pqo=r(JLe," \u2014 "),lO=n(JLe,"A",{href:!0});var xit=s(lO);uqo=r(xit,"FlaubertForTokenClassification"),xit.forEach(t),_qo=r(JLe," (FlauBERT model)"),JLe.forEach(t),bqo=i(J),b2=n(J,"LI",{});var YLe=s(b2);qme=n(YLe,"STRONG",{});var $it=s(qme);vqo=r($it,"fnet"),$it.forEach(t),Fqo=r(YLe," \u2014 "),iO=n(YLe,"A",{href:!0});var kit=s(iO);Tqo=r(kit,"FNetForTokenClassification"),kit.forEach(t),Mqo=r(YLe," (FNet model)"),YLe.forEach(t),Eqo=i(J),v2=n(J,"LI",{});var KLe=s(v2);Nme=n(KLe,"STRONG",{});var Sit=s(Nme);Cqo=r(Sit,"funnel"),Sit.forEach(t),wqo=r(KLe," \u2014 "),dO=n(KLe,"A",{href:!0});var Rit=s(dO);Aqo=r(Rit,"FunnelForTokenClassification"),Rit.forEach(t),yqo=r(KLe," (Funnel Transformer model)"),KLe.forEach(t),Lqo=i(J),F2=n(J,"LI",{});var ZLe=s(F2);jme=n(ZLe,"STRONG",{});var Bit=s(jme);xqo=r(Bit,"gpt2"),Bit.forEach(t),$qo=r(ZLe," \u2014 "),cO=n(ZLe,"A",{href:!0});var Pit=s(cO);kqo=r(Pit,"GPT2ForTokenClassification"),Pit.forEach(t),Sqo=r(ZLe," (OpenAI GPT-2 model)"),ZLe.forEach(t),Rqo=i(J),T2=n(J,"LI",{});var exe=s(T2);Dme=n(exe,"STRONG",{});var Iit=s(Dme);Bqo=r(Iit,"ibert"),Iit.forEach(t),Pqo=r(exe," \u2014 "),fO=n(exe,"A",{href:!0});var qit=s(fO);Iqo=r(qit,"IBertForTokenClassification"),qit.forEach(t),qqo=r(exe," (I-BERT model)"),exe.forEach(t),Nqo=i(J),M2=n(J,"LI",{});var oxe=s(M2);Gme=n(oxe,"STRONG",{});var Nit=s(Gme);jqo=r(Nit,"layoutlm"),Nit.forEach(t),Dqo=r(oxe," \u2014 "),mO=n(oxe,"A",{href:!0});var jit=s(mO);Gqo=r(jit,"LayoutLMForTokenClassification"),jit.forEach(t),Oqo=r(oxe," (LayoutLM model)"),oxe.forEach(t),Vqo=i(J),E2=n(J,"LI",{});var rxe=s(E2);Ome=n(rxe,"STRONG",{});var Dit=s(Ome);Xqo=r(Dit,"layoutlmv2"),Dit.forEach(t),zqo=r(rxe," \u2014 "),gO=n(rxe,"A",{href:!0});var Git=s(gO);Qqo=r(Git,"LayoutLMv2ForTokenClassification"),Git.forEach(t),Wqo=r(rxe," (LayoutLMv2 model)"),rxe.forEach(t),Hqo=i(J),C2=n(J,"LI",{});var txe=s(C2);Vme=n(txe,"STRONG",{});var Oit=s(Vme);Uqo=r(Oit,"longformer"),Oit.forEach(t),Jqo=r(txe," \u2014 "),hO=n(txe,"A",{href:!0});var Vit=s(hO);Yqo=r(Vit,"LongformerForTokenClassification"),Vit.forEach(t),Kqo=r(txe," (Longformer model)"),txe.forEach(t),Zqo=i(J),w2=n(J,"LI",{});var axe=s(w2);Xme=n(axe,"STRONG",{});var Xit=s(Xme);eNo=r(Xit,"megatron-bert"),Xit.forEach(t),oNo=r(axe," \u2014 "),pO=n(axe,"A",{href:!0});var zit=s(pO);rNo=r(zit,"MegatronBertForTokenClassification"),zit.forEach(t),tNo=r(axe," (MegatronBert model)"),axe.forEach(t),aNo=i(J),A2=n(J,"LI",{});var nxe=s(A2);zme=n(nxe,"STRONG",{});var Qit=s(zme);nNo=r(Qit,"mobilebert"),Qit.forEach(t),sNo=r(nxe," \u2014 "),uO=n(nxe,"A",{href:!0});var Wit=s(uO);lNo=r(Wit,"MobileBertForTokenClassification"),Wit.forEach(t),iNo=r(nxe," (MobileBERT model)"),nxe.forEach(t),dNo=i(J),y2=n(J,"LI",{});var sxe=s(y2);Qme=n(sxe,"STRONG",{});var Hit=s(Qme);cNo=r(Hit,"mpnet"),Hit.forEach(t),fNo=r(sxe," \u2014 "),_O=n(sxe,"A",{href:!0});var Uit=s(_O);mNo=r(Uit,"MPNetForTokenClassification"),Uit.forEach(t),gNo=r(sxe," (MPNet model)"),sxe.forEach(t),hNo=i(J),L2=n(J,"LI",{});var lxe=s(L2);Wme=n(lxe,"STRONG",{});var Jit=s(Wme);pNo=r(Jit,"nystromformer"),Jit.forEach(t),uNo=r(lxe," \u2014 "),bO=n(lxe,"A",{href:!0});var Yit=s(bO);_No=r(Yit,"NystromformerForTokenClassification"),Yit.forEach(t),bNo=r(lxe," (Nystromformer model)"),lxe.forEach(t),vNo=i(J),x2=n(J,"LI",{});var ixe=s(x2);Hme=n(ixe,"STRONG",{});var Kit=s(Hme);FNo=r(Kit,"qdqbert"),Kit.forEach(t),TNo=r(ixe," \u2014 "),vO=n(ixe,"A",{href:!0});var Zit=s(vO);MNo=r(Zit,"QDQBertForTokenClassification"),Zit.forEach(t),ENo=r(ixe," (QDQBert model)"),ixe.forEach(t),CNo=i(J),$2=n(J,"LI",{});var dxe=s($2);Ume=n(dxe,"STRONG",{});var edt=s(Ume);wNo=r(edt,"rembert"),edt.forEach(t),ANo=r(dxe," \u2014 "),FO=n(dxe,"A",{href:!0});var odt=s(FO);yNo=r(odt,"RemBertForTokenClassification"),odt.forEach(t),LNo=r(dxe," (RemBERT model)"),dxe.forEach(t),xNo=i(J),k2=n(J,"LI",{});var cxe=s(k2);Jme=n(cxe,"STRONG",{});var rdt=s(Jme);$No=r(rdt,"roberta"),rdt.forEach(t),kNo=r(cxe," \u2014 "),TO=n(cxe,"A",{href:!0});var tdt=s(TO);SNo=r(tdt,"RobertaForTokenClassification"),tdt.forEach(t),RNo=r(cxe," (RoBERTa model)"),cxe.forEach(t),BNo=i(J),S2=n(J,"LI",{});var fxe=s(S2);Yme=n(fxe,"STRONG",{});var adt=s(Yme);PNo=r(adt,"roformer"),adt.forEach(t),INo=r(fxe," \u2014 "),MO=n(fxe,"A",{href:!0});var ndt=s(MO);qNo=r(ndt,"RoFormerForTokenClassification"),ndt.forEach(t),NNo=r(fxe," (RoFormer model)"),fxe.forEach(t),jNo=i(J),R2=n(J,"LI",{});var mxe=s(R2);Kme=n(mxe,"STRONG",{});var sdt=s(Kme);DNo=r(sdt,"squeezebert"),sdt.forEach(t),GNo=r(mxe," \u2014 "),EO=n(mxe,"A",{href:!0});var ldt=s(EO);ONo=r(ldt,"SqueezeBertForTokenClassification"),ldt.forEach(t),VNo=r(mxe," (SqueezeBERT model)"),mxe.forEach(t),XNo=i(J),B2=n(J,"LI",{});var gxe=s(B2);Zme=n(gxe,"STRONG",{});var idt=s(Zme);zNo=r(idt,"xlm"),idt.forEach(t),QNo=r(gxe," \u2014 "),CO=n(gxe,"A",{href:!0});var ddt=s(CO);WNo=r(ddt,"XLMForTokenClassification"),ddt.forEach(t),HNo=r(gxe," (XLM model)"),gxe.forEach(t),UNo=i(J),P2=n(J,"LI",{});var hxe=s(P2);ege=n(hxe,"STRONG",{});var cdt=s(ege);JNo=r(cdt,"xlm-roberta"),cdt.forEach(t),YNo=r(hxe," \u2014 "),wO=n(hxe,"A",{href:!0});var fdt=s(wO);KNo=r(fdt,"XLMRobertaForTokenClassification"),fdt.forEach(t),ZNo=r(hxe," (XLM-RoBERTa model)"),hxe.forEach(t),ejo=i(J),I2=n(J,"LI",{});var pxe=s(I2);oge=n(pxe,"STRONG",{});var mdt=s(oge);ojo=r(mdt,"xlm-roberta-xl"),mdt.forEach(t),rjo=r(pxe," \u2014 "),AO=n(pxe,"A",{href:!0});var gdt=s(AO);tjo=r(gdt,"XLMRobertaXLForTokenClassification"),gdt.forEach(t),ajo=r(pxe," (XLM-RoBERTa-XL model)"),pxe.forEach(t),njo=i(J),q2=n(J,"LI",{});var uxe=s(q2);rge=n(uxe,"STRONG",{});var hdt=s(rge);sjo=r(hdt,"xlnet"),hdt.forEach(t),ljo=r(uxe," \u2014 "),yO=n(uxe,"A",{href:!0});var pdt=s(yO);ijo=r(pdt,"XLNetForTokenClassification"),pdt.forEach(t),djo=r(uxe," (XLNet model)"),uxe.forEach(t),cjo=i(J),N2=n(J,"LI",{});var _xe=s(N2);tge=n(_xe,"STRONG",{});var udt=s(tge);fjo=r(udt,"yoso"),udt.forEach(t),mjo=r(_xe," \u2014 "),LO=n(_xe,"A",{href:!0});var _dt=s(LO);gjo=r(_dt,"YosoForTokenClassification"),_dt.forEach(t),hjo=r(_xe," (YOSO model)"),_xe.forEach(t),J.forEach(t),pjo=i(la),j2=n(la,"P",{});var bxe=s(j2);ujo=r(bxe,"The model is set in evaluation mode by default using "),age=n(bxe,"CODE",{});var bdt=s(age);_jo=r(bdt,"model.eval()"),bdt.forEach(t),bjo=r(bxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nge=n(bxe,"CODE",{});var vdt=s(nge);vjo=r(vdt,"model.train()"),vdt.forEach(t),bxe.forEach(t),Fjo=i(la),T(D2.$$.fragment,la),la.forEach(t),Us.forEach(t),LIe=i(f),Ui=n(f,"H2",{class:!0});var SNe=s(Ui);G2=n(SNe,"A",{id:!0,class:!0,href:!0});var Fdt=s(G2);sge=n(Fdt,"SPAN",{});var Tdt=s(sge);T(_0.$$.fragment,Tdt),Tdt.forEach(t),Fdt.forEach(t),Tjo=i(SNe),lge=n(SNe,"SPAN",{});var Mdt=s(lge);Mjo=r(Mdt,"AutoModelForQuestionAnswering"),Mdt.forEach(t),SNe.forEach(t),xIe=i(f),qo=n(f,"DIV",{class:!0});var Js=s(qo);T(b0.$$.fragment,Js),Ejo=i(Js),Ji=n(Js,"P",{});var kK=s(Ji);Cjo=r(kK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),xO=n(kK,"A",{href:!0});var Edt=s(xO);wjo=r(Edt,"from_pretrained()"),Edt.forEach(t),Ajo=r(kK," class method or the "),$O=n(kK,"A",{href:!0});var Cdt=s($O);yjo=r(Cdt,"from_config()"),Cdt.forEach(t),Ljo=r(kK,` class
method.`),kK.forEach(t),xjo=i(Js),v0=n(Js,"P",{});var RNe=s(v0);$jo=r(RNe,"This class cannot be instantiated directly using "),ige=n(RNe,"CODE",{});var wdt=s(ige);kjo=r(wdt,"__init__()"),wdt.forEach(t),Sjo=r(RNe," (throws an error)."),RNe.forEach(t),Rjo=i(Js),ct=n(Js,"DIV",{class:!0});var F3=s(ct);T(F0.$$.fragment,F3),Bjo=i(F3),dge=n(F3,"P",{});var Adt=s(dge);Pjo=r(Adt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Adt.forEach(t),Ijo=i(F3),Yi=n(F3,"P",{});var SK=s(Yi);qjo=r(SK,`Note:
Loading a model from its configuration file does `),cge=n(SK,"STRONG",{});var ydt=s(cge);Njo=r(ydt,"not"),ydt.forEach(t),jjo=r(SK,` load the model weights. It only affects the
model\u2019s configuration. Use `),kO=n(SK,"A",{href:!0});var Ldt=s(kO);Djo=r(Ldt,"from_pretrained()"),Ldt.forEach(t),Gjo=r(SK," to load the model weights."),SK.forEach(t),Ojo=i(F3),T(O2.$$.fragment,F3),F3.forEach(t),Vjo=i(Js),to=n(Js,"DIV",{class:!0});var ia=s(to);T(T0.$$.fragment,ia),Xjo=i(ia),fge=n(ia,"P",{});var xdt=s(fge);zjo=r(xdt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),xdt.forEach(t),Qjo=i(ia),Pa=n(ia,"P",{});var T3=s(Pa);Wjo=r(T3,"The model class to instantiate is selected based on the "),mge=n(T3,"CODE",{});var $dt=s(mge);Hjo=r($dt,"model_type"),$dt.forEach(t),Ujo=r(T3,` property of the config object (either
passed as an argument or loaded from `),gge=n(T3,"CODE",{});var kdt=s(gge);Jjo=r(kdt,"pretrained_model_name_or_path"),kdt.forEach(t),Yjo=r(T3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hge=n(T3,"CODE",{});var Sdt=s(hge);Kjo=r(Sdt,"pretrained_model_name_or_path"),Sdt.forEach(t),Zjo=r(T3,":"),T3.forEach(t),eDo=i(ia),O=n(ia,"UL",{});var X=s(O);V2=n(X,"LI",{});var vxe=s(V2);pge=n(vxe,"STRONG",{});var Rdt=s(pge);oDo=r(Rdt,"albert"),Rdt.forEach(t),rDo=r(vxe," \u2014 "),SO=n(vxe,"A",{href:!0});var Bdt=s(SO);tDo=r(Bdt,"AlbertForQuestionAnswering"),Bdt.forEach(t),aDo=r(vxe," (ALBERT model)"),vxe.forEach(t),nDo=i(X),X2=n(X,"LI",{});var Fxe=s(X2);uge=n(Fxe,"STRONG",{});var Pdt=s(uge);sDo=r(Pdt,"bart"),Pdt.forEach(t),lDo=r(Fxe," \u2014 "),RO=n(Fxe,"A",{href:!0});var Idt=s(RO);iDo=r(Idt,"BartForQuestionAnswering"),Idt.forEach(t),dDo=r(Fxe," (BART model)"),Fxe.forEach(t),cDo=i(X),z2=n(X,"LI",{});var Txe=s(z2);_ge=n(Txe,"STRONG",{});var qdt=s(_ge);fDo=r(qdt,"bert"),qdt.forEach(t),mDo=r(Txe," \u2014 "),BO=n(Txe,"A",{href:!0});var Ndt=s(BO);gDo=r(Ndt,"BertForQuestionAnswering"),Ndt.forEach(t),hDo=r(Txe," (BERT model)"),Txe.forEach(t),pDo=i(X),Q2=n(X,"LI",{});var Mxe=s(Q2);bge=n(Mxe,"STRONG",{});var jdt=s(bge);uDo=r(jdt,"big_bird"),jdt.forEach(t),_Do=r(Mxe," \u2014 "),PO=n(Mxe,"A",{href:!0});var Ddt=s(PO);bDo=r(Ddt,"BigBirdForQuestionAnswering"),Ddt.forEach(t),vDo=r(Mxe," (BigBird model)"),Mxe.forEach(t),FDo=i(X),W2=n(X,"LI",{});var Exe=s(W2);vge=n(Exe,"STRONG",{});var Gdt=s(vge);TDo=r(Gdt,"bigbird_pegasus"),Gdt.forEach(t),MDo=r(Exe," \u2014 "),IO=n(Exe,"A",{href:!0});var Odt=s(IO);EDo=r(Odt,"BigBirdPegasusForQuestionAnswering"),Odt.forEach(t),CDo=r(Exe," (BigBirdPegasus model)"),Exe.forEach(t),wDo=i(X),H2=n(X,"LI",{});var Cxe=s(H2);Fge=n(Cxe,"STRONG",{});var Vdt=s(Fge);ADo=r(Vdt,"camembert"),Vdt.forEach(t),yDo=r(Cxe," \u2014 "),qO=n(Cxe,"A",{href:!0});var Xdt=s(qO);LDo=r(Xdt,"CamembertForQuestionAnswering"),Xdt.forEach(t),xDo=r(Cxe," (CamemBERT model)"),Cxe.forEach(t),$Do=i(X),U2=n(X,"LI",{});var wxe=s(U2);Tge=n(wxe,"STRONG",{});var zdt=s(Tge);kDo=r(zdt,"canine"),zdt.forEach(t),SDo=r(wxe," \u2014 "),NO=n(wxe,"A",{href:!0});var Qdt=s(NO);RDo=r(Qdt,"CanineForQuestionAnswering"),Qdt.forEach(t),BDo=r(wxe," (Canine model)"),wxe.forEach(t),PDo=i(X),J2=n(X,"LI",{});var Axe=s(J2);Mge=n(Axe,"STRONG",{});var Wdt=s(Mge);IDo=r(Wdt,"convbert"),Wdt.forEach(t),qDo=r(Axe," \u2014 "),jO=n(Axe,"A",{href:!0});var Hdt=s(jO);NDo=r(Hdt,"ConvBertForQuestionAnswering"),Hdt.forEach(t),jDo=r(Axe," (ConvBERT model)"),Axe.forEach(t),DDo=i(X),Y2=n(X,"LI",{});var yxe=s(Y2);Ege=n(yxe,"STRONG",{});var Udt=s(Ege);GDo=r(Udt,"data2vec-text"),Udt.forEach(t),ODo=r(yxe," \u2014 "),DO=n(yxe,"A",{href:!0});var Jdt=s(DO);VDo=r(Jdt,"Data2VecTextForQuestionAnswering"),Jdt.forEach(t),XDo=r(yxe," (Data2VecText model)"),yxe.forEach(t),zDo=i(X),K2=n(X,"LI",{});var Lxe=s(K2);Cge=n(Lxe,"STRONG",{});var Ydt=s(Cge);QDo=r(Ydt,"deberta"),Ydt.forEach(t),WDo=r(Lxe," \u2014 "),GO=n(Lxe,"A",{href:!0});var Kdt=s(GO);HDo=r(Kdt,"DebertaForQuestionAnswering"),Kdt.forEach(t),UDo=r(Lxe," (DeBERTa model)"),Lxe.forEach(t),JDo=i(X),Z2=n(X,"LI",{});var xxe=s(Z2);wge=n(xxe,"STRONG",{});var Zdt=s(wge);YDo=r(Zdt,"deberta-v2"),Zdt.forEach(t),KDo=r(xxe," \u2014 "),OO=n(xxe,"A",{href:!0});var ect=s(OO);ZDo=r(ect,"DebertaV2ForQuestionAnswering"),ect.forEach(t),eGo=r(xxe," (DeBERTa-v2 model)"),xxe.forEach(t),oGo=i(X),ev=n(X,"LI",{});var $xe=s(ev);Age=n($xe,"STRONG",{});var oct=s(Age);rGo=r(oct,"distilbert"),oct.forEach(t),tGo=r($xe," \u2014 "),VO=n($xe,"A",{href:!0});var rct=s(VO);aGo=r(rct,"DistilBertForQuestionAnswering"),rct.forEach(t),nGo=r($xe," (DistilBERT model)"),$xe.forEach(t),sGo=i(X),ov=n(X,"LI",{});var kxe=s(ov);yge=n(kxe,"STRONG",{});var tct=s(yge);lGo=r(tct,"electra"),tct.forEach(t),iGo=r(kxe," \u2014 "),XO=n(kxe,"A",{href:!0});var act=s(XO);dGo=r(act,"ElectraForQuestionAnswering"),act.forEach(t),cGo=r(kxe," (ELECTRA model)"),kxe.forEach(t),fGo=i(X),rv=n(X,"LI",{});var Sxe=s(rv);Lge=n(Sxe,"STRONG",{});var nct=s(Lge);mGo=r(nct,"flaubert"),nct.forEach(t),gGo=r(Sxe," \u2014 "),zO=n(Sxe,"A",{href:!0});var sct=s(zO);hGo=r(sct,"FlaubertForQuestionAnsweringSimple"),sct.forEach(t),pGo=r(Sxe," (FlauBERT model)"),Sxe.forEach(t),uGo=i(X),tv=n(X,"LI",{});var Rxe=s(tv);xge=n(Rxe,"STRONG",{});var lct=s(xge);_Go=r(lct,"fnet"),lct.forEach(t),bGo=r(Rxe," \u2014 "),QO=n(Rxe,"A",{href:!0});var ict=s(QO);vGo=r(ict,"FNetForQuestionAnswering"),ict.forEach(t),FGo=r(Rxe," (FNet model)"),Rxe.forEach(t),TGo=i(X),av=n(X,"LI",{});var Bxe=s(av);$ge=n(Bxe,"STRONG",{});var dct=s($ge);MGo=r(dct,"funnel"),dct.forEach(t),EGo=r(Bxe," \u2014 "),WO=n(Bxe,"A",{href:!0});var cct=s(WO);CGo=r(cct,"FunnelForQuestionAnswering"),cct.forEach(t),wGo=r(Bxe," (Funnel Transformer model)"),Bxe.forEach(t),AGo=i(X),nv=n(X,"LI",{});var Pxe=s(nv);kge=n(Pxe,"STRONG",{});var fct=s(kge);yGo=r(fct,"gptj"),fct.forEach(t),LGo=r(Pxe," \u2014 "),HO=n(Pxe,"A",{href:!0});var mct=s(HO);xGo=r(mct,"GPTJForQuestionAnswering"),mct.forEach(t),$Go=r(Pxe," (GPT-J model)"),Pxe.forEach(t),kGo=i(X),sv=n(X,"LI",{});var Ixe=s(sv);Sge=n(Ixe,"STRONG",{});var gct=s(Sge);SGo=r(gct,"ibert"),gct.forEach(t),RGo=r(Ixe," \u2014 "),UO=n(Ixe,"A",{href:!0});var hct=s(UO);BGo=r(hct,"IBertForQuestionAnswering"),hct.forEach(t),PGo=r(Ixe," (I-BERT model)"),Ixe.forEach(t),IGo=i(X),lv=n(X,"LI",{});var qxe=s(lv);Rge=n(qxe,"STRONG",{});var pct=s(Rge);qGo=r(pct,"layoutlmv2"),pct.forEach(t),NGo=r(qxe," \u2014 "),JO=n(qxe,"A",{href:!0});var uct=s(JO);jGo=r(uct,"LayoutLMv2ForQuestionAnswering"),uct.forEach(t),DGo=r(qxe," (LayoutLMv2 model)"),qxe.forEach(t),GGo=i(X),iv=n(X,"LI",{});var Nxe=s(iv);Bge=n(Nxe,"STRONG",{});var _ct=s(Bge);OGo=r(_ct,"led"),_ct.forEach(t),VGo=r(Nxe," \u2014 "),YO=n(Nxe,"A",{href:!0});var bct=s(YO);XGo=r(bct,"LEDForQuestionAnswering"),bct.forEach(t),zGo=r(Nxe," (LED model)"),Nxe.forEach(t),QGo=i(X),dv=n(X,"LI",{});var jxe=s(dv);Pge=n(jxe,"STRONG",{});var vct=s(Pge);WGo=r(vct,"longformer"),vct.forEach(t),HGo=r(jxe," \u2014 "),KO=n(jxe,"A",{href:!0});var Fct=s(KO);UGo=r(Fct,"LongformerForQuestionAnswering"),Fct.forEach(t),JGo=r(jxe," (Longformer model)"),jxe.forEach(t),YGo=i(X),cv=n(X,"LI",{});var Dxe=s(cv);Ige=n(Dxe,"STRONG",{});var Tct=s(Ige);KGo=r(Tct,"lxmert"),Tct.forEach(t),ZGo=r(Dxe," \u2014 "),ZO=n(Dxe,"A",{href:!0});var Mct=s(ZO);eOo=r(Mct,"LxmertForQuestionAnswering"),Mct.forEach(t),oOo=r(Dxe," (LXMERT model)"),Dxe.forEach(t),rOo=i(X),fv=n(X,"LI",{});var Gxe=s(fv);qge=n(Gxe,"STRONG",{});var Ect=s(qge);tOo=r(Ect,"mbart"),Ect.forEach(t),aOo=r(Gxe," \u2014 "),eV=n(Gxe,"A",{href:!0});var Cct=s(eV);nOo=r(Cct,"MBartForQuestionAnswering"),Cct.forEach(t),sOo=r(Gxe," (mBART model)"),Gxe.forEach(t),lOo=i(X),mv=n(X,"LI",{});var Oxe=s(mv);Nge=n(Oxe,"STRONG",{});var wct=s(Nge);iOo=r(wct,"megatron-bert"),wct.forEach(t),dOo=r(Oxe," \u2014 "),oV=n(Oxe,"A",{href:!0});var Act=s(oV);cOo=r(Act,"MegatronBertForQuestionAnswering"),Act.forEach(t),fOo=r(Oxe," (MegatronBert model)"),Oxe.forEach(t),mOo=i(X),gv=n(X,"LI",{});var Vxe=s(gv);jge=n(Vxe,"STRONG",{});var yct=s(jge);gOo=r(yct,"mobilebert"),yct.forEach(t),hOo=r(Vxe," \u2014 "),rV=n(Vxe,"A",{href:!0});var Lct=s(rV);pOo=r(Lct,"MobileBertForQuestionAnswering"),Lct.forEach(t),uOo=r(Vxe," (MobileBERT model)"),Vxe.forEach(t),_Oo=i(X),hv=n(X,"LI",{});var Xxe=s(hv);Dge=n(Xxe,"STRONG",{});var xct=s(Dge);bOo=r(xct,"mpnet"),xct.forEach(t),vOo=r(Xxe," \u2014 "),tV=n(Xxe,"A",{href:!0});var $ct=s(tV);FOo=r($ct,"MPNetForQuestionAnswering"),$ct.forEach(t),TOo=r(Xxe," (MPNet model)"),Xxe.forEach(t),MOo=i(X),pv=n(X,"LI",{});var zxe=s(pv);Gge=n(zxe,"STRONG",{});var kct=s(Gge);EOo=r(kct,"nystromformer"),kct.forEach(t),COo=r(zxe," \u2014 "),aV=n(zxe,"A",{href:!0});var Sct=s(aV);wOo=r(Sct,"NystromformerForQuestionAnswering"),Sct.forEach(t),AOo=r(zxe," (Nystromformer model)"),zxe.forEach(t),yOo=i(X),uv=n(X,"LI",{});var Qxe=s(uv);Oge=n(Qxe,"STRONG",{});var Rct=s(Oge);LOo=r(Rct,"qdqbert"),Rct.forEach(t),xOo=r(Qxe," \u2014 "),nV=n(Qxe,"A",{href:!0});var Bct=s(nV);$Oo=r(Bct,"QDQBertForQuestionAnswering"),Bct.forEach(t),kOo=r(Qxe," (QDQBert model)"),Qxe.forEach(t),SOo=i(X),_v=n(X,"LI",{});var Wxe=s(_v);Vge=n(Wxe,"STRONG",{});var Pct=s(Vge);ROo=r(Pct,"reformer"),Pct.forEach(t),BOo=r(Wxe," \u2014 "),sV=n(Wxe,"A",{href:!0});var Ict=s(sV);POo=r(Ict,"ReformerForQuestionAnswering"),Ict.forEach(t),IOo=r(Wxe," (Reformer model)"),Wxe.forEach(t),qOo=i(X),bv=n(X,"LI",{});var Hxe=s(bv);Xge=n(Hxe,"STRONG",{});var qct=s(Xge);NOo=r(qct,"rembert"),qct.forEach(t),jOo=r(Hxe," \u2014 "),lV=n(Hxe,"A",{href:!0});var Nct=s(lV);DOo=r(Nct,"RemBertForQuestionAnswering"),Nct.forEach(t),GOo=r(Hxe," (RemBERT model)"),Hxe.forEach(t),OOo=i(X),vv=n(X,"LI",{});var Uxe=s(vv);zge=n(Uxe,"STRONG",{});var jct=s(zge);VOo=r(jct,"roberta"),jct.forEach(t),XOo=r(Uxe," \u2014 "),iV=n(Uxe,"A",{href:!0});var Dct=s(iV);zOo=r(Dct,"RobertaForQuestionAnswering"),Dct.forEach(t),QOo=r(Uxe," (RoBERTa model)"),Uxe.forEach(t),WOo=i(X),Fv=n(X,"LI",{});var Jxe=s(Fv);Qge=n(Jxe,"STRONG",{});var Gct=s(Qge);HOo=r(Gct,"roformer"),Gct.forEach(t),UOo=r(Jxe," \u2014 "),dV=n(Jxe,"A",{href:!0});var Oct=s(dV);JOo=r(Oct,"RoFormerForQuestionAnswering"),Oct.forEach(t),YOo=r(Jxe," (RoFormer model)"),Jxe.forEach(t),KOo=i(X),Tv=n(X,"LI",{});var Yxe=s(Tv);Wge=n(Yxe,"STRONG",{});var Vct=s(Wge);ZOo=r(Vct,"splinter"),Vct.forEach(t),eVo=r(Yxe," \u2014 "),cV=n(Yxe,"A",{href:!0});var Xct=s(cV);oVo=r(Xct,"SplinterForQuestionAnswering"),Xct.forEach(t),rVo=r(Yxe," (Splinter model)"),Yxe.forEach(t),tVo=i(X),Mv=n(X,"LI",{});var Kxe=s(Mv);Hge=n(Kxe,"STRONG",{});var zct=s(Hge);aVo=r(zct,"squeezebert"),zct.forEach(t),nVo=r(Kxe," \u2014 "),fV=n(Kxe,"A",{href:!0});var Qct=s(fV);sVo=r(Qct,"SqueezeBertForQuestionAnswering"),Qct.forEach(t),lVo=r(Kxe," (SqueezeBERT model)"),Kxe.forEach(t),iVo=i(X),Ev=n(X,"LI",{});var Zxe=s(Ev);Uge=n(Zxe,"STRONG",{});var Wct=s(Uge);dVo=r(Wct,"xlm"),Wct.forEach(t),cVo=r(Zxe," \u2014 "),mV=n(Zxe,"A",{href:!0});var Hct=s(mV);fVo=r(Hct,"XLMForQuestionAnsweringSimple"),Hct.forEach(t),mVo=r(Zxe," (XLM model)"),Zxe.forEach(t),gVo=i(X),Cv=n(X,"LI",{});var e7e=s(Cv);Jge=n(e7e,"STRONG",{});var Uct=s(Jge);hVo=r(Uct,"xlm-roberta"),Uct.forEach(t),pVo=r(e7e," \u2014 "),gV=n(e7e,"A",{href:!0});var Jct=s(gV);uVo=r(Jct,"XLMRobertaForQuestionAnswering"),Jct.forEach(t),_Vo=r(e7e," (XLM-RoBERTa model)"),e7e.forEach(t),bVo=i(X),wv=n(X,"LI",{});var o7e=s(wv);Yge=n(o7e,"STRONG",{});var Yct=s(Yge);vVo=r(Yct,"xlm-roberta-xl"),Yct.forEach(t),FVo=r(o7e," \u2014 "),hV=n(o7e,"A",{href:!0});var Kct=s(hV);TVo=r(Kct,"XLMRobertaXLForQuestionAnswering"),Kct.forEach(t),MVo=r(o7e," (XLM-RoBERTa-XL model)"),o7e.forEach(t),EVo=i(X),Av=n(X,"LI",{});var r7e=s(Av);Kge=n(r7e,"STRONG",{});var Zct=s(Kge);CVo=r(Zct,"xlnet"),Zct.forEach(t),wVo=r(r7e," \u2014 "),pV=n(r7e,"A",{href:!0});var eft=s(pV);AVo=r(eft,"XLNetForQuestionAnsweringSimple"),eft.forEach(t),yVo=r(r7e," (XLNet model)"),r7e.forEach(t),LVo=i(X),yv=n(X,"LI",{});var t7e=s(yv);Zge=n(t7e,"STRONG",{});var oft=s(Zge);xVo=r(oft,"yoso"),oft.forEach(t),$Vo=r(t7e," \u2014 "),uV=n(t7e,"A",{href:!0});var rft=s(uV);kVo=r(rft,"YosoForQuestionAnswering"),rft.forEach(t),SVo=r(t7e," (YOSO model)"),t7e.forEach(t),X.forEach(t),RVo=i(ia),Lv=n(ia,"P",{});var a7e=s(Lv);BVo=r(a7e,"The model is set in evaluation mode by default using "),ehe=n(a7e,"CODE",{});var tft=s(ehe);PVo=r(tft,"model.eval()"),tft.forEach(t),IVo=r(a7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ohe=n(a7e,"CODE",{});var aft=s(ohe);qVo=r(aft,"model.train()"),aft.forEach(t),a7e.forEach(t),NVo=i(ia),T(xv.$$.fragment,ia),ia.forEach(t),Js.forEach(t),$Ie=i(f),Ki=n(f,"H2",{class:!0});var BNe=s(Ki);$v=n(BNe,"A",{id:!0,class:!0,href:!0});var nft=s($v);rhe=n(nft,"SPAN",{});var sft=s(rhe);T(M0.$$.fragment,sft),sft.forEach(t),nft.forEach(t),jVo=i(BNe),the=n(BNe,"SPAN",{});var lft=s(the);DVo=r(lft,"AutoModelForTableQuestionAnswering"),lft.forEach(t),BNe.forEach(t),kIe=i(f),No=n(f,"DIV",{class:!0});var Ys=s(No);T(E0.$$.fragment,Ys),GVo=i(Ys),Zi=n(Ys,"P",{});var RK=s(Zi);OVo=r(RK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),_V=n(RK,"A",{href:!0});var ift=s(_V);VVo=r(ift,"from_pretrained()"),ift.forEach(t),XVo=r(RK," class method or the "),bV=n(RK,"A",{href:!0});var dft=s(bV);zVo=r(dft,"from_config()"),dft.forEach(t),QVo=r(RK,` class
method.`),RK.forEach(t),WVo=i(Ys),C0=n(Ys,"P",{});var PNe=s(C0);HVo=r(PNe,"This class cannot be instantiated directly using "),ahe=n(PNe,"CODE",{});var cft=s(ahe);UVo=r(cft,"__init__()"),cft.forEach(t),JVo=r(PNe," (throws an error)."),PNe.forEach(t),YVo=i(Ys),ft=n(Ys,"DIV",{class:!0});var M3=s(ft);T(w0.$$.fragment,M3),KVo=i(M3),nhe=n(M3,"P",{});var fft=s(nhe);ZVo=r(fft,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),fft.forEach(t),eXo=i(M3),ed=n(M3,"P",{});var BK=s(ed);oXo=r(BK,`Note:
Loading a model from its configuration file does `),she=n(BK,"STRONG",{});var mft=s(she);rXo=r(mft,"not"),mft.forEach(t),tXo=r(BK,` load the model weights. It only affects the
model\u2019s configuration. Use `),vV=n(BK,"A",{href:!0});var gft=s(vV);aXo=r(gft,"from_pretrained()"),gft.forEach(t),nXo=r(BK," to load the model weights."),BK.forEach(t),sXo=i(M3),T(kv.$$.fragment,M3),M3.forEach(t),lXo=i(Ys),ao=n(Ys,"DIV",{class:!0});var da=s(ao);T(A0.$$.fragment,da),iXo=i(da),lhe=n(da,"P",{});var hft=s(lhe);dXo=r(hft,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),hft.forEach(t),cXo=i(da),Ia=n(da,"P",{});var E3=s(Ia);fXo=r(E3,"The model class to instantiate is selected based on the "),ihe=n(E3,"CODE",{});var pft=s(ihe);mXo=r(pft,"model_type"),pft.forEach(t),gXo=r(E3,` property of the config object (either
passed as an argument or loaded from `),dhe=n(E3,"CODE",{});var uft=s(dhe);hXo=r(uft,"pretrained_model_name_or_path"),uft.forEach(t),pXo=r(E3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),che=n(E3,"CODE",{});var _ft=s(che);uXo=r(_ft,"pretrained_model_name_or_path"),_ft.forEach(t),_Xo=r(E3,":"),E3.forEach(t),bXo=i(da),fhe=n(da,"UL",{});var bft=s(fhe);Sv=n(bft,"LI",{});var n7e=s(Sv);mhe=n(n7e,"STRONG",{});var vft=s(mhe);vXo=r(vft,"tapas"),vft.forEach(t),FXo=r(n7e," \u2014 "),FV=n(n7e,"A",{href:!0});var Fft=s(FV);TXo=r(Fft,"TapasForQuestionAnswering"),Fft.forEach(t),MXo=r(n7e," (TAPAS model)"),n7e.forEach(t),bft.forEach(t),EXo=i(da),Rv=n(da,"P",{});var s7e=s(Rv);CXo=r(s7e,"The model is set in evaluation mode by default using "),ghe=n(s7e,"CODE",{});var Tft=s(ghe);wXo=r(Tft,"model.eval()"),Tft.forEach(t),AXo=r(s7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hhe=n(s7e,"CODE",{});var Mft=s(hhe);yXo=r(Mft,"model.train()"),Mft.forEach(t),s7e.forEach(t),LXo=i(da),T(Bv.$$.fragment,da),da.forEach(t),Ys.forEach(t),SIe=i(f),od=n(f,"H2",{class:!0});var INe=s(od);Pv=n(INe,"A",{id:!0,class:!0,href:!0});var Eft=s(Pv);phe=n(Eft,"SPAN",{});var Cft=s(phe);T(y0.$$.fragment,Cft),Cft.forEach(t),Eft.forEach(t),xXo=i(INe),uhe=n(INe,"SPAN",{});var wft=s(uhe);$Xo=r(wft,"AutoModelForImageClassification"),wft.forEach(t),INe.forEach(t),RIe=i(f),jo=n(f,"DIV",{class:!0});var Ks=s(jo);T(L0.$$.fragment,Ks),kXo=i(Ks),rd=n(Ks,"P",{});var PK=s(rd);SXo=r(PK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),TV=n(PK,"A",{href:!0});var Aft=s(TV);RXo=r(Aft,"from_pretrained()"),Aft.forEach(t),BXo=r(PK," class method or the "),MV=n(PK,"A",{href:!0});var yft=s(MV);PXo=r(yft,"from_config()"),yft.forEach(t),IXo=r(PK,` class
method.`),PK.forEach(t),qXo=i(Ks),x0=n(Ks,"P",{});var qNe=s(x0);NXo=r(qNe,"This class cannot be instantiated directly using "),_he=n(qNe,"CODE",{});var Lft=s(_he);jXo=r(Lft,"__init__()"),Lft.forEach(t),DXo=r(qNe," (throws an error)."),qNe.forEach(t),GXo=i(Ks),mt=n(Ks,"DIV",{class:!0});var C3=s(mt);T($0.$$.fragment,C3),OXo=i(C3),bhe=n(C3,"P",{});var xft=s(bhe);VXo=r(xft,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),xft.forEach(t),XXo=i(C3),td=n(C3,"P",{});var IK=s(td);zXo=r(IK,`Note:
Loading a model from its configuration file does `),vhe=n(IK,"STRONG",{});var $ft=s(vhe);QXo=r($ft,"not"),$ft.forEach(t),WXo=r(IK,` load the model weights. It only affects the
model\u2019s configuration. Use `),EV=n(IK,"A",{href:!0});var kft=s(EV);HXo=r(kft,"from_pretrained()"),kft.forEach(t),UXo=r(IK," to load the model weights."),IK.forEach(t),JXo=i(C3),T(Iv.$$.fragment,C3),C3.forEach(t),YXo=i(Ks),no=n(Ks,"DIV",{class:!0});var ca=s(no);T(k0.$$.fragment,ca),KXo=i(ca),Fhe=n(ca,"P",{});var Sft=s(Fhe);ZXo=r(Sft,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Sft.forEach(t),ezo=i(ca),qa=n(ca,"P",{});var w3=s(qa);ozo=r(w3,"The model class to instantiate is selected based on the "),The=n(w3,"CODE",{});var Rft=s(The);rzo=r(Rft,"model_type"),Rft.forEach(t),tzo=r(w3,` property of the config object (either
passed as an argument or loaded from `),Mhe=n(w3,"CODE",{});var Bft=s(Mhe);azo=r(Bft,"pretrained_model_name_or_path"),Bft.forEach(t),nzo=r(w3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ehe=n(w3,"CODE",{});var Pft=s(Ehe);szo=r(Pft,"pretrained_model_name_or_path"),Pft.forEach(t),lzo=r(w3,":"),w3.forEach(t),izo=i(ca),Fe=n(ca,"UL",{});var Ee=s(Fe);qv=n(Ee,"LI",{});var l7e=s(qv);Che=n(l7e,"STRONG",{});var Ift=s(Che);dzo=r(Ift,"beit"),Ift.forEach(t),czo=r(l7e," \u2014 "),CV=n(l7e,"A",{href:!0});var qft=s(CV);fzo=r(qft,"BeitForImageClassification"),qft.forEach(t),mzo=r(l7e," (BEiT model)"),l7e.forEach(t),gzo=i(Ee),Nv=n(Ee,"LI",{});var i7e=s(Nv);whe=n(i7e,"STRONG",{});var Nft=s(whe);hzo=r(Nft,"convnext"),Nft.forEach(t),pzo=r(i7e," \u2014 "),wV=n(i7e,"A",{href:!0});var jft=s(wV);uzo=r(jft,"ConvNextForImageClassification"),jft.forEach(t),_zo=r(i7e," (ConvNext model)"),i7e.forEach(t),bzo=i(Ee),jv=n(Ee,"LI",{});var d7e=s(jv);Ahe=n(d7e,"STRONG",{});var Dft=s(Ahe);vzo=r(Dft,"data2vec-vision"),Dft.forEach(t),Fzo=r(d7e," \u2014 "),AV=n(d7e,"A",{href:!0});var Gft=s(AV);Tzo=r(Gft,"Data2VecVisionForImageClassification"),Gft.forEach(t),Mzo=r(d7e," (Data2VecVision model)"),d7e.forEach(t),Ezo=i(Ee),Bs=n(Ee,"LI",{});var p$=s(Bs);yhe=n(p$,"STRONG",{});var Oft=s(yhe);Czo=r(Oft,"deit"),Oft.forEach(t),wzo=r(p$," \u2014 "),yV=n(p$,"A",{href:!0});var Vft=s(yV);Azo=r(Vft,"DeiTForImageClassification"),Vft.forEach(t),yzo=r(p$," or "),LV=n(p$,"A",{href:!0});var Xft=s(LV);Lzo=r(Xft,"DeiTForImageClassificationWithTeacher"),Xft.forEach(t),xzo=r(p$," (DeiT model)"),p$.forEach(t),$zo=i(Ee),Dv=n(Ee,"LI",{});var c7e=s(Dv);Lhe=n(c7e,"STRONG",{});var zft=s(Lhe);kzo=r(zft,"imagegpt"),zft.forEach(t),Szo=r(c7e," \u2014 "),xV=n(c7e,"A",{href:!0});var Qft=s(xV);Rzo=r(Qft,"ImageGPTForImageClassification"),Qft.forEach(t),Bzo=r(c7e," (ImageGPT model)"),c7e.forEach(t),Pzo=i(Ee),gt=n(Ee,"LI",{});var ff=s(gt);xhe=n(ff,"STRONG",{});var Wft=s(xhe);Izo=r(Wft,"perceiver"),Wft.forEach(t),qzo=r(ff," \u2014 "),$V=n(ff,"A",{href:!0});var Hft=s($V);Nzo=r(Hft,"PerceiverForImageClassificationLearned"),Hft.forEach(t),jzo=r(ff," or "),kV=n(ff,"A",{href:!0});var Uft=s(kV);Dzo=r(Uft,"PerceiverForImageClassificationFourier"),Uft.forEach(t),Gzo=r(ff," or "),SV=n(ff,"A",{href:!0});var Jft=s(SV);Ozo=r(Jft,"PerceiverForImageClassificationConvProcessing"),Jft.forEach(t),Vzo=r(ff," (Perceiver model)"),ff.forEach(t),Xzo=i(Ee),Gv=n(Ee,"LI",{});var f7e=s(Gv);$he=n(f7e,"STRONG",{});var Yft=s($he);zzo=r(Yft,"poolformer"),Yft.forEach(t),Qzo=r(f7e," \u2014 "),RV=n(f7e,"A",{href:!0});var Kft=s(RV);Wzo=r(Kft,"PoolFormerForImageClassification"),Kft.forEach(t),Hzo=r(f7e," (PoolFormer model)"),f7e.forEach(t),Uzo=i(Ee),Ov=n(Ee,"LI",{});var m7e=s(Ov);khe=n(m7e,"STRONG",{});var Zft=s(khe);Jzo=r(Zft,"regnet"),Zft.forEach(t),Yzo=r(m7e," \u2014 "),BV=n(m7e,"A",{href:!0});var emt=s(BV);Kzo=r(emt,"RegNetForImageClassification"),emt.forEach(t),Zzo=r(m7e," (RegNet model)"),m7e.forEach(t),eQo=i(Ee),Vv=n(Ee,"LI",{});var g7e=s(Vv);She=n(g7e,"STRONG",{});var omt=s(She);oQo=r(omt,"resnet"),omt.forEach(t),rQo=r(g7e," \u2014 "),PV=n(g7e,"A",{href:!0});var rmt=s(PV);tQo=r(rmt,"ResNetForImageClassification"),rmt.forEach(t),aQo=r(g7e," (ResNet model)"),g7e.forEach(t),nQo=i(Ee),Xv=n(Ee,"LI",{});var h7e=s(Xv);Rhe=n(h7e,"STRONG",{});var tmt=s(Rhe);sQo=r(tmt,"segformer"),tmt.forEach(t),lQo=r(h7e," \u2014 "),IV=n(h7e,"A",{href:!0});var amt=s(IV);iQo=r(amt,"SegformerForImageClassification"),amt.forEach(t),dQo=r(h7e," (SegFormer model)"),h7e.forEach(t),cQo=i(Ee),zv=n(Ee,"LI",{});var p7e=s(zv);Bhe=n(p7e,"STRONG",{});var nmt=s(Bhe);fQo=r(nmt,"swin"),nmt.forEach(t),mQo=r(p7e," \u2014 "),qV=n(p7e,"A",{href:!0});var smt=s(qV);gQo=r(smt,"SwinForImageClassification"),smt.forEach(t),hQo=r(p7e," (Swin model)"),p7e.forEach(t),pQo=i(Ee),Qv=n(Ee,"LI",{});var u7e=s(Qv);Phe=n(u7e,"STRONG",{});var lmt=s(Phe);uQo=r(lmt,"van"),lmt.forEach(t),_Qo=r(u7e," \u2014 "),NV=n(u7e,"A",{href:!0});var imt=s(NV);bQo=r(imt,"VanForImageClassification"),imt.forEach(t),vQo=r(u7e," (VAN model)"),u7e.forEach(t),FQo=i(Ee),Wv=n(Ee,"LI",{});var _7e=s(Wv);Ihe=n(_7e,"STRONG",{});var dmt=s(Ihe);TQo=r(dmt,"vit"),dmt.forEach(t),MQo=r(_7e," \u2014 "),jV=n(_7e,"A",{href:!0});var cmt=s(jV);EQo=r(cmt,"ViTForImageClassification"),cmt.forEach(t),CQo=r(_7e," (ViT model)"),_7e.forEach(t),Ee.forEach(t),wQo=i(ca),Hv=n(ca,"P",{});var b7e=s(Hv);AQo=r(b7e,"The model is set in evaluation mode by default using "),qhe=n(b7e,"CODE",{});var fmt=s(qhe);yQo=r(fmt,"model.eval()"),fmt.forEach(t),LQo=r(b7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nhe=n(b7e,"CODE",{});var mmt=s(Nhe);xQo=r(mmt,"model.train()"),mmt.forEach(t),b7e.forEach(t),$Qo=i(ca),T(Uv.$$.fragment,ca),ca.forEach(t),Ks.forEach(t),BIe=i(f),ad=n(f,"H2",{class:!0});var NNe=s(ad);Jv=n(NNe,"A",{id:!0,class:!0,href:!0});var gmt=s(Jv);jhe=n(gmt,"SPAN",{});var hmt=s(jhe);T(S0.$$.fragment,hmt),hmt.forEach(t),gmt.forEach(t),kQo=i(NNe),Dhe=n(NNe,"SPAN",{});var pmt=s(Dhe);SQo=r(pmt,"AutoModelForVision2Seq"),pmt.forEach(t),NNe.forEach(t),PIe=i(f),Do=n(f,"DIV",{class:!0});var Zs=s(Do);T(R0.$$.fragment,Zs),RQo=i(Zs),nd=n(Zs,"P",{});var qK=s(nd);BQo=r(qK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DV=n(qK,"A",{href:!0});var umt=s(DV);PQo=r(umt,"from_pretrained()"),umt.forEach(t),IQo=r(qK," class method or the "),GV=n(qK,"A",{href:!0});var _mt=s(GV);qQo=r(_mt,"from_config()"),_mt.forEach(t),NQo=r(qK,` class
method.`),qK.forEach(t),jQo=i(Zs),B0=n(Zs,"P",{});var jNe=s(B0);DQo=r(jNe,"This class cannot be instantiated directly using "),Ghe=n(jNe,"CODE",{});var bmt=s(Ghe);GQo=r(bmt,"__init__()"),bmt.forEach(t),OQo=r(jNe," (throws an error)."),jNe.forEach(t),VQo=i(Zs),ht=n(Zs,"DIV",{class:!0});var A3=s(ht);T(P0.$$.fragment,A3),XQo=i(A3),Ohe=n(A3,"P",{});var vmt=s(Ohe);zQo=r(vmt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),vmt.forEach(t),QQo=i(A3),sd=n(A3,"P",{});var NK=s(sd);WQo=r(NK,`Note:
Loading a model from its configuration file does `),Vhe=n(NK,"STRONG",{});var Fmt=s(Vhe);HQo=r(Fmt,"not"),Fmt.forEach(t),UQo=r(NK,` load the model weights. It only affects the
model\u2019s configuration. Use `),OV=n(NK,"A",{href:!0});var Tmt=s(OV);JQo=r(Tmt,"from_pretrained()"),Tmt.forEach(t),YQo=r(NK," to load the model weights."),NK.forEach(t),KQo=i(A3),T(Yv.$$.fragment,A3),A3.forEach(t),ZQo=i(Zs),so=n(Zs,"DIV",{class:!0});var fa=s(so);T(I0.$$.fragment,fa),eWo=i(fa),Xhe=n(fa,"P",{});var Mmt=s(Xhe);oWo=r(Mmt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Mmt.forEach(t),rWo=i(fa),Na=n(fa,"P",{});var y3=s(Na);tWo=r(y3,"The model class to instantiate is selected based on the "),zhe=n(y3,"CODE",{});var Emt=s(zhe);aWo=r(Emt,"model_type"),Emt.forEach(t),nWo=r(y3,` property of the config object (either
passed as an argument or loaded from `),Qhe=n(y3,"CODE",{});var Cmt=s(Qhe);sWo=r(Cmt,"pretrained_model_name_or_path"),Cmt.forEach(t),lWo=r(y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Whe=n(y3,"CODE",{});var wmt=s(Whe);iWo=r(wmt,"pretrained_model_name_or_path"),wmt.forEach(t),dWo=r(y3,":"),y3.forEach(t),cWo=i(fa),Hhe=n(fa,"UL",{});var Amt=s(Hhe);Kv=n(Amt,"LI",{});var v7e=s(Kv);Uhe=n(v7e,"STRONG",{});var ymt=s(Uhe);fWo=r(ymt,"vision-encoder-decoder"),ymt.forEach(t),mWo=r(v7e," \u2014 "),VV=n(v7e,"A",{href:!0});var Lmt=s(VV);gWo=r(Lmt,"VisionEncoderDecoderModel"),Lmt.forEach(t),hWo=r(v7e," (Vision Encoder decoder model)"),v7e.forEach(t),Amt.forEach(t),pWo=i(fa),Zv=n(fa,"P",{});var F7e=s(Zv);uWo=r(F7e,"The model is set in evaluation mode by default using "),Jhe=n(F7e,"CODE",{});var xmt=s(Jhe);_Wo=r(xmt,"model.eval()"),xmt.forEach(t),bWo=r(F7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yhe=n(F7e,"CODE",{});var $mt=s(Yhe);vWo=r($mt,"model.train()"),$mt.forEach(t),F7e.forEach(t),FWo=i(fa),T(eF.$$.fragment,fa),fa.forEach(t),Zs.forEach(t),IIe=i(f),ld=n(f,"H2",{class:!0});var DNe=s(ld);oF=n(DNe,"A",{id:!0,class:!0,href:!0});var kmt=s(oF);Khe=n(kmt,"SPAN",{});var Smt=s(Khe);T(q0.$$.fragment,Smt),Smt.forEach(t),kmt.forEach(t),TWo=i(DNe),Zhe=n(DNe,"SPAN",{});var Rmt=s(Zhe);MWo=r(Rmt,"AutoModelForAudioClassification"),Rmt.forEach(t),DNe.forEach(t),qIe=i(f),Go=n(f,"DIV",{class:!0});var el=s(Go);T(N0.$$.fragment,el),EWo=i(el),id=n(el,"P",{});var jK=s(id);CWo=r(jK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),XV=n(jK,"A",{href:!0});var Bmt=s(XV);wWo=r(Bmt,"from_pretrained()"),Bmt.forEach(t),AWo=r(jK," class method or the "),zV=n(jK,"A",{href:!0});var Pmt=s(zV);yWo=r(Pmt,"from_config()"),Pmt.forEach(t),LWo=r(jK,` class
method.`),jK.forEach(t),xWo=i(el),j0=n(el,"P",{});var GNe=s(j0);$Wo=r(GNe,"This class cannot be instantiated directly using "),epe=n(GNe,"CODE",{});var Imt=s(epe);kWo=r(Imt,"__init__()"),Imt.forEach(t),SWo=r(GNe," (throws an error)."),GNe.forEach(t),RWo=i(el),pt=n(el,"DIV",{class:!0});var L3=s(pt);T(D0.$$.fragment,L3),BWo=i(L3),ope=n(L3,"P",{});var qmt=s(ope);PWo=r(qmt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),qmt.forEach(t),IWo=i(L3),dd=n(L3,"P",{});var DK=s(dd);qWo=r(DK,`Note:
Loading a model from its configuration file does `),rpe=n(DK,"STRONG",{});var Nmt=s(rpe);NWo=r(Nmt,"not"),Nmt.forEach(t),jWo=r(DK,` load the model weights. It only affects the
model\u2019s configuration. Use `),QV=n(DK,"A",{href:!0});var jmt=s(QV);DWo=r(jmt,"from_pretrained()"),jmt.forEach(t),GWo=r(DK," to load the model weights."),DK.forEach(t),OWo=i(L3),T(rF.$$.fragment,L3),L3.forEach(t),VWo=i(el),lo=n(el,"DIV",{class:!0});var ma=s(lo);T(G0.$$.fragment,ma),XWo=i(ma),tpe=n(ma,"P",{});var Dmt=s(tpe);zWo=r(Dmt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Dmt.forEach(t),QWo=i(ma),ja=n(ma,"P",{});var x3=s(ja);WWo=r(x3,"The model class to instantiate is selected based on the "),ape=n(x3,"CODE",{});var Gmt=s(ape);HWo=r(Gmt,"model_type"),Gmt.forEach(t),UWo=r(x3,` property of the config object (either
passed as an argument or loaded from `),npe=n(x3,"CODE",{});var Omt=s(npe);JWo=r(Omt,"pretrained_model_name_or_path"),Omt.forEach(t),YWo=r(x3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),spe=n(x3,"CODE",{});var Vmt=s(spe);KWo=r(Vmt,"pretrained_model_name_or_path"),Vmt.forEach(t),ZWo=r(x3,":"),x3.forEach(t),eHo=i(ma),Ne=n(ma,"UL",{});var bo=s(Ne);tF=n(bo,"LI",{});var T7e=s(tF);lpe=n(T7e,"STRONG",{});var Xmt=s(lpe);oHo=r(Xmt,"data2vec-audio"),Xmt.forEach(t),rHo=r(T7e," \u2014 "),WV=n(T7e,"A",{href:!0});var zmt=s(WV);tHo=r(zmt,"Data2VecAudioForSequenceClassification"),zmt.forEach(t),aHo=r(T7e," (Data2VecAudio model)"),T7e.forEach(t),nHo=i(bo),aF=n(bo,"LI",{});var M7e=s(aF);ipe=n(M7e,"STRONG",{});var Qmt=s(ipe);sHo=r(Qmt,"hubert"),Qmt.forEach(t),lHo=r(M7e," \u2014 "),HV=n(M7e,"A",{href:!0});var Wmt=s(HV);iHo=r(Wmt,"HubertForSequenceClassification"),Wmt.forEach(t),dHo=r(M7e," (Hubert model)"),M7e.forEach(t),cHo=i(bo),nF=n(bo,"LI",{});var E7e=s(nF);dpe=n(E7e,"STRONG",{});var Hmt=s(dpe);fHo=r(Hmt,"sew"),Hmt.forEach(t),mHo=r(E7e," \u2014 "),UV=n(E7e,"A",{href:!0});var Umt=s(UV);gHo=r(Umt,"SEWForSequenceClassification"),Umt.forEach(t),hHo=r(E7e," (SEW model)"),E7e.forEach(t),pHo=i(bo),sF=n(bo,"LI",{});var C7e=s(sF);cpe=n(C7e,"STRONG",{});var Jmt=s(cpe);uHo=r(Jmt,"sew-d"),Jmt.forEach(t),_Ho=r(C7e," \u2014 "),JV=n(C7e,"A",{href:!0});var Ymt=s(JV);bHo=r(Ymt,"SEWDForSequenceClassification"),Ymt.forEach(t),vHo=r(C7e," (SEW-D model)"),C7e.forEach(t),FHo=i(bo),lF=n(bo,"LI",{});var w7e=s(lF);fpe=n(w7e,"STRONG",{});var Kmt=s(fpe);THo=r(Kmt,"unispeech"),Kmt.forEach(t),MHo=r(w7e," \u2014 "),YV=n(w7e,"A",{href:!0});var Zmt=s(YV);EHo=r(Zmt,"UniSpeechForSequenceClassification"),Zmt.forEach(t),CHo=r(w7e," (UniSpeech model)"),w7e.forEach(t),wHo=i(bo),iF=n(bo,"LI",{});var A7e=s(iF);mpe=n(A7e,"STRONG",{});var egt=s(mpe);AHo=r(egt,"unispeech-sat"),egt.forEach(t),yHo=r(A7e," \u2014 "),KV=n(A7e,"A",{href:!0});var ogt=s(KV);LHo=r(ogt,"UniSpeechSatForSequenceClassification"),ogt.forEach(t),xHo=r(A7e," (UniSpeechSat model)"),A7e.forEach(t),$Ho=i(bo),dF=n(bo,"LI",{});var y7e=s(dF);gpe=n(y7e,"STRONG",{});var rgt=s(gpe);kHo=r(rgt,"wav2vec2"),rgt.forEach(t),SHo=r(y7e," \u2014 "),ZV=n(y7e,"A",{href:!0});var tgt=s(ZV);RHo=r(tgt,"Wav2Vec2ForSequenceClassification"),tgt.forEach(t),BHo=r(y7e," (Wav2Vec2 model)"),y7e.forEach(t),PHo=i(bo),cF=n(bo,"LI",{});var L7e=s(cF);hpe=n(L7e,"STRONG",{});var agt=s(hpe);IHo=r(agt,"wavlm"),agt.forEach(t),qHo=r(L7e," \u2014 "),eX=n(L7e,"A",{href:!0});var ngt=s(eX);NHo=r(ngt,"WavLMForSequenceClassification"),ngt.forEach(t),jHo=r(L7e," (WavLM model)"),L7e.forEach(t),bo.forEach(t),DHo=i(ma),fF=n(ma,"P",{});var x7e=s(fF);GHo=r(x7e,"The model is set in evaluation mode by default using "),ppe=n(x7e,"CODE",{});var sgt=s(ppe);OHo=r(sgt,"model.eval()"),sgt.forEach(t),VHo=r(x7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),upe=n(x7e,"CODE",{});var lgt=s(upe);XHo=r(lgt,"model.train()"),lgt.forEach(t),x7e.forEach(t),zHo=i(ma),T(mF.$$.fragment,ma),ma.forEach(t),el.forEach(t),NIe=i(f),cd=n(f,"H2",{class:!0});var ONe=s(cd);gF=n(ONe,"A",{id:!0,class:!0,href:!0});var igt=s(gF);_pe=n(igt,"SPAN",{});var dgt=s(_pe);T(O0.$$.fragment,dgt),dgt.forEach(t),igt.forEach(t),QHo=i(ONe),bpe=n(ONe,"SPAN",{});var cgt=s(bpe);WHo=r(cgt,"AutoModelForAudioFrameClassification"),cgt.forEach(t),ONe.forEach(t),jIe=i(f),Oo=n(f,"DIV",{class:!0});var ol=s(Oo);T(V0.$$.fragment,ol),HHo=i(ol),fd=n(ol,"P",{});var GK=s(fd);UHo=r(GK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),oX=n(GK,"A",{href:!0});var fgt=s(oX);JHo=r(fgt,"from_pretrained()"),fgt.forEach(t),YHo=r(GK," class method or the "),rX=n(GK,"A",{href:!0});var mgt=s(rX);KHo=r(mgt,"from_config()"),mgt.forEach(t),ZHo=r(GK,` class
method.`),GK.forEach(t),eUo=i(ol),X0=n(ol,"P",{});var VNe=s(X0);oUo=r(VNe,"This class cannot be instantiated directly using "),vpe=n(VNe,"CODE",{});var ggt=s(vpe);rUo=r(ggt,"__init__()"),ggt.forEach(t),tUo=r(VNe," (throws an error)."),VNe.forEach(t),aUo=i(ol),ut=n(ol,"DIV",{class:!0});var $3=s(ut);T(z0.$$.fragment,$3),nUo=i($3),Fpe=n($3,"P",{});var hgt=s(Fpe);sUo=r(hgt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),hgt.forEach(t),lUo=i($3),md=n($3,"P",{});var OK=s(md);iUo=r(OK,`Note:
Loading a model from its configuration file does `),Tpe=n(OK,"STRONG",{});var pgt=s(Tpe);dUo=r(pgt,"not"),pgt.forEach(t),cUo=r(OK,` load the model weights. It only affects the
model\u2019s configuration. Use `),tX=n(OK,"A",{href:!0});var ugt=s(tX);fUo=r(ugt,"from_pretrained()"),ugt.forEach(t),mUo=r(OK," to load the model weights."),OK.forEach(t),gUo=i($3),T(hF.$$.fragment,$3),$3.forEach(t),hUo=i(ol),io=n(ol,"DIV",{class:!0});var ga=s(io);T(Q0.$$.fragment,ga),pUo=i(ga),Mpe=n(ga,"P",{});var _gt=s(Mpe);uUo=r(_gt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),_gt.forEach(t),_Uo=i(ga),Da=n(ga,"P",{});var k3=s(Da);bUo=r(k3,"The model class to instantiate is selected based on the "),Epe=n(k3,"CODE",{});var bgt=s(Epe);vUo=r(bgt,"model_type"),bgt.forEach(t),FUo=r(k3,` property of the config object (either
passed as an argument or loaded from `),Cpe=n(k3,"CODE",{});var vgt=s(Cpe);TUo=r(vgt,"pretrained_model_name_or_path"),vgt.forEach(t),MUo=r(k3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wpe=n(k3,"CODE",{});var Fgt=s(wpe);EUo=r(Fgt,"pretrained_model_name_or_path"),Fgt.forEach(t),CUo=r(k3,":"),k3.forEach(t),wUo=i(ga),Ga=n(ga,"UL",{});var S3=s(Ga);pF=n(S3,"LI",{});var $7e=s(pF);Ape=n($7e,"STRONG",{});var Tgt=s(Ape);AUo=r(Tgt,"data2vec-audio"),Tgt.forEach(t),yUo=r($7e," \u2014 "),aX=n($7e,"A",{href:!0});var Mgt=s(aX);LUo=r(Mgt,"Data2VecAudioForAudioFrameClassification"),Mgt.forEach(t),xUo=r($7e," (Data2VecAudio model)"),$7e.forEach(t),$Uo=i(S3),uF=n(S3,"LI",{});var k7e=s(uF);ype=n(k7e,"STRONG",{});var Egt=s(ype);kUo=r(Egt,"unispeech-sat"),Egt.forEach(t),SUo=r(k7e," \u2014 "),nX=n(k7e,"A",{href:!0});var Cgt=s(nX);RUo=r(Cgt,"UniSpeechSatForAudioFrameClassification"),Cgt.forEach(t),BUo=r(k7e," (UniSpeechSat model)"),k7e.forEach(t),PUo=i(S3),_F=n(S3,"LI",{});var S7e=s(_F);Lpe=n(S7e,"STRONG",{});var wgt=s(Lpe);IUo=r(wgt,"wav2vec2"),wgt.forEach(t),qUo=r(S7e," \u2014 "),sX=n(S7e,"A",{href:!0});var Agt=s(sX);NUo=r(Agt,"Wav2Vec2ForAudioFrameClassification"),Agt.forEach(t),jUo=r(S7e," (Wav2Vec2 model)"),S7e.forEach(t),DUo=i(S3),bF=n(S3,"LI",{});var R7e=s(bF);xpe=n(R7e,"STRONG",{});var ygt=s(xpe);GUo=r(ygt,"wavlm"),ygt.forEach(t),OUo=r(R7e," \u2014 "),lX=n(R7e,"A",{href:!0});var Lgt=s(lX);VUo=r(Lgt,"WavLMForAudioFrameClassification"),Lgt.forEach(t),XUo=r(R7e," (WavLM model)"),R7e.forEach(t),S3.forEach(t),zUo=i(ga),vF=n(ga,"P",{});var B7e=s(vF);QUo=r(B7e,"The model is set in evaluation mode by default using "),$pe=n(B7e,"CODE",{});var xgt=s($pe);WUo=r(xgt,"model.eval()"),xgt.forEach(t),HUo=r(B7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kpe=n(B7e,"CODE",{});var $gt=s(kpe);UUo=r($gt,"model.train()"),$gt.forEach(t),B7e.forEach(t),JUo=i(ga),T(FF.$$.fragment,ga),ga.forEach(t),ol.forEach(t),DIe=i(f),gd=n(f,"H2",{class:!0});var XNe=s(gd);TF=n(XNe,"A",{id:!0,class:!0,href:!0});var kgt=s(TF);Spe=n(kgt,"SPAN",{});var Sgt=s(Spe);T(W0.$$.fragment,Sgt),Sgt.forEach(t),kgt.forEach(t),YUo=i(XNe),Rpe=n(XNe,"SPAN",{});var Rgt=s(Rpe);KUo=r(Rgt,"AutoModelForCTC"),Rgt.forEach(t),XNe.forEach(t),GIe=i(f),Vo=n(f,"DIV",{class:!0});var rl=s(Vo);T(H0.$$.fragment,rl),ZUo=i(rl),hd=n(rl,"P",{});var VK=s(hd);eJo=r(VK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),iX=n(VK,"A",{href:!0});var Bgt=s(iX);oJo=r(Bgt,"from_pretrained()"),Bgt.forEach(t),rJo=r(VK," class method or the "),dX=n(VK,"A",{href:!0});var Pgt=s(dX);tJo=r(Pgt,"from_config()"),Pgt.forEach(t),aJo=r(VK,` class
method.`),VK.forEach(t),nJo=i(rl),U0=n(rl,"P",{});var zNe=s(U0);sJo=r(zNe,"This class cannot be instantiated directly using "),Bpe=n(zNe,"CODE",{});var Igt=s(Bpe);lJo=r(Igt,"__init__()"),Igt.forEach(t),iJo=r(zNe," (throws an error)."),zNe.forEach(t),dJo=i(rl),_t=n(rl,"DIV",{class:!0});var R3=s(_t);T(J0.$$.fragment,R3),cJo=i(R3),Ppe=n(R3,"P",{});var qgt=s(Ppe);fJo=r(qgt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),qgt.forEach(t),mJo=i(R3),pd=n(R3,"P",{});var XK=s(pd);gJo=r(XK,`Note:
Loading a model from its configuration file does `),Ipe=n(XK,"STRONG",{});var Ngt=s(Ipe);hJo=r(Ngt,"not"),Ngt.forEach(t),pJo=r(XK,` load the model weights. It only affects the
model\u2019s configuration. Use `),cX=n(XK,"A",{href:!0});var jgt=s(cX);uJo=r(jgt,"from_pretrained()"),jgt.forEach(t),_Jo=r(XK," to load the model weights."),XK.forEach(t),bJo=i(R3),T(MF.$$.fragment,R3),R3.forEach(t),vJo=i(rl),co=n(rl,"DIV",{class:!0});var ha=s(co);T(Y0.$$.fragment,ha),FJo=i(ha),qpe=n(ha,"P",{});var Dgt=s(qpe);TJo=r(Dgt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Dgt.forEach(t),MJo=i(ha),Oa=n(ha,"P",{});var B3=s(Oa);EJo=r(B3,"The model class to instantiate is selected based on the "),Npe=n(B3,"CODE",{});var Ggt=s(Npe);CJo=r(Ggt,"model_type"),Ggt.forEach(t),wJo=r(B3,` property of the config object (either
passed as an argument or loaded from `),jpe=n(B3,"CODE",{});var Ogt=s(jpe);AJo=r(Ogt,"pretrained_model_name_or_path"),Ogt.forEach(t),yJo=r(B3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dpe=n(B3,"CODE",{});var Vgt=s(Dpe);LJo=r(Vgt,"pretrained_model_name_or_path"),Vgt.forEach(t),xJo=r(B3,":"),B3.forEach(t),$Jo=i(ha),je=n(ha,"UL",{});var vo=s(je);EF=n(vo,"LI",{});var P7e=s(EF);Gpe=n(P7e,"STRONG",{});var Xgt=s(Gpe);kJo=r(Xgt,"data2vec-audio"),Xgt.forEach(t),SJo=r(P7e," \u2014 "),fX=n(P7e,"A",{href:!0});var zgt=s(fX);RJo=r(zgt,"Data2VecAudioForCTC"),zgt.forEach(t),BJo=r(P7e," (Data2VecAudio model)"),P7e.forEach(t),PJo=i(vo),CF=n(vo,"LI",{});var I7e=s(CF);Ope=n(I7e,"STRONG",{});var Qgt=s(Ope);IJo=r(Qgt,"hubert"),Qgt.forEach(t),qJo=r(I7e," \u2014 "),mX=n(I7e,"A",{href:!0});var Wgt=s(mX);NJo=r(Wgt,"HubertForCTC"),Wgt.forEach(t),jJo=r(I7e," (Hubert model)"),I7e.forEach(t),DJo=i(vo),wF=n(vo,"LI",{});var q7e=s(wF);Vpe=n(q7e,"STRONG",{});var Hgt=s(Vpe);GJo=r(Hgt,"sew"),Hgt.forEach(t),OJo=r(q7e," \u2014 "),gX=n(q7e,"A",{href:!0});var Ugt=s(gX);VJo=r(Ugt,"SEWForCTC"),Ugt.forEach(t),XJo=r(q7e," (SEW model)"),q7e.forEach(t),zJo=i(vo),AF=n(vo,"LI",{});var N7e=s(AF);Xpe=n(N7e,"STRONG",{});var Jgt=s(Xpe);QJo=r(Jgt,"sew-d"),Jgt.forEach(t),WJo=r(N7e," \u2014 "),hX=n(N7e,"A",{href:!0});var Ygt=s(hX);HJo=r(Ygt,"SEWDForCTC"),Ygt.forEach(t),UJo=r(N7e," (SEW-D model)"),N7e.forEach(t),JJo=i(vo),yF=n(vo,"LI",{});var j7e=s(yF);zpe=n(j7e,"STRONG",{});var Kgt=s(zpe);YJo=r(Kgt,"unispeech"),Kgt.forEach(t),KJo=r(j7e," \u2014 "),pX=n(j7e,"A",{href:!0});var Zgt=s(pX);ZJo=r(Zgt,"UniSpeechForCTC"),Zgt.forEach(t),eYo=r(j7e," (UniSpeech model)"),j7e.forEach(t),oYo=i(vo),LF=n(vo,"LI",{});var D7e=s(LF);Qpe=n(D7e,"STRONG",{});var eht=s(Qpe);rYo=r(eht,"unispeech-sat"),eht.forEach(t),tYo=r(D7e," \u2014 "),uX=n(D7e,"A",{href:!0});var oht=s(uX);aYo=r(oht,"UniSpeechSatForCTC"),oht.forEach(t),nYo=r(D7e," (UniSpeechSat model)"),D7e.forEach(t),sYo=i(vo),xF=n(vo,"LI",{});var G7e=s(xF);Wpe=n(G7e,"STRONG",{});var rht=s(Wpe);lYo=r(rht,"wav2vec2"),rht.forEach(t),iYo=r(G7e," \u2014 "),_X=n(G7e,"A",{href:!0});var tht=s(_X);dYo=r(tht,"Wav2Vec2ForCTC"),tht.forEach(t),cYo=r(G7e," (Wav2Vec2 model)"),G7e.forEach(t),fYo=i(vo),$F=n(vo,"LI",{});var O7e=s($F);Hpe=n(O7e,"STRONG",{});var aht=s(Hpe);mYo=r(aht,"wavlm"),aht.forEach(t),gYo=r(O7e," \u2014 "),bX=n(O7e,"A",{href:!0});var nht=s(bX);hYo=r(nht,"WavLMForCTC"),nht.forEach(t),pYo=r(O7e," (WavLM model)"),O7e.forEach(t),vo.forEach(t),uYo=i(ha),kF=n(ha,"P",{});var V7e=s(kF);_Yo=r(V7e,"The model is set in evaluation mode by default using "),Upe=n(V7e,"CODE",{});var sht=s(Upe);bYo=r(sht,"model.eval()"),sht.forEach(t),vYo=r(V7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jpe=n(V7e,"CODE",{});var lht=s(Jpe);FYo=r(lht,"model.train()"),lht.forEach(t),V7e.forEach(t),TYo=i(ha),T(SF.$$.fragment,ha),ha.forEach(t),rl.forEach(t),OIe=i(f),ud=n(f,"H2",{class:!0});var QNe=s(ud);RF=n(QNe,"A",{id:!0,class:!0,href:!0});var iht=s(RF);Ype=n(iht,"SPAN",{});var dht=s(Ype);T(K0.$$.fragment,dht),dht.forEach(t),iht.forEach(t),MYo=i(QNe),Kpe=n(QNe,"SPAN",{});var cht=s(Kpe);EYo=r(cht,"AutoModelForSpeechSeq2Seq"),cht.forEach(t),QNe.forEach(t),VIe=i(f),Xo=n(f,"DIV",{class:!0});var tl=s(Xo);T(Z0.$$.fragment,tl),CYo=i(tl),_d=n(tl,"P",{});var zK=s(_d);wYo=r(zK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),vX=n(zK,"A",{href:!0});var fht=s(vX);AYo=r(fht,"from_pretrained()"),fht.forEach(t),yYo=r(zK," class method or the "),FX=n(zK,"A",{href:!0});var mht=s(FX);LYo=r(mht,"from_config()"),mht.forEach(t),xYo=r(zK,` class
method.`),zK.forEach(t),$Yo=i(tl),ey=n(tl,"P",{});var WNe=s(ey);kYo=r(WNe,"This class cannot be instantiated directly using "),Zpe=n(WNe,"CODE",{});var ght=s(Zpe);SYo=r(ght,"__init__()"),ght.forEach(t),RYo=r(WNe," (throws an error)."),WNe.forEach(t),BYo=i(tl),bt=n(tl,"DIV",{class:!0});var P3=s(bt);T(oy.$$.fragment,P3),PYo=i(P3),eue=n(P3,"P",{});var hht=s(eue);IYo=r(hht,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),hht.forEach(t),qYo=i(P3),bd=n(P3,"P",{});var QK=s(bd);NYo=r(QK,`Note:
Loading a model from its configuration file does `),oue=n(QK,"STRONG",{});var pht=s(oue);jYo=r(pht,"not"),pht.forEach(t),DYo=r(QK,` load the model weights. It only affects the
model\u2019s configuration. Use `),TX=n(QK,"A",{href:!0});var uht=s(TX);GYo=r(uht,"from_pretrained()"),uht.forEach(t),OYo=r(QK," to load the model weights."),QK.forEach(t),VYo=i(P3),T(BF.$$.fragment,P3),P3.forEach(t),XYo=i(tl),fo=n(tl,"DIV",{class:!0});var pa=s(fo);T(ry.$$.fragment,pa),zYo=i(pa),rue=n(pa,"P",{});var _ht=s(rue);QYo=r(_ht,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),_ht.forEach(t),WYo=i(pa),Va=n(pa,"P",{});var I3=s(Va);HYo=r(I3,"The model class to instantiate is selected based on the "),tue=n(I3,"CODE",{});var bht=s(tue);UYo=r(bht,"model_type"),bht.forEach(t),JYo=r(I3,` property of the config object (either
passed as an argument or loaded from `),aue=n(I3,"CODE",{});var vht=s(aue);YYo=r(vht,"pretrained_model_name_or_path"),vht.forEach(t),KYo=r(I3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nue=n(I3,"CODE",{});var Fht=s(nue);ZYo=r(Fht,"pretrained_model_name_or_path"),Fht.forEach(t),eKo=r(I3,":"),I3.forEach(t),oKo=i(pa),ty=n(pa,"UL",{});var HNe=s(ty);PF=n(HNe,"LI",{});var X7e=s(PF);sue=n(X7e,"STRONG",{});var Tht=s(sue);rKo=r(Tht,"speech-encoder-decoder"),Tht.forEach(t),tKo=r(X7e," \u2014 "),MX=n(X7e,"A",{href:!0});var Mht=s(MX);aKo=r(Mht,"SpeechEncoderDecoderModel"),Mht.forEach(t),nKo=r(X7e," (Speech Encoder decoder model)"),X7e.forEach(t),sKo=i(HNe),IF=n(HNe,"LI",{});var z7e=s(IF);lue=n(z7e,"STRONG",{});var Eht=s(lue);lKo=r(Eht,"speech_to_text"),Eht.forEach(t),iKo=r(z7e," \u2014 "),EX=n(z7e,"A",{href:!0});var Cht=s(EX);dKo=r(Cht,"Speech2TextForConditionalGeneration"),Cht.forEach(t),cKo=r(z7e," (Speech2Text model)"),z7e.forEach(t),HNe.forEach(t),fKo=i(pa),qF=n(pa,"P",{});var Q7e=s(qF);mKo=r(Q7e,"The model is set in evaluation mode by default using "),iue=n(Q7e,"CODE",{});var wht=s(iue);gKo=r(wht,"model.eval()"),wht.forEach(t),hKo=r(Q7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),due=n(Q7e,"CODE",{});var Aht=s(due);pKo=r(Aht,"model.train()"),Aht.forEach(t),Q7e.forEach(t),uKo=i(pa),T(NF.$$.fragment,pa),pa.forEach(t),tl.forEach(t),XIe=i(f),vd=n(f,"H2",{class:!0});var UNe=s(vd);jF=n(UNe,"A",{id:!0,class:!0,href:!0});var yht=s(jF);cue=n(yht,"SPAN",{});var Lht=s(cue);T(ay.$$.fragment,Lht),Lht.forEach(t),yht.forEach(t),_Ko=i(UNe),fue=n(UNe,"SPAN",{});var xht=s(fue);bKo=r(xht,"AutoModelForAudioXVector"),xht.forEach(t),UNe.forEach(t),zIe=i(f),zo=n(f,"DIV",{class:!0});var al=s(zo);T(ny.$$.fragment,al),vKo=i(al),Fd=n(al,"P",{});var WK=s(Fd);FKo=r(WK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),CX=n(WK,"A",{href:!0});var $ht=s(CX);TKo=r($ht,"from_pretrained()"),$ht.forEach(t),MKo=r(WK," class method or the "),wX=n(WK,"A",{href:!0});var kht=s(wX);EKo=r(kht,"from_config()"),kht.forEach(t),CKo=r(WK,` class
method.`),WK.forEach(t),wKo=i(al),sy=n(al,"P",{});var JNe=s(sy);AKo=r(JNe,"This class cannot be instantiated directly using "),mue=n(JNe,"CODE",{});var Sht=s(mue);yKo=r(Sht,"__init__()"),Sht.forEach(t),LKo=r(JNe," (throws an error)."),JNe.forEach(t),xKo=i(al),vt=n(al,"DIV",{class:!0});var q3=s(vt);T(ly.$$.fragment,q3),$Ko=i(q3),gue=n(q3,"P",{});var Rht=s(gue);kKo=r(Rht,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Rht.forEach(t),SKo=i(q3),Td=n(q3,"P",{});var HK=s(Td);RKo=r(HK,`Note:
Loading a model from its configuration file does `),hue=n(HK,"STRONG",{});var Bht=s(hue);BKo=r(Bht,"not"),Bht.forEach(t),PKo=r(HK,` load the model weights. It only affects the
model\u2019s configuration. Use `),AX=n(HK,"A",{href:!0});var Pht=s(AX);IKo=r(Pht,"from_pretrained()"),Pht.forEach(t),qKo=r(HK," to load the model weights."),HK.forEach(t),NKo=i(q3),T(DF.$$.fragment,q3),q3.forEach(t),jKo=i(al),mo=n(al,"DIV",{class:!0});var ua=s(mo);T(iy.$$.fragment,ua),DKo=i(ua),pue=n(ua,"P",{});var Iht=s(pue);GKo=r(Iht,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Iht.forEach(t),OKo=i(ua),Xa=n(ua,"P",{});var N3=s(Xa);VKo=r(N3,"The model class to instantiate is selected based on the "),uue=n(N3,"CODE",{});var qht=s(uue);XKo=r(qht,"model_type"),qht.forEach(t),zKo=r(N3,` property of the config object (either
passed as an argument or loaded from `),_ue=n(N3,"CODE",{});var Nht=s(_ue);QKo=r(Nht,"pretrained_model_name_or_path"),Nht.forEach(t),WKo=r(N3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bue=n(N3,"CODE",{});var jht=s(bue);HKo=r(jht,"pretrained_model_name_or_path"),jht.forEach(t),UKo=r(N3,":"),N3.forEach(t),JKo=i(ua),za=n(ua,"UL",{});var j3=s(za);GF=n(j3,"LI",{});var W7e=s(GF);vue=n(W7e,"STRONG",{});var Dht=s(vue);YKo=r(Dht,"data2vec-audio"),Dht.forEach(t),KKo=r(W7e," \u2014 "),yX=n(W7e,"A",{href:!0});var Ght=s(yX);ZKo=r(Ght,"Data2VecAudioForXVector"),Ght.forEach(t),eZo=r(W7e," (Data2VecAudio model)"),W7e.forEach(t),oZo=i(j3),OF=n(j3,"LI",{});var H7e=s(OF);Fue=n(H7e,"STRONG",{});var Oht=s(Fue);rZo=r(Oht,"unispeech-sat"),Oht.forEach(t),tZo=r(H7e," \u2014 "),LX=n(H7e,"A",{href:!0});var Vht=s(LX);aZo=r(Vht,"UniSpeechSatForXVector"),Vht.forEach(t),nZo=r(H7e," (UniSpeechSat model)"),H7e.forEach(t),sZo=i(j3),VF=n(j3,"LI",{});var U7e=s(VF);Tue=n(U7e,"STRONG",{});var Xht=s(Tue);lZo=r(Xht,"wav2vec2"),Xht.forEach(t),iZo=r(U7e," \u2014 "),xX=n(U7e,"A",{href:!0});var zht=s(xX);dZo=r(zht,"Wav2Vec2ForXVector"),zht.forEach(t),cZo=r(U7e," (Wav2Vec2 model)"),U7e.forEach(t),fZo=i(j3),XF=n(j3,"LI",{});var J7e=s(XF);Mue=n(J7e,"STRONG",{});var Qht=s(Mue);mZo=r(Qht,"wavlm"),Qht.forEach(t),gZo=r(J7e," \u2014 "),$X=n(J7e,"A",{href:!0});var Wht=s($X);hZo=r(Wht,"WavLMForXVector"),Wht.forEach(t),pZo=r(J7e," (WavLM model)"),J7e.forEach(t),j3.forEach(t),uZo=i(ua),zF=n(ua,"P",{});var Y7e=s(zF);_Zo=r(Y7e,"The model is set in evaluation mode by default using "),Eue=n(Y7e,"CODE",{});var Hht=s(Eue);bZo=r(Hht,"model.eval()"),Hht.forEach(t),vZo=r(Y7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cue=n(Y7e,"CODE",{});var Uht=s(Cue);FZo=r(Uht,"model.train()"),Uht.forEach(t),Y7e.forEach(t),TZo=i(ua),T(QF.$$.fragment,ua),ua.forEach(t),al.forEach(t),QIe=i(f),Md=n(f,"H2",{class:!0});var YNe=s(Md);WF=n(YNe,"A",{id:!0,class:!0,href:!0});var Jht=s(WF);wue=n(Jht,"SPAN",{});var Yht=s(wue);T(dy.$$.fragment,Yht),Yht.forEach(t),Jht.forEach(t),MZo=i(YNe),Aue=n(YNe,"SPAN",{});var Kht=s(Aue);EZo=r(Kht,"AutoModelForMaskedImageModeling"),Kht.forEach(t),YNe.forEach(t),WIe=i(f),Qo=n(f,"DIV",{class:!0});var nl=s(Qo);T(cy.$$.fragment,nl),CZo=i(nl),Ed=n(nl,"P",{});var UK=s(Ed);wZo=r(UK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),kX=n(UK,"A",{href:!0});var Zht=s(kX);AZo=r(Zht,"from_pretrained()"),Zht.forEach(t),yZo=r(UK," class method or the "),SX=n(UK,"A",{href:!0});var ept=s(SX);LZo=r(ept,"from_config()"),ept.forEach(t),xZo=r(UK,` class
method.`),UK.forEach(t),$Zo=i(nl),fy=n(nl,"P",{});var KNe=s(fy);kZo=r(KNe,"This class cannot be instantiated directly using "),yue=n(KNe,"CODE",{});var opt=s(yue);SZo=r(opt,"__init__()"),opt.forEach(t),RZo=r(KNe," (throws an error)."),KNe.forEach(t),BZo=i(nl),Ft=n(nl,"DIV",{class:!0});var D3=s(Ft);T(my.$$.fragment,D3),PZo=i(D3),Lue=n(D3,"P",{});var rpt=s(Lue);IZo=r(rpt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),rpt.forEach(t),qZo=i(D3),Cd=n(D3,"P",{});var JK=s(Cd);NZo=r(JK,`Note:
Loading a model from its configuration file does `),xue=n(JK,"STRONG",{});var tpt=s(xue);jZo=r(tpt,"not"),tpt.forEach(t),DZo=r(JK,` load the model weights. It only affects the
model\u2019s configuration. Use `),RX=n(JK,"A",{href:!0});var apt=s(RX);GZo=r(apt,"from_pretrained()"),apt.forEach(t),OZo=r(JK," to load the model weights."),JK.forEach(t),VZo=i(D3),T(HF.$$.fragment,D3),D3.forEach(t),XZo=i(nl),go=n(nl,"DIV",{class:!0});var _a=s(go);T(gy.$$.fragment,_a),zZo=i(_a),$ue=n(_a,"P",{});var npt=s($ue);QZo=r(npt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),npt.forEach(t),WZo=i(_a),Qa=n(_a,"P",{});var G3=s(Qa);HZo=r(G3,"The model class to instantiate is selected based on the "),kue=n(G3,"CODE",{});var spt=s(kue);UZo=r(spt,"model_type"),spt.forEach(t),JZo=r(G3,` property of the config object (either
passed as an argument or loaded from `),Sue=n(G3,"CODE",{});var lpt=s(Sue);YZo=r(lpt,"pretrained_model_name_or_path"),lpt.forEach(t),KZo=r(G3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rue=n(G3,"CODE",{});var ipt=s(Rue);ZZo=r(ipt,"pretrained_model_name_or_path"),ipt.forEach(t),eer=r(G3,":"),G3.forEach(t),oer=i(_a),wd=n(_a,"UL",{});var YK=s(wd);UF=n(YK,"LI",{});var K7e=s(UF);Bue=n(K7e,"STRONG",{});var dpt=s(Bue);rer=r(dpt,"deit"),dpt.forEach(t),ter=r(K7e," \u2014 "),BX=n(K7e,"A",{href:!0});var cpt=s(BX);aer=r(cpt,"DeiTForMaskedImageModeling"),cpt.forEach(t),ner=r(K7e," (DeiT model)"),K7e.forEach(t),ser=i(YK),JF=n(YK,"LI",{});var Z7e=s(JF);Pue=n(Z7e,"STRONG",{});var fpt=s(Pue);ler=r(fpt,"swin"),fpt.forEach(t),ier=r(Z7e," \u2014 "),PX=n(Z7e,"A",{href:!0});var mpt=s(PX);der=r(mpt,"SwinForMaskedImageModeling"),mpt.forEach(t),cer=r(Z7e," (Swin model)"),Z7e.forEach(t),fer=i(YK),YF=n(YK,"LI",{});var e$e=s(YF);Iue=n(e$e,"STRONG",{});var gpt=s(Iue);mer=r(gpt,"vit"),gpt.forEach(t),ger=r(e$e," \u2014 "),IX=n(e$e,"A",{href:!0});var hpt=s(IX);her=r(hpt,"ViTForMaskedImageModeling"),hpt.forEach(t),per=r(e$e," (ViT model)"),e$e.forEach(t),YK.forEach(t),uer=i(_a),KF=n(_a,"P",{});var o$e=s(KF);_er=r(o$e,"The model is set in evaluation mode by default using "),que=n(o$e,"CODE",{});var ppt=s(que);ber=r(ppt,"model.eval()"),ppt.forEach(t),ver=r(o$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nue=n(o$e,"CODE",{});var upt=s(Nue);Fer=r(upt,"model.train()"),upt.forEach(t),o$e.forEach(t),Ter=i(_a),T(ZF.$$.fragment,_a),_a.forEach(t),nl.forEach(t),HIe=i(f),Ad=n(f,"H2",{class:!0});var ZNe=s(Ad);e6=n(ZNe,"A",{id:!0,class:!0,href:!0});var _pt=s(e6);jue=n(_pt,"SPAN",{});var bpt=s(jue);T(hy.$$.fragment,bpt),bpt.forEach(t),_pt.forEach(t),Mer=i(ZNe),Due=n(ZNe,"SPAN",{});var vpt=s(Due);Eer=r(vpt,"AutoModelForObjectDetection"),vpt.forEach(t),ZNe.forEach(t),UIe=i(f),Wo=n(f,"DIV",{class:!0});var sl=s(Wo);T(py.$$.fragment,sl),Cer=i(sl),yd=n(sl,"P",{});var KK=s(yd);wer=r(KK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),qX=n(KK,"A",{href:!0});var Fpt=s(qX);Aer=r(Fpt,"from_pretrained()"),Fpt.forEach(t),yer=r(KK," class method or the "),NX=n(KK,"A",{href:!0});var Tpt=s(NX);Ler=r(Tpt,"from_config()"),Tpt.forEach(t),xer=r(KK,` class
method.`),KK.forEach(t),$er=i(sl),uy=n(sl,"P",{});var eje=s(uy);ker=r(eje,"This class cannot be instantiated directly using "),Gue=n(eje,"CODE",{});var Mpt=s(Gue);Ser=r(Mpt,"__init__()"),Mpt.forEach(t),Rer=r(eje," (throws an error)."),eje.forEach(t),Ber=i(sl),Tt=n(sl,"DIV",{class:!0});var O3=s(Tt);T(_y.$$.fragment,O3),Per=i(O3),Oue=n(O3,"P",{});var Ept=s(Oue);Ier=r(Ept,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Ept.forEach(t),qer=i(O3),Ld=n(O3,"P",{});var ZK=s(Ld);Ner=r(ZK,`Note:
Loading a model from its configuration file does `),Vue=n(ZK,"STRONG",{});var Cpt=s(Vue);jer=r(Cpt,"not"),Cpt.forEach(t),Der=r(ZK,` load the model weights. It only affects the
model\u2019s configuration. Use `),jX=n(ZK,"A",{href:!0});var wpt=s(jX);Ger=r(wpt,"from_pretrained()"),wpt.forEach(t),Oer=r(ZK," to load the model weights."),ZK.forEach(t),Ver=i(O3),T(o6.$$.fragment,O3),O3.forEach(t),Xer=i(sl),ho=n(sl,"DIV",{class:!0});var ba=s(ho);T(by.$$.fragment,ba),zer=i(ba),Xue=n(ba,"P",{});var Apt=s(Xue);Qer=r(Apt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Apt.forEach(t),Wer=i(ba),Wa=n(ba,"P",{});var V3=s(Wa);Her=r(V3,"The model class to instantiate is selected based on the "),zue=n(V3,"CODE",{});var ypt=s(zue);Uer=r(ypt,"model_type"),ypt.forEach(t),Jer=r(V3,` property of the config object (either
passed as an argument or loaded from `),Que=n(V3,"CODE",{});var Lpt=s(Que);Yer=r(Lpt,"pretrained_model_name_or_path"),Lpt.forEach(t),Ker=r(V3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wue=n(V3,"CODE",{});var xpt=s(Wue);Zer=r(xpt,"pretrained_model_name_or_path"),xpt.forEach(t),eor=r(V3,":"),V3.forEach(t),oor=i(ba),vy=n(ba,"UL",{});var oje=s(vy);r6=n(oje,"LI",{});var r$e=s(r6);Hue=n(r$e,"STRONG",{});var $pt=s(Hue);ror=r($pt,"detr"),$pt.forEach(t),tor=r(r$e," \u2014 "),DX=n(r$e,"A",{href:!0});var kpt=s(DX);aor=r(kpt,"DetrForObjectDetection"),kpt.forEach(t),nor=r(r$e," (DETR model)"),r$e.forEach(t),sor=i(oje),t6=n(oje,"LI",{});var t$e=s(t6);Uue=n(t$e,"STRONG",{});var Spt=s(Uue);lor=r(Spt,"yolos"),Spt.forEach(t),ior=r(t$e," \u2014 "),GX=n(t$e,"A",{href:!0});var Rpt=s(GX);dor=r(Rpt,"YolosForObjectDetection"),Rpt.forEach(t),cor=r(t$e," (YOLOS model)"),t$e.forEach(t),oje.forEach(t),mor=i(ba),a6=n(ba,"P",{});var a$e=s(a6);gor=r(a$e,"The model is set in evaluation mode by default using "),Jue=n(a$e,"CODE",{});var Bpt=s(Jue);hor=r(Bpt,"model.eval()"),Bpt.forEach(t),por=r(a$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yue=n(a$e,"CODE",{});var Ppt=s(Yue);uor=r(Ppt,"model.train()"),Ppt.forEach(t),a$e.forEach(t),_or=i(ba),T(n6.$$.fragment,ba),ba.forEach(t),sl.forEach(t),JIe=i(f),xd=n(f,"H2",{class:!0});var rje=s(xd);s6=n(rje,"A",{id:!0,class:!0,href:!0});var Ipt=s(s6);Kue=n(Ipt,"SPAN",{});var qpt=s(Kue);T(Fy.$$.fragment,qpt),qpt.forEach(t),Ipt.forEach(t),bor=i(rje),Zue=n(rje,"SPAN",{});var Npt=s(Zue);vor=r(Npt,"AutoModelForImageSegmentation"),Npt.forEach(t),rje.forEach(t),YIe=i(f),Ho=n(f,"DIV",{class:!0});var ll=s(Ho);T(Ty.$$.fragment,ll),For=i(ll),$d=n(ll,"P",{});var eZ=s($d);Tor=r(eZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),OX=n(eZ,"A",{href:!0});var jpt=s(OX);Mor=r(jpt,"from_pretrained()"),jpt.forEach(t),Eor=r(eZ," class method or the "),VX=n(eZ,"A",{href:!0});var Dpt=s(VX);Cor=r(Dpt,"from_config()"),Dpt.forEach(t),wor=r(eZ,` class
method.`),eZ.forEach(t),Aor=i(ll),My=n(ll,"P",{});var tje=s(My);yor=r(tje,"This class cannot be instantiated directly using "),e_e=n(tje,"CODE",{});var Gpt=s(e_e);Lor=r(Gpt,"__init__()"),Gpt.forEach(t),xor=r(tje," (throws an error)."),tje.forEach(t),$or=i(ll),Mt=n(ll,"DIV",{class:!0});var X3=s(Mt);T(Ey.$$.fragment,X3),kor=i(X3),o_e=n(X3,"P",{});var Opt=s(o_e);Sor=r(Opt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Opt.forEach(t),Ror=i(X3),kd=n(X3,"P",{});var oZ=s(kd);Bor=r(oZ,`Note:
Loading a model from its configuration file does `),r_e=n(oZ,"STRONG",{});var Vpt=s(r_e);Por=r(Vpt,"not"),Vpt.forEach(t),Ior=r(oZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XX=n(oZ,"A",{href:!0});var Xpt=s(XX);qor=r(Xpt,"from_pretrained()"),Xpt.forEach(t),Nor=r(oZ," to load the model weights."),oZ.forEach(t),jor=i(X3),T(l6.$$.fragment,X3),X3.forEach(t),Dor=i(ll),po=n(ll,"DIV",{class:!0});var va=s(po);T(Cy.$$.fragment,va),Gor=i(va),t_e=n(va,"P",{});var zpt=s(t_e);Oor=r(zpt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),zpt.forEach(t),Vor=i(va),Ha=n(va,"P",{});var z3=s(Ha);Xor=r(z3,"The model class to instantiate is selected based on the "),a_e=n(z3,"CODE",{});var Qpt=s(a_e);zor=r(Qpt,"model_type"),Qpt.forEach(t),Qor=r(z3,` property of the config object (either
passed as an argument or loaded from `),n_e=n(z3,"CODE",{});var Wpt=s(n_e);Wor=r(Wpt,"pretrained_model_name_or_path"),Wpt.forEach(t),Hor=r(z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s_e=n(z3,"CODE",{});var Hpt=s(s_e);Uor=r(Hpt,"pretrained_model_name_or_path"),Hpt.forEach(t),Jor=r(z3,":"),z3.forEach(t),Yor=i(va),l_e=n(va,"UL",{});var Upt=s(l_e);i6=n(Upt,"LI",{});var n$e=s(i6);i_e=n(n$e,"STRONG",{});var Jpt=s(i_e);Kor=r(Jpt,"detr"),Jpt.forEach(t),Zor=r(n$e," \u2014 "),zX=n(n$e,"A",{href:!0});var Ypt=s(zX);err=r(Ypt,"DetrForSegmentation"),Ypt.forEach(t),orr=r(n$e," (DETR model)"),n$e.forEach(t),Upt.forEach(t),rrr=i(va),d6=n(va,"P",{});var s$e=s(d6);trr=r(s$e,"The model is set in evaluation mode by default using "),d_e=n(s$e,"CODE",{});var Kpt=s(d_e);arr=r(Kpt,"model.eval()"),Kpt.forEach(t),nrr=r(s$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c_e=n(s$e,"CODE",{});var Zpt=s(c_e);srr=r(Zpt,"model.train()"),Zpt.forEach(t),s$e.forEach(t),lrr=i(va),T(c6.$$.fragment,va),va.forEach(t),ll.forEach(t),KIe=i(f),Sd=n(f,"H2",{class:!0});var aje=s(Sd);f6=n(aje,"A",{id:!0,class:!0,href:!0});var eut=s(f6);f_e=n(eut,"SPAN",{});var out=s(f_e);T(wy.$$.fragment,out),out.forEach(t),eut.forEach(t),irr=i(aje),m_e=n(aje,"SPAN",{});var rut=s(m_e);drr=r(rut,"AutoModelForSemanticSegmentation"),rut.forEach(t),aje.forEach(t),ZIe=i(f),Uo=n(f,"DIV",{class:!0});var il=s(Uo);T(Ay.$$.fragment,il),crr=i(il),Rd=n(il,"P",{});var rZ=s(Rd);frr=r(rZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),QX=n(rZ,"A",{href:!0});var tut=s(QX);mrr=r(tut,"from_pretrained()"),tut.forEach(t),grr=r(rZ," class method or the "),WX=n(rZ,"A",{href:!0});var aut=s(WX);hrr=r(aut,"from_config()"),aut.forEach(t),prr=r(rZ,` class
method.`),rZ.forEach(t),urr=i(il),yy=n(il,"P",{});var nje=s(yy);_rr=r(nje,"This class cannot be instantiated directly using "),g_e=n(nje,"CODE",{});var nut=s(g_e);brr=r(nut,"__init__()"),nut.forEach(t),vrr=r(nje," (throws an error)."),nje.forEach(t),Frr=i(il),Et=n(il,"DIV",{class:!0});var Q3=s(Et);T(Ly.$$.fragment,Q3),Trr=i(Q3),h_e=n(Q3,"P",{});var sut=s(h_e);Mrr=r(sut,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),sut.forEach(t),Err=i(Q3),Bd=n(Q3,"P",{});var tZ=s(Bd);Crr=r(tZ,`Note:
Loading a model from its configuration file does `),p_e=n(tZ,"STRONG",{});var lut=s(p_e);wrr=r(lut,"not"),lut.forEach(t),Arr=r(tZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HX=n(tZ,"A",{href:!0});var iut=s(HX);yrr=r(iut,"from_pretrained()"),iut.forEach(t),Lrr=r(tZ," to load the model weights."),tZ.forEach(t),xrr=i(Q3),T(m6.$$.fragment,Q3),Q3.forEach(t),$rr=i(il),uo=n(il,"DIV",{class:!0});var Fa=s(uo);T(xy.$$.fragment,Fa),krr=i(Fa),u_e=n(Fa,"P",{});var dut=s(u_e);Srr=r(dut,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),dut.forEach(t),Rrr=i(Fa),Ua=n(Fa,"P",{});var W3=s(Ua);Brr=r(W3,"The model class to instantiate is selected based on the "),__e=n(W3,"CODE",{});var cut=s(__e);Prr=r(cut,"model_type"),cut.forEach(t),Irr=r(W3,` property of the config object (either
passed as an argument or loaded from `),b_e=n(W3,"CODE",{});var fut=s(b_e);qrr=r(fut,"pretrained_model_name_or_path"),fut.forEach(t),Nrr=r(W3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v_e=n(W3,"CODE",{});var mut=s(v_e);jrr=r(mut,"pretrained_model_name_or_path"),mut.forEach(t),Drr=r(W3,":"),W3.forEach(t),Grr=i(Fa),Ja=n(Fa,"UL",{});var H3=s(Ja);g6=n(H3,"LI",{});var l$e=s(g6);F_e=n(l$e,"STRONG",{});var gut=s(F_e);Orr=r(gut,"beit"),gut.forEach(t),Vrr=r(l$e," \u2014 "),UX=n(l$e,"A",{href:!0});var hut=s(UX);Xrr=r(hut,"BeitForSemanticSegmentation"),hut.forEach(t),zrr=r(l$e," (BEiT model)"),l$e.forEach(t),Qrr=i(H3),h6=n(H3,"LI",{});var i$e=s(h6);T_e=n(i$e,"STRONG",{});var put=s(T_e);Wrr=r(put,"data2vec-vision"),put.forEach(t),Hrr=r(i$e," \u2014 "),JX=n(i$e,"A",{href:!0});var uut=s(JX);Urr=r(uut,"Data2VecVisionForSemanticSegmentation"),uut.forEach(t),Jrr=r(i$e," (Data2VecVision model)"),i$e.forEach(t),Yrr=i(H3),p6=n(H3,"LI",{});var d$e=s(p6);M_e=n(d$e,"STRONG",{});var _ut=s(M_e);Krr=r(_ut,"dpt"),_ut.forEach(t),Zrr=r(d$e," \u2014 "),YX=n(d$e,"A",{href:!0});var but=s(YX);etr=r(but,"DPTForSemanticSegmentation"),but.forEach(t),otr=r(d$e," (DPT model)"),d$e.forEach(t),rtr=i(H3),u6=n(H3,"LI",{});var c$e=s(u6);E_e=n(c$e,"STRONG",{});var vut=s(E_e);ttr=r(vut,"segformer"),vut.forEach(t),atr=r(c$e," \u2014 "),KX=n(c$e,"A",{href:!0});var Fut=s(KX);ntr=r(Fut,"SegformerForSemanticSegmentation"),Fut.forEach(t),str=r(c$e," (SegFormer model)"),c$e.forEach(t),H3.forEach(t),ltr=i(Fa),_6=n(Fa,"P",{});var f$e=s(_6);itr=r(f$e,"The model is set in evaluation mode by default using "),C_e=n(f$e,"CODE",{});var Tut=s(C_e);dtr=r(Tut,"model.eval()"),Tut.forEach(t),ctr=r(f$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w_e=n(f$e,"CODE",{});var Mut=s(w_e);ftr=r(Mut,"model.train()"),Mut.forEach(t),f$e.forEach(t),mtr=i(Fa),T(b6.$$.fragment,Fa),Fa.forEach(t),il.forEach(t),eqe=i(f),Pd=n(f,"H2",{class:!0});var sje=s(Pd);v6=n(sje,"A",{id:!0,class:!0,href:!0});var Eut=s(v6);A_e=n(Eut,"SPAN",{});var Cut=s(A_e);T($y.$$.fragment,Cut),Cut.forEach(t),Eut.forEach(t),gtr=i(sje),y_e=n(sje,"SPAN",{});var wut=s(y_e);htr=r(wut,"AutoModelForInstanceSegmentation"),wut.forEach(t),sje.forEach(t),oqe=i(f),Jo=n(f,"DIV",{class:!0});var dl=s(Jo);T(ky.$$.fragment,dl),ptr=i(dl),Id=n(dl,"P",{});var aZ=s(Id);utr=r(aZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),ZX=n(aZ,"A",{href:!0});var Aut=s(ZX);_tr=r(Aut,"from_pretrained()"),Aut.forEach(t),btr=r(aZ," class method or the "),ez=n(aZ,"A",{href:!0});var yut=s(ez);vtr=r(yut,"from_config()"),yut.forEach(t),Ftr=r(aZ,` class
method.`),aZ.forEach(t),Ttr=i(dl),Sy=n(dl,"P",{});var lje=s(Sy);Mtr=r(lje,"This class cannot be instantiated directly using "),L_e=n(lje,"CODE",{});var Lut=s(L_e);Etr=r(Lut,"__init__()"),Lut.forEach(t),Ctr=r(lje," (throws an error)."),lje.forEach(t),wtr=i(dl),Ct=n(dl,"DIV",{class:!0});var U3=s(Ct);T(Ry.$$.fragment,U3),Atr=i(U3),x_e=n(U3,"P",{});var xut=s(x_e);ytr=r(xut,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),xut.forEach(t),Ltr=i(U3),qd=n(U3,"P",{});var nZ=s(qd);xtr=r(nZ,`Note:
Loading a model from its configuration file does `),$_e=n(nZ,"STRONG",{});var $ut=s($_e);$tr=r($ut,"not"),$ut.forEach(t),ktr=r(nZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=n(nZ,"A",{href:!0});var kut=s(oz);Str=r(kut,"from_pretrained()"),kut.forEach(t),Rtr=r(nZ," to load the model weights."),nZ.forEach(t),Btr=i(U3),T(F6.$$.fragment,U3),U3.forEach(t),Ptr=i(dl),_o=n(dl,"DIV",{class:!0});var Ta=s(_o);T(By.$$.fragment,Ta),Itr=i(Ta),k_e=n(Ta,"P",{});var Sut=s(k_e);qtr=r(Sut,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Sut.forEach(t),Ntr=i(Ta),Ya=n(Ta,"P",{});var J3=s(Ya);jtr=r(J3,"The model class to instantiate is selected based on the "),S_e=n(J3,"CODE",{});var Rut=s(S_e);Dtr=r(Rut,"model_type"),Rut.forEach(t),Gtr=r(J3,` property of the config object (either
passed as an argument or loaded from `),R_e=n(J3,"CODE",{});var But=s(R_e);Otr=r(But,"pretrained_model_name_or_path"),But.forEach(t),Vtr=r(J3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B_e=n(J3,"CODE",{});var Put=s(B_e);Xtr=r(Put,"pretrained_model_name_or_path"),Put.forEach(t),ztr=r(J3,":"),J3.forEach(t),Qtr=i(Ta),P_e=n(Ta,"UL",{});var Iut=s(P_e);T6=n(Iut,"LI",{});var m$e=s(T6);I_e=n(m$e,"STRONG",{});var qut=s(I_e);Wtr=r(qut,"maskformer"),qut.forEach(t),Htr=r(m$e," \u2014 "),rz=n(m$e,"A",{href:!0});var Nut=s(rz);Utr=r(Nut,"MaskFormerForInstanceSegmentation"),Nut.forEach(t),Jtr=r(m$e," (MaskFormer model)"),m$e.forEach(t),Iut.forEach(t),Ytr=i(Ta),M6=n(Ta,"P",{});var g$e=s(M6);Ktr=r(g$e,"The model is set in evaluation mode by default using "),q_e=n(g$e,"CODE",{});var jut=s(q_e);Ztr=r(jut,"model.eval()"),jut.forEach(t),ear=r(g$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),N_e=n(g$e,"CODE",{});var Dut=s(N_e);oar=r(Dut,"model.train()"),Dut.forEach(t),g$e.forEach(t),rar=i(Ta),T(E6.$$.fragment,Ta),Ta.forEach(t),dl.forEach(t),rqe=i(f),Nd=n(f,"H2",{class:!0});var ije=s(Nd);C6=n(ije,"A",{id:!0,class:!0,href:!0});var Gut=s(C6);j_e=n(Gut,"SPAN",{});var Out=s(j_e);T(Py.$$.fragment,Out),Out.forEach(t),Gut.forEach(t),tar=i(ije),D_e=n(ije,"SPAN",{});var Vut=s(D_e);aar=r(Vut,"TFAutoModel"),Vut.forEach(t),ije.forEach(t),tqe=i(f),Yo=n(f,"DIV",{class:!0});var cl=s(Yo);T(Iy.$$.fragment,cl),nar=i(cl),jd=n(cl,"P",{});var sZ=s(jd);sar=r(sZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),tz=n(sZ,"A",{href:!0});var Xut=s(tz);lar=r(Xut,"from_pretrained()"),Xut.forEach(t),iar=r(sZ," class method or the "),az=n(sZ,"A",{href:!0});var zut=s(az);dar=r(zut,"from_config()"),zut.forEach(t),car=r(sZ,` class
method.`),sZ.forEach(t),far=i(cl),qy=n(cl,"P",{});var dje=s(qy);mar=r(dje,"This class cannot be instantiated directly using "),G_e=n(dje,"CODE",{});var Qut=s(G_e);gar=r(Qut,"__init__()"),Qut.forEach(t),har=r(dje," (throws an error)."),dje.forEach(t),par=i(cl),wt=n(cl,"DIV",{class:!0});var Y3=s(wt);T(Ny.$$.fragment,Y3),uar=i(Y3),O_e=n(Y3,"P",{});var Wut=s(O_e);_ar=r(Wut,"Instantiates one of the base model classes of the library from a configuration."),Wut.forEach(t),bar=i(Y3),Dd=n(Y3,"P",{});var lZ=s(Dd);Far=r(lZ,`Note:
Loading a model from its configuration file does `),V_e=n(lZ,"STRONG",{});var Hut=s(V_e);Tar=r(Hut,"not"),Hut.forEach(t),Mar=r(lZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),nz=n(lZ,"A",{href:!0});var Uut=s(nz);Ear=r(Uut,"from_pretrained()"),Uut.forEach(t),Car=r(lZ," to load the model weights."),lZ.forEach(t),war=i(Y3),T(w6.$$.fragment,Y3),Y3.forEach(t),Aar=i(cl),wr=n(cl,"DIV",{class:!0});var fl=s(wr);T(jy.$$.fragment,fl),yar=i(fl),X_e=n(fl,"P",{});var Jut=s(X_e);Lar=r(Jut,"Instantiate one of the base model classes of the library from a pretrained model."),Jut.forEach(t),xar=i(fl),Ka=n(fl,"P",{});var K3=s(Ka);$ar=r(K3,"The model class to instantiate is selected based on the "),z_e=n(K3,"CODE",{});var Yut=s(z_e);kar=r(Yut,"model_type"),Yut.forEach(t),Sar=r(K3,` property of the config object (either
passed as an argument or loaded from `),Q_e=n(K3,"CODE",{});var Kut=s(Q_e);Rar=r(Kut,"pretrained_model_name_or_path"),Kut.forEach(t),Bar=r(K3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W_e=n(K3,"CODE",{});var Zut=s(W_e);Par=r(Zut,"pretrained_model_name_or_path"),Zut.forEach(t),Iar=r(K3,":"),K3.forEach(t),qar=i(fl),N=n(fl,"UL",{});var D=s(N);A6=n(D,"LI",{});var h$e=s(A6);H_e=n(h$e,"STRONG",{});var e_t=s(H_e);Nar=r(e_t,"albert"),e_t.forEach(t),jar=r(h$e," \u2014 "),sz=n(h$e,"A",{href:!0});var o_t=s(sz);Dar=r(o_t,"TFAlbertModel"),o_t.forEach(t),Gar=r(h$e," (ALBERT model)"),h$e.forEach(t),Oar=i(D),y6=n(D,"LI",{});var p$e=s(y6);U_e=n(p$e,"STRONG",{});var r_t=s(U_e);Var=r(r_t,"bart"),r_t.forEach(t),Xar=r(p$e," \u2014 "),lz=n(p$e,"A",{href:!0});var t_t=s(lz);zar=r(t_t,"TFBartModel"),t_t.forEach(t),Qar=r(p$e," (BART model)"),p$e.forEach(t),War=i(D),L6=n(D,"LI",{});var u$e=s(L6);J_e=n(u$e,"STRONG",{});var a_t=s(J_e);Har=r(a_t,"bert"),a_t.forEach(t),Uar=r(u$e," \u2014 "),iz=n(u$e,"A",{href:!0});var n_t=s(iz);Jar=r(n_t,"TFBertModel"),n_t.forEach(t),Yar=r(u$e," (BERT model)"),u$e.forEach(t),Kar=i(D),x6=n(D,"LI",{});var _$e=s(x6);Y_e=n(_$e,"STRONG",{});var s_t=s(Y_e);Zar=r(s_t,"blenderbot"),s_t.forEach(t),enr=r(_$e," \u2014 "),dz=n(_$e,"A",{href:!0});var l_t=s(dz);onr=r(l_t,"TFBlenderbotModel"),l_t.forEach(t),rnr=r(_$e," (Blenderbot model)"),_$e.forEach(t),tnr=i(D),$6=n(D,"LI",{});var b$e=s($6);K_e=n(b$e,"STRONG",{});var i_t=s(K_e);anr=r(i_t,"blenderbot-small"),i_t.forEach(t),nnr=r(b$e," \u2014 "),cz=n(b$e,"A",{href:!0});var d_t=s(cz);snr=r(d_t,"TFBlenderbotSmallModel"),d_t.forEach(t),lnr=r(b$e," (BlenderbotSmall model)"),b$e.forEach(t),inr=i(D),k6=n(D,"LI",{});var v$e=s(k6);Z_e=n(v$e,"STRONG",{});var c_t=s(Z_e);dnr=r(c_t,"camembert"),c_t.forEach(t),cnr=r(v$e," \u2014 "),fz=n(v$e,"A",{href:!0});var f_t=s(fz);fnr=r(f_t,"TFCamembertModel"),f_t.forEach(t),mnr=r(v$e," (CamemBERT model)"),v$e.forEach(t),gnr=i(D),S6=n(D,"LI",{});var F$e=s(S6);e1e=n(F$e,"STRONG",{});var m_t=s(e1e);hnr=r(m_t,"clip"),m_t.forEach(t),pnr=r(F$e," \u2014 "),mz=n(F$e,"A",{href:!0});var g_t=s(mz);unr=r(g_t,"TFCLIPModel"),g_t.forEach(t),_nr=r(F$e," (CLIP model)"),F$e.forEach(t),bnr=i(D),R6=n(D,"LI",{});var T$e=s(R6);o1e=n(T$e,"STRONG",{});var h_t=s(o1e);vnr=r(h_t,"convbert"),h_t.forEach(t),Fnr=r(T$e," \u2014 "),gz=n(T$e,"A",{href:!0});var p_t=s(gz);Tnr=r(p_t,"TFConvBertModel"),p_t.forEach(t),Mnr=r(T$e," (ConvBERT model)"),T$e.forEach(t),Enr=i(D),B6=n(D,"LI",{});var M$e=s(B6);r1e=n(M$e,"STRONG",{});var u_t=s(r1e);Cnr=r(u_t,"convnext"),u_t.forEach(t),wnr=r(M$e," \u2014 "),hz=n(M$e,"A",{href:!0});var __t=s(hz);Anr=r(__t,"TFConvNextModel"),__t.forEach(t),ynr=r(M$e," (ConvNext model)"),M$e.forEach(t),Lnr=i(D),P6=n(D,"LI",{});var E$e=s(P6);t1e=n(E$e,"STRONG",{});var b_t=s(t1e);xnr=r(b_t,"ctrl"),b_t.forEach(t),$nr=r(E$e," \u2014 "),pz=n(E$e,"A",{href:!0});var v_t=s(pz);knr=r(v_t,"TFCTRLModel"),v_t.forEach(t),Snr=r(E$e," (CTRL model)"),E$e.forEach(t),Rnr=i(D),I6=n(D,"LI",{});var C$e=s(I6);a1e=n(C$e,"STRONG",{});var F_t=s(a1e);Bnr=r(F_t,"data2vec-vision"),F_t.forEach(t),Pnr=r(C$e," \u2014 "),uz=n(C$e,"A",{href:!0});var T_t=s(uz);Inr=r(T_t,"TFData2VecVisionModel"),T_t.forEach(t),qnr=r(C$e," (Data2VecVision model)"),C$e.forEach(t),Nnr=i(D),q6=n(D,"LI",{});var w$e=s(q6);n1e=n(w$e,"STRONG",{});var M_t=s(n1e);jnr=r(M_t,"deberta"),M_t.forEach(t),Dnr=r(w$e," \u2014 "),_z=n(w$e,"A",{href:!0});var E_t=s(_z);Gnr=r(E_t,"TFDebertaModel"),E_t.forEach(t),Onr=r(w$e," (DeBERTa model)"),w$e.forEach(t),Vnr=i(D),N6=n(D,"LI",{});var A$e=s(N6);s1e=n(A$e,"STRONG",{});var C_t=s(s1e);Xnr=r(C_t,"deberta-v2"),C_t.forEach(t),znr=r(A$e," \u2014 "),bz=n(A$e,"A",{href:!0});var w_t=s(bz);Qnr=r(w_t,"TFDebertaV2Model"),w_t.forEach(t),Wnr=r(A$e," (DeBERTa-v2 model)"),A$e.forEach(t),Hnr=i(D),j6=n(D,"LI",{});var y$e=s(j6);l1e=n(y$e,"STRONG",{});var A_t=s(l1e);Unr=r(A_t,"distilbert"),A_t.forEach(t),Jnr=r(y$e," \u2014 "),vz=n(y$e,"A",{href:!0});var y_t=s(vz);Ynr=r(y_t,"TFDistilBertModel"),y_t.forEach(t),Knr=r(y$e," (DistilBERT model)"),y$e.forEach(t),Znr=i(D),D6=n(D,"LI",{});var L$e=s(D6);i1e=n(L$e,"STRONG",{});var L_t=s(i1e);esr=r(L_t,"dpr"),L_t.forEach(t),osr=r(L$e," \u2014 "),Fz=n(L$e,"A",{href:!0});var x_t=s(Fz);rsr=r(x_t,"TFDPRQuestionEncoder"),x_t.forEach(t),tsr=r(L$e," (DPR model)"),L$e.forEach(t),asr=i(D),G6=n(D,"LI",{});var x$e=s(G6);d1e=n(x$e,"STRONG",{});var $_t=s(d1e);nsr=r($_t,"electra"),$_t.forEach(t),ssr=r(x$e," \u2014 "),Tz=n(x$e,"A",{href:!0});var k_t=s(Tz);lsr=r(k_t,"TFElectraModel"),k_t.forEach(t),isr=r(x$e," (ELECTRA model)"),x$e.forEach(t),dsr=i(D),O6=n(D,"LI",{});var $$e=s(O6);c1e=n($$e,"STRONG",{});var S_t=s(c1e);csr=r(S_t,"flaubert"),S_t.forEach(t),fsr=r($$e," \u2014 "),Mz=n($$e,"A",{href:!0});var R_t=s(Mz);msr=r(R_t,"TFFlaubertModel"),R_t.forEach(t),gsr=r($$e," (FlauBERT model)"),$$e.forEach(t),hsr=i(D),Ps=n(D,"LI",{});var u$=s(Ps);f1e=n(u$,"STRONG",{});var B_t=s(f1e);psr=r(B_t,"funnel"),B_t.forEach(t),usr=r(u$," \u2014 "),Ez=n(u$,"A",{href:!0});var P_t=s(Ez);_sr=r(P_t,"TFFunnelModel"),P_t.forEach(t),bsr=r(u$," or "),Cz=n(u$,"A",{href:!0});var I_t=s(Cz);vsr=r(I_t,"TFFunnelBaseModel"),I_t.forEach(t),Fsr=r(u$," (Funnel Transformer model)"),u$.forEach(t),Tsr=i(D),V6=n(D,"LI",{});var k$e=s(V6);m1e=n(k$e,"STRONG",{});var q_t=s(m1e);Msr=r(q_t,"gpt2"),q_t.forEach(t),Esr=r(k$e," \u2014 "),wz=n(k$e,"A",{href:!0});var N_t=s(wz);Csr=r(N_t,"TFGPT2Model"),N_t.forEach(t),wsr=r(k$e," (OpenAI GPT-2 model)"),k$e.forEach(t),Asr=i(D),X6=n(D,"LI",{});var S$e=s(X6);g1e=n(S$e,"STRONG",{});var j_t=s(g1e);ysr=r(j_t,"gptj"),j_t.forEach(t),Lsr=r(S$e," \u2014 "),Az=n(S$e,"A",{href:!0});var D_t=s(Az);xsr=r(D_t,"TFGPTJModel"),D_t.forEach(t),$sr=r(S$e," (GPT-J model)"),S$e.forEach(t),ksr=i(D),z6=n(D,"LI",{});var R$e=s(z6);h1e=n(R$e,"STRONG",{});var G_t=s(h1e);Ssr=r(G_t,"hubert"),G_t.forEach(t),Rsr=r(R$e," \u2014 "),yz=n(R$e,"A",{href:!0});var O_t=s(yz);Bsr=r(O_t,"TFHubertModel"),O_t.forEach(t),Psr=r(R$e," (Hubert model)"),R$e.forEach(t),Isr=i(D),Q6=n(D,"LI",{});var B$e=s(Q6);p1e=n(B$e,"STRONG",{});var V_t=s(p1e);qsr=r(V_t,"layoutlm"),V_t.forEach(t),Nsr=r(B$e," \u2014 "),Lz=n(B$e,"A",{href:!0});var X_t=s(Lz);jsr=r(X_t,"TFLayoutLMModel"),X_t.forEach(t),Dsr=r(B$e," (LayoutLM model)"),B$e.forEach(t),Gsr=i(D),W6=n(D,"LI",{});var P$e=s(W6);u1e=n(P$e,"STRONG",{});var z_t=s(u1e);Osr=r(z_t,"led"),z_t.forEach(t),Vsr=r(P$e," \u2014 "),xz=n(P$e,"A",{href:!0});var Q_t=s(xz);Xsr=r(Q_t,"TFLEDModel"),Q_t.forEach(t),zsr=r(P$e," (LED model)"),P$e.forEach(t),Qsr=i(D),H6=n(D,"LI",{});var I$e=s(H6);_1e=n(I$e,"STRONG",{});var W_t=s(_1e);Wsr=r(W_t,"longformer"),W_t.forEach(t),Hsr=r(I$e," \u2014 "),$z=n(I$e,"A",{href:!0});var H_t=s($z);Usr=r(H_t,"TFLongformerModel"),H_t.forEach(t),Jsr=r(I$e," (Longformer model)"),I$e.forEach(t),Ysr=i(D),U6=n(D,"LI",{});var q$e=s(U6);b1e=n(q$e,"STRONG",{});var U_t=s(b1e);Ksr=r(U_t,"lxmert"),U_t.forEach(t),Zsr=r(q$e," \u2014 "),kz=n(q$e,"A",{href:!0});var J_t=s(kz);elr=r(J_t,"TFLxmertModel"),J_t.forEach(t),olr=r(q$e," (LXMERT model)"),q$e.forEach(t),rlr=i(D),J6=n(D,"LI",{});var N$e=s(J6);v1e=n(N$e,"STRONG",{});var Y_t=s(v1e);tlr=r(Y_t,"marian"),Y_t.forEach(t),alr=r(N$e," \u2014 "),Sz=n(N$e,"A",{href:!0});var K_t=s(Sz);nlr=r(K_t,"TFMarianModel"),K_t.forEach(t),slr=r(N$e," (Marian model)"),N$e.forEach(t),llr=i(D),Y6=n(D,"LI",{});var j$e=s(Y6);F1e=n(j$e,"STRONG",{});var Z_t=s(F1e);ilr=r(Z_t,"mbart"),Z_t.forEach(t),dlr=r(j$e," \u2014 "),Rz=n(j$e,"A",{href:!0});var e1t=s(Rz);clr=r(e1t,"TFMBartModel"),e1t.forEach(t),flr=r(j$e," (mBART model)"),j$e.forEach(t),mlr=i(D),K6=n(D,"LI",{});var D$e=s(K6);T1e=n(D$e,"STRONG",{});var o1t=s(T1e);glr=r(o1t,"mobilebert"),o1t.forEach(t),hlr=r(D$e," \u2014 "),Bz=n(D$e,"A",{href:!0});var r1t=s(Bz);plr=r(r1t,"TFMobileBertModel"),r1t.forEach(t),ulr=r(D$e," (MobileBERT model)"),D$e.forEach(t),_lr=i(D),Z6=n(D,"LI",{});var G$e=s(Z6);M1e=n(G$e,"STRONG",{});var t1t=s(M1e);blr=r(t1t,"mpnet"),t1t.forEach(t),vlr=r(G$e," \u2014 "),Pz=n(G$e,"A",{href:!0});var a1t=s(Pz);Flr=r(a1t,"TFMPNetModel"),a1t.forEach(t),Tlr=r(G$e," (MPNet model)"),G$e.forEach(t),Mlr=i(D),eT=n(D,"LI",{});var O$e=s(eT);E1e=n(O$e,"STRONG",{});var n1t=s(E1e);Elr=r(n1t,"mt5"),n1t.forEach(t),Clr=r(O$e," \u2014 "),Iz=n(O$e,"A",{href:!0});var s1t=s(Iz);wlr=r(s1t,"TFMT5Model"),s1t.forEach(t),Alr=r(O$e," (mT5 model)"),O$e.forEach(t),ylr=i(D),oT=n(D,"LI",{});var V$e=s(oT);C1e=n(V$e,"STRONG",{});var l1t=s(C1e);Llr=r(l1t,"openai-gpt"),l1t.forEach(t),xlr=r(V$e," \u2014 "),qz=n(V$e,"A",{href:!0});var i1t=s(qz);$lr=r(i1t,"TFOpenAIGPTModel"),i1t.forEach(t),klr=r(V$e," (OpenAI GPT model)"),V$e.forEach(t),Slr=i(D),rT=n(D,"LI",{});var X$e=s(rT);w1e=n(X$e,"STRONG",{});var d1t=s(w1e);Rlr=r(d1t,"pegasus"),d1t.forEach(t),Blr=r(X$e," \u2014 "),Nz=n(X$e,"A",{href:!0});var c1t=s(Nz);Plr=r(c1t,"TFPegasusModel"),c1t.forEach(t),Ilr=r(X$e," (Pegasus model)"),X$e.forEach(t),qlr=i(D),tT=n(D,"LI",{});var z$e=s(tT);A1e=n(z$e,"STRONG",{});var f1t=s(A1e);Nlr=r(f1t,"rembert"),f1t.forEach(t),jlr=r(z$e," \u2014 "),jz=n(z$e,"A",{href:!0});var m1t=s(jz);Dlr=r(m1t,"TFRemBertModel"),m1t.forEach(t),Glr=r(z$e," (RemBERT model)"),z$e.forEach(t),Olr=i(D),aT=n(D,"LI",{});var Q$e=s(aT);y1e=n(Q$e,"STRONG",{});var g1t=s(y1e);Vlr=r(g1t,"roberta"),g1t.forEach(t),Xlr=r(Q$e," \u2014 "),Dz=n(Q$e,"A",{href:!0});var h1t=s(Dz);zlr=r(h1t,"TFRobertaModel"),h1t.forEach(t),Qlr=r(Q$e," (RoBERTa model)"),Q$e.forEach(t),Wlr=i(D),nT=n(D,"LI",{});var W$e=s(nT);L1e=n(W$e,"STRONG",{});var p1t=s(L1e);Hlr=r(p1t,"roformer"),p1t.forEach(t),Ulr=r(W$e," \u2014 "),Gz=n(W$e,"A",{href:!0});var u1t=s(Gz);Jlr=r(u1t,"TFRoFormerModel"),u1t.forEach(t),Ylr=r(W$e," (RoFormer model)"),W$e.forEach(t),Klr=i(D),sT=n(D,"LI",{});var H$e=s(sT);x1e=n(H$e,"STRONG",{});var _1t=s(x1e);Zlr=r(_1t,"speech_to_text"),_1t.forEach(t),eir=r(H$e," \u2014 "),Oz=n(H$e,"A",{href:!0});var b1t=s(Oz);oir=r(b1t,"TFSpeech2TextModel"),b1t.forEach(t),rir=r(H$e," (Speech2Text model)"),H$e.forEach(t),tir=i(D),lT=n(D,"LI",{});var U$e=s(lT);$1e=n(U$e,"STRONG",{});var v1t=s($1e);air=r(v1t,"swin"),v1t.forEach(t),nir=r(U$e," \u2014 "),Vz=n(U$e,"A",{href:!0});var F1t=s(Vz);sir=r(F1t,"TFSwinModel"),F1t.forEach(t),lir=r(U$e," (Swin model)"),U$e.forEach(t),iir=i(D),iT=n(D,"LI",{});var J$e=s(iT);k1e=n(J$e,"STRONG",{});var T1t=s(k1e);dir=r(T1t,"t5"),T1t.forEach(t),cir=r(J$e," \u2014 "),Xz=n(J$e,"A",{href:!0});var M1t=s(Xz);fir=r(M1t,"TFT5Model"),M1t.forEach(t),mir=r(J$e," (T5 model)"),J$e.forEach(t),gir=i(D),dT=n(D,"LI",{});var Y$e=s(dT);S1e=n(Y$e,"STRONG",{});var E1t=s(S1e);hir=r(E1t,"tapas"),E1t.forEach(t),pir=r(Y$e," \u2014 "),zz=n(Y$e,"A",{href:!0});var C1t=s(zz);uir=r(C1t,"TFTapasModel"),C1t.forEach(t),_ir=r(Y$e," (TAPAS model)"),Y$e.forEach(t),bir=i(D),cT=n(D,"LI",{});var K$e=s(cT);R1e=n(K$e,"STRONG",{});var w1t=s(R1e);vir=r(w1t,"transfo-xl"),w1t.forEach(t),Fir=r(K$e," \u2014 "),Qz=n(K$e,"A",{href:!0});var A1t=s(Qz);Tir=r(A1t,"TFTransfoXLModel"),A1t.forEach(t),Mir=r(K$e," (Transformer-XL model)"),K$e.forEach(t),Eir=i(D),fT=n(D,"LI",{});var Z$e=s(fT);B1e=n(Z$e,"STRONG",{});var y1t=s(B1e);Cir=r(y1t,"vit"),y1t.forEach(t),wir=r(Z$e," \u2014 "),Wz=n(Z$e,"A",{href:!0});var L1t=s(Wz);Air=r(L1t,"TFViTModel"),L1t.forEach(t),yir=r(Z$e," (ViT model)"),Z$e.forEach(t),Lir=i(D),mT=n(D,"LI",{});var eke=s(mT);P1e=n(eke,"STRONG",{});var x1t=s(P1e);xir=r(x1t,"vit_mae"),x1t.forEach(t),$ir=r(eke," \u2014 "),Hz=n(eke,"A",{href:!0});var $1t=s(Hz);kir=r($1t,"TFViTMAEModel"),$1t.forEach(t),Sir=r(eke," (ViTMAE model)"),eke.forEach(t),Rir=i(D),gT=n(D,"LI",{});var oke=s(gT);I1e=n(oke,"STRONG",{});var k1t=s(I1e);Bir=r(k1t,"wav2vec2"),k1t.forEach(t),Pir=r(oke," \u2014 "),Uz=n(oke,"A",{href:!0});var S1t=s(Uz);Iir=r(S1t,"TFWav2Vec2Model"),S1t.forEach(t),qir=r(oke," (Wav2Vec2 model)"),oke.forEach(t),Nir=i(D),hT=n(D,"LI",{});var rke=s(hT);q1e=n(rke,"STRONG",{});var R1t=s(q1e);jir=r(R1t,"xlm"),R1t.forEach(t),Dir=r(rke," \u2014 "),Jz=n(rke,"A",{href:!0});var B1t=s(Jz);Gir=r(B1t,"TFXLMModel"),B1t.forEach(t),Oir=r(rke," (XLM model)"),rke.forEach(t),Vir=i(D),pT=n(D,"LI",{});var tke=s(pT);N1e=n(tke,"STRONG",{});var P1t=s(N1e);Xir=r(P1t,"xlm-roberta"),P1t.forEach(t),zir=r(tke," \u2014 "),Yz=n(tke,"A",{href:!0});var I1t=s(Yz);Qir=r(I1t,"TFXLMRobertaModel"),I1t.forEach(t),Wir=r(tke," (XLM-RoBERTa model)"),tke.forEach(t),Hir=i(D),uT=n(D,"LI",{});var ake=s(uT);j1e=n(ake,"STRONG",{});var q1t=s(j1e);Uir=r(q1t,"xlnet"),q1t.forEach(t),Jir=r(ake," \u2014 "),Kz=n(ake,"A",{href:!0});var N1t=s(Kz);Yir=r(N1t,"TFXLNetModel"),N1t.forEach(t),Kir=r(ake," (XLNet model)"),ake.forEach(t),D.forEach(t),Zir=i(fl),T(_T.$$.fragment,fl),fl.forEach(t),cl.forEach(t),aqe=i(f),Gd=n(f,"H2",{class:!0});var cje=s(Gd);bT=n(cje,"A",{id:!0,class:!0,href:!0});var j1t=s(bT);D1e=n(j1t,"SPAN",{});var D1t=s(D1e);T(Dy.$$.fragment,D1t),D1t.forEach(t),j1t.forEach(t),edr=i(cje),G1e=n(cje,"SPAN",{});var G1t=s(G1e);odr=r(G1t,"TFAutoModelForPreTraining"),G1t.forEach(t),cje.forEach(t),nqe=i(f),Ko=n(f,"DIV",{class:!0});var ml=s(Ko);T(Gy.$$.fragment,ml),rdr=i(ml),Od=n(ml,"P",{});var iZ=s(Od);tdr=r(iZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Zz=n(iZ,"A",{href:!0});var O1t=s(Zz);adr=r(O1t,"from_pretrained()"),O1t.forEach(t),ndr=r(iZ," class method or the "),eQ=n(iZ,"A",{href:!0});var V1t=s(eQ);sdr=r(V1t,"from_config()"),V1t.forEach(t),ldr=r(iZ,` class
method.`),iZ.forEach(t),idr=i(ml),Oy=n(ml,"P",{});var fje=s(Oy);ddr=r(fje,"This class cannot be instantiated directly using "),O1e=n(fje,"CODE",{});var X1t=s(O1e);cdr=r(X1t,"__init__()"),X1t.forEach(t),fdr=r(fje," (throws an error)."),fje.forEach(t),mdr=i(ml),At=n(ml,"DIV",{class:!0});var Z3=s(At);T(Vy.$$.fragment,Z3),gdr=i(Z3),V1e=n(Z3,"P",{});var z1t=s(V1e);hdr=r(z1t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),z1t.forEach(t),pdr=i(Z3),Vd=n(Z3,"P",{});var dZ=s(Vd);udr=r(dZ,`Note:
Loading a model from its configuration file does `),X1e=n(dZ,"STRONG",{});var Q1t=s(X1e);_dr=r(Q1t,"not"),Q1t.forEach(t),bdr=r(dZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oQ=n(dZ,"A",{href:!0});var W1t=s(oQ);vdr=r(W1t,"from_pretrained()"),W1t.forEach(t),Fdr=r(dZ," to load the model weights."),dZ.forEach(t),Tdr=i(Z3),T(vT.$$.fragment,Z3),Z3.forEach(t),Mdr=i(ml),Ar=n(ml,"DIV",{class:!0});var gl=s(Ar);T(Xy.$$.fragment,gl),Edr=i(gl),z1e=n(gl,"P",{});var H1t=s(z1e);Cdr=r(H1t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),H1t.forEach(t),wdr=i(gl),Za=n(gl,"P",{});var ew=s(Za);Adr=r(ew,"The model class to instantiate is selected based on the "),Q1e=n(ew,"CODE",{});var U1t=s(Q1e);ydr=r(U1t,"model_type"),U1t.forEach(t),Ldr=r(ew,` property of the config object (either
passed as an argument or loaded from `),W1e=n(ew,"CODE",{});var J1t=s(W1e);xdr=r(J1t,"pretrained_model_name_or_path"),J1t.forEach(t),$dr=r(ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H1e=n(ew,"CODE",{});var Y1t=s(H1e);kdr=r(Y1t,"pretrained_model_name_or_path"),Y1t.forEach(t),Sdr=r(ew,":"),ew.forEach(t),Rdr=i(gl),se=n(gl,"UL",{});var le=s(se);FT=n(le,"LI",{});var nke=s(FT);U1e=n(nke,"STRONG",{});var K1t=s(U1e);Bdr=r(K1t,"albert"),K1t.forEach(t),Pdr=r(nke," \u2014 "),rQ=n(nke,"A",{href:!0});var Z1t=s(rQ);Idr=r(Z1t,"TFAlbertForPreTraining"),Z1t.forEach(t),qdr=r(nke," (ALBERT model)"),nke.forEach(t),Ndr=i(le),TT=n(le,"LI",{});var ske=s(TT);J1e=n(ske,"STRONG",{});var e8t=s(J1e);jdr=r(e8t,"bart"),e8t.forEach(t),Ddr=r(ske," \u2014 "),tQ=n(ske,"A",{href:!0});var o8t=s(tQ);Gdr=r(o8t,"TFBartForConditionalGeneration"),o8t.forEach(t),Odr=r(ske," (BART model)"),ske.forEach(t),Vdr=i(le),MT=n(le,"LI",{});var lke=s(MT);Y1e=n(lke,"STRONG",{});var r8t=s(Y1e);Xdr=r(r8t,"bert"),r8t.forEach(t),zdr=r(lke," \u2014 "),aQ=n(lke,"A",{href:!0});var t8t=s(aQ);Qdr=r(t8t,"TFBertForPreTraining"),t8t.forEach(t),Wdr=r(lke," (BERT model)"),lke.forEach(t),Hdr=i(le),ET=n(le,"LI",{});var ike=s(ET);K1e=n(ike,"STRONG",{});var a8t=s(K1e);Udr=r(a8t,"camembert"),a8t.forEach(t),Jdr=r(ike," \u2014 "),nQ=n(ike,"A",{href:!0});var n8t=s(nQ);Ydr=r(n8t,"TFCamembertForMaskedLM"),n8t.forEach(t),Kdr=r(ike," (CamemBERT model)"),ike.forEach(t),Zdr=i(le),CT=n(le,"LI",{});var dke=s(CT);Z1e=n(dke,"STRONG",{});var s8t=s(Z1e);ecr=r(s8t,"ctrl"),s8t.forEach(t),ocr=r(dke," \u2014 "),sQ=n(dke,"A",{href:!0});var l8t=s(sQ);rcr=r(l8t,"TFCTRLLMHeadModel"),l8t.forEach(t),tcr=r(dke," (CTRL model)"),dke.forEach(t),acr=i(le),wT=n(le,"LI",{});var cke=s(wT);e8e=n(cke,"STRONG",{});var i8t=s(e8e);ncr=r(i8t,"distilbert"),i8t.forEach(t),scr=r(cke," \u2014 "),lQ=n(cke,"A",{href:!0});var d8t=s(lQ);lcr=r(d8t,"TFDistilBertForMaskedLM"),d8t.forEach(t),icr=r(cke," (DistilBERT model)"),cke.forEach(t),dcr=i(le),AT=n(le,"LI",{});var fke=s(AT);o8e=n(fke,"STRONG",{});var c8t=s(o8e);ccr=r(c8t,"electra"),c8t.forEach(t),fcr=r(fke," \u2014 "),iQ=n(fke,"A",{href:!0});var f8t=s(iQ);mcr=r(f8t,"TFElectraForPreTraining"),f8t.forEach(t),gcr=r(fke," (ELECTRA model)"),fke.forEach(t),hcr=i(le),yT=n(le,"LI",{});var mke=s(yT);r8e=n(mke,"STRONG",{});var m8t=s(r8e);pcr=r(m8t,"flaubert"),m8t.forEach(t),ucr=r(mke," \u2014 "),dQ=n(mke,"A",{href:!0});var g8t=s(dQ);_cr=r(g8t,"TFFlaubertWithLMHeadModel"),g8t.forEach(t),bcr=r(mke," (FlauBERT model)"),mke.forEach(t),vcr=i(le),LT=n(le,"LI",{});var gke=s(LT);t8e=n(gke,"STRONG",{});var h8t=s(t8e);Fcr=r(h8t,"funnel"),h8t.forEach(t),Tcr=r(gke," \u2014 "),cQ=n(gke,"A",{href:!0});var p8t=s(cQ);Mcr=r(p8t,"TFFunnelForPreTraining"),p8t.forEach(t),Ecr=r(gke," (Funnel Transformer model)"),gke.forEach(t),Ccr=i(le),xT=n(le,"LI",{});var hke=s(xT);a8e=n(hke,"STRONG",{});var u8t=s(a8e);wcr=r(u8t,"gpt2"),u8t.forEach(t),Acr=r(hke," \u2014 "),fQ=n(hke,"A",{href:!0});var _8t=s(fQ);ycr=r(_8t,"TFGPT2LMHeadModel"),_8t.forEach(t),Lcr=r(hke," (OpenAI GPT-2 model)"),hke.forEach(t),xcr=i(le),$T=n(le,"LI",{});var pke=s($T);n8e=n(pke,"STRONG",{});var b8t=s(n8e);$cr=r(b8t,"layoutlm"),b8t.forEach(t),kcr=r(pke," \u2014 "),mQ=n(pke,"A",{href:!0});var v8t=s(mQ);Scr=r(v8t,"TFLayoutLMForMaskedLM"),v8t.forEach(t),Rcr=r(pke," (LayoutLM model)"),pke.forEach(t),Bcr=i(le),kT=n(le,"LI",{});var uke=s(kT);s8e=n(uke,"STRONG",{});var F8t=s(s8e);Pcr=r(F8t,"lxmert"),F8t.forEach(t),Icr=r(uke," \u2014 "),gQ=n(uke,"A",{href:!0});var T8t=s(gQ);qcr=r(T8t,"TFLxmertForPreTraining"),T8t.forEach(t),Ncr=r(uke," (LXMERT model)"),uke.forEach(t),jcr=i(le),ST=n(le,"LI",{});var _ke=s(ST);l8e=n(_ke,"STRONG",{});var M8t=s(l8e);Dcr=r(M8t,"mobilebert"),M8t.forEach(t),Gcr=r(_ke," \u2014 "),hQ=n(_ke,"A",{href:!0});var E8t=s(hQ);Ocr=r(E8t,"TFMobileBertForPreTraining"),E8t.forEach(t),Vcr=r(_ke," (MobileBERT model)"),_ke.forEach(t),Xcr=i(le),RT=n(le,"LI",{});var bke=s(RT);i8e=n(bke,"STRONG",{});var C8t=s(i8e);zcr=r(C8t,"mpnet"),C8t.forEach(t),Qcr=r(bke," \u2014 "),pQ=n(bke,"A",{href:!0});var w8t=s(pQ);Wcr=r(w8t,"TFMPNetForMaskedLM"),w8t.forEach(t),Hcr=r(bke," (MPNet model)"),bke.forEach(t),Ucr=i(le),BT=n(le,"LI",{});var vke=s(BT);d8e=n(vke,"STRONG",{});var A8t=s(d8e);Jcr=r(A8t,"openai-gpt"),A8t.forEach(t),Ycr=r(vke," \u2014 "),uQ=n(vke,"A",{href:!0});var y8t=s(uQ);Kcr=r(y8t,"TFOpenAIGPTLMHeadModel"),y8t.forEach(t),Zcr=r(vke," (OpenAI GPT model)"),vke.forEach(t),efr=i(le),PT=n(le,"LI",{});var Fke=s(PT);c8e=n(Fke,"STRONG",{});var L8t=s(c8e);ofr=r(L8t,"roberta"),L8t.forEach(t),rfr=r(Fke," \u2014 "),_Q=n(Fke,"A",{href:!0});var x8t=s(_Q);tfr=r(x8t,"TFRobertaForMaskedLM"),x8t.forEach(t),afr=r(Fke," (RoBERTa model)"),Fke.forEach(t),nfr=i(le),IT=n(le,"LI",{});var Tke=s(IT);f8e=n(Tke,"STRONG",{});var $8t=s(f8e);sfr=r($8t,"t5"),$8t.forEach(t),lfr=r(Tke," \u2014 "),bQ=n(Tke,"A",{href:!0});var k8t=s(bQ);ifr=r(k8t,"TFT5ForConditionalGeneration"),k8t.forEach(t),dfr=r(Tke," (T5 model)"),Tke.forEach(t),cfr=i(le),qT=n(le,"LI",{});var Mke=s(qT);m8e=n(Mke,"STRONG",{});var S8t=s(m8e);ffr=r(S8t,"tapas"),S8t.forEach(t),mfr=r(Mke," \u2014 "),vQ=n(Mke,"A",{href:!0});var R8t=s(vQ);gfr=r(R8t,"TFTapasForMaskedLM"),R8t.forEach(t),hfr=r(Mke," (TAPAS model)"),Mke.forEach(t),pfr=i(le),NT=n(le,"LI",{});var Eke=s(NT);g8e=n(Eke,"STRONG",{});var B8t=s(g8e);ufr=r(B8t,"transfo-xl"),B8t.forEach(t),_fr=r(Eke," \u2014 "),FQ=n(Eke,"A",{href:!0});var P8t=s(FQ);bfr=r(P8t,"TFTransfoXLLMHeadModel"),P8t.forEach(t),vfr=r(Eke," (Transformer-XL model)"),Eke.forEach(t),Ffr=i(le),jT=n(le,"LI",{});var Cke=s(jT);h8e=n(Cke,"STRONG",{});var I8t=s(h8e);Tfr=r(I8t,"vit_mae"),I8t.forEach(t),Mfr=r(Cke," \u2014 "),TQ=n(Cke,"A",{href:!0});var q8t=s(TQ);Efr=r(q8t,"TFViTMAEForPreTraining"),q8t.forEach(t),Cfr=r(Cke," (ViTMAE model)"),Cke.forEach(t),wfr=i(le),DT=n(le,"LI",{});var wke=s(DT);p8e=n(wke,"STRONG",{});var N8t=s(p8e);Afr=r(N8t,"xlm"),N8t.forEach(t),yfr=r(wke," \u2014 "),MQ=n(wke,"A",{href:!0});var j8t=s(MQ);Lfr=r(j8t,"TFXLMWithLMHeadModel"),j8t.forEach(t),xfr=r(wke," (XLM model)"),wke.forEach(t),$fr=i(le),GT=n(le,"LI",{});var Ake=s(GT);u8e=n(Ake,"STRONG",{});var D8t=s(u8e);kfr=r(D8t,"xlm-roberta"),D8t.forEach(t),Sfr=r(Ake," \u2014 "),EQ=n(Ake,"A",{href:!0});var G8t=s(EQ);Rfr=r(G8t,"TFXLMRobertaForMaskedLM"),G8t.forEach(t),Bfr=r(Ake," (XLM-RoBERTa model)"),Ake.forEach(t),Pfr=i(le),OT=n(le,"LI",{});var yke=s(OT);_8e=n(yke,"STRONG",{});var O8t=s(_8e);Ifr=r(O8t,"xlnet"),O8t.forEach(t),qfr=r(yke," \u2014 "),CQ=n(yke,"A",{href:!0});var V8t=s(CQ);Nfr=r(V8t,"TFXLNetLMHeadModel"),V8t.forEach(t),jfr=r(yke," (XLNet model)"),yke.forEach(t),le.forEach(t),Dfr=i(gl),T(VT.$$.fragment,gl),gl.forEach(t),ml.forEach(t),sqe=i(f),Xd=n(f,"H2",{class:!0});var mje=s(Xd);XT=n(mje,"A",{id:!0,class:!0,href:!0});var X8t=s(XT);b8e=n(X8t,"SPAN",{});var z8t=s(b8e);T(zy.$$.fragment,z8t),z8t.forEach(t),X8t.forEach(t),Gfr=i(mje),v8e=n(mje,"SPAN",{});var Q8t=s(v8e);Ofr=r(Q8t,"TFAutoModelForCausalLM"),Q8t.forEach(t),mje.forEach(t),lqe=i(f),Zo=n(f,"DIV",{class:!0});var hl=s(Zo);T(Qy.$$.fragment,hl),Vfr=i(hl),zd=n(hl,"P",{});var cZ=s(zd);Xfr=r(cZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),wQ=n(cZ,"A",{href:!0});var W8t=s(wQ);zfr=r(W8t,"from_pretrained()"),W8t.forEach(t),Qfr=r(cZ," class method or the "),AQ=n(cZ,"A",{href:!0});var H8t=s(AQ);Wfr=r(H8t,"from_config()"),H8t.forEach(t),Hfr=r(cZ,` class
method.`),cZ.forEach(t),Ufr=i(hl),Wy=n(hl,"P",{});var gje=s(Wy);Jfr=r(gje,"This class cannot be instantiated directly using "),F8e=n(gje,"CODE",{});var U8t=s(F8e);Yfr=r(U8t,"__init__()"),U8t.forEach(t),Kfr=r(gje," (throws an error)."),gje.forEach(t),Zfr=i(hl),yt=n(hl,"DIV",{class:!0});var ow=s(yt);T(Hy.$$.fragment,ow),emr=i(ow),T8e=n(ow,"P",{});var J8t=s(T8e);omr=r(J8t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),J8t.forEach(t),rmr=i(ow),Qd=n(ow,"P",{});var fZ=s(Qd);tmr=r(fZ,`Note:
Loading a model from its configuration file does `),M8e=n(fZ,"STRONG",{});var Y8t=s(M8e);amr=r(Y8t,"not"),Y8t.forEach(t),nmr=r(fZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=n(fZ,"A",{href:!0});var K8t=s(yQ);smr=r(K8t,"from_pretrained()"),K8t.forEach(t),lmr=r(fZ," to load the model weights."),fZ.forEach(t),imr=i(ow),T(zT.$$.fragment,ow),ow.forEach(t),dmr=i(hl),yr=n(hl,"DIV",{class:!0});var pl=s(yr);T(Uy.$$.fragment,pl),cmr=i(pl),E8e=n(pl,"P",{});var Z8t=s(E8e);fmr=r(Z8t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Z8t.forEach(t),mmr=i(pl),en=n(pl,"P",{});var rw=s(en);gmr=r(rw,"The model class to instantiate is selected based on the "),C8e=n(rw,"CODE",{});var ebt=s(C8e);hmr=r(ebt,"model_type"),ebt.forEach(t),pmr=r(rw,` property of the config object (either
passed as an argument or loaded from `),w8e=n(rw,"CODE",{});var obt=s(w8e);umr=r(obt,"pretrained_model_name_or_path"),obt.forEach(t),_mr=r(rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A8e=n(rw,"CODE",{});var rbt=s(A8e);bmr=r(rbt,"pretrained_model_name_or_path"),rbt.forEach(t),vmr=r(rw,":"),rw.forEach(t),Fmr=i(pl),Te=n(pl,"UL",{});var Ce=s(Te);QT=n(Ce,"LI",{});var Lke=s(QT);y8e=n(Lke,"STRONG",{});var tbt=s(y8e);Tmr=r(tbt,"bert"),tbt.forEach(t),Mmr=r(Lke," \u2014 "),LQ=n(Lke,"A",{href:!0});var abt=s(LQ);Emr=r(abt,"TFBertLMHeadModel"),abt.forEach(t),Cmr=r(Lke," (BERT model)"),Lke.forEach(t),wmr=i(Ce),WT=n(Ce,"LI",{});var xke=s(WT);L8e=n(xke,"STRONG",{});var nbt=s(L8e);Amr=r(nbt,"camembert"),nbt.forEach(t),ymr=r(xke," \u2014 "),xQ=n(xke,"A",{href:!0});var sbt=s(xQ);Lmr=r(sbt,"TFCamembertForCausalLM"),sbt.forEach(t),xmr=r(xke," (CamemBERT model)"),xke.forEach(t),$mr=i(Ce),HT=n(Ce,"LI",{});var $ke=s(HT);x8e=n($ke,"STRONG",{});var lbt=s(x8e);kmr=r(lbt,"ctrl"),lbt.forEach(t),Smr=r($ke," \u2014 "),$Q=n($ke,"A",{href:!0});var ibt=s($Q);Rmr=r(ibt,"TFCTRLLMHeadModel"),ibt.forEach(t),Bmr=r($ke," (CTRL model)"),$ke.forEach(t),Pmr=i(Ce),UT=n(Ce,"LI",{});var kke=s(UT);$8e=n(kke,"STRONG",{});var dbt=s($8e);Imr=r(dbt,"gpt2"),dbt.forEach(t),qmr=r(kke," \u2014 "),kQ=n(kke,"A",{href:!0});var cbt=s(kQ);Nmr=r(cbt,"TFGPT2LMHeadModel"),cbt.forEach(t),jmr=r(kke," (OpenAI GPT-2 model)"),kke.forEach(t),Dmr=i(Ce),JT=n(Ce,"LI",{});var Ske=s(JT);k8e=n(Ske,"STRONG",{});var fbt=s(k8e);Gmr=r(fbt,"gptj"),fbt.forEach(t),Omr=r(Ske," \u2014 "),SQ=n(Ske,"A",{href:!0});var mbt=s(SQ);Vmr=r(mbt,"TFGPTJForCausalLM"),mbt.forEach(t),Xmr=r(Ske," (GPT-J model)"),Ske.forEach(t),zmr=i(Ce),YT=n(Ce,"LI",{});var Rke=s(YT);S8e=n(Rke,"STRONG",{});var gbt=s(S8e);Qmr=r(gbt,"openai-gpt"),gbt.forEach(t),Wmr=r(Rke," \u2014 "),RQ=n(Rke,"A",{href:!0});var hbt=s(RQ);Hmr=r(hbt,"TFOpenAIGPTLMHeadModel"),hbt.forEach(t),Umr=r(Rke," (OpenAI GPT model)"),Rke.forEach(t),Jmr=i(Ce),KT=n(Ce,"LI",{});var Bke=s(KT);R8e=n(Bke,"STRONG",{});var pbt=s(R8e);Ymr=r(pbt,"rembert"),pbt.forEach(t),Kmr=r(Bke," \u2014 "),BQ=n(Bke,"A",{href:!0});var ubt=s(BQ);Zmr=r(ubt,"TFRemBertForCausalLM"),ubt.forEach(t),egr=r(Bke," (RemBERT model)"),Bke.forEach(t),ogr=i(Ce),ZT=n(Ce,"LI",{});var Pke=s(ZT);B8e=n(Pke,"STRONG",{});var _bt=s(B8e);rgr=r(_bt,"roberta"),_bt.forEach(t),tgr=r(Pke," \u2014 "),PQ=n(Pke,"A",{href:!0});var bbt=s(PQ);agr=r(bbt,"TFRobertaForCausalLM"),bbt.forEach(t),ngr=r(Pke," (RoBERTa model)"),Pke.forEach(t),sgr=i(Ce),e9=n(Ce,"LI",{});var Ike=s(e9);P8e=n(Ike,"STRONG",{});var vbt=s(P8e);lgr=r(vbt,"roformer"),vbt.forEach(t),igr=r(Ike," \u2014 "),IQ=n(Ike,"A",{href:!0});var Fbt=s(IQ);dgr=r(Fbt,"TFRoFormerForCausalLM"),Fbt.forEach(t),cgr=r(Ike," (RoFormer model)"),Ike.forEach(t),fgr=i(Ce),o9=n(Ce,"LI",{});var qke=s(o9);I8e=n(qke,"STRONG",{});var Tbt=s(I8e);mgr=r(Tbt,"transfo-xl"),Tbt.forEach(t),ggr=r(qke," \u2014 "),qQ=n(qke,"A",{href:!0});var Mbt=s(qQ);hgr=r(Mbt,"TFTransfoXLLMHeadModel"),Mbt.forEach(t),pgr=r(qke," (Transformer-XL model)"),qke.forEach(t),ugr=i(Ce),r9=n(Ce,"LI",{});var Nke=s(r9);q8e=n(Nke,"STRONG",{});var Ebt=s(q8e);_gr=r(Ebt,"xlm"),Ebt.forEach(t),bgr=r(Nke," \u2014 "),NQ=n(Nke,"A",{href:!0});var Cbt=s(NQ);vgr=r(Cbt,"TFXLMWithLMHeadModel"),Cbt.forEach(t),Fgr=r(Nke," (XLM model)"),Nke.forEach(t),Tgr=i(Ce),t9=n(Ce,"LI",{});var jke=s(t9);N8e=n(jke,"STRONG",{});var wbt=s(N8e);Mgr=r(wbt,"xlnet"),wbt.forEach(t),Egr=r(jke," \u2014 "),jQ=n(jke,"A",{href:!0});var Abt=s(jQ);Cgr=r(Abt,"TFXLNetLMHeadModel"),Abt.forEach(t),wgr=r(jke," (XLNet model)"),jke.forEach(t),Ce.forEach(t),Agr=i(pl),T(a9.$$.fragment,pl),pl.forEach(t),hl.forEach(t),iqe=i(f),Wd=n(f,"H2",{class:!0});var hje=s(Wd);n9=n(hje,"A",{id:!0,class:!0,href:!0});var ybt=s(n9);j8e=n(ybt,"SPAN",{});var Lbt=s(j8e);T(Jy.$$.fragment,Lbt),Lbt.forEach(t),ybt.forEach(t),ygr=i(hje),D8e=n(hje,"SPAN",{});var xbt=s(D8e);Lgr=r(xbt,"TFAutoModelForImageClassification"),xbt.forEach(t),hje.forEach(t),dqe=i(f),er=n(f,"DIV",{class:!0});var ul=s(er);T(Yy.$$.fragment,ul),xgr=i(ul),Hd=n(ul,"P",{});var mZ=s(Hd);$gr=r(mZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),DQ=n(mZ,"A",{href:!0});var $bt=s(DQ);kgr=r($bt,"from_pretrained()"),$bt.forEach(t),Sgr=r(mZ," class method or the "),GQ=n(mZ,"A",{href:!0});var kbt=s(GQ);Rgr=r(kbt,"from_config()"),kbt.forEach(t),Bgr=r(mZ,` class
method.`),mZ.forEach(t),Pgr=i(ul),Ky=n(ul,"P",{});var pje=s(Ky);Igr=r(pje,"This class cannot be instantiated directly using "),G8e=n(pje,"CODE",{});var Sbt=s(G8e);qgr=r(Sbt,"__init__()"),Sbt.forEach(t),Ngr=r(pje," (throws an error)."),pje.forEach(t),jgr=i(ul),Lt=n(ul,"DIV",{class:!0});var tw=s(Lt);T(Zy.$$.fragment,tw),Dgr=i(tw),O8e=n(tw,"P",{});var Rbt=s(O8e);Ggr=r(Rbt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Rbt.forEach(t),Ogr=i(tw),Ud=n(tw,"P",{});var gZ=s(Ud);Vgr=r(gZ,`Note:
Loading a model from its configuration file does `),V8e=n(gZ,"STRONG",{});var Bbt=s(V8e);Xgr=r(Bbt,"not"),Bbt.forEach(t),zgr=r(gZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OQ=n(gZ,"A",{href:!0});var Pbt=s(OQ);Qgr=r(Pbt,"from_pretrained()"),Pbt.forEach(t),Wgr=r(gZ," to load the model weights."),gZ.forEach(t),Hgr=i(tw),T(s9.$$.fragment,tw),tw.forEach(t),Ugr=i(ul),Lr=n(ul,"DIV",{class:!0});var _l=s(Lr);T(eL.$$.fragment,_l),Jgr=i(_l),X8e=n(_l,"P",{});var Ibt=s(X8e);Ygr=r(Ibt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Ibt.forEach(t),Kgr=i(_l),on=n(_l,"P",{});var aw=s(on);Zgr=r(aw,"The model class to instantiate is selected based on the "),z8e=n(aw,"CODE",{});var qbt=s(z8e);ehr=r(qbt,"model_type"),qbt.forEach(t),ohr=r(aw,` property of the config object (either
passed as an argument or loaded from `),Q8e=n(aw,"CODE",{});var Nbt=s(Q8e);rhr=r(Nbt,"pretrained_model_name_or_path"),Nbt.forEach(t),thr=r(aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W8e=n(aw,"CODE",{});var jbt=s(W8e);ahr=r(jbt,"pretrained_model_name_or_path"),jbt.forEach(t),nhr=r(aw,":"),aw.forEach(t),shr=i(_l),rn=n(_l,"UL",{});var nw=s(rn);l9=n(nw,"LI",{});var Dke=s(l9);H8e=n(Dke,"STRONG",{});var Dbt=s(H8e);lhr=r(Dbt,"convnext"),Dbt.forEach(t),ihr=r(Dke," \u2014 "),VQ=n(Dke,"A",{href:!0});var Gbt=s(VQ);dhr=r(Gbt,"TFConvNextForImageClassification"),Gbt.forEach(t),chr=r(Dke," (ConvNext model)"),Dke.forEach(t),fhr=i(nw),i9=n(nw,"LI",{});var Gke=s(i9);U8e=n(Gke,"STRONG",{});var Obt=s(U8e);mhr=r(Obt,"data2vec-vision"),Obt.forEach(t),ghr=r(Gke," \u2014 "),XQ=n(Gke,"A",{href:!0});var Vbt=s(XQ);hhr=r(Vbt,"TFData2VecVisionForImageClassification"),Vbt.forEach(t),phr=r(Gke," (Data2VecVision model)"),Gke.forEach(t),uhr=i(nw),d9=n(nw,"LI",{});var Oke=s(d9);J8e=n(Oke,"STRONG",{});var Xbt=s(J8e);_hr=r(Xbt,"swin"),Xbt.forEach(t),bhr=r(Oke," \u2014 "),zQ=n(Oke,"A",{href:!0});var zbt=s(zQ);vhr=r(zbt,"TFSwinForImageClassification"),zbt.forEach(t),Fhr=r(Oke," (Swin model)"),Oke.forEach(t),Thr=i(nw),c9=n(nw,"LI",{});var Vke=s(c9);Y8e=n(Vke,"STRONG",{});var Qbt=s(Y8e);Mhr=r(Qbt,"vit"),Qbt.forEach(t),Ehr=r(Vke," \u2014 "),QQ=n(Vke,"A",{href:!0});var Wbt=s(QQ);Chr=r(Wbt,"TFViTForImageClassification"),Wbt.forEach(t),whr=r(Vke," (ViT model)"),Vke.forEach(t),nw.forEach(t),Ahr=i(_l),T(f9.$$.fragment,_l),_l.forEach(t),ul.forEach(t),cqe=i(f),Jd=n(f,"H2",{class:!0});var uje=s(Jd);m9=n(uje,"A",{id:!0,class:!0,href:!0});var Hbt=s(m9);K8e=n(Hbt,"SPAN",{});var Ubt=s(K8e);T(oL.$$.fragment,Ubt),Ubt.forEach(t),Hbt.forEach(t),yhr=i(uje),Z8e=n(uje,"SPAN",{});var Jbt=s(Z8e);Lhr=r(Jbt,"TFAutoModelForMaskedLM"),Jbt.forEach(t),uje.forEach(t),fqe=i(f),or=n(f,"DIV",{class:!0});var bl=s(or);T(rL.$$.fragment,bl),xhr=i(bl),Yd=n(bl,"P",{});var hZ=s(Yd);$hr=r(hZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),WQ=n(hZ,"A",{href:!0});var Ybt=s(WQ);khr=r(Ybt,"from_pretrained()"),Ybt.forEach(t),Shr=r(hZ," class method or the "),HQ=n(hZ,"A",{href:!0});var Kbt=s(HQ);Rhr=r(Kbt,"from_config()"),Kbt.forEach(t),Bhr=r(hZ,` class
method.`),hZ.forEach(t),Phr=i(bl),tL=n(bl,"P",{});var _je=s(tL);Ihr=r(_je,"This class cannot be instantiated directly using "),ebe=n(_je,"CODE",{});var Zbt=s(ebe);qhr=r(Zbt,"__init__()"),Zbt.forEach(t),Nhr=r(_je," (throws an error)."),_je.forEach(t),jhr=i(bl),xt=n(bl,"DIV",{class:!0});var sw=s(xt);T(aL.$$.fragment,sw),Dhr=i(sw),obe=n(sw,"P",{});var e2t=s(obe);Ghr=r(e2t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),e2t.forEach(t),Ohr=i(sw),Kd=n(sw,"P",{});var pZ=s(Kd);Vhr=r(pZ,`Note:
Loading a model from its configuration file does `),rbe=n(pZ,"STRONG",{});var o2t=s(rbe);Xhr=r(o2t,"not"),o2t.forEach(t),zhr=r(pZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UQ=n(pZ,"A",{href:!0});var r2t=s(UQ);Qhr=r(r2t,"from_pretrained()"),r2t.forEach(t),Whr=r(pZ," to load the model weights."),pZ.forEach(t),Hhr=i(sw),T(g9.$$.fragment,sw),sw.forEach(t),Uhr=i(bl),xr=n(bl,"DIV",{class:!0});var vl=s(xr);T(nL.$$.fragment,vl),Jhr=i(vl),tbe=n(vl,"P",{});var t2t=s(tbe);Yhr=r(t2t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),t2t.forEach(t),Khr=i(vl),tn=n(vl,"P",{});var lw=s(tn);Zhr=r(lw,"The model class to instantiate is selected based on the "),abe=n(lw,"CODE",{});var a2t=s(abe);epr=r(a2t,"model_type"),a2t.forEach(t),opr=r(lw,` property of the config object (either
passed as an argument or loaded from `),nbe=n(lw,"CODE",{});var n2t=s(nbe);rpr=r(n2t,"pretrained_model_name_or_path"),n2t.forEach(t),tpr=r(lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sbe=n(lw,"CODE",{});var s2t=s(sbe);apr=r(s2t,"pretrained_model_name_or_path"),s2t.forEach(t),npr=r(lw,":"),lw.forEach(t),spr=i(vl),ie=n(vl,"UL",{});var fe=s(ie);h9=n(fe,"LI",{});var Xke=s(h9);lbe=n(Xke,"STRONG",{});var l2t=s(lbe);lpr=r(l2t,"albert"),l2t.forEach(t),ipr=r(Xke," \u2014 "),JQ=n(Xke,"A",{href:!0});var i2t=s(JQ);dpr=r(i2t,"TFAlbertForMaskedLM"),i2t.forEach(t),cpr=r(Xke," (ALBERT model)"),Xke.forEach(t),fpr=i(fe),p9=n(fe,"LI",{});var zke=s(p9);ibe=n(zke,"STRONG",{});var d2t=s(ibe);mpr=r(d2t,"bert"),d2t.forEach(t),gpr=r(zke," \u2014 "),YQ=n(zke,"A",{href:!0});var c2t=s(YQ);hpr=r(c2t,"TFBertForMaskedLM"),c2t.forEach(t),ppr=r(zke," (BERT model)"),zke.forEach(t),upr=i(fe),u9=n(fe,"LI",{});var Qke=s(u9);dbe=n(Qke,"STRONG",{});var f2t=s(dbe);_pr=r(f2t,"camembert"),f2t.forEach(t),bpr=r(Qke," \u2014 "),KQ=n(Qke,"A",{href:!0});var m2t=s(KQ);vpr=r(m2t,"TFCamembertForMaskedLM"),m2t.forEach(t),Fpr=r(Qke," (CamemBERT model)"),Qke.forEach(t),Tpr=i(fe),_9=n(fe,"LI",{});var Wke=s(_9);cbe=n(Wke,"STRONG",{});var g2t=s(cbe);Mpr=r(g2t,"convbert"),g2t.forEach(t),Epr=r(Wke," \u2014 "),ZQ=n(Wke,"A",{href:!0});var h2t=s(ZQ);Cpr=r(h2t,"TFConvBertForMaskedLM"),h2t.forEach(t),wpr=r(Wke," (ConvBERT model)"),Wke.forEach(t),Apr=i(fe),b9=n(fe,"LI",{});var Hke=s(b9);fbe=n(Hke,"STRONG",{});var p2t=s(fbe);ypr=r(p2t,"deberta"),p2t.forEach(t),Lpr=r(Hke," \u2014 "),eW=n(Hke,"A",{href:!0});var u2t=s(eW);xpr=r(u2t,"TFDebertaForMaskedLM"),u2t.forEach(t),$pr=r(Hke," (DeBERTa model)"),Hke.forEach(t),kpr=i(fe),v9=n(fe,"LI",{});var Uke=s(v9);mbe=n(Uke,"STRONG",{});var _2t=s(mbe);Spr=r(_2t,"deberta-v2"),_2t.forEach(t),Rpr=r(Uke," \u2014 "),oW=n(Uke,"A",{href:!0});var b2t=s(oW);Bpr=r(b2t,"TFDebertaV2ForMaskedLM"),b2t.forEach(t),Ppr=r(Uke," (DeBERTa-v2 model)"),Uke.forEach(t),Ipr=i(fe),F9=n(fe,"LI",{});var Jke=s(F9);gbe=n(Jke,"STRONG",{});var v2t=s(gbe);qpr=r(v2t,"distilbert"),v2t.forEach(t),Npr=r(Jke," \u2014 "),rW=n(Jke,"A",{href:!0});var F2t=s(rW);jpr=r(F2t,"TFDistilBertForMaskedLM"),F2t.forEach(t),Dpr=r(Jke," (DistilBERT model)"),Jke.forEach(t),Gpr=i(fe),T9=n(fe,"LI",{});var Yke=s(T9);hbe=n(Yke,"STRONG",{});var T2t=s(hbe);Opr=r(T2t,"electra"),T2t.forEach(t),Vpr=r(Yke," \u2014 "),tW=n(Yke,"A",{href:!0});var M2t=s(tW);Xpr=r(M2t,"TFElectraForMaskedLM"),M2t.forEach(t),zpr=r(Yke," (ELECTRA model)"),Yke.forEach(t),Qpr=i(fe),M9=n(fe,"LI",{});var Kke=s(M9);pbe=n(Kke,"STRONG",{});var E2t=s(pbe);Wpr=r(E2t,"flaubert"),E2t.forEach(t),Hpr=r(Kke," \u2014 "),aW=n(Kke,"A",{href:!0});var C2t=s(aW);Upr=r(C2t,"TFFlaubertWithLMHeadModel"),C2t.forEach(t),Jpr=r(Kke," (FlauBERT model)"),Kke.forEach(t),Ypr=i(fe),E9=n(fe,"LI",{});var Zke=s(E9);ube=n(Zke,"STRONG",{});var w2t=s(ube);Kpr=r(w2t,"funnel"),w2t.forEach(t),Zpr=r(Zke," \u2014 "),nW=n(Zke,"A",{href:!0});var A2t=s(nW);eur=r(A2t,"TFFunnelForMaskedLM"),A2t.forEach(t),our=r(Zke," (Funnel Transformer model)"),Zke.forEach(t),rur=i(fe),C9=n(fe,"LI",{});var eSe=s(C9);_be=n(eSe,"STRONG",{});var y2t=s(_be);tur=r(y2t,"layoutlm"),y2t.forEach(t),aur=r(eSe," \u2014 "),sW=n(eSe,"A",{href:!0});var L2t=s(sW);nur=r(L2t,"TFLayoutLMForMaskedLM"),L2t.forEach(t),sur=r(eSe," (LayoutLM model)"),eSe.forEach(t),lur=i(fe),w9=n(fe,"LI",{});var oSe=s(w9);bbe=n(oSe,"STRONG",{});var x2t=s(bbe);iur=r(x2t,"longformer"),x2t.forEach(t),dur=r(oSe," \u2014 "),lW=n(oSe,"A",{href:!0});var $2t=s(lW);cur=r($2t,"TFLongformerForMaskedLM"),$2t.forEach(t),fur=r(oSe," (Longformer model)"),oSe.forEach(t),mur=i(fe),A9=n(fe,"LI",{});var rSe=s(A9);vbe=n(rSe,"STRONG",{});var k2t=s(vbe);gur=r(k2t,"mobilebert"),k2t.forEach(t),hur=r(rSe," \u2014 "),iW=n(rSe,"A",{href:!0});var S2t=s(iW);pur=r(S2t,"TFMobileBertForMaskedLM"),S2t.forEach(t),uur=r(rSe," (MobileBERT model)"),rSe.forEach(t),_ur=i(fe),y9=n(fe,"LI",{});var tSe=s(y9);Fbe=n(tSe,"STRONG",{});var R2t=s(Fbe);bur=r(R2t,"mpnet"),R2t.forEach(t),vur=r(tSe," \u2014 "),dW=n(tSe,"A",{href:!0});var B2t=s(dW);Fur=r(B2t,"TFMPNetForMaskedLM"),B2t.forEach(t),Tur=r(tSe," (MPNet model)"),tSe.forEach(t),Mur=i(fe),L9=n(fe,"LI",{});var aSe=s(L9);Tbe=n(aSe,"STRONG",{});var P2t=s(Tbe);Eur=r(P2t,"rembert"),P2t.forEach(t),Cur=r(aSe," \u2014 "),cW=n(aSe,"A",{href:!0});var I2t=s(cW);wur=r(I2t,"TFRemBertForMaskedLM"),I2t.forEach(t),Aur=r(aSe," (RemBERT model)"),aSe.forEach(t),yur=i(fe),x9=n(fe,"LI",{});var nSe=s(x9);Mbe=n(nSe,"STRONG",{});var q2t=s(Mbe);Lur=r(q2t,"roberta"),q2t.forEach(t),xur=r(nSe," \u2014 "),fW=n(nSe,"A",{href:!0});var N2t=s(fW);$ur=r(N2t,"TFRobertaForMaskedLM"),N2t.forEach(t),kur=r(nSe," (RoBERTa model)"),nSe.forEach(t),Sur=i(fe),$9=n(fe,"LI",{});var sSe=s($9);Ebe=n(sSe,"STRONG",{});var j2t=s(Ebe);Rur=r(j2t,"roformer"),j2t.forEach(t),Bur=r(sSe," \u2014 "),mW=n(sSe,"A",{href:!0});var D2t=s(mW);Pur=r(D2t,"TFRoFormerForMaskedLM"),D2t.forEach(t),Iur=r(sSe," (RoFormer model)"),sSe.forEach(t),qur=i(fe),k9=n(fe,"LI",{});var lSe=s(k9);Cbe=n(lSe,"STRONG",{});var G2t=s(Cbe);Nur=r(G2t,"tapas"),G2t.forEach(t),jur=r(lSe," \u2014 "),gW=n(lSe,"A",{href:!0});var O2t=s(gW);Dur=r(O2t,"TFTapasForMaskedLM"),O2t.forEach(t),Gur=r(lSe," (TAPAS model)"),lSe.forEach(t),Our=i(fe),S9=n(fe,"LI",{});var iSe=s(S9);wbe=n(iSe,"STRONG",{});var V2t=s(wbe);Vur=r(V2t,"xlm"),V2t.forEach(t),Xur=r(iSe," \u2014 "),hW=n(iSe,"A",{href:!0});var X2t=s(hW);zur=r(X2t,"TFXLMWithLMHeadModel"),X2t.forEach(t),Qur=r(iSe," (XLM model)"),iSe.forEach(t),Wur=i(fe),R9=n(fe,"LI",{});var dSe=s(R9);Abe=n(dSe,"STRONG",{});var z2t=s(Abe);Hur=r(z2t,"xlm-roberta"),z2t.forEach(t),Uur=r(dSe," \u2014 "),pW=n(dSe,"A",{href:!0});var Q2t=s(pW);Jur=r(Q2t,"TFXLMRobertaForMaskedLM"),Q2t.forEach(t),Yur=r(dSe," (XLM-RoBERTa model)"),dSe.forEach(t),fe.forEach(t),Kur=i(vl),T(B9.$$.fragment,vl),vl.forEach(t),bl.forEach(t),mqe=i(f),Zd=n(f,"H2",{class:!0});var bje=s(Zd);P9=n(bje,"A",{id:!0,class:!0,href:!0});var W2t=s(P9);ybe=n(W2t,"SPAN",{});var H2t=s(ybe);T(sL.$$.fragment,H2t),H2t.forEach(t),W2t.forEach(t),Zur=i(bje),Lbe=n(bje,"SPAN",{});var U2t=s(Lbe);e_r=r(U2t,"TFAutoModelForSeq2SeqLM"),U2t.forEach(t),bje.forEach(t),gqe=i(f),rr=n(f,"DIV",{class:!0});var Fl=s(rr);T(lL.$$.fragment,Fl),o_r=i(Fl),ec=n(Fl,"P",{});var uZ=s(ec);r_r=r(uZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),uW=n(uZ,"A",{href:!0});var J2t=s(uW);t_r=r(J2t,"from_pretrained()"),J2t.forEach(t),a_r=r(uZ," class method or the "),_W=n(uZ,"A",{href:!0});var Y2t=s(_W);n_r=r(Y2t,"from_config()"),Y2t.forEach(t),s_r=r(uZ,` class
method.`),uZ.forEach(t),l_r=i(Fl),iL=n(Fl,"P",{});var vje=s(iL);i_r=r(vje,"This class cannot be instantiated directly using "),xbe=n(vje,"CODE",{});var K2t=s(xbe);d_r=r(K2t,"__init__()"),K2t.forEach(t),c_r=r(vje," (throws an error)."),vje.forEach(t),f_r=i(Fl),$t=n(Fl,"DIV",{class:!0});var iw=s($t);T(dL.$$.fragment,iw),m_r=i(iw),$be=n(iw,"P",{});var Z2t=s($be);g_r=r(Z2t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Z2t.forEach(t),h_r=i(iw),oc=n(iw,"P",{});var _Z=s(oc);p_r=r(_Z,`Note:
Loading a model from its configuration file does `),kbe=n(_Z,"STRONG",{});var evt=s(kbe);u_r=r(evt,"not"),evt.forEach(t),__r=r(_Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),bW=n(_Z,"A",{href:!0});var ovt=s(bW);b_r=r(ovt,"from_pretrained()"),ovt.forEach(t),v_r=r(_Z," to load the model weights."),_Z.forEach(t),F_r=i(iw),T(I9.$$.fragment,iw),iw.forEach(t),T_r=i(Fl),$r=n(Fl,"DIV",{class:!0});var Tl=s($r);T(cL.$$.fragment,Tl),M_r=i(Tl),Sbe=n(Tl,"P",{});var rvt=s(Sbe);E_r=r(rvt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),rvt.forEach(t),C_r=i(Tl),an=n(Tl,"P",{});var dw=s(an);w_r=r(dw,"The model class to instantiate is selected based on the "),Rbe=n(dw,"CODE",{});var tvt=s(Rbe);A_r=r(tvt,"model_type"),tvt.forEach(t),y_r=r(dw,` property of the config object (either
passed as an argument or loaded from `),Bbe=n(dw,"CODE",{});var avt=s(Bbe);L_r=r(avt,"pretrained_model_name_or_path"),avt.forEach(t),x_r=r(dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pbe=n(dw,"CODE",{});var nvt=s(Pbe);$_r=r(nvt,"pretrained_model_name_or_path"),nvt.forEach(t),k_r=r(dw,":"),dw.forEach(t),S_r=i(Tl),ye=n(Tl,"UL",{});var Re=s(ye);q9=n(Re,"LI",{});var cSe=s(q9);Ibe=n(cSe,"STRONG",{});var svt=s(Ibe);R_r=r(svt,"bart"),svt.forEach(t),B_r=r(cSe," \u2014 "),vW=n(cSe,"A",{href:!0});var lvt=s(vW);P_r=r(lvt,"TFBartForConditionalGeneration"),lvt.forEach(t),I_r=r(cSe," (BART model)"),cSe.forEach(t),q_r=i(Re),N9=n(Re,"LI",{});var fSe=s(N9);qbe=n(fSe,"STRONG",{});var ivt=s(qbe);N_r=r(ivt,"blenderbot"),ivt.forEach(t),j_r=r(fSe," \u2014 "),FW=n(fSe,"A",{href:!0});var dvt=s(FW);D_r=r(dvt,"TFBlenderbotForConditionalGeneration"),dvt.forEach(t),G_r=r(fSe," (Blenderbot model)"),fSe.forEach(t),O_r=i(Re),j9=n(Re,"LI",{});var mSe=s(j9);Nbe=n(mSe,"STRONG",{});var cvt=s(Nbe);V_r=r(cvt,"blenderbot-small"),cvt.forEach(t),X_r=r(mSe," \u2014 "),TW=n(mSe,"A",{href:!0});var fvt=s(TW);z_r=r(fvt,"TFBlenderbotSmallForConditionalGeneration"),fvt.forEach(t),Q_r=r(mSe," (BlenderbotSmall model)"),mSe.forEach(t),W_r=i(Re),D9=n(Re,"LI",{});var gSe=s(D9);jbe=n(gSe,"STRONG",{});var mvt=s(jbe);H_r=r(mvt,"encoder-decoder"),mvt.forEach(t),U_r=r(gSe," \u2014 "),MW=n(gSe,"A",{href:!0});var gvt=s(MW);J_r=r(gvt,"TFEncoderDecoderModel"),gvt.forEach(t),Y_r=r(gSe," (Encoder decoder model)"),gSe.forEach(t),K_r=i(Re),G9=n(Re,"LI",{});var hSe=s(G9);Dbe=n(hSe,"STRONG",{});var hvt=s(Dbe);Z_r=r(hvt,"led"),hvt.forEach(t),e1r=r(hSe," \u2014 "),EW=n(hSe,"A",{href:!0});var pvt=s(EW);o1r=r(pvt,"TFLEDForConditionalGeneration"),pvt.forEach(t),r1r=r(hSe," (LED model)"),hSe.forEach(t),t1r=i(Re),O9=n(Re,"LI",{});var pSe=s(O9);Gbe=n(pSe,"STRONG",{});var uvt=s(Gbe);a1r=r(uvt,"marian"),uvt.forEach(t),n1r=r(pSe," \u2014 "),CW=n(pSe,"A",{href:!0});var _vt=s(CW);s1r=r(_vt,"TFMarianMTModel"),_vt.forEach(t),l1r=r(pSe," (Marian model)"),pSe.forEach(t),i1r=i(Re),V9=n(Re,"LI",{});var uSe=s(V9);Obe=n(uSe,"STRONG",{});var bvt=s(Obe);d1r=r(bvt,"mbart"),bvt.forEach(t),c1r=r(uSe," \u2014 "),wW=n(uSe,"A",{href:!0});var vvt=s(wW);f1r=r(vvt,"TFMBartForConditionalGeneration"),vvt.forEach(t),m1r=r(uSe," (mBART model)"),uSe.forEach(t),g1r=i(Re),X9=n(Re,"LI",{});var _Se=s(X9);Vbe=n(_Se,"STRONG",{});var Fvt=s(Vbe);h1r=r(Fvt,"mt5"),Fvt.forEach(t),p1r=r(_Se," \u2014 "),AW=n(_Se,"A",{href:!0});var Tvt=s(AW);u1r=r(Tvt,"TFMT5ForConditionalGeneration"),Tvt.forEach(t),_1r=r(_Se," (mT5 model)"),_Se.forEach(t),b1r=i(Re),z9=n(Re,"LI",{});var bSe=s(z9);Xbe=n(bSe,"STRONG",{});var Mvt=s(Xbe);v1r=r(Mvt,"pegasus"),Mvt.forEach(t),F1r=r(bSe," \u2014 "),yW=n(bSe,"A",{href:!0});var Evt=s(yW);T1r=r(Evt,"TFPegasusForConditionalGeneration"),Evt.forEach(t),M1r=r(bSe," (Pegasus model)"),bSe.forEach(t),E1r=i(Re),Q9=n(Re,"LI",{});var vSe=s(Q9);zbe=n(vSe,"STRONG",{});var Cvt=s(zbe);C1r=r(Cvt,"t5"),Cvt.forEach(t),w1r=r(vSe," \u2014 "),LW=n(vSe,"A",{href:!0});var wvt=s(LW);A1r=r(wvt,"TFT5ForConditionalGeneration"),wvt.forEach(t),y1r=r(vSe," (T5 model)"),vSe.forEach(t),Re.forEach(t),L1r=i(Tl),T(W9.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),hqe=i(f),rc=n(f,"H2",{class:!0});var Fje=s(rc);H9=n(Fje,"A",{id:!0,class:!0,href:!0});var Avt=s(H9);Qbe=n(Avt,"SPAN",{});var yvt=s(Qbe);T(fL.$$.fragment,yvt),yvt.forEach(t),Avt.forEach(t),x1r=i(Fje),Wbe=n(Fje,"SPAN",{});var Lvt=s(Wbe);$1r=r(Lvt,"TFAutoModelForSequenceClassification"),Lvt.forEach(t),Fje.forEach(t),pqe=i(f),tr=n(f,"DIV",{class:!0});var Ml=s(tr);T(mL.$$.fragment,Ml),k1r=i(Ml),tc=n(Ml,"P",{});var bZ=s(tc);S1r=r(bZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),xW=n(bZ,"A",{href:!0});var xvt=s(xW);R1r=r(xvt,"from_pretrained()"),xvt.forEach(t),B1r=r(bZ," class method or the "),$W=n(bZ,"A",{href:!0});var $vt=s($W);P1r=r($vt,"from_config()"),$vt.forEach(t),I1r=r(bZ,` class
method.`),bZ.forEach(t),q1r=i(Ml),gL=n(Ml,"P",{});var Tje=s(gL);N1r=r(Tje,"This class cannot be instantiated directly using "),Hbe=n(Tje,"CODE",{});var kvt=s(Hbe);j1r=r(kvt,"__init__()"),kvt.forEach(t),D1r=r(Tje," (throws an error)."),Tje.forEach(t),G1r=i(Ml),kt=n(Ml,"DIV",{class:!0});var cw=s(kt);T(hL.$$.fragment,cw),O1r=i(cw),Ube=n(cw,"P",{});var Svt=s(Ube);V1r=r(Svt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Svt.forEach(t),X1r=i(cw),ac=n(cw,"P",{});var vZ=s(ac);z1r=r(vZ,`Note:
Loading a model from its configuration file does `),Jbe=n(vZ,"STRONG",{});var Rvt=s(Jbe);Q1r=r(Rvt,"not"),Rvt.forEach(t),W1r=r(vZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kW=n(vZ,"A",{href:!0});var Bvt=s(kW);H1r=r(Bvt,"from_pretrained()"),Bvt.forEach(t),U1r=r(vZ," to load the model weights."),vZ.forEach(t),J1r=i(cw),T(U9.$$.fragment,cw),cw.forEach(t),Y1r=i(Ml),kr=n(Ml,"DIV",{class:!0});var El=s(kr);T(pL.$$.fragment,El),K1r=i(El),Ybe=n(El,"P",{});var Pvt=s(Ybe);Z1r=r(Pvt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Pvt.forEach(t),e8r=i(El),nn=n(El,"P",{});var fw=s(nn);o8r=r(fw,"The model class to instantiate is selected based on the "),Kbe=n(fw,"CODE",{});var Ivt=s(Kbe);r8r=r(Ivt,"model_type"),Ivt.forEach(t),t8r=r(fw,` property of the config object (either
passed as an argument or loaded from `),Zbe=n(fw,"CODE",{});var qvt=s(Zbe);a8r=r(qvt,"pretrained_model_name_or_path"),qvt.forEach(t),n8r=r(fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e2e=n(fw,"CODE",{});var Nvt=s(e2e);s8r=r(Nvt,"pretrained_model_name_or_path"),Nvt.forEach(t),l8r=r(fw,":"),fw.forEach(t),i8r=i(El),Z=n(El,"UL",{});var te=s(Z);J9=n(te,"LI",{});var FSe=s(J9);o2e=n(FSe,"STRONG",{});var jvt=s(o2e);d8r=r(jvt,"albert"),jvt.forEach(t),c8r=r(FSe," \u2014 "),SW=n(FSe,"A",{href:!0});var Dvt=s(SW);f8r=r(Dvt,"TFAlbertForSequenceClassification"),Dvt.forEach(t),m8r=r(FSe," (ALBERT model)"),FSe.forEach(t),g8r=i(te),Y9=n(te,"LI",{});var TSe=s(Y9);r2e=n(TSe,"STRONG",{});var Gvt=s(r2e);h8r=r(Gvt,"bert"),Gvt.forEach(t),p8r=r(TSe," \u2014 "),RW=n(TSe,"A",{href:!0});var Ovt=s(RW);u8r=r(Ovt,"TFBertForSequenceClassification"),Ovt.forEach(t),_8r=r(TSe," (BERT model)"),TSe.forEach(t),b8r=i(te),K9=n(te,"LI",{});var MSe=s(K9);t2e=n(MSe,"STRONG",{});var Vvt=s(t2e);v8r=r(Vvt,"camembert"),Vvt.forEach(t),F8r=r(MSe," \u2014 "),BW=n(MSe,"A",{href:!0});var Xvt=s(BW);T8r=r(Xvt,"TFCamembertForSequenceClassification"),Xvt.forEach(t),M8r=r(MSe," (CamemBERT model)"),MSe.forEach(t),E8r=i(te),Z9=n(te,"LI",{});var ESe=s(Z9);a2e=n(ESe,"STRONG",{});var zvt=s(a2e);C8r=r(zvt,"convbert"),zvt.forEach(t),w8r=r(ESe," \u2014 "),PW=n(ESe,"A",{href:!0});var Qvt=s(PW);A8r=r(Qvt,"TFConvBertForSequenceClassification"),Qvt.forEach(t),y8r=r(ESe," (ConvBERT model)"),ESe.forEach(t),L8r=i(te),eM=n(te,"LI",{});var CSe=s(eM);n2e=n(CSe,"STRONG",{});var Wvt=s(n2e);x8r=r(Wvt,"ctrl"),Wvt.forEach(t),$8r=r(CSe," \u2014 "),IW=n(CSe,"A",{href:!0});var Hvt=s(IW);k8r=r(Hvt,"TFCTRLForSequenceClassification"),Hvt.forEach(t),S8r=r(CSe," (CTRL model)"),CSe.forEach(t),R8r=i(te),oM=n(te,"LI",{});var wSe=s(oM);s2e=n(wSe,"STRONG",{});var Uvt=s(s2e);B8r=r(Uvt,"deberta"),Uvt.forEach(t),P8r=r(wSe," \u2014 "),qW=n(wSe,"A",{href:!0});var Jvt=s(qW);I8r=r(Jvt,"TFDebertaForSequenceClassification"),Jvt.forEach(t),q8r=r(wSe," (DeBERTa model)"),wSe.forEach(t),N8r=i(te),rM=n(te,"LI",{});var ASe=s(rM);l2e=n(ASe,"STRONG",{});var Yvt=s(l2e);j8r=r(Yvt,"deberta-v2"),Yvt.forEach(t),D8r=r(ASe," \u2014 "),NW=n(ASe,"A",{href:!0});var Kvt=s(NW);G8r=r(Kvt,"TFDebertaV2ForSequenceClassification"),Kvt.forEach(t),O8r=r(ASe," (DeBERTa-v2 model)"),ASe.forEach(t),V8r=i(te),tM=n(te,"LI",{});var ySe=s(tM);i2e=n(ySe,"STRONG",{});var Zvt=s(i2e);X8r=r(Zvt,"distilbert"),Zvt.forEach(t),z8r=r(ySe," \u2014 "),jW=n(ySe,"A",{href:!0});var eFt=s(jW);Q8r=r(eFt,"TFDistilBertForSequenceClassification"),eFt.forEach(t),W8r=r(ySe," (DistilBERT model)"),ySe.forEach(t),H8r=i(te),aM=n(te,"LI",{});var LSe=s(aM);d2e=n(LSe,"STRONG",{});var oFt=s(d2e);U8r=r(oFt,"electra"),oFt.forEach(t),J8r=r(LSe," \u2014 "),DW=n(LSe,"A",{href:!0});var rFt=s(DW);Y8r=r(rFt,"TFElectraForSequenceClassification"),rFt.forEach(t),K8r=r(LSe," (ELECTRA model)"),LSe.forEach(t),Z8r=i(te),nM=n(te,"LI",{});var xSe=s(nM);c2e=n(xSe,"STRONG",{});var tFt=s(c2e);ebr=r(tFt,"flaubert"),tFt.forEach(t),obr=r(xSe," \u2014 "),GW=n(xSe,"A",{href:!0});var aFt=s(GW);rbr=r(aFt,"TFFlaubertForSequenceClassification"),aFt.forEach(t),tbr=r(xSe," (FlauBERT model)"),xSe.forEach(t),abr=i(te),sM=n(te,"LI",{});var $Se=s(sM);f2e=n($Se,"STRONG",{});var nFt=s(f2e);nbr=r(nFt,"funnel"),nFt.forEach(t),sbr=r($Se," \u2014 "),OW=n($Se,"A",{href:!0});var sFt=s(OW);lbr=r(sFt,"TFFunnelForSequenceClassification"),sFt.forEach(t),ibr=r($Se," (Funnel Transformer model)"),$Se.forEach(t),dbr=i(te),lM=n(te,"LI",{});var kSe=s(lM);m2e=n(kSe,"STRONG",{});var lFt=s(m2e);cbr=r(lFt,"gpt2"),lFt.forEach(t),fbr=r(kSe," \u2014 "),VW=n(kSe,"A",{href:!0});var iFt=s(VW);mbr=r(iFt,"TFGPT2ForSequenceClassification"),iFt.forEach(t),gbr=r(kSe," (OpenAI GPT-2 model)"),kSe.forEach(t),hbr=i(te),iM=n(te,"LI",{});var SSe=s(iM);g2e=n(SSe,"STRONG",{});var dFt=s(g2e);pbr=r(dFt,"gptj"),dFt.forEach(t),ubr=r(SSe," \u2014 "),XW=n(SSe,"A",{href:!0});var cFt=s(XW);_br=r(cFt,"TFGPTJForSequenceClassification"),cFt.forEach(t),bbr=r(SSe," (GPT-J model)"),SSe.forEach(t),vbr=i(te),dM=n(te,"LI",{});var RSe=s(dM);h2e=n(RSe,"STRONG",{});var fFt=s(h2e);Fbr=r(fFt,"layoutlm"),fFt.forEach(t),Tbr=r(RSe," \u2014 "),zW=n(RSe,"A",{href:!0});var mFt=s(zW);Mbr=r(mFt,"TFLayoutLMForSequenceClassification"),mFt.forEach(t),Ebr=r(RSe," (LayoutLM model)"),RSe.forEach(t),Cbr=i(te),cM=n(te,"LI",{});var BSe=s(cM);p2e=n(BSe,"STRONG",{});var gFt=s(p2e);wbr=r(gFt,"longformer"),gFt.forEach(t),Abr=r(BSe," \u2014 "),QW=n(BSe,"A",{href:!0});var hFt=s(QW);ybr=r(hFt,"TFLongformerForSequenceClassification"),hFt.forEach(t),Lbr=r(BSe," (Longformer model)"),BSe.forEach(t),xbr=i(te),fM=n(te,"LI",{});var PSe=s(fM);u2e=n(PSe,"STRONG",{});var pFt=s(u2e);$br=r(pFt,"mobilebert"),pFt.forEach(t),kbr=r(PSe," \u2014 "),WW=n(PSe,"A",{href:!0});var uFt=s(WW);Sbr=r(uFt,"TFMobileBertForSequenceClassification"),uFt.forEach(t),Rbr=r(PSe," (MobileBERT model)"),PSe.forEach(t),Bbr=i(te),mM=n(te,"LI",{});var ISe=s(mM);_2e=n(ISe,"STRONG",{});var _Ft=s(_2e);Pbr=r(_Ft,"mpnet"),_Ft.forEach(t),Ibr=r(ISe," \u2014 "),HW=n(ISe,"A",{href:!0});var bFt=s(HW);qbr=r(bFt,"TFMPNetForSequenceClassification"),bFt.forEach(t),Nbr=r(ISe," (MPNet model)"),ISe.forEach(t),jbr=i(te),gM=n(te,"LI",{});var qSe=s(gM);b2e=n(qSe,"STRONG",{});var vFt=s(b2e);Dbr=r(vFt,"openai-gpt"),vFt.forEach(t),Gbr=r(qSe," \u2014 "),UW=n(qSe,"A",{href:!0});var FFt=s(UW);Obr=r(FFt,"TFOpenAIGPTForSequenceClassification"),FFt.forEach(t),Vbr=r(qSe," (OpenAI GPT model)"),qSe.forEach(t),Xbr=i(te),hM=n(te,"LI",{});var NSe=s(hM);v2e=n(NSe,"STRONG",{});var TFt=s(v2e);zbr=r(TFt,"rembert"),TFt.forEach(t),Qbr=r(NSe," \u2014 "),JW=n(NSe,"A",{href:!0});var MFt=s(JW);Wbr=r(MFt,"TFRemBertForSequenceClassification"),MFt.forEach(t),Hbr=r(NSe," (RemBERT model)"),NSe.forEach(t),Ubr=i(te),pM=n(te,"LI",{});var jSe=s(pM);F2e=n(jSe,"STRONG",{});var EFt=s(F2e);Jbr=r(EFt,"roberta"),EFt.forEach(t),Ybr=r(jSe," \u2014 "),YW=n(jSe,"A",{href:!0});var CFt=s(YW);Kbr=r(CFt,"TFRobertaForSequenceClassification"),CFt.forEach(t),Zbr=r(jSe," (RoBERTa model)"),jSe.forEach(t),e2r=i(te),uM=n(te,"LI",{});var DSe=s(uM);T2e=n(DSe,"STRONG",{});var wFt=s(T2e);o2r=r(wFt,"roformer"),wFt.forEach(t),r2r=r(DSe," \u2014 "),KW=n(DSe,"A",{href:!0});var AFt=s(KW);t2r=r(AFt,"TFRoFormerForSequenceClassification"),AFt.forEach(t),a2r=r(DSe," (RoFormer model)"),DSe.forEach(t),n2r=i(te),_M=n(te,"LI",{});var GSe=s(_M);M2e=n(GSe,"STRONG",{});var yFt=s(M2e);s2r=r(yFt,"tapas"),yFt.forEach(t),l2r=r(GSe," \u2014 "),ZW=n(GSe,"A",{href:!0});var LFt=s(ZW);i2r=r(LFt,"TFTapasForSequenceClassification"),LFt.forEach(t),d2r=r(GSe," (TAPAS model)"),GSe.forEach(t),c2r=i(te),bM=n(te,"LI",{});var OSe=s(bM);E2e=n(OSe,"STRONG",{});var xFt=s(E2e);f2r=r(xFt,"transfo-xl"),xFt.forEach(t),m2r=r(OSe," \u2014 "),eH=n(OSe,"A",{href:!0});var $Ft=s(eH);g2r=r($Ft,"TFTransfoXLForSequenceClassification"),$Ft.forEach(t),h2r=r(OSe," (Transformer-XL model)"),OSe.forEach(t),p2r=i(te),vM=n(te,"LI",{});var VSe=s(vM);C2e=n(VSe,"STRONG",{});var kFt=s(C2e);u2r=r(kFt,"xlm"),kFt.forEach(t),_2r=r(VSe," \u2014 "),oH=n(VSe,"A",{href:!0});var SFt=s(oH);b2r=r(SFt,"TFXLMForSequenceClassification"),SFt.forEach(t),v2r=r(VSe," (XLM model)"),VSe.forEach(t),F2r=i(te),FM=n(te,"LI",{});var XSe=s(FM);w2e=n(XSe,"STRONG",{});var RFt=s(w2e);T2r=r(RFt,"xlm-roberta"),RFt.forEach(t),M2r=r(XSe," \u2014 "),rH=n(XSe,"A",{href:!0});var BFt=s(rH);E2r=r(BFt,"TFXLMRobertaForSequenceClassification"),BFt.forEach(t),C2r=r(XSe," (XLM-RoBERTa model)"),XSe.forEach(t),w2r=i(te),TM=n(te,"LI",{});var zSe=s(TM);A2e=n(zSe,"STRONG",{});var PFt=s(A2e);A2r=r(PFt,"xlnet"),PFt.forEach(t),y2r=r(zSe," \u2014 "),tH=n(zSe,"A",{href:!0});var IFt=s(tH);L2r=r(IFt,"TFXLNetForSequenceClassification"),IFt.forEach(t),x2r=r(zSe," (XLNet model)"),zSe.forEach(t),te.forEach(t),$2r=i(El),T(MM.$$.fragment,El),El.forEach(t),Ml.forEach(t),uqe=i(f),nc=n(f,"H2",{class:!0});var Mje=s(nc);EM=n(Mje,"A",{id:!0,class:!0,href:!0});var qFt=s(EM);y2e=n(qFt,"SPAN",{});var NFt=s(y2e);T(uL.$$.fragment,NFt),NFt.forEach(t),qFt.forEach(t),k2r=i(Mje),L2e=n(Mje,"SPAN",{});var jFt=s(L2e);S2r=r(jFt,"TFAutoModelForMultipleChoice"),jFt.forEach(t),Mje.forEach(t),_qe=i(f),ar=n(f,"DIV",{class:!0});var Cl=s(ar);T(_L.$$.fragment,Cl),R2r=i(Cl),sc=n(Cl,"P",{});var FZ=s(sc);B2r=r(FZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),aH=n(FZ,"A",{href:!0});var DFt=s(aH);P2r=r(DFt,"from_pretrained()"),DFt.forEach(t),I2r=r(FZ," class method or the "),nH=n(FZ,"A",{href:!0});var GFt=s(nH);q2r=r(GFt,"from_config()"),GFt.forEach(t),N2r=r(FZ,` class
method.`),FZ.forEach(t),j2r=i(Cl),bL=n(Cl,"P",{});var Eje=s(bL);D2r=r(Eje,"This class cannot be instantiated directly using "),x2e=n(Eje,"CODE",{});var OFt=s(x2e);G2r=r(OFt,"__init__()"),OFt.forEach(t),O2r=r(Eje," (throws an error)."),Eje.forEach(t),V2r=i(Cl),St=n(Cl,"DIV",{class:!0});var mw=s(St);T(vL.$$.fragment,mw),X2r=i(mw),$2e=n(mw,"P",{});var VFt=s($2e);z2r=r(VFt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),VFt.forEach(t),Q2r=i(mw),lc=n(mw,"P",{});var TZ=s(lc);W2r=r(TZ,`Note:
Loading a model from its configuration file does `),k2e=n(TZ,"STRONG",{});var XFt=s(k2e);H2r=r(XFt,"not"),XFt.forEach(t),U2r=r(TZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sH=n(TZ,"A",{href:!0});var zFt=s(sH);J2r=r(zFt,"from_pretrained()"),zFt.forEach(t),Y2r=r(TZ," to load the model weights."),TZ.forEach(t),K2r=i(mw),T(CM.$$.fragment,mw),mw.forEach(t),Z2r=i(Cl),Sr=n(Cl,"DIV",{class:!0});var wl=s(Sr);T(FL.$$.fragment,wl),evr=i(wl),S2e=n(wl,"P",{});var QFt=s(S2e);ovr=r(QFt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),QFt.forEach(t),rvr=i(wl),sn=n(wl,"P",{});var gw=s(sn);tvr=r(gw,"The model class to instantiate is selected based on the "),R2e=n(gw,"CODE",{});var WFt=s(R2e);avr=r(WFt,"model_type"),WFt.forEach(t),nvr=r(gw,` property of the config object (either
passed as an argument or loaded from `),B2e=n(gw,"CODE",{});var HFt=s(B2e);svr=r(HFt,"pretrained_model_name_or_path"),HFt.forEach(t),lvr=r(gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P2e=n(gw,"CODE",{});var UFt=s(P2e);ivr=r(UFt,"pretrained_model_name_or_path"),UFt.forEach(t),dvr=r(gw,":"),gw.forEach(t),cvr=i(wl),pe=n(wl,"UL",{});var _e=s(pe);wM=n(_e,"LI",{});var QSe=s(wM);I2e=n(QSe,"STRONG",{});var JFt=s(I2e);fvr=r(JFt,"albert"),JFt.forEach(t),mvr=r(QSe," \u2014 "),lH=n(QSe,"A",{href:!0});var YFt=s(lH);gvr=r(YFt,"TFAlbertForMultipleChoice"),YFt.forEach(t),hvr=r(QSe," (ALBERT model)"),QSe.forEach(t),pvr=i(_e),AM=n(_e,"LI",{});var WSe=s(AM);q2e=n(WSe,"STRONG",{});var KFt=s(q2e);uvr=r(KFt,"bert"),KFt.forEach(t),_vr=r(WSe," \u2014 "),iH=n(WSe,"A",{href:!0});var ZFt=s(iH);bvr=r(ZFt,"TFBertForMultipleChoice"),ZFt.forEach(t),vvr=r(WSe," (BERT model)"),WSe.forEach(t),Fvr=i(_e),yM=n(_e,"LI",{});var HSe=s(yM);N2e=n(HSe,"STRONG",{});var e6t=s(N2e);Tvr=r(e6t,"camembert"),e6t.forEach(t),Mvr=r(HSe," \u2014 "),dH=n(HSe,"A",{href:!0});var o6t=s(dH);Evr=r(o6t,"TFCamembertForMultipleChoice"),o6t.forEach(t),Cvr=r(HSe," (CamemBERT model)"),HSe.forEach(t),wvr=i(_e),LM=n(_e,"LI",{});var USe=s(LM);j2e=n(USe,"STRONG",{});var r6t=s(j2e);Avr=r(r6t,"convbert"),r6t.forEach(t),yvr=r(USe," \u2014 "),cH=n(USe,"A",{href:!0});var t6t=s(cH);Lvr=r(t6t,"TFConvBertForMultipleChoice"),t6t.forEach(t),xvr=r(USe," (ConvBERT model)"),USe.forEach(t),$vr=i(_e),xM=n(_e,"LI",{});var JSe=s(xM);D2e=n(JSe,"STRONG",{});var a6t=s(D2e);kvr=r(a6t,"distilbert"),a6t.forEach(t),Svr=r(JSe," \u2014 "),fH=n(JSe,"A",{href:!0});var n6t=s(fH);Rvr=r(n6t,"TFDistilBertForMultipleChoice"),n6t.forEach(t),Bvr=r(JSe," (DistilBERT model)"),JSe.forEach(t),Pvr=i(_e),$M=n(_e,"LI",{});var YSe=s($M);G2e=n(YSe,"STRONG",{});var s6t=s(G2e);Ivr=r(s6t,"electra"),s6t.forEach(t),qvr=r(YSe," \u2014 "),mH=n(YSe,"A",{href:!0});var l6t=s(mH);Nvr=r(l6t,"TFElectraForMultipleChoice"),l6t.forEach(t),jvr=r(YSe," (ELECTRA model)"),YSe.forEach(t),Dvr=i(_e),kM=n(_e,"LI",{});var KSe=s(kM);O2e=n(KSe,"STRONG",{});var i6t=s(O2e);Gvr=r(i6t,"flaubert"),i6t.forEach(t),Ovr=r(KSe," \u2014 "),gH=n(KSe,"A",{href:!0});var d6t=s(gH);Vvr=r(d6t,"TFFlaubertForMultipleChoice"),d6t.forEach(t),Xvr=r(KSe," (FlauBERT model)"),KSe.forEach(t),zvr=i(_e),SM=n(_e,"LI",{});var ZSe=s(SM);V2e=n(ZSe,"STRONG",{});var c6t=s(V2e);Qvr=r(c6t,"funnel"),c6t.forEach(t),Wvr=r(ZSe," \u2014 "),hH=n(ZSe,"A",{href:!0});var f6t=s(hH);Hvr=r(f6t,"TFFunnelForMultipleChoice"),f6t.forEach(t),Uvr=r(ZSe," (Funnel Transformer model)"),ZSe.forEach(t),Jvr=i(_e),RM=n(_e,"LI",{});var eRe=s(RM);X2e=n(eRe,"STRONG",{});var m6t=s(X2e);Yvr=r(m6t,"longformer"),m6t.forEach(t),Kvr=r(eRe," \u2014 "),pH=n(eRe,"A",{href:!0});var g6t=s(pH);Zvr=r(g6t,"TFLongformerForMultipleChoice"),g6t.forEach(t),eFr=r(eRe," (Longformer model)"),eRe.forEach(t),oFr=i(_e),BM=n(_e,"LI",{});var oRe=s(BM);z2e=n(oRe,"STRONG",{});var h6t=s(z2e);rFr=r(h6t,"mobilebert"),h6t.forEach(t),tFr=r(oRe," \u2014 "),uH=n(oRe,"A",{href:!0});var p6t=s(uH);aFr=r(p6t,"TFMobileBertForMultipleChoice"),p6t.forEach(t),nFr=r(oRe," (MobileBERT model)"),oRe.forEach(t),sFr=i(_e),PM=n(_e,"LI",{});var rRe=s(PM);Q2e=n(rRe,"STRONG",{});var u6t=s(Q2e);lFr=r(u6t,"mpnet"),u6t.forEach(t),iFr=r(rRe," \u2014 "),_H=n(rRe,"A",{href:!0});var _6t=s(_H);dFr=r(_6t,"TFMPNetForMultipleChoice"),_6t.forEach(t),cFr=r(rRe," (MPNet model)"),rRe.forEach(t),fFr=i(_e),IM=n(_e,"LI",{});var tRe=s(IM);W2e=n(tRe,"STRONG",{});var b6t=s(W2e);mFr=r(b6t,"rembert"),b6t.forEach(t),gFr=r(tRe," \u2014 "),bH=n(tRe,"A",{href:!0});var v6t=s(bH);hFr=r(v6t,"TFRemBertForMultipleChoice"),v6t.forEach(t),pFr=r(tRe," (RemBERT model)"),tRe.forEach(t),uFr=i(_e),qM=n(_e,"LI",{});var aRe=s(qM);H2e=n(aRe,"STRONG",{});var F6t=s(H2e);_Fr=r(F6t,"roberta"),F6t.forEach(t),bFr=r(aRe," \u2014 "),vH=n(aRe,"A",{href:!0});var T6t=s(vH);vFr=r(T6t,"TFRobertaForMultipleChoice"),T6t.forEach(t),FFr=r(aRe," (RoBERTa model)"),aRe.forEach(t),TFr=i(_e),NM=n(_e,"LI",{});var nRe=s(NM);U2e=n(nRe,"STRONG",{});var M6t=s(U2e);MFr=r(M6t,"roformer"),M6t.forEach(t),EFr=r(nRe," \u2014 "),FH=n(nRe,"A",{href:!0});var E6t=s(FH);CFr=r(E6t,"TFRoFormerForMultipleChoice"),E6t.forEach(t),wFr=r(nRe," (RoFormer model)"),nRe.forEach(t),AFr=i(_e),jM=n(_e,"LI",{});var sRe=s(jM);J2e=n(sRe,"STRONG",{});var C6t=s(J2e);yFr=r(C6t,"xlm"),C6t.forEach(t),LFr=r(sRe," \u2014 "),TH=n(sRe,"A",{href:!0});var w6t=s(TH);xFr=r(w6t,"TFXLMForMultipleChoice"),w6t.forEach(t),$Fr=r(sRe," (XLM model)"),sRe.forEach(t),kFr=i(_e),DM=n(_e,"LI",{});var lRe=s(DM);Y2e=n(lRe,"STRONG",{});var A6t=s(Y2e);SFr=r(A6t,"xlm-roberta"),A6t.forEach(t),RFr=r(lRe," \u2014 "),MH=n(lRe,"A",{href:!0});var y6t=s(MH);BFr=r(y6t,"TFXLMRobertaForMultipleChoice"),y6t.forEach(t),PFr=r(lRe," (XLM-RoBERTa model)"),lRe.forEach(t),IFr=i(_e),GM=n(_e,"LI",{});var iRe=s(GM);K2e=n(iRe,"STRONG",{});var L6t=s(K2e);qFr=r(L6t,"xlnet"),L6t.forEach(t),NFr=r(iRe," \u2014 "),EH=n(iRe,"A",{href:!0});var x6t=s(EH);jFr=r(x6t,"TFXLNetForMultipleChoice"),x6t.forEach(t),DFr=r(iRe," (XLNet model)"),iRe.forEach(t),_e.forEach(t),GFr=i(wl),T(OM.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),bqe=i(f),ic=n(f,"H2",{class:!0});var Cje=s(ic);VM=n(Cje,"A",{id:!0,class:!0,href:!0});var $6t=s(VM);Z2e=n($6t,"SPAN",{});var k6t=s(Z2e);T(TL.$$.fragment,k6t),k6t.forEach(t),$6t.forEach(t),OFr=i(Cje),eve=n(Cje,"SPAN",{});var S6t=s(eve);VFr=r(S6t,"TFAutoModelForNextSentencePrediction"),S6t.forEach(t),Cje.forEach(t),vqe=i(f),nr=n(f,"DIV",{class:!0});var Al=s(nr);T(ML.$$.fragment,Al),XFr=i(Al),dc=n(Al,"P",{});var MZ=s(dc);zFr=r(MZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),CH=n(MZ,"A",{href:!0});var R6t=s(CH);QFr=r(R6t,"from_pretrained()"),R6t.forEach(t),WFr=r(MZ," class method or the "),wH=n(MZ,"A",{href:!0});var B6t=s(wH);HFr=r(B6t,"from_config()"),B6t.forEach(t),UFr=r(MZ,` class
method.`),MZ.forEach(t),JFr=i(Al),EL=n(Al,"P",{});var wje=s(EL);YFr=r(wje,"This class cannot be instantiated directly using "),ove=n(wje,"CODE",{});var P6t=s(ove);KFr=r(P6t,"__init__()"),P6t.forEach(t),ZFr=r(wje," (throws an error)."),wje.forEach(t),e6r=i(Al),Rt=n(Al,"DIV",{class:!0});var hw=s(Rt);T(CL.$$.fragment,hw),o6r=i(hw),rve=n(hw,"P",{});var I6t=s(rve);r6r=r(I6t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),I6t.forEach(t),t6r=i(hw),cc=n(hw,"P",{});var EZ=s(cc);a6r=r(EZ,`Note:
Loading a model from its configuration file does `),tve=n(EZ,"STRONG",{});var q6t=s(tve);n6r=r(q6t,"not"),q6t.forEach(t),s6r=r(EZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),AH=n(EZ,"A",{href:!0});var N6t=s(AH);l6r=r(N6t,"from_pretrained()"),N6t.forEach(t),i6r=r(EZ," to load the model weights."),EZ.forEach(t),d6r=i(hw),T(XM.$$.fragment,hw),hw.forEach(t),c6r=i(Al),Rr=n(Al,"DIV",{class:!0});var yl=s(Rr);T(wL.$$.fragment,yl),f6r=i(yl),ave=n(yl,"P",{});var j6t=s(ave);m6r=r(j6t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),j6t.forEach(t),g6r=i(yl),ln=n(yl,"P",{});var pw=s(ln);h6r=r(pw,"The model class to instantiate is selected based on the "),nve=n(pw,"CODE",{});var D6t=s(nve);p6r=r(D6t,"model_type"),D6t.forEach(t),u6r=r(pw,` property of the config object (either
passed as an argument or loaded from `),sve=n(pw,"CODE",{});var G6t=s(sve);_6r=r(G6t,"pretrained_model_name_or_path"),G6t.forEach(t),b6r=r(pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lve=n(pw,"CODE",{});var O6t=s(lve);v6r=r(O6t,"pretrained_model_name_or_path"),O6t.forEach(t),F6r=r(pw,":"),pw.forEach(t),T6r=i(yl),AL=n(yl,"UL",{});var Aje=s(AL);zM=n(Aje,"LI",{});var dRe=s(zM);ive=n(dRe,"STRONG",{});var V6t=s(ive);M6r=r(V6t,"bert"),V6t.forEach(t),E6r=r(dRe," \u2014 "),yH=n(dRe,"A",{href:!0});var X6t=s(yH);C6r=r(X6t,"TFBertForNextSentencePrediction"),X6t.forEach(t),w6r=r(dRe," (BERT model)"),dRe.forEach(t),A6r=i(Aje),QM=n(Aje,"LI",{});var cRe=s(QM);dve=n(cRe,"STRONG",{});var z6t=s(dve);y6r=r(z6t,"mobilebert"),z6t.forEach(t),L6r=r(cRe," \u2014 "),LH=n(cRe,"A",{href:!0});var Q6t=s(LH);x6r=r(Q6t,"TFMobileBertForNextSentencePrediction"),Q6t.forEach(t),$6r=r(cRe," (MobileBERT model)"),cRe.forEach(t),Aje.forEach(t),k6r=i(yl),T(WM.$$.fragment,yl),yl.forEach(t),Al.forEach(t),Fqe=i(f),fc=n(f,"H2",{class:!0});var yje=s(fc);HM=n(yje,"A",{id:!0,class:!0,href:!0});var W6t=s(HM);cve=n(W6t,"SPAN",{});var H6t=s(cve);T(yL.$$.fragment,H6t),H6t.forEach(t),W6t.forEach(t),S6r=i(yje),fve=n(yje,"SPAN",{});var U6t=s(fve);R6r=r(U6t,"TFAutoModelForTableQuestionAnswering"),U6t.forEach(t),yje.forEach(t),Tqe=i(f),sr=n(f,"DIV",{class:!0});var Ll=s(sr);T(LL.$$.fragment,Ll),B6r=i(Ll),mc=n(Ll,"P",{});var CZ=s(mc);P6r=r(CZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),xH=n(CZ,"A",{href:!0});var J6t=s(xH);I6r=r(J6t,"from_pretrained()"),J6t.forEach(t),q6r=r(CZ," class method or the "),$H=n(CZ,"A",{href:!0});var Y6t=s($H);N6r=r(Y6t,"from_config()"),Y6t.forEach(t),j6r=r(CZ,` class
method.`),CZ.forEach(t),D6r=i(Ll),xL=n(Ll,"P",{});var Lje=s(xL);G6r=r(Lje,"This class cannot be instantiated directly using "),mve=n(Lje,"CODE",{});var K6t=s(mve);O6r=r(K6t,"__init__()"),K6t.forEach(t),V6r=r(Lje," (throws an error)."),Lje.forEach(t),X6r=i(Ll),Bt=n(Ll,"DIV",{class:!0});var uw=s(Bt);T($L.$$.fragment,uw),z6r=i(uw),gve=n(uw,"P",{});var Z6t=s(gve);Q6r=r(Z6t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Z6t.forEach(t),W6r=i(uw),gc=n(uw,"P",{});var wZ=s(gc);H6r=r(wZ,`Note:
Loading a model from its configuration file does `),hve=n(wZ,"STRONG",{});var eTt=s(hve);U6r=r(eTt,"not"),eTt.forEach(t),J6r=r(wZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kH=n(wZ,"A",{href:!0});var oTt=s(kH);Y6r=r(oTt,"from_pretrained()"),oTt.forEach(t),K6r=r(wZ," to load the model weights."),wZ.forEach(t),Z6r=i(uw),T(UM.$$.fragment,uw),uw.forEach(t),eTr=i(Ll),Br=n(Ll,"DIV",{class:!0});var xl=s(Br);T(kL.$$.fragment,xl),oTr=i(xl),pve=n(xl,"P",{});var rTt=s(pve);rTr=r(rTt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),rTt.forEach(t),tTr=i(xl),dn=n(xl,"P",{});var _w=s(dn);aTr=r(_w,"The model class to instantiate is selected based on the "),uve=n(_w,"CODE",{});var tTt=s(uve);nTr=r(tTt,"model_type"),tTt.forEach(t),sTr=r(_w,` property of the config object (either
passed as an argument or loaded from `),_ve=n(_w,"CODE",{});var aTt=s(_ve);lTr=r(aTt,"pretrained_model_name_or_path"),aTt.forEach(t),iTr=r(_w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bve=n(_w,"CODE",{});var nTt=s(bve);dTr=r(nTt,"pretrained_model_name_or_path"),nTt.forEach(t),cTr=r(_w,":"),_w.forEach(t),fTr=i(xl),vve=n(xl,"UL",{});var sTt=s(vve);JM=n(sTt,"LI",{});var fRe=s(JM);Fve=n(fRe,"STRONG",{});var lTt=s(Fve);mTr=r(lTt,"tapas"),lTt.forEach(t),gTr=r(fRe," \u2014 "),SH=n(fRe,"A",{href:!0});var iTt=s(SH);hTr=r(iTt,"TFTapasForQuestionAnswering"),iTt.forEach(t),pTr=r(fRe," (TAPAS model)"),fRe.forEach(t),sTt.forEach(t),uTr=i(xl),T(YM.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),Mqe=i(f),hc=n(f,"H2",{class:!0});var xje=s(hc);KM=n(xje,"A",{id:!0,class:!0,href:!0});var dTt=s(KM);Tve=n(dTt,"SPAN",{});var cTt=s(Tve);T(SL.$$.fragment,cTt),cTt.forEach(t),dTt.forEach(t),_Tr=i(xje),Mve=n(xje,"SPAN",{});var fTt=s(Mve);bTr=r(fTt,"TFAutoModelForTokenClassification"),fTt.forEach(t),xje.forEach(t),Eqe=i(f),lr=n(f,"DIV",{class:!0});var $l=s(lr);T(RL.$$.fragment,$l),vTr=i($l),pc=n($l,"P",{});var AZ=s(pc);FTr=r(AZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),RH=n(AZ,"A",{href:!0});var mTt=s(RH);TTr=r(mTt,"from_pretrained()"),mTt.forEach(t),MTr=r(AZ," class method or the "),BH=n(AZ,"A",{href:!0});var gTt=s(BH);ETr=r(gTt,"from_config()"),gTt.forEach(t),CTr=r(AZ,` class
method.`),AZ.forEach(t),wTr=i($l),BL=n($l,"P",{});var $je=s(BL);ATr=r($je,"This class cannot be instantiated directly using "),Eve=n($je,"CODE",{});var hTt=s(Eve);yTr=r(hTt,"__init__()"),hTt.forEach(t),LTr=r($je," (throws an error)."),$je.forEach(t),xTr=i($l),Pt=n($l,"DIV",{class:!0});var bw=s(Pt);T(PL.$$.fragment,bw),$Tr=i(bw),Cve=n(bw,"P",{});var pTt=s(Cve);kTr=r(pTt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),pTt.forEach(t),STr=i(bw),uc=n(bw,"P",{});var yZ=s(uc);RTr=r(yZ,`Note:
Loading a model from its configuration file does `),wve=n(yZ,"STRONG",{});var uTt=s(wve);BTr=r(uTt,"not"),uTt.forEach(t),PTr=r(yZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PH=n(yZ,"A",{href:!0});var _Tt=s(PH);ITr=r(_Tt,"from_pretrained()"),_Tt.forEach(t),qTr=r(yZ," to load the model weights."),yZ.forEach(t),NTr=i(bw),T(ZM.$$.fragment,bw),bw.forEach(t),jTr=i($l),Pr=n($l,"DIV",{class:!0});var kl=s(Pr);T(IL.$$.fragment,kl),DTr=i(kl),Ave=n(kl,"P",{});var bTt=s(Ave);GTr=r(bTt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),bTt.forEach(t),OTr=i(kl),cn=n(kl,"P",{});var vw=s(cn);VTr=r(vw,"The model class to instantiate is selected based on the "),yve=n(vw,"CODE",{});var vTt=s(yve);XTr=r(vTt,"model_type"),vTt.forEach(t),zTr=r(vw,` property of the config object (either
passed as an argument or loaded from `),Lve=n(vw,"CODE",{});var FTt=s(Lve);QTr=r(FTt,"pretrained_model_name_or_path"),FTt.forEach(t),WTr=r(vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xve=n(vw,"CODE",{});var TTt=s(xve);HTr=r(TTt,"pretrained_model_name_or_path"),TTt.forEach(t),UTr=r(vw,":"),vw.forEach(t),JTr=i(kl),de=n(kl,"UL",{});var me=s(de);e4=n(me,"LI",{});var mRe=s(e4);$ve=n(mRe,"STRONG",{});var MTt=s($ve);YTr=r(MTt,"albert"),MTt.forEach(t),KTr=r(mRe," \u2014 "),IH=n(mRe,"A",{href:!0});var ETt=s(IH);ZTr=r(ETt,"TFAlbertForTokenClassification"),ETt.forEach(t),e9r=r(mRe," (ALBERT model)"),mRe.forEach(t),o9r=i(me),o4=n(me,"LI",{});var gRe=s(o4);kve=n(gRe,"STRONG",{});var CTt=s(kve);r9r=r(CTt,"bert"),CTt.forEach(t),t9r=r(gRe," \u2014 "),qH=n(gRe,"A",{href:!0});var wTt=s(qH);a9r=r(wTt,"TFBertForTokenClassification"),wTt.forEach(t),n9r=r(gRe," (BERT model)"),gRe.forEach(t),s9r=i(me),r4=n(me,"LI",{});var hRe=s(r4);Sve=n(hRe,"STRONG",{});var ATt=s(Sve);l9r=r(ATt,"camembert"),ATt.forEach(t),i9r=r(hRe," \u2014 "),NH=n(hRe,"A",{href:!0});var yTt=s(NH);d9r=r(yTt,"TFCamembertForTokenClassification"),yTt.forEach(t),c9r=r(hRe," (CamemBERT model)"),hRe.forEach(t),f9r=i(me),t4=n(me,"LI",{});var pRe=s(t4);Rve=n(pRe,"STRONG",{});var LTt=s(Rve);m9r=r(LTt,"convbert"),LTt.forEach(t),g9r=r(pRe," \u2014 "),jH=n(pRe,"A",{href:!0});var xTt=s(jH);h9r=r(xTt,"TFConvBertForTokenClassification"),xTt.forEach(t),p9r=r(pRe," (ConvBERT model)"),pRe.forEach(t),u9r=i(me),a4=n(me,"LI",{});var uRe=s(a4);Bve=n(uRe,"STRONG",{});var $Tt=s(Bve);_9r=r($Tt,"deberta"),$Tt.forEach(t),b9r=r(uRe," \u2014 "),DH=n(uRe,"A",{href:!0});var kTt=s(DH);v9r=r(kTt,"TFDebertaForTokenClassification"),kTt.forEach(t),F9r=r(uRe," (DeBERTa model)"),uRe.forEach(t),T9r=i(me),n4=n(me,"LI",{});var _Re=s(n4);Pve=n(_Re,"STRONG",{});var STt=s(Pve);M9r=r(STt,"deberta-v2"),STt.forEach(t),E9r=r(_Re," \u2014 "),GH=n(_Re,"A",{href:!0});var RTt=s(GH);C9r=r(RTt,"TFDebertaV2ForTokenClassification"),RTt.forEach(t),w9r=r(_Re," (DeBERTa-v2 model)"),_Re.forEach(t),A9r=i(me),s4=n(me,"LI",{});var bRe=s(s4);Ive=n(bRe,"STRONG",{});var BTt=s(Ive);y9r=r(BTt,"distilbert"),BTt.forEach(t),L9r=r(bRe," \u2014 "),OH=n(bRe,"A",{href:!0});var PTt=s(OH);x9r=r(PTt,"TFDistilBertForTokenClassification"),PTt.forEach(t),$9r=r(bRe," (DistilBERT model)"),bRe.forEach(t),k9r=i(me),l4=n(me,"LI",{});var vRe=s(l4);qve=n(vRe,"STRONG",{});var ITt=s(qve);S9r=r(ITt,"electra"),ITt.forEach(t),R9r=r(vRe," \u2014 "),VH=n(vRe,"A",{href:!0});var qTt=s(VH);B9r=r(qTt,"TFElectraForTokenClassification"),qTt.forEach(t),P9r=r(vRe," (ELECTRA model)"),vRe.forEach(t),I9r=i(me),i4=n(me,"LI",{});var FRe=s(i4);Nve=n(FRe,"STRONG",{});var NTt=s(Nve);q9r=r(NTt,"flaubert"),NTt.forEach(t),N9r=r(FRe," \u2014 "),XH=n(FRe,"A",{href:!0});var jTt=s(XH);j9r=r(jTt,"TFFlaubertForTokenClassification"),jTt.forEach(t),D9r=r(FRe," (FlauBERT model)"),FRe.forEach(t),G9r=i(me),d4=n(me,"LI",{});var TRe=s(d4);jve=n(TRe,"STRONG",{});var DTt=s(jve);O9r=r(DTt,"funnel"),DTt.forEach(t),V9r=r(TRe," \u2014 "),zH=n(TRe,"A",{href:!0});var GTt=s(zH);X9r=r(GTt,"TFFunnelForTokenClassification"),GTt.forEach(t),z9r=r(TRe," (Funnel Transformer model)"),TRe.forEach(t),Q9r=i(me),c4=n(me,"LI",{});var MRe=s(c4);Dve=n(MRe,"STRONG",{});var OTt=s(Dve);W9r=r(OTt,"layoutlm"),OTt.forEach(t),H9r=r(MRe," \u2014 "),QH=n(MRe,"A",{href:!0});var VTt=s(QH);U9r=r(VTt,"TFLayoutLMForTokenClassification"),VTt.forEach(t),J9r=r(MRe," (LayoutLM model)"),MRe.forEach(t),Y9r=i(me),f4=n(me,"LI",{});var ERe=s(f4);Gve=n(ERe,"STRONG",{});var XTt=s(Gve);K9r=r(XTt,"longformer"),XTt.forEach(t),Z9r=r(ERe," \u2014 "),WH=n(ERe,"A",{href:!0});var zTt=s(WH);eMr=r(zTt,"TFLongformerForTokenClassification"),zTt.forEach(t),oMr=r(ERe," (Longformer model)"),ERe.forEach(t),rMr=i(me),m4=n(me,"LI",{});var CRe=s(m4);Ove=n(CRe,"STRONG",{});var QTt=s(Ove);tMr=r(QTt,"mobilebert"),QTt.forEach(t),aMr=r(CRe," \u2014 "),HH=n(CRe,"A",{href:!0});var WTt=s(HH);nMr=r(WTt,"TFMobileBertForTokenClassification"),WTt.forEach(t),sMr=r(CRe," (MobileBERT model)"),CRe.forEach(t),lMr=i(me),g4=n(me,"LI",{});var wRe=s(g4);Vve=n(wRe,"STRONG",{});var HTt=s(Vve);iMr=r(HTt,"mpnet"),HTt.forEach(t),dMr=r(wRe," \u2014 "),UH=n(wRe,"A",{href:!0});var UTt=s(UH);cMr=r(UTt,"TFMPNetForTokenClassification"),UTt.forEach(t),fMr=r(wRe," (MPNet model)"),wRe.forEach(t),mMr=i(me),h4=n(me,"LI",{});var ARe=s(h4);Xve=n(ARe,"STRONG",{});var JTt=s(Xve);gMr=r(JTt,"rembert"),JTt.forEach(t),hMr=r(ARe," \u2014 "),JH=n(ARe,"A",{href:!0});var YTt=s(JH);pMr=r(YTt,"TFRemBertForTokenClassification"),YTt.forEach(t),uMr=r(ARe," (RemBERT model)"),ARe.forEach(t),_Mr=i(me),p4=n(me,"LI",{});var yRe=s(p4);zve=n(yRe,"STRONG",{});var KTt=s(zve);bMr=r(KTt,"roberta"),KTt.forEach(t),vMr=r(yRe," \u2014 "),YH=n(yRe,"A",{href:!0});var ZTt=s(YH);FMr=r(ZTt,"TFRobertaForTokenClassification"),ZTt.forEach(t),TMr=r(yRe," (RoBERTa model)"),yRe.forEach(t),MMr=i(me),u4=n(me,"LI",{});var LRe=s(u4);Qve=n(LRe,"STRONG",{});var e9t=s(Qve);EMr=r(e9t,"roformer"),e9t.forEach(t),CMr=r(LRe," \u2014 "),KH=n(LRe,"A",{href:!0});var o9t=s(KH);wMr=r(o9t,"TFRoFormerForTokenClassification"),o9t.forEach(t),AMr=r(LRe," (RoFormer model)"),LRe.forEach(t),yMr=i(me),_4=n(me,"LI",{});var xRe=s(_4);Wve=n(xRe,"STRONG",{});var r9t=s(Wve);LMr=r(r9t,"xlm"),r9t.forEach(t),xMr=r(xRe," \u2014 "),ZH=n(xRe,"A",{href:!0});var t9t=s(ZH);$Mr=r(t9t,"TFXLMForTokenClassification"),t9t.forEach(t),kMr=r(xRe," (XLM model)"),xRe.forEach(t),SMr=i(me),b4=n(me,"LI",{});var $Re=s(b4);Hve=n($Re,"STRONG",{});var a9t=s(Hve);RMr=r(a9t,"xlm-roberta"),a9t.forEach(t),BMr=r($Re," \u2014 "),eU=n($Re,"A",{href:!0});var n9t=s(eU);PMr=r(n9t,"TFXLMRobertaForTokenClassification"),n9t.forEach(t),IMr=r($Re," (XLM-RoBERTa model)"),$Re.forEach(t),qMr=i(me),v4=n(me,"LI",{});var kRe=s(v4);Uve=n(kRe,"STRONG",{});var s9t=s(Uve);NMr=r(s9t,"xlnet"),s9t.forEach(t),jMr=r(kRe," \u2014 "),oU=n(kRe,"A",{href:!0});var l9t=s(oU);DMr=r(l9t,"TFXLNetForTokenClassification"),l9t.forEach(t),GMr=r(kRe," (XLNet model)"),kRe.forEach(t),me.forEach(t),OMr=i(kl),T(F4.$$.fragment,kl),kl.forEach(t),$l.forEach(t),Cqe=i(f),_c=n(f,"H2",{class:!0});var kje=s(_c);T4=n(kje,"A",{id:!0,class:!0,href:!0});var i9t=s(T4);Jve=n(i9t,"SPAN",{});var d9t=s(Jve);T(qL.$$.fragment,d9t),d9t.forEach(t),i9t.forEach(t),VMr=i(kje),Yve=n(kje,"SPAN",{});var c9t=s(Yve);XMr=r(c9t,"TFAutoModelForQuestionAnswering"),c9t.forEach(t),kje.forEach(t),wqe=i(f),ir=n(f,"DIV",{class:!0});var Sl=s(ir);T(NL.$$.fragment,Sl),zMr=i(Sl),bc=n(Sl,"P",{});var LZ=s(bc);QMr=r(LZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),rU=n(LZ,"A",{href:!0});var f9t=s(rU);WMr=r(f9t,"from_pretrained()"),f9t.forEach(t),HMr=r(LZ," class method or the "),tU=n(LZ,"A",{href:!0});var m9t=s(tU);UMr=r(m9t,"from_config()"),m9t.forEach(t),JMr=r(LZ,` class
method.`),LZ.forEach(t),YMr=i(Sl),jL=n(Sl,"P",{});var Sje=s(jL);KMr=r(Sje,"This class cannot be instantiated directly using "),Kve=n(Sje,"CODE",{});var g9t=s(Kve);ZMr=r(g9t,"__init__()"),g9t.forEach(t),e4r=r(Sje," (throws an error)."),Sje.forEach(t),o4r=i(Sl),It=n(Sl,"DIV",{class:!0});var Fw=s(It);T(DL.$$.fragment,Fw),r4r=i(Fw),Zve=n(Fw,"P",{});var h9t=s(Zve);t4r=r(h9t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),h9t.forEach(t),a4r=i(Fw),vc=n(Fw,"P",{});var xZ=s(vc);n4r=r(xZ,`Note:
Loading a model from its configuration file does `),eFe=n(xZ,"STRONG",{});var p9t=s(eFe);s4r=r(p9t,"not"),p9t.forEach(t),l4r=r(xZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aU=n(xZ,"A",{href:!0});var u9t=s(aU);i4r=r(u9t,"from_pretrained()"),u9t.forEach(t),d4r=r(xZ," to load the model weights."),xZ.forEach(t),c4r=i(Fw),T(M4.$$.fragment,Fw),Fw.forEach(t),f4r=i(Sl),Ir=n(Sl,"DIV",{class:!0});var Rl=s(Ir);T(GL.$$.fragment,Rl),m4r=i(Rl),oFe=n(Rl,"P",{});var _9t=s(oFe);g4r=r(_9t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_9t.forEach(t),h4r=i(Rl),fn=n(Rl,"P",{});var Tw=s(fn);p4r=r(Tw,"The model class to instantiate is selected based on the "),rFe=n(Tw,"CODE",{});var b9t=s(rFe);u4r=r(b9t,"model_type"),b9t.forEach(t),_4r=r(Tw,` property of the config object (either
passed as an argument or loaded from `),tFe=n(Tw,"CODE",{});var v9t=s(tFe);b4r=r(v9t,"pretrained_model_name_or_path"),v9t.forEach(t),v4r=r(Tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aFe=n(Tw,"CODE",{});var F9t=s(aFe);F4r=r(F9t,"pretrained_model_name_or_path"),F9t.forEach(t),T4r=r(Tw,":"),Tw.forEach(t),M4r=i(Rl),ce=n(Rl,"UL",{});var ge=s(ce);E4=n(ge,"LI",{});var SRe=s(E4);nFe=n(SRe,"STRONG",{});var T9t=s(nFe);E4r=r(T9t,"albert"),T9t.forEach(t),C4r=r(SRe," \u2014 "),nU=n(SRe,"A",{href:!0});var M9t=s(nU);w4r=r(M9t,"TFAlbertForQuestionAnswering"),M9t.forEach(t),A4r=r(SRe," (ALBERT model)"),SRe.forEach(t),y4r=i(ge),C4=n(ge,"LI",{});var RRe=s(C4);sFe=n(RRe,"STRONG",{});var E9t=s(sFe);L4r=r(E9t,"bert"),E9t.forEach(t),x4r=r(RRe," \u2014 "),sU=n(RRe,"A",{href:!0});var C9t=s(sU);$4r=r(C9t,"TFBertForQuestionAnswering"),C9t.forEach(t),k4r=r(RRe," (BERT model)"),RRe.forEach(t),S4r=i(ge),w4=n(ge,"LI",{});var BRe=s(w4);lFe=n(BRe,"STRONG",{});var w9t=s(lFe);R4r=r(w9t,"camembert"),w9t.forEach(t),B4r=r(BRe," \u2014 "),lU=n(BRe,"A",{href:!0});var A9t=s(lU);P4r=r(A9t,"TFCamembertForQuestionAnswering"),A9t.forEach(t),I4r=r(BRe," (CamemBERT model)"),BRe.forEach(t),q4r=i(ge),A4=n(ge,"LI",{});var PRe=s(A4);iFe=n(PRe,"STRONG",{});var y9t=s(iFe);N4r=r(y9t,"convbert"),y9t.forEach(t),j4r=r(PRe," \u2014 "),iU=n(PRe,"A",{href:!0});var L9t=s(iU);D4r=r(L9t,"TFConvBertForQuestionAnswering"),L9t.forEach(t),G4r=r(PRe," (ConvBERT model)"),PRe.forEach(t),O4r=i(ge),y4=n(ge,"LI",{});var IRe=s(y4);dFe=n(IRe,"STRONG",{});var x9t=s(dFe);V4r=r(x9t,"deberta"),x9t.forEach(t),X4r=r(IRe," \u2014 "),dU=n(IRe,"A",{href:!0});var $9t=s(dU);z4r=r($9t,"TFDebertaForQuestionAnswering"),$9t.forEach(t),Q4r=r(IRe," (DeBERTa model)"),IRe.forEach(t),W4r=i(ge),L4=n(ge,"LI",{});var qRe=s(L4);cFe=n(qRe,"STRONG",{});var k9t=s(cFe);H4r=r(k9t,"deberta-v2"),k9t.forEach(t),U4r=r(qRe," \u2014 "),cU=n(qRe,"A",{href:!0});var S9t=s(cU);J4r=r(S9t,"TFDebertaV2ForQuestionAnswering"),S9t.forEach(t),Y4r=r(qRe," (DeBERTa-v2 model)"),qRe.forEach(t),K4r=i(ge),x4=n(ge,"LI",{});var NRe=s(x4);fFe=n(NRe,"STRONG",{});var R9t=s(fFe);Z4r=r(R9t,"distilbert"),R9t.forEach(t),eEr=r(NRe," \u2014 "),fU=n(NRe,"A",{href:!0});var B9t=s(fU);oEr=r(B9t,"TFDistilBertForQuestionAnswering"),B9t.forEach(t),rEr=r(NRe," (DistilBERT model)"),NRe.forEach(t),tEr=i(ge),$4=n(ge,"LI",{});var jRe=s($4);mFe=n(jRe,"STRONG",{});var P9t=s(mFe);aEr=r(P9t,"electra"),P9t.forEach(t),nEr=r(jRe," \u2014 "),mU=n(jRe,"A",{href:!0});var I9t=s(mU);sEr=r(I9t,"TFElectraForQuestionAnswering"),I9t.forEach(t),lEr=r(jRe," (ELECTRA model)"),jRe.forEach(t),iEr=i(ge),k4=n(ge,"LI",{});var DRe=s(k4);gFe=n(DRe,"STRONG",{});var q9t=s(gFe);dEr=r(q9t,"flaubert"),q9t.forEach(t),cEr=r(DRe," \u2014 "),gU=n(DRe,"A",{href:!0});var N9t=s(gU);fEr=r(N9t,"TFFlaubertForQuestionAnsweringSimple"),N9t.forEach(t),mEr=r(DRe," (FlauBERT model)"),DRe.forEach(t),gEr=i(ge),S4=n(ge,"LI",{});var GRe=s(S4);hFe=n(GRe,"STRONG",{});var j9t=s(hFe);hEr=r(j9t,"funnel"),j9t.forEach(t),pEr=r(GRe," \u2014 "),hU=n(GRe,"A",{href:!0});var D9t=s(hU);uEr=r(D9t,"TFFunnelForQuestionAnswering"),D9t.forEach(t),_Er=r(GRe," (Funnel Transformer model)"),GRe.forEach(t),bEr=i(ge),R4=n(ge,"LI",{});var ORe=s(R4);pFe=n(ORe,"STRONG",{});var G9t=s(pFe);vEr=r(G9t,"gptj"),G9t.forEach(t),FEr=r(ORe," \u2014 "),pU=n(ORe,"A",{href:!0});var O9t=s(pU);TEr=r(O9t,"TFGPTJForQuestionAnswering"),O9t.forEach(t),MEr=r(ORe," (GPT-J model)"),ORe.forEach(t),EEr=i(ge),B4=n(ge,"LI",{});var VRe=s(B4);uFe=n(VRe,"STRONG",{});var V9t=s(uFe);CEr=r(V9t,"longformer"),V9t.forEach(t),wEr=r(VRe," \u2014 "),uU=n(VRe,"A",{href:!0});var X9t=s(uU);AEr=r(X9t,"TFLongformerForQuestionAnswering"),X9t.forEach(t),yEr=r(VRe," (Longformer model)"),VRe.forEach(t),LEr=i(ge),P4=n(ge,"LI",{});var XRe=s(P4);_Fe=n(XRe,"STRONG",{});var z9t=s(_Fe);xEr=r(z9t,"mobilebert"),z9t.forEach(t),$Er=r(XRe," \u2014 "),_U=n(XRe,"A",{href:!0});var Q9t=s(_U);kEr=r(Q9t,"TFMobileBertForQuestionAnswering"),Q9t.forEach(t),SEr=r(XRe," (MobileBERT model)"),XRe.forEach(t),REr=i(ge),I4=n(ge,"LI",{});var zRe=s(I4);bFe=n(zRe,"STRONG",{});var W9t=s(bFe);BEr=r(W9t,"mpnet"),W9t.forEach(t),PEr=r(zRe," \u2014 "),bU=n(zRe,"A",{href:!0});var H9t=s(bU);IEr=r(H9t,"TFMPNetForQuestionAnswering"),H9t.forEach(t),qEr=r(zRe," (MPNet model)"),zRe.forEach(t),NEr=i(ge),q4=n(ge,"LI",{});var QRe=s(q4);vFe=n(QRe,"STRONG",{});var U9t=s(vFe);jEr=r(U9t,"rembert"),U9t.forEach(t),DEr=r(QRe," \u2014 "),vU=n(QRe,"A",{href:!0});var J9t=s(vU);GEr=r(J9t,"TFRemBertForQuestionAnswering"),J9t.forEach(t),OEr=r(QRe," (RemBERT model)"),QRe.forEach(t),VEr=i(ge),N4=n(ge,"LI",{});var WRe=s(N4);FFe=n(WRe,"STRONG",{});var Y9t=s(FFe);XEr=r(Y9t,"roberta"),Y9t.forEach(t),zEr=r(WRe," \u2014 "),FU=n(WRe,"A",{href:!0});var K9t=s(FU);QEr=r(K9t,"TFRobertaForQuestionAnswering"),K9t.forEach(t),WEr=r(WRe," (RoBERTa model)"),WRe.forEach(t),HEr=i(ge),j4=n(ge,"LI",{});var HRe=s(j4);TFe=n(HRe,"STRONG",{});var Z9t=s(TFe);UEr=r(Z9t,"roformer"),Z9t.forEach(t),JEr=r(HRe," \u2014 "),TU=n(HRe,"A",{href:!0});var eMt=s(TU);YEr=r(eMt,"TFRoFormerForQuestionAnswering"),eMt.forEach(t),KEr=r(HRe," (RoFormer model)"),HRe.forEach(t),ZEr=i(ge),D4=n(ge,"LI",{});var URe=s(D4);MFe=n(URe,"STRONG",{});var oMt=s(MFe);e5r=r(oMt,"xlm"),oMt.forEach(t),o5r=r(URe," \u2014 "),MU=n(URe,"A",{href:!0});var rMt=s(MU);r5r=r(rMt,"TFXLMForQuestionAnsweringSimple"),rMt.forEach(t),t5r=r(URe," (XLM model)"),URe.forEach(t),a5r=i(ge),G4=n(ge,"LI",{});var JRe=s(G4);EFe=n(JRe,"STRONG",{});var tMt=s(EFe);n5r=r(tMt,"xlm-roberta"),tMt.forEach(t),s5r=r(JRe," \u2014 "),EU=n(JRe,"A",{href:!0});var aMt=s(EU);l5r=r(aMt,"TFXLMRobertaForQuestionAnswering"),aMt.forEach(t),i5r=r(JRe," (XLM-RoBERTa model)"),JRe.forEach(t),d5r=i(ge),O4=n(ge,"LI",{});var YRe=s(O4);CFe=n(YRe,"STRONG",{});var nMt=s(CFe);c5r=r(nMt,"xlnet"),nMt.forEach(t),f5r=r(YRe," \u2014 "),CU=n(YRe,"A",{href:!0});var sMt=s(CU);m5r=r(sMt,"TFXLNetForQuestionAnsweringSimple"),sMt.forEach(t),g5r=r(YRe," (XLNet model)"),YRe.forEach(t),ge.forEach(t),h5r=i(Rl),T(V4.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),Aqe=i(f),Fc=n(f,"H2",{class:!0});var Rje=s(Fc);X4=n(Rje,"A",{id:!0,class:!0,href:!0});var lMt=s(X4);wFe=n(lMt,"SPAN",{});var iMt=s(wFe);T(OL.$$.fragment,iMt),iMt.forEach(t),lMt.forEach(t),p5r=i(Rje),AFe=n(Rje,"SPAN",{});var dMt=s(AFe);u5r=r(dMt,"TFAutoModelForVision2Seq"),dMt.forEach(t),Rje.forEach(t),yqe=i(f),dr=n(f,"DIV",{class:!0});var Bl=s(dr);T(VL.$$.fragment,Bl),_5r=i(Bl),Tc=n(Bl,"P",{});var $Z=s(Tc);b5r=r($Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),wU=n($Z,"A",{href:!0});var cMt=s(wU);v5r=r(cMt,"from_pretrained()"),cMt.forEach(t),F5r=r($Z," class method or the "),AU=n($Z,"A",{href:!0});var fMt=s(AU);T5r=r(fMt,"from_config()"),fMt.forEach(t),M5r=r($Z,` class
method.`),$Z.forEach(t),E5r=i(Bl),XL=n(Bl,"P",{});var Bje=s(XL);C5r=r(Bje,"This class cannot be instantiated directly using "),yFe=n(Bje,"CODE",{});var mMt=s(yFe);w5r=r(mMt,"__init__()"),mMt.forEach(t),A5r=r(Bje," (throws an error)."),Bje.forEach(t),y5r=i(Bl),qt=n(Bl,"DIV",{class:!0});var Mw=s(qt);T(zL.$$.fragment,Mw),L5r=i(Mw),LFe=n(Mw,"P",{});var gMt=s(LFe);x5r=r(gMt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),gMt.forEach(t),$5r=i(Mw),Mc=n(Mw,"P",{});var kZ=s(Mc);k5r=r(kZ,`Note:
Loading a model from its configuration file does `),xFe=n(kZ,"STRONG",{});var hMt=s(xFe);S5r=r(hMt,"not"),hMt.forEach(t),R5r=r(kZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yU=n(kZ,"A",{href:!0});var pMt=s(yU);B5r=r(pMt,"from_pretrained()"),pMt.forEach(t),P5r=r(kZ," to load the model weights."),kZ.forEach(t),I5r=i(Mw),T(z4.$$.fragment,Mw),Mw.forEach(t),q5r=i(Bl),qr=n(Bl,"DIV",{class:!0});var Pl=s(qr);T(QL.$$.fragment,Pl),N5r=i(Pl),$Fe=n(Pl,"P",{});var uMt=s($Fe);j5r=r(uMt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),uMt.forEach(t),D5r=i(Pl),mn=n(Pl,"P",{});var Ew=s(mn);G5r=r(Ew,"The model class to instantiate is selected based on the "),kFe=n(Ew,"CODE",{});var _Mt=s(kFe);O5r=r(_Mt,"model_type"),_Mt.forEach(t),V5r=r(Ew,` property of the config object (either
passed as an argument or loaded from `),SFe=n(Ew,"CODE",{});var bMt=s(SFe);X5r=r(bMt,"pretrained_model_name_or_path"),bMt.forEach(t),z5r=r(Ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RFe=n(Ew,"CODE",{});var vMt=s(RFe);Q5r=r(vMt,"pretrained_model_name_or_path"),vMt.forEach(t),W5r=r(Ew,":"),Ew.forEach(t),H5r=i(Pl),BFe=n(Pl,"UL",{});var FMt=s(BFe);Q4=n(FMt,"LI",{});var KRe=s(Q4);PFe=n(KRe,"STRONG",{});var TMt=s(PFe);U5r=r(TMt,"vision-encoder-decoder"),TMt.forEach(t),J5r=r(KRe," \u2014 "),LU=n(KRe,"A",{href:!0});var MMt=s(LU);Y5r=r(MMt,"TFVisionEncoderDecoderModel"),MMt.forEach(t),K5r=r(KRe," (Vision Encoder decoder model)"),KRe.forEach(t),FMt.forEach(t),Z5r=i(Pl),T(W4.$$.fragment,Pl),Pl.forEach(t),Bl.forEach(t),Lqe=i(f),Ec=n(f,"H2",{class:!0});var Pje=s(Ec);H4=n(Pje,"A",{id:!0,class:!0,href:!0});var EMt=s(H4);IFe=n(EMt,"SPAN",{});var CMt=s(IFe);T(WL.$$.fragment,CMt),CMt.forEach(t),EMt.forEach(t),eCr=i(Pje),qFe=n(Pje,"SPAN",{});var wMt=s(qFe);oCr=r(wMt,"TFAutoModelForSpeechSeq2Seq"),wMt.forEach(t),Pje.forEach(t),xqe=i(f),cr=n(f,"DIV",{class:!0});var Il=s(cr);T(HL.$$.fragment,Il),rCr=i(Il),Cc=n(Il,"P",{});var SZ=s(Cc);tCr=r(SZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),xU=n(SZ,"A",{href:!0});var AMt=s(xU);aCr=r(AMt,"from_pretrained()"),AMt.forEach(t),nCr=r(SZ," class method or the "),$U=n(SZ,"A",{href:!0});var yMt=s($U);sCr=r(yMt,"from_config()"),yMt.forEach(t),lCr=r(SZ,` class
method.`),SZ.forEach(t),iCr=i(Il),UL=n(Il,"P",{});var Ije=s(UL);dCr=r(Ije,"This class cannot be instantiated directly using "),NFe=n(Ije,"CODE",{});var LMt=s(NFe);cCr=r(LMt,"__init__()"),LMt.forEach(t),fCr=r(Ije," (throws an error)."),Ije.forEach(t),mCr=i(Il),Nt=n(Il,"DIV",{class:!0});var Cw=s(Nt);T(JL.$$.fragment,Cw),gCr=i(Cw),jFe=n(Cw,"P",{});var xMt=s(jFe);hCr=r(xMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),xMt.forEach(t),pCr=i(Cw),wc=n(Cw,"P",{});var RZ=s(wc);uCr=r(RZ,`Note:
Loading a model from its configuration file does `),DFe=n(RZ,"STRONG",{});var $Mt=s(DFe);_Cr=r($Mt,"not"),$Mt.forEach(t),bCr=r(RZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kU=n(RZ,"A",{href:!0});var kMt=s(kU);vCr=r(kMt,"from_pretrained()"),kMt.forEach(t),FCr=r(RZ," to load the model weights."),RZ.forEach(t),TCr=i(Cw),T(U4.$$.fragment,Cw),Cw.forEach(t),MCr=i(Il),Nr=n(Il,"DIV",{class:!0});var ql=s(Nr);T(YL.$$.fragment,ql),ECr=i(ql),GFe=n(ql,"P",{});var SMt=s(GFe);CCr=r(SMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),SMt.forEach(t),wCr=i(ql),gn=n(ql,"P",{});var ww=s(gn);ACr=r(ww,"The model class to instantiate is selected based on the "),OFe=n(ww,"CODE",{});var RMt=s(OFe);yCr=r(RMt,"model_type"),RMt.forEach(t),LCr=r(ww,` property of the config object (either
passed as an argument or loaded from `),VFe=n(ww,"CODE",{});var BMt=s(VFe);xCr=r(BMt,"pretrained_model_name_or_path"),BMt.forEach(t),$Cr=r(ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XFe=n(ww,"CODE",{});var PMt=s(XFe);kCr=r(PMt,"pretrained_model_name_or_path"),PMt.forEach(t),SCr=r(ww,":"),ww.forEach(t),RCr=i(ql),zFe=n(ql,"UL",{});var IMt=s(zFe);J4=n(IMt,"LI",{});var ZRe=s(J4);QFe=n(ZRe,"STRONG",{});var qMt=s(QFe);BCr=r(qMt,"speech_to_text"),qMt.forEach(t),PCr=r(ZRe," \u2014 "),SU=n(ZRe,"A",{href:!0});var NMt=s(SU);ICr=r(NMt,"TFSpeech2TextForConditionalGeneration"),NMt.forEach(t),qCr=r(ZRe," (Speech2Text model)"),ZRe.forEach(t),IMt.forEach(t),NCr=i(ql),T(Y4.$$.fragment,ql),ql.forEach(t),Il.forEach(t),$qe=i(f),Ac=n(f,"H2",{class:!0});var qje=s(Ac);K4=n(qje,"A",{id:!0,class:!0,href:!0});var jMt=s(K4);WFe=n(jMt,"SPAN",{});var DMt=s(WFe);T(KL.$$.fragment,DMt),DMt.forEach(t),jMt.forEach(t),jCr=i(qje),HFe=n(qje,"SPAN",{});var GMt=s(HFe);DCr=r(GMt,"FlaxAutoModel"),GMt.forEach(t),qje.forEach(t),kqe=i(f),fr=n(f,"DIV",{class:!0});var Nl=s(fr);T(ZL.$$.fragment,Nl),GCr=i(Nl),yc=n(Nl,"P",{});var BZ=s(yc);OCr=r(BZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),RU=n(BZ,"A",{href:!0});var OMt=s(RU);VCr=r(OMt,"from_pretrained()"),OMt.forEach(t),XCr=r(BZ," class method or the "),BU=n(BZ,"A",{href:!0});var VMt=s(BU);zCr=r(VMt,"from_config()"),VMt.forEach(t),QCr=r(BZ,` class
method.`),BZ.forEach(t),WCr=i(Nl),ex=n(Nl,"P",{});var Nje=s(ex);HCr=r(Nje,"This class cannot be instantiated directly using "),UFe=n(Nje,"CODE",{});var XMt=s(UFe);UCr=r(XMt,"__init__()"),XMt.forEach(t),JCr=r(Nje," (throws an error)."),Nje.forEach(t),YCr=i(Nl),jt=n(Nl,"DIV",{class:!0});var Aw=s(jt);T(ox.$$.fragment,Aw),KCr=i(Aw),JFe=n(Aw,"P",{});var zMt=s(JFe);ZCr=r(zMt,"Instantiates one of the base model classes of the library from a configuration."),zMt.forEach(t),e3r=i(Aw),Lc=n(Aw,"P",{});var PZ=s(Lc);o3r=r(PZ,`Note:
Loading a model from its configuration file does `),YFe=n(PZ,"STRONG",{});var QMt=s(YFe);r3r=r(QMt,"not"),QMt.forEach(t),t3r=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PU=n(PZ,"A",{href:!0});var WMt=s(PU);a3r=r(WMt,"from_pretrained()"),WMt.forEach(t),n3r=r(PZ," to load the model weights."),PZ.forEach(t),s3r=i(Aw),T(Z4.$$.fragment,Aw),Aw.forEach(t),l3r=i(Nl),jr=n(Nl,"DIV",{class:!0});var jl=s(jr);T(rx.$$.fragment,jl),i3r=i(jl),KFe=n(jl,"P",{});var HMt=s(KFe);d3r=r(HMt,"Instantiate one of the base model classes of the library from a pretrained model."),HMt.forEach(t),c3r=i(jl),hn=n(jl,"P",{});var yw=s(hn);f3r=r(yw,"The model class to instantiate is selected based on the "),ZFe=n(yw,"CODE",{});var UMt=s(ZFe);m3r=r(UMt,"model_type"),UMt.forEach(t),g3r=r(yw,` property of the config object (either
passed as an argument or loaded from `),e6e=n(yw,"CODE",{});var JMt=s(e6e);h3r=r(JMt,"pretrained_model_name_or_path"),JMt.forEach(t),p3r=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o6e=n(yw,"CODE",{});var YMt=s(o6e);u3r=r(YMt,"pretrained_model_name_or_path"),YMt.forEach(t),_3r=r(yw,":"),yw.forEach(t),b3r=i(jl),re=n(jl,"UL",{});var ne=s(re);eE=n(ne,"LI",{});var eBe=s(eE);r6e=n(eBe,"STRONG",{});var KMt=s(r6e);v3r=r(KMt,"albert"),KMt.forEach(t),F3r=r(eBe," \u2014 "),IU=n(eBe,"A",{href:!0});var ZMt=s(IU);T3r=r(ZMt,"FlaxAlbertModel"),ZMt.forEach(t),M3r=r(eBe," (ALBERT model)"),eBe.forEach(t),E3r=i(ne),oE=n(ne,"LI",{});var oBe=s(oE);t6e=n(oBe,"STRONG",{});var e4t=s(t6e);C3r=r(e4t,"bart"),e4t.forEach(t),w3r=r(oBe," \u2014 "),qU=n(oBe,"A",{href:!0});var o4t=s(qU);A3r=r(o4t,"FlaxBartModel"),o4t.forEach(t),y3r=r(oBe," (BART model)"),oBe.forEach(t),L3r=i(ne),rE=n(ne,"LI",{});var rBe=s(rE);a6e=n(rBe,"STRONG",{});var r4t=s(a6e);x3r=r(r4t,"beit"),r4t.forEach(t),$3r=r(rBe," \u2014 "),NU=n(rBe,"A",{href:!0});var t4t=s(NU);k3r=r(t4t,"FlaxBeitModel"),t4t.forEach(t),S3r=r(rBe," (BEiT model)"),rBe.forEach(t),R3r=i(ne),tE=n(ne,"LI",{});var tBe=s(tE);n6e=n(tBe,"STRONG",{});var a4t=s(n6e);B3r=r(a4t,"bert"),a4t.forEach(t),P3r=r(tBe," \u2014 "),jU=n(tBe,"A",{href:!0});var n4t=s(jU);I3r=r(n4t,"FlaxBertModel"),n4t.forEach(t),q3r=r(tBe," (BERT model)"),tBe.forEach(t),N3r=i(ne),aE=n(ne,"LI",{});var aBe=s(aE);s6e=n(aBe,"STRONG",{});var s4t=s(s6e);j3r=r(s4t,"big_bird"),s4t.forEach(t),D3r=r(aBe," \u2014 "),DU=n(aBe,"A",{href:!0});var l4t=s(DU);G3r=r(l4t,"FlaxBigBirdModel"),l4t.forEach(t),O3r=r(aBe," (BigBird model)"),aBe.forEach(t),V3r=i(ne),nE=n(ne,"LI",{});var nBe=s(nE);l6e=n(nBe,"STRONG",{});var i4t=s(l6e);X3r=r(i4t,"blenderbot"),i4t.forEach(t),z3r=r(nBe," \u2014 "),GU=n(nBe,"A",{href:!0});var d4t=s(GU);Q3r=r(d4t,"FlaxBlenderbotModel"),d4t.forEach(t),W3r=r(nBe," (Blenderbot model)"),nBe.forEach(t),H3r=i(ne),sE=n(ne,"LI",{});var sBe=s(sE);i6e=n(sBe,"STRONG",{});var c4t=s(i6e);U3r=r(c4t,"blenderbot-small"),c4t.forEach(t),J3r=r(sBe," \u2014 "),OU=n(sBe,"A",{href:!0});var f4t=s(OU);Y3r=r(f4t,"FlaxBlenderbotSmallModel"),f4t.forEach(t),K3r=r(sBe," (BlenderbotSmall model)"),sBe.forEach(t),Z3r=i(ne),lE=n(ne,"LI",{});var lBe=s(lE);d6e=n(lBe,"STRONG",{});var m4t=s(d6e);ewr=r(m4t,"clip"),m4t.forEach(t),owr=r(lBe," \u2014 "),VU=n(lBe,"A",{href:!0});var g4t=s(VU);rwr=r(g4t,"FlaxCLIPModel"),g4t.forEach(t),twr=r(lBe," (CLIP model)"),lBe.forEach(t),awr=i(ne),iE=n(ne,"LI",{});var iBe=s(iE);c6e=n(iBe,"STRONG",{});var h4t=s(c6e);nwr=r(h4t,"distilbert"),h4t.forEach(t),swr=r(iBe," \u2014 "),XU=n(iBe,"A",{href:!0});var p4t=s(XU);lwr=r(p4t,"FlaxDistilBertModel"),p4t.forEach(t),iwr=r(iBe," (DistilBERT model)"),iBe.forEach(t),dwr=i(ne),dE=n(ne,"LI",{});var dBe=s(dE);f6e=n(dBe,"STRONG",{});var u4t=s(f6e);cwr=r(u4t,"electra"),u4t.forEach(t),fwr=r(dBe," \u2014 "),zU=n(dBe,"A",{href:!0});var _4t=s(zU);mwr=r(_4t,"FlaxElectraModel"),_4t.forEach(t),gwr=r(dBe," (ELECTRA model)"),dBe.forEach(t),hwr=i(ne),cE=n(ne,"LI",{});var cBe=s(cE);m6e=n(cBe,"STRONG",{});var b4t=s(m6e);pwr=r(b4t,"gpt2"),b4t.forEach(t),uwr=r(cBe," \u2014 "),QU=n(cBe,"A",{href:!0});var v4t=s(QU);_wr=r(v4t,"FlaxGPT2Model"),v4t.forEach(t),bwr=r(cBe," (OpenAI GPT-2 model)"),cBe.forEach(t),vwr=i(ne),fE=n(ne,"LI",{});var fBe=s(fE);g6e=n(fBe,"STRONG",{});var F4t=s(g6e);Fwr=r(F4t,"gpt_neo"),F4t.forEach(t),Twr=r(fBe," \u2014 "),WU=n(fBe,"A",{href:!0});var T4t=s(WU);Mwr=r(T4t,"FlaxGPTNeoModel"),T4t.forEach(t),Ewr=r(fBe," (GPT Neo model)"),fBe.forEach(t),Cwr=i(ne),mE=n(ne,"LI",{});var mBe=s(mE);h6e=n(mBe,"STRONG",{});var M4t=s(h6e);wwr=r(M4t,"gptj"),M4t.forEach(t),Awr=r(mBe," \u2014 "),HU=n(mBe,"A",{href:!0});var E4t=s(HU);ywr=r(E4t,"FlaxGPTJModel"),E4t.forEach(t),Lwr=r(mBe," (GPT-J model)"),mBe.forEach(t),xwr=i(ne),gE=n(ne,"LI",{});var gBe=s(gE);p6e=n(gBe,"STRONG",{});var C4t=s(p6e);$wr=r(C4t,"marian"),C4t.forEach(t),kwr=r(gBe," \u2014 "),UU=n(gBe,"A",{href:!0});var w4t=s(UU);Swr=r(w4t,"FlaxMarianModel"),w4t.forEach(t),Rwr=r(gBe," (Marian model)"),gBe.forEach(t),Bwr=i(ne),hE=n(ne,"LI",{});var hBe=s(hE);u6e=n(hBe,"STRONG",{});var A4t=s(u6e);Pwr=r(A4t,"mbart"),A4t.forEach(t),Iwr=r(hBe," \u2014 "),JU=n(hBe,"A",{href:!0});var y4t=s(JU);qwr=r(y4t,"FlaxMBartModel"),y4t.forEach(t),Nwr=r(hBe," (mBART model)"),hBe.forEach(t),jwr=i(ne),pE=n(ne,"LI",{});var pBe=s(pE);_6e=n(pBe,"STRONG",{});var L4t=s(_6e);Dwr=r(L4t,"mt5"),L4t.forEach(t),Gwr=r(pBe," \u2014 "),YU=n(pBe,"A",{href:!0});var x4t=s(YU);Owr=r(x4t,"FlaxMT5Model"),x4t.forEach(t),Vwr=r(pBe," (mT5 model)"),pBe.forEach(t),Xwr=i(ne),uE=n(ne,"LI",{});var uBe=s(uE);b6e=n(uBe,"STRONG",{});var $4t=s(b6e);zwr=r($4t,"pegasus"),$4t.forEach(t),Qwr=r(uBe," \u2014 "),KU=n(uBe,"A",{href:!0});var k4t=s(KU);Wwr=r(k4t,"FlaxPegasusModel"),k4t.forEach(t),Hwr=r(uBe," (Pegasus model)"),uBe.forEach(t),Uwr=i(ne),_E=n(ne,"LI",{});var _Be=s(_E);v6e=n(_Be,"STRONG",{});var S4t=s(v6e);Jwr=r(S4t,"roberta"),S4t.forEach(t),Ywr=r(_Be," \u2014 "),ZU=n(_Be,"A",{href:!0});var R4t=s(ZU);Kwr=r(R4t,"FlaxRobertaModel"),R4t.forEach(t),Zwr=r(_Be," (RoBERTa model)"),_Be.forEach(t),eAr=i(ne),bE=n(ne,"LI",{});var bBe=s(bE);F6e=n(bBe,"STRONG",{});var B4t=s(F6e);oAr=r(B4t,"roformer"),B4t.forEach(t),rAr=r(bBe," \u2014 "),eJ=n(bBe,"A",{href:!0});var P4t=s(eJ);tAr=r(P4t,"FlaxRoFormerModel"),P4t.forEach(t),aAr=r(bBe," (RoFormer model)"),bBe.forEach(t),nAr=i(ne),vE=n(ne,"LI",{});var vBe=s(vE);T6e=n(vBe,"STRONG",{});var I4t=s(T6e);sAr=r(I4t,"t5"),I4t.forEach(t),lAr=r(vBe," \u2014 "),oJ=n(vBe,"A",{href:!0});var q4t=s(oJ);iAr=r(q4t,"FlaxT5Model"),q4t.forEach(t),dAr=r(vBe," (T5 model)"),vBe.forEach(t),cAr=i(ne),FE=n(ne,"LI",{});var FBe=s(FE);M6e=n(FBe,"STRONG",{});var N4t=s(M6e);fAr=r(N4t,"vision-text-dual-encoder"),N4t.forEach(t),mAr=r(FBe," \u2014 "),rJ=n(FBe,"A",{href:!0});var j4t=s(rJ);gAr=r(j4t,"FlaxVisionTextDualEncoderModel"),j4t.forEach(t),hAr=r(FBe," (VisionTextDualEncoder model)"),FBe.forEach(t),pAr=i(ne),TE=n(ne,"LI",{});var TBe=s(TE);E6e=n(TBe,"STRONG",{});var D4t=s(E6e);uAr=r(D4t,"vit"),D4t.forEach(t),_Ar=r(TBe," \u2014 "),tJ=n(TBe,"A",{href:!0});var G4t=s(tJ);bAr=r(G4t,"FlaxViTModel"),G4t.forEach(t),vAr=r(TBe," (ViT model)"),TBe.forEach(t),FAr=i(ne),ME=n(ne,"LI",{});var MBe=s(ME);C6e=n(MBe,"STRONG",{});var O4t=s(C6e);TAr=r(O4t,"wav2vec2"),O4t.forEach(t),MAr=r(MBe," \u2014 "),aJ=n(MBe,"A",{href:!0});var V4t=s(aJ);EAr=r(V4t,"FlaxWav2Vec2Model"),V4t.forEach(t),CAr=r(MBe," (Wav2Vec2 model)"),MBe.forEach(t),wAr=i(ne),EE=n(ne,"LI",{});var EBe=s(EE);w6e=n(EBe,"STRONG",{});var X4t=s(w6e);AAr=r(X4t,"xglm"),X4t.forEach(t),yAr=r(EBe," \u2014 "),nJ=n(EBe,"A",{href:!0});var z4t=s(nJ);LAr=r(z4t,"FlaxXGLMModel"),z4t.forEach(t),xAr=r(EBe," (XGLM model)"),EBe.forEach(t),$Ar=i(ne),CE=n(ne,"LI",{});var CBe=s(CE);A6e=n(CBe,"STRONG",{});var Q4t=s(A6e);kAr=r(Q4t,"xlm-roberta"),Q4t.forEach(t),SAr=r(CBe," \u2014 "),sJ=n(CBe,"A",{href:!0});var W4t=s(sJ);RAr=r(W4t,"FlaxXLMRobertaModel"),W4t.forEach(t),BAr=r(CBe," (XLM-RoBERTa model)"),CBe.forEach(t),ne.forEach(t),PAr=i(jl),T(wE.$$.fragment,jl),jl.forEach(t),Nl.forEach(t),Sqe=i(f),xc=n(f,"H2",{class:!0});var jje=s(xc);AE=n(jje,"A",{id:!0,class:!0,href:!0});var H4t=s(AE);y6e=n(H4t,"SPAN",{});var U4t=s(y6e);T(tx.$$.fragment,U4t),U4t.forEach(t),H4t.forEach(t),IAr=i(jje),L6e=n(jje,"SPAN",{});var J4t=s(L6e);qAr=r(J4t,"FlaxAutoModelForCausalLM"),J4t.forEach(t),jje.forEach(t),Rqe=i(f),mr=n(f,"DIV",{class:!0});var Dl=s(mr);T(ax.$$.fragment,Dl),NAr=i(Dl),$c=n(Dl,"P",{});var IZ=s($c);jAr=r(IZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),lJ=n(IZ,"A",{href:!0});var Y4t=s(lJ);DAr=r(Y4t,"from_pretrained()"),Y4t.forEach(t),GAr=r(IZ," class method or the "),iJ=n(IZ,"A",{href:!0});var K4t=s(iJ);OAr=r(K4t,"from_config()"),K4t.forEach(t),VAr=r(IZ,` class
method.`),IZ.forEach(t),XAr=i(Dl),nx=n(Dl,"P",{});var Dje=s(nx);zAr=r(Dje,"This class cannot be instantiated directly using "),x6e=n(Dje,"CODE",{});var Z4t=s(x6e);QAr=r(Z4t,"__init__()"),Z4t.forEach(t),WAr=r(Dje," (throws an error)."),Dje.forEach(t),HAr=i(Dl),Dt=n(Dl,"DIV",{class:!0});var Lw=s(Dt);T(sx.$$.fragment,Lw),UAr=i(Lw),$6e=n(Lw,"P",{});var eEt=s($6e);JAr=r(eEt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),eEt.forEach(t),YAr=i(Lw),kc=n(Lw,"P",{});var qZ=s(kc);KAr=r(qZ,`Note:
Loading a model from its configuration file does `),k6e=n(qZ,"STRONG",{});var oEt=s(k6e);ZAr=r(oEt,"not"),oEt.forEach(t),e0r=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dJ=n(qZ,"A",{href:!0});var rEt=s(dJ);o0r=r(rEt,"from_pretrained()"),rEt.forEach(t),r0r=r(qZ," to load the model weights."),qZ.forEach(t),t0r=i(Lw),T(yE.$$.fragment,Lw),Lw.forEach(t),a0r=i(Dl),Dr=n(Dl,"DIV",{class:!0});var Gl=s(Dr);T(lx.$$.fragment,Gl),n0r=i(Gl),S6e=n(Gl,"P",{});var tEt=s(S6e);s0r=r(tEt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),tEt.forEach(t),l0r=i(Gl),pn=n(Gl,"P",{});var xw=s(pn);i0r=r(xw,"The model class to instantiate is selected based on the "),R6e=n(xw,"CODE",{});var aEt=s(R6e);d0r=r(aEt,"model_type"),aEt.forEach(t),c0r=r(xw,` property of the config object (either
passed as an argument or loaded from `),B6e=n(xw,"CODE",{});var nEt=s(B6e);f0r=r(nEt,"pretrained_model_name_or_path"),nEt.forEach(t),m0r=r(xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P6e=n(xw,"CODE",{});var sEt=s(P6e);g0r=r(sEt,"pretrained_model_name_or_path"),sEt.forEach(t),h0r=r(xw,":"),xw.forEach(t),p0r=i(Gl),ke=n(Gl,"UL",{});var Oe=s(ke);LE=n(Oe,"LI",{});var wBe=s(LE);I6e=n(wBe,"STRONG",{});var lEt=s(I6e);u0r=r(lEt,"bart"),lEt.forEach(t),_0r=r(wBe," \u2014 "),cJ=n(wBe,"A",{href:!0});var iEt=s(cJ);b0r=r(iEt,"FlaxBartForCausalLM"),iEt.forEach(t),v0r=r(wBe," (BART model)"),wBe.forEach(t),F0r=i(Oe),xE=n(Oe,"LI",{});var ABe=s(xE);q6e=n(ABe,"STRONG",{});var dEt=s(q6e);T0r=r(dEt,"bert"),dEt.forEach(t),M0r=r(ABe," \u2014 "),fJ=n(ABe,"A",{href:!0});var cEt=s(fJ);E0r=r(cEt,"FlaxBertForCausalLM"),cEt.forEach(t),C0r=r(ABe," (BERT model)"),ABe.forEach(t),w0r=i(Oe),$E=n(Oe,"LI",{});var yBe=s($E);N6e=n(yBe,"STRONG",{});var fEt=s(N6e);A0r=r(fEt,"big_bird"),fEt.forEach(t),y0r=r(yBe," \u2014 "),mJ=n(yBe,"A",{href:!0});var mEt=s(mJ);L0r=r(mEt,"FlaxBigBirdForCausalLM"),mEt.forEach(t),x0r=r(yBe," (BigBird model)"),yBe.forEach(t),$0r=i(Oe),kE=n(Oe,"LI",{});var LBe=s(kE);j6e=n(LBe,"STRONG",{});var gEt=s(j6e);k0r=r(gEt,"electra"),gEt.forEach(t),S0r=r(LBe," \u2014 "),gJ=n(LBe,"A",{href:!0});var hEt=s(gJ);R0r=r(hEt,"FlaxElectraForCausalLM"),hEt.forEach(t),B0r=r(LBe," (ELECTRA model)"),LBe.forEach(t),P0r=i(Oe),SE=n(Oe,"LI",{});var xBe=s(SE);D6e=n(xBe,"STRONG",{});var pEt=s(D6e);I0r=r(pEt,"gpt2"),pEt.forEach(t),q0r=r(xBe," \u2014 "),hJ=n(xBe,"A",{href:!0});var uEt=s(hJ);N0r=r(uEt,"FlaxGPT2LMHeadModel"),uEt.forEach(t),j0r=r(xBe," (OpenAI GPT-2 model)"),xBe.forEach(t),D0r=i(Oe),RE=n(Oe,"LI",{});var $Be=s(RE);G6e=n($Be,"STRONG",{});var _Et=s(G6e);G0r=r(_Et,"gpt_neo"),_Et.forEach(t),O0r=r($Be," \u2014 "),pJ=n($Be,"A",{href:!0});var bEt=s(pJ);V0r=r(bEt,"FlaxGPTNeoForCausalLM"),bEt.forEach(t),X0r=r($Be," (GPT Neo model)"),$Be.forEach(t),z0r=i(Oe),BE=n(Oe,"LI",{});var kBe=s(BE);O6e=n(kBe,"STRONG",{});var vEt=s(O6e);Q0r=r(vEt,"gptj"),vEt.forEach(t),W0r=r(kBe," \u2014 "),uJ=n(kBe,"A",{href:!0});var FEt=s(uJ);H0r=r(FEt,"FlaxGPTJForCausalLM"),FEt.forEach(t),U0r=r(kBe," (GPT-J model)"),kBe.forEach(t),J0r=i(Oe),PE=n(Oe,"LI",{});var SBe=s(PE);V6e=n(SBe,"STRONG",{});var TEt=s(V6e);Y0r=r(TEt,"roberta"),TEt.forEach(t),K0r=r(SBe," \u2014 "),_J=n(SBe,"A",{href:!0});var MEt=s(_J);Z0r=r(MEt,"FlaxRobertaForCausalLM"),MEt.forEach(t),eyr=r(SBe," (RoBERTa model)"),SBe.forEach(t),oyr=i(Oe),IE=n(Oe,"LI",{});var RBe=s(IE);X6e=n(RBe,"STRONG",{});var EEt=s(X6e);ryr=r(EEt,"xglm"),EEt.forEach(t),tyr=r(RBe," \u2014 "),bJ=n(RBe,"A",{href:!0});var CEt=s(bJ);ayr=r(CEt,"FlaxXGLMForCausalLM"),CEt.forEach(t),nyr=r(RBe," (XGLM model)"),RBe.forEach(t),Oe.forEach(t),syr=i(Gl),T(qE.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),Bqe=i(f),Sc=n(f,"H2",{class:!0});var Gje=s(Sc);NE=n(Gje,"A",{id:!0,class:!0,href:!0});var wEt=s(NE);z6e=n(wEt,"SPAN",{});var AEt=s(z6e);T(ix.$$.fragment,AEt),AEt.forEach(t),wEt.forEach(t),lyr=i(Gje),Q6e=n(Gje,"SPAN",{});var yEt=s(Q6e);iyr=r(yEt,"FlaxAutoModelForPreTraining"),yEt.forEach(t),Gje.forEach(t),Pqe=i(f),gr=n(f,"DIV",{class:!0});var Ol=s(gr);T(dx.$$.fragment,Ol),dyr=i(Ol),Rc=n(Ol,"P",{});var NZ=s(Rc);cyr=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),vJ=n(NZ,"A",{href:!0});var LEt=s(vJ);fyr=r(LEt,"from_pretrained()"),LEt.forEach(t),myr=r(NZ," class method or the "),FJ=n(NZ,"A",{href:!0});var xEt=s(FJ);gyr=r(xEt,"from_config()"),xEt.forEach(t),hyr=r(NZ,` class
method.`),NZ.forEach(t),pyr=i(Ol),cx=n(Ol,"P",{});var Oje=s(cx);uyr=r(Oje,"This class cannot be instantiated directly using "),W6e=n(Oje,"CODE",{});var $Et=s(W6e);_yr=r($Et,"__init__()"),$Et.forEach(t),byr=r(Oje," (throws an error)."),Oje.forEach(t),vyr=i(Ol),Gt=n(Ol,"DIV",{class:!0});var $w=s(Gt);T(fx.$$.fragment,$w),Fyr=i($w),H6e=n($w,"P",{});var kEt=s(H6e);Tyr=r(kEt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),kEt.forEach(t),Myr=i($w),Bc=n($w,"P",{});var jZ=s(Bc);Eyr=r(jZ,`Note:
Loading a model from its configuration file does `),U6e=n(jZ,"STRONG",{});var SEt=s(U6e);Cyr=r(SEt,"not"),SEt.forEach(t),wyr=r(jZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TJ=n(jZ,"A",{href:!0});var REt=s(TJ);Ayr=r(REt,"from_pretrained()"),REt.forEach(t),yyr=r(jZ," to load the model weights."),jZ.forEach(t),Lyr=i($w),T(jE.$$.fragment,$w),$w.forEach(t),xyr=i(Ol),Gr=n(Ol,"DIV",{class:!0});var Vl=s(Gr);T(mx.$$.fragment,Vl),$yr=i(Vl),J6e=n(Vl,"P",{});var BEt=s(J6e);kyr=r(BEt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),BEt.forEach(t),Syr=i(Vl),un=n(Vl,"P",{});var kw=s(un);Ryr=r(kw,"The model class to instantiate is selected based on the "),Y6e=n(kw,"CODE",{});var PEt=s(Y6e);Byr=r(PEt,"model_type"),PEt.forEach(t),Pyr=r(kw,` property of the config object (either
passed as an argument or loaded from `),K6e=n(kw,"CODE",{});var IEt=s(K6e);Iyr=r(IEt,"pretrained_model_name_or_path"),IEt.forEach(t),qyr=r(kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z6e=n(kw,"CODE",{});var qEt=s(Z6e);Nyr=r(qEt,"pretrained_model_name_or_path"),qEt.forEach(t),jyr=r(kw,":"),kw.forEach(t),Dyr=i(Vl),Me=n(Vl,"UL",{});var we=s(Me);DE=n(we,"LI",{});var BBe=s(DE);eTe=n(BBe,"STRONG",{});var NEt=s(eTe);Gyr=r(NEt,"albert"),NEt.forEach(t),Oyr=r(BBe," \u2014 "),MJ=n(BBe,"A",{href:!0});var jEt=s(MJ);Vyr=r(jEt,"FlaxAlbertForPreTraining"),jEt.forEach(t),Xyr=r(BBe," (ALBERT model)"),BBe.forEach(t),zyr=i(we),GE=n(we,"LI",{});var PBe=s(GE);oTe=n(PBe,"STRONG",{});var DEt=s(oTe);Qyr=r(DEt,"bart"),DEt.forEach(t),Wyr=r(PBe," \u2014 "),EJ=n(PBe,"A",{href:!0});var GEt=s(EJ);Hyr=r(GEt,"FlaxBartForConditionalGeneration"),GEt.forEach(t),Uyr=r(PBe," (BART model)"),PBe.forEach(t),Jyr=i(we),OE=n(we,"LI",{});var IBe=s(OE);rTe=n(IBe,"STRONG",{});var OEt=s(rTe);Yyr=r(OEt,"bert"),OEt.forEach(t),Kyr=r(IBe," \u2014 "),CJ=n(IBe,"A",{href:!0});var VEt=s(CJ);Zyr=r(VEt,"FlaxBertForPreTraining"),VEt.forEach(t),eLr=r(IBe," (BERT model)"),IBe.forEach(t),oLr=i(we),VE=n(we,"LI",{});var qBe=s(VE);tTe=n(qBe,"STRONG",{});var XEt=s(tTe);rLr=r(XEt,"big_bird"),XEt.forEach(t),tLr=r(qBe," \u2014 "),wJ=n(qBe,"A",{href:!0});var zEt=s(wJ);aLr=r(zEt,"FlaxBigBirdForPreTraining"),zEt.forEach(t),nLr=r(qBe," (BigBird model)"),qBe.forEach(t),sLr=i(we),XE=n(we,"LI",{});var NBe=s(XE);aTe=n(NBe,"STRONG",{});var QEt=s(aTe);lLr=r(QEt,"electra"),QEt.forEach(t),iLr=r(NBe," \u2014 "),AJ=n(NBe,"A",{href:!0});var WEt=s(AJ);dLr=r(WEt,"FlaxElectraForPreTraining"),WEt.forEach(t),cLr=r(NBe," (ELECTRA model)"),NBe.forEach(t),fLr=i(we),zE=n(we,"LI",{});var jBe=s(zE);nTe=n(jBe,"STRONG",{});var HEt=s(nTe);mLr=r(HEt,"mbart"),HEt.forEach(t),gLr=r(jBe," \u2014 "),yJ=n(jBe,"A",{href:!0});var UEt=s(yJ);hLr=r(UEt,"FlaxMBartForConditionalGeneration"),UEt.forEach(t),pLr=r(jBe," (mBART model)"),jBe.forEach(t),uLr=i(we),QE=n(we,"LI",{});var DBe=s(QE);sTe=n(DBe,"STRONG",{});var JEt=s(sTe);_Lr=r(JEt,"mt5"),JEt.forEach(t),bLr=r(DBe," \u2014 "),LJ=n(DBe,"A",{href:!0});var YEt=s(LJ);vLr=r(YEt,"FlaxMT5ForConditionalGeneration"),YEt.forEach(t),FLr=r(DBe," (mT5 model)"),DBe.forEach(t),TLr=i(we),WE=n(we,"LI",{});var GBe=s(WE);lTe=n(GBe,"STRONG",{});var KEt=s(lTe);MLr=r(KEt,"roberta"),KEt.forEach(t),ELr=r(GBe," \u2014 "),xJ=n(GBe,"A",{href:!0});var ZEt=s(xJ);CLr=r(ZEt,"FlaxRobertaForMaskedLM"),ZEt.forEach(t),wLr=r(GBe," (RoBERTa model)"),GBe.forEach(t),ALr=i(we),HE=n(we,"LI",{});var OBe=s(HE);iTe=n(OBe,"STRONG",{});var e5t=s(iTe);yLr=r(e5t,"roformer"),e5t.forEach(t),LLr=r(OBe," \u2014 "),$J=n(OBe,"A",{href:!0});var o5t=s($J);xLr=r(o5t,"FlaxRoFormerForMaskedLM"),o5t.forEach(t),$Lr=r(OBe," (RoFormer model)"),OBe.forEach(t),kLr=i(we),UE=n(we,"LI",{});var VBe=s(UE);dTe=n(VBe,"STRONG",{});var r5t=s(dTe);SLr=r(r5t,"t5"),r5t.forEach(t),RLr=r(VBe," \u2014 "),kJ=n(VBe,"A",{href:!0});var t5t=s(kJ);BLr=r(t5t,"FlaxT5ForConditionalGeneration"),t5t.forEach(t),PLr=r(VBe," (T5 model)"),VBe.forEach(t),ILr=i(we),JE=n(we,"LI",{});var XBe=s(JE);cTe=n(XBe,"STRONG",{});var a5t=s(cTe);qLr=r(a5t,"wav2vec2"),a5t.forEach(t),NLr=r(XBe," \u2014 "),SJ=n(XBe,"A",{href:!0});var n5t=s(SJ);jLr=r(n5t,"FlaxWav2Vec2ForPreTraining"),n5t.forEach(t),DLr=r(XBe," (Wav2Vec2 model)"),XBe.forEach(t),GLr=i(we),YE=n(we,"LI",{});var zBe=s(YE);fTe=n(zBe,"STRONG",{});var s5t=s(fTe);OLr=r(s5t,"xlm-roberta"),s5t.forEach(t),VLr=r(zBe," \u2014 "),RJ=n(zBe,"A",{href:!0});var l5t=s(RJ);XLr=r(l5t,"FlaxXLMRobertaForMaskedLM"),l5t.forEach(t),zLr=r(zBe," (XLM-RoBERTa model)"),zBe.forEach(t),we.forEach(t),QLr=i(Vl),T(KE.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),Iqe=i(f),Pc=n(f,"H2",{class:!0});var Vje=s(Pc);ZE=n(Vje,"A",{id:!0,class:!0,href:!0});var i5t=s(ZE);mTe=n(i5t,"SPAN",{});var d5t=s(mTe);T(gx.$$.fragment,d5t),d5t.forEach(t),i5t.forEach(t),WLr=i(Vje),gTe=n(Vje,"SPAN",{});var c5t=s(gTe);HLr=r(c5t,"FlaxAutoModelForMaskedLM"),c5t.forEach(t),Vje.forEach(t),qqe=i(f),hr=n(f,"DIV",{class:!0});var Xl=s(hr);T(hx.$$.fragment,Xl),ULr=i(Xl),Ic=n(Xl,"P",{});var DZ=s(Ic);JLr=r(DZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),BJ=n(DZ,"A",{href:!0});var f5t=s(BJ);YLr=r(f5t,"from_pretrained()"),f5t.forEach(t),KLr=r(DZ," class method or the "),PJ=n(DZ,"A",{href:!0});var m5t=s(PJ);ZLr=r(m5t,"from_config()"),m5t.forEach(t),exr=r(DZ,` class
method.`),DZ.forEach(t),oxr=i(Xl),px=n(Xl,"P",{});var Xje=s(px);rxr=r(Xje,"This class cannot be instantiated directly using "),hTe=n(Xje,"CODE",{});var g5t=s(hTe);txr=r(g5t,"__init__()"),g5t.forEach(t),axr=r(Xje," (throws an error)."),Xje.forEach(t),nxr=i(Xl),Ot=n(Xl,"DIV",{class:!0});var Sw=s(Ot);T(ux.$$.fragment,Sw),sxr=i(Sw),pTe=n(Sw,"P",{});var h5t=s(pTe);lxr=r(h5t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),h5t.forEach(t),ixr=i(Sw),qc=n(Sw,"P",{});var GZ=s(qc);dxr=r(GZ,`Note:
Loading a model from its configuration file does `),uTe=n(GZ,"STRONG",{});var p5t=s(uTe);cxr=r(p5t,"not"),p5t.forEach(t),fxr=r(GZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IJ=n(GZ,"A",{href:!0});var u5t=s(IJ);mxr=r(u5t,"from_pretrained()"),u5t.forEach(t),gxr=r(GZ," to load the model weights."),GZ.forEach(t),hxr=i(Sw),T(e5.$$.fragment,Sw),Sw.forEach(t),pxr=i(Xl),Or=n(Xl,"DIV",{class:!0});var zl=s(Or);T(_x.$$.fragment,zl),uxr=i(zl),_Te=n(zl,"P",{});var _5t=s(_Te);_xr=r(_5t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),_5t.forEach(t),bxr=i(zl),_n=n(zl,"P",{});var Rw=s(_n);vxr=r(Rw,"The model class to instantiate is selected based on the "),bTe=n(Rw,"CODE",{});var b5t=s(bTe);Fxr=r(b5t,"model_type"),b5t.forEach(t),Txr=r(Rw,` property of the config object (either
passed as an argument or loaded from `),vTe=n(Rw,"CODE",{});var v5t=s(vTe);Mxr=r(v5t,"pretrained_model_name_or_path"),v5t.forEach(t),Exr=r(Rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FTe=n(Rw,"CODE",{});var F5t=s(FTe);Cxr=r(F5t,"pretrained_model_name_or_path"),F5t.forEach(t),wxr=r(Rw,":"),Rw.forEach(t),Axr=i(zl),Le=n(zl,"UL",{});var Be=s(Le);o5=n(Be,"LI",{});var QBe=s(o5);TTe=n(QBe,"STRONG",{});var T5t=s(TTe);yxr=r(T5t,"albert"),T5t.forEach(t),Lxr=r(QBe," \u2014 "),qJ=n(QBe,"A",{href:!0});var M5t=s(qJ);xxr=r(M5t,"FlaxAlbertForMaskedLM"),M5t.forEach(t),$xr=r(QBe," (ALBERT model)"),QBe.forEach(t),kxr=i(Be),r5=n(Be,"LI",{});var WBe=s(r5);MTe=n(WBe,"STRONG",{});var E5t=s(MTe);Sxr=r(E5t,"bart"),E5t.forEach(t),Rxr=r(WBe," \u2014 "),NJ=n(WBe,"A",{href:!0});var C5t=s(NJ);Bxr=r(C5t,"FlaxBartForConditionalGeneration"),C5t.forEach(t),Pxr=r(WBe," (BART model)"),WBe.forEach(t),Ixr=i(Be),t5=n(Be,"LI",{});var HBe=s(t5);ETe=n(HBe,"STRONG",{});var w5t=s(ETe);qxr=r(w5t,"bert"),w5t.forEach(t),Nxr=r(HBe," \u2014 "),jJ=n(HBe,"A",{href:!0});var A5t=s(jJ);jxr=r(A5t,"FlaxBertForMaskedLM"),A5t.forEach(t),Dxr=r(HBe," (BERT model)"),HBe.forEach(t),Gxr=i(Be),a5=n(Be,"LI",{});var UBe=s(a5);CTe=n(UBe,"STRONG",{});var y5t=s(CTe);Oxr=r(y5t,"big_bird"),y5t.forEach(t),Vxr=r(UBe," \u2014 "),DJ=n(UBe,"A",{href:!0});var L5t=s(DJ);Xxr=r(L5t,"FlaxBigBirdForMaskedLM"),L5t.forEach(t),zxr=r(UBe," (BigBird model)"),UBe.forEach(t),Qxr=i(Be),n5=n(Be,"LI",{});var JBe=s(n5);wTe=n(JBe,"STRONG",{});var x5t=s(wTe);Wxr=r(x5t,"distilbert"),x5t.forEach(t),Hxr=r(JBe," \u2014 "),GJ=n(JBe,"A",{href:!0});var $5t=s(GJ);Uxr=r($5t,"FlaxDistilBertForMaskedLM"),$5t.forEach(t),Jxr=r(JBe," (DistilBERT model)"),JBe.forEach(t),Yxr=i(Be),s5=n(Be,"LI",{});var YBe=s(s5);ATe=n(YBe,"STRONG",{});var k5t=s(ATe);Kxr=r(k5t,"electra"),k5t.forEach(t),Zxr=r(YBe," \u2014 "),OJ=n(YBe,"A",{href:!0});var S5t=s(OJ);e7r=r(S5t,"FlaxElectraForMaskedLM"),S5t.forEach(t),o7r=r(YBe," (ELECTRA model)"),YBe.forEach(t),r7r=i(Be),l5=n(Be,"LI",{});var KBe=s(l5);yTe=n(KBe,"STRONG",{});var R5t=s(yTe);t7r=r(R5t,"mbart"),R5t.forEach(t),a7r=r(KBe," \u2014 "),VJ=n(KBe,"A",{href:!0});var B5t=s(VJ);n7r=r(B5t,"FlaxMBartForConditionalGeneration"),B5t.forEach(t),s7r=r(KBe," (mBART model)"),KBe.forEach(t),l7r=i(Be),i5=n(Be,"LI",{});var ZBe=s(i5);LTe=n(ZBe,"STRONG",{});var P5t=s(LTe);i7r=r(P5t,"roberta"),P5t.forEach(t),d7r=r(ZBe," \u2014 "),XJ=n(ZBe,"A",{href:!0});var I5t=s(XJ);c7r=r(I5t,"FlaxRobertaForMaskedLM"),I5t.forEach(t),f7r=r(ZBe," (RoBERTa model)"),ZBe.forEach(t),m7r=i(Be),d5=n(Be,"LI",{});var ePe=s(d5);xTe=n(ePe,"STRONG",{});var q5t=s(xTe);g7r=r(q5t,"roformer"),q5t.forEach(t),h7r=r(ePe," \u2014 "),zJ=n(ePe,"A",{href:!0});var N5t=s(zJ);p7r=r(N5t,"FlaxRoFormerForMaskedLM"),N5t.forEach(t),u7r=r(ePe," (RoFormer model)"),ePe.forEach(t),_7r=i(Be),c5=n(Be,"LI",{});var oPe=s(c5);$Te=n(oPe,"STRONG",{});var j5t=s($Te);b7r=r(j5t,"xlm-roberta"),j5t.forEach(t),v7r=r(oPe," \u2014 "),QJ=n(oPe,"A",{href:!0});var D5t=s(QJ);F7r=r(D5t,"FlaxXLMRobertaForMaskedLM"),D5t.forEach(t),T7r=r(oPe," (XLM-RoBERTa model)"),oPe.forEach(t),Be.forEach(t),M7r=i(zl),T(f5.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),Nqe=i(f),Nc=n(f,"H2",{class:!0});var zje=s(Nc);m5=n(zje,"A",{id:!0,class:!0,href:!0});var G5t=s(m5);kTe=n(G5t,"SPAN",{});var O5t=s(kTe);T(bx.$$.fragment,O5t),O5t.forEach(t),G5t.forEach(t),E7r=i(zje),STe=n(zje,"SPAN",{});var V5t=s(STe);C7r=r(V5t,"FlaxAutoModelForSeq2SeqLM"),V5t.forEach(t),zje.forEach(t),jqe=i(f),pr=n(f,"DIV",{class:!0});var Ql=s(pr);T(vx.$$.fragment,Ql),w7r=i(Ql),jc=n(Ql,"P",{});var OZ=s(jc);A7r=r(OZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),WJ=n(OZ,"A",{href:!0});var X5t=s(WJ);y7r=r(X5t,"from_pretrained()"),X5t.forEach(t),L7r=r(OZ," class method or the "),HJ=n(OZ,"A",{href:!0});var z5t=s(HJ);x7r=r(z5t,"from_config()"),z5t.forEach(t),$7r=r(OZ,` class
method.`),OZ.forEach(t),k7r=i(Ql),Fx=n(Ql,"P",{});var Qje=s(Fx);S7r=r(Qje,"This class cannot be instantiated directly using "),RTe=n(Qje,"CODE",{});var Q5t=s(RTe);R7r=r(Q5t,"__init__()"),Q5t.forEach(t),B7r=r(Qje," (throws an error)."),Qje.forEach(t),P7r=i(Ql),Vt=n(Ql,"DIV",{class:!0});var Bw=s(Vt);T(Tx.$$.fragment,Bw),I7r=i(Bw),BTe=n(Bw,"P",{});var W5t=s(BTe);q7r=r(W5t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),W5t.forEach(t),N7r=i(Bw),Dc=n(Bw,"P",{});var VZ=s(Dc);j7r=r(VZ,`Note:
Loading a model from its configuration file does `),PTe=n(VZ,"STRONG",{});var H5t=s(PTe);D7r=r(H5t,"not"),H5t.forEach(t),G7r=r(VZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UJ=n(VZ,"A",{href:!0});var U5t=s(UJ);O7r=r(U5t,"from_pretrained()"),U5t.forEach(t),V7r=r(VZ," to load the model weights."),VZ.forEach(t),X7r=i(Bw),T(g5.$$.fragment,Bw),Bw.forEach(t),z7r=i(Ql),Vr=n(Ql,"DIV",{class:!0});var Wl=s(Vr);T(Mx.$$.fragment,Wl),Q7r=i(Wl),ITe=n(Wl,"P",{});var J5t=s(ITe);W7r=r(J5t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),J5t.forEach(t),H7r=i(Wl),bn=n(Wl,"P",{});var Pw=s(bn);U7r=r(Pw,"The model class to instantiate is selected based on the "),qTe=n(Pw,"CODE",{});var Y5t=s(qTe);J7r=r(Y5t,"model_type"),Y5t.forEach(t),Y7r=r(Pw,` property of the config object (either
passed as an argument or loaded from `),NTe=n(Pw,"CODE",{});var K5t=s(NTe);K7r=r(K5t,"pretrained_model_name_or_path"),K5t.forEach(t),Z7r=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jTe=n(Pw,"CODE",{});var Z5t=s(jTe);e$r=r(Z5t,"pretrained_model_name_or_path"),Z5t.forEach(t),o$r=r(Pw,":"),Pw.forEach(t),r$r=i(Wl),Se=n(Wl,"UL",{});var Ve=s(Se);h5=n(Ve,"LI",{});var rPe=s(h5);DTe=n(rPe,"STRONG",{});var eCt=s(DTe);t$r=r(eCt,"bart"),eCt.forEach(t),a$r=r(rPe," \u2014 "),JJ=n(rPe,"A",{href:!0});var oCt=s(JJ);n$r=r(oCt,"FlaxBartForConditionalGeneration"),oCt.forEach(t),s$r=r(rPe," (BART model)"),rPe.forEach(t),l$r=i(Ve),p5=n(Ve,"LI",{});var tPe=s(p5);GTe=n(tPe,"STRONG",{});var rCt=s(GTe);i$r=r(rCt,"blenderbot"),rCt.forEach(t),d$r=r(tPe," \u2014 "),YJ=n(tPe,"A",{href:!0});var tCt=s(YJ);c$r=r(tCt,"FlaxBlenderbotForConditionalGeneration"),tCt.forEach(t),f$r=r(tPe," (Blenderbot model)"),tPe.forEach(t),m$r=i(Ve),u5=n(Ve,"LI",{});var aPe=s(u5);OTe=n(aPe,"STRONG",{});var aCt=s(OTe);g$r=r(aCt,"blenderbot-small"),aCt.forEach(t),h$r=r(aPe," \u2014 "),KJ=n(aPe,"A",{href:!0});var nCt=s(KJ);p$r=r(nCt,"FlaxBlenderbotSmallForConditionalGeneration"),nCt.forEach(t),u$r=r(aPe," (BlenderbotSmall model)"),aPe.forEach(t),_$r=i(Ve),_5=n(Ve,"LI",{});var nPe=s(_5);VTe=n(nPe,"STRONG",{});var sCt=s(VTe);b$r=r(sCt,"encoder-decoder"),sCt.forEach(t),v$r=r(nPe," \u2014 "),ZJ=n(nPe,"A",{href:!0});var lCt=s(ZJ);F$r=r(lCt,"FlaxEncoderDecoderModel"),lCt.forEach(t),T$r=r(nPe," (Encoder decoder model)"),nPe.forEach(t),M$r=i(Ve),b5=n(Ve,"LI",{});var sPe=s(b5);XTe=n(sPe,"STRONG",{});var iCt=s(XTe);E$r=r(iCt,"marian"),iCt.forEach(t),C$r=r(sPe," \u2014 "),eY=n(sPe,"A",{href:!0});var dCt=s(eY);w$r=r(dCt,"FlaxMarianMTModel"),dCt.forEach(t),A$r=r(sPe," (Marian model)"),sPe.forEach(t),y$r=i(Ve),v5=n(Ve,"LI",{});var lPe=s(v5);zTe=n(lPe,"STRONG",{});var cCt=s(zTe);L$r=r(cCt,"mbart"),cCt.forEach(t),x$r=r(lPe," \u2014 "),oY=n(lPe,"A",{href:!0});var fCt=s(oY);$$r=r(fCt,"FlaxMBartForConditionalGeneration"),fCt.forEach(t),k$r=r(lPe," (mBART model)"),lPe.forEach(t),S$r=i(Ve),F5=n(Ve,"LI",{});var iPe=s(F5);QTe=n(iPe,"STRONG",{});var mCt=s(QTe);R$r=r(mCt,"mt5"),mCt.forEach(t),B$r=r(iPe," \u2014 "),rY=n(iPe,"A",{href:!0});var gCt=s(rY);P$r=r(gCt,"FlaxMT5ForConditionalGeneration"),gCt.forEach(t),I$r=r(iPe," (mT5 model)"),iPe.forEach(t),q$r=i(Ve),T5=n(Ve,"LI",{});var dPe=s(T5);WTe=n(dPe,"STRONG",{});var hCt=s(WTe);N$r=r(hCt,"pegasus"),hCt.forEach(t),j$r=r(dPe," \u2014 "),tY=n(dPe,"A",{href:!0});var pCt=s(tY);D$r=r(pCt,"FlaxPegasusForConditionalGeneration"),pCt.forEach(t),G$r=r(dPe," (Pegasus model)"),dPe.forEach(t),O$r=i(Ve),M5=n(Ve,"LI",{});var cPe=s(M5);HTe=n(cPe,"STRONG",{});var uCt=s(HTe);V$r=r(uCt,"t5"),uCt.forEach(t),X$r=r(cPe," \u2014 "),aY=n(cPe,"A",{href:!0});var _Ct=s(aY);z$r=r(_Ct,"FlaxT5ForConditionalGeneration"),_Ct.forEach(t),Q$r=r(cPe," (T5 model)"),cPe.forEach(t),Ve.forEach(t),W$r=i(Wl),T(E5.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),Dqe=i(f),Gc=n(f,"H2",{class:!0});var Wje=s(Gc);C5=n(Wje,"A",{id:!0,class:!0,href:!0});var bCt=s(C5);UTe=n(bCt,"SPAN",{});var vCt=s(UTe);T(Ex.$$.fragment,vCt),vCt.forEach(t),bCt.forEach(t),H$r=i(Wje),JTe=n(Wje,"SPAN",{});var FCt=s(JTe);U$r=r(FCt,"FlaxAutoModelForSequenceClassification"),FCt.forEach(t),Wje.forEach(t),Gqe=i(f),ur=n(f,"DIV",{class:!0});var Hl=s(ur);T(Cx.$$.fragment,Hl),J$r=i(Hl),Oc=n(Hl,"P",{});var XZ=s(Oc);Y$r=r(XZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),nY=n(XZ,"A",{href:!0});var TCt=s(nY);K$r=r(TCt,"from_pretrained()"),TCt.forEach(t),Z$r=r(XZ," class method or the "),sY=n(XZ,"A",{href:!0});var MCt=s(sY);ekr=r(MCt,"from_config()"),MCt.forEach(t),okr=r(XZ,` class
method.`),XZ.forEach(t),rkr=i(Hl),wx=n(Hl,"P",{});var Hje=s(wx);tkr=r(Hje,"This class cannot be instantiated directly using "),YTe=n(Hje,"CODE",{});var ECt=s(YTe);akr=r(ECt,"__init__()"),ECt.forEach(t),nkr=r(Hje," (throws an error)."),Hje.forEach(t),skr=i(Hl),Xt=n(Hl,"DIV",{class:!0});var Iw=s(Xt);T(Ax.$$.fragment,Iw),lkr=i(Iw),KTe=n(Iw,"P",{});var CCt=s(KTe);ikr=r(CCt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),CCt.forEach(t),dkr=i(Iw),Vc=n(Iw,"P",{});var zZ=s(Vc);ckr=r(zZ,`Note:
Loading a model from its configuration file does `),ZTe=n(zZ,"STRONG",{});var wCt=s(ZTe);fkr=r(wCt,"not"),wCt.forEach(t),mkr=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lY=n(zZ,"A",{href:!0});var ACt=s(lY);gkr=r(ACt,"from_pretrained()"),ACt.forEach(t),hkr=r(zZ," to load the model weights."),zZ.forEach(t),pkr=i(Iw),T(w5.$$.fragment,Iw),Iw.forEach(t),ukr=i(Hl),Xr=n(Hl,"DIV",{class:!0});var Ul=s(Xr);T(yx.$$.fragment,Ul),_kr=i(Ul),e9e=n(Ul,"P",{});var yCt=s(e9e);bkr=r(yCt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),yCt.forEach(t),vkr=i(Ul),vn=n(Ul,"P",{});var qw=s(vn);Fkr=r(qw,"The model class to instantiate is selected based on the "),o9e=n(qw,"CODE",{});var LCt=s(o9e);Tkr=r(LCt,"model_type"),LCt.forEach(t),Mkr=r(qw,` property of the config object (either
passed as an argument or loaded from `),r9e=n(qw,"CODE",{});var xCt=s(r9e);Ekr=r(xCt,"pretrained_model_name_or_path"),xCt.forEach(t),Ckr=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t9e=n(qw,"CODE",{});var $Ct=s(t9e);wkr=r($Ct,"pretrained_model_name_or_path"),$Ct.forEach(t),Akr=r(qw,":"),qw.forEach(t),ykr=i(Ul),xe=n(Ul,"UL",{});var Pe=s(xe);A5=n(Pe,"LI",{});var fPe=s(A5);a9e=n(fPe,"STRONG",{});var kCt=s(a9e);Lkr=r(kCt,"albert"),kCt.forEach(t),xkr=r(fPe," \u2014 "),iY=n(fPe,"A",{href:!0});var SCt=s(iY);$kr=r(SCt,"FlaxAlbertForSequenceClassification"),SCt.forEach(t),kkr=r(fPe," (ALBERT model)"),fPe.forEach(t),Skr=i(Pe),y5=n(Pe,"LI",{});var mPe=s(y5);n9e=n(mPe,"STRONG",{});var RCt=s(n9e);Rkr=r(RCt,"bart"),RCt.forEach(t),Bkr=r(mPe," \u2014 "),dY=n(mPe,"A",{href:!0});var BCt=s(dY);Pkr=r(BCt,"FlaxBartForSequenceClassification"),BCt.forEach(t),Ikr=r(mPe," (BART model)"),mPe.forEach(t),qkr=i(Pe),L5=n(Pe,"LI",{});var gPe=s(L5);s9e=n(gPe,"STRONG",{});var PCt=s(s9e);Nkr=r(PCt,"bert"),PCt.forEach(t),jkr=r(gPe," \u2014 "),cY=n(gPe,"A",{href:!0});var ICt=s(cY);Dkr=r(ICt,"FlaxBertForSequenceClassification"),ICt.forEach(t),Gkr=r(gPe," (BERT model)"),gPe.forEach(t),Okr=i(Pe),x5=n(Pe,"LI",{});var hPe=s(x5);l9e=n(hPe,"STRONG",{});var qCt=s(l9e);Vkr=r(qCt,"big_bird"),qCt.forEach(t),Xkr=r(hPe," \u2014 "),fY=n(hPe,"A",{href:!0});var NCt=s(fY);zkr=r(NCt,"FlaxBigBirdForSequenceClassification"),NCt.forEach(t),Qkr=r(hPe," (BigBird model)"),hPe.forEach(t),Wkr=i(Pe),$5=n(Pe,"LI",{});var pPe=s($5);i9e=n(pPe,"STRONG",{});var jCt=s(i9e);Hkr=r(jCt,"distilbert"),jCt.forEach(t),Ukr=r(pPe," \u2014 "),mY=n(pPe,"A",{href:!0});var DCt=s(mY);Jkr=r(DCt,"FlaxDistilBertForSequenceClassification"),DCt.forEach(t),Ykr=r(pPe," (DistilBERT model)"),pPe.forEach(t),Kkr=i(Pe),k5=n(Pe,"LI",{});var uPe=s(k5);d9e=n(uPe,"STRONG",{});var GCt=s(d9e);Zkr=r(GCt,"electra"),GCt.forEach(t),eSr=r(uPe," \u2014 "),gY=n(uPe,"A",{href:!0});var OCt=s(gY);oSr=r(OCt,"FlaxElectraForSequenceClassification"),OCt.forEach(t),rSr=r(uPe," (ELECTRA model)"),uPe.forEach(t),tSr=i(Pe),S5=n(Pe,"LI",{});var _Pe=s(S5);c9e=n(_Pe,"STRONG",{});var VCt=s(c9e);aSr=r(VCt,"mbart"),VCt.forEach(t),nSr=r(_Pe," \u2014 "),hY=n(_Pe,"A",{href:!0});var XCt=s(hY);sSr=r(XCt,"FlaxMBartForSequenceClassification"),XCt.forEach(t),lSr=r(_Pe," (mBART model)"),_Pe.forEach(t),iSr=i(Pe),R5=n(Pe,"LI",{});var bPe=s(R5);f9e=n(bPe,"STRONG",{});var zCt=s(f9e);dSr=r(zCt,"roberta"),zCt.forEach(t),cSr=r(bPe," \u2014 "),pY=n(bPe,"A",{href:!0});var QCt=s(pY);fSr=r(QCt,"FlaxRobertaForSequenceClassification"),QCt.forEach(t),mSr=r(bPe," (RoBERTa model)"),bPe.forEach(t),gSr=i(Pe),B5=n(Pe,"LI",{});var vPe=s(B5);m9e=n(vPe,"STRONG",{});var WCt=s(m9e);hSr=r(WCt,"roformer"),WCt.forEach(t),pSr=r(vPe," \u2014 "),uY=n(vPe,"A",{href:!0});var HCt=s(uY);uSr=r(HCt,"FlaxRoFormerForSequenceClassification"),HCt.forEach(t),_Sr=r(vPe," (RoFormer model)"),vPe.forEach(t),bSr=i(Pe),P5=n(Pe,"LI",{});var FPe=s(P5);g9e=n(FPe,"STRONG",{});var UCt=s(g9e);vSr=r(UCt,"xlm-roberta"),UCt.forEach(t),FSr=r(FPe," \u2014 "),_Y=n(FPe,"A",{href:!0});var JCt=s(_Y);TSr=r(JCt,"FlaxXLMRobertaForSequenceClassification"),JCt.forEach(t),MSr=r(FPe," (XLM-RoBERTa model)"),FPe.forEach(t),Pe.forEach(t),ESr=i(Ul),T(I5.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),Oqe=i(f),Xc=n(f,"H2",{class:!0});var Uje=s(Xc);q5=n(Uje,"A",{id:!0,class:!0,href:!0});var YCt=s(q5);h9e=n(YCt,"SPAN",{});var KCt=s(h9e);T(Lx.$$.fragment,KCt),KCt.forEach(t),YCt.forEach(t),CSr=i(Uje),p9e=n(Uje,"SPAN",{});var ZCt=s(p9e);wSr=r(ZCt,"FlaxAutoModelForQuestionAnswering"),ZCt.forEach(t),Uje.forEach(t),Vqe=i(f),_r=n(f,"DIV",{class:!0});var Jl=s(_r);T(xx.$$.fragment,Jl),ASr=i(Jl),zc=n(Jl,"P",{});var QZ=s(zc);ySr=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),bY=n(QZ,"A",{href:!0});var e3t=s(bY);LSr=r(e3t,"from_pretrained()"),e3t.forEach(t),xSr=r(QZ," class method or the "),vY=n(QZ,"A",{href:!0});var o3t=s(vY);$Sr=r(o3t,"from_config()"),o3t.forEach(t),kSr=r(QZ,` class
method.`),QZ.forEach(t),SSr=i(Jl),$x=n(Jl,"P",{});var Jje=s($x);RSr=r(Jje,"This class cannot be instantiated directly using "),u9e=n(Jje,"CODE",{});var r3t=s(u9e);BSr=r(r3t,"__init__()"),r3t.forEach(t),PSr=r(Jje," (throws an error)."),Jje.forEach(t),ISr=i(Jl),zt=n(Jl,"DIV",{class:!0});var Nw=s(zt);T(kx.$$.fragment,Nw),qSr=i(Nw),_9e=n(Nw,"P",{});var t3t=s(_9e);NSr=r(t3t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),t3t.forEach(t),jSr=i(Nw),Qc=n(Nw,"P",{});var WZ=s(Qc);DSr=r(WZ,`Note:
Loading a model from its configuration file does `),b9e=n(WZ,"STRONG",{});var a3t=s(b9e);GSr=r(a3t,"not"),a3t.forEach(t),OSr=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FY=n(WZ,"A",{href:!0});var n3t=s(FY);VSr=r(n3t,"from_pretrained()"),n3t.forEach(t),XSr=r(WZ," to load the model weights."),WZ.forEach(t),zSr=i(Nw),T(N5.$$.fragment,Nw),Nw.forEach(t),QSr=i(Jl),zr=n(Jl,"DIV",{class:!0});var Yl=s(zr);T(Sx.$$.fragment,Yl),WSr=i(Yl),v9e=n(Yl,"P",{});var s3t=s(v9e);HSr=r(s3t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),s3t.forEach(t),USr=i(Yl),Fn=n(Yl,"P",{});var jw=s(Fn);JSr=r(jw,"The model class to instantiate is selected based on the "),F9e=n(jw,"CODE",{});var l3t=s(F9e);YSr=r(l3t,"model_type"),l3t.forEach(t),KSr=r(jw,` property of the config object (either
passed as an argument or loaded from `),T9e=n(jw,"CODE",{});var i3t=s(T9e);ZSr=r(i3t,"pretrained_model_name_or_path"),i3t.forEach(t),eRr=r(jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M9e=n(jw,"CODE",{});var d3t=s(M9e);oRr=r(d3t,"pretrained_model_name_or_path"),d3t.forEach(t),rRr=r(jw,":"),jw.forEach(t),tRr=i(Yl),$e=n(Yl,"UL",{});var Ie=s($e);j5=n(Ie,"LI",{});var TPe=s(j5);E9e=n(TPe,"STRONG",{});var c3t=s(E9e);aRr=r(c3t,"albert"),c3t.forEach(t),nRr=r(TPe," \u2014 "),TY=n(TPe,"A",{href:!0});var f3t=s(TY);sRr=r(f3t,"FlaxAlbertForQuestionAnswering"),f3t.forEach(t),lRr=r(TPe," (ALBERT model)"),TPe.forEach(t),iRr=i(Ie),D5=n(Ie,"LI",{});var MPe=s(D5);C9e=n(MPe,"STRONG",{});var m3t=s(C9e);dRr=r(m3t,"bart"),m3t.forEach(t),cRr=r(MPe," \u2014 "),MY=n(MPe,"A",{href:!0});var g3t=s(MY);fRr=r(g3t,"FlaxBartForQuestionAnswering"),g3t.forEach(t),mRr=r(MPe," (BART model)"),MPe.forEach(t),gRr=i(Ie),G5=n(Ie,"LI",{});var EPe=s(G5);w9e=n(EPe,"STRONG",{});var h3t=s(w9e);hRr=r(h3t,"bert"),h3t.forEach(t),pRr=r(EPe," \u2014 "),EY=n(EPe,"A",{href:!0});var p3t=s(EY);uRr=r(p3t,"FlaxBertForQuestionAnswering"),p3t.forEach(t),_Rr=r(EPe," (BERT model)"),EPe.forEach(t),bRr=i(Ie),O5=n(Ie,"LI",{});var CPe=s(O5);A9e=n(CPe,"STRONG",{});var u3t=s(A9e);vRr=r(u3t,"big_bird"),u3t.forEach(t),FRr=r(CPe," \u2014 "),CY=n(CPe,"A",{href:!0});var _3t=s(CY);TRr=r(_3t,"FlaxBigBirdForQuestionAnswering"),_3t.forEach(t),MRr=r(CPe," (BigBird model)"),CPe.forEach(t),ERr=i(Ie),V5=n(Ie,"LI",{});var wPe=s(V5);y9e=n(wPe,"STRONG",{});var b3t=s(y9e);CRr=r(b3t,"distilbert"),b3t.forEach(t),wRr=r(wPe," \u2014 "),wY=n(wPe,"A",{href:!0});var v3t=s(wY);ARr=r(v3t,"FlaxDistilBertForQuestionAnswering"),v3t.forEach(t),yRr=r(wPe," (DistilBERT model)"),wPe.forEach(t),LRr=i(Ie),X5=n(Ie,"LI",{});var APe=s(X5);L9e=n(APe,"STRONG",{});var F3t=s(L9e);xRr=r(F3t,"electra"),F3t.forEach(t),$Rr=r(APe," \u2014 "),AY=n(APe,"A",{href:!0});var T3t=s(AY);kRr=r(T3t,"FlaxElectraForQuestionAnswering"),T3t.forEach(t),SRr=r(APe," (ELECTRA model)"),APe.forEach(t),RRr=i(Ie),z5=n(Ie,"LI",{});var yPe=s(z5);x9e=n(yPe,"STRONG",{});var M3t=s(x9e);BRr=r(M3t,"mbart"),M3t.forEach(t),PRr=r(yPe," \u2014 "),yY=n(yPe,"A",{href:!0});var E3t=s(yY);IRr=r(E3t,"FlaxMBartForQuestionAnswering"),E3t.forEach(t),qRr=r(yPe," (mBART model)"),yPe.forEach(t),NRr=i(Ie),Q5=n(Ie,"LI",{});var LPe=s(Q5);$9e=n(LPe,"STRONG",{});var C3t=s($9e);jRr=r(C3t,"roberta"),C3t.forEach(t),DRr=r(LPe," \u2014 "),LY=n(LPe,"A",{href:!0});var w3t=s(LY);GRr=r(w3t,"FlaxRobertaForQuestionAnswering"),w3t.forEach(t),ORr=r(LPe," (RoBERTa model)"),LPe.forEach(t),VRr=i(Ie),W5=n(Ie,"LI",{});var xPe=s(W5);k9e=n(xPe,"STRONG",{});var A3t=s(k9e);XRr=r(A3t,"roformer"),A3t.forEach(t),zRr=r(xPe," \u2014 "),xY=n(xPe,"A",{href:!0});var y3t=s(xY);QRr=r(y3t,"FlaxRoFormerForQuestionAnswering"),y3t.forEach(t),WRr=r(xPe," (RoFormer model)"),xPe.forEach(t),HRr=i(Ie),H5=n(Ie,"LI",{});var $Pe=s(H5);S9e=n($Pe,"STRONG",{});var L3t=s(S9e);URr=r(L3t,"xlm-roberta"),L3t.forEach(t),JRr=r($Pe," \u2014 "),$Y=n($Pe,"A",{href:!0});var x3t=s($Y);YRr=r(x3t,"FlaxXLMRobertaForQuestionAnswering"),x3t.forEach(t),KRr=r($Pe," (XLM-RoBERTa model)"),$Pe.forEach(t),Ie.forEach(t),ZRr=i(Yl),T(U5.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),Xqe=i(f),Wc=n(f,"H2",{class:!0});var Yje=s(Wc);J5=n(Yje,"A",{id:!0,class:!0,href:!0});var $3t=s(J5);R9e=n($3t,"SPAN",{});var k3t=s(R9e);T(Rx.$$.fragment,k3t),k3t.forEach(t),$3t.forEach(t),eBr=i(Yje),B9e=n(Yje,"SPAN",{});var S3t=s(B9e);oBr=r(S3t,"FlaxAutoModelForTokenClassification"),S3t.forEach(t),Yje.forEach(t),zqe=i(f),br=n(f,"DIV",{class:!0});var Kl=s(br);T(Bx.$$.fragment,Kl),rBr=i(Kl),Hc=n(Kl,"P",{});var HZ=s(Hc);tBr=r(HZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),kY=n(HZ,"A",{href:!0});var R3t=s(kY);aBr=r(R3t,"from_pretrained()"),R3t.forEach(t),nBr=r(HZ," class method or the "),SY=n(HZ,"A",{href:!0});var B3t=s(SY);sBr=r(B3t,"from_config()"),B3t.forEach(t),lBr=r(HZ,` class
method.`),HZ.forEach(t),iBr=i(Kl),Px=n(Kl,"P",{});var Kje=s(Px);dBr=r(Kje,"This class cannot be instantiated directly using "),P9e=n(Kje,"CODE",{});var P3t=s(P9e);cBr=r(P3t,"__init__()"),P3t.forEach(t),fBr=r(Kje," (throws an error)."),Kje.forEach(t),mBr=i(Kl),Qt=n(Kl,"DIV",{class:!0});var Dw=s(Qt);T(Ix.$$.fragment,Dw),gBr=i(Dw),I9e=n(Dw,"P",{});var I3t=s(I9e);hBr=r(I3t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),I3t.forEach(t),pBr=i(Dw),Uc=n(Dw,"P",{});var UZ=s(Uc);uBr=r(UZ,`Note:
Loading a model from its configuration file does `),q9e=n(UZ,"STRONG",{});var q3t=s(q9e);_Br=r(q3t,"not"),q3t.forEach(t),bBr=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=n(UZ,"A",{href:!0});var N3t=s(RY);vBr=r(N3t,"from_pretrained()"),N3t.forEach(t),FBr=r(UZ," to load the model weights."),UZ.forEach(t),TBr=i(Dw),T(Y5.$$.fragment,Dw),Dw.forEach(t),MBr=i(Kl),Qr=n(Kl,"DIV",{class:!0});var Zl=s(Qr);T(qx.$$.fragment,Zl),EBr=i(Zl),N9e=n(Zl,"P",{});var j3t=s(N9e);CBr=r(j3t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),j3t.forEach(t),wBr=i(Zl),Tn=n(Zl,"P",{});var Gw=s(Tn);ABr=r(Gw,"The model class to instantiate is selected based on the "),j9e=n(Gw,"CODE",{});var D3t=s(j9e);yBr=r(D3t,"model_type"),D3t.forEach(t),LBr=r(Gw,` property of the config object (either
passed as an argument or loaded from `),D9e=n(Gw,"CODE",{});var G3t=s(D9e);xBr=r(G3t,"pretrained_model_name_or_path"),G3t.forEach(t),$Br=r(Gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G9e=n(Gw,"CODE",{});var O3t=s(G9e);kBr=r(O3t,"pretrained_model_name_or_path"),O3t.forEach(t),SBr=r(Gw,":"),Gw.forEach(t),RBr=i(Zl),De=n(Zl,"UL",{});var Fo=s(De);K5=n(Fo,"LI",{});var kPe=s(K5);O9e=n(kPe,"STRONG",{});var V3t=s(O9e);BBr=r(V3t,"albert"),V3t.forEach(t),PBr=r(kPe," \u2014 "),BY=n(kPe,"A",{href:!0});var X3t=s(BY);IBr=r(X3t,"FlaxAlbertForTokenClassification"),X3t.forEach(t),qBr=r(kPe," (ALBERT model)"),kPe.forEach(t),NBr=i(Fo),Z5=n(Fo,"LI",{});var SPe=s(Z5);V9e=n(SPe,"STRONG",{});var z3t=s(V9e);jBr=r(z3t,"bert"),z3t.forEach(t),DBr=r(SPe," \u2014 "),PY=n(SPe,"A",{href:!0});var Q3t=s(PY);GBr=r(Q3t,"FlaxBertForTokenClassification"),Q3t.forEach(t),OBr=r(SPe," (BERT model)"),SPe.forEach(t),VBr=i(Fo),eC=n(Fo,"LI",{});var RPe=s(eC);X9e=n(RPe,"STRONG",{});var W3t=s(X9e);XBr=r(W3t,"big_bird"),W3t.forEach(t),zBr=r(RPe," \u2014 "),IY=n(RPe,"A",{href:!0});var H3t=s(IY);QBr=r(H3t,"FlaxBigBirdForTokenClassification"),H3t.forEach(t),WBr=r(RPe," (BigBird model)"),RPe.forEach(t),HBr=i(Fo),oC=n(Fo,"LI",{});var BPe=s(oC);z9e=n(BPe,"STRONG",{});var U3t=s(z9e);UBr=r(U3t,"distilbert"),U3t.forEach(t),JBr=r(BPe," \u2014 "),qY=n(BPe,"A",{href:!0});var J3t=s(qY);YBr=r(J3t,"FlaxDistilBertForTokenClassification"),J3t.forEach(t),KBr=r(BPe," (DistilBERT model)"),BPe.forEach(t),ZBr=i(Fo),rC=n(Fo,"LI",{});var PPe=s(rC);Q9e=n(PPe,"STRONG",{});var Y3t=s(Q9e);ePr=r(Y3t,"electra"),Y3t.forEach(t),oPr=r(PPe," \u2014 "),NY=n(PPe,"A",{href:!0});var K3t=s(NY);rPr=r(K3t,"FlaxElectraForTokenClassification"),K3t.forEach(t),tPr=r(PPe," (ELECTRA model)"),PPe.forEach(t),aPr=i(Fo),tC=n(Fo,"LI",{});var IPe=s(tC);W9e=n(IPe,"STRONG",{});var Z3t=s(W9e);nPr=r(Z3t,"roberta"),Z3t.forEach(t),sPr=r(IPe," \u2014 "),jY=n(IPe,"A",{href:!0});var ewt=s(jY);lPr=r(ewt,"FlaxRobertaForTokenClassification"),ewt.forEach(t),iPr=r(IPe," (RoBERTa model)"),IPe.forEach(t),dPr=i(Fo),aC=n(Fo,"LI",{});var qPe=s(aC);H9e=n(qPe,"STRONG",{});var owt=s(H9e);cPr=r(owt,"roformer"),owt.forEach(t),fPr=r(qPe," \u2014 "),DY=n(qPe,"A",{href:!0});var rwt=s(DY);mPr=r(rwt,"FlaxRoFormerForTokenClassification"),rwt.forEach(t),gPr=r(qPe," (RoFormer model)"),qPe.forEach(t),hPr=i(Fo),nC=n(Fo,"LI",{});var NPe=s(nC);U9e=n(NPe,"STRONG",{});var twt=s(U9e);pPr=r(twt,"xlm-roberta"),twt.forEach(t),uPr=r(NPe," \u2014 "),GY=n(NPe,"A",{href:!0});var awt=s(GY);_Pr=r(awt,"FlaxXLMRobertaForTokenClassification"),awt.forEach(t),bPr=r(NPe," (XLM-RoBERTa model)"),NPe.forEach(t),Fo.forEach(t),vPr=i(Zl),T(sC.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),Qqe=i(f),Jc=n(f,"H2",{class:!0});var Zje=s(Jc);lC=n(Zje,"A",{id:!0,class:!0,href:!0});var nwt=s(lC);J9e=n(nwt,"SPAN",{});var swt=s(J9e);T(Nx.$$.fragment,swt),swt.forEach(t),nwt.forEach(t),FPr=i(Zje),Y9e=n(Zje,"SPAN",{});var lwt=s(Y9e);TPr=r(lwt,"FlaxAutoModelForMultipleChoice"),lwt.forEach(t),Zje.forEach(t),Wqe=i(f),vr=n(f,"DIV",{class:!0});var ei=s(vr);T(jx.$$.fragment,ei),MPr=i(ei),Yc=n(ei,"P",{});var JZ=s(Yc);EPr=r(JZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),OY=n(JZ,"A",{href:!0});var iwt=s(OY);CPr=r(iwt,"from_pretrained()"),iwt.forEach(t),wPr=r(JZ," class method or the "),VY=n(JZ,"A",{href:!0});var dwt=s(VY);APr=r(dwt,"from_config()"),dwt.forEach(t),yPr=r(JZ,` class
method.`),JZ.forEach(t),LPr=i(ei),Dx=n(ei,"P",{});var eDe=s(Dx);xPr=r(eDe,"This class cannot be instantiated directly using "),K9e=n(eDe,"CODE",{});var cwt=s(K9e);$Pr=r(cwt,"__init__()"),cwt.forEach(t),kPr=r(eDe," (throws an error)."),eDe.forEach(t),SPr=i(ei),Wt=n(ei,"DIV",{class:!0});var Ow=s(Wt);T(Gx.$$.fragment,Ow),RPr=i(Ow),Z9e=n(Ow,"P",{});var fwt=s(Z9e);BPr=r(fwt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),fwt.forEach(t),PPr=i(Ow),Kc=n(Ow,"P",{});var YZ=s(Kc);IPr=r(YZ,`Note:
Loading a model from its configuration file does `),eMe=n(YZ,"STRONG",{});var mwt=s(eMe);qPr=r(mwt,"not"),mwt.forEach(t),NPr=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XY=n(YZ,"A",{href:!0});var gwt=s(XY);jPr=r(gwt,"from_pretrained()"),gwt.forEach(t),DPr=r(YZ," to load the model weights."),YZ.forEach(t),GPr=i(Ow),T(iC.$$.fragment,Ow),Ow.forEach(t),OPr=i(ei),Wr=n(ei,"DIV",{class:!0});var oi=s(Wr);T(Ox.$$.fragment,oi),VPr=i(oi),oMe=n(oi,"P",{});var hwt=s(oMe);XPr=r(hwt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),hwt.forEach(t),zPr=i(oi),Mn=n(oi,"P",{});var Vw=s(Mn);QPr=r(Vw,"The model class to instantiate is selected based on the "),rMe=n(Vw,"CODE",{});var pwt=s(rMe);WPr=r(pwt,"model_type"),pwt.forEach(t),HPr=r(Vw,` property of the config object (either
passed as an argument or loaded from `),tMe=n(Vw,"CODE",{});var uwt=s(tMe);UPr=r(uwt,"pretrained_model_name_or_path"),uwt.forEach(t),JPr=r(Vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aMe=n(Vw,"CODE",{});var _wt=s(aMe);YPr=r(_wt,"pretrained_model_name_or_path"),_wt.forEach(t),KPr=r(Vw,":"),Vw.forEach(t),ZPr=i(oi),Ge=n(oi,"UL",{});var To=s(Ge);dC=n(To,"LI",{});var jPe=s(dC);nMe=n(jPe,"STRONG",{});var bwt=s(nMe);eIr=r(bwt,"albert"),bwt.forEach(t),oIr=r(jPe," \u2014 "),zY=n(jPe,"A",{href:!0});var vwt=s(zY);rIr=r(vwt,"FlaxAlbertForMultipleChoice"),vwt.forEach(t),tIr=r(jPe," (ALBERT model)"),jPe.forEach(t),aIr=i(To),cC=n(To,"LI",{});var DPe=s(cC);sMe=n(DPe,"STRONG",{});var Fwt=s(sMe);nIr=r(Fwt,"bert"),Fwt.forEach(t),sIr=r(DPe," \u2014 "),QY=n(DPe,"A",{href:!0});var Twt=s(QY);lIr=r(Twt,"FlaxBertForMultipleChoice"),Twt.forEach(t),iIr=r(DPe," (BERT model)"),DPe.forEach(t),dIr=i(To),fC=n(To,"LI",{});var GPe=s(fC);lMe=n(GPe,"STRONG",{});var Mwt=s(lMe);cIr=r(Mwt,"big_bird"),Mwt.forEach(t),fIr=r(GPe," \u2014 "),WY=n(GPe,"A",{href:!0});var Ewt=s(WY);mIr=r(Ewt,"FlaxBigBirdForMultipleChoice"),Ewt.forEach(t),gIr=r(GPe," (BigBird model)"),GPe.forEach(t),hIr=i(To),mC=n(To,"LI",{});var OPe=s(mC);iMe=n(OPe,"STRONG",{});var Cwt=s(iMe);pIr=r(Cwt,"distilbert"),Cwt.forEach(t),uIr=r(OPe," \u2014 "),HY=n(OPe,"A",{href:!0});var wwt=s(HY);_Ir=r(wwt,"FlaxDistilBertForMultipleChoice"),wwt.forEach(t),bIr=r(OPe," (DistilBERT model)"),OPe.forEach(t),vIr=i(To),gC=n(To,"LI",{});var VPe=s(gC);dMe=n(VPe,"STRONG",{});var Awt=s(dMe);FIr=r(Awt,"electra"),Awt.forEach(t),TIr=r(VPe," \u2014 "),UY=n(VPe,"A",{href:!0});var ywt=s(UY);MIr=r(ywt,"FlaxElectraForMultipleChoice"),ywt.forEach(t),EIr=r(VPe," (ELECTRA model)"),VPe.forEach(t),CIr=i(To),hC=n(To,"LI",{});var XPe=s(hC);cMe=n(XPe,"STRONG",{});var Lwt=s(cMe);wIr=r(Lwt,"roberta"),Lwt.forEach(t),AIr=r(XPe," \u2014 "),JY=n(XPe,"A",{href:!0});var xwt=s(JY);yIr=r(xwt,"FlaxRobertaForMultipleChoice"),xwt.forEach(t),LIr=r(XPe," (RoBERTa model)"),XPe.forEach(t),xIr=i(To),pC=n(To,"LI",{});var zPe=s(pC);fMe=n(zPe,"STRONG",{});var $wt=s(fMe);$Ir=r($wt,"roformer"),$wt.forEach(t),kIr=r(zPe," \u2014 "),YY=n(zPe,"A",{href:!0});var kwt=s(YY);SIr=r(kwt,"FlaxRoFormerForMultipleChoice"),kwt.forEach(t),RIr=r(zPe," (RoFormer model)"),zPe.forEach(t),BIr=i(To),uC=n(To,"LI",{});var QPe=s(uC);mMe=n(QPe,"STRONG",{});var Swt=s(mMe);PIr=r(Swt,"xlm-roberta"),Swt.forEach(t),IIr=r(QPe," \u2014 "),KY=n(QPe,"A",{href:!0});var Rwt=s(KY);qIr=r(Rwt,"FlaxXLMRobertaForMultipleChoice"),Rwt.forEach(t),NIr=r(QPe," (XLM-RoBERTa model)"),QPe.forEach(t),To.forEach(t),jIr=i(oi),T(_C.$$.fragment,oi),oi.forEach(t),ei.forEach(t),Hqe=i(f),Zc=n(f,"H2",{class:!0});var oDe=s(Zc);bC=n(oDe,"A",{id:!0,class:!0,href:!0});var Bwt=s(bC);gMe=n(Bwt,"SPAN",{});var Pwt=s(gMe);T(Vx.$$.fragment,Pwt),Pwt.forEach(t),Bwt.forEach(t),DIr=i(oDe),hMe=n(oDe,"SPAN",{});var Iwt=s(hMe);GIr=r(Iwt,"FlaxAutoModelForNextSentencePrediction"),Iwt.forEach(t),oDe.forEach(t),Uqe=i(f),Fr=n(f,"DIV",{class:!0});var ri=s(Fr);T(Xx.$$.fragment,ri),OIr=i(ri),ef=n(ri,"P",{});var KZ=s(ef);VIr=r(KZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ZY=n(KZ,"A",{href:!0});var qwt=s(ZY);XIr=r(qwt,"from_pretrained()"),qwt.forEach(t),zIr=r(KZ," class method or the "),eK=n(KZ,"A",{href:!0});var Nwt=s(eK);QIr=r(Nwt,"from_config()"),Nwt.forEach(t),WIr=r(KZ,` class
method.`),KZ.forEach(t),HIr=i(ri),zx=n(ri,"P",{});var rDe=s(zx);UIr=r(rDe,"This class cannot be instantiated directly using "),pMe=n(rDe,"CODE",{});var jwt=s(pMe);JIr=r(jwt,"__init__()"),jwt.forEach(t),YIr=r(rDe," (throws an error)."),rDe.forEach(t),KIr=i(ri),Ht=n(ri,"DIV",{class:!0});var Xw=s(Ht);T(Qx.$$.fragment,Xw),ZIr=i(Xw),uMe=n(Xw,"P",{});var Dwt=s(uMe);eqr=r(Dwt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Dwt.forEach(t),oqr=i(Xw),of=n(Xw,"P",{});var ZZ=s(of);rqr=r(ZZ,`Note:
Loading a model from its configuration file does `),_Me=n(ZZ,"STRONG",{});var Gwt=s(_Me);tqr=r(Gwt,"not"),Gwt.forEach(t),aqr=r(ZZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oK=n(ZZ,"A",{href:!0});var Owt=s(oK);nqr=r(Owt,"from_pretrained()"),Owt.forEach(t),sqr=r(ZZ," to load the model weights."),ZZ.forEach(t),lqr=i(Xw),T(vC.$$.fragment,Xw),Xw.forEach(t),iqr=i(ri),Hr=n(ri,"DIV",{class:!0});var ti=s(Hr);T(Wx.$$.fragment,ti),dqr=i(ti),bMe=n(ti,"P",{});var Vwt=s(bMe);cqr=r(Vwt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Vwt.forEach(t),fqr=i(ti),En=n(ti,"P",{});var zw=s(En);mqr=r(zw,"The model class to instantiate is selected based on the "),vMe=n(zw,"CODE",{});var Xwt=s(vMe);gqr=r(Xwt,"model_type"),Xwt.forEach(t),hqr=r(zw,` property of the config object (either
passed as an argument or loaded from `),FMe=n(zw,"CODE",{});var zwt=s(FMe);pqr=r(zwt,"pretrained_model_name_or_path"),zwt.forEach(t),uqr=r(zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TMe=n(zw,"CODE",{});var Qwt=s(TMe);_qr=r(Qwt,"pretrained_model_name_or_path"),Qwt.forEach(t),bqr=r(zw,":"),zw.forEach(t),vqr=i(ti),MMe=n(ti,"UL",{});var Wwt=s(MMe);FC=n(Wwt,"LI",{});var WPe=s(FC);EMe=n(WPe,"STRONG",{});var Hwt=s(EMe);Fqr=r(Hwt,"bert"),Hwt.forEach(t),Tqr=r(WPe," \u2014 "),rK=n(WPe,"A",{href:!0});var Uwt=s(rK);Mqr=r(Uwt,"FlaxBertForNextSentencePrediction"),Uwt.forEach(t),Eqr=r(WPe," (BERT model)"),WPe.forEach(t),Wwt.forEach(t),Cqr=i(ti),T(TC.$$.fragment,ti),ti.forEach(t),ri.forEach(t),Jqe=i(f),rf=n(f,"H2",{class:!0});var tDe=s(rf);MC=n(tDe,"A",{id:!0,class:!0,href:!0});var Jwt=s(MC);CMe=n(Jwt,"SPAN",{});var Ywt=s(CMe);T(Hx.$$.fragment,Ywt),Ywt.forEach(t),Jwt.forEach(t),wqr=i(tDe),wMe=n(tDe,"SPAN",{});var Kwt=s(wMe);Aqr=r(Kwt,"FlaxAutoModelForImageClassification"),Kwt.forEach(t),tDe.forEach(t),Yqe=i(f),Tr=n(f,"DIV",{class:!0});var ai=s(Tr);T(Ux.$$.fragment,ai),yqr=i(ai),tf=n(ai,"P",{});var eee=s(tf);Lqr=r(eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),tK=n(eee,"A",{href:!0});var Zwt=s(tK);xqr=r(Zwt,"from_pretrained()"),Zwt.forEach(t),$qr=r(eee," class method or the "),aK=n(eee,"A",{href:!0});var eAt=s(aK);kqr=r(eAt,"from_config()"),eAt.forEach(t),Sqr=r(eee,` class
method.`),eee.forEach(t),Rqr=i(ai),Jx=n(ai,"P",{});var aDe=s(Jx);Bqr=r(aDe,"This class cannot be instantiated directly using "),AMe=n(aDe,"CODE",{});var oAt=s(AMe);Pqr=r(oAt,"__init__()"),oAt.forEach(t),Iqr=r(aDe," (throws an error)."),aDe.forEach(t),qqr=i(ai),Ut=n(ai,"DIV",{class:!0});var Qw=s(Ut);T(Yx.$$.fragment,Qw),Nqr=i(Qw),yMe=n(Qw,"P",{});var rAt=s(yMe);jqr=r(rAt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),rAt.forEach(t),Dqr=i(Qw),af=n(Qw,"P",{});var oee=s(af);Gqr=r(oee,`Note:
Loading a model from its configuration file does `),LMe=n(oee,"STRONG",{});var tAt=s(LMe);Oqr=r(tAt,"not"),tAt.forEach(t),Vqr=r(oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),nK=n(oee,"A",{href:!0});var aAt=s(nK);Xqr=r(aAt,"from_pretrained()"),aAt.forEach(t),zqr=r(oee," to load the model weights."),oee.forEach(t),Qqr=i(Qw),T(EC.$$.fragment,Qw),Qw.forEach(t),Wqr=i(ai),Ur=n(ai,"DIV",{class:!0});var ni=s(Ur);T(Kx.$$.fragment,ni),Hqr=i(ni),xMe=n(ni,"P",{});var nAt=s(xMe);Uqr=r(nAt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),nAt.forEach(t),Jqr=i(ni),Cn=n(ni,"P",{});var Ww=s(Cn);Yqr=r(Ww,"The model class to instantiate is selected based on the "),$Me=n(Ww,"CODE",{});var sAt=s($Me);Kqr=r(sAt,"model_type"),sAt.forEach(t),Zqr=r(Ww,` property of the config object (either
passed as an argument or loaded from `),kMe=n(Ww,"CODE",{});var lAt=s(kMe);eNr=r(lAt,"pretrained_model_name_or_path"),lAt.forEach(t),oNr=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SMe=n(Ww,"CODE",{});var iAt=s(SMe);rNr=r(iAt,"pretrained_model_name_or_path"),iAt.forEach(t),tNr=r(Ww,":"),Ww.forEach(t),aNr=i(ni),Zx=n(ni,"UL",{});var nDe=s(Zx);CC=n(nDe,"LI",{});var HPe=s(CC);RMe=n(HPe,"STRONG",{});var dAt=s(RMe);nNr=r(dAt,"beit"),dAt.forEach(t),sNr=r(HPe," \u2014 "),sK=n(HPe,"A",{href:!0});var cAt=s(sK);lNr=r(cAt,"FlaxBeitForImageClassification"),cAt.forEach(t),iNr=r(HPe," (BEiT model)"),HPe.forEach(t),dNr=i(nDe),wC=n(nDe,"LI",{});var UPe=s(wC);BMe=n(UPe,"STRONG",{});var fAt=s(BMe);cNr=r(fAt,"vit"),fAt.forEach(t),fNr=r(UPe," \u2014 "),lK=n(UPe,"A",{href:!0});var mAt=s(lK);mNr=r(mAt,"FlaxViTForImageClassification"),mAt.forEach(t),gNr=r(UPe," (ViT model)"),UPe.forEach(t),nDe.forEach(t),hNr=i(ni),T(AC.$$.fragment,ni),ni.forEach(t),ai.forEach(t),Kqe=i(f),nf=n(f,"H2",{class:!0});var sDe=s(nf);yC=n(sDe,"A",{id:!0,class:!0,href:!0});var gAt=s(yC);PMe=n(gAt,"SPAN",{});var hAt=s(PMe);T(e7.$$.fragment,hAt),hAt.forEach(t),gAt.forEach(t),pNr=i(sDe),IMe=n(sDe,"SPAN",{});var pAt=s(IMe);uNr=r(pAt,"FlaxAutoModelForVision2Seq"),pAt.forEach(t),sDe.forEach(t),Zqe=i(f),Mr=n(f,"DIV",{class:!0});var si=s(Mr);T(o7.$$.fragment,si),_Nr=i(si),sf=n(si,"P",{});var ree=s(sf);bNr=r(ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),iK=n(ree,"A",{href:!0});var uAt=s(iK);vNr=r(uAt,"from_pretrained()"),uAt.forEach(t),FNr=r(ree," class method or the "),dK=n(ree,"A",{href:!0});var _At=s(dK);TNr=r(_At,"from_config()"),_At.forEach(t),MNr=r(ree,` class
method.`),ree.forEach(t),ENr=i(si),r7=n(si,"P",{});var lDe=s(r7);CNr=r(lDe,"This class cannot be instantiated directly using "),qMe=n(lDe,"CODE",{});var bAt=s(qMe);wNr=r(bAt,"__init__()"),bAt.forEach(t),ANr=r(lDe," (throws an error)."),lDe.forEach(t),yNr=i(si),Jt=n(si,"DIV",{class:!0});var Hw=s(Jt);T(t7.$$.fragment,Hw),LNr=i(Hw),NMe=n(Hw,"P",{});var vAt=s(NMe);xNr=r(vAt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),vAt.forEach(t),$Nr=i(Hw),lf=n(Hw,"P",{});var tee=s(lf);kNr=r(tee,`Note:
Loading a model from its configuration file does `),jMe=n(tee,"STRONG",{});var FAt=s(jMe);SNr=r(FAt,"not"),FAt.forEach(t),RNr=r(tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),cK=n(tee,"A",{href:!0});var TAt=s(cK);BNr=r(TAt,"from_pretrained()"),TAt.forEach(t),PNr=r(tee," to load the model weights."),tee.forEach(t),INr=i(Hw),T(LC.$$.fragment,Hw),Hw.forEach(t),qNr=i(si),Jr=n(si,"DIV",{class:!0});var li=s(Jr);T(a7.$$.fragment,li),NNr=i(li),DMe=n(li,"P",{});var MAt=s(DMe);jNr=r(MAt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),MAt.forEach(t),DNr=i(li),wn=n(li,"P",{});var Uw=s(wn);GNr=r(Uw,"The model class to instantiate is selected based on the "),GMe=n(Uw,"CODE",{});var EAt=s(GMe);ONr=r(EAt,"model_type"),EAt.forEach(t),VNr=r(Uw,` property of the config object (either
passed as an argument or loaded from `),OMe=n(Uw,"CODE",{});var CAt=s(OMe);XNr=r(CAt,"pretrained_model_name_or_path"),CAt.forEach(t),zNr=r(Uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VMe=n(Uw,"CODE",{});var wAt=s(VMe);QNr=r(wAt,"pretrained_model_name_or_path"),wAt.forEach(t),WNr=r(Uw,":"),Uw.forEach(t),HNr=i(li),XMe=n(li,"UL",{});var AAt=s(XMe);xC=n(AAt,"LI",{});var JPe=s(xC);zMe=n(JPe,"STRONG",{});var yAt=s(zMe);UNr=r(yAt,"vision-encoder-decoder"),yAt.forEach(t),JNr=r(JPe," \u2014 "),fK=n(JPe,"A",{href:!0});var LAt=s(fK);YNr=r(LAt,"FlaxVisionEncoderDecoderModel"),LAt.forEach(t),KNr=r(JPe," (Vision Encoder decoder model)"),JPe.forEach(t),AAt.forEach(t),ZNr=i(li),T($C.$$.fragment,li),li.forEach(t),si.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(Syt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.AutoTokenizer"),c(hi,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertModel"),c(uf,"id","extending-the-auto-classes"),c(uf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uf,"href","#extending-the-auto-classes"),c(pi,"class","relative group"),c(bf,"id","transformers.AutoConfig"),c(bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bf,"href","#transformers.AutoConfig"),c(ui,"class","relative group"),c(E$,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(C$,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig"),c(w$,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig"),c(A$,"href","/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitConfig"),c(y$,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig"),c(L$,"href","/docs/transformers/pr_16988/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(x$,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig"),c($$,"href","/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(k$,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(S$,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(R$,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig"),c(B$,"href","/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineConfig"),c(P$,"href","/docs/transformers/pr_16988/en/model_doc/clip#transformers.CLIPConfig"),c(I$,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig"),c(q$,"href","/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextConfig"),c(N$,"href","/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLConfig"),c(j$,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(D$,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(G$,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(O$,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaConfig"),c(V$,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(X$,"href","/docs/transformers/pr_16988/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(z$,"href","/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTConfig"),c(Q$,"href","/docs/transformers/pr_16988/en/model_doc/detr#transformers.DetrConfig"),c(W$,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig"),c(H$,"href","/docs/transformers/pr_16988/en/model_doc/dpr#transformers.DPRConfig"),c(U$,"href","/docs/transformers/pr_16988/en/model_doc/dpt#transformers.DPTConfig"),c(J$,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig"),c(Y$,"href","/docs/transformers/pr_16988/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(K$,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig"),c(Z$,"href","/docs/transformers/pr_16988/en/model_doc/flava#transformers.FlavaConfig"),c(ek,"href","/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetConfig"),c(ok,"href","/docs/transformers/pr_16988/en/model_doc/fsmt#transformers.FSMTConfig"),c(rk,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig"),c(tk,"href","/docs/transformers/pr_16988/en/model_doc/glpn#transformers.GLPNConfig"),c(ak,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Config"),c(nk,"href","/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(sk,"href","/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJConfig"),c(lk,"href","/docs/transformers/pr_16988/en/model_doc/hubert#transformers.HubertConfig"),c(ik,"href","/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertConfig"),c(dk,"href","/docs/transformers/pr_16988/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(ck,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(fk,"href","/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(mk,"href","/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDConfig"),c(gk,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig"),c(hk,"href","/docs/transformers/pr_16988/en/model_doc/luke#transformers.LukeConfig"),c(pk,"href","/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertConfig"),c(uk,"href","/docs/transformers/pr_16988/en/model_doc/m2m_100#transformers.M2M100Config"),c(_k,"href","/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianConfig"),c(bk,"href","/docs/transformers/pr_16988/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(vk,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig"),c(Fk,"href","/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(Tk,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(Mk,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig"),c(Ek,"href","/docs/transformers/pr_16988/en/model_doc/mt5#transformers.MT5Config"),c(Ck,"href","/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(wk,"href","/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Ak,"href","/docs/transformers/pr_16988/en/model_doc/opt#transformers.OPTConfig"),c(yk,"href","/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusConfig"),c(Lk,"href","/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverConfig"),c(xk,"href","/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartConfig"),c($k,"href","/docs/transformers/pr_16988/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(kk,"href","/docs/transformers/pr_16988/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(Sk,"href","/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(Rk,"href","/docs/transformers/pr_16988/en/model_doc/rag#transformers.RagConfig"),c(Bk,"href","/docs/transformers/pr_16988/en/model_doc/realm#transformers.RealmConfig"),c(Pk,"href","/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerConfig"),c(Ik,"href","/docs/transformers/pr_16988/en/model_doc/regnet#transformers.RegNetConfig"),c(qk,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig"),c(Nk,"href","/docs/transformers/pr_16988/en/model_doc/resnet#transformers.ResNetConfig"),c(jk,"href","/docs/transformers/pr_16988/en/model_doc/retribert#transformers.RetriBertConfig"),c(Dk,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig"),c(Gk,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig"),c(Ok,"href","/docs/transformers/pr_16988/en/model_doc/segformer#transformers.SegformerConfig"),c(Vk,"href","/docs/transformers/pr_16988/en/model_doc/sew#transformers.SEWConfig"),c(Xk,"href","/docs/transformers/pr_16988/en/model_doc/sew-d#transformers.SEWDConfig"),c(zk,"href","/docs/transformers/pr_16988/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(Qk,"href","/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(Wk,"href","/docs/transformers/pr_16988/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(Hk,"href","/docs/transformers/pr_16988/en/model_doc/splinter#transformers.SplinterConfig"),c(Uk,"href","/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(Jk,"href","/docs/transformers/pr_16988/en/model_doc/swin#transformers.SwinConfig"),c(Yk,"href","/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5Config"),c(Kk,"href","/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasConfig"),c(Zk,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig"),c(eS,"href","/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(oS,"href","/docs/transformers/pr_16988/en/model_doc/trocr#transformers.TrOCRConfig"),c(rS,"href","/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(tS,"href","/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(aS,"href","/docs/transformers/pr_16988/en/model_doc/van#transformers.VanConfig"),c(nS,"href","/docs/transformers/pr_16988/en/model_doc/vilt#transformers.ViltConfig"),c(sS,"href","/docs/transformers/pr_16988/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(lS,"href","/docs/transformers/pr_16988/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(iS,"href","/docs/transformers/pr_16988/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(dS,"href","/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTConfig"),c(cS,"href","/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(fS,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(mS,"href","/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMConfig"),c(gS,"href","/docs/transformers/pr_16988/en/model_doc/xglm#transformers.XGLMConfig"),c(hS,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig"),c(pS,"href","/docs/transformers/pr_16988/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(uS,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(_S,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(bS,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig"),c(vS,"href","/docs/transformers/pr_16988/en/model_doc/yolos#transformers.YolosConfig"),c(FS,"href","/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_g,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bg,"id","transformers.AutoTokenizer"),c(bg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bg,"href","#transformers.AutoTokenizer"),c(bi,"class","relative group"),c(TS,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(MS,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertTokenizer"),c(ES,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(CS,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartTokenizer"),c(wS,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartTokenizerFast"),c(AS,"href","/docs/transformers/pr_16988/en/model_doc/barthez#transformers.BarthezTokenizer"),c(yS,"href","/docs/transformers/pr_16988/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(LS,"href","/docs/transformers/pr_16988/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(xS,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertTokenizer"),c($S,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertTokenizerFast"),c(kS,"href","/docs/transformers/pr_16988/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(SS,"href","/docs/transformers/pr_16988/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(RS,"href","/docs/transformers/pr_16988/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(BS,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(PS,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(IS,"href","/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(qS,"href","/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(NS,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(jS,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(DS,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(GS,"href","/docs/transformers/pr_16988/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(OS,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertTokenizer"),c(VS,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(XS,"href","/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineTokenizer"),c(zS,"href","/docs/transformers/pr_16988/en/model_doc/clip#transformers.CLIPTokenizer"),c(QS,"href","/docs/transformers/pr_16988/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(WS,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(HS,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(US,"href","/docs/transformers/pr_16988/en/model_doc/cpm#transformers.CpmTokenizer"),c(JS,"href","/docs/transformers/pr_16988/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(YS,"href","/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(KS,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaTokenizer"),c(ZS,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(eR,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaTokenizer"),c(oR,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(rR,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(tR,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(aR,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(nR,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(sR,"href","/docs/transformers/pr_16988/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(lR,"href","/docs/transformers/pr_16988/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(iR,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraTokenizer"),c(dR,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(cR,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(fR,"href","/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetTokenizer"),c(mR,"href","/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(gR,"href","/docs/transformers/pr_16988/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(hR,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelTokenizer"),c(pR,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(uR,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(_R,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(bR,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(vR,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(FR,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(TR,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(MR,"href","/docs/transformers/pr_16988/en/model_doc/herbert#transformers.HerbertTokenizer"),c(ER,"href","/docs/transformers/pr_16988/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(CR,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(wR,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaTokenizer"),c(AR,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(yR,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(LR,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(xR,"href","/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c($R,"href","/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(kR,"href","/docs/transformers/pr_16988/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(SR,"href","/docs/transformers/pr_16988/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(RR,"href","/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDTokenizer"),c(BR,"href","/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDTokenizerFast"),c(PR,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerTokenizer"),c(IR,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(qR,"href","/docs/transformers/pr_16988/en/model_doc/luke#transformers.LukeTokenizer"),c(NR,"href","/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(jR,"href","/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(DR,"href","/docs/transformers/pr_16988/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(GR,"href","/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianTokenizer"),c(OR,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartTokenizer"),c(VR,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(XR,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(zR,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(QR,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertTokenizer"),c(WR,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertTokenizerFast"),c(HR,"href","/docs/transformers/pr_16988/en/model_doc/mluke#transformers.MLukeTokenizer"),c(UR,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(JR,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(YR,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(KR,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(ZR,"href","/docs/transformers/pr_16988/en/model_doc/mt5#transformers.T5Tokenizer"),c(eB,"href","/docs/transformers/pr_16988/en/model_doc/mt5#transformers.T5TokenizerFast"),c(oB,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertTokenizer"),c(rB,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(tB,"href","/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(aB,"href","/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(nB,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(sB,"href","/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(lB,"href","/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(iB,"href","/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(dB,"href","/docs/transformers/pr_16988/en/model_doc/phobert#transformers.PhobertTokenizer"),c(cB,"href","/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartTokenizer"),c(fB,"href","/docs/transformers/pr_16988/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(mB,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertTokenizer"),c(gB,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertTokenizerFast"),c(hB,"href","/docs/transformers/pr_16988/en/model_doc/rag#transformers.RagTokenizer"),c(pB,"href","/docs/transformers/pr_16988/en/model_doc/realm#transformers.RealmTokenizer"),c(uB,"href","/docs/transformers/pr_16988/en/model_doc/realm#transformers.RealmTokenizerFast"),c(_B,"href","/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerTokenizer"),c(bB,"href","/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(vB,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertTokenizer"),c(FB,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(TB,"href","/docs/transformers/pr_16988/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(MB,"href","/docs/transformers/pr_16988/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(EB,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaTokenizer"),c(CB,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(wB,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(AB,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(yB,"href","/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(LB,"href","/docs/transformers/pr_16988/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(xB,"href","/docs/transformers/pr_16988/en/model_doc/splinter#transformers.SplinterTokenizer"),c($B,"href","/docs/transformers/pr_16988/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(kB,"href","/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(SB,"href","/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(RB,"href","/docs/transformers/pr_16988/en/model_doc/mt5#transformers.T5Tokenizer"),c(BB,"href","/docs/transformers/pr_16988/en/model_doc/mt5#transformers.T5TokenizerFast"),c(PB,"href","/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasTokenizer"),c(IB,"href","/docs/transformers/pr_16988/en/model_doc/tapex#transformers.TapexTokenizer"),c(qB,"href","/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(NB,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertTokenizer"),c(jB,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertTokenizerFast"),c(DB,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(GB,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(OB,"href","/docs/transformers/pr_16988/en/model_doc/xglm#transformers.XGLMTokenizer"),c(VB,"href","/docs/transformers/pr_16988/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(XB,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMTokenizer"),c(zB,"href","/docs/transformers/pr_16988/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(QB,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(WB,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(HB,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaTokenizer"),c(UB,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(JB,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(YB,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(KB,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertTokenizer"),c(ZB,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yg,"id","transformers.AutoFeatureExtractor"),c(Yg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Yg,"href","#transformers.AutoFeatureExtractor"),c(vi,"class","relative group"),c(eP,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(oP,"href","/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(rP,"href","/docs/transformers/pr_16988/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(tP,"href","/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(aP,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(nP,"href","/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(sP,"href","/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(lP,"href","/docs/transformers/pr_16988/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(iP,"href","/docs/transformers/pr_16988/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(dP,"href","/docs/transformers/pr_16988/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(cP,"href","/docs/transformers/pr_16988/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(fP,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(mP,"href","/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(gP,"href","/docs/transformers/pr_16988/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(hP,"href","/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(pP,"href","/docs/transformers/pr_16988/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(uP,"href","/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(_P,"href","/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(bP,"href","/docs/transformers/pr_16988/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(vP,"href","/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(FP,"href","/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(TP,"href","/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(MP,"href","/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(EP,"href","/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(CP,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(wP,"href","/docs/transformers/pr_16988/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ah,"id","transformers.AutoProcessor"),c(Ah,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ah,"href","#transformers.AutoProcessor"),c(Fi,"class","relative group"),c(AP,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(yP,"href","/docs/transformers/pr_16988/en/model_doc/clip#transformers.CLIPProcessor"),c(LP,"href","/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(xP,"href","/docs/transformers/pr_16988/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c($P,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(kP,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(SP,"href","/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(RP,"href","/docs/transformers/pr_16988/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(BP,"href","/docs/transformers/pr_16988/en/model_doc/trocr#transformers.TrOCRProcessor"),c(PP,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(IP,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(qP,"href","/docs/transformers/pr_16988/en/model_doc/vilt#transformers.ViltProcessor"),c(NP,"href","/docs/transformers/pr_16988/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(jP,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(DP,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zh,"id","transformers.AutoModel"),c(zh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zh,"href","#transformers.AutoModel"),c(Mi,"class","relative group"),c(GP,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OP,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VP,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XP,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertModel"),c(zP,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartModel"),c(QP,"href","/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitModel"),c(WP,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertModel"),c(HP,"href","/docs/transformers/pr_16988/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(UP,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdModel"),c(JP,"href","/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(YP,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(KP,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(ZP,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertModel"),c(eI,"href","/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineModel"),c(oI,"href","/docs/transformers/pr_16988/en/model_doc/clip#transformers.CLIPModel"),c(rI,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertModel"),c(tI,"href","/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextModel"),c(aI,"href","/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLModel"),c(nI,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(sI,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(lI,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(iI,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaModel"),c(dI,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(cI,"href","/docs/transformers/pr_16988/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(fI,"href","/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTModel"),c(mI,"href","/docs/transformers/pr_16988/en/model_doc/detr#transformers.DetrModel"),c(gI,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertModel"),c(hI,"href","/docs/transformers/pr_16988/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(pI,"href","/docs/transformers/pr_16988/en/model_doc/dpt#transformers.DPTModel"),c(uI,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraModel"),c(_I,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertModel"),c(bI,"href","/docs/transformers/pr_16988/en/model_doc/flava#transformers.FlavaModel"),c(vI,"href","/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetModel"),c(FI,"href","/docs/transformers/pr_16988/en/model_doc/fsmt#transformers.FSMTModel"),c(TI,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelModel"),c(MI,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelBaseModel"),c(EI,"href","/docs/transformers/pr_16988/en/model_doc/glpn#transformers.GLPNModel"),c(CI,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Model"),c(wI,"href","/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(AI,"href","/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJModel"),c(yI,"href","/docs/transformers/pr_16988/en/model_doc/hubert#transformers.HubertModel"),c(LI,"href","/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertModel"),c(xI,"href","/docs/transformers/pr_16988/en/model_doc/imagegpt#transformers.ImageGPTModel"),c($I,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(kI,"href","/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(SI,"href","/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDModel"),c(RI,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerModel"),c(BI,"href","/docs/transformers/pr_16988/en/model_doc/luke#transformers.LukeModel"),c(PI,"href","/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertModel"),c(II,"href","/docs/transformers/pr_16988/en/model_doc/m2m_100#transformers.M2M100Model"),c(qI,"href","/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianModel"),c(NI,"href","/docs/transformers/pr_16988/en/model_doc/maskformer#transformers.MaskFormerModel"),c(jI,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartModel"),c(DI,"href","/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(GI,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertModel"),c(OI,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetModel"),c(VI,"href","/docs/transformers/pr_16988/en/model_doc/mt5#transformers.MT5Model"),c(XI,"href","/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerModel"),c(zI,"href","/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(QI,"href","/docs/transformers/pr_16988/en/model_doc/opt#transformers.OPTModel"),c(WI,"href","/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusModel"),c(HI,"href","/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverModel"),c(UI,"href","/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartModel"),c(JI,"href","/docs/transformers/pr_16988/en/model_doc/poolformer#transformers.PoolFormerModel"),c(YI,"href","/docs/transformers/pr_16988/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(KI,"href","/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertModel"),c(ZI,"href","/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerModel"),c(eq,"href","/docs/transformers/pr_16988/en/model_doc/regnet#transformers.RegNetModel"),c(oq,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertModel"),c(rq,"href","/docs/transformers/pr_16988/en/model_doc/resnet#transformers.ResNetModel"),c(tq,"href","/docs/transformers/pr_16988/en/model_doc/retribert#transformers.RetriBertModel"),c(aq,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaModel"),c(nq,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerModel"),c(sq,"href","/docs/transformers/pr_16988/en/model_doc/segformer#transformers.SegformerModel"),c(lq,"href","/docs/transformers/pr_16988/en/model_doc/sew#transformers.SEWModel"),c(iq,"href","/docs/transformers/pr_16988/en/model_doc/sew-d#transformers.SEWDModel"),c(dq,"href","/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(cq,"href","/docs/transformers/pr_16988/en/model_doc/splinter#transformers.SplinterModel"),c(fq,"href","/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(mq,"href","/docs/transformers/pr_16988/en/model_doc/swin#transformers.SwinModel"),c(gq,"href","/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5Model"),c(hq,"href","/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasModel"),c(pq,"href","/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(uq,"href","/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechModel"),c(_q,"href","/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(bq,"href","/docs/transformers/pr_16988/en/model_doc/van#transformers.VanModel"),c(vq,"href","/docs/transformers/pr_16988/en/model_doc/vilt#transformers.ViltModel"),c(Fq,"href","/docs/transformers/pr_16988/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Tq,"href","/docs/transformers/pr_16988/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Mq,"href","/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTModel"),c(Eq,"href","/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Cq,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(wq,"href","/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMModel"),c(Aq,"href","/docs/transformers/pr_16988/en/model_doc/xglm#transformers.XGLMModel"),c(yq,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMModel"),c(Lq,"href","/docs/transformers/pr_16988/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(xq,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c($q,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(kq,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetModel"),c(Sq,"href","/docs/transformers/pr_16988/en/model_doc/yolos#transformers.YolosModel"),c(Rq,"href","/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qu,"id","transformers.AutoModelForPreTraining"),c(qu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qu,"href","#transformers.AutoModelForPreTraining"),c(wi,"class","relative group"),c(Bq,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pq,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Iq,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qq,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Nq,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(jq,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForPreTraining"),c(Dq,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Gq,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Oq,"href","/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Vq,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Xq,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(zq,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Qq,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Wq,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForPreTraining"),c(Hq,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Uq,"href","/docs/transformers/pr_16988/en/model_doc/flava#transformers.FlavaForPreTraining"),c(Jq,"href","/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForPreTraining"),c(Yq,"href","/docs/transformers/pr_16988/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Kq,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(Zq,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(eN,"href","/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(oN,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(rN,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(tN,"href","/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(aN,"href","/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(nN,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(sN,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(lN,"href","/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(iN,"href","/docs/transformers/pr_16988/en/model_doc/retribert#transformers.RetriBertModel"),c(dN,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(cN,"href","/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(fN,"href","/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(mN,"href","/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(gN,"href","/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(hN,"href","/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(pN,"href","/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(uN,"href","/docs/transformers/pr_16988/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(_N,"href","/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(bN,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(vN,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(FN,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(TN,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(MN,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y_,"id","transformers.AutoModelForCausalLM"),c(y_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y_,"href","#transformers.AutoModelForCausalLM"),c(Li,"class","relative group"),c(EN,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CN,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wN,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AN,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForCausalLM"),c(yN,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertLMHeadModel"),c(LN,"href","/docs/transformers/pr_16988/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(xN,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c($N,"href","/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(kN,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(SN,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(RN,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(BN,"href","/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(PN,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(IN,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForCausalLM"),c(qN,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(NN,"href","/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(jN,"href","/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(DN,"href","/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianForCausalLM"),c(GN,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartForCausalLM"),c(ON,"href","/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(VN,"href","/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(XN,"href","/docs/transformers/pr_16988/en/model_doc/opt#transformers.OPTForCausalLM"),c(zN,"href","/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(QN,"href","/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(WN,"href","/docs/transformers/pr_16988/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(HN,"href","/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(UN,"href","/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(JN,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(YN,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(KN,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(ZN,"href","/docs/transformers/pr_16988/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(ej,"href","/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(oj,"href","/docs/transformers/pr_16988/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(rj,"href","/docs/transformers/pr_16988/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(tj,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(aj,"href","/docs/transformers/pr_16988/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(nj,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(sj,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(lj,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g1,"id","transformers.AutoModelForMaskedLM"),c(g1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g1,"href","#transformers.AutoModelForMaskedLM"),c(ki,"class","relative group"),c(ij,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dj,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cj,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fj,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(mj,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(gj,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForMaskedLM"),c(hj,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(pj,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(uj,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(_j,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(bj,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(vj,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Fj,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Tj,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(Mj,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Ej,"href","/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(Cj,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(wj,"href","/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Aj,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(yj,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Lj,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(xj,"href","/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c($j,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(kj,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Sj,"href","/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(Rj,"href","/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(Bj,"href","/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(Pj,"href","/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(Ij,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(qj,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Nj,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(jj,"href","/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Dj,"href","/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Gj,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Oj,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Vj,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Xj,"href","/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K1,"id","transformers.AutoModelForSeq2SeqLM"),c(K1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Bi,"class","relative group"),c(zj,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qj,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Wj,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hj,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Uj,"href","/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(Jj,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(Yj,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(Kj,"href","/docs/transformers/pr_16988/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(Zj,"href","/docs/transformers/pr_16988/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(eD,"href","/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(oD,"href","/docs/transformers/pr_16988/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(rD,"href","/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianMTModel"),c(tD,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(aD,"href","/docs/transformers/pr_16988/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(nD,"href","/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(sD,"href","/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(lD,"href","/docs/transformers/pr_16988/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(iD,"href","/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(dD,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(cD,"href","/docs/transformers/pr_16988/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v8,"id","transformers.AutoModelForSequenceClassification"),c(v8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v8,"href","#transformers.AutoModelForSequenceClassification"),c(qi,"class","relative group"),c(fD,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mD,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gD,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hD,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(pD,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForSequenceClassification"),c(uD,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForSequenceClassification"),c(_D,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(bD,"href","/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(vD,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(FD,"href","/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(TD,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(MD,"href","/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(ED,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(CD,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(wD,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(AD,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(yD,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(LD,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(xD,"href","/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c($D,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(kD,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(SD,"href","/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(RD,"href","/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(BD,"href","/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(PD,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(ID,"href","/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(qD,"href","/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDForSequenceClassification"),c(ND,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(jD,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(DD,"href","/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(GD,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(OD,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(VD,"href","/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(XD,"href","/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(zD,"href","/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(QD,"href","/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(WD,"href","/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(HD,"href","/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(UD,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(JD,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(YD,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(KD,"href","/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(ZD,"href","/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(eG,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForSequenceClassification"),c(oG,"href","/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(rG,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(tG,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(aG,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(nG,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(sG,"href","/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ub,"id","transformers.AutoModelForMultipleChoice"),c(ub,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ub,"href","#transformers.AutoModelForMultipleChoice"),c(Di,"class","relative group"),c(lG,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iG,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dG,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cG,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(fG,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForMultipleChoice"),c(mG,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(gG,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(hG,"href","/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(pG,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(uG,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(_G,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(bG,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(vG,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(FG,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(TG,"href","/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(MG,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(EG,"href","/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(CG,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(wG,"href","/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(AG,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(yG,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(LG,"href","/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(xG,"href","/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c($G,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(kG,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(SG,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(RG,"href","/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(BG,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(PG,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(IG,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(qG,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(NG,"href","/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ub,"id","transformers.AutoModelForNextSentencePrediction"),c(Ub,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ub,"href","#transformers.AutoModelForNextSentencePrediction"),c(Vi,"class","relative group"),c(jG,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DG,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GG,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OG,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(VG,"href","/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(XG,"href","/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(zG,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(QG,"href","/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a2,"id","transformers.AutoModelForTokenClassification"),c(a2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a2,"href","#transformers.AutoModelForTokenClassification"),c(Qi,"class","relative group"),c(WG,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HG,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UG,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JG,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(YG,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForTokenClassification"),c(KG,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(ZG,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(eO,"href","/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineForTokenClassification"),c(oO,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(rO,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(tO,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(aO,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(nO,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(sO,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(lO,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(iO,"href","/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(dO,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(cO,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(fO,"href","/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(mO,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(gO,"href","/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(hO,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(pO,"href","/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(uO,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(_O,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(bO,"href","/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(vO,"href","/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(FO,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(TO,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(MO,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(EO,"href","/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(CO,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(wO,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(AO,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(yO,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(LO,"href","/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G2,"id","transformers.AutoModelForQuestionAnswering"),c(G2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G2,"href","#transformers.AutoModelForQuestionAnswering"),c(Ui,"class","relative group"),c(xO,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($O,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kO,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SO,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(RO,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(BO,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(PO,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(IO,"href","/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(qO,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(NO,"href","/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(jO,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(DO,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(GO,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(OO,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(VO,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(XO,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(zO,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(QO,"href","/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(WO,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(HO,"href","/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(UO,"href","/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(JO,"href","/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(YO,"href","/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(KO,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(ZO,"href","/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(eV,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(oV,"href","/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(rV,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(tV,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(aV,"href","/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(nV,"href","/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(sV,"href","/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(lV,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(iV,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(dV,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(cV,"href","/docs/transformers/pr_16988/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(fV,"href","/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(mV,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(gV,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(hV,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(pV,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(uV,"href","/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($v,"id","transformers.AutoModelForTableQuestionAnswering"),c($v,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($v,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Ki,"class","relative group"),c(_V,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FV,"href","/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pv,"id","transformers.AutoModelForImageClassification"),c(Pv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pv,"href","#transformers.AutoModelForImageClassification"),c(od,"class","relative group"),c(TV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CV,"href","/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitForImageClassification"),c(wV,"href","/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(AV,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(yV,"href","/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTForImageClassification"),c(LV,"href","/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(xV,"href","/docs/transformers/pr_16988/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c($V,"href","/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(kV,"href","/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(SV,"href","/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(RV,"href","/docs/transformers/pr_16988/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(BV,"href","/docs/transformers/pr_16988/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(PV,"href","/docs/transformers/pr_16988/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(IV,"href","/docs/transformers/pr_16988/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(qV,"href","/docs/transformers/pr_16988/en/model_doc/swin#transformers.SwinForImageClassification"),c(NV,"href","/docs/transformers/pr_16988/en/model_doc/van#transformers.VanForImageClassification"),c(jV,"href","/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTForImageClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jv,"id","transformers.AutoModelForVision2Seq"),c(Jv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jv,"href","#transformers.AutoModelForVision2Seq"),c(ad,"class","relative group"),c(DV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VV,"href","/docs/transformers/pr_16988/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oF,"id","transformers.AutoModelForAudioClassification"),c(oF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oF,"href","#transformers.AutoModelForAudioClassification"),c(ld,"class","relative group"),c(XV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WV,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(HV,"href","/docs/transformers/pr_16988/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(UV,"href","/docs/transformers/pr_16988/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(JV,"href","/docs/transformers/pr_16988/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(YV,"href","/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(KV,"href","/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(ZV,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(eX,"href","/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gF,"id","transformers.AutoModelForAudioFrameClassification"),c(gF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gF,"href","#transformers.AutoModelForAudioFrameClassification"),c(cd,"class","relative group"),c(oX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aX,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(nX,"href","/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(sX,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(lX,"href","/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TF,"id","transformers.AutoModelForCTC"),c(TF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TF,"href","#transformers.AutoModelForCTC"),c(gd,"class","relative group"),c(iX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fX,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(mX,"href","/docs/transformers/pr_16988/en/model_doc/hubert#transformers.HubertForCTC"),c(gX,"href","/docs/transformers/pr_16988/en/model_doc/sew#transformers.SEWForCTC"),c(hX,"href","/docs/transformers/pr_16988/en/model_doc/sew-d#transformers.SEWDForCTC"),c(pX,"href","/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(uX,"href","/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(_X,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(bX,"href","/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMForCTC"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(RF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(ud,"class","relative group"),c(vX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MX,"href","/docs/transformers/pr_16988/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(EX,"href","/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jF,"id","transformers.AutoModelForAudioXVector"),c(jF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jF,"href","#transformers.AutoModelForAudioXVector"),c(vd,"class","relative group"),c(CX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yX,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(LX,"href","/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(xX,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c($X,"href","/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMForXVector"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WF,"id","transformers.AutoModelForMaskedImageModeling"),c(WF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WF,"href","#transformers.AutoModelForMaskedImageModeling"),c(Md,"class","relative group"),c(kX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BX,"href","/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(PX,"href","/docs/transformers/pr_16988/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(IX,"href","/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e6,"id","transformers.AutoModelForObjectDetection"),c(e6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e6,"href","#transformers.AutoModelForObjectDetection"),c(Ad,"class","relative group"),c(qX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DX,"href","/docs/transformers/pr_16988/en/model_doc/detr#transformers.DetrForObjectDetection"),c(GX,"href","/docs/transformers/pr_16988/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s6,"id","transformers.AutoModelForImageSegmentation"),c(s6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s6,"href","#transformers.AutoModelForImageSegmentation"),c(xd,"class","relative group"),c(OX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zX,"href","/docs/transformers/pr_16988/en/model_doc/detr#transformers.DetrForSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f6,"id","transformers.AutoModelForSemanticSegmentation"),c(f6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f6,"href","#transformers.AutoModelForSemanticSegmentation"),c(Sd,"class","relative group"),c(QX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UX,"href","/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(JX,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(YX,"href","/docs/transformers/pr_16988/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(KX,"href","/docs/transformers/pr_16988/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v6,"id","transformers.AutoModelForInstanceSegmentation"),c(v6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v6,"href","#transformers.AutoModelForInstanceSegmentation"),c(Pd,"class","relative group"),c(ZX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ez,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oz,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rz,"href","/docs/transformers/pr_16988/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C6,"id","transformers.TFAutoModel"),c(C6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C6,"href","#transformers.TFAutoModel"),c(Nd,"class","relative group"),c(tz,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(az,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nz,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sz,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertModel"),c(lz,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.TFBartModel"),c(iz,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertModel"),c(dz,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(cz,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(fz,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertModel"),c(mz,"href","/docs/transformers/pr_16988/en/model_doc/clip#transformers.TFCLIPModel"),c(gz,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.TFConvBertModel"),c(hz,"href","/docs/transformers/pr_16988/en/model_doc/convnext#transformers.TFConvNextModel"),c(pz,"href","/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.TFCTRLModel"),c(uz,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(_z,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.TFDebertaModel"),c(bz,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(vz,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(Fz,"href","/docs/transformers/pr_16988/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(Tz,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraModel"),c(Mz,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(Ez,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelModel"),c(Cz,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(wz,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.TFGPT2Model"),c(Az,"href","/docs/transformers/pr_16988/en/model_doc/gptj#transformers.TFGPTJModel"),c(yz,"href","/docs/transformers/pr_16988/en/model_doc/hubert#transformers.TFHubertModel"),c(Lz,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(xz,"href","/docs/transformers/pr_16988/en/model_doc/led#transformers.TFLEDModel"),c($z,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.TFLongformerModel"),c(kz,"href","/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.TFLxmertModel"),c(Sz,"href","/docs/transformers/pr_16988/en/model_doc/marian#transformers.TFMarianModel"),c(Rz,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.TFMBartModel"),c(Bz,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(Pz,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetModel"),c(Iz,"href","/docs/transformers/pr_16988/en/model_doc/mt5#transformers.TFMT5Model"),c(qz,"href","/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(Nz,"href","/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.TFPegasusModel"),c(jz,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertModel"),c(Dz,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaModel"),c(Gz,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerModel"),c(Oz,"href","/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(Vz,"href","/docs/transformers/pr_16988/en/model_doc/swin#transformers.TFSwinModel"),c(Xz,"href","/docs/transformers/pr_16988/en/model_doc/t5#transformers.TFT5Model"),c(zz,"href","/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TFTapasModel"),c(Qz,"href","/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(Wz,"href","/docs/transformers/pr_16988/en/model_doc/vit#transformers.TFViTModel"),c(Hz,"href","/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(Uz,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(Jz,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMModel"),c(Yz,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(Kz,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bT,"id","transformers.TFAutoModelForPreTraining"),c(bT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bT,"href","#transformers.TFAutoModelForPreTraining"),c(Gd,"class","relative group"),c(Zz,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eQ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oQ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rQ,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(tQ,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(aQ,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForPreTraining"),c(nQ,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(sQ,"href","/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(lQ,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(iQ,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(dQ,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(cQ,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(fQ,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(mQ,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(gQ,"href","/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(hQ,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(pQ,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(uQ,"href","/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(_Q,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(bQ,"href","/docs/transformers/pr_16988/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(vQ,"href","/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(FQ,"href","/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(TQ,"href","/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(MQ,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(EQ,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(CQ,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XT,"id","transformers.TFAutoModelForCausalLM"),c(XT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XT,"href","#transformers.TFAutoModelForCausalLM"),c(Xd,"class","relative group"),c(wQ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AQ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yQ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LQ,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(xQ,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c($Q,"href","/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(kQ,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(SQ,"href","/docs/transformers/pr_16988/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(RQ,"href","/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(BQ,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(PQ,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(IQ,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(qQ,"href","/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(NQ,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(jQ,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n9,"id","transformers.TFAutoModelForImageClassification"),c(n9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n9,"href","#transformers.TFAutoModelForImageClassification"),c(Wd,"class","relative group"),c(DQ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GQ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OQ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VQ,"href","/docs/transformers/pr_16988/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(XQ,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(zQ,"href","/docs/transformers/pr_16988/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(QQ,"href","/docs/transformers/pr_16988/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m9,"id","transformers.TFAutoModelForMaskedLM"),c(m9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m9,"href","#transformers.TFAutoModelForMaskedLM"),c(Jd,"class","relative group"),c(WQ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HQ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UQ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JQ,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(YQ,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(KQ,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(ZQ,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(eW,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(oW,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(rW,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(tW,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(aW,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(nW,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(sW,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(lW,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(iW,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(dW,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(cW,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(fW,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(mW,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(gW,"href","/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(hW,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(pW,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P9,"id","transformers.TFAutoModelForSeq2SeqLM"),c(P9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P9,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Zd,"class","relative group"),c(uW,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_W,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bW,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vW,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(FW,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(TW,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(MW,"href","/docs/transformers/pr_16988/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(EW,"href","/docs/transformers/pr_16988/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(CW,"href","/docs/transformers/pr_16988/en/model_doc/marian#transformers.TFMarianMTModel"),c(wW,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(AW,"href","/docs/transformers/pr_16988/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(yW,"href","/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(LW,"href","/docs/transformers/pr_16988/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H9,"id","transformers.TFAutoModelForSequenceClassification"),c(H9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H9,"href","#transformers.TFAutoModelForSequenceClassification"),c(rc,"class","relative group"),c(xW,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($W,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kW,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SW,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(RW,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(BW,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(PW,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(IW,"href","/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(qW,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(NW,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(jW,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(DW,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(GW,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(OW,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(VW,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(XW,"href","/docs/transformers/pr_16988/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(zW,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(QW,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(WW,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(HW,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(UW,"href","/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(JW,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(YW,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(KW,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(ZW,"href","/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(eH,"href","/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(oH,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(rH,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(tH,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EM,"id","transformers.TFAutoModelForMultipleChoice"),c(EM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EM,"href","#transformers.TFAutoModelForMultipleChoice"),c(nc,"class","relative group"),c(aH,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nH,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sH,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lH,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(iH,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(dH,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(cH,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(fH,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(mH,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(gH,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(hH,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(pH,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(uH,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(_H,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(bH,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(vH,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(FH,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(TH,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(MH,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(EH,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VM,"id","transformers.TFAutoModelForNextSentencePrediction"),c(VM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VM,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(ic,"class","relative group"),c(CH,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wH,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AH,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yH,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(LH,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HM,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(HM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(fc,"class","relative group"),c(xH,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($H,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kH,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SH,"href","/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KM,"id","transformers.TFAutoModelForTokenClassification"),c(KM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KM,"href","#transformers.TFAutoModelForTokenClassification"),c(hc,"class","relative group"),c(RH,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BH,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PH,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IH,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(qH,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(NH,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(jH,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(DH,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(GH,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(OH,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(VH,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(XH,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(zH,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(QH,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(WH,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(HH,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(UH,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(JH,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(YH,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(KH,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(ZH,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(eU,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(oU,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T4,"id","transformers.TFAutoModelForQuestionAnswering"),c(T4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(_c,"class","relative group"),c(rU,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tU,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aU,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nU,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(sU,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(lU,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(iU,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(dU,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(cU,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(fU,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(mU,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(gU,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(hU,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(pU,"href","/docs/transformers/pr_16988/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(uU,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(_U,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(bU,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(vU,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(FU,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(TU,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(MU,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(EU,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(CU,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X4,"id","transformers.TFAutoModelForVision2Seq"),c(X4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X4,"href","#transformers.TFAutoModelForVision2Seq"),c(Fc,"class","relative group"),c(wU,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AU,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yU,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LU,"href","/docs/transformers/pr_16988/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H4,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(H4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H4,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ec,"class","relative group"),c(xU,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($U,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kU,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SU,"href","/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K4,"id","transformers.FlaxAutoModel"),c(K4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K4,"href","#transformers.FlaxAutoModel"),c(Ac,"class","relative group"),c(RU,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BU,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PU,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IU,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertModel"),c(qU,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartModel"),c(NU,"href","/docs/transformers/pr_16988/en/model_doc/beit#transformers.FlaxBeitModel"),c(jU,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertModel"),c(DU,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(GU,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(OU,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(VU,"href","/docs/transformers/pr_16988/en/model_doc/clip#transformers.FlaxCLIPModel"),c(XU,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(zU,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraModel"),c(QU,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(WU,"href","/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(HU,"href","/docs/transformers/pr_16988/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(UU,"href","/docs/transformers/pr_16988/en/model_doc/marian#transformers.FlaxMarianModel"),c(JU,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.FlaxMBartModel"),c(YU,"href","/docs/transformers/pr_16988/en/model_doc/mt5#transformers.FlaxMT5Model"),c(KU,"href","/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(ZU,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(eJ,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(oJ,"href","/docs/transformers/pr_16988/en/model_doc/t5#transformers.FlaxT5Model"),c(rJ,"href","/docs/transformers/pr_16988/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(tJ,"href","/docs/transformers/pr_16988/en/model_doc/vit#transformers.FlaxViTModel"),c(aJ,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(nJ,"href","/docs/transformers/pr_16988/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(sJ,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AE,"id","transformers.FlaxAutoModelForCausalLM"),c(AE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AE,"href","#transformers.FlaxAutoModelForCausalLM"),c(xc,"class","relative group"),c(lJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cJ,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(fJ,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(mJ,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(gJ,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(hJ,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(pJ,"href","/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(uJ,"href","/docs/transformers/pr_16988/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(_J,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(bJ,"href","/docs/transformers/pr_16988/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NE,"id","transformers.FlaxAutoModelForPreTraining"),c(NE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NE,"href","#transformers.FlaxAutoModelForPreTraining"),c(Sc,"class","relative group"),c(vJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MJ,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(EJ,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(CJ,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(wJ,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(AJ,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(yJ,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(LJ,"href","/docs/transformers/pr_16988/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(xJ,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c($J,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(kJ,"href","/docs/transformers/pr_16988/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(SJ,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(RJ,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZE,"id","transformers.FlaxAutoModelForMaskedLM"),c(ZE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZE,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Pc,"class","relative group"),c(BJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qJ,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(NJ,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(jJ,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(DJ,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(GJ,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(OJ,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(VJ,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(XJ,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(zJ,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(QJ,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(m5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Nc,"class","relative group"),c(WJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JJ,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(YJ,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(KJ,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(ZJ,"href","/docs/transformers/pr_16988/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(eY,"href","/docs/transformers/pr_16988/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(oY,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(rY,"href","/docs/transformers/pr_16988/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(tY,"href","/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(aY,"href","/docs/transformers/pr_16988/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(C5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Gc,"class","relative group"),c(nY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iY,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(dY,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(cY,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(fY,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(mY,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(gY,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(hY,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(pY,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(uY,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(_Y,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(q5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Xc,"class","relative group"),c(bY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TY,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(MY,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(EY,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(CY,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(wY,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(AY,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(yY,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(LY,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(xY,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c($Y,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J5,"id","transformers.FlaxAutoModelForTokenClassification"),c(J5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J5,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Wc,"class","relative group"),c(kY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BY,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(PY,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(IY,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(qY,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(NY,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(jY,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(DY,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(GY,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lC,"id","transformers.FlaxAutoModelForMultipleChoice"),c(lC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lC,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Jc,"class","relative group"),c(OY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zY,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(QY,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(WY,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(HY,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(UY,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(JY,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(YY,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(KY,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bC,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(bC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bC,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Zc,"class","relative group"),c(ZY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eK,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oK,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rK,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MC,"id","transformers.FlaxAutoModelForImageClassification"),c(MC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MC,"href","#transformers.FlaxAutoModelForImageClassification"),c(rf,"class","relative group"),c(tK,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aK,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nK,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sK,"href","/docs/transformers/pr_16988/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(lK,"href","/docs/transformers/pr_16988/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yC,"id","transformers.FlaxAutoModelForVision2Seq"),c(yC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yC,"href","#transformers.FlaxAutoModelForVision2Seq"),c(nf,"class","relative group"),c(iK,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dK,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cK,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fK,"href","/docs/transformers/pr_16988/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,ii),b(f,mf,_),b(f,et,_),e(et,di),e(et,ci),e(ci,Jw),e(et,gf),b(f,qe,_),b(f,Xe,_),e(Xe,fi),e(Xe,yn),e(yn,Yw),e(Xe,Ln),e(Xe,xn),e(xn,Kw),e(Xe,mi),e(Xe,$n),e($n,Zw),e(Xe,gi),b(f,hf,_),M(Ma,f,_),b(f,ze,_),b(f,Ae,_),e(Ae,_$),e(Ae,hi),e(hi,b$),e(Ae,v$),b(f,Eo,_),b(f,Ea,_),e(Ea,F$),e(Ea,pf),e(pf,T$),e(Ea,iDe),b(f,YPe,_),b(f,pi,_),e(pi,uf),e(uf,aee),M(eA,aee,null),e(pi,dDe),e(pi,nee),e(nee,cDe),b(f,KPe,_),b(f,kn,_),e(kn,fDe),e(kn,see),e(see,mDe),e(kn,gDe),e(kn,lee),e(lee,hDe),e(kn,pDe),b(f,ZPe,_),M(oA,f,_),b(f,eIe,_),b(f,M$,_),e(M$,uDe),b(f,oIe,_),M(_f,f,_),b(f,rIe,_),b(f,ui,_),e(ui,bf),e(bf,iee),M(rA,iee,null),e(ui,_De),e(ui,dee),e(dee,bDe),b(f,tIe,_),b(f,Co,_),M(tA,Co,null),e(Co,vDe),e(Co,aA),e(aA,FDe),e(aA,E$),e(E$,TDe),e(aA,MDe),e(Co,EDe),e(Co,nA),e(nA,CDe),e(nA,cee),e(cee,wDe),e(nA,ADe),e(Co,yDe),e(Co,Er),M(sA,Er,null),e(Er,LDe),e(Er,fee),e(fee,xDe),e(Er,$De),e(Er,_i),e(_i,kDe),e(_i,mee),e(mee,SDe),e(_i,RDe),e(_i,gee),e(gee,BDe),e(_i,PDe),e(Er,IDe),e(Er,A),e(A,vf),e(vf,hee),e(hee,qDe),e(vf,NDe),e(vf,C$),e(C$,jDe),e(vf,DDe),e(A,GDe),e(A,Ff),e(Ff,pee),e(pee,ODe),e(Ff,VDe),e(Ff,w$),e(w$,XDe),e(Ff,zDe),e(A,QDe),e(A,Tf),e(Tf,uee),e(uee,WDe),e(Tf,HDe),e(Tf,A$),e(A$,UDe),e(Tf,JDe),e(A,YDe),e(A,Mf),e(Mf,_ee),e(_ee,KDe),e(Mf,ZDe),e(Mf,y$),e(y$,eGe),e(Mf,oGe),e(A,rGe),e(A,Ef),e(Ef,bee),e(bee,tGe),e(Ef,aGe),e(Ef,L$),e(L$,nGe),e(Ef,sGe),e(A,lGe),e(A,Cf),e(Cf,vee),e(vee,iGe),e(Cf,dGe),e(Cf,x$),e(x$,cGe),e(Cf,fGe),e(A,mGe),e(A,wf),e(wf,Fee),e(Fee,gGe),e(wf,hGe),e(wf,$$),e($$,pGe),e(wf,uGe),e(A,_Ge),e(A,Af),e(Af,Tee),e(Tee,bGe),e(Af,vGe),e(Af,k$),e(k$,FGe),e(Af,TGe),e(A,MGe),e(A,yf),e(yf,Mee),e(Mee,EGe),e(yf,CGe),e(yf,S$),e(S$,wGe),e(yf,AGe),e(A,yGe),e(A,Lf),e(Lf,Eee),e(Eee,LGe),e(Lf,xGe),e(Lf,R$),e(R$,$Ge),e(Lf,kGe),e(A,SGe),e(A,xf),e(xf,Cee),e(Cee,RGe),e(xf,BGe),e(xf,B$),e(B$,PGe),e(xf,IGe),e(A,qGe),e(A,$f),e($f,wee),e(wee,NGe),e($f,jGe),e($f,P$),e(P$,DGe),e($f,GGe),e(A,OGe),e(A,kf),e(kf,Aee),e(Aee,VGe),e(kf,XGe),e(kf,I$),e(I$,zGe),e(kf,QGe),e(A,WGe),e(A,Sf),e(Sf,yee),e(yee,HGe),e(Sf,UGe),e(Sf,q$),e(q$,JGe),e(Sf,YGe),e(A,KGe),e(A,Rf),e(Rf,Lee),e(Lee,ZGe),e(Rf,eOe),e(Rf,N$),e(N$,oOe),e(Rf,rOe),e(A,tOe),e(A,Bf),e(Bf,xee),e(xee,aOe),e(Bf,nOe),e(Bf,j$),e(j$,sOe),e(Bf,lOe),e(A,iOe),e(A,Pf),e(Pf,$ee),e($ee,dOe),e(Pf,cOe),e(Pf,D$),e(D$,fOe),e(Pf,mOe),e(A,gOe),e(A,If),e(If,kee),e(kee,hOe),e(If,pOe),e(If,G$),e(G$,uOe),e(If,_Oe),e(A,bOe),e(A,qf),e(qf,See),e(See,vOe),e(qf,FOe),e(qf,O$),e(O$,TOe),e(qf,MOe),e(A,EOe),e(A,Nf),e(Nf,Ree),e(Ree,COe),e(Nf,wOe),e(Nf,V$),e(V$,AOe),e(Nf,yOe),e(A,LOe),e(A,jf),e(jf,Bee),e(Bee,xOe),e(jf,$Oe),e(jf,X$),e(X$,kOe),e(jf,SOe),e(A,ROe),e(A,Df),e(Df,Pee),e(Pee,BOe),e(Df,POe),e(Df,z$),e(z$,IOe),e(Df,qOe),e(A,NOe),e(A,Gf),e(Gf,Iee),e(Iee,jOe),e(Gf,DOe),e(Gf,Q$),e(Q$,GOe),e(Gf,OOe),e(A,VOe),e(A,Of),e(Of,qee),e(qee,XOe),e(Of,zOe),e(Of,W$),e(W$,QOe),e(Of,WOe),e(A,HOe),e(A,Vf),e(Vf,Nee),e(Nee,UOe),e(Vf,JOe),e(Vf,H$),e(H$,YOe),e(Vf,KOe),e(A,ZOe),e(A,Xf),e(Xf,jee),e(jee,eVe),e(Xf,oVe),e(Xf,U$),e(U$,rVe),e(Xf,tVe),e(A,aVe),e(A,zf),e(zf,Dee),e(Dee,nVe),e(zf,sVe),e(zf,J$),e(J$,lVe),e(zf,iVe),e(A,dVe),e(A,Qf),e(Qf,Gee),e(Gee,cVe),e(Qf,fVe),e(Qf,Y$),e(Y$,mVe),e(Qf,gVe),e(A,hVe),e(A,Wf),e(Wf,Oee),e(Oee,pVe),e(Wf,uVe),e(Wf,K$),e(K$,_Ve),e(Wf,bVe),e(A,vVe),e(A,Hf),e(Hf,Vee),e(Vee,FVe),e(Hf,TVe),e(Hf,Z$),e(Z$,MVe),e(Hf,EVe),e(A,CVe),e(A,Uf),e(Uf,Xee),e(Xee,wVe),e(Uf,AVe),e(Uf,ek),e(ek,yVe),e(Uf,LVe),e(A,xVe),e(A,Jf),e(Jf,zee),e(zee,$Ve),e(Jf,kVe),e(Jf,ok),e(ok,SVe),e(Jf,RVe),e(A,BVe),e(A,Yf),e(Yf,Qee),e(Qee,PVe),e(Yf,IVe),e(Yf,rk),e(rk,qVe),e(Yf,NVe),e(A,jVe),e(A,Kf),e(Kf,Wee),e(Wee,DVe),e(Kf,GVe),e(Kf,tk),e(tk,OVe),e(Kf,VVe),e(A,XVe),e(A,Zf),e(Zf,Hee),e(Hee,zVe),e(Zf,QVe),e(Zf,ak),e(ak,WVe),e(Zf,HVe),e(A,UVe),e(A,em),e(em,Uee),e(Uee,JVe),e(em,YVe),e(em,nk),e(nk,KVe),e(em,ZVe),e(A,eXe),e(A,om),e(om,Jee),e(Jee,oXe),e(om,rXe),e(om,sk),e(sk,tXe),e(om,aXe),e(A,nXe),e(A,rm),e(rm,Yee),e(Yee,sXe),e(rm,lXe),e(rm,lk),e(lk,iXe),e(rm,dXe),e(A,cXe),e(A,tm),e(tm,Kee),e(Kee,fXe),e(tm,mXe),e(tm,ik),e(ik,gXe),e(tm,hXe),e(A,pXe),e(A,am),e(am,Zee),e(Zee,uXe),e(am,_Xe),e(am,dk),e(dk,bXe),e(am,vXe),e(A,FXe),e(A,nm),e(nm,eoe),e(eoe,TXe),e(nm,MXe),e(nm,ck),e(ck,EXe),e(nm,CXe),e(A,wXe),e(A,sm),e(sm,ooe),e(ooe,AXe),e(sm,yXe),e(sm,fk),e(fk,LXe),e(sm,xXe),e(A,$Xe),e(A,lm),e(lm,roe),e(roe,kXe),e(lm,SXe),e(lm,mk),e(mk,RXe),e(lm,BXe),e(A,PXe),e(A,im),e(im,toe),e(toe,IXe),e(im,qXe),e(im,gk),e(gk,NXe),e(im,jXe),e(A,DXe),e(A,dm),e(dm,aoe),e(aoe,GXe),e(dm,OXe),e(dm,hk),e(hk,VXe),e(dm,XXe),e(A,zXe),e(A,cm),e(cm,noe),e(noe,QXe),e(cm,WXe),e(cm,pk),e(pk,HXe),e(cm,UXe),e(A,JXe),e(A,fm),e(fm,soe),e(soe,YXe),e(fm,KXe),e(fm,uk),e(uk,ZXe),e(fm,eze),e(A,oze),e(A,mm),e(mm,loe),e(loe,rze),e(mm,tze),e(mm,_k),e(_k,aze),e(mm,nze),e(A,sze),e(A,gm),e(gm,ioe),e(ioe,lze),e(gm,ize),e(gm,bk),e(bk,dze),e(gm,cze),e(A,fze),e(A,hm),e(hm,doe),e(doe,mze),e(hm,gze),e(hm,vk),e(vk,hze),e(hm,pze),e(A,uze),e(A,pm),e(pm,coe),e(coe,_ze),e(pm,bze),e(pm,Fk),e(Fk,vze),e(pm,Fze),e(A,Tze),e(A,um),e(um,foe),e(foe,Mze),e(um,Eze),e(um,Tk),e(Tk,Cze),e(um,wze),e(A,Aze),e(A,_m),e(_m,moe),e(moe,yze),e(_m,Lze),e(_m,Mk),e(Mk,xze),e(_m,$ze),e(A,kze),e(A,bm),e(bm,goe),e(goe,Sze),e(bm,Rze),e(bm,Ek),e(Ek,Bze),e(bm,Pze),e(A,Ize),e(A,vm),e(vm,hoe),e(hoe,qze),e(vm,Nze),e(vm,Ck),e(Ck,jze),e(vm,Dze),e(A,Gze),e(A,Fm),e(Fm,poe),e(poe,Oze),e(Fm,Vze),e(Fm,wk),e(wk,Xze),e(Fm,zze),e(A,Qze),e(A,Tm),e(Tm,uoe),e(uoe,Wze),e(Tm,Hze),e(Tm,Ak),e(Ak,Uze),e(Tm,Jze),e(A,Yze),e(A,Mm),e(Mm,_oe),e(_oe,Kze),e(Mm,Zze),e(Mm,yk),e(yk,eQe),e(Mm,oQe),e(A,rQe),e(A,Em),e(Em,boe),e(boe,tQe),e(Em,aQe),e(Em,Lk),e(Lk,nQe),e(Em,sQe),e(A,lQe),e(A,Cm),e(Cm,voe),e(voe,iQe),e(Cm,dQe),e(Cm,xk),e(xk,cQe),e(Cm,fQe),e(A,mQe),e(A,wm),e(wm,Foe),e(Foe,gQe),e(wm,hQe),e(wm,$k),e($k,pQe),e(wm,uQe),e(A,_Qe),e(A,Am),e(Am,Toe),e(Toe,bQe),e(Am,vQe),e(Am,kk),e(kk,FQe),e(Am,TQe),e(A,MQe),e(A,ym),e(ym,Moe),e(Moe,EQe),e(ym,CQe),e(ym,Sk),e(Sk,wQe),e(ym,AQe),e(A,yQe),e(A,Lm),e(Lm,Eoe),e(Eoe,LQe),e(Lm,xQe),e(Lm,Rk),e(Rk,$Qe),e(Lm,kQe),e(A,SQe),e(A,xm),e(xm,Coe),e(Coe,RQe),e(xm,BQe),e(xm,Bk),e(Bk,PQe),e(xm,IQe),e(A,qQe),e(A,$m),e($m,woe),e(woe,NQe),e($m,jQe),e($m,Pk),e(Pk,DQe),e($m,GQe),e(A,OQe),e(A,km),e(km,Aoe),e(Aoe,VQe),e(km,XQe),e(km,Ik),e(Ik,zQe),e(km,QQe),e(A,WQe),e(A,Sm),e(Sm,yoe),e(yoe,HQe),e(Sm,UQe),e(Sm,qk),e(qk,JQe),e(Sm,YQe),e(A,KQe),e(A,Rm),e(Rm,Loe),e(Loe,ZQe),e(Rm,eWe),e(Rm,Nk),e(Nk,oWe),e(Rm,rWe),e(A,tWe),e(A,Bm),e(Bm,xoe),e(xoe,aWe),e(Bm,nWe),e(Bm,jk),e(jk,sWe),e(Bm,lWe),e(A,iWe),e(A,Pm),e(Pm,$oe),e($oe,dWe),e(Pm,cWe),e(Pm,Dk),e(Dk,fWe),e(Pm,mWe),e(A,gWe),e(A,Im),e(Im,koe),e(koe,hWe),e(Im,pWe),e(Im,Gk),e(Gk,uWe),e(Im,_We),e(A,bWe),e(A,qm),e(qm,Soe),e(Soe,vWe),e(qm,FWe),e(qm,Ok),e(Ok,TWe),e(qm,MWe),e(A,EWe),e(A,Nm),e(Nm,Roe),e(Roe,CWe),e(Nm,wWe),e(Nm,Vk),e(Vk,AWe),e(Nm,yWe),e(A,LWe),e(A,jm),e(jm,Boe),e(Boe,xWe),e(jm,$We),e(jm,Xk),e(Xk,kWe),e(jm,SWe),e(A,RWe),e(A,Dm),e(Dm,Poe),e(Poe,BWe),e(Dm,PWe),e(Dm,zk),e(zk,IWe),e(Dm,qWe),e(A,NWe),e(A,Gm),e(Gm,Ioe),e(Ioe,jWe),e(Gm,DWe),e(Gm,Qk),e(Qk,GWe),e(Gm,OWe),e(A,VWe),e(A,Om),e(Om,qoe),e(qoe,XWe),e(Om,zWe),e(Om,Wk),e(Wk,QWe),e(Om,WWe),e(A,HWe),e(A,Vm),e(Vm,Noe),e(Noe,UWe),e(Vm,JWe),e(Vm,Hk),e(Hk,YWe),e(Vm,KWe),e(A,ZWe),e(A,Xm),e(Xm,joe),e(joe,eHe),e(Xm,oHe),e(Xm,Uk),e(Uk,rHe),e(Xm,tHe),e(A,aHe),e(A,zm),e(zm,Doe),e(Doe,nHe),e(zm,sHe),e(zm,Jk),e(Jk,lHe),e(zm,iHe),e(A,dHe),e(A,Qm),e(Qm,Goe),e(Goe,cHe),e(Qm,fHe),e(Qm,Yk),e(Yk,mHe),e(Qm,gHe),e(A,hHe),e(A,Wm),e(Wm,Ooe),e(Ooe,pHe),e(Wm,uHe),e(Wm,Kk),e(Kk,_He),e(Wm,bHe),e(A,vHe),e(A,Hm),e(Hm,Voe),e(Voe,FHe),e(Hm,THe),e(Hm,Zk),e(Zk,MHe),e(Hm,EHe),e(A,CHe),e(A,Um),e(Um,Xoe),e(Xoe,wHe),e(Um,AHe),e(Um,eS),e(eS,yHe),e(Um,LHe),e(A,xHe),e(A,Jm),e(Jm,zoe),e(zoe,$He),e(Jm,kHe),e(Jm,oS),e(oS,SHe),e(Jm,RHe),e(A,BHe),e(A,Ym),e(Ym,Qoe),e(Qoe,PHe),e(Ym,IHe),e(Ym,rS),e(rS,qHe),e(Ym,NHe),e(A,jHe),e(A,Km),e(Km,Woe),e(Woe,DHe),e(Km,GHe),e(Km,tS),e(tS,OHe),e(Km,VHe),e(A,XHe),e(A,Zm),e(Zm,Hoe),e(Hoe,zHe),e(Zm,QHe),e(Zm,aS),e(aS,WHe),e(Zm,HHe),e(A,UHe),e(A,eg),e(eg,Uoe),e(Uoe,JHe),e(eg,YHe),e(eg,nS),e(nS,KHe),e(eg,ZHe),e(A,eUe),e(A,og),e(og,Joe),e(Joe,oUe),e(og,rUe),e(og,sS),e(sS,tUe),e(og,aUe),e(A,nUe),e(A,rg),e(rg,Yoe),e(Yoe,sUe),e(rg,lUe),e(rg,lS),e(lS,iUe),e(rg,dUe),e(A,cUe),e(A,tg),e(tg,Koe),e(Koe,fUe),e(tg,mUe),e(tg,iS),e(iS,gUe),e(tg,hUe),e(A,pUe),e(A,ag),e(ag,Zoe),e(Zoe,uUe),e(ag,_Ue),e(ag,dS),e(dS,bUe),e(ag,vUe),e(A,FUe),e(A,ng),e(ng,ere),e(ere,TUe),e(ng,MUe),e(ng,cS),e(cS,EUe),e(ng,CUe),e(A,wUe),e(A,sg),e(sg,ore),e(ore,AUe),e(sg,yUe),e(sg,fS),e(fS,LUe),e(sg,xUe),e(A,$Ue),e(A,lg),e(lg,rre),e(rre,kUe),e(lg,SUe),e(lg,mS),e(mS,RUe),e(lg,BUe),e(A,PUe),e(A,ig),e(ig,tre),e(tre,IUe),e(ig,qUe),e(ig,gS),e(gS,NUe),e(ig,jUe),e(A,DUe),e(A,dg),e(dg,are),e(are,GUe),e(dg,OUe),e(dg,hS),e(hS,VUe),e(dg,XUe),e(A,zUe),e(A,cg),e(cg,nre),e(nre,QUe),e(cg,WUe),e(cg,pS),e(pS,HUe),e(cg,UUe),e(A,JUe),e(A,fg),e(fg,sre),e(sre,YUe),e(fg,KUe),e(fg,uS),e(uS,ZUe),e(fg,eJe),e(A,oJe),e(A,mg),e(mg,lre),e(lre,rJe),e(mg,tJe),e(mg,_S),e(_S,aJe),e(mg,nJe),e(A,sJe),e(A,gg),e(gg,ire),e(ire,lJe),e(gg,iJe),e(gg,bS),e(bS,dJe),e(gg,cJe),e(A,fJe),e(A,hg),e(hg,dre),e(dre,mJe),e(hg,gJe),e(hg,vS),e(vS,hJe),e(hg,pJe),e(A,uJe),e(A,pg),e(pg,cre),e(cre,_Je),e(pg,bJe),e(pg,FS),e(FS,vJe),e(pg,FJe),e(Er,TJe),M(ug,Er,null),e(Co,MJe),e(Co,_g),M(lA,_g,null),e(_g,EJe),e(_g,fre),e(fre,CJe),b(f,aIe,_),b(f,bi,_),e(bi,bg),e(bg,mre),M(iA,mre,null),e(bi,wJe),e(bi,gre),e(gre,AJe),b(f,nIe,_),b(f,wo,_),M(dA,wo,null),e(wo,yJe),e(wo,cA),e(cA,LJe),e(cA,TS),e(TS,xJe),e(cA,$Je),e(wo,kJe),e(wo,fA),e(fA,SJe),e(fA,hre),e(hre,RJe),e(fA,BJe),e(wo,PJe),e(wo,Cr),M(mA,Cr,null),e(Cr,IJe),e(Cr,pre),e(pre,qJe),e(Cr,NJe),e(Cr,Ca),e(Ca,jJe),e(Ca,ure),e(ure,DJe),e(Ca,GJe),e(Ca,_re),e(_re,OJe),e(Ca,VJe),e(Ca,bre),e(bre,XJe),e(Ca,zJe),e(Cr,QJe),e(Cr,k),e(k,Sn),e(Sn,vre),e(vre,WJe),e(Sn,HJe),e(Sn,MS),e(MS,UJe),e(Sn,JJe),e(Sn,ES),e(ES,YJe),e(Sn,KJe),e(k,ZJe),e(k,Rn),e(Rn,Fre),e(Fre,eYe),e(Rn,oYe),e(Rn,CS),e(CS,rYe),e(Rn,tYe),e(Rn,wS),e(wS,aYe),e(Rn,nYe),e(k,sYe),e(k,Bn),e(Bn,Tre),e(Tre,lYe),e(Bn,iYe),e(Bn,AS),e(AS,dYe),e(Bn,cYe),e(Bn,yS),e(yS,fYe),e(Bn,mYe),e(k,gYe),e(k,vg),e(vg,Mre),e(Mre,hYe),e(vg,pYe),e(vg,LS),e(LS,uYe),e(vg,_Ye),e(k,bYe),e(k,Pn),e(Pn,Ere),e(Ere,vYe),e(Pn,FYe),e(Pn,xS),e(xS,TYe),e(Pn,MYe),e(Pn,$S),e($S,EYe),e(Pn,CYe),e(k,wYe),e(k,Fg),e(Fg,Cre),e(Cre,AYe),e(Fg,yYe),e(Fg,kS),e(kS,LYe),e(Fg,xYe),e(k,$Ye),e(k,Tg),e(Tg,wre),e(wre,kYe),e(Tg,SYe),e(Tg,SS),e(SS,RYe),e(Tg,BYe),e(k,PYe),e(k,Mg),e(Mg,Are),e(Are,IYe),e(Mg,qYe),e(Mg,RS),e(RS,NYe),e(Mg,jYe),e(k,DYe),e(k,In),e(In,yre),e(yre,GYe),e(In,OYe),e(In,BS),e(BS,VYe),e(In,XYe),e(In,PS),e(PS,zYe),e(In,QYe),e(k,WYe),e(k,qn),e(qn,Lre),e(Lre,HYe),e(qn,UYe),e(qn,IS),e(IS,JYe),e(qn,YYe),e(qn,qS),e(qS,KYe),e(qn,ZYe),e(k,eKe),e(k,Nn),e(Nn,xre),e(xre,oKe),e(Nn,rKe),e(Nn,NS),e(NS,tKe),e(Nn,aKe),e(Nn,jS),e(jS,nKe),e(Nn,sKe),e(k,lKe),e(k,Eg),e(Eg,$re),e($re,iKe),e(Eg,dKe),e(Eg,DS),e(DS,cKe),e(Eg,fKe),e(k,mKe),e(k,Cg),e(Cg,kre),e(kre,gKe),e(Cg,hKe),e(Cg,GS),e(GS,pKe),e(Cg,uKe),e(k,_Ke),e(k,jn),e(jn,Sre),e(Sre,bKe),e(jn,vKe),e(jn,OS),e(OS,FKe),e(jn,TKe),e(jn,VS),e(VS,MKe),e(jn,EKe),e(k,CKe),e(k,wg),e(wg,Rre),e(Rre,wKe),e(wg,AKe),e(wg,XS),e(XS,yKe),e(wg,LKe),e(k,xKe),e(k,Dn),e(Dn,Bre),e(Bre,$Ke),e(Dn,kKe),e(Dn,zS),e(zS,SKe),e(Dn,RKe),e(Dn,QS),e(QS,BKe),e(Dn,PKe),e(k,IKe),e(k,Gn),e(Gn,Pre),e(Pre,qKe),e(Gn,NKe),e(Gn,WS),e(WS,jKe),e(Gn,DKe),e(Gn,HS),e(HS,GKe),e(Gn,OKe),e(k,VKe),e(k,On),e(On,Ire),e(Ire,XKe),e(On,zKe),e(On,US),e(US,QKe),e(On,WKe),e(On,JS),e(JS,HKe),e(On,UKe),e(k,JKe),e(k,Ag),e(Ag,qre),e(qre,YKe),e(Ag,KKe),e(Ag,YS),e(YS,ZKe),e(Ag,eZe),e(k,oZe),e(k,Vn),e(Vn,Nre),e(Nre,rZe),e(Vn,tZe),e(Vn,KS),e(KS,aZe),e(Vn,nZe),e(Vn,ZS),e(ZS,sZe),e(Vn,lZe),e(k,iZe),e(k,Xn),e(Xn,jre),e(jre,dZe),e(Xn,cZe),e(Xn,eR),e(eR,fZe),e(Xn,mZe),e(Xn,oR),e(oR,gZe),e(Xn,hZe),e(k,pZe),e(k,zn),e(zn,Dre),e(Dre,uZe),e(zn,_Ze),e(zn,rR),e(rR,bZe),e(zn,vZe),e(zn,tR),e(tR,FZe),e(zn,TZe),e(k,MZe),e(k,Qn),e(Qn,Gre),e(Gre,EZe),e(Qn,CZe),e(Qn,aR),e(aR,wZe),e(Qn,AZe),e(Qn,nR),e(nR,yZe),e(Qn,LZe),e(k,xZe),e(k,Wn),e(Wn,Ore),e(Ore,$Ze),e(Wn,kZe),e(Wn,sR),e(sR,SZe),e(Wn,RZe),e(Wn,lR),e(lR,BZe),e(Wn,PZe),e(k,IZe),e(k,Hn),e(Hn,Vre),e(Vre,qZe),e(Hn,NZe),e(Hn,iR),e(iR,jZe),e(Hn,DZe),e(Hn,dR),e(dR,GZe),e(Hn,OZe),e(k,VZe),e(k,yg),e(yg,Xre),e(Xre,XZe),e(yg,zZe),e(yg,cR),e(cR,QZe),e(yg,WZe),e(k,HZe),e(k,Un),e(Un,zre),e(zre,UZe),e(Un,JZe),e(Un,fR),e(fR,YZe),e(Un,KZe),e(Un,mR),e(mR,ZZe),e(Un,eeo),e(k,oeo),e(k,Lg),e(Lg,Qre),e(Qre,reo),e(Lg,teo),e(Lg,gR),e(gR,aeo),e(Lg,neo),e(k,seo),e(k,Jn),e(Jn,Wre),e(Wre,leo),e(Jn,ieo),e(Jn,hR),e(hR,deo),e(Jn,ceo),e(Jn,pR),e(pR,feo),e(Jn,meo),e(k,geo),e(k,Yn),e(Yn,Hre),e(Hre,heo),e(Yn,peo),e(Yn,uR),e(uR,ueo),e(Yn,_eo),e(Yn,_R),e(_R,beo),e(Yn,veo),e(k,Feo),e(k,Kn),e(Kn,Ure),e(Ure,Teo),e(Kn,Meo),e(Kn,bR),e(bR,Eeo),e(Kn,Ceo),e(Kn,vR),e(vR,weo),e(Kn,Aeo),e(k,yeo),e(k,Zn),e(Zn,Jre),e(Jre,Leo),e(Zn,xeo),e(Zn,FR),e(FR,$eo),e(Zn,keo),e(Zn,TR),e(TR,Seo),e(Zn,Reo),e(k,Beo),e(k,es),e(es,Yre),e(Yre,Peo),e(es,Ieo),e(es,MR),e(MR,qeo),e(es,Neo),e(es,ER),e(ER,jeo),e(es,Deo),e(k,Geo),e(k,xg),e(xg,Kre),e(Kre,Oeo),e(xg,Veo),e(xg,CR),e(CR,Xeo),e(xg,zeo),e(k,Qeo),e(k,os),e(os,Zre),e(Zre,Weo),e(os,Heo),e(os,wR),e(wR,Ueo),e(os,Jeo),e(os,AR),e(AR,Yeo),e(os,Keo),e(k,Zeo),e(k,rs),e(rs,ete),e(ete,eoo),e(rs,ooo),e(rs,yR),e(yR,roo),e(rs,too),e(rs,LR),e(LR,aoo),e(rs,noo),e(k,soo),e(k,ts),e(ts,ote),e(ote,loo),e(ts,ioo),e(ts,xR),e(xR,doo),e(ts,coo),e(ts,$R),e($R,foo),e(ts,moo),e(k,goo),e(k,as),e(as,rte),e(rte,hoo),e(as,poo),e(as,kR),e(kR,uoo),e(as,_oo),e(as,SR),e(SR,boo),e(as,voo),e(k,Foo),e(k,ns),e(ns,tte),e(tte,Too),e(ns,Moo),e(ns,RR),e(RR,Eoo),e(ns,Coo),e(ns,BR),e(BR,woo),e(ns,Aoo),e(k,yoo),e(k,ss),e(ss,ate),e(ate,Loo),e(ss,xoo),e(ss,PR),e(PR,$oo),e(ss,koo),e(ss,IR),e(IR,Soo),e(ss,Roo),e(k,Boo),e(k,$g),e($g,nte),e(nte,Poo),e($g,Ioo),e($g,qR),e(qR,qoo),e($g,Noo),e(k,joo),e(k,ls),e(ls,ste),e(ste,Doo),e(ls,Goo),e(ls,NR),e(NR,Ooo),e(ls,Voo),e(ls,jR),e(jR,Xoo),e(ls,zoo),e(k,Qoo),e(k,kg),e(kg,lte),e(lte,Woo),e(kg,Hoo),e(kg,DR),e(DR,Uoo),e(kg,Joo),e(k,Yoo),e(k,Sg),e(Sg,ite),e(ite,Koo),e(Sg,Zoo),e(Sg,GR),e(GR,ero),e(Sg,oro),e(k,rro),e(k,is),e(is,dte),e(dte,tro),e(is,aro),e(is,OR),e(OR,nro),e(is,sro),e(is,VR),e(VR,lro),e(is,iro),e(k,dro),e(k,ds),e(ds,cte),e(cte,cro),e(ds,fro),e(ds,XR),e(XR,mro),e(ds,gro),e(ds,zR),e(zR,hro),e(ds,pro),e(k,uro),e(k,cs),e(cs,fte),e(fte,_ro),e(cs,bro),e(cs,QR),e(QR,vro),e(cs,Fro),e(cs,WR),e(WR,Tro),e(cs,Mro),e(k,Ero),e(k,Rg),e(Rg,mte),e(mte,Cro),e(Rg,wro),e(Rg,HR),e(HR,Aro),e(Rg,yro),e(k,Lro),e(k,fs),e(fs,gte),e(gte,xro),e(fs,$ro),e(fs,UR),e(UR,kro),e(fs,Sro),e(fs,JR),e(JR,Rro),e(fs,Bro),e(k,Pro),e(k,ms),e(ms,hte),e(hte,Iro),e(ms,qro),e(ms,YR),e(YR,Nro),e(ms,jro),e(ms,KR),e(KR,Dro),e(ms,Gro),e(k,Oro),e(k,gs),e(gs,pte),e(pte,Vro),e(gs,Xro),e(gs,ZR),e(ZR,zro),e(gs,Qro),e(gs,eB),e(eB,Wro),e(gs,Hro),e(k,Uro),e(k,hs),e(hs,ute),e(ute,Jro),e(hs,Yro),e(hs,oB),e(oB,Kro),e(hs,Zro),e(hs,rB),e(rB,eto),e(hs,oto),e(k,rto),e(k,ps),e(ps,_te),e(_te,tto),e(ps,ato),e(ps,tB),e(tB,nto),e(ps,sto),e(ps,aB),e(aB,lto),e(ps,ito),e(k,dto),e(k,Bg),e(Bg,bte),e(bte,cto),e(Bg,fto),e(Bg,nB),e(nB,mto),e(Bg,gto),e(k,hto),e(k,us),e(us,vte),e(vte,pto),e(us,uto),e(us,sB),e(sB,_to),e(us,bto),e(us,lB),e(lB,vto),e(us,Fto),e(k,Tto),e(k,Pg),e(Pg,Fte),e(Fte,Mto),e(Pg,Eto),e(Pg,iB),e(iB,Cto),e(Pg,wto),e(k,Ato),e(k,Ig),e(Ig,Tte),e(Tte,yto),e(Ig,Lto),e(Ig,dB),e(dB,xto),e(Ig,$to),e(k,kto),e(k,qg),e(qg,Mte),e(Mte,Sto),e(qg,Rto),e(qg,cB),e(cB,Bto),e(qg,Pto),e(k,Ito),e(k,Ng),e(Ng,Ete),e(Ete,qto),e(Ng,Nto),e(Ng,fB),e(fB,jto),e(Ng,Dto),e(k,Gto),e(k,_s),e(_s,Cte),e(Cte,Oto),e(_s,Vto),e(_s,mB),e(mB,Xto),e(_s,zto),e(_s,gB),e(gB,Qto),e(_s,Wto),e(k,Hto),e(k,jg),e(jg,wte),e(wte,Uto),e(jg,Jto),e(jg,hB),e(hB,Yto),e(jg,Kto),e(k,Zto),e(k,bs),e(bs,Ate),e(Ate,eao),e(bs,oao),e(bs,pB),e(pB,rao),e(bs,tao),e(bs,uB),e(uB,aao),e(bs,nao),e(k,sao),e(k,vs),e(vs,yte),e(yte,lao),e(vs,iao),e(vs,_B),e(_B,dao),e(vs,cao),e(vs,bB),e(bB,fao),e(vs,mao),e(k,gao),e(k,Fs),e(Fs,Lte),e(Lte,hao),e(Fs,pao),e(Fs,vB),e(vB,uao),e(Fs,_ao),e(Fs,FB),e(FB,bao),e(Fs,vao),e(k,Fao),e(k,Ts),e(Ts,xte),e(xte,Tao),e(Ts,Mao),e(Ts,TB),e(TB,Eao),e(Ts,Cao),e(Ts,MB),e(MB,wao),e(Ts,Aao),e(k,yao),e(k,Ms),e(Ms,$te),e($te,Lao),e(Ms,xao),e(Ms,EB),e(EB,$ao),e(Ms,kao),e(Ms,CB),e(CB,Sao),e(Ms,Rao),e(k,Bao),e(k,Es),e(Es,kte),e(kte,Pao),e(Es,Iao),e(Es,wB),e(wB,qao),e(Es,Nao),e(Es,AB),e(AB,jao),e(Es,Dao),e(k,Gao),e(k,Dg),e(Dg,Ste),e(Ste,Oao),e(Dg,Vao),e(Dg,yB),e(yB,Xao),e(Dg,zao),e(k,Qao),e(k,Gg),e(Gg,Rte),e(Rte,Wao),e(Gg,Hao),e(Gg,LB),e(LB,Uao),e(Gg,Jao),e(k,Yao),e(k,Cs),e(Cs,Bte),e(Bte,Kao),e(Cs,Zao),e(Cs,xB),e(xB,eno),e(Cs,ono),e(Cs,$B),e($B,rno),e(Cs,tno),e(k,ano),e(k,ws),e(ws,Pte),e(Pte,nno),e(ws,sno),e(ws,kB),e(kB,lno),e(ws,ino),e(ws,SB),e(SB,dno),e(ws,cno),e(k,fno),e(k,As),e(As,Ite),e(Ite,mno),e(As,gno),e(As,RB),e(RB,hno),e(As,pno),e(As,BB),e(BB,uno),e(As,_no),e(k,bno),e(k,Og),e(Og,qte),e(qte,vno),e(Og,Fno),e(Og,PB),e(PB,Tno),e(Og,Mno),e(k,Eno),e(k,Vg),e(Vg,Nte),e(Nte,Cno),e(Vg,wno),e(Vg,IB),e(IB,Ano),e(Vg,yno),e(k,Lno),e(k,Xg),e(Xg,jte),e(jte,xno),e(Xg,$no),e(Xg,qB),e(qB,kno),e(Xg,Sno),e(k,Rno),e(k,ys),e(ys,Dte),e(Dte,Bno),e(ys,Pno),e(ys,NB),e(NB,Ino),e(ys,qno),e(ys,jB),e(jB,Nno),e(ys,jno),e(k,Dno),e(k,zg),e(zg,Gte),e(Gte,Gno),e(zg,Ono),e(zg,DB),e(DB,Vno),e(zg,Xno),e(k,zno),e(k,Qg),e(Qg,Ote),e(Ote,Qno),e(Qg,Wno),e(Qg,GB),e(GB,Hno),e(Qg,Uno),e(k,Jno),e(k,Ls),e(Ls,Vte),e(Vte,Yno),e(Ls,Kno),e(Ls,OB),e(OB,Zno),e(Ls,eso),e(Ls,VB),e(VB,oso),e(Ls,rso),e(k,tso),e(k,Wg),e(Wg,Xte),e(Xte,aso),e(Wg,nso),e(Wg,XB),e(XB,sso),e(Wg,lso),e(k,iso),e(k,Hg),e(Hg,zte),e(zte,dso),e(Hg,cso),e(Hg,zB),e(zB,fso),e(Hg,mso),e(k,gso),e(k,xs),e(xs,Qte),e(Qte,hso),e(xs,pso),e(xs,QB),e(QB,uso),e(xs,_so),e(xs,WB),e(WB,bso),e(xs,vso),e(k,Fso),e(k,$s),e($s,Wte),e(Wte,Tso),e($s,Mso),e($s,HB),e(HB,Eso),e($s,Cso),e($s,UB),e(UB,wso),e($s,Aso),e(k,yso),e(k,ks),e(ks,Hte),e(Hte,Lso),e(ks,xso),e(ks,JB),e(JB,$so),e(ks,kso),e(ks,YB),e(YB,Sso),e(ks,Rso),e(k,Bso),e(k,Ss),e(Ss,Ute),e(Ute,Pso),e(Ss,Iso),e(Ss,KB),e(KB,qso),e(Ss,Nso),e(Ss,ZB),e(ZB,jso),e(Ss,Dso),e(Cr,Gso),M(Ug,Cr,null),e(wo,Oso),e(wo,Jg),M(gA,Jg,null),e(Jg,Vso),e(Jg,Jte),e(Jte,Xso),b(f,sIe,_),b(f,vi,_),e(vi,Yg),e(Yg,Yte),M(hA,Yte,null),e(vi,zso),e(vi,Kte),e(Kte,Qso),b(f,lIe,_),b(f,Ao,_),M(pA,Ao,null),e(Ao,Wso),e(Ao,uA),e(uA,Hso),e(uA,eP),e(eP,Uso),e(uA,Jso),e(Ao,Yso),e(Ao,_A),e(_A,Kso),e(_A,Zte),e(Zte,Zso),e(_A,elo),e(Ao,olo),e(Ao,Qe),M(bA,Qe,null),e(Qe,rlo),e(Qe,eae),e(eae,tlo),e(Qe,alo),e(Qe,wa),e(wa,nlo),e(wa,oae),e(oae,slo),e(wa,llo),e(wa,rae),e(rae,ilo),e(wa,dlo),e(wa,tae),e(tae,clo),e(wa,flo),e(Qe,mlo),e(Qe,oe),e(oe,Kg),e(Kg,aae),e(aae,glo),e(Kg,hlo),e(Kg,oP),e(oP,plo),e(Kg,ulo),e(oe,_lo),e(oe,Zg),e(Zg,nae),e(nae,blo),e(Zg,vlo),e(Zg,rP),e(rP,Flo),e(Zg,Tlo),e(oe,Mlo),e(oe,eh),e(eh,sae),e(sae,Elo),e(eh,Clo),e(eh,tP),e(tP,wlo),e(eh,Alo),e(oe,ylo),e(oe,oh),e(oh,lae),e(lae,Llo),e(oh,xlo),e(oh,aP),e(aP,$lo),e(oh,klo),e(oe,Slo),e(oe,rh),e(rh,iae),e(iae,Rlo),e(rh,Blo),e(rh,nP),e(nP,Plo),e(rh,Ilo),e(oe,qlo),e(oe,th),e(th,dae),e(dae,Nlo),e(th,jlo),e(th,sP),e(sP,Dlo),e(th,Glo),e(oe,Olo),e(oe,ah),e(ah,cae),e(cae,Vlo),e(ah,Xlo),e(ah,lP),e(lP,zlo),e(ah,Qlo),e(oe,Wlo),e(oe,nh),e(nh,fae),e(fae,Hlo),e(nh,Ulo),e(nh,iP),e(iP,Jlo),e(nh,Ylo),e(oe,Klo),e(oe,sh),e(sh,mae),e(mae,Zlo),e(sh,eio),e(sh,dP),e(dP,oio),e(sh,rio),e(oe,tio),e(oe,lh),e(lh,gae),e(gae,aio),e(lh,nio),e(lh,cP),e(cP,sio),e(lh,lio),e(oe,iio),e(oe,ih),e(ih,hae),e(hae,dio),e(ih,cio),e(ih,fP),e(fP,fio),e(ih,mio),e(oe,gio),e(oe,dh),e(dh,pae),e(pae,hio),e(dh,pio),e(dh,mP),e(mP,uio),e(dh,_io),e(oe,bio),e(oe,ch),e(ch,uae),e(uae,vio),e(ch,Fio),e(ch,gP),e(gP,Tio),e(ch,Mio),e(oe,Eio),e(oe,fh),e(fh,_ae),e(_ae,Cio),e(fh,wio),e(fh,hP),e(hP,Aio),e(fh,yio),e(oe,Lio),e(oe,mh),e(mh,bae),e(bae,xio),e(mh,$io),e(mh,pP),e(pP,kio),e(mh,Sio),e(oe,Rio),e(oe,gh),e(gh,vae),e(vae,Bio),e(gh,Pio),e(gh,uP),e(uP,Iio),e(gh,qio),e(oe,Nio),e(oe,hh),e(hh,Fae),e(Fae,jio),e(hh,Dio),e(hh,_P),e(_P,Gio),e(hh,Oio),e(oe,Vio),e(oe,ph),e(ph,Tae),e(Tae,Xio),e(ph,zio),e(ph,bP),e(bP,Qio),e(ph,Wio),e(oe,Hio),e(oe,uh),e(uh,Mae),e(Mae,Uio),e(uh,Jio),e(uh,vP),e(vP,Yio),e(uh,Kio),e(oe,Zio),e(oe,_h),e(_h,Eae),e(Eae,edo),e(_h,odo),e(_h,FP),e(FP,rdo),e(_h,tdo),e(oe,ado),e(oe,bh),e(bh,Cae),e(Cae,ndo),e(bh,sdo),e(bh,TP),e(TP,ldo),e(bh,ido),e(oe,ddo),e(oe,vh),e(vh,wae),e(wae,cdo),e(vh,fdo),e(vh,MP),e(MP,mdo),e(vh,gdo),e(oe,hdo),e(oe,Fh),e(Fh,Aae),e(Aae,pdo),e(Fh,udo),e(Fh,EP),e(EP,_do),e(Fh,bdo),e(oe,vdo),e(oe,Th),e(Th,yae),e(yae,Fdo),e(Th,Tdo),e(Th,CP),e(CP,Mdo),e(Th,Edo),e(oe,Cdo),e(oe,Mh),e(Mh,Lae),e(Lae,wdo),e(Mh,Ado),e(Mh,wP),e(wP,ydo),e(Mh,Ldo),e(Qe,xdo),M(Eh,Qe,null),e(Qe,$do),M(Ch,Qe,null),e(Ao,kdo),e(Ao,wh),M(vA,wh,null),e(wh,Sdo),e(wh,xae),e(xae,Rdo),b(f,iIe,_),b(f,Fi,_),e(Fi,Ah),e(Ah,$ae),M(FA,$ae,null),e(Fi,Bdo),e(Fi,kae),e(kae,Pdo),b(f,dIe,_),b(f,yo,_),M(TA,yo,null),e(yo,Ido),e(yo,MA),e(MA,qdo),e(MA,AP),e(AP,Ndo),e(MA,jdo),e(yo,Ddo),e(yo,EA),e(EA,Gdo),e(EA,Sae),e(Sae,Odo),e(EA,Vdo),e(yo,Xdo),e(yo,We),M(CA,We,null),e(We,zdo),e(We,Rae),e(Rae,Qdo),e(We,Wdo),e(We,Ti),e(Ti,Hdo),e(Ti,Bae),e(Bae,Udo),e(Ti,Jdo),e(Ti,Pae),e(Pae,Ydo),e(Ti,Kdo),e(We,Zdo),e(We,be),e(be,yh),e(yh,Iae),e(Iae,eco),e(yh,oco),e(yh,yP),e(yP,rco),e(yh,tco),e(be,aco),e(be,Lh),e(Lh,qae),e(qae,nco),e(Lh,sco),e(Lh,Nae),e(Nae,lco),e(Lh,ico),e(be,dco),e(be,xh),e(xh,jae),e(jae,cco),e(xh,fco),e(xh,LP),e(LP,mco),e(xh,gco),e(be,hco),e(be,$h),e($h,Dae),e(Dae,pco),e($h,uco),e($h,xP),e(xP,_co),e($h,bco),e(be,vco),e(be,kh),e(kh,Gae),e(Gae,Fco),e(kh,Tco),e(kh,$P),e($P,Mco),e(kh,Eco),e(be,Cco),e(be,Sh),e(Sh,Oae),e(Oae,wco),e(Sh,Aco),e(Sh,kP),e(kP,yco),e(Sh,Lco),e(be,xco),e(be,Rh),e(Rh,Vae),e(Vae,$co),e(Rh,kco),e(Rh,SP),e(SP,Sco),e(Rh,Rco),e(be,Bco),e(be,Bh),e(Bh,Xae),e(Xae,Pco),e(Bh,Ico),e(Bh,RP),e(RP,qco),e(Bh,Nco),e(be,jco),e(be,Ph),e(Ph,zae),e(zae,Dco),e(Ph,Gco),e(Ph,BP),e(BP,Oco),e(Ph,Vco),e(be,Xco),e(be,Ih),e(Ih,Qae),e(Qae,zco),e(Ih,Qco),e(Ih,PP),e(PP,Wco),e(Ih,Hco),e(be,Uco),e(be,qh),e(qh,Wae),e(Wae,Jco),e(qh,Yco),e(qh,IP),e(IP,Kco),e(qh,Zco),e(be,efo),e(be,Nh),e(Nh,Hae),e(Hae,ofo),e(Nh,rfo),e(Nh,qP),e(qP,tfo),e(Nh,afo),e(be,nfo),e(be,jh),e(jh,Uae),e(Uae,sfo),e(jh,lfo),e(jh,NP),e(NP,ifo),e(jh,dfo),e(be,cfo),e(be,Dh),e(Dh,Jae),e(Jae,ffo),e(Dh,mfo),e(Dh,jP),e(jP,gfo),e(Dh,hfo),e(be,pfo),e(be,Gh),e(Gh,Yae),e(Yae,ufo),e(Gh,_fo),e(Gh,DP),e(DP,bfo),e(Gh,vfo),e(We,Ffo),M(Oh,We,null),e(We,Tfo),M(Vh,We,null),e(yo,Mfo),e(yo,Xh),M(wA,Xh,null),e(Xh,Efo),e(Xh,Kae),e(Kae,Cfo),b(f,cIe,_),b(f,Mi,_),e(Mi,zh),e(zh,Zae),M(AA,Zae,null),e(Mi,wfo),e(Mi,ene),e(ene,Afo),b(f,fIe,_),b(f,Lo,_),M(yA,Lo,null),e(Lo,yfo),e(Lo,Ei),e(Ei,Lfo),e(Ei,GP),e(GP,xfo),e(Ei,$fo),e(Ei,OP),e(OP,kfo),e(Ei,Sfo),e(Lo,Rfo),e(Lo,LA),e(LA,Bfo),e(LA,one),e(one,Pfo),e(LA,Ifo),e(Lo,qfo),e(Lo,ot),M(xA,ot,null),e(ot,Nfo),e(ot,rne),e(rne,jfo),e(ot,Dfo),e(ot,Ci),e(Ci,Gfo),e(Ci,tne),e(tne,Ofo),e(Ci,Vfo),e(Ci,VP),e(VP,Xfo),e(Ci,zfo),e(ot,Qfo),M(Qh,ot,null),e(Lo,Wfo),e(Lo,He),M($A,He,null),e(He,Hfo),e(He,ane),e(ane,Ufo),e(He,Jfo),e(He,Aa),e(Aa,Yfo),e(Aa,nne),e(nne,Kfo),e(Aa,Zfo),e(Aa,sne),e(sne,emo),e(Aa,omo),e(Aa,lne),e(lne,rmo),e(Aa,tmo),e(He,amo),e(He,x),e(x,Wh),e(Wh,ine),e(ine,nmo),e(Wh,smo),e(Wh,XP),e(XP,lmo),e(Wh,imo),e(x,dmo),e(x,Hh),e(Hh,dne),e(dne,cmo),e(Hh,fmo),e(Hh,zP),e(zP,mmo),e(Hh,gmo),e(x,hmo),e(x,Uh),e(Uh,cne),e(cne,pmo),e(Uh,umo),e(Uh,QP),e(QP,_mo),e(Uh,bmo),e(x,vmo),e(x,Jh),e(Jh,fne),e(fne,Fmo),e(Jh,Tmo),e(Jh,WP),e(WP,Mmo),e(Jh,Emo),e(x,Cmo),e(x,Yh),e(Yh,mne),e(mne,wmo),e(Yh,Amo),e(Yh,HP),e(HP,ymo),e(Yh,Lmo),e(x,xmo),e(x,Kh),e(Kh,gne),e(gne,$mo),e(Kh,kmo),e(Kh,UP),e(UP,Smo),e(Kh,Rmo),e(x,Bmo),e(x,Zh),e(Zh,hne),e(hne,Pmo),e(Zh,Imo),e(Zh,JP),e(JP,qmo),e(Zh,Nmo),e(x,jmo),e(x,ep),e(ep,pne),e(pne,Dmo),e(ep,Gmo),e(ep,YP),e(YP,Omo),e(ep,Vmo),e(x,Xmo),e(x,op),e(op,une),e(une,zmo),e(op,Qmo),e(op,KP),e(KP,Wmo),e(op,Hmo),e(x,Umo),e(x,rp),e(rp,_ne),e(_ne,Jmo),e(rp,Ymo),e(rp,ZP),e(ZP,Kmo),e(rp,Zmo),e(x,ego),e(x,tp),e(tp,bne),e(bne,ogo),e(tp,rgo),e(tp,eI),e(eI,tgo),e(tp,ago),e(x,ngo),e(x,ap),e(ap,vne),e(vne,sgo),e(ap,lgo),e(ap,oI),e(oI,igo),e(ap,dgo),e(x,cgo),e(x,np),e(np,Fne),e(Fne,fgo),e(np,mgo),e(np,rI),e(rI,ggo),e(np,hgo),e(x,pgo),e(x,sp),e(sp,Tne),e(Tne,ugo),e(sp,_go),e(sp,tI),e(tI,bgo),e(sp,vgo),e(x,Fgo),e(x,lp),e(lp,Mne),e(Mne,Tgo),e(lp,Mgo),e(lp,aI),e(aI,Ego),e(lp,Cgo),e(x,wgo),e(x,ip),e(ip,Ene),e(Ene,Ago),e(ip,ygo),e(ip,nI),e(nI,Lgo),e(ip,xgo),e(x,$go),e(x,dp),e(dp,Cne),e(Cne,kgo),e(dp,Sgo),e(dp,sI),e(sI,Rgo),e(dp,Bgo),e(x,Pgo),e(x,cp),e(cp,wne),e(wne,Igo),e(cp,qgo),e(cp,lI),e(lI,Ngo),e(cp,jgo),e(x,Dgo),e(x,fp),e(fp,Ane),e(Ane,Ggo),e(fp,Ogo),e(fp,iI),e(iI,Vgo),e(fp,Xgo),e(x,zgo),e(x,mp),e(mp,yne),e(yne,Qgo),e(mp,Wgo),e(mp,dI),e(dI,Hgo),e(mp,Ugo),e(x,Jgo),e(x,gp),e(gp,Lne),e(Lne,Ygo),e(gp,Kgo),e(gp,cI),e(cI,Zgo),e(gp,eho),e(x,oho),e(x,hp),e(hp,xne),e(xne,rho),e(hp,tho),e(hp,fI),e(fI,aho),e(hp,nho),e(x,sho),e(x,pp),e(pp,$ne),e($ne,lho),e(pp,iho),e(pp,mI),e(mI,dho),e(pp,cho),e(x,fho),e(x,up),e(up,kne),e(kne,mho),e(up,gho),e(up,gI),e(gI,hho),e(up,pho),e(x,uho),e(x,_p),e(_p,Sne),e(Sne,_ho),e(_p,bho),e(_p,hI),e(hI,vho),e(_p,Fho),e(x,Tho),e(x,bp),e(bp,Rne),e(Rne,Mho),e(bp,Eho),e(bp,pI),e(pI,Cho),e(bp,who),e(x,Aho),e(x,vp),e(vp,Bne),e(Bne,yho),e(vp,Lho),e(vp,uI),e(uI,xho),e(vp,$ho),e(x,kho),e(x,Fp),e(Fp,Pne),e(Pne,Sho),e(Fp,Rho),e(Fp,_I),e(_I,Bho),e(Fp,Pho),e(x,Iho),e(x,Tp),e(Tp,Ine),e(Ine,qho),e(Tp,Nho),e(Tp,bI),e(bI,jho),e(Tp,Dho),e(x,Gho),e(x,Mp),e(Mp,qne),e(qne,Oho),e(Mp,Vho),e(Mp,vI),e(vI,Xho),e(Mp,zho),e(x,Qho),e(x,Ep),e(Ep,Nne),e(Nne,Who),e(Ep,Hho),e(Ep,FI),e(FI,Uho),e(Ep,Jho),e(x,Yho),e(x,Rs),e(Rs,jne),e(jne,Kho),e(Rs,Zho),e(Rs,TI),e(TI,epo),e(Rs,opo),e(Rs,MI),e(MI,rpo),e(Rs,tpo),e(x,apo),e(x,Cp),e(Cp,Dne),e(Dne,npo),e(Cp,spo),e(Cp,EI),e(EI,lpo),e(Cp,ipo),e(x,dpo),e(x,wp),e(wp,Gne),e(Gne,cpo),e(wp,fpo),e(wp,CI),e(CI,mpo),e(wp,gpo),e(x,hpo),e(x,Ap),e(Ap,One),e(One,ppo),e(Ap,upo),e(Ap,wI),e(wI,_po),e(Ap,bpo),e(x,vpo),e(x,yp),e(yp,Vne),e(Vne,Fpo),e(yp,Tpo),e(yp,AI),e(AI,Mpo),e(yp,Epo),e(x,Cpo),e(x,Lp),e(Lp,Xne),e(Xne,wpo),e(Lp,Apo),e(Lp,yI),e(yI,ypo),e(Lp,Lpo),e(x,xpo),e(x,xp),e(xp,zne),e(zne,$po),e(xp,kpo),e(xp,LI),e(LI,Spo),e(xp,Rpo),e(x,Bpo),e(x,$p),e($p,Qne),e(Qne,Ppo),e($p,Ipo),e($p,xI),e(xI,qpo),e($p,Npo),e(x,jpo),e(x,kp),e(kp,Wne),e(Wne,Dpo),e(kp,Gpo),e(kp,$I),e($I,Opo),e(kp,Vpo),e(x,Xpo),e(x,Sp),e(Sp,Hne),e(Hne,zpo),e(Sp,Qpo),e(Sp,kI),e(kI,Wpo),e(Sp,Hpo),e(x,Upo),e(x,Rp),e(Rp,Une),e(Une,Jpo),e(Rp,Ypo),e(Rp,SI),e(SI,Kpo),e(Rp,Zpo),e(x,euo),e(x,Bp),e(Bp,Jne),e(Jne,ouo),e(Bp,ruo),e(Bp,RI),e(RI,tuo),e(Bp,auo),e(x,nuo),e(x,Pp),e(Pp,Yne),e(Yne,suo),e(Pp,luo),e(Pp,BI),e(BI,iuo),e(Pp,duo),e(x,cuo),e(x,Ip),e(Ip,Kne),e(Kne,fuo),e(Ip,muo),e(Ip,PI),e(PI,guo),e(Ip,huo),e(x,puo),e(x,qp),e(qp,Zne),e(Zne,uuo),e(qp,_uo),e(qp,II),e(II,buo),e(qp,vuo),e(x,Fuo),e(x,Np),e(Np,ese),e(ese,Tuo),e(Np,Muo),e(Np,qI),e(qI,Euo),e(Np,Cuo),e(x,wuo),e(x,jp),e(jp,ose),e(ose,Auo),e(jp,yuo),e(jp,NI),e(NI,Luo),e(jp,xuo),e(x,$uo),e(x,Dp),e(Dp,rse),e(rse,kuo),e(Dp,Suo),e(Dp,jI),e(jI,Ruo),e(Dp,Buo),e(x,Puo),e(x,Gp),e(Gp,tse),e(tse,Iuo),e(Gp,quo),e(Gp,DI),e(DI,Nuo),e(Gp,juo),e(x,Duo),e(x,Op),e(Op,ase),e(ase,Guo),e(Op,Ouo),e(Op,GI),e(GI,Vuo),e(Op,Xuo),e(x,zuo),e(x,Vp),e(Vp,nse),e(nse,Quo),e(Vp,Wuo),e(Vp,OI),e(OI,Huo),e(Vp,Uuo),e(x,Juo),e(x,Xp),e(Xp,sse),e(sse,Yuo),e(Xp,Kuo),e(Xp,VI),e(VI,Zuo),e(Xp,e_o),e(x,o_o),e(x,zp),e(zp,lse),e(lse,r_o),e(zp,t_o),e(zp,XI),e(XI,a_o),e(zp,n_o),e(x,s_o),e(x,Qp),e(Qp,ise),e(ise,l_o),e(Qp,i_o),e(Qp,zI),e(zI,d_o),e(Qp,c_o),e(x,f_o),e(x,Wp),e(Wp,dse),e(dse,m_o),e(Wp,g_o),e(Wp,QI),e(QI,h_o),e(Wp,p_o),e(x,u_o),e(x,Hp),e(Hp,cse),e(cse,__o),e(Hp,b_o),e(Hp,WI),e(WI,v_o),e(Hp,F_o),e(x,T_o),e(x,Up),e(Up,fse),e(fse,M_o),e(Up,E_o),e(Up,HI),e(HI,C_o),e(Up,w_o),e(x,A_o),e(x,Jp),e(Jp,mse),e(mse,y_o),e(Jp,L_o),e(Jp,UI),e(UI,x_o),e(Jp,$_o),e(x,k_o),e(x,Yp),e(Yp,gse),e(gse,S_o),e(Yp,R_o),e(Yp,JI),e(JI,B_o),e(Yp,P_o),e(x,I_o),e(x,Kp),e(Kp,hse),e(hse,q_o),e(Kp,N_o),e(Kp,YI),e(YI,j_o),e(Kp,D_o),e(x,G_o),e(x,Zp),e(Zp,pse),e(pse,O_o),e(Zp,V_o),e(Zp,KI),e(KI,X_o),e(Zp,z_o),e(x,Q_o),e(x,eu),e(eu,use),e(use,W_o),e(eu,H_o),e(eu,ZI),e(ZI,U_o),e(eu,J_o),e(x,Y_o),e(x,ou),e(ou,_se),e(_se,K_o),e(ou,Z_o),e(ou,eq),e(eq,e1o),e(ou,o1o),e(x,r1o),e(x,ru),e(ru,bse),e(bse,t1o),e(ru,a1o),e(ru,oq),e(oq,n1o),e(ru,s1o),e(x,l1o),e(x,tu),e(tu,vse),e(vse,i1o),e(tu,d1o),e(tu,rq),e(rq,c1o),e(tu,f1o),e(x,m1o),e(x,au),e(au,Fse),e(Fse,g1o),e(au,h1o),e(au,tq),e(tq,p1o),e(au,u1o),e(x,_1o),e(x,nu),e(nu,Tse),e(Tse,b1o),e(nu,v1o),e(nu,aq),e(aq,F1o),e(nu,T1o),e(x,M1o),e(x,su),e(su,Mse),e(Mse,E1o),e(su,C1o),e(su,nq),e(nq,w1o),e(su,A1o),e(x,y1o),e(x,lu),e(lu,Ese),e(Ese,L1o),e(lu,x1o),e(lu,sq),e(sq,$1o),e(lu,k1o),e(x,S1o),e(x,iu),e(iu,Cse),e(Cse,R1o),e(iu,B1o),e(iu,lq),e(lq,P1o),e(iu,I1o),e(x,q1o),e(x,du),e(du,wse),e(wse,N1o),e(du,j1o),e(du,iq),e(iq,D1o),e(du,G1o),e(x,O1o),e(x,cu),e(cu,Ase),e(Ase,V1o),e(cu,X1o),e(cu,dq),e(dq,z1o),e(cu,Q1o),e(x,W1o),e(x,fu),e(fu,yse),e(yse,H1o),e(fu,U1o),e(fu,cq),e(cq,J1o),e(fu,Y1o),e(x,K1o),e(x,mu),e(mu,Lse),e(Lse,Z1o),e(mu,e8o),e(mu,fq),e(fq,o8o),e(mu,r8o),e(x,t8o),e(x,gu),e(gu,xse),e(xse,a8o),e(gu,n8o),e(gu,mq),e(mq,s8o),e(gu,l8o),e(x,i8o),e(x,hu),e(hu,$se),e($se,d8o),e(hu,c8o),e(hu,gq),e(gq,f8o),e(hu,m8o),e(x,g8o),e(x,pu),e(pu,kse),e(kse,h8o),e(pu,p8o),e(pu,hq),e(hq,u8o),e(pu,_8o),e(x,b8o),e(x,uu),e(uu,Sse),e(Sse,v8o),e(uu,F8o),e(uu,pq),e(pq,T8o),e(uu,M8o),e(x,E8o),e(x,_u),e(_u,Rse),e(Rse,C8o),e(_u,w8o),e(_u,uq),e(uq,A8o),e(_u,y8o),e(x,L8o),e(x,bu),e(bu,Bse),e(Bse,x8o),e(bu,$8o),e(bu,_q),e(_q,k8o),e(bu,S8o),e(x,R8o),e(x,vu),e(vu,Pse),e(Pse,B8o),e(vu,P8o),e(vu,bq),e(bq,I8o),e(vu,q8o),e(x,N8o),e(x,Fu),e(Fu,Ise),e(Ise,j8o),e(Fu,D8o),e(Fu,vq),e(vq,G8o),e(Fu,O8o),e(x,V8o),e(x,Tu),e(Tu,qse),e(qse,X8o),e(Tu,z8o),e(Tu,Fq),e(Fq,Q8o),e(Tu,W8o),e(x,H8o),e(x,Mu),e(Mu,Nse),e(Nse,U8o),e(Mu,J8o),e(Mu,Tq),e(Tq,Y8o),e(Mu,K8o),e(x,Z8o),e(x,Eu),e(Eu,jse),e(jse,ebo),e(Eu,obo),e(Eu,Mq),e(Mq,rbo),e(Eu,tbo),e(x,abo),e(x,Cu),e(Cu,Dse),e(Dse,nbo),e(Cu,sbo),e(Cu,Eq),e(Eq,lbo),e(Cu,ibo),e(x,dbo),e(x,wu),e(wu,Gse),e(Gse,cbo),e(wu,fbo),e(wu,Cq),e(Cq,mbo),e(wu,gbo),e(x,hbo),e(x,Au),e(Au,Ose),e(Ose,pbo),e(Au,ubo),e(Au,wq),e(wq,_bo),e(Au,bbo),e(x,vbo),e(x,yu),e(yu,Vse),e(Vse,Fbo),e(yu,Tbo),e(yu,Aq),e(Aq,Mbo),e(yu,Ebo),e(x,Cbo),e(x,Lu),e(Lu,Xse),e(Xse,wbo),e(Lu,Abo),e(Lu,yq),e(yq,ybo),e(Lu,Lbo),e(x,xbo),e(x,xu),e(xu,zse),e(zse,$bo),e(xu,kbo),e(xu,Lq),e(Lq,Sbo),e(xu,Rbo),e(x,Bbo),e(x,$u),e($u,Qse),e(Qse,Pbo),e($u,Ibo),e($u,xq),e(xq,qbo),e($u,Nbo),e(x,jbo),e(x,ku),e(ku,Wse),e(Wse,Dbo),e(ku,Gbo),e(ku,$q),e($q,Obo),e(ku,Vbo),e(x,Xbo),e(x,Su),e(Su,Hse),e(Hse,zbo),e(Su,Qbo),e(Su,kq),e(kq,Wbo),e(Su,Hbo),e(x,Ubo),e(x,Ru),e(Ru,Use),e(Use,Jbo),e(Ru,Ybo),e(Ru,Sq),e(Sq,Kbo),e(Ru,Zbo),e(x,e2o),e(x,Bu),e(Bu,Jse),e(Jse,o2o),e(Bu,r2o),e(Bu,Rq),e(Rq,t2o),e(Bu,a2o),e(He,n2o),e(He,Pu),e(Pu,s2o),e(Pu,Yse),e(Yse,l2o),e(Pu,i2o),e(Pu,Kse),e(Kse,d2o),e(He,c2o),M(Iu,He,null),b(f,mIe,_),b(f,wi,_),e(wi,qu),e(qu,Zse),M(kA,Zse,null),e(wi,f2o),e(wi,ele),e(ele,m2o),b(f,gIe,_),b(f,xo,_),M(SA,xo,null),e(xo,g2o),e(xo,Ai),e(Ai,h2o),e(Ai,Bq),e(Bq,p2o),e(Ai,u2o),e(Ai,Pq),e(Pq,_2o),e(Ai,b2o),e(xo,v2o),e(xo,RA),e(RA,F2o),e(RA,ole),e(ole,T2o),e(RA,M2o),e(xo,E2o),e(xo,rt),M(BA,rt,null),e(rt,C2o),e(rt,rle),e(rle,w2o),e(rt,A2o),e(rt,yi),e(yi,y2o),e(yi,tle),e(tle,L2o),e(yi,x2o),e(yi,Iq),e(Iq,$2o),e(yi,k2o),e(rt,S2o),M(Nu,rt,null),e(xo,R2o),e(xo,Ue),M(PA,Ue,null),e(Ue,B2o),e(Ue,ale),e(ale,P2o),e(Ue,I2o),e(Ue,ya),e(ya,q2o),e(ya,nle),e(nle,N2o),e(ya,j2o),e(ya,sle),e(sle,D2o),e(ya,G2o),e(ya,lle),e(lle,O2o),e(ya,V2o),e(Ue,X2o),e(Ue,G),e(G,ju),e(ju,ile),e(ile,z2o),e(ju,Q2o),e(ju,qq),e(qq,W2o),e(ju,H2o),e(G,U2o),e(G,Du),e(Du,dle),e(dle,J2o),e(Du,Y2o),e(Du,Nq),e(Nq,K2o),e(Du,Z2o),e(G,evo),e(G,Gu),e(Gu,cle),e(cle,ovo),e(Gu,rvo),e(Gu,jq),e(jq,tvo),e(Gu,avo),e(G,nvo),e(G,Ou),e(Ou,fle),e(fle,svo),e(Ou,lvo),e(Ou,Dq),e(Dq,ivo),e(Ou,dvo),e(G,cvo),e(G,Vu),e(Vu,mle),e(mle,fvo),e(Vu,mvo),e(Vu,Gq),e(Gq,gvo),e(Vu,hvo),e(G,pvo),e(G,Xu),e(Xu,gle),e(gle,uvo),e(Xu,_vo),e(Xu,Oq),e(Oq,bvo),e(Xu,vvo),e(G,Fvo),e(G,zu),e(zu,hle),e(hle,Tvo),e(zu,Mvo),e(zu,Vq),e(Vq,Evo),e(zu,Cvo),e(G,wvo),e(G,Qu),e(Qu,ple),e(ple,Avo),e(Qu,yvo),e(Qu,Xq),e(Xq,Lvo),e(Qu,xvo),e(G,$vo),e(G,Wu),e(Wu,ule),e(ule,kvo),e(Wu,Svo),e(Wu,zq),e(zq,Rvo),e(Wu,Bvo),e(G,Pvo),e(G,Hu),e(Hu,_le),e(_le,Ivo),e(Hu,qvo),e(Hu,Qq),e(Qq,Nvo),e(Hu,jvo),e(G,Dvo),e(G,Uu),e(Uu,ble),e(ble,Gvo),e(Uu,Ovo),e(Uu,Wq),e(Wq,Vvo),e(Uu,Xvo),e(G,zvo),e(G,Ju),e(Ju,vle),e(vle,Qvo),e(Ju,Wvo),e(Ju,Hq),e(Hq,Hvo),e(Ju,Uvo),e(G,Jvo),e(G,Yu),e(Yu,Fle),e(Fle,Yvo),e(Yu,Kvo),e(Yu,Uq),e(Uq,Zvo),e(Yu,eFo),e(G,oFo),e(G,Ku),e(Ku,Tle),e(Tle,rFo),e(Ku,tFo),e(Ku,Jq),e(Jq,aFo),e(Ku,nFo),e(G,sFo),e(G,Zu),e(Zu,Mle),e(Mle,lFo),e(Zu,iFo),e(Zu,Yq),e(Yq,dFo),e(Zu,cFo),e(G,fFo),e(G,e_),e(e_,Ele),e(Ele,mFo),e(e_,gFo),e(e_,Kq),e(Kq,hFo),e(e_,pFo),e(G,uFo),e(G,o_),e(o_,Cle),e(Cle,_Fo),e(o_,bFo),e(o_,Zq),e(Zq,vFo),e(o_,FFo),e(G,TFo),e(G,r_),e(r_,wle),e(wle,MFo),e(r_,EFo),e(r_,eN),e(eN,CFo),e(r_,wFo),e(G,AFo),e(G,t_),e(t_,Ale),e(Ale,yFo),e(t_,LFo),e(t_,oN),e(oN,xFo),e(t_,$Fo),e(G,kFo),e(G,a_),e(a_,yle),e(yle,SFo),e(a_,RFo),e(a_,rN),e(rN,BFo),e(a_,PFo),e(G,IFo),e(G,n_),e(n_,Lle),e(Lle,qFo),e(n_,NFo),e(n_,tN),e(tN,jFo),e(n_,DFo),e(G,GFo),e(G,s_),e(s_,xle),e(xle,OFo),e(s_,VFo),e(s_,aN),e(aN,XFo),e(s_,zFo),e(G,QFo),e(G,l_),e(l_,$le),e($le,WFo),e(l_,HFo),e(l_,nN),e(nN,UFo),e(l_,JFo),e(G,YFo),e(G,i_),e(i_,kle),e(kle,KFo),e(i_,ZFo),e(i_,sN),e(sN,e6o),e(i_,o6o),e(G,r6o),e(G,d_),e(d_,Sle),e(Sle,t6o),e(d_,a6o),e(d_,lN),e(lN,n6o),e(d_,s6o),e(G,l6o),e(G,c_),e(c_,Rle),e(Rle,i6o),e(c_,d6o),e(c_,iN),e(iN,c6o),e(c_,f6o),e(G,m6o),e(G,f_),e(f_,Ble),e(Ble,g6o),e(f_,h6o),e(f_,dN),e(dN,p6o),e(f_,u6o),e(G,_6o),e(G,m_),e(m_,Ple),e(Ple,b6o),e(m_,v6o),e(m_,cN),e(cN,F6o),e(m_,T6o),e(G,M6o),e(G,g_),e(g_,Ile),e(Ile,E6o),e(g_,C6o),e(g_,fN),e(fN,w6o),e(g_,A6o),e(G,y6o),e(G,h_),e(h_,qle),e(qle,L6o),e(h_,x6o),e(h_,mN),e(mN,$6o),e(h_,k6o),e(G,S6o),e(G,p_),e(p_,Nle),e(Nle,R6o),e(p_,B6o),e(p_,gN),e(gN,P6o),e(p_,I6o),e(G,q6o),e(G,u_),e(u_,jle),e(jle,N6o),e(u_,j6o),e(u_,hN),e(hN,D6o),e(u_,G6o),e(G,O6o),e(G,__),e(__,Dle),e(Dle,V6o),e(__,X6o),e(__,pN),e(pN,z6o),e(__,Q6o),e(G,W6o),e(G,b_),e(b_,Gle),e(Gle,H6o),e(b_,U6o),e(b_,uN),e(uN,J6o),e(b_,Y6o),e(G,K6o),e(G,v_),e(v_,Ole),e(Ole,Z6o),e(v_,eTo),e(v_,_N),e(_N,oTo),e(v_,rTo),e(G,tTo),e(G,F_),e(F_,Vle),e(Vle,aTo),e(F_,nTo),e(F_,bN),e(bN,sTo),e(F_,lTo),e(G,iTo),e(G,T_),e(T_,Xle),e(Xle,dTo),e(T_,cTo),e(T_,vN),e(vN,fTo),e(T_,mTo),e(G,gTo),e(G,M_),e(M_,zle),e(zle,hTo),e(M_,pTo),e(M_,FN),e(FN,uTo),e(M_,_To),e(G,bTo),e(G,E_),e(E_,Qle),e(Qle,vTo),e(E_,FTo),e(E_,TN),e(TN,TTo),e(E_,MTo),e(G,ETo),e(G,C_),e(C_,Wle),e(Wle,CTo),e(C_,wTo),e(C_,MN),e(MN,ATo),e(C_,yTo),e(Ue,LTo),e(Ue,w_),e(w_,xTo),e(w_,Hle),e(Hle,$To),e(w_,kTo),e(w_,Ule),e(Ule,STo),e(Ue,RTo),M(A_,Ue,null),b(f,hIe,_),b(f,Li,_),e(Li,y_),e(y_,Jle),M(IA,Jle,null),e(Li,BTo),e(Li,Yle),e(Yle,PTo),b(f,pIe,_),b(f,$o,_),M(qA,$o,null),e($o,ITo),e($o,xi),e(xi,qTo),e(xi,EN),e(EN,NTo),e(xi,jTo),e(xi,CN),e(CN,DTo),e(xi,GTo),e($o,OTo),e($o,NA),e(NA,VTo),e(NA,Kle),e(Kle,XTo),e(NA,zTo),e($o,QTo),e($o,tt),M(jA,tt,null),e(tt,WTo),e(tt,Zle),e(Zle,HTo),e(tt,UTo),e(tt,$i),e($i,JTo),e($i,eie),e(eie,YTo),e($i,KTo),e($i,wN),e(wN,ZTo),e($i,e9o),e(tt,o9o),M(L_,tt,null),e($o,r9o),e($o,Je),M(DA,Je,null),e(Je,t9o),e(Je,oie),e(oie,a9o),e(Je,n9o),e(Je,La),e(La,s9o),e(La,rie),e(rie,l9o),e(La,i9o),e(La,tie),e(tie,d9o),e(La,c9o),e(La,aie),e(aie,f9o),e(La,m9o),e(Je,g9o),e(Je,z),e(z,x_),e(x_,nie),e(nie,h9o),e(x_,p9o),e(x_,AN),e(AN,u9o),e(x_,_9o),e(z,b9o),e(z,$_),e($_,sie),e(sie,v9o),e($_,F9o),e($_,yN),e(yN,T9o),e($_,M9o),e(z,E9o),e(z,k_),e(k_,lie),e(lie,C9o),e(k_,w9o),e(k_,LN),e(LN,A9o),e(k_,y9o),e(z,L9o),e(z,S_),e(S_,iie),e(iie,x9o),e(S_,$9o),e(S_,xN),e(xN,k9o),e(S_,S9o),e(z,R9o),e(z,R_),e(R_,die),e(die,B9o),e(R_,P9o),e(R_,$N),e($N,I9o),e(R_,q9o),e(z,N9o),e(z,B_),e(B_,cie),e(cie,j9o),e(B_,D9o),e(B_,kN),e(kN,G9o),e(B_,O9o),e(z,V9o),e(z,P_),e(P_,fie),e(fie,X9o),e(P_,z9o),e(P_,SN),e(SN,Q9o),e(P_,W9o),e(z,H9o),e(z,I_),e(I_,mie),e(mie,U9o),e(I_,J9o),e(I_,RN),e(RN,Y9o),e(I_,K9o),e(z,Z9o),e(z,q_),e(q_,gie),e(gie,eMo),e(q_,oMo),e(q_,BN),e(BN,rMo),e(q_,tMo),e(z,aMo),e(z,N_),e(N_,hie),e(hie,nMo),e(N_,sMo),e(N_,PN),e(PN,lMo),e(N_,iMo),e(z,dMo),e(z,j_),e(j_,pie),e(pie,cMo),e(j_,fMo),e(j_,IN),e(IN,mMo),e(j_,gMo),e(z,hMo),e(z,D_),e(D_,uie),e(uie,pMo),e(D_,uMo),e(D_,qN),e(qN,_Mo),e(D_,bMo),e(z,vMo),e(z,G_),e(G_,_ie),e(_ie,FMo),e(G_,TMo),e(G_,NN),e(NN,MMo),e(G_,EMo),e(z,CMo),e(z,O_),e(O_,bie),e(bie,wMo),e(O_,AMo),e(O_,jN),e(jN,yMo),e(O_,LMo),e(z,xMo),e(z,V_),e(V_,vie),e(vie,$Mo),e(V_,kMo),e(V_,DN),e(DN,SMo),e(V_,RMo),e(z,BMo),e(z,X_),e(X_,Fie),e(Fie,PMo),e(X_,IMo),e(X_,GN),e(GN,qMo),e(X_,NMo),e(z,jMo),e(z,z_),e(z_,Tie),e(Tie,DMo),e(z_,GMo),e(z_,ON),e(ON,OMo),e(z_,VMo),e(z,XMo),e(z,Q_),e(Q_,Mie),e(Mie,zMo),e(Q_,QMo),e(Q_,VN),e(VN,WMo),e(Q_,HMo),e(z,UMo),e(z,W_),e(W_,Eie),e(Eie,JMo),e(W_,YMo),e(W_,XN),e(XN,KMo),e(W_,ZMo),e(z,e4o),e(z,H_),e(H_,Cie),e(Cie,o4o),e(H_,r4o),e(H_,zN),e(zN,t4o),e(H_,a4o),e(z,n4o),e(z,U_),e(U_,wie),e(wie,s4o),e(U_,l4o),e(U_,QN),e(QN,i4o),e(U_,d4o),e(z,c4o),e(z,J_),e(J_,Aie),e(Aie,f4o),e(J_,m4o),e(J_,WN),e(WN,g4o),e(J_,h4o),e(z,p4o),e(z,Y_),e(Y_,yie),e(yie,u4o),e(Y_,_4o),e(Y_,HN),e(HN,b4o),e(Y_,v4o),e(z,F4o),e(z,K_),e(K_,Lie),e(Lie,T4o),e(K_,M4o),e(K_,UN),e(UN,E4o),e(K_,C4o),e(z,w4o),e(z,Z_),e(Z_,xie),e(xie,A4o),e(Z_,y4o),e(Z_,JN),e(JN,L4o),e(Z_,x4o),e(z,$4o),e(z,e1),e(e1,$ie),e($ie,k4o),e(e1,S4o),e(e1,YN),e(YN,R4o),e(e1,B4o),e(z,P4o),e(z,o1),e(o1,kie),e(kie,I4o),e(o1,q4o),e(o1,KN),e(KN,N4o),e(o1,j4o),e(z,D4o),e(z,r1),e(r1,Sie),e(Sie,G4o),e(r1,O4o),e(r1,ZN),e(ZN,V4o),e(r1,X4o),e(z,z4o),e(z,t1),e(t1,Rie),e(Rie,Q4o),e(t1,W4o),e(t1,ej),e(ej,H4o),e(t1,U4o),e(z,J4o),e(z,a1),e(a1,Bie),e(Bie,Y4o),e(a1,K4o),e(a1,oj),e(oj,Z4o),e(a1,eEo),e(z,oEo),e(z,n1),e(n1,Pie),e(Pie,rEo),e(n1,tEo),e(n1,rj),e(rj,aEo),e(n1,nEo),e(z,sEo),e(z,s1),e(s1,Iie),e(Iie,lEo),e(s1,iEo),e(s1,tj),e(tj,dEo),e(s1,cEo),e(z,fEo),e(z,l1),e(l1,qie),e(qie,mEo),e(l1,gEo),e(l1,aj),e(aj,hEo),e(l1,pEo),e(z,uEo),e(z,i1),e(i1,Nie),e(Nie,_Eo),e(i1,bEo),e(i1,nj),e(nj,vEo),e(i1,FEo),e(z,TEo),e(z,d1),e(d1,jie),e(jie,MEo),e(d1,EEo),e(d1,sj),e(sj,CEo),e(d1,wEo),e(z,AEo),e(z,c1),e(c1,Die),e(Die,yEo),e(c1,LEo),e(c1,lj),e(lj,xEo),e(c1,$Eo),e(Je,kEo),e(Je,f1),e(f1,SEo),e(f1,Gie),e(Gie,REo),e(f1,BEo),e(f1,Oie),e(Oie,PEo),e(Je,IEo),M(m1,Je,null),b(f,uIe,_),b(f,ki,_),e(ki,g1),e(g1,Vie),M(GA,Vie,null),e(ki,qEo),e(ki,Xie),e(Xie,NEo),b(f,_Ie,_),b(f,ko,_),M(OA,ko,null),e(ko,jEo),e(ko,Si),e(Si,DEo),e(Si,ij),e(ij,GEo),e(Si,OEo),e(Si,dj),e(dj,VEo),e(Si,XEo),e(ko,zEo),e(ko,VA),e(VA,QEo),e(VA,zie),e(zie,WEo),e(VA,HEo),e(ko,UEo),e(ko,at),M(XA,at,null),e(at,JEo),e(at,Qie),e(Qie,YEo),e(at,KEo),e(at,Ri),e(Ri,ZEo),e(Ri,Wie),e(Wie,e5o),e(Ri,o5o),e(Ri,cj),e(cj,r5o),e(Ri,t5o),e(at,a5o),M(h1,at,null),e(ko,n5o),e(ko,Ye),M(zA,Ye,null),e(Ye,s5o),e(Ye,Hie),e(Hie,l5o),e(Ye,i5o),e(Ye,xa),e(xa,d5o),e(xa,Uie),e(Uie,c5o),e(xa,f5o),e(xa,Jie),e(Jie,m5o),e(xa,g5o),e(xa,Yie),e(Yie,h5o),e(xa,p5o),e(Ye,u5o),e(Ye,Q),e(Q,p1),e(p1,Kie),e(Kie,_5o),e(p1,b5o),e(p1,fj),e(fj,v5o),e(p1,F5o),e(Q,T5o),e(Q,u1),e(u1,Zie),e(Zie,M5o),e(u1,E5o),e(u1,mj),e(mj,C5o),e(u1,w5o),e(Q,A5o),e(Q,_1),e(_1,ede),e(ede,y5o),e(_1,L5o),e(_1,gj),e(gj,x5o),e(_1,$5o),e(Q,k5o),e(Q,b1),e(b1,ode),e(ode,S5o),e(b1,R5o),e(b1,hj),e(hj,B5o),e(b1,P5o),e(Q,I5o),e(Q,v1),e(v1,rde),e(rde,q5o),e(v1,N5o),e(v1,pj),e(pj,j5o),e(v1,D5o),e(Q,G5o),e(Q,F1),e(F1,tde),e(tde,O5o),e(F1,V5o),e(F1,uj),e(uj,X5o),e(F1,z5o),e(Q,Q5o),e(Q,T1),e(T1,ade),e(ade,W5o),e(T1,H5o),e(T1,_j),e(_j,U5o),e(T1,J5o),e(Q,Y5o),e(Q,M1),e(M1,nde),e(nde,K5o),e(M1,Z5o),e(M1,bj),e(bj,eCo),e(M1,oCo),e(Q,rCo),e(Q,E1),e(E1,sde),e(sde,tCo),e(E1,aCo),e(E1,vj),e(vj,nCo),e(E1,sCo),e(Q,lCo),e(Q,C1),e(C1,lde),e(lde,iCo),e(C1,dCo),e(C1,Fj),e(Fj,cCo),e(C1,fCo),e(Q,mCo),e(Q,w1),e(w1,ide),e(ide,gCo),e(w1,hCo),e(w1,Tj),e(Tj,pCo),e(w1,uCo),e(Q,_Co),e(Q,A1),e(A1,dde),e(dde,bCo),e(A1,vCo),e(A1,Mj),e(Mj,FCo),e(A1,TCo),e(Q,MCo),e(Q,y1),e(y1,cde),e(cde,ECo),e(y1,CCo),e(y1,Ej),e(Ej,wCo),e(y1,ACo),e(Q,yCo),e(Q,L1),e(L1,fde),e(fde,LCo),e(L1,xCo),e(L1,Cj),e(Cj,$Co),e(L1,kCo),e(Q,SCo),e(Q,x1),e(x1,mde),e(mde,RCo),e(x1,BCo),e(x1,wj),e(wj,PCo),e(x1,ICo),e(Q,qCo),e(Q,$1),e($1,gde),e(gde,NCo),e($1,jCo),e($1,Aj),e(Aj,DCo),e($1,GCo),e(Q,OCo),e(Q,k1),e(k1,hde),e(hde,VCo),e(k1,XCo),e(k1,yj),e(yj,zCo),e(k1,QCo),e(Q,WCo),e(Q,S1),e(S1,pde),e(pde,HCo),e(S1,UCo),e(S1,Lj),e(Lj,JCo),e(S1,YCo),e(Q,KCo),e(Q,R1),e(R1,ude),e(ude,ZCo),e(R1,e3o),e(R1,xj),e(xj,o3o),e(R1,r3o),e(Q,t3o),e(Q,B1),e(B1,_de),e(_de,a3o),e(B1,n3o),e(B1,$j),e($j,s3o),e(B1,l3o),e(Q,i3o),e(Q,P1),e(P1,bde),e(bde,d3o),e(P1,c3o),e(P1,kj),e(kj,f3o),e(P1,m3o),e(Q,g3o),e(Q,I1),e(I1,vde),e(vde,h3o),e(I1,p3o),e(I1,Sj),e(Sj,u3o),e(I1,_3o),e(Q,b3o),e(Q,q1),e(q1,Fde),e(Fde,v3o),e(q1,F3o),e(q1,Rj),e(Rj,T3o),e(q1,M3o),e(Q,E3o),e(Q,N1),e(N1,Tde),e(Tde,C3o),e(N1,w3o),e(N1,Bj),e(Bj,A3o),e(N1,y3o),e(Q,L3o),e(Q,j1),e(j1,Mde),e(Mde,x3o),e(j1,$3o),e(j1,Pj),e(Pj,k3o),e(j1,S3o),e(Q,R3o),e(Q,D1),e(D1,Ede),e(Ede,B3o),e(D1,P3o),e(D1,Ij),e(Ij,I3o),e(D1,q3o),e(Q,N3o),e(Q,G1),e(G1,Cde),e(Cde,j3o),e(G1,D3o),e(G1,qj),e(qj,G3o),e(G1,O3o),e(Q,V3o),e(Q,O1),e(O1,wde),e(wde,X3o),e(O1,z3o),e(O1,Nj),e(Nj,Q3o),e(O1,W3o),e(Q,H3o),e(Q,V1),e(V1,Ade),e(Ade,U3o),e(V1,J3o),e(V1,jj),e(jj,Y3o),e(V1,K3o),e(Q,Z3o),e(Q,X1),e(X1,yde),e(yde,ewo),e(X1,owo),e(X1,Dj),e(Dj,rwo),e(X1,two),e(Q,awo),e(Q,z1),e(z1,Lde),e(Lde,nwo),e(z1,swo),e(z1,xde),e(xde,lwo),e(z1,iwo),e(Q,dwo),e(Q,Q1),e(Q1,$de),e($de,cwo),e(Q1,fwo),e(Q1,Gj),e(Gj,mwo),e(Q1,gwo),e(Q,hwo),e(Q,W1),e(W1,kde),e(kde,pwo),e(W1,uwo),e(W1,Oj),e(Oj,_wo),e(W1,bwo),e(Q,vwo),e(Q,H1),e(H1,Sde),e(Sde,Fwo),e(H1,Two),e(H1,Vj),e(Vj,Mwo),e(H1,Ewo),e(Q,Cwo),e(Q,U1),e(U1,Rde),e(Rde,wwo),e(U1,Awo),e(U1,Xj),e(Xj,ywo),e(U1,Lwo),e(Ye,xwo),e(Ye,J1),e(J1,$wo),e(J1,Bde),e(Bde,kwo),e(J1,Swo),e(J1,Pde),e(Pde,Rwo),e(Ye,Bwo),M(Y1,Ye,null),b(f,bIe,_),b(f,Bi,_),e(Bi,K1),e(K1,Ide),M(QA,Ide,null),e(Bi,Pwo),e(Bi,qde),e(qde,Iwo),b(f,vIe,_),b(f,So,_),M(WA,So,null),e(So,qwo),e(So,Pi),e(Pi,Nwo),e(Pi,zj),e(zj,jwo),e(Pi,Dwo),e(Pi,Qj),e(Qj,Gwo),e(Pi,Owo),e(So,Vwo),e(So,HA),e(HA,Xwo),e(HA,Nde),e(Nde,zwo),e(HA,Qwo),e(So,Wwo),e(So,nt),M(UA,nt,null),e(nt,Hwo),e(nt,jde),e(jde,Uwo),e(nt,Jwo),e(nt,Ii),e(Ii,Ywo),e(Ii,Dde),e(Dde,Kwo),e(Ii,Zwo),e(Ii,Wj),e(Wj,eAo),e(Ii,oAo),e(nt,rAo),M(Z1,nt,null),e(So,tAo),e(So,Ke),M(JA,Ke,null),e(Ke,aAo),e(Ke,Gde),e(Gde,nAo),e(Ke,sAo),e(Ke,$a),e($a,lAo),e($a,Ode),e(Ode,iAo),e($a,dAo),e($a,Vde),e(Vde,cAo),e($a,fAo),e($a,Xde),e(Xde,mAo),e($a,gAo),e(Ke,hAo),e(Ke,he),e(he,e8),e(e8,zde),e(zde,pAo),e(e8,uAo),e(e8,Hj),e(Hj,_Ao),e(e8,bAo),e(he,vAo),e(he,o8),e(o8,Qde),e(Qde,FAo),e(o8,TAo),e(o8,Uj),e(Uj,MAo),e(o8,EAo),e(he,CAo),e(he,r8),e(r8,Wde),e(Wde,wAo),e(r8,AAo),e(r8,Jj),e(Jj,yAo),e(r8,LAo),e(he,xAo),e(he,t8),e(t8,Hde),e(Hde,$Ao),e(t8,kAo),e(t8,Yj),e(Yj,SAo),e(t8,RAo),e(he,BAo),e(he,a8),e(a8,Ude),e(Ude,PAo),e(a8,IAo),e(a8,Kj),e(Kj,qAo),e(a8,NAo),e(he,jAo),e(he,n8),e(n8,Jde),e(Jde,DAo),e(n8,GAo),e(n8,Zj),e(Zj,OAo),e(n8,VAo),e(he,XAo),e(he,s8),e(s8,Yde),e(Yde,zAo),e(s8,QAo),e(s8,eD),e(eD,WAo),e(s8,HAo),e(he,UAo),e(he,l8),e(l8,Kde),e(Kde,JAo),e(l8,YAo),e(l8,oD),e(oD,KAo),e(l8,ZAo),e(he,e0o),e(he,i8),e(i8,Zde),e(Zde,o0o),e(i8,r0o),e(i8,rD),e(rD,t0o),e(i8,a0o),e(he,n0o),e(he,d8),e(d8,ece),e(ece,s0o),e(d8,l0o),e(d8,tD),e(tD,i0o),e(d8,d0o),e(he,c0o),e(he,c8),e(c8,oce),e(oce,f0o),e(c8,m0o),e(c8,aD),e(aD,g0o),e(c8,h0o),e(he,p0o),e(he,f8),e(f8,rce),e(rce,u0o),e(f8,_0o),e(f8,nD),e(nD,b0o),e(f8,v0o),e(he,F0o),e(he,m8),e(m8,tce),e(tce,T0o),e(m8,M0o),e(m8,sD),e(sD,E0o),e(m8,C0o),e(he,w0o),e(he,g8),e(g8,ace),e(ace,A0o),e(g8,y0o),e(g8,lD),e(lD,L0o),e(g8,x0o),e(he,$0o),e(he,h8),e(h8,nce),e(nce,k0o),e(h8,S0o),e(h8,iD),e(iD,R0o),e(h8,B0o),e(he,P0o),e(he,p8),e(p8,sce),e(sce,I0o),e(p8,q0o),e(p8,dD),e(dD,N0o),e(p8,j0o),e(he,D0o),e(he,u8),e(u8,lce),e(lce,G0o),e(u8,O0o),e(u8,cD),e(cD,V0o),e(u8,X0o),e(Ke,z0o),e(Ke,_8),e(_8,Q0o),e(_8,ice),e(ice,W0o),e(_8,H0o),e(_8,dce),e(dce,U0o),e(Ke,J0o),M(b8,Ke,null),b(f,FIe,_),b(f,qi,_),e(qi,v8),e(v8,cce),M(YA,cce,null),e(qi,Y0o),e(qi,fce),e(fce,K0o),b(f,TIe,_),b(f,Ro,_),M(KA,Ro,null),e(Ro,Z0o),e(Ro,Ni),e(Ni,eyo),e(Ni,fD),e(fD,oyo),e(Ni,ryo),e(Ni,mD),e(mD,tyo),e(Ni,ayo),e(Ro,nyo),e(Ro,ZA),e(ZA,syo),e(ZA,mce),e(mce,lyo),e(ZA,iyo),e(Ro,dyo),e(Ro,st),M(e0,st,null),e(st,cyo),e(st,gce),e(gce,fyo),e(st,myo),e(st,ji),e(ji,gyo),e(ji,hce),e(hce,hyo),e(ji,pyo),e(ji,gD),e(gD,uyo),e(ji,_yo),e(st,byo),M(F8,st,null),e(Ro,vyo),e(Ro,Ze),M(o0,Ze,null),e(Ze,Fyo),e(Ze,pce),e(pce,Tyo),e(Ze,Myo),e(Ze,ka),e(ka,Eyo),e(ka,uce),e(uce,Cyo),e(ka,wyo),e(ka,_ce),e(_ce,Ayo),e(ka,yyo),e(ka,bce),e(bce,Lyo),e(ka,xyo),e(Ze,$yo),e(Ze,q),e(q,T8),e(T8,vce),e(vce,kyo),e(T8,Syo),e(T8,hD),e(hD,Ryo),e(T8,Byo),e(q,Pyo),e(q,M8),e(M8,Fce),e(Fce,Iyo),e(M8,qyo),e(M8,pD),e(pD,Nyo),e(M8,jyo),e(q,Dyo),e(q,E8),e(E8,Tce),e(Tce,Gyo),e(E8,Oyo),e(E8,uD),e(uD,Vyo),e(E8,Xyo),e(q,zyo),e(q,C8),e(C8,Mce),e(Mce,Qyo),e(C8,Wyo),e(C8,_D),e(_D,Hyo),e(C8,Uyo),e(q,Jyo),e(q,w8),e(w8,Ece),e(Ece,Yyo),e(w8,Kyo),e(w8,bD),e(bD,Zyo),e(w8,eLo),e(q,oLo),e(q,A8),e(A8,Cce),e(Cce,rLo),e(A8,tLo),e(A8,vD),e(vD,aLo),e(A8,nLo),e(q,sLo),e(q,y8),e(y8,wce),e(wce,lLo),e(y8,iLo),e(y8,FD),e(FD,dLo),e(y8,cLo),e(q,fLo),e(q,L8),e(L8,Ace),e(Ace,mLo),e(L8,gLo),e(L8,TD),e(TD,hLo),e(L8,pLo),e(q,uLo),e(q,x8),e(x8,yce),e(yce,_Lo),e(x8,bLo),e(x8,MD),e(MD,vLo),e(x8,FLo),e(q,TLo),e(q,$8),e($8,Lce),e(Lce,MLo),e($8,ELo),e($8,ED),e(ED,CLo),e($8,wLo),e(q,ALo),e(q,k8),e(k8,xce),e(xce,yLo),e(k8,LLo),e(k8,CD),e(CD,xLo),e(k8,$Lo),e(q,kLo),e(q,S8),e(S8,$ce),e($ce,SLo),e(S8,RLo),e(S8,wD),e(wD,BLo),e(S8,PLo),e(q,ILo),e(q,R8),e(R8,kce),e(kce,qLo),e(R8,NLo),e(R8,AD),e(AD,jLo),e(R8,DLo),e(q,GLo),e(q,B8),e(B8,Sce),e(Sce,OLo),e(B8,VLo),e(B8,yD),e(yD,XLo),e(B8,zLo),e(q,QLo),e(q,P8),e(P8,Rce),e(Rce,WLo),e(P8,HLo),e(P8,LD),e(LD,ULo),e(P8,JLo),e(q,YLo),e(q,I8),e(I8,Bce),e(Bce,KLo),e(I8,ZLo),e(I8,xD),e(xD,exo),e(I8,oxo),e(q,rxo),e(q,q8),e(q8,Pce),e(Pce,txo),e(q8,axo),e(q8,$D),e($D,nxo),e(q8,sxo),e(q,lxo),e(q,N8),e(N8,Ice),e(Ice,ixo),e(N8,dxo),e(N8,kD),e(kD,cxo),e(N8,fxo),e(q,mxo),e(q,j8),e(j8,qce),e(qce,gxo),e(j8,hxo),e(j8,SD),e(SD,pxo),e(j8,uxo),e(q,_xo),e(q,D8),e(D8,Nce),e(Nce,bxo),e(D8,vxo),e(D8,RD),e(RD,Fxo),e(D8,Txo),e(q,Mxo),e(q,G8),e(G8,jce),e(jce,Exo),e(G8,Cxo),e(G8,BD),e(BD,wxo),e(G8,Axo),e(q,yxo),e(q,O8),e(O8,Dce),e(Dce,Lxo),e(O8,xxo),e(O8,PD),e(PD,$xo),e(O8,kxo),e(q,Sxo),e(q,V8),e(V8,Gce),e(Gce,Rxo),e(V8,Bxo),e(V8,ID),e(ID,Pxo),e(V8,Ixo),e(q,qxo),e(q,X8),e(X8,Oce),e(Oce,Nxo),e(X8,jxo),e(X8,qD),e(qD,Dxo),e(X8,Gxo),e(q,Oxo),e(q,z8),e(z8,Vce),e(Vce,Vxo),e(z8,Xxo),e(z8,ND),e(ND,zxo),e(z8,Qxo),e(q,Wxo),e(q,Q8),e(Q8,Xce),e(Xce,Hxo),e(Q8,Uxo),e(Q8,jD),e(jD,Jxo),e(Q8,Yxo),e(q,Kxo),e(q,W8),e(W8,zce),e(zce,Zxo),e(W8,e7o),e(W8,DD),e(DD,o7o),e(W8,r7o),e(q,t7o),e(q,H8),e(H8,Qce),e(Qce,a7o),e(H8,n7o),e(H8,GD),e(GD,s7o),e(H8,l7o),e(q,i7o),e(q,U8),e(U8,Wce),e(Wce,d7o),e(U8,c7o),e(U8,OD),e(OD,f7o),e(U8,m7o),e(q,g7o),e(q,J8),e(J8,Hce),e(Hce,h7o),e(J8,p7o),e(J8,VD),e(VD,u7o),e(J8,_7o),e(q,b7o),e(q,Y8),e(Y8,Uce),e(Uce,v7o),e(Y8,F7o),e(Y8,XD),e(XD,T7o),e(Y8,M7o),e(q,E7o),e(q,K8),e(K8,Jce),e(Jce,C7o),e(K8,w7o),e(K8,zD),e(zD,A7o),e(K8,y7o),e(q,L7o),e(q,Z8),e(Z8,Yce),e(Yce,x7o),e(Z8,$7o),e(Z8,QD),e(QD,k7o),e(Z8,S7o),e(q,R7o),e(q,eb),e(eb,Kce),e(Kce,B7o),e(eb,P7o),e(eb,WD),e(WD,I7o),e(eb,q7o),e(q,N7o),e(q,ob),e(ob,Zce),e(Zce,j7o),e(ob,D7o),e(ob,HD),e(HD,G7o),e(ob,O7o),e(q,V7o),e(q,rb),e(rb,efe),e(efe,X7o),e(rb,z7o),e(rb,UD),e(UD,Q7o),e(rb,W7o),e(q,H7o),e(q,tb),e(tb,ofe),e(ofe,U7o),e(tb,J7o),e(tb,JD),e(JD,Y7o),e(tb,K7o),e(q,Z7o),e(q,ab),e(ab,rfe),e(rfe,e$o),e(ab,o$o),e(ab,YD),e(YD,r$o),e(ab,t$o),e(q,a$o),e(q,nb),e(nb,tfe),e(tfe,n$o),e(nb,s$o),e(nb,KD),e(KD,l$o),e(nb,i$o),e(q,d$o),e(q,sb),e(sb,afe),e(afe,c$o),e(sb,f$o),e(sb,ZD),e(ZD,m$o),e(sb,g$o),e(q,h$o),e(q,lb),e(lb,nfe),e(nfe,p$o),e(lb,u$o),e(lb,eG),e(eG,_$o),e(lb,b$o),e(q,v$o),e(q,ib),e(ib,sfe),e(sfe,F$o),e(ib,T$o),e(ib,oG),e(oG,M$o),e(ib,E$o),e(q,C$o),e(q,db),e(db,lfe),e(lfe,w$o),e(db,A$o),e(db,rG),e(rG,y$o),e(db,L$o),e(q,x$o),e(q,cb),e(cb,ife),e(ife,$$o),e(cb,k$o),e(cb,tG),e(tG,S$o),e(cb,R$o),e(q,B$o),e(q,fb),e(fb,dfe),e(dfe,P$o),e(fb,I$o),e(fb,aG),e(aG,q$o),e(fb,N$o),e(q,j$o),e(q,mb),e(mb,cfe),e(cfe,D$o),e(mb,G$o),e(mb,nG),e(nG,O$o),e(mb,V$o),e(q,X$o),e(q,gb),e(gb,ffe),e(ffe,z$o),e(gb,Q$o),e(gb,sG),e(sG,W$o),e(gb,H$o),e(Ze,U$o),e(Ze,hb),e(hb,J$o),e(hb,mfe),e(mfe,Y$o),e(hb,K$o),e(hb,gfe),e(gfe,Z$o),e(Ze,eko),M(pb,Ze,null),b(f,MIe,_),b(f,Di,_),e(Di,ub),e(ub,hfe),M(r0,hfe,null),e(Di,oko),e(Di,pfe),e(pfe,rko),b(f,EIe,_),b(f,Bo,_),M(t0,Bo,null),e(Bo,tko),e(Bo,Gi),e(Gi,ako),e(Gi,lG),e(lG,nko),e(Gi,sko),e(Gi,iG),e(iG,lko),e(Gi,iko),e(Bo,dko),e(Bo,a0),e(a0,cko),e(a0,ufe),e(ufe,fko),e(a0,mko),e(Bo,gko),e(Bo,lt),M(n0,lt,null),e(lt,hko),e(lt,_fe),e(_fe,pko),e(lt,uko),e(lt,Oi),e(Oi,_ko),e(Oi,bfe),e(bfe,bko),e(Oi,vko),e(Oi,dG),e(dG,Fko),e(Oi,Tko),e(lt,Mko),M(_b,lt,null),e(Bo,Eko),e(Bo,eo),M(s0,eo,null),e(eo,Cko),e(eo,vfe),e(vfe,wko),e(eo,Ako),e(eo,Sa),e(Sa,yko),e(Sa,Ffe),e(Ffe,Lko),e(Sa,xko),e(Sa,Tfe),e(Tfe,$ko),e(Sa,kko),e(Sa,Mfe),e(Mfe,Sko),e(Sa,Rko),e(eo,Bko),e(eo,Y),e(Y,bb),e(bb,Efe),e(Efe,Pko),e(bb,Iko),e(bb,cG),e(cG,qko),e(bb,Nko),e(Y,jko),e(Y,vb),e(vb,Cfe),e(Cfe,Dko),e(vb,Gko),e(vb,fG),e(fG,Oko),e(vb,Vko),e(Y,Xko),e(Y,Fb),e(Fb,wfe),e(wfe,zko),e(Fb,Qko),e(Fb,mG),e(mG,Wko),e(Fb,Hko),e(Y,Uko),e(Y,Tb),e(Tb,Afe),e(Afe,Jko),e(Tb,Yko),e(Tb,gG),e(gG,Kko),e(Tb,Zko),e(Y,eSo),e(Y,Mb),e(Mb,yfe),e(yfe,oSo),e(Mb,rSo),e(Mb,hG),e(hG,tSo),e(Mb,aSo),e(Y,nSo),e(Y,Eb),e(Eb,Lfe),e(Lfe,sSo),e(Eb,lSo),e(Eb,pG),e(pG,iSo),e(Eb,dSo),e(Y,cSo),e(Y,Cb),e(Cb,xfe),e(xfe,fSo),e(Cb,mSo),e(Cb,uG),e(uG,gSo),e(Cb,hSo),e(Y,pSo),e(Y,wb),e(wb,$fe),e($fe,uSo),e(wb,_So),e(wb,_G),e(_G,bSo),e(wb,vSo),e(Y,FSo),e(Y,Ab),e(Ab,kfe),e(kfe,TSo),e(Ab,MSo),e(Ab,bG),e(bG,ESo),e(Ab,CSo),e(Y,wSo),e(Y,yb),e(yb,Sfe),e(Sfe,ASo),e(yb,ySo),e(yb,vG),e(vG,LSo),e(yb,xSo),e(Y,$So),e(Y,Lb),e(Lb,Rfe),e(Rfe,kSo),e(Lb,SSo),e(Lb,FG),e(FG,RSo),e(Lb,BSo),e(Y,PSo),e(Y,xb),e(xb,Bfe),e(Bfe,ISo),e(xb,qSo),e(xb,TG),e(TG,NSo),e(xb,jSo),e(Y,DSo),e(Y,$b),e($b,Pfe),e(Pfe,GSo),e($b,OSo),e($b,MG),e(MG,VSo),e($b,XSo),e(Y,zSo),e(Y,kb),e(kb,Ife),e(Ife,QSo),e(kb,WSo),e(kb,EG),e(EG,HSo),e(kb,USo),e(Y,JSo),e(Y,Sb),e(Sb,qfe),e(qfe,YSo),e(Sb,KSo),e(Sb,CG),e(CG,ZSo),e(Sb,eRo),e(Y,oRo),e(Y,Rb),e(Rb,Nfe),e(Nfe,rRo),e(Rb,tRo),e(Rb,wG),e(wG,aRo),e(Rb,nRo),e(Y,sRo),e(Y,Bb),e(Bb,jfe),e(jfe,lRo),e(Bb,iRo),e(Bb,AG),e(AG,dRo),e(Bb,cRo),e(Y,fRo),e(Y,Pb),e(Pb,Dfe),e(Dfe,mRo),e(Pb,gRo),e(Pb,yG),e(yG,hRo),e(Pb,pRo),e(Y,uRo),e(Y,Ib),e(Ib,Gfe),e(Gfe,_Ro),e(Ib,bRo),e(Ib,LG),e(LG,vRo),e(Ib,FRo),e(Y,TRo),e(Y,qb),e(qb,Ofe),e(Ofe,MRo),e(qb,ERo),e(qb,xG),e(xG,CRo),e(qb,wRo),e(Y,ARo),e(Y,Nb),e(Nb,Vfe),e(Vfe,yRo),e(Nb,LRo),e(Nb,$G),e($G,xRo),e(Nb,$Ro),e(Y,kRo),e(Y,jb),e(jb,Xfe),e(Xfe,SRo),e(jb,RRo),e(jb,kG),e(kG,BRo),e(jb,PRo),e(Y,IRo),e(Y,Db),e(Db,zfe),e(zfe,qRo),e(Db,NRo),e(Db,SG),e(SG,jRo),e(Db,DRo),e(Y,GRo),e(Y,Gb),e(Gb,Qfe),e(Qfe,ORo),e(Gb,VRo),e(Gb,RG),e(RG,XRo),e(Gb,zRo),e(Y,QRo),e(Y,Ob),e(Ob,Wfe),e(Wfe,WRo),e(Ob,HRo),e(Ob,BG),e(BG,URo),e(Ob,JRo),e(Y,YRo),e(Y,Vb),e(Vb,Hfe),e(Hfe,KRo),e(Vb,ZRo),e(Vb,PG),e(PG,eBo),e(Vb,oBo),e(Y,rBo),e(Y,Xb),e(Xb,Ufe),e(Ufe,tBo),e(Xb,aBo),e(Xb,IG),e(IG,nBo),e(Xb,sBo),e(Y,lBo),e(Y,zb),e(zb,Jfe),e(Jfe,iBo),e(zb,dBo),e(zb,qG),e(qG,cBo),e(zb,fBo),e(Y,mBo),e(Y,Qb),e(Qb,Yfe),e(Yfe,gBo),e(Qb,hBo),e(Qb,NG),e(NG,pBo),e(Qb,uBo),e(eo,_Bo),e(eo,Wb),e(Wb,bBo),e(Wb,Kfe),e(Kfe,vBo),e(Wb,FBo),e(Wb,Zfe),e(Zfe,TBo),e(eo,MBo),M(Hb,eo,null),b(f,CIe,_),b(f,Vi,_),e(Vi,Ub),e(Ub,eme),M(l0,eme,null),e(Vi,EBo),e(Vi,ome),e(ome,CBo),b(f,wIe,_),b(f,Po,_),M(i0,Po,null),e(Po,wBo),e(Po,Xi),e(Xi,ABo),e(Xi,jG),e(jG,yBo),e(Xi,LBo),e(Xi,DG),e(DG,xBo),e(Xi,$Bo),e(Po,kBo),e(Po,d0),e(d0,SBo),e(d0,rme),e(rme,RBo),e(d0,BBo),e(Po,PBo),e(Po,it),M(c0,it,null),e(it,IBo),e(it,tme),e(tme,qBo),e(it,NBo),e(it,zi),e(zi,jBo),e(zi,ame),e(ame,DBo),e(zi,GBo),e(zi,GG),e(GG,OBo),e(zi,VBo),e(it,XBo),M(Jb,it,null),e(Po,zBo),e(Po,oo),M(f0,oo,null),e(oo,QBo),e(oo,nme),e(nme,WBo),e(oo,HBo),e(oo,Ra),e(Ra,UBo),e(Ra,sme),e(sme,JBo),e(Ra,YBo),e(Ra,lme),e(lme,KBo),e(Ra,ZBo),e(Ra,ime),e(ime,ePo),e(Ra,oPo),e(oo,rPo),e(oo,Yr),e(Yr,Yb),e(Yb,dme),e(dme,tPo),e(Yb,aPo),e(Yb,OG),e(OG,nPo),e(Yb,sPo),e(Yr,lPo),e(Yr,Kb),e(Kb,cme),e(cme,iPo),e(Kb,dPo),e(Kb,VG),e(VG,cPo),e(Kb,fPo),e(Yr,mPo),e(Yr,Zb),e(Zb,fme),e(fme,gPo),e(Zb,hPo),e(Zb,XG),e(XG,pPo),e(Zb,uPo),e(Yr,_Po),e(Yr,e2),e(e2,mme),e(mme,bPo),e(e2,vPo),e(e2,zG),e(zG,FPo),e(e2,TPo),e(Yr,MPo),e(Yr,o2),e(o2,gme),e(gme,EPo),e(o2,CPo),e(o2,QG),e(QG,wPo),e(o2,APo),e(oo,yPo),e(oo,r2),e(r2,LPo),e(r2,hme),e(hme,xPo),e(r2,$Po),e(r2,pme),e(pme,kPo),e(oo,SPo),M(t2,oo,null),b(f,AIe,_),b(f,Qi,_),e(Qi,a2),e(a2,ume),M(m0,ume,null),e(Qi,RPo),e(Qi,_me),e(_me,BPo),b(f,yIe,_),b(f,Io,_),M(g0,Io,null),e(Io,PPo),e(Io,Wi),e(Wi,IPo),e(Wi,WG),e(WG,qPo),e(Wi,NPo),e(Wi,HG),e(HG,jPo),e(Wi,DPo),e(Io,GPo),e(Io,h0),e(h0,OPo),e(h0,bme),e(bme,VPo),e(h0,XPo),e(Io,zPo),e(Io,dt),M(p0,dt,null),e(dt,QPo),e(dt,vme),e(vme,WPo),e(dt,HPo),e(dt,Hi),e(Hi,UPo),e(Hi,Fme),e(Fme,JPo),e(Hi,YPo),e(Hi,UG),e(UG,KPo),e(Hi,ZPo),e(dt,eIo),M(n2,dt,null),e(Io,oIo),e(Io,ro),M(u0,ro,null),e(ro,rIo),e(ro,Tme),e(Tme,tIo),e(ro,aIo),e(ro,Ba),e(Ba,nIo),e(Ba,Mme),e(Mme,sIo),e(Ba,lIo),e(Ba,Eme),e(Eme,iIo),e(Ba,dIo),e(Ba,Cme),e(Cme,cIo),e(Ba,fIo),e(ro,mIo),e(ro,U),e(U,s2),e(s2,wme),e(wme,gIo),e(s2,hIo),e(s2,JG),e(JG,pIo),e(s2,uIo),e(U,_Io),e(U,l2),e(l2,Ame),e(Ame,bIo),e(l2,vIo),e(l2,YG),e(YG,FIo),e(l2,TIo),e(U,MIo),e(U,i2),e(i2,yme),e(yme,EIo),e(i2,CIo),e(i2,KG),e(KG,wIo),e(i2,AIo),e(U,yIo),e(U,d2),e(d2,Lme),e(Lme,LIo),e(d2,xIo),e(d2,ZG),e(ZG,$Io),e(d2,kIo),e(U,SIo),e(U,c2),e(c2,xme),e(xme,RIo),e(c2,BIo),e(c2,eO),e(eO,PIo),e(c2,IIo),e(U,qIo),e(U,f2),e(f2,$me),e($me,NIo),e(f2,jIo),e(f2,oO),e(oO,DIo),e(f2,GIo),e(U,OIo),e(U,m2),e(m2,kme),e(kme,VIo),e(m2,XIo),e(m2,rO),e(rO,zIo),e(m2,QIo),e(U,WIo),e(U,g2),e(g2,Sme),e(Sme,HIo),e(g2,UIo),e(g2,tO),e(tO,JIo),e(g2,YIo),e(U,KIo),e(U,h2),e(h2,Rme),e(Rme,ZIo),e(h2,eqo),e(h2,aO),e(aO,oqo),e(h2,rqo),e(U,tqo),e(U,p2),e(p2,Bme),e(Bme,aqo),e(p2,nqo),e(p2,nO),e(nO,sqo),e(p2,lqo),e(U,iqo),e(U,u2),e(u2,Pme),e(Pme,dqo),e(u2,cqo),e(u2,sO),e(sO,fqo),e(u2,mqo),e(U,gqo),e(U,_2),e(_2,Ime),e(Ime,hqo),e(_2,pqo),e(_2,lO),e(lO,uqo),e(_2,_qo),e(U,bqo),e(U,b2),e(b2,qme),e(qme,vqo),e(b2,Fqo),e(b2,iO),e(iO,Tqo),e(b2,Mqo),e(U,Eqo),e(U,v2),e(v2,Nme),e(Nme,Cqo),e(v2,wqo),e(v2,dO),e(dO,Aqo),e(v2,yqo),e(U,Lqo),e(U,F2),e(F2,jme),e(jme,xqo),e(F2,$qo),e(F2,cO),e(cO,kqo),e(F2,Sqo),e(U,Rqo),e(U,T2),e(T2,Dme),e(Dme,Bqo),e(T2,Pqo),e(T2,fO),e(fO,Iqo),e(T2,qqo),e(U,Nqo),e(U,M2),e(M2,Gme),e(Gme,jqo),e(M2,Dqo),e(M2,mO),e(mO,Gqo),e(M2,Oqo),e(U,Vqo),e(U,E2),e(E2,Ome),e(Ome,Xqo),e(E2,zqo),e(E2,gO),e(gO,Qqo),e(E2,Wqo),e(U,Hqo),e(U,C2),e(C2,Vme),e(Vme,Uqo),e(C2,Jqo),e(C2,hO),e(hO,Yqo),e(C2,Kqo),e(U,Zqo),e(U,w2),e(w2,Xme),e(Xme,eNo),e(w2,oNo),e(w2,pO),e(pO,rNo),e(w2,tNo),e(U,aNo),e(U,A2),e(A2,zme),e(zme,nNo),e(A2,sNo),e(A2,uO),e(uO,lNo),e(A2,iNo),e(U,dNo),e(U,y2),e(y2,Qme),e(Qme,cNo),e(y2,fNo),e(y2,_O),e(_O,mNo),e(y2,gNo),e(U,hNo),e(U,L2),e(L2,Wme),e(Wme,pNo),e(L2,uNo),e(L2,bO),e(bO,_No),e(L2,bNo),e(U,vNo),e(U,x2),e(x2,Hme),e(Hme,FNo),e(x2,TNo),e(x2,vO),e(vO,MNo),e(x2,ENo),e(U,CNo),e(U,$2),e($2,Ume),e(Ume,wNo),e($2,ANo),e($2,FO),e(FO,yNo),e($2,LNo),e(U,xNo),e(U,k2),e(k2,Jme),e(Jme,$No),e(k2,kNo),e(k2,TO),e(TO,SNo),e(k2,RNo),e(U,BNo),e(U,S2),e(S2,Yme),e(Yme,PNo),e(S2,INo),e(S2,MO),e(MO,qNo),e(S2,NNo),e(U,jNo),e(U,R2),e(R2,Kme),e(Kme,DNo),e(R2,GNo),e(R2,EO),e(EO,ONo),e(R2,VNo),e(U,XNo),e(U,B2),e(B2,Zme),e(Zme,zNo),e(B2,QNo),e(B2,CO),e(CO,WNo),e(B2,HNo),e(U,UNo),e(U,P2),e(P2,ege),e(ege,JNo),e(P2,YNo),e(P2,wO),e(wO,KNo),e(P2,ZNo),e(U,ejo),e(U,I2),e(I2,oge),e(oge,ojo),e(I2,rjo),e(I2,AO),e(AO,tjo),e(I2,ajo),e(U,njo),e(U,q2),e(q2,rge),e(rge,sjo),e(q2,ljo),e(q2,yO),e(yO,ijo),e(q2,djo),e(U,cjo),e(U,N2),e(N2,tge),e(tge,fjo),e(N2,mjo),e(N2,LO),e(LO,gjo),e(N2,hjo),e(ro,pjo),e(ro,j2),e(j2,ujo),e(j2,age),e(age,_jo),e(j2,bjo),e(j2,nge),e(nge,vjo),e(ro,Fjo),M(D2,ro,null),b(f,LIe,_),b(f,Ui,_),e(Ui,G2),e(G2,sge),M(_0,sge,null),e(Ui,Tjo),e(Ui,lge),e(lge,Mjo),b(f,xIe,_),b(f,qo,_),M(b0,qo,null),e(qo,Ejo),e(qo,Ji),e(Ji,Cjo),e(Ji,xO),e(xO,wjo),e(Ji,Ajo),e(Ji,$O),e($O,yjo),e(Ji,Ljo),e(qo,xjo),e(qo,v0),e(v0,$jo),e(v0,ige),e(ige,kjo),e(v0,Sjo),e(qo,Rjo),e(qo,ct),M(F0,ct,null),e(ct,Bjo),e(ct,dge),e(dge,Pjo),e(ct,Ijo),e(ct,Yi),e(Yi,qjo),e(Yi,cge),e(cge,Njo),e(Yi,jjo),e(Yi,kO),e(kO,Djo),e(Yi,Gjo),e(ct,Ojo),M(O2,ct,null),e(qo,Vjo),e(qo,to),M(T0,to,null),e(to,Xjo),e(to,fge),e(fge,zjo),e(to,Qjo),e(to,Pa),e(Pa,Wjo),e(Pa,mge),e(mge,Hjo),e(Pa,Ujo),e(Pa,gge),e(gge,Jjo),e(Pa,Yjo),e(Pa,hge),e(hge,Kjo),e(Pa,Zjo),e(to,eDo),e(to,O),e(O,V2),e(V2,pge),e(pge,oDo),e(V2,rDo),e(V2,SO),e(SO,tDo),e(V2,aDo),e(O,nDo),e(O,X2),e(X2,uge),e(uge,sDo),e(X2,lDo),e(X2,RO),e(RO,iDo),e(X2,dDo),e(O,cDo),e(O,z2),e(z2,_ge),e(_ge,fDo),e(z2,mDo),e(z2,BO),e(BO,gDo),e(z2,hDo),e(O,pDo),e(O,Q2),e(Q2,bge),e(bge,uDo),e(Q2,_Do),e(Q2,PO),e(PO,bDo),e(Q2,vDo),e(O,FDo),e(O,W2),e(W2,vge),e(vge,TDo),e(W2,MDo),e(W2,IO),e(IO,EDo),e(W2,CDo),e(O,wDo),e(O,H2),e(H2,Fge),e(Fge,ADo),e(H2,yDo),e(H2,qO),e(qO,LDo),e(H2,xDo),e(O,$Do),e(O,U2),e(U2,Tge),e(Tge,kDo),e(U2,SDo),e(U2,NO),e(NO,RDo),e(U2,BDo),e(O,PDo),e(O,J2),e(J2,Mge),e(Mge,IDo),e(J2,qDo),e(J2,jO),e(jO,NDo),e(J2,jDo),e(O,DDo),e(O,Y2),e(Y2,Ege),e(Ege,GDo),e(Y2,ODo),e(Y2,DO),e(DO,VDo),e(Y2,XDo),e(O,zDo),e(O,K2),e(K2,Cge),e(Cge,QDo),e(K2,WDo),e(K2,GO),e(GO,HDo),e(K2,UDo),e(O,JDo),e(O,Z2),e(Z2,wge),e(wge,YDo),e(Z2,KDo),e(Z2,OO),e(OO,ZDo),e(Z2,eGo),e(O,oGo),e(O,ev),e(ev,Age),e(Age,rGo),e(ev,tGo),e(ev,VO),e(VO,aGo),e(ev,nGo),e(O,sGo),e(O,ov),e(ov,yge),e(yge,lGo),e(ov,iGo),e(ov,XO),e(XO,dGo),e(ov,cGo),e(O,fGo),e(O,rv),e(rv,Lge),e(Lge,mGo),e(rv,gGo),e(rv,zO),e(zO,hGo),e(rv,pGo),e(O,uGo),e(O,tv),e(tv,xge),e(xge,_Go),e(tv,bGo),e(tv,QO),e(QO,vGo),e(tv,FGo),e(O,TGo),e(O,av),e(av,$ge),e($ge,MGo),e(av,EGo),e(av,WO),e(WO,CGo),e(av,wGo),e(O,AGo),e(O,nv),e(nv,kge),e(kge,yGo),e(nv,LGo),e(nv,HO),e(HO,xGo),e(nv,$Go),e(O,kGo),e(O,sv),e(sv,Sge),e(Sge,SGo),e(sv,RGo),e(sv,UO),e(UO,BGo),e(sv,PGo),e(O,IGo),e(O,lv),e(lv,Rge),e(Rge,qGo),e(lv,NGo),e(lv,JO),e(JO,jGo),e(lv,DGo),e(O,GGo),e(O,iv),e(iv,Bge),e(Bge,OGo),e(iv,VGo),e(iv,YO),e(YO,XGo),e(iv,zGo),e(O,QGo),e(O,dv),e(dv,Pge),e(Pge,WGo),e(dv,HGo),e(dv,KO),e(KO,UGo),e(dv,JGo),e(O,YGo),e(O,cv),e(cv,Ige),e(Ige,KGo),e(cv,ZGo),e(cv,ZO),e(ZO,eOo),e(cv,oOo),e(O,rOo),e(O,fv),e(fv,qge),e(qge,tOo),e(fv,aOo),e(fv,eV),e(eV,nOo),e(fv,sOo),e(O,lOo),e(O,mv),e(mv,Nge),e(Nge,iOo),e(mv,dOo),e(mv,oV),e(oV,cOo),e(mv,fOo),e(O,mOo),e(O,gv),e(gv,jge),e(jge,gOo),e(gv,hOo),e(gv,rV),e(rV,pOo),e(gv,uOo),e(O,_Oo),e(O,hv),e(hv,Dge),e(Dge,bOo),e(hv,vOo),e(hv,tV),e(tV,FOo),e(hv,TOo),e(O,MOo),e(O,pv),e(pv,Gge),e(Gge,EOo),e(pv,COo),e(pv,aV),e(aV,wOo),e(pv,AOo),e(O,yOo),e(O,uv),e(uv,Oge),e(Oge,LOo),e(uv,xOo),e(uv,nV),e(nV,$Oo),e(uv,kOo),e(O,SOo),e(O,_v),e(_v,Vge),e(Vge,ROo),e(_v,BOo),e(_v,sV),e(sV,POo),e(_v,IOo),e(O,qOo),e(O,bv),e(bv,Xge),e(Xge,NOo),e(bv,jOo),e(bv,lV),e(lV,DOo),e(bv,GOo),e(O,OOo),e(O,vv),e(vv,zge),e(zge,VOo),e(vv,XOo),e(vv,iV),e(iV,zOo),e(vv,QOo),e(O,WOo),e(O,Fv),e(Fv,Qge),e(Qge,HOo),e(Fv,UOo),e(Fv,dV),e(dV,JOo),e(Fv,YOo),e(O,KOo),e(O,Tv),e(Tv,Wge),e(Wge,ZOo),e(Tv,eVo),e(Tv,cV),e(cV,oVo),e(Tv,rVo),e(O,tVo),e(O,Mv),e(Mv,Hge),e(Hge,aVo),e(Mv,nVo),e(Mv,fV),e(fV,sVo),e(Mv,lVo),e(O,iVo),e(O,Ev),e(Ev,Uge),e(Uge,dVo),e(Ev,cVo),e(Ev,mV),e(mV,fVo),e(Ev,mVo),e(O,gVo),e(O,Cv),e(Cv,Jge),e(Jge,hVo),e(Cv,pVo),e(Cv,gV),e(gV,uVo),e(Cv,_Vo),e(O,bVo),e(O,wv),e(wv,Yge),e(Yge,vVo),e(wv,FVo),e(wv,hV),e(hV,TVo),e(wv,MVo),e(O,EVo),e(O,Av),e(Av,Kge),e(Kge,CVo),e(Av,wVo),e(Av,pV),e(pV,AVo),e(Av,yVo),e(O,LVo),e(O,yv),e(yv,Zge),e(Zge,xVo),e(yv,$Vo),e(yv,uV),e(uV,kVo),e(yv,SVo),e(to,RVo),e(to,Lv),e(Lv,BVo),e(Lv,ehe),e(ehe,PVo),e(Lv,IVo),e(Lv,ohe),e(ohe,qVo),e(to,NVo),M(xv,to,null),b(f,$Ie,_),b(f,Ki,_),e(Ki,$v),e($v,rhe),M(M0,rhe,null),e(Ki,jVo),e(Ki,the),e(the,DVo),b(f,kIe,_),b(f,No,_),M(E0,No,null),e(No,GVo),e(No,Zi),e(Zi,OVo),e(Zi,_V),e(_V,VVo),e(Zi,XVo),e(Zi,bV),e(bV,zVo),e(Zi,QVo),e(No,WVo),e(No,C0),e(C0,HVo),e(C0,ahe),e(ahe,UVo),e(C0,JVo),e(No,YVo),e(No,ft),M(w0,ft,null),e(ft,KVo),e(ft,nhe),e(nhe,ZVo),e(ft,eXo),e(ft,ed),e(ed,oXo),e(ed,she),e(she,rXo),e(ed,tXo),e(ed,vV),e(vV,aXo),e(ed,nXo),e(ft,sXo),M(kv,ft,null),e(No,lXo),e(No,ao),M(A0,ao,null),e(ao,iXo),e(ao,lhe),e(lhe,dXo),e(ao,cXo),e(ao,Ia),e(Ia,fXo),e(Ia,ihe),e(ihe,mXo),e(Ia,gXo),e(Ia,dhe),e(dhe,hXo),e(Ia,pXo),e(Ia,che),e(che,uXo),e(Ia,_Xo),e(ao,bXo),e(ao,fhe),e(fhe,Sv),e(Sv,mhe),e(mhe,vXo),e(Sv,FXo),e(Sv,FV),e(FV,TXo),e(Sv,MXo),e(ao,EXo),e(ao,Rv),e(Rv,CXo),e(Rv,ghe),e(ghe,wXo),e(Rv,AXo),e(Rv,hhe),e(hhe,yXo),e(ao,LXo),M(Bv,ao,null),b(f,SIe,_),b(f,od,_),e(od,Pv),e(Pv,phe),M(y0,phe,null),e(od,xXo),e(od,uhe),e(uhe,$Xo),b(f,RIe,_),b(f,jo,_),M(L0,jo,null),e(jo,kXo),e(jo,rd),e(rd,SXo),e(rd,TV),e(TV,RXo),e(rd,BXo),e(rd,MV),e(MV,PXo),e(rd,IXo),e(jo,qXo),e(jo,x0),e(x0,NXo),e(x0,_he),e(_he,jXo),e(x0,DXo),e(jo,GXo),e(jo,mt),M($0,mt,null),e(mt,OXo),e(mt,bhe),e(bhe,VXo),e(mt,XXo),e(mt,td),e(td,zXo),e(td,vhe),e(vhe,QXo),e(td,WXo),e(td,EV),e(EV,HXo),e(td,UXo),e(mt,JXo),M(Iv,mt,null),e(jo,YXo),e(jo,no),M(k0,no,null),e(no,KXo),e(no,Fhe),e(Fhe,ZXo),e(no,ezo),e(no,qa),e(qa,ozo),e(qa,The),e(The,rzo),e(qa,tzo),e(qa,Mhe),e(Mhe,azo),e(qa,nzo),e(qa,Ehe),e(Ehe,szo),e(qa,lzo),e(no,izo),e(no,Fe),e(Fe,qv),e(qv,Che),e(Che,dzo),e(qv,czo),e(qv,CV),e(CV,fzo),e(qv,mzo),e(Fe,gzo),e(Fe,Nv),e(Nv,whe),e(whe,hzo),e(Nv,pzo),e(Nv,wV),e(wV,uzo),e(Nv,_zo),e(Fe,bzo),e(Fe,jv),e(jv,Ahe),e(Ahe,vzo),e(jv,Fzo),e(jv,AV),e(AV,Tzo),e(jv,Mzo),e(Fe,Ezo),e(Fe,Bs),e(Bs,yhe),e(yhe,Czo),e(Bs,wzo),e(Bs,yV),e(yV,Azo),e(Bs,yzo),e(Bs,LV),e(LV,Lzo),e(Bs,xzo),e(Fe,$zo),e(Fe,Dv),e(Dv,Lhe),e(Lhe,kzo),e(Dv,Szo),e(Dv,xV),e(xV,Rzo),e(Dv,Bzo),e(Fe,Pzo),e(Fe,gt),e(gt,xhe),e(xhe,Izo),e(gt,qzo),e(gt,$V),e($V,Nzo),e(gt,jzo),e(gt,kV),e(kV,Dzo),e(gt,Gzo),e(gt,SV),e(SV,Ozo),e(gt,Vzo),e(Fe,Xzo),e(Fe,Gv),e(Gv,$he),e($he,zzo),e(Gv,Qzo),e(Gv,RV),e(RV,Wzo),e(Gv,Hzo),e(Fe,Uzo),e(Fe,Ov),e(Ov,khe),e(khe,Jzo),e(Ov,Yzo),e(Ov,BV),e(BV,Kzo),e(Ov,Zzo),e(Fe,eQo),e(Fe,Vv),e(Vv,She),e(She,oQo),e(Vv,rQo),e(Vv,PV),e(PV,tQo),e(Vv,aQo),e(Fe,nQo),e(Fe,Xv),e(Xv,Rhe),e(Rhe,sQo),e(Xv,lQo),e(Xv,IV),e(IV,iQo),e(Xv,dQo),e(Fe,cQo),e(Fe,zv),e(zv,Bhe),e(Bhe,fQo),e(zv,mQo),e(zv,qV),e(qV,gQo),e(zv,hQo),e(Fe,pQo),e(Fe,Qv),e(Qv,Phe),e(Phe,uQo),e(Qv,_Qo),e(Qv,NV),e(NV,bQo),e(Qv,vQo),e(Fe,FQo),e(Fe,Wv),e(Wv,Ihe),e(Ihe,TQo),e(Wv,MQo),e(Wv,jV),e(jV,EQo),e(Wv,CQo),e(no,wQo),e(no,Hv),e(Hv,AQo),e(Hv,qhe),e(qhe,yQo),e(Hv,LQo),e(Hv,Nhe),e(Nhe,xQo),e(no,$Qo),M(Uv,no,null),b(f,BIe,_),b(f,ad,_),e(ad,Jv),e(Jv,jhe),M(S0,jhe,null),e(ad,kQo),e(ad,Dhe),e(Dhe,SQo),b(f,PIe,_),b(f,Do,_),M(R0,Do,null),e(Do,RQo),e(Do,nd),e(nd,BQo),e(nd,DV),e(DV,PQo),e(nd,IQo),e(nd,GV),e(GV,qQo),e(nd,NQo),e(Do,jQo),e(Do,B0),e(B0,DQo),e(B0,Ghe),e(Ghe,GQo),e(B0,OQo),e(Do,VQo),e(Do,ht),M(P0,ht,null),e(ht,XQo),e(ht,Ohe),e(Ohe,zQo),e(ht,QQo),e(ht,sd),e(sd,WQo),e(sd,Vhe),e(Vhe,HQo),e(sd,UQo),e(sd,OV),e(OV,JQo),e(sd,YQo),e(ht,KQo),M(Yv,ht,null),e(Do,ZQo),e(Do,so),M(I0,so,null),e(so,eWo),e(so,Xhe),e(Xhe,oWo),e(so,rWo),e(so,Na),e(Na,tWo),e(Na,zhe),e(zhe,aWo),e(Na,nWo),e(Na,Qhe),e(Qhe,sWo),e(Na,lWo),e(Na,Whe),e(Whe,iWo),e(Na,dWo),e(so,cWo),e(so,Hhe),e(Hhe,Kv),e(Kv,Uhe),e(Uhe,fWo),e(Kv,mWo),e(Kv,VV),e(VV,gWo),e(Kv,hWo),e(so,pWo),e(so,Zv),e(Zv,uWo),e(Zv,Jhe),e(Jhe,_Wo),e(Zv,bWo),e(Zv,Yhe),e(Yhe,vWo),e(so,FWo),M(eF,so,null),b(f,IIe,_),b(f,ld,_),e(ld,oF),e(oF,Khe),M(q0,Khe,null),e(ld,TWo),e(ld,Zhe),e(Zhe,MWo),b(f,qIe,_),b(f,Go,_),M(N0,Go,null),e(Go,EWo),e(Go,id),e(id,CWo),e(id,XV),e(XV,wWo),e(id,AWo),e(id,zV),e(zV,yWo),e(id,LWo),e(Go,xWo),e(Go,j0),e(j0,$Wo),e(j0,epe),e(epe,kWo),e(j0,SWo),e(Go,RWo),e(Go,pt),M(D0,pt,null),e(pt,BWo),e(pt,ope),e(ope,PWo),e(pt,IWo),e(pt,dd),e(dd,qWo),e(dd,rpe),e(rpe,NWo),e(dd,jWo),e(dd,QV),e(QV,DWo),e(dd,GWo),e(pt,OWo),M(rF,pt,null),e(Go,VWo),e(Go,lo),M(G0,lo,null),e(lo,XWo),e(lo,tpe),e(tpe,zWo),e(lo,QWo),e(lo,ja),e(ja,WWo),e(ja,ape),e(ape,HWo),e(ja,UWo),e(ja,npe),e(npe,JWo),e(ja,YWo),e(ja,spe),e(spe,KWo),e(ja,ZWo),e(lo,eHo),e(lo,Ne),e(Ne,tF),e(tF,lpe),e(lpe,oHo),e(tF,rHo),e(tF,WV),e(WV,tHo),e(tF,aHo),e(Ne,nHo),e(Ne,aF),e(aF,ipe),e(ipe,sHo),e(aF,lHo),e(aF,HV),e(HV,iHo),e(aF,dHo),e(Ne,cHo),e(Ne,nF),e(nF,dpe),e(dpe,fHo),e(nF,mHo),e(nF,UV),e(UV,gHo),e(nF,hHo),e(Ne,pHo),e(Ne,sF),e(sF,cpe),e(cpe,uHo),e(sF,_Ho),e(sF,JV),e(JV,bHo),e(sF,vHo),e(Ne,FHo),e(Ne,lF),e(lF,fpe),e(fpe,THo),e(lF,MHo),e(lF,YV),e(YV,EHo),e(lF,CHo),e(Ne,wHo),e(Ne,iF),e(iF,mpe),e(mpe,AHo),e(iF,yHo),e(iF,KV),e(KV,LHo),e(iF,xHo),e(Ne,$Ho),e(Ne,dF),e(dF,gpe),e(gpe,kHo),e(dF,SHo),e(dF,ZV),e(ZV,RHo),e(dF,BHo),e(Ne,PHo),e(Ne,cF),e(cF,hpe),e(hpe,IHo),e(cF,qHo),e(cF,eX),e(eX,NHo),e(cF,jHo),e(lo,DHo),e(lo,fF),e(fF,GHo),e(fF,ppe),e(ppe,OHo),e(fF,VHo),e(fF,upe),e(upe,XHo),e(lo,zHo),M(mF,lo,null),b(f,NIe,_),b(f,cd,_),e(cd,gF),e(gF,_pe),M(O0,_pe,null),e(cd,QHo),e(cd,bpe),e(bpe,WHo),b(f,jIe,_),b(f,Oo,_),M(V0,Oo,null),e(Oo,HHo),e(Oo,fd),e(fd,UHo),e(fd,oX),e(oX,JHo),e(fd,YHo),e(fd,rX),e(rX,KHo),e(fd,ZHo),e(Oo,eUo),e(Oo,X0),e(X0,oUo),e(X0,vpe),e(vpe,rUo),e(X0,tUo),e(Oo,aUo),e(Oo,ut),M(z0,ut,null),e(ut,nUo),e(ut,Fpe),e(Fpe,sUo),e(ut,lUo),e(ut,md),e(md,iUo),e(md,Tpe),e(Tpe,dUo),e(md,cUo),e(md,tX),e(tX,fUo),e(md,mUo),e(ut,gUo),M(hF,ut,null),e(Oo,hUo),e(Oo,io),M(Q0,io,null),e(io,pUo),e(io,Mpe),e(Mpe,uUo),e(io,_Uo),e(io,Da),e(Da,bUo),e(Da,Epe),e(Epe,vUo),e(Da,FUo),e(Da,Cpe),e(Cpe,TUo),e(Da,MUo),e(Da,wpe),e(wpe,EUo),e(Da,CUo),e(io,wUo),e(io,Ga),e(Ga,pF),e(pF,Ape),e(Ape,AUo),e(pF,yUo),e(pF,aX),e(aX,LUo),e(pF,xUo),e(Ga,$Uo),e(Ga,uF),e(uF,ype),e(ype,kUo),e(uF,SUo),e(uF,nX),e(nX,RUo),e(uF,BUo),e(Ga,PUo),e(Ga,_F),e(_F,Lpe),e(Lpe,IUo),e(_F,qUo),e(_F,sX),e(sX,NUo),e(_F,jUo),e(Ga,DUo),e(Ga,bF),e(bF,xpe),e(xpe,GUo),e(bF,OUo),e(bF,lX),e(lX,VUo),e(bF,XUo),e(io,zUo),e(io,vF),e(vF,QUo),e(vF,$pe),e($pe,WUo),e(vF,HUo),e(vF,kpe),e(kpe,UUo),e(io,JUo),M(FF,io,null),b(f,DIe,_),b(f,gd,_),e(gd,TF),e(TF,Spe),M(W0,Spe,null),e(gd,YUo),e(gd,Rpe),e(Rpe,KUo),b(f,GIe,_),b(f,Vo,_),M(H0,Vo,null),e(Vo,ZUo),e(Vo,hd),e(hd,eJo),e(hd,iX),e(iX,oJo),e(hd,rJo),e(hd,dX),e(dX,tJo),e(hd,aJo),e(Vo,nJo),e(Vo,U0),e(U0,sJo),e(U0,Bpe),e(Bpe,lJo),e(U0,iJo),e(Vo,dJo),e(Vo,_t),M(J0,_t,null),e(_t,cJo),e(_t,Ppe),e(Ppe,fJo),e(_t,mJo),e(_t,pd),e(pd,gJo),e(pd,Ipe),e(Ipe,hJo),e(pd,pJo),e(pd,cX),e(cX,uJo),e(pd,_Jo),e(_t,bJo),M(MF,_t,null),e(Vo,vJo),e(Vo,co),M(Y0,co,null),e(co,FJo),e(co,qpe),e(qpe,TJo),e(co,MJo),e(co,Oa),e(Oa,EJo),e(Oa,Npe),e(Npe,CJo),e(Oa,wJo),e(Oa,jpe),e(jpe,AJo),e(Oa,yJo),e(Oa,Dpe),e(Dpe,LJo),e(Oa,xJo),e(co,$Jo),e(co,je),e(je,EF),e(EF,Gpe),e(Gpe,kJo),e(EF,SJo),e(EF,fX),e(fX,RJo),e(EF,BJo),e(je,PJo),e(je,CF),e(CF,Ope),e(Ope,IJo),e(CF,qJo),e(CF,mX),e(mX,NJo),e(CF,jJo),e(je,DJo),e(je,wF),e(wF,Vpe),e(Vpe,GJo),e(wF,OJo),e(wF,gX),e(gX,VJo),e(wF,XJo),e(je,zJo),e(je,AF),e(AF,Xpe),e(Xpe,QJo),e(AF,WJo),e(AF,hX),e(hX,HJo),e(AF,UJo),e(je,JJo),e(je,yF),e(yF,zpe),e(zpe,YJo),e(yF,KJo),e(yF,pX),e(pX,ZJo),e(yF,eYo),e(je,oYo),e(je,LF),e(LF,Qpe),e(Qpe,rYo),e(LF,tYo),e(LF,uX),e(uX,aYo),e(LF,nYo),e(je,sYo),e(je,xF),e(xF,Wpe),e(Wpe,lYo),e(xF,iYo),e(xF,_X),e(_X,dYo),e(xF,cYo),e(je,fYo),e(je,$F),e($F,Hpe),e(Hpe,mYo),e($F,gYo),e($F,bX),e(bX,hYo),e($F,pYo),e(co,uYo),e(co,kF),e(kF,_Yo),e(kF,Upe),e(Upe,bYo),e(kF,vYo),e(kF,Jpe),e(Jpe,FYo),e(co,TYo),M(SF,co,null),b(f,OIe,_),b(f,ud,_),e(ud,RF),e(RF,Ype),M(K0,Ype,null),e(ud,MYo),e(ud,Kpe),e(Kpe,EYo),b(f,VIe,_),b(f,Xo,_),M(Z0,Xo,null),e(Xo,CYo),e(Xo,_d),e(_d,wYo),e(_d,vX),e(vX,AYo),e(_d,yYo),e(_d,FX),e(FX,LYo),e(_d,xYo),e(Xo,$Yo),e(Xo,ey),e(ey,kYo),e(ey,Zpe),e(Zpe,SYo),e(ey,RYo),e(Xo,BYo),e(Xo,bt),M(oy,bt,null),e(bt,PYo),e(bt,eue),e(eue,IYo),e(bt,qYo),e(bt,bd),e(bd,NYo),e(bd,oue),e(oue,jYo),e(bd,DYo),e(bd,TX),e(TX,GYo),e(bd,OYo),e(bt,VYo),M(BF,bt,null),e(Xo,XYo),e(Xo,fo),M(ry,fo,null),e(fo,zYo),e(fo,rue),e(rue,QYo),e(fo,WYo),e(fo,Va),e(Va,HYo),e(Va,tue),e(tue,UYo),e(Va,JYo),e(Va,aue),e(aue,YYo),e(Va,KYo),e(Va,nue),e(nue,ZYo),e(Va,eKo),e(fo,oKo),e(fo,ty),e(ty,PF),e(PF,sue),e(sue,rKo),e(PF,tKo),e(PF,MX),e(MX,aKo),e(PF,nKo),e(ty,sKo),e(ty,IF),e(IF,lue),e(lue,lKo),e(IF,iKo),e(IF,EX),e(EX,dKo),e(IF,cKo),e(fo,fKo),e(fo,qF),e(qF,mKo),e(qF,iue),e(iue,gKo),e(qF,hKo),e(qF,due),e(due,pKo),e(fo,uKo),M(NF,fo,null),b(f,XIe,_),b(f,vd,_),e(vd,jF),e(jF,cue),M(ay,cue,null),e(vd,_Ko),e(vd,fue),e(fue,bKo),b(f,zIe,_),b(f,zo,_),M(ny,zo,null),e(zo,vKo),e(zo,Fd),e(Fd,FKo),e(Fd,CX),e(CX,TKo),e(Fd,MKo),e(Fd,wX),e(wX,EKo),e(Fd,CKo),e(zo,wKo),e(zo,sy),e(sy,AKo),e(sy,mue),e(mue,yKo),e(sy,LKo),e(zo,xKo),e(zo,vt),M(ly,vt,null),e(vt,$Ko),e(vt,gue),e(gue,kKo),e(vt,SKo),e(vt,Td),e(Td,RKo),e(Td,hue),e(hue,BKo),e(Td,PKo),e(Td,AX),e(AX,IKo),e(Td,qKo),e(vt,NKo),M(DF,vt,null),e(zo,jKo),e(zo,mo),M(iy,mo,null),e(mo,DKo),e(mo,pue),e(pue,GKo),e(mo,OKo),e(mo,Xa),e(Xa,VKo),e(Xa,uue),e(uue,XKo),e(Xa,zKo),e(Xa,_ue),e(_ue,QKo),e(Xa,WKo),e(Xa,bue),e(bue,HKo),e(Xa,UKo),e(mo,JKo),e(mo,za),e(za,GF),e(GF,vue),e(vue,YKo),e(GF,KKo),e(GF,yX),e(yX,ZKo),e(GF,eZo),e(za,oZo),e(za,OF),e(OF,Fue),e(Fue,rZo),e(OF,tZo),e(OF,LX),e(LX,aZo),e(OF,nZo),e(za,sZo),e(za,VF),e(VF,Tue),e(Tue,lZo),e(VF,iZo),e(VF,xX),e(xX,dZo),e(VF,cZo),e(za,fZo),e(za,XF),e(XF,Mue),e(Mue,mZo),e(XF,gZo),e(XF,$X),e($X,hZo),e(XF,pZo),e(mo,uZo),e(mo,zF),e(zF,_Zo),e(zF,Eue),e(Eue,bZo),e(zF,vZo),e(zF,Cue),e(Cue,FZo),e(mo,TZo),M(QF,mo,null),b(f,QIe,_),b(f,Md,_),e(Md,WF),e(WF,wue),M(dy,wue,null),e(Md,MZo),e(Md,Aue),e(Aue,EZo),b(f,WIe,_),b(f,Qo,_),M(cy,Qo,null),e(Qo,CZo),e(Qo,Ed),e(Ed,wZo),e(Ed,kX),e(kX,AZo),e(Ed,yZo),e(Ed,SX),e(SX,LZo),e(Ed,xZo),e(Qo,$Zo),e(Qo,fy),e(fy,kZo),e(fy,yue),e(yue,SZo),e(fy,RZo),e(Qo,BZo),e(Qo,Ft),M(my,Ft,null),e(Ft,PZo),e(Ft,Lue),e(Lue,IZo),e(Ft,qZo),e(Ft,Cd),e(Cd,NZo),e(Cd,xue),e(xue,jZo),e(Cd,DZo),e(Cd,RX),e(RX,GZo),e(Cd,OZo),e(Ft,VZo),M(HF,Ft,null),e(Qo,XZo),e(Qo,go),M(gy,go,null),e(go,zZo),e(go,$ue),e($ue,QZo),e(go,WZo),e(go,Qa),e(Qa,HZo),e(Qa,kue),e(kue,UZo),e(Qa,JZo),e(Qa,Sue),e(Sue,YZo),e(Qa,KZo),e(Qa,Rue),e(Rue,ZZo),e(Qa,eer),e(go,oer),e(go,wd),e(wd,UF),e(UF,Bue),e(Bue,rer),e(UF,ter),e(UF,BX),e(BX,aer),e(UF,ner),e(wd,ser),e(wd,JF),e(JF,Pue),e(Pue,ler),e(JF,ier),e(JF,PX),e(PX,der),e(JF,cer),e(wd,fer),e(wd,YF),e(YF,Iue),e(Iue,mer),e(YF,ger),e(YF,IX),e(IX,her),e(YF,per),e(go,uer),e(go,KF),e(KF,_er),e(KF,que),e(que,ber),e(KF,ver),e(KF,Nue),e(Nue,Fer),e(go,Ter),M(ZF,go,null),b(f,HIe,_),b(f,Ad,_),e(Ad,e6),e(e6,jue),M(hy,jue,null),e(Ad,Mer),e(Ad,Due),e(Due,Eer),b(f,UIe,_),b(f,Wo,_),M(py,Wo,null),e(Wo,Cer),e(Wo,yd),e(yd,wer),e(yd,qX),e(qX,Aer),e(yd,yer),e(yd,NX),e(NX,Ler),e(yd,xer),e(Wo,$er),e(Wo,uy),e(uy,ker),e(uy,Gue),e(Gue,Ser),e(uy,Rer),e(Wo,Ber),e(Wo,Tt),M(_y,Tt,null),e(Tt,Per),e(Tt,Oue),e(Oue,Ier),e(Tt,qer),e(Tt,Ld),e(Ld,Ner),e(Ld,Vue),e(Vue,jer),e(Ld,Der),e(Ld,jX),e(jX,Ger),e(Ld,Oer),e(Tt,Ver),M(o6,Tt,null),e(Wo,Xer),e(Wo,ho),M(by,ho,null),e(ho,zer),e(ho,Xue),e(Xue,Qer),e(ho,Wer),e(ho,Wa),e(Wa,Her),e(Wa,zue),e(zue,Uer),e(Wa,Jer),e(Wa,Que),e(Que,Yer),e(Wa,Ker),e(Wa,Wue),e(Wue,Zer),e(Wa,eor),e(ho,oor),e(ho,vy),e(vy,r6),e(r6,Hue),e(Hue,ror),e(r6,tor),e(r6,DX),e(DX,aor),e(r6,nor),e(vy,sor),e(vy,t6),e(t6,Uue),e(Uue,lor),e(t6,ior),e(t6,GX),e(GX,dor),e(t6,cor),e(ho,mor),e(ho,a6),e(a6,gor),e(a6,Jue),e(Jue,hor),e(a6,por),e(a6,Yue),e(Yue,uor),e(ho,_or),M(n6,ho,null),b(f,JIe,_),b(f,xd,_),e(xd,s6),e(s6,Kue),M(Fy,Kue,null),e(xd,bor),e(xd,Zue),e(Zue,vor),b(f,YIe,_),b(f,Ho,_),M(Ty,Ho,null),e(Ho,For),e(Ho,$d),e($d,Tor),e($d,OX),e(OX,Mor),e($d,Eor),e($d,VX),e(VX,Cor),e($d,wor),e(Ho,Aor),e(Ho,My),e(My,yor),e(My,e_e),e(e_e,Lor),e(My,xor),e(Ho,$or),e(Ho,Mt),M(Ey,Mt,null),e(Mt,kor),e(Mt,o_e),e(o_e,Sor),e(Mt,Ror),e(Mt,kd),e(kd,Bor),e(kd,r_e),e(r_e,Por),e(kd,Ior),e(kd,XX),e(XX,qor),e(kd,Nor),e(Mt,jor),M(l6,Mt,null),e(Ho,Dor),e(Ho,po),M(Cy,po,null),e(po,Gor),e(po,t_e),e(t_e,Oor),e(po,Vor),e(po,Ha),e(Ha,Xor),e(Ha,a_e),e(a_e,zor),e(Ha,Qor),e(Ha,n_e),e(n_e,Wor),e(Ha,Hor),e(Ha,s_e),e(s_e,Uor),e(Ha,Jor),e(po,Yor),e(po,l_e),e(l_e,i6),e(i6,i_e),e(i_e,Kor),e(i6,Zor),e(i6,zX),e(zX,err),e(i6,orr),e(po,rrr),e(po,d6),e(d6,trr),e(d6,d_e),e(d_e,arr),e(d6,nrr),e(d6,c_e),e(c_e,srr),e(po,lrr),M(c6,po,null),b(f,KIe,_),b(f,Sd,_),e(Sd,f6),e(f6,f_e),M(wy,f_e,null),e(Sd,irr),e(Sd,m_e),e(m_e,drr),b(f,ZIe,_),b(f,Uo,_),M(Ay,Uo,null),e(Uo,crr),e(Uo,Rd),e(Rd,frr),e(Rd,QX),e(QX,mrr),e(Rd,grr),e(Rd,WX),e(WX,hrr),e(Rd,prr),e(Uo,urr),e(Uo,yy),e(yy,_rr),e(yy,g_e),e(g_e,brr),e(yy,vrr),e(Uo,Frr),e(Uo,Et),M(Ly,Et,null),e(Et,Trr),e(Et,h_e),e(h_e,Mrr),e(Et,Err),e(Et,Bd),e(Bd,Crr),e(Bd,p_e),e(p_e,wrr),e(Bd,Arr),e(Bd,HX),e(HX,yrr),e(Bd,Lrr),e(Et,xrr),M(m6,Et,null),e(Uo,$rr),e(Uo,uo),M(xy,uo,null),e(uo,krr),e(uo,u_e),e(u_e,Srr),e(uo,Rrr),e(uo,Ua),e(Ua,Brr),e(Ua,__e),e(__e,Prr),e(Ua,Irr),e(Ua,b_e),e(b_e,qrr),e(Ua,Nrr),e(Ua,v_e),e(v_e,jrr),e(Ua,Drr),e(uo,Grr),e(uo,Ja),e(Ja,g6),e(g6,F_e),e(F_e,Orr),e(g6,Vrr),e(g6,UX),e(UX,Xrr),e(g6,zrr),e(Ja,Qrr),e(Ja,h6),e(h6,T_e),e(T_e,Wrr),e(h6,Hrr),e(h6,JX),e(JX,Urr),e(h6,Jrr),e(Ja,Yrr),e(Ja,p6),e(p6,M_e),e(M_e,Krr),e(p6,Zrr),e(p6,YX),e(YX,etr),e(p6,otr),e(Ja,rtr),e(Ja,u6),e(u6,E_e),e(E_e,ttr),e(u6,atr),e(u6,KX),e(KX,ntr),e(u6,str),e(uo,ltr),e(uo,_6),e(_6,itr),e(_6,C_e),e(C_e,dtr),e(_6,ctr),e(_6,w_e),e(w_e,ftr),e(uo,mtr),M(b6,uo,null),b(f,eqe,_),b(f,Pd,_),e(Pd,v6),e(v6,A_e),M($y,A_e,null),e(Pd,gtr),e(Pd,y_e),e(y_e,htr),b(f,oqe,_),b(f,Jo,_),M(ky,Jo,null),e(Jo,ptr),e(Jo,Id),e(Id,utr),e(Id,ZX),e(ZX,_tr),e(Id,btr),e(Id,ez),e(ez,vtr),e(Id,Ftr),e(Jo,Ttr),e(Jo,Sy),e(Sy,Mtr),e(Sy,L_e),e(L_e,Etr),e(Sy,Ctr),e(Jo,wtr),e(Jo,Ct),M(Ry,Ct,null),e(Ct,Atr),e(Ct,x_e),e(x_e,ytr),e(Ct,Ltr),e(Ct,qd),e(qd,xtr),e(qd,$_e),e($_e,$tr),e(qd,ktr),e(qd,oz),e(oz,Str),e(qd,Rtr),e(Ct,Btr),M(F6,Ct,null),e(Jo,Ptr),e(Jo,_o),M(By,_o,null),e(_o,Itr),e(_o,k_e),e(k_e,qtr),e(_o,Ntr),e(_o,Ya),e(Ya,jtr),e(Ya,S_e),e(S_e,Dtr),e(Ya,Gtr),e(Ya,R_e),e(R_e,Otr),e(Ya,Vtr),e(Ya,B_e),e(B_e,Xtr),e(Ya,ztr),e(_o,Qtr),e(_o,P_e),e(P_e,T6),e(T6,I_e),e(I_e,Wtr),e(T6,Htr),e(T6,rz),e(rz,Utr),e(T6,Jtr),e(_o,Ytr),e(_o,M6),e(M6,Ktr),e(M6,q_e),e(q_e,Ztr),e(M6,ear),e(M6,N_e),e(N_e,oar),e(_o,rar),M(E6,_o,null),b(f,rqe,_),b(f,Nd,_),e(Nd,C6),e(C6,j_e),M(Py,j_e,null),e(Nd,tar),e(Nd,D_e),e(D_e,aar),b(f,tqe,_),b(f,Yo,_),M(Iy,Yo,null),e(Yo,nar),e(Yo,jd),e(jd,sar),e(jd,tz),e(tz,lar),e(jd,iar),e(jd,az),e(az,dar),e(jd,car),e(Yo,far),e(Yo,qy),e(qy,mar),e(qy,G_e),e(G_e,gar),e(qy,har),e(Yo,par),e(Yo,wt),M(Ny,wt,null),e(wt,uar),e(wt,O_e),e(O_e,_ar),e(wt,bar),e(wt,Dd),e(Dd,Far),e(Dd,V_e),e(V_e,Tar),e(Dd,Mar),e(Dd,nz),e(nz,Ear),e(Dd,Car),e(wt,war),M(w6,wt,null),e(Yo,Aar),e(Yo,wr),M(jy,wr,null),e(wr,yar),e(wr,X_e),e(X_e,Lar),e(wr,xar),e(wr,Ka),e(Ka,$ar),e(Ka,z_e),e(z_e,kar),e(Ka,Sar),e(Ka,Q_e),e(Q_e,Rar),e(Ka,Bar),e(Ka,W_e),e(W_e,Par),e(Ka,Iar),e(wr,qar),e(wr,N),e(N,A6),e(A6,H_e),e(H_e,Nar),e(A6,jar),e(A6,sz),e(sz,Dar),e(A6,Gar),e(N,Oar),e(N,y6),e(y6,U_e),e(U_e,Var),e(y6,Xar),e(y6,lz),e(lz,zar),e(y6,Qar),e(N,War),e(N,L6),e(L6,J_e),e(J_e,Har),e(L6,Uar),e(L6,iz),e(iz,Jar),e(L6,Yar),e(N,Kar),e(N,x6),e(x6,Y_e),e(Y_e,Zar),e(x6,enr),e(x6,dz),e(dz,onr),e(x6,rnr),e(N,tnr),e(N,$6),e($6,K_e),e(K_e,anr),e($6,nnr),e($6,cz),e(cz,snr),e($6,lnr),e(N,inr),e(N,k6),e(k6,Z_e),e(Z_e,dnr),e(k6,cnr),e(k6,fz),e(fz,fnr),e(k6,mnr),e(N,gnr),e(N,S6),e(S6,e1e),e(e1e,hnr),e(S6,pnr),e(S6,mz),e(mz,unr),e(S6,_nr),e(N,bnr),e(N,R6),e(R6,o1e),e(o1e,vnr),e(R6,Fnr),e(R6,gz),e(gz,Tnr),e(R6,Mnr),e(N,Enr),e(N,B6),e(B6,r1e),e(r1e,Cnr),e(B6,wnr),e(B6,hz),e(hz,Anr),e(B6,ynr),e(N,Lnr),e(N,P6),e(P6,t1e),e(t1e,xnr),e(P6,$nr),e(P6,pz),e(pz,knr),e(P6,Snr),e(N,Rnr),e(N,I6),e(I6,a1e),e(a1e,Bnr),e(I6,Pnr),e(I6,uz),e(uz,Inr),e(I6,qnr),e(N,Nnr),e(N,q6),e(q6,n1e),e(n1e,jnr),e(q6,Dnr),e(q6,_z),e(_z,Gnr),e(q6,Onr),e(N,Vnr),e(N,N6),e(N6,s1e),e(s1e,Xnr),e(N6,znr),e(N6,bz),e(bz,Qnr),e(N6,Wnr),e(N,Hnr),e(N,j6),e(j6,l1e),e(l1e,Unr),e(j6,Jnr),e(j6,vz),e(vz,Ynr),e(j6,Knr),e(N,Znr),e(N,D6),e(D6,i1e),e(i1e,esr),e(D6,osr),e(D6,Fz),e(Fz,rsr),e(D6,tsr),e(N,asr),e(N,G6),e(G6,d1e),e(d1e,nsr),e(G6,ssr),e(G6,Tz),e(Tz,lsr),e(G6,isr),e(N,dsr),e(N,O6),e(O6,c1e),e(c1e,csr),e(O6,fsr),e(O6,Mz),e(Mz,msr),e(O6,gsr),e(N,hsr),e(N,Ps),e(Ps,f1e),e(f1e,psr),e(Ps,usr),e(Ps,Ez),e(Ez,_sr),e(Ps,bsr),e(Ps,Cz),e(Cz,vsr),e(Ps,Fsr),e(N,Tsr),e(N,V6),e(V6,m1e),e(m1e,Msr),e(V6,Esr),e(V6,wz),e(wz,Csr),e(V6,wsr),e(N,Asr),e(N,X6),e(X6,g1e),e(g1e,ysr),e(X6,Lsr),e(X6,Az),e(Az,xsr),e(X6,$sr),e(N,ksr),e(N,z6),e(z6,h1e),e(h1e,Ssr),e(z6,Rsr),e(z6,yz),e(yz,Bsr),e(z6,Psr),e(N,Isr),e(N,Q6),e(Q6,p1e),e(p1e,qsr),e(Q6,Nsr),e(Q6,Lz),e(Lz,jsr),e(Q6,Dsr),e(N,Gsr),e(N,W6),e(W6,u1e),e(u1e,Osr),e(W6,Vsr),e(W6,xz),e(xz,Xsr),e(W6,zsr),e(N,Qsr),e(N,H6),e(H6,_1e),e(_1e,Wsr),e(H6,Hsr),e(H6,$z),e($z,Usr),e(H6,Jsr),e(N,Ysr),e(N,U6),e(U6,b1e),e(b1e,Ksr),e(U6,Zsr),e(U6,kz),e(kz,elr),e(U6,olr),e(N,rlr),e(N,J6),e(J6,v1e),e(v1e,tlr),e(J6,alr),e(J6,Sz),e(Sz,nlr),e(J6,slr),e(N,llr),e(N,Y6),e(Y6,F1e),e(F1e,ilr),e(Y6,dlr),e(Y6,Rz),e(Rz,clr),e(Y6,flr),e(N,mlr),e(N,K6),e(K6,T1e),e(T1e,glr),e(K6,hlr),e(K6,Bz),e(Bz,plr),e(K6,ulr),e(N,_lr),e(N,Z6),e(Z6,M1e),e(M1e,blr),e(Z6,vlr),e(Z6,Pz),e(Pz,Flr),e(Z6,Tlr),e(N,Mlr),e(N,eT),e(eT,E1e),e(E1e,Elr),e(eT,Clr),e(eT,Iz),e(Iz,wlr),e(eT,Alr),e(N,ylr),e(N,oT),e(oT,C1e),e(C1e,Llr),e(oT,xlr),e(oT,qz),e(qz,$lr),e(oT,klr),e(N,Slr),e(N,rT),e(rT,w1e),e(w1e,Rlr),e(rT,Blr),e(rT,Nz),e(Nz,Plr),e(rT,Ilr),e(N,qlr),e(N,tT),e(tT,A1e),e(A1e,Nlr),e(tT,jlr),e(tT,jz),e(jz,Dlr),e(tT,Glr),e(N,Olr),e(N,aT),e(aT,y1e),e(y1e,Vlr),e(aT,Xlr),e(aT,Dz),e(Dz,zlr),e(aT,Qlr),e(N,Wlr),e(N,nT),e(nT,L1e),e(L1e,Hlr),e(nT,Ulr),e(nT,Gz),e(Gz,Jlr),e(nT,Ylr),e(N,Klr),e(N,sT),e(sT,x1e),e(x1e,Zlr),e(sT,eir),e(sT,Oz),e(Oz,oir),e(sT,rir),e(N,tir),e(N,lT),e(lT,$1e),e($1e,air),e(lT,nir),e(lT,Vz),e(Vz,sir),e(lT,lir),e(N,iir),e(N,iT),e(iT,k1e),e(k1e,dir),e(iT,cir),e(iT,Xz),e(Xz,fir),e(iT,mir),e(N,gir),e(N,dT),e(dT,S1e),e(S1e,hir),e(dT,pir),e(dT,zz),e(zz,uir),e(dT,_ir),e(N,bir),e(N,cT),e(cT,R1e),e(R1e,vir),e(cT,Fir),e(cT,Qz),e(Qz,Tir),e(cT,Mir),e(N,Eir),e(N,fT),e(fT,B1e),e(B1e,Cir),e(fT,wir),e(fT,Wz),e(Wz,Air),e(fT,yir),e(N,Lir),e(N,mT),e(mT,P1e),e(P1e,xir),e(mT,$ir),e(mT,Hz),e(Hz,kir),e(mT,Sir),e(N,Rir),e(N,gT),e(gT,I1e),e(I1e,Bir),e(gT,Pir),e(gT,Uz),e(Uz,Iir),e(gT,qir),e(N,Nir),e(N,hT),e(hT,q1e),e(q1e,jir),e(hT,Dir),e(hT,Jz),e(Jz,Gir),e(hT,Oir),e(N,Vir),e(N,pT),e(pT,N1e),e(N1e,Xir),e(pT,zir),e(pT,Yz),e(Yz,Qir),e(pT,Wir),e(N,Hir),e(N,uT),e(uT,j1e),e(j1e,Uir),e(uT,Jir),e(uT,Kz),e(Kz,Yir),e(uT,Kir),e(wr,Zir),M(_T,wr,null),b(f,aqe,_),b(f,Gd,_),e(Gd,bT),e(bT,D1e),M(Dy,D1e,null),e(Gd,edr),e(Gd,G1e),e(G1e,odr),b(f,nqe,_),b(f,Ko,_),M(Gy,Ko,null),e(Ko,rdr),e(Ko,Od),e(Od,tdr),e(Od,Zz),e(Zz,adr),e(Od,ndr),e(Od,eQ),e(eQ,sdr),e(Od,ldr),e(Ko,idr),e(Ko,Oy),e(Oy,ddr),e(Oy,O1e),e(O1e,cdr),e(Oy,fdr),e(Ko,mdr),e(Ko,At),M(Vy,At,null),e(At,gdr),e(At,V1e),e(V1e,hdr),e(At,pdr),e(At,Vd),e(Vd,udr),e(Vd,X1e),e(X1e,_dr),e(Vd,bdr),e(Vd,oQ),e(oQ,vdr),e(Vd,Fdr),e(At,Tdr),M(vT,At,null),e(Ko,Mdr),e(Ko,Ar),M(Xy,Ar,null),e(Ar,Edr),e(Ar,z1e),e(z1e,Cdr),e(Ar,wdr),e(Ar,Za),e(Za,Adr),e(Za,Q1e),e(Q1e,ydr),e(Za,Ldr),e(Za,W1e),e(W1e,xdr),e(Za,$dr),e(Za,H1e),e(H1e,kdr),e(Za,Sdr),e(Ar,Rdr),e(Ar,se),e(se,FT),e(FT,U1e),e(U1e,Bdr),e(FT,Pdr),e(FT,rQ),e(rQ,Idr),e(FT,qdr),e(se,Ndr),e(se,TT),e(TT,J1e),e(J1e,jdr),e(TT,Ddr),e(TT,tQ),e(tQ,Gdr),e(TT,Odr),e(se,Vdr),e(se,MT),e(MT,Y1e),e(Y1e,Xdr),e(MT,zdr),e(MT,aQ),e(aQ,Qdr),e(MT,Wdr),e(se,Hdr),e(se,ET),e(ET,K1e),e(K1e,Udr),e(ET,Jdr),e(ET,nQ),e(nQ,Ydr),e(ET,Kdr),e(se,Zdr),e(se,CT),e(CT,Z1e),e(Z1e,ecr),e(CT,ocr),e(CT,sQ),e(sQ,rcr),e(CT,tcr),e(se,acr),e(se,wT),e(wT,e8e),e(e8e,ncr),e(wT,scr),e(wT,lQ),e(lQ,lcr),e(wT,icr),e(se,dcr),e(se,AT),e(AT,o8e),e(o8e,ccr),e(AT,fcr),e(AT,iQ),e(iQ,mcr),e(AT,gcr),e(se,hcr),e(se,yT),e(yT,r8e),e(r8e,pcr),e(yT,ucr),e(yT,dQ),e(dQ,_cr),e(yT,bcr),e(se,vcr),e(se,LT),e(LT,t8e),e(t8e,Fcr),e(LT,Tcr),e(LT,cQ),e(cQ,Mcr),e(LT,Ecr),e(se,Ccr),e(se,xT),e(xT,a8e),e(a8e,wcr),e(xT,Acr),e(xT,fQ),e(fQ,ycr),e(xT,Lcr),e(se,xcr),e(se,$T),e($T,n8e),e(n8e,$cr),e($T,kcr),e($T,mQ),e(mQ,Scr),e($T,Rcr),e(se,Bcr),e(se,kT),e(kT,s8e),e(s8e,Pcr),e(kT,Icr),e(kT,gQ),e(gQ,qcr),e(kT,Ncr),e(se,jcr),e(se,ST),e(ST,l8e),e(l8e,Dcr),e(ST,Gcr),e(ST,hQ),e(hQ,Ocr),e(ST,Vcr),e(se,Xcr),e(se,RT),e(RT,i8e),e(i8e,zcr),e(RT,Qcr),e(RT,pQ),e(pQ,Wcr),e(RT,Hcr),e(se,Ucr),e(se,BT),e(BT,d8e),e(d8e,Jcr),e(BT,Ycr),e(BT,uQ),e(uQ,Kcr),e(BT,Zcr),e(se,efr),e(se,PT),e(PT,c8e),e(c8e,ofr),e(PT,rfr),e(PT,_Q),e(_Q,tfr),e(PT,afr),e(se,nfr),e(se,IT),e(IT,f8e),e(f8e,sfr),e(IT,lfr),e(IT,bQ),e(bQ,ifr),e(IT,dfr),e(se,cfr),e(se,qT),e(qT,m8e),e(m8e,ffr),e(qT,mfr),e(qT,vQ),e(vQ,gfr),e(qT,hfr),e(se,pfr),e(se,NT),e(NT,g8e),e(g8e,ufr),e(NT,_fr),e(NT,FQ),e(FQ,bfr),e(NT,vfr),e(se,Ffr),e(se,jT),e(jT,h8e),e(h8e,Tfr),e(jT,Mfr),e(jT,TQ),e(TQ,Efr),e(jT,Cfr),e(se,wfr),e(se,DT),e(DT,p8e),e(p8e,Afr),e(DT,yfr),e(DT,MQ),e(MQ,Lfr),e(DT,xfr),e(se,$fr),e(se,GT),e(GT,u8e),e(u8e,kfr),e(GT,Sfr),e(GT,EQ),e(EQ,Rfr),e(GT,Bfr),e(se,Pfr),e(se,OT),e(OT,_8e),e(_8e,Ifr),e(OT,qfr),e(OT,CQ),e(CQ,Nfr),e(OT,jfr),e(Ar,Dfr),M(VT,Ar,null),b(f,sqe,_),b(f,Xd,_),e(Xd,XT),e(XT,b8e),M(zy,b8e,null),e(Xd,Gfr),e(Xd,v8e),e(v8e,Ofr),b(f,lqe,_),b(f,Zo,_),M(Qy,Zo,null),e(Zo,Vfr),e(Zo,zd),e(zd,Xfr),e(zd,wQ),e(wQ,zfr),e(zd,Qfr),e(zd,AQ),e(AQ,Wfr),e(zd,Hfr),e(Zo,Ufr),e(Zo,Wy),e(Wy,Jfr),e(Wy,F8e),e(F8e,Yfr),e(Wy,Kfr),e(Zo,Zfr),e(Zo,yt),M(Hy,yt,null),e(yt,emr),e(yt,T8e),e(T8e,omr),e(yt,rmr),e(yt,Qd),e(Qd,tmr),e(Qd,M8e),e(M8e,amr),e(Qd,nmr),e(Qd,yQ),e(yQ,smr),e(Qd,lmr),e(yt,imr),M(zT,yt,null),e(Zo,dmr),e(Zo,yr),M(Uy,yr,null),e(yr,cmr),e(yr,E8e),e(E8e,fmr),e(yr,mmr),e(yr,en),e(en,gmr),e(en,C8e),e(C8e,hmr),e(en,pmr),e(en,w8e),e(w8e,umr),e(en,_mr),e(en,A8e),e(A8e,bmr),e(en,vmr),e(yr,Fmr),e(yr,Te),e(Te,QT),e(QT,y8e),e(y8e,Tmr),e(QT,Mmr),e(QT,LQ),e(LQ,Emr),e(QT,Cmr),e(Te,wmr),e(Te,WT),e(WT,L8e),e(L8e,Amr),e(WT,ymr),e(WT,xQ),e(xQ,Lmr),e(WT,xmr),e(Te,$mr),e(Te,HT),e(HT,x8e),e(x8e,kmr),e(HT,Smr),e(HT,$Q),e($Q,Rmr),e(HT,Bmr),e(Te,Pmr),e(Te,UT),e(UT,$8e),e($8e,Imr),e(UT,qmr),e(UT,kQ),e(kQ,Nmr),e(UT,jmr),e(Te,Dmr),e(Te,JT),e(JT,k8e),e(k8e,Gmr),e(JT,Omr),e(JT,SQ),e(SQ,Vmr),e(JT,Xmr),e(Te,zmr),e(Te,YT),e(YT,S8e),e(S8e,Qmr),e(YT,Wmr),e(YT,RQ),e(RQ,Hmr),e(YT,Umr),e(Te,Jmr),e(Te,KT),e(KT,R8e),e(R8e,Ymr),e(KT,Kmr),e(KT,BQ),e(BQ,Zmr),e(KT,egr),e(Te,ogr),e(Te,ZT),e(ZT,B8e),e(B8e,rgr),e(ZT,tgr),e(ZT,PQ),e(PQ,agr),e(ZT,ngr),e(Te,sgr),e(Te,e9),e(e9,P8e),e(P8e,lgr),e(e9,igr),e(e9,IQ),e(IQ,dgr),e(e9,cgr),e(Te,fgr),e(Te,o9),e(o9,I8e),e(I8e,mgr),e(o9,ggr),e(o9,qQ),e(qQ,hgr),e(o9,pgr),e(Te,ugr),e(Te,r9),e(r9,q8e),e(q8e,_gr),e(r9,bgr),e(r9,NQ),e(NQ,vgr),e(r9,Fgr),e(Te,Tgr),e(Te,t9),e(t9,N8e),e(N8e,Mgr),e(t9,Egr),e(t9,jQ),e(jQ,Cgr),e(t9,wgr),e(yr,Agr),M(a9,yr,null),b(f,iqe,_),b(f,Wd,_),e(Wd,n9),e(n9,j8e),M(Jy,j8e,null),e(Wd,ygr),e(Wd,D8e),e(D8e,Lgr),b(f,dqe,_),b(f,er,_),M(Yy,er,null),e(er,xgr),e(er,Hd),e(Hd,$gr),e(Hd,DQ),e(DQ,kgr),e(Hd,Sgr),e(Hd,GQ),e(GQ,Rgr),e(Hd,Bgr),e(er,Pgr),e(er,Ky),e(Ky,Igr),e(Ky,G8e),e(G8e,qgr),e(Ky,Ngr),e(er,jgr),e(er,Lt),M(Zy,Lt,null),e(Lt,Dgr),e(Lt,O8e),e(O8e,Ggr),e(Lt,Ogr),e(Lt,Ud),e(Ud,Vgr),e(Ud,V8e),e(V8e,Xgr),e(Ud,zgr),e(Ud,OQ),e(OQ,Qgr),e(Ud,Wgr),e(Lt,Hgr),M(s9,Lt,null),e(er,Ugr),e(er,Lr),M(eL,Lr,null),e(Lr,Jgr),e(Lr,X8e),e(X8e,Ygr),e(Lr,Kgr),e(Lr,on),e(on,Zgr),e(on,z8e),e(z8e,ehr),e(on,ohr),e(on,Q8e),e(Q8e,rhr),e(on,thr),e(on,W8e),e(W8e,ahr),e(on,nhr),e(Lr,shr),e(Lr,rn),e(rn,l9),e(l9,H8e),e(H8e,lhr),e(l9,ihr),e(l9,VQ),e(VQ,dhr),e(l9,chr),e(rn,fhr),e(rn,i9),e(i9,U8e),e(U8e,mhr),e(i9,ghr),e(i9,XQ),e(XQ,hhr),e(i9,phr),e(rn,uhr),e(rn,d9),e(d9,J8e),e(J8e,_hr),e(d9,bhr),e(d9,zQ),e(zQ,vhr),e(d9,Fhr),e(rn,Thr),e(rn,c9),e(c9,Y8e),e(Y8e,Mhr),e(c9,Ehr),e(c9,QQ),e(QQ,Chr),e(c9,whr),e(Lr,Ahr),M(f9,Lr,null),b(f,cqe,_),b(f,Jd,_),e(Jd,m9),e(m9,K8e),M(oL,K8e,null),e(Jd,yhr),e(Jd,Z8e),e(Z8e,Lhr),b(f,fqe,_),b(f,or,_),M(rL,or,null),e(or,xhr),e(or,Yd),e(Yd,$hr),e(Yd,WQ),e(WQ,khr),e(Yd,Shr),e(Yd,HQ),e(HQ,Rhr),e(Yd,Bhr),e(or,Phr),e(or,tL),e(tL,Ihr),e(tL,ebe),e(ebe,qhr),e(tL,Nhr),e(or,jhr),e(or,xt),M(aL,xt,null),e(xt,Dhr),e(xt,obe),e(obe,Ghr),e(xt,Ohr),e(xt,Kd),e(Kd,Vhr),e(Kd,rbe),e(rbe,Xhr),e(Kd,zhr),e(Kd,UQ),e(UQ,Qhr),e(Kd,Whr),e(xt,Hhr),M(g9,xt,null),e(or,Uhr),e(or,xr),M(nL,xr,null),e(xr,Jhr),e(xr,tbe),e(tbe,Yhr),e(xr,Khr),e(xr,tn),e(tn,Zhr),e(tn,abe),e(abe,epr),e(tn,opr),e(tn,nbe),e(nbe,rpr),e(tn,tpr),e(tn,sbe),e(sbe,apr),e(tn,npr),e(xr,spr),e(xr,ie),e(ie,h9),e(h9,lbe),e(lbe,lpr),e(h9,ipr),e(h9,JQ),e(JQ,dpr),e(h9,cpr),e(ie,fpr),e(ie,p9),e(p9,ibe),e(ibe,mpr),e(p9,gpr),e(p9,YQ),e(YQ,hpr),e(p9,ppr),e(ie,upr),e(ie,u9),e(u9,dbe),e(dbe,_pr),e(u9,bpr),e(u9,KQ),e(KQ,vpr),e(u9,Fpr),e(ie,Tpr),e(ie,_9),e(_9,cbe),e(cbe,Mpr),e(_9,Epr),e(_9,ZQ),e(ZQ,Cpr),e(_9,wpr),e(ie,Apr),e(ie,b9),e(b9,fbe),e(fbe,ypr),e(b9,Lpr),e(b9,eW),e(eW,xpr),e(b9,$pr),e(ie,kpr),e(ie,v9),e(v9,mbe),e(mbe,Spr),e(v9,Rpr),e(v9,oW),e(oW,Bpr),e(v9,Ppr),e(ie,Ipr),e(ie,F9),e(F9,gbe),e(gbe,qpr),e(F9,Npr),e(F9,rW),e(rW,jpr),e(F9,Dpr),e(ie,Gpr),e(ie,T9),e(T9,hbe),e(hbe,Opr),e(T9,Vpr),e(T9,tW),e(tW,Xpr),e(T9,zpr),e(ie,Qpr),e(ie,M9),e(M9,pbe),e(pbe,Wpr),e(M9,Hpr),e(M9,aW),e(aW,Upr),e(M9,Jpr),e(ie,Ypr),e(ie,E9),e(E9,ube),e(ube,Kpr),e(E9,Zpr),e(E9,nW),e(nW,eur),e(E9,our),e(ie,rur),e(ie,C9),e(C9,_be),e(_be,tur),e(C9,aur),e(C9,sW),e(sW,nur),e(C9,sur),e(ie,lur),e(ie,w9),e(w9,bbe),e(bbe,iur),e(w9,dur),e(w9,lW),e(lW,cur),e(w9,fur),e(ie,mur),e(ie,A9),e(A9,vbe),e(vbe,gur),e(A9,hur),e(A9,iW),e(iW,pur),e(A9,uur),e(ie,_ur),e(ie,y9),e(y9,Fbe),e(Fbe,bur),e(y9,vur),e(y9,dW),e(dW,Fur),e(y9,Tur),e(ie,Mur),e(ie,L9),e(L9,Tbe),e(Tbe,Eur),e(L9,Cur),e(L9,cW),e(cW,wur),e(L9,Aur),e(ie,yur),e(ie,x9),e(x9,Mbe),e(Mbe,Lur),e(x9,xur),e(x9,fW),e(fW,$ur),e(x9,kur),e(ie,Sur),e(ie,$9),e($9,Ebe),e(Ebe,Rur),e($9,Bur),e($9,mW),e(mW,Pur),e($9,Iur),e(ie,qur),e(ie,k9),e(k9,Cbe),e(Cbe,Nur),e(k9,jur),e(k9,gW),e(gW,Dur),e(k9,Gur),e(ie,Our),e(ie,S9),e(S9,wbe),e(wbe,Vur),e(S9,Xur),e(S9,hW),e(hW,zur),e(S9,Qur),e(ie,Wur),e(ie,R9),e(R9,Abe),e(Abe,Hur),e(R9,Uur),e(R9,pW),e(pW,Jur),e(R9,Yur),e(xr,Kur),M(B9,xr,null),b(f,mqe,_),b(f,Zd,_),e(Zd,P9),e(P9,ybe),M(sL,ybe,null),e(Zd,Zur),e(Zd,Lbe),e(Lbe,e_r),b(f,gqe,_),b(f,rr,_),M(lL,rr,null),e(rr,o_r),e(rr,ec),e(ec,r_r),e(ec,uW),e(uW,t_r),e(ec,a_r),e(ec,_W),e(_W,n_r),e(ec,s_r),e(rr,l_r),e(rr,iL),e(iL,i_r),e(iL,xbe),e(xbe,d_r),e(iL,c_r),e(rr,f_r),e(rr,$t),M(dL,$t,null),e($t,m_r),e($t,$be),e($be,g_r),e($t,h_r),e($t,oc),e(oc,p_r),e(oc,kbe),e(kbe,u_r),e(oc,__r),e(oc,bW),e(bW,b_r),e(oc,v_r),e($t,F_r),M(I9,$t,null),e(rr,T_r),e(rr,$r),M(cL,$r,null),e($r,M_r),e($r,Sbe),e(Sbe,E_r),e($r,C_r),e($r,an),e(an,w_r),e(an,Rbe),e(Rbe,A_r),e(an,y_r),e(an,Bbe),e(Bbe,L_r),e(an,x_r),e(an,Pbe),e(Pbe,$_r),e(an,k_r),e($r,S_r),e($r,ye),e(ye,q9),e(q9,Ibe),e(Ibe,R_r),e(q9,B_r),e(q9,vW),e(vW,P_r),e(q9,I_r),e(ye,q_r),e(ye,N9),e(N9,qbe),e(qbe,N_r),e(N9,j_r),e(N9,FW),e(FW,D_r),e(N9,G_r),e(ye,O_r),e(ye,j9),e(j9,Nbe),e(Nbe,V_r),e(j9,X_r),e(j9,TW),e(TW,z_r),e(j9,Q_r),e(ye,W_r),e(ye,D9),e(D9,jbe),e(jbe,H_r),e(D9,U_r),e(D9,MW),e(MW,J_r),e(D9,Y_r),e(ye,K_r),e(ye,G9),e(G9,Dbe),e(Dbe,Z_r),e(G9,e1r),e(G9,EW),e(EW,o1r),e(G9,r1r),e(ye,t1r),e(ye,O9),e(O9,Gbe),e(Gbe,a1r),e(O9,n1r),e(O9,CW),e(CW,s1r),e(O9,l1r),e(ye,i1r),e(ye,V9),e(V9,Obe),e(Obe,d1r),e(V9,c1r),e(V9,wW),e(wW,f1r),e(V9,m1r),e(ye,g1r),e(ye,X9),e(X9,Vbe),e(Vbe,h1r),e(X9,p1r),e(X9,AW),e(AW,u1r),e(X9,_1r),e(ye,b1r),e(ye,z9),e(z9,Xbe),e(Xbe,v1r),e(z9,F1r),e(z9,yW),e(yW,T1r),e(z9,M1r),e(ye,E1r),e(ye,Q9),e(Q9,zbe),e(zbe,C1r),e(Q9,w1r),e(Q9,LW),e(LW,A1r),e(Q9,y1r),e($r,L1r),M(W9,$r,null),b(f,hqe,_),b(f,rc,_),e(rc,H9),e(H9,Qbe),M(fL,Qbe,null),e(rc,x1r),e(rc,Wbe),e(Wbe,$1r),b(f,pqe,_),b(f,tr,_),M(mL,tr,null),e(tr,k1r),e(tr,tc),e(tc,S1r),e(tc,xW),e(xW,R1r),e(tc,B1r),e(tc,$W),e($W,P1r),e(tc,I1r),e(tr,q1r),e(tr,gL),e(gL,N1r),e(gL,Hbe),e(Hbe,j1r),e(gL,D1r),e(tr,G1r),e(tr,kt),M(hL,kt,null),e(kt,O1r),e(kt,Ube),e(Ube,V1r),e(kt,X1r),e(kt,ac),e(ac,z1r),e(ac,Jbe),e(Jbe,Q1r),e(ac,W1r),e(ac,kW),e(kW,H1r),e(ac,U1r),e(kt,J1r),M(U9,kt,null),e(tr,Y1r),e(tr,kr),M(pL,kr,null),e(kr,K1r),e(kr,Ybe),e(Ybe,Z1r),e(kr,e8r),e(kr,nn),e(nn,o8r),e(nn,Kbe),e(Kbe,r8r),e(nn,t8r),e(nn,Zbe),e(Zbe,a8r),e(nn,n8r),e(nn,e2e),e(e2e,s8r),e(nn,l8r),e(kr,i8r),e(kr,Z),e(Z,J9),e(J9,o2e),e(o2e,d8r),e(J9,c8r),e(J9,SW),e(SW,f8r),e(J9,m8r),e(Z,g8r),e(Z,Y9),e(Y9,r2e),e(r2e,h8r),e(Y9,p8r),e(Y9,RW),e(RW,u8r),e(Y9,_8r),e(Z,b8r),e(Z,K9),e(K9,t2e),e(t2e,v8r),e(K9,F8r),e(K9,BW),e(BW,T8r),e(K9,M8r),e(Z,E8r),e(Z,Z9),e(Z9,a2e),e(a2e,C8r),e(Z9,w8r),e(Z9,PW),e(PW,A8r),e(Z9,y8r),e(Z,L8r),e(Z,eM),e(eM,n2e),e(n2e,x8r),e(eM,$8r),e(eM,IW),e(IW,k8r),e(eM,S8r),e(Z,R8r),e(Z,oM),e(oM,s2e),e(s2e,B8r),e(oM,P8r),e(oM,qW),e(qW,I8r),e(oM,q8r),e(Z,N8r),e(Z,rM),e(rM,l2e),e(l2e,j8r),e(rM,D8r),e(rM,NW),e(NW,G8r),e(rM,O8r),e(Z,V8r),e(Z,tM),e(tM,i2e),e(i2e,X8r),e(tM,z8r),e(tM,jW),e(jW,Q8r),e(tM,W8r),e(Z,H8r),e(Z,aM),e(aM,d2e),e(d2e,U8r),e(aM,J8r),e(aM,DW),e(DW,Y8r),e(aM,K8r),e(Z,Z8r),e(Z,nM),e(nM,c2e),e(c2e,ebr),e(nM,obr),e(nM,GW),e(GW,rbr),e(nM,tbr),e(Z,abr),e(Z,sM),e(sM,f2e),e(f2e,nbr),e(sM,sbr),e(sM,OW),e(OW,lbr),e(sM,ibr),e(Z,dbr),e(Z,lM),e(lM,m2e),e(m2e,cbr),e(lM,fbr),e(lM,VW),e(VW,mbr),e(lM,gbr),e(Z,hbr),e(Z,iM),e(iM,g2e),e(g2e,pbr),e(iM,ubr),e(iM,XW),e(XW,_br),e(iM,bbr),e(Z,vbr),e(Z,dM),e(dM,h2e),e(h2e,Fbr),e(dM,Tbr),e(dM,zW),e(zW,Mbr),e(dM,Ebr),e(Z,Cbr),e(Z,cM),e(cM,p2e),e(p2e,wbr),e(cM,Abr),e(cM,QW),e(QW,ybr),e(cM,Lbr),e(Z,xbr),e(Z,fM),e(fM,u2e),e(u2e,$br),e(fM,kbr),e(fM,WW),e(WW,Sbr),e(fM,Rbr),e(Z,Bbr),e(Z,mM),e(mM,_2e),e(_2e,Pbr),e(mM,Ibr),e(mM,HW),e(HW,qbr),e(mM,Nbr),e(Z,jbr),e(Z,gM),e(gM,b2e),e(b2e,Dbr),e(gM,Gbr),e(gM,UW),e(UW,Obr),e(gM,Vbr),e(Z,Xbr),e(Z,hM),e(hM,v2e),e(v2e,zbr),e(hM,Qbr),e(hM,JW),e(JW,Wbr),e(hM,Hbr),e(Z,Ubr),e(Z,pM),e(pM,F2e),e(F2e,Jbr),e(pM,Ybr),e(pM,YW),e(YW,Kbr),e(pM,Zbr),e(Z,e2r),e(Z,uM),e(uM,T2e),e(T2e,o2r),e(uM,r2r),e(uM,KW),e(KW,t2r),e(uM,a2r),e(Z,n2r),e(Z,_M),e(_M,M2e),e(M2e,s2r),e(_M,l2r),e(_M,ZW),e(ZW,i2r),e(_M,d2r),e(Z,c2r),e(Z,bM),e(bM,E2e),e(E2e,f2r),e(bM,m2r),e(bM,eH),e(eH,g2r),e(bM,h2r),e(Z,p2r),e(Z,vM),e(vM,C2e),e(C2e,u2r),e(vM,_2r),e(vM,oH),e(oH,b2r),e(vM,v2r),e(Z,F2r),e(Z,FM),e(FM,w2e),e(w2e,T2r),e(FM,M2r),e(FM,rH),e(rH,E2r),e(FM,C2r),e(Z,w2r),e(Z,TM),e(TM,A2e),e(A2e,A2r),e(TM,y2r),e(TM,tH),e(tH,L2r),e(TM,x2r),e(kr,$2r),M(MM,kr,null),b(f,uqe,_),b(f,nc,_),e(nc,EM),e(EM,y2e),M(uL,y2e,null),e(nc,k2r),e(nc,L2e),e(L2e,S2r),b(f,_qe,_),b(f,ar,_),M(_L,ar,null),e(ar,R2r),e(ar,sc),e(sc,B2r),e(sc,aH),e(aH,P2r),e(sc,I2r),e(sc,nH),e(nH,q2r),e(sc,N2r),e(ar,j2r),e(ar,bL),e(bL,D2r),e(bL,x2e),e(x2e,G2r),e(bL,O2r),e(ar,V2r),e(ar,St),M(vL,St,null),e(St,X2r),e(St,$2e),e($2e,z2r),e(St,Q2r),e(St,lc),e(lc,W2r),e(lc,k2e),e(k2e,H2r),e(lc,U2r),e(lc,sH),e(sH,J2r),e(lc,Y2r),e(St,K2r),M(CM,St,null),e(ar,Z2r),e(ar,Sr),M(FL,Sr,null),e(Sr,evr),e(Sr,S2e),e(S2e,ovr),e(Sr,rvr),e(Sr,sn),e(sn,tvr),e(sn,R2e),e(R2e,avr),e(sn,nvr),e(sn,B2e),e(B2e,svr),e(sn,lvr),e(sn,P2e),e(P2e,ivr),e(sn,dvr),e(Sr,cvr),e(Sr,pe),e(pe,wM),e(wM,I2e),e(I2e,fvr),e(wM,mvr),e(wM,lH),e(lH,gvr),e(wM,hvr),e(pe,pvr),e(pe,AM),e(AM,q2e),e(q2e,uvr),e(AM,_vr),e(AM,iH),e(iH,bvr),e(AM,vvr),e(pe,Fvr),e(pe,yM),e(yM,N2e),e(N2e,Tvr),e(yM,Mvr),e(yM,dH),e(dH,Evr),e(yM,Cvr),e(pe,wvr),e(pe,LM),e(LM,j2e),e(j2e,Avr),e(LM,yvr),e(LM,cH),e(cH,Lvr),e(LM,xvr),e(pe,$vr),e(pe,xM),e(xM,D2e),e(D2e,kvr),e(xM,Svr),e(xM,fH),e(fH,Rvr),e(xM,Bvr),e(pe,Pvr),e(pe,$M),e($M,G2e),e(G2e,Ivr),e($M,qvr),e($M,mH),e(mH,Nvr),e($M,jvr),e(pe,Dvr),e(pe,kM),e(kM,O2e),e(O2e,Gvr),e(kM,Ovr),e(kM,gH),e(gH,Vvr),e(kM,Xvr),e(pe,zvr),e(pe,SM),e(SM,V2e),e(V2e,Qvr),e(SM,Wvr),e(SM,hH),e(hH,Hvr),e(SM,Uvr),e(pe,Jvr),e(pe,RM),e(RM,X2e),e(X2e,Yvr),e(RM,Kvr),e(RM,pH),e(pH,Zvr),e(RM,eFr),e(pe,oFr),e(pe,BM),e(BM,z2e),e(z2e,rFr),e(BM,tFr),e(BM,uH),e(uH,aFr),e(BM,nFr),e(pe,sFr),e(pe,PM),e(PM,Q2e),e(Q2e,lFr),e(PM,iFr),e(PM,_H),e(_H,dFr),e(PM,cFr),e(pe,fFr),e(pe,IM),e(IM,W2e),e(W2e,mFr),e(IM,gFr),e(IM,bH),e(bH,hFr),e(IM,pFr),e(pe,uFr),e(pe,qM),e(qM,H2e),e(H2e,_Fr),e(qM,bFr),e(qM,vH),e(vH,vFr),e(qM,FFr),e(pe,TFr),e(pe,NM),e(NM,U2e),e(U2e,MFr),e(NM,EFr),e(NM,FH),e(FH,CFr),e(NM,wFr),e(pe,AFr),e(pe,jM),e(jM,J2e),e(J2e,yFr),e(jM,LFr),e(jM,TH),e(TH,xFr),e(jM,$Fr),e(pe,kFr),e(pe,DM),e(DM,Y2e),e(Y2e,SFr),e(DM,RFr),e(DM,MH),e(MH,BFr),e(DM,PFr),e(pe,IFr),e(pe,GM),e(GM,K2e),e(K2e,qFr),e(GM,NFr),e(GM,EH),e(EH,jFr),e(GM,DFr),e(Sr,GFr),M(OM,Sr,null),b(f,bqe,_),b(f,ic,_),e(ic,VM),e(VM,Z2e),M(TL,Z2e,null),e(ic,OFr),e(ic,eve),e(eve,VFr),b(f,vqe,_),b(f,nr,_),M(ML,nr,null),e(nr,XFr),e(nr,dc),e(dc,zFr),e(dc,CH),e(CH,QFr),e(dc,WFr),e(dc,wH),e(wH,HFr),e(dc,UFr),e(nr,JFr),e(nr,EL),e(EL,YFr),e(EL,ove),e(ove,KFr),e(EL,ZFr),e(nr,e6r),e(nr,Rt),M(CL,Rt,null),e(Rt,o6r),e(Rt,rve),e(rve,r6r),e(Rt,t6r),e(Rt,cc),e(cc,a6r),e(cc,tve),e(tve,n6r),e(cc,s6r),e(cc,AH),e(AH,l6r),e(cc,i6r),e(Rt,d6r),M(XM,Rt,null),e(nr,c6r),e(nr,Rr),M(wL,Rr,null),e(Rr,f6r),e(Rr,ave),e(ave,m6r),e(Rr,g6r),e(Rr,ln),e(ln,h6r),e(ln,nve),e(nve,p6r),e(ln,u6r),e(ln,sve),e(sve,_6r),e(ln,b6r),e(ln,lve),e(lve,v6r),e(ln,F6r),e(Rr,T6r),e(Rr,AL),e(AL,zM),e(zM,ive),e(ive,M6r),e(zM,E6r),e(zM,yH),e(yH,C6r),e(zM,w6r),e(AL,A6r),e(AL,QM),e(QM,dve),e(dve,y6r),e(QM,L6r),e(QM,LH),e(LH,x6r),e(QM,$6r),e(Rr,k6r),M(WM,Rr,null),b(f,Fqe,_),b(f,fc,_),e(fc,HM),e(HM,cve),M(yL,cve,null),e(fc,S6r),e(fc,fve),e(fve,R6r),b(f,Tqe,_),b(f,sr,_),M(LL,sr,null),e(sr,B6r),e(sr,mc),e(mc,P6r),e(mc,xH),e(xH,I6r),e(mc,q6r),e(mc,$H),e($H,N6r),e(mc,j6r),e(sr,D6r),e(sr,xL),e(xL,G6r),e(xL,mve),e(mve,O6r),e(xL,V6r),e(sr,X6r),e(sr,Bt),M($L,Bt,null),e(Bt,z6r),e(Bt,gve),e(gve,Q6r),e(Bt,W6r),e(Bt,gc),e(gc,H6r),e(gc,hve),e(hve,U6r),e(gc,J6r),e(gc,kH),e(kH,Y6r),e(gc,K6r),e(Bt,Z6r),M(UM,Bt,null),e(sr,eTr),e(sr,Br),M(kL,Br,null),e(Br,oTr),e(Br,pve),e(pve,rTr),e(Br,tTr),e(Br,dn),e(dn,aTr),e(dn,uve),e(uve,nTr),e(dn,sTr),e(dn,_ve),e(_ve,lTr),e(dn,iTr),e(dn,bve),e(bve,dTr),e(dn,cTr),e(Br,fTr),e(Br,vve),e(vve,JM),e(JM,Fve),e(Fve,mTr),e(JM,gTr),e(JM,SH),e(SH,hTr),e(JM,pTr),e(Br,uTr),M(YM,Br,null),b(f,Mqe,_),b(f,hc,_),e(hc,KM),e(KM,Tve),M(SL,Tve,null),e(hc,_Tr),e(hc,Mve),e(Mve,bTr),b(f,Eqe,_),b(f,lr,_),M(RL,lr,null),e(lr,vTr),e(lr,pc),e(pc,FTr),e(pc,RH),e(RH,TTr),e(pc,MTr),e(pc,BH),e(BH,ETr),e(pc,CTr),e(lr,wTr),e(lr,BL),e(BL,ATr),e(BL,Eve),e(Eve,yTr),e(BL,LTr),e(lr,xTr),e(lr,Pt),M(PL,Pt,null),e(Pt,$Tr),e(Pt,Cve),e(Cve,kTr),e(Pt,STr),e(Pt,uc),e(uc,RTr),e(uc,wve),e(wve,BTr),e(uc,PTr),e(uc,PH),e(PH,ITr),e(uc,qTr),e(Pt,NTr),M(ZM,Pt,null),e(lr,jTr),e(lr,Pr),M(IL,Pr,null),e(Pr,DTr),e(Pr,Ave),e(Ave,GTr),e(Pr,OTr),e(Pr,cn),e(cn,VTr),e(cn,yve),e(yve,XTr),e(cn,zTr),e(cn,Lve),e(Lve,QTr),e(cn,WTr),e(cn,xve),e(xve,HTr),e(cn,UTr),e(Pr,JTr),e(Pr,de),e(de,e4),e(e4,$ve),e($ve,YTr),e(e4,KTr),e(e4,IH),e(IH,ZTr),e(e4,e9r),e(de,o9r),e(de,o4),e(o4,kve),e(kve,r9r),e(o4,t9r),e(o4,qH),e(qH,a9r),e(o4,n9r),e(de,s9r),e(de,r4),e(r4,Sve),e(Sve,l9r),e(r4,i9r),e(r4,NH),e(NH,d9r),e(r4,c9r),e(de,f9r),e(de,t4),e(t4,Rve),e(Rve,m9r),e(t4,g9r),e(t4,jH),e(jH,h9r),e(t4,p9r),e(de,u9r),e(de,a4),e(a4,Bve),e(Bve,_9r),e(a4,b9r),e(a4,DH),e(DH,v9r),e(a4,F9r),e(de,T9r),e(de,n4),e(n4,Pve),e(Pve,M9r),e(n4,E9r),e(n4,GH),e(GH,C9r),e(n4,w9r),e(de,A9r),e(de,s4),e(s4,Ive),e(Ive,y9r),e(s4,L9r),e(s4,OH),e(OH,x9r),e(s4,$9r),e(de,k9r),e(de,l4),e(l4,qve),e(qve,S9r),e(l4,R9r),e(l4,VH),e(VH,B9r),e(l4,P9r),e(de,I9r),e(de,i4),e(i4,Nve),e(Nve,q9r),e(i4,N9r),e(i4,XH),e(XH,j9r),e(i4,D9r),e(de,G9r),e(de,d4),e(d4,jve),e(jve,O9r),e(d4,V9r),e(d4,zH),e(zH,X9r),e(d4,z9r),e(de,Q9r),e(de,c4),e(c4,Dve),e(Dve,W9r),e(c4,H9r),e(c4,QH),e(QH,U9r),e(c4,J9r),e(de,Y9r),e(de,f4),e(f4,Gve),e(Gve,K9r),e(f4,Z9r),e(f4,WH),e(WH,eMr),e(f4,oMr),e(de,rMr),e(de,m4),e(m4,Ove),e(Ove,tMr),e(m4,aMr),e(m4,HH),e(HH,nMr),e(m4,sMr),e(de,lMr),e(de,g4),e(g4,Vve),e(Vve,iMr),e(g4,dMr),e(g4,UH),e(UH,cMr),e(g4,fMr),e(de,mMr),e(de,h4),e(h4,Xve),e(Xve,gMr),e(h4,hMr),e(h4,JH),e(JH,pMr),e(h4,uMr),e(de,_Mr),e(de,p4),e(p4,zve),e(zve,bMr),e(p4,vMr),e(p4,YH),e(YH,FMr),e(p4,TMr),e(de,MMr),e(de,u4),e(u4,Qve),e(Qve,EMr),e(u4,CMr),e(u4,KH),e(KH,wMr),e(u4,AMr),e(de,yMr),e(de,_4),e(_4,Wve),e(Wve,LMr),e(_4,xMr),e(_4,ZH),e(ZH,$Mr),e(_4,kMr),e(de,SMr),e(de,b4),e(b4,Hve),e(Hve,RMr),e(b4,BMr),e(b4,eU),e(eU,PMr),e(b4,IMr),e(de,qMr),e(de,v4),e(v4,Uve),e(Uve,NMr),e(v4,jMr),e(v4,oU),e(oU,DMr),e(v4,GMr),e(Pr,OMr),M(F4,Pr,null),b(f,Cqe,_),b(f,_c,_),e(_c,T4),e(T4,Jve),M(qL,Jve,null),e(_c,VMr),e(_c,Yve),e(Yve,XMr),b(f,wqe,_),b(f,ir,_),M(NL,ir,null),e(ir,zMr),e(ir,bc),e(bc,QMr),e(bc,rU),e(rU,WMr),e(bc,HMr),e(bc,tU),e(tU,UMr),e(bc,JMr),e(ir,YMr),e(ir,jL),e(jL,KMr),e(jL,Kve),e(Kve,ZMr),e(jL,e4r),e(ir,o4r),e(ir,It),M(DL,It,null),e(It,r4r),e(It,Zve),e(Zve,t4r),e(It,a4r),e(It,vc),e(vc,n4r),e(vc,eFe),e(eFe,s4r),e(vc,l4r),e(vc,aU),e(aU,i4r),e(vc,d4r),e(It,c4r),M(M4,It,null),e(ir,f4r),e(ir,Ir),M(GL,Ir,null),e(Ir,m4r),e(Ir,oFe),e(oFe,g4r),e(Ir,h4r),e(Ir,fn),e(fn,p4r),e(fn,rFe),e(rFe,u4r),e(fn,_4r),e(fn,tFe),e(tFe,b4r),e(fn,v4r),e(fn,aFe),e(aFe,F4r),e(fn,T4r),e(Ir,M4r),e(Ir,ce),e(ce,E4),e(E4,nFe),e(nFe,E4r),e(E4,C4r),e(E4,nU),e(nU,w4r),e(E4,A4r),e(ce,y4r),e(ce,C4),e(C4,sFe),e(sFe,L4r),e(C4,x4r),e(C4,sU),e(sU,$4r),e(C4,k4r),e(ce,S4r),e(ce,w4),e(w4,lFe),e(lFe,R4r),e(w4,B4r),e(w4,lU),e(lU,P4r),e(w4,I4r),e(ce,q4r),e(ce,A4),e(A4,iFe),e(iFe,N4r),e(A4,j4r),e(A4,iU),e(iU,D4r),e(A4,G4r),e(ce,O4r),e(ce,y4),e(y4,dFe),e(dFe,V4r),e(y4,X4r),e(y4,dU),e(dU,z4r),e(y4,Q4r),e(ce,W4r),e(ce,L4),e(L4,cFe),e(cFe,H4r),e(L4,U4r),e(L4,cU),e(cU,J4r),e(L4,Y4r),e(ce,K4r),e(ce,x4),e(x4,fFe),e(fFe,Z4r),e(x4,eEr),e(x4,fU),e(fU,oEr),e(x4,rEr),e(ce,tEr),e(ce,$4),e($4,mFe),e(mFe,aEr),e($4,nEr),e($4,mU),e(mU,sEr),e($4,lEr),e(ce,iEr),e(ce,k4),e(k4,gFe),e(gFe,dEr),e(k4,cEr),e(k4,gU),e(gU,fEr),e(k4,mEr),e(ce,gEr),e(ce,S4),e(S4,hFe),e(hFe,hEr),e(S4,pEr),e(S4,hU),e(hU,uEr),e(S4,_Er),e(ce,bEr),e(ce,R4),e(R4,pFe),e(pFe,vEr),e(R4,FEr),e(R4,pU),e(pU,TEr),e(R4,MEr),e(ce,EEr),e(ce,B4),e(B4,uFe),e(uFe,CEr),e(B4,wEr),e(B4,uU),e(uU,AEr),e(B4,yEr),e(ce,LEr),e(ce,P4),e(P4,_Fe),e(_Fe,xEr),e(P4,$Er),e(P4,_U),e(_U,kEr),e(P4,SEr),e(ce,REr),e(ce,I4),e(I4,bFe),e(bFe,BEr),e(I4,PEr),e(I4,bU),e(bU,IEr),e(I4,qEr),e(ce,NEr),e(ce,q4),e(q4,vFe),e(vFe,jEr),e(q4,DEr),e(q4,vU),e(vU,GEr),e(q4,OEr),e(ce,VEr),e(ce,N4),e(N4,FFe),e(FFe,XEr),e(N4,zEr),e(N4,FU),e(FU,QEr),e(N4,WEr),e(ce,HEr),e(ce,j4),e(j4,TFe),e(TFe,UEr),e(j4,JEr),e(j4,TU),e(TU,YEr),e(j4,KEr),e(ce,ZEr),e(ce,D4),e(D4,MFe),e(MFe,e5r),e(D4,o5r),e(D4,MU),e(MU,r5r),e(D4,t5r),e(ce,a5r),e(ce,G4),e(G4,EFe),e(EFe,n5r),e(G4,s5r),e(G4,EU),e(EU,l5r),e(G4,i5r),e(ce,d5r),e(ce,O4),e(O4,CFe),e(CFe,c5r),e(O4,f5r),e(O4,CU),e(CU,m5r),e(O4,g5r),e(Ir,h5r),M(V4,Ir,null),b(f,Aqe,_),b(f,Fc,_),e(Fc,X4),e(X4,wFe),M(OL,wFe,null),e(Fc,p5r),e(Fc,AFe),e(AFe,u5r),b(f,yqe,_),b(f,dr,_),M(VL,dr,null),e(dr,_5r),e(dr,Tc),e(Tc,b5r),e(Tc,wU),e(wU,v5r),e(Tc,F5r),e(Tc,AU),e(AU,T5r),e(Tc,M5r),e(dr,E5r),e(dr,XL),e(XL,C5r),e(XL,yFe),e(yFe,w5r),e(XL,A5r),e(dr,y5r),e(dr,qt),M(zL,qt,null),e(qt,L5r),e(qt,LFe),e(LFe,x5r),e(qt,$5r),e(qt,Mc),e(Mc,k5r),e(Mc,xFe),e(xFe,S5r),e(Mc,R5r),e(Mc,yU),e(yU,B5r),e(Mc,P5r),e(qt,I5r),M(z4,qt,null),e(dr,q5r),e(dr,qr),M(QL,qr,null),e(qr,N5r),e(qr,$Fe),e($Fe,j5r),e(qr,D5r),e(qr,mn),e(mn,G5r),e(mn,kFe),e(kFe,O5r),e(mn,V5r),e(mn,SFe),e(SFe,X5r),e(mn,z5r),e(mn,RFe),e(RFe,Q5r),e(mn,W5r),e(qr,H5r),e(qr,BFe),e(BFe,Q4),e(Q4,PFe),e(PFe,U5r),e(Q4,J5r),e(Q4,LU),e(LU,Y5r),e(Q4,K5r),e(qr,Z5r),M(W4,qr,null),b(f,Lqe,_),b(f,Ec,_),e(Ec,H4),e(H4,IFe),M(WL,IFe,null),e(Ec,eCr),e(Ec,qFe),e(qFe,oCr),b(f,xqe,_),b(f,cr,_),M(HL,cr,null),e(cr,rCr),e(cr,Cc),e(Cc,tCr),e(Cc,xU),e(xU,aCr),e(Cc,nCr),e(Cc,$U),e($U,sCr),e(Cc,lCr),e(cr,iCr),e(cr,UL),e(UL,dCr),e(UL,NFe),e(NFe,cCr),e(UL,fCr),e(cr,mCr),e(cr,Nt),M(JL,Nt,null),e(Nt,gCr),e(Nt,jFe),e(jFe,hCr),e(Nt,pCr),e(Nt,wc),e(wc,uCr),e(wc,DFe),e(DFe,_Cr),e(wc,bCr),e(wc,kU),e(kU,vCr),e(wc,FCr),e(Nt,TCr),M(U4,Nt,null),e(cr,MCr),e(cr,Nr),M(YL,Nr,null),e(Nr,ECr),e(Nr,GFe),e(GFe,CCr),e(Nr,wCr),e(Nr,gn),e(gn,ACr),e(gn,OFe),e(OFe,yCr),e(gn,LCr),e(gn,VFe),e(VFe,xCr),e(gn,$Cr),e(gn,XFe),e(XFe,kCr),e(gn,SCr),e(Nr,RCr),e(Nr,zFe),e(zFe,J4),e(J4,QFe),e(QFe,BCr),e(J4,PCr),e(J4,SU),e(SU,ICr),e(J4,qCr),e(Nr,NCr),M(Y4,Nr,null),b(f,$qe,_),b(f,Ac,_),e(Ac,K4),e(K4,WFe),M(KL,WFe,null),e(Ac,jCr),e(Ac,HFe),e(HFe,DCr),b(f,kqe,_),b(f,fr,_),M(ZL,fr,null),e(fr,GCr),e(fr,yc),e(yc,OCr),e(yc,RU),e(RU,VCr),e(yc,XCr),e(yc,BU),e(BU,zCr),e(yc,QCr),e(fr,WCr),e(fr,ex),e(ex,HCr),e(ex,UFe),e(UFe,UCr),e(ex,JCr),e(fr,YCr),e(fr,jt),M(ox,jt,null),e(jt,KCr),e(jt,JFe),e(JFe,ZCr),e(jt,e3r),e(jt,Lc),e(Lc,o3r),e(Lc,YFe),e(YFe,r3r),e(Lc,t3r),e(Lc,PU),e(PU,a3r),e(Lc,n3r),e(jt,s3r),M(Z4,jt,null),e(fr,l3r),e(fr,jr),M(rx,jr,null),e(jr,i3r),e(jr,KFe),e(KFe,d3r),e(jr,c3r),e(jr,hn),e(hn,f3r),e(hn,ZFe),e(ZFe,m3r),e(hn,g3r),e(hn,e6e),e(e6e,h3r),e(hn,p3r),e(hn,o6e),e(o6e,u3r),e(hn,_3r),e(jr,b3r),e(jr,re),e(re,eE),e(eE,r6e),e(r6e,v3r),e(eE,F3r),e(eE,IU),e(IU,T3r),e(eE,M3r),e(re,E3r),e(re,oE),e(oE,t6e),e(t6e,C3r),e(oE,w3r),e(oE,qU),e(qU,A3r),e(oE,y3r),e(re,L3r),e(re,rE),e(rE,a6e),e(a6e,x3r),e(rE,$3r),e(rE,NU),e(NU,k3r),e(rE,S3r),e(re,R3r),e(re,tE),e(tE,n6e),e(n6e,B3r),e(tE,P3r),e(tE,jU),e(jU,I3r),e(tE,q3r),e(re,N3r),e(re,aE),e(aE,s6e),e(s6e,j3r),e(aE,D3r),e(aE,DU),e(DU,G3r),e(aE,O3r),e(re,V3r),e(re,nE),e(nE,l6e),e(l6e,X3r),e(nE,z3r),e(nE,GU),e(GU,Q3r),e(nE,W3r),e(re,H3r),e(re,sE),e(sE,i6e),e(i6e,U3r),e(sE,J3r),e(sE,OU),e(OU,Y3r),e(sE,K3r),e(re,Z3r),e(re,lE),e(lE,d6e),e(d6e,ewr),e(lE,owr),e(lE,VU),e(VU,rwr),e(lE,twr),e(re,awr),e(re,iE),e(iE,c6e),e(c6e,nwr),e(iE,swr),e(iE,XU),e(XU,lwr),e(iE,iwr),e(re,dwr),e(re,dE),e(dE,f6e),e(f6e,cwr),e(dE,fwr),e(dE,zU),e(zU,mwr),e(dE,gwr),e(re,hwr),e(re,cE),e(cE,m6e),e(m6e,pwr),e(cE,uwr),e(cE,QU),e(QU,_wr),e(cE,bwr),e(re,vwr),e(re,fE),e(fE,g6e),e(g6e,Fwr),e(fE,Twr),e(fE,WU),e(WU,Mwr),e(fE,Ewr),e(re,Cwr),e(re,mE),e(mE,h6e),e(h6e,wwr),e(mE,Awr),e(mE,HU),e(HU,ywr),e(mE,Lwr),e(re,xwr),e(re,gE),e(gE,p6e),e(p6e,$wr),e(gE,kwr),e(gE,UU),e(UU,Swr),e(gE,Rwr),e(re,Bwr),e(re,hE),e(hE,u6e),e(u6e,Pwr),e(hE,Iwr),e(hE,JU),e(JU,qwr),e(hE,Nwr),e(re,jwr),e(re,pE),e(pE,_6e),e(_6e,Dwr),e(pE,Gwr),e(pE,YU),e(YU,Owr),e(pE,Vwr),e(re,Xwr),e(re,uE),e(uE,b6e),e(b6e,zwr),e(uE,Qwr),e(uE,KU),e(KU,Wwr),e(uE,Hwr),e(re,Uwr),e(re,_E),e(_E,v6e),e(v6e,Jwr),e(_E,Ywr),e(_E,ZU),e(ZU,Kwr),e(_E,Zwr),e(re,eAr),e(re,bE),e(bE,F6e),e(F6e,oAr),e(bE,rAr),e(bE,eJ),e(eJ,tAr),e(bE,aAr),e(re,nAr),e(re,vE),e(vE,T6e),e(T6e,sAr),e(vE,lAr),e(vE,oJ),e(oJ,iAr),e(vE,dAr),e(re,cAr),e(re,FE),e(FE,M6e),e(M6e,fAr),e(FE,mAr),e(FE,rJ),e(rJ,gAr),e(FE,hAr),e(re,pAr),e(re,TE),e(TE,E6e),e(E6e,uAr),e(TE,_Ar),e(TE,tJ),e(tJ,bAr),e(TE,vAr),e(re,FAr),e(re,ME),e(ME,C6e),e(C6e,TAr),e(ME,MAr),e(ME,aJ),e(aJ,EAr),e(ME,CAr),e(re,wAr),e(re,EE),e(EE,w6e),e(w6e,AAr),e(EE,yAr),e(EE,nJ),e(nJ,LAr),e(EE,xAr),e(re,$Ar),e(re,CE),e(CE,A6e),e(A6e,kAr),e(CE,SAr),e(CE,sJ),e(sJ,RAr),e(CE,BAr),e(jr,PAr),M(wE,jr,null),b(f,Sqe,_),b(f,xc,_),e(xc,AE),e(AE,y6e),M(tx,y6e,null),e(xc,IAr),e(xc,L6e),e(L6e,qAr),b(f,Rqe,_),b(f,mr,_),M(ax,mr,null),e(mr,NAr),e(mr,$c),e($c,jAr),e($c,lJ),e(lJ,DAr),e($c,GAr),e($c,iJ),e(iJ,OAr),e($c,VAr),e(mr,XAr),e(mr,nx),e(nx,zAr),e(nx,x6e),e(x6e,QAr),e(nx,WAr),e(mr,HAr),e(mr,Dt),M(sx,Dt,null),e(Dt,UAr),e(Dt,$6e),e($6e,JAr),e(Dt,YAr),e(Dt,kc),e(kc,KAr),e(kc,k6e),e(k6e,ZAr),e(kc,e0r),e(kc,dJ),e(dJ,o0r),e(kc,r0r),e(Dt,t0r),M(yE,Dt,null),e(mr,a0r),e(mr,Dr),M(lx,Dr,null),e(Dr,n0r),e(Dr,S6e),e(S6e,s0r),e(Dr,l0r),e(Dr,pn),e(pn,i0r),e(pn,R6e),e(R6e,d0r),e(pn,c0r),e(pn,B6e),e(B6e,f0r),e(pn,m0r),e(pn,P6e),e(P6e,g0r),e(pn,h0r),e(Dr,p0r),e(Dr,ke),e(ke,LE),e(LE,I6e),e(I6e,u0r),e(LE,_0r),e(LE,cJ),e(cJ,b0r),e(LE,v0r),e(ke,F0r),e(ke,xE),e(xE,q6e),e(q6e,T0r),e(xE,M0r),e(xE,fJ),e(fJ,E0r),e(xE,C0r),e(ke,w0r),e(ke,$E),e($E,N6e),e(N6e,A0r),e($E,y0r),e($E,mJ),e(mJ,L0r),e($E,x0r),e(ke,$0r),e(ke,kE),e(kE,j6e),e(j6e,k0r),e(kE,S0r),e(kE,gJ),e(gJ,R0r),e(kE,B0r),e(ke,P0r),e(ke,SE),e(SE,D6e),e(D6e,I0r),e(SE,q0r),e(SE,hJ),e(hJ,N0r),e(SE,j0r),e(ke,D0r),e(ke,RE),e(RE,G6e),e(G6e,G0r),e(RE,O0r),e(RE,pJ),e(pJ,V0r),e(RE,X0r),e(ke,z0r),e(ke,BE),e(BE,O6e),e(O6e,Q0r),e(BE,W0r),e(BE,uJ),e(uJ,H0r),e(BE,U0r),e(ke,J0r),e(ke,PE),e(PE,V6e),e(V6e,Y0r),e(PE,K0r),e(PE,_J),e(_J,Z0r),e(PE,eyr),e(ke,oyr),e(ke,IE),e(IE,X6e),e(X6e,ryr),e(IE,tyr),e(IE,bJ),e(bJ,ayr),e(IE,nyr),e(Dr,syr),M(qE,Dr,null),b(f,Bqe,_),b(f,Sc,_),e(Sc,NE),e(NE,z6e),M(ix,z6e,null),e(Sc,lyr),e(Sc,Q6e),e(Q6e,iyr),b(f,Pqe,_),b(f,gr,_),M(dx,gr,null),e(gr,dyr),e(gr,Rc),e(Rc,cyr),e(Rc,vJ),e(vJ,fyr),e(Rc,myr),e(Rc,FJ),e(FJ,gyr),e(Rc,hyr),e(gr,pyr),e(gr,cx),e(cx,uyr),e(cx,W6e),e(W6e,_yr),e(cx,byr),e(gr,vyr),e(gr,Gt),M(fx,Gt,null),e(Gt,Fyr),e(Gt,H6e),e(H6e,Tyr),e(Gt,Myr),e(Gt,Bc),e(Bc,Eyr),e(Bc,U6e),e(U6e,Cyr),e(Bc,wyr),e(Bc,TJ),e(TJ,Ayr),e(Bc,yyr),e(Gt,Lyr),M(jE,Gt,null),e(gr,xyr),e(gr,Gr),M(mx,Gr,null),e(Gr,$yr),e(Gr,J6e),e(J6e,kyr),e(Gr,Syr),e(Gr,un),e(un,Ryr),e(un,Y6e),e(Y6e,Byr),e(un,Pyr),e(un,K6e),e(K6e,Iyr),e(un,qyr),e(un,Z6e),e(Z6e,Nyr),e(un,jyr),e(Gr,Dyr),e(Gr,Me),e(Me,DE),e(DE,eTe),e(eTe,Gyr),e(DE,Oyr),e(DE,MJ),e(MJ,Vyr),e(DE,Xyr),e(Me,zyr),e(Me,GE),e(GE,oTe),e(oTe,Qyr),e(GE,Wyr),e(GE,EJ),e(EJ,Hyr),e(GE,Uyr),e(Me,Jyr),e(Me,OE),e(OE,rTe),e(rTe,Yyr),e(OE,Kyr),e(OE,CJ),e(CJ,Zyr),e(OE,eLr),e(Me,oLr),e(Me,VE),e(VE,tTe),e(tTe,rLr),e(VE,tLr),e(VE,wJ),e(wJ,aLr),e(VE,nLr),e(Me,sLr),e(Me,XE),e(XE,aTe),e(aTe,lLr),e(XE,iLr),e(XE,AJ),e(AJ,dLr),e(XE,cLr),e(Me,fLr),e(Me,zE),e(zE,nTe),e(nTe,mLr),e(zE,gLr),e(zE,yJ),e(yJ,hLr),e(zE,pLr),e(Me,uLr),e(Me,QE),e(QE,sTe),e(sTe,_Lr),e(QE,bLr),e(QE,LJ),e(LJ,vLr),e(QE,FLr),e(Me,TLr),e(Me,WE),e(WE,lTe),e(lTe,MLr),e(WE,ELr),e(WE,xJ),e(xJ,CLr),e(WE,wLr),e(Me,ALr),e(Me,HE),e(HE,iTe),e(iTe,yLr),e(HE,LLr),e(HE,$J),e($J,xLr),e(HE,$Lr),e(Me,kLr),e(Me,UE),e(UE,dTe),e(dTe,SLr),e(UE,RLr),e(UE,kJ),e(kJ,BLr),e(UE,PLr),e(Me,ILr),e(Me,JE),e(JE,cTe),e(cTe,qLr),e(JE,NLr),e(JE,SJ),e(SJ,jLr),e(JE,DLr),e(Me,GLr),e(Me,YE),e(YE,fTe),e(fTe,OLr),e(YE,VLr),e(YE,RJ),e(RJ,XLr),e(YE,zLr),e(Gr,QLr),M(KE,Gr,null),b(f,Iqe,_),b(f,Pc,_),e(Pc,ZE),e(ZE,mTe),M(gx,mTe,null),e(Pc,WLr),e(Pc,gTe),e(gTe,HLr),b(f,qqe,_),b(f,hr,_),M(hx,hr,null),e(hr,ULr),e(hr,Ic),e(Ic,JLr),e(Ic,BJ),e(BJ,YLr),e(Ic,KLr),e(Ic,PJ),e(PJ,ZLr),e(Ic,exr),e(hr,oxr),e(hr,px),e(px,rxr),e(px,hTe),e(hTe,txr),e(px,axr),e(hr,nxr),e(hr,Ot),M(ux,Ot,null),e(Ot,sxr),e(Ot,pTe),e(pTe,lxr),e(Ot,ixr),e(Ot,qc),e(qc,dxr),e(qc,uTe),e(uTe,cxr),e(qc,fxr),e(qc,IJ),e(IJ,mxr),e(qc,gxr),e(Ot,hxr),M(e5,Ot,null),e(hr,pxr),e(hr,Or),M(_x,Or,null),e(Or,uxr),e(Or,_Te),e(_Te,_xr),e(Or,bxr),e(Or,_n),e(_n,vxr),e(_n,bTe),e(bTe,Fxr),e(_n,Txr),e(_n,vTe),e(vTe,Mxr),e(_n,Exr),e(_n,FTe),e(FTe,Cxr),e(_n,wxr),e(Or,Axr),e(Or,Le),e(Le,o5),e(o5,TTe),e(TTe,yxr),e(o5,Lxr),e(o5,qJ),e(qJ,xxr),e(o5,$xr),e(Le,kxr),e(Le,r5),e(r5,MTe),e(MTe,Sxr),e(r5,Rxr),e(r5,NJ),e(NJ,Bxr),e(r5,Pxr),e(Le,Ixr),e(Le,t5),e(t5,ETe),e(ETe,qxr),e(t5,Nxr),e(t5,jJ),e(jJ,jxr),e(t5,Dxr),e(Le,Gxr),e(Le,a5),e(a5,CTe),e(CTe,Oxr),e(a5,Vxr),e(a5,DJ),e(DJ,Xxr),e(a5,zxr),e(Le,Qxr),e(Le,n5),e(n5,wTe),e(wTe,Wxr),e(n5,Hxr),e(n5,GJ),e(GJ,Uxr),e(n5,Jxr),e(Le,Yxr),e(Le,s5),e(s5,ATe),e(ATe,Kxr),e(s5,Zxr),e(s5,OJ),e(OJ,e7r),e(s5,o7r),e(Le,r7r),e(Le,l5),e(l5,yTe),e(yTe,t7r),e(l5,a7r),e(l5,VJ),e(VJ,n7r),e(l5,s7r),e(Le,l7r),e(Le,i5),e(i5,LTe),e(LTe,i7r),e(i5,d7r),e(i5,XJ),e(XJ,c7r),e(i5,f7r),e(Le,m7r),e(Le,d5),e(d5,xTe),e(xTe,g7r),e(d5,h7r),e(d5,zJ),e(zJ,p7r),e(d5,u7r),e(Le,_7r),e(Le,c5),e(c5,$Te),e($Te,b7r),e(c5,v7r),e(c5,QJ),e(QJ,F7r),e(c5,T7r),e(Or,M7r),M(f5,Or,null),b(f,Nqe,_),b(f,Nc,_),e(Nc,m5),e(m5,kTe),M(bx,kTe,null),e(Nc,E7r),e(Nc,STe),e(STe,C7r),b(f,jqe,_),b(f,pr,_),M(vx,pr,null),e(pr,w7r),e(pr,jc),e(jc,A7r),e(jc,WJ),e(WJ,y7r),e(jc,L7r),e(jc,HJ),e(HJ,x7r),e(jc,$7r),e(pr,k7r),e(pr,Fx),e(Fx,S7r),e(Fx,RTe),e(RTe,R7r),e(Fx,B7r),e(pr,P7r),e(pr,Vt),M(Tx,Vt,null),e(Vt,I7r),e(Vt,BTe),e(BTe,q7r),e(Vt,N7r),e(Vt,Dc),e(Dc,j7r),e(Dc,PTe),e(PTe,D7r),e(Dc,G7r),e(Dc,UJ),e(UJ,O7r),e(Dc,V7r),e(Vt,X7r),M(g5,Vt,null),e(pr,z7r),e(pr,Vr),M(Mx,Vr,null),e(Vr,Q7r),e(Vr,ITe),e(ITe,W7r),e(Vr,H7r),e(Vr,bn),e(bn,U7r),e(bn,qTe),e(qTe,J7r),e(bn,Y7r),e(bn,NTe),e(NTe,K7r),e(bn,Z7r),e(bn,jTe),e(jTe,e$r),e(bn,o$r),e(Vr,r$r),e(Vr,Se),e(Se,h5),e(h5,DTe),e(DTe,t$r),e(h5,a$r),e(h5,JJ),e(JJ,n$r),e(h5,s$r),e(Se,l$r),e(Se,p5),e(p5,GTe),e(GTe,i$r),e(p5,d$r),e(p5,YJ),e(YJ,c$r),e(p5,f$r),e(Se,m$r),e(Se,u5),e(u5,OTe),e(OTe,g$r),e(u5,h$r),e(u5,KJ),e(KJ,p$r),e(u5,u$r),e(Se,_$r),e(Se,_5),e(_5,VTe),e(VTe,b$r),e(_5,v$r),e(_5,ZJ),e(ZJ,F$r),e(_5,T$r),e(Se,M$r),e(Se,b5),e(b5,XTe),e(XTe,E$r),e(b5,C$r),e(b5,eY),e(eY,w$r),e(b5,A$r),e(Se,y$r),e(Se,v5),e(v5,zTe),e(zTe,L$r),e(v5,x$r),e(v5,oY),e(oY,$$r),e(v5,k$r),e(Se,S$r),e(Se,F5),e(F5,QTe),e(QTe,R$r),e(F5,B$r),e(F5,rY),e(rY,P$r),e(F5,I$r),e(Se,q$r),e(Se,T5),e(T5,WTe),e(WTe,N$r),e(T5,j$r),e(T5,tY),e(tY,D$r),e(T5,G$r),e(Se,O$r),e(Se,M5),e(M5,HTe),e(HTe,V$r),e(M5,X$r),e(M5,aY),e(aY,z$r),e(M5,Q$r),e(Vr,W$r),M(E5,Vr,null),b(f,Dqe,_),b(f,Gc,_),e(Gc,C5),e(C5,UTe),M(Ex,UTe,null),e(Gc,H$r),e(Gc,JTe),e(JTe,U$r),b(f,Gqe,_),b(f,ur,_),M(Cx,ur,null),e(ur,J$r),e(ur,Oc),e(Oc,Y$r),e(Oc,nY),e(nY,K$r),e(Oc,Z$r),e(Oc,sY),e(sY,ekr),e(Oc,okr),e(ur,rkr),e(ur,wx),e(wx,tkr),e(wx,YTe),e(YTe,akr),e(wx,nkr),e(ur,skr),e(ur,Xt),M(Ax,Xt,null),e(Xt,lkr),e(Xt,KTe),e(KTe,ikr),e(Xt,dkr),e(Xt,Vc),e(Vc,ckr),e(Vc,ZTe),e(ZTe,fkr),e(Vc,mkr),e(Vc,lY),e(lY,gkr),e(Vc,hkr),e(Xt,pkr),M(w5,Xt,null),e(ur,ukr),e(ur,Xr),M(yx,Xr,null),e(Xr,_kr),e(Xr,e9e),e(e9e,bkr),e(Xr,vkr),e(Xr,vn),e(vn,Fkr),e(vn,o9e),e(o9e,Tkr),e(vn,Mkr),e(vn,r9e),e(r9e,Ekr),e(vn,Ckr),e(vn,t9e),e(t9e,wkr),e(vn,Akr),e(Xr,ykr),e(Xr,xe),e(xe,A5),e(A5,a9e),e(a9e,Lkr),e(A5,xkr),e(A5,iY),e(iY,$kr),e(A5,kkr),e(xe,Skr),e(xe,y5),e(y5,n9e),e(n9e,Rkr),e(y5,Bkr),e(y5,dY),e(dY,Pkr),e(y5,Ikr),e(xe,qkr),e(xe,L5),e(L5,s9e),e(s9e,Nkr),e(L5,jkr),e(L5,cY),e(cY,Dkr),e(L5,Gkr),e(xe,Okr),e(xe,x5),e(x5,l9e),e(l9e,Vkr),e(x5,Xkr),e(x5,fY),e(fY,zkr),e(x5,Qkr),e(xe,Wkr),e(xe,$5),e($5,i9e),e(i9e,Hkr),e($5,Ukr),e($5,mY),e(mY,Jkr),e($5,Ykr),e(xe,Kkr),e(xe,k5),e(k5,d9e),e(d9e,Zkr),e(k5,eSr),e(k5,gY),e(gY,oSr),e(k5,rSr),e(xe,tSr),e(xe,S5),e(S5,c9e),e(c9e,aSr),e(S5,nSr),e(S5,hY),e(hY,sSr),e(S5,lSr),e(xe,iSr),e(xe,R5),e(R5,f9e),e(f9e,dSr),e(R5,cSr),e(R5,pY),e(pY,fSr),e(R5,mSr),e(xe,gSr),e(xe,B5),e(B5,m9e),e(m9e,hSr),e(B5,pSr),e(B5,uY),e(uY,uSr),e(B5,_Sr),e(xe,bSr),e(xe,P5),e(P5,g9e),e(g9e,vSr),e(P5,FSr),e(P5,_Y),e(_Y,TSr),e(P5,MSr),e(Xr,ESr),M(I5,Xr,null),b(f,Oqe,_),b(f,Xc,_),e(Xc,q5),e(q5,h9e),M(Lx,h9e,null),e(Xc,CSr),e(Xc,p9e),e(p9e,wSr),b(f,Vqe,_),b(f,_r,_),M(xx,_r,null),e(_r,ASr),e(_r,zc),e(zc,ySr),e(zc,bY),e(bY,LSr),e(zc,xSr),e(zc,vY),e(vY,$Sr),e(zc,kSr),e(_r,SSr),e(_r,$x),e($x,RSr),e($x,u9e),e(u9e,BSr),e($x,PSr),e(_r,ISr),e(_r,zt),M(kx,zt,null),e(zt,qSr),e(zt,_9e),e(_9e,NSr),e(zt,jSr),e(zt,Qc),e(Qc,DSr),e(Qc,b9e),e(b9e,GSr),e(Qc,OSr),e(Qc,FY),e(FY,VSr),e(Qc,XSr),e(zt,zSr),M(N5,zt,null),e(_r,QSr),e(_r,zr),M(Sx,zr,null),e(zr,WSr),e(zr,v9e),e(v9e,HSr),e(zr,USr),e(zr,Fn),e(Fn,JSr),e(Fn,F9e),e(F9e,YSr),e(Fn,KSr),e(Fn,T9e),e(T9e,ZSr),e(Fn,eRr),e(Fn,M9e),e(M9e,oRr),e(Fn,rRr),e(zr,tRr),e(zr,$e),e($e,j5),e(j5,E9e),e(E9e,aRr),e(j5,nRr),e(j5,TY),e(TY,sRr),e(j5,lRr),e($e,iRr),e($e,D5),e(D5,C9e),e(C9e,dRr),e(D5,cRr),e(D5,MY),e(MY,fRr),e(D5,mRr),e($e,gRr),e($e,G5),e(G5,w9e),e(w9e,hRr),e(G5,pRr),e(G5,EY),e(EY,uRr),e(G5,_Rr),e($e,bRr),e($e,O5),e(O5,A9e),e(A9e,vRr),e(O5,FRr),e(O5,CY),e(CY,TRr),e(O5,MRr),e($e,ERr),e($e,V5),e(V5,y9e),e(y9e,CRr),e(V5,wRr),e(V5,wY),e(wY,ARr),e(V5,yRr),e($e,LRr),e($e,X5),e(X5,L9e),e(L9e,xRr),e(X5,$Rr),e(X5,AY),e(AY,kRr),e(X5,SRr),e($e,RRr),e($e,z5),e(z5,x9e),e(x9e,BRr),e(z5,PRr),e(z5,yY),e(yY,IRr),e(z5,qRr),e($e,NRr),e($e,Q5),e(Q5,$9e),e($9e,jRr),e(Q5,DRr),e(Q5,LY),e(LY,GRr),e(Q5,ORr),e($e,VRr),e($e,W5),e(W5,k9e),e(k9e,XRr),e(W5,zRr),e(W5,xY),e(xY,QRr),e(W5,WRr),e($e,HRr),e($e,H5),e(H5,S9e),e(S9e,URr),e(H5,JRr),e(H5,$Y),e($Y,YRr),e(H5,KRr),e(zr,ZRr),M(U5,zr,null),b(f,Xqe,_),b(f,Wc,_),e(Wc,J5),e(J5,R9e),M(Rx,R9e,null),e(Wc,eBr),e(Wc,B9e),e(B9e,oBr),b(f,zqe,_),b(f,br,_),M(Bx,br,null),e(br,rBr),e(br,Hc),e(Hc,tBr),e(Hc,kY),e(kY,aBr),e(Hc,nBr),e(Hc,SY),e(SY,sBr),e(Hc,lBr),e(br,iBr),e(br,Px),e(Px,dBr),e(Px,P9e),e(P9e,cBr),e(Px,fBr),e(br,mBr),e(br,Qt),M(Ix,Qt,null),e(Qt,gBr),e(Qt,I9e),e(I9e,hBr),e(Qt,pBr),e(Qt,Uc),e(Uc,uBr),e(Uc,q9e),e(q9e,_Br),e(Uc,bBr),e(Uc,RY),e(RY,vBr),e(Uc,FBr),e(Qt,TBr),M(Y5,Qt,null),e(br,MBr),e(br,Qr),M(qx,Qr,null),e(Qr,EBr),e(Qr,N9e),e(N9e,CBr),e(Qr,wBr),e(Qr,Tn),e(Tn,ABr),e(Tn,j9e),e(j9e,yBr),e(Tn,LBr),e(Tn,D9e),e(D9e,xBr),e(Tn,$Br),e(Tn,G9e),e(G9e,kBr),e(Tn,SBr),e(Qr,RBr),e(Qr,De),e(De,K5),e(K5,O9e),e(O9e,BBr),e(K5,PBr),e(K5,BY),e(BY,IBr),e(K5,qBr),e(De,NBr),e(De,Z5),e(Z5,V9e),e(V9e,jBr),e(Z5,DBr),e(Z5,PY),e(PY,GBr),e(Z5,OBr),e(De,VBr),e(De,eC),e(eC,X9e),e(X9e,XBr),e(eC,zBr),e(eC,IY),e(IY,QBr),e(eC,WBr),e(De,HBr),e(De,oC),e(oC,z9e),e(z9e,UBr),e(oC,JBr),e(oC,qY),e(qY,YBr),e(oC,KBr),e(De,ZBr),e(De,rC),e(rC,Q9e),e(Q9e,ePr),e(rC,oPr),e(rC,NY),e(NY,rPr),e(rC,tPr),e(De,aPr),e(De,tC),e(tC,W9e),e(W9e,nPr),e(tC,sPr),e(tC,jY),e(jY,lPr),e(tC,iPr),e(De,dPr),e(De,aC),e(aC,H9e),e(H9e,cPr),e(aC,fPr),e(aC,DY),e(DY,mPr),e(aC,gPr),e(De,hPr),e(De,nC),e(nC,U9e),e(U9e,pPr),e(nC,uPr),e(nC,GY),e(GY,_Pr),e(nC,bPr),e(Qr,vPr),M(sC,Qr,null),b(f,Qqe,_),b(f,Jc,_),e(Jc,lC),e(lC,J9e),M(Nx,J9e,null),e(Jc,FPr),e(Jc,Y9e),e(Y9e,TPr),b(f,Wqe,_),b(f,vr,_),M(jx,vr,null),e(vr,MPr),e(vr,Yc),e(Yc,EPr),e(Yc,OY),e(OY,CPr),e(Yc,wPr),e(Yc,VY),e(VY,APr),e(Yc,yPr),e(vr,LPr),e(vr,Dx),e(Dx,xPr),e(Dx,K9e),e(K9e,$Pr),e(Dx,kPr),e(vr,SPr),e(vr,Wt),M(Gx,Wt,null),e(Wt,RPr),e(Wt,Z9e),e(Z9e,BPr),e(Wt,PPr),e(Wt,Kc),e(Kc,IPr),e(Kc,eMe),e(eMe,qPr),e(Kc,NPr),e(Kc,XY),e(XY,jPr),e(Kc,DPr),e(Wt,GPr),M(iC,Wt,null),e(vr,OPr),e(vr,Wr),M(Ox,Wr,null),e(Wr,VPr),e(Wr,oMe),e(oMe,XPr),e(Wr,zPr),e(Wr,Mn),e(Mn,QPr),e(Mn,rMe),e(rMe,WPr),e(Mn,HPr),e(Mn,tMe),e(tMe,UPr),e(Mn,JPr),e(Mn,aMe),e(aMe,YPr),e(Mn,KPr),e(Wr,ZPr),e(Wr,Ge),e(Ge,dC),e(dC,nMe),e(nMe,eIr),e(dC,oIr),e(dC,zY),e(zY,rIr),e(dC,tIr),e(Ge,aIr),e(Ge,cC),e(cC,sMe),e(sMe,nIr),e(cC,sIr),e(cC,QY),e(QY,lIr),e(cC,iIr),e(Ge,dIr),e(Ge,fC),e(fC,lMe),e(lMe,cIr),e(fC,fIr),e(fC,WY),e(WY,mIr),e(fC,gIr),e(Ge,hIr),e(Ge,mC),e(mC,iMe),e(iMe,pIr),e(mC,uIr),e(mC,HY),e(HY,_Ir),e(mC,bIr),e(Ge,vIr),e(Ge,gC),e(gC,dMe),e(dMe,FIr),e(gC,TIr),e(gC,UY),e(UY,MIr),e(gC,EIr),e(Ge,CIr),e(Ge,hC),e(hC,cMe),e(cMe,wIr),e(hC,AIr),e(hC,JY),e(JY,yIr),e(hC,LIr),e(Ge,xIr),e(Ge,pC),e(pC,fMe),e(fMe,$Ir),e(pC,kIr),e(pC,YY),e(YY,SIr),e(pC,RIr),e(Ge,BIr),e(Ge,uC),e(uC,mMe),e(mMe,PIr),e(uC,IIr),e(uC,KY),e(KY,qIr),e(uC,NIr),e(Wr,jIr),M(_C,Wr,null),b(f,Hqe,_),b(f,Zc,_),e(Zc,bC),e(bC,gMe),M(Vx,gMe,null),e(Zc,DIr),e(Zc,hMe),e(hMe,GIr),b(f,Uqe,_),b(f,Fr,_),M(Xx,Fr,null),e(Fr,OIr),e(Fr,ef),e(ef,VIr),e(ef,ZY),e(ZY,XIr),e(ef,zIr),e(ef,eK),e(eK,QIr),e(ef,WIr),e(Fr,HIr),e(Fr,zx),e(zx,UIr),e(zx,pMe),e(pMe,JIr),e(zx,YIr),e(Fr,KIr),e(Fr,Ht),M(Qx,Ht,null),e(Ht,ZIr),e(Ht,uMe),e(uMe,eqr),e(Ht,oqr),e(Ht,of),e(of,rqr),e(of,_Me),e(_Me,tqr),e(of,aqr),e(of,oK),e(oK,nqr),e(of,sqr),e(Ht,lqr),M(vC,Ht,null),e(Fr,iqr),e(Fr,Hr),M(Wx,Hr,null),e(Hr,dqr),e(Hr,bMe),e(bMe,cqr),e(Hr,fqr),e(Hr,En),e(En,mqr),e(En,vMe),e(vMe,gqr),e(En,hqr),e(En,FMe),e(FMe,pqr),e(En,uqr),e(En,TMe),e(TMe,_qr),e(En,bqr),e(Hr,vqr),e(Hr,MMe),e(MMe,FC),e(FC,EMe),e(EMe,Fqr),e(FC,Tqr),e(FC,rK),e(rK,Mqr),e(FC,Eqr),e(Hr,Cqr),M(TC,Hr,null),b(f,Jqe,_),b(f,rf,_),e(rf,MC),e(MC,CMe),M(Hx,CMe,null),e(rf,wqr),e(rf,wMe),e(wMe,Aqr),b(f,Yqe,_),b(f,Tr,_),M(Ux,Tr,null),e(Tr,yqr),e(Tr,tf),e(tf,Lqr),e(tf,tK),e(tK,xqr),e(tf,$qr),e(tf,aK),e(aK,kqr),e(tf,Sqr),e(Tr,Rqr),e(Tr,Jx),e(Jx,Bqr),e(Jx,AMe),e(AMe,Pqr),e(Jx,Iqr),e(Tr,qqr),e(Tr,Ut),M(Yx,Ut,null),e(Ut,Nqr),e(Ut,yMe),e(yMe,jqr),e(Ut,Dqr),e(Ut,af),e(af,Gqr),e(af,LMe),e(LMe,Oqr),e(af,Vqr),e(af,nK),e(nK,Xqr),e(af,zqr),e(Ut,Qqr),M(EC,Ut,null),e(Tr,Wqr),e(Tr,Ur),M(Kx,Ur,null),e(Ur,Hqr),e(Ur,xMe),e(xMe,Uqr),e(Ur,Jqr),e(Ur,Cn),e(Cn,Yqr),e(Cn,$Me),e($Me,Kqr),e(Cn,Zqr),e(Cn,kMe),e(kMe,eNr),e(Cn,oNr),e(Cn,SMe),e(SMe,rNr),e(Cn,tNr),e(Ur,aNr),e(Ur,Zx),e(Zx,CC),e(CC,RMe),e(RMe,nNr),e(CC,sNr),e(CC,sK),e(sK,lNr),e(CC,iNr),e(Zx,dNr),e(Zx,wC),e(wC,BMe),e(BMe,cNr),e(wC,fNr),e(wC,lK),e(lK,mNr),e(wC,gNr),e(Ur,hNr),M(AC,Ur,null),b(f,Kqe,_),b(f,nf,_),e(nf,yC),e(yC,PMe),M(e7,PMe,null),e(nf,pNr),e(nf,IMe),e(IMe,uNr),b(f,Zqe,_),b(f,Mr,_),M(o7,Mr,null),e(Mr,_Nr),e(Mr,sf),e(sf,bNr),e(sf,iK),e(iK,vNr),e(sf,FNr),e(sf,dK),e(dK,TNr),e(sf,MNr),e(Mr,ENr),e(Mr,r7),e(r7,CNr),e(r7,qMe),e(qMe,wNr),e(r7,ANr),e(Mr,yNr),e(Mr,Jt),M(t7,Jt,null),e(Jt,LNr),e(Jt,NMe),e(NMe,xNr),e(Jt,$Nr),e(Jt,lf),e(lf,kNr),e(lf,jMe),e(jMe,SNr),e(lf,RNr),e(lf,cK),e(cK,BNr),e(lf,PNr),e(Jt,INr),M(LC,Jt,null),e(Mr,qNr),e(Mr,Jr),M(a7,Jr,null),e(Jr,NNr),e(Jr,DMe),e(DMe,jNr),e(Jr,DNr),e(Jr,wn),e(wn,GNr),e(wn,GMe),e(GMe,ONr),e(wn,VNr),e(wn,OMe),e(OMe,XNr),e(wn,zNr),e(wn,VMe),e(VMe,QNr),e(wn,WNr),e(Jr,HNr),e(Jr,XMe),e(XMe,xC),e(xC,zMe),e(zMe,UNr),e(xC,JNr),e(xC,fK),e(fK,YNr),e(xC,KNr),e(Jr,ZNr),M($C,Jr,null),eNe=!0},p(f,[_]){const n7={};_&2&&(n7.$$scope={dirty:_,ctx:f}),_f.$set(n7);const QMe={};_&2&&(QMe.$$scope={dirty:_,ctx:f}),ug.$set(QMe);const WMe={};_&2&&(WMe.$$scope={dirty:_,ctx:f}),Ug.$set(WMe);const HMe={};_&2&&(HMe.$$scope={dirty:_,ctx:f}),Eh.$set(HMe);const s7={};_&2&&(s7.$$scope={dirty:_,ctx:f}),Ch.$set(s7);const UMe={};_&2&&(UMe.$$scope={dirty:_,ctx:f}),Oh.$set(UMe);const An={};_&2&&(An.$$scope={dirty:_,ctx:f}),Vh.$set(An);const JMe={};_&2&&(JMe.$$scope={dirty:_,ctx:f}),Qh.$set(JMe);const YMe={};_&2&&(YMe.$$scope={dirty:_,ctx:f}),Iu.$set(YMe);const KMe={};_&2&&(KMe.$$scope={dirty:_,ctx:f}),Nu.$set(KMe);const l7={};_&2&&(l7.$$scope={dirty:_,ctx:f}),A_.$set(l7);const ZMe={};_&2&&(ZMe.$$scope={dirty:_,ctx:f}),L_.$set(ZMe);const i7={};_&2&&(i7.$$scope={dirty:_,ctx:f}),m1.$set(i7);const e4e={};_&2&&(e4e.$$scope={dirty:_,ctx:f}),h1.$set(e4e);const d7={};_&2&&(d7.$$scope={dirty:_,ctx:f}),Y1.$set(d7);const o4e={};_&2&&(o4e.$$scope={dirty:_,ctx:f}),Z1.$set(o4e);const r4e={};_&2&&(r4e.$$scope={dirty:_,ctx:f}),b8.$set(r4e);const t4e={};_&2&&(t4e.$$scope={dirty:_,ctx:f}),F8.$set(t4e);const df={};_&2&&(df.$$scope={dirty:_,ctx:f}),pb.$set(df);const a4e={};_&2&&(a4e.$$scope={dirty:_,ctx:f}),_b.$set(a4e);const n4e={};_&2&&(n4e.$$scope={dirty:_,ctx:f}),Hb.$set(n4e);const s4e={};_&2&&(s4e.$$scope={dirty:_,ctx:f}),Jb.$set(s4e);const c7={};_&2&&(c7.$$scope={dirty:_,ctx:f}),t2.$set(c7);const l4e={};_&2&&(l4e.$$scope={dirty:_,ctx:f}),n2.$set(l4e);const i4e={};_&2&&(i4e.$$scope={dirty:_,ctx:f}),D2.$set(i4e);const d4e={};_&2&&(d4e.$$scope={dirty:_,ctx:f}),O2.$set(d4e);const Kr={};_&2&&(Kr.$$scope={dirty:_,ctx:f}),xv.$set(Kr);const f7={};_&2&&(f7.$$scope={dirty:_,ctx:f}),kv.$set(f7);const c4e={};_&2&&(c4e.$$scope={dirty:_,ctx:f}),Bv.$set(c4e);const m7={};_&2&&(m7.$$scope={dirty:_,ctx:f}),Iv.$set(m7);const f4e={};_&2&&(f4e.$$scope={dirty:_,ctx:f}),Uv.$set(f4e);const Zr={};_&2&&(Zr.$$scope={dirty:_,ctx:f}),Yv.$set(Zr);const m4e={};_&2&&(m4e.$$scope={dirty:_,ctx:f}),eF.$set(m4e);const cf={};_&2&&(cf.$$scope={dirty:_,ctx:f}),rF.$set(cf);const g4e={};_&2&&(g4e.$$scope={dirty:_,ctx:f}),mF.$set(g4e);const h4e={};_&2&&(h4e.$$scope={dirty:_,ctx:f}),hF.$set(h4e);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),FF.$set(y);const kC={};_&2&&(kC.$$scope={dirty:_,ctx:f}),MF.$set(kC);const p4e={};_&2&&(p4e.$$scope={dirty:_,ctx:f}),SF.$set(p4e);const u4e={};_&2&&(u4e.$$scope={dirty:_,ctx:f}),BF.$set(u4e);const SC={};_&2&&(SC.$$scope={dirty:_,ctx:f}),NF.$set(SC);const _4e={};_&2&&(_4e.$$scope={dirty:_,ctx:f}),DF.$set(_4e);const b4e={};_&2&&(b4e.$$scope={dirty:_,ctx:f}),QF.$set(b4e);const RC={};_&2&&(RC.$$scope={dirty:_,ctx:f}),HF.$set(RC);const v4e={};_&2&&(v4e.$$scope={dirty:_,ctx:f}),ZF.$set(v4e);const F4e={};_&2&&(F4e.$$scope={dirty:_,ctx:f}),o6.$set(F4e);const BC={};_&2&&(BC.$$scope={dirty:_,ctx:f}),n6.$set(BC);const T4e={};_&2&&(T4e.$$scope={dirty:_,ctx:f}),l6.$set(T4e);const M4e={};_&2&&(M4e.$$scope={dirty:_,ctx:f}),c6.$set(M4e);const PC={};_&2&&(PC.$$scope={dirty:_,ctx:f}),m6.$set(PC);const E4e={};_&2&&(E4e.$$scope={dirty:_,ctx:f}),b6.$set(E4e);const C4e={};_&2&&(C4e.$$scope={dirty:_,ctx:f}),F6.$set(C4e);const IC={};_&2&&(IC.$$scope={dirty:_,ctx:f}),E6.$set(IC);const w4e={};_&2&&(w4e.$$scope={dirty:_,ctx:f}),w6.$set(w4e);const A4e={};_&2&&(A4e.$$scope={dirty:_,ctx:f}),_T.$set(A4e);const qC={};_&2&&(qC.$$scope={dirty:_,ctx:f}),vT.$set(qC);const y4e={};_&2&&(y4e.$$scope={dirty:_,ctx:f}),VT.$set(y4e);const L4e={};_&2&&(L4e.$$scope={dirty:_,ctx:f}),zT.$set(L4e);const NC={};_&2&&(NC.$$scope={dirty:_,ctx:f}),a9.$set(NC);const x4e={};_&2&&(x4e.$$scope={dirty:_,ctx:f}),s9.$set(x4e);const $4e={};_&2&&($4e.$$scope={dirty:_,ctx:f}),f9.$set($4e);const jC={};_&2&&(jC.$$scope={dirty:_,ctx:f}),g9.$set(jC);const k4e={};_&2&&(k4e.$$scope={dirty:_,ctx:f}),B9.$set(k4e);const S4e={};_&2&&(S4e.$$scope={dirty:_,ctx:f}),I9.$set(S4e);const DC={};_&2&&(DC.$$scope={dirty:_,ctx:f}),W9.$set(DC);const R4e={};_&2&&(R4e.$$scope={dirty:_,ctx:f}),U9.$set(R4e);const B4e={};_&2&&(B4e.$$scope={dirty:_,ctx:f}),MM.$set(B4e);const GC={};_&2&&(GC.$$scope={dirty:_,ctx:f}),CM.$set(GC);const P4e={};_&2&&(P4e.$$scope={dirty:_,ctx:f}),OM.$set(P4e);const I4e={};_&2&&(I4e.$$scope={dirty:_,ctx:f}),XM.$set(I4e);const OC={};_&2&&(OC.$$scope={dirty:_,ctx:f}),WM.$set(OC);const q4e={};_&2&&(q4e.$$scope={dirty:_,ctx:f}),UM.$set(q4e);const N4e={};_&2&&(N4e.$$scope={dirty:_,ctx:f}),YM.$set(N4e);const VC={};_&2&&(VC.$$scope={dirty:_,ctx:f}),ZM.$set(VC);const j4e={};_&2&&(j4e.$$scope={dirty:_,ctx:f}),F4.$set(j4e);const D4e={};_&2&&(D4e.$$scope={dirty:_,ctx:f}),M4.$set(D4e);const XC={};_&2&&(XC.$$scope={dirty:_,ctx:f}),V4.$set(XC);const G4e={};_&2&&(G4e.$$scope={dirty:_,ctx:f}),z4.$set(G4e);const O4e={};_&2&&(O4e.$$scope={dirty:_,ctx:f}),W4.$set(O4e);const zC={};_&2&&(zC.$$scope={dirty:_,ctx:f}),U4.$set(zC);const V4e={};_&2&&(V4e.$$scope={dirty:_,ctx:f}),Y4.$set(V4e);const X4e={};_&2&&(X4e.$$scope={dirty:_,ctx:f}),Z4.$set(X4e);const QC={};_&2&&(QC.$$scope={dirty:_,ctx:f}),wE.$set(QC);const z4e={};_&2&&(z4e.$$scope={dirty:_,ctx:f}),yE.$set(z4e);const Q4e={};_&2&&(Q4e.$$scope={dirty:_,ctx:f}),qE.$set(Q4e);const WC={};_&2&&(WC.$$scope={dirty:_,ctx:f}),jE.$set(WC);const W4e={};_&2&&(W4e.$$scope={dirty:_,ctx:f}),KE.$set(W4e);const H4e={};_&2&&(H4e.$$scope={dirty:_,ctx:f}),e5.$set(H4e);const HC={};_&2&&(HC.$$scope={dirty:_,ctx:f}),f5.$set(HC);const U4e={};_&2&&(U4e.$$scope={dirty:_,ctx:f}),g5.$set(U4e);const J4e={};_&2&&(J4e.$$scope={dirty:_,ctx:f}),E5.$set(J4e);const UC={};_&2&&(UC.$$scope={dirty:_,ctx:f}),w5.$set(UC);const Y4e={};_&2&&(Y4e.$$scope={dirty:_,ctx:f}),I5.$set(Y4e);const K4e={};_&2&&(K4e.$$scope={dirty:_,ctx:f}),N5.$set(K4e);const JC={};_&2&&(JC.$$scope={dirty:_,ctx:f}),U5.$set(JC);const Z4e={};_&2&&(Z4e.$$scope={dirty:_,ctx:f}),Y5.$set(Z4e);const eEe={};_&2&&(eEe.$$scope={dirty:_,ctx:f}),sC.$set(eEe);const YC={};_&2&&(YC.$$scope={dirty:_,ctx:f}),iC.$set(YC);const oEe={};_&2&&(oEe.$$scope={dirty:_,ctx:f}),_C.$set(oEe);const rEe={};_&2&&(rEe.$$scope={dirty:_,ctx:f}),vC.$set(rEe);const KC={};_&2&&(KC.$$scope={dirty:_,ctx:f}),TC.$set(KC);const tEe={};_&2&&(tEe.$$scope={dirty:_,ctx:f}),EC.$set(tEe);const aEe={};_&2&&(aEe.$$scope={dirty:_,ctx:f}),AC.$set(aEe);const ZC={};_&2&&(ZC.$$scope={dirty:_,ctx:f}),LC.$set(ZC);const nEe={};_&2&&(nEe.$$scope={dirty:_,ctx:f}),$C.$set(nEe)},i(f){eNe||(E(d.$$.fragment,f),E(Ma.$$.fragment,f),E(eA.$$.fragment,f),E(oA.$$.fragment,f),E(_f.$$.fragment,f),E(rA.$$.fragment,f),E(tA.$$.fragment,f),E(sA.$$.fragment,f),E(ug.$$.fragment,f),E(lA.$$.fragment,f),E(iA.$$.fragment,f),E(dA.$$.fragment,f),E(mA.$$.fragment,f),E(Ug.$$.fragment,f),E(gA.$$.fragment,f),E(hA.$$.fragment,f),E(pA.$$.fragment,f),E(bA.$$.fragment,f),E(Eh.$$.fragment,f),E(Ch.$$.fragment,f),E(vA.$$.fragment,f),E(FA.$$.fragment,f),E(TA.$$.fragment,f),E(CA.$$.fragment,f),E(Oh.$$.fragment,f),E(Vh.$$.fragment,f),E(wA.$$.fragment,f),E(AA.$$.fragment,f),E(yA.$$.fragment,f),E(xA.$$.fragment,f),E(Qh.$$.fragment,f),E($A.$$.fragment,f),E(Iu.$$.fragment,f),E(kA.$$.fragment,f),E(SA.$$.fragment,f),E(BA.$$.fragment,f),E(Nu.$$.fragment,f),E(PA.$$.fragment,f),E(A_.$$.fragment,f),E(IA.$$.fragment,f),E(qA.$$.fragment,f),E(jA.$$.fragment,f),E(L_.$$.fragment,f),E(DA.$$.fragment,f),E(m1.$$.fragment,f),E(GA.$$.fragment,f),E(OA.$$.fragment,f),E(XA.$$.fragment,f),E(h1.$$.fragment,f),E(zA.$$.fragment,f),E(Y1.$$.fragment,f),E(QA.$$.fragment,f),E(WA.$$.fragment,f),E(UA.$$.fragment,f),E(Z1.$$.fragment,f),E(JA.$$.fragment,f),E(b8.$$.fragment,f),E(YA.$$.fragment,f),E(KA.$$.fragment,f),E(e0.$$.fragment,f),E(F8.$$.fragment,f),E(o0.$$.fragment,f),E(pb.$$.fragment,f),E(r0.$$.fragment,f),E(t0.$$.fragment,f),E(n0.$$.fragment,f),E(_b.$$.fragment,f),E(s0.$$.fragment,f),E(Hb.$$.fragment,f),E(l0.$$.fragment,f),E(i0.$$.fragment,f),E(c0.$$.fragment,f),E(Jb.$$.fragment,f),E(f0.$$.fragment,f),E(t2.$$.fragment,f),E(m0.$$.fragment,f),E(g0.$$.fragment,f),E(p0.$$.fragment,f),E(n2.$$.fragment,f),E(u0.$$.fragment,f),E(D2.$$.fragment,f),E(_0.$$.fragment,f),E(b0.$$.fragment,f),E(F0.$$.fragment,f),E(O2.$$.fragment,f),E(T0.$$.fragment,f),E(xv.$$.fragment,f),E(M0.$$.fragment,f),E(E0.$$.fragment,f),E(w0.$$.fragment,f),E(kv.$$.fragment,f),E(A0.$$.fragment,f),E(Bv.$$.fragment,f),E(y0.$$.fragment,f),E(L0.$$.fragment,f),E($0.$$.fragment,f),E(Iv.$$.fragment,f),E(k0.$$.fragment,f),E(Uv.$$.fragment,f),E(S0.$$.fragment,f),E(R0.$$.fragment,f),E(P0.$$.fragment,f),E(Yv.$$.fragment,f),E(I0.$$.fragment,f),E(eF.$$.fragment,f),E(q0.$$.fragment,f),E(N0.$$.fragment,f),E(D0.$$.fragment,f),E(rF.$$.fragment,f),E(G0.$$.fragment,f),E(mF.$$.fragment,f),E(O0.$$.fragment,f),E(V0.$$.fragment,f),E(z0.$$.fragment,f),E(hF.$$.fragment,f),E(Q0.$$.fragment,f),E(FF.$$.fragment,f),E(W0.$$.fragment,f),E(H0.$$.fragment,f),E(J0.$$.fragment,f),E(MF.$$.fragment,f),E(Y0.$$.fragment,f),E(SF.$$.fragment,f),E(K0.$$.fragment,f),E(Z0.$$.fragment,f),E(oy.$$.fragment,f),E(BF.$$.fragment,f),E(ry.$$.fragment,f),E(NF.$$.fragment,f),E(ay.$$.fragment,f),E(ny.$$.fragment,f),E(ly.$$.fragment,f),E(DF.$$.fragment,f),E(iy.$$.fragment,f),E(QF.$$.fragment,f),E(dy.$$.fragment,f),E(cy.$$.fragment,f),E(my.$$.fragment,f),E(HF.$$.fragment,f),E(gy.$$.fragment,f),E(ZF.$$.fragment,f),E(hy.$$.fragment,f),E(py.$$.fragment,f),E(_y.$$.fragment,f),E(o6.$$.fragment,f),E(by.$$.fragment,f),E(n6.$$.fragment,f),E(Fy.$$.fragment,f),E(Ty.$$.fragment,f),E(Ey.$$.fragment,f),E(l6.$$.fragment,f),E(Cy.$$.fragment,f),E(c6.$$.fragment,f),E(wy.$$.fragment,f),E(Ay.$$.fragment,f),E(Ly.$$.fragment,f),E(m6.$$.fragment,f),E(xy.$$.fragment,f),E(b6.$$.fragment,f),E($y.$$.fragment,f),E(ky.$$.fragment,f),E(Ry.$$.fragment,f),E(F6.$$.fragment,f),E(By.$$.fragment,f),E(E6.$$.fragment,f),E(Py.$$.fragment,f),E(Iy.$$.fragment,f),E(Ny.$$.fragment,f),E(w6.$$.fragment,f),E(jy.$$.fragment,f),E(_T.$$.fragment,f),E(Dy.$$.fragment,f),E(Gy.$$.fragment,f),E(Vy.$$.fragment,f),E(vT.$$.fragment,f),E(Xy.$$.fragment,f),E(VT.$$.fragment,f),E(zy.$$.fragment,f),E(Qy.$$.fragment,f),E(Hy.$$.fragment,f),E(zT.$$.fragment,f),E(Uy.$$.fragment,f),E(a9.$$.fragment,f),E(Jy.$$.fragment,f),E(Yy.$$.fragment,f),E(Zy.$$.fragment,f),E(s9.$$.fragment,f),E(eL.$$.fragment,f),E(f9.$$.fragment,f),E(oL.$$.fragment,f),E(rL.$$.fragment,f),E(aL.$$.fragment,f),E(g9.$$.fragment,f),E(nL.$$.fragment,f),E(B9.$$.fragment,f),E(sL.$$.fragment,f),E(lL.$$.fragment,f),E(dL.$$.fragment,f),E(I9.$$.fragment,f),E(cL.$$.fragment,f),E(W9.$$.fragment,f),E(fL.$$.fragment,f),E(mL.$$.fragment,f),E(hL.$$.fragment,f),E(U9.$$.fragment,f),E(pL.$$.fragment,f),E(MM.$$.fragment,f),E(uL.$$.fragment,f),E(_L.$$.fragment,f),E(vL.$$.fragment,f),E(CM.$$.fragment,f),E(FL.$$.fragment,f),E(OM.$$.fragment,f),E(TL.$$.fragment,f),E(ML.$$.fragment,f),E(CL.$$.fragment,f),E(XM.$$.fragment,f),E(wL.$$.fragment,f),E(WM.$$.fragment,f),E(yL.$$.fragment,f),E(LL.$$.fragment,f),E($L.$$.fragment,f),E(UM.$$.fragment,f),E(kL.$$.fragment,f),E(YM.$$.fragment,f),E(SL.$$.fragment,f),E(RL.$$.fragment,f),E(PL.$$.fragment,f),E(ZM.$$.fragment,f),E(IL.$$.fragment,f),E(F4.$$.fragment,f),E(qL.$$.fragment,f),E(NL.$$.fragment,f),E(DL.$$.fragment,f),E(M4.$$.fragment,f),E(GL.$$.fragment,f),E(V4.$$.fragment,f),E(OL.$$.fragment,f),E(VL.$$.fragment,f),E(zL.$$.fragment,f),E(z4.$$.fragment,f),E(QL.$$.fragment,f),E(W4.$$.fragment,f),E(WL.$$.fragment,f),E(HL.$$.fragment,f),E(JL.$$.fragment,f),E(U4.$$.fragment,f),E(YL.$$.fragment,f),E(Y4.$$.fragment,f),E(KL.$$.fragment,f),E(ZL.$$.fragment,f),E(ox.$$.fragment,f),E(Z4.$$.fragment,f),E(rx.$$.fragment,f),E(wE.$$.fragment,f),E(tx.$$.fragment,f),E(ax.$$.fragment,f),E(sx.$$.fragment,f),E(yE.$$.fragment,f),E(lx.$$.fragment,f),E(qE.$$.fragment,f),E(ix.$$.fragment,f),E(dx.$$.fragment,f),E(fx.$$.fragment,f),E(jE.$$.fragment,f),E(mx.$$.fragment,f),E(KE.$$.fragment,f),E(gx.$$.fragment,f),E(hx.$$.fragment,f),E(ux.$$.fragment,f),E(e5.$$.fragment,f),E(_x.$$.fragment,f),E(f5.$$.fragment,f),E(bx.$$.fragment,f),E(vx.$$.fragment,f),E(Tx.$$.fragment,f),E(g5.$$.fragment,f),E(Mx.$$.fragment,f),E(E5.$$.fragment,f),E(Ex.$$.fragment,f),E(Cx.$$.fragment,f),E(Ax.$$.fragment,f),E(w5.$$.fragment,f),E(yx.$$.fragment,f),E(I5.$$.fragment,f),E(Lx.$$.fragment,f),E(xx.$$.fragment,f),E(kx.$$.fragment,f),E(N5.$$.fragment,f),E(Sx.$$.fragment,f),E(U5.$$.fragment,f),E(Rx.$$.fragment,f),E(Bx.$$.fragment,f),E(Ix.$$.fragment,f),E(Y5.$$.fragment,f),E(qx.$$.fragment,f),E(sC.$$.fragment,f),E(Nx.$$.fragment,f),E(jx.$$.fragment,f),E(Gx.$$.fragment,f),E(iC.$$.fragment,f),E(Ox.$$.fragment,f),E(_C.$$.fragment,f),E(Vx.$$.fragment,f),E(Xx.$$.fragment,f),E(Qx.$$.fragment,f),E(vC.$$.fragment,f),E(Wx.$$.fragment,f),E(TC.$$.fragment,f),E(Hx.$$.fragment,f),E(Ux.$$.fragment,f),E(Yx.$$.fragment,f),E(EC.$$.fragment,f),E(Kx.$$.fragment,f),E(AC.$$.fragment,f),E(e7.$$.fragment,f),E(o7.$$.fragment,f),E(t7.$$.fragment,f),E(LC.$$.fragment,f),E(a7.$$.fragment,f),E($C.$$.fragment,f),eNe=!0)},o(f){C(d.$$.fragment,f),C(Ma.$$.fragment,f),C(eA.$$.fragment,f),C(oA.$$.fragment,f),C(_f.$$.fragment,f),C(rA.$$.fragment,f),C(tA.$$.fragment,f),C(sA.$$.fragment,f),C(ug.$$.fragment,f),C(lA.$$.fragment,f),C(iA.$$.fragment,f),C(dA.$$.fragment,f),C(mA.$$.fragment,f),C(Ug.$$.fragment,f),C(gA.$$.fragment,f),C(hA.$$.fragment,f),C(pA.$$.fragment,f),C(bA.$$.fragment,f),C(Eh.$$.fragment,f),C(Ch.$$.fragment,f),C(vA.$$.fragment,f),C(FA.$$.fragment,f),C(TA.$$.fragment,f),C(CA.$$.fragment,f),C(Oh.$$.fragment,f),C(Vh.$$.fragment,f),C(wA.$$.fragment,f),C(AA.$$.fragment,f),C(yA.$$.fragment,f),C(xA.$$.fragment,f),C(Qh.$$.fragment,f),C($A.$$.fragment,f),C(Iu.$$.fragment,f),C(kA.$$.fragment,f),C(SA.$$.fragment,f),C(BA.$$.fragment,f),C(Nu.$$.fragment,f),C(PA.$$.fragment,f),C(A_.$$.fragment,f),C(IA.$$.fragment,f),C(qA.$$.fragment,f),C(jA.$$.fragment,f),C(L_.$$.fragment,f),C(DA.$$.fragment,f),C(m1.$$.fragment,f),C(GA.$$.fragment,f),C(OA.$$.fragment,f),C(XA.$$.fragment,f),C(h1.$$.fragment,f),C(zA.$$.fragment,f),C(Y1.$$.fragment,f),C(QA.$$.fragment,f),C(WA.$$.fragment,f),C(UA.$$.fragment,f),C(Z1.$$.fragment,f),C(JA.$$.fragment,f),C(b8.$$.fragment,f),C(YA.$$.fragment,f),C(KA.$$.fragment,f),C(e0.$$.fragment,f),C(F8.$$.fragment,f),C(o0.$$.fragment,f),C(pb.$$.fragment,f),C(r0.$$.fragment,f),C(t0.$$.fragment,f),C(n0.$$.fragment,f),C(_b.$$.fragment,f),C(s0.$$.fragment,f),C(Hb.$$.fragment,f),C(l0.$$.fragment,f),C(i0.$$.fragment,f),C(c0.$$.fragment,f),C(Jb.$$.fragment,f),C(f0.$$.fragment,f),C(t2.$$.fragment,f),C(m0.$$.fragment,f),C(g0.$$.fragment,f),C(p0.$$.fragment,f),C(n2.$$.fragment,f),C(u0.$$.fragment,f),C(D2.$$.fragment,f),C(_0.$$.fragment,f),C(b0.$$.fragment,f),C(F0.$$.fragment,f),C(O2.$$.fragment,f),C(T0.$$.fragment,f),C(xv.$$.fragment,f),C(M0.$$.fragment,f),C(E0.$$.fragment,f),C(w0.$$.fragment,f),C(kv.$$.fragment,f),C(A0.$$.fragment,f),C(Bv.$$.fragment,f),C(y0.$$.fragment,f),C(L0.$$.fragment,f),C($0.$$.fragment,f),C(Iv.$$.fragment,f),C(k0.$$.fragment,f),C(Uv.$$.fragment,f),C(S0.$$.fragment,f),C(R0.$$.fragment,f),C(P0.$$.fragment,f),C(Yv.$$.fragment,f),C(I0.$$.fragment,f),C(eF.$$.fragment,f),C(q0.$$.fragment,f),C(N0.$$.fragment,f),C(D0.$$.fragment,f),C(rF.$$.fragment,f),C(G0.$$.fragment,f),C(mF.$$.fragment,f),C(O0.$$.fragment,f),C(V0.$$.fragment,f),C(z0.$$.fragment,f),C(hF.$$.fragment,f),C(Q0.$$.fragment,f),C(FF.$$.fragment,f),C(W0.$$.fragment,f),C(H0.$$.fragment,f),C(J0.$$.fragment,f),C(MF.$$.fragment,f),C(Y0.$$.fragment,f),C(SF.$$.fragment,f),C(K0.$$.fragment,f),C(Z0.$$.fragment,f),C(oy.$$.fragment,f),C(BF.$$.fragment,f),C(ry.$$.fragment,f),C(NF.$$.fragment,f),C(ay.$$.fragment,f),C(ny.$$.fragment,f),C(ly.$$.fragment,f),C(DF.$$.fragment,f),C(iy.$$.fragment,f),C(QF.$$.fragment,f),C(dy.$$.fragment,f),C(cy.$$.fragment,f),C(my.$$.fragment,f),C(HF.$$.fragment,f),C(gy.$$.fragment,f),C(ZF.$$.fragment,f),C(hy.$$.fragment,f),C(py.$$.fragment,f),C(_y.$$.fragment,f),C(o6.$$.fragment,f),C(by.$$.fragment,f),C(n6.$$.fragment,f),C(Fy.$$.fragment,f),C(Ty.$$.fragment,f),C(Ey.$$.fragment,f),C(l6.$$.fragment,f),C(Cy.$$.fragment,f),C(c6.$$.fragment,f),C(wy.$$.fragment,f),C(Ay.$$.fragment,f),C(Ly.$$.fragment,f),C(m6.$$.fragment,f),C(xy.$$.fragment,f),C(b6.$$.fragment,f),C($y.$$.fragment,f),C(ky.$$.fragment,f),C(Ry.$$.fragment,f),C(F6.$$.fragment,f),C(By.$$.fragment,f),C(E6.$$.fragment,f),C(Py.$$.fragment,f),C(Iy.$$.fragment,f),C(Ny.$$.fragment,f),C(w6.$$.fragment,f),C(jy.$$.fragment,f),C(_T.$$.fragment,f),C(Dy.$$.fragment,f),C(Gy.$$.fragment,f),C(Vy.$$.fragment,f),C(vT.$$.fragment,f),C(Xy.$$.fragment,f),C(VT.$$.fragment,f),C(zy.$$.fragment,f),C(Qy.$$.fragment,f),C(Hy.$$.fragment,f),C(zT.$$.fragment,f),C(Uy.$$.fragment,f),C(a9.$$.fragment,f),C(Jy.$$.fragment,f),C(Yy.$$.fragment,f),C(Zy.$$.fragment,f),C(s9.$$.fragment,f),C(eL.$$.fragment,f),C(f9.$$.fragment,f),C(oL.$$.fragment,f),C(rL.$$.fragment,f),C(aL.$$.fragment,f),C(g9.$$.fragment,f),C(nL.$$.fragment,f),C(B9.$$.fragment,f),C(sL.$$.fragment,f),C(lL.$$.fragment,f),C(dL.$$.fragment,f),C(I9.$$.fragment,f),C(cL.$$.fragment,f),C(W9.$$.fragment,f),C(fL.$$.fragment,f),C(mL.$$.fragment,f),C(hL.$$.fragment,f),C(U9.$$.fragment,f),C(pL.$$.fragment,f),C(MM.$$.fragment,f),C(uL.$$.fragment,f),C(_L.$$.fragment,f),C(vL.$$.fragment,f),C(CM.$$.fragment,f),C(FL.$$.fragment,f),C(OM.$$.fragment,f),C(TL.$$.fragment,f),C(ML.$$.fragment,f),C(CL.$$.fragment,f),C(XM.$$.fragment,f),C(wL.$$.fragment,f),C(WM.$$.fragment,f),C(yL.$$.fragment,f),C(LL.$$.fragment,f),C($L.$$.fragment,f),C(UM.$$.fragment,f),C(kL.$$.fragment,f),C(YM.$$.fragment,f),C(SL.$$.fragment,f),C(RL.$$.fragment,f),C(PL.$$.fragment,f),C(ZM.$$.fragment,f),C(IL.$$.fragment,f),C(F4.$$.fragment,f),C(qL.$$.fragment,f),C(NL.$$.fragment,f),C(DL.$$.fragment,f),C(M4.$$.fragment,f),C(GL.$$.fragment,f),C(V4.$$.fragment,f),C(OL.$$.fragment,f),C(VL.$$.fragment,f),C(zL.$$.fragment,f),C(z4.$$.fragment,f),C(QL.$$.fragment,f),C(W4.$$.fragment,f),C(WL.$$.fragment,f),C(HL.$$.fragment,f),C(JL.$$.fragment,f),C(U4.$$.fragment,f),C(YL.$$.fragment,f),C(Y4.$$.fragment,f),C(KL.$$.fragment,f),C(ZL.$$.fragment,f),C(ox.$$.fragment,f),C(Z4.$$.fragment,f),C(rx.$$.fragment,f),C(wE.$$.fragment,f),C(tx.$$.fragment,f),C(ax.$$.fragment,f),C(sx.$$.fragment,f),C(yE.$$.fragment,f),C(lx.$$.fragment,f),C(qE.$$.fragment,f),C(ix.$$.fragment,f),C(dx.$$.fragment,f),C(fx.$$.fragment,f),C(jE.$$.fragment,f),C(mx.$$.fragment,f),C(KE.$$.fragment,f),C(gx.$$.fragment,f),C(hx.$$.fragment,f),C(ux.$$.fragment,f),C(e5.$$.fragment,f),C(_x.$$.fragment,f),C(f5.$$.fragment,f),C(bx.$$.fragment,f),C(vx.$$.fragment,f),C(Tx.$$.fragment,f),C(g5.$$.fragment,f),C(Mx.$$.fragment,f),C(E5.$$.fragment,f),C(Ex.$$.fragment,f),C(Cx.$$.fragment,f),C(Ax.$$.fragment,f),C(w5.$$.fragment,f),C(yx.$$.fragment,f),C(I5.$$.fragment,f),C(Lx.$$.fragment,f),C(xx.$$.fragment,f),C(kx.$$.fragment,f),C(N5.$$.fragment,f),C(Sx.$$.fragment,f),C(U5.$$.fragment,f),C(Rx.$$.fragment,f),C(Bx.$$.fragment,f),C(Ix.$$.fragment,f),C(Y5.$$.fragment,f),C(qx.$$.fragment,f),C(sC.$$.fragment,f),C(Nx.$$.fragment,f),C(jx.$$.fragment,f),C(Gx.$$.fragment,f),C(iC.$$.fragment,f),C(Ox.$$.fragment,f),C(_C.$$.fragment,f),C(Vx.$$.fragment,f),C(Xx.$$.fragment,f),C(Qx.$$.fragment,f),C(vC.$$.fragment,f),C(Wx.$$.fragment,f),C(TC.$$.fragment,f),C(Hx.$$.fragment,f),C(Ux.$$.fragment,f),C(Yx.$$.fragment,f),C(EC.$$.fragment,f),C(Kx.$$.fragment,f),C(AC.$$.fragment,f),C(e7.$$.fragment,f),C(o7.$$.fragment,f),C(t7.$$.fragment,f),C(LC.$$.fragment,f),C(a7.$$.fragment,f),C($C.$$.fragment,f),eNe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(mf),f&&t(et),f&&t(qe),f&&t(Xe),f&&t(hf),w(Ma,f),f&&t(ze),f&&t(Ae),f&&t(Eo),f&&t(Ea),f&&t(YPe),f&&t(pi),w(eA),f&&t(KPe),f&&t(kn),f&&t(ZPe),w(oA,f),f&&t(eIe),f&&t(M$),f&&t(oIe),w(_f,f),f&&t(rIe),f&&t(ui),w(rA),f&&t(tIe),f&&t(Co),w(tA),w(sA),w(ug),w(lA),f&&t(aIe),f&&t(bi),w(iA),f&&t(nIe),f&&t(wo),w(dA),w(mA),w(Ug),w(gA),f&&t(sIe),f&&t(vi),w(hA),f&&t(lIe),f&&t(Ao),w(pA),w(bA),w(Eh),w(Ch),w(vA),f&&t(iIe),f&&t(Fi),w(FA),f&&t(dIe),f&&t(yo),w(TA),w(CA),w(Oh),w(Vh),w(wA),f&&t(cIe),f&&t(Mi),w(AA),f&&t(fIe),f&&t(Lo),w(yA),w(xA),w(Qh),w($A),w(Iu),f&&t(mIe),f&&t(wi),w(kA),f&&t(gIe),f&&t(xo),w(SA),w(BA),w(Nu),w(PA),w(A_),f&&t(hIe),f&&t(Li),w(IA),f&&t(pIe),f&&t($o),w(qA),w(jA),w(L_),w(DA),w(m1),f&&t(uIe),f&&t(ki),w(GA),f&&t(_Ie),f&&t(ko),w(OA),w(XA),w(h1),w(zA),w(Y1),f&&t(bIe),f&&t(Bi),w(QA),f&&t(vIe),f&&t(So),w(WA),w(UA),w(Z1),w(JA),w(b8),f&&t(FIe),f&&t(qi),w(YA),f&&t(TIe),f&&t(Ro),w(KA),w(e0),w(F8),w(o0),w(pb),f&&t(MIe),f&&t(Di),w(r0),f&&t(EIe),f&&t(Bo),w(t0),w(n0),w(_b),w(s0),w(Hb),f&&t(CIe),f&&t(Vi),w(l0),f&&t(wIe),f&&t(Po),w(i0),w(c0),w(Jb),w(f0),w(t2),f&&t(AIe),f&&t(Qi),w(m0),f&&t(yIe),f&&t(Io),w(g0),w(p0),w(n2),w(u0),w(D2),f&&t(LIe),f&&t(Ui),w(_0),f&&t(xIe),f&&t(qo),w(b0),w(F0),w(O2),w(T0),w(xv),f&&t($Ie),f&&t(Ki),w(M0),f&&t(kIe),f&&t(No),w(E0),w(w0),w(kv),w(A0),w(Bv),f&&t(SIe),f&&t(od),w(y0),f&&t(RIe),f&&t(jo),w(L0),w($0),w(Iv),w(k0),w(Uv),f&&t(BIe),f&&t(ad),w(S0),f&&t(PIe),f&&t(Do),w(R0),w(P0),w(Yv),w(I0),w(eF),f&&t(IIe),f&&t(ld),w(q0),f&&t(qIe),f&&t(Go),w(N0),w(D0),w(rF),w(G0),w(mF),f&&t(NIe),f&&t(cd),w(O0),f&&t(jIe),f&&t(Oo),w(V0),w(z0),w(hF),w(Q0),w(FF),f&&t(DIe),f&&t(gd),w(W0),f&&t(GIe),f&&t(Vo),w(H0),w(J0),w(MF),w(Y0),w(SF),f&&t(OIe),f&&t(ud),w(K0),f&&t(VIe),f&&t(Xo),w(Z0),w(oy),w(BF),w(ry),w(NF),f&&t(XIe),f&&t(vd),w(ay),f&&t(zIe),f&&t(zo),w(ny),w(ly),w(DF),w(iy),w(QF),f&&t(QIe),f&&t(Md),w(dy),f&&t(WIe),f&&t(Qo),w(cy),w(my),w(HF),w(gy),w(ZF),f&&t(HIe),f&&t(Ad),w(hy),f&&t(UIe),f&&t(Wo),w(py),w(_y),w(o6),w(by),w(n6),f&&t(JIe),f&&t(xd),w(Fy),f&&t(YIe),f&&t(Ho),w(Ty),w(Ey),w(l6),w(Cy),w(c6),f&&t(KIe),f&&t(Sd),w(wy),f&&t(ZIe),f&&t(Uo),w(Ay),w(Ly),w(m6),w(xy),w(b6),f&&t(eqe),f&&t(Pd),w($y),f&&t(oqe),f&&t(Jo),w(ky),w(Ry),w(F6),w(By),w(E6),f&&t(rqe),f&&t(Nd),w(Py),f&&t(tqe),f&&t(Yo),w(Iy),w(Ny),w(w6),w(jy),w(_T),f&&t(aqe),f&&t(Gd),w(Dy),f&&t(nqe),f&&t(Ko),w(Gy),w(Vy),w(vT),w(Xy),w(VT),f&&t(sqe),f&&t(Xd),w(zy),f&&t(lqe),f&&t(Zo),w(Qy),w(Hy),w(zT),w(Uy),w(a9),f&&t(iqe),f&&t(Wd),w(Jy),f&&t(dqe),f&&t(er),w(Yy),w(Zy),w(s9),w(eL),w(f9),f&&t(cqe),f&&t(Jd),w(oL),f&&t(fqe),f&&t(or),w(rL),w(aL),w(g9),w(nL),w(B9),f&&t(mqe),f&&t(Zd),w(sL),f&&t(gqe),f&&t(rr),w(lL),w(dL),w(I9),w(cL),w(W9),f&&t(hqe),f&&t(rc),w(fL),f&&t(pqe),f&&t(tr),w(mL),w(hL),w(U9),w(pL),w(MM),f&&t(uqe),f&&t(nc),w(uL),f&&t(_qe),f&&t(ar),w(_L),w(vL),w(CM),w(FL),w(OM),f&&t(bqe),f&&t(ic),w(TL),f&&t(vqe),f&&t(nr),w(ML),w(CL),w(XM),w(wL),w(WM),f&&t(Fqe),f&&t(fc),w(yL),f&&t(Tqe),f&&t(sr),w(LL),w($L),w(UM),w(kL),w(YM),f&&t(Mqe),f&&t(hc),w(SL),f&&t(Eqe),f&&t(lr),w(RL),w(PL),w(ZM),w(IL),w(F4),f&&t(Cqe),f&&t(_c),w(qL),f&&t(wqe),f&&t(ir),w(NL),w(DL),w(M4),w(GL),w(V4),f&&t(Aqe),f&&t(Fc),w(OL),f&&t(yqe),f&&t(dr),w(VL),w(zL),w(z4),w(QL),w(W4),f&&t(Lqe),f&&t(Ec),w(WL),f&&t(xqe),f&&t(cr),w(HL),w(JL),w(U4),w(YL),w(Y4),f&&t($qe),f&&t(Ac),w(KL),f&&t(kqe),f&&t(fr),w(ZL),w(ox),w(Z4),w(rx),w(wE),f&&t(Sqe),f&&t(xc),w(tx),f&&t(Rqe),f&&t(mr),w(ax),w(sx),w(yE),w(lx),w(qE),f&&t(Bqe),f&&t(Sc),w(ix),f&&t(Pqe),f&&t(gr),w(dx),w(fx),w(jE),w(mx),w(KE),f&&t(Iqe),f&&t(Pc),w(gx),f&&t(qqe),f&&t(hr),w(hx),w(ux),w(e5),w(_x),w(f5),f&&t(Nqe),f&&t(Nc),w(bx),f&&t(jqe),f&&t(pr),w(vx),w(Tx),w(g5),w(Mx),w(E5),f&&t(Dqe),f&&t(Gc),w(Ex),f&&t(Gqe),f&&t(ur),w(Cx),w(Ax),w(w5),w(yx),w(I5),f&&t(Oqe),f&&t(Xc),w(Lx),f&&t(Vqe),f&&t(_r),w(xx),w(kx),w(N5),w(Sx),w(U5),f&&t(Xqe),f&&t(Wc),w(Rx),f&&t(zqe),f&&t(br),w(Bx),w(Ix),w(Y5),w(qx),w(sC),f&&t(Qqe),f&&t(Jc),w(Nx),f&&t(Wqe),f&&t(vr),w(jx),w(Gx),w(iC),w(Ox),w(_C),f&&t(Hqe),f&&t(Zc),w(Vx),f&&t(Uqe),f&&t(Fr),w(Xx),w(Qx),w(vC),w(Wx),w(TC),f&&t(Jqe),f&&t(rf),w(Hx),f&&t(Yqe),f&&t(Tr),w(Ux),w(Yx),w(EC),w(Kx),w(AC),f&&t(Kqe),f&&t(nf),w(e7),f&&t(Zqe),f&&t(Mr),w(o7),w(t7),w(LC),w(a7),w($C)}}}const Syt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Ryt(L){return RAt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Dyt extends xAt{constructor(g){super();$At(this,g,Ryt,kyt,kAt,{})}}export{Dyt as default,Syt as metadata};
