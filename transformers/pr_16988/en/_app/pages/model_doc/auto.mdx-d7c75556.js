import{S as y5t,i as L5t,s as x5t,e as a,k as l,w as F,t as o,M as $5t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as k5t,L as I}from"../../chunks/vendor-6b77c823.js";import{T as BPr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function S5t(L){let g,v,p,m,u,d,h,Mo,ri,rf,Kr,ti,ai,Ew,tf,qe,Xe,ni,En,Cw,Cn,wn,ww,si,An,Aw,li,af,va;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),ri=a("code"),rf=o("model_type"),Kr=o(" attribute is set to the same key you use when registering the config (here "),ti=a("code"),ai=o('"new-model"'),Ew=o(")."),tf=l(),qe=a("p"),Xe=o("Likewise, if your "),ni=a("code"),En=o("NewModel"),Cw=o(" is a subclass of "),Cn=a("a"),wn=o("PreTrainedModel"),ww=o(`, make sure its
`),si=a("code"),An=o("config_class"),Aw=o(` attribute is set to the same class you use when registering the model (here
`),li=a("code"),af=o("NewModelConfig"),va=o(")."),this.h()},l(ze){g=n(ze,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var Nx=s(p);m=r(Nx,"NewModelConfig"),Nx.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var ii=s(d);h=r(ii,"PretrainedConfig"),ii.forEach(t),Mo=r(Ae,`, make sure its
`),ri=n(Ae,"CODE",{});var jx=s(ri);rf=r(jx,"model_type"),jx.forEach(t),Kr=r(Ae," attribute is set to the same key you use when registering the config (here "),ti=n(Ae,"CODE",{});var Dx=s(ti);ai=r(Dx,'"new-model"'),Dx.forEach(t),Ew=r(Ae,")."),Ae.forEach(t),tf=i(ze),qe=n(ze,"P",{});var Eo=s(qe);Xe=r(Eo,"Likewise, if your "),ni=n(Eo,"CODE",{});var Fa=s(ni);En=r(Fa,"NewModel"),Fa.forEach(t),Cw=r(Eo," is a subclass of "),Cn=n(Eo,"A",{href:!0});var Gx=s(Cn);wn=r(Gx,"PreTrainedModel"),Gx.forEach(t),ww=r(Eo,`, make sure its
`),si=n(Eo,"CODE",{});var nf=s(si);An=r(nf,"config_class"),nf.forEach(t),Aw=r(Eo,` attribute is set to the same class you use when registering the model (here
`),li=n(Eo,"CODE",{});var Ox=s(li);af=r(Ox,"NewModelConfig"),Ox.forEach(t),va=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Cn,"href","/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel")},m(ze,Ae){b(ze,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,ri),e(ri,rf),e(g,Kr),e(g,ti),e(ti,ai),e(g,Ew),b(ze,tf,Ae),b(ze,qe,Ae),e(qe,Xe),e(qe,ni),e(ni,En),e(qe,Cw),e(qe,Cn),e(Cn,wn),e(qe,ww),e(qe,si),e(si,An),e(qe,Aw),e(qe,li),e(li,af),e(qe,va)},d(ze){ze&&t(g),ze&&t(tf),ze&&t(qe)}}}function R5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P5t(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function I5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q5t(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function N5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ct(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ECt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ACt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ct(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ICt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y3t(L){let g,v,p,m,u,d,h,Mo,ri,rf,Kr,ti,ai,Ew,tf,qe,Xe,ni,En,Cw,Cn,wn,ww,si,An,Aw,li,af,va,ze,Ae,Nx,ii,jx,Dx,Eo,Fa,Gx,nf,Ox,LNe,MBe,di,sf,dZ,yw,xNe,cZ,$Ne,EBe,yn,kNe,fZ,SNe,RNe,mZ,BNe,PNe,CBe,Lw,wBe,Vx,INe,ABe,lf,yBe,ci,df,gZ,xw,qNe,hZ,NNe,LBe,Co,$w,jNe,kw,DNe,Xx,GNe,ONe,VNe,Sw,XNe,pZ,zNe,QNe,WNe,Mr,Rw,HNe,uZ,UNe,JNe,fi,YNe,_Z,KNe,ZNe,bZ,eje,oje,rje,A,cf,vZ,tje,aje,zx,nje,sje,lje,ff,FZ,ije,dje,Qx,cje,fje,mje,mf,TZ,gje,hje,Wx,pje,uje,_je,gf,MZ,bje,vje,Hx,Fje,Tje,Mje,hf,EZ,Eje,Cje,Ux,wje,Aje,yje,pf,CZ,Lje,xje,Jx,$je,kje,Sje,uf,wZ,Rje,Bje,Yx,Pje,Ije,qje,_f,AZ,Nje,jje,Kx,Dje,Gje,Oje,bf,yZ,Vje,Xje,Zx,zje,Qje,Wje,vf,LZ,Hje,Uje,e$,Jje,Yje,Kje,Ff,xZ,Zje,eDe,o$,oDe,rDe,tDe,Tf,$Z,aDe,nDe,r$,sDe,lDe,iDe,Mf,kZ,dDe,cDe,t$,fDe,mDe,gDe,Ef,SZ,hDe,pDe,a$,uDe,_De,bDe,Cf,RZ,vDe,FDe,n$,TDe,MDe,EDe,wf,BZ,CDe,wDe,s$,ADe,yDe,LDe,Af,PZ,xDe,$De,l$,kDe,SDe,RDe,yf,IZ,BDe,PDe,i$,IDe,qDe,NDe,Lf,qZ,jDe,DDe,d$,GDe,ODe,VDe,xf,NZ,XDe,zDe,c$,QDe,WDe,HDe,$f,jZ,UDe,JDe,f$,YDe,KDe,ZDe,kf,DZ,eGe,oGe,m$,rGe,tGe,aGe,Sf,GZ,nGe,sGe,g$,lGe,iGe,dGe,Rf,OZ,cGe,fGe,h$,mGe,gGe,hGe,Bf,VZ,pGe,uGe,p$,_Ge,bGe,vGe,Pf,XZ,FGe,TGe,u$,MGe,EGe,CGe,If,zZ,wGe,AGe,_$,yGe,LGe,xGe,qf,QZ,$Ge,kGe,b$,SGe,RGe,BGe,Nf,WZ,PGe,IGe,v$,qGe,NGe,jGe,jf,HZ,DGe,GGe,F$,OGe,VGe,XGe,Df,UZ,zGe,QGe,T$,WGe,HGe,UGe,Gf,JZ,JGe,YGe,M$,KGe,ZGe,eOe,Of,YZ,oOe,rOe,E$,tOe,aOe,nOe,Vf,KZ,sOe,lOe,C$,iOe,dOe,cOe,Xf,ZZ,fOe,mOe,w$,gOe,hOe,pOe,zf,eee,uOe,_Oe,A$,bOe,vOe,FOe,Qf,oee,TOe,MOe,y$,EOe,COe,wOe,Wf,ree,AOe,yOe,L$,LOe,xOe,$Oe,Hf,tee,kOe,SOe,x$,ROe,BOe,POe,Uf,aee,IOe,qOe,$$,NOe,jOe,DOe,Jf,nee,GOe,OOe,k$,VOe,XOe,zOe,Yf,see,QOe,WOe,S$,HOe,UOe,JOe,Kf,lee,YOe,KOe,R$,ZOe,eVe,oVe,Zf,iee,rVe,tVe,B$,aVe,nVe,sVe,em,dee,lVe,iVe,P$,dVe,cVe,fVe,om,cee,mVe,gVe,I$,hVe,pVe,uVe,rm,fee,_Ve,bVe,q$,vVe,FVe,TVe,tm,mee,MVe,EVe,N$,CVe,wVe,AVe,am,gee,yVe,LVe,j$,xVe,$Ve,kVe,nm,hee,SVe,RVe,D$,BVe,PVe,IVe,sm,pee,qVe,NVe,G$,jVe,DVe,GVe,lm,uee,OVe,VVe,O$,XVe,zVe,QVe,im,_ee,WVe,HVe,V$,UVe,JVe,YVe,dm,bee,KVe,ZVe,X$,eXe,oXe,rXe,cm,vee,tXe,aXe,z$,nXe,sXe,lXe,fm,Fee,iXe,dXe,Q$,cXe,fXe,mXe,mm,Tee,gXe,hXe,W$,pXe,uXe,_Xe,gm,Mee,bXe,vXe,H$,FXe,TXe,MXe,hm,Eee,EXe,CXe,U$,wXe,AXe,yXe,pm,Cee,LXe,xXe,J$,$Xe,kXe,SXe,um,wee,RXe,BXe,Y$,PXe,IXe,qXe,_m,Aee,NXe,jXe,K$,DXe,GXe,OXe,bm,yee,VXe,XXe,Z$,zXe,QXe,WXe,vm,Lee,HXe,UXe,ek,JXe,YXe,KXe,Fm,xee,ZXe,eze,ok,oze,rze,tze,Tm,$ee,aze,nze,rk,sze,lze,ize,Mm,kee,dze,cze,tk,fze,mze,gze,Em,See,hze,pze,ak,uze,_ze,bze,Cm,Ree,vze,Fze,nk,Tze,Mze,Eze,wm,Bee,Cze,wze,sk,Aze,yze,Lze,Am,Pee,xze,$ze,lk,kze,Sze,Rze,ym,Iee,Bze,Pze,ik,Ize,qze,Nze,Lm,qee,jze,Dze,dk,Gze,Oze,Vze,xm,Nee,Xze,zze,ck,Qze,Wze,Hze,$m,jee,Uze,Jze,fk,Yze,Kze,Zze,km,Dee,eQe,oQe,mk,rQe,tQe,aQe,Sm,Gee,nQe,sQe,gk,lQe,iQe,dQe,Rm,Oee,cQe,fQe,hk,mQe,gQe,hQe,Bm,Vee,pQe,uQe,pk,_Qe,bQe,vQe,Pm,Xee,FQe,TQe,uk,MQe,EQe,CQe,Im,zee,wQe,AQe,_k,yQe,LQe,xQe,qm,Qee,$Qe,kQe,bk,SQe,RQe,BQe,Nm,Wee,PQe,IQe,vk,qQe,NQe,jQe,jm,Hee,DQe,GQe,Fk,OQe,VQe,XQe,Dm,Uee,zQe,QQe,Tk,WQe,HQe,UQe,Gm,Jee,JQe,YQe,Mk,KQe,ZQe,eWe,Om,Yee,oWe,rWe,Ek,tWe,aWe,nWe,Vm,Kee,sWe,lWe,Ck,iWe,dWe,cWe,Xm,Zee,fWe,mWe,wk,gWe,hWe,pWe,zm,eoe,uWe,_We,Ak,bWe,vWe,FWe,Qm,ooe,TWe,MWe,yk,EWe,CWe,wWe,Wm,roe,AWe,yWe,Lk,LWe,xWe,$We,Hm,toe,kWe,SWe,xk,RWe,BWe,PWe,Um,aoe,IWe,qWe,$k,NWe,jWe,DWe,Jm,noe,GWe,OWe,kk,VWe,XWe,zWe,Ym,soe,QWe,WWe,Sk,HWe,UWe,JWe,Km,loe,YWe,KWe,Rk,ZWe,eHe,oHe,Zm,ioe,rHe,tHe,Bk,aHe,nHe,sHe,eg,doe,lHe,iHe,Pk,dHe,cHe,fHe,og,coe,mHe,gHe,Ik,hHe,pHe,uHe,rg,foe,_He,bHe,qk,vHe,FHe,THe,tg,moe,MHe,EHe,Nk,CHe,wHe,AHe,ag,goe,yHe,LHe,jk,xHe,$He,kHe,ng,SHe,sg,Bw,RHe,hoe,BHe,xBe,mi,lg,poe,Pw,PHe,uoe,IHe,$Be,wo,Iw,qHe,qw,NHe,Dk,jHe,DHe,GHe,Nw,OHe,_oe,VHe,XHe,zHe,Er,jw,QHe,boe,WHe,HHe,Ta,UHe,voe,JHe,YHe,Foe,KHe,ZHe,Toe,eUe,oUe,rUe,k,Ln,Moe,tUe,aUe,Gk,nUe,sUe,Ok,lUe,iUe,dUe,xn,Eoe,cUe,fUe,Vk,mUe,gUe,Xk,hUe,pUe,uUe,$n,Coe,_Ue,bUe,zk,vUe,FUe,Qk,TUe,MUe,EUe,ig,woe,CUe,wUe,Wk,AUe,yUe,LUe,kn,Aoe,xUe,$Ue,Hk,kUe,SUe,Uk,RUe,BUe,PUe,dg,yoe,IUe,qUe,Jk,NUe,jUe,DUe,cg,Loe,GUe,OUe,Yk,VUe,XUe,zUe,fg,xoe,QUe,WUe,Kk,HUe,UUe,JUe,Sn,$oe,YUe,KUe,Zk,ZUe,eJe,eS,oJe,rJe,tJe,Rn,koe,aJe,nJe,oS,sJe,lJe,rS,iJe,dJe,cJe,Bn,Soe,fJe,mJe,tS,gJe,hJe,aS,pJe,uJe,_Je,mg,Roe,bJe,vJe,nS,FJe,TJe,MJe,gg,Boe,EJe,CJe,sS,wJe,AJe,yJe,Pn,Poe,LJe,xJe,lS,$Je,kJe,iS,SJe,RJe,BJe,hg,Ioe,PJe,IJe,dS,qJe,NJe,jJe,In,qoe,DJe,GJe,cS,OJe,VJe,fS,XJe,zJe,QJe,qn,Noe,WJe,HJe,mS,UJe,JJe,gS,YJe,KJe,ZJe,Nn,joe,eYe,oYe,hS,rYe,tYe,pS,aYe,nYe,sYe,pg,Doe,lYe,iYe,uS,dYe,cYe,fYe,jn,Goe,mYe,gYe,_S,hYe,pYe,bS,uYe,_Ye,bYe,Dn,Ooe,vYe,FYe,vS,TYe,MYe,FS,EYe,CYe,wYe,Gn,Voe,AYe,yYe,TS,LYe,xYe,MS,$Ye,kYe,SYe,On,Xoe,RYe,BYe,ES,PYe,IYe,CS,qYe,NYe,jYe,Vn,zoe,DYe,GYe,wS,OYe,VYe,AS,XYe,zYe,QYe,Xn,Qoe,WYe,HYe,yS,UYe,JYe,LS,YYe,KYe,ZYe,ug,Woe,eKe,oKe,xS,rKe,tKe,aKe,zn,Hoe,nKe,sKe,$S,lKe,iKe,kS,dKe,cKe,fKe,_g,Uoe,mKe,gKe,SS,hKe,pKe,uKe,Qn,Joe,_Ke,bKe,RS,vKe,FKe,BS,TKe,MKe,EKe,Wn,Yoe,CKe,wKe,PS,AKe,yKe,IS,LKe,xKe,$Ke,Hn,Koe,kKe,SKe,qS,RKe,BKe,NS,PKe,IKe,qKe,Un,Zoe,NKe,jKe,jS,DKe,GKe,DS,OKe,VKe,XKe,Jn,ere,zKe,QKe,GS,WKe,HKe,OS,UKe,JKe,YKe,bg,ore,KKe,ZKe,VS,eZe,oZe,rZe,Yn,rre,tZe,aZe,XS,nZe,sZe,zS,lZe,iZe,dZe,Kn,tre,cZe,fZe,QS,mZe,gZe,WS,hZe,pZe,uZe,Zn,are,_Ze,bZe,HS,vZe,FZe,US,TZe,MZe,EZe,es,nre,CZe,wZe,JS,AZe,yZe,YS,LZe,xZe,$Ze,os,sre,kZe,SZe,KS,RZe,BZe,ZS,PZe,IZe,qZe,rs,lre,NZe,jZe,eR,DZe,GZe,oR,OZe,VZe,XZe,vg,ire,zZe,QZe,rR,WZe,HZe,UZe,ts,dre,JZe,YZe,tR,KZe,ZZe,aR,eeo,oeo,reo,Fg,cre,teo,aeo,nR,neo,seo,leo,Tg,fre,ieo,deo,sR,ceo,feo,meo,as,mre,geo,heo,lR,peo,ueo,iR,_eo,beo,veo,ns,gre,Feo,Teo,dR,Meo,Eeo,cR,Ceo,weo,Aeo,ss,hre,yeo,Leo,fR,xeo,$eo,mR,keo,Seo,Reo,Mg,pre,Beo,Peo,gR,Ieo,qeo,Neo,ls,ure,jeo,Deo,hR,Geo,Oeo,pR,Veo,Xeo,zeo,is,_re,Qeo,Weo,uR,Heo,Ueo,_R,Jeo,Yeo,Keo,ds,bre,Zeo,eoo,bR,ooo,roo,vR,too,aoo,noo,cs,vre,soo,loo,FR,ioo,doo,TR,coo,foo,moo,fs,Fre,goo,hoo,MR,poo,uoo,ER,_oo,boo,voo,ms,Tre,Foo,Too,CR,Moo,Eoo,wR,Coo,woo,Aoo,Eg,Mre,yoo,Loo,AR,xoo,$oo,koo,Cg,Ere,Soo,Roo,yR,Boo,Poo,Ioo,wg,Cre,qoo,Noo,LR,joo,Doo,Goo,Ag,wre,Ooo,Voo,xR,Xoo,zoo,Qoo,gs,Are,Woo,Hoo,$R,Uoo,Joo,kR,Yoo,Koo,Zoo,yg,yre,ero,oro,SR,rro,tro,aro,hs,Lre,nro,sro,RR,lro,iro,BR,dro,cro,fro,ps,xre,mro,gro,PR,hro,pro,IR,uro,_ro,bro,us,$re,vro,Fro,qR,Tro,Mro,NR,Ero,Cro,wro,_s,kre,Aro,yro,jR,Lro,xro,DR,$ro,kro,Sro,bs,Sre,Rro,Bro,GR,Pro,Iro,OR,qro,Nro,jro,vs,Rre,Dro,Gro,VR,Oro,Vro,XR,Xro,zro,Qro,Lg,Bre,Wro,Hro,zR,Uro,Jro,Yro,xg,Pre,Kro,Zro,QR,eto,oto,rto,Fs,Ire,tto,ato,WR,nto,sto,HR,lto,ito,dto,Ts,qre,cto,fto,UR,mto,gto,JR,hto,pto,uto,Ms,Nre,_to,bto,YR,vto,Fto,KR,Tto,Mto,Eto,$g,jre,Cto,wto,ZR,Ato,yto,Lto,kg,Dre,xto,$to,eB,kto,Sto,Rto,Sg,Gre,Bto,Pto,oB,Ito,qto,Nto,Es,Ore,jto,Dto,rB,Gto,Oto,tB,Vto,Xto,zto,Rg,Vre,Qto,Wto,aB,Hto,Uto,Jto,Bg,Xre,Yto,Kto,nB,Zto,eao,oao,Cs,zre,rao,tao,sB,aao,nao,lB,sao,lao,iao,Pg,Qre,dao,cao,iB,fao,mao,gao,Ig,Wre,hao,pao,dB,uao,_ao,bao,ws,Hre,vao,Fao,cB,Tao,Mao,fB,Eao,Cao,wao,As,Ure,Aao,yao,mB,Lao,xao,gB,$ao,kao,Sao,ys,Jre,Rao,Bao,hB,Pao,Iao,pB,qao,Nao,jao,Ls,Yre,Dao,Gao,uB,Oao,Vao,_B,Xao,zao,Qao,qg,Wao,Ng,Dw,Hao,Kre,Uao,kBe,gi,jg,Zre,Gw,Jao,ete,Yao,SBe,Ao,Ow,Kao,Vw,Zao,bB,eno,ono,rno,Xw,tno,ote,ano,nno,sno,Qe,zw,lno,rte,ino,dno,Ma,cno,tte,fno,mno,ate,gno,hno,nte,pno,uno,_no,te,Dg,ste,bno,vno,vB,Fno,Tno,Mno,Gg,lte,Eno,Cno,FB,wno,Ano,yno,Og,ite,Lno,xno,TB,$no,kno,Sno,Vg,dte,Rno,Bno,MB,Pno,Ino,qno,Xg,cte,Nno,jno,EB,Dno,Gno,Ono,zg,fte,Vno,Xno,CB,zno,Qno,Wno,Qg,mte,Hno,Uno,wB,Jno,Yno,Kno,Wg,gte,Zno,eso,AB,oso,rso,tso,Hg,hte,aso,nso,yB,sso,lso,iso,Ug,pte,dso,cso,LB,fso,mso,gso,Jg,ute,hso,pso,xB,uso,_so,bso,Yg,_te,vso,Fso,$B,Tso,Mso,Eso,Kg,bte,Cso,wso,kB,Aso,yso,Lso,Zg,vte,xso,$so,SB,kso,Sso,Rso,eh,Fte,Bso,Pso,RB,Iso,qso,Nso,oh,Tte,jso,Dso,BB,Gso,Oso,Vso,rh,Mte,Xso,zso,PB,Qso,Wso,Hso,th,Ete,Uso,Jso,IB,Yso,Kso,Zso,ah,Cte,elo,olo,qB,rlo,tlo,alo,nh,wte,nlo,slo,NB,llo,ilo,dlo,sh,Ate,clo,flo,jB,mlo,glo,hlo,lh,yte,plo,ulo,DB,_lo,blo,vlo,ih,Lte,Flo,Tlo,GB,Mlo,Elo,Clo,dh,xte,wlo,Alo,OB,ylo,Llo,xlo,ch,$lo,fh,klo,mh,Qw,Slo,$te,Rlo,RBe,hi,gh,kte,Ww,Blo,Ste,Plo,BBe,yo,Hw,Ilo,Uw,qlo,VB,Nlo,jlo,Dlo,Jw,Glo,Rte,Olo,Vlo,Xlo,We,Yw,zlo,Bte,Qlo,Wlo,pi,Hlo,Pte,Ulo,Jlo,Ite,Ylo,Klo,Zlo,be,hh,qte,eio,oio,XB,rio,tio,aio,ph,Nte,nio,sio,zB,lio,iio,dio,uh,jte,cio,fio,QB,mio,gio,hio,_h,Dte,pio,uio,WB,_io,bio,vio,bh,Gte,Fio,Tio,HB,Mio,Eio,Cio,vh,Ote,wio,Aio,UB,yio,Lio,xio,Fh,Vte,$io,kio,JB,Sio,Rio,Bio,Th,Xte,Pio,Iio,YB,qio,Nio,jio,Mh,zte,Dio,Gio,KB,Oio,Vio,Xio,Eh,Qte,zio,Qio,ZB,Wio,Hio,Uio,Ch,Wte,Jio,Yio,eP,Kio,Zio,edo,wh,Hte,odo,rdo,oP,tdo,ado,ndo,Ah,Ute,sdo,ldo,rP,ido,ddo,cdo,yh,Jte,fdo,mdo,tP,gdo,hdo,pdo,Lh,udo,xh,_do,$h,Kw,bdo,Yte,vdo,PBe,ui,kh,Kte,Zw,Fdo,Zte,Tdo,IBe,Lo,eA,Mdo,_i,Edo,aP,Cdo,wdo,nP,Ado,ydo,Ldo,oA,xdo,eae,$do,kdo,Sdo,Zr,rA,Rdo,oae,Bdo,Pdo,bi,Ido,rae,qdo,Ndo,sP,jdo,Ddo,Gdo,Sh,Odo,He,tA,Vdo,tae,Xdo,zdo,Ea,Qdo,aae,Wdo,Hdo,nae,Udo,Jdo,sae,Ydo,Kdo,Zdo,x,Rh,lae,eco,oco,lP,rco,tco,aco,Bh,iae,nco,sco,iP,lco,ico,dco,Ph,dae,cco,fco,dP,mco,gco,hco,Ih,cae,pco,uco,cP,_co,bco,vco,qh,fae,Fco,Tco,fP,Mco,Eco,Cco,Nh,mae,wco,Aco,mP,yco,Lco,xco,jh,gae,$co,kco,gP,Sco,Rco,Bco,Dh,hae,Pco,Ico,hP,qco,Nco,jco,Gh,pae,Dco,Gco,pP,Oco,Vco,Xco,Oh,uae,zco,Qco,uP,Wco,Hco,Uco,Vh,_ae,Jco,Yco,_P,Kco,Zco,efo,Xh,bae,ofo,rfo,bP,tfo,afo,nfo,zh,vae,sfo,lfo,vP,ifo,dfo,cfo,Qh,Fae,ffo,mfo,FP,gfo,hfo,pfo,Wh,Tae,ufo,_fo,TP,bfo,vfo,Ffo,Hh,Mae,Tfo,Mfo,MP,Efo,Cfo,wfo,Uh,Eae,Afo,yfo,EP,Lfo,xfo,$fo,Jh,Cae,kfo,Sfo,CP,Rfo,Bfo,Pfo,Yh,wae,Ifo,qfo,wP,Nfo,jfo,Dfo,Kh,Aae,Gfo,Ofo,AP,Vfo,Xfo,zfo,Zh,yae,Qfo,Wfo,yP,Hfo,Ufo,Jfo,ep,Lae,Yfo,Kfo,LP,Zfo,emo,omo,op,xae,rmo,tmo,xP,amo,nmo,smo,rp,$ae,lmo,imo,$P,dmo,cmo,fmo,tp,kae,mmo,gmo,kP,hmo,pmo,umo,ap,Sae,_mo,bmo,SP,vmo,Fmo,Tmo,np,Rae,Mmo,Emo,RP,Cmo,wmo,Amo,sp,Bae,ymo,Lmo,BP,xmo,$mo,kmo,lp,Pae,Smo,Rmo,PP,Bmo,Pmo,Imo,ip,Iae,qmo,Nmo,IP,jmo,Dmo,Gmo,xs,qae,Omo,Vmo,qP,Xmo,zmo,NP,Qmo,Wmo,Hmo,dp,Nae,Umo,Jmo,jP,Ymo,Kmo,Zmo,cp,jae,ego,ogo,DP,rgo,tgo,ago,fp,Dae,ngo,sgo,GP,lgo,igo,dgo,mp,Gae,cgo,fgo,OP,mgo,ggo,hgo,gp,Oae,pgo,ugo,VP,_go,bgo,vgo,hp,Vae,Fgo,Tgo,XP,Mgo,Ego,Cgo,pp,Xae,wgo,Ago,zP,ygo,Lgo,xgo,up,zae,$go,kgo,QP,Sgo,Rgo,Bgo,_p,Qae,Pgo,Igo,WP,qgo,Ngo,jgo,bp,Wae,Dgo,Ggo,HP,Ogo,Vgo,Xgo,vp,Hae,zgo,Qgo,UP,Wgo,Hgo,Ugo,Fp,Uae,Jgo,Ygo,JP,Kgo,Zgo,eho,Tp,Jae,oho,rho,YP,tho,aho,nho,Mp,Yae,sho,lho,KP,iho,dho,cho,Ep,Kae,fho,mho,ZP,gho,hho,pho,Cp,Zae,uho,_ho,eI,bho,vho,Fho,wp,ene,Tho,Mho,oI,Eho,Cho,who,Ap,one,Aho,yho,rI,Lho,xho,$ho,yp,rne,kho,Sho,tI,Rho,Bho,Pho,Lp,tne,Iho,qho,aI,Nho,jho,Dho,xp,ane,Gho,Oho,nI,Vho,Xho,zho,$p,nne,Qho,Who,sI,Hho,Uho,Jho,kp,sne,Yho,Kho,lI,Zho,epo,opo,Sp,lne,rpo,tpo,iI,apo,npo,spo,Rp,ine,lpo,ipo,dI,dpo,cpo,fpo,Bp,dne,mpo,gpo,cI,hpo,ppo,upo,Pp,cne,_po,bpo,fI,vpo,Fpo,Tpo,Ip,fne,Mpo,Epo,mI,Cpo,wpo,Apo,qp,mne,ypo,Lpo,gI,xpo,$po,kpo,Np,gne,Spo,Rpo,hI,Bpo,Ppo,Ipo,jp,hne,qpo,Npo,pI,jpo,Dpo,Gpo,Dp,pne,Opo,Vpo,uI,Xpo,zpo,Qpo,Gp,une,Wpo,Hpo,_I,Upo,Jpo,Ypo,Op,_ne,Kpo,Zpo,bI,euo,ouo,ruo,Vp,bne,tuo,auo,vI,nuo,suo,luo,Xp,vne,iuo,duo,FI,cuo,fuo,muo,zp,Fne,guo,huo,TI,puo,uuo,_uo,Qp,Tne,buo,vuo,MI,Fuo,Tuo,Muo,Wp,Mne,Euo,Cuo,EI,wuo,Auo,yuo,Hp,Ene,Luo,xuo,CI,$uo,kuo,Suo,Up,Cne,Ruo,Buo,wI,Puo,Iuo,quo,Jp,wne,Nuo,juo,AI,Duo,Guo,Ouo,Yp,Ane,Vuo,Xuo,yI,zuo,Quo,Wuo,Kp,yne,Huo,Uuo,LI,Juo,Yuo,Kuo,Zp,Lne,Zuo,e_o,xI,o_o,r_o,t_o,eu,xne,a_o,n_o,$I,s_o,l_o,i_o,ou,$ne,d_o,c_o,kI,f_o,m_o,g_o,ru,kne,h_o,p_o,SI,u_o,__o,b_o,tu,Sne,v_o,F_o,RI,T_o,M_o,E_o,au,Rne,C_o,w_o,BI,A_o,y_o,L_o,nu,Bne,x_o,$_o,PI,k_o,S_o,R_o,su,Pne,B_o,P_o,II,I_o,q_o,N_o,lu,Ine,j_o,D_o,qI,G_o,O_o,V_o,iu,qne,X_o,z_o,NI,Q_o,W_o,H_o,du,Nne,U_o,J_o,jI,Y_o,K_o,Z_o,cu,jne,e1o,o1o,DI,r1o,t1o,a1o,fu,Dne,n1o,s1o,GI,l1o,i1o,d1o,mu,Gne,c1o,f1o,OI,m1o,g1o,h1o,gu,One,p1o,u1o,VI,_1o,b1o,v1o,hu,Vne,F1o,T1o,XI,M1o,E1o,C1o,pu,Xne,w1o,A1o,zI,y1o,L1o,x1o,uu,zne,$1o,k1o,QI,S1o,R1o,B1o,_u,Qne,P1o,I1o,WI,q1o,N1o,j1o,bu,Wne,D1o,G1o,HI,O1o,V1o,X1o,vu,z1o,Hne,Q1o,W1o,Une,H1o,U1o,Fu,qBe,vi,Tu,Jne,aA,J1o,Yne,Y1o,NBe,xo,nA,K1o,Fi,Z1o,UI,e8o,o8o,JI,r8o,t8o,a8o,sA,n8o,Kne,s8o,l8o,i8o,et,lA,d8o,Zne,c8o,f8o,Ti,m8o,ese,g8o,h8o,YI,p8o,u8o,_8o,Mu,b8o,Ue,iA,v8o,ose,F8o,T8o,Ca,M8o,rse,E8o,C8o,tse,w8o,A8o,ase,y8o,L8o,x8o,G,Eu,nse,$8o,k8o,KI,S8o,R8o,B8o,Cu,sse,P8o,I8o,ZI,q8o,N8o,j8o,wu,lse,D8o,G8o,eq,O8o,V8o,X8o,Au,ise,z8o,Q8o,oq,W8o,H8o,U8o,yu,dse,J8o,Y8o,rq,K8o,Z8o,ebo,Lu,cse,obo,rbo,tq,tbo,abo,nbo,xu,fse,sbo,lbo,aq,ibo,dbo,cbo,$u,mse,fbo,mbo,nq,gbo,hbo,pbo,ku,gse,ubo,_bo,sq,bbo,vbo,Fbo,Su,hse,Tbo,Mbo,lq,Ebo,Cbo,wbo,Ru,pse,Abo,ybo,iq,Lbo,xbo,$bo,Bu,use,kbo,Sbo,dq,Rbo,Bbo,Pbo,Pu,_se,Ibo,qbo,cq,Nbo,jbo,Dbo,Iu,bse,Gbo,Obo,fq,Vbo,Xbo,zbo,qu,vse,Qbo,Wbo,mq,Hbo,Ubo,Jbo,Nu,Fse,Ybo,Kbo,gq,Zbo,e2o,o2o,ju,Tse,r2o,t2o,hq,a2o,n2o,s2o,Du,Mse,l2o,i2o,pq,d2o,c2o,f2o,Gu,Ese,m2o,g2o,uq,h2o,p2o,u2o,Ou,Cse,_2o,b2o,_q,v2o,F2o,T2o,Vu,wse,M2o,E2o,bq,C2o,w2o,A2o,Xu,Ase,y2o,L2o,vq,x2o,$2o,k2o,zu,yse,S2o,R2o,Fq,B2o,P2o,I2o,Qu,Lse,q2o,N2o,Tq,j2o,D2o,G2o,Wu,xse,O2o,V2o,Mq,X2o,z2o,Q2o,Hu,$se,W2o,H2o,Eq,U2o,J2o,Y2o,Uu,kse,K2o,Z2o,Cq,evo,ovo,rvo,Ju,Sse,tvo,avo,wq,nvo,svo,lvo,Yu,Rse,ivo,dvo,Aq,cvo,fvo,mvo,Ku,Bse,gvo,hvo,yq,pvo,uvo,_vo,Zu,Pse,bvo,vvo,Lq,Fvo,Tvo,Mvo,e_,Ise,Evo,Cvo,xq,wvo,Avo,yvo,o_,qse,Lvo,xvo,$q,$vo,kvo,Svo,r_,Nse,Rvo,Bvo,kq,Pvo,Ivo,qvo,t_,jse,Nvo,jvo,Sq,Dvo,Gvo,Ovo,a_,Dse,Vvo,Xvo,Rq,zvo,Qvo,Wvo,n_,Gse,Hvo,Uvo,Bq,Jvo,Yvo,Kvo,s_,Ose,Zvo,eFo,Pq,oFo,rFo,tFo,l_,Vse,aFo,nFo,Iq,sFo,lFo,iFo,i_,dFo,Xse,cFo,fFo,zse,mFo,gFo,d_,jBe,Mi,c_,Qse,dA,hFo,Wse,pFo,DBe,$o,cA,uFo,Ei,_Fo,qq,bFo,vFo,Nq,FFo,TFo,MFo,fA,EFo,Hse,CFo,wFo,AFo,ot,mA,yFo,Use,LFo,xFo,Ci,$Fo,Jse,kFo,SFo,jq,RFo,BFo,PFo,f_,IFo,Je,gA,qFo,Yse,NFo,jFo,wa,DFo,Kse,GFo,OFo,Zse,VFo,XFo,ele,zFo,QFo,WFo,z,m_,ole,HFo,UFo,Dq,JFo,YFo,KFo,g_,rle,ZFo,e6o,Gq,o6o,r6o,t6o,h_,tle,a6o,n6o,Oq,s6o,l6o,i6o,p_,ale,d6o,c6o,Vq,f6o,m6o,g6o,u_,nle,h6o,p6o,Xq,u6o,_6o,b6o,__,sle,v6o,F6o,zq,T6o,M6o,E6o,b_,lle,C6o,w6o,Qq,A6o,y6o,L6o,v_,ile,x6o,$6o,Wq,k6o,S6o,R6o,F_,dle,B6o,P6o,Hq,I6o,q6o,N6o,T_,cle,j6o,D6o,Uq,G6o,O6o,V6o,M_,fle,X6o,z6o,Jq,Q6o,W6o,H6o,E_,mle,U6o,J6o,Yq,Y6o,K6o,Z6o,C_,gle,eTo,oTo,Kq,rTo,tTo,aTo,w_,hle,nTo,sTo,Zq,lTo,iTo,dTo,A_,ple,cTo,fTo,eN,mTo,gTo,hTo,y_,ule,pTo,uTo,oN,_To,bTo,vTo,L_,_le,FTo,TTo,rN,MTo,ETo,CTo,x_,ble,wTo,ATo,tN,yTo,LTo,xTo,$_,vle,$To,kTo,aN,STo,RTo,BTo,k_,Fle,PTo,ITo,nN,qTo,NTo,jTo,S_,Tle,DTo,GTo,sN,OTo,VTo,XTo,R_,Mle,zTo,QTo,lN,WTo,HTo,UTo,B_,Ele,JTo,YTo,iN,KTo,ZTo,e9o,P_,Cle,o9o,r9o,dN,t9o,a9o,n9o,I_,wle,s9o,l9o,cN,i9o,d9o,c9o,q_,Ale,f9o,m9o,fN,g9o,h9o,p9o,N_,yle,u9o,_9o,mN,b9o,v9o,F9o,j_,Lle,T9o,M9o,gN,E9o,C9o,w9o,D_,xle,A9o,y9o,hN,L9o,x9o,$9o,G_,$le,k9o,S9o,pN,R9o,B9o,P9o,O_,kle,I9o,q9o,uN,N9o,j9o,D9o,V_,Sle,G9o,O9o,_N,V9o,X9o,z9o,X_,Rle,Q9o,W9o,bN,H9o,U9o,J9o,z_,Ble,Y9o,K9o,vN,Z9o,eMo,oMo,Q_,Ple,rMo,tMo,FN,aMo,nMo,sMo,W_,lMo,Ile,iMo,dMo,qle,cMo,fMo,H_,GBe,wi,U_,Nle,hA,mMo,jle,gMo,OBe,ko,pA,hMo,Ai,pMo,TN,uMo,_Mo,MN,bMo,vMo,FMo,uA,TMo,Dle,MMo,EMo,CMo,rt,_A,wMo,Gle,AMo,yMo,yi,LMo,Ole,xMo,$Mo,EN,kMo,SMo,RMo,J_,BMo,Ye,bA,PMo,Vle,IMo,qMo,Aa,NMo,Xle,jMo,DMo,zle,GMo,OMo,Qle,VMo,XMo,zMo,Q,Y_,Wle,QMo,WMo,CN,HMo,UMo,JMo,K_,Hle,YMo,KMo,wN,ZMo,e4o,o4o,Z_,Ule,r4o,t4o,AN,a4o,n4o,s4o,e1,Jle,l4o,i4o,yN,d4o,c4o,f4o,o1,Yle,m4o,g4o,LN,h4o,p4o,u4o,r1,Kle,_4o,b4o,xN,v4o,F4o,T4o,t1,Zle,M4o,E4o,$N,C4o,w4o,A4o,a1,eie,y4o,L4o,kN,x4o,$4o,k4o,n1,oie,S4o,R4o,SN,B4o,P4o,I4o,s1,rie,q4o,N4o,RN,j4o,D4o,G4o,l1,tie,O4o,V4o,BN,X4o,z4o,Q4o,i1,aie,W4o,H4o,PN,U4o,J4o,Y4o,d1,nie,K4o,Z4o,IN,eEo,oEo,rEo,c1,sie,tEo,aEo,qN,nEo,sEo,lEo,f1,lie,iEo,dEo,NN,cEo,fEo,mEo,m1,iie,gEo,hEo,jN,pEo,uEo,_Eo,g1,die,bEo,vEo,DN,FEo,TEo,MEo,h1,cie,EEo,CEo,GN,wEo,AEo,yEo,p1,fie,LEo,xEo,ON,$Eo,kEo,SEo,u1,mie,REo,BEo,VN,PEo,IEo,qEo,_1,gie,NEo,jEo,XN,DEo,GEo,OEo,b1,hie,VEo,XEo,zN,zEo,QEo,WEo,v1,pie,HEo,UEo,QN,JEo,YEo,KEo,F1,uie,ZEo,e5o,WN,o5o,r5o,t5o,T1,_ie,a5o,n5o,HN,s5o,l5o,i5o,M1,bie,d5o,c5o,UN,f5o,m5o,g5o,E1,vie,h5o,p5o,JN,u5o,_5o,b5o,C1,Fie,v5o,F5o,YN,T5o,M5o,E5o,w1,Tie,C5o,w5o,KN,A5o,y5o,L5o,A1,Mie,x5o,$5o,ZN,k5o,S5o,R5o,y1,Eie,B5o,P5o,Cie,I5o,q5o,N5o,L1,wie,j5o,D5o,ej,G5o,O5o,V5o,x1,Aie,X5o,z5o,oj,Q5o,W5o,H5o,$1,yie,U5o,J5o,rj,Y5o,K5o,Z5o,k1,Lie,eCo,oCo,tj,rCo,tCo,aCo,S1,nCo,xie,sCo,lCo,$ie,iCo,dCo,R1,VBe,Li,B1,kie,vA,cCo,Sie,fCo,XBe,So,FA,mCo,xi,gCo,aj,hCo,pCo,nj,uCo,_Co,bCo,TA,vCo,Rie,FCo,TCo,MCo,tt,MA,ECo,Bie,CCo,wCo,$i,ACo,Pie,yCo,LCo,sj,xCo,$Co,kCo,P1,SCo,Ke,EA,RCo,Iie,BCo,PCo,ya,ICo,qie,qCo,NCo,Nie,jCo,DCo,jie,GCo,OCo,VCo,he,I1,Die,XCo,zCo,lj,QCo,WCo,HCo,q1,Gie,UCo,JCo,ij,YCo,KCo,ZCo,N1,Oie,e3o,o3o,dj,r3o,t3o,a3o,j1,Vie,n3o,s3o,cj,l3o,i3o,d3o,D1,Xie,c3o,f3o,fj,m3o,g3o,h3o,G1,zie,p3o,u3o,mj,_3o,b3o,v3o,O1,Qie,F3o,T3o,gj,M3o,E3o,C3o,V1,Wie,w3o,A3o,hj,y3o,L3o,x3o,X1,Hie,$3o,k3o,pj,S3o,R3o,B3o,z1,Uie,P3o,I3o,uj,q3o,N3o,j3o,Q1,Jie,D3o,G3o,_j,O3o,V3o,X3o,W1,Yie,z3o,Q3o,bj,W3o,H3o,U3o,H1,Kie,J3o,Y3o,vj,K3o,Z3o,ewo,U1,Zie,owo,rwo,Fj,two,awo,nwo,J1,ede,swo,lwo,Tj,iwo,dwo,cwo,Y1,ode,fwo,mwo,Mj,gwo,hwo,pwo,K1,rde,uwo,_wo,Ej,bwo,vwo,Fwo,Z1,Two,tde,Mwo,Ewo,ade,Cwo,wwo,e8,zBe,ki,o8,nde,CA,Awo,sde,ywo,QBe,Ro,wA,Lwo,Si,xwo,Cj,$wo,kwo,wj,Swo,Rwo,Bwo,AA,Pwo,lde,Iwo,qwo,Nwo,at,yA,jwo,ide,Dwo,Gwo,Ri,Owo,dde,Vwo,Xwo,Aj,zwo,Qwo,Wwo,r8,Hwo,Ze,LA,Uwo,cde,Jwo,Ywo,La,Kwo,fde,Zwo,eAo,mde,oAo,rAo,gde,tAo,aAo,nAo,q,t8,hde,sAo,lAo,yj,iAo,dAo,cAo,a8,pde,fAo,mAo,Lj,gAo,hAo,pAo,n8,ude,uAo,_Ao,xj,bAo,vAo,FAo,s8,_de,TAo,MAo,$j,EAo,CAo,wAo,l8,bde,AAo,yAo,kj,LAo,xAo,$Ao,i8,vde,kAo,SAo,Sj,RAo,BAo,PAo,d8,Fde,IAo,qAo,Rj,NAo,jAo,DAo,c8,Tde,GAo,OAo,Bj,VAo,XAo,zAo,f8,Mde,QAo,WAo,Pj,HAo,UAo,JAo,m8,Ede,YAo,KAo,Ij,ZAo,e0o,o0o,g8,Cde,r0o,t0o,qj,a0o,n0o,s0o,h8,wde,l0o,i0o,Nj,d0o,c0o,f0o,p8,Ade,m0o,g0o,jj,h0o,p0o,u0o,u8,yde,_0o,b0o,Dj,v0o,F0o,T0o,_8,Lde,M0o,E0o,Gj,C0o,w0o,A0o,b8,xde,y0o,L0o,Oj,x0o,$0o,k0o,v8,$de,S0o,R0o,Vj,B0o,P0o,I0o,F8,kde,q0o,N0o,Xj,j0o,D0o,G0o,T8,Sde,O0o,V0o,zj,X0o,z0o,Q0o,M8,Rde,W0o,H0o,Qj,U0o,J0o,Y0o,E8,Bde,K0o,Z0o,Wj,eyo,oyo,ryo,C8,Pde,tyo,ayo,Hj,nyo,syo,lyo,w8,Ide,iyo,dyo,Uj,cyo,fyo,myo,A8,qde,gyo,hyo,Jj,pyo,uyo,_yo,y8,Nde,byo,vyo,Yj,Fyo,Tyo,Myo,L8,jde,Eyo,Cyo,Kj,wyo,Ayo,yyo,x8,Dde,Lyo,xyo,Zj,$yo,kyo,Syo,$8,Gde,Ryo,Byo,eD,Pyo,Iyo,qyo,k8,Ode,Nyo,jyo,oD,Dyo,Gyo,Oyo,S8,Vde,Vyo,Xyo,rD,zyo,Qyo,Wyo,R8,Xde,Hyo,Uyo,tD,Jyo,Yyo,Kyo,B8,zde,Zyo,eLo,aD,oLo,rLo,tLo,P8,Qde,aLo,nLo,nD,sLo,lLo,iLo,I8,Wde,dLo,cLo,sD,fLo,mLo,gLo,q8,Hde,hLo,pLo,lD,uLo,_Lo,bLo,N8,Ude,vLo,FLo,iD,TLo,MLo,ELo,j8,Jde,CLo,wLo,dD,ALo,yLo,LLo,D8,Yde,xLo,$Lo,cD,kLo,SLo,RLo,G8,Kde,BLo,PLo,fD,ILo,qLo,NLo,O8,Zde,jLo,DLo,mD,GLo,OLo,VLo,V8,ece,XLo,zLo,gD,QLo,WLo,HLo,X8,oce,ULo,JLo,hD,YLo,KLo,ZLo,z8,rce,e7o,o7o,pD,r7o,t7o,a7o,Q8,tce,n7o,s7o,uD,l7o,i7o,d7o,W8,ace,c7o,f7o,_D,m7o,g7o,h7o,H8,nce,p7o,u7o,bD,_7o,b7o,v7o,U8,sce,F7o,T7o,vD,M7o,E7o,C7o,J8,w7o,lce,A7o,y7o,ice,L7o,x7o,Y8,WBe,Bi,K8,dce,xA,$7o,cce,k7o,HBe,Bo,$A,S7o,Pi,R7o,FD,B7o,P7o,TD,I7o,q7o,N7o,kA,j7o,fce,D7o,G7o,O7o,nt,SA,V7o,mce,X7o,z7o,Ii,Q7o,gce,W7o,H7o,MD,U7o,J7o,Y7o,Z8,K7o,eo,RA,Z7o,hce,exo,oxo,xa,rxo,pce,txo,axo,uce,nxo,sxo,_ce,lxo,ixo,dxo,Y,eb,bce,cxo,fxo,ED,mxo,gxo,hxo,ob,vce,pxo,uxo,CD,_xo,bxo,vxo,rb,Fce,Fxo,Txo,wD,Mxo,Exo,Cxo,tb,Tce,wxo,Axo,AD,yxo,Lxo,xxo,ab,Mce,$xo,kxo,yD,Sxo,Rxo,Bxo,nb,Ece,Pxo,Ixo,LD,qxo,Nxo,jxo,sb,Cce,Dxo,Gxo,xD,Oxo,Vxo,Xxo,lb,wce,zxo,Qxo,$D,Wxo,Hxo,Uxo,ib,Ace,Jxo,Yxo,kD,Kxo,Zxo,e$o,db,yce,o$o,r$o,SD,t$o,a$o,n$o,cb,Lce,s$o,l$o,RD,i$o,d$o,c$o,fb,xce,f$o,m$o,BD,g$o,h$o,p$o,mb,$ce,u$o,_$o,PD,b$o,v$o,F$o,gb,kce,T$o,M$o,ID,E$o,C$o,w$o,hb,Sce,A$o,y$o,qD,L$o,x$o,$$o,pb,Rce,k$o,S$o,ND,R$o,B$o,P$o,ub,Bce,I$o,q$o,jD,N$o,j$o,D$o,_b,Pce,G$o,O$o,DD,V$o,X$o,z$o,bb,Ice,Q$o,W$o,GD,H$o,U$o,J$o,vb,qce,Y$o,K$o,OD,Z$o,eko,oko,Fb,Nce,rko,tko,VD,ako,nko,sko,Tb,jce,lko,iko,XD,dko,cko,fko,Mb,Dce,mko,gko,zD,hko,pko,uko,Eb,Gce,_ko,bko,QD,vko,Fko,Tko,Cb,Oce,Mko,Eko,WD,Cko,wko,Ako,wb,Vce,yko,Lko,HD,xko,$ko,kko,Ab,Xce,Sko,Rko,UD,Bko,Pko,Iko,yb,zce,qko,Nko,JD,jko,Dko,Gko,Lb,Oko,Qce,Vko,Xko,Wce,zko,Qko,xb,UBe,qi,$b,Hce,BA,Wko,Uce,Hko,JBe,Po,PA,Uko,Ni,Jko,YD,Yko,Kko,KD,Zko,eSo,oSo,IA,rSo,Jce,tSo,aSo,nSo,st,qA,sSo,Yce,lSo,iSo,ji,dSo,Kce,cSo,fSo,ZD,mSo,gSo,hSo,kb,pSo,oo,NA,uSo,Zce,_So,bSo,$a,vSo,efe,FSo,TSo,ofe,MSo,ESo,rfe,CSo,wSo,ASo,Ur,Sb,tfe,ySo,LSo,eG,xSo,$So,kSo,Rb,afe,SSo,RSo,oG,BSo,PSo,ISo,Bb,nfe,qSo,NSo,rG,jSo,DSo,GSo,Pb,sfe,OSo,VSo,tG,XSo,zSo,QSo,Ib,lfe,WSo,HSo,aG,USo,JSo,YSo,qb,KSo,ife,ZSo,eRo,dfe,oRo,rRo,Nb,YBe,Di,jb,cfe,jA,tRo,ffe,aRo,KBe,Io,DA,nRo,Gi,sRo,nG,lRo,iRo,sG,dRo,cRo,fRo,GA,mRo,mfe,gRo,hRo,pRo,lt,OA,uRo,gfe,_Ro,bRo,Oi,vRo,hfe,FRo,TRo,lG,MRo,ERo,CRo,Db,wRo,ro,VA,ARo,pfe,yRo,LRo,ka,xRo,ufe,$Ro,kRo,_fe,SRo,RRo,bfe,BRo,PRo,IRo,U,Gb,vfe,qRo,NRo,iG,jRo,DRo,GRo,Ob,Ffe,ORo,VRo,dG,XRo,zRo,QRo,Vb,Tfe,WRo,HRo,cG,URo,JRo,YRo,Xb,Mfe,KRo,ZRo,fG,eBo,oBo,rBo,zb,Efe,tBo,aBo,mG,nBo,sBo,lBo,Qb,Cfe,iBo,dBo,gG,cBo,fBo,mBo,Wb,wfe,gBo,hBo,hG,pBo,uBo,_Bo,Hb,Afe,bBo,vBo,pG,FBo,TBo,MBo,Ub,yfe,EBo,CBo,uG,wBo,ABo,yBo,Jb,Lfe,LBo,xBo,_G,$Bo,kBo,SBo,Yb,xfe,RBo,BBo,bG,PBo,IBo,qBo,Kb,$fe,NBo,jBo,vG,DBo,GBo,OBo,Zb,kfe,VBo,XBo,FG,zBo,QBo,WBo,e2,Sfe,HBo,UBo,TG,JBo,YBo,KBo,o2,Rfe,ZBo,ePo,MG,oPo,rPo,tPo,r2,Bfe,aPo,nPo,EG,sPo,lPo,iPo,t2,Pfe,dPo,cPo,CG,fPo,mPo,gPo,a2,Ife,hPo,pPo,wG,uPo,_Po,bPo,n2,qfe,vPo,FPo,AG,TPo,MPo,EPo,s2,Nfe,CPo,wPo,yG,APo,yPo,LPo,l2,jfe,xPo,$Po,LG,kPo,SPo,RPo,i2,Dfe,BPo,PPo,xG,IPo,qPo,NPo,d2,Gfe,jPo,DPo,$G,GPo,OPo,VPo,c2,Ofe,XPo,zPo,kG,QPo,WPo,HPo,f2,Vfe,UPo,JPo,SG,YPo,KPo,ZPo,m2,Xfe,eIo,oIo,RG,rIo,tIo,aIo,g2,zfe,nIo,sIo,BG,lIo,iIo,dIo,h2,Qfe,cIo,fIo,PG,mIo,gIo,hIo,p2,Wfe,pIo,uIo,IG,_Io,bIo,vIo,u2,Hfe,FIo,TIo,qG,MIo,EIo,CIo,_2,Ufe,wIo,AIo,NG,yIo,LIo,xIo,b2,Jfe,$Io,kIo,jG,SIo,RIo,BIo,v2,Yfe,PIo,IIo,DG,qIo,NIo,jIo,F2,DIo,Kfe,GIo,OIo,Zfe,VIo,XIo,T2,ZBe,Vi,M2,eme,XA,zIo,ome,QIo,ePe,qo,zA,WIo,Xi,HIo,GG,UIo,JIo,OG,YIo,KIo,ZIo,QA,eqo,rme,oqo,rqo,tqo,it,WA,aqo,tme,nqo,sqo,zi,lqo,ame,iqo,dqo,VG,cqo,fqo,mqo,E2,gqo,to,HA,hqo,nme,pqo,uqo,Sa,_qo,sme,bqo,vqo,lme,Fqo,Tqo,ime,Mqo,Eqo,Cqo,O,C2,dme,wqo,Aqo,XG,yqo,Lqo,xqo,w2,cme,$qo,kqo,zG,Sqo,Rqo,Bqo,A2,fme,Pqo,Iqo,QG,qqo,Nqo,jqo,y2,mme,Dqo,Gqo,WG,Oqo,Vqo,Xqo,L2,gme,zqo,Qqo,HG,Wqo,Hqo,Uqo,x2,hme,Jqo,Yqo,UG,Kqo,Zqo,eNo,$2,pme,oNo,rNo,JG,tNo,aNo,nNo,k2,ume,sNo,lNo,YG,iNo,dNo,cNo,S2,_me,fNo,mNo,KG,gNo,hNo,pNo,R2,bme,uNo,_No,ZG,bNo,vNo,FNo,B2,vme,TNo,MNo,eO,ENo,CNo,wNo,P2,Fme,ANo,yNo,oO,LNo,xNo,$No,I2,Tme,kNo,SNo,rO,RNo,BNo,PNo,q2,Mme,INo,qNo,tO,NNo,jNo,DNo,N2,Eme,GNo,ONo,aO,VNo,XNo,zNo,j2,Cme,QNo,WNo,nO,HNo,UNo,JNo,D2,wme,YNo,KNo,sO,ZNo,ejo,ojo,G2,Ame,rjo,tjo,lO,ajo,njo,sjo,O2,yme,ljo,ijo,iO,djo,cjo,fjo,V2,Lme,mjo,gjo,dO,hjo,pjo,ujo,X2,xme,_jo,bjo,cO,vjo,Fjo,Tjo,z2,$me,Mjo,Ejo,fO,Cjo,wjo,Ajo,Q2,kme,yjo,Ljo,mO,xjo,$jo,kjo,W2,Sme,Sjo,Rjo,gO,Bjo,Pjo,Ijo,H2,Rme,qjo,Njo,hO,jjo,Djo,Gjo,U2,Bme,Ojo,Vjo,pO,Xjo,zjo,Qjo,J2,Pme,Wjo,Hjo,uO,Ujo,Jjo,Yjo,Y2,Ime,Kjo,Zjo,_O,eDo,oDo,rDo,K2,qme,tDo,aDo,bO,nDo,sDo,lDo,Z2,Nme,iDo,dDo,vO,cDo,fDo,mDo,ev,jme,gDo,hDo,FO,pDo,uDo,_Do,ov,Dme,bDo,vDo,TO,FDo,TDo,MDo,rv,Gme,EDo,CDo,MO,wDo,ADo,yDo,tv,Ome,LDo,xDo,EO,$Do,kDo,SDo,av,Vme,RDo,BDo,CO,PDo,IDo,qDo,nv,Xme,NDo,jDo,wO,DDo,GDo,ODo,sv,zme,VDo,XDo,AO,zDo,QDo,WDo,lv,Qme,HDo,UDo,yO,JDo,YDo,KDo,iv,Wme,ZDo,eGo,LO,oGo,rGo,tGo,dv,aGo,Hme,nGo,sGo,Ume,lGo,iGo,cv,oPe,Qi,fv,Jme,UA,dGo,Yme,cGo,rPe,No,JA,fGo,Wi,mGo,xO,gGo,hGo,$O,pGo,uGo,_Go,YA,bGo,Kme,vGo,FGo,TGo,dt,KA,MGo,Zme,EGo,CGo,Hi,wGo,ege,AGo,yGo,kO,LGo,xGo,$Go,mv,kGo,ao,ZA,SGo,oge,RGo,BGo,Ra,PGo,rge,IGo,qGo,tge,NGo,jGo,age,DGo,GGo,OGo,nge,gv,sge,VGo,XGo,SO,zGo,QGo,WGo,hv,HGo,lge,UGo,JGo,ige,YGo,KGo,pv,tPe,Ui,uv,dge,e0,ZGo,cge,eOo,aPe,jo,o0,oOo,Ji,rOo,RO,tOo,aOo,BO,nOo,sOo,lOo,r0,iOo,fge,dOo,cOo,fOo,ct,t0,mOo,mge,gOo,hOo,Yi,pOo,gge,uOo,_Oo,PO,bOo,vOo,FOo,_v,TOo,no,a0,MOo,hge,EOo,COo,Ba,wOo,pge,AOo,yOo,uge,LOo,xOo,_ge,$Oo,kOo,SOo,ve,bv,bge,ROo,BOo,IO,POo,IOo,qOo,vv,vge,NOo,jOo,qO,DOo,GOo,OOo,Fv,Fge,VOo,XOo,NO,zOo,QOo,WOo,$s,Tge,HOo,UOo,jO,JOo,YOo,DO,KOo,ZOo,eVo,Tv,Mge,oVo,rVo,GO,tVo,aVo,nVo,ft,Ege,sVo,lVo,OO,iVo,dVo,VO,cVo,fVo,XO,mVo,gVo,hVo,Mv,Cge,pVo,uVo,zO,_Vo,bVo,vVo,Ev,wge,FVo,TVo,QO,MVo,EVo,CVo,Cv,Age,wVo,AVo,WO,yVo,LVo,xVo,wv,yge,$Vo,kVo,HO,SVo,RVo,BVo,Av,Lge,PVo,IVo,UO,qVo,NVo,jVo,yv,xge,DVo,GVo,JO,OVo,VVo,XVo,Lv,$ge,zVo,QVo,YO,WVo,HVo,UVo,xv,JVo,kge,YVo,KVo,Sge,ZVo,eXo,$v,nPe,Ki,kv,Rge,n0,oXo,Bge,rXo,sPe,Do,s0,tXo,Zi,aXo,KO,nXo,sXo,ZO,lXo,iXo,dXo,l0,cXo,Pge,fXo,mXo,gXo,mt,i0,hXo,Ige,pXo,uXo,ed,_Xo,qge,bXo,vXo,eV,FXo,TXo,MXo,Sv,EXo,so,d0,CXo,Nge,wXo,AXo,Pa,yXo,jge,LXo,xXo,Dge,$Xo,kXo,Gge,SXo,RXo,BXo,Oge,Rv,Vge,PXo,IXo,oV,qXo,NXo,jXo,Bv,DXo,Xge,GXo,OXo,zge,VXo,XXo,Pv,lPe,od,Iv,Qge,c0,zXo,Wge,QXo,iPe,Go,f0,WXo,rd,HXo,rV,UXo,JXo,tV,YXo,KXo,ZXo,m0,ezo,Hge,ozo,rzo,tzo,gt,g0,azo,Uge,nzo,szo,td,lzo,Jge,izo,dzo,aV,czo,fzo,mzo,qv,gzo,lo,h0,hzo,Yge,pzo,uzo,Ia,_zo,Kge,bzo,vzo,Zge,Fzo,Tzo,ehe,Mzo,Ezo,Czo,Ne,Nv,ohe,wzo,Azo,nV,yzo,Lzo,xzo,jv,rhe,$zo,kzo,sV,Szo,Rzo,Bzo,Dv,the,Pzo,Izo,lV,qzo,Nzo,jzo,Gv,ahe,Dzo,Gzo,iV,Ozo,Vzo,Xzo,Ov,nhe,zzo,Qzo,dV,Wzo,Hzo,Uzo,Vv,she,Jzo,Yzo,cV,Kzo,Zzo,eQo,Xv,lhe,oQo,rQo,fV,tQo,aQo,nQo,zv,ihe,sQo,lQo,mV,iQo,dQo,cQo,Qv,fQo,dhe,mQo,gQo,che,hQo,pQo,Wv,dPe,ad,Hv,fhe,p0,uQo,mhe,_Qo,cPe,Oo,u0,bQo,nd,vQo,gV,FQo,TQo,hV,MQo,EQo,CQo,_0,wQo,ghe,AQo,yQo,LQo,ht,b0,xQo,hhe,$Qo,kQo,sd,SQo,phe,RQo,BQo,pV,PQo,IQo,qQo,Uv,NQo,io,v0,jQo,uhe,DQo,GQo,qa,OQo,_he,VQo,XQo,bhe,zQo,QQo,vhe,WQo,HQo,UQo,Na,Jv,Fhe,JQo,YQo,uV,KQo,ZQo,eWo,Yv,The,oWo,rWo,_V,tWo,aWo,nWo,Kv,Mhe,sWo,lWo,bV,iWo,dWo,cWo,Zv,Ehe,fWo,mWo,vV,gWo,hWo,pWo,eF,uWo,Che,_Wo,bWo,whe,vWo,FWo,oF,fPe,ld,rF,Ahe,F0,TWo,yhe,MWo,mPe,Vo,T0,EWo,id,CWo,FV,wWo,AWo,TV,yWo,LWo,xWo,M0,$Wo,Lhe,kWo,SWo,RWo,pt,E0,BWo,xhe,PWo,IWo,dd,qWo,$he,NWo,jWo,MV,DWo,GWo,OWo,tF,VWo,co,C0,XWo,khe,zWo,QWo,ja,WWo,She,HWo,UWo,Rhe,JWo,YWo,Bhe,KWo,ZWo,eHo,je,aF,Phe,oHo,rHo,EV,tHo,aHo,nHo,nF,Ihe,sHo,lHo,CV,iHo,dHo,cHo,sF,qhe,fHo,mHo,wV,gHo,hHo,pHo,lF,Nhe,uHo,_Ho,AV,bHo,vHo,FHo,iF,jhe,THo,MHo,yV,EHo,CHo,wHo,dF,Dhe,AHo,yHo,LV,LHo,xHo,$Ho,cF,Ghe,kHo,SHo,xV,RHo,BHo,PHo,fF,Ohe,IHo,qHo,$V,NHo,jHo,DHo,mF,GHo,Vhe,OHo,VHo,Xhe,XHo,zHo,gF,gPe,cd,hF,zhe,w0,QHo,Qhe,WHo,hPe,Xo,A0,HHo,fd,UHo,kV,JHo,YHo,SV,KHo,ZHo,eUo,y0,oUo,Whe,rUo,tUo,aUo,ut,L0,nUo,Hhe,sUo,lUo,md,iUo,Uhe,dUo,cUo,RV,fUo,mUo,gUo,pF,hUo,fo,x0,pUo,Jhe,uUo,_Uo,Da,bUo,Yhe,vUo,FUo,Khe,TUo,MUo,Zhe,EUo,CUo,wUo,$0,uF,epe,AUo,yUo,BV,LUo,xUo,$Uo,_F,ope,kUo,SUo,PV,RUo,BUo,PUo,bF,IUo,rpe,qUo,NUo,tpe,jUo,DUo,vF,pPe,gd,FF,ape,k0,GUo,npe,OUo,uPe,zo,S0,VUo,hd,XUo,IV,zUo,QUo,qV,WUo,HUo,UUo,R0,JUo,spe,YUo,KUo,ZUo,_t,B0,eJo,lpe,oJo,rJo,pd,tJo,ipe,aJo,nJo,NV,sJo,lJo,iJo,TF,dJo,mo,P0,cJo,dpe,fJo,mJo,Ga,gJo,cpe,hJo,pJo,fpe,uJo,_Jo,mpe,bJo,vJo,FJo,Oa,MF,gpe,TJo,MJo,jV,EJo,CJo,wJo,EF,hpe,AJo,yJo,DV,LJo,xJo,$Jo,CF,ppe,kJo,SJo,GV,RJo,BJo,PJo,wF,upe,IJo,qJo,OV,NJo,jJo,DJo,AF,GJo,_pe,OJo,VJo,bpe,XJo,zJo,yF,_Pe,ud,LF,vpe,I0,QJo,Fpe,WJo,bPe,Qo,q0,HJo,_d,UJo,VV,JJo,YJo,XV,KJo,ZJo,eYo,N0,oYo,Tpe,rYo,tYo,aYo,bt,j0,nYo,Mpe,sYo,lYo,bd,iYo,Epe,dYo,cYo,zV,fYo,mYo,gYo,xF,hYo,go,D0,pYo,Cpe,uYo,_Yo,Va,bYo,wpe,vYo,FYo,Ape,TYo,MYo,ype,EYo,CYo,wYo,vd,$F,Lpe,AYo,yYo,QV,LYo,xYo,$Yo,kF,xpe,kYo,SYo,WV,RYo,BYo,PYo,SF,$pe,IYo,qYo,HV,NYo,jYo,DYo,RF,GYo,kpe,OYo,VYo,Spe,XYo,zYo,BF,vPe,Fd,PF,Rpe,G0,QYo,Bpe,WYo,FPe,Wo,O0,HYo,Td,UYo,UV,JYo,YYo,JV,KYo,ZYo,eKo,V0,oKo,Ppe,rKo,tKo,aKo,vt,X0,nKo,Ipe,sKo,lKo,Md,iKo,qpe,dKo,cKo,YV,fKo,mKo,gKo,IF,hKo,ho,z0,pKo,Npe,uKo,_Ko,Xa,bKo,jpe,vKo,FKo,Dpe,TKo,MKo,Gpe,EKo,CKo,wKo,Q0,qF,Ope,AKo,yKo,KV,LKo,xKo,$Ko,NF,Vpe,kKo,SKo,ZV,RKo,BKo,PKo,jF,IKo,Xpe,qKo,NKo,zpe,jKo,DKo,DF,TPe,Ed,GF,Qpe,W0,GKo,Wpe,OKo,MPe,Ho,H0,VKo,Cd,XKo,eX,zKo,QKo,oX,WKo,HKo,UKo,U0,JKo,Hpe,YKo,KKo,ZKo,Ft,J0,eZo,Upe,oZo,rZo,wd,tZo,Jpe,aZo,nZo,rX,sZo,lZo,iZo,OF,dZo,po,Y0,cZo,Ype,fZo,mZo,za,gZo,Kpe,hZo,pZo,Zpe,uZo,_Zo,eue,bZo,vZo,FZo,oue,VF,rue,TZo,MZo,tX,EZo,CZo,wZo,XF,AZo,tue,yZo,LZo,aue,xZo,$Zo,zF,EPe,Ad,QF,nue,K0,kZo,sue,SZo,CPe,Uo,Z0,RZo,yd,BZo,aX,PZo,IZo,nX,qZo,NZo,jZo,ey,DZo,lue,GZo,OZo,VZo,Tt,oy,XZo,iue,zZo,QZo,Ld,WZo,due,HZo,UZo,sX,JZo,YZo,KZo,WF,ZZo,uo,ry,eer,cue,oer,rer,Qa,ter,fue,aer,ner,mue,ser,ler,gue,ier,der,cer,Wa,HF,hue,fer,mer,lX,ger,her,per,UF,pue,uer,_er,iX,ber,ver,Fer,JF,uue,Ter,Mer,dX,Eer,Cer,wer,YF,_ue,Aer,yer,cX,Ler,xer,$er,KF,ker,bue,Ser,Rer,vue,Ber,Per,ZF,wPe,xd,e6,Fue,ty,Ier,Tue,qer,APe,Jo,ay,Ner,$d,jer,fX,Der,Ger,mX,Oer,Ver,Xer,ny,zer,Mue,Qer,Wer,Her,Mt,sy,Uer,Eue,Jer,Yer,kd,Ker,Cue,Zer,eor,gX,oor,ror,tor,o6,aor,_o,ly,nor,wue,sor,lor,Ha,ior,Aue,dor,cor,yue,mor,gor,Lue,hor,por,uor,xue,r6,$ue,_or,bor,hX,vor,For,Tor,t6,Mor,kue,Eor,Cor,Sue,wor,Aor,a6,yPe,Sd,n6,Rue,iy,yor,Bue,Lor,LPe,Yo,dy,xor,Rd,$or,pX,kor,Sor,uX,Ror,Bor,Por,cy,Ior,Pue,qor,Nor,jor,Et,fy,Dor,Iue,Gor,Oor,Bd,Vor,que,Xor,zor,_X,Qor,Wor,Hor,s6,Uor,Cr,my,Jor,Nue,Yor,Kor,Ua,Zor,jue,err,orr,Due,rrr,trr,Gue,arr,nrr,srr,N,l6,Oue,lrr,irr,bX,drr,crr,frr,i6,Vue,mrr,grr,vX,hrr,prr,urr,d6,Xue,_rr,brr,FX,vrr,Frr,Trr,c6,zue,Mrr,Err,TX,Crr,wrr,Arr,f6,Que,yrr,Lrr,MX,xrr,$rr,krr,m6,Wue,Srr,Rrr,EX,Brr,Prr,Irr,g6,Hue,qrr,Nrr,CX,jrr,Drr,Grr,h6,Uue,Orr,Vrr,wX,Xrr,zrr,Qrr,p6,Jue,Wrr,Hrr,AX,Urr,Jrr,Yrr,u6,Yue,Krr,Zrr,yX,etr,otr,rtr,_6,Kue,ttr,atr,LX,ntr,str,ltr,b6,Zue,itr,dtr,xX,ctr,ftr,mtr,v6,e_e,gtr,htr,$X,ptr,utr,_tr,F6,o_e,btr,vtr,kX,Ftr,Ttr,Mtr,T6,r_e,Etr,Ctr,SX,wtr,Atr,ytr,M6,t_e,Ltr,xtr,RX,$tr,ktr,Str,E6,a_e,Rtr,Btr,BX,Ptr,Itr,qtr,ks,n_e,Ntr,jtr,PX,Dtr,Gtr,IX,Otr,Vtr,Xtr,C6,s_e,ztr,Qtr,qX,Wtr,Htr,Utr,w6,l_e,Jtr,Ytr,NX,Ktr,Ztr,ear,A6,i_e,oar,rar,jX,tar,aar,nar,y6,d_e,sar,lar,DX,iar,dar,car,L6,c_e,far,mar,GX,gar,har,par,x6,f_e,uar,_ar,OX,bar,Far,Tar,$6,m_e,Mar,Ear,VX,Car,war,Aar,k6,g_e,yar,Lar,XX,xar,$ar,kar,S6,h_e,Sar,Rar,zX,Bar,Par,Iar,R6,p_e,qar,Nar,QX,jar,Dar,Gar,B6,u_e,Oar,Var,WX,Xar,zar,Qar,P6,__e,War,Har,HX,Uar,Jar,Yar,I6,b_e,Kar,Zar,UX,enr,onr,rnr,q6,v_e,tnr,anr,JX,nnr,snr,lnr,N6,F_e,inr,dnr,YX,cnr,fnr,mnr,j6,T_e,gnr,hnr,KX,pnr,unr,_nr,D6,M_e,bnr,vnr,ZX,Fnr,Tnr,Mnr,G6,E_e,Enr,Cnr,ez,wnr,Anr,ynr,O6,C_e,Lnr,xnr,oz,$nr,knr,Snr,V6,w_e,Rnr,Bnr,rz,Pnr,Inr,qnr,X6,A_e,Nnr,jnr,tz,Dnr,Gnr,Onr,z6,y_e,Vnr,Xnr,az,znr,Qnr,Wnr,Q6,L_e,Hnr,Unr,nz,Jnr,Ynr,Knr,W6,x_e,Znr,esr,sz,osr,rsr,tsr,H6,$_e,asr,nsr,lz,ssr,lsr,isr,U6,k_e,dsr,csr,iz,fsr,msr,gsr,J6,S_e,hsr,psr,dz,usr,_sr,bsr,Y6,R_e,vsr,Fsr,cz,Tsr,Msr,Esr,K6,xPe,Pd,Z6,B_e,gy,Csr,P_e,wsr,$Pe,Ko,hy,Asr,Id,ysr,fz,Lsr,xsr,mz,$sr,ksr,Ssr,py,Rsr,I_e,Bsr,Psr,Isr,Ct,uy,qsr,q_e,Nsr,jsr,qd,Dsr,N_e,Gsr,Osr,gz,Vsr,Xsr,zsr,eT,Qsr,wr,_y,Wsr,j_e,Hsr,Usr,Ja,Jsr,D_e,Ysr,Ksr,G_e,Zsr,elr,O_e,olr,rlr,tlr,ne,oT,V_e,alr,nlr,hz,slr,llr,ilr,rT,X_e,dlr,clr,pz,flr,mlr,glr,tT,z_e,hlr,plr,uz,ulr,_lr,blr,aT,Q_e,vlr,Flr,_z,Tlr,Mlr,Elr,nT,W_e,Clr,wlr,bz,Alr,ylr,Llr,sT,H_e,xlr,$lr,vz,klr,Slr,Rlr,lT,U_e,Blr,Plr,Fz,Ilr,qlr,Nlr,iT,J_e,jlr,Dlr,Tz,Glr,Olr,Vlr,dT,Y_e,Xlr,zlr,Mz,Qlr,Wlr,Hlr,cT,K_e,Ulr,Jlr,Ez,Ylr,Klr,Zlr,fT,Z_e,eir,oir,Cz,rir,tir,air,mT,e1e,nir,sir,wz,lir,iir,dir,gT,o1e,cir,fir,Az,mir,gir,hir,hT,r1e,pir,uir,yz,_ir,bir,vir,pT,t1e,Fir,Tir,Lz,Mir,Eir,Cir,uT,a1e,wir,Air,xz,yir,Lir,xir,_T,n1e,$ir,kir,$z,Sir,Rir,Bir,bT,s1e,Pir,Iir,kz,qir,Nir,jir,vT,l1e,Dir,Gir,Sz,Oir,Vir,Xir,FT,i1e,zir,Qir,Rz,Wir,Hir,Uir,TT,d1e,Jir,Yir,Bz,Kir,Zir,edr,MT,c1e,odr,rdr,Pz,tdr,adr,ndr,ET,f1e,sdr,ldr,Iz,idr,ddr,cdr,CT,kPe,Nd,wT,m1e,by,fdr,g1e,mdr,SPe,Zo,vy,gdr,jd,hdr,qz,pdr,udr,Nz,_dr,bdr,vdr,Fy,Fdr,h1e,Tdr,Mdr,Edr,wt,Ty,Cdr,p1e,wdr,Adr,Dd,ydr,u1e,Ldr,xdr,jz,$dr,kdr,Sdr,AT,Rdr,Ar,My,Bdr,_1e,Pdr,Idr,Ya,qdr,b1e,Ndr,jdr,v1e,Ddr,Gdr,F1e,Odr,Vdr,Xdr,Te,yT,T1e,zdr,Qdr,Dz,Wdr,Hdr,Udr,LT,M1e,Jdr,Ydr,Gz,Kdr,Zdr,ecr,xT,E1e,ocr,rcr,Oz,tcr,acr,ncr,$T,C1e,scr,lcr,Vz,icr,dcr,ccr,kT,w1e,fcr,mcr,Xz,gcr,hcr,pcr,ST,A1e,ucr,_cr,zz,bcr,vcr,Fcr,RT,y1e,Tcr,Mcr,Qz,Ecr,Ccr,wcr,BT,L1e,Acr,ycr,Wz,Lcr,xcr,$cr,PT,x1e,kcr,Scr,Hz,Rcr,Bcr,Pcr,IT,$1e,Icr,qcr,Uz,Ncr,jcr,Dcr,qT,k1e,Gcr,Ocr,Jz,Vcr,Xcr,zcr,NT,S1e,Qcr,Wcr,Yz,Hcr,Ucr,Jcr,jT,RPe,Gd,DT,R1e,Ey,Ycr,B1e,Kcr,BPe,er,Cy,Zcr,Od,efr,Kz,ofr,rfr,Zz,tfr,afr,nfr,wy,sfr,P1e,lfr,ifr,dfr,At,Ay,cfr,I1e,ffr,mfr,Vd,gfr,q1e,hfr,pfr,eQ,ufr,_fr,bfr,GT,vfr,yr,yy,Ffr,N1e,Tfr,Mfr,Ka,Efr,j1e,Cfr,wfr,D1e,Afr,yfr,G1e,Lfr,xfr,$fr,Za,OT,O1e,kfr,Sfr,oQ,Rfr,Bfr,Pfr,VT,V1e,Ifr,qfr,rQ,Nfr,jfr,Dfr,XT,X1e,Gfr,Ofr,tQ,Vfr,Xfr,zfr,zT,z1e,Qfr,Wfr,aQ,Hfr,Ufr,Jfr,QT,PPe,Xd,WT,Q1e,Ly,Yfr,W1e,Kfr,IPe,or,xy,Zfr,zd,emr,nQ,omr,rmr,sQ,tmr,amr,nmr,$y,smr,H1e,lmr,imr,dmr,yt,ky,cmr,U1e,fmr,mmr,Qd,gmr,J1e,hmr,pmr,lQ,umr,_mr,bmr,HT,vmr,Lr,Sy,Fmr,Y1e,Tmr,Mmr,en,Emr,K1e,Cmr,wmr,Z1e,Amr,ymr,e8e,Lmr,xmr,$mr,ie,UT,o8e,kmr,Smr,iQ,Rmr,Bmr,Pmr,JT,r8e,Imr,qmr,dQ,Nmr,jmr,Dmr,YT,t8e,Gmr,Omr,cQ,Vmr,Xmr,zmr,KT,a8e,Qmr,Wmr,fQ,Hmr,Umr,Jmr,ZT,n8e,Ymr,Kmr,mQ,Zmr,egr,ogr,e9,s8e,rgr,tgr,gQ,agr,ngr,sgr,o9,l8e,lgr,igr,hQ,dgr,cgr,fgr,r9,i8e,mgr,ggr,pQ,hgr,pgr,ugr,t9,d8e,_gr,bgr,uQ,vgr,Fgr,Tgr,a9,c8e,Mgr,Egr,_Q,Cgr,wgr,Agr,n9,f8e,ygr,Lgr,bQ,xgr,$gr,kgr,s9,m8e,Sgr,Rgr,vQ,Bgr,Pgr,Igr,l9,g8e,qgr,Ngr,FQ,jgr,Dgr,Ggr,i9,h8e,Ogr,Vgr,TQ,Xgr,zgr,Qgr,d9,p8e,Wgr,Hgr,MQ,Ugr,Jgr,Ygr,c9,u8e,Kgr,Zgr,EQ,ehr,ohr,rhr,f9,_8e,thr,ahr,CQ,nhr,shr,lhr,m9,b8e,ihr,dhr,wQ,chr,fhr,mhr,g9,v8e,ghr,hhr,AQ,phr,uhr,_hr,h9,F8e,bhr,vhr,yQ,Fhr,Thr,Mhr,p9,qPe,Wd,u9,T8e,Ry,Ehr,M8e,Chr,NPe,rr,By,whr,Hd,Ahr,LQ,yhr,Lhr,xQ,xhr,$hr,khr,Py,Shr,E8e,Rhr,Bhr,Phr,Lt,Iy,Ihr,C8e,qhr,Nhr,Ud,jhr,w8e,Dhr,Ghr,$Q,Ohr,Vhr,Xhr,_9,zhr,xr,qy,Qhr,A8e,Whr,Hhr,on,Uhr,y8e,Jhr,Yhr,L8e,Khr,Zhr,x8e,epr,opr,rpr,ye,b9,$8e,tpr,apr,kQ,npr,spr,lpr,v9,k8e,ipr,dpr,SQ,cpr,fpr,mpr,F9,S8e,gpr,hpr,RQ,ppr,upr,_pr,T9,R8e,bpr,vpr,BQ,Fpr,Tpr,Mpr,M9,B8e,Epr,Cpr,PQ,wpr,Apr,ypr,E9,P8e,Lpr,xpr,IQ,$pr,kpr,Spr,C9,I8e,Rpr,Bpr,qQ,Ppr,Ipr,qpr,w9,q8e,Npr,jpr,NQ,Dpr,Gpr,Opr,A9,N8e,Vpr,Xpr,jQ,zpr,Qpr,Wpr,y9,j8e,Hpr,Upr,DQ,Jpr,Ypr,Kpr,L9,jPe,Jd,x9,D8e,Ny,Zpr,G8e,eur,DPe,tr,jy,our,Yd,rur,GQ,tur,aur,OQ,nur,sur,lur,Dy,iur,O8e,dur,cur,fur,xt,Gy,mur,V8e,gur,hur,Kd,pur,X8e,uur,_ur,VQ,bur,vur,Fur,$9,Tur,$r,Oy,Mur,z8e,Eur,Cur,rn,wur,Q8e,Aur,yur,W8e,Lur,xur,H8e,$ur,kur,Sur,Z,k9,U8e,Rur,Bur,XQ,Pur,Iur,qur,S9,J8e,Nur,jur,zQ,Dur,Gur,Our,R9,Y8e,Vur,Xur,QQ,zur,Qur,Wur,B9,K8e,Hur,Uur,WQ,Jur,Yur,Kur,P9,Z8e,Zur,e_r,HQ,o_r,r_r,t_r,I9,ebe,a_r,n_r,UQ,s_r,l_r,i_r,q9,obe,d_r,c_r,JQ,f_r,m_r,g_r,N9,rbe,h_r,p_r,YQ,u_r,__r,b_r,j9,tbe,v_r,F_r,KQ,T_r,M_r,E_r,D9,abe,C_r,w_r,ZQ,A_r,y_r,L_r,G9,nbe,x_r,$_r,eW,k_r,S_r,R_r,O9,sbe,B_r,P_r,oW,I_r,q_r,N_r,V9,lbe,j_r,D_r,rW,G_r,O_r,V_r,X9,ibe,X_r,z_r,tW,Q_r,W_r,H_r,z9,dbe,U_r,J_r,aW,Y_r,K_r,Z_r,Q9,cbe,e1r,o1r,nW,r1r,t1r,a1r,W9,fbe,n1r,s1r,sW,l1r,i1r,d1r,H9,mbe,c1r,f1r,lW,m1r,g1r,h1r,U9,gbe,p1r,u1r,iW,_1r,b1r,v1r,J9,hbe,F1r,T1r,dW,M1r,E1r,C1r,Y9,pbe,w1r,A1r,cW,y1r,L1r,x1r,K9,ube,$1r,k1r,fW,S1r,R1r,B1r,Z9,_be,P1r,I1r,mW,q1r,N1r,j1r,eM,bbe,D1r,G1r,gW,O1r,V1r,X1r,oM,vbe,z1r,Q1r,hW,W1r,H1r,U1r,rM,Fbe,J1r,Y1r,pW,K1r,Z1r,e8r,tM,GPe,Zd,aM,Tbe,Vy,o8r,Mbe,r8r,OPe,ar,Xy,t8r,ec,a8r,uW,n8r,s8r,_W,l8r,i8r,d8r,zy,c8r,Ebe,f8r,m8r,g8r,$t,Qy,h8r,Cbe,p8r,u8r,oc,_8r,wbe,b8r,v8r,bW,F8r,T8r,M8r,nM,E8r,kr,Wy,C8r,Abe,w8r,A8r,tn,y8r,ybe,L8r,x8r,Lbe,$8r,k8r,xbe,S8r,R8r,B8r,pe,sM,$be,P8r,I8r,vW,q8r,N8r,j8r,lM,kbe,D8r,G8r,FW,O8r,V8r,X8r,iM,Sbe,z8r,Q8r,TW,W8r,H8r,U8r,dM,Rbe,J8r,Y8r,MW,K8r,Z8r,ebr,cM,Bbe,obr,rbr,EW,tbr,abr,nbr,fM,Pbe,sbr,lbr,CW,ibr,dbr,cbr,mM,Ibe,fbr,mbr,wW,gbr,hbr,pbr,gM,qbe,ubr,_br,AW,bbr,vbr,Fbr,hM,Nbe,Tbr,Mbr,yW,Ebr,Cbr,wbr,pM,jbe,Abr,ybr,LW,Lbr,xbr,$br,uM,Dbe,kbr,Sbr,xW,Rbr,Bbr,Pbr,_M,Gbe,Ibr,qbr,$W,Nbr,jbr,Dbr,bM,Obe,Gbr,Obr,kW,Vbr,Xbr,zbr,vM,Vbe,Qbr,Wbr,SW,Hbr,Ubr,Jbr,FM,Xbe,Ybr,Kbr,RW,Zbr,e2r,o2r,TM,zbe,r2r,t2r,BW,a2r,n2r,s2r,MM,Qbe,l2r,i2r,PW,d2r,c2r,f2r,EM,VPe,rc,CM,Wbe,Hy,m2r,Hbe,g2r,XPe,nr,Uy,h2r,tc,p2r,IW,u2r,_2r,qW,b2r,v2r,F2r,Jy,T2r,Ube,M2r,E2r,C2r,kt,Yy,w2r,Jbe,A2r,y2r,ac,L2r,Ybe,x2r,$2r,NW,k2r,S2r,R2r,wM,B2r,Sr,Ky,P2r,Kbe,I2r,q2r,an,N2r,Zbe,j2r,D2r,e2e,G2r,O2r,o2e,V2r,X2r,z2r,r2e,AM,t2e,Q2r,W2r,jW,H2r,U2r,J2r,yM,zPe,nc,LM,a2e,Zy,Y2r,n2e,K2r,QPe,sr,eL,Z2r,sc,evr,DW,ovr,rvr,GW,tvr,avr,nvr,oL,svr,s2e,lvr,ivr,dvr,St,rL,cvr,l2e,fvr,mvr,lc,gvr,i2e,hvr,pvr,OW,uvr,_vr,bvr,xM,vvr,Rr,tL,Fvr,d2e,Tvr,Mvr,nn,Evr,c2e,Cvr,wvr,f2e,Avr,yvr,m2e,Lvr,xvr,$vr,de,$M,g2e,kvr,Svr,VW,Rvr,Bvr,Pvr,kM,h2e,Ivr,qvr,XW,Nvr,jvr,Dvr,SM,p2e,Gvr,Ovr,zW,Vvr,Xvr,zvr,RM,u2e,Qvr,Wvr,QW,Hvr,Uvr,Jvr,BM,_2e,Yvr,Kvr,WW,Zvr,eFr,oFr,PM,b2e,rFr,tFr,HW,aFr,nFr,sFr,IM,v2e,lFr,iFr,UW,dFr,cFr,fFr,qM,F2e,mFr,gFr,JW,hFr,pFr,uFr,NM,T2e,_Fr,bFr,YW,vFr,FFr,TFr,jM,M2e,MFr,EFr,KW,CFr,wFr,AFr,DM,E2e,yFr,LFr,ZW,xFr,$Fr,kFr,GM,C2e,SFr,RFr,eH,BFr,PFr,IFr,OM,w2e,qFr,NFr,oH,jFr,DFr,GFr,VM,A2e,OFr,VFr,rH,XFr,zFr,QFr,XM,y2e,WFr,HFr,tH,UFr,JFr,YFr,zM,L2e,KFr,ZFr,aH,e6r,o6r,r6r,QM,x2e,t6r,a6r,nH,n6r,s6r,l6r,WM,$2e,i6r,d6r,sH,c6r,f6r,m6r,HM,k2e,g6r,h6r,lH,p6r,u6r,_6r,UM,S2e,b6r,v6r,iH,F6r,T6r,M6r,JM,WPe,ic,YM,R2e,aL,E6r,B2e,C6r,HPe,lr,nL,w6r,dc,A6r,dH,y6r,L6r,cH,x6r,$6r,k6r,sL,S6r,P2e,R6r,B6r,P6r,Rt,lL,I6r,I2e,q6r,N6r,cc,j6r,q2e,D6r,G6r,fH,O6r,V6r,X6r,KM,z6r,Br,iL,Q6r,N2e,W6r,H6r,sn,U6r,j2e,J6r,Y6r,D2e,K6r,Z6r,G2e,eTr,oTr,rTr,ce,ZM,O2e,tTr,aTr,mH,nTr,sTr,lTr,e4,V2e,iTr,dTr,gH,cTr,fTr,mTr,o4,X2e,gTr,hTr,hH,pTr,uTr,_Tr,r4,z2e,bTr,vTr,pH,FTr,TTr,MTr,t4,Q2e,ETr,CTr,uH,wTr,ATr,yTr,a4,W2e,LTr,xTr,_H,$Tr,kTr,STr,n4,H2e,RTr,BTr,bH,PTr,ITr,qTr,s4,U2e,NTr,jTr,vH,DTr,GTr,OTr,l4,J2e,VTr,XTr,FH,zTr,QTr,WTr,i4,Y2e,HTr,UTr,TH,JTr,YTr,KTr,d4,K2e,ZTr,e9r,MH,o9r,r9r,t9r,c4,Z2e,a9r,n9r,EH,s9r,l9r,i9r,f4,eve,d9r,c9r,CH,f9r,m9r,g9r,m4,ove,h9r,p9r,wH,u9r,_9r,b9r,g4,rve,v9r,F9r,AH,T9r,M9r,E9r,h4,tve,C9r,w9r,yH,A9r,y9r,L9r,p4,ave,x9r,$9r,LH,k9r,S9r,R9r,u4,nve,B9r,P9r,xH,I9r,q9r,N9r,_4,sve,j9r,D9r,$H,G9r,O9r,V9r,b4,lve,X9r,z9r,kH,Q9r,W9r,H9r,v4,UPe,fc,F4,ive,dL,U9r,dve,J9r,JPe,ir,cL,Y9r,mc,K9r,SH,Z9r,eMr,RH,oMr,rMr,tMr,fL,aMr,cve,nMr,sMr,lMr,Bt,mL,iMr,fve,dMr,cMr,gc,fMr,mve,mMr,gMr,BH,hMr,pMr,uMr,T4,_Mr,Pr,gL,bMr,gve,vMr,FMr,ln,TMr,hve,MMr,EMr,pve,CMr,wMr,uve,AMr,yMr,LMr,_ve,M4,bve,xMr,$Mr,PH,kMr,SMr,RMr,E4,YPe,hc,C4,vve,hL,BMr,Fve,PMr,KPe,dr,pL,IMr,pc,qMr,IH,NMr,jMr,qH,DMr,GMr,OMr,uL,VMr,Tve,XMr,zMr,QMr,Pt,_L,WMr,Mve,HMr,UMr,uc,JMr,Eve,YMr,KMr,NH,ZMr,e4r,o4r,w4,r4r,Ir,bL,t4r,Cve,a4r,n4r,dn,s4r,wve,l4r,i4r,Ave,d4r,c4r,yve,f4r,m4r,g4r,Lve,A4,xve,h4r,p4r,jH,u4r,_4r,b4r,y4,ZPe,_c,L4,$ve,vL,v4r,kve,F4r,eIe,cr,FL,T4r,bc,M4r,DH,E4r,C4r,GH,w4r,A4r,y4r,TL,L4r,Sve,x4r,$4r,k4r,It,ML,S4r,Rve,R4r,B4r,vc,P4r,Bve,I4r,q4r,OH,N4r,j4r,D4r,x4,G4r,qr,EL,O4r,Pve,V4r,X4r,cn,z4r,Ive,Q4r,W4r,qve,H4r,U4r,Nve,J4r,Y4r,K4r,oe,$4,jve,Z4r,eEr,VH,oEr,rEr,tEr,k4,Dve,aEr,nEr,XH,sEr,lEr,iEr,S4,Gve,dEr,cEr,zH,fEr,mEr,gEr,R4,Ove,hEr,pEr,QH,uEr,_Er,bEr,B4,Vve,vEr,FEr,WH,TEr,MEr,EEr,P4,Xve,CEr,wEr,HH,AEr,yEr,LEr,I4,zve,xEr,$Er,UH,kEr,SEr,REr,q4,Qve,BEr,PEr,JH,IEr,qEr,NEr,N4,Wve,jEr,DEr,YH,GEr,OEr,VEr,j4,Hve,XEr,zEr,KH,QEr,WEr,HEr,D4,Uve,UEr,JEr,ZH,YEr,KEr,ZEr,G4,Jve,e5r,o5r,eU,r5r,t5r,a5r,O4,Yve,n5r,s5r,oU,l5r,i5r,d5r,V4,Kve,c5r,f5r,rU,m5r,g5r,h5r,X4,Zve,p5r,u5r,tU,_5r,b5r,v5r,z4,eFe,F5r,T5r,aU,M5r,E5r,C5r,Q4,oFe,w5r,A5r,nU,y5r,L5r,x5r,W4,rFe,$5r,k5r,sU,S5r,R5r,B5r,H4,tFe,P5r,I5r,lU,q5r,N5r,j5r,U4,aFe,D5r,G5r,iU,O5r,V5r,X5r,J4,nFe,z5r,Q5r,dU,W5r,H5r,U5r,Y4,sFe,J5r,Y5r,cU,K5r,Z5r,eCr,K4,lFe,oCr,rCr,fU,tCr,aCr,nCr,Z4,iFe,sCr,lCr,mU,iCr,dCr,cCr,eE,dFe,fCr,mCr,gU,gCr,hCr,pCr,oE,oIe,Fc,rE,cFe,CL,uCr,fFe,_Cr,rIe,fr,wL,bCr,Tc,vCr,hU,FCr,TCr,pU,MCr,ECr,CCr,AL,wCr,mFe,ACr,yCr,LCr,qt,yL,xCr,gFe,$Cr,kCr,Mc,SCr,hFe,RCr,BCr,uU,PCr,ICr,qCr,tE,NCr,Nr,LL,jCr,pFe,DCr,GCr,fn,OCr,uFe,VCr,XCr,_Fe,zCr,QCr,bFe,WCr,HCr,UCr,ke,aE,vFe,JCr,YCr,_U,KCr,ZCr,e3r,nE,FFe,o3r,r3r,bU,t3r,a3r,n3r,sE,TFe,s3r,l3r,vU,i3r,d3r,c3r,lE,MFe,f3r,m3r,FU,g3r,h3r,p3r,iE,EFe,u3r,_3r,TU,b3r,v3r,F3r,dE,CFe,T3r,M3r,MU,E3r,C3r,w3r,cE,wFe,A3r,y3r,EU,L3r,x3r,$3r,fE,AFe,k3r,S3r,CU,R3r,B3r,P3r,mE,yFe,I3r,q3r,wU,N3r,j3r,D3r,gE,tIe,Ec,hE,LFe,xL,G3r,xFe,O3r,aIe,mr,$L,V3r,Cc,X3r,AU,z3r,Q3r,yU,W3r,H3r,U3r,kL,J3r,$Fe,Y3r,K3r,Z3r,Nt,SL,ewr,kFe,owr,rwr,wc,twr,SFe,awr,nwr,LU,swr,lwr,iwr,pE,dwr,jr,RL,cwr,RFe,fwr,mwr,mn,gwr,BFe,hwr,pwr,PFe,uwr,_wr,IFe,bwr,vwr,Fwr,Me,uE,qFe,Twr,Mwr,xU,Ewr,Cwr,wwr,_E,NFe,Awr,ywr,$U,Lwr,xwr,$wr,bE,jFe,kwr,Swr,kU,Rwr,Bwr,Pwr,vE,DFe,Iwr,qwr,SU,Nwr,jwr,Dwr,FE,GFe,Gwr,Owr,RU,Vwr,Xwr,zwr,TE,OFe,Qwr,Wwr,BU,Hwr,Uwr,Jwr,ME,VFe,Ywr,Kwr,PU,Zwr,eAr,oAr,EE,XFe,rAr,tAr,IU,aAr,nAr,sAr,CE,zFe,lAr,iAr,qU,dAr,cAr,fAr,wE,QFe,mAr,gAr,NU,hAr,pAr,uAr,AE,WFe,_Ar,bAr,jU,vAr,FAr,TAr,yE,HFe,MAr,EAr,DU,CAr,wAr,AAr,LE,nIe,Ac,xE,UFe,BL,yAr,JFe,LAr,sIe,gr,PL,xAr,yc,$Ar,GU,kAr,SAr,OU,RAr,BAr,PAr,IL,IAr,YFe,qAr,NAr,jAr,jt,qL,DAr,KFe,GAr,OAr,Lc,VAr,ZFe,XAr,zAr,VU,QAr,WAr,HAr,$E,UAr,Dr,NL,JAr,e6e,YAr,KAr,gn,ZAr,o6e,e0r,o0r,r6e,r0r,t0r,t6e,a0r,n0r,s0r,Le,kE,a6e,l0r,i0r,XU,d0r,c0r,f0r,SE,n6e,m0r,g0r,zU,h0r,p0r,u0r,RE,s6e,_0r,b0r,QU,v0r,F0r,T0r,BE,l6e,M0r,E0r,WU,C0r,w0r,A0r,PE,i6e,y0r,L0r,HU,x0r,$0r,k0r,IE,d6e,S0r,R0r,UU,B0r,P0r,I0r,qE,c6e,q0r,N0r,JU,j0r,D0r,G0r,NE,f6e,O0r,V0r,YU,X0r,z0r,Q0r,jE,m6e,W0r,H0r,KU,U0r,J0r,Y0r,DE,g6e,K0r,Z0r,ZU,eyr,oyr,ryr,GE,lIe,xc,OE,h6e,jL,tyr,p6e,ayr,iIe,hr,DL,nyr,$c,syr,eJ,lyr,iyr,oJ,dyr,cyr,fyr,GL,myr,u6e,gyr,hyr,pyr,Dt,OL,uyr,_6e,_yr,byr,kc,vyr,b6e,Fyr,Tyr,rJ,Myr,Eyr,Cyr,VE,wyr,Gr,VL,Ayr,v6e,yyr,Lyr,hn,xyr,F6e,$yr,kyr,T6e,Syr,Ryr,M6e,Byr,Pyr,Iyr,Se,XE,E6e,qyr,Nyr,tJ,jyr,Dyr,Gyr,zE,C6e,Oyr,Vyr,aJ,Xyr,zyr,Qyr,QE,w6e,Wyr,Hyr,nJ,Uyr,Jyr,Yyr,WE,A6e,Kyr,Zyr,sJ,eLr,oLr,rLr,HE,y6e,tLr,aLr,lJ,nLr,sLr,lLr,UE,L6e,iLr,dLr,iJ,cLr,fLr,mLr,JE,x6e,gLr,hLr,dJ,pLr,uLr,_Lr,YE,$6e,bLr,vLr,cJ,FLr,TLr,MLr,KE,k6e,ELr,CLr,fJ,wLr,ALr,yLr,ZE,dIe,Sc,e5,S6e,XL,LLr,R6e,xLr,cIe,pr,zL,$Lr,Rc,kLr,mJ,SLr,RLr,gJ,BLr,PLr,ILr,QL,qLr,B6e,NLr,jLr,DLr,Gt,WL,GLr,P6e,OLr,VLr,Bc,XLr,I6e,zLr,QLr,hJ,WLr,HLr,ULr,o5,JLr,Or,HL,YLr,q6e,KLr,ZLr,pn,e7r,N6e,o7r,r7r,j6e,t7r,a7r,D6e,n7r,s7r,l7r,xe,r5,G6e,i7r,d7r,pJ,c7r,f7r,m7r,t5,O6e,g7r,h7r,uJ,p7r,u7r,_7r,a5,V6e,b7r,v7r,_J,F7r,T7r,M7r,n5,X6e,E7r,C7r,bJ,w7r,A7r,y7r,s5,z6e,L7r,x7r,vJ,$7r,k7r,S7r,l5,Q6e,R7r,B7r,FJ,P7r,I7r,q7r,i5,W6e,N7r,j7r,TJ,D7r,G7r,O7r,d5,H6e,V7r,X7r,MJ,z7r,Q7r,W7r,c5,U6e,H7r,U7r,EJ,J7r,Y7r,K7r,f5,J6e,Z7r,exr,CJ,oxr,rxr,txr,m5,fIe,Pc,g5,Y6e,UL,axr,K6e,nxr,mIe,ur,JL,sxr,Ic,lxr,wJ,ixr,dxr,AJ,cxr,fxr,mxr,YL,gxr,Z6e,hxr,pxr,uxr,Ot,KL,_xr,eTe,bxr,vxr,qc,Fxr,oTe,Txr,Mxr,yJ,Exr,Cxr,wxr,h5,Axr,Vr,ZL,yxr,rTe,Lxr,xxr,un,$xr,tTe,kxr,Sxr,aTe,Rxr,Bxr,nTe,Pxr,Ixr,qxr,$e,p5,sTe,Nxr,jxr,LJ,Dxr,Gxr,Oxr,u5,lTe,Vxr,Xxr,xJ,zxr,Qxr,Wxr,_5,iTe,Hxr,Uxr,$J,Jxr,Yxr,Kxr,b5,dTe,Zxr,e$r,kJ,o$r,r$r,t$r,v5,cTe,a$r,n$r,SJ,s$r,l$r,i$r,F5,fTe,d$r,c$r,RJ,f$r,m$r,g$r,T5,mTe,h$r,p$r,BJ,u$r,_$r,b$r,M5,gTe,v$r,F$r,PJ,T$r,M$r,E$r,E5,hTe,C$r,w$r,IJ,A$r,y$r,L$r,C5,pTe,x$r,$$r,qJ,k$r,S$r,R$r,w5,gIe,Nc,A5,uTe,e7,B$r,_Te,P$r,hIe,_r,o7,I$r,jc,q$r,NJ,N$r,j$r,jJ,D$r,G$r,O$r,r7,V$r,bTe,X$r,z$r,Q$r,Vt,t7,W$r,vTe,H$r,U$r,Dc,J$r,FTe,Y$r,K$r,DJ,Z$r,ekr,okr,y5,rkr,Xr,a7,tkr,TTe,akr,nkr,_n,skr,MTe,lkr,ikr,ETe,dkr,ckr,CTe,fkr,mkr,gkr,De,L5,wTe,hkr,pkr,GJ,ukr,_kr,bkr,x5,ATe,vkr,Fkr,OJ,Tkr,Mkr,Ekr,$5,yTe,Ckr,wkr,VJ,Akr,ykr,Lkr,k5,LTe,xkr,$kr,XJ,kkr,Skr,Rkr,S5,xTe,Bkr,Pkr,zJ,Ikr,qkr,Nkr,R5,$Te,jkr,Dkr,QJ,Gkr,Okr,Vkr,B5,kTe,Xkr,zkr,WJ,Qkr,Wkr,Hkr,P5,STe,Ukr,Jkr,HJ,Ykr,Kkr,Zkr,I5,pIe,Gc,q5,RTe,n7,eSr,BTe,oSr,uIe,br,s7,rSr,Oc,tSr,UJ,aSr,nSr,JJ,sSr,lSr,iSr,l7,dSr,PTe,cSr,fSr,mSr,Xt,i7,gSr,ITe,hSr,pSr,Vc,uSr,qTe,_Sr,bSr,YJ,vSr,FSr,TSr,N5,MSr,zr,d7,ESr,NTe,CSr,wSr,bn,ASr,jTe,ySr,LSr,DTe,xSr,$Sr,GTe,kSr,SSr,RSr,Ge,j5,OTe,BSr,PSr,KJ,ISr,qSr,NSr,D5,VTe,jSr,DSr,ZJ,GSr,OSr,VSr,G5,XTe,XSr,zSr,eY,QSr,WSr,HSr,O5,zTe,USr,JSr,oY,YSr,KSr,ZSr,V5,QTe,eRr,oRr,rY,rRr,tRr,aRr,X5,WTe,nRr,sRr,tY,lRr,iRr,dRr,z5,HTe,cRr,fRr,aY,mRr,gRr,hRr,Q5,UTe,pRr,uRr,nY,_Rr,bRr,vRr,W5,_Ie,Xc,H5,JTe,c7,FRr,YTe,TRr,bIe,vr,f7,MRr,zc,ERr,sY,CRr,wRr,lY,ARr,yRr,LRr,m7,xRr,KTe,$Rr,kRr,SRr,zt,g7,RRr,ZTe,BRr,PRr,Qc,IRr,e9e,qRr,NRr,iY,jRr,DRr,GRr,U5,ORr,Qr,h7,VRr,o9e,XRr,zRr,vn,QRr,r9e,WRr,HRr,t9e,URr,JRr,a9e,YRr,KRr,ZRr,n9e,J5,s9e,eBr,oBr,dY,rBr,tBr,aBr,Y5,vIe,Wc,K5,l9e,p7,nBr,i9e,sBr,FIe,Fr,u7,lBr,Hc,iBr,cY,dBr,cBr,fY,fBr,mBr,gBr,_7,hBr,d9e,pBr,uBr,_Br,Qt,b7,bBr,c9e,vBr,FBr,Uc,TBr,f9e,MBr,EBr,mY,CBr,wBr,ABr,Z5,yBr,Wr,v7,LBr,m9e,xBr,$Br,Fn,kBr,g9e,SBr,RBr,h9e,BBr,PBr,p9e,IBr,qBr,NBr,F7,eC,u9e,jBr,DBr,gY,GBr,OBr,VBr,oC,_9e,XBr,zBr,hY,QBr,WBr,HBr,rC,TIe,Jc,tC,b9e,T7,UBr,v9e,JBr,MIe,Tr,M7,YBr,Yc,KBr,pY,ZBr,ePr,uY,oPr,rPr,tPr,E7,aPr,F9e,nPr,sPr,lPr,Wt,C7,iPr,T9e,dPr,cPr,Kc,fPr,M9e,mPr,gPr,_Y,hPr,pPr,uPr,aC,_Pr,Hr,w7,bPr,E9e,vPr,FPr,Tn,TPr,C9e,MPr,EPr,w9e,CPr,wPr,A9e,APr,yPr,LPr,y9e,nC,L9e,xPr,$Pr,bY,kPr,SPr,RPr,sC,EIe;return d=new ee({}),va=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),yw=new ee({}),Lw=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),lf=new BPr({props:{warning:!0,$$slots:{default:[S5t]},$$scope:{ctx:L}}}),xw=new ee({}),$w=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/configuration_auto.py#L563"}}),Rw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/configuration_auto.py#L586"}}),ng=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[R5t]},$$scope:{ctx:L}}}),Bw=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/configuration_auto.py#L708"}}),Pw=new ee({}),Iw=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/tokenization_auto.py#L377"}}),jw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16988/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/tokenization_auto.py#L391"}}),qg=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[B5t]},$$scope:{ctx:L}}}),Dw=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/tokenization_auto.py#L587"}}),Gw=new ee({}),Ow=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/feature_extraction_auto.py#L177"}}),zw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16988/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/feature_extraction_auto.py#L191"}}),ch=new BPr({props:{$$slots:{default:[P5t]},$$scope:{ctx:L}}}),fh=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[I5t]},$$scope:{ctx:L}}}),Qw=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/feature_extraction_auto.py#L318"}}),Ww=new ee({}),Hw=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/processing_auto.py#L76"}}),Yw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/processing_auto.py#L90"}}),Lh=new BPr({props:{$$slots:{default:[q5t]},$$scope:{ctx:L}}}),xh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[N5t]},$$scope:{ctx:L}}}),Kw=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/processing_auto.py#L243"}}),Zw=new ee({}),eA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L716"}}),rA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),Sh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[j5t]},$$scope:{ctx:L}}}),tA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),Fu=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[D5t]},$$scope:{ctx:L}}}),aA=new ee({}),nA=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L723"}}),lA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),Mu=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[G5t]},$$scope:{ctx:L}}}),iA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),d_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[O5t]},$$scope:{ctx:L}}}),dA=new ee({}),cA=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L738"}}),mA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),f_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[V5t]},$$scope:{ctx:L}}}),gA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),H_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[X5t]},$$scope:{ctx:L}}}),hA=new ee({}),pA=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L745"}}),_A=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),J_=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[z5t]},$$scope:{ctx:L}}}),bA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),R1=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Q5t]},$$scope:{ctx:L}}}),vA=new ee({}),FA=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L752"}}),MA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),P1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[W5t]},$$scope:{ctx:L}}}),EA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),e8=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[H5t]},$$scope:{ctx:L}}}),CA=new ee({}),wA=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L761"}}),yA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),r8=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[U5t]},$$scope:{ctx:L}}}),LA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),Y8=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[J5t]},$$scope:{ctx:L}}}),xA=new ee({}),$A=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L795"}}),SA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),Z8=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[Y5t]},$$scope:{ctx:L}}}),RA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),xb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[K5t]},$$scope:{ctx:L}}}),BA=new ee({}),PA=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L802"}}),qA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),kb=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Z5t]},$$scope:{ctx:L}}}),NA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),Nb=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[eCt]},$$scope:{ctx:L}}}),jA=new ee({}),DA=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L788"}}),OA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),Db=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[oCt]},$$scope:{ctx:L}}}),VA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),T2=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[rCt]},$$scope:{ctx:L}}}),XA=new ee({}),zA=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L770"}}),WA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),E2=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[tCt]},$$scope:{ctx:L}}}),HA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),cv=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[aCt]},$$scope:{ctx:L}}}),UA=new ee({}),JA=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L777"}}),KA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),mv=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[nCt]},$$scope:{ctx:L}}}),ZA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),pv=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[sCt]},$$scope:{ctx:L}}}),e0=new ee({}),o0=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L811"}}),t0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),_v=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[lCt]},$$scope:{ctx:L}}}),a0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),$v=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[iCt]},$$scope:{ctx:L}}}),n0=new ee({}),s0=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L850"}}),i0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),Sv=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[dCt]},$$scope:{ctx:L}}}),d0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),Pv=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[cCt]},$$scope:{ctx:L}}}),c0=new ee({}),f0=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L857"}}),g0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),qv=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[fCt]},$$scope:{ctx:L}}}),h0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),Wv=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[mCt]},$$scope:{ctx:L}}}),p0=new ee({}),u0=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L880"}}),b0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),Uv=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[gCt]},$$scope:{ctx:L}}}),v0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),oF=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[hCt]},$$scope:{ctx:L}}}),F0=new ee({}),T0=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L864"}}),E0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),tF=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[pCt]},$$scope:{ctx:L}}}),C0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),gF=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[uCt]},$$scope:{ctx:L}}}),w0=new ee({}),A0=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L871"}}),L0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),pF=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[_Ct]},$$scope:{ctx:L}}}),x0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),vF=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[bCt]},$$scope:{ctx:L}}}),k0=new ee({}),S0=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L889"}}),B0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),TF=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[vCt]},$$scope:{ctx:L}}}),P0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),yF=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[FCt]},$$scope:{ctx:L}}}),I0=new ee({}),q0=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L896"}}),j0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),xF=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[TCt]},$$scope:{ctx:L}}}),D0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),BF=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[MCt]},$$scope:{ctx:L}}}),G0=new ee({}),O0=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L843"}}),X0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),IF=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[ECt]},$$scope:{ctx:L}}}),z0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),DF=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[CCt]},$$scope:{ctx:L}}}),W0=new ee({}),H0=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L818"}}),J0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),OF=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[wCt]},$$scope:{ctx:L}}}),Y0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),zF=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[ACt]},$$scope:{ctx:L}}}),K0=new ee({}),Z0=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L825"}}),oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),WF=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[yCt]},$$scope:{ctx:L}}}),ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),ZF=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[LCt]},$$scope:{ctx:L}}}),ty=new ee({}),ay=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L834"}}),sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),o6=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[xCt]},$$scope:{ctx:L}}}),ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),a6=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[$Ct]},$$scope:{ctx:L}}}),iy=new ee({}),dy=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),fy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),s6=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[kCt]},$$scope:{ctx:L}}}),my=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),K6=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[SCt]},$$scope:{ctx:L}}}),gy=new ee({}),hy=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),uy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),eT=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[RCt]},$$scope:{ctx:L}}}),_y=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),CT=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[BCt]},$$scope:{ctx:L}}}),by=new ee({}),vy=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),Ty=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),AT=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[PCt]},$$scope:{ctx:L}}}),My=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),jT=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[ICt]},$$scope:{ctx:L}}}),Ey=new ee({}),Cy=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),Ay=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),GT=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[qCt]},$$scope:{ctx:L}}}),yy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),QT=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[NCt]},$$scope:{ctx:L}}}),Ly=new ee({}),xy=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),ky=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),HT=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[jCt]},$$scope:{ctx:L}}}),Sy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),p9=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[DCt]},$$scope:{ctx:L}}}),Ry=new ee({}),By=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),Iy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),_9=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[GCt]},$$scope:{ctx:L}}}),qy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),L9=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[OCt]},$$scope:{ctx:L}}}),Ny=new ee({}),jy=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),Gy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),$9=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[VCt]},$$scope:{ctx:L}}}),Oy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),tM=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[XCt]},$$scope:{ctx:L}}}),Vy=new ee({}),Xy=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),Qy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),nM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[zCt]},$$scope:{ctx:L}}}),Wy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),EM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[QCt]},$$scope:{ctx:L}}}),Hy=new ee({}),Uy=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),Yy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),wM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[WCt]},$$scope:{ctx:L}}}),Ky=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),yM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[HCt]},$$scope:{ctx:L}}}),Zy=new ee({}),eL=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),rL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),xM=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[UCt]},$$scope:{ctx:L}}}),tL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),JM=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[JCt]},$$scope:{ctx:L}}}),aL=new ee({}),nL=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),lL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),KM=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[YCt]},$$scope:{ctx:L}}}),iL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),v4=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[KCt]},$$scope:{ctx:L}}}),dL=new ee({}),cL=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),mL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),T4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[ZCt]},$$scope:{ctx:L}}}),gL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),E4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[e3t]},$$scope:{ctx:L}}}),hL=new ee({}),pL=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),_L=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),w4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[o3t]},$$scope:{ctx:L}}}),bL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),y4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[r3t]},$$scope:{ctx:L}}}),vL=new ee({}),FL=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),ML=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),x4=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[t3t]},$$scope:{ctx:L}}}),EL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),oE=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[a3t]},$$scope:{ctx:L}}}),CL=new ee({}),wL=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),yL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),tE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[n3t]},$$scope:{ctx:L}}}),LL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),gE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[s3t]},$$scope:{ctx:L}}}),xL=new ee({}),$L=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),SL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),pE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[l3t]},$$scope:{ctx:L}}}),RL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),LE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[i3t]},$$scope:{ctx:L}}}),BL=new ee({}),PL=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),qL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),$E=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[d3t]},$$scope:{ctx:L}}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),GE=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[c3t]},$$scope:{ctx:L}}}),jL=new ee({}),DL=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),OL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),VE=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[f3t]},$$scope:{ctx:L}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),ZE=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[m3t]},$$scope:{ctx:L}}}),XL=new ee({}),zL=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),WL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),o5=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[g3t]},$$scope:{ctx:L}}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),m5=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[h3t]},$$scope:{ctx:L}}}),UL=new ee({}),JL=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),KL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),h5=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[p3t]},$$scope:{ctx:L}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),w5=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[u3t]},$$scope:{ctx:L}}}),e7=new ee({}),o7=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),t7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),y5=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[_3t]},$$scope:{ctx:L}}}),a7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),I5=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[b3t]},$$scope:{ctx:L}}}),n7=new ee({}),s7=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),i7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),N5=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[v3t]},$$scope:{ctx:L}}}),d7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),W5=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[F3t]},$$scope:{ctx:L}}}),c7=new ee({}),f7=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),g7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),U5=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[T3t]},$$scope:{ctx:L}}}),h7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),Y5=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[M3t]},$$scope:{ctx:L}}}),p7=new ee({}),u7=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),b7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),Z5=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[E3t]},$$scope:{ctx:L}}}),v7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),rC=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[C3t]},$$scope:{ctx:L}}}),T7=new ee({}),M7=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),C7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),aC=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[w3t]},$$scope:{ctx:L}}}),w7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),sC=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[A3t]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),ri=o("Auto Classes"),rf=l(),Kr=a("p"),ti=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ai=a("code"),Ew=o("from_pretrained()"),tf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qe=l(),Xe=a("p"),ni=o("Instantiating one of "),En=a("a"),Cw=o("AutoConfig"),Cn=o(", "),wn=a("a"),ww=o("AutoModel"),si=o(`, and
`),An=a("a"),Aw=o("AutoTokenizer"),li=o(" will directly create a class of the relevant architecture. For instance"),af=l(),F(va.$$.fragment),ze=l(),Ae=a("p"),Nx=o("will create a model that is an instance of "),ii=a("a"),jx=o("BertModel"),Dx=o("."),Eo=l(),Fa=a("p"),Gx=o("There is one class of "),nf=a("code"),Ox=o("AutoModel"),LNe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),MBe=l(),di=a("h2"),sf=a("a"),dZ=a("span"),F(yw.$$.fragment),xNe=l(),cZ=a("span"),$Ne=o("Extending the Auto Classes"),EBe=l(),yn=a("p"),kNe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),fZ=a("code"),SNe=o("NewModel"),RNe=o(", make sure you have a "),mZ=a("code"),BNe=o("NewModelConfig"),PNe=o(` then you can add those to the auto
classes like this:`),CBe=l(),F(Lw.$$.fragment),wBe=l(),Vx=a("p"),INe=o("You will then be able to use the auto classes like you would usually do!"),ABe=l(),F(lf.$$.fragment),yBe=l(),ci=a("h2"),df=a("a"),gZ=a("span"),F(xw.$$.fragment),qNe=l(),hZ=a("span"),NNe=o("AutoConfig"),LBe=l(),Co=a("div"),F($w.$$.fragment),jNe=l(),kw=a("p"),DNe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Xx=a("a"),GNe=o("from_pretrained()"),ONe=o(" class method."),VNe=l(),Sw=a("p"),XNe=o("This class cannot be instantiated directly using "),pZ=a("code"),zNe=o("__init__()"),QNe=o(" (throws an error)."),WNe=l(),Mr=a("div"),F(Rw.$$.fragment),HNe=l(),uZ=a("p"),UNe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),JNe=l(),fi=a("p"),YNe=o("The configuration class to instantiate is selected based on the "),_Z=a("code"),KNe=o("model_type"),ZNe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),bZ=a("code"),eje=o("pretrained_model_name_or_path"),oje=o(":"),rje=l(),A=a("ul"),cf=a("li"),vZ=a("strong"),tje=o("albert"),aje=o(" \u2014 "),zx=a("a"),nje=o("AlbertConfig"),sje=o(" (ALBERT model)"),lje=l(),ff=a("li"),FZ=a("strong"),ije=o("bart"),dje=o(" \u2014 "),Qx=a("a"),cje=o("BartConfig"),fje=o(" (BART model)"),mje=l(),mf=a("li"),TZ=a("strong"),gje=o("beit"),hje=o(" \u2014 "),Wx=a("a"),pje=o("BeitConfig"),uje=o(" (BEiT model)"),_je=l(),gf=a("li"),MZ=a("strong"),bje=o("bert"),vje=o(" \u2014 "),Hx=a("a"),Fje=o("BertConfig"),Tje=o(" (BERT model)"),Mje=l(),hf=a("li"),EZ=a("strong"),Eje=o("bert-generation"),Cje=o(" \u2014 "),Ux=a("a"),wje=o("BertGenerationConfig"),Aje=o(" (Bert Generation model)"),yje=l(),pf=a("li"),CZ=a("strong"),Lje=o("big_bird"),xje=o(" \u2014 "),Jx=a("a"),$je=o("BigBirdConfig"),kje=o(" (BigBird model)"),Sje=l(),uf=a("li"),wZ=a("strong"),Rje=o("bigbird_pegasus"),Bje=o(" \u2014 "),Yx=a("a"),Pje=o("BigBirdPegasusConfig"),Ije=o(" (BigBirdPegasus model)"),qje=l(),_f=a("li"),AZ=a("strong"),Nje=o("blenderbot"),jje=o(" \u2014 "),Kx=a("a"),Dje=o("BlenderbotConfig"),Gje=o(" (Blenderbot model)"),Oje=l(),bf=a("li"),yZ=a("strong"),Vje=o("blenderbot-small"),Xje=o(" \u2014 "),Zx=a("a"),zje=o("BlenderbotSmallConfig"),Qje=o(" (BlenderbotSmall model)"),Wje=l(),vf=a("li"),LZ=a("strong"),Hje=o("camembert"),Uje=o(" \u2014 "),e$=a("a"),Jje=o("CamembertConfig"),Yje=o(" (CamemBERT model)"),Kje=l(),Ff=a("li"),xZ=a("strong"),Zje=o("canine"),eDe=o(" \u2014 "),o$=a("a"),oDe=o("CanineConfig"),rDe=o(" (Canine model)"),tDe=l(),Tf=a("li"),$Z=a("strong"),aDe=o("clip"),nDe=o(" \u2014 "),r$=a("a"),sDe=o("CLIPConfig"),lDe=o(" (CLIP model)"),iDe=l(),Mf=a("li"),kZ=a("strong"),dDe=o("convbert"),cDe=o(" \u2014 "),t$=a("a"),fDe=o("ConvBertConfig"),mDe=o(" (ConvBERT model)"),gDe=l(),Ef=a("li"),SZ=a("strong"),hDe=o("convnext"),pDe=o(" \u2014 "),a$=a("a"),uDe=o("ConvNextConfig"),_De=o(" (ConvNext model)"),bDe=l(),Cf=a("li"),RZ=a("strong"),vDe=o("ctrl"),FDe=o(" \u2014 "),n$=a("a"),TDe=o("CTRLConfig"),MDe=o(" (CTRL model)"),EDe=l(),wf=a("li"),BZ=a("strong"),CDe=o("data2vec-audio"),wDe=o(" \u2014 "),s$=a("a"),ADe=o("Data2VecAudioConfig"),yDe=o(" (Data2VecAudio model)"),LDe=l(),Af=a("li"),PZ=a("strong"),xDe=o("data2vec-text"),$De=o(" \u2014 "),l$=a("a"),kDe=o("Data2VecTextConfig"),SDe=o(" (Data2VecText model)"),RDe=l(),yf=a("li"),IZ=a("strong"),BDe=o("data2vec-vision"),PDe=o(" \u2014 "),i$=a("a"),IDe=o("Data2VecVisionConfig"),qDe=o(" (Data2VecVision model)"),NDe=l(),Lf=a("li"),qZ=a("strong"),jDe=o("deberta"),DDe=o(" \u2014 "),d$=a("a"),GDe=o("DebertaConfig"),ODe=o(" (DeBERTa model)"),VDe=l(),xf=a("li"),NZ=a("strong"),XDe=o("deberta-v2"),zDe=o(" \u2014 "),c$=a("a"),QDe=o("DebertaV2Config"),WDe=o(" (DeBERTa-v2 model)"),HDe=l(),$f=a("li"),jZ=a("strong"),UDe=o("decision_transformer"),JDe=o(" \u2014 "),f$=a("a"),YDe=o("DecisionTransformerConfig"),KDe=o(" (Decision Transformer model)"),ZDe=l(),kf=a("li"),DZ=a("strong"),eGe=o("deit"),oGe=o(" \u2014 "),m$=a("a"),rGe=o("DeiTConfig"),tGe=o(" (DeiT model)"),aGe=l(),Sf=a("li"),GZ=a("strong"),nGe=o("detr"),sGe=o(" \u2014 "),g$=a("a"),lGe=o("DetrConfig"),iGe=o(" (DETR model)"),dGe=l(),Rf=a("li"),OZ=a("strong"),cGe=o("distilbert"),fGe=o(" \u2014 "),h$=a("a"),mGe=o("DistilBertConfig"),gGe=o(" (DistilBERT model)"),hGe=l(),Bf=a("li"),VZ=a("strong"),pGe=o("dpr"),uGe=o(" \u2014 "),p$=a("a"),_Ge=o("DPRConfig"),bGe=o(" (DPR model)"),vGe=l(),Pf=a("li"),XZ=a("strong"),FGe=o("dpt"),TGe=o(" \u2014 "),u$=a("a"),MGe=o("DPTConfig"),EGe=o(" (DPT model)"),CGe=l(),If=a("li"),zZ=a("strong"),wGe=o("electra"),AGe=o(" \u2014 "),_$=a("a"),yGe=o("ElectraConfig"),LGe=o(" (ELECTRA model)"),xGe=l(),qf=a("li"),QZ=a("strong"),$Ge=o("encoder-decoder"),kGe=o(" \u2014 "),b$=a("a"),SGe=o("EncoderDecoderConfig"),RGe=o(" (Encoder decoder model)"),BGe=l(),Nf=a("li"),WZ=a("strong"),PGe=o("flaubert"),IGe=o(" \u2014 "),v$=a("a"),qGe=o("FlaubertConfig"),NGe=o(" (FlauBERT model)"),jGe=l(),jf=a("li"),HZ=a("strong"),DGe=o("fnet"),GGe=o(" \u2014 "),F$=a("a"),OGe=o("FNetConfig"),VGe=o(" (FNet model)"),XGe=l(),Df=a("li"),UZ=a("strong"),zGe=o("fsmt"),QGe=o(" \u2014 "),T$=a("a"),WGe=o("FSMTConfig"),HGe=o(" (FairSeq Machine-Translation model)"),UGe=l(),Gf=a("li"),JZ=a("strong"),JGe=o("funnel"),YGe=o(" \u2014 "),M$=a("a"),KGe=o("FunnelConfig"),ZGe=o(" (Funnel Transformer model)"),eOe=l(),Of=a("li"),YZ=a("strong"),oOe=o("glpn"),rOe=o(" \u2014 "),E$=a("a"),tOe=o("GLPNConfig"),aOe=o(" (GLPN model)"),nOe=l(),Vf=a("li"),KZ=a("strong"),sOe=o("gpt2"),lOe=o(" \u2014 "),C$=a("a"),iOe=o("GPT2Config"),dOe=o(" (OpenAI GPT-2 model)"),cOe=l(),Xf=a("li"),ZZ=a("strong"),fOe=o("gpt_neo"),mOe=o(" \u2014 "),w$=a("a"),gOe=o("GPTNeoConfig"),hOe=o(" (GPT Neo model)"),pOe=l(),zf=a("li"),eee=a("strong"),uOe=o("gptj"),_Oe=o(" \u2014 "),A$=a("a"),bOe=o("GPTJConfig"),vOe=o(" (GPT-J model)"),FOe=l(),Qf=a("li"),oee=a("strong"),TOe=o("hubert"),MOe=o(" \u2014 "),y$=a("a"),EOe=o("HubertConfig"),COe=o(" (Hubert model)"),wOe=l(),Wf=a("li"),ree=a("strong"),AOe=o("ibert"),yOe=o(" \u2014 "),L$=a("a"),LOe=o("IBertConfig"),xOe=o(" (I-BERT model)"),$Oe=l(),Hf=a("li"),tee=a("strong"),kOe=o("imagegpt"),SOe=o(" \u2014 "),x$=a("a"),ROe=o("ImageGPTConfig"),BOe=o(" (ImageGPT model)"),POe=l(),Uf=a("li"),aee=a("strong"),IOe=o("layoutlm"),qOe=o(" \u2014 "),$$=a("a"),NOe=o("LayoutLMConfig"),jOe=o(" (LayoutLM model)"),DOe=l(),Jf=a("li"),nee=a("strong"),GOe=o("layoutlmv2"),OOe=o(" \u2014 "),k$=a("a"),VOe=o("LayoutLMv2Config"),XOe=o(" (LayoutLMv2 model)"),zOe=l(),Yf=a("li"),see=a("strong"),QOe=o("led"),WOe=o(" \u2014 "),S$=a("a"),HOe=o("LEDConfig"),UOe=o(" (LED model)"),JOe=l(),Kf=a("li"),lee=a("strong"),YOe=o("longformer"),KOe=o(" \u2014 "),R$=a("a"),ZOe=o("LongformerConfig"),eVe=o(" (Longformer model)"),oVe=l(),Zf=a("li"),iee=a("strong"),rVe=o("luke"),tVe=o(" \u2014 "),B$=a("a"),aVe=o("LukeConfig"),nVe=o(" (LUKE model)"),sVe=l(),em=a("li"),dee=a("strong"),lVe=o("lxmert"),iVe=o(" \u2014 "),P$=a("a"),dVe=o("LxmertConfig"),cVe=o(" (LXMERT model)"),fVe=l(),om=a("li"),cee=a("strong"),mVe=o("m2m_100"),gVe=o(" \u2014 "),I$=a("a"),hVe=o("M2M100Config"),pVe=o(" (M2M100 model)"),uVe=l(),rm=a("li"),fee=a("strong"),_Ve=o("marian"),bVe=o(" \u2014 "),q$=a("a"),vVe=o("MarianConfig"),FVe=o(" (Marian model)"),TVe=l(),tm=a("li"),mee=a("strong"),MVe=o("maskformer"),EVe=o(" \u2014 "),N$=a("a"),CVe=o("MaskFormerConfig"),wVe=o(" (MaskFormer model)"),AVe=l(),am=a("li"),gee=a("strong"),yVe=o("mbart"),LVe=o(" \u2014 "),j$=a("a"),xVe=o("MBartConfig"),$Ve=o(" (mBART model)"),kVe=l(),nm=a("li"),hee=a("strong"),SVe=o("megatron-bert"),RVe=o(" \u2014 "),D$=a("a"),BVe=o("MegatronBertConfig"),PVe=o(" (MegatronBert model)"),IVe=l(),sm=a("li"),pee=a("strong"),qVe=o("mobilebert"),NVe=o(" \u2014 "),G$=a("a"),jVe=o("MobileBertConfig"),DVe=o(" (MobileBERT model)"),GVe=l(),lm=a("li"),uee=a("strong"),OVe=o("mpnet"),VVe=o(" \u2014 "),O$=a("a"),XVe=o("MPNetConfig"),zVe=o(" (MPNet model)"),QVe=l(),im=a("li"),_ee=a("strong"),WVe=o("mt5"),HVe=o(" \u2014 "),V$=a("a"),UVe=o("MT5Config"),JVe=o(" (mT5 model)"),YVe=l(),dm=a("li"),bee=a("strong"),KVe=o("nystromformer"),ZVe=o(" \u2014 "),X$=a("a"),eXe=o("NystromformerConfig"),oXe=o(" (Nystromformer model)"),rXe=l(),cm=a("li"),vee=a("strong"),tXe=o("openai-gpt"),aXe=o(" \u2014 "),z$=a("a"),nXe=o("OpenAIGPTConfig"),sXe=o(" (OpenAI GPT model)"),lXe=l(),fm=a("li"),Fee=a("strong"),iXe=o("pegasus"),dXe=o(" \u2014 "),Q$=a("a"),cXe=o("PegasusConfig"),fXe=o(" (Pegasus model)"),mXe=l(),mm=a("li"),Tee=a("strong"),gXe=o("perceiver"),hXe=o(" \u2014 "),W$=a("a"),pXe=o("PerceiverConfig"),uXe=o(" (Perceiver model)"),_Xe=l(),gm=a("li"),Mee=a("strong"),bXe=o("plbart"),vXe=o(" \u2014 "),H$=a("a"),FXe=o("PLBartConfig"),TXe=o(" (PLBart model)"),MXe=l(),hm=a("li"),Eee=a("strong"),EXe=o("poolformer"),CXe=o(" \u2014 "),U$=a("a"),wXe=o("PoolFormerConfig"),AXe=o(" (PoolFormer model)"),yXe=l(),pm=a("li"),Cee=a("strong"),LXe=o("prophetnet"),xXe=o(" \u2014 "),J$=a("a"),$Xe=o("ProphetNetConfig"),kXe=o(" (ProphetNet model)"),SXe=l(),um=a("li"),wee=a("strong"),RXe=o("qdqbert"),BXe=o(" \u2014 "),Y$=a("a"),PXe=o("QDQBertConfig"),IXe=o(" (QDQBert model)"),qXe=l(),_m=a("li"),Aee=a("strong"),NXe=o("rag"),jXe=o(" \u2014 "),K$=a("a"),DXe=o("RagConfig"),GXe=o(" (RAG model)"),OXe=l(),bm=a("li"),yee=a("strong"),VXe=o("realm"),XXe=o(" \u2014 "),Z$=a("a"),zXe=o("RealmConfig"),QXe=o(" (Realm model)"),WXe=l(),vm=a("li"),Lee=a("strong"),HXe=o("reformer"),UXe=o(" \u2014 "),ek=a("a"),JXe=o("ReformerConfig"),YXe=o(" (Reformer model)"),KXe=l(),Fm=a("li"),xee=a("strong"),ZXe=o("regnet"),eze=o(" \u2014 "),ok=a("a"),oze=o("RegNetConfig"),rze=o(" (RegNet model)"),tze=l(),Tm=a("li"),$ee=a("strong"),aze=o("rembert"),nze=o(" \u2014 "),rk=a("a"),sze=o("RemBertConfig"),lze=o(" (RemBERT model)"),ize=l(),Mm=a("li"),kee=a("strong"),dze=o("resnet"),cze=o(" \u2014 "),tk=a("a"),fze=o("ResNetConfig"),mze=o(" (ResNet model)"),gze=l(),Em=a("li"),See=a("strong"),hze=o("retribert"),pze=o(" \u2014 "),ak=a("a"),uze=o("RetriBertConfig"),_ze=o(" (RetriBERT model)"),bze=l(),Cm=a("li"),Ree=a("strong"),vze=o("roberta"),Fze=o(" \u2014 "),nk=a("a"),Tze=o("RobertaConfig"),Mze=o(" (RoBERTa model)"),Eze=l(),wm=a("li"),Bee=a("strong"),Cze=o("roformer"),wze=o(" \u2014 "),sk=a("a"),Aze=o("RoFormerConfig"),yze=o(" (RoFormer model)"),Lze=l(),Am=a("li"),Pee=a("strong"),xze=o("segformer"),$ze=o(" \u2014 "),lk=a("a"),kze=o("SegformerConfig"),Sze=o(" (SegFormer model)"),Rze=l(),ym=a("li"),Iee=a("strong"),Bze=o("sew"),Pze=o(" \u2014 "),ik=a("a"),Ize=o("SEWConfig"),qze=o(" (SEW model)"),Nze=l(),Lm=a("li"),qee=a("strong"),jze=o("sew-d"),Dze=o(" \u2014 "),dk=a("a"),Gze=o("SEWDConfig"),Oze=o(" (SEW-D model)"),Vze=l(),xm=a("li"),Nee=a("strong"),Xze=o("speech-encoder-decoder"),zze=o(" \u2014 "),ck=a("a"),Qze=o("SpeechEncoderDecoderConfig"),Wze=o(" (Speech Encoder decoder model)"),Hze=l(),$m=a("li"),jee=a("strong"),Uze=o("speech_to_text"),Jze=o(" \u2014 "),fk=a("a"),Yze=o("Speech2TextConfig"),Kze=o(" (Speech2Text model)"),Zze=l(),km=a("li"),Dee=a("strong"),eQe=o("speech_to_text_2"),oQe=o(" \u2014 "),mk=a("a"),rQe=o("Speech2Text2Config"),tQe=o(" (Speech2Text2 model)"),aQe=l(),Sm=a("li"),Gee=a("strong"),nQe=o("splinter"),sQe=o(" \u2014 "),gk=a("a"),lQe=o("SplinterConfig"),iQe=o(" (Splinter model)"),dQe=l(),Rm=a("li"),Oee=a("strong"),cQe=o("squeezebert"),fQe=o(" \u2014 "),hk=a("a"),mQe=o("SqueezeBertConfig"),gQe=o(" (SqueezeBERT model)"),hQe=l(),Bm=a("li"),Vee=a("strong"),pQe=o("swin"),uQe=o(" \u2014 "),pk=a("a"),_Qe=o("SwinConfig"),bQe=o(" (Swin model)"),vQe=l(),Pm=a("li"),Xee=a("strong"),FQe=o("t5"),TQe=o(" \u2014 "),uk=a("a"),MQe=o("T5Config"),EQe=o(" (T5 model)"),CQe=l(),Im=a("li"),zee=a("strong"),wQe=o("tapas"),AQe=o(" \u2014 "),_k=a("a"),yQe=o("TapasConfig"),LQe=o(" (TAPAS model)"),xQe=l(),qm=a("li"),Qee=a("strong"),$Qe=o("tapex"),kQe=o(" \u2014 "),bk=a("a"),SQe=o("BartConfig"),RQe=o(" (TAPEX model)"),BQe=l(),Nm=a("li"),Wee=a("strong"),PQe=o("transfo-xl"),IQe=o(" \u2014 "),vk=a("a"),qQe=o("TransfoXLConfig"),NQe=o(" (Transformer-XL model)"),jQe=l(),jm=a("li"),Hee=a("strong"),DQe=o("trocr"),GQe=o(" \u2014 "),Fk=a("a"),OQe=o("TrOCRConfig"),VQe=o(" (TrOCR model)"),XQe=l(),Dm=a("li"),Uee=a("strong"),zQe=o("unispeech"),QQe=o(" \u2014 "),Tk=a("a"),WQe=o("UniSpeechConfig"),HQe=o(" (UniSpeech model)"),UQe=l(),Gm=a("li"),Jee=a("strong"),JQe=o("unispeech-sat"),YQe=o(" \u2014 "),Mk=a("a"),KQe=o("UniSpeechSatConfig"),ZQe=o(" (UniSpeechSat model)"),eWe=l(),Om=a("li"),Yee=a("strong"),oWe=o("van"),rWe=o(" \u2014 "),Ek=a("a"),tWe=o("VanConfig"),aWe=o(" (VAN model)"),nWe=l(),Vm=a("li"),Kee=a("strong"),sWe=o("vilt"),lWe=o(" \u2014 "),Ck=a("a"),iWe=o("ViltConfig"),dWe=o(" (ViLT model)"),cWe=l(),Xm=a("li"),Zee=a("strong"),fWe=o("vision-encoder-decoder"),mWe=o(" \u2014 "),wk=a("a"),gWe=o("VisionEncoderDecoderConfig"),hWe=o(" (Vision Encoder decoder model)"),pWe=l(),zm=a("li"),eoe=a("strong"),uWe=o("vision-text-dual-encoder"),_We=o(" \u2014 "),Ak=a("a"),bWe=o("VisionTextDualEncoderConfig"),vWe=o(" (VisionTextDualEncoder model)"),FWe=l(),Qm=a("li"),ooe=a("strong"),TWe=o("visual_bert"),MWe=o(" \u2014 "),yk=a("a"),EWe=o("VisualBertConfig"),CWe=o(" (VisualBert model)"),wWe=l(),Wm=a("li"),roe=a("strong"),AWe=o("vit"),yWe=o(" \u2014 "),Lk=a("a"),LWe=o("ViTConfig"),xWe=o(" (ViT model)"),$We=l(),Hm=a("li"),toe=a("strong"),kWe=o("vit_mae"),SWe=o(" \u2014 "),xk=a("a"),RWe=o("ViTMAEConfig"),BWe=o(" (ViTMAE model)"),PWe=l(),Um=a("li"),aoe=a("strong"),IWe=o("wav2vec2"),qWe=o(" \u2014 "),$k=a("a"),NWe=o("Wav2Vec2Config"),jWe=o(" (Wav2Vec2 model)"),DWe=l(),Jm=a("li"),noe=a("strong"),GWe=o("wavlm"),OWe=o(" \u2014 "),kk=a("a"),VWe=o("WavLMConfig"),XWe=o(" (WavLM model)"),zWe=l(),Ym=a("li"),soe=a("strong"),QWe=o("xglm"),WWe=o(" \u2014 "),Sk=a("a"),HWe=o("XGLMConfig"),UWe=o(" (XGLM model)"),JWe=l(),Km=a("li"),loe=a("strong"),YWe=o("xlm"),KWe=o(" \u2014 "),Rk=a("a"),ZWe=o("XLMConfig"),eHe=o(" (XLM model)"),oHe=l(),Zm=a("li"),ioe=a("strong"),rHe=o("xlm-prophetnet"),tHe=o(" \u2014 "),Bk=a("a"),aHe=o("XLMProphetNetConfig"),nHe=o(" (XLMProphetNet model)"),sHe=l(),eg=a("li"),doe=a("strong"),lHe=o("xlm-roberta"),iHe=o(" \u2014 "),Pk=a("a"),dHe=o("XLMRobertaConfig"),cHe=o(" (XLM-RoBERTa model)"),fHe=l(),og=a("li"),coe=a("strong"),mHe=o("xlm-roberta-xl"),gHe=o(" \u2014 "),Ik=a("a"),hHe=o("XLMRobertaXLConfig"),pHe=o(" (XLM-RoBERTa-XL model)"),uHe=l(),rg=a("li"),foe=a("strong"),_He=o("xlnet"),bHe=o(" \u2014 "),qk=a("a"),vHe=o("XLNetConfig"),FHe=o(" (XLNet model)"),THe=l(),tg=a("li"),moe=a("strong"),MHe=o("yolos"),EHe=o(" \u2014 "),Nk=a("a"),CHe=o("YolosConfig"),wHe=o(" (YOLOS model)"),AHe=l(),ag=a("li"),goe=a("strong"),yHe=o("yoso"),LHe=o(" \u2014 "),jk=a("a"),xHe=o("YosoConfig"),$He=o(" (YOSO model)"),kHe=l(),F(ng.$$.fragment),SHe=l(),sg=a("div"),F(Bw.$$.fragment),RHe=l(),hoe=a("p"),BHe=o("Register a new configuration for this class."),xBe=l(),mi=a("h2"),lg=a("a"),poe=a("span"),F(Pw.$$.fragment),PHe=l(),uoe=a("span"),IHe=o("AutoTokenizer"),$Be=l(),wo=a("div"),F(Iw.$$.fragment),qHe=l(),qw=a("p"),NHe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Dk=a("a"),jHe=o("AutoTokenizer.from_pretrained()"),DHe=o(" class method."),GHe=l(),Nw=a("p"),OHe=o("This class cannot be instantiated directly using "),_oe=a("code"),VHe=o("__init__()"),XHe=o(" (throws an error)."),zHe=l(),Er=a("div"),F(jw.$$.fragment),QHe=l(),boe=a("p"),WHe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),HHe=l(),Ta=a("p"),UHe=o("The tokenizer class to instantiate is selected based on the "),voe=a("code"),JHe=o("model_type"),YHe=o(` property of the config object (either
passed as an argument or loaded from `),Foe=a("code"),KHe=o("pretrained_model_name_or_path"),ZHe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Toe=a("code"),eUe=o("pretrained_model_name_or_path"),oUe=o(":"),rUe=l(),k=a("ul"),Ln=a("li"),Moe=a("strong"),tUe=o("albert"),aUe=o(" \u2014 "),Gk=a("a"),nUe=o("AlbertTokenizer"),sUe=o(" or "),Ok=a("a"),lUe=o("AlbertTokenizerFast"),iUe=o(" (ALBERT model)"),dUe=l(),xn=a("li"),Eoe=a("strong"),cUe=o("bart"),fUe=o(" \u2014 "),Vk=a("a"),mUe=o("BartTokenizer"),gUe=o(" or "),Xk=a("a"),hUe=o("BartTokenizerFast"),pUe=o(" (BART model)"),uUe=l(),$n=a("li"),Coe=a("strong"),_Ue=o("barthez"),bUe=o(" \u2014 "),zk=a("a"),vUe=o("BarthezTokenizer"),FUe=o(" or "),Qk=a("a"),TUe=o("BarthezTokenizerFast"),MUe=o(" (BARThez model)"),EUe=l(),ig=a("li"),woe=a("strong"),CUe=o("bartpho"),wUe=o(" \u2014 "),Wk=a("a"),AUe=o("BartphoTokenizer"),yUe=o(" (BARTpho model)"),LUe=l(),kn=a("li"),Aoe=a("strong"),xUe=o("bert"),$Ue=o(" \u2014 "),Hk=a("a"),kUe=o("BertTokenizer"),SUe=o(" or "),Uk=a("a"),RUe=o("BertTokenizerFast"),BUe=o(" (BERT model)"),PUe=l(),dg=a("li"),yoe=a("strong"),IUe=o("bert-generation"),qUe=o(" \u2014 "),Jk=a("a"),NUe=o("BertGenerationTokenizer"),jUe=o(" (Bert Generation model)"),DUe=l(),cg=a("li"),Loe=a("strong"),GUe=o("bert-japanese"),OUe=o(" \u2014 "),Yk=a("a"),VUe=o("BertJapaneseTokenizer"),XUe=o(" (BertJapanese model)"),zUe=l(),fg=a("li"),xoe=a("strong"),QUe=o("bertweet"),WUe=o(" \u2014 "),Kk=a("a"),HUe=o("BertweetTokenizer"),UUe=o(" (Bertweet model)"),JUe=l(),Sn=a("li"),$oe=a("strong"),YUe=o("big_bird"),KUe=o(" \u2014 "),Zk=a("a"),ZUe=o("BigBirdTokenizer"),eJe=o(" or "),eS=a("a"),oJe=o("BigBirdTokenizerFast"),rJe=o(" (BigBird model)"),tJe=l(),Rn=a("li"),koe=a("strong"),aJe=o("bigbird_pegasus"),nJe=o(" \u2014 "),oS=a("a"),sJe=o("PegasusTokenizer"),lJe=o(" or "),rS=a("a"),iJe=o("PegasusTokenizerFast"),dJe=o(" (BigBirdPegasus model)"),cJe=l(),Bn=a("li"),Soe=a("strong"),fJe=o("blenderbot"),mJe=o(" \u2014 "),tS=a("a"),gJe=o("BlenderbotTokenizer"),hJe=o(" or "),aS=a("a"),pJe=o("BlenderbotTokenizerFast"),uJe=o(" (Blenderbot model)"),_Je=l(),mg=a("li"),Roe=a("strong"),bJe=o("blenderbot-small"),vJe=o(" \u2014 "),nS=a("a"),FJe=o("BlenderbotSmallTokenizer"),TJe=o(" (BlenderbotSmall model)"),MJe=l(),gg=a("li"),Boe=a("strong"),EJe=o("byt5"),CJe=o(" \u2014 "),sS=a("a"),wJe=o("ByT5Tokenizer"),AJe=o(" (ByT5 model)"),yJe=l(),Pn=a("li"),Poe=a("strong"),LJe=o("camembert"),xJe=o(" \u2014 "),lS=a("a"),$Je=o("CamembertTokenizer"),kJe=o(" or "),iS=a("a"),SJe=o("CamembertTokenizerFast"),RJe=o(" (CamemBERT model)"),BJe=l(),hg=a("li"),Ioe=a("strong"),PJe=o("canine"),IJe=o(" \u2014 "),dS=a("a"),qJe=o("CanineTokenizer"),NJe=o(" (Canine model)"),jJe=l(),In=a("li"),qoe=a("strong"),DJe=o("clip"),GJe=o(" \u2014 "),cS=a("a"),OJe=o("CLIPTokenizer"),VJe=o(" or "),fS=a("a"),XJe=o("CLIPTokenizerFast"),zJe=o(" (CLIP model)"),QJe=l(),qn=a("li"),Noe=a("strong"),WJe=o("convbert"),HJe=o(" \u2014 "),mS=a("a"),UJe=o("ConvBertTokenizer"),JJe=o(" or "),gS=a("a"),YJe=o("ConvBertTokenizerFast"),KJe=o(" (ConvBERT model)"),ZJe=l(),Nn=a("li"),joe=a("strong"),eYe=o("cpm"),oYe=o(" \u2014 "),hS=a("a"),rYe=o("CpmTokenizer"),tYe=o(" or "),pS=a("a"),aYe=o("CpmTokenizerFast"),nYe=o(" (CPM model)"),sYe=l(),pg=a("li"),Doe=a("strong"),lYe=o("ctrl"),iYe=o(" \u2014 "),uS=a("a"),dYe=o("CTRLTokenizer"),cYe=o(" (CTRL model)"),fYe=l(),jn=a("li"),Goe=a("strong"),mYe=o("data2vec-text"),gYe=o(" \u2014 "),_S=a("a"),hYe=o("RobertaTokenizer"),pYe=o(" or "),bS=a("a"),uYe=o("RobertaTokenizerFast"),_Ye=o(" (Data2VecText model)"),bYe=l(),Dn=a("li"),Ooe=a("strong"),vYe=o("deberta"),FYe=o(" \u2014 "),vS=a("a"),TYe=o("DebertaTokenizer"),MYe=o(" or "),FS=a("a"),EYe=o("DebertaTokenizerFast"),CYe=o(" (DeBERTa model)"),wYe=l(),Gn=a("li"),Voe=a("strong"),AYe=o("deberta-v2"),yYe=o(" \u2014 "),TS=a("a"),LYe=o("DebertaV2Tokenizer"),xYe=o(" or "),MS=a("a"),$Ye=o("DebertaV2TokenizerFast"),kYe=o(" (DeBERTa-v2 model)"),SYe=l(),On=a("li"),Xoe=a("strong"),RYe=o("distilbert"),BYe=o(" \u2014 "),ES=a("a"),PYe=o("DistilBertTokenizer"),IYe=o(" or "),CS=a("a"),qYe=o("DistilBertTokenizerFast"),NYe=o(" (DistilBERT model)"),jYe=l(),Vn=a("li"),zoe=a("strong"),DYe=o("dpr"),GYe=o(" \u2014 "),wS=a("a"),OYe=o("DPRQuestionEncoderTokenizer"),VYe=o(" or "),AS=a("a"),XYe=o("DPRQuestionEncoderTokenizerFast"),zYe=o(" (DPR model)"),QYe=l(),Xn=a("li"),Qoe=a("strong"),WYe=o("electra"),HYe=o(" \u2014 "),yS=a("a"),UYe=o("ElectraTokenizer"),JYe=o(" or "),LS=a("a"),YYe=o("ElectraTokenizerFast"),KYe=o(" (ELECTRA model)"),ZYe=l(),ug=a("li"),Woe=a("strong"),eKe=o("flaubert"),oKe=o(" \u2014 "),xS=a("a"),rKe=o("FlaubertTokenizer"),tKe=o(" (FlauBERT model)"),aKe=l(),zn=a("li"),Hoe=a("strong"),nKe=o("fnet"),sKe=o(" \u2014 "),$S=a("a"),lKe=o("FNetTokenizer"),iKe=o(" or "),kS=a("a"),dKe=o("FNetTokenizerFast"),cKe=o(" (FNet model)"),fKe=l(),_g=a("li"),Uoe=a("strong"),mKe=o("fsmt"),gKe=o(" \u2014 "),SS=a("a"),hKe=o("FSMTTokenizer"),pKe=o(" (FairSeq Machine-Translation model)"),uKe=l(),Qn=a("li"),Joe=a("strong"),_Ke=o("funnel"),bKe=o(" \u2014 "),RS=a("a"),vKe=o("FunnelTokenizer"),FKe=o(" or "),BS=a("a"),TKe=o("FunnelTokenizerFast"),MKe=o(" (Funnel Transformer model)"),EKe=l(),Wn=a("li"),Yoe=a("strong"),CKe=o("gpt2"),wKe=o(" \u2014 "),PS=a("a"),AKe=o("GPT2Tokenizer"),yKe=o(" or "),IS=a("a"),LKe=o("GPT2TokenizerFast"),xKe=o(" (OpenAI GPT-2 model)"),$Ke=l(),Hn=a("li"),Koe=a("strong"),kKe=o("gpt_neo"),SKe=o(" \u2014 "),qS=a("a"),RKe=o("GPT2Tokenizer"),BKe=o(" or "),NS=a("a"),PKe=o("GPT2TokenizerFast"),IKe=o(" (GPT Neo model)"),qKe=l(),Un=a("li"),Zoe=a("strong"),NKe=o("gptj"),jKe=o(" \u2014 "),jS=a("a"),DKe=o("GPT2Tokenizer"),GKe=o(" or "),DS=a("a"),OKe=o("GPT2TokenizerFast"),VKe=o(" (GPT-J model)"),XKe=l(),Jn=a("li"),ere=a("strong"),zKe=o("herbert"),QKe=o(" \u2014 "),GS=a("a"),WKe=o("HerbertTokenizer"),HKe=o(" or "),OS=a("a"),UKe=o("HerbertTokenizerFast"),JKe=o(" (HerBERT model)"),YKe=l(),bg=a("li"),ore=a("strong"),KKe=o("hubert"),ZKe=o(" \u2014 "),VS=a("a"),eZe=o("Wav2Vec2CTCTokenizer"),oZe=o(" (Hubert model)"),rZe=l(),Yn=a("li"),rre=a("strong"),tZe=o("ibert"),aZe=o(" \u2014 "),XS=a("a"),nZe=o("RobertaTokenizer"),sZe=o(" or "),zS=a("a"),lZe=o("RobertaTokenizerFast"),iZe=o(" (I-BERT model)"),dZe=l(),Kn=a("li"),tre=a("strong"),cZe=o("layoutlm"),fZe=o(" \u2014 "),QS=a("a"),mZe=o("LayoutLMTokenizer"),gZe=o(" or "),WS=a("a"),hZe=o("LayoutLMTokenizerFast"),pZe=o(" (LayoutLM model)"),uZe=l(),Zn=a("li"),are=a("strong"),_Ze=o("layoutlmv2"),bZe=o(" \u2014 "),HS=a("a"),vZe=o("LayoutLMv2Tokenizer"),FZe=o(" or "),US=a("a"),TZe=o("LayoutLMv2TokenizerFast"),MZe=o(" (LayoutLMv2 model)"),EZe=l(),es=a("li"),nre=a("strong"),CZe=o("layoutxlm"),wZe=o(" \u2014 "),JS=a("a"),AZe=o("LayoutXLMTokenizer"),yZe=o(" or "),YS=a("a"),LZe=o("LayoutXLMTokenizerFast"),xZe=o(" (LayoutXLM model)"),$Ze=l(),os=a("li"),sre=a("strong"),kZe=o("led"),SZe=o(" \u2014 "),KS=a("a"),RZe=o("LEDTokenizer"),BZe=o(" or "),ZS=a("a"),PZe=o("LEDTokenizerFast"),IZe=o(" (LED model)"),qZe=l(),rs=a("li"),lre=a("strong"),NZe=o("longformer"),jZe=o(" \u2014 "),eR=a("a"),DZe=o("LongformerTokenizer"),GZe=o(" or "),oR=a("a"),OZe=o("LongformerTokenizerFast"),VZe=o(" (Longformer model)"),XZe=l(),vg=a("li"),ire=a("strong"),zZe=o("luke"),QZe=o(" \u2014 "),rR=a("a"),WZe=o("LukeTokenizer"),HZe=o(" (LUKE model)"),UZe=l(),ts=a("li"),dre=a("strong"),JZe=o("lxmert"),YZe=o(" \u2014 "),tR=a("a"),KZe=o("LxmertTokenizer"),ZZe=o(" or "),aR=a("a"),eeo=o("LxmertTokenizerFast"),oeo=o(" (LXMERT model)"),reo=l(),Fg=a("li"),cre=a("strong"),teo=o("m2m_100"),aeo=o(" \u2014 "),nR=a("a"),neo=o("M2M100Tokenizer"),seo=o(" (M2M100 model)"),leo=l(),Tg=a("li"),fre=a("strong"),ieo=o("marian"),deo=o(" \u2014 "),sR=a("a"),ceo=o("MarianTokenizer"),feo=o(" (Marian model)"),meo=l(),as=a("li"),mre=a("strong"),geo=o("mbart"),heo=o(" \u2014 "),lR=a("a"),peo=o("MBartTokenizer"),ueo=o(" or "),iR=a("a"),_eo=o("MBartTokenizerFast"),beo=o(" (mBART model)"),veo=l(),ns=a("li"),gre=a("strong"),Feo=o("mbart50"),Teo=o(" \u2014 "),dR=a("a"),Meo=o("MBart50Tokenizer"),Eeo=o(" or "),cR=a("a"),Ceo=o("MBart50TokenizerFast"),weo=o(" (mBART-50 model)"),Aeo=l(),ss=a("li"),hre=a("strong"),yeo=o("megatron-bert"),Leo=o(" \u2014 "),fR=a("a"),xeo=o("BertTokenizer"),$eo=o(" or "),mR=a("a"),keo=o("BertTokenizerFast"),Seo=o(" (MegatronBert model)"),Reo=l(),Mg=a("li"),pre=a("strong"),Beo=o("mluke"),Peo=o(" \u2014 "),gR=a("a"),Ieo=o("MLukeTokenizer"),qeo=o(" (mLUKE model)"),Neo=l(),ls=a("li"),ure=a("strong"),jeo=o("mobilebert"),Deo=o(" \u2014 "),hR=a("a"),Geo=o("MobileBertTokenizer"),Oeo=o(" or "),pR=a("a"),Veo=o("MobileBertTokenizerFast"),Xeo=o(" (MobileBERT model)"),zeo=l(),is=a("li"),_re=a("strong"),Qeo=o("mpnet"),Weo=o(" \u2014 "),uR=a("a"),Heo=o("MPNetTokenizer"),Ueo=o(" or "),_R=a("a"),Jeo=o("MPNetTokenizerFast"),Yeo=o(" (MPNet model)"),Keo=l(),ds=a("li"),bre=a("strong"),Zeo=o("mt5"),eoo=o(" \u2014 "),bR=a("a"),ooo=o("MT5Tokenizer"),roo=o(" or "),vR=a("a"),too=o("MT5TokenizerFast"),aoo=o(" (mT5 model)"),noo=l(),cs=a("li"),vre=a("strong"),soo=o("nystromformer"),loo=o(" \u2014 "),FR=a("a"),ioo=o("AlbertTokenizer"),doo=o(" or "),TR=a("a"),coo=o("AlbertTokenizerFast"),foo=o(" (Nystromformer model)"),moo=l(),fs=a("li"),Fre=a("strong"),goo=o("openai-gpt"),hoo=o(" \u2014 "),MR=a("a"),poo=o("OpenAIGPTTokenizer"),uoo=o(" or "),ER=a("a"),_oo=o("OpenAIGPTTokenizerFast"),boo=o(" (OpenAI GPT model)"),voo=l(),ms=a("li"),Tre=a("strong"),Foo=o("pegasus"),Too=o(" \u2014 "),CR=a("a"),Moo=o("PegasusTokenizer"),Eoo=o(" or "),wR=a("a"),Coo=o("PegasusTokenizerFast"),woo=o(" (Pegasus model)"),Aoo=l(),Eg=a("li"),Mre=a("strong"),yoo=o("perceiver"),Loo=o(" \u2014 "),AR=a("a"),xoo=o("PerceiverTokenizer"),$oo=o(" (Perceiver model)"),koo=l(),Cg=a("li"),Ere=a("strong"),Soo=o("phobert"),Roo=o(" \u2014 "),yR=a("a"),Boo=o("PhobertTokenizer"),Poo=o(" (PhoBERT model)"),Ioo=l(),wg=a("li"),Cre=a("strong"),qoo=o("plbart"),Noo=o(" \u2014 "),LR=a("a"),joo=o("PLBartTokenizer"),Doo=o(" (PLBart model)"),Goo=l(),Ag=a("li"),wre=a("strong"),Ooo=o("prophetnet"),Voo=o(" \u2014 "),xR=a("a"),Xoo=o("ProphetNetTokenizer"),zoo=o(" (ProphetNet model)"),Qoo=l(),gs=a("li"),Are=a("strong"),Woo=o("qdqbert"),Hoo=o(" \u2014 "),$R=a("a"),Uoo=o("BertTokenizer"),Joo=o(" or "),kR=a("a"),Yoo=o("BertTokenizerFast"),Koo=o(" (QDQBert model)"),Zoo=l(),yg=a("li"),yre=a("strong"),ero=o("rag"),oro=o(" \u2014 "),SR=a("a"),rro=o("RagTokenizer"),tro=o(" (RAG model)"),aro=l(),hs=a("li"),Lre=a("strong"),nro=o("realm"),sro=o(" \u2014 "),RR=a("a"),lro=o("RealmTokenizer"),iro=o(" or "),BR=a("a"),dro=o("RealmTokenizerFast"),cro=o(" (Realm model)"),fro=l(),ps=a("li"),xre=a("strong"),mro=o("reformer"),gro=o(" \u2014 "),PR=a("a"),hro=o("ReformerTokenizer"),pro=o(" or "),IR=a("a"),uro=o("ReformerTokenizerFast"),_ro=o(" (Reformer model)"),bro=l(),us=a("li"),$re=a("strong"),vro=o("rembert"),Fro=o(" \u2014 "),qR=a("a"),Tro=o("RemBertTokenizer"),Mro=o(" or "),NR=a("a"),Ero=o("RemBertTokenizerFast"),Cro=o(" (RemBERT model)"),wro=l(),_s=a("li"),kre=a("strong"),Aro=o("retribert"),yro=o(" \u2014 "),jR=a("a"),Lro=o("RetriBertTokenizer"),xro=o(" or "),DR=a("a"),$ro=o("RetriBertTokenizerFast"),kro=o(" (RetriBERT model)"),Sro=l(),bs=a("li"),Sre=a("strong"),Rro=o("roberta"),Bro=o(" \u2014 "),GR=a("a"),Pro=o("RobertaTokenizer"),Iro=o(" or "),OR=a("a"),qro=o("RobertaTokenizerFast"),Nro=o(" (RoBERTa model)"),jro=l(),vs=a("li"),Rre=a("strong"),Dro=o("roformer"),Gro=o(" \u2014 "),VR=a("a"),Oro=o("RoFormerTokenizer"),Vro=o(" or "),XR=a("a"),Xro=o("RoFormerTokenizerFast"),zro=o(" (RoFormer model)"),Qro=l(),Lg=a("li"),Bre=a("strong"),Wro=o("speech_to_text"),Hro=o(" \u2014 "),zR=a("a"),Uro=o("Speech2TextTokenizer"),Jro=o(" (Speech2Text model)"),Yro=l(),xg=a("li"),Pre=a("strong"),Kro=o("speech_to_text_2"),Zro=o(" \u2014 "),QR=a("a"),eto=o("Speech2Text2Tokenizer"),oto=o(" (Speech2Text2 model)"),rto=l(),Fs=a("li"),Ire=a("strong"),tto=o("splinter"),ato=o(" \u2014 "),WR=a("a"),nto=o("SplinterTokenizer"),sto=o(" or "),HR=a("a"),lto=o("SplinterTokenizerFast"),ito=o(" (Splinter model)"),dto=l(),Ts=a("li"),qre=a("strong"),cto=o("squeezebert"),fto=o(" \u2014 "),UR=a("a"),mto=o("SqueezeBertTokenizer"),gto=o(" or "),JR=a("a"),hto=o("SqueezeBertTokenizerFast"),pto=o(" (SqueezeBERT model)"),uto=l(),Ms=a("li"),Nre=a("strong"),_to=o("t5"),bto=o(" \u2014 "),YR=a("a"),vto=o("T5Tokenizer"),Fto=o(" or "),KR=a("a"),Tto=o("T5TokenizerFast"),Mto=o(" (T5 model)"),Eto=l(),$g=a("li"),jre=a("strong"),Cto=o("tapas"),wto=o(" \u2014 "),ZR=a("a"),Ato=o("TapasTokenizer"),yto=o(" (TAPAS model)"),Lto=l(),kg=a("li"),Dre=a("strong"),xto=o("tapex"),$to=o(" \u2014 "),eB=a("a"),kto=o("TapexTokenizer"),Sto=o(" (TAPEX model)"),Rto=l(),Sg=a("li"),Gre=a("strong"),Bto=o("transfo-xl"),Pto=o(" \u2014 "),oB=a("a"),Ito=o("TransfoXLTokenizer"),qto=o(" (Transformer-XL model)"),Nto=l(),Es=a("li"),Ore=a("strong"),jto=o("visual_bert"),Dto=o(" \u2014 "),rB=a("a"),Gto=o("BertTokenizer"),Oto=o(" or "),tB=a("a"),Vto=o("BertTokenizerFast"),Xto=o(" (VisualBert model)"),zto=l(),Rg=a("li"),Vre=a("strong"),Qto=o("wav2vec2"),Wto=o(" \u2014 "),aB=a("a"),Hto=o("Wav2Vec2CTCTokenizer"),Uto=o(" (Wav2Vec2 model)"),Jto=l(),Bg=a("li"),Xre=a("strong"),Yto=o("wav2vec2_phoneme"),Kto=o(" \u2014 "),nB=a("a"),Zto=o("Wav2Vec2PhonemeCTCTokenizer"),eao=o(" (Wav2Vec2Phoneme model)"),oao=l(),Cs=a("li"),zre=a("strong"),rao=o("xglm"),tao=o(" \u2014 "),sB=a("a"),aao=o("XGLMTokenizer"),nao=o(" or "),lB=a("a"),sao=o("XGLMTokenizerFast"),lao=o(" (XGLM model)"),iao=l(),Pg=a("li"),Qre=a("strong"),dao=o("xlm"),cao=o(" \u2014 "),iB=a("a"),fao=o("XLMTokenizer"),mao=o(" (XLM model)"),gao=l(),Ig=a("li"),Wre=a("strong"),hao=o("xlm-prophetnet"),pao=o(" \u2014 "),dB=a("a"),uao=o("XLMProphetNetTokenizer"),_ao=o(" (XLMProphetNet model)"),bao=l(),ws=a("li"),Hre=a("strong"),vao=o("xlm-roberta"),Fao=o(" \u2014 "),cB=a("a"),Tao=o("XLMRobertaTokenizer"),Mao=o(" or "),fB=a("a"),Eao=o("XLMRobertaTokenizerFast"),Cao=o(" (XLM-RoBERTa model)"),wao=l(),As=a("li"),Ure=a("strong"),Aao=o("xlm-roberta-xl"),yao=o(" \u2014 "),mB=a("a"),Lao=o("RobertaTokenizer"),xao=o(" or "),gB=a("a"),$ao=o("RobertaTokenizerFast"),kao=o(" (XLM-RoBERTa-XL model)"),Sao=l(),ys=a("li"),Jre=a("strong"),Rao=o("xlnet"),Bao=o(" \u2014 "),hB=a("a"),Pao=o("XLNetTokenizer"),Iao=o(" or "),pB=a("a"),qao=o("XLNetTokenizerFast"),Nao=o(" (XLNet model)"),jao=l(),Ls=a("li"),Yre=a("strong"),Dao=o("yoso"),Gao=o(" \u2014 "),uB=a("a"),Oao=o("AlbertTokenizer"),Vao=o(" or "),_B=a("a"),Xao=o("AlbertTokenizerFast"),zao=o(" (YOSO model)"),Qao=l(),F(qg.$$.fragment),Wao=l(),Ng=a("div"),F(Dw.$$.fragment),Hao=l(),Kre=a("p"),Uao=o("Register a new tokenizer in this mapping."),kBe=l(),gi=a("h2"),jg=a("a"),Zre=a("span"),F(Gw.$$.fragment),Jao=l(),ete=a("span"),Yao=o("AutoFeatureExtractor"),SBe=l(),Ao=a("div"),F(Ow.$$.fragment),Kao=l(),Vw=a("p"),Zao=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),bB=a("a"),eno=o("AutoFeatureExtractor.from_pretrained()"),ono=o(" class method."),rno=l(),Xw=a("p"),tno=o("This class cannot be instantiated directly using "),ote=a("code"),ano=o("__init__()"),nno=o(" (throws an error)."),sno=l(),Qe=a("div"),F(zw.$$.fragment),lno=l(),rte=a("p"),ino=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),dno=l(),Ma=a("p"),cno=o("The feature extractor class to instantiate is selected based on the "),tte=a("code"),fno=o("model_type"),mno=o(` property of the config object
(either passed as an argument or loaded from `),ate=a("code"),gno=o("pretrained_model_name_or_path"),hno=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),nte=a("code"),pno=o("pretrained_model_name_or_path"),uno=o(":"),_no=l(),te=a("ul"),Dg=a("li"),ste=a("strong"),bno=o("beit"),vno=o(" \u2014 "),vB=a("a"),Fno=o("BeitFeatureExtractor"),Tno=o(" (BEiT model)"),Mno=l(),Gg=a("li"),lte=a("strong"),Eno=o("clip"),Cno=o(" \u2014 "),FB=a("a"),wno=o("CLIPFeatureExtractor"),Ano=o(" (CLIP model)"),yno=l(),Og=a("li"),ite=a("strong"),Lno=o("convnext"),xno=o(" \u2014 "),TB=a("a"),$no=o("ConvNextFeatureExtractor"),kno=o(" (ConvNext model)"),Sno=l(),Vg=a("li"),dte=a("strong"),Rno=o("data2vec-audio"),Bno=o(" \u2014 "),MB=a("a"),Pno=o("Wav2Vec2FeatureExtractor"),Ino=o(" (Data2VecAudio model)"),qno=l(),Xg=a("li"),cte=a("strong"),Nno=o("data2vec-vision"),jno=o(" \u2014 "),EB=a("a"),Dno=o("BeitFeatureExtractor"),Gno=o(" (Data2VecVision model)"),Ono=l(),zg=a("li"),fte=a("strong"),Vno=o("deit"),Xno=o(" \u2014 "),CB=a("a"),zno=o("DeiTFeatureExtractor"),Qno=o(" (DeiT model)"),Wno=l(),Qg=a("li"),mte=a("strong"),Hno=o("detr"),Uno=o(" \u2014 "),wB=a("a"),Jno=o("DetrFeatureExtractor"),Yno=o(" (DETR model)"),Kno=l(),Wg=a("li"),gte=a("strong"),Zno=o("dpt"),eso=o(" \u2014 "),AB=a("a"),oso=o("DPTFeatureExtractor"),rso=o(" (DPT model)"),tso=l(),Hg=a("li"),hte=a("strong"),aso=o("glpn"),nso=o(" \u2014 "),yB=a("a"),sso=o("GLPNFeatureExtractor"),lso=o(" (GLPN model)"),iso=l(),Ug=a("li"),pte=a("strong"),dso=o("hubert"),cso=o(" \u2014 "),LB=a("a"),fso=o("Wav2Vec2FeatureExtractor"),mso=o(" (Hubert model)"),gso=l(),Jg=a("li"),ute=a("strong"),hso=o("layoutlmv2"),pso=o(" \u2014 "),xB=a("a"),uso=o("LayoutLMv2FeatureExtractor"),_so=o(" (LayoutLMv2 model)"),bso=l(),Yg=a("li"),_te=a("strong"),vso=o("maskformer"),Fso=o(" \u2014 "),$B=a("a"),Tso=o("MaskFormerFeatureExtractor"),Mso=o(" (MaskFormer model)"),Eso=l(),Kg=a("li"),bte=a("strong"),Cso=o("perceiver"),wso=o(" \u2014 "),kB=a("a"),Aso=o("PerceiverFeatureExtractor"),yso=o(" (Perceiver model)"),Lso=l(),Zg=a("li"),vte=a("strong"),xso=o("poolformer"),$so=o(" \u2014 "),SB=a("a"),kso=o("PoolFormerFeatureExtractor"),Sso=o(" (PoolFormer model)"),Rso=l(),eh=a("li"),Fte=a("strong"),Bso=o("regnet"),Pso=o(" \u2014 "),RB=a("a"),Iso=o("ConvNextFeatureExtractor"),qso=o(" (RegNet model)"),Nso=l(),oh=a("li"),Tte=a("strong"),jso=o("resnet"),Dso=o(" \u2014 "),BB=a("a"),Gso=o("ConvNextFeatureExtractor"),Oso=o(" (ResNet model)"),Vso=l(),rh=a("li"),Mte=a("strong"),Xso=o("segformer"),zso=o(" \u2014 "),PB=a("a"),Qso=o("SegformerFeatureExtractor"),Wso=o(" (SegFormer model)"),Hso=l(),th=a("li"),Ete=a("strong"),Uso=o("speech_to_text"),Jso=o(" \u2014 "),IB=a("a"),Yso=o("Speech2TextFeatureExtractor"),Kso=o(" (Speech2Text model)"),Zso=l(),ah=a("li"),Cte=a("strong"),elo=o("swin"),olo=o(" \u2014 "),qB=a("a"),rlo=o("ViTFeatureExtractor"),tlo=o(" (Swin model)"),alo=l(),nh=a("li"),wte=a("strong"),nlo=o("van"),slo=o(" \u2014 "),NB=a("a"),llo=o("ConvNextFeatureExtractor"),ilo=o(" (VAN model)"),dlo=l(),sh=a("li"),Ate=a("strong"),clo=o("vit"),flo=o(" \u2014 "),jB=a("a"),mlo=o("ViTFeatureExtractor"),glo=o(" (ViT model)"),hlo=l(),lh=a("li"),yte=a("strong"),plo=o("vit_mae"),ulo=o(" \u2014 "),DB=a("a"),_lo=o("ViTFeatureExtractor"),blo=o(" (ViTMAE model)"),vlo=l(),ih=a("li"),Lte=a("strong"),Flo=o("wav2vec2"),Tlo=o(" \u2014 "),GB=a("a"),Mlo=o("Wav2Vec2FeatureExtractor"),Elo=o(" (Wav2Vec2 model)"),Clo=l(),dh=a("li"),xte=a("strong"),wlo=o("yolos"),Alo=o(" \u2014 "),OB=a("a"),ylo=o("YolosFeatureExtractor"),Llo=o(" (YOLOS model)"),xlo=l(),F(ch.$$.fragment),$lo=l(),F(fh.$$.fragment),klo=l(),mh=a("div"),F(Qw.$$.fragment),Slo=l(),$te=a("p"),Rlo=o("Register a new feature extractor for this class."),RBe=l(),hi=a("h2"),gh=a("a"),kte=a("span"),F(Ww.$$.fragment),Blo=l(),Ste=a("span"),Plo=o("AutoProcessor"),BBe=l(),yo=a("div"),F(Hw.$$.fragment),Ilo=l(),Uw=a("p"),qlo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),VB=a("a"),Nlo=o("AutoProcessor.from_pretrained()"),jlo=o(" class method."),Dlo=l(),Jw=a("p"),Glo=o("This class cannot be instantiated directly using "),Rte=a("code"),Olo=o("__init__()"),Vlo=o(" (throws an error)."),Xlo=l(),We=a("div"),F(Yw.$$.fragment),zlo=l(),Bte=a("p"),Qlo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Wlo=l(),pi=a("p"),Hlo=o("The processor class to instantiate is selected based on the "),Pte=a("code"),Ulo=o("model_type"),Jlo=o(` property of the config object (either
passed as an argument or loaded from `),Ite=a("code"),Ylo=o("pretrained_model_name_or_path"),Klo=o(" if possible):"),Zlo=l(),be=a("ul"),hh=a("li"),qte=a("strong"),eio=o("clip"),oio=o(" \u2014 "),XB=a("a"),rio=o("CLIPProcessor"),tio=o(" (CLIP model)"),aio=l(),ph=a("li"),Nte=a("strong"),nio=o("layoutlmv2"),sio=o(" \u2014 "),zB=a("a"),lio=o("LayoutLMv2Processor"),iio=o(" (LayoutLMv2 model)"),dio=l(),uh=a("li"),jte=a("strong"),cio=o("layoutxlm"),fio=o(" \u2014 "),QB=a("a"),mio=o("LayoutXLMProcessor"),gio=o(" (LayoutXLM model)"),hio=l(),_h=a("li"),Dte=a("strong"),pio=o("sew"),uio=o(" \u2014 "),WB=a("a"),_io=o("Wav2Vec2Processor"),bio=o(" (SEW model)"),vio=l(),bh=a("li"),Gte=a("strong"),Fio=o("sew-d"),Tio=o(" \u2014 "),HB=a("a"),Mio=o("Wav2Vec2Processor"),Eio=o(" (SEW-D model)"),Cio=l(),vh=a("li"),Ote=a("strong"),wio=o("speech_to_text"),Aio=o(" \u2014 "),UB=a("a"),yio=o("Speech2TextProcessor"),Lio=o(" (Speech2Text model)"),xio=l(),Fh=a("li"),Vte=a("strong"),$io=o("speech_to_text_2"),kio=o(" \u2014 "),JB=a("a"),Sio=o("Speech2Text2Processor"),Rio=o(" (Speech2Text2 model)"),Bio=l(),Th=a("li"),Xte=a("strong"),Pio=o("trocr"),Iio=o(" \u2014 "),YB=a("a"),qio=o("TrOCRProcessor"),Nio=o(" (TrOCR model)"),jio=l(),Mh=a("li"),zte=a("strong"),Dio=o("unispeech"),Gio=o(" \u2014 "),KB=a("a"),Oio=o("Wav2Vec2Processor"),Vio=o(" (UniSpeech model)"),Xio=l(),Eh=a("li"),Qte=a("strong"),zio=o("unispeech-sat"),Qio=o(" \u2014 "),ZB=a("a"),Wio=o("Wav2Vec2Processor"),Hio=o(" (UniSpeechSat model)"),Uio=l(),Ch=a("li"),Wte=a("strong"),Jio=o("vilt"),Yio=o(" \u2014 "),eP=a("a"),Kio=o("ViltProcessor"),Zio=o(" (ViLT model)"),edo=l(),wh=a("li"),Hte=a("strong"),odo=o("vision-text-dual-encoder"),rdo=o(" \u2014 "),oP=a("a"),tdo=o("VisionTextDualEncoderProcessor"),ado=o(" (VisionTextDualEncoder model)"),ndo=l(),Ah=a("li"),Ute=a("strong"),sdo=o("wav2vec2"),ldo=o(" \u2014 "),rP=a("a"),ido=o("Wav2Vec2Processor"),ddo=o(" (Wav2Vec2 model)"),cdo=l(),yh=a("li"),Jte=a("strong"),fdo=o("wavlm"),mdo=o(" \u2014 "),tP=a("a"),gdo=o("Wav2Vec2Processor"),hdo=o(" (WavLM model)"),pdo=l(),F(Lh.$$.fragment),udo=l(),F(xh.$$.fragment),_do=l(),$h=a("div"),F(Kw.$$.fragment),bdo=l(),Yte=a("p"),vdo=o("Register a new processor for this class."),PBe=l(),ui=a("h2"),kh=a("a"),Kte=a("span"),F(Zw.$$.fragment),Fdo=l(),Zte=a("span"),Tdo=o("AutoModel"),IBe=l(),Lo=a("div"),F(eA.$$.fragment),Mdo=l(),_i=a("p"),Edo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),aP=a("a"),Cdo=o("from_pretrained()"),wdo=o(" class method or the "),nP=a("a"),Ado=o("from_config()"),ydo=o(` class
method.`),Ldo=l(),oA=a("p"),xdo=o("This class cannot be instantiated directly using "),eae=a("code"),$do=o("__init__()"),kdo=o(" (throws an error)."),Sdo=l(),Zr=a("div"),F(rA.$$.fragment),Rdo=l(),oae=a("p"),Bdo=o("Instantiates one of the base model classes of the library from a configuration."),Pdo=l(),bi=a("p"),Ido=o(`Note:
Loading a model from its configuration file does `),rae=a("strong"),qdo=o("not"),Ndo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sP=a("a"),jdo=o("from_pretrained()"),Ddo=o(" to load the model weights."),Gdo=l(),F(Sh.$$.fragment),Odo=l(),He=a("div"),F(tA.$$.fragment),Vdo=l(),tae=a("p"),Xdo=o("Instantiate one of the base model classes of the library from a pretrained model."),zdo=l(),Ea=a("p"),Qdo=o("The model class to instantiate is selected based on the "),aae=a("code"),Wdo=o("model_type"),Hdo=o(` property of the config object (either
passed as an argument or loaded from `),nae=a("code"),Udo=o("pretrained_model_name_or_path"),Jdo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sae=a("code"),Ydo=o("pretrained_model_name_or_path"),Kdo=o(":"),Zdo=l(),x=a("ul"),Rh=a("li"),lae=a("strong"),eco=o("albert"),oco=o(" \u2014 "),lP=a("a"),rco=o("AlbertModel"),tco=o(" (ALBERT model)"),aco=l(),Bh=a("li"),iae=a("strong"),nco=o("bart"),sco=o(" \u2014 "),iP=a("a"),lco=o("BartModel"),ico=o(" (BART model)"),dco=l(),Ph=a("li"),dae=a("strong"),cco=o("beit"),fco=o(" \u2014 "),dP=a("a"),mco=o("BeitModel"),gco=o(" (BEiT model)"),hco=l(),Ih=a("li"),cae=a("strong"),pco=o("bert"),uco=o(" \u2014 "),cP=a("a"),_co=o("BertModel"),bco=o(" (BERT model)"),vco=l(),qh=a("li"),fae=a("strong"),Fco=o("bert-generation"),Tco=o(" \u2014 "),fP=a("a"),Mco=o("BertGenerationEncoder"),Eco=o(" (Bert Generation model)"),Cco=l(),Nh=a("li"),mae=a("strong"),wco=o("big_bird"),Aco=o(" \u2014 "),mP=a("a"),yco=o("BigBirdModel"),Lco=o(" (BigBird model)"),xco=l(),jh=a("li"),gae=a("strong"),$co=o("bigbird_pegasus"),kco=o(" \u2014 "),gP=a("a"),Sco=o("BigBirdPegasusModel"),Rco=o(" (BigBirdPegasus model)"),Bco=l(),Dh=a("li"),hae=a("strong"),Pco=o("blenderbot"),Ico=o(" \u2014 "),hP=a("a"),qco=o("BlenderbotModel"),Nco=o(" (Blenderbot model)"),jco=l(),Gh=a("li"),pae=a("strong"),Dco=o("blenderbot-small"),Gco=o(" \u2014 "),pP=a("a"),Oco=o("BlenderbotSmallModel"),Vco=o(" (BlenderbotSmall model)"),Xco=l(),Oh=a("li"),uae=a("strong"),zco=o("camembert"),Qco=o(" \u2014 "),uP=a("a"),Wco=o("CamembertModel"),Hco=o(" (CamemBERT model)"),Uco=l(),Vh=a("li"),_ae=a("strong"),Jco=o("canine"),Yco=o(" \u2014 "),_P=a("a"),Kco=o("CanineModel"),Zco=o(" (Canine model)"),efo=l(),Xh=a("li"),bae=a("strong"),ofo=o("clip"),rfo=o(" \u2014 "),bP=a("a"),tfo=o("CLIPModel"),afo=o(" (CLIP model)"),nfo=l(),zh=a("li"),vae=a("strong"),sfo=o("convbert"),lfo=o(" \u2014 "),vP=a("a"),ifo=o("ConvBertModel"),dfo=o(" (ConvBERT model)"),cfo=l(),Qh=a("li"),Fae=a("strong"),ffo=o("convnext"),mfo=o(" \u2014 "),FP=a("a"),gfo=o("ConvNextModel"),hfo=o(" (ConvNext model)"),pfo=l(),Wh=a("li"),Tae=a("strong"),ufo=o("ctrl"),_fo=o(" \u2014 "),TP=a("a"),bfo=o("CTRLModel"),vfo=o(" (CTRL model)"),Ffo=l(),Hh=a("li"),Mae=a("strong"),Tfo=o("data2vec-audio"),Mfo=o(" \u2014 "),MP=a("a"),Efo=o("Data2VecAudioModel"),Cfo=o(" (Data2VecAudio model)"),wfo=l(),Uh=a("li"),Eae=a("strong"),Afo=o("data2vec-text"),yfo=o(" \u2014 "),EP=a("a"),Lfo=o("Data2VecTextModel"),xfo=o(" (Data2VecText model)"),$fo=l(),Jh=a("li"),Cae=a("strong"),kfo=o("data2vec-vision"),Sfo=o(" \u2014 "),CP=a("a"),Rfo=o("Data2VecVisionModel"),Bfo=o(" (Data2VecVision model)"),Pfo=l(),Yh=a("li"),wae=a("strong"),Ifo=o("deberta"),qfo=o(" \u2014 "),wP=a("a"),Nfo=o("DebertaModel"),jfo=o(" (DeBERTa model)"),Dfo=l(),Kh=a("li"),Aae=a("strong"),Gfo=o("deberta-v2"),Ofo=o(" \u2014 "),AP=a("a"),Vfo=o("DebertaV2Model"),Xfo=o(" (DeBERTa-v2 model)"),zfo=l(),Zh=a("li"),yae=a("strong"),Qfo=o("decision_transformer"),Wfo=o(" \u2014 "),yP=a("a"),Hfo=o("DecisionTransformerModel"),Ufo=o(" (Decision Transformer model)"),Jfo=l(),ep=a("li"),Lae=a("strong"),Yfo=o("deit"),Kfo=o(" \u2014 "),LP=a("a"),Zfo=o("DeiTModel"),emo=o(" (DeiT model)"),omo=l(),op=a("li"),xae=a("strong"),rmo=o("detr"),tmo=o(" \u2014 "),xP=a("a"),amo=o("DetrModel"),nmo=o(" (DETR model)"),smo=l(),rp=a("li"),$ae=a("strong"),lmo=o("distilbert"),imo=o(" \u2014 "),$P=a("a"),dmo=o("DistilBertModel"),cmo=o(" (DistilBERT model)"),fmo=l(),tp=a("li"),kae=a("strong"),mmo=o("dpr"),gmo=o(" \u2014 "),kP=a("a"),hmo=o("DPRQuestionEncoder"),pmo=o(" (DPR model)"),umo=l(),ap=a("li"),Sae=a("strong"),_mo=o("dpt"),bmo=o(" \u2014 "),SP=a("a"),vmo=o("DPTModel"),Fmo=o(" (DPT model)"),Tmo=l(),np=a("li"),Rae=a("strong"),Mmo=o("electra"),Emo=o(" \u2014 "),RP=a("a"),Cmo=o("ElectraModel"),wmo=o(" (ELECTRA model)"),Amo=l(),sp=a("li"),Bae=a("strong"),ymo=o("flaubert"),Lmo=o(" \u2014 "),BP=a("a"),xmo=o("FlaubertModel"),$mo=o(" (FlauBERT model)"),kmo=l(),lp=a("li"),Pae=a("strong"),Smo=o("fnet"),Rmo=o(" \u2014 "),PP=a("a"),Bmo=o("FNetModel"),Pmo=o(" (FNet model)"),Imo=l(),ip=a("li"),Iae=a("strong"),qmo=o("fsmt"),Nmo=o(" \u2014 "),IP=a("a"),jmo=o("FSMTModel"),Dmo=o(" (FairSeq Machine-Translation model)"),Gmo=l(),xs=a("li"),qae=a("strong"),Omo=o("funnel"),Vmo=o(" \u2014 "),qP=a("a"),Xmo=o("FunnelModel"),zmo=o(" or "),NP=a("a"),Qmo=o("FunnelBaseModel"),Wmo=o(" (Funnel Transformer model)"),Hmo=l(),dp=a("li"),Nae=a("strong"),Umo=o("glpn"),Jmo=o(" \u2014 "),jP=a("a"),Ymo=o("GLPNModel"),Kmo=o(" (GLPN model)"),Zmo=l(),cp=a("li"),jae=a("strong"),ego=o("gpt2"),ogo=o(" \u2014 "),DP=a("a"),rgo=o("GPT2Model"),tgo=o(" (OpenAI GPT-2 model)"),ago=l(),fp=a("li"),Dae=a("strong"),ngo=o("gpt_neo"),sgo=o(" \u2014 "),GP=a("a"),lgo=o("GPTNeoModel"),igo=o(" (GPT Neo model)"),dgo=l(),mp=a("li"),Gae=a("strong"),cgo=o("gptj"),fgo=o(" \u2014 "),OP=a("a"),mgo=o("GPTJModel"),ggo=o(" (GPT-J model)"),hgo=l(),gp=a("li"),Oae=a("strong"),pgo=o("hubert"),ugo=o(" \u2014 "),VP=a("a"),_go=o("HubertModel"),bgo=o(" (Hubert model)"),vgo=l(),hp=a("li"),Vae=a("strong"),Fgo=o("ibert"),Tgo=o(" \u2014 "),XP=a("a"),Mgo=o("IBertModel"),Ego=o(" (I-BERT model)"),Cgo=l(),pp=a("li"),Xae=a("strong"),wgo=o("imagegpt"),Ago=o(" \u2014 "),zP=a("a"),ygo=o("ImageGPTModel"),Lgo=o(" (ImageGPT model)"),xgo=l(),up=a("li"),zae=a("strong"),$go=o("layoutlm"),kgo=o(" \u2014 "),QP=a("a"),Sgo=o("LayoutLMModel"),Rgo=o(" (LayoutLM model)"),Bgo=l(),_p=a("li"),Qae=a("strong"),Pgo=o("layoutlmv2"),Igo=o(" \u2014 "),WP=a("a"),qgo=o("LayoutLMv2Model"),Ngo=o(" (LayoutLMv2 model)"),jgo=l(),bp=a("li"),Wae=a("strong"),Dgo=o("led"),Ggo=o(" \u2014 "),HP=a("a"),Ogo=o("LEDModel"),Vgo=o(" (LED model)"),Xgo=l(),vp=a("li"),Hae=a("strong"),zgo=o("longformer"),Qgo=o(" \u2014 "),UP=a("a"),Wgo=o("LongformerModel"),Hgo=o(" (Longformer model)"),Ugo=l(),Fp=a("li"),Uae=a("strong"),Jgo=o("luke"),Ygo=o(" \u2014 "),JP=a("a"),Kgo=o("LukeModel"),Zgo=o(" (LUKE model)"),eho=l(),Tp=a("li"),Jae=a("strong"),oho=o("lxmert"),rho=o(" \u2014 "),YP=a("a"),tho=o("LxmertModel"),aho=o(" (LXMERT model)"),nho=l(),Mp=a("li"),Yae=a("strong"),sho=o("m2m_100"),lho=o(" \u2014 "),KP=a("a"),iho=o("M2M100Model"),dho=o(" (M2M100 model)"),cho=l(),Ep=a("li"),Kae=a("strong"),fho=o("marian"),mho=o(" \u2014 "),ZP=a("a"),gho=o("MarianModel"),hho=o(" (Marian model)"),pho=l(),Cp=a("li"),Zae=a("strong"),uho=o("maskformer"),_ho=o(" \u2014 "),eI=a("a"),bho=o("MaskFormerModel"),vho=o(" (MaskFormer model)"),Fho=l(),wp=a("li"),ene=a("strong"),Tho=o("mbart"),Mho=o(" \u2014 "),oI=a("a"),Eho=o("MBartModel"),Cho=o(" (mBART model)"),who=l(),Ap=a("li"),one=a("strong"),Aho=o("megatron-bert"),yho=o(" \u2014 "),rI=a("a"),Lho=o("MegatronBertModel"),xho=o(" (MegatronBert model)"),$ho=l(),yp=a("li"),rne=a("strong"),kho=o("mobilebert"),Sho=o(" \u2014 "),tI=a("a"),Rho=o("MobileBertModel"),Bho=o(" (MobileBERT model)"),Pho=l(),Lp=a("li"),tne=a("strong"),Iho=o("mpnet"),qho=o(" \u2014 "),aI=a("a"),Nho=o("MPNetModel"),jho=o(" (MPNet model)"),Dho=l(),xp=a("li"),ane=a("strong"),Gho=o("mt5"),Oho=o(" \u2014 "),nI=a("a"),Vho=o("MT5Model"),Xho=o(" (mT5 model)"),zho=l(),$p=a("li"),nne=a("strong"),Qho=o("nystromformer"),Who=o(" \u2014 "),sI=a("a"),Hho=o("NystromformerModel"),Uho=o(" (Nystromformer model)"),Jho=l(),kp=a("li"),sne=a("strong"),Yho=o("openai-gpt"),Kho=o(" \u2014 "),lI=a("a"),Zho=o("OpenAIGPTModel"),epo=o(" (OpenAI GPT model)"),opo=l(),Sp=a("li"),lne=a("strong"),rpo=o("pegasus"),tpo=o(" \u2014 "),iI=a("a"),apo=o("PegasusModel"),npo=o(" (Pegasus model)"),spo=l(),Rp=a("li"),ine=a("strong"),lpo=o("perceiver"),ipo=o(" \u2014 "),dI=a("a"),dpo=o("PerceiverModel"),cpo=o(" (Perceiver model)"),fpo=l(),Bp=a("li"),dne=a("strong"),mpo=o("plbart"),gpo=o(" \u2014 "),cI=a("a"),hpo=o("PLBartModel"),ppo=o(" (PLBart model)"),upo=l(),Pp=a("li"),cne=a("strong"),_po=o("poolformer"),bpo=o(" \u2014 "),fI=a("a"),vpo=o("PoolFormerModel"),Fpo=o(" (PoolFormer model)"),Tpo=l(),Ip=a("li"),fne=a("strong"),Mpo=o("prophetnet"),Epo=o(" \u2014 "),mI=a("a"),Cpo=o("ProphetNetModel"),wpo=o(" (ProphetNet model)"),Apo=l(),qp=a("li"),mne=a("strong"),ypo=o("qdqbert"),Lpo=o(" \u2014 "),gI=a("a"),xpo=o("QDQBertModel"),$po=o(" (QDQBert model)"),kpo=l(),Np=a("li"),gne=a("strong"),Spo=o("reformer"),Rpo=o(" \u2014 "),hI=a("a"),Bpo=o("ReformerModel"),Ppo=o(" (Reformer model)"),Ipo=l(),jp=a("li"),hne=a("strong"),qpo=o("regnet"),Npo=o(" \u2014 "),pI=a("a"),jpo=o("RegNetModel"),Dpo=o(" (RegNet model)"),Gpo=l(),Dp=a("li"),pne=a("strong"),Opo=o("rembert"),Vpo=o(" \u2014 "),uI=a("a"),Xpo=o("RemBertModel"),zpo=o(" (RemBERT model)"),Qpo=l(),Gp=a("li"),une=a("strong"),Wpo=o("resnet"),Hpo=o(" \u2014 "),_I=a("a"),Upo=o("ResNetModel"),Jpo=o(" (ResNet model)"),Ypo=l(),Op=a("li"),_ne=a("strong"),Kpo=o("retribert"),Zpo=o(" \u2014 "),bI=a("a"),euo=o("RetriBertModel"),ouo=o(" (RetriBERT model)"),ruo=l(),Vp=a("li"),bne=a("strong"),tuo=o("roberta"),auo=o(" \u2014 "),vI=a("a"),nuo=o("RobertaModel"),suo=o(" (RoBERTa model)"),luo=l(),Xp=a("li"),vne=a("strong"),iuo=o("roformer"),duo=o(" \u2014 "),FI=a("a"),cuo=o("RoFormerModel"),fuo=o(" (RoFormer model)"),muo=l(),zp=a("li"),Fne=a("strong"),guo=o("segformer"),huo=o(" \u2014 "),TI=a("a"),puo=o("SegformerModel"),uuo=o(" (SegFormer model)"),_uo=l(),Qp=a("li"),Tne=a("strong"),buo=o("sew"),vuo=o(" \u2014 "),MI=a("a"),Fuo=o("SEWModel"),Tuo=o(" (SEW model)"),Muo=l(),Wp=a("li"),Mne=a("strong"),Euo=o("sew-d"),Cuo=o(" \u2014 "),EI=a("a"),wuo=o("SEWDModel"),Auo=o(" (SEW-D model)"),yuo=l(),Hp=a("li"),Ene=a("strong"),Luo=o("speech_to_text"),xuo=o(" \u2014 "),CI=a("a"),$uo=o("Speech2TextModel"),kuo=o(" (Speech2Text model)"),Suo=l(),Up=a("li"),Cne=a("strong"),Ruo=o("splinter"),Buo=o(" \u2014 "),wI=a("a"),Puo=o("SplinterModel"),Iuo=o(" (Splinter model)"),quo=l(),Jp=a("li"),wne=a("strong"),Nuo=o("squeezebert"),juo=o(" \u2014 "),AI=a("a"),Duo=o("SqueezeBertModel"),Guo=o(" (SqueezeBERT model)"),Ouo=l(),Yp=a("li"),Ane=a("strong"),Vuo=o("swin"),Xuo=o(" \u2014 "),yI=a("a"),zuo=o("SwinModel"),Quo=o(" (Swin model)"),Wuo=l(),Kp=a("li"),yne=a("strong"),Huo=o("t5"),Uuo=o(" \u2014 "),LI=a("a"),Juo=o("T5Model"),Yuo=o(" (T5 model)"),Kuo=l(),Zp=a("li"),Lne=a("strong"),Zuo=o("tapas"),e_o=o(" \u2014 "),xI=a("a"),o_o=o("TapasModel"),r_o=o(" (TAPAS model)"),t_o=l(),eu=a("li"),xne=a("strong"),a_o=o("transfo-xl"),n_o=o(" \u2014 "),$I=a("a"),s_o=o("TransfoXLModel"),l_o=o(" (Transformer-XL model)"),i_o=l(),ou=a("li"),$ne=a("strong"),d_o=o("unispeech"),c_o=o(" \u2014 "),kI=a("a"),f_o=o("UniSpeechModel"),m_o=o(" (UniSpeech model)"),g_o=l(),ru=a("li"),kne=a("strong"),h_o=o("unispeech-sat"),p_o=o(" \u2014 "),SI=a("a"),u_o=o("UniSpeechSatModel"),__o=o(" (UniSpeechSat model)"),b_o=l(),tu=a("li"),Sne=a("strong"),v_o=o("van"),F_o=o(" \u2014 "),RI=a("a"),T_o=o("VanModel"),M_o=o(" (VAN model)"),E_o=l(),au=a("li"),Rne=a("strong"),C_o=o("vilt"),w_o=o(" \u2014 "),BI=a("a"),A_o=o("ViltModel"),y_o=o(" (ViLT model)"),L_o=l(),nu=a("li"),Bne=a("strong"),x_o=o("vision-text-dual-encoder"),$_o=o(" \u2014 "),PI=a("a"),k_o=o("VisionTextDualEncoderModel"),S_o=o(" (VisionTextDualEncoder model)"),R_o=l(),su=a("li"),Pne=a("strong"),B_o=o("visual_bert"),P_o=o(" \u2014 "),II=a("a"),I_o=o("VisualBertModel"),q_o=o(" (VisualBert model)"),N_o=l(),lu=a("li"),Ine=a("strong"),j_o=o("vit"),D_o=o(" \u2014 "),qI=a("a"),G_o=o("ViTModel"),O_o=o(" (ViT model)"),V_o=l(),iu=a("li"),qne=a("strong"),X_o=o("vit_mae"),z_o=o(" \u2014 "),NI=a("a"),Q_o=o("ViTMAEModel"),W_o=o(" (ViTMAE model)"),H_o=l(),du=a("li"),Nne=a("strong"),U_o=o("wav2vec2"),J_o=o(" \u2014 "),jI=a("a"),Y_o=o("Wav2Vec2Model"),K_o=o(" (Wav2Vec2 model)"),Z_o=l(),cu=a("li"),jne=a("strong"),e1o=o("wavlm"),o1o=o(" \u2014 "),DI=a("a"),r1o=o("WavLMModel"),t1o=o(" (WavLM model)"),a1o=l(),fu=a("li"),Dne=a("strong"),n1o=o("xglm"),s1o=o(" \u2014 "),GI=a("a"),l1o=o("XGLMModel"),i1o=o(" (XGLM model)"),d1o=l(),mu=a("li"),Gne=a("strong"),c1o=o("xlm"),f1o=o(" \u2014 "),OI=a("a"),m1o=o("XLMModel"),g1o=o(" (XLM model)"),h1o=l(),gu=a("li"),One=a("strong"),p1o=o("xlm-prophetnet"),u1o=o(" \u2014 "),VI=a("a"),_1o=o("XLMProphetNetModel"),b1o=o(" (XLMProphetNet model)"),v1o=l(),hu=a("li"),Vne=a("strong"),F1o=o("xlm-roberta"),T1o=o(" \u2014 "),XI=a("a"),M1o=o("XLMRobertaModel"),E1o=o(" (XLM-RoBERTa model)"),C1o=l(),pu=a("li"),Xne=a("strong"),w1o=o("xlm-roberta-xl"),A1o=o(" \u2014 "),zI=a("a"),y1o=o("XLMRobertaXLModel"),L1o=o(" (XLM-RoBERTa-XL model)"),x1o=l(),uu=a("li"),zne=a("strong"),$1o=o("xlnet"),k1o=o(" \u2014 "),QI=a("a"),S1o=o("XLNetModel"),R1o=o(" (XLNet model)"),B1o=l(),_u=a("li"),Qne=a("strong"),P1o=o("yolos"),I1o=o(" \u2014 "),WI=a("a"),q1o=o("YolosModel"),N1o=o(" (YOLOS model)"),j1o=l(),bu=a("li"),Wne=a("strong"),D1o=o("yoso"),G1o=o(" \u2014 "),HI=a("a"),O1o=o("YosoModel"),V1o=o(" (YOSO model)"),X1o=l(),vu=a("p"),z1o=o("The model is set in evaluation mode by default using "),Hne=a("code"),Q1o=o("model.eval()"),W1o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Une=a("code"),H1o=o("model.train()"),U1o=l(),F(Fu.$$.fragment),qBe=l(),vi=a("h2"),Tu=a("a"),Jne=a("span"),F(aA.$$.fragment),J1o=l(),Yne=a("span"),Y1o=o("AutoModelForPreTraining"),NBe=l(),xo=a("div"),F(nA.$$.fragment),K1o=l(),Fi=a("p"),Z1o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),UI=a("a"),e8o=o("from_pretrained()"),o8o=o(" class method or the "),JI=a("a"),r8o=o("from_config()"),t8o=o(` class
method.`),a8o=l(),sA=a("p"),n8o=o("This class cannot be instantiated directly using "),Kne=a("code"),s8o=o("__init__()"),l8o=o(" (throws an error)."),i8o=l(),et=a("div"),F(lA.$$.fragment),d8o=l(),Zne=a("p"),c8o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),f8o=l(),Ti=a("p"),m8o=o(`Note:
Loading a model from its configuration file does `),ese=a("strong"),g8o=o("not"),h8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YI=a("a"),p8o=o("from_pretrained()"),u8o=o(" to load the model weights."),_8o=l(),F(Mu.$$.fragment),b8o=l(),Ue=a("div"),F(iA.$$.fragment),v8o=l(),ose=a("p"),F8o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),T8o=l(),Ca=a("p"),M8o=o("The model class to instantiate is selected based on the "),rse=a("code"),E8o=o("model_type"),C8o=o(` property of the config object (either
passed as an argument or loaded from `),tse=a("code"),w8o=o("pretrained_model_name_or_path"),A8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ase=a("code"),y8o=o("pretrained_model_name_or_path"),L8o=o(":"),x8o=l(),G=a("ul"),Eu=a("li"),nse=a("strong"),$8o=o("albert"),k8o=o(" \u2014 "),KI=a("a"),S8o=o("AlbertForPreTraining"),R8o=o(" (ALBERT model)"),B8o=l(),Cu=a("li"),sse=a("strong"),P8o=o("bart"),I8o=o(" \u2014 "),ZI=a("a"),q8o=o("BartForConditionalGeneration"),N8o=o(" (BART model)"),j8o=l(),wu=a("li"),lse=a("strong"),D8o=o("bert"),G8o=o(" \u2014 "),eq=a("a"),O8o=o("BertForPreTraining"),V8o=o(" (BERT model)"),X8o=l(),Au=a("li"),ise=a("strong"),z8o=o("big_bird"),Q8o=o(" \u2014 "),oq=a("a"),W8o=o("BigBirdForPreTraining"),H8o=o(" (BigBird model)"),U8o=l(),yu=a("li"),dse=a("strong"),J8o=o("camembert"),Y8o=o(" \u2014 "),rq=a("a"),K8o=o("CamembertForMaskedLM"),Z8o=o(" (CamemBERT model)"),ebo=l(),Lu=a("li"),cse=a("strong"),obo=o("ctrl"),rbo=o(" \u2014 "),tq=a("a"),tbo=o("CTRLLMHeadModel"),abo=o(" (CTRL model)"),nbo=l(),xu=a("li"),fse=a("strong"),sbo=o("data2vec-text"),lbo=o(" \u2014 "),aq=a("a"),ibo=o("Data2VecTextForMaskedLM"),dbo=o(" (Data2VecText model)"),cbo=l(),$u=a("li"),mse=a("strong"),fbo=o("deberta"),mbo=o(" \u2014 "),nq=a("a"),gbo=o("DebertaForMaskedLM"),hbo=o(" (DeBERTa model)"),pbo=l(),ku=a("li"),gse=a("strong"),ubo=o("deberta-v2"),_bo=o(" \u2014 "),sq=a("a"),bbo=o("DebertaV2ForMaskedLM"),vbo=o(" (DeBERTa-v2 model)"),Fbo=l(),Su=a("li"),hse=a("strong"),Tbo=o("distilbert"),Mbo=o(" \u2014 "),lq=a("a"),Ebo=o("DistilBertForMaskedLM"),Cbo=o(" (DistilBERT model)"),wbo=l(),Ru=a("li"),pse=a("strong"),Abo=o("electra"),ybo=o(" \u2014 "),iq=a("a"),Lbo=o("ElectraForPreTraining"),xbo=o(" (ELECTRA model)"),$bo=l(),Bu=a("li"),use=a("strong"),kbo=o("flaubert"),Sbo=o(" \u2014 "),dq=a("a"),Rbo=o("FlaubertWithLMHeadModel"),Bbo=o(" (FlauBERT model)"),Pbo=l(),Pu=a("li"),_se=a("strong"),Ibo=o("fnet"),qbo=o(" \u2014 "),cq=a("a"),Nbo=o("FNetForPreTraining"),jbo=o(" (FNet model)"),Dbo=l(),Iu=a("li"),bse=a("strong"),Gbo=o("fsmt"),Obo=o(" \u2014 "),fq=a("a"),Vbo=o("FSMTForConditionalGeneration"),Xbo=o(" (FairSeq Machine-Translation model)"),zbo=l(),qu=a("li"),vse=a("strong"),Qbo=o("funnel"),Wbo=o(" \u2014 "),mq=a("a"),Hbo=o("FunnelForPreTraining"),Ubo=o(" (Funnel Transformer model)"),Jbo=l(),Nu=a("li"),Fse=a("strong"),Ybo=o("gpt2"),Kbo=o(" \u2014 "),gq=a("a"),Zbo=o("GPT2LMHeadModel"),e2o=o(" (OpenAI GPT-2 model)"),o2o=l(),ju=a("li"),Tse=a("strong"),r2o=o("ibert"),t2o=o(" \u2014 "),hq=a("a"),a2o=o("IBertForMaskedLM"),n2o=o(" (I-BERT model)"),s2o=l(),Du=a("li"),Mse=a("strong"),l2o=o("layoutlm"),i2o=o(" \u2014 "),pq=a("a"),d2o=o("LayoutLMForMaskedLM"),c2o=o(" (LayoutLM model)"),f2o=l(),Gu=a("li"),Ese=a("strong"),m2o=o("longformer"),g2o=o(" \u2014 "),uq=a("a"),h2o=o("LongformerForMaskedLM"),p2o=o(" (Longformer model)"),u2o=l(),Ou=a("li"),Cse=a("strong"),_2o=o("lxmert"),b2o=o(" \u2014 "),_q=a("a"),v2o=o("LxmertForPreTraining"),F2o=o(" (LXMERT model)"),T2o=l(),Vu=a("li"),wse=a("strong"),M2o=o("megatron-bert"),E2o=o(" \u2014 "),bq=a("a"),C2o=o("MegatronBertForPreTraining"),w2o=o(" (MegatronBert model)"),A2o=l(),Xu=a("li"),Ase=a("strong"),y2o=o("mobilebert"),L2o=o(" \u2014 "),vq=a("a"),x2o=o("MobileBertForPreTraining"),$2o=o(" (MobileBERT model)"),k2o=l(),zu=a("li"),yse=a("strong"),S2o=o("mpnet"),R2o=o(" \u2014 "),Fq=a("a"),B2o=o("MPNetForMaskedLM"),P2o=o(" (MPNet model)"),I2o=l(),Qu=a("li"),Lse=a("strong"),q2o=o("openai-gpt"),N2o=o(" \u2014 "),Tq=a("a"),j2o=o("OpenAIGPTLMHeadModel"),D2o=o(" (OpenAI GPT model)"),G2o=l(),Wu=a("li"),xse=a("strong"),O2o=o("retribert"),V2o=o(" \u2014 "),Mq=a("a"),X2o=o("RetriBertModel"),z2o=o(" (RetriBERT model)"),Q2o=l(),Hu=a("li"),$se=a("strong"),W2o=o("roberta"),H2o=o(" \u2014 "),Eq=a("a"),U2o=o("RobertaForMaskedLM"),J2o=o(" (RoBERTa model)"),Y2o=l(),Uu=a("li"),kse=a("strong"),K2o=o("squeezebert"),Z2o=o(" \u2014 "),Cq=a("a"),evo=o("SqueezeBertForMaskedLM"),ovo=o(" (SqueezeBERT model)"),rvo=l(),Ju=a("li"),Sse=a("strong"),tvo=o("t5"),avo=o(" \u2014 "),wq=a("a"),nvo=o("T5ForConditionalGeneration"),svo=o(" (T5 model)"),lvo=l(),Yu=a("li"),Rse=a("strong"),ivo=o("tapas"),dvo=o(" \u2014 "),Aq=a("a"),cvo=o("TapasForMaskedLM"),fvo=o(" (TAPAS model)"),mvo=l(),Ku=a("li"),Bse=a("strong"),gvo=o("transfo-xl"),hvo=o(" \u2014 "),yq=a("a"),pvo=o("TransfoXLLMHeadModel"),uvo=o(" (Transformer-XL model)"),_vo=l(),Zu=a("li"),Pse=a("strong"),bvo=o("unispeech"),vvo=o(" \u2014 "),Lq=a("a"),Fvo=o("UniSpeechForPreTraining"),Tvo=o(" (UniSpeech model)"),Mvo=l(),e_=a("li"),Ise=a("strong"),Evo=o("unispeech-sat"),Cvo=o(" \u2014 "),xq=a("a"),wvo=o("UniSpeechSatForPreTraining"),Avo=o(" (UniSpeechSat model)"),yvo=l(),o_=a("li"),qse=a("strong"),Lvo=o("visual_bert"),xvo=o(" \u2014 "),$q=a("a"),$vo=o("VisualBertForPreTraining"),kvo=o(" (VisualBert model)"),Svo=l(),r_=a("li"),Nse=a("strong"),Rvo=o("vit_mae"),Bvo=o(" \u2014 "),kq=a("a"),Pvo=o("ViTMAEForPreTraining"),Ivo=o(" (ViTMAE model)"),qvo=l(),t_=a("li"),jse=a("strong"),Nvo=o("wav2vec2"),jvo=o(" \u2014 "),Sq=a("a"),Dvo=o("Wav2Vec2ForPreTraining"),Gvo=o(" (Wav2Vec2 model)"),Ovo=l(),a_=a("li"),Dse=a("strong"),Vvo=o("xlm"),Xvo=o(" \u2014 "),Rq=a("a"),zvo=o("XLMWithLMHeadModel"),Qvo=o(" (XLM model)"),Wvo=l(),n_=a("li"),Gse=a("strong"),Hvo=o("xlm-roberta"),Uvo=o(" \u2014 "),Bq=a("a"),Jvo=o("XLMRobertaForMaskedLM"),Yvo=o(" (XLM-RoBERTa model)"),Kvo=l(),s_=a("li"),Ose=a("strong"),Zvo=o("xlm-roberta-xl"),eFo=o(" \u2014 "),Pq=a("a"),oFo=o("XLMRobertaXLForMaskedLM"),rFo=o(" (XLM-RoBERTa-XL model)"),tFo=l(),l_=a("li"),Vse=a("strong"),aFo=o("xlnet"),nFo=o(" \u2014 "),Iq=a("a"),sFo=o("XLNetLMHeadModel"),lFo=o(" (XLNet model)"),iFo=l(),i_=a("p"),dFo=o("The model is set in evaluation mode by default using "),Xse=a("code"),cFo=o("model.eval()"),fFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zse=a("code"),mFo=o("model.train()"),gFo=l(),F(d_.$$.fragment),jBe=l(),Mi=a("h2"),c_=a("a"),Qse=a("span"),F(dA.$$.fragment),hFo=l(),Wse=a("span"),pFo=o("AutoModelForCausalLM"),DBe=l(),$o=a("div"),F(cA.$$.fragment),uFo=l(),Ei=a("p"),_Fo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qq=a("a"),bFo=o("from_pretrained()"),vFo=o(" class method or the "),Nq=a("a"),FFo=o("from_config()"),TFo=o(` class
method.`),MFo=l(),fA=a("p"),EFo=o("This class cannot be instantiated directly using "),Hse=a("code"),CFo=o("__init__()"),wFo=o(" (throws an error)."),AFo=l(),ot=a("div"),F(mA.$$.fragment),yFo=l(),Use=a("p"),LFo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),xFo=l(),Ci=a("p"),$Fo=o(`Note:
Loading a model from its configuration file does `),Jse=a("strong"),kFo=o("not"),SFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jq=a("a"),RFo=o("from_pretrained()"),BFo=o(" to load the model weights."),PFo=l(),F(f_.$$.fragment),IFo=l(),Je=a("div"),F(gA.$$.fragment),qFo=l(),Yse=a("p"),NFo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),jFo=l(),wa=a("p"),DFo=o("The model class to instantiate is selected based on the "),Kse=a("code"),GFo=o("model_type"),OFo=o(` property of the config object (either
passed as an argument or loaded from `),Zse=a("code"),VFo=o("pretrained_model_name_or_path"),XFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ele=a("code"),zFo=o("pretrained_model_name_or_path"),QFo=o(":"),WFo=l(),z=a("ul"),m_=a("li"),ole=a("strong"),HFo=o("bart"),UFo=o(" \u2014 "),Dq=a("a"),JFo=o("BartForCausalLM"),YFo=o(" (BART model)"),KFo=l(),g_=a("li"),rle=a("strong"),ZFo=o("bert"),e6o=o(" \u2014 "),Gq=a("a"),o6o=o("BertLMHeadModel"),r6o=o(" (BERT model)"),t6o=l(),h_=a("li"),tle=a("strong"),a6o=o("bert-generation"),n6o=o(" \u2014 "),Oq=a("a"),s6o=o("BertGenerationDecoder"),l6o=o(" (Bert Generation model)"),i6o=l(),p_=a("li"),ale=a("strong"),d6o=o("big_bird"),c6o=o(" \u2014 "),Vq=a("a"),f6o=o("BigBirdForCausalLM"),m6o=o(" (BigBird model)"),g6o=l(),u_=a("li"),nle=a("strong"),h6o=o("bigbird_pegasus"),p6o=o(" \u2014 "),Xq=a("a"),u6o=o("BigBirdPegasusForCausalLM"),_6o=o(" (BigBirdPegasus model)"),b6o=l(),__=a("li"),sle=a("strong"),v6o=o("blenderbot"),F6o=o(" \u2014 "),zq=a("a"),T6o=o("BlenderbotForCausalLM"),M6o=o(" (Blenderbot model)"),E6o=l(),b_=a("li"),lle=a("strong"),C6o=o("blenderbot-small"),w6o=o(" \u2014 "),Qq=a("a"),A6o=o("BlenderbotSmallForCausalLM"),y6o=o(" (BlenderbotSmall model)"),L6o=l(),v_=a("li"),ile=a("strong"),x6o=o("camembert"),$6o=o(" \u2014 "),Wq=a("a"),k6o=o("CamembertForCausalLM"),S6o=o(" (CamemBERT model)"),R6o=l(),F_=a("li"),dle=a("strong"),B6o=o("ctrl"),P6o=o(" \u2014 "),Hq=a("a"),I6o=o("CTRLLMHeadModel"),q6o=o(" (CTRL model)"),N6o=l(),T_=a("li"),cle=a("strong"),j6o=o("data2vec-text"),D6o=o(" \u2014 "),Uq=a("a"),G6o=o("Data2VecTextForCausalLM"),O6o=o(" (Data2VecText model)"),V6o=l(),M_=a("li"),fle=a("strong"),X6o=o("electra"),z6o=o(" \u2014 "),Jq=a("a"),Q6o=o("ElectraForCausalLM"),W6o=o(" (ELECTRA model)"),H6o=l(),E_=a("li"),mle=a("strong"),U6o=o("gpt2"),J6o=o(" \u2014 "),Yq=a("a"),Y6o=o("GPT2LMHeadModel"),K6o=o(" (OpenAI GPT-2 model)"),Z6o=l(),C_=a("li"),gle=a("strong"),eTo=o("gpt_neo"),oTo=o(" \u2014 "),Kq=a("a"),rTo=o("GPTNeoForCausalLM"),tTo=o(" (GPT Neo model)"),aTo=l(),w_=a("li"),hle=a("strong"),nTo=o("gptj"),sTo=o(" \u2014 "),Zq=a("a"),lTo=o("GPTJForCausalLM"),iTo=o(" (GPT-J model)"),dTo=l(),A_=a("li"),ple=a("strong"),cTo=o("marian"),fTo=o(" \u2014 "),eN=a("a"),mTo=o("MarianForCausalLM"),gTo=o(" (Marian model)"),hTo=l(),y_=a("li"),ule=a("strong"),pTo=o("mbart"),uTo=o(" \u2014 "),oN=a("a"),_To=o("MBartForCausalLM"),bTo=o(" (mBART model)"),vTo=l(),L_=a("li"),_le=a("strong"),FTo=o("megatron-bert"),TTo=o(" \u2014 "),rN=a("a"),MTo=o("MegatronBertForCausalLM"),ETo=o(" (MegatronBert model)"),CTo=l(),x_=a("li"),ble=a("strong"),wTo=o("openai-gpt"),ATo=o(" \u2014 "),tN=a("a"),yTo=o("OpenAIGPTLMHeadModel"),LTo=o(" (OpenAI GPT model)"),xTo=l(),$_=a("li"),vle=a("strong"),$To=o("pegasus"),kTo=o(" \u2014 "),aN=a("a"),STo=o("PegasusForCausalLM"),RTo=o(" (Pegasus model)"),BTo=l(),k_=a("li"),Fle=a("strong"),PTo=o("plbart"),ITo=o(" \u2014 "),nN=a("a"),qTo=o("PLBartForCausalLM"),NTo=o(" (PLBart model)"),jTo=l(),S_=a("li"),Tle=a("strong"),DTo=o("prophetnet"),GTo=o(" \u2014 "),sN=a("a"),OTo=o("ProphetNetForCausalLM"),VTo=o(" (ProphetNet model)"),XTo=l(),R_=a("li"),Mle=a("strong"),zTo=o("qdqbert"),QTo=o(" \u2014 "),lN=a("a"),WTo=o("QDQBertLMHeadModel"),HTo=o(" (QDQBert model)"),UTo=l(),B_=a("li"),Ele=a("strong"),JTo=o("reformer"),YTo=o(" \u2014 "),iN=a("a"),KTo=o("ReformerModelWithLMHead"),ZTo=o(" (Reformer model)"),e9o=l(),P_=a("li"),Cle=a("strong"),o9o=o("rembert"),r9o=o(" \u2014 "),dN=a("a"),t9o=o("RemBertForCausalLM"),a9o=o(" (RemBERT model)"),n9o=l(),I_=a("li"),wle=a("strong"),s9o=o("roberta"),l9o=o(" \u2014 "),cN=a("a"),i9o=o("RobertaForCausalLM"),d9o=o(" (RoBERTa model)"),c9o=l(),q_=a("li"),Ale=a("strong"),f9o=o("roformer"),m9o=o(" \u2014 "),fN=a("a"),g9o=o("RoFormerForCausalLM"),h9o=o(" (RoFormer model)"),p9o=l(),N_=a("li"),yle=a("strong"),u9o=o("speech_to_text_2"),_9o=o(" \u2014 "),mN=a("a"),b9o=o("Speech2Text2ForCausalLM"),v9o=o(" (Speech2Text2 model)"),F9o=l(),j_=a("li"),Lle=a("strong"),T9o=o("transfo-xl"),M9o=o(" \u2014 "),gN=a("a"),E9o=o("TransfoXLLMHeadModel"),C9o=o(" (Transformer-XL model)"),w9o=l(),D_=a("li"),xle=a("strong"),A9o=o("trocr"),y9o=o(" \u2014 "),hN=a("a"),L9o=o("TrOCRForCausalLM"),x9o=o(" (TrOCR model)"),$9o=l(),G_=a("li"),$le=a("strong"),k9o=o("xglm"),S9o=o(" \u2014 "),pN=a("a"),R9o=o("XGLMForCausalLM"),B9o=o(" (XGLM model)"),P9o=l(),O_=a("li"),kle=a("strong"),I9o=o("xlm"),q9o=o(" \u2014 "),uN=a("a"),N9o=o("XLMWithLMHeadModel"),j9o=o(" (XLM model)"),D9o=l(),V_=a("li"),Sle=a("strong"),G9o=o("xlm-prophetnet"),O9o=o(" \u2014 "),_N=a("a"),V9o=o("XLMProphetNetForCausalLM"),X9o=o(" (XLMProphetNet model)"),z9o=l(),X_=a("li"),Rle=a("strong"),Q9o=o("xlm-roberta"),W9o=o(" \u2014 "),bN=a("a"),H9o=o("XLMRobertaForCausalLM"),U9o=o(" (XLM-RoBERTa model)"),J9o=l(),z_=a("li"),Ble=a("strong"),Y9o=o("xlm-roberta-xl"),K9o=o(" \u2014 "),vN=a("a"),Z9o=o("XLMRobertaXLForCausalLM"),eMo=o(" (XLM-RoBERTa-XL model)"),oMo=l(),Q_=a("li"),Ple=a("strong"),rMo=o("xlnet"),tMo=o(" \u2014 "),FN=a("a"),aMo=o("XLNetLMHeadModel"),nMo=o(" (XLNet model)"),sMo=l(),W_=a("p"),lMo=o("The model is set in evaluation mode by default using "),Ile=a("code"),iMo=o("model.eval()"),dMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qle=a("code"),cMo=o("model.train()"),fMo=l(),F(H_.$$.fragment),GBe=l(),wi=a("h2"),U_=a("a"),Nle=a("span"),F(hA.$$.fragment),mMo=l(),jle=a("span"),gMo=o("AutoModelForMaskedLM"),OBe=l(),ko=a("div"),F(pA.$$.fragment),hMo=l(),Ai=a("p"),pMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),TN=a("a"),uMo=o("from_pretrained()"),_Mo=o(" class method or the "),MN=a("a"),bMo=o("from_config()"),vMo=o(` class
method.`),FMo=l(),uA=a("p"),TMo=o("This class cannot be instantiated directly using "),Dle=a("code"),MMo=o("__init__()"),EMo=o(" (throws an error)."),CMo=l(),rt=a("div"),F(_A.$$.fragment),wMo=l(),Gle=a("p"),AMo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),yMo=l(),yi=a("p"),LMo=o(`Note:
Loading a model from its configuration file does `),Ole=a("strong"),xMo=o("not"),$Mo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EN=a("a"),kMo=o("from_pretrained()"),SMo=o(" to load the model weights."),RMo=l(),F(J_.$$.fragment),BMo=l(),Ye=a("div"),F(bA.$$.fragment),PMo=l(),Vle=a("p"),IMo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),qMo=l(),Aa=a("p"),NMo=o("The model class to instantiate is selected based on the "),Xle=a("code"),jMo=o("model_type"),DMo=o(` property of the config object (either
passed as an argument or loaded from `),zle=a("code"),GMo=o("pretrained_model_name_or_path"),OMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qle=a("code"),VMo=o("pretrained_model_name_or_path"),XMo=o(":"),zMo=l(),Q=a("ul"),Y_=a("li"),Wle=a("strong"),QMo=o("albert"),WMo=o(" \u2014 "),CN=a("a"),HMo=o("AlbertForMaskedLM"),UMo=o(" (ALBERT model)"),JMo=l(),K_=a("li"),Hle=a("strong"),YMo=o("bart"),KMo=o(" \u2014 "),wN=a("a"),ZMo=o("BartForConditionalGeneration"),e4o=o(" (BART model)"),o4o=l(),Z_=a("li"),Ule=a("strong"),r4o=o("bert"),t4o=o(" \u2014 "),AN=a("a"),a4o=o("BertForMaskedLM"),n4o=o(" (BERT model)"),s4o=l(),e1=a("li"),Jle=a("strong"),l4o=o("big_bird"),i4o=o(" \u2014 "),yN=a("a"),d4o=o("BigBirdForMaskedLM"),c4o=o(" (BigBird model)"),f4o=l(),o1=a("li"),Yle=a("strong"),m4o=o("camembert"),g4o=o(" \u2014 "),LN=a("a"),h4o=o("CamembertForMaskedLM"),p4o=o(" (CamemBERT model)"),u4o=l(),r1=a("li"),Kle=a("strong"),_4o=o("convbert"),b4o=o(" \u2014 "),xN=a("a"),v4o=o("ConvBertForMaskedLM"),F4o=o(" (ConvBERT model)"),T4o=l(),t1=a("li"),Zle=a("strong"),M4o=o("data2vec-text"),E4o=o(" \u2014 "),$N=a("a"),C4o=o("Data2VecTextForMaskedLM"),w4o=o(" (Data2VecText model)"),A4o=l(),a1=a("li"),eie=a("strong"),y4o=o("deberta"),L4o=o(" \u2014 "),kN=a("a"),x4o=o("DebertaForMaskedLM"),$4o=o(" (DeBERTa model)"),k4o=l(),n1=a("li"),oie=a("strong"),S4o=o("deberta-v2"),R4o=o(" \u2014 "),SN=a("a"),B4o=o("DebertaV2ForMaskedLM"),P4o=o(" (DeBERTa-v2 model)"),I4o=l(),s1=a("li"),rie=a("strong"),q4o=o("distilbert"),N4o=o(" \u2014 "),RN=a("a"),j4o=o("DistilBertForMaskedLM"),D4o=o(" (DistilBERT model)"),G4o=l(),l1=a("li"),tie=a("strong"),O4o=o("electra"),V4o=o(" \u2014 "),BN=a("a"),X4o=o("ElectraForMaskedLM"),z4o=o(" (ELECTRA model)"),Q4o=l(),i1=a("li"),aie=a("strong"),W4o=o("flaubert"),H4o=o(" \u2014 "),PN=a("a"),U4o=o("FlaubertWithLMHeadModel"),J4o=o(" (FlauBERT model)"),Y4o=l(),d1=a("li"),nie=a("strong"),K4o=o("fnet"),Z4o=o(" \u2014 "),IN=a("a"),eEo=o("FNetForMaskedLM"),oEo=o(" (FNet model)"),rEo=l(),c1=a("li"),sie=a("strong"),tEo=o("funnel"),aEo=o(" \u2014 "),qN=a("a"),nEo=o("FunnelForMaskedLM"),sEo=o(" (Funnel Transformer model)"),lEo=l(),f1=a("li"),lie=a("strong"),iEo=o("ibert"),dEo=o(" \u2014 "),NN=a("a"),cEo=o("IBertForMaskedLM"),fEo=o(" (I-BERT model)"),mEo=l(),m1=a("li"),iie=a("strong"),gEo=o("layoutlm"),hEo=o(" \u2014 "),jN=a("a"),pEo=o("LayoutLMForMaskedLM"),uEo=o(" (LayoutLM model)"),_Eo=l(),g1=a("li"),die=a("strong"),bEo=o("longformer"),vEo=o(" \u2014 "),DN=a("a"),FEo=o("LongformerForMaskedLM"),TEo=o(" (Longformer model)"),MEo=l(),h1=a("li"),cie=a("strong"),EEo=o("mbart"),CEo=o(" \u2014 "),GN=a("a"),wEo=o("MBartForConditionalGeneration"),AEo=o(" (mBART model)"),yEo=l(),p1=a("li"),fie=a("strong"),LEo=o("megatron-bert"),xEo=o(" \u2014 "),ON=a("a"),$Eo=o("MegatronBertForMaskedLM"),kEo=o(" (MegatronBert model)"),SEo=l(),u1=a("li"),mie=a("strong"),REo=o("mobilebert"),BEo=o(" \u2014 "),VN=a("a"),PEo=o("MobileBertForMaskedLM"),IEo=o(" (MobileBERT model)"),qEo=l(),_1=a("li"),gie=a("strong"),NEo=o("mpnet"),jEo=o(" \u2014 "),XN=a("a"),DEo=o("MPNetForMaskedLM"),GEo=o(" (MPNet model)"),OEo=l(),b1=a("li"),hie=a("strong"),VEo=o("nystromformer"),XEo=o(" \u2014 "),zN=a("a"),zEo=o("NystromformerForMaskedLM"),QEo=o(" (Nystromformer model)"),WEo=l(),v1=a("li"),pie=a("strong"),HEo=o("perceiver"),UEo=o(" \u2014 "),QN=a("a"),JEo=o("PerceiverForMaskedLM"),YEo=o(" (Perceiver model)"),KEo=l(),F1=a("li"),uie=a("strong"),ZEo=o("qdqbert"),e5o=o(" \u2014 "),WN=a("a"),o5o=o("QDQBertForMaskedLM"),r5o=o(" (QDQBert model)"),t5o=l(),T1=a("li"),_ie=a("strong"),a5o=o("reformer"),n5o=o(" \u2014 "),HN=a("a"),s5o=o("ReformerForMaskedLM"),l5o=o(" (Reformer model)"),i5o=l(),M1=a("li"),bie=a("strong"),d5o=o("rembert"),c5o=o(" \u2014 "),UN=a("a"),f5o=o("RemBertForMaskedLM"),m5o=o(" (RemBERT model)"),g5o=l(),E1=a("li"),vie=a("strong"),h5o=o("roberta"),p5o=o(" \u2014 "),JN=a("a"),u5o=o("RobertaForMaskedLM"),_5o=o(" (RoBERTa model)"),b5o=l(),C1=a("li"),Fie=a("strong"),v5o=o("roformer"),F5o=o(" \u2014 "),YN=a("a"),T5o=o("RoFormerForMaskedLM"),M5o=o(" (RoFormer model)"),E5o=l(),w1=a("li"),Tie=a("strong"),C5o=o("squeezebert"),w5o=o(" \u2014 "),KN=a("a"),A5o=o("SqueezeBertForMaskedLM"),y5o=o(" (SqueezeBERT model)"),L5o=l(),A1=a("li"),Mie=a("strong"),x5o=o("tapas"),$5o=o(" \u2014 "),ZN=a("a"),k5o=o("TapasForMaskedLM"),S5o=o(" (TAPAS model)"),R5o=l(),y1=a("li"),Eie=a("strong"),B5o=o("wav2vec2"),P5o=o(" \u2014 "),Cie=a("code"),I5o=o("Wav2Vec2ForMaskedLM"),q5o=o(" (Wav2Vec2 model)"),N5o=l(),L1=a("li"),wie=a("strong"),j5o=o("xlm"),D5o=o(" \u2014 "),ej=a("a"),G5o=o("XLMWithLMHeadModel"),O5o=o(" (XLM model)"),V5o=l(),x1=a("li"),Aie=a("strong"),X5o=o("xlm-roberta"),z5o=o(" \u2014 "),oj=a("a"),Q5o=o("XLMRobertaForMaskedLM"),W5o=o(" (XLM-RoBERTa model)"),H5o=l(),$1=a("li"),yie=a("strong"),U5o=o("xlm-roberta-xl"),J5o=o(" \u2014 "),rj=a("a"),Y5o=o("XLMRobertaXLForMaskedLM"),K5o=o(" (XLM-RoBERTa-XL model)"),Z5o=l(),k1=a("li"),Lie=a("strong"),eCo=o("yoso"),oCo=o(" \u2014 "),tj=a("a"),rCo=o("YosoForMaskedLM"),tCo=o(" (YOSO model)"),aCo=l(),S1=a("p"),nCo=o("The model is set in evaluation mode by default using "),xie=a("code"),sCo=o("model.eval()"),lCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ie=a("code"),iCo=o("model.train()"),dCo=l(),F(R1.$$.fragment),VBe=l(),Li=a("h2"),B1=a("a"),kie=a("span"),F(vA.$$.fragment),cCo=l(),Sie=a("span"),fCo=o("AutoModelForSeq2SeqLM"),XBe=l(),So=a("div"),F(FA.$$.fragment),mCo=l(),xi=a("p"),gCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),aj=a("a"),hCo=o("from_pretrained()"),pCo=o(" class method or the "),nj=a("a"),uCo=o("from_config()"),_Co=o(` class
method.`),bCo=l(),TA=a("p"),vCo=o("This class cannot be instantiated directly using "),Rie=a("code"),FCo=o("__init__()"),TCo=o(" (throws an error)."),MCo=l(),tt=a("div"),F(MA.$$.fragment),ECo=l(),Bie=a("p"),CCo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),wCo=l(),$i=a("p"),ACo=o(`Note:
Loading a model from its configuration file does `),Pie=a("strong"),yCo=o("not"),LCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sj=a("a"),xCo=o("from_pretrained()"),$Co=o(" to load the model weights."),kCo=l(),F(P1.$$.fragment),SCo=l(),Ke=a("div"),F(EA.$$.fragment),RCo=l(),Iie=a("p"),BCo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),PCo=l(),ya=a("p"),ICo=o("The model class to instantiate is selected based on the "),qie=a("code"),qCo=o("model_type"),NCo=o(` property of the config object (either
passed as an argument or loaded from `),Nie=a("code"),jCo=o("pretrained_model_name_or_path"),DCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jie=a("code"),GCo=o("pretrained_model_name_or_path"),OCo=o(":"),VCo=l(),he=a("ul"),I1=a("li"),Die=a("strong"),XCo=o("bart"),zCo=o(" \u2014 "),lj=a("a"),QCo=o("BartForConditionalGeneration"),WCo=o(" (BART model)"),HCo=l(),q1=a("li"),Gie=a("strong"),UCo=o("bigbird_pegasus"),JCo=o(" \u2014 "),ij=a("a"),YCo=o("BigBirdPegasusForConditionalGeneration"),KCo=o(" (BigBirdPegasus model)"),ZCo=l(),N1=a("li"),Oie=a("strong"),e3o=o("blenderbot"),o3o=o(" \u2014 "),dj=a("a"),r3o=o("BlenderbotForConditionalGeneration"),t3o=o(" (Blenderbot model)"),a3o=l(),j1=a("li"),Vie=a("strong"),n3o=o("blenderbot-small"),s3o=o(" \u2014 "),cj=a("a"),l3o=o("BlenderbotSmallForConditionalGeneration"),i3o=o(" (BlenderbotSmall model)"),d3o=l(),D1=a("li"),Xie=a("strong"),c3o=o("encoder-decoder"),f3o=o(" \u2014 "),fj=a("a"),m3o=o("EncoderDecoderModel"),g3o=o(" (Encoder decoder model)"),h3o=l(),G1=a("li"),zie=a("strong"),p3o=o("fsmt"),u3o=o(" \u2014 "),mj=a("a"),_3o=o("FSMTForConditionalGeneration"),b3o=o(" (FairSeq Machine-Translation model)"),v3o=l(),O1=a("li"),Qie=a("strong"),F3o=o("led"),T3o=o(" \u2014 "),gj=a("a"),M3o=o("LEDForConditionalGeneration"),E3o=o(" (LED model)"),C3o=l(),V1=a("li"),Wie=a("strong"),w3o=o("m2m_100"),A3o=o(" \u2014 "),hj=a("a"),y3o=o("M2M100ForConditionalGeneration"),L3o=o(" (M2M100 model)"),x3o=l(),X1=a("li"),Hie=a("strong"),$3o=o("marian"),k3o=o(" \u2014 "),pj=a("a"),S3o=o("MarianMTModel"),R3o=o(" (Marian model)"),B3o=l(),z1=a("li"),Uie=a("strong"),P3o=o("mbart"),I3o=o(" \u2014 "),uj=a("a"),q3o=o("MBartForConditionalGeneration"),N3o=o(" (mBART model)"),j3o=l(),Q1=a("li"),Jie=a("strong"),D3o=o("mt5"),G3o=o(" \u2014 "),_j=a("a"),O3o=o("MT5ForConditionalGeneration"),V3o=o(" (mT5 model)"),X3o=l(),W1=a("li"),Yie=a("strong"),z3o=o("pegasus"),Q3o=o(" \u2014 "),bj=a("a"),W3o=o("PegasusForConditionalGeneration"),H3o=o(" (Pegasus model)"),U3o=l(),H1=a("li"),Kie=a("strong"),J3o=o("plbart"),Y3o=o(" \u2014 "),vj=a("a"),K3o=o("PLBartForConditionalGeneration"),Z3o=o(" (PLBart model)"),ewo=l(),U1=a("li"),Zie=a("strong"),owo=o("prophetnet"),rwo=o(" \u2014 "),Fj=a("a"),two=o("ProphetNetForConditionalGeneration"),awo=o(" (ProphetNet model)"),nwo=l(),J1=a("li"),ede=a("strong"),swo=o("t5"),lwo=o(" \u2014 "),Tj=a("a"),iwo=o("T5ForConditionalGeneration"),dwo=o(" (T5 model)"),cwo=l(),Y1=a("li"),ode=a("strong"),fwo=o("tapex"),mwo=o(" \u2014 "),Mj=a("a"),gwo=o("BartForConditionalGeneration"),hwo=o(" (TAPEX model)"),pwo=l(),K1=a("li"),rde=a("strong"),uwo=o("xlm-prophetnet"),_wo=o(" \u2014 "),Ej=a("a"),bwo=o("XLMProphetNetForConditionalGeneration"),vwo=o(" (XLMProphetNet model)"),Fwo=l(),Z1=a("p"),Two=o("The model is set in evaluation mode by default using "),tde=a("code"),Mwo=o("model.eval()"),Ewo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ade=a("code"),Cwo=o("model.train()"),wwo=l(),F(e8.$$.fragment),zBe=l(),ki=a("h2"),o8=a("a"),nde=a("span"),F(CA.$$.fragment),Awo=l(),sde=a("span"),ywo=o("AutoModelForSequenceClassification"),QBe=l(),Ro=a("div"),F(wA.$$.fragment),Lwo=l(),Si=a("p"),xwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Cj=a("a"),$wo=o("from_pretrained()"),kwo=o(" class method or the "),wj=a("a"),Swo=o("from_config()"),Rwo=o(` class
method.`),Bwo=l(),AA=a("p"),Pwo=o("This class cannot be instantiated directly using "),lde=a("code"),Iwo=o("__init__()"),qwo=o(" (throws an error)."),Nwo=l(),at=a("div"),F(yA.$$.fragment),jwo=l(),ide=a("p"),Dwo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Gwo=l(),Ri=a("p"),Owo=o(`Note:
Loading a model from its configuration file does `),dde=a("strong"),Vwo=o("not"),Xwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Aj=a("a"),zwo=o("from_pretrained()"),Qwo=o(" to load the model weights."),Wwo=l(),F(r8.$$.fragment),Hwo=l(),Ze=a("div"),F(LA.$$.fragment),Uwo=l(),cde=a("p"),Jwo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Ywo=l(),La=a("p"),Kwo=o("The model class to instantiate is selected based on the "),fde=a("code"),Zwo=o("model_type"),eAo=o(` property of the config object (either
passed as an argument or loaded from `),mde=a("code"),oAo=o("pretrained_model_name_or_path"),rAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gde=a("code"),tAo=o("pretrained_model_name_or_path"),aAo=o(":"),nAo=l(),q=a("ul"),t8=a("li"),hde=a("strong"),sAo=o("albert"),lAo=o(" \u2014 "),yj=a("a"),iAo=o("AlbertForSequenceClassification"),dAo=o(" (ALBERT model)"),cAo=l(),a8=a("li"),pde=a("strong"),fAo=o("bart"),mAo=o(" \u2014 "),Lj=a("a"),gAo=o("BartForSequenceClassification"),hAo=o(" (BART model)"),pAo=l(),n8=a("li"),ude=a("strong"),uAo=o("bert"),_Ao=o(" \u2014 "),xj=a("a"),bAo=o("BertForSequenceClassification"),vAo=o(" (BERT model)"),FAo=l(),s8=a("li"),_de=a("strong"),TAo=o("big_bird"),MAo=o(" \u2014 "),$j=a("a"),EAo=o("BigBirdForSequenceClassification"),CAo=o(" (BigBird model)"),wAo=l(),l8=a("li"),bde=a("strong"),AAo=o("bigbird_pegasus"),yAo=o(" \u2014 "),kj=a("a"),LAo=o("BigBirdPegasusForSequenceClassification"),xAo=o(" (BigBirdPegasus model)"),$Ao=l(),i8=a("li"),vde=a("strong"),kAo=o("camembert"),SAo=o(" \u2014 "),Sj=a("a"),RAo=o("CamembertForSequenceClassification"),BAo=o(" (CamemBERT model)"),PAo=l(),d8=a("li"),Fde=a("strong"),IAo=o("canine"),qAo=o(" \u2014 "),Rj=a("a"),NAo=o("CanineForSequenceClassification"),jAo=o(" (Canine model)"),DAo=l(),c8=a("li"),Tde=a("strong"),GAo=o("convbert"),OAo=o(" \u2014 "),Bj=a("a"),VAo=o("ConvBertForSequenceClassification"),XAo=o(" (ConvBERT model)"),zAo=l(),f8=a("li"),Mde=a("strong"),QAo=o("ctrl"),WAo=o(" \u2014 "),Pj=a("a"),HAo=o("CTRLForSequenceClassification"),UAo=o(" (CTRL model)"),JAo=l(),m8=a("li"),Ede=a("strong"),YAo=o("data2vec-text"),KAo=o(" \u2014 "),Ij=a("a"),ZAo=o("Data2VecTextForSequenceClassification"),e0o=o(" (Data2VecText model)"),o0o=l(),g8=a("li"),Cde=a("strong"),r0o=o("deberta"),t0o=o(" \u2014 "),qj=a("a"),a0o=o("DebertaForSequenceClassification"),n0o=o(" (DeBERTa model)"),s0o=l(),h8=a("li"),wde=a("strong"),l0o=o("deberta-v2"),i0o=o(" \u2014 "),Nj=a("a"),d0o=o("DebertaV2ForSequenceClassification"),c0o=o(" (DeBERTa-v2 model)"),f0o=l(),p8=a("li"),Ade=a("strong"),m0o=o("distilbert"),g0o=o(" \u2014 "),jj=a("a"),h0o=o("DistilBertForSequenceClassification"),p0o=o(" (DistilBERT model)"),u0o=l(),u8=a("li"),yde=a("strong"),_0o=o("electra"),b0o=o(" \u2014 "),Dj=a("a"),v0o=o("ElectraForSequenceClassification"),F0o=o(" (ELECTRA model)"),T0o=l(),_8=a("li"),Lde=a("strong"),M0o=o("flaubert"),E0o=o(" \u2014 "),Gj=a("a"),C0o=o("FlaubertForSequenceClassification"),w0o=o(" (FlauBERT model)"),A0o=l(),b8=a("li"),xde=a("strong"),y0o=o("fnet"),L0o=o(" \u2014 "),Oj=a("a"),x0o=o("FNetForSequenceClassification"),$0o=o(" (FNet model)"),k0o=l(),v8=a("li"),$de=a("strong"),S0o=o("funnel"),R0o=o(" \u2014 "),Vj=a("a"),B0o=o("FunnelForSequenceClassification"),P0o=o(" (Funnel Transformer model)"),I0o=l(),F8=a("li"),kde=a("strong"),q0o=o("gpt2"),N0o=o(" \u2014 "),Xj=a("a"),j0o=o("GPT2ForSequenceClassification"),D0o=o(" (OpenAI GPT-2 model)"),G0o=l(),T8=a("li"),Sde=a("strong"),O0o=o("gpt_neo"),V0o=o(" \u2014 "),zj=a("a"),X0o=o("GPTNeoForSequenceClassification"),z0o=o(" (GPT Neo model)"),Q0o=l(),M8=a("li"),Rde=a("strong"),W0o=o("gptj"),H0o=o(" \u2014 "),Qj=a("a"),U0o=o("GPTJForSequenceClassification"),J0o=o(" (GPT-J model)"),Y0o=l(),E8=a("li"),Bde=a("strong"),K0o=o("ibert"),Z0o=o(" \u2014 "),Wj=a("a"),eyo=o("IBertForSequenceClassification"),oyo=o(" (I-BERT model)"),ryo=l(),C8=a("li"),Pde=a("strong"),tyo=o("layoutlm"),ayo=o(" \u2014 "),Hj=a("a"),nyo=o("LayoutLMForSequenceClassification"),syo=o(" (LayoutLM model)"),lyo=l(),w8=a("li"),Ide=a("strong"),iyo=o("layoutlmv2"),dyo=o(" \u2014 "),Uj=a("a"),cyo=o("LayoutLMv2ForSequenceClassification"),fyo=o(" (LayoutLMv2 model)"),myo=l(),A8=a("li"),qde=a("strong"),gyo=o("led"),hyo=o(" \u2014 "),Jj=a("a"),pyo=o("LEDForSequenceClassification"),uyo=o(" (LED model)"),_yo=l(),y8=a("li"),Nde=a("strong"),byo=o("longformer"),vyo=o(" \u2014 "),Yj=a("a"),Fyo=o("LongformerForSequenceClassification"),Tyo=o(" (Longformer model)"),Myo=l(),L8=a("li"),jde=a("strong"),Eyo=o("mbart"),Cyo=o(" \u2014 "),Kj=a("a"),wyo=o("MBartForSequenceClassification"),Ayo=o(" (mBART model)"),yyo=l(),x8=a("li"),Dde=a("strong"),Lyo=o("megatron-bert"),xyo=o(" \u2014 "),Zj=a("a"),$yo=o("MegatronBertForSequenceClassification"),kyo=o(" (MegatronBert model)"),Syo=l(),$8=a("li"),Gde=a("strong"),Ryo=o("mobilebert"),Byo=o(" \u2014 "),eD=a("a"),Pyo=o("MobileBertForSequenceClassification"),Iyo=o(" (MobileBERT model)"),qyo=l(),k8=a("li"),Ode=a("strong"),Nyo=o("mpnet"),jyo=o(" \u2014 "),oD=a("a"),Dyo=o("MPNetForSequenceClassification"),Gyo=o(" (MPNet model)"),Oyo=l(),S8=a("li"),Vde=a("strong"),Vyo=o("nystromformer"),Xyo=o(" \u2014 "),rD=a("a"),zyo=o("NystromformerForSequenceClassification"),Qyo=o(" (Nystromformer model)"),Wyo=l(),R8=a("li"),Xde=a("strong"),Hyo=o("openai-gpt"),Uyo=o(" \u2014 "),tD=a("a"),Jyo=o("OpenAIGPTForSequenceClassification"),Yyo=o(" (OpenAI GPT model)"),Kyo=l(),B8=a("li"),zde=a("strong"),Zyo=o("perceiver"),eLo=o(" \u2014 "),aD=a("a"),oLo=o("PerceiverForSequenceClassification"),rLo=o(" (Perceiver model)"),tLo=l(),P8=a("li"),Qde=a("strong"),aLo=o("plbart"),nLo=o(" \u2014 "),nD=a("a"),sLo=o("PLBartForSequenceClassification"),lLo=o(" (PLBart model)"),iLo=l(),I8=a("li"),Wde=a("strong"),dLo=o("qdqbert"),cLo=o(" \u2014 "),sD=a("a"),fLo=o("QDQBertForSequenceClassification"),mLo=o(" (QDQBert model)"),gLo=l(),q8=a("li"),Hde=a("strong"),hLo=o("reformer"),pLo=o(" \u2014 "),lD=a("a"),uLo=o("ReformerForSequenceClassification"),_Lo=o(" (Reformer model)"),bLo=l(),N8=a("li"),Ude=a("strong"),vLo=o("rembert"),FLo=o(" \u2014 "),iD=a("a"),TLo=o("RemBertForSequenceClassification"),MLo=o(" (RemBERT model)"),ELo=l(),j8=a("li"),Jde=a("strong"),CLo=o("roberta"),wLo=o(" \u2014 "),dD=a("a"),ALo=o("RobertaForSequenceClassification"),yLo=o(" (RoBERTa model)"),LLo=l(),D8=a("li"),Yde=a("strong"),xLo=o("roformer"),$Lo=o(" \u2014 "),cD=a("a"),kLo=o("RoFormerForSequenceClassification"),SLo=o(" (RoFormer model)"),RLo=l(),G8=a("li"),Kde=a("strong"),BLo=o("squeezebert"),PLo=o(" \u2014 "),fD=a("a"),ILo=o("SqueezeBertForSequenceClassification"),qLo=o(" (SqueezeBERT model)"),NLo=l(),O8=a("li"),Zde=a("strong"),jLo=o("tapas"),DLo=o(" \u2014 "),mD=a("a"),GLo=o("TapasForSequenceClassification"),OLo=o(" (TAPAS model)"),VLo=l(),V8=a("li"),ece=a("strong"),XLo=o("tapex"),zLo=o(" \u2014 "),gD=a("a"),QLo=o("BartForSequenceClassification"),WLo=o(" (TAPEX model)"),HLo=l(),X8=a("li"),oce=a("strong"),ULo=o("transfo-xl"),JLo=o(" \u2014 "),hD=a("a"),YLo=o("TransfoXLForSequenceClassification"),KLo=o(" (Transformer-XL model)"),ZLo=l(),z8=a("li"),rce=a("strong"),e7o=o("xlm"),o7o=o(" \u2014 "),pD=a("a"),r7o=o("XLMForSequenceClassification"),t7o=o(" (XLM model)"),a7o=l(),Q8=a("li"),tce=a("strong"),n7o=o("xlm-roberta"),s7o=o(" \u2014 "),uD=a("a"),l7o=o("XLMRobertaForSequenceClassification"),i7o=o(" (XLM-RoBERTa model)"),d7o=l(),W8=a("li"),ace=a("strong"),c7o=o("xlm-roberta-xl"),f7o=o(" \u2014 "),_D=a("a"),m7o=o("XLMRobertaXLForSequenceClassification"),g7o=o(" (XLM-RoBERTa-XL model)"),h7o=l(),H8=a("li"),nce=a("strong"),p7o=o("xlnet"),u7o=o(" \u2014 "),bD=a("a"),_7o=o("XLNetForSequenceClassification"),b7o=o(" (XLNet model)"),v7o=l(),U8=a("li"),sce=a("strong"),F7o=o("yoso"),T7o=o(" \u2014 "),vD=a("a"),M7o=o("YosoForSequenceClassification"),E7o=o(" (YOSO model)"),C7o=l(),J8=a("p"),w7o=o("The model is set in evaluation mode by default using "),lce=a("code"),A7o=o("model.eval()"),y7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ice=a("code"),L7o=o("model.train()"),x7o=l(),F(Y8.$$.fragment),WBe=l(),Bi=a("h2"),K8=a("a"),dce=a("span"),F(xA.$$.fragment),$7o=l(),cce=a("span"),k7o=o("AutoModelForMultipleChoice"),HBe=l(),Bo=a("div"),F($A.$$.fragment),S7o=l(),Pi=a("p"),R7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),FD=a("a"),B7o=o("from_pretrained()"),P7o=o(" class method or the "),TD=a("a"),I7o=o("from_config()"),q7o=o(` class
method.`),N7o=l(),kA=a("p"),j7o=o("This class cannot be instantiated directly using "),fce=a("code"),D7o=o("__init__()"),G7o=o(" (throws an error)."),O7o=l(),nt=a("div"),F(SA.$$.fragment),V7o=l(),mce=a("p"),X7o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),z7o=l(),Ii=a("p"),Q7o=o(`Note:
Loading a model from its configuration file does `),gce=a("strong"),W7o=o("not"),H7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MD=a("a"),U7o=o("from_pretrained()"),J7o=o(" to load the model weights."),Y7o=l(),F(Z8.$$.fragment),K7o=l(),eo=a("div"),F(RA.$$.fragment),Z7o=l(),hce=a("p"),exo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),oxo=l(),xa=a("p"),rxo=o("The model class to instantiate is selected based on the "),pce=a("code"),txo=o("model_type"),axo=o(` property of the config object (either
passed as an argument or loaded from `),uce=a("code"),nxo=o("pretrained_model_name_or_path"),sxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ce=a("code"),lxo=o("pretrained_model_name_or_path"),ixo=o(":"),dxo=l(),Y=a("ul"),eb=a("li"),bce=a("strong"),cxo=o("albert"),fxo=o(" \u2014 "),ED=a("a"),mxo=o("AlbertForMultipleChoice"),gxo=o(" (ALBERT model)"),hxo=l(),ob=a("li"),vce=a("strong"),pxo=o("bert"),uxo=o(" \u2014 "),CD=a("a"),_xo=o("BertForMultipleChoice"),bxo=o(" (BERT model)"),vxo=l(),rb=a("li"),Fce=a("strong"),Fxo=o("big_bird"),Txo=o(" \u2014 "),wD=a("a"),Mxo=o("BigBirdForMultipleChoice"),Exo=o(" (BigBird model)"),Cxo=l(),tb=a("li"),Tce=a("strong"),wxo=o("camembert"),Axo=o(" \u2014 "),AD=a("a"),yxo=o("CamembertForMultipleChoice"),Lxo=o(" (CamemBERT model)"),xxo=l(),ab=a("li"),Mce=a("strong"),$xo=o("canine"),kxo=o(" \u2014 "),yD=a("a"),Sxo=o("CanineForMultipleChoice"),Rxo=o(" (Canine model)"),Bxo=l(),nb=a("li"),Ece=a("strong"),Pxo=o("convbert"),Ixo=o(" \u2014 "),LD=a("a"),qxo=o("ConvBertForMultipleChoice"),Nxo=o(" (ConvBERT model)"),jxo=l(),sb=a("li"),Cce=a("strong"),Dxo=o("data2vec-text"),Gxo=o(" \u2014 "),xD=a("a"),Oxo=o("Data2VecTextForMultipleChoice"),Vxo=o(" (Data2VecText model)"),Xxo=l(),lb=a("li"),wce=a("strong"),zxo=o("distilbert"),Qxo=o(" \u2014 "),$D=a("a"),Wxo=o("DistilBertForMultipleChoice"),Hxo=o(" (DistilBERT model)"),Uxo=l(),ib=a("li"),Ace=a("strong"),Jxo=o("electra"),Yxo=o(" \u2014 "),kD=a("a"),Kxo=o("ElectraForMultipleChoice"),Zxo=o(" (ELECTRA model)"),e$o=l(),db=a("li"),yce=a("strong"),o$o=o("flaubert"),r$o=o(" \u2014 "),SD=a("a"),t$o=o("FlaubertForMultipleChoice"),a$o=o(" (FlauBERT model)"),n$o=l(),cb=a("li"),Lce=a("strong"),s$o=o("fnet"),l$o=o(" \u2014 "),RD=a("a"),i$o=o("FNetForMultipleChoice"),d$o=o(" (FNet model)"),c$o=l(),fb=a("li"),xce=a("strong"),f$o=o("funnel"),m$o=o(" \u2014 "),BD=a("a"),g$o=o("FunnelForMultipleChoice"),h$o=o(" (Funnel Transformer model)"),p$o=l(),mb=a("li"),$ce=a("strong"),u$o=o("ibert"),_$o=o(" \u2014 "),PD=a("a"),b$o=o("IBertForMultipleChoice"),v$o=o(" (I-BERT model)"),F$o=l(),gb=a("li"),kce=a("strong"),T$o=o("longformer"),M$o=o(" \u2014 "),ID=a("a"),E$o=o("LongformerForMultipleChoice"),C$o=o(" (Longformer model)"),w$o=l(),hb=a("li"),Sce=a("strong"),A$o=o("megatron-bert"),y$o=o(" \u2014 "),qD=a("a"),L$o=o("MegatronBertForMultipleChoice"),x$o=o(" (MegatronBert model)"),$$o=l(),pb=a("li"),Rce=a("strong"),k$o=o("mobilebert"),S$o=o(" \u2014 "),ND=a("a"),R$o=o("MobileBertForMultipleChoice"),B$o=o(" (MobileBERT model)"),P$o=l(),ub=a("li"),Bce=a("strong"),I$o=o("mpnet"),q$o=o(" \u2014 "),jD=a("a"),N$o=o("MPNetForMultipleChoice"),j$o=o(" (MPNet model)"),D$o=l(),_b=a("li"),Pce=a("strong"),G$o=o("nystromformer"),O$o=o(" \u2014 "),DD=a("a"),V$o=o("NystromformerForMultipleChoice"),X$o=o(" (Nystromformer model)"),z$o=l(),bb=a("li"),Ice=a("strong"),Q$o=o("qdqbert"),W$o=o(" \u2014 "),GD=a("a"),H$o=o("QDQBertForMultipleChoice"),U$o=o(" (QDQBert model)"),J$o=l(),vb=a("li"),qce=a("strong"),Y$o=o("rembert"),K$o=o(" \u2014 "),OD=a("a"),Z$o=o("RemBertForMultipleChoice"),eko=o(" (RemBERT model)"),oko=l(),Fb=a("li"),Nce=a("strong"),rko=o("roberta"),tko=o(" \u2014 "),VD=a("a"),ako=o("RobertaForMultipleChoice"),nko=o(" (RoBERTa model)"),sko=l(),Tb=a("li"),jce=a("strong"),lko=o("roformer"),iko=o(" \u2014 "),XD=a("a"),dko=o("RoFormerForMultipleChoice"),cko=o(" (RoFormer model)"),fko=l(),Mb=a("li"),Dce=a("strong"),mko=o("squeezebert"),gko=o(" \u2014 "),zD=a("a"),hko=o("SqueezeBertForMultipleChoice"),pko=o(" (SqueezeBERT model)"),uko=l(),Eb=a("li"),Gce=a("strong"),_ko=o("xlm"),bko=o(" \u2014 "),QD=a("a"),vko=o("XLMForMultipleChoice"),Fko=o(" (XLM model)"),Tko=l(),Cb=a("li"),Oce=a("strong"),Mko=o("xlm-roberta"),Eko=o(" \u2014 "),WD=a("a"),Cko=o("XLMRobertaForMultipleChoice"),wko=o(" (XLM-RoBERTa model)"),Ako=l(),wb=a("li"),Vce=a("strong"),yko=o("xlm-roberta-xl"),Lko=o(" \u2014 "),HD=a("a"),xko=o("XLMRobertaXLForMultipleChoice"),$ko=o(" (XLM-RoBERTa-XL model)"),kko=l(),Ab=a("li"),Xce=a("strong"),Sko=o("xlnet"),Rko=o(" \u2014 "),UD=a("a"),Bko=o("XLNetForMultipleChoice"),Pko=o(" (XLNet model)"),Iko=l(),yb=a("li"),zce=a("strong"),qko=o("yoso"),Nko=o(" \u2014 "),JD=a("a"),jko=o("YosoForMultipleChoice"),Dko=o(" (YOSO model)"),Gko=l(),Lb=a("p"),Oko=o("The model is set in evaluation mode by default using "),Qce=a("code"),Vko=o("model.eval()"),Xko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wce=a("code"),zko=o("model.train()"),Qko=l(),F(xb.$$.fragment),UBe=l(),qi=a("h2"),$b=a("a"),Hce=a("span"),F(BA.$$.fragment),Wko=l(),Uce=a("span"),Hko=o("AutoModelForNextSentencePrediction"),JBe=l(),Po=a("div"),F(PA.$$.fragment),Uko=l(),Ni=a("p"),Jko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),YD=a("a"),Yko=o("from_pretrained()"),Kko=o(" class method or the "),KD=a("a"),Zko=o("from_config()"),eSo=o(` class
method.`),oSo=l(),IA=a("p"),rSo=o("This class cannot be instantiated directly using "),Jce=a("code"),tSo=o("__init__()"),aSo=o(" (throws an error)."),nSo=l(),st=a("div"),F(qA.$$.fragment),sSo=l(),Yce=a("p"),lSo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),iSo=l(),ji=a("p"),dSo=o(`Note:
Loading a model from its configuration file does `),Kce=a("strong"),cSo=o("not"),fSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZD=a("a"),mSo=o("from_pretrained()"),gSo=o(" to load the model weights."),hSo=l(),F(kb.$$.fragment),pSo=l(),oo=a("div"),F(NA.$$.fragment),uSo=l(),Zce=a("p"),_So=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),bSo=l(),$a=a("p"),vSo=o("The model class to instantiate is selected based on the "),efe=a("code"),FSo=o("model_type"),TSo=o(` property of the config object (either
passed as an argument or loaded from `),ofe=a("code"),MSo=o("pretrained_model_name_or_path"),ESo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rfe=a("code"),CSo=o("pretrained_model_name_or_path"),wSo=o(":"),ASo=l(),Ur=a("ul"),Sb=a("li"),tfe=a("strong"),ySo=o("bert"),LSo=o(" \u2014 "),eG=a("a"),xSo=o("BertForNextSentencePrediction"),$So=o(" (BERT model)"),kSo=l(),Rb=a("li"),afe=a("strong"),SSo=o("fnet"),RSo=o(" \u2014 "),oG=a("a"),BSo=o("FNetForNextSentencePrediction"),PSo=o(" (FNet model)"),ISo=l(),Bb=a("li"),nfe=a("strong"),qSo=o("megatron-bert"),NSo=o(" \u2014 "),rG=a("a"),jSo=o("MegatronBertForNextSentencePrediction"),DSo=o(" (MegatronBert model)"),GSo=l(),Pb=a("li"),sfe=a("strong"),OSo=o("mobilebert"),VSo=o(" \u2014 "),tG=a("a"),XSo=o("MobileBertForNextSentencePrediction"),zSo=o(" (MobileBERT model)"),QSo=l(),Ib=a("li"),lfe=a("strong"),WSo=o("qdqbert"),HSo=o(" \u2014 "),aG=a("a"),USo=o("QDQBertForNextSentencePrediction"),JSo=o(" (QDQBert model)"),YSo=l(),qb=a("p"),KSo=o("The model is set in evaluation mode by default using "),ife=a("code"),ZSo=o("model.eval()"),eRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dfe=a("code"),oRo=o("model.train()"),rRo=l(),F(Nb.$$.fragment),YBe=l(),Di=a("h2"),jb=a("a"),cfe=a("span"),F(jA.$$.fragment),tRo=l(),ffe=a("span"),aRo=o("AutoModelForTokenClassification"),KBe=l(),Io=a("div"),F(DA.$$.fragment),nRo=l(),Gi=a("p"),sRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),nG=a("a"),lRo=o("from_pretrained()"),iRo=o(" class method or the "),sG=a("a"),dRo=o("from_config()"),cRo=o(` class
method.`),fRo=l(),GA=a("p"),mRo=o("This class cannot be instantiated directly using "),mfe=a("code"),gRo=o("__init__()"),hRo=o(" (throws an error)."),pRo=l(),lt=a("div"),F(OA.$$.fragment),uRo=l(),gfe=a("p"),_Ro=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),bRo=l(),Oi=a("p"),vRo=o(`Note:
Loading a model from its configuration file does `),hfe=a("strong"),FRo=o("not"),TRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lG=a("a"),MRo=o("from_pretrained()"),ERo=o(" to load the model weights."),CRo=l(),F(Db.$$.fragment),wRo=l(),ro=a("div"),F(VA.$$.fragment),ARo=l(),pfe=a("p"),yRo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),LRo=l(),ka=a("p"),xRo=o("The model class to instantiate is selected based on the "),ufe=a("code"),$Ro=o("model_type"),kRo=o(` property of the config object (either
passed as an argument or loaded from `),_fe=a("code"),SRo=o("pretrained_model_name_or_path"),RRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bfe=a("code"),BRo=o("pretrained_model_name_or_path"),PRo=o(":"),IRo=l(),U=a("ul"),Gb=a("li"),vfe=a("strong"),qRo=o("albert"),NRo=o(" \u2014 "),iG=a("a"),jRo=o("AlbertForTokenClassification"),DRo=o(" (ALBERT model)"),GRo=l(),Ob=a("li"),Ffe=a("strong"),ORo=o("bert"),VRo=o(" \u2014 "),dG=a("a"),XRo=o("BertForTokenClassification"),zRo=o(" (BERT model)"),QRo=l(),Vb=a("li"),Tfe=a("strong"),WRo=o("big_bird"),HRo=o(" \u2014 "),cG=a("a"),URo=o("BigBirdForTokenClassification"),JRo=o(" (BigBird model)"),YRo=l(),Xb=a("li"),Mfe=a("strong"),KRo=o("camembert"),ZRo=o(" \u2014 "),fG=a("a"),eBo=o("CamembertForTokenClassification"),oBo=o(" (CamemBERT model)"),rBo=l(),zb=a("li"),Efe=a("strong"),tBo=o("canine"),aBo=o(" \u2014 "),mG=a("a"),nBo=o("CanineForTokenClassification"),sBo=o(" (Canine model)"),lBo=l(),Qb=a("li"),Cfe=a("strong"),iBo=o("convbert"),dBo=o(" \u2014 "),gG=a("a"),cBo=o("ConvBertForTokenClassification"),fBo=o(" (ConvBERT model)"),mBo=l(),Wb=a("li"),wfe=a("strong"),gBo=o("data2vec-text"),hBo=o(" \u2014 "),hG=a("a"),pBo=o("Data2VecTextForTokenClassification"),uBo=o(" (Data2VecText model)"),_Bo=l(),Hb=a("li"),Afe=a("strong"),bBo=o("deberta"),vBo=o(" \u2014 "),pG=a("a"),FBo=o("DebertaForTokenClassification"),TBo=o(" (DeBERTa model)"),MBo=l(),Ub=a("li"),yfe=a("strong"),EBo=o("deberta-v2"),CBo=o(" \u2014 "),uG=a("a"),wBo=o("DebertaV2ForTokenClassification"),ABo=o(" (DeBERTa-v2 model)"),yBo=l(),Jb=a("li"),Lfe=a("strong"),LBo=o("distilbert"),xBo=o(" \u2014 "),_G=a("a"),$Bo=o("DistilBertForTokenClassification"),kBo=o(" (DistilBERT model)"),SBo=l(),Yb=a("li"),xfe=a("strong"),RBo=o("electra"),BBo=o(" \u2014 "),bG=a("a"),PBo=o("ElectraForTokenClassification"),IBo=o(" (ELECTRA model)"),qBo=l(),Kb=a("li"),$fe=a("strong"),NBo=o("flaubert"),jBo=o(" \u2014 "),vG=a("a"),DBo=o("FlaubertForTokenClassification"),GBo=o(" (FlauBERT model)"),OBo=l(),Zb=a("li"),kfe=a("strong"),VBo=o("fnet"),XBo=o(" \u2014 "),FG=a("a"),zBo=o("FNetForTokenClassification"),QBo=o(" (FNet model)"),WBo=l(),e2=a("li"),Sfe=a("strong"),HBo=o("funnel"),UBo=o(" \u2014 "),TG=a("a"),JBo=o("FunnelForTokenClassification"),YBo=o(" (Funnel Transformer model)"),KBo=l(),o2=a("li"),Rfe=a("strong"),ZBo=o("gpt2"),ePo=o(" \u2014 "),MG=a("a"),oPo=o("GPT2ForTokenClassification"),rPo=o(" (OpenAI GPT-2 model)"),tPo=l(),r2=a("li"),Bfe=a("strong"),aPo=o("ibert"),nPo=o(" \u2014 "),EG=a("a"),sPo=o("IBertForTokenClassification"),lPo=o(" (I-BERT model)"),iPo=l(),t2=a("li"),Pfe=a("strong"),dPo=o("layoutlm"),cPo=o(" \u2014 "),CG=a("a"),fPo=o("LayoutLMForTokenClassification"),mPo=o(" (LayoutLM model)"),gPo=l(),a2=a("li"),Ife=a("strong"),hPo=o("layoutlmv2"),pPo=o(" \u2014 "),wG=a("a"),uPo=o("LayoutLMv2ForTokenClassification"),_Po=o(" (LayoutLMv2 model)"),bPo=l(),n2=a("li"),qfe=a("strong"),vPo=o("longformer"),FPo=o(" \u2014 "),AG=a("a"),TPo=o("LongformerForTokenClassification"),MPo=o(" (Longformer model)"),EPo=l(),s2=a("li"),Nfe=a("strong"),CPo=o("megatron-bert"),wPo=o(" \u2014 "),yG=a("a"),APo=o("MegatronBertForTokenClassification"),yPo=o(" (MegatronBert model)"),LPo=l(),l2=a("li"),jfe=a("strong"),xPo=o("mobilebert"),$Po=o(" \u2014 "),LG=a("a"),kPo=o("MobileBertForTokenClassification"),SPo=o(" (MobileBERT model)"),RPo=l(),i2=a("li"),Dfe=a("strong"),BPo=o("mpnet"),PPo=o(" \u2014 "),xG=a("a"),IPo=o("MPNetForTokenClassification"),qPo=o(" (MPNet model)"),NPo=l(),d2=a("li"),Gfe=a("strong"),jPo=o("nystromformer"),DPo=o(" \u2014 "),$G=a("a"),GPo=o("NystromformerForTokenClassification"),OPo=o(" (Nystromformer model)"),VPo=l(),c2=a("li"),Ofe=a("strong"),XPo=o("qdqbert"),zPo=o(" \u2014 "),kG=a("a"),QPo=o("QDQBertForTokenClassification"),WPo=o(" (QDQBert model)"),HPo=l(),f2=a("li"),Vfe=a("strong"),UPo=o("rembert"),JPo=o(" \u2014 "),SG=a("a"),YPo=o("RemBertForTokenClassification"),KPo=o(" (RemBERT model)"),ZPo=l(),m2=a("li"),Xfe=a("strong"),eIo=o("roberta"),oIo=o(" \u2014 "),RG=a("a"),rIo=o("RobertaForTokenClassification"),tIo=o(" (RoBERTa model)"),aIo=l(),g2=a("li"),zfe=a("strong"),nIo=o("roformer"),sIo=o(" \u2014 "),BG=a("a"),lIo=o("RoFormerForTokenClassification"),iIo=o(" (RoFormer model)"),dIo=l(),h2=a("li"),Qfe=a("strong"),cIo=o("squeezebert"),fIo=o(" \u2014 "),PG=a("a"),mIo=o("SqueezeBertForTokenClassification"),gIo=o(" (SqueezeBERT model)"),hIo=l(),p2=a("li"),Wfe=a("strong"),pIo=o("xlm"),uIo=o(" \u2014 "),IG=a("a"),_Io=o("XLMForTokenClassification"),bIo=o(" (XLM model)"),vIo=l(),u2=a("li"),Hfe=a("strong"),FIo=o("xlm-roberta"),TIo=o(" \u2014 "),qG=a("a"),MIo=o("XLMRobertaForTokenClassification"),EIo=o(" (XLM-RoBERTa model)"),CIo=l(),_2=a("li"),Ufe=a("strong"),wIo=o("xlm-roberta-xl"),AIo=o(" \u2014 "),NG=a("a"),yIo=o("XLMRobertaXLForTokenClassification"),LIo=o(" (XLM-RoBERTa-XL model)"),xIo=l(),b2=a("li"),Jfe=a("strong"),$Io=o("xlnet"),kIo=o(" \u2014 "),jG=a("a"),SIo=o("XLNetForTokenClassification"),RIo=o(" (XLNet model)"),BIo=l(),v2=a("li"),Yfe=a("strong"),PIo=o("yoso"),IIo=o(" \u2014 "),DG=a("a"),qIo=o("YosoForTokenClassification"),NIo=o(" (YOSO model)"),jIo=l(),F2=a("p"),DIo=o("The model is set in evaluation mode by default using "),Kfe=a("code"),GIo=o("model.eval()"),OIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zfe=a("code"),VIo=o("model.train()"),XIo=l(),F(T2.$$.fragment),ZBe=l(),Vi=a("h2"),M2=a("a"),eme=a("span"),F(XA.$$.fragment),zIo=l(),ome=a("span"),QIo=o("AutoModelForQuestionAnswering"),ePe=l(),qo=a("div"),F(zA.$$.fragment),WIo=l(),Xi=a("p"),HIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),GG=a("a"),UIo=o("from_pretrained()"),JIo=o(" class method or the "),OG=a("a"),YIo=o("from_config()"),KIo=o(` class
method.`),ZIo=l(),QA=a("p"),eqo=o("This class cannot be instantiated directly using "),rme=a("code"),oqo=o("__init__()"),rqo=o(" (throws an error)."),tqo=l(),it=a("div"),F(WA.$$.fragment),aqo=l(),tme=a("p"),nqo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),sqo=l(),zi=a("p"),lqo=o(`Note:
Loading a model from its configuration file does `),ame=a("strong"),iqo=o("not"),dqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VG=a("a"),cqo=o("from_pretrained()"),fqo=o(" to load the model weights."),mqo=l(),F(E2.$$.fragment),gqo=l(),to=a("div"),F(HA.$$.fragment),hqo=l(),nme=a("p"),pqo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),uqo=l(),Sa=a("p"),_qo=o("The model class to instantiate is selected based on the "),sme=a("code"),bqo=o("model_type"),vqo=o(` property of the config object (either
passed as an argument or loaded from `),lme=a("code"),Fqo=o("pretrained_model_name_or_path"),Tqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ime=a("code"),Mqo=o("pretrained_model_name_or_path"),Eqo=o(":"),Cqo=l(),O=a("ul"),C2=a("li"),dme=a("strong"),wqo=o("albert"),Aqo=o(" \u2014 "),XG=a("a"),yqo=o("AlbertForQuestionAnswering"),Lqo=o(" (ALBERT model)"),xqo=l(),w2=a("li"),cme=a("strong"),$qo=o("bart"),kqo=o(" \u2014 "),zG=a("a"),Sqo=o("BartForQuestionAnswering"),Rqo=o(" (BART model)"),Bqo=l(),A2=a("li"),fme=a("strong"),Pqo=o("bert"),Iqo=o(" \u2014 "),QG=a("a"),qqo=o("BertForQuestionAnswering"),Nqo=o(" (BERT model)"),jqo=l(),y2=a("li"),mme=a("strong"),Dqo=o("big_bird"),Gqo=o(" \u2014 "),WG=a("a"),Oqo=o("BigBirdForQuestionAnswering"),Vqo=o(" (BigBird model)"),Xqo=l(),L2=a("li"),gme=a("strong"),zqo=o("bigbird_pegasus"),Qqo=o(" \u2014 "),HG=a("a"),Wqo=o("BigBirdPegasusForQuestionAnswering"),Hqo=o(" (BigBirdPegasus model)"),Uqo=l(),x2=a("li"),hme=a("strong"),Jqo=o("camembert"),Yqo=o(" \u2014 "),UG=a("a"),Kqo=o("CamembertForQuestionAnswering"),Zqo=o(" (CamemBERT model)"),eNo=l(),$2=a("li"),pme=a("strong"),oNo=o("canine"),rNo=o(" \u2014 "),JG=a("a"),tNo=o("CanineForQuestionAnswering"),aNo=o(" (Canine model)"),nNo=l(),k2=a("li"),ume=a("strong"),sNo=o("convbert"),lNo=o(" \u2014 "),YG=a("a"),iNo=o("ConvBertForQuestionAnswering"),dNo=o(" (ConvBERT model)"),cNo=l(),S2=a("li"),_me=a("strong"),fNo=o("data2vec-text"),mNo=o(" \u2014 "),KG=a("a"),gNo=o("Data2VecTextForQuestionAnswering"),hNo=o(" (Data2VecText model)"),pNo=l(),R2=a("li"),bme=a("strong"),uNo=o("deberta"),_No=o(" \u2014 "),ZG=a("a"),bNo=o("DebertaForQuestionAnswering"),vNo=o(" (DeBERTa model)"),FNo=l(),B2=a("li"),vme=a("strong"),TNo=o("deberta-v2"),MNo=o(" \u2014 "),eO=a("a"),ENo=o("DebertaV2ForQuestionAnswering"),CNo=o(" (DeBERTa-v2 model)"),wNo=l(),P2=a("li"),Fme=a("strong"),ANo=o("distilbert"),yNo=o(" \u2014 "),oO=a("a"),LNo=o("DistilBertForQuestionAnswering"),xNo=o(" (DistilBERT model)"),$No=l(),I2=a("li"),Tme=a("strong"),kNo=o("electra"),SNo=o(" \u2014 "),rO=a("a"),RNo=o("ElectraForQuestionAnswering"),BNo=o(" (ELECTRA model)"),PNo=l(),q2=a("li"),Mme=a("strong"),INo=o("flaubert"),qNo=o(" \u2014 "),tO=a("a"),NNo=o("FlaubertForQuestionAnsweringSimple"),jNo=o(" (FlauBERT model)"),DNo=l(),N2=a("li"),Eme=a("strong"),GNo=o("fnet"),ONo=o(" \u2014 "),aO=a("a"),VNo=o("FNetForQuestionAnswering"),XNo=o(" (FNet model)"),zNo=l(),j2=a("li"),Cme=a("strong"),QNo=o("funnel"),WNo=o(" \u2014 "),nO=a("a"),HNo=o("FunnelForQuestionAnswering"),UNo=o(" (Funnel Transformer model)"),JNo=l(),D2=a("li"),wme=a("strong"),YNo=o("gptj"),KNo=o(" \u2014 "),sO=a("a"),ZNo=o("GPTJForQuestionAnswering"),ejo=o(" (GPT-J model)"),ojo=l(),G2=a("li"),Ame=a("strong"),rjo=o("ibert"),tjo=o(" \u2014 "),lO=a("a"),ajo=o("IBertForQuestionAnswering"),njo=o(" (I-BERT model)"),sjo=l(),O2=a("li"),yme=a("strong"),ljo=o("layoutlmv2"),ijo=o(" \u2014 "),iO=a("a"),djo=o("LayoutLMv2ForQuestionAnswering"),cjo=o(" (LayoutLMv2 model)"),fjo=l(),V2=a("li"),Lme=a("strong"),mjo=o("led"),gjo=o(" \u2014 "),dO=a("a"),hjo=o("LEDForQuestionAnswering"),pjo=o(" (LED model)"),ujo=l(),X2=a("li"),xme=a("strong"),_jo=o("longformer"),bjo=o(" \u2014 "),cO=a("a"),vjo=o("LongformerForQuestionAnswering"),Fjo=o(" (Longformer model)"),Tjo=l(),z2=a("li"),$me=a("strong"),Mjo=o("lxmert"),Ejo=o(" \u2014 "),fO=a("a"),Cjo=o("LxmertForQuestionAnswering"),wjo=o(" (LXMERT model)"),Ajo=l(),Q2=a("li"),kme=a("strong"),yjo=o("mbart"),Ljo=o(" \u2014 "),mO=a("a"),xjo=o("MBartForQuestionAnswering"),$jo=o(" (mBART model)"),kjo=l(),W2=a("li"),Sme=a("strong"),Sjo=o("megatron-bert"),Rjo=o(" \u2014 "),gO=a("a"),Bjo=o("MegatronBertForQuestionAnswering"),Pjo=o(" (MegatronBert model)"),Ijo=l(),H2=a("li"),Rme=a("strong"),qjo=o("mobilebert"),Njo=o(" \u2014 "),hO=a("a"),jjo=o("MobileBertForQuestionAnswering"),Djo=o(" (MobileBERT model)"),Gjo=l(),U2=a("li"),Bme=a("strong"),Ojo=o("mpnet"),Vjo=o(" \u2014 "),pO=a("a"),Xjo=o("MPNetForQuestionAnswering"),zjo=o(" (MPNet model)"),Qjo=l(),J2=a("li"),Pme=a("strong"),Wjo=o("nystromformer"),Hjo=o(" \u2014 "),uO=a("a"),Ujo=o("NystromformerForQuestionAnswering"),Jjo=o(" (Nystromformer model)"),Yjo=l(),Y2=a("li"),Ime=a("strong"),Kjo=o("qdqbert"),Zjo=o(" \u2014 "),_O=a("a"),eDo=o("QDQBertForQuestionAnswering"),oDo=o(" (QDQBert model)"),rDo=l(),K2=a("li"),qme=a("strong"),tDo=o("reformer"),aDo=o(" \u2014 "),bO=a("a"),nDo=o("ReformerForQuestionAnswering"),sDo=o(" (Reformer model)"),lDo=l(),Z2=a("li"),Nme=a("strong"),iDo=o("rembert"),dDo=o(" \u2014 "),vO=a("a"),cDo=o("RemBertForQuestionAnswering"),fDo=o(" (RemBERT model)"),mDo=l(),ev=a("li"),jme=a("strong"),gDo=o("roberta"),hDo=o(" \u2014 "),FO=a("a"),pDo=o("RobertaForQuestionAnswering"),uDo=o(" (RoBERTa model)"),_Do=l(),ov=a("li"),Dme=a("strong"),bDo=o("roformer"),vDo=o(" \u2014 "),TO=a("a"),FDo=o("RoFormerForQuestionAnswering"),TDo=o(" (RoFormer model)"),MDo=l(),rv=a("li"),Gme=a("strong"),EDo=o("splinter"),CDo=o(" \u2014 "),MO=a("a"),wDo=o("SplinterForQuestionAnswering"),ADo=o(" (Splinter model)"),yDo=l(),tv=a("li"),Ome=a("strong"),LDo=o("squeezebert"),xDo=o(" \u2014 "),EO=a("a"),$Do=o("SqueezeBertForQuestionAnswering"),kDo=o(" (SqueezeBERT model)"),SDo=l(),av=a("li"),Vme=a("strong"),RDo=o("xlm"),BDo=o(" \u2014 "),CO=a("a"),PDo=o("XLMForQuestionAnsweringSimple"),IDo=o(" (XLM model)"),qDo=l(),nv=a("li"),Xme=a("strong"),NDo=o("xlm-roberta"),jDo=o(" \u2014 "),wO=a("a"),DDo=o("XLMRobertaForQuestionAnswering"),GDo=o(" (XLM-RoBERTa model)"),ODo=l(),sv=a("li"),zme=a("strong"),VDo=o("xlm-roberta-xl"),XDo=o(" \u2014 "),AO=a("a"),zDo=o("XLMRobertaXLForQuestionAnswering"),QDo=o(" (XLM-RoBERTa-XL model)"),WDo=l(),lv=a("li"),Qme=a("strong"),HDo=o("xlnet"),UDo=o(" \u2014 "),yO=a("a"),JDo=o("XLNetForQuestionAnsweringSimple"),YDo=o(" (XLNet model)"),KDo=l(),iv=a("li"),Wme=a("strong"),ZDo=o("yoso"),eGo=o(" \u2014 "),LO=a("a"),oGo=o("YosoForQuestionAnswering"),rGo=o(" (YOSO model)"),tGo=l(),dv=a("p"),aGo=o("The model is set in evaluation mode by default using "),Hme=a("code"),nGo=o("model.eval()"),sGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ume=a("code"),lGo=o("model.train()"),iGo=l(),F(cv.$$.fragment),oPe=l(),Qi=a("h2"),fv=a("a"),Jme=a("span"),F(UA.$$.fragment),dGo=l(),Yme=a("span"),cGo=o("AutoModelForTableQuestionAnswering"),rPe=l(),No=a("div"),F(JA.$$.fragment),fGo=l(),Wi=a("p"),mGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),xO=a("a"),gGo=o("from_pretrained()"),hGo=o(" class method or the "),$O=a("a"),pGo=o("from_config()"),uGo=o(` class
method.`),_Go=l(),YA=a("p"),bGo=o("This class cannot be instantiated directly using "),Kme=a("code"),vGo=o("__init__()"),FGo=o(" (throws an error)."),TGo=l(),dt=a("div"),F(KA.$$.fragment),MGo=l(),Zme=a("p"),EGo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),CGo=l(),Hi=a("p"),wGo=o(`Note:
Loading a model from its configuration file does `),ege=a("strong"),AGo=o("not"),yGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kO=a("a"),LGo=o("from_pretrained()"),xGo=o(" to load the model weights."),$Go=l(),F(mv.$$.fragment),kGo=l(),ao=a("div"),F(ZA.$$.fragment),SGo=l(),oge=a("p"),RGo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),BGo=l(),Ra=a("p"),PGo=o("The model class to instantiate is selected based on the "),rge=a("code"),IGo=o("model_type"),qGo=o(` property of the config object (either
passed as an argument or loaded from `),tge=a("code"),NGo=o("pretrained_model_name_or_path"),jGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),age=a("code"),DGo=o("pretrained_model_name_or_path"),GGo=o(":"),OGo=l(),nge=a("ul"),gv=a("li"),sge=a("strong"),VGo=o("tapas"),XGo=o(" \u2014 "),SO=a("a"),zGo=o("TapasForQuestionAnswering"),QGo=o(" (TAPAS model)"),WGo=l(),hv=a("p"),HGo=o("The model is set in evaluation mode by default using "),lge=a("code"),UGo=o("model.eval()"),JGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ige=a("code"),YGo=o("model.train()"),KGo=l(),F(pv.$$.fragment),tPe=l(),Ui=a("h2"),uv=a("a"),dge=a("span"),F(e0.$$.fragment),ZGo=l(),cge=a("span"),eOo=o("AutoModelForImageClassification"),aPe=l(),jo=a("div"),F(o0.$$.fragment),oOo=l(),Ji=a("p"),rOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),RO=a("a"),tOo=o("from_pretrained()"),aOo=o(" class method or the "),BO=a("a"),nOo=o("from_config()"),sOo=o(` class
method.`),lOo=l(),r0=a("p"),iOo=o("This class cannot be instantiated directly using "),fge=a("code"),dOo=o("__init__()"),cOo=o(" (throws an error)."),fOo=l(),ct=a("div"),F(t0.$$.fragment),mOo=l(),mge=a("p"),gOo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),hOo=l(),Yi=a("p"),pOo=o(`Note:
Loading a model from its configuration file does `),gge=a("strong"),uOo=o("not"),_Oo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PO=a("a"),bOo=o("from_pretrained()"),vOo=o(" to load the model weights."),FOo=l(),F(_v.$$.fragment),TOo=l(),no=a("div"),F(a0.$$.fragment),MOo=l(),hge=a("p"),EOo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),COo=l(),Ba=a("p"),wOo=o("The model class to instantiate is selected based on the "),pge=a("code"),AOo=o("model_type"),yOo=o(` property of the config object (either
passed as an argument or loaded from `),uge=a("code"),LOo=o("pretrained_model_name_or_path"),xOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ge=a("code"),$Oo=o("pretrained_model_name_or_path"),kOo=o(":"),SOo=l(),ve=a("ul"),bv=a("li"),bge=a("strong"),ROo=o("beit"),BOo=o(" \u2014 "),IO=a("a"),POo=o("BeitForImageClassification"),IOo=o(" (BEiT model)"),qOo=l(),vv=a("li"),vge=a("strong"),NOo=o("convnext"),jOo=o(" \u2014 "),qO=a("a"),DOo=o("ConvNextForImageClassification"),GOo=o(" (ConvNext model)"),OOo=l(),Fv=a("li"),Fge=a("strong"),VOo=o("data2vec-vision"),XOo=o(" \u2014 "),NO=a("a"),zOo=o("Data2VecVisionForImageClassification"),QOo=o(" (Data2VecVision model)"),WOo=l(),$s=a("li"),Tge=a("strong"),HOo=o("deit"),UOo=o(" \u2014 "),jO=a("a"),JOo=o("DeiTForImageClassification"),YOo=o(" or "),DO=a("a"),KOo=o("DeiTForImageClassificationWithTeacher"),ZOo=o(" (DeiT model)"),eVo=l(),Tv=a("li"),Mge=a("strong"),oVo=o("imagegpt"),rVo=o(" \u2014 "),GO=a("a"),tVo=o("ImageGPTForImageClassification"),aVo=o(" (ImageGPT model)"),nVo=l(),ft=a("li"),Ege=a("strong"),sVo=o("perceiver"),lVo=o(" \u2014 "),OO=a("a"),iVo=o("PerceiverForImageClassificationLearned"),dVo=o(" or "),VO=a("a"),cVo=o("PerceiverForImageClassificationFourier"),fVo=o(" or "),XO=a("a"),mVo=o("PerceiverForImageClassificationConvProcessing"),gVo=o(" (Perceiver model)"),hVo=l(),Mv=a("li"),Cge=a("strong"),pVo=o("poolformer"),uVo=o(" \u2014 "),zO=a("a"),_Vo=o("PoolFormerForImageClassification"),bVo=o(" (PoolFormer model)"),vVo=l(),Ev=a("li"),wge=a("strong"),FVo=o("regnet"),TVo=o(" \u2014 "),QO=a("a"),MVo=o("RegNetForImageClassification"),EVo=o(" (RegNet model)"),CVo=l(),Cv=a("li"),Age=a("strong"),wVo=o("resnet"),AVo=o(" \u2014 "),WO=a("a"),yVo=o("ResNetForImageClassification"),LVo=o(" (ResNet model)"),xVo=l(),wv=a("li"),yge=a("strong"),$Vo=o("segformer"),kVo=o(" \u2014 "),HO=a("a"),SVo=o("SegformerForImageClassification"),RVo=o(" (SegFormer model)"),BVo=l(),Av=a("li"),Lge=a("strong"),PVo=o("swin"),IVo=o(" \u2014 "),UO=a("a"),qVo=o("SwinForImageClassification"),NVo=o(" (Swin model)"),jVo=l(),yv=a("li"),xge=a("strong"),DVo=o("van"),GVo=o(" \u2014 "),JO=a("a"),OVo=o("VanForImageClassification"),VVo=o(" (VAN model)"),XVo=l(),Lv=a("li"),$ge=a("strong"),zVo=o("vit"),QVo=o(" \u2014 "),YO=a("a"),WVo=o("ViTForImageClassification"),HVo=o(" (ViT model)"),UVo=l(),xv=a("p"),JVo=o("The model is set in evaluation mode by default using "),kge=a("code"),YVo=o("model.eval()"),KVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sge=a("code"),ZVo=o("model.train()"),eXo=l(),F($v.$$.fragment),nPe=l(),Ki=a("h2"),kv=a("a"),Rge=a("span"),F(n0.$$.fragment),oXo=l(),Bge=a("span"),rXo=o("AutoModelForVision2Seq"),sPe=l(),Do=a("div"),F(s0.$$.fragment),tXo=l(),Zi=a("p"),aXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),KO=a("a"),nXo=o("from_pretrained()"),sXo=o(" class method or the "),ZO=a("a"),lXo=o("from_config()"),iXo=o(` class
method.`),dXo=l(),l0=a("p"),cXo=o("This class cannot be instantiated directly using "),Pge=a("code"),fXo=o("__init__()"),mXo=o(" (throws an error)."),gXo=l(),mt=a("div"),F(i0.$$.fragment),hXo=l(),Ige=a("p"),pXo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),uXo=l(),ed=a("p"),_Xo=o(`Note:
Loading a model from its configuration file does `),qge=a("strong"),bXo=o("not"),vXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eV=a("a"),FXo=o("from_pretrained()"),TXo=o(" to load the model weights."),MXo=l(),F(Sv.$$.fragment),EXo=l(),so=a("div"),F(d0.$$.fragment),CXo=l(),Nge=a("p"),wXo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),AXo=l(),Pa=a("p"),yXo=o("The model class to instantiate is selected based on the "),jge=a("code"),LXo=o("model_type"),xXo=o(` property of the config object (either
passed as an argument or loaded from `),Dge=a("code"),$Xo=o("pretrained_model_name_or_path"),kXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gge=a("code"),SXo=o("pretrained_model_name_or_path"),RXo=o(":"),BXo=l(),Oge=a("ul"),Rv=a("li"),Vge=a("strong"),PXo=o("vision-encoder-decoder"),IXo=o(" \u2014 "),oV=a("a"),qXo=o("VisionEncoderDecoderModel"),NXo=o(" (Vision Encoder decoder model)"),jXo=l(),Bv=a("p"),DXo=o("The model is set in evaluation mode by default using "),Xge=a("code"),GXo=o("model.eval()"),OXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zge=a("code"),VXo=o("model.train()"),XXo=l(),F(Pv.$$.fragment),lPe=l(),od=a("h2"),Iv=a("a"),Qge=a("span"),F(c0.$$.fragment),zXo=l(),Wge=a("span"),QXo=o("AutoModelForAudioClassification"),iPe=l(),Go=a("div"),F(f0.$$.fragment),WXo=l(),rd=a("p"),HXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),rV=a("a"),UXo=o("from_pretrained()"),JXo=o(" class method or the "),tV=a("a"),YXo=o("from_config()"),KXo=o(` class
method.`),ZXo=l(),m0=a("p"),ezo=o("This class cannot be instantiated directly using "),Hge=a("code"),ozo=o("__init__()"),rzo=o(" (throws an error)."),tzo=l(),gt=a("div"),F(g0.$$.fragment),azo=l(),Uge=a("p"),nzo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),szo=l(),td=a("p"),lzo=o(`Note:
Loading a model from its configuration file does `),Jge=a("strong"),izo=o("not"),dzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aV=a("a"),czo=o("from_pretrained()"),fzo=o(" to load the model weights."),mzo=l(),F(qv.$$.fragment),gzo=l(),lo=a("div"),F(h0.$$.fragment),hzo=l(),Yge=a("p"),pzo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),uzo=l(),Ia=a("p"),_zo=o("The model class to instantiate is selected based on the "),Kge=a("code"),bzo=o("model_type"),vzo=o(` property of the config object (either
passed as an argument or loaded from `),Zge=a("code"),Fzo=o("pretrained_model_name_or_path"),Tzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ehe=a("code"),Mzo=o("pretrained_model_name_or_path"),Ezo=o(":"),Czo=l(),Ne=a("ul"),Nv=a("li"),ohe=a("strong"),wzo=o("data2vec-audio"),Azo=o(" \u2014 "),nV=a("a"),yzo=o("Data2VecAudioForSequenceClassification"),Lzo=o(" (Data2VecAudio model)"),xzo=l(),jv=a("li"),rhe=a("strong"),$zo=o("hubert"),kzo=o(" \u2014 "),sV=a("a"),Szo=o("HubertForSequenceClassification"),Rzo=o(" (Hubert model)"),Bzo=l(),Dv=a("li"),the=a("strong"),Pzo=o("sew"),Izo=o(" \u2014 "),lV=a("a"),qzo=o("SEWForSequenceClassification"),Nzo=o(" (SEW model)"),jzo=l(),Gv=a("li"),ahe=a("strong"),Dzo=o("sew-d"),Gzo=o(" \u2014 "),iV=a("a"),Ozo=o("SEWDForSequenceClassification"),Vzo=o(" (SEW-D model)"),Xzo=l(),Ov=a("li"),nhe=a("strong"),zzo=o("unispeech"),Qzo=o(" \u2014 "),dV=a("a"),Wzo=o("UniSpeechForSequenceClassification"),Hzo=o(" (UniSpeech model)"),Uzo=l(),Vv=a("li"),she=a("strong"),Jzo=o("unispeech-sat"),Yzo=o(" \u2014 "),cV=a("a"),Kzo=o("UniSpeechSatForSequenceClassification"),Zzo=o(" (UniSpeechSat model)"),eQo=l(),Xv=a("li"),lhe=a("strong"),oQo=o("wav2vec2"),rQo=o(" \u2014 "),fV=a("a"),tQo=o("Wav2Vec2ForSequenceClassification"),aQo=o(" (Wav2Vec2 model)"),nQo=l(),zv=a("li"),ihe=a("strong"),sQo=o("wavlm"),lQo=o(" \u2014 "),mV=a("a"),iQo=o("WavLMForSequenceClassification"),dQo=o(" (WavLM model)"),cQo=l(),Qv=a("p"),fQo=o("The model is set in evaluation mode by default using "),dhe=a("code"),mQo=o("model.eval()"),gQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),che=a("code"),hQo=o("model.train()"),pQo=l(),F(Wv.$$.fragment),dPe=l(),ad=a("h2"),Hv=a("a"),fhe=a("span"),F(p0.$$.fragment),uQo=l(),mhe=a("span"),_Qo=o("AutoModelForAudioFrameClassification"),cPe=l(),Oo=a("div"),F(u0.$$.fragment),bQo=l(),nd=a("p"),vQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),gV=a("a"),FQo=o("from_pretrained()"),TQo=o(" class method or the "),hV=a("a"),MQo=o("from_config()"),EQo=o(` class
method.`),CQo=l(),_0=a("p"),wQo=o("This class cannot be instantiated directly using "),ghe=a("code"),AQo=o("__init__()"),yQo=o(" (throws an error)."),LQo=l(),ht=a("div"),F(b0.$$.fragment),xQo=l(),hhe=a("p"),$Qo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),kQo=l(),sd=a("p"),SQo=o(`Note:
Loading a model from its configuration file does `),phe=a("strong"),RQo=o("not"),BQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pV=a("a"),PQo=o("from_pretrained()"),IQo=o(" to load the model weights."),qQo=l(),F(Uv.$$.fragment),NQo=l(),io=a("div"),F(v0.$$.fragment),jQo=l(),uhe=a("p"),DQo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),GQo=l(),qa=a("p"),OQo=o("The model class to instantiate is selected based on the "),_he=a("code"),VQo=o("model_type"),XQo=o(` property of the config object (either
passed as an argument or loaded from `),bhe=a("code"),zQo=o("pretrained_model_name_or_path"),QQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vhe=a("code"),WQo=o("pretrained_model_name_or_path"),HQo=o(":"),UQo=l(),Na=a("ul"),Jv=a("li"),Fhe=a("strong"),JQo=o("data2vec-audio"),YQo=o(" \u2014 "),uV=a("a"),KQo=o("Data2VecAudioForAudioFrameClassification"),ZQo=o(" (Data2VecAudio model)"),eWo=l(),Yv=a("li"),The=a("strong"),oWo=o("unispeech-sat"),rWo=o(" \u2014 "),_V=a("a"),tWo=o("UniSpeechSatForAudioFrameClassification"),aWo=o(" (UniSpeechSat model)"),nWo=l(),Kv=a("li"),Mhe=a("strong"),sWo=o("wav2vec2"),lWo=o(" \u2014 "),bV=a("a"),iWo=o("Wav2Vec2ForAudioFrameClassification"),dWo=o(" (Wav2Vec2 model)"),cWo=l(),Zv=a("li"),Ehe=a("strong"),fWo=o("wavlm"),mWo=o(" \u2014 "),vV=a("a"),gWo=o("WavLMForAudioFrameClassification"),hWo=o(" (WavLM model)"),pWo=l(),eF=a("p"),uWo=o("The model is set in evaluation mode by default using "),Che=a("code"),_Wo=o("model.eval()"),bWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),whe=a("code"),vWo=o("model.train()"),FWo=l(),F(oF.$$.fragment),fPe=l(),ld=a("h2"),rF=a("a"),Ahe=a("span"),F(F0.$$.fragment),TWo=l(),yhe=a("span"),MWo=o("AutoModelForCTC"),mPe=l(),Vo=a("div"),F(T0.$$.fragment),EWo=l(),id=a("p"),CWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),FV=a("a"),wWo=o("from_pretrained()"),AWo=o(" class method or the "),TV=a("a"),yWo=o("from_config()"),LWo=o(` class
method.`),xWo=l(),M0=a("p"),$Wo=o("This class cannot be instantiated directly using "),Lhe=a("code"),kWo=o("__init__()"),SWo=o(" (throws an error)."),RWo=l(),pt=a("div"),F(E0.$$.fragment),BWo=l(),xhe=a("p"),PWo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),IWo=l(),dd=a("p"),qWo=o(`Note:
Loading a model from its configuration file does `),$he=a("strong"),NWo=o("not"),jWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MV=a("a"),DWo=o("from_pretrained()"),GWo=o(" to load the model weights."),OWo=l(),F(tF.$$.fragment),VWo=l(),co=a("div"),F(C0.$$.fragment),XWo=l(),khe=a("p"),zWo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),QWo=l(),ja=a("p"),WWo=o("The model class to instantiate is selected based on the "),She=a("code"),HWo=o("model_type"),UWo=o(` property of the config object (either
passed as an argument or loaded from `),Rhe=a("code"),JWo=o("pretrained_model_name_or_path"),YWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bhe=a("code"),KWo=o("pretrained_model_name_or_path"),ZWo=o(":"),eHo=l(),je=a("ul"),aF=a("li"),Phe=a("strong"),oHo=o("data2vec-audio"),rHo=o(" \u2014 "),EV=a("a"),tHo=o("Data2VecAudioForCTC"),aHo=o(" (Data2VecAudio model)"),nHo=l(),nF=a("li"),Ihe=a("strong"),sHo=o("hubert"),lHo=o(" \u2014 "),CV=a("a"),iHo=o("HubertForCTC"),dHo=o(" (Hubert model)"),cHo=l(),sF=a("li"),qhe=a("strong"),fHo=o("sew"),mHo=o(" \u2014 "),wV=a("a"),gHo=o("SEWForCTC"),hHo=o(" (SEW model)"),pHo=l(),lF=a("li"),Nhe=a("strong"),uHo=o("sew-d"),_Ho=o(" \u2014 "),AV=a("a"),bHo=o("SEWDForCTC"),vHo=o(" (SEW-D model)"),FHo=l(),iF=a("li"),jhe=a("strong"),THo=o("unispeech"),MHo=o(" \u2014 "),yV=a("a"),EHo=o("UniSpeechForCTC"),CHo=o(" (UniSpeech model)"),wHo=l(),dF=a("li"),Dhe=a("strong"),AHo=o("unispeech-sat"),yHo=o(" \u2014 "),LV=a("a"),LHo=o("UniSpeechSatForCTC"),xHo=o(" (UniSpeechSat model)"),$Ho=l(),cF=a("li"),Ghe=a("strong"),kHo=o("wav2vec2"),SHo=o(" \u2014 "),xV=a("a"),RHo=o("Wav2Vec2ForCTC"),BHo=o(" (Wav2Vec2 model)"),PHo=l(),fF=a("li"),Ohe=a("strong"),IHo=o("wavlm"),qHo=o(" \u2014 "),$V=a("a"),NHo=o("WavLMForCTC"),jHo=o(" (WavLM model)"),DHo=l(),mF=a("p"),GHo=o("The model is set in evaluation mode by default using "),Vhe=a("code"),OHo=o("model.eval()"),VHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xhe=a("code"),XHo=o("model.train()"),zHo=l(),F(gF.$$.fragment),gPe=l(),cd=a("h2"),hF=a("a"),zhe=a("span"),F(w0.$$.fragment),QHo=l(),Qhe=a("span"),WHo=o("AutoModelForSpeechSeq2Seq"),hPe=l(),Xo=a("div"),F(A0.$$.fragment),HHo=l(),fd=a("p"),UHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),kV=a("a"),JHo=o("from_pretrained()"),YHo=o(" class method or the "),SV=a("a"),KHo=o("from_config()"),ZHo=o(` class
method.`),eUo=l(),y0=a("p"),oUo=o("This class cannot be instantiated directly using "),Whe=a("code"),rUo=o("__init__()"),tUo=o(" (throws an error)."),aUo=l(),ut=a("div"),F(L0.$$.fragment),nUo=l(),Hhe=a("p"),sUo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),lUo=l(),md=a("p"),iUo=o(`Note:
Loading a model from its configuration file does `),Uhe=a("strong"),dUo=o("not"),cUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RV=a("a"),fUo=o("from_pretrained()"),mUo=o(" to load the model weights."),gUo=l(),F(pF.$$.fragment),hUo=l(),fo=a("div"),F(x0.$$.fragment),pUo=l(),Jhe=a("p"),uUo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),_Uo=l(),Da=a("p"),bUo=o("The model class to instantiate is selected based on the "),Yhe=a("code"),vUo=o("model_type"),FUo=o(` property of the config object (either
passed as an argument or loaded from `),Khe=a("code"),TUo=o("pretrained_model_name_or_path"),MUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zhe=a("code"),EUo=o("pretrained_model_name_or_path"),CUo=o(":"),wUo=l(),$0=a("ul"),uF=a("li"),epe=a("strong"),AUo=o("speech-encoder-decoder"),yUo=o(" \u2014 "),BV=a("a"),LUo=o("SpeechEncoderDecoderModel"),xUo=o(" (Speech Encoder decoder model)"),$Uo=l(),_F=a("li"),ope=a("strong"),kUo=o("speech_to_text"),SUo=o(" \u2014 "),PV=a("a"),RUo=o("Speech2TextForConditionalGeneration"),BUo=o(" (Speech2Text model)"),PUo=l(),bF=a("p"),IUo=o("The model is set in evaluation mode by default using "),rpe=a("code"),qUo=o("model.eval()"),NUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tpe=a("code"),jUo=o("model.train()"),DUo=l(),F(vF.$$.fragment),pPe=l(),gd=a("h2"),FF=a("a"),ape=a("span"),F(k0.$$.fragment),GUo=l(),npe=a("span"),OUo=o("AutoModelForAudioXVector"),uPe=l(),zo=a("div"),F(S0.$$.fragment),VUo=l(),hd=a("p"),XUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),IV=a("a"),zUo=o("from_pretrained()"),QUo=o(" class method or the "),qV=a("a"),WUo=o("from_config()"),HUo=o(` class
method.`),UUo=l(),R0=a("p"),JUo=o("This class cannot be instantiated directly using "),spe=a("code"),YUo=o("__init__()"),KUo=o(" (throws an error)."),ZUo=l(),_t=a("div"),F(B0.$$.fragment),eJo=l(),lpe=a("p"),oJo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),rJo=l(),pd=a("p"),tJo=o(`Note:
Loading a model from its configuration file does `),ipe=a("strong"),aJo=o("not"),nJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NV=a("a"),sJo=o("from_pretrained()"),lJo=o(" to load the model weights."),iJo=l(),F(TF.$$.fragment),dJo=l(),mo=a("div"),F(P0.$$.fragment),cJo=l(),dpe=a("p"),fJo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),mJo=l(),Ga=a("p"),gJo=o("The model class to instantiate is selected based on the "),cpe=a("code"),hJo=o("model_type"),pJo=o(` property of the config object (either
passed as an argument or loaded from `),fpe=a("code"),uJo=o("pretrained_model_name_or_path"),_Jo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mpe=a("code"),bJo=o("pretrained_model_name_or_path"),vJo=o(":"),FJo=l(),Oa=a("ul"),MF=a("li"),gpe=a("strong"),TJo=o("data2vec-audio"),MJo=o(" \u2014 "),jV=a("a"),EJo=o("Data2VecAudioForXVector"),CJo=o(" (Data2VecAudio model)"),wJo=l(),EF=a("li"),hpe=a("strong"),AJo=o("unispeech-sat"),yJo=o(" \u2014 "),DV=a("a"),LJo=o("UniSpeechSatForXVector"),xJo=o(" (UniSpeechSat model)"),$Jo=l(),CF=a("li"),ppe=a("strong"),kJo=o("wav2vec2"),SJo=o(" \u2014 "),GV=a("a"),RJo=o("Wav2Vec2ForXVector"),BJo=o(" (Wav2Vec2 model)"),PJo=l(),wF=a("li"),upe=a("strong"),IJo=o("wavlm"),qJo=o(" \u2014 "),OV=a("a"),NJo=o("WavLMForXVector"),jJo=o(" (WavLM model)"),DJo=l(),AF=a("p"),GJo=o("The model is set in evaluation mode by default using "),_pe=a("code"),OJo=o("model.eval()"),VJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bpe=a("code"),XJo=o("model.train()"),zJo=l(),F(yF.$$.fragment),_Pe=l(),ud=a("h2"),LF=a("a"),vpe=a("span"),F(I0.$$.fragment),QJo=l(),Fpe=a("span"),WJo=o("AutoModelForMaskedImageModeling"),bPe=l(),Qo=a("div"),F(q0.$$.fragment),HJo=l(),_d=a("p"),UJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),VV=a("a"),JJo=o("from_pretrained()"),YJo=o(" class method or the "),XV=a("a"),KJo=o("from_config()"),ZJo=o(` class
method.`),eYo=l(),N0=a("p"),oYo=o("This class cannot be instantiated directly using "),Tpe=a("code"),rYo=o("__init__()"),tYo=o(" (throws an error)."),aYo=l(),bt=a("div"),F(j0.$$.fragment),nYo=l(),Mpe=a("p"),sYo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),lYo=l(),bd=a("p"),iYo=o(`Note:
Loading a model from its configuration file does `),Epe=a("strong"),dYo=o("not"),cYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zV=a("a"),fYo=o("from_pretrained()"),mYo=o(" to load the model weights."),gYo=l(),F(xF.$$.fragment),hYo=l(),go=a("div"),F(D0.$$.fragment),pYo=l(),Cpe=a("p"),uYo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),_Yo=l(),Va=a("p"),bYo=o("The model class to instantiate is selected based on the "),wpe=a("code"),vYo=o("model_type"),FYo=o(` property of the config object (either
passed as an argument or loaded from `),Ape=a("code"),TYo=o("pretrained_model_name_or_path"),MYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ype=a("code"),EYo=o("pretrained_model_name_or_path"),CYo=o(":"),wYo=l(),vd=a("ul"),$F=a("li"),Lpe=a("strong"),AYo=o("deit"),yYo=o(" \u2014 "),QV=a("a"),LYo=o("DeiTForMaskedImageModeling"),xYo=o(" (DeiT model)"),$Yo=l(),kF=a("li"),xpe=a("strong"),kYo=o("swin"),SYo=o(" \u2014 "),WV=a("a"),RYo=o("SwinForMaskedImageModeling"),BYo=o(" (Swin model)"),PYo=l(),SF=a("li"),$pe=a("strong"),IYo=o("vit"),qYo=o(" \u2014 "),HV=a("a"),NYo=o("ViTForMaskedImageModeling"),jYo=o(" (ViT model)"),DYo=l(),RF=a("p"),GYo=o("The model is set in evaluation mode by default using "),kpe=a("code"),OYo=o("model.eval()"),VYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Spe=a("code"),XYo=o("model.train()"),zYo=l(),F(BF.$$.fragment),vPe=l(),Fd=a("h2"),PF=a("a"),Rpe=a("span"),F(G0.$$.fragment),QYo=l(),Bpe=a("span"),WYo=o("AutoModelForObjectDetection"),FPe=l(),Wo=a("div"),F(O0.$$.fragment),HYo=l(),Td=a("p"),UYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),UV=a("a"),JYo=o("from_pretrained()"),YYo=o(" class method or the "),JV=a("a"),KYo=o("from_config()"),ZYo=o(` class
method.`),eKo=l(),V0=a("p"),oKo=o("This class cannot be instantiated directly using "),Ppe=a("code"),rKo=o("__init__()"),tKo=o(" (throws an error)."),aKo=l(),vt=a("div"),F(X0.$$.fragment),nKo=l(),Ipe=a("p"),sKo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),lKo=l(),Md=a("p"),iKo=o(`Note:
Loading a model from its configuration file does `),qpe=a("strong"),dKo=o("not"),cKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YV=a("a"),fKo=o("from_pretrained()"),mKo=o(" to load the model weights."),gKo=l(),F(IF.$$.fragment),hKo=l(),ho=a("div"),F(z0.$$.fragment),pKo=l(),Npe=a("p"),uKo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),_Ko=l(),Xa=a("p"),bKo=o("The model class to instantiate is selected based on the "),jpe=a("code"),vKo=o("model_type"),FKo=o(` property of the config object (either
passed as an argument or loaded from `),Dpe=a("code"),TKo=o("pretrained_model_name_or_path"),MKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gpe=a("code"),EKo=o("pretrained_model_name_or_path"),CKo=o(":"),wKo=l(),Q0=a("ul"),qF=a("li"),Ope=a("strong"),AKo=o("detr"),yKo=o(" \u2014 "),KV=a("a"),LKo=o("DetrForObjectDetection"),xKo=o(" (DETR model)"),$Ko=l(),NF=a("li"),Vpe=a("strong"),kKo=o("yolos"),SKo=o(" \u2014 "),ZV=a("a"),RKo=o("YolosForObjectDetection"),BKo=o(" (YOLOS model)"),PKo=l(),jF=a("p"),IKo=o("The model is set in evaluation mode by default using "),Xpe=a("code"),qKo=o("model.eval()"),NKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zpe=a("code"),jKo=o("model.train()"),DKo=l(),F(DF.$$.fragment),TPe=l(),Ed=a("h2"),GF=a("a"),Qpe=a("span"),F(W0.$$.fragment),GKo=l(),Wpe=a("span"),OKo=o("AutoModelForImageSegmentation"),MPe=l(),Ho=a("div"),F(H0.$$.fragment),VKo=l(),Cd=a("p"),XKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),eX=a("a"),zKo=o("from_pretrained()"),QKo=o(" class method or the "),oX=a("a"),WKo=o("from_config()"),HKo=o(` class
method.`),UKo=l(),U0=a("p"),JKo=o("This class cannot be instantiated directly using "),Hpe=a("code"),YKo=o("__init__()"),KKo=o(" (throws an error)."),ZKo=l(),Ft=a("div"),F(J0.$$.fragment),eZo=l(),Upe=a("p"),oZo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),rZo=l(),wd=a("p"),tZo=o(`Note:
Loading a model from its configuration file does `),Jpe=a("strong"),aZo=o("not"),nZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rX=a("a"),sZo=o("from_pretrained()"),lZo=o(" to load the model weights."),iZo=l(),F(OF.$$.fragment),dZo=l(),po=a("div"),F(Y0.$$.fragment),cZo=l(),Ype=a("p"),fZo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),mZo=l(),za=a("p"),gZo=o("The model class to instantiate is selected based on the "),Kpe=a("code"),hZo=o("model_type"),pZo=o(` property of the config object (either
passed as an argument or loaded from `),Zpe=a("code"),uZo=o("pretrained_model_name_or_path"),_Zo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eue=a("code"),bZo=o("pretrained_model_name_or_path"),vZo=o(":"),FZo=l(),oue=a("ul"),VF=a("li"),rue=a("strong"),TZo=o("detr"),MZo=o(" \u2014 "),tX=a("a"),EZo=o("DetrForSegmentation"),CZo=o(" (DETR model)"),wZo=l(),XF=a("p"),AZo=o("The model is set in evaluation mode by default using "),tue=a("code"),yZo=o("model.eval()"),LZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aue=a("code"),xZo=o("model.train()"),$Zo=l(),F(zF.$$.fragment),EPe=l(),Ad=a("h2"),QF=a("a"),nue=a("span"),F(K0.$$.fragment),kZo=l(),sue=a("span"),SZo=o("AutoModelForSemanticSegmentation"),CPe=l(),Uo=a("div"),F(Z0.$$.fragment),RZo=l(),yd=a("p"),BZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),aX=a("a"),PZo=o("from_pretrained()"),IZo=o(" class method or the "),nX=a("a"),qZo=o("from_config()"),NZo=o(` class
method.`),jZo=l(),ey=a("p"),DZo=o("This class cannot be instantiated directly using "),lue=a("code"),GZo=o("__init__()"),OZo=o(" (throws an error)."),VZo=l(),Tt=a("div"),F(oy.$$.fragment),XZo=l(),iue=a("p"),zZo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),QZo=l(),Ld=a("p"),WZo=o(`Note:
Loading a model from its configuration file does `),due=a("strong"),HZo=o("not"),UZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sX=a("a"),JZo=o("from_pretrained()"),YZo=o(" to load the model weights."),KZo=l(),F(WF.$$.fragment),ZZo=l(),uo=a("div"),F(ry.$$.fragment),eer=l(),cue=a("p"),oer=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),rer=l(),Qa=a("p"),ter=o("The model class to instantiate is selected based on the "),fue=a("code"),aer=o("model_type"),ner=o(` property of the config object (either
passed as an argument or loaded from `),mue=a("code"),ser=o("pretrained_model_name_or_path"),ler=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gue=a("code"),ier=o("pretrained_model_name_or_path"),der=o(":"),cer=l(),Wa=a("ul"),HF=a("li"),hue=a("strong"),fer=o("beit"),mer=o(" \u2014 "),lX=a("a"),ger=o("BeitForSemanticSegmentation"),her=o(" (BEiT model)"),per=l(),UF=a("li"),pue=a("strong"),uer=o("data2vec-vision"),_er=o(" \u2014 "),iX=a("a"),ber=o("Data2VecVisionForSemanticSegmentation"),ver=o(" (Data2VecVision model)"),Fer=l(),JF=a("li"),uue=a("strong"),Ter=o("dpt"),Mer=o(" \u2014 "),dX=a("a"),Eer=o("DPTForSemanticSegmentation"),Cer=o(" (DPT model)"),wer=l(),YF=a("li"),_ue=a("strong"),Aer=o("segformer"),yer=o(" \u2014 "),cX=a("a"),Ler=o("SegformerForSemanticSegmentation"),xer=o(" (SegFormer model)"),$er=l(),KF=a("p"),ker=o("The model is set in evaluation mode by default using "),bue=a("code"),Ser=o("model.eval()"),Rer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vue=a("code"),Ber=o("model.train()"),Per=l(),F(ZF.$$.fragment),wPe=l(),xd=a("h2"),e6=a("a"),Fue=a("span"),F(ty.$$.fragment),Ier=l(),Tue=a("span"),qer=o("AutoModelForInstanceSegmentation"),APe=l(),Jo=a("div"),F(ay.$$.fragment),Ner=l(),$d=a("p"),jer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),fX=a("a"),Der=o("from_pretrained()"),Ger=o(" class method or the "),mX=a("a"),Oer=o("from_config()"),Ver=o(` class
method.`),Xer=l(),ny=a("p"),zer=o("This class cannot be instantiated directly using "),Mue=a("code"),Qer=o("__init__()"),Wer=o(" (throws an error)."),Her=l(),Mt=a("div"),F(sy.$$.fragment),Uer=l(),Eue=a("p"),Jer=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Yer=l(),kd=a("p"),Ker=o(`Note:
Loading a model from its configuration file does `),Cue=a("strong"),Zer=o("not"),eor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gX=a("a"),oor=o("from_pretrained()"),ror=o(" to load the model weights."),tor=l(),F(o6.$$.fragment),aor=l(),_o=a("div"),F(ly.$$.fragment),nor=l(),wue=a("p"),sor=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),lor=l(),Ha=a("p"),ior=o("The model class to instantiate is selected based on the "),Aue=a("code"),dor=o("model_type"),cor=o(` property of the config object (either
passed as an argument or loaded from `),yue=a("code"),mor=o("pretrained_model_name_or_path"),gor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lue=a("code"),hor=o("pretrained_model_name_or_path"),por=o(":"),uor=l(),xue=a("ul"),r6=a("li"),$ue=a("strong"),_or=o("maskformer"),bor=o(" \u2014 "),hX=a("a"),vor=o("MaskFormerForInstanceSegmentation"),For=o(" (MaskFormer model)"),Tor=l(),t6=a("p"),Mor=o("The model is set in evaluation mode by default using "),kue=a("code"),Eor=o("model.eval()"),Cor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sue=a("code"),wor=o("model.train()"),Aor=l(),F(a6.$$.fragment),yPe=l(),Sd=a("h2"),n6=a("a"),Rue=a("span"),F(iy.$$.fragment),yor=l(),Bue=a("span"),Lor=o("TFAutoModel"),LPe=l(),Yo=a("div"),F(dy.$$.fragment),xor=l(),Rd=a("p"),$or=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),pX=a("a"),kor=o("from_pretrained()"),Sor=o(" class method or the "),uX=a("a"),Ror=o("from_config()"),Bor=o(` class
method.`),Por=l(),cy=a("p"),Ior=o("This class cannot be instantiated directly using "),Pue=a("code"),qor=o("__init__()"),Nor=o(" (throws an error)."),jor=l(),Et=a("div"),F(fy.$$.fragment),Dor=l(),Iue=a("p"),Gor=o("Instantiates one of the base model classes of the library from a configuration."),Oor=l(),Bd=a("p"),Vor=o(`Note:
Loading a model from its configuration file does `),que=a("strong"),Xor=o("not"),zor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_X=a("a"),Qor=o("from_pretrained()"),Wor=o(" to load the model weights."),Hor=l(),F(s6.$$.fragment),Uor=l(),Cr=a("div"),F(my.$$.fragment),Jor=l(),Nue=a("p"),Yor=o("Instantiate one of the base model classes of the library from a pretrained model."),Kor=l(),Ua=a("p"),Zor=o("The model class to instantiate is selected based on the "),jue=a("code"),err=o("model_type"),orr=o(` property of the config object (either
passed as an argument or loaded from `),Due=a("code"),rrr=o("pretrained_model_name_or_path"),trr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gue=a("code"),arr=o("pretrained_model_name_or_path"),nrr=o(":"),srr=l(),N=a("ul"),l6=a("li"),Oue=a("strong"),lrr=o("albert"),irr=o(" \u2014 "),bX=a("a"),drr=o("TFAlbertModel"),crr=o(" (ALBERT model)"),frr=l(),i6=a("li"),Vue=a("strong"),mrr=o("bart"),grr=o(" \u2014 "),vX=a("a"),hrr=o("TFBartModel"),prr=o(" (BART model)"),urr=l(),d6=a("li"),Xue=a("strong"),_rr=o("bert"),brr=o(" \u2014 "),FX=a("a"),vrr=o("TFBertModel"),Frr=o(" (BERT model)"),Trr=l(),c6=a("li"),zue=a("strong"),Mrr=o("blenderbot"),Err=o(" \u2014 "),TX=a("a"),Crr=o("TFBlenderbotModel"),wrr=o(" (Blenderbot model)"),Arr=l(),f6=a("li"),Que=a("strong"),yrr=o("blenderbot-small"),Lrr=o(" \u2014 "),MX=a("a"),xrr=o("TFBlenderbotSmallModel"),$rr=o(" (BlenderbotSmall model)"),krr=l(),m6=a("li"),Wue=a("strong"),Srr=o("camembert"),Rrr=o(" \u2014 "),EX=a("a"),Brr=o("TFCamembertModel"),Prr=o(" (CamemBERT model)"),Irr=l(),g6=a("li"),Hue=a("strong"),qrr=o("clip"),Nrr=o(" \u2014 "),CX=a("a"),jrr=o("TFCLIPModel"),Drr=o(" (CLIP model)"),Grr=l(),h6=a("li"),Uue=a("strong"),Orr=o("convbert"),Vrr=o(" \u2014 "),wX=a("a"),Xrr=o("TFConvBertModel"),zrr=o(" (ConvBERT model)"),Qrr=l(),p6=a("li"),Jue=a("strong"),Wrr=o("convnext"),Hrr=o(" \u2014 "),AX=a("a"),Urr=o("TFConvNextModel"),Jrr=o(" (ConvNext model)"),Yrr=l(),u6=a("li"),Yue=a("strong"),Krr=o("ctrl"),Zrr=o(" \u2014 "),yX=a("a"),etr=o("TFCTRLModel"),otr=o(" (CTRL model)"),rtr=l(),_6=a("li"),Kue=a("strong"),ttr=o("data2vec-vision"),atr=o(" \u2014 "),LX=a("a"),ntr=o("TFData2VecVisionModel"),str=o(" (Data2VecVision model)"),ltr=l(),b6=a("li"),Zue=a("strong"),itr=o("deberta"),dtr=o(" \u2014 "),xX=a("a"),ctr=o("TFDebertaModel"),ftr=o(" (DeBERTa model)"),mtr=l(),v6=a("li"),e_e=a("strong"),gtr=o("deberta-v2"),htr=o(" \u2014 "),$X=a("a"),ptr=o("TFDebertaV2Model"),utr=o(" (DeBERTa-v2 model)"),_tr=l(),F6=a("li"),o_e=a("strong"),btr=o("distilbert"),vtr=o(" \u2014 "),kX=a("a"),Ftr=o("TFDistilBertModel"),Ttr=o(" (DistilBERT model)"),Mtr=l(),T6=a("li"),r_e=a("strong"),Etr=o("dpr"),Ctr=o(" \u2014 "),SX=a("a"),wtr=o("TFDPRQuestionEncoder"),Atr=o(" (DPR model)"),ytr=l(),M6=a("li"),t_e=a("strong"),Ltr=o("electra"),xtr=o(" \u2014 "),RX=a("a"),$tr=o("TFElectraModel"),ktr=o(" (ELECTRA model)"),Str=l(),E6=a("li"),a_e=a("strong"),Rtr=o("flaubert"),Btr=o(" \u2014 "),BX=a("a"),Ptr=o("TFFlaubertModel"),Itr=o(" (FlauBERT model)"),qtr=l(),ks=a("li"),n_e=a("strong"),Ntr=o("funnel"),jtr=o(" \u2014 "),PX=a("a"),Dtr=o("TFFunnelModel"),Gtr=o(" or "),IX=a("a"),Otr=o("TFFunnelBaseModel"),Vtr=o(" (Funnel Transformer model)"),Xtr=l(),C6=a("li"),s_e=a("strong"),ztr=o("gpt2"),Qtr=o(" \u2014 "),qX=a("a"),Wtr=o("TFGPT2Model"),Htr=o(" (OpenAI GPT-2 model)"),Utr=l(),w6=a("li"),l_e=a("strong"),Jtr=o("gptj"),Ytr=o(" \u2014 "),NX=a("a"),Ktr=o("TFGPTJModel"),Ztr=o(" (GPT-J model)"),ear=l(),A6=a("li"),i_e=a("strong"),oar=o("hubert"),rar=o(" \u2014 "),jX=a("a"),tar=o("TFHubertModel"),aar=o(" (Hubert model)"),nar=l(),y6=a("li"),d_e=a("strong"),sar=o("layoutlm"),lar=o(" \u2014 "),DX=a("a"),iar=o("TFLayoutLMModel"),dar=o(" (LayoutLM model)"),car=l(),L6=a("li"),c_e=a("strong"),far=o("led"),mar=o(" \u2014 "),GX=a("a"),gar=o("TFLEDModel"),har=o(" (LED model)"),par=l(),x6=a("li"),f_e=a("strong"),uar=o("longformer"),_ar=o(" \u2014 "),OX=a("a"),bar=o("TFLongformerModel"),Far=o(" (Longformer model)"),Tar=l(),$6=a("li"),m_e=a("strong"),Mar=o("lxmert"),Ear=o(" \u2014 "),VX=a("a"),Car=o("TFLxmertModel"),war=o(" (LXMERT model)"),Aar=l(),k6=a("li"),g_e=a("strong"),yar=o("marian"),Lar=o(" \u2014 "),XX=a("a"),xar=o("TFMarianModel"),$ar=o(" (Marian model)"),kar=l(),S6=a("li"),h_e=a("strong"),Sar=o("mbart"),Rar=o(" \u2014 "),zX=a("a"),Bar=o("TFMBartModel"),Par=o(" (mBART model)"),Iar=l(),R6=a("li"),p_e=a("strong"),qar=o("mobilebert"),Nar=o(" \u2014 "),QX=a("a"),jar=o("TFMobileBertModel"),Dar=o(" (MobileBERT model)"),Gar=l(),B6=a("li"),u_e=a("strong"),Oar=o("mpnet"),Var=o(" \u2014 "),WX=a("a"),Xar=o("TFMPNetModel"),zar=o(" (MPNet model)"),Qar=l(),P6=a("li"),__e=a("strong"),War=o("mt5"),Har=o(" \u2014 "),HX=a("a"),Uar=o("TFMT5Model"),Jar=o(" (mT5 model)"),Yar=l(),I6=a("li"),b_e=a("strong"),Kar=o("openai-gpt"),Zar=o(" \u2014 "),UX=a("a"),enr=o("TFOpenAIGPTModel"),onr=o(" (OpenAI GPT model)"),rnr=l(),q6=a("li"),v_e=a("strong"),tnr=o("pegasus"),anr=o(" \u2014 "),JX=a("a"),nnr=o("TFPegasusModel"),snr=o(" (Pegasus model)"),lnr=l(),N6=a("li"),F_e=a("strong"),inr=o("rembert"),dnr=o(" \u2014 "),YX=a("a"),cnr=o("TFRemBertModel"),fnr=o(" (RemBERT model)"),mnr=l(),j6=a("li"),T_e=a("strong"),gnr=o("roberta"),hnr=o(" \u2014 "),KX=a("a"),pnr=o("TFRobertaModel"),unr=o(" (RoBERTa model)"),_nr=l(),D6=a("li"),M_e=a("strong"),bnr=o("roformer"),vnr=o(" \u2014 "),ZX=a("a"),Fnr=o("TFRoFormerModel"),Tnr=o(" (RoFormer model)"),Mnr=l(),G6=a("li"),E_e=a("strong"),Enr=o("speech_to_text"),Cnr=o(" \u2014 "),ez=a("a"),wnr=o("TFSpeech2TextModel"),Anr=o(" (Speech2Text model)"),ynr=l(),O6=a("li"),C_e=a("strong"),Lnr=o("swin"),xnr=o(" \u2014 "),oz=a("a"),$nr=o("TFSwinModel"),knr=o(" (Swin model)"),Snr=l(),V6=a("li"),w_e=a("strong"),Rnr=o("t5"),Bnr=o(" \u2014 "),rz=a("a"),Pnr=o("TFT5Model"),Inr=o(" (T5 model)"),qnr=l(),X6=a("li"),A_e=a("strong"),Nnr=o("tapas"),jnr=o(" \u2014 "),tz=a("a"),Dnr=o("TFTapasModel"),Gnr=o(" (TAPAS model)"),Onr=l(),z6=a("li"),y_e=a("strong"),Vnr=o("transfo-xl"),Xnr=o(" \u2014 "),az=a("a"),znr=o("TFTransfoXLModel"),Qnr=o(" (Transformer-XL model)"),Wnr=l(),Q6=a("li"),L_e=a("strong"),Hnr=o("vit"),Unr=o(" \u2014 "),nz=a("a"),Jnr=o("TFViTModel"),Ynr=o(" (ViT model)"),Knr=l(),W6=a("li"),x_e=a("strong"),Znr=o("vit_mae"),esr=o(" \u2014 "),sz=a("a"),osr=o("TFViTMAEModel"),rsr=o(" (ViTMAE model)"),tsr=l(),H6=a("li"),$_e=a("strong"),asr=o("wav2vec2"),nsr=o(" \u2014 "),lz=a("a"),ssr=o("TFWav2Vec2Model"),lsr=o(" (Wav2Vec2 model)"),isr=l(),U6=a("li"),k_e=a("strong"),dsr=o("xlm"),csr=o(" \u2014 "),iz=a("a"),fsr=o("TFXLMModel"),msr=o(" (XLM model)"),gsr=l(),J6=a("li"),S_e=a("strong"),hsr=o("xlm-roberta"),psr=o(" \u2014 "),dz=a("a"),usr=o("TFXLMRobertaModel"),_sr=o(" (XLM-RoBERTa model)"),bsr=l(),Y6=a("li"),R_e=a("strong"),vsr=o("xlnet"),Fsr=o(" \u2014 "),cz=a("a"),Tsr=o("TFXLNetModel"),Msr=o(" (XLNet model)"),Esr=l(),F(K6.$$.fragment),xPe=l(),Pd=a("h2"),Z6=a("a"),B_e=a("span"),F(gy.$$.fragment),Csr=l(),P_e=a("span"),wsr=o("TFAutoModelForPreTraining"),$Pe=l(),Ko=a("div"),F(hy.$$.fragment),Asr=l(),Id=a("p"),ysr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),fz=a("a"),Lsr=o("from_pretrained()"),xsr=o(" class method or the "),mz=a("a"),$sr=o("from_config()"),ksr=o(` class
method.`),Ssr=l(),py=a("p"),Rsr=o("This class cannot be instantiated directly using "),I_e=a("code"),Bsr=o("__init__()"),Psr=o(" (throws an error)."),Isr=l(),Ct=a("div"),F(uy.$$.fragment),qsr=l(),q_e=a("p"),Nsr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),jsr=l(),qd=a("p"),Dsr=o(`Note:
Loading a model from its configuration file does `),N_e=a("strong"),Gsr=o("not"),Osr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gz=a("a"),Vsr=o("from_pretrained()"),Xsr=o(" to load the model weights."),zsr=l(),F(eT.$$.fragment),Qsr=l(),wr=a("div"),F(_y.$$.fragment),Wsr=l(),j_e=a("p"),Hsr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Usr=l(),Ja=a("p"),Jsr=o("The model class to instantiate is selected based on the "),D_e=a("code"),Ysr=o("model_type"),Ksr=o(` property of the config object (either
passed as an argument or loaded from `),G_e=a("code"),Zsr=o("pretrained_model_name_or_path"),elr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O_e=a("code"),olr=o("pretrained_model_name_or_path"),rlr=o(":"),tlr=l(),ne=a("ul"),oT=a("li"),V_e=a("strong"),alr=o("albert"),nlr=o(" \u2014 "),hz=a("a"),slr=o("TFAlbertForPreTraining"),llr=o(" (ALBERT model)"),ilr=l(),rT=a("li"),X_e=a("strong"),dlr=o("bart"),clr=o(" \u2014 "),pz=a("a"),flr=o("TFBartForConditionalGeneration"),mlr=o(" (BART model)"),glr=l(),tT=a("li"),z_e=a("strong"),hlr=o("bert"),plr=o(" \u2014 "),uz=a("a"),ulr=o("TFBertForPreTraining"),_lr=o(" (BERT model)"),blr=l(),aT=a("li"),Q_e=a("strong"),vlr=o("camembert"),Flr=o(" \u2014 "),_z=a("a"),Tlr=o("TFCamembertForMaskedLM"),Mlr=o(" (CamemBERT model)"),Elr=l(),nT=a("li"),W_e=a("strong"),Clr=o("ctrl"),wlr=o(" \u2014 "),bz=a("a"),Alr=o("TFCTRLLMHeadModel"),ylr=o(" (CTRL model)"),Llr=l(),sT=a("li"),H_e=a("strong"),xlr=o("distilbert"),$lr=o(" \u2014 "),vz=a("a"),klr=o("TFDistilBertForMaskedLM"),Slr=o(" (DistilBERT model)"),Rlr=l(),lT=a("li"),U_e=a("strong"),Blr=o("electra"),Plr=o(" \u2014 "),Fz=a("a"),Ilr=o("TFElectraForPreTraining"),qlr=o(" (ELECTRA model)"),Nlr=l(),iT=a("li"),J_e=a("strong"),jlr=o("flaubert"),Dlr=o(" \u2014 "),Tz=a("a"),Glr=o("TFFlaubertWithLMHeadModel"),Olr=o(" (FlauBERT model)"),Vlr=l(),dT=a("li"),Y_e=a("strong"),Xlr=o("funnel"),zlr=o(" \u2014 "),Mz=a("a"),Qlr=o("TFFunnelForPreTraining"),Wlr=o(" (Funnel Transformer model)"),Hlr=l(),cT=a("li"),K_e=a("strong"),Ulr=o("gpt2"),Jlr=o(" \u2014 "),Ez=a("a"),Ylr=o("TFGPT2LMHeadModel"),Klr=o(" (OpenAI GPT-2 model)"),Zlr=l(),fT=a("li"),Z_e=a("strong"),eir=o("layoutlm"),oir=o(" \u2014 "),Cz=a("a"),rir=o("TFLayoutLMForMaskedLM"),tir=o(" (LayoutLM model)"),air=l(),mT=a("li"),e1e=a("strong"),nir=o("lxmert"),sir=o(" \u2014 "),wz=a("a"),lir=o("TFLxmertForPreTraining"),iir=o(" (LXMERT model)"),dir=l(),gT=a("li"),o1e=a("strong"),cir=o("mobilebert"),fir=o(" \u2014 "),Az=a("a"),mir=o("TFMobileBertForPreTraining"),gir=o(" (MobileBERT model)"),hir=l(),hT=a("li"),r1e=a("strong"),pir=o("mpnet"),uir=o(" \u2014 "),yz=a("a"),_ir=o("TFMPNetForMaskedLM"),bir=o(" (MPNet model)"),vir=l(),pT=a("li"),t1e=a("strong"),Fir=o("openai-gpt"),Tir=o(" \u2014 "),Lz=a("a"),Mir=o("TFOpenAIGPTLMHeadModel"),Eir=o(" (OpenAI GPT model)"),Cir=l(),uT=a("li"),a1e=a("strong"),wir=o("roberta"),Air=o(" \u2014 "),xz=a("a"),yir=o("TFRobertaForMaskedLM"),Lir=o(" (RoBERTa model)"),xir=l(),_T=a("li"),n1e=a("strong"),$ir=o("t5"),kir=o(" \u2014 "),$z=a("a"),Sir=o("TFT5ForConditionalGeneration"),Rir=o(" (T5 model)"),Bir=l(),bT=a("li"),s1e=a("strong"),Pir=o("tapas"),Iir=o(" \u2014 "),kz=a("a"),qir=o("TFTapasForMaskedLM"),Nir=o(" (TAPAS model)"),jir=l(),vT=a("li"),l1e=a("strong"),Dir=o("transfo-xl"),Gir=o(" \u2014 "),Sz=a("a"),Oir=o("TFTransfoXLLMHeadModel"),Vir=o(" (Transformer-XL model)"),Xir=l(),FT=a("li"),i1e=a("strong"),zir=o("vit_mae"),Qir=o(" \u2014 "),Rz=a("a"),Wir=o("TFViTMAEForPreTraining"),Hir=o(" (ViTMAE model)"),Uir=l(),TT=a("li"),d1e=a("strong"),Jir=o("xlm"),Yir=o(" \u2014 "),Bz=a("a"),Kir=o("TFXLMWithLMHeadModel"),Zir=o(" (XLM model)"),edr=l(),MT=a("li"),c1e=a("strong"),odr=o("xlm-roberta"),rdr=o(" \u2014 "),Pz=a("a"),tdr=o("TFXLMRobertaForMaskedLM"),adr=o(" (XLM-RoBERTa model)"),ndr=l(),ET=a("li"),f1e=a("strong"),sdr=o("xlnet"),ldr=o(" \u2014 "),Iz=a("a"),idr=o("TFXLNetLMHeadModel"),ddr=o(" (XLNet model)"),cdr=l(),F(CT.$$.fragment),kPe=l(),Nd=a("h2"),wT=a("a"),m1e=a("span"),F(by.$$.fragment),fdr=l(),g1e=a("span"),mdr=o("TFAutoModelForCausalLM"),SPe=l(),Zo=a("div"),F(vy.$$.fragment),gdr=l(),jd=a("p"),hdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qz=a("a"),pdr=o("from_pretrained()"),udr=o(" class method or the "),Nz=a("a"),_dr=o("from_config()"),bdr=o(` class
method.`),vdr=l(),Fy=a("p"),Fdr=o("This class cannot be instantiated directly using "),h1e=a("code"),Tdr=o("__init__()"),Mdr=o(" (throws an error)."),Edr=l(),wt=a("div"),F(Ty.$$.fragment),Cdr=l(),p1e=a("p"),wdr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Adr=l(),Dd=a("p"),ydr=o(`Note:
Loading a model from its configuration file does `),u1e=a("strong"),Ldr=o("not"),xdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jz=a("a"),$dr=o("from_pretrained()"),kdr=o(" to load the model weights."),Sdr=l(),F(AT.$$.fragment),Rdr=l(),Ar=a("div"),F(My.$$.fragment),Bdr=l(),_1e=a("p"),Pdr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Idr=l(),Ya=a("p"),qdr=o("The model class to instantiate is selected based on the "),b1e=a("code"),Ndr=o("model_type"),jdr=o(` property of the config object (either
passed as an argument or loaded from `),v1e=a("code"),Ddr=o("pretrained_model_name_or_path"),Gdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F1e=a("code"),Odr=o("pretrained_model_name_or_path"),Vdr=o(":"),Xdr=l(),Te=a("ul"),yT=a("li"),T1e=a("strong"),zdr=o("bert"),Qdr=o(" \u2014 "),Dz=a("a"),Wdr=o("TFBertLMHeadModel"),Hdr=o(" (BERT model)"),Udr=l(),LT=a("li"),M1e=a("strong"),Jdr=o("camembert"),Ydr=o(" \u2014 "),Gz=a("a"),Kdr=o("TFCamembertForCausalLM"),Zdr=o(" (CamemBERT model)"),ecr=l(),xT=a("li"),E1e=a("strong"),ocr=o("ctrl"),rcr=o(" \u2014 "),Oz=a("a"),tcr=o("TFCTRLLMHeadModel"),acr=o(" (CTRL model)"),ncr=l(),$T=a("li"),C1e=a("strong"),scr=o("gpt2"),lcr=o(" \u2014 "),Vz=a("a"),icr=o("TFGPT2LMHeadModel"),dcr=o(" (OpenAI GPT-2 model)"),ccr=l(),kT=a("li"),w1e=a("strong"),fcr=o("gptj"),mcr=o(" \u2014 "),Xz=a("a"),gcr=o("TFGPTJForCausalLM"),hcr=o(" (GPT-J model)"),pcr=l(),ST=a("li"),A1e=a("strong"),ucr=o("openai-gpt"),_cr=o(" \u2014 "),zz=a("a"),bcr=o("TFOpenAIGPTLMHeadModel"),vcr=o(" (OpenAI GPT model)"),Fcr=l(),RT=a("li"),y1e=a("strong"),Tcr=o("rembert"),Mcr=o(" \u2014 "),Qz=a("a"),Ecr=o("TFRemBertForCausalLM"),Ccr=o(" (RemBERT model)"),wcr=l(),BT=a("li"),L1e=a("strong"),Acr=o("roberta"),ycr=o(" \u2014 "),Wz=a("a"),Lcr=o("TFRobertaForCausalLM"),xcr=o(" (RoBERTa model)"),$cr=l(),PT=a("li"),x1e=a("strong"),kcr=o("roformer"),Scr=o(" \u2014 "),Hz=a("a"),Rcr=o("TFRoFormerForCausalLM"),Bcr=o(" (RoFormer model)"),Pcr=l(),IT=a("li"),$1e=a("strong"),Icr=o("transfo-xl"),qcr=o(" \u2014 "),Uz=a("a"),Ncr=o("TFTransfoXLLMHeadModel"),jcr=o(" (Transformer-XL model)"),Dcr=l(),qT=a("li"),k1e=a("strong"),Gcr=o("xlm"),Ocr=o(" \u2014 "),Jz=a("a"),Vcr=o("TFXLMWithLMHeadModel"),Xcr=o(" (XLM model)"),zcr=l(),NT=a("li"),S1e=a("strong"),Qcr=o("xlnet"),Wcr=o(" \u2014 "),Yz=a("a"),Hcr=o("TFXLNetLMHeadModel"),Ucr=o(" (XLNet model)"),Jcr=l(),F(jT.$$.fragment),RPe=l(),Gd=a("h2"),DT=a("a"),R1e=a("span"),F(Ey.$$.fragment),Ycr=l(),B1e=a("span"),Kcr=o("TFAutoModelForImageClassification"),BPe=l(),er=a("div"),F(Cy.$$.fragment),Zcr=l(),Od=a("p"),efr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Kz=a("a"),ofr=o("from_pretrained()"),rfr=o(" class method or the "),Zz=a("a"),tfr=o("from_config()"),afr=o(` class
method.`),nfr=l(),wy=a("p"),sfr=o("This class cannot be instantiated directly using "),P1e=a("code"),lfr=o("__init__()"),ifr=o(" (throws an error)."),dfr=l(),At=a("div"),F(Ay.$$.fragment),cfr=l(),I1e=a("p"),ffr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),mfr=l(),Vd=a("p"),gfr=o(`Note:
Loading a model from its configuration file does `),q1e=a("strong"),hfr=o("not"),pfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eQ=a("a"),ufr=o("from_pretrained()"),_fr=o(" to load the model weights."),bfr=l(),F(GT.$$.fragment),vfr=l(),yr=a("div"),F(yy.$$.fragment),Ffr=l(),N1e=a("p"),Tfr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Mfr=l(),Ka=a("p"),Efr=o("The model class to instantiate is selected based on the "),j1e=a("code"),Cfr=o("model_type"),wfr=o(` property of the config object (either
passed as an argument or loaded from `),D1e=a("code"),Afr=o("pretrained_model_name_or_path"),yfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G1e=a("code"),Lfr=o("pretrained_model_name_or_path"),xfr=o(":"),$fr=l(),Za=a("ul"),OT=a("li"),O1e=a("strong"),kfr=o("convnext"),Sfr=o(" \u2014 "),oQ=a("a"),Rfr=o("TFConvNextForImageClassification"),Bfr=o(" (ConvNext model)"),Pfr=l(),VT=a("li"),V1e=a("strong"),Ifr=o("data2vec-vision"),qfr=o(" \u2014 "),rQ=a("a"),Nfr=o("TFData2VecVisionForImageClassification"),jfr=o(" (Data2VecVision model)"),Dfr=l(),XT=a("li"),X1e=a("strong"),Gfr=o("swin"),Ofr=o(" \u2014 "),tQ=a("a"),Vfr=o("TFSwinForImageClassification"),Xfr=o(" (Swin model)"),zfr=l(),zT=a("li"),z1e=a("strong"),Qfr=o("vit"),Wfr=o(" \u2014 "),aQ=a("a"),Hfr=o("TFViTForImageClassification"),Ufr=o(" (ViT model)"),Jfr=l(),F(QT.$$.fragment),PPe=l(),Xd=a("h2"),WT=a("a"),Q1e=a("span"),F(Ly.$$.fragment),Yfr=l(),W1e=a("span"),Kfr=o("TFAutoModelForMaskedLM"),IPe=l(),or=a("div"),F(xy.$$.fragment),Zfr=l(),zd=a("p"),emr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),nQ=a("a"),omr=o("from_pretrained()"),rmr=o(" class method or the "),sQ=a("a"),tmr=o("from_config()"),amr=o(` class
method.`),nmr=l(),$y=a("p"),smr=o("This class cannot be instantiated directly using "),H1e=a("code"),lmr=o("__init__()"),imr=o(" (throws an error)."),dmr=l(),yt=a("div"),F(ky.$$.fragment),cmr=l(),U1e=a("p"),fmr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),mmr=l(),Qd=a("p"),gmr=o(`Note:
Loading a model from its configuration file does `),J1e=a("strong"),hmr=o("not"),pmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lQ=a("a"),umr=o("from_pretrained()"),_mr=o(" to load the model weights."),bmr=l(),F(HT.$$.fragment),vmr=l(),Lr=a("div"),F(Sy.$$.fragment),Fmr=l(),Y1e=a("p"),Tmr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Mmr=l(),en=a("p"),Emr=o("The model class to instantiate is selected based on the "),K1e=a("code"),Cmr=o("model_type"),wmr=o(` property of the config object (either
passed as an argument or loaded from `),Z1e=a("code"),Amr=o("pretrained_model_name_or_path"),ymr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e8e=a("code"),Lmr=o("pretrained_model_name_or_path"),xmr=o(":"),$mr=l(),ie=a("ul"),UT=a("li"),o8e=a("strong"),kmr=o("albert"),Smr=o(" \u2014 "),iQ=a("a"),Rmr=o("TFAlbertForMaskedLM"),Bmr=o(" (ALBERT model)"),Pmr=l(),JT=a("li"),r8e=a("strong"),Imr=o("bert"),qmr=o(" \u2014 "),dQ=a("a"),Nmr=o("TFBertForMaskedLM"),jmr=o(" (BERT model)"),Dmr=l(),YT=a("li"),t8e=a("strong"),Gmr=o("camembert"),Omr=o(" \u2014 "),cQ=a("a"),Vmr=o("TFCamembertForMaskedLM"),Xmr=o(" (CamemBERT model)"),zmr=l(),KT=a("li"),a8e=a("strong"),Qmr=o("convbert"),Wmr=o(" \u2014 "),fQ=a("a"),Hmr=o("TFConvBertForMaskedLM"),Umr=o(" (ConvBERT model)"),Jmr=l(),ZT=a("li"),n8e=a("strong"),Ymr=o("deberta"),Kmr=o(" \u2014 "),mQ=a("a"),Zmr=o("TFDebertaForMaskedLM"),egr=o(" (DeBERTa model)"),ogr=l(),e9=a("li"),s8e=a("strong"),rgr=o("deberta-v2"),tgr=o(" \u2014 "),gQ=a("a"),agr=o("TFDebertaV2ForMaskedLM"),ngr=o(" (DeBERTa-v2 model)"),sgr=l(),o9=a("li"),l8e=a("strong"),lgr=o("distilbert"),igr=o(" \u2014 "),hQ=a("a"),dgr=o("TFDistilBertForMaskedLM"),cgr=o(" (DistilBERT model)"),fgr=l(),r9=a("li"),i8e=a("strong"),mgr=o("electra"),ggr=o(" \u2014 "),pQ=a("a"),hgr=o("TFElectraForMaskedLM"),pgr=o(" (ELECTRA model)"),ugr=l(),t9=a("li"),d8e=a("strong"),_gr=o("flaubert"),bgr=o(" \u2014 "),uQ=a("a"),vgr=o("TFFlaubertWithLMHeadModel"),Fgr=o(" (FlauBERT model)"),Tgr=l(),a9=a("li"),c8e=a("strong"),Mgr=o("funnel"),Egr=o(" \u2014 "),_Q=a("a"),Cgr=o("TFFunnelForMaskedLM"),wgr=o(" (Funnel Transformer model)"),Agr=l(),n9=a("li"),f8e=a("strong"),ygr=o("layoutlm"),Lgr=o(" \u2014 "),bQ=a("a"),xgr=o("TFLayoutLMForMaskedLM"),$gr=o(" (LayoutLM model)"),kgr=l(),s9=a("li"),m8e=a("strong"),Sgr=o("longformer"),Rgr=o(" \u2014 "),vQ=a("a"),Bgr=o("TFLongformerForMaskedLM"),Pgr=o(" (Longformer model)"),Igr=l(),l9=a("li"),g8e=a("strong"),qgr=o("mobilebert"),Ngr=o(" \u2014 "),FQ=a("a"),jgr=o("TFMobileBertForMaskedLM"),Dgr=o(" (MobileBERT model)"),Ggr=l(),i9=a("li"),h8e=a("strong"),Ogr=o("mpnet"),Vgr=o(" \u2014 "),TQ=a("a"),Xgr=o("TFMPNetForMaskedLM"),zgr=o(" (MPNet model)"),Qgr=l(),d9=a("li"),p8e=a("strong"),Wgr=o("rembert"),Hgr=o(" \u2014 "),MQ=a("a"),Ugr=o("TFRemBertForMaskedLM"),Jgr=o(" (RemBERT model)"),Ygr=l(),c9=a("li"),u8e=a("strong"),Kgr=o("roberta"),Zgr=o(" \u2014 "),EQ=a("a"),ehr=o("TFRobertaForMaskedLM"),ohr=o(" (RoBERTa model)"),rhr=l(),f9=a("li"),_8e=a("strong"),thr=o("roformer"),ahr=o(" \u2014 "),CQ=a("a"),nhr=o("TFRoFormerForMaskedLM"),shr=o(" (RoFormer model)"),lhr=l(),m9=a("li"),b8e=a("strong"),ihr=o("tapas"),dhr=o(" \u2014 "),wQ=a("a"),chr=o("TFTapasForMaskedLM"),fhr=o(" (TAPAS model)"),mhr=l(),g9=a("li"),v8e=a("strong"),ghr=o("xlm"),hhr=o(" \u2014 "),AQ=a("a"),phr=o("TFXLMWithLMHeadModel"),uhr=o(" (XLM model)"),_hr=l(),h9=a("li"),F8e=a("strong"),bhr=o("xlm-roberta"),vhr=o(" \u2014 "),yQ=a("a"),Fhr=o("TFXLMRobertaForMaskedLM"),Thr=o(" (XLM-RoBERTa model)"),Mhr=l(),F(p9.$$.fragment),qPe=l(),Wd=a("h2"),u9=a("a"),T8e=a("span"),F(Ry.$$.fragment),Ehr=l(),M8e=a("span"),Chr=o("TFAutoModelForSeq2SeqLM"),NPe=l(),rr=a("div"),F(By.$$.fragment),whr=l(),Hd=a("p"),Ahr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),LQ=a("a"),yhr=o("from_pretrained()"),Lhr=o(" class method or the "),xQ=a("a"),xhr=o("from_config()"),$hr=o(` class
method.`),khr=l(),Py=a("p"),Shr=o("This class cannot be instantiated directly using "),E8e=a("code"),Rhr=o("__init__()"),Bhr=o(" (throws an error)."),Phr=l(),Lt=a("div"),F(Iy.$$.fragment),Ihr=l(),C8e=a("p"),qhr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Nhr=l(),Ud=a("p"),jhr=o(`Note:
Loading a model from its configuration file does `),w8e=a("strong"),Dhr=o("not"),Ghr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$Q=a("a"),Ohr=o("from_pretrained()"),Vhr=o(" to load the model weights."),Xhr=l(),F(_9.$$.fragment),zhr=l(),xr=a("div"),F(qy.$$.fragment),Qhr=l(),A8e=a("p"),Whr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Hhr=l(),on=a("p"),Uhr=o("The model class to instantiate is selected based on the "),y8e=a("code"),Jhr=o("model_type"),Yhr=o(` property of the config object (either
passed as an argument or loaded from `),L8e=a("code"),Khr=o("pretrained_model_name_or_path"),Zhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x8e=a("code"),epr=o("pretrained_model_name_or_path"),opr=o(":"),rpr=l(),ye=a("ul"),b9=a("li"),$8e=a("strong"),tpr=o("bart"),apr=o(" \u2014 "),kQ=a("a"),npr=o("TFBartForConditionalGeneration"),spr=o(" (BART model)"),lpr=l(),v9=a("li"),k8e=a("strong"),ipr=o("blenderbot"),dpr=o(" \u2014 "),SQ=a("a"),cpr=o("TFBlenderbotForConditionalGeneration"),fpr=o(" (Blenderbot model)"),mpr=l(),F9=a("li"),S8e=a("strong"),gpr=o("blenderbot-small"),hpr=o(" \u2014 "),RQ=a("a"),ppr=o("TFBlenderbotSmallForConditionalGeneration"),upr=o(" (BlenderbotSmall model)"),_pr=l(),T9=a("li"),R8e=a("strong"),bpr=o("encoder-decoder"),vpr=o(" \u2014 "),BQ=a("a"),Fpr=o("TFEncoderDecoderModel"),Tpr=o(" (Encoder decoder model)"),Mpr=l(),M9=a("li"),B8e=a("strong"),Epr=o("led"),Cpr=o(" \u2014 "),PQ=a("a"),wpr=o("TFLEDForConditionalGeneration"),Apr=o(" (LED model)"),ypr=l(),E9=a("li"),P8e=a("strong"),Lpr=o("marian"),xpr=o(" \u2014 "),IQ=a("a"),$pr=o("TFMarianMTModel"),kpr=o(" (Marian model)"),Spr=l(),C9=a("li"),I8e=a("strong"),Rpr=o("mbart"),Bpr=o(" \u2014 "),qQ=a("a"),Ppr=o("TFMBartForConditionalGeneration"),Ipr=o(" (mBART model)"),qpr=l(),w9=a("li"),q8e=a("strong"),Npr=o("mt5"),jpr=o(" \u2014 "),NQ=a("a"),Dpr=o("TFMT5ForConditionalGeneration"),Gpr=o(" (mT5 model)"),Opr=l(),A9=a("li"),N8e=a("strong"),Vpr=o("pegasus"),Xpr=o(" \u2014 "),jQ=a("a"),zpr=o("TFPegasusForConditionalGeneration"),Qpr=o(" (Pegasus model)"),Wpr=l(),y9=a("li"),j8e=a("strong"),Hpr=o("t5"),Upr=o(" \u2014 "),DQ=a("a"),Jpr=o("TFT5ForConditionalGeneration"),Ypr=o(" (T5 model)"),Kpr=l(),F(L9.$$.fragment),jPe=l(),Jd=a("h2"),x9=a("a"),D8e=a("span"),F(Ny.$$.fragment),Zpr=l(),G8e=a("span"),eur=o("TFAutoModelForSequenceClassification"),DPe=l(),tr=a("div"),F(jy.$$.fragment),our=l(),Yd=a("p"),rur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),GQ=a("a"),tur=o("from_pretrained()"),aur=o(" class method or the "),OQ=a("a"),nur=o("from_config()"),sur=o(` class
method.`),lur=l(),Dy=a("p"),iur=o("This class cannot be instantiated directly using "),O8e=a("code"),dur=o("__init__()"),cur=o(" (throws an error)."),fur=l(),xt=a("div"),F(Gy.$$.fragment),mur=l(),V8e=a("p"),gur=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),hur=l(),Kd=a("p"),pur=o(`Note:
Loading a model from its configuration file does `),X8e=a("strong"),uur=o("not"),_ur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VQ=a("a"),bur=o("from_pretrained()"),vur=o(" to load the model weights."),Fur=l(),F($9.$$.fragment),Tur=l(),$r=a("div"),F(Oy.$$.fragment),Mur=l(),z8e=a("p"),Eur=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Cur=l(),rn=a("p"),wur=o("The model class to instantiate is selected based on the "),Q8e=a("code"),Aur=o("model_type"),yur=o(` property of the config object (either
passed as an argument or loaded from `),W8e=a("code"),Lur=o("pretrained_model_name_or_path"),xur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H8e=a("code"),$ur=o("pretrained_model_name_or_path"),kur=o(":"),Sur=l(),Z=a("ul"),k9=a("li"),U8e=a("strong"),Rur=o("albert"),Bur=o(" \u2014 "),XQ=a("a"),Pur=o("TFAlbertForSequenceClassification"),Iur=o(" (ALBERT model)"),qur=l(),S9=a("li"),J8e=a("strong"),Nur=o("bert"),jur=o(" \u2014 "),zQ=a("a"),Dur=o("TFBertForSequenceClassification"),Gur=o(" (BERT model)"),Our=l(),R9=a("li"),Y8e=a("strong"),Vur=o("camembert"),Xur=o(" \u2014 "),QQ=a("a"),zur=o("TFCamembertForSequenceClassification"),Qur=o(" (CamemBERT model)"),Wur=l(),B9=a("li"),K8e=a("strong"),Hur=o("convbert"),Uur=o(" \u2014 "),WQ=a("a"),Jur=o("TFConvBertForSequenceClassification"),Yur=o(" (ConvBERT model)"),Kur=l(),P9=a("li"),Z8e=a("strong"),Zur=o("ctrl"),e_r=o(" \u2014 "),HQ=a("a"),o_r=o("TFCTRLForSequenceClassification"),r_r=o(" (CTRL model)"),t_r=l(),I9=a("li"),ebe=a("strong"),a_r=o("deberta"),n_r=o(" \u2014 "),UQ=a("a"),s_r=o("TFDebertaForSequenceClassification"),l_r=o(" (DeBERTa model)"),i_r=l(),q9=a("li"),obe=a("strong"),d_r=o("deberta-v2"),c_r=o(" \u2014 "),JQ=a("a"),f_r=o("TFDebertaV2ForSequenceClassification"),m_r=o(" (DeBERTa-v2 model)"),g_r=l(),N9=a("li"),rbe=a("strong"),h_r=o("distilbert"),p_r=o(" \u2014 "),YQ=a("a"),u_r=o("TFDistilBertForSequenceClassification"),__r=o(" (DistilBERT model)"),b_r=l(),j9=a("li"),tbe=a("strong"),v_r=o("electra"),F_r=o(" \u2014 "),KQ=a("a"),T_r=o("TFElectraForSequenceClassification"),M_r=o(" (ELECTRA model)"),E_r=l(),D9=a("li"),abe=a("strong"),C_r=o("flaubert"),w_r=o(" \u2014 "),ZQ=a("a"),A_r=o("TFFlaubertForSequenceClassification"),y_r=o(" (FlauBERT model)"),L_r=l(),G9=a("li"),nbe=a("strong"),x_r=o("funnel"),$_r=o(" \u2014 "),eW=a("a"),k_r=o("TFFunnelForSequenceClassification"),S_r=o(" (Funnel Transformer model)"),R_r=l(),O9=a("li"),sbe=a("strong"),B_r=o("gpt2"),P_r=o(" \u2014 "),oW=a("a"),I_r=o("TFGPT2ForSequenceClassification"),q_r=o(" (OpenAI GPT-2 model)"),N_r=l(),V9=a("li"),lbe=a("strong"),j_r=o("gptj"),D_r=o(" \u2014 "),rW=a("a"),G_r=o("TFGPTJForSequenceClassification"),O_r=o(" (GPT-J model)"),V_r=l(),X9=a("li"),ibe=a("strong"),X_r=o("layoutlm"),z_r=o(" \u2014 "),tW=a("a"),Q_r=o("TFLayoutLMForSequenceClassification"),W_r=o(" (LayoutLM model)"),H_r=l(),z9=a("li"),dbe=a("strong"),U_r=o("longformer"),J_r=o(" \u2014 "),aW=a("a"),Y_r=o("TFLongformerForSequenceClassification"),K_r=o(" (Longformer model)"),Z_r=l(),Q9=a("li"),cbe=a("strong"),e1r=o("mobilebert"),o1r=o(" \u2014 "),nW=a("a"),r1r=o("TFMobileBertForSequenceClassification"),t1r=o(" (MobileBERT model)"),a1r=l(),W9=a("li"),fbe=a("strong"),n1r=o("mpnet"),s1r=o(" \u2014 "),sW=a("a"),l1r=o("TFMPNetForSequenceClassification"),i1r=o(" (MPNet model)"),d1r=l(),H9=a("li"),mbe=a("strong"),c1r=o("openai-gpt"),f1r=o(" \u2014 "),lW=a("a"),m1r=o("TFOpenAIGPTForSequenceClassification"),g1r=o(" (OpenAI GPT model)"),h1r=l(),U9=a("li"),gbe=a("strong"),p1r=o("rembert"),u1r=o(" \u2014 "),iW=a("a"),_1r=o("TFRemBertForSequenceClassification"),b1r=o(" (RemBERT model)"),v1r=l(),J9=a("li"),hbe=a("strong"),F1r=o("roberta"),T1r=o(" \u2014 "),dW=a("a"),M1r=o("TFRobertaForSequenceClassification"),E1r=o(" (RoBERTa model)"),C1r=l(),Y9=a("li"),pbe=a("strong"),w1r=o("roformer"),A1r=o(" \u2014 "),cW=a("a"),y1r=o("TFRoFormerForSequenceClassification"),L1r=o(" (RoFormer model)"),x1r=l(),K9=a("li"),ube=a("strong"),$1r=o("tapas"),k1r=o(" \u2014 "),fW=a("a"),S1r=o("TFTapasForSequenceClassification"),R1r=o(" (TAPAS model)"),B1r=l(),Z9=a("li"),_be=a("strong"),P1r=o("transfo-xl"),I1r=o(" \u2014 "),mW=a("a"),q1r=o("TFTransfoXLForSequenceClassification"),N1r=o(" (Transformer-XL model)"),j1r=l(),eM=a("li"),bbe=a("strong"),D1r=o("xlm"),G1r=o(" \u2014 "),gW=a("a"),O1r=o("TFXLMForSequenceClassification"),V1r=o(" (XLM model)"),X1r=l(),oM=a("li"),vbe=a("strong"),z1r=o("xlm-roberta"),Q1r=o(" \u2014 "),hW=a("a"),W1r=o("TFXLMRobertaForSequenceClassification"),H1r=o(" (XLM-RoBERTa model)"),U1r=l(),rM=a("li"),Fbe=a("strong"),J1r=o("xlnet"),Y1r=o(" \u2014 "),pW=a("a"),K1r=o("TFXLNetForSequenceClassification"),Z1r=o(" (XLNet model)"),e8r=l(),F(tM.$$.fragment),GPe=l(),Zd=a("h2"),aM=a("a"),Tbe=a("span"),F(Vy.$$.fragment),o8r=l(),Mbe=a("span"),r8r=o("TFAutoModelForMultipleChoice"),OPe=l(),ar=a("div"),F(Xy.$$.fragment),t8r=l(),ec=a("p"),a8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),uW=a("a"),n8r=o("from_pretrained()"),s8r=o(" class method or the "),_W=a("a"),l8r=o("from_config()"),i8r=o(` class
method.`),d8r=l(),zy=a("p"),c8r=o("This class cannot be instantiated directly using "),Ebe=a("code"),f8r=o("__init__()"),m8r=o(" (throws an error)."),g8r=l(),$t=a("div"),F(Qy.$$.fragment),h8r=l(),Cbe=a("p"),p8r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),u8r=l(),oc=a("p"),_8r=o(`Note:
Loading a model from its configuration file does `),wbe=a("strong"),b8r=o("not"),v8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bW=a("a"),F8r=o("from_pretrained()"),T8r=o(" to load the model weights."),M8r=l(),F(nM.$$.fragment),E8r=l(),kr=a("div"),F(Wy.$$.fragment),C8r=l(),Abe=a("p"),w8r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),A8r=l(),tn=a("p"),y8r=o("The model class to instantiate is selected based on the "),ybe=a("code"),L8r=o("model_type"),x8r=o(` property of the config object (either
passed as an argument or loaded from `),Lbe=a("code"),$8r=o("pretrained_model_name_or_path"),k8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xbe=a("code"),S8r=o("pretrained_model_name_or_path"),R8r=o(":"),B8r=l(),pe=a("ul"),sM=a("li"),$be=a("strong"),P8r=o("albert"),I8r=o(" \u2014 "),vW=a("a"),q8r=o("TFAlbertForMultipleChoice"),N8r=o(" (ALBERT model)"),j8r=l(),lM=a("li"),kbe=a("strong"),D8r=o("bert"),G8r=o(" \u2014 "),FW=a("a"),O8r=o("TFBertForMultipleChoice"),V8r=o(" (BERT model)"),X8r=l(),iM=a("li"),Sbe=a("strong"),z8r=o("camembert"),Q8r=o(" \u2014 "),TW=a("a"),W8r=o("TFCamembertForMultipleChoice"),H8r=o(" (CamemBERT model)"),U8r=l(),dM=a("li"),Rbe=a("strong"),J8r=o("convbert"),Y8r=o(" \u2014 "),MW=a("a"),K8r=o("TFConvBertForMultipleChoice"),Z8r=o(" (ConvBERT model)"),ebr=l(),cM=a("li"),Bbe=a("strong"),obr=o("distilbert"),rbr=o(" \u2014 "),EW=a("a"),tbr=o("TFDistilBertForMultipleChoice"),abr=o(" (DistilBERT model)"),nbr=l(),fM=a("li"),Pbe=a("strong"),sbr=o("electra"),lbr=o(" \u2014 "),CW=a("a"),ibr=o("TFElectraForMultipleChoice"),dbr=o(" (ELECTRA model)"),cbr=l(),mM=a("li"),Ibe=a("strong"),fbr=o("flaubert"),mbr=o(" \u2014 "),wW=a("a"),gbr=o("TFFlaubertForMultipleChoice"),hbr=o(" (FlauBERT model)"),pbr=l(),gM=a("li"),qbe=a("strong"),ubr=o("funnel"),_br=o(" \u2014 "),AW=a("a"),bbr=o("TFFunnelForMultipleChoice"),vbr=o(" (Funnel Transformer model)"),Fbr=l(),hM=a("li"),Nbe=a("strong"),Tbr=o("longformer"),Mbr=o(" \u2014 "),yW=a("a"),Ebr=o("TFLongformerForMultipleChoice"),Cbr=o(" (Longformer model)"),wbr=l(),pM=a("li"),jbe=a("strong"),Abr=o("mobilebert"),ybr=o(" \u2014 "),LW=a("a"),Lbr=o("TFMobileBertForMultipleChoice"),xbr=o(" (MobileBERT model)"),$br=l(),uM=a("li"),Dbe=a("strong"),kbr=o("mpnet"),Sbr=o(" \u2014 "),xW=a("a"),Rbr=o("TFMPNetForMultipleChoice"),Bbr=o(" (MPNet model)"),Pbr=l(),_M=a("li"),Gbe=a("strong"),Ibr=o("rembert"),qbr=o(" \u2014 "),$W=a("a"),Nbr=o("TFRemBertForMultipleChoice"),jbr=o(" (RemBERT model)"),Dbr=l(),bM=a("li"),Obe=a("strong"),Gbr=o("roberta"),Obr=o(" \u2014 "),kW=a("a"),Vbr=o("TFRobertaForMultipleChoice"),Xbr=o(" (RoBERTa model)"),zbr=l(),vM=a("li"),Vbe=a("strong"),Qbr=o("roformer"),Wbr=o(" \u2014 "),SW=a("a"),Hbr=o("TFRoFormerForMultipleChoice"),Ubr=o(" (RoFormer model)"),Jbr=l(),FM=a("li"),Xbe=a("strong"),Ybr=o("xlm"),Kbr=o(" \u2014 "),RW=a("a"),Zbr=o("TFXLMForMultipleChoice"),e2r=o(" (XLM model)"),o2r=l(),TM=a("li"),zbe=a("strong"),r2r=o("xlm-roberta"),t2r=o(" \u2014 "),BW=a("a"),a2r=o("TFXLMRobertaForMultipleChoice"),n2r=o(" (XLM-RoBERTa model)"),s2r=l(),MM=a("li"),Qbe=a("strong"),l2r=o("xlnet"),i2r=o(" \u2014 "),PW=a("a"),d2r=o("TFXLNetForMultipleChoice"),c2r=o(" (XLNet model)"),f2r=l(),F(EM.$$.fragment),VPe=l(),rc=a("h2"),CM=a("a"),Wbe=a("span"),F(Hy.$$.fragment),m2r=l(),Hbe=a("span"),g2r=o("TFAutoModelForTableQuestionAnswering"),XPe=l(),nr=a("div"),F(Uy.$$.fragment),h2r=l(),tc=a("p"),p2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),IW=a("a"),u2r=o("from_pretrained()"),_2r=o(" class method or the "),qW=a("a"),b2r=o("from_config()"),v2r=o(` class
method.`),F2r=l(),Jy=a("p"),T2r=o("This class cannot be instantiated directly using "),Ube=a("code"),M2r=o("__init__()"),E2r=o(" (throws an error)."),C2r=l(),kt=a("div"),F(Yy.$$.fragment),w2r=l(),Jbe=a("p"),A2r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),y2r=l(),ac=a("p"),L2r=o(`Note:
Loading a model from its configuration file does `),Ybe=a("strong"),x2r=o("not"),$2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NW=a("a"),k2r=o("from_pretrained()"),S2r=o(" to load the model weights."),R2r=l(),F(wM.$$.fragment),B2r=l(),Sr=a("div"),F(Ky.$$.fragment),P2r=l(),Kbe=a("p"),I2r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),q2r=l(),an=a("p"),N2r=o("The model class to instantiate is selected based on the "),Zbe=a("code"),j2r=o("model_type"),D2r=o(` property of the config object (either
passed as an argument or loaded from `),e2e=a("code"),G2r=o("pretrained_model_name_or_path"),O2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o2e=a("code"),V2r=o("pretrained_model_name_or_path"),X2r=o(":"),z2r=l(),r2e=a("ul"),AM=a("li"),t2e=a("strong"),Q2r=o("tapas"),W2r=o(" \u2014 "),jW=a("a"),H2r=o("TFTapasForQuestionAnswering"),U2r=o(" (TAPAS model)"),J2r=l(),F(yM.$$.fragment),zPe=l(),nc=a("h2"),LM=a("a"),a2e=a("span"),F(Zy.$$.fragment),Y2r=l(),n2e=a("span"),K2r=o("TFAutoModelForTokenClassification"),QPe=l(),sr=a("div"),F(eL.$$.fragment),Z2r=l(),sc=a("p"),evr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),DW=a("a"),ovr=o("from_pretrained()"),rvr=o(" class method or the "),GW=a("a"),tvr=o("from_config()"),avr=o(` class
method.`),nvr=l(),oL=a("p"),svr=o("This class cannot be instantiated directly using "),s2e=a("code"),lvr=o("__init__()"),ivr=o(" (throws an error)."),dvr=l(),St=a("div"),F(rL.$$.fragment),cvr=l(),l2e=a("p"),fvr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),mvr=l(),lc=a("p"),gvr=o(`Note:
Loading a model from its configuration file does `),i2e=a("strong"),hvr=o("not"),pvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OW=a("a"),uvr=o("from_pretrained()"),_vr=o(" to load the model weights."),bvr=l(),F(xM.$$.fragment),vvr=l(),Rr=a("div"),F(tL.$$.fragment),Fvr=l(),d2e=a("p"),Tvr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Mvr=l(),nn=a("p"),Evr=o("The model class to instantiate is selected based on the "),c2e=a("code"),Cvr=o("model_type"),wvr=o(` property of the config object (either
passed as an argument or loaded from `),f2e=a("code"),Avr=o("pretrained_model_name_or_path"),yvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m2e=a("code"),Lvr=o("pretrained_model_name_or_path"),xvr=o(":"),$vr=l(),de=a("ul"),$M=a("li"),g2e=a("strong"),kvr=o("albert"),Svr=o(" \u2014 "),VW=a("a"),Rvr=o("TFAlbertForTokenClassification"),Bvr=o(" (ALBERT model)"),Pvr=l(),kM=a("li"),h2e=a("strong"),Ivr=o("bert"),qvr=o(" \u2014 "),XW=a("a"),Nvr=o("TFBertForTokenClassification"),jvr=o(" (BERT model)"),Dvr=l(),SM=a("li"),p2e=a("strong"),Gvr=o("camembert"),Ovr=o(" \u2014 "),zW=a("a"),Vvr=o("TFCamembertForTokenClassification"),Xvr=o(" (CamemBERT model)"),zvr=l(),RM=a("li"),u2e=a("strong"),Qvr=o("convbert"),Wvr=o(" \u2014 "),QW=a("a"),Hvr=o("TFConvBertForTokenClassification"),Uvr=o(" (ConvBERT model)"),Jvr=l(),BM=a("li"),_2e=a("strong"),Yvr=o("deberta"),Kvr=o(" \u2014 "),WW=a("a"),Zvr=o("TFDebertaForTokenClassification"),eFr=o(" (DeBERTa model)"),oFr=l(),PM=a("li"),b2e=a("strong"),rFr=o("deberta-v2"),tFr=o(" \u2014 "),HW=a("a"),aFr=o("TFDebertaV2ForTokenClassification"),nFr=o(" (DeBERTa-v2 model)"),sFr=l(),IM=a("li"),v2e=a("strong"),lFr=o("distilbert"),iFr=o(" \u2014 "),UW=a("a"),dFr=o("TFDistilBertForTokenClassification"),cFr=o(" (DistilBERT model)"),fFr=l(),qM=a("li"),F2e=a("strong"),mFr=o("electra"),gFr=o(" \u2014 "),JW=a("a"),hFr=o("TFElectraForTokenClassification"),pFr=o(" (ELECTRA model)"),uFr=l(),NM=a("li"),T2e=a("strong"),_Fr=o("flaubert"),bFr=o(" \u2014 "),YW=a("a"),vFr=o("TFFlaubertForTokenClassification"),FFr=o(" (FlauBERT model)"),TFr=l(),jM=a("li"),M2e=a("strong"),MFr=o("funnel"),EFr=o(" \u2014 "),KW=a("a"),CFr=o("TFFunnelForTokenClassification"),wFr=o(" (Funnel Transformer model)"),AFr=l(),DM=a("li"),E2e=a("strong"),yFr=o("layoutlm"),LFr=o(" \u2014 "),ZW=a("a"),xFr=o("TFLayoutLMForTokenClassification"),$Fr=o(" (LayoutLM model)"),kFr=l(),GM=a("li"),C2e=a("strong"),SFr=o("longformer"),RFr=o(" \u2014 "),eH=a("a"),BFr=o("TFLongformerForTokenClassification"),PFr=o(" (Longformer model)"),IFr=l(),OM=a("li"),w2e=a("strong"),qFr=o("mobilebert"),NFr=o(" \u2014 "),oH=a("a"),jFr=o("TFMobileBertForTokenClassification"),DFr=o(" (MobileBERT model)"),GFr=l(),VM=a("li"),A2e=a("strong"),OFr=o("mpnet"),VFr=o(" \u2014 "),rH=a("a"),XFr=o("TFMPNetForTokenClassification"),zFr=o(" (MPNet model)"),QFr=l(),XM=a("li"),y2e=a("strong"),WFr=o("rembert"),HFr=o(" \u2014 "),tH=a("a"),UFr=o("TFRemBertForTokenClassification"),JFr=o(" (RemBERT model)"),YFr=l(),zM=a("li"),L2e=a("strong"),KFr=o("roberta"),ZFr=o(" \u2014 "),aH=a("a"),e6r=o("TFRobertaForTokenClassification"),o6r=o(" (RoBERTa model)"),r6r=l(),QM=a("li"),x2e=a("strong"),t6r=o("roformer"),a6r=o(" \u2014 "),nH=a("a"),n6r=o("TFRoFormerForTokenClassification"),s6r=o(" (RoFormer model)"),l6r=l(),WM=a("li"),$2e=a("strong"),i6r=o("xlm"),d6r=o(" \u2014 "),sH=a("a"),c6r=o("TFXLMForTokenClassification"),f6r=o(" (XLM model)"),m6r=l(),HM=a("li"),k2e=a("strong"),g6r=o("xlm-roberta"),h6r=o(" \u2014 "),lH=a("a"),p6r=o("TFXLMRobertaForTokenClassification"),u6r=o(" (XLM-RoBERTa model)"),_6r=l(),UM=a("li"),S2e=a("strong"),b6r=o("xlnet"),v6r=o(" \u2014 "),iH=a("a"),F6r=o("TFXLNetForTokenClassification"),T6r=o(" (XLNet model)"),M6r=l(),F(JM.$$.fragment),WPe=l(),ic=a("h2"),YM=a("a"),R2e=a("span"),F(aL.$$.fragment),E6r=l(),B2e=a("span"),C6r=o("TFAutoModelForQuestionAnswering"),HPe=l(),lr=a("div"),F(nL.$$.fragment),w6r=l(),dc=a("p"),A6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),dH=a("a"),y6r=o("from_pretrained()"),L6r=o(" class method or the "),cH=a("a"),x6r=o("from_config()"),$6r=o(` class
method.`),k6r=l(),sL=a("p"),S6r=o("This class cannot be instantiated directly using "),P2e=a("code"),R6r=o("__init__()"),B6r=o(" (throws an error)."),P6r=l(),Rt=a("div"),F(lL.$$.fragment),I6r=l(),I2e=a("p"),q6r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),N6r=l(),cc=a("p"),j6r=o(`Note:
Loading a model from its configuration file does `),q2e=a("strong"),D6r=o("not"),G6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=a("a"),O6r=o("from_pretrained()"),V6r=o(" to load the model weights."),X6r=l(),F(KM.$$.fragment),z6r=l(),Br=a("div"),F(iL.$$.fragment),Q6r=l(),N2e=a("p"),W6r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),H6r=l(),sn=a("p"),U6r=o("The model class to instantiate is selected based on the "),j2e=a("code"),J6r=o("model_type"),Y6r=o(` property of the config object (either
passed as an argument or loaded from `),D2e=a("code"),K6r=o("pretrained_model_name_or_path"),Z6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G2e=a("code"),eTr=o("pretrained_model_name_or_path"),oTr=o(":"),rTr=l(),ce=a("ul"),ZM=a("li"),O2e=a("strong"),tTr=o("albert"),aTr=o(" \u2014 "),mH=a("a"),nTr=o("TFAlbertForQuestionAnswering"),sTr=o(" (ALBERT model)"),lTr=l(),e4=a("li"),V2e=a("strong"),iTr=o("bert"),dTr=o(" \u2014 "),gH=a("a"),cTr=o("TFBertForQuestionAnswering"),fTr=o(" (BERT model)"),mTr=l(),o4=a("li"),X2e=a("strong"),gTr=o("camembert"),hTr=o(" \u2014 "),hH=a("a"),pTr=o("TFCamembertForQuestionAnswering"),uTr=o(" (CamemBERT model)"),_Tr=l(),r4=a("li"),z2e=a("strong"),bTr=o("convbert"),vTr=o(" \u2014 "),pH=a("a"),FTr=o("TFConvBertForQuestionAnswering"),TTr=o(" (ConvBERT model)"),MTr=l(),t4=a("li"),Q2e=a("strong"),ETr=o("deberta"),CTr=o(" \u2014 "),uH=a("a"),wTr=o("TFDebertaForQuestionAnswering"),ATr=o(" (DeBERTa model)"),yTr=l(),a4=a("li"),W2e=a("strong"),LTr=o("deberta-v2"),xTr=o(" \u2014 "),_H=a("a"),$Tr=o("TFDebertaV2ForQuestionAnswering"),kTr=o(" (DeBERTa-v2 model)"),STr=l(),n4=a("li"),H2e=a("strong"),RTr=o("distilbert"),BTr=o(" \u2014 "),bH=a("a"),PTr=o("TFDistilBertForQuestionAnswering"),ITr=o(" (DistilBERT model)"),qTr=l(),s4=a("li"),U2e=a("strong"),NTr=o("electra"),jTr=o(" \u2014 "),vH=a("a"),DTr=o("TFElectraForQuestionAnswering"),GTr=o(" (ELECTRA model)"),OTr=l(),l4=a("li"),J2e=a("strong"),VTr=o("flaubert"),XTr=o(" \u2014 "),FH=a("a"),zTr=o("TFFlaubertForQuestionAnsweringSimple"),QTr=o(" (FlauBERT model)"),WTr=l(),i4=a("li"),Y2e=a("strong"),HTr=o("funnel"),UTr=o(" \u2014 "),TH=a("a"),JTr=o("TFFunnelForQuestionAnswering"),YTr=o(" (Funnel Transformer model)"),KTr=l(),d4=a("li"),K2e=a("strong"),ZTr=o("gptj"),e9r=o(" \u2014 "),MH=a("a"),o9r=o("TFGPTJForQuestionAnswering"),r9r=o(" (GPT-J model)"),t9r=l(),c4=a("li"),Z2e=a("strong"),a9r=o("longformer"),n9r=o(" \u2014 "),EH=a("a"),s9r=o("TFLongformerForQuestionAnswering"),l9r=o(" (Longformer model)"),i9r=l(),f4=a("li"),eve=a("strong"),d9r=o("mobilebert"),c9r=o(" \u2014 "),CH=a("a"),f9r=o("TFMobileBertForQuestionAnswering"),m9r=o(" (MobileBERT model)"),g9r=l(),m4=a("li"),ove=a("strong"),h9r=o("mpnet"),p9r=o(" \u2014 "),wH=a("a"),u9r=o("TFMPNetForQuestionAnswering"),_9r=o(" (MPNet model)"),b9r=l(),g4=a("li"),rve=a("strong"),v9r=o("rembert"),F9r=o(" \u2014 "),AH=a("a"),T9r=o("TFRemBertForQuestionAnswering"),M9r=o(" (RemBERT model)"),E9r=l(),h4=a("li"),tve=a("strong"),C9r=o("roberta"),w9r=o(" \u2014 "),yH=a("a"),A9r=o("TFRobertaForQuestionAnswering"),y9r=o(" (RoBERTa model)"),L9r=l(),p4=a("li"),ave=a("strong"),x9r=o("roformer"),$9r=o(" \u2014 "),LH=a("a"),k9r=o("TFRoFormerForQuestionAnswering"),S9r=o(" (RoFormer model)"),R9r=l(),u4=a("li"),nve=a("strong"),B9r=o("xlm"),P9r=o(" \u2014 "),xH=a("a"),I9r=o("TFXLMForQuestionAnsweringSimple"),q9r=o(" (XLM model)"),N9r=l(),_4=a("li"),sve=a("strong"),j9r=o("xlm-roberta"),D9r=o(" \u2014 "),$H=a("a"),G9r=o("TFXLMRobertaForQuestionAnswering"),O9r=o(" (XLM-RoBERTa model)"),V9r=l(),b4=a("li"),lve=a("strong"),X9r=o("xlnet"),z9r=o(" \u2014 "),kH=a("a"),Q9r=o("TFXLNetForQuestionAnsweringSimple"),W9r=o(" (XLNet model)"),H9r=l(),F(v4.$$.fragment),UPe=l(),fc=a("h2"),F4=a("a"),ive=a("span"),F(dL.$$.fragment),U9r=l(),dve=a("span"),J9r=o("TFAutoModelForVision2Seq"),JPe=l(),ir=a("div"),F(cL.$$.fragment),Y9r=l(),mc=a("p"),K9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),SH=a("a"),Z9r=o("from_pretrained()"),eMr=o(" class method or the "),RH=a("a"),oMr=o("from_config()"),rMr=o(` class
method.`),tMr=l(),fL=a("p"),aMr=o("This class cannot be instantiated directly using "),cve=a("code"),nMr=o("__init__()"),sMr=o(" (throws an error)."),lMr=l(),Bt=a("div"),F(mL.$$.fragment),iMr=l(),fve=a("p"),dMr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),cMr=l(),gc=a("p"),fMr=o(`Note:
Loading a model from its configuration file does `),mve=a("strong"),mMr=o("not"),gMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=a("a"),hMr=o("from_pretrained()"),pMr=o(" to load the model weights."),uMr=l(),F(T4.$$.fragment),_Mr=l(),Pr=a("div"),F(gL.$$.fragment),bMr=l(),gve=a("p"),vMr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),FMr=l(),ln=a("p"),TMr=o("The model class to instantiate is selected based on the "),hve=a("code"),MMr=o("model_type"),EMr=o(` property of the config object (either
passed as an argument or loaded from `),pve=a("code"),CMr=o("pretrained_model_name_or_path"),wMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uve=a("code"),AMr=o("pretrained_model_name_or_path"),yMr=o(":"),LMr=l(),_ve=a("ul"),M4=a("li"),bve=a("strong"),xMr=o("vision-encoder-decoder"),$Mr=o(" \u2014 "),PH=a("a"),kMr=o("TFVisionEncoderDecoderModel"),SMr=o(" (Vision Encoder decoder model)"),RMr=l(),F(E4.$$.fragment),YPe=l(),hc=a("h2"),C4=a("a"),vve=a("span"),F(hL.$$.fragment),BMr=l(),Fve=a("span"),PMr=o("TFAutoModelForSpeechSeq2Seq"),KPe=l(),dr=a("div"),F(pL.$$.fragment),IMr=l(),pc=a("p"),qMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),IH=a("a"),NMr=o("from_pretrained()"),jMr=o(" class method or the "),qH=a("a"),DMr=o("from_config()"),GMr=o(` class
method.`),OMr=l(),uL=a("p"),VMr=o("This class cannot be instantiated directly using "),Tve=a("code"),XMr=o("__init__()"),zMr=o(" (throws an error)."),QMr=l(),Pt=a("div"),F(_L.$$.fragment),WMr=l(),Mve=a("p"),HMr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),UMr=l(),uc=a("p"),JMr=o(`Note:
Loading a model from its configuration file does `),Eve=a("strong"),YMr=o("not"),KMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=a("a"),ZMr=o("from_pretrained()"),e4r=o(" to load the model weights."),o4r=l(),F(w4.$$.fragment),r4r=l(),Ir=a("div"),F(bL.$$.fragment),t4r=l(),Cve=a("p"),a4r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),n4r=l(),dn=a("p"),s4r=o("The model class to instantiate is selected based on the "),wve=a("code"),l4r=o("model_type"),i4r=o(` property of the config object (either
passed as an argument or loaded from `),Ave=a("code"),d4r=o("pretrained_model_name_or_path"),c4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yve=a("code"),f4r=o("pretrained_model_name_or_path"),m4r=o(":"),g4r=l(),Lve=a("ul"),A4=a("li"),xve=a("strong"),h4r=o("speech_to_text"),p4r=o(" \u2014 "),jH=a("a"),u4r=o("TFSpeech2TextForConditionalGeneration"),_4r=o(" (Speech2Text model)"),b4r=l(),F(y4.$$.fragment),ZPe=l(),_c=a("h2"),L4=a("a"),$ve=a("span"),F(vL.$$.fragment),v4r=l(),kve=a("span"),F4r=o("FlaxAutoModel"),eIe=l(),cr=a("div"),F(FL.$$.fragment),T4r=l(),bc=a("p"),M4r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),DH=a("a"),E4r=o("from_pretrained()"),C4r=o(" class method or the "),GH=a("a"),w4r=o("from_config()"),A4r=o(` class
method.`),y4r=l(),TL=a("p"),L4r=o("This class cannot be instantiated directly using "),Sve=a("code"),x4r=o("__init__()"),$4r=o(" (throws an error)."),k4r=l(),It=a("div"),F(ML.$$.fragment),S4r=l(),Rve=a("p"),R4r=o("Instantiates one of the base model classes of the library from a configuration."),B4r=l(),vc=a("p"),P4r=o(`Note:
Loading a model from its configuration file does `),Bve=a("strong"),I4r=o("not"),q4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OH=a("a"),N4r=o("from_pretrained()"),j4r=o(" to load the model weights."),D4r=l(),F(x4.$$.fragment),G4r=l(),qr=a("div"),F(EL.$$.fragment),O4r=l(),Pve=a("p"),V4r=o("Instantiate one of the base model classes of the library from a pretrained model."),X4r=l(),cn=a("p"),z4r=o("The model class to instantiate is selected based on the "),Ive=a("code"),Q4r=o("model_type"),W4r=o(` property of the config object (either
passed as an argument or loaded from `),qve=a("code"),H4r=o("pretrained_model_name_or_path"),U4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nve=a("code"),J4r=o("pretrained_model_name_or_path"),Y4r=o(":"),K4r=l(),oe=a("ul"),$4=a("li"),jve=a("strong"),Z4r=o("albert"),eEr=o(" \u2014 "),VH=a("a"),oEr=o("FlaxAlbertModel"),rEr=o(" (ALBERT model)"),tEr=l(),k4=a("li"),Dve=a("strong"),aEr=o("bart"),nEr=o(" \u2014 "),XH=a("a"),sEr=o("FlaxBartModel"),lEr=o(" (BART model)"),iEr=l(),S4=a("li"),Gve=a("strong"),dEr=o("beit"),cEr=o(" \u2014 "),zH=a("a"),fEr=o("FlaxBeitModel"),mEr=o(" (BEiT model)"),gEr=l(),R4=a("li"),Ove=a("strong"),hEr=o("bert"),pEr=o(" \u2014 "),QH=a("a"),uEr=o("FlaxBertModel"),_Er=o(" (BERT model)"),bEr=l(),B4=a("li"),Vve=a("strong"),vEr=o("big_bird"),FEr=o(" \u2014 "),WH=a("a"),TEr=o("FlaxBigBirdModel"),MEr=o(" (BigBird model)"),EEr=l(),P4=a("li"),Xve=a("strong"),CEr=o("blenderbot"),wEr=o(" \u2014 "),HH=a("a"),AEr=o("FlaxBlenderbotModel"),yEr=o(" (Blenderbot model)"),LEr=l(),I4=a("li"),zve=a("strong"),xEr=o("blenderbot-small"),$Er=o(" \u2014 "),UH=a("a"),kEr=o("FlaxBlenderbotSmallModel"),SEr=o(" (BlenderbotSmall model)"),REr=l(),q4=a("li"),Qve=a("strong"),BEr=o("clip"),PEr=o(" \u2014 "),JH=a("a"),IEr=o("FlaxCLIPModel"),qEr=o(" (CLIP model)"),NEr=l(),N4=a("li"),Wve=a("strong"),jEr=o("distilbert"),DEr=o(" \u2014 "),YH=a("a"),GEr=o("FlaxDistilBertModel"),OEr=o(" (DistilBERT model)"),VEr=l(),j4=a("li"),Hve=a("strong"),XEr=o("electra"),zEr=o(" \u2014 "),KH=a("a"),QEr=o("FlaxElectraModel"),WEr=o(" (ELECTRA model)"),HEr=l(),D4=a("li"),Uve=a("strong"),UEr=o("gpt2"),JEr=o(" \u2014 "),ZH=a("a"),YEr=o("FlaxGPT2Model"),KEr=o(" (OpenAI GPT-2 model)"),ZEr=l(),G4=a("li"),Jve=a("strong"),e5r=o("gpt_neo"),o5r=o(" \u2014 "),eU=a("a"),r5r=o("FlaxGPTNeoModel"),t5r=o(" (GPT Neo model)"),a5r=l(),O4=a("li"),Yve=a("strong"),n5r=o("gptj"),s5r=o(" \u2014 "),oU=a("a"),l5r=o("FlaxGPTJModel"),i5r=o(" (GPT-J model)"),d5r=l(),V4=a("li"),Kve=a("strong"),c5r=o("marian"),f5r=o(" \u2014 "),rU=a("a"),m5r=o("FlaxMarianModel"),g5r=o(" (Marian model)"),h5r=l(),X4=a("li"),Zve=a("strong"),p5r=o("mbart"),u5r=o(" \u2014 "),tU=a("a"),_5r=o("FlaxMBartModel"),b5r=o(" (mBART model)"),v5r=l(),z4=a("li"),eFe=a("strong"),F5r=o("mt5"),T5r=o(" \u2014 "),aU=a("a"),M5r=o("FlaxMT5Model"),E5r=o(" (mT5 model)"),C5r=l(),Q4=a("li"),oFe=a("strong"),w5r=o("pegasus"),A5r=o(" \u2014 "),nU=a("a"),y5r=o("FlaxPegasusModel"),L5r=o(" (Pegasus model)"),x5r=l(),W4=a("li"),rFe=a("strong"),$5r=o("roberta"),k5r=o(" \u2014 "),sU=a("a"),S5r=o("FlaxRobertaModel"),R5r=o(" (RoBERTa model)"),B5r=l(),H4=a("li"),tFe=a("strong"),P5r=o("roformer"),I5r=o(" \u2014 "),lU=a("a"),q5r=o("FlaxRoFormerModel"),N5r=o(" (RoFormer model)"),j5r=l(),U4=a("li"),aFe=a("strong"),D5r=o("t5"),G5r=o(" \u2014 "),iU=a("a"),O5r=o("FlaxT5Model"),V5r=o(" (T5 model)"),X5r=l(),J4=a("li"),nFe=a("strong"),z5r=o("vision-text-dual-encoder"),Q5r=o(" \u2014 "),dU=a("a"),W5r=o("FlaxVisionTextDualEncoderModel"),H5r=o(" (VisionTextDualEncoder model)"),U5r=l(),Y4=a("li"),sFe=a("strong"),J5r=o("vit"),Y5r=o(" \u2014 "),cU=a("a"),K5r=o("FlaxViTModel"),Z5r=o(" (ViT model)"),eCr=l(),K4=a("li"),lFe=a("strong"),oCr=o("wav2vec2"),rCr=o(" \u2014 "),fU=a("a"),tCr=o("FlaxWav2Vec2Model"),aCr=o(" (Wav2Vec2 model)"),nCr=l(),Z4=a("li"),iFe=a("strong"),sCr=o("xglm"),lCr=o(" \u2014 "),mU=a("a"),iCr=o("FlaxXGLMModel"),dCr=o(" (XGLM model)"),cCr=l(),eE=a("li"),dFe=a("strong"),fCr=o("xlm-roberta"),mCr=o(" \u2014 "),gU=a("a"),gCr=o("FlaxXLMRobertaModel"),hCr=o(" (XLM-RoBERTa model)"),pCr=l(),F(oE.$$.fragment),oIe=l(),Fc=a("h2"),rE=a("a"),cFe=a("span"),F(CL.$$.fragment),uCr=l(),fFe=a("span"),_Cr=o("FlaxAutoModelForCausalLM"),rIe=l(),fr=a("div"),F(wL.$$.fragment),bCr=l(),Tc=a("p"),vCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),hU=a("a"),FCr=o("from_pretrained()"),TCr=o(" class method or the "),pU=a("a"),MCr=o("from_config()"),ECr=o(` class
method.`),CCr=l(),AL=a("p"),wCr=o("This class cannot be instantiated directly using "),mFe=a("code"),ACr=o("__init__()"),yCr=o(" (throws an error)."),LCr=l(),qt=a("div"),F(yL.$$.fragment),xCr=l(),gFe=a("p"),$Cr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),kCr=l(),Mc=a("p"),SCr=o(`Note:
Loading a model from its configuration file does `),hFe=a("strong"),RCr=o("not"),BCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uU=a("a"),PCr=o("from_pretrained()"),ICr=o(" to load the model weights."),qCr=l(),F(tE.$$.fragment),NCr=l(),Nr=a("div"),F(LL.$$.fragment),jCr=l(),pFe=a("p"),DCr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),GCr=l(),fn=a("p"),OCr=o("The model class to instantiate is selected based on the "),uFe=a("code"),VCr=o("model_type"),XCr=o(` property of the config object (either
passed as an argument or loaded from `),_Fe=a("code"),zCr=o("pretrained_model_name_or_path"),QCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bFe=a("code"),WCr=o("pretrained_model_name_or_path"),HCr=o(":"),UCr=l(),ke=a("ul"),aE=a("li"),vFe=a("strong"),JCr=o("bart"),YCr=o(" \u2014 "),_U=a("a"),KCr=o("FlaxBartForCausalLM"),ZCr=o(" (BART model)"),e3r=l(),nE=a("li"),FFe=a("strong"),o3r=o("bert"),r3r=o(" \u2014 "),bU=a("a"),t3r=o("FlaxBertForCausalLM"),a3r=o(" (BERT model)"),n3r=l(),sE=a("li"),TFe=a("strong"),s3r=o("big_bird"),l3r=o(" \u2014 "),vU=a("a"),i3r=o("FlaxBigBirdForCausalLM"),d3r=o(" (BigBird model)"),c3r=l(),lE=a("li"),MFe=a("strong"),f3r=o("electra"),m3r=o(" \u2014 "),FU=a("a"),g3r=o("FlaxElectraForCausalLM"),h3r=o(" (ELECTRA model)"),p3r=l(),iE=a("li"),EFe=a("strong"),u3r=o("gpt2"),_3r=o(" \u2014 "),TU=a("a"),b3r=o("FlaxGPT2LMHeadModel"),v3r=o(" (OpenAI GPT-2 model)"),F3r=l(),dE=a("li"),CFe=a("strong"),T3r=o("gpt_neo"),M3r=o(" \u2014 "),MU=a("a"),E3r=o("FlaxGPTNeoForCausalLM"),C3r=o(" (GPT Neo model)"),w3r=l(),cE=a("li"),wFe=a("strong"),A3r=o("gptj"),y3r=o(" \u2014 "),EU=a("a"),L3r=o("FlaxGPTJForCausalLM"),x3r=o(" (GPT-J model)"),$3r=l(),fE=a("li"),AFe=a("strong"),k3r=o("roberta"),S3r=o(" \u2014 "),CU=a("a"),R3r=o("FlaxRobertaForCausalLM"),B3r=o(" (RoBERTa model)"),P3r=l(),mE=a("li"),yFe=a("strong"),I3r=o("xglm"),q3r=o(" \u2014 "),wU=a("a"),N3r=o("FlaxXGLMForCausalLM"),j3r=o(" (XGLM model)"),D3r=l(),F(gE.$$.fragment),tIe=l(),Ec=a("h2"),hE=a("a"),LFe=a("span"),F(xL.$$.fragment),G3r=l(),xFe=a("span"),O3r=o("FlaxAutoModelForPreTraining"),aIe=l(),mr=a("div"),F($L.$$.fragment),V3r=l(),Cc=a("p"),X3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),AU=a("a"),z3r=o("from_pretrained()"),Q3r=o(" class method or the "),yU=a("a"),W3r=o("from_config()"),H3r=o(` class
method.`),U3r=l(),kL=a("p"),J3r=o("This class cannot be instantiated directly using "),$Fe=a("code"),Y3r=o("__init__()"),K3r=o(" (throws an error)."),Z3r=l(),Nt=a("div"),F(SL.$$.fragment),ewr=l(),kFe=a("p"),owr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),rwr=l(),wc=a("p"),twr=o(`Note:
Loading a model from its configuration file does `),SFe=a("strong"),awr=o("not"),nwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LU=a("a"),swr=o("from_pretrained()"),lwr=o(" to load the model weights."),iwr=l(),F(pE.$$.fragment),dwr=l(),jr=a("div"),F(RL.$$.fragment),cwr=l(),RFe=a("p"),fwr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),mwr=l(),mn=a("p"),gwr=o("The model class to instantiate is selected based on the "),BFe=a("code"),hwr=o("model_type"),pwr=o(` property of the config object (either
passed as an argument or loaded from `),PFe=a("code"),uwr=o("pretrained_model_name_or_path"),_wr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IFe=a("code"),bwr=o("pretrained_model_name_or_path"),vwr=o(":"),Fwr=l(),Me=a("ul"),uE=a("li"),qFe=a("strong"),Twr=o("albert"),Mwr=o(" \u2014 "),xU=a("a"),Ewr=o("FlaxAlbertForPreTraining"),Cwr=o(" (ALBERT model)"),wwr=l(),_E=a("li"),NFe=a("strong"),Awr=o("bart"),ywr=o(" \u2014 "),$U=a("a"),Lwr=o("FlaxBartForConditionalGeneration"),xwr=o(" (BART model)"),$wr=l(),bE=a("li"),jFe=a("strong"),kwr=o("bert"),Swr=o(" \u2014 "),kU=a("a"),Rwr=o("FlaxBertForPreTraining"),Bwr=o(" (BERT model)"),Pwr=l(),vE=a("li"),DFe=a("strong"),Iwr=o("big_bird"),qwr=o(" \u2014 "),SU=a("a"),Nwr=o("FlaxBigBirdForPreTraining"),jwr=o(" (BigBird model)"),Dwr=l(),FE=a("li"),GFe=a("strong"),Gwr=o("electra"),Owr=o(" \u2014 "),RU=a("a"),Vwr=o("FlaxElectraForPreTraining"),Xwr=o(" (ELECTRA model)"),zwr=l(),TE=a("li"),OFe=a("strong"),Qwr=o("mbart"),Wwr=o(" \u2014 "),BU=a("a"),Hwr=o("FlaxMBartForConditionalGeneration"),Uwr=o(" (mBART model)"),Jwr=l(),ME=a("li"),VFe=a("strong"),Ywr=o("mt5"),Kwr=o(" \u2014 "),PU=a("a"),Zwr=o("FlaxMT5ForConditionalGeneration"),eAr=o(" (mT5 model)"),oAr=l(),EE=a("li"),XFe=a("strong"),rAr=o("roberta"),tAr=o(" \u2014 "),IU=a("a"),aAr=o("FlaxRobertaForMaskedLM"),nAr=o(" (RoBERTa model)"),sAr=l(),CE=a("li"),zFe=a("strong"),lAr=o("roformer"),iAr=o(" \u2014 "),qU=a("a"),dAr=o("FlaxRoFormerForMaskedLM"),cAr=o(" (RoFormer model)"),fAr=l(),wE=a("li"),QFe=a("strong"),mAr=o("t5"),gAr=o(" \u2014 "),NU=a("a"),hAr=o("FlaxT5ForConditionalGeneration"),pAr=o(" (T5 model)"),uAr=l(),AE=a("li"),WFe=a("strong"),_Ar=o("wav2vec2"),bAr=o(" \u2014 "),jU=a("a"),vAr=o("FlaxWav2Vec2ForPreTraining"),FAr=o(" (Wav2Vec2 model)"),TAr=l(),yE=a("li"),HFe=a("strong"),MAr=o("xlm-roberta"),EAr=o(" \u2014 "),DU=a("a"),CAr=o("FlaxXLMRobertaForMaskedLM"),wAr=o(" (XLM-RoBERTa model)"),AAr=l(),F(LE.$$.fragment),nIe=l(),Ac=a("h2"),xE=a("a"),UFe=a("span"),F(BL.$$.fragment),yAr=l(),JFe=a("span"),LAr=o("FlaxAutoModelForMaskedLM"),sIe=l(),gr=a("div"),F(PL.$$.fragment),xAr=l(),yc=a("p"),$Ar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),GU=a("a"),kAr=o("from_pretrained()"),SAr=o(" class method or the "),OU=a("a"),RAr=o("from_config()"),BAr=o(` class
method.`),PAr=l(),IL=a("p"),IAr=o("This class cannot be instantiated directly using "),YFe=a("code"),qAr=o("__init__()"),NAr=o(" (throws an error)."),jAr=l(),jt=a("div"),F(qL.$$.fragment),DAr=l(),KFe=a("p"),GAr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),OAr=l(),Lc=a("p"),VAr=o(`Note:
Loading a model from its configuration file does `),ZFe=a("strong"),XAr=o("not"),zAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VU=a("a"),QAr=o("from_pretrained()"),WAr=o(" to load the model weights."),HAr=l(),F($E.$$.fragment),UAr=l(),Dr=a("div"),F(NL.$$.fragment),JAr=l(),e6e=a("p"),YAr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),KAr=l(),gn=a("p"),ZAr=o("The model class to instantiate is selected based on the "),o6e=a("code"),e0r=o("model_type"),o0r=o(` property of the config object (either
passed as an argument or loaded from `),r6e=a("code"),r0r=o("pretrained_model_name_or_path"),t0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t6e=a("code"),a0r=o("pretrained_model_name_or_path"),n0r=o(":"),s0r=l(),Le=a("ul"),kE=a("li"),a6e=a("strong"),l0r=o("albert"),i0r=o(" \u2014 "),XU=a("a"),d0r=o("FlaxAlbertForMaskedLM"),c0r=o(" (ALBERT model)"),f0r=l(),SE=a("li"),n6e=a("strong"),m0r=o("bart"),g0r=o(" \u2014 "),zU=a("a"),h0r=o("FlaxBartForConditionalGeneration"),p0r=o(" (BART model)"),u0r=l(),RE=a("li"),s6e=a("strong"),_0r=o("bert"),b0r=o(" \u2014 "),QU=a("a"),v0r=o("FlaxBertForMaskedLM"),F0r=o(" (BERT model)"),T0r=l(),BE=a("li"),l6e=a("strong"),M0r=o("big_bird"),E0r=o(" \u2014 "),WU=a("a"),C0r=o("FlaxBigBirdForMaskedLM"),w0r=o(" (BigBird model)"),A0r=l(),PE=a("li"),i6e=a("strong"),y0r=o("distilbert"),L0r=o(" \u2014 "),HU=a("a"),x0r=o("FlaxDistilBertForMaskedLM"),$0r=o(" (DistilBERT model)"),k0r=l(),IE=a("li"),d6e=a("strong"),S0r=o("electra"),R0r=o(" \u2014 "),UU=a("a"),B0r=o("FlaxElectraForMaskedLM"),P0r=o(" (ELECTRA model)"),I0r=l(),qE=a("li"),c6e=a("strong"),q0r=o("mbart"),N0r=o(" \u2014 "),JU=a("a"),j0r=o("FlaxMBartForConditionalGeneration"),D0r=o(" (mBART model)"),G0r=l(),NE=a("li"),f6e=a("strong"),O0r=o("roberta"),V0r=o(" \u2014 "),YU=a("a"),X0r=o("FlaxRobertaForMaskedLM"),z0r=o(" (RoBERTa model)"),Q0r=l(),jE=a("li"),m6e=a("strong"),W0r=o("roformer"),H0r=o(" \u2014 "),KU=a("a"),U0r=o("FlaxRoFormerForMaskedLM"),J0r=o(" (RoFormer model)"),Y0r=l(),DE=a("li"),g6e=a("strong"),K0r=o("xlm-roberta"),Z0r=o(" \u2014 "),ZU=a("a"),eyr=o("FlaxXLMRobertaForMaskedLM"),oyr=o(" (XLM-RoBERTa model)"),ryr=l(),F(GE.$$.fragment),lIe=l(),xc=a("h2"),OE=a("a"),h6e=a("span"),F(jL.$$.fragment),tyr=l(),p6e=a("span"),ayr=o("FlaxAutoModelForSeq2SeqLM"),iIe=l(),hr=a("div"),F(DL.$$.fragment),nyr=l(),$c=a("p"),syr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),eJ=a("a"),lyr=o("from_pretrained()"),iyr=o(" class method or the "),oJ=a("a"),dyr=o("from_config()"),cyr=o(` class
method.`),fyr=l(),GL=a("p"),myr=o("This class cannot be instantiated directly using "),u6e=a("code"),gyr=o("__init__()"),hyr=o(" (throws an error)."),pyr=l(),Dt=a("div"),F(OL.$$.fragment),uyr=l(),_6e=a("p"),_yr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),byr=l(),kc=a("p"),vyr=o(`Note:
Loading a model from its configuration file does `),b6e=a("strong"),Fyr=o("not"),Tyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rJ=a("a"),Myr=o("from_pretrained()"),Eyr=o(" to load the model weights."),Cyr=l(),F(VE.$$.fragment),wyr=l(),Gr=a("div"),F(VL.$$.fragment),Ayr=l(),v6e=a("p"),yyr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Lyr=l(),hn=a("p"),xyr=o("The model class to instantiate is selected based on the "),F6e=a("code"),$yr=o("model_type"),kyr=o(` property of the config object (either
passed as an argument or loaded from `),T6e=a("code"),Syr=o("pretrained_model_name_or_path"),Ryr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M6e=a("code"),Byr=o("pretrained_model_name_or_path"),Pyr=o(":"),Iyr=l(),Se=a("ul"),XE=a("li"),E6e=a("strong"),qyr=o("bart"),Nyr=o(" \u2014 "),tJ=a("a"),jyr=o("FlaxBartForConditionalGeneration"),Dyr=o(" (BART model)"),Gyr=l(),zE=a("li"),C6e=a("strong"),Oyr=o("blenderbot"),Vyr=o(" \u2014 "),aJ=a("a"),Xyr=o("FlaxBlenderbotForConditionalGeneration"),zyr=o(" (Blenderbot model)"),Qyr=l(),QE=a("li"),w6e=a("strong"),Wyr=o("blenderbot-small"),Hyr=o(" \u2014 "),nJ=a("a"),Uyr=o("FlaxBlenderbotSmallForConditionalGeneration"),Jyr=o(" (BlenderbotSmall model)"),Yyr=l(),WE=a("li"),A6e=a("strong"),Kyr=o("encoder-decoder"),Zyr=o(" \u2014 "),sJ=a("a"),eLr=o("FlaxEncoderDecoderModel"),oLr=o(" (Encoder decoder model)"),rLr=l(),HE=a("li"),y6e=a("strong"),tLr=o("marian"),aLr=o(" \u2014 "),lJ=a("a"),nLr=o("FlaxMarianMTModel"),sLr=o(" (Marian model)"),lLr=l(),UE=a("li"),L6e=a("strong"),iLr=o("mbart"),dLr=o(" \u2014 "),iJ=a("a"),cLr=o("FlaxMBartForConditionalGeneration"),fLr=o(" (mBART model)"),mLr=l(),JE=a("li"),x6e=a("strong"),gLr=o("mt5"),hLr=o(" \u2014 "),dJ=a("a"),pLr=o("FlaxMT5ForConditionalGeneration"),uLr=o(" (mT5 model)"),_Lr=l(),YE=a("li"),$6e=a("strong"),bLr=o("pegasus"),vLr=o(" \u2014 "),cJ=a("a"),FLr=o("FlaxPegasusForConditionalGeneration"),TLr=o(" (Pegasus model)"),MLr=l(),KE=a("li"),k6e=a("strong"),ELr=o("t5"),CLr=o(" \u2014 "),fJ=a("a"),wLr=o("FlaxT5ForConditionalGeneration"),ALr=o(" (T5 model)"),yLr=l(),F(ZE.$$.fragment),dIe=l(),Sc=a("h2"),e5=a("a"),S6e=a("span"),F(XL.$$.fragment),LLr=l(),R6e=a("span"),xLr=o("FlaxAutoModelForSequenceClassification"),cIe=l(),pr=a("div"),F(zL.$$.fragment),$Lr=l(),Rc=a("p"),kLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),mJ=a("a"),SLr=o("from_pretrained()"),RLr=o(" class method or the "),gJ=a("a"),BLr=o("from_config()"),PLr=o(` class
method.`),ILr=l(),QL=a("p"),qLr=o("This class cannot be instantiated directly using "),B6e=a("code"),NLr=o("__init__()"),jLr=o(" (throws an error)."),DLr=l(),Gt=a("div"),F(WL.$$.fragment),GLr=l(),P6e=a("p"),OLr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),VLr=l(),Bc=a("p"),XLr=o(`Note:
Loading a model from its configuration file does `),I6e=a("strong"),zLr=o("not"),QLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=a("a"),WLr=o("from_pretrained()"),HLr=o(" to load the model weights."),ULr=l(),F(o5.$$.fragment),JLr=l(),Or=a("div"),F(HL.$$.fragment),YLr=l(),q6e=a("p"),KLr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ZLr=l(),pn=a("p"),e7r=o("The model class to instantiate is selected based on the "),N6e=a("code"),o7r=o("model_type"),r7r=o(` property of the config object (either
passed as an argument or loaded from `),j6e=a("code"),t7r=o("pretrained_model_name_or_path"),a7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D6e=a("code"),n7r=o("pretrained_model_name_or_path"),s7r=o(":"),l7r=l(),xe=a("ul"),r5=a("li"),G6e=a("strong"),i7r=o("albert"),d7r=o(" \u2014 "),pJ=a("a"),c7r=o("FlaxAlbertForSequenceClassification"),f7r=o(" (ALBERT model)"),m7r=l(),t5=a("li"),O6e=a("strong"),g7r=o("bart"),h7r=o(" \u2014 "),uJ=a("a"),p7r=o("FlaxBartForSequenceClassification"),u7r=o(" (BART model)"),_7r=l(),a5=a("li"),V6e=a("strong"),b7r=o("bert"),v7r=o(" \u2014 "),_J=a("a"),F7r=o("FlaxBertForSequenceClassification"),T7r=o(" (BERT model)"),M7r=l(),n5=a("li"),X6e=a("strong"),E7r=o("big_bird"),C7r=o(" \u2014 "),bJ=a("a"),w7r=o("FlaxBigBirdForSequenceClassification"),A7r=o(" (BigBird model)"),y7r=l(),s5=a("li"),z6e=a("strong"),L7r=o("distilbert"),x7r=o(" \u2014 "),vJ=a("a"),$7r=o("FlaxDistilBertForSequenceClassification"),k7r=o(" (DistilBERT model)"),S7r=l(),l5=a("li"),Q6e=a("strong"),R7r=o("electra"),B7r=o(" \u2014 "),FJ=a("a"),P7r=o("FlaxElectraForSequenceClassification"),I7r=o(" (ELECTRA model)"),q7r=l(),i5=a("li"),W6e=a("strong"),N7r=o("mbart"),j7r=o(" \u2014 "),TJ=a("a"),D7r=o("FlaxMBartForSequenceClassification"),G7r=o(" (mBART model)"),O7r=l(),d5=a("li"),H6e=a("strong"),V7r=o("roberta"),X7r=o(" \u2014 "),MJ=a("a"),z7r=o("FlaxRobertaForSequenceClassification"),Q7r=o(" (RoBERTa model)"),W7r=l(),c5=a("li"),U6e=a("strong"),H7r=o("roformer"),U7r=o(" \u2014 "),EJ=a("a"),J7r=o("FlaxRoFormerForSequenceClassification"),Y7r=o(" (RoFormer model)"),K7r=l(),f5=a("li"),J6e=a("strong"),Z7r=o("xlm-roberta"),exr=o(" \u2014 "),CJ=a("a"),oxr=o("FlaxXLMRobertaForSequenceClassification"),rxr=o(" (XLM-RoBERTa model)"),txr=l(),F(m5.$$.fragment),fIe=l(),Pc=a("h2"),g5=a("a"),Y6e=a("span"),F(UL.$$.fragment),axr=l(),K6e=a("span"),nxr=o("FlaxAutoModelForQuestionAnswering"),mIe=l(),ur=a("div"),F(JL.$$.fragment),sxr=l(),Ic=a("p"),lxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),wJ=a("a"),ixr=o("from_pretrained()"),dxr=o(" class method or the "),AJ=a("a"),cxr=o("from_config()"),fxr=o(` class
method.`),mxr=l(),YL=a("p"),gxr=o("This class cannot be instantiated directly using "),Z6e=a("code"),hxr=o("__init__()"),pxr=o(" (throws an error)."),uxr=l(),Ot=a("div"),F(KL.$$.fragment),_xr=l(),eTe=a("p"),bxr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),vxr=l(),qc=a("p"),Fxr=o(`Note:
Loading a model from its configuration file does `),oTe=a("strong"),Txr=o("not"),Mxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yJ=a("a"),Exr=o("from_pretrained()"),Cxr=o(" to load the model weights."),wxr=l(),F(h5.$$.fragment),Axr=l(),Vr=a("div"),F(ZL.$$.fragment),yxr=l(),rTe=a("p"),Lxr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),xxr=l(),un=a("p"),$xr=o("The model class to instantiate is selected based on the "),tTe=a("code"),kxr=o("model_type"),Sxr=o(` property of the config object (either
passed as an argument or loaded from `),aTe=a("code"),Rxr=o("pretrained_model_name_or_path"),Bxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nTe=a("code"),Pxr=o("pretrained_model_name_or_path"),Ixr=o(":"),qxr=l(),$e=a("ul"),p5=a("li"),sTe=a("strong"),Nxr=o("albert"),jxr=o(" \u2014 "),LJ=a("a"),Dxr=o("FlaxAlbertForQuestionAnswering"),Gxr=o(" (ALBERT model)"),Oxr=l(),u5=a("li"),lTe=a("strong"),Vxr=o("bart"),Xxr=o(" \u2014 "),xJ=a("a"),zxr=o("FlaxBartForQuestionAnswering"),Qxr=o(" (BART model)"),Wxr=l(),_5=a("li"),iTe=a("strong"),Hxr=o("bert"),Uxr=o(" \u2014 "),$J=a("a"),Jxr=o("FlaxBertForQuestionAnswering"),Yxr=o(" (BERT model)"),Kxr=l(),b5=a("li"),dTe=a("strong"),Zxr=o("big_bird"),e$r=o(" \u2014 "),kJ=a("a"),o$r=o("FlaxBigBirdForQuestionAnswering"),r$r=o(" (BigBird model)"),t$r=l(),v5=a("li"),cTe=a("strong"),a$r=o("distilbert"),n$r=o(" \u2014 "),SJ=a("a"),s$r=o("FlaxDistilBertForQuestionAnswering"),l$r=o(" (DistilBERT model)"),i$r=l(),F5=a("li"),fTe=a("strong"),d$r=o("electra"),c$r=o(" \u2014 "),RJ=a("a"),f$r=o("FlaxElectraForQuestionAnswering"),m$r=o(" (ELECTRA model)"),g$r=l(),T5=a("li"),mTe=a("strong"),h$r=o("mbart"),p$r=o(" \u2014 "),BJ=a("a"),u$r=o("FlaxMBartForQuestionAnswering"),_$r=o(" (mBART model)"),b$r=l(),M5=a("li"),gTe=a("strong"),v$r=o("roberta"),F$r=o(" \u2014 "),PJ=a("a"),T$r=o("FlaxRobertaForQuestionAnswering"),M$r=o(" (RoBERTa model)"),E$r=l(),E5=a("li"),hTe=a("strong"),C$r=o("roformer"),w$r=o(" \u2014 "),IJ=a("a"),A$r=o("FlaxRoFormerForQuestionAnswering"),y$r=o(" (RoFormer model)"),L$r=l(),C5=a("li"),pTe=a("strong"),x$r=o("xlm-roberta"),$$r=o(" \u2014 "),qJ=a("a"),k$r=o("FlaxXLMRobertaForQuestionAnswering"),S$r=o(" (XLM-RoBERTa model)"),R$r=l(),F(w5.$$.fragment),gIe=l(),Nc=a("h2"),A5=a("a"),uTe=a("span"),F(e7.$$.fragment),B$r=l(),_Te=a("span"),P$r=o("FlaxAutoModelForTokenClassification"),hIe=l(),_r=a("div"),F(o7.$$.fragment),I$r=l(),jc=a("p"),q$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),NJ=a("a"),N$r=o("from_pretrained()"),j$r=o(" class method or the "),jJ=a("a"),D$r=o("from_config()"),G$r=o(` class
method.`),O$r=l(),r7=a("p"),V$r=o("This class cannot be instantiated directly using "),bTe=a("code"),X$r=o("__init__()"),z$r=o(" (throws an error)."),Q$r=l(),Vt=a("div"),F(t7.$$.fragment),W$r=l(),vTe=a("p"),H$r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),U$r=l(),Dc=a("p"),J$r=o(`Note:
Loading a model from its configuration file does `),FTe=a("strong"),Y$r=o("not"),K$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DJ=a("a"),Z$r=o("from_pretrained()"),ekr=o(" to load the model weights."),okr=l(),F(y5.$$.fragment),rkr=l(),Xr=a("div"),F(a7.$$.fragment),tkr=l(),TTe=a("p"),akr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),nkr=l(),_n=a("p"),skr=o("The model class to instantiate is selected based on the "),MTe=a("code"),lkr=o("model_type"),ikr=o(` property of the config object (either
passed as an argument or loaded from `),ETe=a("code"),dkr=o("pretrained_model_name_or_path"),ckr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CTe=a("code"),fkr=o("pretrained_model_name_or_path"),mkr=o(":"),gkr=l(),De=a("ul"),L5=a("li"),wTe=a("strong"),hkr=o("albert"),pkr=o(" \u2014 "),GJ=a("a"),ukr=o("FlaxAlbertForTokenClassification"),_kr=o(" (ALBERT model)"),bkr=l(),x5=a("li"),ATe=a("strong"),vkr=o("bert"),Fkr=o(" \u2014 "),OJ=a("a"),Tkr=o("FlaxBertForTokenClassification"),Mkr=o(" (BERT model)"),Ekr=l(),$5=a("li"),yTe=a("strong"),Ckr=o("big_bird"),wkr=o(" \u2014 "),VJ=a("a"),Akr=o("FlaxBigBirdForTokenClassification"),ykr=o(" (BigBird model)"),Lkr=l(),k5=a("li"),LTe=a("strong"),xkr=o("distilbert"),$kr=o(" \u2014 "),XJ=a("a"),kkr=o("FlaxDistilBertForTokenClassification"),Skr=o(" (DistilBERT model)"),Rkr=l(),S5=a("li"),xTe=a("strong"),Bkr=o("electra"),Pkr=o(" \u2014 "),zJ=a("a"),Ikr=o("FlaxElectraForTokenClassification"),qkr=o(" (ELECTRA model)"),Nkr=l(),R5=a("li"),$Te=a("strong"),jkr=o("roberta"),Dkr=o(" \u2014 "),QJ=a("a"),Gkr=o("FlaxRobertaForTokenClassification"),Okr=o(" (RoBERTa model)"),Vkr=l(),B5=a("li"),kTe=a("strong"),Xkr=o("roformer"),zkr=o(" \u2014 "),WJ=a("a"),Qkr=o("FlaxRoFormerForTokenClassification"),Wkr=o(" (RoFormer model)"),Hkr=l(),P5=a("li"),STe=a("strong"),Ukr=o("xlm-roberta"),Jkr=o(" \u2014 "),HJ=a("a"),Ykr=o("FlaxXLMRobertaForTokenClassification"),Kkr=o(" (XLM-RoBERTa model)"),Zkr=l(),F(I5.$$.fragment),pIe=l(),Gc=a("h2"),q5=a("a"),RTe=a("span"),F(n7.$$.fragment),eSr=l(),BTe=a("span"),oSr=o("FlaxAutoModelForMultipleChoice"),uIe=l(),br=a("div"),F(s7.$$.fragment),rSr=l(),Oc=a("p"),tSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),UJ=a("a"),aSr=o("from_pretrained()"),nSr=o(" class method or the "),JJ=a("a"),sSr=o("from_config()"),lSr=o(` class
method.`),iSr=l(),l7=a("p"),dSr=o("This class cannot be instantiated directly using "),PTe=a("code"),cSr=o("__init__()"),fSr=o(" (throws an error)."),mSr=l(),Xt=a("div"),F(i7.$$.fragment),gSr=l(),ITe=a("p"),hSr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),pSr=l(),Vc=a("p"),uSr=o(`Note:
Loading a model from its configuration file does `),qTe=a("strong"),_Sr=o("not"),bSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YJ=a("a"),vSr=o("from_pretrained()"),FSr=o(" to load the model weights."),TSr=l(),F(N5.$$.fragment),MSr=l(),zr=a("div"),F(d7.$$.fragment),ESr=l(),NTe=a("p"),CSr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),wSr=l(),bn=a("p"),ASr=o("The model class to instantiate is selected based on the "),jTe=a("code"),ySr=o("model_type"),LSr=o(` property of the config object (either
passed as an argument or loaded from `),DTe=a("code"),xSr=o("pretrained_model_name_or_path"),$Sr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GTe=a("code"),kSr=o("pretrained_model_name_or_path"),SSr=o(":"),RSr=l(),Ge=a("ul"),j5=a("li"),OTe=a("strong"),BSr=o("albert"),PSr=o(" \u2014 "),KJ=a("a"),ISr=o("FlaxAlbertForMultipleChoice"),qSr=o(" (ALBERT model)"),NSr=l(),D5=a("li"),VTe=a("strong"),jSr=o("bert"),DSr=o(" \u2014 "),ZJ=a("a"),GSr=o("FlaxBertForMultipleChoice"),OSr=o(" (BERT model)"),VSr=l(),G5=a("li"),XTe=a("strong"),XSr=o("big_bird"),zSr=o(" \u2014 "),eY=a("a"),QSr=o("FlaxBigBirdForMultipleChoice"),WSr=o(" (BigBird model)"),HSr=l(),O5=a("li"),zTe=a("strong"),USr=o("distilbert"),JSr=o(" \u2014 "),oY=a("a"),YSr=o("FlaxDistilBertForMultipleChoice"),KSr=o(" (DistilBERT model)"),ZSr=l(),V5=a("li"),QTe=a("strong"),eRr=o("electra"),oRr=o(" \u2014 "),rY=a("a"),rRr=o("FlaxElectraForMultipleChoice"),tRr=o(" (ELECTRA model)"),aRr=l(),X5=a("li"),WTe=a("strong"),nRr=o("roberta"),sRr=o(" \u2014 "),tY=a("a"),lRr=o("FlaxRobertaForMultipleChoice"),iRr=o(" (RoBERTa model)"),dRr=l(),z5=a("li"),HTe=a("strong"),cRr=o("roformer"),fRr=o(" \u2014 "),aY=a("a"),mRr=o("FlaxRoFormerForMultipleChoice"),gRr=o(" (RoFormer model)"),hRr=l(),Q5=a("li"),UTe=a("strong"),pRr=o("xlm-roberta"),uRr=o(" \u2014 "),nY=a("a"),_Rr=o("FlaxXLMRobertaForMultipleChoice"),bRr=o(" (XLM-RoBERTa model)"),vRr=l(),F(W5.$$.fragment),_Ie=l(),Xc=a("h2"),H5=a("a"),JTe=a("span"),F(c7.$$.fragment),FRr=l(),YTe=a("span"),TRr=o("FlaxAutoModelForNextSentencePrediction"),bIe=l(),vr=a("div"),F(f7.$$.fragment),MRr=l(),zc=a("p"),ERr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),sY=a("a"),CRr=o("from_pretrained()"),wRr=o(" class method or the "),lY=a("a"),ARr=o("from_config()"),yRr=o(` class
method.`),LRr=l(),m7=a("p"),xRr=o("This class cannot be instantiated directly using "),KTe=a("code"),$Rr=o("__init__()"),kRr=o(" (throws an error)."),SRr=l(),zt=a("div"),F(g7.$$.fragment),RRr=l(),ZTe=a("p"),BRr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),PRr=l(),Qc=a("p"),IRr=o(`Note:
Loading a model from its configuration file does `),e9e=a("strong"),qRr=o("not"),NRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iY=a("a"),jRr=o("from_pretrained()"),DRr=o(" to load the model weights."),GRr=l(),F(U5.$$.fragment),ORr=l(),Qr=a("div"),F(h7.$$.fragment),VRr=l(),o9e=a("p"),XRr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),zRr=l(),vn=a("p"),QRr=o("The model class to instantiate is selected based on the "),r9e=a("code"),WRr=o("model_type"),HRr=o(` property of the config object (either
passed as an argument or loaded from `),t9e=a("code"),URr=o("pretrained_model_name_or_path"),JRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a9e=a("code"),YRr=o("pretrained_model_name_or_path"),KRr=o(":"),ZRr=l(),n9e=a("ul"),J5=a("li"),s9e=a("strong"),eBr=o("bert"),oBr=o(" \u2014 "),dY=a("a"),rBr=o("FlaxBertForNextSentencePrediction"),tBr=o(" (BERT model)"),aBr=l(),F(Y5.$$.fragment),vIe=l(),Wc=a("h2"),K5=a("a"),l9e=a("span"),F(p7.$$.fragment),nBr=l(),i9e=a("span"),sBr=o("FlaxAutoModelForImageClassification"),FIe=l(),Fr=a("div"),F(u7.$$.fragment),lBr=l(),Hc=a("p"),iBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),cY=a("a"),dBr=o("from_pretrained()"),cBr=o(" class method or the "),fY=a("a"),fBr=o("from_config()"),mBr=o(` class
method.`),gBr=l(),_7=a("p"),hBr=o("This class cannot be instantiated directly using "),d9e=a("code"),pBr=o("__init__()"),uBr=o(" (throws an error)."),_Br=l(),Qt=a("div"),F(b7.$$.fragment),bBr=l(),c9e=a("p"),vBr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),FBr=l(),Uc=a("p"),TBr=o(`Note:
Loading a model from its configuration file does `),f9e=a("strong"),MBr=o("not"),EBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mY=a("a"),CBr=o("from_pretrained()"),wBr=o(" to load the model weights."),ABr=l(),F(Z5.$$.fragment),yBr=l(),Wr=a("div"),F(v7.$$.fragment),LBr=l(),m9e=a("p"),xBr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),$Br=l(),Fn=a("p"),kBr=o("The model class to instantiate is selected based on the "),g9e=a("code"),SBr=o("model_type"),RBr=o(` property of the config object (either
passed as an argument or loaded from `),h9e=a("code"),BBr=o("pretrained_model_name_or_path"),PBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p9e=a("code"),IBr=o("pretrained_model_name_or_path"),qBr=o(":"),NBr=l(),F7=a("ul"),eC=a("li"),u9e=a("strong"),jBr=o("beit"),DBr=o(" \u2014 "),gY=a("a"),GBr=o("FlaxBeitForImageClassification"),OBr=o(" (BEiT model)"),VBr=l(),oC=a("li"),_9e=a("strong"),XBr=o("vit"),zBr=o(" \u2014 "),hY=a("a"),QBr=o("FlaxViTForImageClassification"),WBr=o(" (ViT model)"),HBr=l(),F(rC.$$.fragment),TIe=l(),Jc=a("h2"),tC=a("a"),b9e=a("span"),F(T7.$$.fragment),UBr=l(),v9e=a("span"),JBr=o("FlaxAutoModelForVision2Seq"),MIe=l(),Tr=a("div"),F(M7.$$.fragment),YBr=l(),Yc=a("p"),KBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),pY=a("a"),ZBr=o("from_pretrained()"),ePr=o(" class method or the "),uY=a("a"),oPr=o("from_config()"),rPr=o(` class
method.`),tPr=l(),E7=a("p"),aPr=o("This class cannot be instantiated directly using "),F9e=a("code"),nPr=o("__init__()"),sPr=o(" (throws an error)."),lPr=l(),Wt=a("div"),F(C7.$$.fragment),iPr=l(),T9e=a("p"),dPr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),cPr=l(),Kc=a("p"),fPr=o(`Note:
Loading a model from its configuration file does `),M9e=a("strong"),mPr=o("not"),gPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_Y=a("a"),hPr=o("from_pretrained()"),pPr=o(" to load the model weights."),uPr=l(),F(aC.$$.fragment),_Pr=l(),Hr=a("div"),F(w7.$$.fragment),bPr=l(),E9e=a("p"),vPr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),FPr=l(),Tn=a("p"),TPr=o("The model class to instantiate is selected based on the "),C9e=a("code"),MPr=o("model_type"),EPr=o(` property of the config object (either
passed as an argument or loaded from `),w9e=a("code"),CPr=o("pretrained_model_name_or_path"),wPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A9e=a("code"),APr=o("pretrained_model_name_or_path"),yPr=o(":"),LPr=l(),y9e=a("ul"),nC=a("li"),L9e=a("strong"),xPr=o("vision-encoder-decoder"),$Pr=o(" \u2014 "),bY=a("a"),kPr=o("FlaxVisionEncoderDecoderModel"),SPr=o(" (Vision Encoder decoder model)"),RPr=l(),F(sC.$$.fragment),this.h()},l(f){const _=$5t('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var A7=s(p);m=n(A7,"A",{id:!0,class:!0,href:!0});var x9e=s(m);u=n(x9e,"SPAN",{});var $9e=s(u);T(d.$$.fragment,$9e),$9e.forEach(t),x9e.forEach(t),h=i(A7),Mo=n(A7,"SPAN",{});var k9e=s(Mo);ri=r(k9e,"Auto Classes"),k9e.forEach(t),A7.forEach(t),rf=i(f),Kr=n(f,"P",{});var y7=s(Kr);ti=r(y7,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ai=n(y7,"CODE",{});var S9e=s(ai);Ew=r(S9e,"from_pretrained()"),S9e.forEach(t),tf=r(y7,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),y7.forEach(t),qe=i(f),Xe=n(f,"P",{});var Mn=s(Xe);ni=r(Mn,"Instantiating one of "),En=n(Mn,"A",{href:!0});var R9e=s(En);Cw=r(R9e,"AutoConfig"),R9e.forEach(t),Cn=r(Mn,", "),wn=n(Mn,"A",{href:!0});var B9e=s(wn);ww=r(B9e,"AutoModel"),B9e.forEach(t),si=r(Mn,`, and
`),An=n(Mn,"A",{href:!0});var P9e=s(An);Aw=r(P9e,"AutoTokenizer"),P9e.forEach(t),li=r(Mn," will directly create a class of the relevant architecture. For instance"),Mn.forEach(t),af=i(f),T(va.$$.fragment,f),ze=i(f),Ae=n(f,"P",{});var L7=s(Ae);Nx=r(L7,"will create a model that is an instance of "),ii=n(L7,"A",{href:!0});var I9e=s(ii);jx=r(I9e,"BertModel"),I9e.forEach(t),Dx=r(L7,"."),L7.forEach(t),Eo=i(f),Fa=n(f,"P",{});var x7=s(Fa);Gx=r(x7,"There is one class of "),nf=n(x7,"CODE",{});var q9e=s(nf);Ox=r(q9e,"AutoModel"),q9e.forEach(t),LNe=r(x7," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),x7.forEach(t),MBe=i(f),di=n(f,"H2",{class:!0});var $7=s(di);sf=n($7,"A",{id:!0,class:!0,href:!0});var N9e=s(sf);dZ=n(N9e,"SPAN",{});var j9e=s(dZ);T(yw.$$.fragment,j9e),j9e.forEach(t),N9e.forEach(t),xNe=i($7),cZ=n($7,"SPAN",{});var D9e=s(cZ);$Ne=r(D9e,"Extending the Auto Classes"),D9e.forEach(t),$7.forEach(t),EBe=i(f),yn=n(f,"P",{});var Zc=s(yn);kNe=r(Zc,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),fZ=n(Zc,"CODE",{});var G9e=s(fZ);SNe=r(G9e,"NewModel"),G9e.forEach(t),RNe=r(Zc,", make sure you have a "),mZ=n(Zc,"CODE",{});var O9e=s(mZ);BNe=r(O9e,"NewModelConfig"),O9e.forEach(t),PNe=r(Zc,` then you can add those to the auto
classes like this:`),Zc.forEach(t),CBe=i(f),T(Lw.$$.fragment,f),wBe=i(f),Vx=n(f,"P",{});var V9e=s(Vx);INe=r(V9e,"You will then be able to use the auto classes like you would usually do!"),V9e.forEach(t),ABe=i(f),T(lf.$$.fragment,f),yBe=i(f),ci=n(f,"H2",{class:!0});var k7=s(ci);df=n(k7,"A",{id:!0,class:!0,href:!0});var X9e=s(df);gZ=n(X9e,"SPAN",{});var z9e=s(gZ);T(xw.$$.fragment,z9e),z9e.forEach(t),X9e.forEach(t),qNe=i(k7),hZ=n(k7,"SPAN",{});var Q9e=s(hZ);NNe=r(Q9e,"AutoConfig"),Q9e.forEach(t),k7.forEach(t),LBe=i(f),Co=n(f,"DIV",{class:!0});var Jr=s(Co);T($w.$$.fragment,Jr),jNe=i(Jr),kw=n(Jr,"P",{});var S7=s(kw);DNe=r(S7,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Xx=n(S7,"A",{href:!0});var W9e=s(Xx);GNe=r(W9e,"from_pretrained()"),W9e.forEach(t),ONe=r(S7," class method."),S7.forEach(t),VNe=i(Jr),Sw=n(Jr,"P",{});var R7=s(Sw);XNe=r(R7,"This class cannot be instantiated directly using "),pZ=n(R7,"CODE",{});var H9e=s(pZ);zNe=r(H9e,"__init__()"),H9e.forEach(t),QNe=r(R7," (throws an error)."),R7.forEach(t),WNe=i(Jr),Mr=n(Jr,"DIV",{class:!0});var Yr=s(Mr);T(Rw.$$.fragment,Yr),HNe=i(Yr),uZ=n(Yr,"P",{});var U9e=s(uZ);UNe=r(U9e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),U9e.forEach(t),JNe=i(Yr),fi=n(Yr,"P",{});var ef=s(fi);YNe=r(ef,"The configuration class to instantiate is selected based on the "),_Z=n(ef,"CODE",{});var J9e=s(_Z);KNe=r(J9e,"model_type"),J9e.forEach(t),ZNe=r(ef,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),bZ=n(ef,"CODE",{});var Y9e=s(bZ);eje=r(Y9e,"pretrained_model_name_or_path"),Y9e.forEach(t),oje=r(ef,":"),ef.forEach(t),rje=i(Yr),A=n(Yr,"UL",{});var y=s(A);cf=n(y,"LI",{});var lC=s(cf);vZ=n(lC,"STRONG",{});var K9e=s(vZ);tje=r(K9e,"albert"),K9e.forEach(t),aje=r(lC," \u2014 "),zx=n(lC,"A",{href:!0});var Z9e=s(zx);nje=r(Z9e,"AlbertConfig"),Z9e.forEach(t),sje=r(lC," (ALBERT model)"),lC.forEach(t),lje=i(y),ff=n(y,"LI",{});var iC=s(ff);FZ=n(iC,"STRONG",{});var eMe=s(FZ);ije=r(eMe,"bart"),eMe.forEach(t),dje=r(iC," \u2014 "),Qx=n(iC,"A",{href:!0});var oMe=s(Qx);cje=r(oMe,"BartConfig"),oMe.forEach(t),fje=r(iC," (BART model)"),iC.forEach(t),mje=i(y),mf=n(y,"LI",{});var dC=s(mf);TZ=n(dC,"STRONG",{});var rMe=s(TZ);gje=r(rMe,"beit"),rMe.forEach(t),hje=r(dC," \u2014 "),Wx=n(dC,"A",{href:!0});var tMe=s(Wx);pje=r(tMe,"BeitConfig"),tMe.forEach(t),uje=r(dC," (BEiT model)"),dC.forEach(t),_je=i(y),gf=n(y,"LI",{});var cC=s(gf);MZ=n(cC,"STRONG",{});var aMe=s(MZ);bje=r(aMe,"bert"),aMe.forEach(t),vje=r(cC," \u2014 "),Hx=n(cC,"A",{href:!0});var nMe=s(Hx);Fje=r(nMe,"BertConfig"),nMe.forEach(t),Tje=r(cC," (BERT model)"),cC.forEach(t),Mje=i(y),hf=n(y,"LI",{});var fC=s(hf);EZ=n(fC,"STRONG",{});var sMe=s(EZ);Eje=r(sMe,"bert-generation"),sMe.forEach(t),Cje=r(fC," \u2014 "),Ux=n(fC,"A",{href:!0});var lMe=s(Ux);wje=r(lMe,"BertGenerationConfig"),lMe.forEach(t),Aje=r(fC," (Bert Generation model)"),fC.forEach(t),yje=i(y),pf=n(y,"LI",{});var mC=s(pf);CZ=n(mC,"STRONG",{});var iMe=s(CZ);Lje=r(iMe,"big_bird"),iMe.forEach(t),xje=r(mC," \u2014 "),Jx=n(mC,"A",{href:!0});var dMe=s(Jx);$je=r(dMe,"BigBirdConfig"),dMe.forEach(t),kje=r(mC," (BigBird model)"),mC.forEach(t),Sje=i(y),uf=n(y,"LI",{});var gC=s(uf);wZ=n(gC,"STRONG",{});var cMe=s(wZ);Rje=r(cMe,"bigbird_pegasus"),cMe.forEach(t),Bje=r(gC," \u2014 "),Yx=n(gC,"A",{href:!0});var fMe=s(Yx);Pje=r(fMe,"BigBirdPegasusConfig"),fMe.forEach(t),Ije=r(gC," (BigBirdPegasus model)"),gC.forEach(t),qje=i(y),_f=n(y,"LI",{});var hC=s(_f);AZ=n(hC,"STRONG",{});var mMe=s(AZ);Nje=r(mMe,"blenderbot"),mMe.forEach(t),jje=r(hC," \u2014 "),Kx=n(hC,"A",{href:!0});var gMe=s(Kx);Dje=r(gMe,"BlenderbotConfig"),gMe.forEach(t),Gje=r(hC," (Blenderbot model)"),hC.forEach(t),Oje=i(y),bf=n(y,"LI",{});var pC=s(bf);yZ=n(pC,"STRONG",{});var hMe=s(yZ);Vje=r(hMe,"blenderbot-small"),hMe.forEach(t),Xje=r(pC," \u2014 "),Zx=n(pC,"A",{href:!0});var pMe=s(Zx);zje=r(pMe,"BlenderbotSmallConfig"),pMe.forEach(t),Qje=r(pC," (BlenderbotSmall model)"),pC.forEach(t),Wje=i(y),vf=n(y,"LI",{});var uC=s(vf);LZ=n(uC,"STRONG",{});var uMe=s(LZ);Hje=r(uMe,"camembert"),uMe.forEach(t),Uje=r(uC," \u2014 "),e$=n(uC,"A",{href:!0});var _Me=s(e$);Jje=r(_Me,"CamembertConfig"),_Me.forEach(t),Yje=r(uC," (CamemBERT model)"),uC.forEach(t),Kje=i(y),Ff=n(y,"LI",{});var _C=s(Ff);xZ=n(_C,"STRONG",{});var bMe=s(xZ);Zje=r(bMe,"canine"),bMe.forEach(t),eDe=r(_C," \u2014 "),o$=n(_C,"A",{href:!0});var vMe=s(o$);oDe=r(vMe,"CanineConfig"),vMe.forEach(t),rDe=r(_C," (Canine model)"),_C.forEach(t),tDe=i(y),Tf=n(y,"LI",{});var bC=s(Tf);$Z=n(bC,"STRONG",{});var FMe=s($Z);aDe=r(FMe,"clip"),FMe.forEach(t),nDe=r(bC," \u2014 "),r$=n(bC,"A",{href:!0});var TMe=s(r$);sDe=r(TMe,"CLIPConfig"),TMe.forEach(t),lDe=r(bC," (CLIP model)"),bC.forEach(t),iDe=i(y),Mf=n(y,"LI",{});var vC=s(Mf);kZ=n(vC,"STRONG",{});var MMe=s(kZ);dDe=r(MMe,"convbert"),MMe.forEach(t),cDe=r(vC," \u2014 "),t$=n(vC,"A",{href:!0});var EMe=s(t$);fDe=r(EMe,"ConvBertConfig"),EMe.forEach(t),mDe=r(vC," (ConvBERT model)"),vC.forEach(t),gDe=i(y),Ef=n(y,"LI",{});var FC=s(Ef);SZ=n(FC,"STRONG",{});var CMe=s(SZ);hDe=r(CMe,"convnext"),CMe.forEach(t),pDe=r(FC," \u2014 "),a$=n(FC,"A",{href:!0});var wMe=s(a$);uDe=r(wMe,"ConvNextConfig"),wMe.forEach(t),_De=r(FC," (ConvNext model)"),FC.forEach(t),bDe=i(y),Cf=n(y,"LI",{});var TC=s(Cf);RZ=n(TC,"STRONG",{});var AMe=s(RZ);vDe=r(AMe,"ctrl"),AMe.forEach(t),FDe=r(TC," \u2014 "),n$=n(TC,"A",{href:!0});var yMe=s(n$);TDe=r(yMe,"CTRLConfig"),yMe.forEach(t),MDe=r(TC," (CTRL model)"),TC.forEach(t),EDe=i(y),wf=n(y,"LI",{});var MC=s(wf);BZ=n(MC,"STRONG",{});var LMe=s(BZ);CDe=r(LMe,"data2vec-audio"),LMe.forEach(t),wDe=r(MC," \u2014 "),s$=n(MC,"A",{href:!0});var xMe=s(s$);ADe=r(xMe,"Data2VecAudioConfig"),xMe.forEach(t),yDe=r(MC," (Data2VecAudio model)"),MC.forEach(t),LDe=i(y),Af=n(y,"LI",{});var EC=s(Af);PZ=n(EC,"STRONG",{});var $Me=s(PZ);xDe=r($Me,"data2vec-text"),$Me.forEach(t),$De=r(EC," \u2014 "),l$=n(EC,"A",{href:!0});var kMe=s(l$);kDe=r(kMe,"Data2VecTextConfig"),kMe.forEach(t),SDe=r(EC," (Data2VecText model)"),EC.forEach(t),RDe=i(y),yf=n(y,"LI",{});var CC=s(yf);IZ=n(CC,"STRONG",{});var SMe=s(IZ);BDe=r(SMe,"data2vec-vision"),SMe.forEach(t),PDe=r(CC," \u2014 "),i$=n(CC,"A",{href:!0});var RMe=s(i$);IDe=r(RMe,"Data2VecVisionConfig"),RMe.forEach(t),qDe=r(CC," (Data2VecVision model)"),CC.forEach(t),NDe=i(y),Lf=n(y,"LI",{});var wC=s(Lf);qZ=n(wC,"STRONG",{});var BMe=s(qZ);jDe=r(BMe,"deberta"),BMe.forEach(t),DDe=r(wC," \u2014 "),d$=n(wC,"A",{href:!0});var PMe=s(d$);GDe=r(PMe,"DebertaConfig"),PMe.forEach(t),ODe=r(wC," (DeBERTa model)"),wC.forEach(t),VDe=i(y),xf=n(y,"LI",{});var AC=s(xf);NZ=n(AC,"STRONG",{});var IMe=s(NZ);XDe=r(IMe,"deberta-v2"),IMe.forEach(t),zDe=r(AC," \u2014 "),c$=n(AC,"A",{href:!0});var qMe=s(c$);QDe=r(qMe,"DebertaV2Config"),qMe.forEach(t),WDe=r(AC," (DeBERTa-v2 model)"),AC.forEach(t),HDe=i(y),$f=n(y,"LI",{});var yC=s($f);jZ=n(yC,"STRONG",{});var NMe=s(jZ);UDe=r(NMe,"decision_transformer"),NMe.forEach(t),JDe=r(yC," \u2014 "),f$=n(yC,"A",{href:!0});var jMe=s(f$);YDe=r(jMe,"DecisionTransformerConfig"),jMe.forEach(t),KDe=r(yC," (Decision Transformer model)"),yC.forEach(t),ZDe=i(y),kf=n(y,"LI",{});var LC=s(kf);DZ=n(LC,"STRONG",{});var DMe=s(DZ);eGe=r(DMe,"deit"),DMe.forEach(t),oGe=r(LC," \u2014 "),m$=n(LC,"A",{href:!0});var GMe=s(m$);rGe=r(GMe,"DeiTConfig"),GMe.forEach(t),tGe=r(LC," (DeiT model)"),LC.forEach(t),aGe=i(y),Sf=n(y,"LI",{});var OMe=s(Sf);GZ=n(OMe,"STRONG",{});var PPr=s(GZ);nGe=r(PPr,"detr"),PPr.forEach(t),sGe=r(OMe," \u2014 "),g$=n(OMe,"A",{href:!0});var IPr=s(g$);lGe=r(IPr,"DetrConfig"),IPr.forEach(t),iGe=r(OMe," (DETR model)"),OMe.forEach(t),dGe=i(y),Rf=n(y,"LI",{});var VMe=s(Rf);OZ=n(VMe,"STRONG",{});var qPr=s(OZ);cGe=r(qPr,"distilbert"),qPr.forEach(t),fGe=r(VMe," \u2014 "),h$=n(VMe,"A",{href:!0});var NPr=s(h$);mGe=r(NPr,"DistilBertConfig"),NPr.forEach(t),gGe=r(VMe," (DistilBERT model)"),VMe.forEach(t),hGe=i(y),Bf=n(y,"LI",{});var XMe=s(Bf);VZ=n(XMe,"STRONG",{});var jPr=s(VZ);pGe=r(jPr,"dpr"),jPr.forEach(t),uGe=r(XMe," \u2014 "),p$=n(XMe,"A",{href:!0});var DPr=s(p$);_Ge=r(DPr,"DPRConfig"),DPr.forEach(t),bGe=r(XMe," (DPR model)"),XMe.forEach(t),vGe=i(y),Pf=n(y,"LI",{});var zMe=s(Pf);XZ=n(zMe,"STRONG",{});var GPr=s(XZ);FGe=r(GPr,"dpt"),GPr.forEach(t),TGe=r(zMe," \u2014 "),u$=n(zMe,"A",{href:!0});var OPr=s(u$);MGe=r(OPr,"DPTConfig"),OPr.forEach(t),EGe=r(zMe," (DPT model)"),zMe.forEach(t),CGe=i(y),If=n(y,"LI",{});var QMe=s(If);zZ=n(QMe,"STRONG",{});var VPr=s(zZ);wGe=r(VPr,"electra"),VPr.forEach(t),AGe=r(QMe," \u2014 "),_$=n(QMe,"A",{href:!0});var XPr=s(_$);yGe=r(XPr,"ElectraConfig"),XPr.forEach(t),LGe=r(QMe," (ELECTRA model)"),QMe.forEach(t),xGe=i(y),qf=n(y,"LI",{});var WMe=s(qf);QZ=n(WMe,"STRONG",{});var zPr=s(QZ);$Ge=r(zPr,"encoder-decoder"),zPr.forEach(t),kGe=r(WMe," \u2014 "),b$=n(WMe,"A",{href:!0});var QPr=s(b$);SGe=r(QPr,"EncoderDecoderConfig"),QPr.forEach(t),RGe=r(WMe," (Encoder decoder model)"),WMe.forEach(t),BGe=i(y),Nf=n(y,"LI",{});var HMe=s(Nf);WZ=n(HMe,"STRONG",{});var WPr=s(WZ);PGe=r(WPr,"flaubert"),WPr.forEach(t),IGe=r(HMe," \u2014 "),v$=n(HMe,"A",{href:!0});var HPr=s(v$);qGe=r(HPr,"FlaubertConfig"),HPr.forEach(t),NGe=r(HMe," (FlauBERT model)"),HMe.forEach(t),jGe=i(y),jf=n(y,"LI",{});var UMe=s(jf);HZ=n(UMe,"STRONG",{});var UPr=s(HZ);DGe=r(UPr,"fnet"),UPr.forEach(t),GGe=r(UMe," \u2014 "),F$=n(UMe,"A",{href:!0});var JPr=s(F$);OGe=r(JPr,"FNetConfig"),JPr.forEach(t),VGe=r(UMe," (FNet model)"),UMe.forEach(t),XGe=i(y),Df=n(y,"LI",{});var JMe=s(Df);UZ=n(JMe,"STRONG",{});var YPr=s(UZ);zGe=r(YPr,"fsmt"),YPr.forEach(t),QGe=r(JMe," \u2014 "),T$=n(JMe,"A",{href:!0});var KPr=s(T$);WGe=r(KPr,"FSMTConfig"),KPr.forEach(t),HGe=r(JMe," (FairSeq Machine-Translation model)"),JMe.forEach(t),UGe=i(y),Gf=n(y,"LI",{});var YMe=s(Gf);JZ=n(YMe,"STRONG",{});var ZPr=s(JZ);JGe=r(ZPr,"funnel"),ZPr.forEach(t),YGe=r(YMe," \u2014 "),M$=n(YMe,"A",{href:!0});var eIr=s(M$);KGe=r(eIr,"FunnelConfig"),eIr.forEach(t),ZGe=r(YMe," (Funnel Transformer model)"),YMe.forEach(t),eOe=i(y),Of=n(y,"LI",{});var KMe=s(Of);YZ=n(KMe,"STRONG",{});var oIr=s(YZ);oOe=r(oIr,"glpn"),oIr.forEach(t),rOe=r(KMe," \u2014 "),E$=n(KMe,"A",{href:!0});var rIr=s(E$);tOe=r(rIr,"GLPNConfig"),rIr.forEach(t),aOe=r(KMe," (GLPN model)"),KMe.forEach(t),nOe=i(y),Vf=n(y,"LI",{});var ZMe=s(Vf);KZ=n(ZMe,"STRONG",{});var tIr=s(KZ);sOe=r(tIr,"gpt2"),tIr.forEach(t),lOe=r(ZMe," \u2014 "),C$=n(ZMe,"A",{href:!0});var aIr=s(C$);iOe=r(aIr,"GPT2Config"),aIr.forEach(t),dOe=r(ZMe," (OpenAI GPT-2 model)"),ZMe.forEach(t),cOe=i(y),Xf=n(y,"LI",{});var e4e=s(Xf);ZZ=n(e4e,"STRONG",{});var nIr=s(ZZ);fOe=r(nIr,"gpt_neo"),nIr.forEach(t),mOe=r(e4e," \u2014 "),w$=n(e4e,"A",{href:!0});var sIr=s(w$);gOe=r(sIr,"GPTNeoConfig"),sIr.forEach(t),hOe=r(e4e," (GPT Neo model)"),e4e.forEach(t),pOe=i(y),zf=n(y,"LI",{});var o4e=s(zf);eee=n(o4e,"STRONG",{});var lIr=s(eee);uOe=r(lIr,"gptj"),lIr.forEach(t),_Oe=r(o4e," \u2014 "),A$=n(o4e,"A",{href:!0});var iIr=s(A$);bOe=r(iIr,"GPTJConfig"),iIr.forEach(t),vOe=r(o4e," (GPT-J model)"),o4e.forEach(t),FOe=i(y),Qf=n(y,"LI",{});var r4e=s(Qf);oee=n(r4e,"STRONG",{});var dIr=s(oee);TOe=r(dIr,"hubert"),dIr.forEach(t),MOe=r(r4e," \u2014 "),y$=n(r4e,"A",{href:!0});var cIr=s(y$);EOe=r(cIr,"HubertConfig"),cIr.forEach(t),COe=r(r4e," (Hubert model)"),r4e.forEach(t),wOe=i(y),Wf=n(y,"LI",{});var t4e=s(Wf);ree=n(t4e,"STRONG",{});var fIr=s(ree);AOe=r(fIr,"ibert"),fIr.forEach(t),yOe=r(t4e," \u2014 "),L$=n(t4e,"A",{href:!0});var mIr=s(L$);LOe=r(mIr,"IBertConfig"),mIr.forEach(t),xOe=r(t4e," (I-BERT model)"),t4e.forEach(t),$Oe=i(y),Hf=n(y,"LI",{});var a4e=s(Hf);tee=n(a4e,"STRONG",{});var gIr=s(tee);kOe=r(gIr,"imagegpt"),gIr.forEach(t),SOe=r(a4e," \u2014 "),x$=n(a4e,"A",{href:!0});var hIr=s(x$);ROe=r(hIr,"ImageGPTConfig"),hIr.forEach(t),BOe=r(a4e," (ImageGPT model)"),a4e.forEach(t),POe=i(y),Uf=n(y,"LI",{});var n4e=s(Uf);aee=n(n4e,"STRONG",{});var pIr=s(aee);IOe=r(pIr,"layoutlm"),pIr.forEach(t),qOe=r(n4e," \u2014 "),$$=n(n4e,"A",{href:!0});var uIr=s($$);NOe=r(uIr,"LayoutLMConfig"),uIr.forEach(t),jOe=r(n4e," (LayoutLM model)"),n4e.forEach(t),DOe=i(y),Jf=n(y,"LI",{});var s4e=s(Jf);nee=n(s4e,"STRONG",{});var _Ir=s(nee);GOe=r(_Ir,"layoutlmv2"),_Ir.forEach(t),OOe=r(s4e," \u2014 "),k$=n(s4e,"A",{href:!0});var bIr=s(k$);VOe=r(bIr,"LayoutLMv2Config"),bIr.forEach(t),XOe=r(s4e," (LayoutLMv2 model)"),s4e.forEach(t),zOe=i(y),Yf=n(y,"LI",{});var l4e=s(Yf);see=n(l4e,"STRONG",{});var vIr=s(see);QOe=r(vIr,"led"),vIr.forEach(t),WOe=r(l4e," \u2014 "),S$=n(l4e,"A",{href:!0});var FIr=s(S$);HOe=r(FIr,"LEDConfig"),FIr.forEach(t),UOe=r(l4e," (LED model)"),l4e.forEach(t),JOe=i(y),Kf=n(y,"LI",{});var i4e=s(Kf);lee=n(i4e,"STRONG",{});var TIr=s(lee);YOe=r(TIr,"longformer"),TIr.forEach(t),KOe=r(i4e," \u2014 "),R$=n(i4e,"A",{href:!0});var MIr=s(R$);ZOe=r(MIr,"LongformerConfig"),MIr.forEach(t),eVe=r(i4e," (Longformer model)"),i4e.forEach(t),oVe=i(y),Zf=n(y,"LI",{});var d4e=s(Zf);iee=n(d4e,"STRONG",{});var EIr=s(iee);rVe=r(EIr,"luke"),EIr.forEach(t),tVe=r(d4e," \u2014 "),B$=n(d4e,"A",{href:!0});var CIr=s(B$);aVe=r(CIr,"LukeConfig"),CIr.forEach(t),nVe=r(d4e," (LUKE model)"),d4e.forEach(t),sVe=i(y),em=n(y,"LI",{});var c4e=s(em);dee=n(c4e,"STRONG",{});var wIr=s(dee);lVe=r(wIr,"lxmert"),wIr.forEach(t),iVe=r(c4e," \u2014 "),P$=n(c4e,"A",{href:!0});var AIr=s(P$);dVe=r(AIr,"LxmertConfig"),AIr.forEach(t),cVe=r(c4e," (LXMERT model)"),c4e.forEach(t),fVe=i(y),om=n(y,"LI",{});var f4e=s(om);cee=n(f4e,"STRONG",{});var yIr=s(cee);mVe=r(yIr,"m2m_100"),yIr.forEach(t),gVe=r(f4e," \u2014 "),I$=n(f4e,"A",{href:!0});var LIr=s(I$);hVe=r(LIr,"M2M100Config"),LIr.forEach(t),pVe=r(f4e," (M2M100 model)"),f4e.forEach(t),uVe=i(y),rm=n(y,"LI",{});var m4e=s(rm);fee=n(m4e,"STRONG",{});var xIr=s(fee);_Ve=r(xIr,"marian"),xIr.forEach(t),bVe=r(m4e," \u2014 "),q$=n(m4e,"A",{href:!0});var $Ir=s(q$);vVe=r($Ir,"MarianConfig"),$Ir.forEach(t),FVe=r(m4e," (Marian model)"),m4e.forEach(t),TVe=i(y),tm=n(y,"LI",{});var g4e=s(tm);mee=n(g4e,"STRONG",{});var kIr=s(mee);MVe=r(kIr,"maskformer"),kIr.forEach(t),EVe=r(g4e," \u2014 "),N$=n(g4e,"A",{href:!0});var SIr=s(N$);CVe=r(SIr,"MaskFormerConfig"),SIr.forEach(t),wVe=r(g4e," (MaskFormer model)"),g4e.forEach(t),AVe=i(y),am=n(y,"LI",{});var h4e=s(am);gee=n(h4e,"STRONG",{});var RIr=s(gee);yVe=r(RIr,"mbart"),RIr.forEach(t),LVe=r(h4e," \u2014 "),j$=n(h4e,"A",{href:!0});var BIr=s(j$);xVe=r(BIr,"MBartConfig"),BIr.forEach(t),$Ve=r(h4e," (mBART model)"),h4e.forEach(t),kVe=i(y),nm=n(y,"LI",{});var p4e=s(nm);hee=n(p4e,"STRONG",{});var PIr=s(hee);SVe=r(PIr,"megatron-bert"),PIr.forEach(t),RVe=r(p4e," \u2014 "),D$=n(p4e,"A",{href:!0});var IIr=s(D$);BVe=r(IIr,"MegatronBertConfig"),IIr.forEach(t),PVe=r(p4e," (MegatronBert model)"),p4e.forEach(t),IVe=i(y),sm=n(y,"LI",{});var u4e=s(sm);pee=n(u4e,"STRONG",{});var qIr=s(pee);qVe=r(qIr,"mobilebert"),qIr.forEach(t),NVe=r(u4e," \u2014 "),G$=n(u4e,"A",{href:!0});var NIr=s(G$);jVe=r(NIr,"MobileBertConfig"),NIr.forEach(t),DVe=r(u4e," (MobileBERT model)"),u4e.forEach(t),GVe=i(y),lm=n(y,"LI",{});var _4e=s(lm);uee=n(_4e,"STRONG",{});var jIr=s(uee);OVe=r(jIr,"mpnet"),jIr.forEach(t),VVe=r(_4e," \u2014 "),O$=n(_4e,"A",{href:!0});var DIr=s(O$);XVe=r(DIr,"MPNetConfig"),DIr.forEach(t),zVe=r(_4e," (MPNet model)"),_4e.forEach(t),QVe=i(y),im=n(y,"LI",{});var b4e=s(im);_ee=n(b4e,"STRONG",{});var GIr=s(_ee);WVe=r(GIr,"mt5"),GIr.forEach(t),HVe=r(b4e," \u2014 "),V$=n(b4e,"A",{href:!0});var OIr=s(V$);UVe=r(OIr,"MT5Config"),OIr.forEach(t),JVe=r(b4e," (mT5 model)"),b4e.forEach(t),YVe=i(y),dm=n(y,"LI",{});var v4e=s(dm);bee=n(v4e,"STRONG",{});var VIr=s(bee);KVe=r(VIr,"nystromformer"),VIr.forEach(t),ZVe=r(v4e," \u2014 "),X$=n(v4e,"A",{href:!0});var XIr=s(X$);eXe=r(XIr,"NystromformerConfig"),XIr.forEach(t),oXe=r(v4e," (Nystromformer model)"),v4e.forEach(t),rXe=i(y),cm=n(y,"LI",{});var F4e=s(cm);vee=n(F4e,"STRONG",{});var zIr=s(vee);tXe=r(zIr,"openai-gpt"),zIr.forEach(t),aXe=r(F4e," \u2014 "),z$=n(F4e,"A",{href:!0});var QIr=s(z$);nXe=r(QIr,"OpenAIGPTConfig"),QIr.forEach(t),sXe=r(F4e," (OpenAI GPT model)"),F4e.forEach(t),lXe=i(y),fm=n(y,"LI",{});var T4e=s(fm);Fee=n(T4e,"STRONG",{});var WIr=s(Fee);iXe=r(WIr,"pegasus"),WIr.forEach(t),dXe=r(T4e," \u2014 "),Q$=n(T4e,"A",{href:!0});var HIr=s(Q$);cXe=r(HIr,"PegasusConfig"),HIr.forEach(t),fXe=r(T4e," (Pegasus model)"),T4e.forEach(t),mXe=i(y),mm=n(y,"LI",{});var M4e=s(mm);Tee=n(M4e,"STRONG",{});var UIr=s(Tee);gXe=r(UIr,"perceiver"),UIr.forEach(t),hXe=r(M4e," \u2014 "),W$=n(M4e,"A",{href:!0});var JIr=s(W$);pXe=r(JIr,"PerceiverConfig"),JIr.forEach(t),uXe=r(M4e," (Perceiver model)"),M4e.forEach(t),_Xe=i(y),gm=n(y,"LI",{});var E4e=s(gm);Mee=n(E4e,"STRONG",{});var YIr=s(Mee);bXe=r(YIr,"plbart"),YIr.forEach(t),vXe=r(E4e," \u2014 "),H$=n(E4e,"A",{href:!0});var KIr=s(H$);FXe=r(KIr,"PLBartConfig"),KIr.forEach(t),TXe=r(E4e," (PLBart model)"),E4e.forEach(t),MXe=i(y),hm=n(y,"LI",{});var C4e=s(hm);Eee=n(C4e,"STRONG",{});var ZIr=s(Eee);EXe=r(ZIr,"poolformer"),ZIr.forEach(t),CXe=r(C4e," \u2014 "),U$=n(C4e,"A",{href:!0});var eqr=s(U$);wXe=r(eqr,"PoolFormerConfig"),eqr.forEach(t),AXe=r(C4e," (PoolFormer model)"),C4e.forEach(t),yXe=i(y),pm=n(y,"LI",{});var w4e=s(pm);Cee=n(w4e,"STRONG",{});var oqr=s(Cee);LXe=r(oqr,"prophetnet"),oqr.forEach(t),xXe=r(w4e," \u2014 "),J$=n(w4e,"A",{href:!0});var rqr=s(J$);$Xe=r(rqr,"ProphetNetConfig"),rqr.forEach(t),kXe=r(w4e," (ProphetNet model)"),w4e.forEach(t),SXe=i(y),um=n(y,"LI",{});var A4e=s(um);wee=n(A4e,"STRONG",{});var tqr=s(wee);RXe=r(tqr,"qdqbert"),tqr.forEach(t),BXe=r(A4e," \u2014 "),Y$=n(A4e,"A",{href:!0});var aqr=s(Y$);PXe=r(aqr,"QDQBertConfig"),aqr.forEach(t),IXe=r(A4e," (QDQBert model)"),A4e.forEach(t),qXe=i(y),_m=n(y,"LI",{});var y4e=s(_m);Aee=n(y4e,"STRONG",{});var nqr=s(Aee);NXe=r(nqr,"rag"),nqr.forEach(t),jXe=r(y4e," \u2014 "),K$=n(y4e,"A",{href:!0});var sqr=s(K$);DXe=r(sqr,"RagConfig"),sqr.forEach(t),GXe=r(y4e," (RAG model)"),y4e.forEach(t),OXe=i(y),bm=n(y,"LI",{});var L4e=s(bm);yee=n(L4e,"STRONG",{});var lqr=s(yee);VXe=r(lqr,"realm"),lqr.forEach(t),XXe=r(L4e," \u2014 "),Z$=n(L4e,"A",{href:!0});var iqr=s(Z$);zXe=r(iqr,"RealmConfig"),iqr.forEach(t),QXe=r(L4e," (Realm model)"),L4e.forEach(t),WXe=i(y),vm=n(y,"LI",{});var x4e=s(vm);Lee=n(x4e,"STRONG",{});var dqr=s(Lee);HXe=r(dqr,"reformer"),dqr.forEach(t),UXe=r(x4e," \u2014 "),ek=n(x4e,"A",{href:!0});var cqr=s(ek);JXe=r(cqr,"ReformerConfig"),cqr.forEach(t),YXe=r(x4e," (Reformer model)"),x4e.forEach(t),KXe=i(y),Fm=n(y,"LI",{});var $4e=s(Fm);xee=n($4e,"STRONG",{});var fqr=s(xee);ZXe=r(fqr,"regnet"),fqr.forEach(t),eze=r($4e," \u2014 "),ok=n($4e,"A",{href:!0});var mqr=s(ok);oze=r(mqr,"RegNetConfig"),mqr.forEach(t),rze=r($4e," (RegNet model)"),$4e.forEach(t),tze=i(y),Tm=n(y,"LI",{});var k4e=s(Tm);$ee=n(k4e,"STRONG",{});var gqr=s($ee);aze=r(gqr,"rembert"),gqr.forEach(t),nze=r(k4e," \u2014 "),rk=n(k4e,"A",{href:!0});var hqr=s(rk);sze=r(hqr,"RemBertConfig"),hqr.forEach(t),lze=r(k4e," (RemBERT model)"),k4e.forEach(t),ize=i(y),Mm=n(y,"LI",{});var S4e=s(Mm);kee=n(S4e,"STRONG",{});var pqr=s(kee);dze=r(pqr,"resnet"),pqr.forEach(t),cze=r(S4e," \u2014 "),tk=n(S4e,"A",{href:!0});var uqr=s(tk);fze=r(uqr,"ResNetConfig"),uqr.forEach(t),mze=r(S4e," (ResNet model)"),S4e.forEach(t),gze=i(y),Em=n(y,"LI",{});var R4e=s(Em);See=n(R4e,"STRONG",{});var _qr=s(See);hze=r(_qr,"retribert"),_qr.forEach(t),pze=r(R4e," \u2014 "),ak=n(R4e,"A",{href:!0});var bqr=s(ak);uze=r(bqr,"RetriBertConfig"),bqr.forEach(t),_ze=r(R4e," (RetriBERT model)"),R4e.forEach(t),bze=i(y),Cm=n(y,"LI",{});var B4e=s(Cm);Ree=n(B4e,"STRONG",{});var vqr=s(Ree);vze=r(vqr,"roberta"),vqr.forEach(t),Fze=r(B4e," \u2014 "),nk=n(B4e,"A",{href:!0});var Fqr=s(nk);Tze=r(Fqr,"RobertaConfig"),Fqr.forEach(t),Mze=r(B4e," (RoBERTa model)"),B4e.forEach(t),Eze=i(y),wm=n(y,"LI",{});var P4e=s(wm);Bee=n(P4e,"STRONG",{});var Tqr=s(Bee);Cze=r(Tqr,"roformer"),Tqr.forEach(t),wze=r(P4e," \u2014 "),sk=n(P4e,"A",{href:!0});var Mqr=s(sk);Aze=r(Mqr,"RoFormerConfig"),Mqr.forEach(t),yze=r(P4e," (RoFormer model)"),P4e.forEach(t),Lze=i(y),Am=n(y,"LI",{});var I4e=s(Am);Pee=n(I4e,"STRONG",{});var Eqr=s(Pee);xze=r(Eqr,"segformer"),Eqr.forEach(t),$ze=r(I4e," \u2014 "),lk=n(I4e,"A",{href:!0});var Cqr=s(lk);kze=r(Cqr,"SegformerConfig"),Cqr.forEach(t),Sze=r(I4e," (SegFormer model)"),I4e.forEach(t),Rze=i(y),ym=n(y,"LI",{});var q4e=s(ym);Iee=n(q4e,"STRONG",{});var wqr=s(Iee);Bze=r(wqr,"sew"),wqr.forEach(t),Pze=r(q4e," \u2014 "),ik=n(q4e,"A",{href:!0});var Aqr=s(ik);Ize=r(Aqr,"SEWConfig"),Aqr.forEach(t),qze=r(q4e," (SEW model)"),q4e.forEach(t),Nze=i(y),Lm=n(y,"LI",{});var N4e=s(Lm);qee=n(N4e,"STRONG",{});var yqr=s(qee);jze=r(yqr,"sew-d"),yqr.forEach(t),Dze=r(N4e," \u2014 "),dk=n(N4e,"A",{href:!0});var Lqr=s(dk);Gze=r(Lqr,"SEWDConfig"),Lqr.forEach(t),Oze=r(N4e," (SEW-D model)"),N4e.forEach(t),Vze=i(y),xm=n(y,"LI",{});var j4e=s(xm);Nee=n(j4e,"STRONG",{});var xqr=s(Nee);Xze=r(xqr,"speech-encoder-decoder"),xqr.forEach(t),zze=r(j4e," \u2014 "),ck=n(j4e,"A",{href:!0});var $qr=s(ck);Qze=r($qr,"SpeechEncoderDecoderConfig"),$qr.forEach(t),Wze=r(j4e," (Speech Encoder decoder model)"),j4e.forEach(t),Hze=i(y),$m=n(y,"LI",{});var D4e=s($m);jee=n(D4e,"STRONG",{});var kqr=s(jee);Uze=r(kqr,"speech_to_text"),kqr.forEach(t),Jze=r(D4e," \u2014 "),fk=n(D4e,"A",{href:!0});var Sqr=s(fk);Yze=r(Sqr,"Speech2TextConfig"),Sqr.forEach(t),Kze=r(D4e," (Speech2Text model)"),D4e.forEach(t),Zze=i(y),km=n(y,"LI",{});var G4e=s(km);Dee=n(G4e,"STRONG",{});var Rqr=s(Dee);eQe=r(Rqr,"speech_to_text_2"),Rqr.forEach(t),oQe=r(G4e," \u2014 "),mk=n(G4e,"A",{href:!0});var Bqr=s(mk);rQe=r(Bqr,"Speech2Text2Config"),Bqr.forEach(t),tQe=r(G4e," (Speech2Text2 model)"),G4e.forEach(t),aQe=i(y),Sm=n(y,"LI",{});var O4e=s(Sm);Gee=n(O4e,"STRONG",{});var Pqr=s(Gee);nQe=r(Pqr,"splinter"),Pqr.forEach(t),sQe=r(O4e," \u2014 "),gk=n(O4e,"A",{href:!0});var Iqr=s(gk);lQe=r(Iqr,"SplinterConfig"),Iqr.forEach(t),iQe=r(O4e," (Splinter model)"),O4e.forEach(t),dQe=i(y),Rm=n(y,"LI",{});var V4e=s(Rm);Oee=n(V4e,"STRONG",{});var qqr=s(Oee);cQe=r(qqr,"squeezebert"),qqr.forEach(t),fQe=r(V4e," \u2014 "),hk=n(V4e,"A",{href:!0});var Nqr=s(hk);mQe=r(Nqr,"SqueezeBertConfig"),Nqr.forEach(t),gQe=r(V4e," (SqueezeBERT model)"),V4e.forEach(t),hQe=i(y),Bm=n(y,"LI",{});var X4e=s(Bm);Vee=n(X4e,"STRONG",{});var jqr=s(Vee);pQe=r(jqr,"swin"),jqr.forEach(t),uQe=r(X4e," \u2014 "),pk=n(X4e,"A",{href:!0});var Dqr=s(pk);_Qe=r(Dqr,"SwinConfig"),Dqr.forEach(t),bQe=r(X4e," (Swin model)"),X4e.forEach(t),vQe=i(y),Pm=n(y,"LI",{});var z4e=s(Pm);Xee=n(z4e,"STRONG",{});var Gqr=s(Xee);FQe=r(Gqr,"t5"),Gqr.forEach(t),TQe=r(z4e," \u2014 "),uk=n(z4e,"A",{href:!0});var Oqr=s(uk);MQe=r(Oqr,"T5Config"),Oqr.forEach(t),EQe=r(z4e," (T5 model)"),z4e.forEach(t),CQe=i(y),Im=n(y,"LI",{});var Q4e=s(Im);zee=n(Q4e,"STRONG",{});var Vqr=s(zee);wQe=r(Vqr,"tapas"),Vqr.forEach(t),AQe=r(Q4e," \u2014 "),_k=n(Q4e,"A",{href:!0});var Xqr=s(_k);yQe=r(Xqr,"TapasConfig"),Xqr.forEach(t),LQe=r(Q4e," (TAPAS model)"),Q4e.forEach(t),xQe=i(y),qm=n(y,"LI",{});var W4e=s(qm);Qee=n(W4e,"STRONG",{});var zqr=s(Qee);$Qe=r(zqr,"tapex"),zqr.forEach(t),kQe=r(W4e," \u2014 "),bk=n(W4e,"A",{href:!0});var Qqr=s(bk);SQe=r(Qqr,"BartConfig"),Qqr.forEach(t),RQe=r(W4e," (TAPEX model)"),W4e.forEach(t),BQe=i(y),Nm=n(y,"LI",{});var H4e=s(Nm);Wee=n(H4e,"STRONG",{});var Wqr=s(Wee);PQe=r(Wqr,"transfo-xl"),Wqr.forEach(t),IQe=r(H4e," \u2014 "),vk=n(H4e,"A",{href:!0});var Hqr=s(vk);qQe=r(Hqr,"TransfoXLConfig"),Hqr.forEach(t),NQe=r(H4e," (Transformer-XL model)"),H4e.forEach(t),jQe=i(y),jm=n(y,"LI",{});var U4e=s(jm);Hee=n(U4e,"STRONG",{});var Uqr=s(Hee);DQe=r(Uqr,"trocr"),Uqr.forEach(t),GQe=r(U4e," \u2014 "),Fk=n(U4e,"A",{href:!0});var Jqr=s(Fk);OQe=r(Jqr,"TrOCRConfig"),Jqr.forEach(t),VQe=r(U4e," (TrOCR model)"),U4e.forEach(t),XQe=i(y),Dm=n(y,"LI",{});var J4e=s(Dm);Uee=n(J4e,"STRONG",{});var Yqr=s(Uee);zQe=r(Yqr,"unispeech"),Yqr.forEach(t),QQe=r(J4e," \u2014 "),Tk=n(J4e,"A",{href:!0});var Kqr=s(Tk);WQe=r(Kqr,"UniSpeechConfig"),Kqr.forEach(t),HQe=r(J4e," (UniSpeech model)"),J4e.forEach(t),UQe=i(y),Gm=n(y,"LI",{});var Y4e=s(Gm);Jee=n(Y4e,"STRONG",{});var Zqr=s(Jee);JQe=r(Zqr,"unispeech-sat"),Zqr.forEach(t),YQe=r(Y4e," \u2014 "),Mk=n(Y4e,"A",{href:!0});var eNr=s(Mk);KQe=r(eNr,"UniSpeechSatConfig"),eNr.forEach(t),ZQe=r(Y4e," (UniSpeechSat model)"),Y4e.forEach(t),eWe=i(y),Om=n(y,"LI",{});var K4e=s(Om);Yee=n(K4e,"STRONG",{});var oNr=s(Yee);oWe=r(oNr,"van"),oNr.forEach(t),rWe=r(K4e," \u2014 "),Ek=n(K4e,"A",{href:!0});var rNr=s(Ek);tWe=r(rNr,"VanConfig"),rNr.forEach(t),aWe=r(K4e," (VAN model)"),K4e.forEach(t),nWe=i(y),Vm=n(y,"LI",{});var Z4e=s(Vm);Kee=n(Z4e,"STRONG",{});var tNr=s(Kee);sWe=r(tNr,"vilt"),tNr.forEach(t),lWe=r(Z4e," \u2014 "),Ck=n(Z4e,"A",{href:!0});var aNr=s(Ck);iWe=r(aNr,"ViltConfig"),aNr.forEach(t),dWe=r(Z4e," (ViLT model)"),Z4e.forEach(t),cWe=i(y),Xm=n(y,"LI",{});var eEe=s(Xm);Zee=n(eEe,"STRONG",{});var nNr=s(Zee);fWe=r(nNr,"vision-encoder-decoder"),nNr.forEach(t),mWe=r(eEe," \u2014 "),wk=n(eEe,"A",{href:!0});var sNr=s(wk);gWe=r(sNr,"VisionEncoderDecoderConfig"),sNr.forEach(t),hWe=r(eEe," (Vision Encoder decoder model)"),eEe.forEach(t),pWe=i(y),zm=n(y,"LI",{});var oEe=s(zm);eoe=n(oEe,"STRONG",{});var lNr=s(eoe);uWe=r(lNr,"vision-text-dual-encoder"),lNr.forEach(t),_We=r(oEe," \u2014 "),Ak=n(oEe,"A",{href:!0});var iNr=s(Ak);bWe=r(iNr,"VisionTextDualEncoderConfig"),iNr.forEach(t),vWe=r(oEe," (VisionTextDualEncoder model)"),oEe.forEach(t),FWe=i(y),Qm=n(y,"LI",{});var rEe=s(Qm);ooe=n(rEe,"STRONG",{});var dNr=s(ooe);TWe=r(dNr,"visual_bert"),dNr.forEach(t),MWe=r(rEe," \u2014 "),yk=n(rEe,"A",{href:!0});var cNr=s(yk);EWe=r(cNr,"VisualBertConfig"),cNr.forEach(t),CWe=r(rEe," (VisualBert model)"),rEe.forEach(t),wWe=i(y),Wm=n(y,"LI",{});var tEe=s(Wm);roe=n(tEe,"STRONG",{});var fNr=s(roe);AWe=r(fNr,"vit"),fNr.forEach(t),yWe=r(tEe," \u2014 "),Lk=n(tEe,"A",{href:!0});var mNr=s(Lk);LWe=r(mNr,"ViTConfig"),mNr.forEach(t),xWe=r(tEe," (ViT model)"),tEe.forEach(t),$We=i(y),Hm=n(y,"LI",{});var aEe=s(Hm);toe=n(aEe,"STRONG",{});var gNr=s(toe);kWe=r(gNr,"vit_mae"),gNr.forEach(t),SWe=r(aEe," \u2014 "),xk=n(aEe,"A",{href:!0});var hNr=s(xk);RWe=r(hNr,"ViTMAEConfig"),hNr.forEach(t),BWe=r(aEe," (ViTMAE model)"),aEe.forEach(t),PWe=i(y),Um=n(y,"LI",{});var nEe=s(Um);aoe=n(nEe,"STRONG",{});var pNr=s(aoe);IWe=r(pNr,"wav2vec2"),pNr.forEach(t),qWe=r(nEe," \u2014 "),$k=n(nEe,"A",{href:!0});var uNr=s($k);NWe=r(uNr,"Wav2Vec2Config"),uNr.forEach(t),jWe=r(nEe," (Wav2Vec2 model)"),nEe.forEach(t),DWe=i(y),Jm=n(y,"LI",{});var sEe=s(Jm);noe=n(sEe,"STRONG",{});var _Nr=s(noe);GWe=r(_Nr,"wavlm"),_Nr.forEach(t),OWe=r(sEe," \u2014 "),kk=n(sEe,"A",{href:!0});var bNr=s(kk);VWe=r(bNr,"WavLMConfig"),bNr.forEach(t),XWe=r(sEe," (WavLM model)"),sEe.forEach(t),zWe=i(y),Ym=n(y,"LI",{});var lEe=s(Ym);soe=n(lEe,"STRONG",{});var vNr=s(soe);QWe=r(vNr,"xglm"),vNr.forEach(t),WWe=r(lEe," \u2014 "),Sk=n(lEe,"A",{href:!0});var FNr=s(Sk);HWe=r(FNr,"XGLMConfig"),FNr.forEach(t),UWe=r(lEe," (XGLM model)"),lEe.forEach(t),JWe=i(y),Km=n(y,"LI",{});var iEe=s(Km);loe=n(iEe,"STRONG",{});var TNr=s(loe);YWe=r(TNr,"xlm"),TNr.forEach(t),KWe=r(iEe," \u2014 "),Rk=n(iEe,"A",{href:!0});var MNr=s(Rk);ZWe=r(MNr,"XLMConfig"),MNr.forEach(t),eHe=r(iEe," (XLM model)"),iEe.forEach(t),oHe=i(y),Zm=n(y,"LI",{});var dEe=s(Zm);ioe=n(dEe,"STRONG",{});var ENr=s(ioe);rHe=r(ENr,"xlm-prophetnet"),ENr.forEach(t),tHe=r(dEe," \u2014 "),Bk=n(dEe,"A",{href:!0});var CNr=s(Bk);aHe=r(CNr,"XLMProphetNetConfig"),CNr.forEach(t),nHe=r(dEe," (XLMProphetNet model)"),dEe.forEach(t),sHe=i(y),eg=n(y,"LI",{});var cEe=s(eg);doe=n(cEe,"STRONG",{});var wNr=s(doe);lHe=r(wNr,"xlm-roberta"),wNr.forEach(t),iHe=r(cEe," \u2014 "),Pk=n(cEe,"A",{href:!0});var ANr=s(Pk);dHe=r(ANr,"XLMRobertaConfig"),ANr.forEach(t),cHe=r(cEe," (XLM-RoBERTa model)"),cEe.forEach(t),fHe=i(y),og=n(y,"LI",{});var fEe=s(og);coe=n(fEe,"STRONG",{});var yNr=s(coe);mHe=r(yNr,"xlm-roberta-xl"),yNr.forEach(t),gHe=r(fEe," \u2014 "),Ik=n(fEe,"A",{href:!0});var LNr=s(Ik);hHe=r(LNr,"XLMRobertaXLConfig"),LNr.forEach(t),pHe=r(fEe," (XLM-RoBERTa-XL model)"),fEe.forEach(t),uHe=i(y),rg=n(y,"LI",{});var mEe=s(rg);foe=n(mEe,"STRONG",{});var xNr=s(foe);_He=r(xNr,"xlnet"),xNr.forEach(t),bHe=r(mEe," \u2014 "),qk=n(mEe,"A",{href:!0});var $Nr=s(qk);vHe=r($Nr,"XLNetConfig"),$Nr.forEach(t),FHe=r(mEe," (XLNet model)"),mEe.forEach(t),THe=i(y),tg=n(y,"LI",{});var gEe=s(tg);moe=n(gEe,"STRONG",{});var kNr=s(moe);MHe=r(kNr,"yolos"),kNr.forEach(t),EHe=r(gEe," \u2014 "),Nk=n(gEe,"A",{href:!0});var SNr=s(Nk);CHe=r(SNr,"YolosConfig"),SNr.forEach(t),wHe=r(gEe," (YOLOS model)"),gEe.forEach(t),AHe=i(y),ag=n(y,"LI",{});var hEe=s(ag);goe=n(hEe,"STRONG",{});var RNr=s(goe);yHe=r(RNr,"yoso"),RNr.forEach(t),LHe=r(hEe," \u2014 "),jk=n(hEe,"A",{href:!0});var BNr=s(jk);xHe=r(BNr,"YosoConfig"),BNr.forEach(t),$He=r(hEe," (YOSO model)"),hEe.forEach(t),y.forEach(t),kHe=i(Yr),T(ng.$$.fragment,Yr),Yr.forEach(t),SHe=i(Jr),sg=n(Jr,"DIV",{class:!0});var CIe=s(sg);T(Bw.$$.fragment,CIe),RHe=i(CIe),hoe=n(CIe,"P",{});var PNr=s(hoe);BHe=r(PNr,"Register a new configuration for this class."),PNr.forEach(t),CIe.forEach(t),Jr.forEach(t),xBe=i(f),mi=n(f,"H2",{class:!0});var wIe=s(mi);lg=n(wIe,"A",{id:!0,class:!0,href:!0});var INr=s(lg);poe=n(INr,"SPAN",{});var qNr=s(poe);T(Pw.$$.fragment,qNr),qNr.forEach(t),INr.forEach(t),PHe=i(wIe),uoe=n(wIe,"SPAN",{});var NNr=s(uoe);IHe=r(NNr,"AutoTokenizer"),NNr.forEach(t),wIe.forEach(t),$Be=i(f),wo=n(f,"DIV",{class:!0});var Ss=s(wo);T(Iw.$$.fragment,Ss),qHe=i(Ss),qw=n(Ss,"P",{});var AIe=s(qw);NHe=r(AIe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Dk=n(AIe,"A",{href:!0});var jNr=s(Dk);jHe=r(jNr,"AutoTokenizer.from_pretrained()"),jNr.forEach(t),DHe=r(AIe," class method."),AIe.forEach(t),GHe=i(Ss),Nw=n(Ss,"P",{});var yIe=s(Nw);OHe=r(yIe,"This class cannot be instantiated directly using "),_oe=n(yIe,"CODE",{});var DNr=s(_oe);VHe=r(DNr,"__init__()"),DNr.forEach(t),XHe=r(yIe," (throws an error)."),yIe.forEach(t),zHe=i(Ss),Er=n(Ss,"DIV",{class:!0});var Rs=s(Er);T(jw.$$.fragment,Rs),QHe=i(Rs),boe=n(Rs,"P",{});var GNr=s(boe);WHe=r(GNr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),GNr.forEach(t),HHe=i(Rs),Ta=n(Rs,"P",{});var xC=s(Ta);UHe=r(xC,"The tokenizer class to instantiate is selected based on the "),voe=n(xC,"CODE",{});var ONr=s(voe);JHe=r(ONr,"model_type"),ONr.forEach(t),YHe=r(xC,` property of the config object (either
passed as an argument or loaded from `),Foe=n(xC,"CODE",{});var VNr=s(Foe);KHe=r(VNr,"pretrained_model_name_or_path"),VNr.forEach(t),ZHe=r(xC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Toe=n(xC,"CODE",{});var XNr=s(Toe);eUe=r(XNr,"pretrained_model_name_or_path"),XNr.forEach(t),oUe=r(xC,":"),xC.forEach(t),rUe=i(Rs),k=n(Rs,"UL",{});var S=s(k);Ln=n(S,"LI",{});var B7=s(Ln);Moe=n(B7,"STRONG",{});var zNr=s(Moe);tUe=r(zNr,"albert"),zNr.forEach(t),aUe=r(B7," \u2014 "),Gk=n(B7,"A",{href:!0});var QNr=s(Gk);nUe=r(QNr,"AlbertTokenizer"),QNr.forEach(t),sUe=r(B7," or "),Ok=n(B7,"A",{href:!0});var WNr=s(Ok);lUe=r(WNr,"AlbertTokenizerFast"),WNr.forEach(t),iUe=r(B7," (ALBERT model)"),B7.forEach(t),dUe=i(S),xn=n(S,"LI",{});var P7=s(xn);Eoe=n(P7,"STRONG",{});var HNr=s(Eoe);cUe=r(HNr,"bart"),HNr.forEach(t),fUe=r(P7," \u2014 "),Vk=n(P7,"A",{href:!0});var UNr=s(Vk);mUe=r(UNr,"BartTokenizer"),UNr.forEach(t),gUe=r(P7," or "),Xk=n(P7,"A",{href:!0});var JNr=s(Xk);hUe=r(JNr,"BartTokenizerFast"),JNr.forEach(t),pUe=r(P7," (BART model)"),P7.forEach(t),uUe=i(S),$n=n(S,"LI",{});var I7=s($n);Coe=n(I7,"STRONG",{});var YNr=s(Coe);_Ue=r(YNr,"barthez"),YNr.forEach(t),bUe=r(I7," \u2014 "),zk=n(I7,"A",{href:!0});var KNr=s(zk);vUe=r(KNr,"BarthezTokenizer"),KNr.forEach(t),FUe=r(I7," or "),Qk=n(I7,"A",{href:!0});var ZNr=s(Qk);TUe=r(ZNr,"BarthezTokenizerFast"),ZNr.forEach(t),MUe=r(I7," (BARThez model)"),I7.forEach(t),EUe=i(S),ig=n(S,"LI",{});var pEe=s(ig);woe=n(pEe,"STRONG",{});var ejr=s(woe);CUe=r(ejr,"bartpho"),ejr.forEach(t),wUe=r(pEe," \u2014 "),Wk=n(pEe,"A",{href:!0});var ojr=s(Wk);AUe=r(ojr,"BartphoTokenizer"),ojr.forEach(t),yUe=r(pEe," (BARTpho model)"),pEe.forEach(t),LUe=i(S),kn=n(S,"LI",{});var q7=s(kn);Aoe=n(q7,"STRONG",{});var rjr=s(Aoe);xUe=r(rjr,"bert"),rjr.forEach(t),$Ue=r(q7," \u2014 "),Hk=n(q7,"A",{href:!0});var tjr=s(Hk);kUe=r(tjr,"BertTokenizer"),tjr.forEach(t),SUe=r(q7," or "),Uk=n(q7,"A",{href:!0});var ajr=s(Uk);RUe=r(ajr,"BertTokenizerFast"),ajr.forEach(t),BUe=r(q7," (BERT model)"),q7.forEach(t),PUe=i(S),dg=n(S,"LI",{});var uEe=s(dg);yoe=n(uEe,"STRONG",{});var njr=s(yoe);IUe=r(njr,"bert-generation"),njr.forEach(t),qUe=r(uEe," \u2014 "),Jk=n(uEe,"A",{href:!0});var sjr=s(Jk);NUe=r(sjr,"BertGenerationTokenizer"),sjr.forEach(t),jUe=r(uEe," (Bert Generation model)"),uEe.forEach(t),DUe=i(S),cg=n(S,"LI",{});var _Ee=s(cg);Loe=n(_Ee,"STRONG",{});var ljr=s(Loe);GUe=r(ljr,"bert-japanese"),ljr.forEach(t),OUe=r(_Ee," \u2014 "),Yk=n(_Ee,"A",{href:!0});var ijr=s(Yk);VUe=r(ijr,"BertJapaneseTokenizer"),ijr.forEach(t),XUe=r(_Ee," (BertJapanese model)"),_Ee.forEach(t),zUe=i(S),fg=n(S,"LI",{});var bEe=s(fg);xoe=n(bEe,"STRONG",{});var djr=s(xoe);QUe=r(djr,"bertweet"),djr.forEach(t),WUe=r(bEe," \u2014 "),Kk=n(bEe,"A",{href:!0});var cjr=s(Kk);HUe=r(cjr,"BertweetTokenizer"),cjr.forEach(t),UUe=r(bEe," (Bertweet model)"),bEe.forEach(t),JUe=i(S),Sn=n(S,"LI",{});var N7=s(Sn);$oe=n(N7,"STRONG",{});var fjr=s($oe);YUe=r(fjr,"big_bird"),fjr.forEach(t),KUe=r(N7," \u2014 "),Zk=n(N7,"A",{href:!0});var mjr=s(Zk);ZUe=r(mjr,"BigBirdTokenizer"),mjr.forEach(t),eJe=r(N7," or "),eS=n(N7,"A",{href:!0});var gjr=s(eS);oJe=r(gjr,"BigBirdTokenizerFast"),gjr.forEach(t),rJe=r(N7," (BigBird model)"),N7.forEach(t),tJe=i(S),Rn=n(S,"LI",{});var j7=s(Rn);koe=n(j7,"STRONG",{});var hjr=s(koe);aJe=r(hjr,"bigbird_pegasus"),hjr.forEach(t),nJe=r(j7," \u2014 "),oS=n(j7,"A",{href:!0});var pjr=s(oS);sJe=r(pjr,"PegasusTokenizer"),pjr.forEach(t),lJe=r(j7," or "),rS=n(j7,"A",{href:!0});var ujr=s(rS);iJe=r(ujr,"PegasusTokenizerFast"),ujr.forEach(t),dJe=r(j7," (BigBirdPegasus model)"),j7.forEach(t),cJe=i(S),Bn=n(S,"LI",{});var D7=s(Bn);Soe=n(D7,"STRONG",{});var _jr=s(Soe);fJe=r(_jr,"blenderbot"),_jr.forEach(t),mJe=r(D7," \u2014 "),tS=n(D7,"A",{href:!0});var bjr=s(tS);gJe=r(bjr,"BlenderbotTokenizer"),bjr.forEach(t),hJe=r(D7," or "),aS=n(D7,"A",{href:!0});var vjr=s(aS);pJe=r(vjr,"BlenderbotTokenizerFast"),vjr.forEach(t),uJe=r(D7," (Blenderbot model)"),D7.forEach(t),_Je=i(S),mg=n(S,"LI",{});var vEe=s(mg);Roe=n(vEe,"STRONG",{});var Fjr=s(Roe);bJe=r(Fjr,"blenderbot-small"),Fjr.forEach(t),vJe=r(vEe," \u2014 "),nS=n(vEe,"A",{href:!0});var Tjr=s(nS);FJe=r(Tjr,"BlenderbotSmallTokenizer"),Tjr.forEach(t),TJe=r(vEe," (BlenderbotSmall model)"),vEe.forEach(t),MJe=i(S),gg=n(S,"LI",{});var FEe=s(gg);Boe=n(FEe,"STRONG",{});var Mjr=s(Boe);EJe=r(Mjr,"byt5"),Mjr.forEach(t),CJe=r(FEe," \u2014 "),sS=n(FEe,"A",{href:!0});var Ejr=s(sS);wJe=r(Ejr,"ByT5Tokenizer"),Ejr.forEach(t),AJe=r(FEe," (ByT5 model)"),FEe.forEach(t),yJe=i(S),Pn=n(S,"LI",{});var G7=s(Pn);Poe=n(G7,"STRONG",{});var Cjr=s(Poe);LJe=r(Cjr,"camembert"),Cjr.forEach(t),xJe=r(G7," \u2014 "),lS=n(G7,"A",{href:!0});var wjr=s(lS);$Je=r(wjr,"CamembertTokenizer"),wjr.forEach(t),kJe=r(G7," or "),iS=n(G7,"A",{href:!0});var Ajr=s(iS);SJe=r(Ajr,"CamembertTokenizerFast"),Ajr.forEach(t),RJe=r(G7," (CamemBERT model)"),G7.forEach(t),BJe=i(S),hg=n(S,"LI",{});var TEe=s(hg);Ioe=n(TEe,"STRONG",{});var yjr=s(Ioe);PJe=r(yjr,"canine"),yjr.forEach(t),IJe=r(TEe," \u2014 "),dS=n(TEe,"A",{href:!0});var Ljr=s(dS);qJe=r(Ljr,"CanineTokenizer"),Ljr.forEach(t),NJe=r(TEe," (Canine model)"),TEe.forEach(t),jJe=i(S),In=n(S,"LI",{});var O7=s(In);qoe=n(O7,"STRONG",{});var xjr=s(qoe);DJe=r(xjr,"clip"),xjr.forEach(t),GJe=r(O7," \u2014 "),cS=n(O7,"A",{href:!0});var $jr=s(cS);OJe=r($jr,"CLIPTokenizer"),$jr.forEach(t),VJe=r(O7," or "),fS=n(O7,"A",{href:!0});var kjr=s(fS);XJe=r(kjr,"CLIPTokenizerFast"),kjr.forEach(t),zJe=r(O7," (CLIP model)"),O7.forEach(t),QJe=i(S),qn=n(S,"LI",{});var V7=s(qn);Noe=n(V7,"STRONG",{});var Sjr=s(Noe);WJe=r(Sjr,"convbert"),Sjr.forEach(t),HJe=r(V7," \u2014 "),mS=n(V7,"A",{href:!0});var Rjr=s(mS);UJe=r(Rjr,"ConvBertTokenizer"),Rjr.forEach(t),JJe=r(V7," or "),gS=n(V7,"A",{href:!0});var Bjr=s(gS);YJe=r(Bjr,"ConvBertTokenizerFast"),Bjr.forEach(t),KJe=r(V7," (ConvBERT model)"),V7.forEach(t),ZJe=i(S),Nn=n(S,"LI",{});var X7=s(Nn);joe=n(X7,"STRONG",{});var Pjr=s(joe);eYe=r(Pjr,"cpm"),Pjr.forEach(t),oYe=r(X7," \u2014 "),hS=n(X7,"A",{href:!0});var Ijr=s(hS);rYe=r(Ijr,"CpmTokenizer"),Ijr.forEach(t),tYe=r(X7," or "),pS=n(X7,"A",{href:!0});var qjr=s(pS);aYe=r(qjr,"CpmTokenizerFast"),qjr.forEach(t),nYe=r(X7," (CPM model)"),X7.forEach(t),sYe=i(S),pg=n(S,"LI",{});var MEe=s(pg);Doe=n(MEe,"STRONG",{});var Njr=s(Doe);lYe=r(Njr,"ctrl"),Njr.forEach(t),iYe=r(MEe," \u2014 "),uS=n(MEe,"A",{href:!0});var jjr=s(uS);dYe=r(jjr,"CTRLTokenizer"),jjr.forEach(t),cYe=r(MEe," (CTRL model)"),MEe.forEach(t),fYe=i(S),jn=n(S,"LI",{});var z7=s(jn);Goe=n(z7,"STRONG",{});var Djr=s(Goe);mYe=r(Djr,"data2vec-text"),Djr.forEach(t),gYe=r(z7," \u2014 "),_S=n(z7,"A",{href:!0});var Gjr=s(_S);hYe=r(Gjr,"RobertaTokenizer"),Gjr.forEach(t),pYe=r(z7," or "),bS=n(z7,"A",{href:!0});var Ojr=s(bS);uYe=r(Ojr,"RobertaTokenizerFast"),Ojr.forEach(t),_Ye=r(z7," (Data2VecText model)"),z7.forEach(t),bYe=i(S),Dn=n(S,"LI",{});var Q7=s(Dn);Ooe=n(Q7,"STRONG",{});var Vjr=s(Ooe);vYe=r(Vjr,"deberta"),Vjr.forEach(t),FYe=r(Q7," \u2014 "),vS=n(Q7,"A",{href:!0});var Xjr=s(vS);TYe=r(Xjr,"DebertaTokenizer"),Xjr.forEach(t),MYe=r(Q7," or "),FS=n(Q7,"A",{href:!0});var zjr=s(FS);EYe=r(zjr,"DebertaTokenizerFast"),zjr.forEach(t),CYe=r(Q7," (DeBERTa model)"),Q7.forEach(t),wYe=i(S),Gn=n(S,"LI",{});var W7=s(Gn);Voe=n(W7,"STRONG",{});var Qjr=s(Voe);AYe=r(Qjr,"deberta-v2"),Qjr.forEach(t),yYe=r(W7," \u2014 "),TS=n(W7,"A",{href:!0});var Wjr=s(TS);LYe=r(Wjr,"DebertaV2Tokenizer"),Wjr.forEach(t),xYe=r(W7," or "),MS=n(W7,"A",{href:!0});var Hjr=s(MS);$Ye=r(Hjr,"DebertaV2TokenizerFast"),Hjr.forEach(t),kYe=r(W7," (DeBERTa-v2 model)"),W7.forEach(t),SYe=i(S),On=n(S,"LI",{});var H7=s(On);Xoe=n(H7,"STRONG",{});var Ujr=s(Xoe);RYe=r(Ujr,"distilbert"),Ujr.forEach(t),BYe=r(H7," \u2014 "),ES=n(H7,"A",{href:!0});var Jjr=s(ES);PYe=r(Jjr,"DistilBertTokenizer"),Jjr.forEach(t),IYe=r(H7," or "),CS=n(H7,"A",{href:!0});var Yjr=s(CS);qYe=r(Yjr,"DistilBertTokenizerFast"),Yjr.forEach(t),NYe=r(H7," (DistilBERT model)"),H7.forEach(t),jYe=i(S),Vn=n(S,"LI",{});var U7=s(Vn);zoe=n(U7,"STRONG",{});var Kjr=s(zoe);DYe=r(Kjr,"dpr"),Kjr.forEach(t),GYe=r(U7," \u2014 "),wS=n(U7,"A",{href:!0});var Zjr=s(wS);OYe=r(Zjr,"DPRQuestionEncoderTokenizer"),Zjr.forEach(t),VYe=r(U7," or "),AS=n(U7,"A",{href:!0});var eDr=s(AS);XYe=r(eDr,"DPRQuestionEncoderTokenizerFast"),eDr.forEach(t),zYe=r(U7," (DPR model)"),U7.forEach(t),QYe=i(S),Xn=n(S,"LI",{});var J7=s(Xn);Qoe=n(J7,"STRONG",{});var oDr=s(Qoe);WYe=r(oDr,"electra"),oDr.forEach(t),HYe=r(J7," \u2014 "),yS=n(J7,"A",{href:!0});var rDr=s(yS);UYe=r(rDr,"ElectraTokenizer"),rDr.forEach(t),JYe=r(J7," or "),LS=n(J7,"A",{href:!0});var tDr=s(LS);YYe=r(tDr,"ElectraTokenizerFast"),tDr.forEach(t),KYe=r(J7," (ELECTRA model)"),J7.forEach(t),ZYe=i(S),ug=n(S,"LI",{});var EEe=s(ug);Woe=n(EEe,"STRONG",{});var aDr=s(Woe);eKe=r(aDr,"flaubert"),aDr.forEach(t),oKe=r(EEe," \u2014 "),xS=n(EEe,"A",{href:!0});var nDr=s(xS);rKe=r(nDr,"FlaubertTokenizer"),nDr.forEach(t),tKe=r(EEe," (FlauBERT model)"),EEe.forEach(t),aKe=i(S),zn=n(S,"LI",{});var Y7=s(zn);Hoe=n(Y7,"STRONG",{});var sDr=s(Hoe);nKe=r(sDr,"fnet"),sDr.forEach(t),sKe=r(Y7," \u2014 "),$S=n(Y7,"A",{href:!0});var lDr=s($S);lKe=r(lDr,"FNetTokenizer"),lDr.forEach(t),iKe=r(Y7," or "),kS=n(Y7,"A",{href:!0});var iDr=s(kS);dKe=r(iDr,"FNetTokenizerFast"),iDr.forEach(t),cKe=r(Y7," (FNet model)"),Y7.forEach(t),fKe=i(S),_g=n(S,"LI",{});var CEe=s(_g);Uoe=n(CEe,"STRONG",{});var dDr=s(Uoe);mKe=r(dDr,"fsmt"),dDr.forEach(t),gKe=r(CEe," \u2014 "),SS=n(CEe,"A",{href:!0});var cDr=s(SS);hKe=r(cDr,"FSMTTokenizer"),cDr.forEach(t),pKe=r(CEe," (FairSeq Machine-Translation model)"),CEe.forEach(t),uKe=i(S),Qn=n(S,"LI",{});var K7=s(Qn);Joe=n(K7,"STRONG",{});var fDr=s(Joe);_Ke=r(fDr,"funnel"),fDr.forEach(t),bKe=r(K7," \u2014 "),RS=n(K7,"A",{href:!0});var mDr=s(RS);vKe=r(mDr,"FunnelTokenizer"),mDr.forEach(t),FKe=r(K7," or "),BS=n(K7,"A",{href:!0});var gDr=s(BS);TKe=r(gDr,"FunnelTokenizerFast"),gDr.forEach(t),MKe=r(K7," (Funnel Transformer model)"),K7.forEach(t),EKe=i(S),Wn=n(S,"LI",{});var Z7=s(Wn);Yoe=n(Z7,"STRONG",{});var hDr=s(Yoe);CKe=r(hDr,"gpt2"),hDr.forEach(t),wKe=r(Z7," \u2014 "),PS=n(Z7,"A",{href:!0});var pDr=s(PS);AKe=r(pDr,"GPT2Tokenizer"),pDr.forEach(t),yKe=r(Z7," or "),IS=n(Z7,"A",{href:!0});var uDr=s(IS);LKe=r(uDr,"GPT2TokenizerFast"),uDr.forEach(t),xKe=r(Z7," (OpenAI GPT-2 model)"),Z7.forEach(t),$Ke=i(S),Hn=n(S,"LI",{});var ex=s(Hn);Koe=n(ex,"STRONG",{});var _Dr=s(Koe);kKe=r(_Dr,"gpt_neo"),_Dr.forEach(t),SKe=r(ex," \u2014 "),qS=n(ex,"A",{href:!0});var bDr=s(qS);RKe=r(bDr,"GPT2Tokenizer"),bDr.forEach(t),BKe=r(ex," or "),NS=n(ex,"A",{href:!0});var vDr=s(NS);PKe=r(vDr,"GPT2TokenizerFast"),vDr.forEach(t),IKe=r(ex," (GPT Neo model)"),ex.forEach(t),qKe=i(S),Un=n(S,"LI",{});var ox=s(Un);Zoe=n(ox,"STRONG",{});var FDr=s(Zoe);NKe=r(FDr,"gptj"),FDr.forEach(t),jKe=r(ox," \u2014 "),jS=n(ox,"A",{href:!0});var TDr=s(jS);DKe=r(TDr,"GPT2Tokenizer"),TDr.forEach(t),GKe=r(ox," or "),DS=n(ox,"A",{href:!0});var MDr=s(DS);OKe=r(MDr,"GPT2TokenizerFast"),MDr.forEach(t),VKe=r(ox," (GPT-J model)"),ox.forEach(t),XKe=i(S),Jn=n(S,"LI",{});var rx=s(Jn);ere=n(rx,"STRONG",{});var EDr=s(ere);zKe=r(EDr,"herbert"),EDr.forEach(t),QKe=r(rx," \u2014 "),GS=n(rx,"A",{href:!0});var CDr=s(GS);WKe=r(CDr,"HerbertTokenizer"),CDr.forEach(t),HKe=r(rx," or "),OS=n(rx,"A",{href:!0});var wDr=s(OS);UKe=r(wDr,"HerbertTokenizerFast"),wDr.forEach(t),JKe=r(rx," (HerBERT model)"),rx.forEach(t),YKe=i(S),bg=n(S,"LI",{});var wEe=s(bg);ore=n(wEe,"STRONG",{});var ADr=s(ore);KKe=r(ADr,"hubert"),ADr.forEach(t),ZKe=r(wEe," \u2014 "),VS=n(wEe,"A",{href:!0});var yDr=s(VS);eZe=r(yDr,"Wav2Vec2CTCTokenizer"),yDr.forEach(t),oZe=r(wEe," (Hubert model)"),wEe.forEach(t),rZe=i(S),Yn=n(S,"LI",{});var tx=s(Yn);rre=n(tx,"STRONG",{});var LDr=s(rre);tZe=r(LDr,"ibert"),LDr.forEach(t),aZe=r(tx," \u2014 "),XS=n(tx,"A",{href:!0});var xDr=s(XS);nZe=r(xDr,"RobertaTokenizer"),xDr.forEach(t),sZe=r(tx," or "),zS=n(tx,"A",{href:!0});var $Dr=s(zS);lZe=r($Dr,"RobertaTokenizerFast"),$Dr.forEach(t),iZe=r(tx," (I-BERT model)"),tx.forEach(t),dZe=i(S),Kn=n(S,"LI",{});var ax=s(Kn);tre=n(ax,"STRONG",{});var kDr=s(tre);cZe=r(kDr,"layoutlm"),kDr.forEach(t),fZe=r(ax," \u2014 "),QS=n(ax,"A",{href:!0});var SDr=s(QS);mZe=r(SDr,"LayoutLMTokenizer"),SDr.forEach(t),gZe=r(ax," or "),WS=n(ax,"A",{href:!0});var RDr=s(WS);hZe=r(RDr,"LayoutLMTokenizerFast"),RDr.forEach(t),pZe=r(ax," (LayoutLM model)"),ax.forEach(t),uZe=i(S),Zn=n(S,"LI",{});var nx=s(Zn);are=n(nx,"STRONG",{});var BDr=s(are);_Ze=r(BDr,"layoutlmv2"),BDr.forEach(t),bZe=r(nx," \u2014 "),HS=n(nx,"A",{href:!0});var PDr=s(HS);vZe=r(PDr,"LayoutLMv2Tokenizer"),PDr.forEach(t),FZe=r(nx," or "),US=n(nx,"A",{href:!0});var IDr=s(US);TZe=r(IDr,"LayoutLMv2TokenizerFast"),IDr.forEach(t),MZe=r(nx," (LayoutLMv2 model)"),nx.forEach(t),EZe=i(S),es=n(S,"LI",{});var sx=s(es);nre=n(sx,"STRONG",{});var qDr=s(nre);CZe=r(qDr,"layoutxlm"),qDr.forEach(t),wZe=r(sx," \u2014 "),JS=n(sx,"A",{href:!0});var NDr=s(JS);AZe=r(NDr,"LayoutXLMTokenizer"),NDr.forEach(t),yZe=r(sx," or "),YS=n(sx,"A",{href:!0});var jDr=s(YS);LZe=r(jDr,"LayoutXLMTokenizerFast"),jDr.forEach(t),xZe=r(sx," (LayoutXLM model)"),sx.forEach(t),$Ze=i(S),os=n(S,"LI",{});var lx=s(os);sre=n(lx,"STRONG",{});var DDr=s(sre);kZe=r(DDr,"led"),DDr.forEach(t),SZe=r(lx," \u2014 "),KS=n(lx,"A",{href:!0});var GDr=s(KS);RZe=r(GDr,"LEDTokenizer"),GDr.forEach(t),BZe=r(lx," or "),ZS=n(lx,"A",{href:!0});var ODr=s(ZS);PZe=r(ODr,"LEDTokenizerFast"),ODr.forEach(t),IZe=r(lx," (LED model)"),lx.forEach(t),qZe=i(S),rs=n(S,"LI",{});var ix=s(rs);lre=n(ix,"STRONG",{});var VDr=s(lre);NZe=r(VDr,"longformer"),VDr.forEach(t),jZe=r(ix," \u2014 "),eR=n(ix,"A",{href:!0});var XDr=s(eR);DZe=r(XDr,"LongformerTokenizer"),XDr.forEach(t),GZe=r(ix," or "),oR=n(ix,"A",{href:!0});var zDr=s(oR);OZe=r(zDr,"LongformerTokenizerFast"),zDr.forEach(t),VZe=r(ix," (Longformer model)"),ix.forEach(t),XZe=i(S),vg=n(S,"LI",{});var AEe=s(vg);ire=n(AEe,"STRONG",{});var QDr=s(ire);zZe=r(QDr,"luke"),QDr.forEach(t),QZe=r(AEe," \u2014 "),rR=n(AEe,"A",{href:!0});var WDr=s(rR);WZe=r(WDr,"LukeTokenizer"),WDr.forEach(t),HZe=r(AEe," (LUKE model)"),AEe.forEach(t),UZe=i(S),ts=n(S,"LI",{});var dx=s(ts);dre=n(dx,"STRONG",{});var HDr=s(dre);JZe=r(HDr,"lxmert"),HDr.forEach(t),YZe=r(dx," \u2014 "),tR=n(dx,"A",{href:!0});var UDr=s(tR);KZe=r(UDr,"LxmertTokenizer"),UDr.forEach(t),ZZe=r(dx," or "),aR=n(dx,"A",{href:!0});var JDr=s(aR);eeo=r(JDr,"LxmertTokenizerFast"),JDr.forEach(t),oeo=r(dx," (LXMERT model)"),dx.forEach(t),reo=i(S),Fg=n(S,"LI",{});var yEe=s(Fg);cre=n(yEe,"STRONG",{});var YDr=s(cre);teo=r(YDr,"m2m_100"),YDr.forEach(t),aeo=r(yEe," \u2014 "),nR=n(yEe,"A",{href:!0});var KDr=s(nR);neo=r(KDr,"M2M100Tokenizer"),KDr.forEach(t),seo=r(yEe," (M2M100 model)"),yEe.forEach(t),leo=i(S),Tg=n(S,"LI",{});var LEe=s(Tg);fre=n(LEe,"STRONG",{});var ZDr=s(fre);ieo=r(ZDr,"marian"),ZDr.forEach(t),deo=r(LEe," \u2014 "),sR=n(LEe,"A",{href:!0});var eGr=s(sR);ceo=r(eGr,"MarianTokenizer"),eGr.forEach(t),feo=r(LEe," (Marian model)"),LEe.forEach(t),meo=i(S),as=n(S,"LI",{});var cx=s(as);mre=n(cx,"STRONG",{});var oGr=s(mre);geo=r(oGr,"mbart"),oGr.forEach(t),heo=r(cx," \u2014 "),lR=n(cx,"A",{href:!0});var rGr=s(lR);peo=r(rGr,"MBartTokenizer"),rGr.forEach(t),ueo=r(cx," or "),iR=n(cx,"A",{href:!0});var tGr=s(iR);_eo=r(tGr,"MBartTokenizerFast"),tGr.forEach(t),beo=r(cx," (mBART model)"),cx.forEach(t),veo=i(S),ns=n(S,"LI",{});var fx=s(ns);gre=n(fx,"STRONG",{});var aGr=s(gre);Feo=r(aGr,"mbart50"),aGr.forEach(t),Teo=r(fx," \u2014 "),dR=n(fx,"A",{href:!0});var nGr=s(dR);Meo=r(nGr,"MBart50Tokenizer"),nGr.forEach(t),Eeo=r(fx," or "),cR=n(fx,"A",{href:!0});var sGr=s(cR);Ceo=r(sGr,"MBart50TokenizerFast"),sGr.forEach(t),weo=r(fx," (mBART-50 model)"),fx.forEach(t),Aeo=i(S),ss=n(S,"LI",{});var mx=s(ss);hre=n(mx,"STRONG",{});var lGr=s(hre);yeo=r(lGr,"megatron-bert"),lGr.forEach(t),Leo=r(mx," \u2014 "),fR=n(mx,"A",{href:!0});var iGr=s(fR);xeo=r(iGr,"BertTokenizer"),iGr.forEach(t),$eo=r(mx," or "),mR=n(mx,"A",{href:!0});var dGr=s(mR);keo=r(dGr,"BertTokenizerFast"),dGr.forEach(t),Seo=r(mx," (MegatronBert model)"),mx.forEach(t),Reo=i(S),Mg=n(S,"LI",{});var xEe=s(Mg);pre=n(xEe,"STRONG",{});var cGr=s(pre);Beo=r(cGr,"mluke"),cGr.forEach(t),Peo=r(xEe," \u2014 "),gR=n(xEe,"A",{href:!0});var fGr=s(gR);Ieo=r(fGr,"MLukeTokenizer"),fGr.forEach(t),qeo=r(xEe," (mLUKE model)"),xEe.forEach(t),Neo=i(S),ls=n(S,"LI",{});var gx=s(ls);ure=n(gx,"STRONG",{});var mGr=s(ure);jeo=r(mGr,"mobilebert"),mGr.forEach(t),Deo=r(gx," \u2014 "),hR=n(gx,"A",{href:!0});var gGr=s(hR);Geo=r(gGr,"MobileBertTokenizer"),gGr.forEach(t),Oeo=r(gx," or "),pR=n(gx,"A",{href:!0});var hGr=s(pR);Veo=r(hGr,"MobileBertTokenizerFast"),hGr.forEach(t),Xeo=r(gx," (MobileBERT model)"),gx.forEach(t),zeo=i(S),is=n(S,"LI",{});var hx=s(is);_re=n(hx,"STRONG",{});var pGr=s(_re);Qeo=r(pGr,"mpnet"),pGr.forEach(t),Weo=r(hx," \u2014 "),uR=n(hx,"A",{href:!0});var uGr=s(uR);Heo=r(uGr,"MPNetTokenizer"),uGr.forEach(t),Ueo=r(hx," or "),_R=n(hx,"A",{href:!0});var _Gr=s(_R);Jeo=r(_Gr,"MPNetTokenizerFast"),_Gr.forEach(t),Yeo=r(hx," (MPNet model)"),hx.forEach(t),Keo=i(S),ds=n(S,"LI",{});var px=s(ds);bre=n(px,"STRONG",{});var bGr=s(bre);Zeo=r(bGr,"mt5"),bGr.forEach(t),eoo=r(px," \u2014 "),bR=n(px,"A",{href:!0});var vGr=s(bR);ooo=r(vGr,"MT5Tokenizer"),vGr.forEach(t),roo=r(px," or "),vR=n(px,"A",{href:!0});var FGr=s(vR);too=r(FGr,"MT5TokenizerFast"),FGr.forEach(t),aoo=r(px," (mT5 model)"),px.forEach(t),noo=i(S),cs=n(S,"LI",{});var ux=s(cs);vre=n(ux,"STRONG",{});var TGr=s(vre);soo=r(TGr,"nystromformer"),TGr.forEach(t),loo=r(ux," \u2014 "),FR=n(ux,"A",{href:!0});var MGr=s(FR);ioo=r(MGr,"AlbertTokenizer"),MGr.forEach(t),doo=r(ux," or "),TR=n(ux,"A",{href:!0});var EGr=s(TR);coo=r(EGr,"AlbertTokenizerFast"),EGr.forEach(t),foo=r(ux," (Nystromformer model)"),ux.forEach(t),moo=i(S),fs=n(S,"LI",{});var _x=s(fs);Fre=n(_x,"STRONG",{});var CGr=s(Fre);goo=r(CGr,"openai-gpt"),CGr.forEach(t),hoo=r(_x," \u2014 "),MR=n(_x,"A",{href:!0});var wGr=s(MR);poo=r(wGr,"OpenAIGPTTokenizer"),wGr.forEach(t),uoo=r(_x," or "),ER=n(_x,"A",{href:!0});var AGr=s(ER);_oo=r(AGr,"OpenAIGPTTokenizerFast"),AGr.forEach(t),boo=r(_x," (OpenAI GPT model)"),_x.forEach(t),voo=i(S),ms=n(S,"LI",{});var bx=s(ms);Tre=n(bx,"STRONG",{});var yGr=s(Tre);Foo=r(yGr,"pegasus"),yGr.forEach(t),Too=r(bx," \u2014 "),CR=n(bx,"A",{href:!0});var LGr=s(CR);Moo=r(LGr,"PegasusTokenizer"),LGr.forEach(t),Eoo=r(bx," or "),wR=n(bx,"A",{href:!0});var xGr=s(wR);Coo=r(xGr,"PegasusTokenizerFast"),xGr.forEach(t),woo=r(bx," (Pegasus model)"),bx.forEach(t),Aoo=i(S),Eg=n(S,"LI",{});var $Ee=s(Eg);Mre=n($Ee,"STRONG",{});var $Gr=s(Mre);yoo=r($Gr,"perceiver"),$Gr.forEach(t),Loo=r($Ee," \u2014 "),AR=n($Ee,"A",{href:!0});var kGr=s(AR);xoo=r(kGr,"PerceiverTokenizer"),kGr.forEach(t),$oo=r($Ee," (Perceiver model)"),$Ee.forEach(t),koo=i(S),Cg=n(S,"LI",{});var kEe=s(Cg);Ere=n(kEe,"STRONG",{});var SGr=s(Ere);Soo=r(SGr,"phobert"),SGr.forEach(t),Roo=r(kEe," \u2014 "),yR=n(kEe,"A",{href:!0});var RGr=s(yR);Boo=r(RGr,"PhobertTokenizer"),RGr.forEach(t),Poo=r(kEe," (PhoBERT model)"),kEe.forEach(t),Ioo=i(S),wg=n(S,"LI",{});var SEe=s(wg);Cre=n(SEe,"STRONG",{});var BGr=s(Cre);qoo=r(BGr,"plbart"),BGr.forEach(t),Noo=r(SEe," \u2014 "),LR=n(SEe,"A",{href:!0});var PGr=s(LR);joo=r(PGr,"PLBartTokenizer"),PGr.forEach(t),Doo=r(SEe," (PLBart model)"),SEe.forEach(t),Goo=i(S),Ag=n(S,"LI",{});var REe=s(Ag);wre=n(REe,"STRONG",{});var IGr=s(wre);Ooo=r(IGr,"prophetnet"),IGr.forEach(t),Voo=r(REe," \u2014 "),xR=n(REe,"A",{href:!0});var qGr=s(xR);Xoo=r(qGr,"ProphetNetTokenizer"),qGr.forEach(t),zoo=r(REe," (ProphetNet model)"),REe.forEach(t),Qoo=i(S),gs=n(S,"LI",{});var vx=s(gs);Are=n(vx,"STRONG",{});var NGr=s(Are);Woo=r(NGr,"qdqbert"),NGr.forEach(t),Hoo=r(vx," \u2014 "),$R=n(vx,"A",{href:!0});var jGr=s($R);Uoo=r(jGr,"BertTokenizer"),jGr.forEach(t),Joo=r(vx," or "),kR=n(vx,"A",{href:!0});var DGr=s(kR);Yoo=r(DGr,"BertTokenizerFast"),DGr.forEach(t),Koo=r(vx," (QDQBert model)"),vx.forEach(t),Zoo=i(S),yg=n(S,"LI",{});var BEe=s(yg);yre=n(BEe,"STRONG",{});var GGr=s(yre);ero=r(GGr,"rag"),GGr.forEach(t),oro=r(BEe," \u2014 "),SR=n(BEe,"A",{href:!0});var OGr=s(SR);rro=r(OGr,"RagTokenizer"),OGr.forEach(t),tro=r(BEe," (RAG model)"),BEe.forEach(t),aro=i(S),hs=n(S,"LI",{});var Fx=s(hs);Lre=n(Fx,"STRONG",{});var VGr=s(Lre);nro=r(VGr,"realm"),VGr.forEach(t),sro=r(Fx," \u2014 "),RR=n(Fx,"A",{href:!0});var XGr=s(RR);lro=r(XGr,"RealmTokenizer"),XGr.forEach(t),iro=r(Fx," or "),BR=n(Fx,"A",{href:!0});var zGr=s(BR);dro=r(zGr,"RealmTokenizerFast"),zGr.forEach(t),cro=r(Fx," (Realm model)"),Fx.forEach(t),fro=i(S),ps=n(S,"LI",{});var Tx=s(ps);xre=n(Tx,"STRONG",{});var QGr=s(xre);mro=r(QGr,"reformer"),QGr.forEach(t),gro=r(Tx," \u2014 "),PR=n(Tx,"A",{href:!0});var WGr=s(PR);hro=r(WGr,"ReformerTokenizer"),WGr.forEach(t),pro=r(Tx," or "),IR=n(Tx,"A",{href:!0});var HGr=s(IR);uro=r(HGr,"ReformerTokenizerFast"),HGr.forEach(t),_ro=r(Tx," (Reformer model)"),Tx.forEach(t),bro=i(S),us=n(S,"LI",{});var Mx=s(us);$re=n(Mx,"STRONG",{});var UGr=s($re);vro=r(UGr,"rembert"),UGr.forEach(t),Fro=r(Mx," \u2014 "),qR=n(Mx,"A",{href:!0});var JGr=s(qR);Tro=r(JGr,"RemBertTokenizer"),JGr.forEach(t),Mro=r(Mx," or "),NR=n(Mx,"A",{href:!0});var YGr=s(NR);Ero=r(YGr,"RemBertTokenizerFast"),YGr.forEach(t),Cro=r(Mx," (RemBERT model)"),Mx.forEach(t),wro=i(S),_s=n(S,"LI",{});var Ex=s(_s);kre=n(Ex,"STRONG",{});var KGr=s(kre);Aro=r(KGr,"retribert"),KGr.forEach(t),yro=r(Ex," \u2014 "),jR=n(Ex,"A",{href:!0});var ZGr=s(jR);Lro=r(ZGr,"RetriBertTokenizer"),ZGr.forEach(t),xro=r(Ex," or "),DR=n(Ex,"A",{href:!0});var eOr=s(DR);$ro=r(eOr,"RetriBertTokenizerFast"),eOr.forEach(t),kro=r(Ex," (RetriBERT model)"),Ex.forEach(t),Sro=i(S),bs=n(S,"LI",{});var Cx=s(bs);Sre=n(Cx,"STRONG",{});var oOr=s(Sre);Rro=r(oOr,"roberta"),oOr.forEach(t),Bro=r(Cx," \u2014 "),GR=n(Cx,"A",{href:!0});var rOr=s(GR);Pro=r(rOr,"RobertaTokenizer"),rOr.forEach(t),Iro=r(Cx," or "),OR=n(Cx,"A",{href:!0});var tOr=s(OR);qro=r(tOr,"RobertaTokenizerFast"),tOr.forEach(t),Nro=r(Cx," (RoBERTa model)"),Cx.forEach(t),jro=i(S),vs=n(S,"LI",{});var wx=s(vs);Rre=n(wx,"STRONG",{});var aOr=s(Rre);Dro=r(aOr,"roformer"),aOr.forEach(t),Gro=r(wx," \u2014 "),VR=n(wx,"A",{href:!0});var nOr=s(VR);Oro=r(nOr,"RoFormerTokenizer"),nOr.forEach(t),Vro=r(wx," or "),XR=n(wx,"A",{href:!0});var sOr=s(XR);Xro=r(sOr,"RoFormerTokenizerFast"),sOr.forEach(t),zro=r(wx," (RoFormer model)"),wx.forEach(t),Qro=i(S),Lg=n(S,"LI",{});var PEe=s(Lg);Bre=n(PEe,"STRONG",{});var lOr=s(Bre);Wro=r(lOr,"speech_to_text"),lOr.forEach(t),Hro=r(PEe," \u2014 "),zR=n(PEe,"A",{href:!0});var iOr=s(zR);Uro=r(iOr,"Speech2TextTokenizer"),iOr.forEach(t),Jro=r(PEe," (Speech2Text model)"),PEe.forEach(t),Yro=i(S),xg=n(S,"LI",{});var IEe=s(xg);Pre=n(IEe,"STRONG",{});var dOr=s(Pre);Kro=r(dOr,"speech_to_text_2"),dOr.forEach(t),Zro=r(IEe," \u2014 "),QR=n(IEe,"A",{href:!0});var cOr=s(QR);eto=r(cOr,"Speech2Text2Tokenizer"),cOr.forEach(t),oto=r(IEe," (Speech2Text2 model)"),IEe.forEach(t),rto=i(S),Fs=n(S,"LI",{});var Ax=s(Fs);Ire=n(Ax,"STRONG",{});var fOr=s(Ire);tto=r(fOr,"splinter"),fOr.forEach(t),ato=r(Ax," \u2014 "),WR=n(Ax,"A",{href:!0});var mOr=s(WR);nto=r(mOr,"SplinterTokenizer"),mOr.forEach(t),sto=r(Ax," or "),HR=n(Ax,"A",{href:!0});var gOr=s(HR);lto=r(gOr,"SplinterTokenizerFast"),gOr.forEach(t),ito=r(Ax," (Splinter model)"),Ax.forEach(t),dto=i(S),Ts=n(S,"LI",{});var yx=s(Ts);qre=n(yx,"STRONG",{});var hOr=s(qre);cto=r(hOr,"squeezebert"),hOr.forEach(t),fto=r(yx," \u2014 "),UR=n(yx,"A",{href:!0});var pOr=s(UR);mto=r(pOr,"SqueezeBertTokenizer"),pOr.forEach(t),gto=r(yx," or "),JR=n(yx,"A",{href:!0});var uOr=s(JR);hto=r(uOr,"SqueezeBertTokenizerFast"),uOr.forEach(t),pto=r(yx," (SqueezeBERT model)"),yx.forEach(t),uto=i(S),Ms=n(S,"LI",{});var Lx=s(Ms);Nre=n(Lx,"STRONG",{});var _Or=s(Nre);_to=r(_Or,"t5"),_Or.forEach(t),bto=r(Lx," \u2014 "),YR=n(Lx,"A",{href:!0});var bOr=s(YR);vto=r(bOr,"T5Tokenizer"),bOr.forEach(t),Fto=r(Lx," or "),KR=n(Lx,"A",{href:!0});var vOr=s(KR);Tto=r(vOr,"T5TokenizerFast"),vOr.forEach(t),Mto=r(Lx," (T5 model)"),Lx.forEach(t),Eto=i(S),$g=n(S,"LI",{});var qEe=s($g);jre=n(qEe,"STRONG",{});var FOr=s(jre);Cto=r(FOr,"tapas"),FOr.forEach(t),wto=r(qEe," \u2014 "),ZR=n(qEe,"A",{href:!0});var TOr=s(ZR);Ato=r(TOr,"TapasTokenizer"),TOr.forEach(t),yto=r(qEe," (TAPAS model)"),qEe.forEach(t),Lto=i(S),kg=n(S,"LI",{});var NEe=s(kg);Dre=n(NEe,"STRONG",{});var MOr=s(Dre);xto=r(MOr,"tapex"),MOr.forEach(t),$to=r(NEe," \u2014 "),eB=n(NEe,"A",{href:!0});var EOr=s(eB);kto=r(EOr,"TapexTokenizer"),EOr.forEach(t),Sto=r(NEe," (TAPEX model)"),NEe.forEach(t),Rto=i(S),Sg=n(S,"LI",{});var jEe=s(Sg);Gre=n(jEe,"STRONG",{});var COr=s(Gre);Bto=r(COr,"transfo-xl"),COr.forEach(t),Pto=r(jEe," \u2014 "),oB=n(jEe,"A",{href:!0});var wOr=s(oB);Ito=r(wOr,"TransfoXLTokenizer"),wOr.forEach(t),qto=r(jEe," (Transformer-XL model)"),jEe.forEach(t),Nto=i(S),Es=n(S,"LI",{});var xx=s(Es);Ore=n(xx,"STRONG",{});var AOr=s(Ore);jto=r(AOr,"visual_bert"),AOr.forEach(t),Dto=r(xx," \u2014 "),rB=n(xx,"A",{href:!0});var yOr=s(rB);Gto=r(yOr,"BertTokenizer"),yOr.forEach(t),Oto=r(xx," or "),tB=n(xx,"A",{href:!0});var LOr=s(tB);Vto=r(LOr,"BertTokenizerFast"),LOr.forEach(t),Xto=r(xx," (VisualBert model)"),xx.forEach(t),zto=i(S),Rg=n(S,"LI",{});var DEe=s(Rg);Vre=n(DEe,"STRONG",{});var xOr=s(Vre);Qto=r(xOr,"wav2vec2"),xOr.forEach(t),Wto=r(DEe," \u2014 "),aB=n(DEe,"A",{href:!0});var $Or=s(aB);Hto=r($Or,"Wav2Vec2CTCTokenizer"),$Or.forEach(t),Uto=r(DEe," (Wav2Vec2 model)"),DEe.forEach(t),Jto=i(S),Bg=n(S,"LI",{});var GEe=s(Bg);Xre=n(GEe,"STRONG",{});var kOr=s(Xre);Yto=r(kOr,"wav2vec2_phoneme"),kOr.forEach(t),Kto=r(GEe," \u2014 "),nB=n(GEe,"A",{href:!0});var SOr=s(nB);Zto=r(SOr,"Wav2Vec2PhonemeCTCTokenizer"),SOr.forEach(t),eao=r(GEe," (Wav2Vec2Phoneme model)"),GEe.forEach(t),oao=i(S),Cs=n(S,"LI",{});var $x=s(Cs);zre=n($x,"STRONG",{});var ROr=s(zre);rao=r(ROr,"xglm"),ROr.forEach(t),tao=r($x," \u2014 "),sB=n($x,"A",{href:!0});var BOr=s(sB);aao=r(BOr,"XGLMTokenizer"),BOr.forEach(t),nao=r($x," or "),lB=n($x,"A",{href:!0});var POr=s(lB);sao=r(POr,"XGLMTokenizerFast"),POr.forEach(t),lao=r($x," (XGLM model)"),$x.forEach(t),iao=i(S),Pg=n(S,"LI",{});var OEe=s(Pg);Qre=n(OEe,"STRONG",{});var IOr=s(Qre);dao=r(IOr,"xlm"),IOr.forEach(t),cao=r(OEe," \u2014 "),iB=n(OEe,"A",{href:!0});var qOr=s(iB);fao=r(qOr,"XLMTokenizer"),qOr.forEach(t),mao=r(OEe," (XLM model)"),OEe.forEach(t),gao=i(S),Ig=n(S,"LI",{});var VEe=s(Ig);Wre=n(VEe,"STRONG",{});var NOr=s(Wre);hao=r(NOr,"xlm-prophetnet"),NOr.forEach(t),pao=r(VEe," \u2014 "),dB=n(VEe,"A",{href:!0});var jOr=s(dB);uao=r(jOr,"XLMProphetNetTokenizer"),jOr.forEach(t),_ao=r(VEe," (XLMProphetNet model)"),VEe.forEach(t),bao=i(S),ws=n(S,"LI",{});var kx=s(ws);Hre=n(kx,"STRONG",{});var DOr=s(Hre);vao=r(DOr,"xlm-roberta"),DOr.forEach(t),Fao=r(kx," \u2014 "),cB=n(kx,"A",{href:!0});var GOr=s(cB);Tao=r(GOr,"XLMRobertaTokenizer"),GOr.forEach(t),Mao=r(kx," or "),fB=n(kx,"A",{href:!0});var OOr=s(fB);Eao=r(OOr,"XLMRobertaTokenizerFast"),OOr.forEach(t),Cao=r(kx," (XLM-RoBERTa model)"),kx.forEach(t),wao=i(S),As=n(S,"LI",{});var Sx=s(As);Ure=n(Sx,"STRONG",{});var VOr=s(Ure);Aao=r(VOr,"xlm-roberta-xl"),VOr.forEach(t),yao=r(Sx," \u2014 "),mB=n(Sx,"A",{href:!0});var XOr=s(mB);Lao=r(XOr,"RobertaTokenizer"),XOr.forEach(t),xao=r(Sx," or "),gB=n(Sx,"A",{href:!0});var zOr=s(gB);$ao=r(zOr,"RobertaTokenizerFast"),zOr.forEach(t),kao=r(Sx," (XLM-RoBERTa-XL model)"),Sx.forEach(t),Sao=i(S),ys=n(S,"LI",{});var Rx=s(ys);Jre=n(Rx,"STRONG",{});var QOr=s(Jre);Rao=r(QOr,"xlnet"),QOr.forEach(t),Bao=r(Rx," \u2014 "),hB=n(Rx,"A",{href:!0});var WOr=s(hB);Pao=r(WOr,"XLNetTokenizer"),WOr.forEach(t),Iao=r(Rx," or "),pB=n(Rx,"A",{href:!0});var HOr=s(pB);qao=r(HOr,"XLNetTokenizerFast"),HOr.forEach(t),Nao=r(Rx," (XLNet model)"),Rx.forEach(t),jao=i(S),Ls=n(S,"LI",{});var Bx=s(Ls);Yre=n(Bx,"STRONG",{});var UOr=s(Yre);Dao=r(UOr,"yoso"),UOr.forEach(t),Gao=r(Bx," \u2014 "),uB=n(Bx,"A",{href:!0});var JOr=s(uB);Oao=r(JOr,"AlbertTokenizer"),JOr.forEach(t),Vao=r(Bx," or "),_B=n(Bx,"A",{href:!0});var YOr=s(_B);Xao=r(YOr,"AlbertTokenizerFast"),YOr.forEach(t),zao=r(Bx," (YOSO model)"),Bx.forEach(t),S.forEach(t),Qao=i(Rs),T(qg.$$.fragment,Rs),Rs.forEach(t),Wao=i(Ss),Ng=n(Ss,"DIV",{class:!0});var LIe=s(Ng);T(Dw.$$.fragment,LIe),Hao=i(LIe),Kre=n(LIe,"P",{});var KOr=s(Kre);Uao=r(KOr,"Register a new tokenizer in this mapping."),KOr.forEach(t),LIe.forEach(t),Ss.forEach(t),kBe=i(f),gi=n(f,"H2",{class:!0});var xIe=s(gi);jg=n(xIe,"A",{id:!0,class:!0,href:!0});var ZOr=s(jg);Zre=n(ZOr,"SPAN",{});var eVr=s(Zre);T(Gw.$$.fragment,eVr),eVr.forEach(t),ZOr.forEach(t),Jao=i(xIe),ete=n(xIe,"SPAN",{});var oVr=s(ete);Yao=r(oVr,"AutoFeatureExtractor"),oVr.forEach(t),xIe.forEach(t),SBe=i(f),Ao=n(f,"DIV",{class:!0});var Bs=s(Ao);T(Ow.$$.fragment,Bs),Kao=i(Bs),Vw=n(Bs,"P",{});var $Ie=s(Vw);Zao=r($Ie,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),bB=n($Ie,"A",{href:!0});var rVr=s(bB);eno=r(rVr,"AutoFeatureExtractor.from_pretrained()"),rVr.forEach(t),ono=r($Ie," class method."),$Ie.forEach(t),rno=i(Bs),Xw=n(Bs,"P",{});var kIe=s(Xw);tno=r(kIe,"This class cannot be instantiated directly using "),ote=n(kIe,"CODE",{});var tVr=s(ote);ano=r(tVr,"__init__()"),tVr.forEach(t),nno=r(kIe," (throws an error)."),kIe.forEach(t),sno=i(Bs),Qe=n(Bs,"DIV",{class:!0});var Ht=s(Qe);T(zw.$$.fragment,Ht),lno=i(Ht),rte=n(Ht,"P",{});var aVr=s(rte);ino=r(aVr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),aVr.forEach(t),dno=i(Ht),Ma=n(Ht,"P",{});var $C=s(Ma);cno=r($C,"The feature extractor class to instantiate is selected based on the "),tte=n($C,"CODE",{});var nVr=s(tte);fno=r(nVr,"model_type"),nVr.forEach(t),mno=r($C,` property of the config object
(either passed as an argument or loaded from `),ate=n($C,"CODE",{});var sVr=s(ate);gno=r(sVr,"pretrained_model_name_or_path"),sVr.forEach(t),hno=r($C,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),nte=n($C,"CODE",{});var lVr=s(nte);pno=r(lVr,"pretrained_model_name_or_path"),lVr.forEach(t),uno=r($C,":"),$C.forEach(t),_no=i(Ht),te=n(Ht,"UL",{});var se=s(te);Dg=n(se,"LI",{});var XEe=s(Dg);ste=n(XEe,"STRONG",{});var iVr=s(ste);bno=r(iVr,"beit"),iVr.forEach(t),vno=r(XEe," \u2014 "),vB=n(XEe,"A",{href:!0});var dVr=s(vB);Fno=r(dVr,"BeitFeatureExtractor"),dVr.forEach(t),Tno=r(XEe," (BEiT model)"),XEe.forEach(t),Mno=i(se),Gg=n(se,"LI",{});var zEe=s(Gg);lte=n(zEe,"STRONG",{});var cVr=s(lte);Eno=r(cVr,"clip"),cVr.forEach(t),Cno=r(zEe," \u2014 "),FB=n(zEe,"A",{href:!0});var fVr=s(FB);wno=r(fVr,"CLIPFeatureExtractor"),fVr.forEach(t),Ano=r(zEe," (CLIP model)"),zEe.forEach(t),yno=i(se),Og=n(se,"LI",{});var QEe=s(Og);ite=n(QEe,"STRONG",{});var mVr=s(ite);Lno=r(mVr,"convnext"),mVr.forEach(t),xno=r(QEe," \u2014 "),TB=n(QEe,"A",{href:!0});var gVr=s(TB);$no=r(gVr,"ConvNextFeatureExtractor"),gVr.forEach(t),kno=r(QEe," (ConvNext model)"),QEe.forEach(t),Sno=i(se),Vg=n(se,"LI",{});var WEe=s(Vg);dte=n(WEe,"STRONG",{});var hVr=s(dte);Rno=r(hVr,"data2vec-audio"),hVr.forEach(t),Bno=r(WEe," \u2014 "),MB=n(WEe,"A",{href:!0});var pVr=s(MB);Pno=r(pVr,"Wav2Vec2FeatureExtractor"),pVr.forEach(t),Ino=r(WEe," (Data2VecAudio model)"),WEe.forEach(t),qno=i(se),Xg=n(se,"LI",{});var HEe=s(Xg);cte=n(HEe,"STRONG",{});var uVr=s(cte);Nno=r(uVr,"data2vec-vision"),uVr.forEach(t),jno=r(HEe," \u2014 "),EB=n(HEe,"A",{href:!0});var _Vr=s(EB);Dno=r(_Vr,"BeitFeatureExtractor"),_Vr.forEach(t),Gno=r(HEe," (Data2VecVision model)"),HEe.forEach(t),Ono=i(se),zg=n(se,"LI",{});var UEe=s(zg);fte=n(UEe,"STRONG",{});var bVr=s(fte);Vno=r(bVr,"deit"),bVr.forEach(t),Xno=r(UEe," \u2014 "),CB=n(UEe,"A",{href:!0});var vVr=s(CB);zno=r(vVr,"DeiTFeatureExtractor"),vVr.forEach(t),Qno=r(UEe," (DeiT model)"),UEe.forEach(t),Wno=i(se),Qg=n(se,"LI",{});var JEe=s(Qg);mte=n(JEe,"STRONG",{});var FVr=s(mte);Hno=r(FVr,"detr"),FVr.forEach(t),Uno=r(JEe," \u2014 "),wB=n(JEe,"A",{href:!0});var TVr=s(wB);Jno=r(TVr,"DetrFeatureExtractor"),TVr.forEach(t),Yno=r(JEe," (DETR model)"),JEe.forEach(t),Kno=i(se),Wg=n(se,"LI",{});var YEe=s(Wg);gte=n(YEe,"STRONG",{});var MVr=s(gte);Zno=r(MVr,"dpt"),MVr.forEach(t),eso=r(YEe," \u2014 "),AB=n(YEe,"A",{href:!0});var EVr=s(AB);oso=r(EVr,"DPTFeatureExtractor"),EVr.forEach(t),rso=r(YEe," (DPT model)"),YEe.forEach(t),tso=i(se),Hg=n(se,"LI",{});var KEe=s(Hg);hte=n(KEe,"STRONG",{});var CVr=s(hte);aso=r(CVr,"glpn"),CVr.forEach(t),nso=r(KEe," \u2014 "),yB=n(KEe,"A",{href:!0});var wVr=s(yB);sso=r(wVr,"GLPNFeatureExtractor"),wVr.forEach(t),lso=r(KEe," (GLPN model)"),KEe.forEach(t),iso=i(se),Ug=n(se,"LI",{});var ZEe=s(Ug);pte=n(ZEe,"STRONG",{});var AVr=s(pte);dso=r(AVr,"hubert"),AVr.forEach(t),cso=r(ZEe," \u2014 "),LB=n(ZEe,"A",{href:!0});var yVr=s(LB);fso=r(yVr,"Wav2Vec2FeatureExtractor"),yVr.forEach(t),mso=r(ZEe," (Hubert model)"),ZEe.forEach(t),gso=i(se),Jg=n(se,"LI",{});var e5e=s(Jg);ute=n(e5e,"STRONG",{});var LVr=s(ute);hso=r(LVr,"layoutlmv2"),LVr.forEach(t),pso=r(e5e," \u2014 "),xB=n(e5e,"A",{href:!0});var xVr=s(xB);uso=r(xVr,"LayoutLMv2FeatureExtractor"),xVr.forEach(t),_so=r(e5e," (LayoutLMv2 model)"),e5e.forEach(t),bso=i(se),Yg=n(se,"LI",{});var o5e=s(Yg);_te=n(o5e,"STRONG",{});var $Vr=s(_te);vso=r($Vr,"maskformer"),$Vr.forEach(t),Fso=r(o5e," \u2014 "),$B=n(o5e,"A",{href:!0});var kVr=s($B);Tso=r(kVr,"MaskFormerFeatureExtractor"),kVr.forEach(t),Mso=r(o5e," (MaskFormer model)"),o5e.forEach(t),Eso=i(se),Kg=n(se,"LI",{});var r5e=s(Kg);bte=n(r5e,"STRONG",{});var SVr=s(bte);Cso=r(SVr,"perceiver"),SVr.forEach(t),wso=r(r5e," \u2014 "),kB=n(r5e,"A",{href:!0});var RVr=s(kB);Aso=r(RVr,"PerceiverFeatureExtractor"),RVr.forEach(t),yso=r(r5e," (Perceiver model)"),r5e.forEach(t),Lso=i(se),Zg=n(se,"LI",{});var t5e=s(Zg);vte=n(t5e,"STRONG",{});var BVr=s(vte);xso=r(BVr,"poolformer"),BVr.forEach(t),$so=r(t5e," \u2014 "),SB=n(t5e,"A",{href:!0});var PVr=s(SB);kso=r(PVr,"PoolFormerFeatureExtractor"),PVr.forEach(t),Sso=r(t5e," (PoolFormer model)"),t5e.forEach(t),Rso=i(se),eh=n(se,"LI",{});var a5e=s(eh);Fte=n(a5e,"STRONG",{});var IVr=s(Fte);Bso=r(IVr,"regnet"),IVr.forEach(t),Pso=r(a5e," \u2014 "),RB=n(a5e,"A",{href:!0});var qVr=s(RB);Iso=r(qVr,"ConvNextFeatureExtractor"),qVr.forEach(t),qso=r(a5e," (RegNet model)"),a5e.forEach(t),Nso=i(se),oh=n(se,"LI",{});var n5e=s(oh);Tte=n(n5e,"STRONG",{});var NVr=s(Tte);jso=r(NVr,"resnet"),NVr.forEach(t),Dso=r(n5e," \u2014 "),BB=n(n5e,"A",{href:!0});var jVr=s(BB);Gso=r(jVr,"ConvNextFeatureExtractor"),jVr.forEach(t),Oso=r(n5e," (ResNet model)"),n5e.forEach(t),Vso=i(se),rh=n(se,"LI",{});var s5e=s(rh);Mte=n(s5e,"STRONG",{});var DVr=s(Mte);Xso=r(DVr,"segformer"),DVr.forEach(t),zso=r(s5e," \u2014 "),PB=n(s5e,"A",{href:!0});var GVr=s(PB);Qso=r(GVr,"SegformerFeatureExtractor"),GVr.forEach(t),Wso=r(s5e," (SegFormer model)"),s5e.forEach(t),Hso=i(se),th=n(se,"LI",{});var l5e=s(th);Ete=n(l5e,"STRONG",{});var OVr=s(Ete);Uso=r(OVr,"speech_to_text"),OVr.forEach(t),Jso=r(l5e," \u2014 "),IB=n(l5e,"A",{href:!0});var VVr=s(IB);Yso=r(VVr,"Speech2TextFeatureExtractor"),VVr.forEach(t),Kso=r(l5e," (Speech2Text model)"),l5e.forEach(t),Zso=i(se),ah=n(se,"LI",{});var i5e=s(ah);Cte=n(i5e,"STRONG",{});var XVr=s(Cte);elo=r(XVr,"swin"),XVr.forEach(t),olo=r(i5e," \u2014 "),qB=n(i5e,"A",{href:!0});var zVr=s(qB);rlo=r(zVr,"ViTFeatureExtractor"),zVr.forEach(t),tlo=r(i5e," (Swin model)"),i5e.forEach(t),alo=i(se),nh=n(se,"LI",{});var d5e=s(nh);wte=n(d5e,"STRONG",{});var QVr=s(wte);nlo=r(QVr,"van"),QVr.forEach(t),slo=r(d5e," \u2014 "),NB=n(d5e,"A",{href:!0});var WVr=s(NB);llo=r(WVr,"ConvNextFeatureExtractor"),WVr.forEach(t),ilo=r(d5e," (VAN model)"),d5e.forEach(t),dlo=i(se),sh=n(se,"LI",{});var c5e=s(sh);Ate=n(c5e,"STRONG",{});var HVr=s(Ate);clo=r(HVr,"vit"),HVr.forEach(t),flo=r(c5e," \u2014 "),jB=n(c5e,"A",{href:!0});var UVr=s(jB);mlo=r(UVr,"ViTFeatureExtractor"),UVr.forEach(t),glo=r(c5e," (ViT model)"),c5e.forEach(t),hlo=i(se),lh=n(se,"LI",{});var f5e=s(lh);yte=n(f5e,"STRONG",{});var JVr=s(yte);plo=r(JVr,"vit_mae"),JVr.forEach(t),ulo=r(f5e," \u2014 "),DB=n(f5e,"A",{href:!0});var YVr=s(DB);_lo=r(YVr,"ViTFeatureExtractor"),YVr.forEach(t),blo=r(f5e," (ViTMAE model)"),f5e.forEach(t),vlo=i(se),ih=n(se,"LI",{});var m5e=s(ih);Lte=n(m5e,"STRONG",{});var KVr=s(Lte);Flo=r(KVr,"wav2vec2"),KVr.forEach(t),Tlo=r(m5e," \u2014 "),GB=n(m5e,"A",{href:!0});var ZVr=s(GB);Mlo=r(ZVr,"Wav2Vec2FeatureExtractor"),ZVr.forEach(t),Elo=r(m5e," (Wav2Vec2 model)"),m5e.forEach(t),Clo=i(se),dh=n(se,"LI",{});var g5e=s(dh);xte=n(g5e,"STRONG",{});var eXr=s(xte);wlo=r(eXr,"yolos"),eXr.forEach(t),Alo=r(g5e," \u2014 "),OB=n(g5e,"A",{href:!0});var oXr=s(OB);ylo=r(oXr,"YolosFeatureExtractor"),oXr.forEach(t),Llo=r(g5e," (YOLOS model)"),g5e.forEach(t),se.forEach(t),xlo=i(Ht),T(ch.$$.fragment,Ht),$lo=i(Ht),T(fh.$$.fragment,Ht),Ht.forEach(t),klo=i(Bs),mh=n(Bs,"DIV",{class:!0});var SIe=s(mh);T(Qw.$$.fragment,SIe),Slo=i(SIe),$te=n(SIe,"P",{});var rXr=s($te);Rlo=r(rXr,"Register a new feature extractor for this class."),rXr.forEach(t),SIe.forEach(t),Bs.forEach(t),RBe=i(f),hi=n(f,"H2",{class:!0});var RIe=s(hi);gh=n(RIe,"A",{id:!0,class:!0,href:!0});var tXr=s(gh);kte=n(tXr,"SPAN",{});var aXr=s(kte);T(Ww.$$.fragment,aXr),aXr.forEach(t),tXr.forEach(t),Blo=i(RIe),Ste=n(RIe,"SPAN",{});var nXr=s(Ste);Plo=r(nXr,"AutoProcessor"),nXr.forEach(t),RIe.forEach(t),BBe=i(f),yo=n(f,"DIV",{class:!0});var Ps=s(yo);T(Hw.$$.fragment,Ps),Ilo=i(Ps),Uw=n(Ps,"P",{});var BIe=s(Uw);qlo=r(BIe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),VB=n(BIe,"A",{href:!0});var sXr=s(VB);Nlo=r(sXr,"AutoProcessor.from_pretrained()"),sXr.forEach(t),jlo=r(BIe," class method."),BIe.forEach(t),Dlo=i(Ps),Jw=n(Ps,"P",{});var PIe=s(Jw);Glo=r(PIe,"This class cannot be instantiated directly using "),Rte=n(PIe,"CODE",{});var lXr=s(Rte);Olo=r(lXr,"__init__()"),lXr.forEach(t),Vlo=r(PIe," (throws an error)."),PIe.forEach(t),Xlo=i(Ps),We=n(Ps,"DIV",{class:!0});var Ut=s(We);T(Yw.$$.fragment,Ut),zlo=i(Ut),Bte=n(Ut,"P",{});var iXr=s(Bte);Qlo=r(iXr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),iXr.forEach(t),Wlo=i(Ut),pi=n(Ut,"P",{});var vY=s(pi);Hlo=r(vY,"The processor class to instantiate is selected based on the "),Pte=n(vY,"CODE",{});var dXr=s(Pte);Ulo=r(dXr,"model_type"),dXr.forEach(t),Jlo=r(vY,` property of the config object (either
passed as an argument or loaded from `),Ite=n(vY,"CODE",{});var cXr=s(Ite);Ylo=r(cXr,"pretrained_model_name_or_path"),cXr.forEach(t),Klo=r(vY," if possible):"),vY.forEach(t),Zlo=i(Ut),be=n(Ut,"UL",{});var Fe=s(be);hh=n(Fe,"LI",{});var h5e=s(hh);qte=n(h5e,"STRONG",{});var fXr=s(qte);eio=r(fXr,"clip"),fXr.forEach(t),oio=r(h5e," \u2014 "),XB=n(h5e,"A",{href:!0});var mXr=s(XB);rio=r(mXr,"CLIPProcessor"),mXr.forEach(t),tio=r(h5e," (CLIP model)"),h5e.forEach(t),aio=i(Fe),ph=n(Fe,"LI",{});var p5e=s(ph);Nte=n(p5e,"STRONG",{});var gXr=s(Nte);nio=r(gXr,"layoutlmv2"),gXr.forEach(t),sio=r(p5e," \u2014 "),zB=n(p5e,"A",{href:!0});var hXr=s(zB);lio=r(hXr,"LayoutLMv2Processor"),hXr.forEach(t),iio=r(p5e," (LayoutLMv2 model)"),p5e.forEach(t),dio=i(Fe),uh=n(Fe,"LI",{});var u5e=s(uh);jte=n(u5e,"STRONG",{});var pXr=s(jte);cio=r(pXr,"layoutxlm"),pXr.forEach(t),fio=r(u5e," \u2014 "),QB=n(u5e,"A",{href:!0});var uXr=s(QB);mio=r(uXr,"LayoutXLMProcessor"),uXr.forEach(t),gio=r(u5e," (LayoutXLM model)"),u5e.forEach(t),hio=i(Fe),_h=n(Fe,"LI",{});var _5e=s(_h);Dte=n(_5e,"STRONG",{});var _Xr=s(Dte);pio=r(_Xr,"sew"),_Xr.forEach(t),uio=r(_5e," \u2014 "),WB=n(_5e,"A",{href:!0});var bXr=s(WB);_io=r(bXr,"Wav2Vec2Processor"),bXr.forEach(t),bio=r(_5e," (SEW model)"),_5e.forEach(t),vio=i(Fe),bh=n(Fe,"LI",{});var b5e=s(bh);Gte=n(b5e,"STRONG",{});var vXr=s(Gte);Fio=r(vXr,"sew-d"),vXr.forEach(t),Tio=r(b5e," \u2014 "),HB=n(b5e,"A",{href:!0});var FXr=s(HB);Mio=r(FXr,"Wav2Vec2Processor"),FXr.forEach(t),Eio=r(b5e," (SEW-D model)"),b5e.forEach(t),Cio=i(Fe),vh=n(Fe,"LI",{});var v5e=s(vh);Ote=n(v5e,"STRONG",{});var TXr=s(Ote);wio=r(TXr,"speech_to_text"),TXr.forEach(t),Aio=r(v5e," \u2014 "),UB=n(v5e,"A",{href:!0});var MXr=s(UB);yio=r(MXr,"Speech2TextProcessor"),MXr.forEach(t),Lio=r(v5e," (Speech2Text model)"),v5e.forEach(t),xio=i(Fe),Fh=n(Fe,"LI",{});var F5e=s(Fh);Vte=n(F5e,"STRONG",{});var EXr=s(Vte);$io=r(EXr,"speech_to_text_2"),EXr.forEach(t),kio=r(F5e," \u2014 "),JB=n(F5e,"A",{href:!0});var CXr=s(JB);Sio=r(CXr,"Speech2Text2Processor"),CXr.forEach(t),Rio=r(F5e," (Speech2Text2 model)"),F5e.forEach(t),Bio=i(Fe),Th=n(Fe,"LI",{});var T5e=s(Th);Xte=n(T5e,"STRONG",{});var wXr=s(Xte);Pio=r(wXr,"trocr"),wXr.forEach(t),Iio=r(T5e," \u2014 "),YB=n(T5e,"A",{href:!0});var AXr=s(YB);qio=r(AXr,"TrOCRProcessor"),AXr.forEach(t),Nio=r(T5e," (TrOCR model)"),T5e.forEach(t),jio=i(Fe),Mh=n(Fe,"LI",{});var M5e=s(Mh);zte=n(M5e,"STRONG",{});var yXr=s(zte);Dio=r(yXr,"unispeech"),yXr.forEach(t),Gio=r(M5e," \u2014 "),KB=n(M5e,"A",{href:!0});var LXr=s(KB);Oio=r(LXr,"Wav2Vec2Processor"),LXr.forEach(t),Vio=r(M5e," (UniSpeech model)"),M5e.forEach(t),Xio=i(Fe),Eh=n(Fe,"LI",{});var E5e=s(Eh);Qte=n(E5e,"STRONG",{});var xXr=s(Qte);zio=r(xXr,"unispeech-sat"),xXr.forEach(t),Qio=r(E5e," \u2014 "),ZB=n(E5e,"A",{href:!0});var $Xr=s(ZB);Wio=r($Xr,"Wav2Vec2Processor"),$Xr.forEach(t),Hio=r(E5e," (UniSpeechSat model)"),E5e.forEach(t),Uio=i(Fe),Ch=n(Fe,"LI",{});var C5e=s(Ch);Wte=n(C5e,"STRONG",{});var kXr=s(Wte);Jio=r(kXr,"vilt"),kXr.forEach(t),Yio=r(C5e," \u2014 "),eP=n(C5e,"A",{href:!0});var SXr=s(eP);Kio=r(SXr,"ViltProcessor"),SXr.forEach(t),Zio=r(C5e," (ViLT model)"),C5e.forEach(t),edo=i(Fe),wh=n(Fe,"LI",{});var w5e=s(wh);Hte=n(w5e,"STRONG",{});var RXr=s(Hte);odo=r(RXr,"vision-text-dual-encoder"),RXr.forEach(t),rdo=r(w5e," \u2014 "),oP=n(w5e,"A",{href:!0});var BXr=s(oP);tdo=r(BXr,"VisionTextDualEncoderProcessor"),BXr.forEach(t),ado=r(w5e," (VisionTextDualEncoder model)"),w5e.forEach(t),ndo=i(Fe),Ah=n(Fe,"LI",{});var A5e=s(Ah);Ute=n(A5e,"STRONG",{});var PXr=s(Ute);sdo=r(PXr,"wav2vec2"),PXr.forEach(t),ldo=r(A5e," \u2014 "),rP=n(A5e,"A",{href:!0});var IXr=s(rP);ido=r(IXr,"Wav2Vec2Processor"),IXr.forEach(t),ddo=r(A5e," (Wav2Vec2 model)"),A5e.forEach(t),cdo=i(Fe),yh=n(Fe,"LI",{});var y5e=s(yh);Jte=n(y5e,"STRONG",{});var qXr=s(Jte);fdo=r(qXr,"wavlm"),qXr.forEach(t),mdo=r(y5e," \u2014 "),tP=n(y5e,"A",{href:!0});var NXr=s(tP);gdo=r(NXr,"Wav2Vec2Processor"),NXr.forEach(t),hdo=r(y5e," (WavLM model)"),y5e.forEach(t),Fe.forEach(t),pdo=i(Ut),T(Lh.$$.fragment,Ut),udo=i(Ut),T(xh.$$.fragment,Ut),Ut.forEach(t),_do=i(Ps),$h=n(Ps,"DIV",{class:!0});var IIe=s($h);T(Kw.$$.fragment,IIe),bdo=i(IIe),Yte=n(IIe,"P",{});var jXr=s(Yte);vdo=r(jXr,"Register a new processor for this class."),jXr.forEach(t),IIe.forEach(t),Ps.forEach(t),PBe=i(f),ui=n(f,"H2",{class:!0});var qIe=s(ui);kh=n(qIe,"A",{id:!0,class:!0,href:!0});var DXr=s(kh);Kte=n(DXr,"SPAN",{});var GXr=s(Kte);T(Zw.$$.fragment,GXr),GXr.forEach(t),DXr.forEach(t),Fdo=i(qIe),Zte=n(qIe,"SPAN",{});var OXr=s(Zte);Tdo=r(OXr,"AutoModel"),OXr.forEach(t),qIe.forEach(t),IBe=i(f),Lo=n(f,"DIV",{class:!0});var Is=s(Lo);T(eA.$$.fragment,Is),Mdo=i(Is),_i=n(Is,"P",{});var FY=s(_i);Edo=r(FY,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),aP=n(FY,"A",{href:!0});var VXr=s(aP);Cdo=r(VXr,"from_pretrained()"),VXr.forEach(t),wdo=r(FY," class method or the "),nP=n(FY,"A",{href:!0});var XXr=s(nP);Ado=r(XXr,"from_config()"),XXr.forEach(t),ydo=r(FY,` class
method.`),FY.forEach(t),Ldo=i(Is),oA=n(Is,"P",{});var NIe=s(oA);xdo=r(NIe,"This class cannot be instantiated directly using "),eae=n(NIe,"CODE",{});var zXr=s(eae);$do=r(zXr,"__init__()"),zXr.forEach(t),kdo=r(NIe," (throws an error)."),NIe.forEach(t),Sdo=i(Is),Zr=n(Is,"DIV",{class:!0});var kC=s(Zr);T(rA.$$.fragment,kC),Rdo=i(kC),oae=n(kC,"P",{});var QXr=s(oae);Bdo=r(QXr,"Instantiates one of the base model classes of the library from a configuration."),QXr.forEach(t),Pdo=i(kC),bi=n(kC,"P",{});var TY=s(bi);Ido=r(TY,`Note:
Loading a model from its configuration file does `),rae=n(TY,"STRONG",{});var WXr=s(rae);qdo=r(WXr,"not"),WXr.forEach(t),Ndo=r(TY,` load the model weights. It only affects the
model\u2019s configuration. Use `),sP=n(TY,"A",{href:!0});var HXr=s(sP);jdo=r(HXr,"from_pretrained()"),HXr.forEach(t),Ddo=r(TY," to load the model weights."),TY.forEach(t),Gdo=i(kC),T(Sh.$$.fragment,kC),kC.forEach(t),Odo=i(Is),He=n(Is,"DIV",{class:!0});var Jt=s(He);T(tA.$$.fragment,Jt),Vdo=i(Jt),tae=n(Jt,"P",{});var UXr=s(tae);Xdo=r(UXr,"Instantiate one of the base model classes of the library from a pretrained model."),UXr.forEach(t),zdo=i(Jt),Ea=n(Jt,"P",{});var SC=s(Ea);Qdo=r(SC,"The model class to instantiate is selected based on the "),aae=n(SC,"CODE",{});var JXr=s(aae);Wdo=r(JXr,"model_type"),JXr.forEach(t),Hdo=r(SC,` property of the config object (either
passed as an argument or loaded from `),nae=n(SC,"CODE",{});var YXr=s(nae);Udo=r(YXr,"pretrained_model_name_or_path"),YXr.forEach(t),Jdo=r(SC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sae=n(SC,"CODE",{});var KXr=s(sae);Ydo=r(KXr,"pretrained_model_name_or_path"),KXr.forEach(t),Kdo=r(SC,":"),SC.forEach(t),Zdo=i(Jt),x=n(Jt,"UL",{});var $=s(x);Rh=n($,"LI",{});var L5e=s(Rh);lae=n(L5e,"STRONG",{});var ZXr=s(lae);eco=r(ZXr,"albert"),ZXr.forEach(t),oco=r(L5e," \u2014 "),lP=n(L5e,"A",{href:!0});var ezr=s(lP);rco=r(ezr,"AlbertModel"),ezr.forEach(t),tco=r(L5e," (ALBERT model)"),L5e.forEach(t),aco=i($),Bh=n($,"LI",{});var x5e=s(Bh);iae=n(x5e,"STRONG",{});var ozr=s(iae);nco=r(ozr,"bart"),ozr.forEach(t),sco=r(x5e," \u2014 "),iP=n(x5e,"A",{href:!0});var rzr=s(iP);lco=r(rzr,"BartModel"),rzr.forEach(t),ico=r(x5e," (BART model)"),x5e.forEach(t),dco=i($),Ph=n($,"LI",{});var $5e=s(Ph);dae=n($5e,"STRONG",{});var tzr=s(dae);cco=r(tzr,"beit"),tzr.forEach(t),fco=r($5e," \u2014 "),dP=n($5e,"A",{href:!0});var azr=s(dP);mco=r(azr,"BeitModel"),azr.forEach(t),gco=r($5e," (BEiT model)"),$5e.forEach(t),hco=i($),Ih=n($,"LI",{});var k5e=s(Ih);cae=n(k5e,"STRONG",{});var nzr=s(cae);pco=r(nzr,"bert"),nzr.forEach(t),uco=r(k5e," \u2014 "),cP=n(k5e,"A",{href:!0});var szr=s(cP);_co=r(szr,"BertModel"),szr.forEach(t),bco=r(k5e," (BERT model)"),k5e.forEach(t),vco=i($),qh=n($,"LI",{});var S5e=s(qh);fae=n(S5e,"STRONG",{});var lzr=s(fae);Fco=r(lzr,"bert-generation"),lzr.forEach(t),Tco=r(S5e," \u2014 "),fP=n(S5e,"A",{href:!0});var izr=s(fP);Mco=r(izr,"BertGenerationEncoder"),izr.forEach(t),Eco=r(S5e," (Bert Generation model)"),S5e.forEach(t),Cco=i($),Nh=n($,"LI",{});var R5e=s(Nh);mae=n(R5e,"STRONG",{});var dzr=s(mae);wco=r(dzr,"big_bird"),dzr.forEach(t),Aco=r(R5e," \u2014 "),mP=n(R5e,"A",{href:!0});var czr=s(mP);yco=r(czr,"BigBirdModel"),czr.forEach(t),Lco=r(R5e," (BigBird model)"),R5e.forEach(t),xco=i($),jh=n($,"LI",{});var B5e=s(jh);gae=n(B5e,"STRONG",{});var fzr=s(gae);$co=r(fzr,"bigbird_pegasus"),fzr.forEach(t),kco=r(B5e," \u2014 "),gP=n(B5e,"A",{href:!0});var mzr=s(gP);Sco=r(mzr,"BigBirdPegasusModel"),mzr.forEach(t),Rco=r(B5e," (BigBirdPegasus model)"),B5e.forEach(t),Bco=i($),Dh=n($,"LI",{});var P5e=s(Dh);hae=n(P5e,"STRONG",{});var gzr=s(hae);Pco=r(gzr,"blenderbot"),gzr.forEach(t),Ico=r(P5e," \u2014 "),hP=n(P5e,"A",{href:!0});var hzr=s(hP);qco=r(hzr,"BlenderbotModel"),hzr.forEach(t),Nco=r(P5e," (Blenderbot model)"),P5e.forEach(t),jco=i($),Gh=n($,"LI",{});var I5e=s(Gh);pae=n(I5e,"STRONG",{});var pzr=s(pae);Dco=r(pzr,"blenderbot-small"),pzr.forEach(t),Gco=r(I5e," \u2014 "),pP=n(I5e,"A",{href:!0});var uzr=s(pP);Oco=r(uzr,"BlenderbotSmallModel"),uzr.forEach(t),Vco=r(I5e," (BlenderbotSmall model)"),I5e.forEach(t),Xco=i($),Oh=n($,"LI",{});var q5e=s(Oh);uae=n(q5e,"STRONG",{});var _zr=s(uae);zco=r(_zr,"camembert"),_zr.forEach(t),Qco=r(q5e," \u2014 "),uP=n(q5e,"A",{href:!0});var bzr=s(uP);Wco=r(bzr,"CamembertModel"),bzr.forEach(t),Hco=r(q5e," (CamemBERT model)"),q5e.forEach(t),Uco=i($),Vh=n($,"LI",{});var N5e=s(Vh);_ae=n(N5e,"STRONG",{});var vzr=s(_ae);Jco=r(vzr,"canine"),vzr.forEach(t),Yco=r(N5e," \u2014 "),_P=n(N5e,"A",{href:!0});var Fzr=s(_P);Kco=r(Fzr,"CanineModel"),Fzr.forEach(t),Zco=r(N5e," (Canine model)"),N5e.forEach(t),efo=i($),Xh=n($,"LI",{});var j5e=s(Xh);bae=n(j5e,"STRONG",{});var Tzr=s(bae);ofo=r(Tzr,"clip"),Tzr.forEach(t),rfo=r(j5e," \u2014 "),bP=n(j5e,"A",{href:!0});var Mzr=s(bP);tfo=r(Mzr,"CLIPModel"),Mzr.forEach(t),afo=r(j5e," (CLIP model)"),j5e.forEach(t),nfo=i($),zh=n($,"LI",{});var D5e=s(zh);vae=n(D5e,"STRONG",{});var Ezr=s(vae);sfo=r(Ezr,"convbert"),Ezr.forEach(t),lfo=r(D5e," \u2014 "),vP=n(D5e,"A",{href:!0});var Czr=s(vP);ifo=r(Czr,"ConvBertModel"),Czr.forEach(t),dfo=r(D5e," (ConvBERT model)"),D5e.forEach(t),cfo=i($),Qh=n($,"LI",{});var G5e=s(Qh);Fae=n(G5e,"STRONG",{});var wzr=s(Fae);ffo=r(wzr,"convnext"),wzr.forEach(t),mfo=r(G5e," \u2014 "),FP=n(G5e,"A",{href:!0});var Azr=s(FP);gfo=r(Azr,"ConvNextModel"),Azr.forEach(t),hfo=r(G5e," (ConvNext model)"),G5e.forEach(t),pfo=i($),Wh=n($,"LI",{});var O5e=s(Wh);Tae=n(O5e,"STRONG",{});var yzr=s(Tae);ufo=r(yzr,"ctrl"),yzr.forEach(t),_fo=r(O5e," \u2014 "),TP=n(O5e,"A",{href:!0});var Lzr=s(TP);bfo=r(Lzr,"CTRLModel"),Lzr.forEach(t),vfo=r(O5e," (CTRL model)"),O5e.forEach(t),Ffo=i($),Hh=n($,"LI",{});var V5e=s(Hh);Mae=n(V5e,"STRONG",{});var xzr=s(Mae);Tfo=r(xzr,"data2vec-audio"),xzr.forEach(t),Mfo=r(V5e," \u2014 "),MP=n(V5e,"A",{href:!0});var $zr=s(MP);Efo=r($zr,"Data2VecAudioModel"),$zr.forEach(t),Cfo=r(V5e," (Data2VecAudio model)"),V5e.forEach(t),wfo=i($),Uh=n($,"LI",{});var X5e=s(Uh);Eae=n(X5e,"STRONG",{});var kzr=s(Eae);Afo=r(kzr,"data2vec-text"),kzr.forEach(t),yfo=r(X5e," \u2014 "),EP=n(X5e,"A",{href:!0});var Szr=s(EP);Lfo=r(Szr,"Data2VecTextModel"),Szr.forEach(t),xfo=r(X5e," (Data2VecText model)"),X5e.forEach(t),$fo=i($),Jh=n($,"LI",{});var z5e=s(Jh);Cae=n(z5e,"STRONG",{});var Rzr=s(Cae);kfo=r(Rzr,"data2vec-vision"),Rzr.forEach(t),Sfo=r(z5e," \u2014 "),CP=n(z5e,"A",{href:!0});var Bzr=s(CP);Rfo=r(Bzr,"Data2VecVisionModel"),Bzr.forEach(t),Bfo=r(z5e," (Data2VecVision model)"),z5e.forEach(t),Pfo=i($),Yh=n($,"LI",{});var Q5e=s(Yh);wae=n(Q5e,"STRONG",{});var Pzr=s(wae);Ifo=r(Pzr,"deberta"),Pzr.forEach(t),qfo=r(Q5e," \u2014 "),wP=n(Q5e,"A",{href:!0});var Izr=s(wP);Nfo=r(Izr,"DebertaModel"),Izr.forEach(t),jfo=r(Q5e," (DeBERTa model)"),Q5e.forEach(t),Dfo=i($),Kh=n($,"LI",{});var W5e=s(Kh);Aae=n(W5e,"STRONG",{});var qzr=s(Aae);Gfo=r(qzr,"deberta-v2"),qzr.forEach(t),Ofo=r(W5e," \u2014 "),AP=n(W5e,"A",{href:!0});var Nzr=s(AP);Vfo=r(Nzr,"DebertaV2Model"),Nzr.forEach(t),Xfo=r(W5e," (DeBERTa-v2 model)"),W5e.forEach(t),zfo=i($),Zh=n($,"LI",{});var H5e=s(Zh);yae=n(H5e,"STRONG",{});var jzr=s(yae);Qfo=r(jzr,"decision_transformer"),jzr.forEach(t),Wfo=r(H5e," \u2014 "),yP=n(H5e,"A",{href:!0});var Dzr=s(yP);Hfo=r(Dzr,"DecisionTransformerModel"),Dzr.forEach(t),Ufo=r(H5e," (Decision Transformer model)"),H5e.forEach(t),Jfo=i($),ep=n($,"LI",{});var U5e=s(ep);Lae=n(U5e,"STRONG",{});var Gzr=s(Lae);Yfo=r(Gzr,"deit"),Gzr.forEach(t),Kfo=r(U5e," \u2014 "),LP=n(U5e,"A",{href:!0});var Ozr=s(LP);Zfo=r(Ozr,"DeiTModel"),Ozr.forEach(t),emo=r(U5e," (DeiT model)"),U5e.forEach(t),omo=i($),op=n($,"LI",{});var J5e=s(op);xae=n(J5e,"STRONG",{});var Vzr=s(xae);rmo=r(Vzr,"detr"),Vzr.forEach(t),tmo=r(J5e," \u2014 "),xP=n(J5e,"A",{href:!0});var Xzr=s(xP);amo=r(Xzr,"DetrModel"),Xzr.forEach(t),nmo=r(J5e," (DETR model)"),J5e.forEach(t),smo=i($),rp=n($,"LI",{});var Y5e=s(rp);$ae=n(Y5e,"STRONG",{});var zzr=s($ae);lmo=r(zzr,"distilbert"),zzr.forEach(t),imo=r(Y5e," \u2014 "),$P=n(Y5e,"A",{href:!0});var Qzr=s($P);dmo=r(Qzr,"DistilBertModel"),Qzr.forEach(t),cmo=r(Y5e," (DistilBERT model)"),Y5e.forEach(t),fmo=i($),tp=n($,"LI",{});var K5e=s(tp);kae=n(K5e,"STRONG",{});var Wzr=s(kae);mmo=r(Wzr,"dpr"),Wzr.forEach(t),gmo=r(K5e," \u2014 "),kP=n(K5e,"A",{href:!0});var Hzr=s(kP);hmo=r(Hzr,"DPRQuestionEncoder"),Hzr.forEach(t),pmo=r(K5e," (DPR model)"),K5e.forEach(t),umo=i($),ap=n($,"LI",{});var Z5e=s(ap);Sae=n(Z5e,"STRONG",{});var Uzr=s(Sae);_mo=r(Uzr,"dpt"),Uzr.forEach(t),bmo=r(Z5e," \u2014 "),SP=n(Z5e,"A",{href:!0});var Jzr=s(SP);vmo=r(Jzr,"DPTModel"),Jzr.forEach(t),Fmo=r(Z5e," (DPT model)"),Z5e.forEach(t),Tmo=i($),np=n($,"LI",{});var eCe=s(np);Rae=n(eCe,"STRONG",{});var Yzr=s(Rae);Mmo=r(Yzr,"electra"),Yzr.forEach(t),Emo=r(eCe," \u2014 "),RP=n(eCe,"A",{href:!0});var Kzr=s(RP);Cmo=r(Kzr,"ElectraModel"),Kzr.forEach(t),wmo=r(eCe," (ELECTRA model)"),eCe.forEach(t),Amo=i($),sp=n($,"LI",{});var oCe=s(sp);Bae=n(oCe,"STRONG",{});var Zzr=s(Bae);ymo=r(Zzr,"flaubert"),Zzr.forEach(t),Lmo=r(oCe," \u2014 "),BP=n(oCe,"A",{href:!0});var eQr=s(BP);xmo=r(eQr,"FlaubertModel"),eQr.forEach(t),$mo=r(oCe," (FlauBERT model)"),oCe.forEach(t),kmo=i($),lp=n($,"LI",{});var rCe=s(lp);Pae=n(rCe,"STRONG",{});var oQr=s(Pae);Smo=r(oQr,"fnet"),oQr.forEach(t),Rmo=r(rCe," \u2014 "),PP=n(rCe,"A",{href:!0});var rQr=s(PP);Bmo=r(rQr,"FNetModel"),rQr.forEach(t),Pmo=r(rCe," (FNet model)"),rCe.forEach(t),Imo=i($),ip=n($,"LI",{});var tCe=s(ip);Iae=n(tCe,"STRONG",{});var tQr=s(Iae);qmo=r(tQr,"fsmt"),tQr.forEach(t),Nmo=r(tCe," \u2014 "),IP=n(tCe,"A",{href:!0});var aQr=s(IP);jmo=r(aQr,"FSMTModel"),aQr.forEach(t),Dmo=r(tCe," (FairSeq Machine-Translation model)"),tCe.forEach(t),Gmo=i($),xs=n($,"LI",{});var Px=s(xs);qae=n(Px,"STRONG",{});var nQr=s(qae);Omo=r(nQr,"funnel"),nQr.forEach(t),Vmo=r(Px," \u2014 "),qP=n(Px,"A",{href:!0});var sQr=s(qP);Xmo=r(sQr,"FunnelModel"),sQr.forEach(t),zmo=r(Px," or "),NP=n(Px,"A",{href:!0});var lQr=s(NP);Qmo=r(lQr,"FunnelBaseModel"),lQr.forEach(t),Wmo=r(Px," (Funnel Transformer model)"),Px.forEach(t),Hmo=i($),dp=n($,"LI",{});var aCe=s(dp);Nae=n(aCe,"STRONG",{});var iQr=s(Nae);Umo=r(iQr,"glpn"),iQr.forEach(t),Jmo=r(aCe," \u2014 "),jP=n(aCe,"A",{href:!0});var dQr=s(jP);Ymo=r(dQr,"GLPNModel"),dQr.forEach(t),Kmo=r(aCe," (GLPN model)"),aCe.forEach(t),Zmo=i($),cp=n($,"LI",{});var nCe=s(cp);jae=n(nCe,"STRONG",{});var cQr=s(jae);ego=r(cQr,"gpt2"),cQr.forEach(t),ogo=r(nCe," \u2014 "),DP=n(nCe,"A",{href:!0});var fQr=s(DP);rgo=r(fQr,"GPT2Model"),fQr.forEach(t),tgo=r(nCe," (OpenAI GPT-2 model)"),nCe.forEach(t),ago=i($),fp=n($,"LI",{});var sCe=s(fp);Dae=n(sCe,"STRONG",{});var mQr=s(Dae);ngo=r(mQr,"gpt_neo"),mQr.forEach(t),sgo=r(sCe," \u2014 "),GP=n(sCe,"A",{href:!0});var gQr=s(GP);lgo=r(gQr,"GPTNeoModel"),gQr.forEach(t),igo=r(sCe," (GPT Neo model)"),sCe.forEach(t),dgo=i($),mp=n($,"LI",{});var lCe=s(mp);Gae=n(lCe,"STRONG",{});var hQr=s(Gae);cgo=r(hQr,"gptj"),hQr.forEach(t),fgo=r(lCe," \u2014 "),OP=n(lCe,"A",{href:!0});var pQr=s(OP);mgo=r(pQr,"GPTJModel"),pQr.forEach(t),ggo=r(lCe," (GPT-J model)"),lCe.forEach(t),hgo=i($),gp=n($,"LI",{});var iCe=s(gp);Oae=n(iCe,"STRONG",{});var uQr=s(Oae);pgo=r(uQr,"hubert"),uQr.forEach(t),ugo=r(iCe," \u2014 "),VP=n(iCe,"A",{href:!0});var _Qr=s(VP);_go=r(_Qr,"HubertModel"),_Qr.forEach(t),bgo=r(iCe," (Hubert model)"),iCe.forEach(t),vgo=i($),hp=n($,"LI",{});var dCe=s(hp);Vae=n(dCe,"STRONG",{});var bQr=s(Vae);Fgo=r(bQr,"ibert"),bQr.forEach(t),Tgo=r(dCe," \u2014 "),XP=n(dCe,"A",{href:!0});var vQr=s(XP);Mgo=r(vQr,"IBertModel"),vQr.forEach(t),Ego=r(dCe," (I-BERT model)"),dCe.forEach(t),Cgo=i($),pp=n($,"LI",{});var cCe=s(pp);Xae=n(cCe,"STRONG",{});var FQr=s(Xae);wgo=r(FQr,"imagegpt"),FQr.forEach(t),Ago=r(cCe," \u2014 "),zP=n(cCe,"A",{href:!0});var TQr=s(zP);ygo=r(TQr,"ImageGPTModel"),TQr.forEach(t),Lgo=r(cCe," (ImageGPT model)"),cCe.forEach(t),xgo=i($),up=n($,"LI",{});var fCe=s(up);zae=n(fCe,"STRONG",{});var MQr=s(zae);$go=r(MQr,"layoutlm"),MQr.forEach(t),kgo=r(fCe," \u2014 "),QP=n(fCe,"A",{href:!0});var EQr=s(QP);Sgo=r(EQr,"LayoutLMModel"),EQr.forEach(t),Rgo=r(fCe," (LayoutLM model)"),fCe.forEach(t),Bgo=i($),_p=n($,"LI",{});var mCe=s(_p);Qae=n(mCe,"STRONG",{});var CQr=s(Qae);Pgo=r(CQr,"layoutlmv2"),CQr.forEach(t),Igo=r(mCe," \u2014 "),WP=n(mCe,"A",{href:!0});var wQr=s(WP);qgo=r(wQr,"LayoutLMv2Model"),wQr.forEach(t),Ngo=r(mCe," (LayoutLMv2 model)"),mCe.forEach(t),jgo=i($),bp=n($,"LI",{});var gCe=s(bp);Wae=n(gCe,"STRONG",{});var AQr=s(Wae);Dgo=r(AQr,"led"),AQr.forEach(t),Ggo=r(gCe," \u2014 "),HP=n(gCe,"A",{href:!0});var yQr=s(HP);Ogo=r(yQr,"LEDModel"),yQr.forEach(t),Vgo=r(gCe," (LED model)"),gCe.forEach(t),Xgo=i($),vp=n($,"LI",{});var hCe=s(vp);Hae=n(hCe,"STRONG",{});var LQr=s(Hae);zgo=r(LQr,"longformer"),LQr.forEach(t),Qgo=r(hCe," \u2014 "),UP=n(hCe,"A",{href:!0});var xQr=s(UP);Wgo=r(xQr,"LongformerModel"),xQr.forEach(t),Hgo=r(hCe," (Longformer model)"),hCe.forEach(t),Ugo=i($),Fp=n($,"LI",{});var pCe=s(Fp);Uae=n(pCe,"STRONG",{});var $Qr=s(Uae);Jgo=r($Qr,"luke"),$Qr.forEach(t),Ygo=r(pCe," \u2014 "),JP=n(pCe,"A",{href:!0});var kQr=s(JP);Kgo=r(kQr,"LukeModel"),kQr.forEach(t),Zgo=r(pCe," (LUKE model)"),pCe.forEach(t),eho=i($),Tp=n($,"LI",{});var uCe=s(Tp);Jae=n(uCe,"STRONG",{});var SQr=s(Jae);oho=r(SQr,"lxmert"),SQr.forEach(t),rho=r(uCe," \u2014 "),YP=n(uCe,"A",{href:!0});var RQr=s(YP);tho=r(RQr,"LxmertModel"),RQr.forEach(t),aho=r(uCe," (LXMERT model)"),uCe.forEach(t),nho=i($),Mp=n($,"LI",{});var _Ce=s(Mp);Yae=n(_Ce,"STRONG",{});var BQr=s(Yae);sho=r(BQr,"m2m_100"),BQr.forEach(t),lho=r(_Ce," \u2014 "),KP=n(_Ce,"A",{href:!0});var PQr=s(KP);iho=r(PQr,"M2M100Model"),PQr.forEach(t),dho=r(_Ce," (M2M100 model)"),_Ce.forEach(t),cho=i($),Ep=n($,"LI",{});var bCe=s(Ep);Kae=n(bCe,"STRONG",{});var IQr=s(Kae);fho=r(IQr,"marian"),IQr.forEach(t),mho=r(bCe," \u2014 "),ZP=n(bCe,"A",{href:!0});var qQr=s(ZP);gho=r(qQr,"MarianModel"),qQr.forEach(t),hho=r(bCe," (Marian model)"),bCe.forEach(t),pho=i($),Cp=n($,"LI",{});var vCe=s(Cp);Zae=n(vCe,"STRONG",{});var NQr=s(Zae);uho=r(NQr,"maskformer"),NQr.forEach(t),_ho=r(vCe," \u2014 "),eI=n(vCe,"A",{href:!0});var jQr=s(eI);bho=r(jQr,"MaskFormerModel"),jQr.forEach(t),vho=r(vCe," (MaskFormer model)"),vCe.forEach(t),Fho=i($),wp=n($,"LI",{});var FCe=s(wp);ene=n(FCe,"STRONG",{});var DQr=s(ene);Tho=r(DQr,"mbart"),DQr.forEach(t),Mho=r(FCe," \u2014 "),oI=n(FCe,"A",{href:!0});var GQr=s(oI);Eho=r(GQr,"MBartModel"),GQr.forEach(t),Cho=r(FCe," (mBART model)"),FCe.forEach(t),who=i($),Ap=n($,"LI",{});var TCe=s(Ap);one=n(TCe,"STRONG",{});var OQr=s(one);Aho=r(OQr,"megatron-bert"),OQr.forEach(t),yho=r(TCe," \u2014 "),rI=n(TCe,"A",{href:!0});var VQr=s(rI);Lho=r(VQr,"MegatronBertModel"),VQr.forEach(t),xho=r(TCe," (MegatronBert model)"),TCe.forEach(t),$ho=i($),yp=n($,"LI",{});var MCe=s(yp);rne=n(MCe,"STRONG",{});var XQr=s(rne);kho=r(XQr,"mobilebert"),XQr.forEach(t),Sho=r(MCe," \u2014 "),tI=n(MCe,"A",{href:!0});var zQr=s(tI);Rho=r(zQr,"MobileBertModel"),zQr.forEach(t),Bho=r(MCe," (MobileBERT model)"),MCe.forEach(t),Pho=i($),Lp=n($,"LI",{});var ECe=s(Lp);tne=n(ECe,"STRONG",{});var QQr=s(tne);Iho=r(QQr,"mpnet"),QQr.forEach(t),qho=r(ECe," \u2014 "),aI=n(ECe,"A",{href:!0});var WQr=s(aI);Nho=r(WQr,"MPNetModel"),WQr.forEach(t),jho=r(ECe," (MPNet model)"),ECe.forEach(t),Dho=i($),xp=n($,"LI",{});var CCe=s(xp);ane=n(CCe,"STRONG",{});var HQr=s(ane);Gho=r(HQr,"mt5"),HQr.forEach(t),Oho=r(CCe," \u2014 "),nI=n(CCe,"A",{href:!0});var UQr=s(nI);Vho=r(UQr,"MT5Model"),UQr.forEach(t),Xho=r(CCe," (mT5 model)"),CCe.forEach(t),zho=i($),$p=n($,"LI",{});var wCe=s($p);nne=n(wCe,"STRONG",{});var JQr=s(nne);Qho=r(JQr,"nystromformer"),JQr.forEach(t),Who=r(wCe," \u2014 "),sI=n(wCe,"A",{href:!0});var YQr=s(sI);Hho=r(YQr,"NystromformerModel"),YQr.forEach(t),Uho=r(wCe," (Nystromformer model)"),wCe.forEach(t),Jho=i($),kp=n($,"LI",{});var ACe=s(kp);sne=n(ACe,"STRONG",{});var KQr=s(sne);Yho=r(KQr,"openai-gpt"),KQr.forEach(t),Kho=r(ACe," \u2014 "),lI=n(ACe,"A",{href:!0});var ZQr=s(lI);Zho=r(ZQr,"OpenAIGPTModel"),ZQr.forEach(t),epo=r(ACe," (OpenAI GPT model)"),ACe.forEach(t),opo=i($),Sp=n($,"LI",{});var yCe=s(Sp);lne=n(yCe,"STRONG",{});var eWr=s(lne);rpo=r(eWr,"pegasus"),eWr.forEach(t),tpo=r(yCe," \u2014 "),iI=n(yCe,"A",{href:!0});var oWr=s(iI);apo=r(oWr,"PegasusModel"),oWr.forEach(t),npo=r(yCe," (Pegasus model)"),yCe.forEach(t),spo=i($),Rp=n($,"LI",{});var LCe=s(Rp);ine=n(LCe,"STRONG",{});var rWr=s(ine);lpo=r(rWr,"perceiver"),rWr.forEach(t),ipo=r(LCe," \u2014 "),dI=n(LCe,"A",{href:!0});var tWr=s(dI);dpo=r(tWr,"PerceiverModel"),tWr.forEach(t),cpo=r(LCe," (Perceiver model)"),LCe.forEach(t),fpo=i($),Bp=n($,"LI",{});var xCe=s(Bp);dne=n(xCe,"STRONG",{});var aWr=s(dne);mpo=r(aWr,"plbart"),aWr.forEach(t),gpo=r(xCe," \u2014 "),cI=n(xCe,"A",{href:!0});var nWr=s(cI);hpo=r(nWr,"PLBartModel"),nWr.forEach(t),ppo=r(xCe," (PLBart model)"),xCe.forEach(t),upo=i($),Pp=n($,"LI",{});var $Ce=s(Pp);cne=n($Ce,"STRONG",{});var sWr=s(cne);_po=r(sWr,"poolformer"),sWr.forEach(t),bpo=r($Ce," \u2014 "),fI=n($Ce,"A",{href:!0});var lWr=s(fI);vpo=r(lWr,"PoolFormerModel"),lWr.forEach(t),Fpo=r($Ce," (PoolFormer model)"),$Ce.forEach(t),Tpo=i($),Ip=n($,"LI",{});var kCe=s(Ip);fne=n(kCe,"STRONG",{});var iWr=s(fne);Mpo=r(iWr,"prophetnet"),iWr.forEach(t),Epo=r(kCe," \u2014 "),mI=n(kCe,"A",{href:!0});var dWr=s(mI);Cpo=r(dWr,"ProphetNetModel"),dWr.forEach(t),wpo=r(kCe," (ProphetNet model)"),kCe.forEach(t),Apo=i($),qp=n($,"LI",{});var SCe=s(qp);mne=n(SCe,"STRONG",{});var cWr=s(mne);ypo=r(cWr,"qdqbert"),cWr.forEach(t),Lpo=r(SCe," \u2014 "),gI=n(SCe,"A",{href:!0});var fWr=s(gI);xpo=r(fWr,"QDQBertModel"),fWr.forEach(t),$po=r(SCe," (QDQBert model)"),SCe.forEach(t),kpo=i($),Np=n($,"LI",{});var RCe=s(Np);gne=n(RCe,"STRONG",{});var mWr=s(gne);Spo=r(mWr,"reformer"),mWr.forEach(t),Rpo=r(RCe," \u2014 "),hI=n(RCe,"A",{href:!0});var gWr=s(hI);Bpo=r(gWr,"ReformerModel"),gWr.forEach(t),Ppo=r(RCe," (Reformer model)"),RCe.forEach(t),Ipo=i($),jp=n($,"LI",{});var BCe=s(jp);hne=n(BCe,"STRONG",{});var hWr=s(hne);qpo=r(hWr,"regnet"),hWr.forEach(t),Npo=r(BCe," \u2014 "),pI=n(BCe,"A",{href:!0});var pWr=s(pI);jpo=r(pWr,"RegNetModel"),pWr.forEach(t),Dpo=r(BCe," (RegNet model)"),BCe.forEach(t),Gpo=i($),Dp=n($,"LI",{});var PCe=s(Dp);pne=n(PCe,"STRONG",{});var uWr=s(pne);Opo=r(uWr,"rembert"),uWr.forEach(t),Vpo=r(PCe," \u2014 "),uI=n(PCe,"A",{href:!0});var _Wr=s(uI);Xpo=r(_Wr,"RemBertModel"),_Wr.forEach(t),zpo=r(PCe," (RemBERT model)"),PCe.forEach(t),Qpo=i($),Gp=n($,"LI",{});var ICe=s(Gp);une=n(ICe,"STRONG",{});var bWr=s(une);Wpo=r(bWr,"resnet"),bWr.forEach(t),Hpo=r(ICe," \u2014 "),_I=n(ICe,"A",{href:!0});var vWr=s(_I);Upo=r(vWr,"ResNetModel"),vWr.forEach(t),Jpo=r(ICe," (ResNet model)"),ICe.forEach(t),Ypo=i($),Op=n($,"LI",{});var qCe=s(Op);_ne=n(qCe,"STRONG",{});var FWr=s(_ne);Kpo=r(FWr,"retribert"),FWr.forEach(t),Zpo=r(qCe," \u2014 "),bI=n(qCe,"A",{href:!0});var TWr=s(bI);euo=r(TWr,"RetriBertModel"),TWr.forEach(t),ouo=r(qCe," (RetriBERT model)"),qCe.forEach(t),ruo=i($),Vp=n($,"LI",{});var NCe=s(Vp);bne=n(NCe,"STRONG",{});var MWr=s(bne);tuo=r(MWr,"roberta"),MWr.forEach(t),auo=r(NCe," \u2014 "),vI=n(NCe,"A",{href:!0});var EWr=s(vI);nuo=r(EWr,"RobertaModel"),EWr.forEach(t),suo=r(NCe," (RoBERTa model)"),NCe.forEach(t),luo=i($),Xp=n($,"LI",{});var jCe=s(Xp);vne=n(jCe,"STRONG",{});var CWr=s(vne);iuo=r(CWr,"roformer"),CWr.forEach(t),duo=r(jCe," \u2014 "),FI=n(jCe,"A",{href:!0});var wWr=s(FI);cuo=r(wWr,"RoFormerModel"),wWr.forEach(t),fuo=r(jCe," (RoFormer model)"),jCe.forEach(t),muo=i($),zp=n($,"LI",{});var DCe=s(zp);Fne=n(DCe,"STRONG",{});var AWr=s(Fne);guo=r(AWr,"segformer"),AWr.forEach(t),huo=r(DCe," \u2014 "),TI=n(DCe,"A",{href:!0});var yWr=s(TI);puo=r(yWr,"SegformerModel"),yWr.forEach(t),uuo=r(DCe," (SegFormer model)"),DCe.forEach(t),_uo=i($),Qp=n($,"LI",{});var GCe=s(Qp);Tne=n(GCe,"STRONG",{});var LWr=s(Tne);buo=r(LWr,"sew"),LWr.forEach(t),vuo=r(GCe," \u2014 "),MI=n(GCe,"A",{href:!0});var xWr=s(MI);Fuo=r(xWr,"SEWModel"),xWr.forEach(t),Tuo=r(GCe," (SEW model)"),GCe.forEach(t),Muo=i($),Wp=n($,"LI",{});var OCe=s(Wp);Mne=n(OCe,"STRONG",{});var $Wr=s(Mne);Euo=r($Wr,"sew-d"),$Wr.forEach(t),Cuo=r(OCe," \u2014 "),EI=n(OCe,"A",{href:!0});var kWr=s(EI);wuo=r(kWr,"SEWDModel"),kWr.forEach(t),Auo=r(OCe," (SEW-D model)"),OCe.forEach(t),yuo=i($),Hp=n($,"LI",{});var VCe=s(Hp);Ene=n(VCe,"STRONG",{});var SWr=s(Ene);Luo=r(SWr,"speech_to_text"),SWr.forEach(t),xuo=r(VCe," \u2014 "),CI=n(VCe,"A",{href:!0});var RWr=s(CI);$uo=r(RWr,"Speech2TextModel"),RWr.forEach(t),kuo=r(VCe," (Speech2Text model)"),VCe.forEach(t),Suo=i($),Up=n($,"LI",{});var XCe=s(Up);Cne=n(XCe,"STRONG",{});var BWr=s(Cne);Ruo=r(BWr,"splinter"),BWr.forEach(t),Buo=r(XCe," \u2014 "),wI=n(XCe,"A",{href:!0});var PWr=s(wI);Puo=r(PWr,"SplinterModel"),PWr.forEach(t),Iuo=r(XCe," (Splinter model)"),XCe.forEach(t),quo=i($),Jp=n($,"LI",{});var zCe=s(Jp);wne=n(zCe,"STRONG",{});var IWr=s(wne);Nuo=r(IWr,"squeezebert"),IWr.forEach(t),juo=r(zCe," \u2014 "),AI=n(zCe,"A",{href:!0});var qWr=s(AI);Duo=r(qWr,"SqueezeBertModel"),qWr.forEach(t),Guo=r(zCe," (SqueezeBERT model)"),zCe.forEach(t),Ouo=i($),Yp=n($,"LI",{});var QCe=s(Yp);Ane=n(QCe,"STRONG",{});var NWr=s(Ane);Vuo=r(NWr,"swin"),NWr.forEach(t),Xuo=r(QCe," \u2014 "),yI=n(QCe,"A",{href:!0});var jWr=s(yI);zuo=r(jWr,"SwinModel"),jWr.forEach(t),Quo=r(QCe," (Swin model)"),QCe.forEach(t),Wuo=i($),Kp=n($,"LI",{});var WCe=s(Kp);yne=n(WCe,"STRONG",{});var DWr=s(yne);Huo=r(DWr,"t5"),DWr.forEach(t),Uuo=r(WCe," \u2014 "),LI=n(WCe,"A",{href:!0});var GWr=s(LI);Juo=r(GWr,"T5Model"),GWr.forEach(t),Yuo=r(WCe," (T5 model)"),WCe.forEach(t),Kuo=i($),Zp=n($,"LI",{});var HCe=s(Zp);Lne=n(HCe,"STRONG",{});var OWr=s(Lne);Zuo=r(OWr,"tapas"),OWr.forEach(t),e_o=r(HCe," \u2014 "),xI=n(HCe,"A",{href:!0});var VWr=s(xI);o_o=r(VWr,"TapasModel"),VWr.forEach(t),r_o=r(HCe," (TAPAS model)"),HCe.forEach(t),t_o=i($),eu=n($,"LI",{});var UCe=s(eu);xne=n(UCe,"STRONG",{});var XWr=s(xne);a_o=r(XWr,"transfo-xl"),XWr.forEach(t),n_o=r(UCe," \u2014 "),$I=n(UCe,"A",{href:!0});var zWr=s($I);s_o=r(zWr,"TransfoXLModel"),zWr.forEach(t),l_o=r(UCe," (Transformer-XL model)"),UCe.forEach(t),i_o=i($),ou=n($,"LI",{});var JCe=s(ou);$ne=n(JCe,"STRONG",{});var QWr=s($ne);d_o=r(QWr,"unispeech"),QWr.forEach(t),c_o=r(JCe," \u2014 "),kI=n(JCe,"A",{href:!0});var WWr=s(kI);f_o=r(WWr,"UniSpeechModel"),WWr.forEach(t),m_o=r(JCe," (UniSpeech model)"),JCe.forEach(t),g_o=i($),ru=n($,"LI",{});var YCe=s(ru);kne=n(YCe,"STRONG",{});var HWr=s(kne);h_o=r(HWr,"unispeech-sat"),HWr.forEach(t),p_o=r(YCe," \u2014 "),SI=n(YCe,"A",{href:!0});var UWr=s(SI);u_o=r(UWr,"UniSpeechSatModel"),UWr.forEach(t),__o=r(YCe," (UniSpeechSat model)"),YCe.forEach(t),b_o=i($),tu=n($,"LI",{});var KCe=s(tu);Sne=n(KCe,"STRONG",{});var JWr=s(Sne);v_o=r(JWr,"van"),JWr.forEach(t),F_o=r(KCe," \u2014 "),RI=n(KCe,"A",{href:!0});var YWr=s(RI);T_o=r(YWr,"VanModel"),YWr.forEach(t),M_o=r(KCe," (VAN model)"),KCe.forEach(t),E_o=i($),au=n($,"LI",{});var ZCe=s(au);Rne=n(ZCe,"STRONG",{});var KWr=s(Rne);C_o=r(KWr,"vilt"),KWr.forEach(t),w_o=r(ZCe," \u2014 "),BI=n(ZCe,"A",{href:!0});var ZWr=s(BI);A_o=r(ZWr,"ViltModel"),ZWr.forEach(t),y_o=r(ZCe," (ViLT model)"),ZCe.forEach(t),L_o=i($),nu=n($,"LI",{});var e3e=s(nu);Bne=n(e3e,"STRONG",{});var eHr=s(Bne);x_o=r(eHr,"vision-text-dual-encoder"),eHr.forEach(t),$_o=r(e3e," \u2014 "),PI=n(e3e,"A",{href:!0});var oHr=s(PI);k_o=r(oHr,"VisionTextDualEncoderModel"),oHr.forEach(t),S_o=r(e3e," (VisionTextDualEncoder model)"),e3e.forEach(t),R_o=i($),su=n($,"LI",{});var o3e=s(su);Pne=n(o3e,"STRONG",{});var rHr=s(Pne);B_o=r(rHr,"visual_bert"),rHr.forEach(t),P_o=r(o3e," \u2014 "),II=n(o3e,"A",{href:!0});var tHr=s(II);I_o=r(tHr,"VisualBertModel"),tHr.forEach(t),q_o=r(o3e," (VisualBert model)"),o3e.forEach(t),N_o=i($),lu=n($,"LI",{});var r3e=s(lu);Ine=n(r3e,"STRONG",{});var aHr=s(Ine);j_o=r(aHr,"vit"),aHr.forEach(t),D_o=r(r3e," \u2014 "),qI=n(r3e,"A",{href:!0});var nHr=s(qI);G_o=r(nHr,"ViTModel"),nHr.forEach(t),O_o=r(r3e," (ViT model)"),r3e.forEach(t),V_o=i($),iu=n($,"LI",{});var t3e=s(iu);qne=n(t3e,"STRONG",{});var sHr=s(qne);X_o=r(sHr,"vit_mae"),sHr.forEach(t),z_o=r(t3e," \u2014 "),NI=n(t3e,"A",{href:!0});var lHr=s(NI);Q_o=r(lHr,"ViTMAEModel"),lHr.forEach(t),W_o=r(t3e," (ViTMAE model)"),t3e.forEach(t),H_o=i($),du=n($,"LI",{});var a3e=s(du);Nne=n(a3e,"STRONG",{});var iHr=s(Nne);U_o=r(iHr,"wav2vec2"),iHr.forEach(t),J_o=r(a3e," \u2014 "),jI=n(a3e,"A",{href:!0});var dHr=s(jI);Y_o=r(dHr,"Wav2Vec2Model"),dHr.forEach(t),K_o=r(a3e," (Wav2Vec2 model)"),a3e.forEach(t),Z_o=i($),cu=n($,"LI",{});var n3e=s(cu);jne=n(n3e,"STRONG",{});var cHr=s(jne);e1o=r(cHr,"wavlm"),cHr.forEach(t),o1o=r(n3e," \u2014 "),DI=n(n3e,"A",{href:!0});var fHr=s(DI);r1o=r(fHr,"WavLMModel"),fHr.forEach(t),t1o=r(n3e," (WavLM model)"),n3e.forEach(t),a1o=i($),fu=n($,"LI",{});var s3e=s(fu);Dne=n(s3e,"STRONG",{});var mHr=s(Dne);n1o=r(mHr,"xglm"),mHr.forEach(t),s1o=r(s3e," \u2014 "),GI=n(s3e,"A",{href:!0});var gHr=s(GI);l1o=r(gHr,"XGLMModel"),gHr.forEach(t),i1o=r(s3e," (XGLM model)"),s3e.forEach(t),d1o=i($),mu=n($,"LI",{});var l3e=s(mu);Gne=n(l3e,"STRONG",{});var hHr=s(Gne);c1o=r(hHr,"xlm"),hHr.forEach(t),f1o=r(l3e," \u2014 "),OI=n(l3e,"A",{href:!0});var pHr=s(OI);m1o=r(pHr,"XLMModel"),pHr.forEach(t),g1o=r(l3e," (XLM model)"),l3e.forEach(t),h1o=i($),gu=n($,"LI",{});var i3e=s(gu);One=n(i3e,"STRONG",{});var uHr=s(One);p1o=r(uHr,"xlm-prophetnet"),uHr.forEach(t),u1o=r(i3e," \u2014 "),VI=n(i3e,"A",{href:!0});var _Hr=s(VI);_1o=r(_Hr,"XLMProphetNetModel"),_Hr.forEach(t),b1o=r(i3e," (XLMProphetNet model)"),i3e.forEach(t),v1o=i($),hu=n($,"LI",{});var d3e=s(hu);Vne=n(d3e,"STRONG",{});var bHr=s(Vne);F1o=r(bHr,"xlm-roberta"),bHr.forEach(t),T1o=r(d3e," \u2014 "),XI=n(d3e,"A",{href:!0});var vHr=s(XI);M1o=r(vHr,"XLMRobertaModel"),vHr.forEach(t),E1o=r(d3e," (XLM-RoBERTa model)"),d3e.forEach(t),C1o=i($),pu=n($,"LI",{});var c3e=s(pu);Xne=n(c3e,"STRONG",{});var FHr=s(Xne);w1o=r(FHr,"xlm-roberta-xl"),FHr.forEach(t),A1o=r(c3e," \u2014 "),zI=n(c3e,"A",{href:!0});var THr=s(zI);y1o=r(THr,"XLMRobertaXLModel"),THr.forEach(t),L1o=r(c3e," (XLM-RoBERTa-XL model)"),c3e.forEach(t),x1o=i($),uu=n($,"LI",{});var f3e=s(uu);zne=n(f3e,"STRONG",{});var MHr=s(zne);$1o=r(MHr,"xlnet"),MHr.forEach(t),k1o=r(f3e," \u2014 "),QI=n(f3e,"A",{href:!0});var EHr=s(QI);S1o=r(EHr,"XLNetModel"),EHr.forEach(t),R1o=r(f3e," (XLNet model)"),f3e.forEach(t),B1o=i($),_u=n($,"LI",{});var m3e=s(_u);Qne=n(m3e,"STRONG",{});var CHr=s(Qne);P1o=r(CHr,"yolos"),CHr.forEach(t),I1o=r(m3e," \u2014 "),WI=n(m3e,"A",{href:!0});var wHr=s(WI);q1o=r(wHr,"YolosModel"),wHr.forEach(t),N1o=r(m3e," (YOLOS model)"),m3e.forEach(t),j1o=i($),bu=n($,"LI",{});var g3e=s(bu);Wne=n(g3e,"STRONG",{});var AHr=s(Wne);D1o=r(AHr,"yoso"),AHr.forEach(t),G1o=r(g3e," \u2014 "),HI=n(g3e,"A",{href:!0});var yHr=s(HI);O1o=r(yHr,"YosoModel"),yHr.forEach(t),V1o=r(g3e," (YOSO model)"),g3e.forEach(t),$.forEach(t),X1o=i(Jt),vu=n(Jt,"P",{});var h3e=s(vu);z1o=r(h3e,"The model is set in evaluation mode by default using "),Hne=n(h3e,"CODE",{});var LHr=s(Hne);Q1o=r(LHr,"model.eval()"),LHr.forEach(t),W1o=r(h3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Une=n(h3e,"CODE",{});var xHr=s(Une);H1o=r(xHr,"model.train()"),xHr.forEach(t),h3e.forEach(t),U1o=i(Jt),T(Fu.$$.fragment,Jt),Jt.forEach(t),Is.forEach(t),qBe=i(f),vi=n(f,"H2",{class:!0});var jIe=s(vi);Tu=n(jIe,"A",{id:!0,class:!0,href:!0});var $Hr=s(Tu);Jne=n($Hr,"SPAN",{});var kHr=s(Jne);T(aA.$$.fragment,kHr),kHr.forEach(t),$Hr.forEach(t),J1o=i(jIe),Yne=n(jIe,"SPAN",{});var SHr=s(Yne);Y1o=r(SHr,"AutoModelForPreTraining"),SHr.forEach(t),jIe.forEach(t),NBe=i(f),xo=n(f,"DIV",{class:!0});var qs=s(xo);T(nA.$$.fragment,qs),K1o=i(qs),Fi=n(qs,"P",{});var MY=s(Fi);Z1o=r(MY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),UI=n(MY,"A",{href:!0});var RHr=s(UI);e8o=r(RHr,"from_pretrained()"),RHr.forEach(t),o8o=r(MY," class method or the "),JI=n(MY,"A",{href:!0});var BHr=s(JI);r8o=r(BHr,"from_config()"),BHr.forEach(t),t8o=r(MY,` class
method.`),MY.forEach(t),a8o=i(qs),sA=n(qs,"P",{});var DIe=s(sA);n8o=r(DIe,"This class cannot be instantiated directly using "),Kne=n(DIe,"CODE",{});var PHr=s(Kne);s8o=r(PHr,"__init__()"),PHr.forEach(t),l8o=r(DIe," (throws an error)."),DIe.forEach(t),i8o=i(qs),et=n(qs,"DIV",{class:!0});var RC=s(et);T(lA.$$.fragment,RC),d8o=i(RC),Zne=n(RC,"P",{});var IHr=s(Zne);c8o=r(IHr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),IHr.forEach(t),f8o=i(RC),Ti=n(RC,"P",{});var EY=s(Ti);m8o=r(EY,`Note:
Loading a model from its configuration file does `),ese=n(EY,"STRONG",{});var qHr=s(ese);g8o=r(qHr,"not"),qHr.forEach(t),h8o=r(EY,` load the model weights. It only affects the
model\u2019s configuration. Use `),YI=n(EY,"A",{href:!0});var NHr=s(YI);p8o=r(NHr,"from_pretrained()"),NHr.forEach(t),u8o=r(EY," to load the model weights."),EY.forEach(t),_8o=i(RC),T(Mu.$$.fragment,RC),RC.forEach(t),b8o=i(qs),Ue=n(qs,"DIV",{class:!0});var Yt=s(Ue);T(iA.$$.fragment,Yt),v8o=i(Yt),ose=n(Yt,"P",{});var jHr=s(ose);F8o=r(jHr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),jHr.forEach(t),T8o=i(Yt),Ca=n(Yt,"P",{});var BC=s(Ca);M8o=r(BC,"The model class to instantiate is selected based on the "),rse=n(BC,"CODE",{});var DHr=s(rse);E8o=r(DHr,"model_type"),DHr.forEach(t),C8o=r(BC,` property of the config object (either
passed as an argument or loaded from `),tse=n(BC,"CODE",{});var GHr=s(tse);w8o=r(GHr,"pretrained_model_name_or_path"),GHr.forEach(t),A8o=r(BC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ase=n(BC,"CODE",{});var OHr=s(ase);y8o=r(OHr,"pretrained_model_name_or_path"),OHr.forEach(t),L8o=r(BC,":"),BC.forEach(t),x8o=i(Yt),G=n(Yt,"UL",{});var V=s(G);Eu=n(V,"LI",{});var p3e=s(Eu);nse=n(p3e,"STRONG",{});var VHr=s(nse);$8o=r(VHr,"albert"),VHr.forEach(t),k8o=r(p3e," \u2014 "),KI=n(p3e,"A",{href:!0});var XHr=s(KI);S8o=r(XHr,"AlbertForPreTraining"),XHr.forEach(t),R8o=r(p3e," (ALBERT model)"),p3e.forEach(t),B8o=i(V),Cu=n(V,"LI",{});var u3e=s(Cu);sse=n(u3e,"STRONG",{});var zHr=s(sse);P8o=r(zHr,"bart"),zHr.forEach(t),I8o=r(u3e," \u2014 "),ZI=n(u3e,"A",{href:!0});var QHr=s(ZI);q8o=r(QHr,"BartForConditionalGeneration"),QHr.forEach(t),N8o=r(u3e," (BART model)"),u3e.forEach(t),j8o=i(V),wu=n(V,"LI",{});var _3e=s(wu);lse=n(_3e,"STRONG",{});var WHr=s(lse);D8o=r(WHr,"bert"),WHr.forEach(t),G8o=r(_3e," \u2014 "),eq=n(_3e,"A",{href:!0});var HHr=s(eq);O8o=r(HHr,"BertForPreTraining"),HHr.forEach(t),V8o=r(_3e," (BERT model)"),_3e.forEach(t),X8o=i(V),Au=n(V,"LI",{});var b3e=s(Au);ise=n(b3e,"STRONG",{});var UHr=s(ise);z8o=r(UHr,"big_bird"),UHr.forEach(t),Q8o=r(b3e," \u2014 "),oq=n(b3e,"A",{href:!0});var JHr=s(oq);W8o=r(JHr,"BigBirdForPreTraining"),JHr.forEach(t),H8o=r(b3e," (BigBird model)"),b3e.forEach(t),U8o=i(V),yu=n(V,"LI",{});var v3e=s(yu);dse=n(v3e,"STRONG",{});var YHr=s(dse);J8o=r(YHr,"camembert"),YHr.forEach(t),Y8o=r(v3e," \u2014 "),rq=n(v3e,"A",{href:!0});var KHr=s(rq);K8o=r(KHr,"CamembertForMaskedLM"),KHr.forEach(t),Z8o=r(v3e," (CamemBERT model)"),v3e.forEach(t),ebo=i(V),Lu=n(V,"LI",{});var F3e=s(Lu);cse=n(F3e,"STRONG",{});var ZHr=s(cse);obo=r(ZHr,"ctrl"),ZHr.forEach(t),rbo=r(F3e," \u2014 "),tq=n(F3e,"A",{href:!0});var eUr=s(tq);tbo=r(eUr,"CTRLLMHeadModel"),eUr.forEach(t),abo=r(F3e," (CTRL model)"),F3e.forEach(t),nbo=i(V),xu=n(V,"LI",{});var T3e=s(xu);fse=n(T3e,"STRONG",{});var oUr=s(fse);sbo=r(oUr,"data2vec-text"),oUr.forEach(t),lbo=r(T3e," \u2014 "),aq=n(T3e,"A",{href:!0});var rUr=s(aq);ibo=r(rUr,"Data2VecTextForMaskedLM"),rUr.forEach(t),dbo=r(T3e," (Data2VecText model)"),T3e.forEach(t),cbo=i(V),$u=n(V,"LI",{});var M3e=s($u);mse=n(M3e,"STRONG",{});var tUr=s(mse);fbo=r(tUr,"deberta"),tUr.forEach(t),mbo=r(M3e," \u2014 "),nq=n(M3e,"A",{href:!0});var aUr=s(nq);gbo=r(aUr,"DebertaForMaskedLM"),aUr.forEach(t),hbo=r(M3e," (DeBERTa model)"),M3e.forEach(t),pbo=i(V),ku=n(V,"LI",{});var E3e=s(ku);gse=n(E3e,"STRONG",{});var nUr=s(gse);ubo=r(nUr,"deberta-v2"),nUr.forEach(t),_bo=r(E3e," \u2014 "),sq=n(E3e,"A",{href:!0});var sUr=s(sq);bbo=r(sUr,"DebertaV2ForMaskedLM"),sUr.forEach(t),vbo=r(E3e," (DeBERTa-v2 model)"),E3e.forEach(t),Fbo=i(V),Su=n(V,"LI",{});var C3e=s(Su);hse=n(C3e,"STRONG",{});var lUr=s(hse);Tbo=r(lUr,"distilbert"),lUr.forEach(t),Mbo=r(C3e," \u2014 "),lq=n(C3e,"A",{href:!0});var iUr=s(lq);Ebo=r(iUr,"DistilBertForMaskedLM"),iUr.forEach(t),Cbo=r(C3e," (DistilBERT model)"),C3e.forEach(t),wbo=i(V),Ru=n(V,"LI",{});var w3e=s(Ru);pse=n(w3e,"STRONG",{});var dUr=s(pse);Abo=r(dUr,"electra"),dUr.forEach(t),ybo=r(w3e," \u2014 "),iq=n(w3e,"A",{href:!0});var cUr=s(iq);Lbo=r(cUr,"ElectraForPreTraining"),cUr.forEach(t),xbo=r(w3e," (ELECTRA model)"),w3e.forEach(t),$bo=i(V),Bu=n(V,"LI",{});var A3e=s(Bu);use=n(A3e,"STRONG",{});var fUr=s(use);kbo=r(fUr,"flaubert"),fUr.forEach(t),Sbo=r(A3e," \u2014 "),dq=n(A3e,"A",{href:!0});var mUr=s(dq);Rbo=r(mUr,"FlaubertWithLMHeadModel"),mUr.forEach(t),Bbo=r(A3e," (FlauBERT model)"),A3e.forEach(t),Pbo=i(V),Pu=n(V,"LI",{});var y3e=s(Pu);_se=n(y3e,"STRONG",{});var gUr=s(_se);Ibo=r(gUr,"fnet"),gUr.forEach(t),qbo=r(y3e," \u2014 "),cq=n(y3e,"A",{href:!0});var hUr=s(cq);Nbo=r(hUr,"FNetForPreTraining"),hUr.forEach(t),jbo=r(y3e," (FNet model)"),y3e.forEach(t),Dbo=i(V),Iu=n(V,"LI",{});var L3e=s(Iu);bse=n(L3e,"STRONG",{});var pUr=s(bse);Gbo=r(pUr,"fsmt"),pUr.forEach(t),Obo=r(L3e," \u2014 "),fq=n(L3e,"A",{href:!0});var uUr=s(fq);Vbo=r(uUr,"FSMTForConditionalGeneration"),uUr.forEach(t),Xbo=r(L3e," (FairSeq Machine-Translation model)"),L3e.forEach(t),zbo=i(V),qu=n(V,"LI",{});var x3e=s(qu);vse=n(x3e,"STRONG",{});var _Ur=s(vse);Qbo=r(_Ur,"funnel"),_Ur.forEach(t),Wbo=r(x3e," \u2014 "),mq=n(x3e,"A",{href:!0});var bUr=s(mq);Hbo=r(bUr,"FunnelForPreTraining"),bUr.forEach(t),Ubo=r(x3e," (Funnel Transformer model)"),x3e.forEach(t),Jbo=i(V),Nu=n(V,"LI",{});var $3e=s(Nu);Fse=n($3e,"STRONG",{});var vUr=s(Fse);Ybo=r(vUr,"gpt2"),vUr.forEach(t),Kbo=r($3e," \u2014 "),gq=n($3e,"A",{href:!0});var FUr=s(gq);Zbo=r(FUr,"GPT2LMHeadModel"),FUr.forEach(t),e2o=r($3e," (OpenAI GPT-2 model)"),$3e.forEach(t),o2o=i(V),ju=n(V,"LI",{});var k3e=s(ju);Tse=n(k3e,"STRONG",{});var TUr=s(Tse);r2o=r(TUr,"ibert"),TUr.forEach(t),t2o=r(k3e," \u2014 "),hq=n(k3e,"A",{href:!0});var MUr=s(hq);a2o=r(MUr,"IBertForMaskedLM"),MUr.forEach(t),n2o=r(k3e," (I-BERT model)"),k3e.forEach(t),s2o=i(V),Du=n(V,"LI",{});var S3e=s(Du);Mse=n(S3e,"STRONG",{});var EUr=s(Mse);l2o=r(EUr,"layoutlm"),EUr.forEach(t),i2o=r(S3e," \u2014 "),pq=n(S3e,"A",{href:!0});var CUr=s(pq);d2o=r(CUr,"LayoutLMForMaskedLM"),CUr.forEach(t),c2o=r(S3e," (LayoutLM model)"),S3e.forEach(t),f2o=i(V),Gu=n(V,"LI",{});var R3e=s(Gu);Ese=n(R3e,"STRONG",{});var wUr=s(Ese);m2o=r(wUr,"longformer"),wUr.forEach(t),g2o=r(R3e," \u2014 "),uq=n(R3e,"A",{href:!0});var AUr=s(uq);h2o=r(AUr,"LongformerForMaskedLM"),AUr.forEach(t),p2o=r(R3e," (Longformer model)"),R3e.forEach(t),u2o=i(V),Ou=n(V,"LI",{});var B3e=s(Ou);Cse=n(B3e,"STRONG",{});var yUr=s(Cse);_2o=r(yUr,"lxmert"),yUr.forEach(t),b2o=r(B3e," \u2014 "),_q=n(B3e,"A",{href:!0});var LUr=s(_q);v2o=r(LUr,"LxmertForPreTraining"),LUr.forEach(t),F2o=r(B3e," (LXMERT model)"),B3e.forEach(t),T2o=i(V),Vu=n(V,"LI",{});var P3e=s(Vu);wse=n(P3e,"STRONG",{});var xUr=s(wse);M2o=r(xUr,"megatron-bert"),xUr.forEach(t),E2o=r(P3e," \u2014 "),bq=n(P3e,"A",{href:!0});var $Ur=s(bq);C2o=r($Ur,"MegatronBertForPreTraining"),$Ur.forEach(t),w2o=r(P3e," (MegatronBert model)"),P3e.forEach(t),A2o=i(V),Xu=n(V,"LI",{});var I3e=s(Xu);Ase=n(I3e,"STRONG",{});var kUr=s(Ase);y2o=r(kUr,"mobilebert"),kUr.forEach(t),L2o=r(I3e," \u2014 "),vq=n(I3e,"A",{href:!0});var SUr=s(vq);x2o=r(SUr,"MobileBertForPreTraining"),SUr.forEach(t),$2o=r(I3e," (MobileBERT model)"),I3e.forEach(t),k2o=i(V),zu=n(V,"LI",{});var q3e=s(zu);yse=n(q3e,"STRONG",{});var RUr=s(yse);S2o=r(RUr,"mpnet"),RUr.forEach(t),R2o=r(q3e," \u2014 "),Fq=n(q3e,"A",{href:!0});var BUr=s(Fq);B2o=r(BUr,"MPNetForMaskedLM"),BUr.forEach(t),P2o=r(q3e," (MPNet model)"),q3e.forEach(t),I2o=i(V),Qu=n(V,"LI",{});var N3e=s(Qu);Lse=n(N3e,"STRONG",{});var PUr=s(Lse);q2o=r(PUr,"openai-gpt"),PUr.forEach(t),N2o=r(N3e," \u2014 "),Tq=n(N3e,"A",{href:!0});var IUr=s(Tq);j2o=r(IUr,"OpenAIGPTLMHeadModel"),IUr.forEach(t),D2o=r(N3e," (OpenAI GPT model)"),N3e.forEach(t),G2o=i(V),Wu=n(V,"LI",{});var j3e=s(Wu);xse=n(j3e,"STRONG",{});var qUr=s(xse);O2o=r(qUr,"retribert"),qUr.forEach(t),V2o=r(j3e," \u2014 "),Mq=n(j3e,"A",{href:!0});var NUr=s(Mq);X2o=r(NUr,"RetriBertModel"),NUr.forEach(t),z2o=r(j3e," (RetriBERT model)"),j3e.forEach(t),Q2o=i(V),Hu=n(V,"LI",{});var D3e=s(Hu);$se=n(D3e,"STRONG",{});var jUr=s($se);W2o=r(jUr,"roberta"),jUr.forEach(t),H2o=r(D3e," \u2014 "),Eq=n(D3e,"A",{href:!0});var DUr=s(Eq);U2o=r(DUr,"RobertaForMaskedLM"),DUr.forEach(t),J2o=r(D3e," (RoBERTa model)"),D3e.forEach(t),Y2o=i(V),Uu=n(V,"LI",{});var G3e=s(Uu);kse=n(G3e,"STRONG",{});var GUr=s(kse);K2o=r(GUr,"squeezebert"),GUr.forEach(t),Z2o=r(G3e," \u2014 "),Cq=n(G3e,"A",{href:!0});var OUr=s(Cq);evo=r(OUr,"SqueezeBertForMaskedLM"),OUr.forEach(t),ovo=r(G3e," (SqueezeBERT model)"),G3e.forEach(t),rvo=i(V),Ju=n(V,"LI",{});var O3e=s(Ju);Sse=n(O3e,"STRONG",{});var VUr=s(Sse);tvo=r(VUr,"t5"),VUr.forEach(t),avo=r(O3e," \u2014 "),wq=n(O3e,"A",{href:!0});var XUr=s(wq);nvo=r(XUr,"T5ForConditionalGeneration"),XUr.forEach(t),svo=r(O3e," (T5 model)"),O3e.forEach(t),lvo=i(V),Yu=n(V,"LI",{});var V3e=s(Yu);Rse=n(V3e,"STRONG",{});var zUr=s(Rse);ivo=r(zUr,"tapas"),zUr.forEach(t),dvo=r(V3e," \u2014 "),Aq=n(V3e,"A",{href:!0});var QUr=s(Aq);cvo=r(QUr,"TapasForMaskedLM"),QUr.forEach(t),fvo=r(V3e," (TAPAS model)"),V3e.forEach(t),mvo=i(V),Ku=n(V,"LI",{});var X3e=s(Ku);Bse=n(X3e,"STRONG",{});var WUr=s(Bse);gvo=r(WUr,"transfo-xl"),WUr.forEach(t),hvo=r(X3e," \u2014 "),yq=n(X3e,"A",{href:!0});var HUr=s(yq);pvo=r(HUr,"TransfoXLLMHeadModel"),HUr.forEach(t),uvo=r(X3e," (Transformer-XL model)"),X3e.forEach(t),_vo=i(V),Zu=n(V,"LI",{});var z3e=s(Zu);Pse=n(z3e,"STRONG",{});var UUr=s(Pse);bvo=r(UUr,"unispeech"),UUr.forEach(t),vvo=r(z3e," \u2014 "),Lq=n(z3e,"A",{href:!0});var JUr=s(Lq);Fvo=r(JUr,"UniSpeechForPreTraining"),JUr.forEach(t),Tvo=r(z3e," (UniSpeech model)"),z3e.forEach(t),Mvo=i(V),e_=n(V,"LI",{});var Q3e=s(e_);Ise=n(Q3e,"STRONG",{});var YUr=s(Ise);Evo=r(YUr,"unispeech-sat"),YUr.forEach(t),Cvo=r(Q3e," \u2014 "),xq=n(Q3e,"A",{href:!0});var KUr=s(xq);wvo=r(KUr,"UniSpeechSatForPreTraining"),KUr.forEach(t),Avo=r(Q3e," (UniSpeechSat model)"),Q3e.forEach(t),yvo=i(V),o_=n(V,"LI",{});var W3e=s(o_);qse=n(W3e,"STRONG",{});var ZUr=s(qse);Lvo=r(ZUr,"visual_bert"),ZUr.forEach(t),xvo=r(W3e," \u2014 "),$q=n(W3e,"A",{href:!0});var eJr=s($q);$vo=r(eJr,"VisualBertForPreTraining"),eJr.forEach(t),kvo=r(W3e," (VisualBert model)"),W3e.forEach(t),Svo=i(V),r_=n(V,"LI",{});var H3e=s(r_);Nse=n(H3e,"STRONG",{});var oJr=s(Nse);Rvo=r(oJr,"vit_mae"),oJr.forEach(t),Bvo=r(H3e," \u2014 "),kq=n(H3e,"A",{href:!0});var rJr=s(kq);Pvo=r(rJr,"ViTMAEForPreTraining"),rJr.forEach(t),Ivo=r(H3e," (ViTMAE model)"),H3e.forEach(t),qvo=i(V),t_=n(V,"LI",{});var U3e=s(t_);jse=n(U3e,"STRONG",{});var tJr=s(jse);Nvo=r(tJr,"wav2vec2"),tJr.forEach(t),jvo=r(U3e," \u2014 "),Sq=n(U3e,"A",{href:!0});var aJr=s(Sq);Dvo=r(aJr,"Wav2Vec2ForPreTraining"),aJr.forEach(t),Gvo=r(U3e," (Wav2Vec2 model)"),U3e.forEach(t),Ovo=i(V),a_=n(V,"LI",{});var J3e=s(a_);Dse=n(J3e,"STRONG",{});var nJr=s(Dse);Vvo=r(nJr,"xlm"),nJr.forEach(t),Xvo=r(J3e," \u2014 "),Rq=n(J3e,"A",{href:!0});var sJr=s(Rq);zvo=r(sJr,"XLMWithLMHeadModel"),sJr.forEach(t),Qvo=r(J3e," (XLM model)"),J3e.forEach(t),Wvo=i(V),n_=n(V,"LI",{});var Y3e=s(n_);Gse=n(Y3e,"STRONG",{});var lJr=s(Gse);Hvo=r(lJr,"xlm-roberta"),lJr.forEach(t),Uvo=r(Y3e," \u2014 "),Bq=n(Y3e,"A",{href:!0});var iJr=s(Bq);Jvo=r(iJr,"XLMRobertaForMaskedLM"),iJr.forEach(t),Yvo=r(Y3e," (XLM-RoBERTa model)"),Y3e.forEach(t),Kvo=i(V),s_=n(V,"LI",{});var K3e=s(s_);Ose=n(K3e,"STRONG",{});var dJr=s(Ose);Zvo=r(dJr,"xlm-roberta-xl"),dJr.forEach(t),eFo=r(K3e," \u2014 "),Pq=n(K3e,"A",{href:!0});var cJr=s(Pq);oFo=r(cJr,"XLMRobertaXLForMaskedLM"),cJr.forEach(t),rFo=r(K3e," (XLM-RoBERTa-XL model)"),K3e.forEach(t),tFo=i(V),l_=n(V,"LI",{});var Z3e=s(l_);Vse=n(Z3e,"STRONG",{});var fJr=s(Vse);aFo=r(fJr,"xlnet"),fJr.forEach(t),nFo=r(Z3e," \u2014 "),Iq=n(Z3e,"A",{href:!0});var mJr=s(Iq);sFo=r(mJr,"XLNetLMHeadModel"),mJr.forEach(t),lFo=r(Z3e," (XLNet model)"),Z3e.forEach(t),V.forEach(t),iFo=i(Yt),i_=n(Yt,"P",{});var ewe=s(i_);dFo=r(ewe,"The model is set in evaluation mode by default using "),Xse=n(ewe,"CODE",{});var gJr=s(Xse);cFo=r(gJr,"model.eval()"),gJr.forEach(t),fFo=r(ewe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zse=n(ewe,"CODE",{});var hJr=s(zse);mFo=r(hJr,"model.train()"),hJr.forEach(t),ewe.forEach(t),gFo=i(Yt),T(d_.$$.fragment,Yt),Yt.forEach(t),qs.forEach(t),jBe=i(f),Mi=n(f,"H2",{class:!0});var GIe=s(Mi);c_=n(GIe,"A",{id:!0,class:!0,href:!0});var pJr=s(c_);Qse=n(pJr,"SPAN",{});var uJr=s(Qse);T(dA.$$.fragment,uJr),uJr.forEach(t),pJr.forEach(t),hFo=i(GIe),Wse=n(GIe,"SPAN",{});var _Jr=s(Wse);pFo=r(_Jr,"AutoModelForCausalLM"),_Jr.forEach(t),GIe.forEach(t),DBe=i(f),$o=n(f,"DIV",{class:!0});var Ns=s($o);T(cA.$$.fragment,Ns),uFo=i(Ns),Ei=n(Ns,"P",{});var CY=s(Ei);_Fo=r(CY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qq=n(CY,"A",{href:!0});var bJr=s(qq);bFo=r(bJr,"from_pretrained()"),bJr.forEach(t),vFo=r(CY," class method or the "),Nq=n(CY,"A",{href:!0});var vJr=s(Nq);FFo=r(vJr,"from_config()"),vJr.forEach(t),TFo=r(CY,` class
method.`),CY.forEach(t),MFo=i(Ns),fA=n(Ns,"P",{});var OIe=s(fA);EFo=r(OIe,"This class cannot be instantiated directly using "),Hse=n(OIe,"CODE",{});var FJr=s(Hse);CFo=r(FJr,"__init__()"),FJr.forEach(t),wFo=r(OIe," (throws an error)."),OIe.forEach(t),AFo=i(Ns),ot=n(Ns,"DIV",{class:!0});var PC=s(ot);T(mA.$$.fragment,PC),yFo=i(PC),Use=n(PC,"P",{});var TJr=s(Use);LFo=r(TJr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),TJr.forEach(t),xFo=i(PC),Ci=n(PC,"P",{});var wY=s(Ci);$Fo=r(wY,`Note:
Loading a model from its configuration file does `),Jse=n(wY,"STRONG",{});var MJr=s(Jse);kFo=r(MJr,"not"),MJr.forEach(t),SFo=r(wY,` load the model weights. It only affects the
model\u2019s configuration. Use `),jq=n(wY,"A",{href:!0});var EJr=s(jq);RFo=r(EJr,"from_pretrained()"),EJr.forEach(t),BFo=r(wY," to load the model weights."),wY.forEach(t),PFo=i(PC),T(f_.$$.fragment,PC),PC.forEach(t),IFo=i(Ns),Je=n(Ns,"DIV",{class:!0});var Kt=s(Je);T(gA.$$.fragment,Kt),qFo=i(Kt),Yse=n(Kt,"P",{});var CJr=s(Yse);NFo=r(CJr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),CJr.forEach(t),jFo=i(Kt),wa=n(Kt,"P",{});var IC=s(wa);DFo=r(IC,"The model class to instantiate is selected based on the "),Kse=n(IC,"CODE",{});var wJr=s(Kse);GFo=r(wJr,"model_type"),wJr.forEach(t),OFo=r(IC,` property of the config object (either
passed as an argument or loaded from `),Zse=n(IC,"CODE",{});var AJr=s(Zse);VFo=r(AJr,"pretrained_model_name_or_path"),AJr.forEach(t),XFo=r(IC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ele=n(IC,"CODE",{});var yJr=s(ele);zFo=r(yJr,"pretrained_model_name_or_path"),yJr.forEach(t),QFo=r(IC,":"),IC.forEach(t),WFo=i(Kt),z=n(Kt,"UL",{});var W=s(z);m_=n(W,"LI",{});var owe=s(m_);ole=n(owe,"STRONG",{});var LJr=s(ole);HFo=r(LJr,"bart"),LJr.forEach(t),UFo=r(owe," \u2014 "),Dq=n(owe,"A",{href:!0});var xJr=s(Dq);JFo=r(xJr,"BartForCausalLM"),xJr.forEach(t),YFo=r(owe," (BART model)"),owe.forEach(t),KFo=i(W),g_=n(W,"LI",{});var rwe=s(g_);rle=n(rwe,"STRONG",{});var $Jr=s(rle);ZFo=r($Jr,"bert"),$Jr.forEach(t),e6o=r(rwe," \u2014 "),Gq=n(rwe,"A",{href:!0});var kJr=s(Gq);o6o=r(kJr,"BertLMHeadModel"),kJr.forEach(t),r6o=r(rwe," (BERT model)"),rwe.forEach(t),t6o=i(W),h_=n(W,"LI",{});var twe=s(h_);tle=n(twe,"STRONG",{});var SJr=s(tle);a6o=r(SJr,"bert-generation"),SJr.forEach(t),n6o=r(twe," \u2014 "),Oq=n(twe,"A",{href:!0});var RJr=s(Oq);s6o=r(RJr,"BertGenerationDecoder"),RJr.forEach(t),l6o=r(twe," (Bert Generation model)"),twe.forEach(t),i6o=i(W),p_=n(W,"LI",{});var awe=s(p_);ale=n(awe,"STRONG",{});var BJr=s(ale);d6o=r(BJr,"big_bird"),BJr.forEach(t),c6o=r(awe," \u2014 "),Vq=n(awe,"A",{href:!0});var PJr=s(Vq);f6o=r(PJr,"BigBirdForCausalLM"),PJr.forEach(t),m6o=r(awe," (BigBird model)"),awe.forEach(t),g6o=i(W),u_=n(W,"LI",{});var nwe=s(u_);nle=n(nwe,"STRONG",{});var IJr=s(nle);h6o=r(IJr,"bigbird_pegasus"),IJr.forEach(t),p6o=r(nwe," \u2014 "),Xq=n(nwe,"A",{href:!0});var qJr=s(Xq);u6o=r(qJr,"BigBirdPegasusForCausalLM"),qJr.forEach(t),_6o=r(nwe," (BigBirdPegasus model)"),nwe.forEach(t),b6o=i(W),__=n(W,"LI",{});var swe=s(__);sle=n(swe,"STRONG",{});var NJr=s(sle);v6o=r(NJr,"blenderbot"),NJr.forEach(t),F6o=r(swe," \u2014 "),zq=n(swe,"A",{href:!0});var jJr=s(zq);T6o=r(jJr,"BlenderbotForCausalLM"),jJr.forEach(t),M6o=r(swe," (Blenderbot model)"),swe.forEach(t),E6o=i(W),b_=n(W,"LI",{});var lwe=s(b_);lle=n(lwe,"STRONG",{});var DJr=s(lle);C6o=r(DJr,"blenderbot-small"),DJr.forEach(t),w6o=r(lwe," \u2014 "),Qq=n(lwe,"A",{href:!0});var GJr=s(Qq);A6o=r(GJr,"BlenderbotSmallForCausalLM"),GJr.forEach(t),y6o=r(lwe," (BlenderbotSmall model)"),lwe.forEach(t),L6o=i(W),v_=n(W,"LI",{});var iwe=s(v_);ile=n(iwe,"STRONG",{});var OJr=s(ile);x6o=r(OJr,"camembert"),OJr.forEach(t),$6o=r(iwe," \u2014 "),Wq=n(iwe,"A",{href:!0});var VJr=s(Wq);k6o=r(VJr,"CamembertForCausalLM"),VJr.forEach(t),S6o=r(iwe," (CamemBERT model)"),iwe.forEach(t),R6o=i(W),F_=n(W,"LI",{});var dwe=s(F_);dle=n(dwe,"STRONG",{});var XJr=s(dle);B6o=r(XJr,"ctrl"),XJr.forEach(t),P6o=r(dwe," \u2014 "),Hq=n(dwe,"A",{href:!0});var zJr=s(Hq);I6o=r(zJr,"CTRLLMHeadModel"),zJr.forEach(t),q6o=r(dwe," (CTRL model)"),dwe.forEach(t),N6o=i(W),T_=n(W,"LI",{});var cwe=s(T_);cle=n(cwe,"STRONG",{});var QJr=s(cle);j6o=r(QJr,"data2vec-text"),QJr.forEach(t),D6o=r(cwe," \u2014 "),Uq=n(cwe,"A",{href:!0});var WJr=s(Uq);G6o=r(WJr,"Data2VecTextForCausalLM"),WJr.forEach(t),O6o=r(cwe," (Data2VecText model)"),cwe.forEach(t),V6o=i(W),M_=n(W,"LI",{});var fwe=s(M_);fle=n(fwe,"STRONG",{});var HJr=s(fle);X6o=r(HJr,"electra"),HJr.forEach(t),z6o=r(fwe," \u2014 "),Jq=n(fwe,"A",{href:!0});var UJr=s(Jq);Q6o=r(UJr,"ElectraForCausalLM"),UJr.forEach(t),W6o=r(fwe," (ELECTRA model)"),fwe.forEach(t),H6o=i(W),E_=n(W,"LI",{});var mwe=s(E_);mle=n(mwe,"STRONG",{});var JJr=s(mle);U6o=r(JJr,"gpt2"),JJr.forEach(t),J6o=r(mwe," \u2014 "),Yq=n(mwe,"A",{href:!0});var YJr=s(Yq);Y6o=r(YJr,"GPT2LMHeadModel"),YJr.forEach(t),K6o=r(mwe," (OpenAI GPT-2 model)"),mwe.forEach(t),Z6o=i(W),C_=n(W,"LI",{});var gwe=s(C_);gle=n(gwe,"STRONG",{});var KJr=s(gle);eTo=r(KJr,"gpt_neo"),KJr.forEach(t),oTo=r(gwe," \u2014 "),Kq=n(gwe,"A",{href:!0});var ZJr=s(Kq);rTo=r(ZJr,"GPTNeoForCausalLM"),ZJr.forEach(t),tTo=r(gwe," (GPT Neo model)"),gwe.forEach(t),aTo=i(W),w_=n(W,"LI",{});var hwe=s(w_);hle=n(hwe,"STRONG",{});var eYr=s(hle);nTo=r(eYr,"gptj"),eYr.forEach(t),sTo=r(hwe," \u2014 "),Zq=n(hwe,"A",{href:!0});var oYr=s(Zq);lTo=r(oYr,"GPTJForCausalLM"),oYr.forEach(t),iTo=r(hwe," (GPT-J model)"),hwe.forEach(t),dTo=i(W),A_=n(W,"LI",{});var pwe=s(A_);ple=n(pwe,"STRONG",{});var rYr=s(ple);cTo=r(rYr,"marian"),rYr.forEach(t),fTo=r(pwe," \u2014 "),eN=n(pwe,"A",{href:!0});var tYr=s(eN);mTo=r(tYr,"MarianForCausalLM"),tYr.forEach(t),gTo=r(pwe," (Marian model)"),pwe.forEach(t),hTo=i(W),y_=n(W,"LI",{});var uwe=s(y_);ule=n(uwe,"STRONG",{});var aYr=s(ule);pTo=r(aYr,"mbart"),aYr.forEach(t),uTo=r(uwe," \u2014 "),oN=n(uwe,"A",{href:!0});var nYr=s(oN);_To=r(nYr,"MBartForCausalLM"),nYr.forEach(t),bTo=r(uwe," (mBART model)"),uwe.forEach(t),vTo=i(W),L_=n(W,"LI",{});var _we=s(L_);_le=n(_we,"STRONG",{});var sYr=s(_le);FTo=r(sYr,"megatron-bert"),sYr.forEach(t),TTo=r(_we," \u2014 "),rN=n(_we,"A",{href:!0});var lYr=s(rN);MTo=r(lYr,"MegatronBertForCausalLM"),lYr.forEach(t),ETo=r(_we," (MegatronBert model)"),_we.forEach(t),CTo=i(W),x_=n(W,"LI",{});var bwe=s(x_);ble=n(bwe,"STRONG",{});var iYr=s(ble);wTo=r(iYr,"openai-gpt"),iYr.forEach(t),ATo=r(bwe," \u2014 "),tN=n(bwe,"A",{href:!0});var dYr=s(tN);yTo=r(dYr,"OpenAIGPTLMHeadModel"),dYr.forEach(t),LTo=r(bwe," (OpenAI GPT model)"),bwe.forEach(t),xTo=i(W),$_=n(W,"LI",{});var vwe=s($_);vle=n(vwe,"STRONG",{});var cYr=s(vle);$To=r(cYr,"pegasus"),cYr.forEach(t),kTo=r(vwe," \u2014 "),aN=n(vwe,"A",{href:!0});var fYr=s(aN);STo=r(fYr,"PegasusForCausalLM"),fYr.forEach(t),RTo=r(vwe," (Pegasus model)"),vwe.forEach(t),BTo=i(W),k_=n(W,"LI",{});var Fwe=s(k_);Fle=n(Fwe,"STRONG",{});var mYr=s(Fle);PTo=r(mYr,"plbart"),mYr.forEach(t),ITo=r(Fwe," \u2014 "),nN=n(Fwe,"A",{href:!0});var gYr=s(nN);qTo=r(gYr,"PLBartForCausalLM"),gYr.forEach(t),NTo=r(Fwe," (PLBart model)"),Fwe.forEach(t),jTo=i(W),S_=n(W,"LI",{});var Twe=s(S_);Tle=n(Twe,"STRONG",{});var hYr=s(Tle);DTo=r(hYr,"prophetnet"),hYr.forEach(t),GTo=r(Twe," \u2014 "),sN=n(Twe,"A",{href:!0});var pYr=s(sN);OTo=r(pYr,"ProphetNetForCausalLM"),pYr.forEach(t),VTo=r(Twe," (ProphetNet model)"),Twe.forEach(t),XTo=i(W),R_=n(W,"LI",{});var Mwe=s(R_);Mle=n(Mwe,"STRONG",{});var uYr=s(Mle);zTo=r(uYr,"qdqbert"),uYr.forEach(t),QTo=r(Mwe," \u2014 "),lN=n(Mwe,"A",{href:!0});var _Yr=s(lN);WTo=r(_Yr,"QDQBertLMHeadModel"),_Yr.forEach(t),HTo=r(Mwe," (QDQBert model)"),Mwe.forEach(t),UTo=i(W),B_=n(W,"LI",{});var Ewe=s(B_);Ele=n(Ewe,"STRONG",{});var bYr=s(Ele);JTo=r(bYr,"reformer"),bYr.forEach(t),YTo=r(Ewe," \u2014 "),iN=n(Ewe,"A",{href:!0});var vYr=s(iN);KTo=r(vYr,"ReformerModelWithLMHead"),vYr.forEach(t),ZTo=r(Ewe," (Reformer model)"),Ewe.forEach(t),e9o=i(W),P_=n(W,"LI",{});var Cwe=s(P_);Cle=n(Cwe,"STRONG",{});var FYr=s(Cle);o9o=r(FYr,"rembert"),FYr.forEach(t),r9o=r(Cwe," \u2014 "),dN=n(Cwe,"A",{href:!0});var TYr=s(dN);t9o=r(TYr,"RemBertForCausalLM"),TYr.forEach(t),a9o=r(Cwe," (RemBERT model)"),Cwe.forEach(t),n9o=i(W),I_=n(W,"LI",{});var wwe=s(I_);wle=n(wwe,"STRONG",{});var MYr=s(wle);s9o=r(MYr,"roberta"),MYr.forEach(t),l9o=r(wwe," \u2014 "),cN=n(wwe,"A",{href:!0});var EYr=s(cN);i9o=r(EYr,"RobertaForCausalLM"),EYr.forEach(t),d9o=r(wwe," (RoBERTa model)"),wwe.forEach(t),c9o=i(W),q_=n(W,"LI",{});var Awe=s(q_);Ale=n(Awe,"STRONG",{});var CYr=s(Ale);f9o=r(CYr,"roformer"),CYr.forEach(t),m9o=r(Awe," \u2014 "),fN=n(Awe,"A",{href:!0});var wYr=s(fN);g9o=r(wYr,"RoFormerForCausalLM"),wYr.forEach(t),h9o=r(Awe," (RoFormer model)"),Awe.forEach(t),p9o=i(W),N_=n(W,"LI",{});var ywe=s(N_);yle=n(ywe,"STRONG",{});var AYr=s(yle);u9o=r(AYr,"speech_to_text_2"),AYr.forEach(t),_9o=r(ywe," \u2014 "),mN=n(ywe,"A",{href:!0});var yYr=s(mN);b9o=r(yYr,"Speech2Text2ForCausalLM"),yYr.forEach(t),v9o=r(ywe," (Speech2Text2 model)"),ywe.forEach(t),F9o=i(W),j_=n(W,"LI",{});var Lwe=s(j_);Lle=n(Lwe,"STRONG",{});var LYr=s(Lle);T9o=r(LYr,"transfo-xl"),LYr.forEach(t),M9o=r(Lwe," \u2014 "),gN=n(Lwe,"A",{href:!0});var xYr=s(gN);E9o=r(xYr,"TransfoXLLMHeadModel"),xYr.forEach(t),C9o=r(Lwe," (Transformer-XL model)"),Lwe.forEach(t),w9o=i(W),D_=n(W,"LI",{});var xwe=s(D_);xle=n(xwe,"STRONG",{});var $Yr=s(xle);A9o=r($Yr,"trocr"),$Yr.forEach(t),y9o=r(xwe," \u2014 "),hN=n(xwe,"A",{href:!0});var kYr=s(hN);L9o=r(kYr,"TrOCRForCausalLM"),kYr.forEach(t),x9o=r(xwe," (TrOCR model)"),xwe.forEach(t),$9o=i(W),G_=n(W,"LI",{});var $we=s(G_);$le=n($we,"STRONG",{});var SYr=s($le);k9o=r(SYr,"xglm"),SYr.forEach(t),S9o=r($we," \u2014 "),pN=n($we,"A",{href:!0});var RYr=s(pN);R9o=r(RYr,"XGLMForCausalLM"),RYr.forEach(t),B9o=r($we," (XGLM model)"),$we.forEach(t),P9o=i(W),O_=n(W,"LI",{});var kwe=s(O_);kle=n(kwe,"STRONG",{});var BYr=s(kle);I9o=r(BYr,"xlm"),BYr.forEach(t),q9o=r(kwe," \u2014 "),uN=n(kwe,"A",{href:!0});var PYr=s(uN);N9o=r(PYr,"XLMWithLMHeadModel"),PYr.forEach(t),j9o=r(kwe," (XLM model)"),kwe.forEach(t),D9o=i(W),V_=n(W,"LI",{});var Swe=s(V_);Sle=n(Swe,"STRONG",{});var IYr=s(Sle);G9o=r(IYr,"xlm-prophetnet"),IYr.forEach(t),O9o=r(Swe," \u2014 "),_N=n(Swe,"A",{href:!0});var qYr=s(_N);V9o=r(qYr,"XLMProphetNetForCausalLM"),qYr.forEach(t),X9o=r(Swe," (XLMProphetNet model)"),Swe.forEach(t),z9o=i(W),X_=n(W,"LI",{});var Rwe=s(X_);Rle=n(Rwe,"STRONG",{});var NYr=s(Rle);Q9o=r(NYr,"xlm-roberta"),NYr.forEach(t),W9o=r(Rwe," \u2014 "),bN=n(Rwe,"A",{href:!0});var jYr=s(bN);H9o=r(jYr,"XLMRobertaForCausalLM"),jYr.forEach(t),U9o=r(Rwe," (XLM-RoBERTa model)"),Rwe.forEach(t),J9o=i(W),z_=n(W,"LI",{});var Bwe=s(z_);Ble=n(Bwe,"STRONG",{});var DYr=s(Ble);Y9o=r(DYr,"xlm-roberta-xl"),DYr.forEach(t),K9o=r(Bwe," \u2014 "),vN=n(Bwe,"A",{href:!0});var GYr=s(vN);Z9o=r(GYr,"XLMRobertaXLForCausalLM"),GYr.forEach(t),eMo=r(Bwe," (XLM-RoBERTa-XL model)"),Bwe.forEach(t),oMo=i(W),Q_=n(W,"LI",{});var Pwe=s(Q_);Ple=n(Pwe,"STRONG",{});var OYr=s(Ple);rMo=r(OYr,"xlnet"),OYr.forEach(t),tMo=r(Pwe," \u2014 "),FN=n(Pwe,"A",{href:!0});var VYr=s(FN);aMo=r(VYr,"XLNetLMHeadModel"),VYr.forEach(t),nMo=r(Pwe," (XLNet model)"),Pwe.forEach(t),W.forEach(t),sMo=i(Kt),W_=n(Kt,"P",{});var Iwe=s(W_);lMo=r(Iwe,"The model is set in evaluation mode by default using "),Ile=n(Iwe,"CODE",{});var XYr=s(Ile);iMo=r(XYr,"model.eval()"),XYr.forEach(t),dMo=r(Iwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qle=n(Iwe,"CODE",{});var zYr=s(qle);cMo=r(zYr,"model.train()"),zYr.forEach(t),Iwe.forEach(t),fMo=i(Kt),T(H_.$$.fragment,Kt),Kt.forEach(t),Ns.forEach(t),GBe=i(f),wi=n(f,"H2",{class:!0});var VIe=s(wi);U_=n(VIe,"A",{id:!0,class:!0,href:!0});var QYr=s(U_);Nle=n(QYr,"SPAN",{});var WYr=s(Nle);T(hA.$$.fragment,WYr),WYr.forEach(t),QYr.forEach(t),mMo=i(VIe),jle=n(VIe,"SPAN",{});var HYr=s(jle);gMo=r(HYr,"AutoModelForMaskedLM"),HYr.forEach(t),VIe.forEach(t),OBe=i(f),ko=n(f,"DIV",{class:!0});var js=s(ko);T(pA.$$.fragment,js),hMo=i(js),Ai=n(js,"P",{});var AY=s(Ai);pMo=r(AY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),TN=n(AY,"A",{href:!0});var UYr=s(TN);uMo=r(UYr,"from_pretrained()"),UYr.forEach(t),_Mo=r(AY," class method or the "),MN=n(AY,"A",{href:!0});var JYr=s(MN);bMo=r(JYr,"from_config()"),JYr.forEach(t),vMo=r(AY,` class
method.`),AY.forEach(t),FMo=i(js),uA=n(js,"P",{});var XIe=s(uA);TMo=r(XIe,"This class cannot be instantiated directly using "),Dle=n(XIe,"CODE",{});var YYr=s(Dle);MMo=r(YYr,"__init__()"),YYr.forEach(t),EMo=r(XIe," (throws an error)."),XIe.forEach(t),CMo=i(js),rt=n(js,"DIV",{class:!0});var qC=s(rt);T(_A.$$.fragment,qC),wMo=i(qC),Gle=n(qC,"P",{});var KYr=s(Gle);AMo=r(KYr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),KYr.forEach(t),yMo=i(qC),yi=n(qC,"P",{});var yY=s(yi);LMo=r(yY,`Note:
Loading a model from its configuration file does `),Ole=n(yY,"STRONG",{});var ZYr=s(Ole);xMo=r(ZYr,"not"),ZYr.forEach(t),$Mo=r(yY,` load the model weights. It only affects the
model\u2019s configuration. Use `),EN=n(yY,"A",{href:!0});var eKr=s(EN);kMo=r(eKr,"from_pretrained()"),eKr.forEach(t),SMo=r(yY," to load the model weights."),yY.forEach(t),RMo=i(qC),T(J_.$$.fragment,qC),qC.forEach(t),BMo=i(js),Ye=n(js,"DIV",{class:!0});var Zt=s(Ye);T(bA.$$.fragment,Zt),PMo=i(Zt),Vle=n(Zt,"P",{});var oKr=s(Vle);IMo=r(oKr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),oKr.forEach(t),qMo=i(Zt),Aa=n(Zt,"P",{});var NC=s(Aa);NMo=r(NC,"The model class to instantiate is selected based on the "),Xle=n(NC,"CODE",{});var rKr=s(Xle);jMo=r(rKr,"model_type"),rKr.forEach(t),DMo=r(NC,` property of the config object (either
passed as an argument or loaded from `),zle=n(NC,"CODE",{});var tKr=s(zle);GMo=r(tKr,"pretrained_model_name_or_path"),tKr.forEach(t),OMo=r(NC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qle=n(NC,"CODE",{});var aKr=s(Qle);VMo=r(aKr,"pretrained_model_name_or_path"),aKr.forEach(t),XMo=r(NC,":"),NC.forEach(t),zMo=i(Zt),Q=n(Zt,"UL",{});var H=s(Q);Y_=n(H,"LI",{});var qwe=s(Y_);Wle=n(qwe,"STRONG",{});var nKr=s(Wle);QMo=r(nKr,"albert"),nKr.forEach(t),WMo=r(qwe," \u2014 "),CN=n(qwe,"A",{href:!0});var sKr=s(CN);HMo=r(sKr,"AlbertForMaskedLM"),sKr.forEach(t),UMo=r(qwe," (ALBERT model)"),qwe.forEach(t),JMo=i(H),K_=n(H,"LI",{});var Nwe=s(K_);Hle=n(Nwe,"STRONG",{});var lKr=s(Hle);YMo=r(lKr,"bart"),lKr.forEach(t),KMo=r(Nwe," \u2014 "),wN=n(Nwe,"A",{href:!0});var iKr=s(wN);ZMo=r(iKr,"BartForConditionalGeneration"),iKr.forEach(t),e4o=r(Nwe," (BART model)"),Nwe.forEach(t),o4o=i(H),Z_=n(H,"LI",{});var jwe=s(Z_);Ule=n(jwe,"STRONG",{});var dKr=s(Ule);r4o=r(dKr,"bert"),dKr.forEach(t),t4o=r(jwe," \u2014 "),AN=n(jwe,"A",{href:!0});var cKr=s(AN);a4o=r(cKr,"BertForMaskedLM"),cKr.forEach(t),n4o=r(jwe," (BERT model)"),jwe.forEach(t),s4o=i(H),e1=n(H,"LI",{});var Dwe=s(e1);Jle=n(Dwe,"STRONG",{});var fKr=s(Jle);l4o=r(fKr,"big_bird"),fKr.forEach(t),i4o=r(Dwe," \u2014 "),yN=n(Dwe,"A",{href:!0});var mKr=s(yN);d4o=r(mKr,"BigBirdForMaskedLM"),mKr.forEach(t),c4o=r(Dwe," (BigBird model)"),Dwe.forEach(t),f4o=i(H),o1=n(H,"LI",{});var Gwe=s(o1);Yle=n(Gwe,"STRONG",{});var gKr=s(Yle);m4o=r(gKr,"camembert"),gKr.forEach(t),g4o=r(Gwe," \u2014 "),LN=n(Gwe,"A",{href:!0});var hKr=s(LN);h4o=r(hKr,"CamembertForMaskedLM"),hKr.forEach(t),p4o=r(Gwe," (CamemBERT model)"),Gwe.forEach(t),u4o=i(H),r1=n(H,"LI",{});var Owe=s(r1);Kle=n(Owe,"STRONG",{});var pKr=s(Kle);_4o=r(pKr,"convbert"),pKr.forEach(t),b4o=r(Owe," \u2014 "),xN=n(Owe,"A",{href:!0});var uKr=s(xN);v4o=r(uKr,"ConvBertForMaskedLM"),uKr.forEach(t),F4o=r(Owe," (ConvBERT model)"),Owe.forEach(t),T4o=i(H),t1=n(H,"LI",{});var Vwe=s(t1);Zle=n(Vwe,"STRONG",{});var _Kr=s(Zle);M4o=r(_Kr,"data2vec-text"),_Kr.forEach(t),E4o=r(Vwe," \u2014 "),$N=n(Vwe,"A",{href:!0});var bKr=s($N);C4o=r(bKr,"Data2VecTextForMaskedLM"),bKr.forEach(t),w4o=r(Vwe," (Data2VecText model)"),Vwe.forEach(t),A4o=i(H),a1=n(H,"LI",{});var Xwe=s(a1);eie=n(Xwe,"STRONG",{});var vKr=s(eie);y4o=r(vKr,"deberta"),vKr.forEach(t),L4o=r(Xwe," \u2014 "),kN=n(Xwe,"A",{href:!0});var FKr=s(kN);x4o=r(FKr,"DebertaForMaskedLM"),FKr.forEach(t),$4o=r(Xwe," (DeBERTa model)"),Xwe.forEach(t),k4o=i(H),n1=n(H,"LI",{});var zwe=s(n1);oie=n(zwe,"STRONG",{});var TKr=s(oie);S4o=r(TKr,"deberta-v2"),TKr.forEach(t),R4o=r(zwe," \u2014 "),SN=n(zwe,"A",{href:!0});var MKr=s(SN);B4o=r(MKr,"DebertaV2ForMaskedLM"),MKr.forEach(t),P4o=r(zwe," (DeBERTa-v2 model)"),zwe.forEach(t),I4o=i(H),s1=n(H,"LI",{});var Qwe=s(s1);rie=n(Qwe,"STRONG",{});var EKr=s(rie);q4o=r(EKr,"distilbert"),EKr.forEach(t),N4o=r(Qwe," \u2014 "),RN=n(Qwe,"A",{href:!0});var CKr=s(RN);j4o=r(CKr,"DistilBertForMaskedLM"),CKr.forEach(t),D4o=r(Qwe," (DistilBERT model)"),Qwe.forEach(t),G4o=i(H),l1=n(H,"LI",{});var Wwe=s(l1);tie=n(Wwe,"STRONG",{});var wKr=s(tie);O4o=r(wKr,"electra"),wKr.forEach(t),V4o=r(Wwe," \u2014 "),BN=n(Wwe,"A",{href:!0});var AKr=s(BN);X4o=r(AKr,"ElectraForMaskedLM"),AKr.forEach(t),z4o=r(Wwe," (ELECTRA model)"),Wwe.forEach(t),Q4o=i(H),i1=n(H,"LI",{});var Hwe=s(i1);aie=n(Hwe,"STRONG",{});var yKr=s(aie);W4o=r(yKr,"flaubert"),yKr.forEach(t),H4o=r(Hwe," \u2014 "),PN=n(Hwe,"A",{href:!0});var LKr=s(PN);U4o=r(LKr,"FlaubertWithLMHeadModel"),LKr.forEach(t),J4o=r(Hwe," (FlauBERT model)"),Hwe.forEach(t),Y4o=i(H),d1=n(H,"LI",{});var Uwe=s(d1);nie=n(Uwe,"STRONG",{});var xKr=s(nie);K4o=r(xKr,"fnet"),xKr.forEach(t),Z4o=r(Uwe," \u2014 "),IN=n(Uwe,"A",{href:!0});var $Kr=s(IN);eEo=r($Kr,"FNetForMaskedLM"),$Kr.forEach(t),oEo=r(Uwe," (FNet model)"),Uwe.forEach(t),rEo=i(H),c1=n(H,"LI",{});var Jwe=s(c1);sie=n(Jwe,"STRONG",{});var kKr=s(sie);tEo=r(kKr,"funnel"),kKr.forEach(t),aEo=r(Jwe," \u2014 "),qN=n(Jwe,"A",{href:!0});var SKr=s(qN);nEo=r(SKr,"FunnelForMaskedLM"),SKr.forEach(t),sEo=r(Jwe," (Funnel Transformer model)"),Jwe.forEach(t),lEo=i(H),f1=n(H,"LI",{});var Ywe=s(f1);lie=n(Ywe,"STRONG",{});var RKr=s(lie);iEo=r(RKr,"ibert"),RKr.forEach(t),dEo=r(Ywe," \u2014 "),NN=n(Ywe,"A",{href:!0});var BKr=s(NN);cEo=r(BKr,"IBertForMaskedLM"),BKr.forEach(t),fEo=r(Ywe," (I-BERT model)"),Ywe.forEach(t),mEo=i(H),m1=n(H,"LI",{});var Kwe=s(m1);iie=n(Kwe,"STRONG",{});var PKr=s(iie);gEo=r(PKr,"layoutlm"),PKr.forEach(t),hEo=r(Kwe," \u2014 "),jN=n(Kwe,"A",{href:!0});var IKr=s(jN);pEo=r(IKr,"LayoutLMForMaskedLM"),IKr.forEach(t),uEo=r(Kwe," (LayoutLM model)"),Kwe.forEach(t),_Eo=i(H),g1=n(H,"LI",{});var Zwe=s(g1);die=n(Zwe,"STRONG",{});var qKr=s(die);bEo=r(qKr,"longformer"),qKr.forEach(t),vEo=r(Zwe," \u2014 "),DN=n(Zwe,"A",{href:!0});var NKr=s(DN);FEo=r(NKr,"LongformerForMaskedLM"),NKr.forEach(t),TEo=r(Zwe," (Longformer model)"),Zwe.forEach(t),MEo=i(H),h1=n(H,"LI",{});var eAe=s(h1);cie=n(eAe,"STRONG",{});var jKr=s(cie);EEo=r(jKr,"mbart"),jKr.forEach(t),CEo=r(eAe," \u2014 "),GN=n(eAe,"A",{href:!0});var DKr=s(GN);wEo=r(DKr,"MBartForConditionalGeneration"),DKr.forEach(t),AEo=r(eAe," (mBART model)"),eAe.forEach(t),yEo=i(H),p1=n(H,"LI",{});var oAe=s(p1);fie=n(oAe,"STRONG",{});var GKr=s(fie);LEo=r(GKr,"megatron-bert"),GKr.forEach(t),xEo=r(oAe," \u2014 "),ON=n(oAe,"A",{href:!0});var OKr=s(ON);$Eo=r(OKr,"MegatronBertForMaskedLM"),OKr.forEach(t),kEo=r(oAe," (MegatronBert model)"),oAe.forEach(t),SEo=i(H),u1=n(H,"LI",{});var rAe=s(u1);mie=n(rAe,"STRONG",{});var VKr=s(mie);REo=r(VKr,"mobilebert"),VKr.forEach(t),BEo=r(rAe," \u2014 "),VN=n(rAe,"A",{href:!0});var XKr=s(VN);PEo=r(XKr,"MobileBertForMaskedLM"),XKr.forEach(t),IEo=r(rAe," (MobileBERT model)"),rAe.forEach(t),qEo=i(H),_1=n(H,"LI",{});var tAe=s(_1);gie=n(tAe,"STRONG",{});var zKr=s(gie);NEo=r(zKr,"mpnet"),zKr.forEach(t),jEo=r(tAe," \u2014 "),XN=n(tAe,"A",{href:!0});var QKr=s(XN);DEo=r(QKr,"MPNetForMaskedLM"),QKr.forEach(t),GEo=r(tAe," (MPNet model)"),tAe.forEach(t),OEo=i(H),b1=n(H,"LI",{});var aAe=s(b1);hie=n(aAe,"STRONG",{});var WKr=s(hie);VEo=r(WKr,"nystromformer"),WKr.forEach(t),XEo=r(aAe," \u2014 "),zN=n(aAe,"A",{href:!0});var HKr=s(zN);zEo=r(HKr,"NystromformerForMaskedLM"),HKr.forEach(t),QEo=r(aAe," (Nystromformer model)"),aAe.forEach(t),WEo=i(H),v1=n(H,"LI",{});var nAe=s(v1);pie=n(nAe,"STRONG",{});var UKr=s(pie);HEo=r(UKr,"perceiver"),UKr.forEach(t),UEo=r(nAe," \u2014 "),QN=n(nAe,"A",{href:!0});var JKr=s(QN);JEo=r(JKr,"PerceiverForMaskedLM"),JKr.forEach(t),YEo=r(nAe," (Perceiver model)"),nAe.forEach(t),KEo=i(H),F1=n(H,"LI",{});var sAe=s(F1);uie=n(sAe,"STRONG",{});var YKr=s(uie);ZEo=r(YKr,"qdqbert"),YKr.forEach(t),e5o=r(sAe," \u2014 "),WN=n(sAe,"A",{href:!0});var KKr=s(WN);o5o=r(KKr,"QDQBertForMaskedLM"),KKr.forEach(t),r5o=r(sAe," (QDQBert model)"),sAe.forEach(t),t5o=i(H),T1=n(H,"LI",{});var lAe=s(T1);_ie=n(lAe,"STRONG",{});var ZKr=s(_ie);a5o=r(ZKr,"reformer"),ZKr.forEach(t),n5o=r(lAe," \u2014 "),HN=n(lAe,"A",{href:!0});var eZr=s(HN);s5o=r(eZr,"ReformerForMaskedLM"),eZr.forEach(t),l5o=r(lAe," (Reformer model)"),lAe.forEach(t),i5o=i(H),M1=n(H,"LI",{});var iAe=s(M1);bie=n(iAe,"STRONG",{});var oZr=s(bie);d5o=r(oZr,"rembert"),oZr.forEach(t),c5o=r(iAe," \u2014 "),UN=n(iAe,"A",{href:!0});var rZr=s(UN);f5o=r(rZr,"RemBertForMaskedLM"),rZr.forEach(t),m5o=r(iAe," (RemBERT model)"),iAe.forEach(t),g5o=i(H),E1=n(H,"LI",{});var dAe=s(E1);vie=n(dAe,"STRONG",{});var tZr=s(vie);h5o=r(tZr,"roberta"),tZr.forEach(t),p5o=r(dAe," \u2014 "),JN=n(dAe,"A",{href:!0});var aZr=s(JN);u5o=r(aZr,"RobertaForMaskedLM"),aZr.forEach(t),_5o=r(dAe," (RoBERTa model)"),dAe.forEach(t),b5o=i(H),C1=n(H,"LI",{});var cAe=s(C1);Fie=n(cAe,"STRONG",{});var nZr=s(Fie);v5o=r(nZr,"roformer"),nZr.forEach(t),F5o=r(cAe," \u2014 "),YN=n(cAe,"A",{href:!0});var sZr=s(YN);T5o=r(sZr,"RoFormerForMaskedLM"),sZr.forEach(t),M5o=r(cAe," (RoFormer model)"),cAe.forEach(t),E5o=i(H),w1=n(H,"LI",{});var fAe=s(w1);Tie=n(fAe,"STRONG",{});var lZr=s(Tie);C5o=r(lZr,"squeezebert"),lZr.forEach(t),w5o=r(fAe," \u2014 "),KN=n(fAe,"A",{href:!0});var iZr=s(KN);A5o=r(iZr,"SqueezeBertForMaskedLM"),iZr.forEach(t),y5o=r(fAe," (SqueezeBERT model)"),fAe.forEach(t),L5o=i(H),A1=n(H,"LI",{});var mAe=s(A1);Mie=n(mAe,"STRONG",{});var dZr=s(Mie);x5o=r(dZr,"tapas"),dZr.forEach(t),$5o=r(mAe," \u2014 "),ZN=n(mAe,"A",{href:!0});var cZr=s(ZN);k5o=r(cZr,"TapasForMaskedLM"),cZr.forEach(t),S5o=r(mAe," (TAPAS model)"),mAe.forEach(t),R5o=i(H),y1=n(H,"LI",{});var gAe=s(y1);Eie=n(gAe,"STRONG",{});var fZr=s(Eie);B5o=r(fZr,"wav2vec2"),fZr.forEach(t),P5o=r(gAe," \u2014 "),Cie=n(gAe,"CODE",{});var mZr=s(Cie);I5o=r(mZr,"Wav2Vec2ForMaskedLM"),mZr.forEach(t),q5o=r(gAe," (Wav2Vec2 model)"),gAe.forEach(t),N5o=i(H),L1=n(H,"LI",{});var hAe=s(L1);wie=n(hAe,"STRONG",{});var gZr=s(wie);j5o=r(gZr,"xlm"),gZr.forEach(t),D5o=r(hAe," \u2014 "),ej=n(hAe,"A",{href:!0});var hZr=s(ej);G5o=r(hZr,"XLMWithLMHeadModel"),hZr.forEach(t),O5o=r(hAe," (XLM model)"),hAe.forEach(t),V5o=i(H),x1=n(H,"LI",{});var pAe=s(x1);Aie=n(pAe,"STRONG",{});var pZr=s(Aie);X5o=r(pZr,"xlm-roberta"),pZr.forEach(t),z5o=r(pAe," \u2014 "),oj=n(pAe,"A",{href:!0});var uZr=s(oj);Q5o=r(uZr,"XLMRobertaForMaskedLM"),uZr.forEach(t),W5o=r(pAe," (XLM-RoBERTa model)"),pAe.forEach(t),H5o=i(H),$1=n(H,"LI",{});var uAe=s($1);yie=n(uAe,"STRONG",{});var _Zr=s(yie);U5o=r(_Zr,"xlm-roberta-xl"),_Zr.forEach(t),J5o=r(uAe," \u2014 "),rj=n(uAe,"A",{href:!0});var bZr=s(rj);Y5o=r(bZr,"XLMRobertaXLForMaskedLM"),bZr.forEach(t),K5o=r(uAe," (XLM-RoBERTa-XL model)"),uAe.forEach(t),Z5o=i(H),k1=n(H,"LI",{});var _Ae=s(k1);Lie=n(_Ae,"STRONG",{});var vZr=s(Lie);eCo=r(vZr,"yoso"),vZr.forEach(t),oCo=r(_Ae," \u2014 "),tj=n(_Ae,"A",{href:!0});var FZr=s(tj);rCo=r(FZr,"YosoForMaskedLM"),FZr.forEach(t),tCo=r(_Ae," (YOSO model)"),_Ae.forEach(t),H.forEach(t),aCo=i(Zt),S1=n(Zt,"P",{});var bAe=s(S1);nCo=r(bAe,"The model is set in evaluation mode by default using "),xie=n(bAe,"CODE",{});var TZr=s(xie);sCo=r(TZr,"model.eval()"),TZr.forEach(t),lCo=r(bAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ie=n(bAe,"CODE",{});var MZr=s($ie);iCo=r(MZr,"model.train()"),MZr.forEach(t),bAe.forEach(t),dCo=i(Zt),T(R1.$$.fragment,Zt),Zt.forEach(t),js.forEach(t),VBe=i(f),Li=n(f,"H2",{class:!0});var zIe=s(Li);B1=n(zIe,"A",{id:!0,class:!0,href:!0});var EZr=s(B1);kie=n(EZr,"SPAN",{});var CZr=s(kie);T(vA.$$.fragment,CZr),CZr.forEach(t),EZr.forEach(t),cCo=i(zIe),Sie=n(zIe,"SPAN",{});var wZr=s(Sie);fCo=r(wZr,"AutoModelForSeq2SeqLM"),wZr.forEach(t),zIe.forEach(t),XBe=i(f),So=n(f,"DIV",{class:!0});var Ds=s(So);T(FA.$$.fragment,Ds),mCo=i(Ds),xi=n(Ds,"P",{});var LY=s(xi);gCo=r(LY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),aj=n(LY,"A",{href:!0});var AZr=s(aj);hCo=r(AZr,"from_pretrained()"),AZr.forEach(t),pCo=r(LY," class method or the "),nj=n(LY,"A",{href:!0});var yZr=s(nj);uCo=r(yZr,"from_config()"),yZr.forEach(t),_Co=r(LY,` class
method.`),LY.forEach(t),bCo=i(Ds),TA=n(Ds,"P",{});var QIe=s(TA);vCo=r(QIe,"This class cannot be instantiated directly using "),Rie=n(QIe,"CODE",{});var LZr=s(Rie);FCo=r(LZr,"__init__()"),LZr.forEach(t),TCo=r(QIe," (throws an error)."),QIe.forEach(t),MCo=i(Ds),tt=n(Ds,"DIV",{class:!0});var jC=s(tt);T(MA.$$.fragment,jC),ECo=i(jC),Bie=n(jC,"P",{});var xZr=s(Bie);CCo=r(xZr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),xZr.forEach(t),wCo=i(jC),$i=n(jC,"P",{});var xY=s($i);ACo=r(xY,`Note:
Loading a model from its configuration file does `),Pie=n(xY,"STRONG",{});var $Zr=s(Pie);yCo=r($Zr,"not"),$Zr.forEach(t),LCo=r(xY,` load the model weights. It only affects the
model\u2019s configuration. Use `),sj=n(xY,"A",{href:!0});var kZr=s(sj);xCo=r(kZr,"from_pretrained()"),kZr.forEach(t),$Co=r(xY," to load the model weights."),xY.forEach(t),kCo=i(jC),T(P1.$$.fragment,jC),jC.forEach(t),SCo=i(Ds),Ke=n(Ds,"DIV",{class:!0});var ea=s(Ke);T(EA.$$.fragment,ea),RCo=i(ea),Iie=n(ea,"P",{});var SZr=s(Iie);BCo=r(SZr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),SZr.forEach(t),PCo=i(ea),ya=n(ea,"P",{});var DC=s(ya);ICo=r(DC,"The model class to instantiate is selected based on the "),qie=n(DC,"CODE",{});var RZr=s(qie);qCo=r(RZr,"model_type"),RZr.forEach(t),NCo=r(DC,` property of the config object (either
passed as an argument or loaded from `),Nie=n(DC,"CODE",{});var BZr=s(Nie);jCo=r(BZr,"pretrained_model_name_or_path"),BZr.forEach(t),DCo=r(DC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jie=n(DC,"CODE",{});var PZr=s(jie);GCo=r(PZr,"pretrained_model_name_or_path"),PZr.forEach(t),OCo=r(DC,":"),DC.forEach(t),VCo=i(ea),he=n(ea,"UL",{});var ue=s(he);I1=n(ue,"LI",{});var vAe=s(I1);Die=n(vAe,"STRONG",{});var IZr=s(Die);XCo=r(IZr,"bart"),IZr.forEach(t),zCo=r(vAe," \u2014 "),lj=n(vAe,"A",{href:!0});var qZr=s(lj);QCo=r(qZr,"BartForConditionalGeneration"),qZr.forEach(t),WCo=r(vAe," (BART model)"),vAe.forEach(t),HCo=i(ue),q1=n(ue,"LI",{});var FAe=s(q1);Gie=n(FAe,"STRONG",{});var NZr=s(Gie);UCo=r(NZr,"bigbird_pegasus"),NZr.forEach(t),JCo=r(FAe," \u2014 "),ij=n(FAe,"A",{href:!0});var jZr=s(ij);YCo=r(jZr,"BigBirdPegasusForConditionalGeneration"),jZr.forEach(t),KCo=r(FAe," (BigBirdPegasus model)"),FAe.forEach(t),ZCo=i(ue),N1=n(ue,"LI",{});var TAe=s(N1);Oie=n(TAe,"STRONG",{});var DZr=s(Oie);e3o=r(DZr,"blenderbot"),DZr.forEach(t),o3o=r(TAe," \u2014 "),dj=n(TAe,"A",{href:!0});var GZr=s(dj);r3o=r(GZr,"BlenderbotForConditionalGeneration"),GZr.forEach(t),t3o=r(TAe," (Blenderbot model)"),TAe.forEach(t),a3o=i(ue),j1=n(ue,"LI",{});var MAe=s(j1);Vie=n(MAe,"STRONG",{});var OZr=s(Vie);n3o=r(OZr,"blenderbot-small"),OZr.forEach(t),s3o=r(MAe," \u2014 "),cj=n(MAe,"A",{href:!0});var VZr=s(cj);l3o=r(VZr,"BlenderbotSmallForConditionalGeneration"),VZr.forEach(t),i3o=r(MAe," (BlenderbotSmall model)"),MAe.forEach(t),d3o=i(ue),D1=n(ue,"LI",{});var EAe=s(D1);Xie=n(EAe,"STRONG",{});var XZr=s(Xie);c3o=r(XZr,"encoder-decoder"),XZr.forEach(t),f3o=r(EAe," \u2014 "),fj=n(EAe,"A",{href:!0});var zZr=s(fj);m3o=r(zZr,"EncoderDecoderModel"),zZr.forEach(t),g3o=r(EAe," (Encoder decoder model)"),EAe.forEach(t),h3o=i(ue),G1=n(ue,"LI",{});var CAe=s(G1);zie=n(CAe,"STRONG",{});var QZr=s(zie);p3o=r(QZr,"fsmt"),QZr.forEach(t),u3o=r(CAe," \u2014 "),mj=n(CAe,"A",{href:!0});var WZr=s(mj);_3o=r(WZr,"FSMTForConditionalGeneration"),WZr.forEach(t),b3o=r(CAe," (FairSeq Machine-Translation model)"),CAe.forEach(t),v3o=i(ue),O1=n(ue,"LI",{});var wAe=s(O1);Qie=n(wAe,"STRONG",{});var HZr=s(Qie);F3o=r(HZr,"led"),HZr.forEach(t),T3o=r(wAe," \u2014 "),gj=n(wAe,"A",{href:!0});var UZr=s(gj);M3o=r(UZr,"LEDForConditionalGeneration"),UZr.forEach(t),E3o=r(wAe," (LED model)"),wAe.forEach(t),C3o=i(ue),V1=n(ue,"LI",{});var AAe=s(V1);Wie=n(AAe,"STRONG",{});var JZr=s(Wie);w3o=r(JZr,"m2m_100"),JZr.forEach(t),A3o=r(AAe," \u2014 "),hj=n(AAe,"A",{href:!0});var YZr=s(hj);y3o=r(YZr,"M2M100ForConditionalGeneration"),YZr.forEach(t),L3o=r(AAe," (M2M100 model)"),AAe.forEach(t),x3o=i(ue),X1=n(ue,"LI",{});var yAe=s(X1);Hie=n(yAe,"STRONG",{});var KZr=s(Hie);$3o=r(KZr,"marian"),KZr.forEach(t),k3o=r(yAe," \u2014 "),pj=n(yAe,"A",{href:!0});var ZZr=s(pj);S3o=r(ZZr,"MarianMTModel"),ZZr.forEach(t),R3o=r(yAe," (Marian model)"),yAe.forEach(t),B3o=i(ue),z1=n(ue,"LI",{});var LAe=s(z1);Uie=n(LAe,"STRONG",{});var eet=s(Uie);P3o=r(eet,"mbart"),eet.forEach(t),I3o=r(LAe," \u2014 "),uj=n(LAe,"A",{href:!0});var oet=s(uj);q3o=r(oet,"MBartForConditionalGeneration"),oet.forEach(t),N3o=r(LAe," (mBART model)"),LAe.forEach(t),j3o=i(ue),Q1=n(ue,"LI",{});var xAe=s(Q1);Jie=n(xAe,"STRONG",{});var ret=s(Jie);D3o=r(ret,"mt5"),ret.forEach(t),G3o=r(xAe," \u2014 "),_j=n(xAe,"A",{href:!0});var tet=s(_j);O3o=r(tet,"MT5ForConditionalGeneration"),tet.forEach(t),V3o=r(xAe," (mT5 model)"),xAe.forEach(t),X3o=i(ue),W1=n(ue,"LI",{});var $Ae=s(W1);Yie=n($Ae,"STRONG",{});var aet=s(Yie);z3o=r(aet,"pegasus"),aet.forEach(t),Q3o=r($Ae," \u2014 "),bj=n($Ae,"A",{href:!0});var net=s(bj);W3o=r(net,"PegasusForConditionalGeneration"),net.forEach(t),H3o=r($Ae," (Pegasus model)"),$Ae.forEach(t),U3o=i(ue),H1=n(ue,"LI",{});var kAe=s(H1);Kie=n(kAe,"STRONG",{});var set=s(Kie);J3o=r(set,"plbart"),set.forEach(t),Y3o=r(kAe," \u2014 "),vj=n(kAe,"A",{href:!0});var iet=s(vj);K3o=r(iet,"PLBartForConditionalGeneration"),iet.forEach(t),Z3o=r(kAe," (PLBart model)"),kAe.forEach(t),ewo=i(ue),U1=n(ue,"LI",{});var SAe=s(U1);Zie=n(SAe,"STRONG",{});var det=s(Zie);owo=r(det,"prophetnet"),det.forEach(t),rwo=r(SAe," \u2014 "),Fj=n(SAe,"A",{href:!0});var cet=s(Fj);two=r(cet,"ProphetNetForConditionalGeneration"),cet.forEach(t),awo=r(SAe," (ProphetNet model)"),SAe.forEach(t),nwo=i(ue),J1=n(ue,"LI",{});var RAe=s(J1);ede=n(RAe,"STRONG",{});var fet=s(ede);swo=r(fet,"t5"),fet.forEach(t),lwo=r(RAe," \u2014 "),Tj=n(RAe,"A",{href:!0});var met=s(Tj);iwo=r(met,"T5ForConditionalGeneration"),met.forEach(t),dwo=r(RAe," (T5 model)"),RAe.forEach(t),cwo=i(ue),Y1=n(ue,"LI",{});var BAe=s(Y1);ode=n(BAe,"STRONG",{});var get=s(ode);fwo=r(get,"tapex"),get.forEach(t),mwo=r(BAe," \u2014 "),Mj=n(BAe,"A",{href:!0});var het=s(Mj);gwo=r(het,"BartForConditionalGeneration"),het.forEach(t),hwo=r(BAe," (TAPEX model)"),BAe.forEach(t),pwo=i(ue),K1=n(ue,"LI",{});var PAe=s(K1);rde=n(PAe,"STRONG",{});var pet=s(rde);uwo=r(pet,"xlm-prophetnet"),pet.forEach(t),_wo=r(PAe," \u2014 "),Ej=n(PAe,"A",{href:!0});var uet=s(Ej);bwo=r(uet,"XLMProphetNetForConditionalGeneration"),uet.forEach(t),vwo=r(PAe," (XLMProphetNet model)"),PAe.forEach(t),ue.forEach(t),Fwo=i(ea),Z1=n(ea,"P",{});var IAe=s(Z1);Two=r(IAe,"The model is set in evaluation mode by default using "),tde=n(IAe,"CODE",{});var _et=s(tde);Mwo=r(_et,"model.eval()"),_et.forEach(t),Ewo=r(IAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ade=n(IAe,"CODE",{});var bet=s(ade);Cwo=r(bet,"model.train()"),bet.forEach(t),IAe.forEach(t),wwo=i(ea),T(e8.$$.fragment,ea),ea.forEach(t),Ds.forEach(t),zBe=i(f),ki=n(f,"H2",{class:!0});var WIe=s(ki);o8=n(WIe,"A",{id:!0,class:!0,href:!0});var vet=s(o8);nde=n(vet,"SPAN",{});var Fet=s(nde);T(CA.$$.fragment,Fet),Fet.forEach(t),vet.forEach(t),Awo=i(WIe),sde=n(WIe,"SPAN",{});var Tet=s(sde);ywo=r(Tet,"AutoModelForSequenceClassification"),Tet.forEach(t),WIe.forEach(t),QBe=i(f),Ro=n(f,"DIV",{class:!0});var Gs=s(Ro);T(wA.$$.fragment,Gs),Lwo=i(Gs),Si=n(Gs,"P",{});var $Y=s(Si);xwo=r($Y,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Cj=n($Y,"A",{href:!0});var Met=s(Cj);$wo=r(Met,"from_pretrained()"),Met.forEach(t),kwo=r($Y," class method or the "),wj=n($Y,"A",{href:!0});var Eet=s(wj);Swo=r(Eet,"from_config()"),Eet.forEach(t),Rwo=r($Y,` class
method.`),$Y.forEach(t),Bwo=i(Gs),AA=n(Gs,"P",{});var HIe=s(AA);Pwo=r(HIe,"This class cannot be instantiated directly using "),lde=n(HIe,"CODE",{});var Cet=s(lde);Iwo=r(Cet,"__init__()"),Cet.forEach(t),qwo=r(HIe," (throws an error)."),HIe.forEach(t),Nwo=i(Gs),at=n(Gs,"DIV",{class:!0});var GC=s(at);T(yA.$$.fragment,GC),jwo=i(GC),ide=n(GC,"P",{});var wet=s(ide);Dwo=r(wet,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),wet.forEach(t),Gwo=i(GC),Ri=n(GC,"P",{});var kY=s(Ri);Owo=r(kY,`Note:
Loading a model from its configuration file does `),dde=n(kY,"STRONG",{});var Aet=s(dde);Vwo=r(Aet,"not"),Aet.forEach(t),Xwo=r(kY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Aj=n(kY,"A",{href:!0});var yet=s(Aj);zwo=r(yet,"from_pretrained()"),yet.forEach(t),Qwo=r(kY," to load the model weights."),kY.forEach(t),Wwo=i(GC),T(r8.$$.fragment,GC),GC.forEach(t),Hwo=i(Gs),Ze=n(Gs,"DIV",{class:!0});var oa=s(Ze);T(LA.$$.fragment,oa),Uwo=i(oa),cde=n(oa,"P",{});var Let=s(cde);Jwo=r(Let,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Let.forEach(t),Ywo=i(oa),La=n(oa,"P",{});var OC=s(La);Kwo=r(OC,"The model class to instantiate is selected based on the "),fde=n(OC,"CODE",{});var xet=s(fde);Zwo=r(xet,"model_type"),xet.forEach(t),eAo=r(OC,` property of the config object (either
passed as an argument or loaded from `),mde=n(OC,"CODE",{});var $et=s(mde);oAo=r($et,"pretrained_model_name_or_path"),$et.forEach(t),rAo=r(OC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gde=n(OC,"CODE",{});var ket=s(gde);tAo=r(ket,"pretrained_model_name_or_path"),ket.forEach(t),aAo=r(OC,":"),OC.forEach(t),nAo=i(oa),q=n(oa,"UL",{});var j=s(q);t8=n(j,"LI",{});var qAe=s(t8);hde=n(qAe,"STRONG",{});var Set=s(hde);sAo=r(Set,"albert"),Set.forEach(t),lAo=r(qAe," \u2014 "),yj=n(qAe,"A",{href:!0});var Ret=s(yj);iAo=r(Ret,"AlbertForSequenceClassification"),Ret.forEach(t),dAo=r(qAe," (ALBERT model)"),qAe.forEach(t),cAo=i(j),a8=n(j,"LI",{});var NAe=s(a8);pde=n(NAe,"STRONG",{});var Bet=s(pde);fAo=r(Bet,"bart"),Bet.forEach(t),mAo=r(NAe," \u2014 "),Lj=n(NAe,"A",{href:!0});var Pet=s(Lj);gAo=r(Pet,"BartForSequenceClassification"),Pet.forEach(t),hAo=r(NAe," (BART model)"),NAe.forEach(t),pAo=i(j),n8=n(j,"LI",{});var jAe=s(n8);ude=n(jAe,"STRONG",{});var Iet=s(ude);uAo=r(Iet,"bert"),Iet.forEach(t),_Ao=r(jAe," \u2014 "),xj=n(jAe,"A",{href:!0});var qet=s(xj);bAo=r(qet,"BertForSequenceClassification"),qet.forEach(t),vAo=r(jAe," (BERT model)"),jAe.forEach(t),FAo=i(j),s8=n(j,"LI",{});var DAe=s(s8);_de=n(DAe,"STRONG",{});var Net=s(_de);TAo=r(Net,"big_bird"),Net.forEach(t),MAo=r(DAe," \u2014 "),$j=n(DAe,"A",{href:!0});var jet=s($j);EAo=r(jet,"BigBirdForSequenceClassification"),jet.forEach(t),CAo=r(DAe," (BigBird model)"),DAe.forEach(t),wAo=i(j),l8=n(j,"LI",{});var GAe=s(l8);bde=n(GAe,"STRONG",{});var Det=s(bde);AAo=r(Det,"bigbird_pegasus"),Det.forEach(t),yAo=r(GAe," \u2014 "),kj=n(GAe,"A",{href:!0});var Get=s(kj);LAo=r(Get,"BigBirdPegasusForSequenceClassification"),Get.forEach(t),xAo=r(GAe," (BigBirdPegasus model)"),GAe.forEach(t),$Ao=i(j),i8=n(j,"LI",{});var OAe=s(i8);vde=n(OAe,"STRONG",{});var Oet=s(vde);kAo=r(Oet,"camembert"),Oet.forEach(t),SAo=r(OAe," \u2014 "),Sj=n(OAe,"A",{href:!0});var Vet=s(Sj);RAo=r(Vet,"CamembertForSequenceClassification"),Vet.forEach(t),BAo=r(OAe," (CamemBERT model)"),OAe.forEach(t),PAo=i(j),d8=n(j,"LI",{});var VAe=s(d8);Fde=n(VAe,"STRONG",{});var Xet=s(Fde);IAo=r(Xet,"canine"),Xet.forEach(t),qAo=r(VAe," \u2014 "),Rj=n(VAe,"A",{href:!0});var zet=s(Rj);NAo=r(zet,"CanineForSequenceClassification"),zet.forEach(t),jAo=r(VAe," (Canine model)"),VAe.forEach(t),DAo=i(j),c8=n(j,"LI",{});var XAe=s(c8);Tde=n(XAe,"STRONG",{});var Qet=s(Tde);GAo=r(Qet,"convbert"),Qet.forEach(t),OAo=r(XAe," \u2014 "),Bj=n(XAe,"A",{href:!0});var Wet=s(Bj);VAo=r(Wet,"ConvBertForSequenceClassification"),Wet.forEach(t),XAo=r(XAe," (ConvBERT model)"),XAe.forEach(t),zAo=i(j),f8=n(j,"LI",{});var zAe=s(f8);Mde=n(zAe,"STRONG",{});var Het=s(Mde);QAo=r(Het,"ctrl"),Het.forEach(t),WAo=r(zAe," \u2014 "),Pj=n(zAe,"A",{href:!0});var Uet=s(Pj);HAo=r(Uet,"CTRLForSequenceClassification"),Uet.forEach(t),UAo=r(zAe," (CTRL model)"),zAe.forEach(t),JAo=i(j),m8=n(j,"LI",{});var QAe=s(m8);Ede=n(QAe,"STRONG",{});var Jet=s(Ede);YAo=r(Jet,"data2vec-text"),Jet.forEach(t),KAo=r(QAe," \u2014 "),Ij=n(QAe,"A",{href:!0});var Yet=s(Ij);ZAo=r(Yet,"Data2VecTextForSequenceClassification"),Yet.forEach(t),e0o=r(QAe," (Data2VecText model)"),QAe.forEach(t),o0o=i(j),g8=n(j,"LI",{});var WAe=s(g8);Cde=n(WAe,"STRONG",{});var Ket=s(Cde);r0o=r(Ket,"deberta"),Ket.forEach(t),t0o=r(WAe," \u2014 "),qj=n(WAe,"A",{href:!0});var Zet=s(qj);a0o=r(Zet,"DebertaForSequenceClassification"),Zet.forEach(t),n0o=r(WAe," (DeBERTa model)"),WAe.forEach(t),s0o=i(j),h8=n(j,"LI",{});var HAe=s(h8);wde=n(HAe,"STRONG",{});var eot=s(wde);l0o=r(eot,"deberta-v2"),eot.forEach(t),i0o=r(HAe," \u2014 "),Nj=n(HAe,"A",{href:!0});var oot=s(Nj);d0o=r(oot,"DebertaV2ForSequenceClassification"),oot.forEach(t),c0o=r(HAe," (DeBERTa-v2 model)"),HAe.forEach(t),f0o=i(j),p8=n(j,"LI",{});var UAe=s(p8);Ade=n(UAe,"STRONG",{});var rot=s(Ade);m0o=r(rot,"distilbert"),rot.forEach(t),g0o=r(UAe," \u2014 "),jj=n(UAe,"A",{href:!0});var tot=s(jj);h0o=r(tot,"DistilBertForSequenceClassification"),tot.forEach(t),p0o=r(UAe," (DistilBERT model)"),UAe.forEach(t),u0o=i(j),u8=n(j,"LI",{});var JAe=s(u8);yde=n(JAe,"STRONG",{});var aot=s(yde);_0o=r(aot,"electra"),aot.forEach(t),b0o=r(JAe," \u2014 "),Dj=n(JAe,"A",{href:!0});var not=s(Dj);v0o=r(not,"ElectraForSequenceClassification"),not.forEach(t),F0o=r(JAe," (ELECTRA model)"),JAe.forEach(t),T0o=i(j),_8=n(j,"LI",{});var YAe=s(_8);Lde=n(YAe,"STRONG",{});var sot=s(Lde);M0o=r(sot,"flaubert"),sot.forEach(t),E0o=r(YAe," \u2014 "),Gj=n(YAe,"A",{href:!0});var lot=s(Gj);C0o=r(lot,"FlaubertForSequenceClassification"),lot.forEach(t),w0o=r(YAe," (FlauBERT model)"),YAe.forEach(t),A0o=i(j),b8=n(j,"LI",{});var KAe=s(b8);xde=n(KAe,"STRONG",{});var iot=s(xde);y0o=r(iot,"fnet"),iot.forEach(t),L0o=r(KAe," \u2014 "),Oj=n(KAe,"A",{href:!0});var dot=s(Oj);x0o=r(dot,"FNetForSequenceClassification"),dot.forEach(t),$0o=r(KAe," (FNet model)"),KAe.forEach(t),k0o=i(j),v8=n(j,"LI",{});var ZAe=s(v8);$de=n(ZAe,"STRONG",{});var cot=s($de);S0o=r(cot,"funnel"),cot.forEach(t),R0o=r(ZAe," \u2014 "),Vj=n(ZAe,"A",{href:!0});var fot=s(Vj);B0o=r(fot,"FunnelForSequenceClassification"),fot.forEach(t),P0o=r(ZAe," (Funnel Transformer model)"),ZAe.forEach(t),I0o=i(j),F8=n(j,"LI",{});var e0e=s(F8);kde=n(e0e,"STRONG",{});var mot=s(kde);q0o=r(mot,"gpt2"),mot.forEach(t),N0o=r(e0e," \u2014 "),Xj=n(e0e,"A",{href:!0});var got=s(Xj);j0o=r(got,"GPT2ForSequenceClassification"),got.forEach(t),D0o=r(e0e," (OpenAI GPT-2 model)"),e0e.forEach(t),G0o=i(j),T8=n(j,"LI",{});var o0e=s(T8);Sde=n(o0e,"STRONG",{});var hot=s(Sde);O0o=r(hot,"gpt_neo"),hot.forEach(t),V0o=r(o0e," \u2014 "),zj=n(o0e,"A",{href:!0});var pot=s(zj);X0o=r(pot,"GPTNeoForSequenceClassification"),pot.forEach(t),z0o=r(o0e," (GPT Neo model)"),o0e.forEach(t),Q0o=i(j),M8=n(j,"LI",{});var r0e=s(M8);Rde=n(r0e,"STRONG",{});var uot=s(Rde);W0o=r(uot,"gptj"),uot.forEach(t),H0o=r(r0e," \u2014 "),Qj=n(r0e,"A",{href:!0});var _ot=s(Qj);U0o=r(_ot,"GPTJForSequenceClassification"),_ot.forEach(t),J0o=r(r0e," (GPT-J model)"),r0e.forEach(t),Y0o=i(j),E8=n(j,"LI",{});var t0e=s(E8);Bde=n(t0e,"STRONG",{});var bot=s(Bde);K0o=r(bot,"ibert"),bot.forEach(t),Z0o=r(t0e," \u2014 "),Wj=n(t0e,"A",{href:!0});var vot=s(Wj);eyo=r(vot,"IBertForSequenceClassification"),vot.forEach(t),oyo=r(t0e," (I-BERT model)"),t0e.forEach(t),ryo=i(j),C8=n(j,"LI",{});var a0e=s(C8);Pde=n(a0e,"STRONG",{});var Fot=s(Pde);tyo=r(Fot,"layoutlm"),Fot.forEach(t),ayo=r(a0e," \u2014 "),Hj=n(a0e,"A",{href:!0});var Tot=s(Hj);nyo=r(Tot,"LayoutLMForSequenceClassification"),Tot.forEach(t),syo=r(a0e," (LayoutLM model)"),a0e.forEach(t),lyo=i(j),w8=n(j,"LI",{});var n0e=s(w8);Ide=n(n0e,"STRONG",{});var Mot=s(Ide);iyo=r(Mot,"layoutlmv2"),Mot.forEach(t),dyo=r(n0e," \u2014 "),Uj=n(n0e,"A",{href:!0});var Eot=s(Uj);cyo=r(Eot,"LayoutLMv2ForSequenceClassification"),Eot.forEach(t),fyo=r(n0e," (LayoutLMv2 model)"),n0e.forEach(t),myo=i(j),A8=n(j,"LI",{});var s0e=s(A8);qde=n(s0e,"STRONG",{});var Cot=s(qde);gyo=r(Cot,"led"),Cot.forEach(t),hyo=r(s0e," \u2014 "),Jj=n(s0e,"A",{href:!0});var wot=s(Jj);pyo=r(wot,"LEDForSequenceClassification"),wot.forEach(t),uyo=r(s0e," (LED model)"),s0e.forEach(t),_yo=i(j),y8=n(j,"LI",{});var l0e=s(y8);Nde=n(l0e,"STRONG",{});var Aot=s(Nde);byo=r(Aot,"longformer"),Aot.forEach(t),vyo=r(l0e," \u2014 "),Yj=n(l0e,"A",{href:!0});var yot=s(Yj);Fyo=r(yot,"LongformerForSequenceClassification"),yot.forEach(t),Tyo=r(l0e," (Longformer model)"),l0e.forEach(t),Myo=i(j),L8=n(j,"LI",{});var i0e=s(L8);jde=n(i0e,"STRONG",{});var Lot=s(jde);Eyo=r(Lot,"mbart"),Lot.forEach(t),Cyo=r(i0e," \u2014 "),Kj=n(i0e,"A",{href:!0});var xot=s(Kj);wyo=r(xot,"MBartForSequenceClassification"),xot.forEach(t),Ayo=r(i0e," (mBART model)"),i0e.forEach(t),yyo=i(j),x8=n(j,"LI",{});var d0e=s(x8);Dde=n(d0e,"STRONG",{});var $ot=s(Dde);Lyo=r($ot,"megatron-bert"),$ot.forEach(t),xyo=r(d0e," \u2014 "),Zj=n(d0e,"A",{href:!0});var kot=s(Zj);$yo=r(kot,"MegatronBertForSequenceClassification"),kot.forEach(t),kyo=r(d0e," (MegatronBert model)"),d0e.forEach(t),Syo=i(j),$8=n(j,"LI",{});var c0e=s($8);Gde=n(c0e,"STRONG",{});var Sot=s(Gde);Ryo=r(Sot,"mobilebert"),Sot.forEach(t),Byo=r(c0e," \u2014 "),eD=n(c0e,"A",{href:!0});var Rot=s(eD);Pyo=r(Rot,"MobileBertForSequenceClassification"),Rot.forEach(t),Iyo=r(c0e," (MobileBERT model)"),c0e.forEach(t),qyo=i(j),k8=n(j,"LI",{});var f0e=s(k8);Ode=n(f0e,"STRONG",{});var Bot=s(Ode);Nyo=r(Bot,"mpnet"),Bot.forEach(t),jyo=r(f0e," \u2014 "),oD=n(f0e,"A",{href:!0});var Pot=s(oD);Dyo=r(Pot,"MPNetForSequenceClassification"),Pot.forEach(t),Gyo=r(f0e," (MPNet model)"),f0e.forEach(t),Oyo=i(j),S8=n(j,"LI",{});var m0e=s(S8);Vde=n(m0e,"STRONG",{});var Iot=s(Vde);Vyo=r(Iot,"nystromformer"),Iot.forEach(t),Xyo=r(m0e," \u2014 "),rD=n(m0e,"A",{href:!0});var qot=s(rD);zyo=r(qot,"NystromformerForSequenceClassification"),qot.forEach(t),Qyo=r(m0e," (Nystromformer model)"),m0e.forEach(t),Wyo=i(j),R8=n(j,"LI",{});var g0e=s(R8);Xde=n(g0e,"STRONG",{});var Not=s(Xde);Hyo=r(Not,"openai-gpt"),Not.forEach(t),Uyo=r(g0e," \u2014 "),tD=n(g0e,"A",{href:!0});var jot=s(tD);Jyo=r(jot,"OpenAIGPTForSequenceClassification"),jot.forEach(t),Yyo=r(g0e," (OpenAI GPT model)"),g0e.forEach(t),Kyo=i(j),B8=n(j,"LI",{});var h0e=s(B8);zde=n(h0e,"STRONG",{});var Dot=s(zde);Zyo=r(Dot,"perceiver"),Dot.forEach(t),eLo=r(h0e," \u2014 "),aD=n(h0e,"A",{href:!0});var Got=s(aD);oLo=r(Got,"PerceiverForSequenceClassification"),Got.forEach(t),rLo=r(h0e," (Perceiver model)"),h0e.forEach(t),tLo=i(j),P8=n(j,"LI",{});var p0e=s(P8);Qde=n(p0e,"STRONG",{});var Oot=s(Qde);aLo=r(Oot,"plbart"),Oot.forEach(t),nLo=r(p0e," \u2014 "),nD=n(p0e,"A",{href:!0});var Vot=s(nD);sLo=r(Vot,"PLBartForSequenceClassification"),Vot.forEach(t),lLo=r(p0e," (PLBart model)"),p0e.forEach(t),iLo=i(j),I8=n(j,"LI",{});var u0e=s(I8);Wde=n(u0e,"STRONG",{});var Xot=s(Wde);dLo=r(Xot,"qdqbert"),Xot.forEach(t),cLo=r(u0e," \u2014 "),sD=n(u0e,"A",{href:!0});var zot=s(sD);fLo=r(zot,"QDQBertForSequenceClassification"),zot.forEach(t),mLo=r(u0e," (QDQBert model)"),u0e.forEach(t),gLo=i(j),q8=n(j,"LI",{});var _0e=s(q8);Hde=n(_0e,"STRONG",{});var Qot=s(Hde);hLo=r(Qot,"reformer"),Qot.forEach(t),pLo=r(_0e," \u2014 "),lD=n(_0e,"A",{href:!0});var Wot=s(lD);uLo=r(Wot,"ReformerForSequenceClassification"),Wot.forEach(t),_Lo=r(_0e," (Reformer model)"),_0e.forEach(t),bLo=i(j),N8=n(j,"LI",{});var b0e=s(N8);Ude=n(b0e,"STRONG",{});var Hot=s(Ude);vLo=r(Hot,"rembert"),Hot.forEach(t),FLo=r(b0e," \u2014 "),iD=n(b0e,"A",{href:!0});var Uot=s(iD);TLo=r(Uot,"RemBertForSequenceClassification"),Uot.forEach(t),MLo=r(b0e," (RemBERT model)"),b0e.forEach(t),ELo=i(j),j8=n(j,"LI",{});var v0e=s(j8);Jde=n(v0e,"STRONG",{});var Jot=s(Jde);CLo=r(Jot,"roberta"),Jot.forEach(t),wLo=r(v0e," \u2014 "),dD=n(v0e,"A",{href:!0});var Yot=s(dD);ALo=r(Yot,"RobertaForSequenceClassification"),Yot.forEach(t),yLo=r(v0e," (RoBERTa model)"),v0e.forEach(t),LLo=i(j),D8=n(j,"LI",{});var F0e=s(D8);Yde=n(F0e,"STRONG",{});var Kot=s(Yde);xLo=r(Kot,"roformer"),Kot.forEach(t),$Lo=r(F0e," \u2014 "),cD=n(F0e,"A",{href:!0});var Zot=s(cD);kLo=r(Zot,"RoFormerForSequenceClassification"),Zot.forEach(t),SLo=r(F0e," (RoFormer model)"),F0e.forEach(t),RLo=i(j),G8=n(j,"LI",{});var T0e=s(G8);Kde=n(T0e,"STRONG",{});var ert=s(Kde);BLo=r(ert,"squeezebert"),ert.forEach(t),PLo=r(T0e," \u2014 "),fD=n(T0e,"A",{href:!0});var ort=s(fD);ILo=r(ort,"SqueezeBertForSequenceClassification"),ort.forEach(t),qLo=r(T0e," (SqueezeBERT model)"),T0e.forEach(t),NLo=i(j),O8=n(j,"LI",{});var M0e=s(O8);Zde=n(M0e,"STRONG",{});var rrt=s(Zde);jLo=r(rrt,"tapas"),rrt.forEach(t),DLo=r(M0e," \u2014 "),mD=n(M0e,"A",{href:!0});var trt=s(mD);GLo=r(trt,"TapasForSequenceClassification"),trt.forEach(t),OLo=r(M0e," (TAPAS model)"),M0e.forEach(t),VLo=i(j),V8=n(j,"LI",{});var E0e=s(V8);ece=n(E0e,"STRONG",{});var art=s(ece);XLo=r(art,"tapex"),art.forEach(t),zLo=r(E0e," \u2014 "),gD=n(E0e,"A",{href:!0});var nrt=s(gD);QLo=r(nrt,"BartForSequenceClassification"),nrt.forEach(t),WLo=r(E0e," (TAPEX model)"),E0e.forEach(t),HLo=i(j),X8=n(j,"LI",{});var C0e=s(X8);oce=n(C0e,"STRONG",{});var srt=s(oce);ULo=r(srt,"transfo-xl"),srt.forEach(t),JLo=r(C0e," \u2014 "),hD=n(C0e,"A",{href:!0});var lrt=s(hD);YLo=r(lrt,"TransfoXLForSequenceClassification"),lrt.forEach(t),KLo=r(C0e," (Transformer-XL model)"),C0e.forEach(t),ZLo=i(j),z8=n(j,"LI",{});var w0e=s(z8);rce=n(w0e,"STRONG",{});var irt=s(rce);e7o=r(irt,"xlm"),irt.forEach(t),o7o=r(w0e," \u2014 "),pD=n(w0e,"A",{href:!0});var drt=s(pD);r7o=r(drt,"XLMForSequenceClassification"),drt.forEach(t),t7o=r(w0e," (XLM model)"),w0e.forEach(t),a7o=i(j),Q8=n(j,"LI",{});var A0e=s(Q8);tce=n(A0e,"STRONG",{});var crt=s(tce);n7o=r(crt,"xlm-roberta"),crt.forEach(t),s7o=r(A0e," \u2014 "),uD=n(A0e,"A",{href:!0});var frt=s(uD);l7o=r(frt,"XLMRobertaForSequenceClassification"),frt.forEach(t),i7o=r(A0e," (XLM-RoBERTa model)"),A0e.forEach(t),d7o=i(j),W8=n(j,"LI",{});var y0e=s(W8);ace=n(y0e,"STRONG",{});var mrt=s(ace);c7o=r(mrt,"xlm-roberta-xl"),mrt.forEach(t),f7o=r(y0e," \u2014 "),_D=n(y0e,"A",{href:!0});var grt=s(_D);m7o=r(grt,"XLMRobertaXLForSequenceClassification"),grt.forEach(t),g7o=r(y0e," (XLM-RoBERTa-XL model)"),y0e.forEach(t),h7o=i(j),H8=n(j,"LI",{});var L0e=s(H8);nce=n(L0e,"STRONG",{});var hrt=s(nce);p7o=r(hrt,"xlnet"),hrt.forEach(t),u7o=r(L0e," \u2014 "),bD=n(L0e,"A",{href:!0});var prt=s(bD);_7o=r(prt,"XLNetForSequenceClassification"),prt.forEach(t),b7o=r(L0e," (XLNet model)"),L0e.forEach(t),v7o=i(j),U8=n(j,"LI",{});var x0e=s(U8);sce=n(x0e,"STRONG",{});var urt=s(sce);F7o=r(urt,"yoso"),urt.forEach(t),T7o=r(x0e," \u2014 "),vD=n(x0e,"A",{href:!0});var _rt=s(vD);M7o=r(_rt,"YosoForSequenceClassification"),_rt.forEach(t),E7o=r(x0e," (YOSO model)"),x0e.forEach(t),j.forEach(t),C7o=i(oa),J8=n(oa,"P",{});var $0e=s(J8);w7o=r($0e,"The model is set in evaluation mode by default using "),lce=n($0e,"CODE",{});var brt=s(lce);A7o=r(brt,"model.eval()"),brt.forEach(t),y7o=r($0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ice=n($0e,"CODE",{});var vrt=s(ice);L7o=r(vrt,"model.train()"),vrt.forEach(t),$0e.forEach(t),x7o=i(oa),T(Y8.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),WBe=i(f),Bi=n(f,"H2",{class:!0});var UIe=s(Bi);K8=n(UIe,"A",{id:!0,class:!0,href:!0});var Frt=s(K8);dce=n(Frt,"SPAN",{});var Trt=s(dce);T(xA.$$.fragment,Trt),Trt.forEach(t),Frt.forEach(t),$7o=i(UIe),cce=n(UIe,"SPAN",{});var Mrt=s(cce);k7o=r(Mrt,"AutoModelForMultipleChoice"),Mrt.forEach(t),UIe.forEach(t),HBe=i(f),Bo=n(f,"DIV",{class:!0});var Os=s(Bo);T($A.$$.fragment,Os),S7o=i(Os),Pi=n(Os,"P",{});var SY=s(Pi);R7o=r(SY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),FD=n(SY,"A",{href:!0});var Ert=s(FD);B7o=r(Ert,"from_pretrained()"),Ert.forEach(t),P7o=r(SY," class method or the "),TD=n(SY,"A",{href:!0});var Crt=s(TD);I7o=r(Crt,"from_config()"),Crt.forEach(t),q7o=r(SY,` class
method.`),SY.forEach(t),N7o=i(Os),kA=n(Os,"P",{});var JIe=s(kA);j7o=r(JIe,"This class cannot be instantiated directly using "),fce=n(JIe,"CODE",{});var wrt=s(fce);D7o=r(wrt,"__init__()"),wrt.forEach(t),G7o=r(JIe," (throws an error)."),JIe.forEach(t),O7o=i(Os),nt=n(Os,"DIV",{class:!0});var VC=s(nt);T(SA.$$.fragment,VC),V7o=i(VC),mce=n(VC,"P",{});var Art=s(mce);X7o=r(Art,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Art.forEach(t),z7o=i(VC),Ii=n(VC,"P",{});var RY=s(Ii);Q7o=r(RY,`Note:
Loading a model from its configuration file does `),gce=n(RY,"STRONG",{});var yrt=s(gce);W7o=r(yrt,"not"),yrt.forEach(t),H7o=r(RY,` load the model weights. It only affects the
model\u2019s configuration. Use `),MD=n(RY,"A",{href:!0});var Lrt=s(MD);U7o=r(Lrt,"from_pretrained()"),Lrt.forEach(t),J7o=r(RY," to load the model weights."),RY.forEach(t),Y7o=i(VC),T(Z8.$$.fragment,VC),VC.forEach(t),K7o=i(Os),eo=n(Os,"DIV",{class:!0});var ra=s(eo);T(RA.$$.fragment,ra),Z7o=i(ra),hce=n(ra,"P",{});var xrt=s(hce);exo=r(xrt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),xrt.forEach(t),oxo=i(ra),xa=n(ra,"P",{});var XC=s(xa);rxo=r(XC,"The model class to instantiate is selected based on the "),pce=n(XC,"CODE",{});var $rt=s(pce);txo=r($rt,"model_type"),$rt.forEach(t),axo=r(XC,` property of the config object (either
passed as an argument or loaded from `),uce=n(XC,"CODE",{});var krt=s(uce);nxo=r(krt,"pretrained_model_name_or_path"),krt.forEach(t),sxo=r(XC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ce=n(XC,"CODE",{});var Srt=s(_ce);lxo=r(Srt,"pretrained_model_name_or_path"),Srt.forEach(t),ixo=r(XC,":"),XC.forEach(t),dxo=i(ra),Y=n(ra,"UL",{});var K=s(Y);eb=n(K,"LI",{});var k0e=s(eb);bce=n(k0e,"STRONG",{});var Rrt=s(bce);cxo=r(Rrt,"albert"),Rrt.forEach(t),fxo=r(k0e," \u2014 "),ED=n(k0e,"A",{href:!0});var Brt=s(ED);mxo=r(Brt,"AlbertForMultipleChoice"),Brt.forEach(t),gxo=r(k0e," (ALBERT model)"),k0e.forEach(t),hxo=i(K),ob=n(K,"LI",{});var S0e=s(ob);vce=n(S0e,"STRONG",{});var Prt=s(vce);pxo=r(Prt,"bert"),Prt.forEach(t),uxo=r(S0e," \u2014 "),CD=n(S0e,"A",{href:!0});var Irt=s(CD);_xo=r(Irt,"BertForMultipleChoice"),Irt.forEach(t),bxo=r(S0e," (BERT model)"),S0e.forEach(t),vxo=i(K),rb=n(K,"LI",{});var R0e=s(rb);Fce=n(R0e,"STRONG",{});var qrt=s(Fce);Fxo=r(qrt,"big_bird"),qrt.forEach(t),Txo=r(R0e," \u2014 "),wD=n(R0e,"A",{href:!0});var Nrt=s(wD);Mxo=r(Nrt,"BigBirdForMultipleChoice"),Nrt.forEach(t),Exo=r(R0e," (BigBird model)"),R0e.forEach(t),Cxo=i(K),tb=n(K,"LI",{});var B0e=s(tb);Tce=n(B0e,"STRONG",{});var jrt=s(Tce);wxo=r(jrt,"camembert"),jrt.forEach(t),Axo=r(B0e," \u2014 "),AD=n(B0e,"A",{href:!0});var Drt=s(AD);yxo=r(Drt,"CamembertForMultipleChoice"),Drt.forEach(t),Lxo=r(B0e," (CamemBERT model)"),B0e.forEach(t),xxo=i(K),ab=n(K,"LI",{});var P0e=s(ab);Mce=n(P0e,"STRONG",{});var Grt=s(Mce);$xo=r(Grt,"canine"),Grt.forEach(t),kxo=r(P0e," \u2014 "),yD=n(P0e,"A",{href:!0});var Ort=s(yD);Sxo=r(Ort,"CanineForMultipleChoice"),Ort.forEach(t),Rxo=r(P0e," (Canine model)"),P0e.forEach(t),Bxo=i(K),nb=n(K,"LI",{});var I0e=s(nb);Ece=n(I0e,"STRONG",{});var Vrt=s(Ece);Pxo=r(Vrt,"convbert"),Vrt.forEach(t),Ixo=r(I0e," \u2014 "),LD=n(I0e,"A",{href:!0});var Xrt=s(LD);qxo=r(Xrt,"ConvBertForMultipleChoice"),Xrt.forEach(t),Nxo=r(I0e," (ConvBERT model)"),I0e.forEach(t),jxo=i(K),sb=n(K,"LI",{});var q0e=s(sb);Cce=n(q0e,"STRONG",{});var zrt=s(Cce);Dxo=r(zrt,"data2vec-text"),zrt.forEach(t),Gxo=r(q0e," \u2014 "),xD=n(q0e,"A",{href:!0});var Qrt=s(xD);Oxo=r(Qrt,"Data2VecTextForMultipleChoice"),Qrt.forEach(t),Vxo=r(q0e," (Data2VecText model)"),q0e.forEach(t),Xxo=i(K),lb=n(K,"LI",{});var N0e=s(lb);wce=n(N0e,"STRONG",{});var Wrt=s(wce);zxo=r(Wrt,"distilbert"),Wrt.forEach(t),Qxo=r(N0e," \u2014 "),$D=n(N0e,"A",{href:!0});var Hrt=s($D);Wxo=r(Hrt,"DistilBertForMultipleChoice"),Hrt.forEach(t),Hxo=r(N0e," (DistilBERT model)"),N0e.forEach(t),Uxo=i(K),ib=n(K,"LI",{});var j0e=s(ib);Ace=n(j0e,"STRONG",{});var Urt=s(Ace);Jxo=r(Urt,"electra"),Urt.forEach(t),Yxo=r(j0e," \u2014 "),kD=n(j0e,"A",{href:!0});var Jrt=s(kD);Kxo=r(Jrt,"ElectraForMultipleChoice"),Jrt.forEach(t),Zxo=r(j0e," (ELECTRA model)"),j0e.forEach(t),e$o=i(K),db=n(K,"LI",{});var D0e=s(db);yce=n(D0e,"STRONG",{});var Yrt=s(yce);o$o=r(Yrt,"flaubert"),Yrt.forEach(t),r$o=r(D0e," \u2014 "),SD=n(D0e,"A",{href:!0});var Krt=s(SD);t$o=r(Krt,"FlaubertForMultipleChoice"),Krt.forEach(t),a$o=r(D0e," (FlauBERT model)"),D0e.forEach(t),n$o=i(K),cb=n(K,"LI",{});var G0e=s(cb);Lce=n(G0e,"STRONG",{});var Zrt=s(Lce);s$o=r(Zrt,"fnet"),Zrt.forEach(t),l$o=r(G0e," \u2014 "),RD=n(G0e,"A",{href:!0});var ett=s(RD);i$o=r(ett,"FNetForMultipleChoice"),ett.forEach(t),d$o=r(G0e," (FNet model)"),G0e.forEach(t),c$o=i(K),fb=n(K,"LI",{});var O0e=s(fb);xce=n(O0e,"STRONG",{});var ott=s(xce);f$o=r(ott,"funnel"),ott.forEach(t),m$o=r(O0e," \u2014 "),BD=n(O0e,"A",{href:!0});var rtt=s(BD);g$o=r(rtt,"FunnelForMultipleChoice"),rtt.forEach(t),h$o=r(O0e," (Funnel Transformer model)"),O0e.forEach(t),p$o=i(K),mb=n(K,"LI",{});var V0e=s(mb);$ce=n(V0e,"STRONG",{});var ttt=s($ce);u$o=r(ttt,"ibert"),ttt.forEach(t),_$o=r(V0e," \u2014 "),PD=n(V0e,"A",{href:!0});var att=s(PD);b$o=r(att,"IBertForMultipleChoice"),att.forEach(t),v$o=r(V0e," (I-BERT model)"),V0e.forEach(t),F$o=i(K),gb=n(K,"LI",{});var X0e=s(gb);kce=n(X0e,"STRONG",{});var ntt=s(kce);T$o=r(ntt,"longformer"),ntt.forEach(t),M$o=r(X0e," \u2014 "),ID=n(X0e,"A",{href:!0});var stt=s(ID);E$o=r(stt,"LongformerForMultipleChoice"),stt.forEach(t),C$o=r(X0e," (Longformer model)"),X0e.forEach(t),w$o=i(K),hb=n(K,"LI",{});var z0e=s(hb);Sce=n(z0e,"STRONG",{});var ltt=s(Sce);A$o=r(ltt,"megatron-bert"),ltt.forEach(t),y$o=r(z0e," \u2014 "),qD=n(z0e,"A",{href:!0});var itt=s(qD);L$o=r(itt,"MegatronBertForMultipleChoice"),itt.forEach(t),x$o=r(z0e," (MegatronBert model)"),z0e.forEach(t),$$o=i(K),pb=n(K,"LI",{});var Q0e=s(pb);Rce=n(Q0e,"STRONG",{});var dtt=s(Rce);k$o=r(dtt,"mobilebert"),dtt.forEach(t),S$o=r(Q0e," \u2014 "),ND=n(Q0e,"A",{href:!0});var ctt=s(ND);R$o=r(ctt,"MobileBertForMultipleChoice"),ctt.forEach(t),B$o=r(Q0e," (MobileBERT model)"),Q0e.forEach(t),P$o=i(K),ub=n(K,"LI",{});var W0e=s(ub);Bce=n(W0e,"STRONG",{});var ftt=s(Bce);I$o=r(ftt,"mpnet"),ftt.forEach(t),q$o=r(W0e," \u2014 "),jD=n(W0e,"A",{href:!0});var mtt=s(jD);N$o=r(mtt,"MPNetForMultipleChoice"),mtt.forEach(t),j$o=r(W0e," (MPNet model)"),W0e.forEach(t),D$o=i(K),_b=n(K,"LI",{});var H0e=s(_b);Pce=n(H0e,"STRONG",{});var gtt=s(Pce);G$o=r(gtt,"nystromformer"),gtt.forEach(t),O$o=r(H0e," \u2014 "),DD=n(H0e,"A",{href:!0});var htt=s(DD);V$o=r(htt,"NystromformerForMultipleChoice"),htt.forEach(t),X$o=r(H0e," (Nystromformer model)"),H0e.forEach(t),z$o=i(K),bb=n(K,"LI",{});var U0e=s(bb);Ice=n(U0e,"STRONG",{});var ptt=s(Ice);Q$o=r(ptt,"qdqbert"),ptt.forEach(t),W$o=r(U0e," \u2014 "),GD=n(U0e,"A",{href:!0});var utt=s(GD);H$o=r(utt,"QDQBertForMultipleChoice"),utt.forEach(t),U$o=r(U0e," (QDQBert model)"),U0e.forEach(t),J$o=i(K),vb=n(K,"LI",{});var J0e=s(vb);qce=n(J0e,"STRONG",{});var _tt=s(qce);Y$o=r(_tt,"rembert"),_tt.forEach(t),K$o=r(J0e," \u2014 "),OD=n(J0e,"A",{href:!0});var btt=s(OD);Z$o=r(btt,"RemBertForMultipleChoice"),btt.forEach(t),eko=r(J0e," (RemBERT model)"),J0e.forEach(t),oko=i(K),Fb=n(K,"LI",{});var Y0e=s(Fb);Nce=n(Y0e,"STRONG",{});var vtt=s(Nce);rko=r(vtt,"roberta"),vtt.forEach(t),tko=r(Y0e," \u2014 "),VD=n(Y0e,"A",{href:!0});var Ftt=s(VD);ako=r(Ftt,"RobertaForMultipleChoice"),Ftt.forEach(t),nko=r(Y0e," (RoBERTa model)"),Y0e.forEach(t),sko=i(K),Tb=n(K,"LI",{});var K0e=s(Tb);jce=n(K0e,"STRONG",{});var Ttt=s(jce);lko=r(Ttt,"roformer"),Ttt.forEach(t),iko=r(K0e," \u2014 "),XD=n(K0e,"A",{href:!0});var Mtt=s(XD);dko=r(Mtt,"RoFormerForMultipleChoice"),Mtt.forEach(t),cko=r(K0e," (RoFormer model)"),K0e.forEach(t),fko=i(K),Mb=n(K,"LI",{});var Z0e=s(Mb);Dce=n(Z0e,"STRONG",{});var Ett=s(Dce);mko=r(Ett,"squeezebert"),Ett.forEach(t),gko=r(Z0e," \u2014 "),zD=n(Z0e,"A",{href:!0});var Ctt=s(zD);hko=r(Ctt,"SqueezeBertForMultipleChoice"),Ctt.forEach(t),pko=r(Z0e," (SqueezeBERT model)"),Z0e.forEach(t),uko=i(K),Eb=n(K,"LI",{});var eye=s(Eb);Gce=n(eye,"STRONG",{});var wtt=s(Gce);_ko=r(wtt,"xlm"),wtt.forEach(t),bko=r(eye," \u2014 "),QD=n(eye,"A",{href:!0});var Att=s(QD);vko=r(Att,"XLMForMultipleChoice"),Att.forEach(t),Fko=r(eye," (XLM model)"),eye.forEach(t),Tko=i(K),Cb=n(K,"LI",{});var oye=s(Cb);Oce=n(oye,"STRONG",{});var ytt=s(Oce);Mko=r(ytt,"xlm-roberta"),ytt.forEach(t),Eko=r(oye," \u2014 "),WD=n(oye,"A",{href:!0});var Ltt=s(WD);Cko=r(Ltt,"XLMRobertaForMultipleChoice"),Ltt.forEach(t),wko=r(oye," (XLM-RoBERTa model)"),oye.forEach(t),Ako=i(K),wb=n(K,"LI",{});var rye=s(wb);Vce=n(rye,"STRONG",{});var xtt=s(Vce);yko=r(xtt,"xlm-roberta-xl"),xtt.forEach(t),Lko=r(rye," \u2014 "),HD=n(rye,"A",{href:!0});var $tt=s(HD);xko=r($tt,"XLMRobertaXLForMultipleChoice"),$tt.forEach(t),$ko=r(rye," (XLM-RoBERTa-XL model)"),rye.forEach(t),kko=i(K),Ab=n(K,"LI",{});var tye=s(Ab);Xce=n(tye,"STRONG",{});var ktt=s(Xce);Sko=r(ktt,"xlnet"),ktt.forEach(t),Rko=r(tye," \u2014 "),UD=n(tye,"A",{href:!0});var Stt=s(UD);Bko=r(Stt,"XLNetForMultipleChoice"),Stt.forEach(t),Pko=r(tye," (XLNet model)"),tye.forEach(t),Iko=i(K),yb=n(K,"LI",{});var aye=s(yb);zce=n(aye,"STRONG",{});var Rtt=s(zce);qko=r(Rtt,"yoso"),Rtt.forEach(t),Nko=r(aye," \u2014 "),JD=n(aye,"A",{href:!0});var Btt=s(JD);jko=r(Btt,"YosoForMultipleChoice"),Btt.forEach(t),Dko=r(aye," (YOSO model)"),aye.forEach(t),K.forEach(t),Gko=i(ra),Lb=n(ra,"P",{});var nye=s(Lb);Oko=r(nye,"The model is set in evaluation mode by default using "),Qce=n(nye,"CODE",{});var Ptt=s(Qce);Vko=r(Ptt,"model.eval()"),Ptt.forEach(t),Xko=r(nye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wce=n(nye,"CODE",{});var Itt=s(Wce);zko=r(Itt,"model.train()"),Itt.forEach(t),nye.forEach(t),Qko=i(ra),T(xb.$$.fragment,ra),ra.forEach(t),Os.forEach(t),UBe=i(f),qi=n(f,"H2",{class:!0});var YIe=s(qi);$b=n(YIe,"A",{id:!0,class:!0,href:!0});var qtt=s($b);Hce=n(qtt,"SPAN",{});var Ntt=s(Hce);T(BA.$$.fragment,Ntt),Ntt.forEach(t),qtt.forEach(t),Wko=i(YIe),Uce=n(YIe,"SPAN",{});var jtt=s(Uce);Hko=r(jtt,"AutoModelForNextSentencePrediction"),jtt.forEach(t),YIe.forEach(t),JBe=i(f),Po=n(f,"DIV",{class:!0});var Vs=s(Po);T(PA.$$.fragment,Vs),Uko=i(Vs),Ni=n(Vs,"P",{});var BY=s(Ni);Jko=r(BY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),YD=n(BY,"A",{href:!0});var Dtt=s(YD);Yko=r(Dtt,"from_pretrained()"),Dtt.forEach(t),Kko=r(BY," class method or the "),KD=n(BY,"A",{href:!0});var Gtt=s(KD);Zko=r(Gtt,"from_config()"),Gtt.forEach(t),eSo=r(BY,` class
method.`),BY.forEach(t),oSo=i(Vs),IA=n(Vs,"P",{});var KIe=s(IA);rSo=r(KIe,"This class cannot be instantiated directly using "),Jce=n(KIe,"CODE",{});var Ott=s(Jce);tSo=r(Ott,"__init__()"),Ott.forEach(t),aSo=r(KIe," (throws an error)."),KIe.forEach(t),nSo=i(Vs),st=n(Vs,"DIV",{class:!0});var zC=s(st);T(qA.$$.fragment,zC),sSo=i(zC),Yce=n(zC,"P",{});var Vtt=s(Yce);lSo=r(Vtt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Vtt.forEach(t),iSo=i(zC),ji=n(zC,"P",{});var PY=s(ji);dSo=r(PY,`Note:
Loading a model from its configuration file does `),Kce=n(PY,"STRONG",{});var Xtt=s(Kce);cSo=r(Xtt,"not"),Xtt.forEach(t),fSo=r(PY,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZD=n(PY,"A",{href:!0});var ztt=s(ZD);mSo=r(ztt,"from_pretrained()"),ztt.forEach(t),gSo=r(PY," to load the model weights."),PY.forEach(t),hSo=i(zC),T(kb.$$.fragment,zC),zC.forEach(t),pSo=i(Vs),oo=n(Vs,"DIV",{class:!0});var ta=s(oo);T(NA.$$.fragment,ta),uSo=i(ta),Zce=n(ta,"P",{});var Qtt=s(Zce);_So=r(Qtt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Qtt.forEach(t),bSo=i(ta),$a=n(ta,"P",{});var QC=s($a);vSo=r(QC,"The model class to instantiate is selected based on the "),efe=n(QC,"CODE",{});var Wtt=s(efe);FSo=r(Wtt,"model_type"),Wtt.forEach(t),TSo=r(QC,` property of the config object (either
passed as an argument or loaded from `),ofe=n(QC,"CODE",{});var Htt=s(ofe);MSo=r(Htt,"pretrained_model_name_or_path"),Htt.forEach(t),ESo=r(QC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rfe=n(QC,"CODE",{});var Utt=s(rfe);CSo=r(Utt,"pretrained_model_name_or_path"),Utt.forEach(t),wSo=r(QC,":"),QC.forEach(t),ASo=i(ta),Ur=n(ta,"UL",{});var Xs=s(Ur);Sb=n(Xs,"LI",{});var sye=s(Sb);tfe=n(sye,"STRONG",{});var Jtt=s(tfe);ySo=r(Jtt,"bert"),Jtt.forEach(t),LSo=r(sye," \u2014 "),eG=n(sye,"A",{href:!0});var Ytt=s(eG);xSo=r(Ytt,"BertForNextSentencePrediction"),Ytt.forEach(t),$So=r(sye," (BERT model)"),sye.forEach(t),kSo=i(Xs),Rb=n(Xs,"LI",{});var lye=s(Rb);afe=n(lye,"STRONG",{});var Ktt=s(afe);SSo=r(Ktt,"fnet"),Ktt.forEach(t),RSo=r(lye," \u2014 "),oG=n(lye,"A",{href:!0});var Ztt=s(oG);BSo=r(Ztt,"FNetForNextSentencePrediction"),Ztt.forEach(t),PSo=r(lye," (FNet model)"),lye.forEach(t),ISo=i(Xs),Bb=n(Xs,"LI",{});var iye=s(Bb);nfe=n(iye,"STRONG",{});var eat=s(nfe);qSo=r(eat,"megatron-bert"),eat.forEach(t),NSo=r(iye," \u2014 "),rG=n(iye,"A",{href:!0});var oat=s(rG);jSo=r(oat,"MegatronBertForNextSentencePrediction"),oat.forEach(t),DSo=r(iye," (MegatronBert model)"),iye.forEach(t),GSo=i(Xs),Pb=n(Xs,"LI",{});var dye=s(Pb);sfe=n(dye,"STRONG",{});var rat=s(sfe);OSo=r(rat,"mobilebert"),rat.forEach(t),VSo=r(dye," \u2014 "),tG=n(dye,"A",{href:!0});var tat=s(tG);XSo=r(tat,"MobileBertForNextSentencePrediction"),tat.forEach(t),zSo=r(dye," (MobileBERT model)"),dye.forEach(t),QSo=i(Xs),Ib=n(Xs,"LI",{});var cye=s(Ib);lfe=n(cye,"STRONG",{});var aat=s(lfe);WSo=r(aat,"qdqbert"),aat.forEach(t),HSo=r(cye," \u2014 "),aG=n(cye,"A",{href:!0});var nat=s(aG);USo=r(nat,"QDQBertForNextSentencePrediction"),nat.forEach(t),JSo=r(cye," (QDQBert model)"),cye.forEach(t),Xs.forEach(t),YSo=i(ta),qb=n(ta,"P",{});var fye=s(qb);KSo=r(fye,"The model is set in evaluation mode by default using "),ife=n(fye,"CODE",{});var sat=s(ife);ZSo=r(sat,"model.eval()"),sat.forEach(t),eRo=r(fye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dfe=n(fye,"CODE",{});var lat=s(dfe);oRo=r(lat,"model.train()"),lat.forEach(t),fye.forEach(t),rRo=i(ta),T(Nb.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),YBe=i(f),Di=n(f,"H2",{class:!0});var ZIe=s(Di);jb=n(ZIe,"A",{id:!0,class:!0,href:!0});var iat=s(jb);cfe=n(iat,"SPAN",{});var dat=s(cfe);T(jA.$$.fragment,dat),dat.forEach(t),iat.forEach(t),tRo=i(ZIe),ffe=n(ZIe,"SPAN",{});var cat=s(ffe);aRo=r(cat,"AutoModelForTokenClassification"),cat.forEach(t),ZIe.forEach(t),KBe=i(f),Io=n(f,"DIV",{class:!0});var zs=s(Io);T(DA.$$.fragment,zs),nRo=i(zs),Gi=n(zs,"P",{});var IY=s(Gi);sRo=r(IY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),nG=n(IY,"A",{href:!0});var fat=s(nG);lRo=r(fat,"from_pretrained()"),fat.forEach(t),iRo=r(IY," class method or the "),sG=n(IY,"A",{href:!0});var mat=s(sG);dRo=r(mat,"from_config()"),mat.forEach(t),cRo=r(IY,` class
method.`),IY.forEach(t),fRo=i(zs),GA=n(zs,"P",{});var eqe=s(GA);mRo=r(eqe,"This class cannot be instantiated directly using "),mfe=n(eqe,"CODE",{});var gat=s(mfe);gRo=r(gat,"__init__()"),gat.forEach(t),hRo=r(eqe," (throws an error)."),eqe.forEach(t),pRo=i(zs),lt=n(zs,"DIV",{class:!0});var WC=s(lt);T(OA.$$.fragment,WC),uRo=i(WC),gfe=n(WC,"P",{});var hat=s(gfe);_Ro=r(hat,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),hat.forEach(t),bRo=i(WC),Oi=n(WC,"P",{});var qY=s(Oi);vRo=r(qY,`Note:
Loading a model from its configuration file does `),hfe=n(qY,"STRONG",{});var pat=s(hfe);FRo=r(pat,"not"),pat.forEach(t),TRo=r(qY,` load the model weights. It only affects the
model\u2019s configuration. Use `),lG=n(qY,"A",{href:!0});var uat=s(lG);MRo=r(uat,"from_pretrained()"),uat.forEach(t),ERo=r(qY," to load the model weights."),qY.forEach(t),CRo=i(WC),T(Db.$$.fragment,WC),WC.forEach(t),wRo=i(zs),ro=n(zs,"DIV",{class:!0});var aa=s(ro);T(VA.$$.fragment,aa),ARo=i(aa),pfe=n(aa,"P",{});var _at=s(pfe);yRo=r(_at,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_at.forEach(t),LRo=i(aa),ka=n(aa,"P",{});var HC=s(ka);xRo=r(HC,"The model class to instantiate is selected based on the "),ufe=n(HC,"CODE",{});var bat=s(ufe);$Ro=r(bat,"model_type"),bat.forEach(t),kRo=r(HC,` property of the config object (either
passed as an argument or loaded from `),_fe=n(HC,"CODE",{});var vat=s(_fe);SRo=r(vat,"pretrained_model_name_or_path"),vat.forEach(t),RRo=r(HC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bfe=n(HC,"CODE",{});var Fat=s(bfe);BRo=r(Fat,"pretrained_model_name_or_path"),Fat.forEach(t),PRo=r(HC,":"),HC.forEach(t),IRo=i(aa),U=n(aa,"UL",{});var J=s(U);Gb=n(J,"LI",{});var mye=s(Gb);vfe=n(mye,"STRONG",{});var Tat=s(vfe);qRo=r(Tat,"albert"),Tat.forEach(t),NRo=r(mye," \u2014 "),iG=n(mye,"A",{href:!0});var Mat=s(iG);jRo=r(Mat,"AlbertForTokenClassification"),Mat.forEach(t),DRo=r(mye," (ALBERT model)"),mye.forEach(t),GRo=i(J),Ob=n(J,"LI",{});var gye=s(Ob);Ffe=n(gye,"STRONG",{});var Eat=s(Ffe);ORo=r(Eat,"bert"),Eat.forEach(t),VRo=r(gye," \u2014 "),dG=n(gye,"A",{href:!0});var Cat=s(dG);XRo=r(Cat,"BertForTokenClassification"),Cat.forEach(t),zRo=r(gye," (BERT model)"),gye.forEach(t),QRo=i(J),Vb=n(J,"LI",{});var hye=s(Vb);Tfe=n(hye,"STRONG",{});var wat=s(Tfe);WRo=r(wat,"big_bird"),wat.forEach(t),HRo=r(hye," \u2014 "),cG=n(hye,"A",{href:!0});var Aat=s(cG);URo=r(Aat,"BigBirdForTokenClassification"),Aat.forEach(t),JRo=r(hye," (BigBird model)"),hye.forEach(t),YRo=i(J),Xb=n(J,"LI",{});var pye=s(Xb);Mfe=n(pye,"STRONG",{});var yat=s(Mfe);KRo=r(yat,"camembert"),yat.forEach(t),ZRo=r(pye," \u2014 "),fG=n(pye,"A",{href:!0});var Lat=s(fG);eBo=r(Lat,"CamembertForTokenClassification"),Lat.forEach(t),oBo=r(pye," (CamemBERT model)"),pye.forEach(t),rBo=i(J),zb=n(J,"LI",{});var uye=s(zb);Efe=n(uye,"STRONG",{});var xat=s(Efe);tBo=r(xat,"canine"),xat.forEach(t),aBo=r(uye," \u2014 "),mG=n(uye,"A",{href:!0});var $at=s(mG);nBo=r($at,"CanineForTokenClassification"),$at.forEach(t),sBo=r(uye," (Canine model)"),uye.forEach(t),lBo=i(J),Qb=n(J,"LI",{});var _ye=s(Qb);Cfe=n(_ye,"STRONG",{});var kat=s(Cfe);iBo=r(kat,"convbert"),kat.forEach(t),dBo=r(_ye," \u2014 "),gG=n(_ye,"A",{href:!0});var Sat=s(gG);cBo=r(Sat,"ConvBertForTokenClassification"),Sat.forEach(t),fBo=r(_ye," (ConvBERT model)"),_ye.forEach(t),mBo=i(J),Wb=n(J,"LI",{});var bye=s(Wb);wfe=n(bye,"STRONG",{});var Rat=s(wfe);gBo=r(Rat,"data2vec-text"),Rat.forEach(t),hBo=r(bye," \u2014 "),hG=n(bye,"A",{href:!0});var Bat=s(hG);pBo=r(Bat,"Data2VecTextForTokenClassification"),Bat.forEach(t),uBo=r(bye," (Data2VecText model)"),bye.forEach(t),_Bo=i(J),Hb=n(J,"LI",{});var vye=s(Hb);Afe=n(vye,"STRONG",{});var Pat=s(Afe);bBo=r(Pat,"deberta"),Pat.forEach(t),vBo=r(vye," \u2014 "),pG=n(vye,"A",{href:!0});var Iat=s(pG);FBo=r(Iat,"DebertaForTokenClassification"),Iat.forEach(t),TBo=r(vye," (DeBERTa model)"),vye.forEach(t),MBo=i(J),Ub=n(J,"LI",{});var Fye=s(Ub);yfe=n(Fye,"STRONG",{});var qat=s(yfe);EBo=r(qat,"deberta-v2"),qat.forEach(t),CBo=r(Fye," \u2014 "),uG=n(Fye,"A",{href:!0});var Nat=s(uG);wBo=r(Nat,"DebertaV2ForTokenClassification"),Nat.forEach(t),ABo=r(Fye," (DeBERTa-v2 model)"),Fye.forEach(t),yBo=i(J),Jb=n(J,"LI",{});var Tye=s(Jb);Lfe=n(Tye,"STRONG",{});var jat=s(Lfe);LBo=r(jat,"distilbert"),jat.forEach(t),xBo=r(Tye," \u2014 "),_G=n(Tye,"A",{href:!0});var Dat=s(_G);$Bo=r(Dat,"DistilBertForTokenClassification"),Dat.forEach(t),kBo=r(Tye," (DistilBERT model)"),Tye.forEach(t),SBo=i(J),Yb=n(J,"LI",{});var Mye=s(Yb);xfe=n(Mye,"STRONG",{});var Gat=s(xfe);RBo=r(Gat,"electra"),Gat.forEach(t),BBo=r(Mye," \u2014 "),bG=n(Mye,"A",{href:!0});var Oat=s(bG);PBo=r(Oat,"ElectraForTokenClassification"),Oat.forEach(t),IBo=r(Mye," (ELECTRA model)"),Mye.forEach(t),qBo=i(J),Kb=n(J,"LI",{});var Eye=s(Kb);$fe=n(Eye,"STRONG",{});var Vat=s($fe);NBo=r(Vat,"flaubert"),Vat.forEach(t),jBo=r(Eye," \u2014 "),vG=n(Eye,"A",{href:!0});var Xat=s(vG);DBo=r(Xat,"FlaubertForTokenClassification"),Xat.forEach(t),GBo=r(Eye," (FlauBERT model)"),Eye.forEach(t),OBo=i(J),Zb=n(J,"LI",{});var Cye=s(Zb);kfe=n(Cye,"STRONG",{});var zat=s(kfe);VBo=r(zat,"fnet"),zat.forEach(t),XBo=r(Cye," \u2014 "),FG=n(Cye,"A",{href:!0});var Qat=s(FG);zBo=r(Qat,"FNetForTokenClassification"),Qat.forEach(t),QBo=r(Cye," (FNet model)"),Cye.forEach(t),WBo=i(J),e2=n(J,"LI",{});var wye=s(e2);Sfe=n(wye,"STRONG",{});var Wat=s(Sfe);HBo=r(Wat,"funnel"),Wat.forEach(t),UBo=r(wye," \u2014 "),TG=n(wye,"A",{href:!0});var Hat=s(TG);JBo=r(Hat,"FunnelForTokenClassification"),Hat.forEach(t),YBo=r(wye," (Funnel Transformer model)"),wye.forEach(t),KBo=i(J),o2=n(J,"LI",{});var Aye=s(o2);Rfe=n(Aye,"STRONG",{});var Uat=s(Rfe);ZBo=r(Uat,"gpt2"),Uat.forEach(t),ePo=r(Aye," \u2014 "),MG=n(Aye,"A",{href:!0});var Jat=s(MG);oPo=r(Jat,"GPT2ForTokenClassification"),Jat.forEach(t),rPo=r(Aye," (OpenAI GPT-2 model)"),Aye.forEach(t),tPo=i(J),r2=n(J,"LI",{});var yye=s(r2);Bfe=n(yye,"STRONG",{});var Yat=s(Bfe);aPo=r(Yat,"ibert"),Yat.forEach(t),nPo=r(yye," \u2014 "),EG=n(yye,"A",{href:!0});var Kat=s(EG);sPo=r(Kat,"IBertForTokenClassification"),Kat.forEach(t),lPo=r(yye," (I-BERT model)"),yye.forEach(t),iPo=i(J),t2=n(J,"LI",{});var Lye=s(t2);Pfe=n(Lye,"STRONG",{});var Zat=s(Pfe);dPo=r(Zat,"layoutlm"),Zat.forEach(t),cPo=r(Lye," \u2014 "),CG=n(Lye,"A",{href:!0});var ent=s(CG);fPo=r(ent,"LayoutLMForTokenClassification"),ent.forEach(t),mPo=r(Lye," (LayoutLM model)"),Lye.forEach(t),gPo=i(J),a2=n(J,"LI",{});var xye=s(a2);Ife=n(xye,"STRONG",{});var ont=s(Ife);hPo=r(ont,"layoutlmv2"),ont.forEach(t),pPo=r(xye," \u2014 "),wG=n(xye,"A",{href:!0});var rnt=s(wG);uPo=r(rnt,"LayoutLMv2ForTokenClassification"),rnt.forEach(t),_Po=r(xye," (LayoutLMv2 model)"),xye.forEach(t),bPo=i(J),n2=n(J,"LI",{});var $ye=s(n2);qfe=n($ye,"STRONG",{});var tnt=s(qfe);vPo=r(tnt,"longformer"),tnt.forEach(t),FPo=r($ye," \u2014 "),AG=n($ye,"A",{href:!0});var ant=s(AG);TPo=r(ant,"LongformerForTokenClassification"),ant.forEach(t),MPo=r($ye," (Longformer model)"),$ye.forEach(t),EPo=i(J),s2=n(J,"LI",{});var kye=s(s2);Nfe=n(kye,"STRONG",{});var nnt=s(Nfe);CPo=r(nnt,"megatron-bert"),nnt.forEach(t),wPo=r(kye," \u2014 "),yG=n(kye,"A",{href:!0});var snt=s(yG);APo=r(snt,"MegatronBertForTokenClassification"),snt.forEach(t),yPo=r(kye," (MegatronBert model)"),kye.forEach(t),LPo=i(J),l2=n(J,"LI",{});var Sye=s(l2);jfe=n(Sye,"STRONG",{});var lnt=s(jfe);xPo=r(lnt,"mobilebert"),lnt.forEach(t),$Po=r(Sye," \u2014 "),LG=n(Sye,"A",{href:!0});var int=s(LG);kPo=r(int,"MobileBertForTokenClassification"),int.forEach(t),SPo=r(Sye," (MobileBERT model)"),Sye.forEach(t),RPo=i(J),i2=n(J,"LI",{});var Rye=s(i2);Dfe=n(Rye,"STRONG",{});var dnt=s(Dfe);BPo=r(dnt,"mpnet"),dnt.forEach(t),PPo=r(Rye," \u2014 "),xG=n(Rye,"A",{href:!0});var cnt=s(xG);IPo=r(cnt,"MPNetForTokenClassification"),cnt.forEach(t),qPo=r(Rye," (MPNet model)"),Rye.forEach(t),NPo=i(J),d2=n(J,"LI",{});var Bye=s(d2);Gfe=n(Bye,"STRONG",{});var fnt=s(Gfe);jPo=r(fnt,"nystromformer"),fnt.forEach(t),DPo=r(Bye," \u2014 "),$G=n(Bye,"A",{href:!0});var mnt=s($G);GPo=r(mnt,"NystromformerForTokenClassification"),mnt.forEach(t),OPo=r(Bye," (Nystromformer model)"),Bye.forEach(t),VPo=i(J),c2=n(J,"LI",{});var Pye=s(c2);Ofe=n(Pye,"STRONG",{});var gnt=s(Ofe);XPo=r(gnt,"qdqbert"),gnt.forEach(t),zPo=r(Pye," \u2014 "),kG=n(Pye,"A",{href:!0});var hnt=s(kG);QPo=r(hnt,"QDQBertForTokenClassification"),hnt.forEach(t),WPo=r(Pye," (QDQBert model)"),Pye.forEach(t),HPo=i(J),f2=n(J,"LI",{});var Iye=s(f2);Vfe=n(Iye,"STRONG",{});var pnt=s(Vfe);UPo=r(pnt,"rembert"),pnt.forEach(t),JPo=r(Iye," \u2014 "),SG=n(Iye,"A",{href:!0});var unt=s(SG);YPo=r(unt,"RemBertForTokenClassification"),unt.forEach(t),KPo=r(Iye," (RemBERT model)"),Iye.forEach(t),ZPo=i(J),m2=n(J,"LI",{});var qye=s(m2);Xfe=n(qye,"STRONG",{});var _nt=s(Xfe);eIo=r(_nt,"roberta"),_nt.forEach(t),oIo=r(qye," \u2014 "),RG=n(qye,"A",{href:!0});var bnt=s(RG);rIo=r(bnt,"RobertaForTokenClassification"),bnt.forEach(t),tIo=r(qye," (RoBERTa model)"),qye.forEach(t),aIo=i(J),g2=n(J,"LI",{});var Nye=s(g2);zfe=n(Nye,"STRONG",{});var vnt=s(zfe);nIo=r(vnt,"roformer"),vnt.forEach(t),sIo=r(Nye," \u2014 "),BG=n(Nye,"A",{href:!0});var Fnt=s(BG);lIo=r(Fnt,"RoFormerForTokenClassification"),Fnt.forEach(t),iIo=r(Nye," (RoFormer model)"),Nye.forEach(t),dIo=i(J),h2=n(J,"LI",{});var jye=s(h2);Qfe=n(jye,"STRONG",{});var Tnt=s(Qfe);cIo=r(Tnt,"squeezebert"),Tnt.forEach(t),fIo=r(jye," \u2014 "),PG=n(jye,"A",{href:!0});var Mnt=s(PG);mIo=r(Mnt,"SqueezeBertForTokenClassification"),Mnt.forEach(t),gIo=r(jye," (SqueezeBERT model)"),jye.forEach(t),hIo=i(J),p2=n(J,"LI",{});var Dye=s(p2);Wfe=n(Dye,"STRONG",{});var Ent=s(Wfe);pIo=r(Ent,"xlm"),Ent.forEach(t),uIo=r(Dye," \u2014 "),IG=n(Dye,"A",{href:!0});var Cnt=s(IG);_Io=r(Cnt,"XLMForTokenClassification"),Cnt.forEach(t),bIo=r(Dye," (XLM model)"),Dye.forEach(t),vIo=i(J),u2=n(J,"LI",{});var Gye=s(u2);Hfe=n(Gye,"STRONG",{});var wnt=s(Hfe);FIo=r(wnt,"xlm-roberta"),wnt.forEach(t),TIo=r(Gye," \u2014 "),qG=n(Gye,"A",{href:!0});var Ant=s(qG);MIo=r(Ant,"XLMRobertaForTokenClassification"),Ant.forEach(t),EIo=r(Gye," (XLM-RoBERTa model)"),Gye.forEach(t),CIo=i(J),_2=n(J,"LI",{});var Oye=s(_2);Ufe=n(Oye,"STRONG",{});var ynt=s(Ufe);wIo=r(ynt,"xlm-roberta-xl"),ynt.forEach(t),AIo=r(Oye," \u2014 "),NG=n(Oye,"A",{href:!0});var Lnt=s(NG);yIo=r(Lnt,"XLMRobertaXLForTokenClassification"),Lnt.forEach(t),LIo=r(Oye," (XLM-RoBERTa-XL model)"),Oye.forEach(t),xIo=i(J),b2=n(J,"LI",{});var Vye=s(b2);Jfe=n(Vye,"STRONG",{});var xnt=s(Jfe);$Io=r(xnt,"xlnet"),xnt.forEach(t),kIo=r(Vye," \u2014 "),jG=n(Vye,"A",{href:!0});var $nt=s(jG);SIo=r($nt,"XLNetForTokenClassification"),$nt.forEach(t),RIo=r(Vye," (XLNet model)"),Vye.forEach(t),BIo=i(J),v2=n(J,"LI",{});var Xye=s(v2);Yfe=n(Xye,"STRONG",{});var knt=s(Yfe);PIo=r(knt,"yoso"),knt.forEach(t),IIo=r(Xye," \u2014 "),DG=n(Xye,"A",{href:!0});var Snt=s(DG);qIo=r(Snt,"YosoForTokenClassification"),Snt.forEach(t),NIo=r(Xye," (YOSO model)"),Xye.forEach(t),J.forEach(t),jIo=i(aa),F2=n(aa,"P",{});var zye=s(F2);DIo=r(zye,"The model is set in evaluation mode by default using "),Kfe=n(zye,"CODE",{});var Rnt=s(Kfe);GIo=r(Rnt,"model.eval()"),Rnt.forEach(t),OIo=r(zye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zfe=n(zye,"CODE",{});var Bnt=s(Zfe);VIo=r(Bnt,"model.train()"),Bnt.forEach(t),zye.forEach(t),XIo=i(aa),T(T2.$$.fragment,aa),aa.forEach(t),zs.forEach(t),ZBe=i(f),Vi=n(f,"H2",{class:!0});var oqe=s(Vi);M2=n(oqe,"A",{id:!0,class:!0,href:!0});var Pnt=s(M2);eme=n(Pnt,"SPAN",{});var Int=s(eme);T(XA.$$.fragment,Int),Int.forEach(t),Pnt.forEach(t),zIo=i(oqe),ome=n(oqe,"SPAN",{});var qnt=s(ome);QIo=r(qnt,"AutoModelForQuestionAnswering"),qnt.forEach(t),oqe.forEach(t),ePe=i(f),qo=n(f,"DIV",{class:!0});var Qs=s(qo);T(zA.$$.fragment,Qs),WIo=i(Qs),Xi=n(Qs,"P",{});var NY=s(Xi);HIo=r(NY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),GG=n(NY,"A",{href:!0});var Nnt=s(GG);UIo=r(Nnt,"from_pretrained()"),Nnt.forEach(t),JIo=r(NY," class method or the "),OG=n(NY,"A",{href:!0});var jnt=s(OG);YIo=r(jnt,"from_config()"),jnt.forEach(t),KIo=r(NY,` class
method.`),NY.forEach(t),ZIo=i(Qs),QA=n(Qs,"P",{});var rqe=s(QA);eqo=r(rqe,"This class cannot be instantiated directly using "),rme=n(rqe,"CODE",{});var Dnt=s(rme);oqo=r(Dnt,"__init__()"),Dnt.forEach(t),rqo=r(rqe," (throws an error)."),rqe.forEach(t),tqo=i(Qs),it=n(Qs,"DIV",{class:!0});var UC=s(it);T(WA.$$.fragment,UC),aqo=i(UC),tme=n(UC,"P",{});var Gnt=s(tme);nqo=r(Gnt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Gnt.forEach(t),sqo=i(UC),zi=n(UC,"P",{});var jY=s(zi);lqo=r(jY,`Note:
Loading a model from its configuration file does `),ame=n(jY,"STRONG",{});var Ont=s(ame);iqo=r(Ont,"not"),Ont.forEach(t),dqo=r(jY,` load the model weights. It only affects the
model\u2019s configuration. Use `),VG=n(jY,"A",{href:!0});var Vnt=s(VG);cqo=r(Vnt,"from_pretrained()"),Vnt.forEach(t),fqo=r(jY," to load the model weights."),jY.forEach(t),mqo=i(UC),T(E2.$$.fragment,UC),UC.forEach(t),gqo=i(Qs),to=n(Qs,"DIV",{class:!0});var na=s(to);T(HA.$$.fragment,na),hqo=i(na),nme=n(na,"P",{});var Xnt=s(nme);pqo=r(Xnt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Xnt.forEach(t),uqo=i(na),Sa=n(na,"P",{});var JC=s(Sa);_qo=r(JC,"The model class to instantiate is selected based on the "),sme=n(JC,"CODE",{});var znt=s(sme);bqo=r(znt,"model_type"),znt.forEach(t),vqo=r(JC,` property of the config object (either
passed as an argument or loaded from `),lme=n(JC,"CODE",{});var Qnt=s(lme);Fqo=r(Qnt,"pretrained_model_name_or_path"),Qnt.forEach(t),Tqo=r(JC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ime=n(JC,"CODE",{});var Wnt=s(ime);Mqo=r(Wnt,"pretrained_model_name_or_path"),Wnt.forEach(t),Eqo=r(JC,":"),JC.forEach(t),Cqo=i(na),O=n(na,"UL",{});var X=s(O);C2=n(X,"LI",{});var Qye=s(C2);dme=n(Qye,"STRONG",{});var Hnt=s(dme);wqo=r(Hnt,"albert"),Hnt.forEach(t),Aqo=r(Qye," \u2014 "),XG=n(Qye,"A",{href:!0});var Unt=s(XG);yqo=r(Unt,"AlbertForQuestionAnswering"),Unt.forEach(t),Lqo=r(Qye," (ALBERT model)"),Qye.forEach(t),xqo=i(X),w2=n(X,"LI",{});var Wye=s(w2);cme=n(Wye,"STRONG",{});var Jnt=s(cme);$qo=r(Jnt,"bart"),Jnt.forEach(t),kqo=r(Wye," \u2014 "),zG=n(Wye,"A",{href:!0});var Ynt=s(zG);Sqo=r(Ynt,"BartForQuestionAnswering"),Ynt.forEach(t),Rqo=r(Wye," (BART model)"),Wye.forEach(t),Bqo=i(X),A2=n(X,"LI",{});var Hye=s(A2);fme=n(Hye,"STRONG",{});var Knt=s(fme);Pqo=r(Knt,"bert"),Knt.forEach(t),Iqo=r(Hye," \u2014 "),QG=n(Hye,"A",{href:!0});var Znt=s(QG);qqo=r(Znt,"BertForQuestionAnswering"),Znt.forEach(t),Nqo=r(Hye," (BERT model)"),Hye.forEach(t),jqo=i(X),y2=n(X,"LI",{});var Uye=s(y2);mme=n(Uye,"STRONG",{});var est=s(mme);Dqo=r(est,"big_bird"),est.forEach(t),Gqo=r(Uye," \u2014 "),WG=n(Uye,"A",{href:!0});var ost=s(WG);Oqo=r(ost,"BigBirdForQuestionAnswering"),ost.forEach(t),Vqo=r(Uye," (BigBird model)"),Uye.forEach(t),Xqo=i(X),L2=n(X,"LI",{});var Jye=s(L2);gme=n(Jye,"STRONG",{});var rst=s(gme);zqo=r(rst,"bigbird_pegasus"),rst.forEach(t),Qqo=r(Jye," \u2014 "),HG=n(Jye,"A",{href:!0});var tst=s(HG);Wqo=r(tst,"BigBirdPegasusForQuestionAnswering"),tst.forEach(t),Hqo=r(Jye," (BigBirdPegasus model)"),Jye.forEach(t),Uqo=i(X),x2=n(X,"LI",{});var Yye=s(x2);hme=n(Yye,"STRONG",{});var ast=s(hme);Jqo=r(ast,"camembert"),ast.forEach(t),Yqo=r(Yye," \u2014 "),UG=n(Yye,"A",{href:!0});var nst=s(UG);Kqo=r(nst,"CamembertForQuestionAnswering"),nst.forEach(t),Zqo=r(Yye," (CamemBERT model)"),Yye.forEach(t),eNo=i(X),$2=n(X,"LI",{});var Kye=s($2);pme=n(Kye,"STRONG",{});var sst=s(pme);oNo=r(sst,"canine"),sst.forEach(t),rNo=r(Kye," \u2014 "),JG=n(Kye,"A",{href:!0});var lst=s(JG);tNo=r(lst,"CanineForQuestionAnswering"),lst.forEach(t),aNo=r(Kye," (Canine model)"),Kye.forEach(t),nNo=i(X),k2=n(X,"LI",{});var Zye=s(k2);ume=n(Zye,"STRONG",{});var ist=s(ume);sNo=r(ist,"convbert"),ist.forEach(t),lNo=r(Zye," \u2014 "),YG=n(Zye,"A",{href:!0});var dst=s(YG);iNo=r(dst,"ConvBertForQuestionAnswering"),dst.forEach(t),dNo=r(Zye," (ConvBERT model)"),Zye.forEach(t),cNo=i(X),S2=n(X,"LI",{});var eLe=s(S2);_me=n(eLe,"STRONG",{});var cst=s(_me);fNo=r(cst,"data2vec-text"),cst.forEach(t),mNo=r(eLe," \u2014 "),KG=n(eLe,"A",{href:!0});var fst=s(KG);gNo=r(fst,"Data2VecTextForQuestionAnswering"),fst.forEach(t),hNo=r(eLe," (Data2VecText model)"),eLe.forEach(t),pNo=i(X),R2=n(X,"LI",{});var oLe=s(R2);bme=n(oLe,"STRONG",{});var mst=s(bme);uNo=r(mst,"deberta"),mst.forEach(t),_No=r(oLe," \u2014 "),ZG=n(oLe,"A",{href:!0});var gst=s(ZG);bNo=r(gst,"DebertaForQuestionAnswering"),gst.forEach(t),vNo=r(oLe," (DeBERTa model)"),oLe.forEach(t),FNo=i(X),B2=n(X,"LI",{});var rLe=s(B2);vme=n(rLe,"STRONG",{});var hst=s(vme);TNo=r(hst,"deberta-v2"),hst.forEach(t),MNo=r(rLe," \u2014 "),eO=n(rLe,"A",{href:!0});var pst=s(eO);ENo=r(pst,"DebertaV2ForQuestionAnswering"),pst.forEach(t),CNo=r(rLe," (DeBERTa-v2 model)"),rLe.forEach(t),wNo=i(X),P2=n(X,"LI",{});var tLe=s(P2);Fme=n(tLe,"STRONG",{});var ust=s(Fme);ANo=r(ust,"distilbert"),ust.forEach(t),yNo=r(tLe," \u2014 "),oO=n(tLe,"A",{href:!0});var _st=s(oO);LNo=r(_st,"DistilBertForQuestionAnswering"),_st.forEach(t),xNo=r(tLe," (DistilBERT model)"),tLe.forEach(t),$No=i(X),I2=n(X,"LI",{});var aLe=s(I2);Tme=n(aLe,"STRONG",{});var bst=s(Tme);kNo=r(bst,"electra"),bst.forEach(t),SNo=r(aLe," \u2014 "),rO=n(aLe,"A",{href:!0});var vst=s(rO);RNo=r(vst,"ElectraForQuestionAnswering"),vst.forEach(t),BNo=r(aLe," (ELECTRA model)"),aLe.forEach(t),PNo=i(X),q2=n(X,"LI",{});var nLe=s(q2);Mme=n(nLe,"STRONG",{});var Fst=s(Mme);INo=r(Fst,"flaubert"),Fst.forEach(t),qNo=r(nLe," \u2014 "),tO=n(nLe,"A",{href:!0});var Tst=s(tO);NNo=r(Tst,"FlaubertForQuestionAnsweringSimple"),Tst.forEach(t),jNo=r(nLe," (FlauBERT model)"),nLe.forEach(t),DNo=i(X),N2=n(X,"LI",{});var sLe=s(N2);Eme=n(sLe,"STRONG",{});var Mst=s(Eme);GNo=r(Mst,"fnet"),Mst.forEach(t),ONo=r(sLe," \u2014 "),aO=n(sLe,"A",{href:!0});var Est=s(aO);VNo=r(Est,"FNetForQuestionAnswering"),Est.forEach(t),XNo=r(sLe," (FNet model)"),sLe.forEach(t),zNo=i(X),j2=n(X,"LI",{});var lLe=s(j2);Cme=n(lLe,"STRONG",{});var Cst=s(Cme);QNo=r(Cst,"funnel"),Cst.forEach(t),WNo=r(lLe," \u2014 "),nO=n(lLe,"A",{href:!0});var wst=s(nO);HNo=r(wst,"FunnelForQuestionAnswering"),wst.forEach(t),UNo=r(lLe," (Funnel Transformer model)"),lLe.forEach(t),JNo=i(X),D2=n(X,"LI",{});var iLe=s(D2);wme=n(iLe,"STRONG",{});var Ast=s(wme);YNo=r(Ast,"gptj"),Ast.forEach(t),KNo=r(iLe," \u2014 "),sO=n(iLe,"A",{href:!0});var yst=s(sO);ZNo=r(yst,"GPTJForQuestionAnswering"),yst.forEach(t),ejo=r(iLe," (GPT-J model)"),iLe.forEach(t),ojo=i(X),G2=n(X,"LI",{});var dLe=s(G2);Ame=n(dLe,"STRONG",{});var Lst=s(Ame);rjo=r(Lst,"ibert"),Lst.forEach(t),tjo=r(dLe," \u2014 "),lO=n(dLe,"A",{href:!0});var xst=s(lO);ajo=r(xst,"IBertForQuestionAnswering"),xst.forEach(t),njo=r(dLe," (I-BERT model)"),dLe.forEach(t),sjo=i(X),O2=n(X,"LI",{});var cLe=s(O2);yme=n(cLe,"STRONG",{});var $st=s(yme);ljo=r($st,"layoutlmv2"),$st.forEach(t),ijo=r(cLe," \u2014 "),iO=n(cLe,"A",{href:!0});var kst=s(iO);djo=r(kst,"LayoutLMv2ForQuestionAnswering"),kst.forEach(t),cjo=r(cLe," (LayoutLMv2 model)"),cLe.forEach(t),fjo=i(X),V2=n(X,"LI",{});var fLe=s(V2);Lme=n(fLe,"STRONG",{});var Sst=s(Lme);mjo=r(Sst,"led"),Sst.forEach(t),gjo=r(fLe," \u2014 "),dO=n(fLe,"A",{href:!0});var Rst=s(dO);hjo=r(Rst,"LEDForQuestionAnswering"),Rst.forEach(t),pjo=r(fLe," (LED model)"),fLe.forEach(t),ujo=i(X),X2=n(X,"LI",{});var mLe=s(X2);xme=n(mLe,"STRONG",{});var Bst=s(xme);_jo=r(Bst,"longformer"),Bst.forEach(t),bjo=r(mLe," \u2014 "),cO=n(mLe,"A",{href:!0});var Pst=s(cO);vjo=r(Pst,"LongformerForQuestionAnswering"),Pst.forEach(t),Fjo=r(mLe," (Longformer model)"),mLe.forEach(t),Tjo=i(X),z2=n(X,"LI",{});var gLe=s(z2);$me=n(gLe,"STRONG",{});var Ist=s($me);Mjo=r(Ist,"lxmert"),Ist.forEach(t),Ejo=r(gLe," \u2014 "),fO=n(gLe,"A",{href:!0});var qst=s(fO);Cjo=r(qst,"LxmertForQuestionAnswering"),qst.forEach(t),wjo=r(gLe," (LXMERT model)"),gLe.forEach(t),Ajo=i(X),Q2=n(X,"LI",{});var hLe=s(Q2);kme=n(hLe,"STRONG",{});var Nst=s(kme);yjo=r(Nst,"mbart"),Nst.forEach(t),Ljo=r(hLe," \u2014 "),mO=n(hLe,"A",{href:!0});var jst=s(mO);xjo=r(jst,"MBartForQuestionAnswering"),jst.forEach(t),$jo=r(hLe," (mBART model)"),hLe.forEach(t),kjo=i(X),W2=n(X,"LI",{});var pLe=s(W2);Sme=n(pLe,"STRONG",{});var Dst=s(Sme);Sjo=r(Dst,"megatron-bert"),Dst.forEach(t),Rjo=r(pLe," \u2014 "),gO=n(pLe,"A",{href:!0});var Gst=s(gO);Bjo=r(Gst,"MegatronBertForQuestionAnswering"),Gst.forEach(t),Pjo=r(pLe," (MegatronBert model)"),pLe.forEach(t),Ijo=i(X),H2=n(X,"LI",{});var uLe=s(H2);Rme=n(uLe,"STRONG",{});var Ost=s(Rme);qjo=r(Ost,"mobilebert"),Ost.forEach(t),Njo=r(uLe," \u2014 "),hO=n(uLe,"A",{href:!0});var Vst=s(hO);jjo=r(Vst,"MobileBertForQuestionAnswering"),Vst.forEach(t),Djo=r(uLe," (MobileBERT model)"),uLe.forEach(t),Gjo=i(X),U2=n(X,"LI",{});var _Le=s(U2);Bme=n(_Le,"STRONG",{});var Xst=s(Bme);Ojo=r(Xst,"mpnet"),Xst.forEach(t),Vjo=r(_Le," \u2014 "),pO=n(_Le,"A",{href:!0});var zst=s(pO);Xjo=r(zst,"MPNetForQuestionAnswering"),zst.forEach(t),zjo=r(_Le," (MPNet model)"),_Le.forEach(t),Qjo=i(X),J2=n(X,"LI",{});var bLe=s(J2);Pme=n(bLe,"STRONG",{});var Qst=s(Pme);Wjo=r(Qst,"nystromformer"),Qst.forEach(t),Hjo=r(bLe," \u2014 "),uO=n(bLe,"A",{href:!0});var Wst=s(uO);Ujo=r(Wst,"NystromformerForQuestionAnswering"),Wst.forEach(t),Jjo=r(bLe," (Nystromformer model)"),bLe.forEach(t),Yjo=i(X),Y2=n(X,"LI",{});var vLe=s(Y2);Ime=n(vLe,"STRONG",{});var Hst=s(Ime);Kjo=r(Hst,"qdqbert"),Hst.forEach(t),Zjo=r(vLe," \u2014 "),_O=n(vLe,"A",{href:!0});var Ust=s(_O);eDo=r(Ust,"QDQBertForQuestionAnswering"),Ust.forEach(t),oDo=r(vLe," (QDQBert model)"),vLe.forEach(t),rDo=i(X),K2=n(X,"LI",{});var FLe=s(K2);qme=n(FLe,"STRONG",{});var Jst=s(qme);tDo=r(Jst,"reformer"),Jst.forEach(t),aDo=r(FLe," \u2014 "),bO=n(FLe,"A",{href:!0});var Yst=s(bO);nDo=r(Yst,"ReformerForQuestionAnswering"),Yst.forEach(t),sDo=r(FLe," (Reformer model)"),FLe.forEach(t),lDo=i(X),Z2=n(X,"LI",{});var TLe=s(Z2);Nme=n(TLe,"STRONG",{});var Kst=s(Nme);iDo=r(Kst,"rembert"),Kst.forEach(t),dDo=r(TLe," \u2014 "),vO=n(TLe,"A",{href:!0});var Zst=s(vO);cDo=r(Zst,"RemBertForQuestionAnswering"),Zst.forEach(t),fDo=r(TLe," (RemBERT model)"),TLe.forEach(t),mDo=i(X),ev=n(X,"LI",{});var MLe=s(ev);jme=n(MLe,"STRONG",{});var elt=s(jme);gDo=r(elt,"roberta"),elt.forEach(t),hDo=r(MLe," \u2014 "),FO=n(MLe,"A",{href:!0});var olt=s(FO);pDo=r(olt,"RobertaForQuestionAnswering"),olt.forEach(t),uDo=r(MLe," (RoBERTa model)"),MLe.forEach(t),_Do=i(X),ov=n(X,"LI",{});var ELe=s(ov);Dme=n(ELe,"STRONG",{});var rlt=s(Dme);bDo=r(rlt,"roformer"),rlt.forEach(t),vDo=r(ELe," \u2014 "),TO=n(ELe,"A",{href:!0});var tlt=s(TO);FDo=r(tlt,"RoFormerForQuestionAnswering"),tlt.forEach(t),TDo=r(ELe," (RoFormer model)"),ELe.forEach(t),MDo=i(X),rv=n(X,"LI",{});var CLe=s(rv);Gme=n(CLe,"STRONG",{});var alt=s(Gme);EDo=r(alt,"splinter"),alt.forEach(t),CDo=r(CLe," \u2014 "),MO=n(CLe,"A",{href:!0});var nlt=s(MO);wDo=r(nlt,"SplinterForQuestionAnswering"),nlt.forEach(t),ADo=r(CLe," (Splinter model)"),CLe.forEach(t),yDo=i(X),tv=n(X,"LI",{});var wLe=s(tv);Ome=n(wLe,"STRONG",{});var slt=s(Ome);LDo=r(slt,"squeezebert"),slt.forEach(t),xDo=r(wLe," \u2014 "),EO=n(wLe,"A",{href:!0});var llt=s(EO);$Do=r(llt,"SqueezeBertForQuestionAnswering"),llt.forEach(t),kDo=r(wLe," (SqueezeBERT model)"),wLe.forEach(t),SDo=i(X),av=n(X,"LI",{});var ALe=s(av);Vme=n(ALe,"STRONG",{});var ilt=s(Vme);RDo=r(ilt,"xlm"),ilt.forEach(t),BDo=r(ALe," \u2014 "),CO=n(ALe,"A",{href:!0});var dlt=s(CO);PDo=r(dlt,"XLMForQuestionAnsweringSimple"),dlt.forEach(t),IDo=r(ALe," (XLM model)"),ALe.forEach(t),qDo=i(X),nv=n(X,"LI",{});var yLe=s(nv);Xme=n(yLe,"STRONG",{});var clt=s(Xme);NDo=r(clt,"xlm-roberta"),clt.forEach(t),jDo=r(yLe," \u2014 "),wO=n(yLe,"A",{href:!0});var flt=s(wO);DDo=r(flt,"XLMRobertaForQuestionAnswering"),flt.forEach(t),GDo=r(yLe," (XLM-RoBERTa model)"),yLe.forEach(t),ODo=i(X),sv=n(X,"LI",{});var LLe=s(sv);zme=n(LLe,"STRONG",{});var mlt=s(zme);VDo=r(mlt,"xlm-roberta-xl"),mlt.forEach(t),XDo=r(LLe," \u2014 "),AO=n(LLe,"A",{href:!0});var glt=s(AO);zDo=r(glt,"XLMRobertaXLForQuestionAnswering"),glt.forEach(t),QDo=r(LLe," (XLM-RoBERTa-XL model)"),LLe.forEach(t),WDo=i(X),lv=n(X,"LI",{});var xLe=s(lv);Qme=n(xLe,"STRONG",{});var hlt=s(Qme);HDo=r(hlt,"xlnet"),hlt.forEach(t),UDo=r(xLe," \u2014 "),yO=n(xLe,"A",{href:!0});var plt=s(yO);JDo=r(plt,"XLNetForQuestionAnsweringSimple"),plt.forEach(t),YDo=r(xLe," (XLNet model)"),xLe.forEach(t),KDo=i(X),iv=n(X,"LI",{});var $Le=s(iv);Wme=n($Le,"STRONG",{});var ult=s(Wme);ZDo=r(ult,"yoso"),ult.forEach(t),eGo=r($Le," \u2014 "),LO=n($Le,"A",{href:!0});var _lt=s(LO);oGo=r(_lt,"YosoForQuestionAnswering"),_lt.forEach(t),rGo=r($Le," (YOSO model)"),$Le.forEach(t),X.forEach(t),tGo=i(na),dv=n(na,"P",{});var kLe=s(dv);aGo=r(kLe,"The model is set in evaluation mode by default using "),Hme=n(kLe,"CODE",{});var blt=s(Hme);nGo=r(blt,"model.eval()"),blt.forEach(t),sGo=r(kLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ume=n(kLe,"CODE",{});var vlt=s(Ume);lGo=r(vlt,"model.train()"),vlt.forEach(t),kLe.forEach(t),iGo=i(na),T(cv.$$.fragment,na),na.forEach(t),Qs.forEach(t),oPe=i(f),Qi=n(f,"H2",{class:!0});var tqe=s(Qi);fv=n(tqe,"A",{id:!0,class:!0,href:!0});var Flt=s(fv);Jme=n(Flt,"SPAN",{});var Tlt=s(Jme);T(UA.$$.fragment,Tlt),Tlt.forEach(t),Flt.forEach(t),dGo=i(tqe),Yme=n(tqe,"SPAN",{});var Mlt=s(Yme);cGo=r(Mlt,"AutoModelForTableQuestionAnswering"),Mlt.forEach(t),tqe.forEach(t),rPe=i(f),No=n(f,"DIV",{class:!0});var Ws=s(No);T(JA.$$.fragment,Ws),fGo=i(Ws),Wi=n(Ws,"P",{});var DY=s(Wi);mGo=r(DY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),xO=n(DY,"A",{href:!0});var Elt=s(xO);gGo=r(Elt,"from_pretrained()"),Elt.forEach(t),hGo=r(DY," class method or the "),$O=n(DY,"A",{href:!0});var Clt=s($O);pGo=r(Clt,"from_config()"),Clt.forEach(t),uGo=r(DY,` class
method.`),DY.forEach(t),_Go=i(Ws),YA=n(Ws,"P",{});var aqe=s(YA);bGo=r(aqe,"This class cannot be instantiated directly using "),Kme=n(aqe,"CODE",{});var wlt=s(Kme);vGo=r(wlt,"__init__()"),wlt.forEach(t),FGo=r(aqe," (throws an error)."),aqe.forEach(t),TGo=i(Ws),dt=n(Ws,"DIV",{class:!0});var YC=s(dt);T(KA.$$.fragment,YC),MGo=i(YC),Zme=n(YC,"P",{});var Alt=s(Zme);EGo=r(Alt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Alt.forEach(t),CGo=i(YC),Hi=n(YC,"P",{});var GY=s(Hi);wGo=r(GY,`Note:
Loading a model from its configuration file does `),ege=n(GY,"STRONG",{});var ylt=s(ege);AGo=r(ylt,"not"),ylt.forEach(t),yGo=r(GY,` load the model weights. It only affects the
model\u2019s configuration. Use `),kO=n(GY,"A",{href:!0});var Llt=s(kO);LGo=r(Llt,"from_pretrained()"),Llt.forEach(t),xGo=r(GY," to load the model weights."),GY.forEach(t),$Go=i(YC),T(mv.$$.fragment,YC),YC.forEach(t),kGo=i(Ws),ao=n(Ws,"DIV",{class:!0});var sa=s(ao);T(ZA.$$.fragment,sa),SGo=i(sa),oge=n(sa,"P",{});var xlt=s(oge);RGo=r(xlt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),xlt.forEach(t),BGo=i(sa),Ra=n(sa,"P",{});var KC=s(Ra);PGo=r(KC,"The model class to instantiate is selected based on the "),rge=n(KC,"CODE",{});var $lt=s(rge);IGo=r($lt,"model_type"),$lt.forEach(t),qGo=r(KC,` property of the config object (either
passed as an argument or loaded from `),tge=n(KC,"CODE",{});var klt=s(tge);NGo=r(klt,"pretrained_model_name_or_path"),klt.forEach(t),jGo=r(KC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),age=n(KC,"CODE",{});var Slt=s(age);DGo=r(Slt,"pretrained_model_name_or_path"),Slt.forEach(t),GGo=r(KC,":"),KC.forEach(t),OGo=i(sa),nge=n(sa,"UL",{});var Rlt=s(nge);gv=n(Rlt,"LI",{});var SLe=s(gv);sge=n(SLe,"STRONG",{});var Blt=s(sge);VGo=r(Blt,"tapas"),Blt.forEach(t),XGo=r(SLe," \u2014 "),SO=n(SLe,"A",{href:!0});var Plt=s(SO);zGo=r(Plt,"TapasForQuestionAnswering"),Plt.forEach(t),QGo=r(SLe," (TAPAS model)"),SLe.forEach(t),Rlt.forEach(t),WGo=i(sa),hv=n(sa,"P",{});var RLe=s(hv);HGo=r(RLe,"The model is set in evaluation mode by default using "),lge=n(RLe,"CODE",{});var Ilt=s(lge);UGo=r(Ilt,"model.eval()"),Ilt.forEach(t),JGo=r(RLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ige=n(RLe,"CODE",{});var qlt=s(ige);YGo=r(qlt,"model.train()"),qlt.forEach(t),RLe.forEach(t),KGo=i(sa),T(pv.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),tPe=i(f),Ui=n(f,"H2",{class:!0});var nqe=s(Ui);uv=n(nqe,"A",{id:!0,class:!0,href:!0});var Nlt=s(uv);dge=n(Nlt,"SPAN",{});var jlt=s(dge);T(e0.$$.fragment,jlt),jlt.forEach(t),Nlt.forEach(t),ZGo=i(nqe),cge=n(nqe,"SPAN",{});var Dlt=s(cge);eOo=r(Dlt,"AutoModelForImageClassification"),Dlt.forEach(t),nqe.forEach(t),aPe=i(f),jo=n(f,"DIV",{class:!0});var Hs=s(jo);T(o0.$$.fragment,Hs),oOo=i(Hs),Ji=n(Hs,"P",{});var OY=s(Ji);rOo=r(OY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),RO=n(OY,"A",{href:!0});var Glt=s(RO);tOo=r(Glt,"from_pretrained()"),Glt.forEach(t),aOo=r(OY," class method or the "),BO=n(OY,"A",{href:!0});var Olt=s(BO);nOo=r(Olt,"from_config()"),Olt.forEach(t),sOo=r(OY,` class
method.`),OY.forEach(t),lOo=i(Hs),r0=n(Hs,"P",{});var sqe=s(r0);iOo=r(sqe,"This class cannot be instantiated directly using "),fge=n(sqe,"CODE",{});var Vlt=s(fge);dOo=r(Vlt,"__init__()"),Vlt.forEach(t),cOo=r(sqe," (throws an error)."),sqe.forEach(t),fOo=i(Hs),ct=n(Hs,"DIV",{class:!0});var ZC=s(ct);T(t0.$$.fragment,ZC),mOo=i(ZC),mge=n(ZC,"P",{});var Xlt=s(mge);gOo=r(Xlt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Xlt.forEach(t),hOo=i(ZC),Yi=n(ZC,"P",{});var VY=s(Yi);pOo=r(VY,`Note:
Loading a model from its configuration file does `),gge=n(VY,"STRONG",{});var zlt=s(gge);uOo=r(zlt,"not"),zlt.forEach(t),_Oo=r(VY,` load the model weights. It only affects the
model\u2019s configuration. Use `),PO=n(VY,"A",{href:!0});var Qlt=s(PO);bOo=r(Qlt,"from_pretrained()"),Qlt.forEach(t),vOo=r(VY," to load the model weights."),VY.forEach(t),FOo=i(ZC),T(_v.$$.fragment,ZC),ZC.forEach(t),TOo=i(Hs),no=n(Hs,"DIV",{class:!0});var la=s(no);T(a0.$$.fragment,la),MOo=i(la),hge=n(la,"P",{});var Wlt=s(hge);EOo=r(Wlt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Wlt.forEach(t),COo=i(la),Ba=n(la,"P",{});var e3=s(Ba);wOo=r(e3,"The model class to instantiate is selected based on the "),pge=n(e3,"CODE",{});var Hlt=s(pge);AOo=r(Hlt,"model_type"),Hlt.forEach(t),yOo=r(e3,` property of the config object (either
passed as an argument or loaded from `),uge=n(e3,"CODE",{});var Ult=s(uge);LOo=r(Ult,"pretrained_model_name_or_path"),Ult.forEach(t),xOo=r(e3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ge=n(e3,"CODE",{});var Jlt=s(_ge);$Oo=r(Jlt,"pretrained_model_name_or_path"),Jlt.forEach(t),kOo=r(e3,":"),e3.forEach(t),SOo=i(la),ve=n(la,"UL",{});var Ee=s(ve);bv=n(Ee,"LI",{});var BLe=s(bv);bge=n(BLe,"STRONG",{});var Ylt=s(bge);ROo=r(Ylt,"beit"),Ylt.forEach(t),BOo=r(BLe," \u2014 "),IO=n(BLe,"A",{href:!0});var Klt=s(IO);POo=r(Klt,"BeitForImageClassification"),Klt.forEach(t),IOo=r(BLe," (BEiT model)"),BLe.forEach(t),qOo=i(Ee),vv=n(Ee,"LI",{});var PLe=s(vv);vge=n(PLe,"STRONG",{});var Zlt=s(vge);NOo=r(Zlt,"convnext"),Zlt.forEach(t),jOo=r(PLe," \u2014 "),qO=n(PLe,"A",{href:!0});var eit=s(qO);DOo=r(eit,"ConvNextForImageClassification"),eit.forEach(t),GOo=r(PLe," (ConvNext model)"),PLe.forEach(t),OOo=i(Ee),Fv=n(Ee,"LI",{});var ILe=s(Fv);Fge=n(ILe,"STRONG",{});var oit=s(Fge);VOo=r(oit,"data2vec-vision"),oit.forEach(t),XOo=r(ILe," \u2014 "),NO=n(ILe,"A",{href:!0});var rit=s(NO);zOo=r(rit,"Data2VecVisionForImageClassification"),rit.forEach(t),QOo=r(ILe," (Data2VecVision model)"),ILe.forEach(t),WOo=i(Ee),$s=n(Ee,"LI",{});var Ix=s($s);Tge=n(Ix,"STRONG",{});var tit=s(Tge);HOo=r(tit,"deit"),tit.forEach(t),UOo=r(Ix," \u2014 "),jO=n(Ix,"A",{href:!0});var ait=s(jO);JOo=r(ait,"DeiTForImageClassification"),ait.forEach(t),YOo=r(Ix," or "),DO=n(Ix,"A",{href:!0});var nit=s(DO);KOo=r(nit,"DeiTForImageClassificationWithTeacher"),nit.forEach(t),ZOo=r(Ix," (DeiT model)"),Ix.forEach(t),eVo=i(Ee),Tv=n(Ee,"LI",{});var qLe=s(Tv);Mge=n(qLe,"STRONG",{});var sit=s(Mge);oVo=r(sit,"imagegpt"),sit.forEach(t),rVo=r(qLe," \u2014 "),GO=n(qLe,"A",{href:!0});var lit=s(GO);tVo=r(lit,"ImageGPTForImageClassification"),lit.forEach(t),aVo=r(qLe," (ImageGPT model)"),qLe.forEach(t),nVo=i(Ee),ft=n(Ee,"LI",{});var of=s(ft);Ege=n(of,"STRONG",{});var iit=s(Ege);sVo=r(iit,"perceiver"),iit.forEach(t),lVo=r(of," \u2014 "),OO=n(of,"A",{href:!0});var dit=s(OO);iVo=r(dit,"PerceiverForImageClassificationLearned"),dit.forEach(t),dVo=r(of," or "),VO=n(of,"A",{href:!0});var cit=s(VO);cVo=r(cit,"PerceiverForImageClassificationFourier"),cit.forEach(t),fVo=r(of," or "),XO=n(of,"A",{href:!0});var fit=s(XO);mVo=r(fit,"PerceiverForImageClassificationConvProcessing"),fit.forEach(t),gVo=r(of," (Perceiver model)"),of.forEach(t),hVo=i(Ee),Mv=n(Ee,"LI",{});var NLe=s(Mv);Cge=n(NLe,"STRONG",{});var mit=s(Cge);pVo=r(mit,"poolformer"),mit.forEach(t),uVo=r(NLe," \u2014 "),zO=n(NLe,"A",{href:!0});var git=s(zO);_Vo=r(git,"PoolFormerForImageClassification"),git.forEach(t),bVo=r(NLe," (PoolFormer model)"),NLe.forEach(t),vVo=i(Ee),Ev=n(Ee,"LI",{});var jLe=s(Ev);wge=n(jLe,"STRONG",{});var hit=s(wge);FVo=r(hit,"regnet"),hit.forEach(t),TVo=r(jLe," \u2014 "),QO=n(jLe,"A",{href:!0});var pit=s(QO);MVo=r(pit,"RegNetForImageClassification"),pit.forEach(t),EVo=r(jLe," (RegNet model)"),jLe.forEach(t),CVo=i(Ee),Cv=n(Ee,"LI",{});var DLe=s(Cv);Age=n(DLe,"STRONG",{});var uit=s(Age);wVo=r(uit,"resnet"),uit.forEach(t),AVo=r(DLe," \u2014 "),WO=n(DLe,"A",{href:!0});var _it=s(WO);yVo=r(_it,"ResNetForImageClassification"),_it.forEach(t),LVo=r(DLe," (ResNet model)"),DLe.forEach(t),xVo=i(Ee),wv=n(Ee,"LI",{});var GLe=s(wv);yge=n(GLe,"STRONG",{});var bit=s(yge);$Vo=r(bit,"segformer"),bit.forEach(t),kVo=r(GLe," \u2014 "),HO=n(GLe,"A",{href:!0});var vit=s(HO);SVo=r(vit,"SegformerForImageClassification"),vit.forEach(t),RVo=r(GLe," (SegFormer model)"),GLe.forEach(t),BVo=i(Ee),Av=n(Ee,"LI",{});var OLe=s(Av);Lge=n(OLe,"STRONG",{});var Fit=s(Lge);PVo=r(Fit,"swin"),Fit.forEach(t),IVo=r(OLe," \u2014 "),UO=n(OLe,"A",{href:!0});var Tit=s(UO);qVo=r(Tit,"SwinForImageClassification"),Tit.forEach(t),NVo=r(OLe," (Swin model)"),OLe.forEach(t),jVo=i(Ee),yv=n(Ee,"LI",{});var VLe=s(yv);xge=n(VLe,"STRONG",{});var Mit=s(xge);DVo=r(Mit,"van"),Mit.forEach(t),GVo=r(VLe," \u2014 "),JO=n(VLe,"A",{href:!0});var Eit=s(JO);OVo=r(Eit,"VanForImageClassification"),Eit.forEach(t),VVo=r(VLe," (VAN model)"),VLe.forEach(t),XVo=i(Ee),Lv=n(Ee,"LI",{});var XLe=s(Lv);$ge=n(XLe,"STRONG",{});var Cit=s($ge);zVo=r(Cit,"vit"),Cit.forEach(t),QVo=r(XLe," \u2014 "),YO=n(XLe,"A",{href:!0});var wit=s(YO);WVo=r(wit,"ViTForImageClassification"),wit.forEach(t),HVo=r(XLe," (ViT model)"),XLe.forEach(t),Ee.forEach(t),UVo=i(la),xv=n(la,"P",{});var zLe=s(xv);JVo=r(zLe,"The model is set in evaluation mode by default using "),kge=n(zLe,"CODE",{});var Ait=s(kge);YVo=r(Ait,"model.eval()"),Ait.forEach(t),KVo=r(zLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sge=n(zLe,"CODE",{});var yit=s(Sge);ZVo=r(yit,"model.train()"),yit.forEach(t),zLe.forEach(t),eXo=i(la),T($v.$$.fragment,la),la.forEach(t),Hs.forEach(t),nPe=i(f),Ki=n(f,"H2",{class:!0});var lqe=s(Ki);kv=n(lqe,"A",{id:!0,class:!0,href:!0});var Lit=s(kv);Rge=n(Lit,"SPAN",{});var xit=s(Rge);T(n0.$$.fragment,xit),xit.forEach(t),Lit.forEach(t),oXo=i(lqe),Bge=n(lqe,"SPAN",{});var $it=s(Bge);rXo=r($it,"AutoModelForVision2Seq"),$it.forEach(t),lqe.forEach(t),sPe=i(f),Do=n(f,"DIV",{class:!0});var Us=s(Do);T(s0.$$.fragment,Us),tXo=i(Us),Zi=n(Us,"P",{});var XY=s(Zi);aXo=r(XY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),KO=n(XY,"A",{href:!0});var kit=s(KO);nXo=r(kit,"from_pretrained()"),kit.forEach(t),sXo=r(XY," class method or the "),ZO=n(XY,"A",{href:!0});var Sit=s(ZO);lXo=r(Sit,"from_config()"),Sit.forEach(t),iXo=r(XY,` class
method.`),XY.forEach(t),dXo=i(Us),l0=n(Us,"P",{});var iqe=s(l0);cXo=r(iqe,"This class cannot be instantiated directly using "),Pge=n(iqe,"CODE",{});var Rit=s(Pge);fXo=r(Rit,"__init__()"),Rit.forEach(t),mXo=r(iqe," (throws an error)."),iqe.forEach(t),gXo=i(Us),mt=n(Us,"DIV",{class:!0});var o3=s(mt);T(i0.$$.fragment,o3),hXo=i(o3),Ige=n(o3,"P",{});var Bit=s(Ige);pXo=r(Bit,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Bit.forEach(t),uXo=i(o3),ed=n(o3,"P",{});var zY=s(ed);_Xo=r(zY,`Note:
Loading a model from its configuration file does `),qge=n(zY,"STRONG",{});var Pit=s(qge);bXo=r(Pit,"not"),Pit.forEach(t),vXo=r(zY,` load the model weights. It only affects the
model\u2019s configuration. Use `),eV=n(zY,"A",{href:!0});var Iit=s(eV);FXo=r(Iit,"from_pretrained()"),Iit.forEach(t),TXo=r(zY," to load the model weights."),zY.forEach(t),MXo=i(o3),T(Sv.$$.fragment,o3),o3.forEach(t),EXo=i(Us),so=n(Us,"DIV",{class:!0});var ia=s(so);T(d0.$$.fragment,ia),CXo=i(ia),Nge=n(ia,"P",{});var qit=s(Nge);wXo=r(qit,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),qit.forEach(t),AXo=i(ia),Pa=n(ia,"P",{});var r3=s(Pa);yXo=r(r3,"The model class to instantiate is selected based on the "),jge=n(r3,"CODE",{});var Nit=s(jge);LXo=r(Nit,"model_type"),Nit.forEach(t),xXo=r(r3,` property of the config object (either
passed as an argument or loaded from `),Dge=n(r3,"CODE",{});var jit=s(Dge);$Xo=r(jit,"pretrained_model_name_or_path"),jit.forEach(t),kXo=r(r3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gge=n(r3,"CODE",{});var Dit=s(Gge);SXo=r(Dit,"pretrained_model_name_or_path"),Dit.forEach(t),RXo=r(r3,":"),r3.forEach(t),BXo=i(ia),Oge=n(ia,"UL",{});var Git=s(Oge);Rv=n(Git,"LI",{});var QLe=s(Rv);Vge=n(QLe,"STRONG",{});var Oit=s(Vge);PXo=r(Oit,"vision-encoder-decoder"),Oit.forEach(t),IXo=r(QLe," \u2014 "),oV=n(QLe,"A",{href:!0});var Vit=s(oV);qXo=r(Vit,"VisionEncoderDecoderModel"),Vit.forEach(t),NXo=r(QLe," (Vision Encoder decoder model)"),QLe.forEach(t),Git.forEach(t),jXo=i(ia),Bv=n(ia,"P",{});var WLe=s(Bv);DXo=r(WLe,"The model is set in evaluation mode by default using "),Xge=n(WLe,"CODE",{});var Xit=s(Xge);GXo=r(Xit,"model.eval()"),Xit.forEach(t),OXo=r(WLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zge=n(WLe,"CODE",{});var zit=s(zge);VXo=r(zit,"model.train()"),zit.forEach(t),WLe.forEach(t),XXo=i(ia),T(Pv.$$.fragment,ia),ia.forEach(t),Us.forEach(t),lPe=i(f),od=n(f,"H2",{class:!0});var dqe=s(od);Iv=n(dqe,"A",{id:!0,class:!0,href:!0});var Qit=s(Iv);Qge=n(Qit,"SPAN",{});var Wit=s(Qge);T(c0.$$.fragment,Wit),Wit.forEach(t),Qit.forEach(t),zXo=i(dqe),Wge=n(dqe,"SPAN",{});var Hit=s(Wge);QXo=r(Hit,"AutoModelForAudioClassification"),Hit.forEach(t),dqe.forEach(t),iPe=i(f),Go=n(f,"DIV",{class:!0});var Js=s(Go);T(f0.$$.fragment,Js),WXo=i(Js),rd=n(Js,"P",{});var QY=s(rd);HXo=r(QY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),rV=n(QY,"A",{href:!0});var Uit=s(rV);UXo=r(Uit,"from_pretrained()"),Uit.forEach(t),JXo=r(QY," class method or the "),tV=n(QY,"A",{href:!0});var Jit=s(tV);YXo=r(Jit,"from_config()"),Jit.forEach(t),KXo=r(QY,` class
method.`),QY.forEach(t),ZXo=i(Js),m0=n(Js,"P",{});var cqe=s(m0);ezo=r(cqe,"This class cannot be instantiated directly using "),Hge=n(cqe,"CODE",{});var Yit=s(Hge);ozo=r(Yit,"__init__()"),Yit.forEach(t),rzo=r(cqe," (throws an error)."),cqe.forEach(t),tzo=i(Js),gt=n(Js,"DIV",{class:!0});var t3=s(gt);T(g0.$$.fragment,t3),azo=i(t3),Uge=n(t3,"P",{});var Kit=s(Uge);nzo=r(Kit,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Kit.forEach(t),szo=i(t3),td=n(t3,"P",{});var WY=s(td);lzo=r(WY,`Note:
Loading a model from its configuration file does `),Jge=n(WY,"STRONG",{});var Zit=s(Jge);izo=r(Zit,"not"),Zit.forEach(t),dzo=r(WY,` load the model weights. It only affects the
model\u2019s configuration. Use `),aV=n(WY,"A",{href:!0});var edt=s(aV);czo=r(edt,"from_pretrained()"),edt.forEach(t),fzo=r(WY," to load the model weights."),WY.forEach(t),mzo=i(t3),T(qv.$$.fragment,t3),t3.forEach(t),gzo=i(Js),lo=n(Js,"DIV",{class:!0});var da=s(lo);T(h0.$$.fragment,da),hzo=i(da),Yge=n(da,"P",{});var odt=s(Yge);pzo=r(odt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),odt.forEach(t),uzo=i(da),Ia=n(da,"P",{});var a3=s(Ia);_zo=r(a3,"The model class to instantiate is selected based on the "),Kge=n(a3,"CODE",{});var rdt=s(Kge);bzo=r(rdt,"model_type"),rdt.forEach(t),vzo=r(a3,` property of the config object (either
passed as an argument or loaded from `),Zge=n(a3,"CODE",{});var tdt=s(Zge);Fzo=r(tdt,"pretrained_model_name_or_path"),tdt.forEach(t),Tzo=r(a3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ehe=n(a3,"CODE",{});var adt=s(ehe);Mzo=r(adt,"pretrained_model_name_or_path"),adt.forEach(t),Ezo=r(a3,":"),a3.forEach(t),Czo=i(da),Ne=n(da,"UL",{});var bo=s(Ne);Nv=n(bo,"LI",{});var HLe=s(Nv);ohe=n(HLe,"STRONG",{});var ndt=s(ohe);wzo=r(ndt,"data2vec-audio"),ndt.forEach(t),Azo=r(HLe," \u2014 "),nV=n(HLe,"A",{href:!0});var sdt=s(nV);yzo=r(sdt,"Data2VecAudioForSequenceClassification"),sdt.forEach(t),Lzo=r(HLe," (Data2VecAudio model)"),HLe.forEach(t),xzo=i(bo),jv=n(bo,"LI",{});var ULe=s(jv);rhe=n(ULe,"STRONG",{});var ldt=s(rhe);$zo=r(ldt,"hubert"),ldt.forEach(t),kzo=r(ULe," \u2014 "),sV=n(ULe,"A",{href:!0});var idt=s(sV);Szo=r(idt,"HubertForSequenceClassification"),idt.forEach(t),Rzo=r(ULe," (Hubert model)"),ULe.forEach(t),Bzo=i(bo),Dv=n(bo,"LI",{});var JLe=s(Dv);the=n(JLe,"STRONG",{});var ddt=s(the);Pzo=r(ddt,"sew"),ddt.forEach(t),Izo=r(JLe," \u2014 "),lV=n(JLe,"A",{href:!0});var cdt=s(lV);qzo=r(cdt,"SEWForSequenceClassification"),cdt.forEach(t),Nzo=r(JLe," (SEW model)"),JLe.forEach(t),jzo=i(bo),Gv=n(bo,"LI",{});var YLe=s(Gv);ahe=n(YLe,"STRONG",{});var fdt=s(ahe);Dzo=r(fdt,"sew-d"),fdt.forEach(t),Gzo=r(YLe," \u2014 "),iV=n(YLe,"A",{href:!0});var mdt=s(iV);Ozo=r(mdt,"SEWDForSequenceClassification"),mdt.forEach(t),Vzo=r(YLe," (SEW-D model)"),YLe.forEach(t),Xzo=i(bo),Ov=n(bo,"LI",{});var KLe=s(Ov);nhe=n(KLe,"STRONG",{});var gdt=s(nhe);zzo=r(gdt,"unispeech"),gdt.forEach(t),Qzo=r(KLe," \u2014 "),dV=n(KLe,"A",{href:!0});var hdt=s(dV);Wzo=r(hdt,"UniSpeechForSequenceClassification"),hdt.forEach(t),Hzo=r(KLe," (UniSpeech model)"),KLe.forEach(t),Uzo=i(bo),Vv=n(bo,"LI",{});var ZLe=s(Vv);she=n(ZLe,"STRONG",{});var pdt=s(she);Jzo=r(pdt,"unispeech-sat"),pdt.forEach(t),Yzo=r(ZLe," \u2014 "),cV=n(ZLe,"A",{href:!0});var udt=s(cV);Kzo=r(udt,"UniSpeechSatForSequenceClassification"),udt.forEach(t),Zzo=r(ZLe," (UniSpeechSat model)"),ZLe.forEach(t),eQo=i(bo),Xv=n(bo,"LI",{});var e7e=s(Xv);lhe=n(e7e,"STRONG",{});var _dt=s(lhe);oQo=r(_dt,"wav2vec2"),_dt.forEach(t),rQo=r(e7e," \u2014 "),fV=n(e7e,"A",{href:!0});var bdt=s(fV);tQo=r(bdt,"Wav2Vec2ForSequenceClassification"),bdt.forEach(t),aQo=r(e7e," (Wav2Vec2 model)"),e7e.forEach(t),nQo=i(bo),zv=n(bo,"LI",{});var o7e=s(zv);ihe=n(o7e,"STRONG",{});var vdt=s(ihe);sQo=r(vdt,"wavlm"),vdt.forEach(t),lQo=r(o7e," \u2014 "),mV=n(o7e,"A",{href:!0});var Fdt=s(mV);iQo=r(Fdt,"WavLMForSequenceClassification"),Fdt.forEach(t),dQo=r(o7e," (WavLM model)"),o7e.forEach(t),bo.forEach(t),cQo=i(da),Qv=n(da,"P",{});var r7e=s(Qv);fQo=r(r7e,"The model is set in evaluation mode by default using "),dhe=n(r7e,"CODE",{});var Tdt=s(dhe);mQo=r(Tdt,"model.eval()"),Tdt.forEach(t),gQo=r(r7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),che=n(r7e,"CODE",{});var Mdt=s(che);hQo=r(Mdt,"model.train()"),Mdt.forEach(t),r7e.forEach(t),pQo=i(da),T(Wv.$$.fragment,da),da.forEach(t),Js.forEach(t),dPe=i(f),ad=n(f,"H2",{class:!0});var fqe=s(ad);Hv=n(fqe,"A",{id:!0,class:!0,href:!0});var Edt=s(Hv);fhe=n(Edt,"SPAN",{});var Cdt=s(fhe);T(p0.$$.fragment,Cdt),Cdt.forEach(t),Edt.forEach(t),uQo=i(fqe),mhe=n(fqe,"SPAN",{});var wdt=s(mhe);_Qo=r(wdt,"AutoModelForAudioFrameClassification"),wdt.forEach(t),fqe.forEach(t),cPe=i(f),Oo=n(f,"DIV",{class:!0});var Ys=s(Oo);T(u0.$$.fragment,Ys),bQo=i(Ys),nd=n(Ys,"P",{});var HY=s(nd);vQo=r(HY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),gV=n(HY,"A",{href:!0});var Adt=s(gV);FQo=r(Adt,"from_pretrained()"),Adt.forEach(t),TQo=r(HY," class method or the "),hV=n(HY,"A",{href:!0});var ydt=s(hV);MQo=r(ydt,"from_config()"),ydt.forEach(t),EQo=r(HY,` class
method.`),HY.forEach(t),CQo=i(Ys),_0=n(Ys,"P",{});var mqe=s(_0);wQo=r(mqe,"This class cannot be instantiated directly using "),ghe=n(mqe,"CODE",{});var Ldt=s(ghe);AQo=r(Ldt,"__init__()"),Ldt.forEach(t),yQo=r(mqe," (throws an error)."),mqe.forEach(t),LQo=i(Ys),ht=n(Ys,"DIV",{class:!0});var n3=s(ht);T(b0.$$.fragment,n3),xQo=i(n3),hhe=n(n3,"P",{});var xdt=s(hhe);$Qo=r(xdt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),xdt.forEach(t),kQo=i(n3),sd=n(n3,"P",{});var UY=s(sd);SQo=r(UY,`Note:
Loading a model from its configuration file does `),phe=n(UY,"STRONG",{});var $dt=s(phe);RQo=r($dt,"not"),$dt.forEach(t),BQo=r(UY,` load the model weights. It only affects the
model\u2019s configuration. Use `),pV=n(UY,"A",{href:!0});var kdt=s(pV);PQo=r(kdt,"from_pretrained()"),kdt.forEach(t),IQo=r(UY," to load the model weights."),UY.forEach(t),qQo=i(n3),T(Uv.$$.fragment,n3),n3.forEach(t),NQo=i(Ys),io=n(Ys,"DIV",{class:!0});var ca=s(io);T(v0.$$.fragment,ca),jQo=i(ca),uhe=n(ca,"P",{});var Sdt=s(uhe);DQo=r(Sdt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Sdt.forEach(t),GQo=i(ca),qa=n(ca,"P",{});var s3=s(qa);OQo=r(s3,"The model class to instantiate is selected based on the "),_he=n(s3,"CODE",{});var Rdt=s(_he);VQo=r(Rdt,"model_type"),Rdt.forEach(t),XQo=r(s3,` property of the config object (either
passed as an argument or loaded from `),bhe=n(s3,"CODE",{});var Bdt=s(bhe);zQo=r(Bdt,"pretrained_model_name_or_path"),Bdt.forEach(t),QQo=r(s3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vhe=n(s3,"CODE",{});var Pdt=s(vhe);WQo=r(Pdt,"pretrained_model_name_or_path"),Pdt.forEach(t),HQo=r(s3,":"),s3.forEach(t),UQo=i(ca),Na=n(ca,"UL",{});var l3=s(Na);Jv=n(l3,"LI",{});var t7e=s(Jv);Fhe=n(t7e,"STRONG",{});var Idt=s(Fhe);JQo=r(Idt,"data2vec-audio"),Idt.forEach(t),YQo=r(t7e," \u2014 "),uV=n(t7e,"A",{href:!0});var qdt=s(uV);KQo=r(qdt,"Data2VecAudioForAudioFrameClassification"),qdt.forEach(t),ZQo=r(t7e," (Data2VecAudio model)"),t7e.forEach(t),eWo=i(l3),Yv=n(l3,"LI",{});var a7e=s(Yv);The=n(a7e,"STRONG",{});var Ndt=s(The);oWo=r(Ndt,"unispeech-sat"),Ndt.forEach(t),rWo=r(a7e," \u2014 "),_V=n(a7e,"A",{href:!0});var jdt=s(_V);tWo=r(jdt,"UniSpeechSatForAudioFrameClassification"),jdt.forEach(t),aWo=r(a7e," (UniSpeechSat model)"),a7e.forEach(t),nWo=i(l3),Kv=n(l3,"LI",{});var n7e=s(Kv);Mhe=n(n7e,"STRONG",{});var Ddt=s(Mhe);sWo=r(Ddt,"wav2vec2"),Ddt.forEach(t),lWo=r(n7e," \u2014 "),bV=n(n7e,"A",{href:!0});var Gdt=s(bV);iWo=r(Gdt,"Wav2Vec2ForAudioFrameClassification"),Gdt.forEach(t),dWo=r(n7e," (Wav2Vec2 model)"),n7e.forEach(t),cWo=i(l3),Zv=n(l3,"LI",{});var s7e=s(Zv);Ehe=n(s7e,"STRONG",{});var Odt=s(Ehe);fWo=r(Odt,"wavlm"),Odt.forEach(t),mWo=r(s7e," \u2014 "),vV=n(s7e,"A",{href:!0});var Vdt=s(vV);gWo=r(Vdt,"WavLMForAudioFrameClassification"),Vdt.forEach(t),hWo=r(s7e," (WavLM model)"),s7e.forEach(t),l3.forEach(t),pWo=i(ca),eF=n(ca,"P",{});var l7e=s(eF);uWo=r(l7e,"The model is set in evaluation mode by default using "),Che=n(l7e,"CODE",{});var Xdt=s(Che);_Wo=r(Xdt,"model.eval()"),Xdt.forEach(t),bWo=r(l7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),whe=n(l7e,"CODE",{});var zdt=s(whe);vWo=r(zdt,"model.train()"),zdt.forEach(t),l7e.forEach(t),FWo=i(ca),T(oF.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),fPe=i(f),ld=n(f,"H2",{class:!0});var gqe=s(ld);rF=n(gqe,"A",{id:!0,class:!0,href:!0});var Qdt=s(rF);Ahe=n(Qdt,"SPAN",{});var Wdt=s(Ahe);T(F0.$$.fragment,Wdt),Wdt.forEach(t),Qdt.forEach(t),TWo=i(gqe),yhe=n(gqe,"SPAN",{});var Hdt=s(yhe);MWo=r(Hdt,"AutoModelForCTC"),Hdt.forEach(t),gqe.forEach(t),mPe=i(f),Vo=n(f,"DIV",{class:!0});var Ks=s(Vo);T(T0.$$.fragment,Ks),EWo=i(Ks),id=n(Ks,"P",{});var JY=s(id);CWo=r(JY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),FV=n(JY,"A",{href:!0});var Udt=s(FV);wWo=r(Udt,"from_pretrained()"),Udt.forEach(t),AWo=r(JY," class method or the "),TV=n(JY,"A",{href:!0});var Jdt=s(TV);yWo=r(Jdt,"from_config()"),Jdt.forEach(t),LWo=r(JY,` class
method.`),JY.forEach(t),xWo=i(Ks),M0=n(Ks,"P",{});var hqe=s(M0);$Wo=r(hqe,"This class cannot be instantiated directly using "),Lhe=n(hqe,"CODE",{});var Ydt=s(Lhe);kWo=r(Ydt,"__init__()"),Ydt.forEach(t),SWo=r(hqe," (throws an error)."),hqe.forEach(t),RWo=i(Ks),pt=n(Ks,"DIV",{class:!0});var i3=s(pt);T(E0.$$.fragment,i3),BWo=i(i3),xhe=n(i3,"P",{});var Kdt=s(xhe);PWo=r(Kdt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Kdt.forEach(t),IWo=i(i3),dd=n(i3,"P",{});var YY=s(dd);qWo=r(YY,`Note:
Loading a model from its configuration file does `),$he=n(YY,"STRONG",{});var Zdt=s($he);NWo=r(Zdt,"not"),Zdt.forEach(t),jWo=r(YY,` load the model weights. It only affects the
model\u2019s configuration. Use `),MV=n(YY,"A",{href:!0});var ect=s(MV);DWo=r(ect,"from_pretrained()"),ect.forEach(t),GWo=r(YY," to load the model weights."),YY.forEach(t),OWo=i(i3),T(tF.$$.fragment,i3),i3.forEach(t),VWo=i(Ks),co=n(Ks,"DIV",{class:!0});var fa=s(co);T(C0.$$.fragment,fa),XWo=i(fa),khe=n(fa,"P",{});var oct=s(khe);zWo=r(oct,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),oct.forEach(t),QWo=i(fa),ja=n(fa,"P",{});var d3=s(ja);WWo=r(d3,"The model class to instantiate is selected based on the "),She=n(d3,"CODE",{});var rct=s(She);HWo=r(rct,"model_type"),rct.forEach(t),UWo=r(d3,` property of the config object (either
passed as an argument or loaded from `),Rhe=n(d3,"CODE",{});var tct=s(Rhe);JWo=r(tct,"pretrained_model_name_or_path"),tct.forEach(t),YWo=r(d3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bhe=n(d3,"CODE",{});var act=s(Bhe);KWo=r(act,"pretrained_model_name_or_path"),act.forEach(t),ZWo=r(d3,":"),d3.forEach(t),eHo=i(fa),je=n(fa,"UL",{});var vo=s(je);aF=n(vo,"LI",{});var i7e=s(aF);Phe=n(i7e,"STRONG",{});var nct=s(Phe);oHo=r(nct,"data2vec-audio"),nct.forEach(t),rHo=r(i7e," \u2014 "),EV=n(i7e,"A",{href:!0});var sct=s(EV);tHo=r(sct,"Data2VecAudioForCTC"),sct.forEach(t),aHo=r(i7e," (Data2VecAudio model)"),i7e.forEach(t),nHo=i(vo),nF=n(vo,"LI",{});var d7e=s(nF);Ihe=n(d7e,"STRONG",{});var lct=s(Ihe);sHo=r(lct,"hubert"),lct.forEach(t),lHo=r(d7e," \u2014 "),CV=n(d7e,"A",{href:!0});var ict=s(CV);iHo=r(ict,"HubertForCTC"),ict.forEach(t),dHo=r(d7e," (Hubert model)"),d7e.forEach(t),cHo=i(vo),sF=n(vo,"LI",{});var c7e=s(sF);qhe=n(c7e,"STRONG",{});var dct=s(qhe);fHo=r(dct,"sew"),dct.forEach(t),mHo=r(c7e," \u2014 "),wV=n(c7e,"A",{href:!0});var cct=s(wV);gHo=r(cct,"SEWForCTC"),cct.forEach(t),hHo=r(c7e," (SEW model)"),c7e.forEach(t),pHo=i(vo),lF=n(vo,"LI",{});var f7e=s(lF);Nhe=n(f7e,"STRONG",{});var fct=s(Nhe);uHo=r(fct,"sew-d"),fct.forEach(t),_Ho=r(f7e," \u2014 "),AV=n(f7e,"A",{href:!0});var mct=s(AV);bHo=r(mct,"SEWDForCTC"),mct.forEach(t),vHo=r(f7e," (SEW-D model)"),f7e.forEach(t),FHo=i(vo),iF=n(vo,"LI",{});var m7e=s(iF);jhe=n(m7e,"STRONG",{});var gct=s(jhe);THo=r(gct,"unispeech"),gct.forEach(t),MHo=r(m7e," \u2014 "),yV=n(m7e,"A",{href:!0});var hct=s(yV);EHo=r(hct,"UniSpeechForCTC"),hct.forEach(t),CHo=r(m7e," (UniSpeech model)"),m7e.forEach(t),wHo=i(vo),dF=n(vo,"LI",{});var g7e=s(dF);Dhe=n(g7e,"STRONG",{});var pct=s(Dhe);AHo=r(pct,"unispeech-sat"),pct.forEach(t),yHo=r(g7e," \u2014 "),LV=n(g7e,"A",{href:!0});var uct=s(LV);LHo=r(uct,"UniSpeechSatForCTC"),uct.forEach(t),xHo=r(g7e," (UniSpeechSat model)"),g7e.forEach(t),$Ho=i(vo),cF=n(vo,"LI",{});var h7e=s(cF);Ghe=n(h7e,"STRONG",{});var _ct=s(Ghe);kHo=r(_ct,"wav2vec2"),_ct.forEach(t),SHo=r(h7e," \u2014 "),xV=n(h7e,"A",{href:!0});var bct=s(xV);RHo=r(bct,"Wav2Vec2ForCTC"),bct.forEach(t),BHo=r(h7e," (Wav2Vec2 model)"),h7e.forEach(t),PHo=i(vo),fF=n(vo,"LI",{});var p7e=s(fF);Ohe=n(p7e,"STRONG",{});var vct=s(Ohe);IHo=r(vct,"wavlm"),vct.forEach(t),qHo=r(p7e," \u2014 "),$V=n(p7e,"A",{href:!0});var Fct=s($V);NHo=r(Fct,"WavLMForCTC"),Fct.forEach(t),jHo=r(p7e," (WavLM model)"),p7e.forEach(t),vo.forEach(t),DHo=i(fa),mF=n(fa,"P",{});var u7e=s(mF);GHo=r(u7e,"The model is set in evaluation mode by default using "),Vhe=n(u7e,"CODE",{});var Tct=s(Vhe);OHo=r(Tct,"model.eval()"),Tct.forEach(t),VHo=r(u7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xhe=n(u7e,"CODE",{});var Mct=s(Xhe);XHo=r(Mct,"model.train()"),Mct.forEach(t),u7e.forEach(t),zHo=i(fa),T(gF.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),gPe=i(f),cd=n(f,"H2",{class:!0});var pqe=s(cd);hF=n(pqe,"A",{id:!0,class:!0,href:!0});var Ect=s(hF);zhe=n(Ect,"SPAN",{});var Cct=s(zhe);T(w0.$$.fragment,Cct),Cct.forEach(t),Ect.forEach(t),QHo=i(pqe),Qhe=n(pqe,"SPAN",{});var wct=s(Qhe);WHo=r(wct,"AutoModelForSpeechSeq2Seq"),wct.forEach(t),pqe.forEach(t),hPe=i(f),Xo=n(f,"DIV",{class:!0});var Zs=s(Xo);T(A0.$$.fragment,Zs),HHo=i(Zs),fd=n(Zs,"P",{});var KY=s(fd);UHo=r(KY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),kV=n(KY,"A",{href:!0});var Act=s(kV);JHo=r(Act,"from_pretrained()"),Act.forEach(t),YHo=r(KY," class method or the "),SV=n(KY,"A",{href:!0});var yct=s(SV);KHo=r(yct,"from_config()"),yct.forEach(t),ZHo=r(KY,` class
method.`),KY.forEach(t),eUo=i(Zs),y0=n(Zs,"P",{});var uqe=s(y0);oUo=r(uqe,"This class cannot be instantiated directly using "),Whe=n(uqe,"CODE",{});var Lct=s(Whe);rUo=r(Lct,"__init__()"),Lct.forEach(t),tUo=r(uqe," (throws an error)."),uqe.forEach(t),aUo=i(Zs),ut=n(Zs,"DIV",{class:!0});var c3=s(ut);T(L0.$$.fragment,c3),nUo=i(c3),Hhe=n(c3,"P",{});var xct=s(Hhe);sUo=r(xct,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),xct.forEach(t),lUo=i(c3),md=n(c3,"P",{});var ZY=s(md);iUo=r(ZY,`Note:
Loading a model from its configuration file does `),Uhe=n(ZY,"STRONG",{});var $ct=s(Uhe);dUo=r($ct,"not"),$ct.forEach(t),cUo=r(ZY,` load the model weights. It only affects the
model\u2019s configuration. Use `),RV=n(ZY,"A",{href:!0});var kct=s(RV);fUo=r(kct,"from_pretrained()"),kct.forEach(t),mUo=r(ZY," to load the model weights."),ZY.forEach(t),gUo=i(c3),T(pF.$$.fragment,c3),c3.forEach(t),hUo=i(Zs),fo=n(Zs,"DIV",{class:!0});var ma=s(fo);T(x0.$$.fragment,ma),pUo=i(ma),Jhe=n(ma,"P",{});var Sct=s(Jhe);uUo=r(Sct,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Sct.forEach(t),_Uo=i(ma),Da=n(ma,"P",{});var f3=s(Da);bUo=r(f3,"The model class to instantiate is selected based on the "),Yhe=n(f3,"CODE",{});var Rct=s(Yhe);vUo=r(Rct,"model_type"),Rct.forEach(t),FUo=r(f3,` property of the config object (either
passed as an argument or loaded from `),Khe=n(f3,"CODE",{});var Bct=s(Khe);TUo=r(Bct,"pretrained_model_name_or_path"),Bct.forEach(t),MUo=r(f3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zhe=n(f3,"CODE",{});var Pct=s(Zhe);EUo=r(Pct,"pretrained_model_name_or_path"),Pct.forEach(t),CUo=r(f3,":"),f3.forEach(t),wUo=i(ma),$0=n(ma,"UL",{});var _qe=s($0);uF=n(_qe,"LI",{});var _7e=s(uF);epe=n(_7e,"STRONG",{});var Ict=s(epe);AUo=r(Ict,"speech-encoder-decoder"),Ict.forEach(t),yUo=r(_7e," \u2014 "),BV=n(_7e,"A",{href:!0});var qct=s(BV);LUo=r(qct,"SpeechEncoderDecoderModel"),qct.forEach(t),xUo=r(_7e," (Speech Encoder decoder model)"),_7e.forEach(t),$Uo=i(_qe),_F=n(_qe,"LI",{});var b7e=s(_F);ope=n(b7e,"STRONG",{});var Nct=s(ope);kUo=r(Nct,"speech_to_text"),Nct.forEach(t),SUo=r(b7e," \u2014 "),PV=n(b7e,"A",{href:!0});var jct=s(PV);RUo=r(jct,"Speech2TextForConditionalGeneration"),jct.forEach(t),BUo=r(b7e," (Speech2Text model)"),b7e.forEach(t),_qe.forEach(t),PUo=i(ma),bF=n(ma,"P",{});var v7e=s(bF);IUo=r(v7e,"The model is set in evaluation mode by default using "),rpe=n(v7e,"CODE",{});var Dct=s(rpe);qUo=r(Dct,"model.eval()"),Dct.forEach(t),NUo=r(v7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tpe=n(v7e,"CODE",{});var Gct=s(tpe);jUo=r(Gct,"model.train()"),Gct.forEach(t),v7e.forEach(t),DUo=i(ma),T(vF.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),pPe=i(f),gd=n(f,"H2",{class:!0});var bqe=s(gd);FF=n(bqe,"A",{id:!0,class:!0,href:!0});var Oct=s(FF);ape=n(Oct,"SPAN",{});var Vct=s(ape);T(k0.$$.fragment,Vct),Vct.forEach(t),Oct.forEach(t),GUo=i(bqe),npe=n(bqe,"SPAN",{});var Xct=s(npe);OUo=r(Xct,"AutoModelForAudioXVector"),Xct.forEach(t),bqe.forEach(t),uPe=i(f),zo=n(f,"DIV",{class:!0});var el=s(zo);T(S0.$$.fragment,el),VUo=i(el),hd=n(el,"P",{});var eK=s(hd);XUo=r(eK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),IV=n(eK,"A",{href:!0});var zct=s(IV);zUo=r(zct,"from_pretrained()"),zct.forEach(t),QUo=r(eK," class method or the "),qV=n(eK,"A",{href:!0});var Qct=s(qV);WUo=r(Qct,"from_config()"),Qct.forEach(t),HUo=r(eK,` class
method.`),eK.forEach(t),UUo=i(el),R0=n(el,"P",{});var vqe=s(R0);JUo=r(vqe,"This class cannot be instantiated directly using "),spe=n(vqe,"CODE",{});var Wct=s(spe);YUo=r(Wct,"__init__()"),Wct.forEach(t),KUo=r(vqe," (throws an error)."),vqe.forEach(t),ZUo=i(el),_t=n(el,"DIV",{class:!0});var m3=s(_t);T(B0.$$.fragment,m3),eJo=i(m3),lpe=n(m3,"P",{});var Hct=s(lpe);oJo=r(Hct,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Hct.forEach(t),rJo=i(m3),pd=n(m3,"P",{});var oK=s(pd);tJo=r(oK,`Note:
Loading a model from its configuration file does `),ipe=n(oK,"STRONG",{});var Uct=s(ipe);aJo=r(Uct,"not"),Uct.forEach(t),nJo=r(oK,` load the model weights. It only affects the
model\u2019s configuration. Use `),NV=n(oK,"A",{href:!0});var Jct=s(NV);sJo=r(Jct,"from_pretrained()"),Jct.forEach(t),lJo=r(oK," to load the model weights."),oK.forEach(t),iJo=i(m3),T(TF.$$.fragment,m3),m3.forEach(t),dJo=i(el),mo=n(el,"DIV",{class:!0});var ga=s(mo);T(P0.$$.fragment,ga),cJo=i(ga),dpe=n(ga,"P",{});var Yct=s(dpe);fJo=r(Yct,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Yct.forEach(t),mJo=i(ga),Ga=n(ga,"P",{});var g3=s(Ga);gJo=r(g3,"The model class to instantiate is selected based on the "),cpe=n(g3,"CODE",{});var Kct=s(cpe);hJo=r(Kct,"model_type"),Kct.forEach(t),pJo=r(g3,` property of the config object (either
passed as an argument or loaded from `),fpe=n(g3,"CODE",{});var Zct=s(fpe);uJo=r(Zct,"pretrained_model_name_or_path"),Zct.forEach(t),_Jo=r(g3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mpe=n(g3,"CODE",{});var eft=s(mpe);bJo=r(eft,"pretrained_model_name_or_path"),eft.forEach(t),vJo=r(g3,":"),g3.forEach(t),FJo=i(ga),Oa=n(ga,"UL",{});var h3=s(Oa);MF=n(h3,"LI",{});var F7e=s(MF);gpe=n(F7e,"STRONG",{});var oft=s(gpe);TJo=r(oft,"data2vec-audio"),oft.forEach(t),MJo=r(F7e," \u2014 "),jV=n(F7e,"A",{href:!0});var rft=s(jV);EJo=r(rft,"Data2VecAudioForXVector"),rft.forEach(t),CJo=r(F7e," (Data2VecAudio model)"),F7e.forEach(t),wJo=i(h3),EF=n(h3,"LI",{});var T7e=s(EF);hpe=n(T7e,"STRONG",{});var tft=s(hpe);AJo=r(tft,"unispeech-sat"),tft.forEach(t),yJo=r(T7e," \u2014 "),DV=n(T7e,"A",{href:!0});var aft=s(DV);LJo=r(aft,"UniSpeechSatForXVector"),aft.forEach(t),xJo=r(T7e," (UniSpeechSat model)"),T7e.forEach(t),$Jo=i(h3),CF=n(h3,"LI",{});var M7e=s(CF);ppe=n(M7e,"STRONG",{});var nft=s(ppe);kJo=r(nft,"wav2vec2"),nft.forEach(t),SJo=r(M7e," \u2014 "),GV=n(M7e,"A",{href:!0});var sft=s(GV);RJo=r(sft,"Wav2Vec2ForXVector"),sft.forEach(t),BJo=r(M7e," (Wav2Vec2 model)"),M7e.forEach(t),PJo=i(h3),wF=n(h3,"LI",{});var E7e=s(wF);upe=n(E7e,"STRONG",{});var lft=s(upe);IJo=r(lft,"wavlm"),lft.forEach(t),qJo=r(E7e," \u2014 "),OV=n(E7e,"A",{href:!0});var ift=s(OV);NJo=r(ift,"WavLMForXVector"),ift.forEach(t),jJo=r(E7e," (WavLM model)"),E7e.forEach(t),h3.forEach(t),DJo=i(ga),AF=n(ga,"P",{});var C7e=s(AF);GJo=r(C7e,"The model is set in evaluation mode by default using "),_pe=n(C7e,"CODE",{});var dft=s(_pe);OJo=r(dft,"model.eval()"),dft.forEach(t),VJo=r(C7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bpe=n(C7e,"CODE",{});var cft=s(bpe);XJo=r(cft,"model.train()"),cft.forEach(t),C7e.forEach(t),zJo=i(ga),T(yF.$$.fragment,ga),ga.forEach(t),el.forEach(t),_Pe=i(f),ud=n(f,"H2",{class:!0});var Fqe=s(ud);LF=n(Fqe,"A",{id:!0,class:!0,href:!0});var fft=s(LF);vpe=n(fft,"SPAN",{});var mft=s(vpe);T(I0.$$.fragment,mft),mft.forEach(t),fft.forEach(t),QJo=i(Fqe),Fpe=n(Fqe,"SPAN",{});var gft=s(Fpe);WJo=r(gft,"AutoModelForMaskedImageModeling"),gft.forEach(t),Fqe.forEach(t),bPe=i(f),Qo=n(f,"DIV",{class:!0});var ol=s(Qo);T(q0.$$.fragment,ol),HJo=i(ol),_d=n(ol,"P",{});var rK=s(_d);UJo=r(rK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),VV=n(rK,"A",{href:!0});var hft=s(VV);JJo=r(hft,"from_pretrained()"),hft.forEach(t),YJo=r(rK," class method or the "),XV=n(rK,"A",{href:!0});var pft=s(XV);KJo=r(pft,"from_config()"),pft.forEach(t),ZJo=r(rK,` class
method.`),rK.forEach(t),eYo=i(ol),N0=n(ol,"P",{});var Tqe=s(N0);oYo=r(Tqe,"This class cannot be instantiated directly using "),Tpe=n(Tqe,"CODE",{});var uft=s(Tpe);rYo=r(uft,"__init__()"),uft.forEach(t),tYo=r(Tqe," (throws an error)."),Tqe.forEach(t),aYo=i(ol),bt=n(ol,"DIV",{class:!0});var p3=s(bt);T(j0.$$.fragment,p3),nYo=i(p3),Mpe=n(p3,"P",{});var _ft=s(Mpe);sYo=r(_ft,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),_ft.forEach(t),lYo=i(p3),bd=n(p3,"P",{});var tK=s(bd);iYo=r(tK,`Note:
Loading a model from its configuration file does `),Epe=n(tK,"STRONG",{});var bft=s(Epe);dYo=r(bft,"not"),bft.forEach(t),cYo=r(tK,` load the model weights. It only affects the
model\u2019s configuration. Use `),zV=n(tK,"A",{href:!0});var vft=s(zV);fYo=r(vft,"from_pretrained()"),vft.forEach(t),mYo=r(tK," to load the model weights."),tK.forEach(t),gYo=i(p3),T(xF.$$.fragment,p3),p3.forEach(t),hYo=i(ol),go=n(ol,"DIV",{class:!0});var ha=s(go);T(D0.$$.fragment,ha),pYo=i(ha),Cpe=n(ha,"P",{});var Fft=s(Cpe);uYo=r(Fft,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Fft.forEach(t),_Yo=i(ha),Va=n(ha,"P",{});var u3=s(Va);bYo=r(u3,"The model class to instantiate is selected based on the "),wpe=n(u3,"CODE",{});var Tft=s(wpe);vYo=r(Tft,"model_type"),Tft.forEach(t),FYo=r(u3,` property of the config object (either
passed as an argument or loaded from `),Ape=n(u3,"CODE",{});var Mft=s(Ape);TYo=r(Mft,"pretrained_model_name_or_path"),Mft.forEach(t),MYo=r(u3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ype=n(u3,"CODE",{});var Eft=s(ype);EYo=r(Eft,"pretrained_model_name_or_path"),Eft.forEach(t),CYo=r(u3,":"),u3.forEach(t),wYo=i(ha),vd=n(ha,"UL",{});var aK=s(vd);$F=n(aK,"LI",{});var w7e=s($F);Lpe=n(w7e,"STRONG",{});var Cft=s(Lpe);AYo=r(Cft,"deit"),Cft.forEach(t),yYo=r(w7e," \u2014 "),QV=n(w7e,"A",{href:!0});var wft=s(QV);LYo=r(wft,"DeiTForMaskedImageModeling"),wft.forEach(t),xYo=r(w7e," (DeiT model)"),w7e.forEach(t),$Yo=i(aK),kF=n(aK,"LI",{});var A7e=s(kF);xpe=n(A7e,"STRONG",{});var Aft=s(xpe);kYo=r(Aft,"swin"),Aft.forEach(t),SYo=r(A7e," \u2014 "),WV=n(A7e,"A",{href:!0});var yft=s(WV);RYo=r(yft,"SwinForMaskedImageModeling"),yft.forEach(t),BYo=r(A7e," (Swin model)"),A7e.forEach(t),PYo=i(aK),SF=n(aK,"LI",{});var y7e=s(SF);$pe=n(y7e,"STRONG",{});var Lft=s($pe);IYo=r(Lft,"vit"),Lft.forEach(t),qYo=r(y7e," \u2014 "),HV=n(y7e,"A",{href:!0});var xft=s(HV);NYo=r(xft,"ViTForMaskedImageModeling"),xft.forEach(t),jYo=r(y7e," (ViT model)"),y7e.forEach(t),aK.forEach(t),DYo=i(ha),RF=n(ha,"P",{});var L7e=s(RF);GYo=r(L7e,"The model is set in evaluation mode by default using "),kpe=n(L7e,"CODE",{});var $ft=s(kpe);OYo=r($ft,"model.eval()"),$ft.forEach(t),VYo=r(L7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Spe=n(L7e,"CODE",{});var kft=s(Spe);XYo=r(kft,"model.train()"),kft.forEach(t),L7e.forEach(t),zYo=i(ha),T(BF.$$.fragment,ha),ha.forEach(t),ol.forEach(t),vPe=i(f),Fd=n(f,"H2",{class:!0});var Mqe=s(Fd);PF=n(Mqe,"A",{id:!0,class:!0,href:!0});var Sft=s(PF);Rpe=n(Sft,"SPAN",{});var Rft=s(Rpe);T(G0.$$.fragment,Rft),Rft.forEach(t),Sft.forEach(t),QYo=i(Mqe),Bpe=n(Mqe,"SPAN",{});var Bft=s(Bpe);WYo=r(Bft,"AutoModelForObjectDetection"),Bft.forEach(t),Mqe.forEach(t),FPe=i(f),Wo=n(f,"DIV",{class:!0});var rl=s(Wo);T(O0.$$.fragment,rl),HYo=i(rl),Td=n(rl,"P",{});var nK=s(Td);UYo=r(nK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),UV=n(nK,"A",{href:!0});var Pft=s(UV);JYo=r(Pft,"from_pretrained()"),Pft.forEach(t),YYo=r(nK," class method or the "),JV=n(nK,"A",{href:!0});var Ift=s(JV);KYo=r(Ift,"from_config()"),Ift.forEach(t),ZYo=r(nK,` class
method.`),nK.forEach(t),eKo=i(rl),V0=n(rl,"P",{});var Eqe=s(V0);oKo=r(Eqe,"This class cannot be instantiated directly using "),Ppe=n(Eqe,"CODE",{});var qft=s(Ppe);rKo=r(qft,"__init__()"),qft.forEach(t),tKo=r(Eqe," (throws an error)."),Eqe.forEach(t),aKo=i(rl),vt=n(rl,"DIV",{class:!0});var _3=s(vt);T(X0.$$.fragment,_3),nKo=i(_3),Ipe=n(_3,"P",{});var Nft=s(Ipe);sKo=r(Nft,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Nft.forEach(t),lKo=i(_3),Md=n(_3,"P",{});var sK=s(Md);iKo=r(sK,`Note:
Loading a model from its configuration file does `),qpe=n(sK,"STRONG",{});var jft=s(qpe);dKo=r(jft,"not"),jft.forEach(t),cKo=r(sK,` load the model weights. It only affects the
model\u2019s configuration. Use `),YV=n(sK,"A",{href:!0});var Dft=s(YV);fKo=r(Dft,"from_pretrained()"),Dft.forEach(t),mKo=r(sK," to load the model weights."),sK.forEach(t),gKo=i(_3),T(IF.$$.fragment,_3),_3.forEach(t),hKo=i(rl),ho=n(rl,"DIV",{class:!0});var pa=s(ho);T(z0.$$.fragment,pa),pKo=i(pa),Npe=n(pa,"P",{});var Gft=s(Npe);uKo=r(Gft,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Gft.forEach(t),_Ko=i(pa),Xa=n(pa,"P",{});var b3=s(Xa);bKo=r(b3,"The model class to instantiate is selected based on the "),jpe=n(b3,"CODE",{});var Oft=s(jpe);vKo=r(Oft,"model_type"),Oft.forEach(t),FKo=r(b3,` property of the config object (either
passed as an argument or loaded from `),Dpe=n(b3,"CODE",{});var Vft=s(Dpe);TKo=r(Vft,"pretrained_model_name_or_path"),Vft.forEach(t),MKo=r(b3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gpe=n(b3,"CODE",{});var Xft=s(Gpe);EKo=r(Xft,"pretrained_model_name_or_path"),Xft.forEach(t),CKo=r(b3,":"),b3.forEach(t),wKo=i(pa),Q0=n(pa,"UL",{});var Cqe=s(Q0);qF=n(Cqe,"LI",{});var x7e=s(qF);Ope=n(x7e,"STRONG",{});var zft=s(Ope);AKo=r(zft,"detr"),zft.forEach(t),yKo=r(x7e," \u2014 "),KV=n(x7e,"A",{href:!0});var Qft=s(KV);LKo=r(Qft,"DetrForObjectDetection"),Qft.forEach(t),xKo=r(x7e," (DETR model)"),x7e.forEach(t),$Ko=i(Cqe),NF=n(Cqe,"LI",{});var $7e=s(NF);Vpe=n($7e,"STRONG",{});var Wft=s(Vpe);kKo=r(Wft,"yolos"),Wft.forEach(t),SKo=r($7e," \u2014 "),ZV=n($7e,"A",{href:!0});var Hft=s(ZV);RKo=r(Hft,"YolosForObjectDetection"),Hft.forEach(t),BKo=r($7e," (YOLOS model)"),$7e.forEach(t),Cqe.forEach(t),PKo=i(pa),jF=n(pa,"P",{});var k7e=s(jF);IKo=r(k7e,"The model is set in evaluation mode by default using "),Xpe=n(k7e,"CODE",{});var Uft=s(Xpe);qKo=r(Uft,"model.eval()"),Uft.forEach(t),NKo=r(k7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zpe=n(k7e,"CODE",{});var Jft=s(zpe);jKo=r(Jft,"model.train()"),Jft.forEach(t),k7e.forEach(t),DKo=i(pa),T(DF.$$.fragment,pa),pa.forEach(t),rl.forEach(t),TPe=i(f),Ed=n(f,"H2",{class:!0});var wqe=s(Ed);GF=n(wqe,"A",{id:!0,class:!0,href:!0});var Yft=s(GF);Qpe=n(Yft,"SPAN",{});var Kft=s(Qpe);T(W0.$$.fragment,Kft),Kft.forEach(t),Yft.forEach(t),GKo=i(wqe),Wpe=n(wqe,"SPAN",{});var Zft=s(Wpe);OKo=r(Zft,"AutoModelForImageSegmentation"),Zft.forEach(t),wqe.forEach(t),MPe=i(f),Ho=n(f,"DIV",{class:!0});var tl=s(Ho);T(H0.$$.fragment,tl),VKo=i(tl),Cd=n(tl,"P",{});var lK=s(Cd);XKo=r(lK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),eX=n(lK,"A",{href:!0});var emt=s(eX);zKo=r(emt,"from_pretrained()"),emt.forEach(t),QKo=r(lK," class method or the "),oX=n(lK,"A",{href:!0});var omt=s(oX);WKo=r(omt,"from_config()"),omt.forEach(t),HKo=r(lK,` class
method.`),lK.forEach(t),UKo=i(tl),U0=n(tl,"P",{});var Aqe=s(U0);JKo=r(Aqe,"This class cannot be instantiated directly using "),Hpe=n(Aqe,"CODE",{});var rmt=s(Hpe);YKo=r(rmt,"__init__()"),rmt.forEach(t),KKo=r(Aqe," (throws an error)."),Aqe.forEach(t),ZKo=i(tl),Ft=n(tl,"DIV",{class:!0});var v3=s(Ft);T(J0.$$.fragment,v3),eZo=i(v3),Upe=n(v3,"P",{});var tmt=s(Upe);oZo=r(tmt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),tmt.forEach(t),rZo=i(v3),wd=n(v3,"P",{});var iK=s(wd);tZo=r(iK,`Note:
Loading a model from its configuration file does `),Jpe=n(iK,"STRONG",{});var amt=s(Jpe);aZo=r(amt,"not"),amt.forEach(t),nZo=r(iK,` load the model weights. It only affects the
model\u2019s configuration. Use `),rX=n(iK,"A",{href:!0});var nmt=s(rX);sZo=r(nmt,"from_pretrained()"),nmt.forEach(t),lZo=r(iK," to load the model weights."),iK.forEach(t),iZo=i(v3),T(OF.$$.fragment,v3),v3.forEach(t),dZo=i(tl),po=n(tl,"DIV",{class:!0});var ua=s(po);T(Y0.$$.fragment,ua),cZo=i(ua),Ype=n(ua,"P",{});var smt=s(Ype);fZo=r(smt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),smt.forEach(t),mZo=i(ua),za=n(ua,"P",{});var F3=s(za);gZo=r(F3,"The model class to instantiate is selected based on the "),Kpe=n(F3,"CODE",{});var lmt=s(Kpe);hZo=r(lmt,"model_type"),lmt.forEach(t),pZo=r(F3,` property of the config object (either
passed as an argument or loaded from `),Zpe=n(F3,"CODE",{});var imt=s(Zpe);uZo=r(imt,"pretrained_model_name_or_path"),imt.forEach(t),_Zo=r(F3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eue=n(F3,"CODE",{});var dmt=s(eue);bZo=r(dmt,"pretrained_model_name_or_path"),dmt.forEach(t),vZo=r(F3,":"),F3.forEach(t),FZo=i(ua),oue=n(ua,"UL",{});var cmt=s(oue);VF=n(cmt,"LI",{});var S7e=s(VF);rue=n(S7e,"STRONG",{});var fmt=s(rue);TZo=r(fmt,"detr"),fmt.forEach(t),MZo=r(S7e," \u2014 "),tX=n(S7e,"A",{href:!0});var mmt=s(tX);EZo=r(mmt,"DetrForSegmentation"),mmt.forEach(t),CZo=r(S7e," (DETR model)"),S7e.forEach(t),cmt.forEach(t),wZo=i(ua),XF=n(ua,"P",{});var R7e=s(XF);AZo=r(R7e,"The model is set in evaluation mode by default using "),tue=n(R7e,"CODE",{});var gmt=s(tue);yZo=r(gmt,"model.eval()"),gmt.forEach(t),LZo=r(R7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aue=n(R7e,"CODE",{});var hmt=s(aue);xZo=r(hmt,"model.train()"),hmt.forEach(t),R7e.forEach(t),$Zo=i(ua),T(zF.$$.fragment,ua),ua.forEach(t),tl.forEach(t),EPe=i(f),Ad=n(f,"H2",{class:!0});var yqe=s(Ad);QF=n(yqe,"A",{id:!0,class:!0,href:!0});var pmt=s(QF);nue=n(pmt,"SPAN",{});var umt=s(nue);T(K0.$$.fragment,umt),umt.forEach(t),pmt.forEach(t),kZo=i(yqe),sue=n(yqe,"SPAN",{});var _mt=s(sue);SZo=r(_mt,"AutoModelForSemanticSegmentation"),_mt.forEach(t),yqe.forEach(t),CPe=i(f),Uo=n(f,"DIV",{class:!0});var al=s(Uo);T(Z0.$$.fragment,al),RZo=i(al),yd=n(al,"P",{});var dK=s(yd);BZo=r(dK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),aX=n(dK,"A",{href:!0});var bmt=s(aX);PZo=r(bmt,"from_pretrained()"),bmt.forEach(t),IZo=r(dK," class method or the "),nX=n(dK,"A",{href:!0});var vmt=s(nX);qZo=r(vmt,"from_config()"),vmt.forEach(t),NZo=r(dK,` class
method.`),dK.forEach(t),jZo=i(al),ey=n(al,"P",{});var Lqe=s(ey);DZo=r(Lqe,"This class cannot be instantiated directly using "),lue=n(Lqe,"CODE",{});var Fmt=s(lue);GZo=r(Fmt,"__init__()"),Fmt.forEach(t),OZo=r(Lqe," (throws an error)."),Lqe.forEach(t),VZo=i(al),Tt=n(al,"DIV",{class:!0});var T3=s(Tt);T(oy.$$.fragment,T3),XZo=i(T3),iue=n(T3,"P",{});var Tmt=s(iue);zZo=r(Tmt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Tmt.forEach(t),QZo=i(T3),Ld=n(T3,"P",{});var cK=s(Ld);WZo=r(cK,`Note:
Loading a model from its configuration file does `),due=n(cK,"STRONG",{});var Mmt=s(due);HZo=r(Mmt,"not"),Mmt.forEach(t),UZo=r(cK,` load the model weights. It only affects the
model\u2019s configuration. Use `),sX=n(cK,"A",{href:!0});var Emt=s(sX);JZo=r(Emt,"from_pretrained()"),Emt.forEach(t),YZo=r(cK," to load the model weights."),cK.forEach(t),KZo=i(T3),T(WF.$$.fragment,T3),T3.forEach(t),ZZo=i(al),uo=n(al,"DIV",{class:!0});var _a=s(uo);T(ry.$$.fragment,_a),eer=i(_a),cue=n(_a,"P",{});var Cmt=s(cue);oer=r(Cmt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Cmt.forEach(t),rer=i(_a),Qa=n(_a,"P",{});var M3=s(Qa);ter=r(M3,"The model class to instantiate is selected based on the "),fue=n(M3,"CODE",{});var wmt=s(fue);aer=r(wmt,"model_type"),wmt.forEach(t),ner=r(M3,` property of the config object (either
passed as an argument or loaded from `),mue=n(M3,"CODE",{});var Amt=s(mue);ser=r(Amt,"pretrained_model_name_or_path"),Amt.forEach(t),ler=r(M3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gue=n(M3,"CODE",{});var ymt=s(gue);ier=r(ymt,"pretrained_model_name_or_path"),ymt.forEach(t),der=r(M3,":"),M3.forEach(t),cer=i(_a),Wa=n(_a,"UL",{});var E3=s(Wa);HF=n(E3,"LI",{});var B7e=s(HF);hue=n(B7e,"STRONG",{});var Lmt=s(hue);fer=r(Lmt,"beit"),Lmt.forEach(t),mer=r(B7e," \u2014 "),lX=n(B7e,"A",{href:!0});var xmt=s(lX);ger=r(xmt,"BeitForSemanticSegmentation"),xmt.forEach(t),her=r(B7e," (BEiT model)"),B7e.forEach(t),per=i(E3),UF=n(E3,"LI",{});var P7e=s(UF);pue=n(P7e,"STRONG",{});var $mt=s(pue);uer=r($mt,"data2vec-vision"),$mt.forEach(t),_er=r(P7e," \u2014 "),iX=n(P7e,"A",{href:!0});var kmt=s(iX);ber=r(kmt,"Data2VecVisionForSemanticSegmentation"),kmt.forEach(t),ver=r(P7e," (Data2VecVision model)"),P7e.forEach(t),Fer=i(E3),JF=n(E3,"LI",{});var I7e=s(JF);uue=n(I7e,"STRONG",{});var Smt=s(uue);Ter=r(Smt,"dpt"),Smt.forEach(t),Mer=r(I7e," \u2014 "),dX=n(I7e,"A",{href:!0});var Rmt=s(dX);Eer=r(Rmt,"DPTForSemanticSegmentation"),Rmt.forEach(t),Cer=r(I7e," (DPT model)"),I7e.forEach(t),wer=i(E3),YF=n(E3,"LI",{});var q7e=s(YF);_ue=n(q7e,"STRONG",{});var Bmt=s(_ue);Aer=r(Bmt,"segformer"),Bmt.forEach(t),yer=r(q7e," \u2014 "),cX=n(q7e,"A",{href:!0});var Pmt=s(cX);Ler=r(Pmt,"SegformerForSemanticSegmentation"),Pmt.forEach(t),xer=r(q7e," (SegFormer model)"),q7e.forEach(t),E3.forEach(t),$er=i(_a),KF=n(_a,"P",{});var N7e=s(KF);ker=r(N7e,"The model is set in evaluation mode by default using "),bue=n(N7e,"CODE",{});var Imt=s(bue);Ser=r(Imt,"model.eval()"),Imt.forEach(t),Rer=r(N7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vue=n(N7e,"CODE",{});var qmt=s(vue);Ber=r(qmt,"model.train()"),qmt.forEach(t),N7e.forEach(t),Per=i(_a),T(ZF.$$.fragment,_a),_a.forEach(t),al.forEach(t),wPe=i(f),xd=n(f,"H2",{class:!0});var xqe=s(xd);e6=n(xqe,"A",{id:!0,class:!0,href:!0});var Nmt=s(e6);Fue=n(Nmt,"SPAN",{});var jmt=s(Fue);T(ty.$$.fragment,jmt),jmt.forEach(t),Nmt.forEach(t),Ier=i(xqe),Tue=n(xqe,"SPAN",{});var Dmt=s(Tue);qer=r(Dmt,"AutoModelForInstanceSegmentation"),Dmt.forEach(t),xqe.forEach(t),APe=i(f),Jo=n(f,"DIV",{class:!0});var nl=s(Jo);T(ay.$$.fragment,nl),Ner=i(nl),$d=n(nl,"P",{});var fK=s($d);jer=r(fK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),fX=n(fK,"A",{href:!0});var Gmt=s(fX);Der=r(Gmt,"from_pretrained()"),Gmt.forEach(t),Ger=r(fK," class method or the "),mX=n(fK,"A",{href:!0});var Omt=s(mX);Oer=r(Omt,"from_config()"),Omt.forEach(t),Ver=r(fK,` class
method.`),fK.forEach(t),Xer=i(nl),ny=n(nl,"P",{});var $qe=s(ny);zer=r($qe,"This class cannot be instantiated directly using "),Mue=n($qe,"CODE",{});var Vmt=s(Mue);Qer=r(Vmt,"__init__()"),Vmt.forEach(t),Wer=r($qe," (throws an error)."),$qe.forEach(t),Her=i(nl),Mt=n(nl,"DIV",{class:!0});var C3=s(Mt);T(sy.$$.fragment,C3),Uer=i(C3),Eue=n(C3,"P",{});var Xmt=s(Eue);Jer=r(Xmt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Xmt.forEach(t),Yer=i(C3),kd=n(C3,"P",{});var mK=s(kd);Ker=r(mK,`Note:
Loading a model from its configuration file does `),Cue=n(mK,"STRONG",{});var zmt=s(Cue);Zer=r(zmt,"not"),zmt.forEach(t),eor=r(mK,` load the model weights. It only affects the
model\u2019s configuration. Use `),gX=n(mK,"A",{href:!0});var Qmt=s(gX);oor=r(Qmt,"from_pretrained()"),Qmt.forEach(t),ror=r(mK," to load the model weights."),mK.forEach(t),tor=i(C3),T(o6.$$.fragment,C3),C3.forEach(t),aor=i(nl),_o=n(nl,"DIV",{class:!0});var ba=s(_o);T(ly.$$.fragment,ba),nor=i(ba),wue=n(ba,"P",{});var Wmt=s(wue);sor=r(Wmt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Wmt.forEach(t),lor=i(ba),Ha=n(ba,"P",{});var w3=s(Ha);ior=r(w3,"The model class to instantiate is selected based on the "),Aue=n(w3,"CODE",{});var Hmt=s(Aue);dor=r(Hmt,"model_type"),Hmt.forEach(t),cor=r(w3,` property of the config object (either
passed as an argument or loaded from `),yue=n(w3,"CODE",{});var Umt=s(yue);mor=r(Umt,"pretrained_model_name_or_path"),Umt.forEach(t),gor=r(w3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lue=n(w3,"CODE",{});var Jmt=s(Lue);hor=r(Jmt,"pretrained_model_name_or_path"),Jmt.forEach(t),por=r(w3,":"),w3.forEach(t),uor=i(ba),xue=n(ba,"UL",{});var Ymt=s(xue);r6=n(Ymt,"LI",{});var j7e=s(r6);$ue=n(j7e,"STRONG",{});var Kmt=s($ue);_or=r(Kmt,"maskformer"),Kmt.forEach(t),bor=r(j7e," \u2014 "),hX=n(j7e,"A",{href:!0});var Zmt=s(hX);vor=r(Zmt,"MaskFormerForInstanceSegmentation"),Zmt.forEach(t),For=r(j7e," (MaskFormer model)"),j7e.forEach(t),Ymt.forEach(t),Tor=i(ba),t6=n(ba,"P",{});var D7e=s(t6);Mor=r(D7e,"The model is set in evaluation mode by default using "),kue=n(D7e,"CODE",{});var egt=s(kue);Eor=r(egt,"model.eval()"),egt.forEach(t),Cor=r(D7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sue=n(D7e,"CODE",{});var ogt=s(Sue);wor=r(ogt,"model.train()"),ogt.forEach(t),D7e.forEach(t),Aor=i(ba),T(a6.$$.fragment,ba),ba.forEach(t),nl.forEach(t),yPe=i(f),Sd=n(f,"H2",{class:!0});var kqe=s(Sd);n6=n(kqe,"A",{id:!0,class:!0,href:!0});var rgt=s(n6);Rue=n(rgt,"SPAN",{});var tgt=s(Rue);T(iy.$$.fragment,tgt),tgt.forEach(t),rgt.forEach(t),yor=i(kqe),Bue=n(kqe,"SPAN",{});var agt=s(Bue);Lor=r(agt,"TFAutoModel"),agt.forEach(t),kqe.forEach(t),LPe=i(f),Yo=n(f,"DIV",{class:!0});var sl=s(Yo);T(dy.$$.fragment,sl),xor=i(sl),Rd=n(sl,"P",{});var gK=s(Rd);$or=r(gK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),pX=n(gK,"A",{href:!0});var ngt=s(pX);kor=r(ngt,"from_pretrained()"),ngt.forEach(t),Sor=r(gK," class method or the "),uX=n(gK,"A",{href:!0});var sgt=s(uX);Ror=r(sgt,"from_config()"),sgt.forEach(t),Bor=r(gK,` class
method.`),gK.forEach(t),Por=i(sl),cy=n(sl,"P",{});var Sqe=s(cy);Ior=r(Sqe,"This class cannot be instantiated directly using "),Pue=n(Sqe,"CODE",{});var lgt=s(Pue);qor=r(lgt,"__init__()"),lgt.forEach(t),Nor=r(Sqe," (throws an error)."),Sqe.forEach(t),jor=i(sl),Et=n(sl,"DIV",{class:!0});var A3=s(Et);T(fy.$$.fragment,A3),Dor=i(A3),Iue=n(A3,"P",{});var igt=s(Iue);Gor=r(igt,"Instantiates one of the base model classes of the library from a configuration."),igt.forEach(t),Oor=i(A3),Bd=n(A3,"P",{});var hK=s(Bd);Vor=r(hK,`Note:
Loading a model from its configuration file does `),que=n(hK,"STRONG",{});var dgt=s(que);Xor=r(dgt,"not"),dgt.forEach(t),zor=r(hK,` load the model weights. It only affects the
model\u2019s configuration. Use `),_X=n(hK,"A",{href:!0});var cgt=s(_X);Qor=r(cgt,"from_pretrained()"),cgt.forEach(t),Wor=r(hK," to load the model weights."),hK.forEach(t),Hor=i(A3),T(s6.$$.fragment,A3),A3.forEach(t),Uor=i(sl),Cr=n(sl,"DIV",{class:!0});var ll=s(Cr);T(my.$$.fragment,ll),Jor=i(ll),Nue=n(ll,"P",{});var fgt=s(Nue);Yor=r(fgt,"Instantiate one of the base model classes of the library from a pretrained model."),fgt.forEach(t),Kor=i(ll),Ua=n(ll,"P",{});var y3=s(Ua);Zor=r(y3,"The model class to instantiate is selected based on the "),jue=n(y3,"CODE",{});var mgt=s(jue);err=r(mgt,"model_type"),mgt.forEach(t),orr=r(y3,` property of the config object (either
passed as an argument or loaded from `),Due=n(y3,"CODE",{});var ggt=s(Due);rrr=r(ggt,"pretrained_model_name_or_path"),ggt.forEach(t),trr=r(y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gue=n(y3,"CODE",{});var hgt=s(Gue);arr=r(hgt,"pretrained_model_name_or_path"),hgt.forEach(t),nrr=r(y3,":"),y3.forEach(t),srr=i(ll),N=n(ll,"UL",{});var D=s(N);l6=n(D,"LI",{});var G7e=s(l6);Oue=n(G7e,"STRONG",{});var pgt=s(Oue);lrr=r(pgt,"albert"),pgt.forEach(t),irr=r(G7e," \u2014 "),bX=n(G7e,"A",{href:!0});var ugt=s(bX);drr=r(ugt,"TFAlbertModel"),ugt.forEach(t),crr=r(G7e," (ALBERT model)"),G7e.forEach(t),frr=i(D),i6=n(D,"LI",{});var O7e=s(i6);Vue=n(O7e,"STRONG",{});var _gt=s(Vue);mrr=r(_gt,"bart"),_gt.forEach(t),grr=r(O7e," \u2014 "),vX=n(O7e,"A",{href:!0});var bgt=s(vX);hrr=r(bgt,"TFBartModel"),bgt.forEach(t),prr=r(O7e," (BART model)"),O7e.forEach(t),urr=i(D),d6=n(D,"LI",{});var V7e=s(d6);Xue=n(V7e,"STRONG",{});var vgt=s(Xue);_rr=r(vgt,"bert"),vgt.forEach(t),brr=r(V7e," \u2014 "),FX=n(V7e,"A",{href:!0});var Fgt=s(FX);vrr=r(Fgt,"TFBertModel"),Fgt.forEach(t),Frr=r(V7e," (BERT model)"),V7e.forEach(t),Trr=i(D),c6=n(D,"LI",{});var X7e=s(c6);zue=n(X7e,"STRONG",{});var Tgt=s(zue);Mrr=r(Tgt,"blenderbot"),Tgt.forEach(t),Err=r(X7e," \u2014 "),TX=n(X7e,"A",{href:!0});var Mgt=s(TX);Crr=r(Mgt,"TFBlenderbotModel"),Mgt.forEach(t),wrr=r(X7e," (Blenderbot model)"),X7e.forEach(t),Arr=i(D),f6=n(D,"LI",{});var z7e=s(f6);Que=n(z7e,"STRONG",{});var Egt=s(Que);yrr=r(Egt,"blenderbot-small"),Egt.forEach(t),Lrr=r(z7e," \u2014 "),MX=n(z7e,"A",{href:!0});var Cgt=s(MX);xrr=r(Cgt,"TFBlenderbotSmallModel"),Cgt.forEach(t),$rr=r(z7e," (BlenderbotSmall model)"),z7e.forEach(t),krr=i(D),m6=n(D,"LI",{});var Q7e=s(m6);Wue=n(Q7e,"STRONG",{});var wgt=s(Wue);Srr=r(wgt,"camembert"),wgt.forEach(t),Rrr=r(Q7e," \u2014 "),EX=n(Q7e,"A",{href:!0});var Agt=s(EX);Brr=r(Agt,"TFCamembertModel"),Agt.forEach(t),Prr=r(Q7e," (CamemBERT model)"),Q7e.forEach(t),Irr=i(D),g6=n(D,"LI",{});var W7e=s(g6);Hue=n(W7e,"STRONG",{});var ygt=s(Hue);qrr=r(ygt,"clip"),ygt.forEach(t),Nrr=r(W7e," \u2014 "),CX=n(W7e,"A",{href:!0});var Lgt=s(CX);jrr=r(Lgt,"TFCLIPModel"),Lgt.forEach(t),Drr=r(W7e," (CLIP model)"),W7e.forEach(t),Grr=i(D),h6=n(D,"LI",{});var H7e=s(h6);Uue=n(H7e,"STRONG",{});var xgt=s(Uue);Orr=r(xgt,"convbert"),xgt.forEach(t),Vrr=r(H7e," \u2014 "),wX=n(H7e,"A",{href:!0});var $gt=s(wX);Xrr=r($gt,"TFConvBertModel"),$gt.forEach(t),zrr=r(H7e," (ConvBERT model)"),H7e.forEach(t),Qrr=i(D),p6=n(D,"LI",{});var U7e=s(p6);Jue=n(U7e,"STRONG",{});var kgt=s(Jue);Wrr=r(kgt,"convnext"),kgt.forEach(t),Hrr=r(U7e," \u2014 "),AX=n(U7e,"A",{href:!0});var Sgt=s(AX);Urr=r(Sgt,"TFConvNextModel"),Sgt.forEach(t),Jrr=r(U7e," (ConvNext model)"),U7e.forEach(t),Yrr=i(D),u6=n(D,"LI",{});var J7e=s(u6);Yue=n(J7e,"STRONG",{});var Rgt=s(Yue);Krr=r(Rgt,"ctrl"),Rgt.forEach(t),Zrr=r(J7e," \u2014 "),yX=n(J7e,"A",{href:!0});var Bgt=s(yX);etr=r(Bgt,"TFCTRLModel"),Bgt.forEach(t),otr=r(J7e," (CTRL model)"),J7e.forEach(t),rtr=i(D),_6=n(D,"LI",{});var Y7e=s(_6);Kue=n(Y7e,"STRONG",{});var Pgt=s(Kue);ttr=r(Pgt,"data2vec-vision"),Pgt.forEach(t),atr=r(Y7e," \u2014 "),LX=n(Y7e,"A",{href:!0});var Igt=s(LX);ntr=r(Igt,"TFData2VecVisionModel"),Igt.forEach(t),str=r(Y7e," (Data2VecVision model)"),Y7e.forEach(t),ltr=i(D),b6=n(D,"LI",{});var K7e=s(b6);Zue=n(K7e,"STRONG",{});var qgt=s(Zue);itr=r(qgt,"deberta"),qgt.forEach(t),dtr=r(K7e," \u2014 "),xX=n(K7e,"A",{href:!0});var Ngt=s(xX);ctr=r(Ngt,"TFDebertaModel"),Ngt.forEach(t),ftr=r(K7e," (DeBERTa model)"),K7e.forEach(t),mtr=i(D),v6=n(D,"LI",{});var Z7e=s(v6);e_e=n(Z7e,"STRONG",{});var jgt=s(e_e);gtr=r(jgt,"deberta-v2"),jgt.forEach(t),htr=r(Z7e," \u2014 "),$X=n(Z7e,"A",{href:!0});var Dgt=s($X);ptr=r(Dgt,"TFDebertaV2Model"),Dgt.forEach(t),utr=r(Z7e," (DeBERTa-v2 model)"),Z7e.forEach(t),_tr=i(D),F6=n(D,"LI",{});var exe=s(F6);o_e=n(exe,"STRONG",{});var Ggt=s(o_e);btr=r(Ggt,"distilbert"),Ggt.forEach(t),vtr=r(exe," \u2014 "),kX=n(exe,"A",{href:!0});var Ogt=s(kX);Ftr=r(Ogt,"TFDistilBertModel"),Ogt.forEach(t),Ttr=r(exe," (DistilBERT model)"),exe.forEach(t),Mtr=i(D),T6=n(D,"LI",{});var oxe=s(T6);r_e=n(oxe,"STRONG",{});var Vgt=s(r_e);Etr=r(Vgt,"dpr"),Vgt.forEach(t),Ctr=r(oxe," \u2014 "),SX=n(oxe,"A",{href:!0});var Xgt=s(SX);wtr=r(Xgt,"TFDPRQuestionEncoder"),Xgt.forEach(t),Atr=r(oxe," (DPR model)"),oxe.forEach(t),ytr=i(D),M6=n(D,"LI",{});var rxe=s(M6);t_e=n(rxe,"STRONG",{});var zgt=s(t_e);Ltr=r(zgt,"electra"),zgt.forEach(t),xtr=r(rxe," \u2014 "),RX=n(rxe,"A",{href:!0});var Qgt=s(RX);$tr=r(Qgt,"TFElectraModel"),Qgt.forEach(t),ktr=r(rxe," (ELECTRA model)"),rxe.forEach(t),Str=i(D),E6=n(D,"LI",{});var txe=s(E6);a_e=n(txe,"STRONG",{});var Wgt=s(a_e);Rtr=r(Wgt,"flaubert"),Wgt.forEach(t),Btr=r(txe," \u2014 "),BX=n(txe,"A",{href:!0});var Hgt=s(BX);Ptr=r(Hgt,"TFFlaubertModel"),Hgt.forEach(t),Itr=r(txe," (FlauBERT model)"),txe.forEach(t),qtr=i(D),ks=n(D,"LI",{});var qx=s(ks);n_e=n(qx,"STRONG",{});var Ugt=s(n_e);Ntr=r(Ugt,"funnel"),Ugt.forEach(t),jtr=r(qx," \u2014 "),PX=n(qx,"A",{href:!0});var Jgt=s(PX);Dtr=r(Jgt,"TFFunnelModel"),Jgt.forEach(t),Gtr=r(qx," or "),IX=n(qx,"A",{href:!0});var Ygt=s(IX);Otr=r(Ygt,"TFFunnelBaseModel"),Ygt.forEach(t),Vtr=r(qx," (Funnel Transformer model)"),qx.forEach(t),Xtr=i(D),C6=n(D,"LI",{});var axe=s(C6);s_e=n(axe,"STRONG",{});var Kgt=s(s_e);ztr=r(Kgt,"gpt2"),Kgt.forEach(t),Qtr=r(axe," \u2014 "),qX=n(axe,"A",{href:!0});var Zgt=s(qX);Wtr=r(Zgt,"TFGPT2Model"),Zgt.forEach(t),Htr=r(axe," (OpenAI GPT-2 model)"),axe.forEach(t),Utr=i(D),w6=n(D,"LI",{});var nxe=s(w6);l_e=n(nxe,"STRONG",{});var eht=s(l_e);Jtr=r(eht,"gptj"),eht.forEach(t),Ytr=r(nxe," \u2014 "),NX=n(nxe,"A",{href:!0});var oht=s(NX);Ktr=r(oht,"TFGPTJModel"),oht.forEach(t),Ztr=r(nxe," (GPT-J model)"),nxe.forEach(t),ear=i(D),A6=n(D,"LI",{});var sxe=s(A6);i_e=n(sxe,"STRONG",{});var rht=s(i_e);oar=r(rht,"hubert"),rht.forEach(t),rar=r(sxe," \u2014 "),jX=n(sxe,"A",{href:!0});var tht=s(jX);tar=r(tht,"TFHubertModel"),tht.forEach(t),aar=r(sxe," (Hubert model)"),sxe.forEach(t),nar=i(D),y6=n(D,"LI",{});var lxe=s(y6);d_e=n(lxe,"STRONG",{});var aht=s(d_e);sar=r(aht,"layoutlm"),aht.forEach(t),lar=r(lxe," \u2014 "),DX=n(lxe,"A",{href:!0});var nht=s(DX);iar=r(nht,"TFLayoutLMModel"),nht.forEach(t),dar=r(lxe," (LayoutLM model)"),lxe.forEach(t),car=i(D),L6=n(D,"LI",{});var ixe=s(L6);c_e=n(ixe,"STRONG",{});var sht=s(c_e);far=r(sht,"led"),sht.forEach(t),mar=r(ixe," \u2014 "),GX=n(ixe,"A",{href:!0});var lht=s(GX);gar=r(lht,"TFLEDModel"),lht.forEach(t),har=r(ixe," (LED model)"),ixe.forEach(t),par=i(D),x6=n(D,"LI",{});var dxe=s(x6);f_e=n(dxe,"STRONG",{});var iht=s(f_e);uar=r(iht,"longformer"),iht.forEach(t),_ar=r(dxe," \u2014 "),OX=n(dxe,"A",{href:!0});var dht=s(OX);bar=r(dht,"TFLongformerModel"),dht.forEach(t),Far=r(dxe," (Longformer model)"),dxe.forEach(t),Tar=i(D),$6=n(D,"LI",{});var cxe=s($6);m_e=n(cxe,"STRONG",{});var cht=s(m_e);Mar=r(cht,"lxmert"),cht.forEach(t),Ear=r(cxe," \u2014 "),VX=n(cxe,"A",{href:!0});var fht=s(VX);Car=r(fht,"TFLxmertModel"),fht.forEach(t),war=r(cxe," (LXMERT model)"),cxe.forEach(t),Aar=i(D),k6=n(D,"LI",{});var fxe=s(k6);g_e=n(fxe,"STRONG",{});var mht=s(g_e);yar=r(mht,"marian"),mht.forEach(t),Lar=r(fxe," \u2014 "),XX=n(fxe,"A",{href:!0});var ght=s(XX);xar=r(ght,"TFMarianModel"),ght.forEach(t),$ar=r(fxe," (Marian model)"),fxe.forEach(t),kar=i(D),S6=n(D,"LI",{});var mxe=s(S6);h_e=n(mxe,"STRONG",{});var hht=s(h_e);Sar=r(hht,"mbart"),hht.forEach(t),Rar=r(mxe," \u2014 "),zX=n(mxe,"A",{href:!0});var pht=s(zX);Bar=r(pht,"TFMBartModel"),pht.forEach(t),Par=r(mxe," (mBART model)"),mxe.forEach(t),Iar=i(D),R6=n(D,"LI",{});var gxe=s(R6);p_e=n(gxe,"STRONG",{});var uht=s(p_e);qar=r(uht,"mobilebert"),uht.forEach(t),Nar=r(gxe," \u2014 "),QX=n(gxe,"A",{href:!0});var _ht=s(QX);jar=r(_ht,"TFMobileBertModel"),_ht.forEach(t),Dar=r(gxe," (MobileBERT model)"),gxe.forEach(t),Gar=i(D),B6=n(D,"LI",{});var hxe=s(B6);u_e=n(hxe,"STRONG",{});var bht=s(u_e);Oar=r(bht,"mpnet"),bht.forEach(t),Var=r(hxe," \u2014 "),WX=n(hxe,"A",{href:!0});var vht=s(WX);Xar=r(vht,"TFMPNetModel"),vht.forEach(t),zar=r(hxe," (MPNet model)"),hxe.forEach(t),Qar=i(D),P6=n(D,"LI",{});var pxe=s(P6);__e=n(pxe,"STRONG",{});var Fht=s(__e);War=r(Fht,"mt5"),Fht.forEach(t),Har=r(pxe," \u2014 "),HX=n(pxe,"A",{href:!0});var Tht=s(HX);Uar=r(Tht,"TFMT5Model"),Tht.forEach(t),Jar=r(pxe," (mT5 model)"),pxe.forEach(t),Yar=i(D),I6=n(D,"LI",{});var uxe=s(I6);b_e=n(uxe,"STRONG",{});var Mht=s(b_e);Kar=r(Mht,"openai-gpt"),Mht.forEach(t),Zar=r(uxe," \u2014 "),UX=n(uxe,"A",{href:!0});var Eht=s(UX);enr=r(Eht,"TFOpenAIGPTModel"),Eht.forEach(t),onr=r(uxe," (OpenAI GPT model)"),uxe.forEach(t),rnr=i(D),q6=n(D,"LI",{});var _xe=s(q6);v_e=n(_xe,"STRONG",{});var Cht=s(v_e);tnr=r(Cht,"pegasus"),Cht.forEach(t),anr=r(_xe," \u2014 "),JX=n(_xe,"A",{href:!0});var wht=s(JX);nnr=r(wht,"TFPegasusModel"),wht.forEach(t),snr=r(_xe," (Pegasus model)"),_xe.forEach(t),lnr=i(D),N6=n(D,"LI",{});var bxe=s(N6);F_e=n(bxe,"STRONG",{});var Aht=s(F_e);inr=r(Aht,"rembert"),Aht.forEach(t),dnr=r(bxe," \u2014 "),YX=n(bxe,"A",{href:!0});var yht=s(YX);cnr=r(yht,"TFRemBertModel"),yht.forEach(t),fnr=r(bxe," (RemBERT model)"),bxe.forEach(t),mnr=i(D),j6=n(D,"LI",{});var vxe=s(j6);T_e=n(vxe,"STRONG",{});var Lht=s(T_e);gnr=r(Lht,"roberta"),Lht.forEach(t),hnr=r(vxe," \u2014 "),KX=n(vxe,"A",{href:!0});var xht=s(KX);pnr=r(xht,"TFRobertaModel"),xht.forEach(t),unr=r(vxe," (RoBERTa model)"),vxe.forEach(t),_nr=i(D),D6=n(D,"LI",{});var Fxe=s(D6);M_e=n(Fxe,"STRONG",{});var $ht=s(M_e);bnr=r($ht,"roformer"),$ht.forEach(t),vnr=r(Fxe," \u2014 "),ZX=n(Fxe,"A",{href:!0});var kht=s(ZX);Fnr=r(kht,"TFRoFormerModel"),kht.forEach(t),Tnr=r(Fxe," (RoFormer model)"),Fxe.forEach(t),Mnr=i(D),G6=n(D,"LI",{});var Txe=s(G6);E_e=n(Txe,"STRONG",{});var Sht=s(E_e);Enr=r(Sht,"speech_to_text"),Sht.forEach(t),Cnr=r(Txe," \u2014 "),ez=n(Txe,"A",{href:!0});var Rht=s(ez);wnr=r(Rht,"TFSpeech2TextModel"),Rht.forEach(t),Anr=r(Txe," (Speech2Text model)"),Txe.forEach(t),ynr=i(D),O6=n(D,"LI",{});var Mxe=s(O6);C_e=n(Mxe,"STRONG",{});var Bht=s(C_e);Lnr=r(Bht,"swin"),Bht.forEach(t),xnr=r(Mxe," \u2014 "),oz=n(Mxe,"A",{href:!0});var Pht=s(oz);$nr=r(Pht,"TFSwinModel"),Pht.forEach(t),knr=r(Mxe," (Swin model)"),Mxe.forEach(t),Snr=i(D),V6=n(D,"LI",{});var Exe=s(V6);w_e=n(Exe,"STRONG",{});var Iht=s(w_e);Rnr=r(Iht,"t5"),Iht.forEach(t),Bnr=r(Exe," \u2014 "),rz=n(Exe,"A",{href:!0});var qht=s(rz);Pnr=r(qht,"TFT5Model"),qht.forEach(t),Inr=r(Exe," (T5 model)"),Exe.forEach(t),qnr=i(D),X6=n(D,"LI",{});var Cxe=s(X6);A_e=n(Cxe,"STRONG",{});var Nht=s(A_e);Nnr=r(Nht,"tapas"),Nht.forEach(t),jnr=r(Cxe," \u2014 "),tz=n(Cxe,"A",{href:!0});var jht=s(tz);Dnr=r(jht,"TFTapasModel"),jht.forEach(t),Gnr=r(Cxe," (TAPAS model)"),Cxe.forEach(t),Onr=i(D),z6=n(D,"LI",{});var wxe=s(z6);y_e=n(wxe,"STRONG",{});var Dht=s(y_e);Vnr=r(Dht,"transfo-xl"),Dht.forEach(t),Xnr=r(wxe," \u2014 "),az=n(wxe,"A",{href:!0});var Ght=s(az);znr=r(Ght,"TFTransfoXLModel"),Ght.forEach(t),Qnr=r(wxe," (Transformer-XL model)"),wxe.forEach(t),Wnr=i(D),Q6=n(D,"LI",{});var Axe=s(Q6);L_e=n(Axe,"STRONG",{});var Oht=s(L_e);Hnr=r(Oht,"vit"),Oht.forEach(t),Unr=r(Axe," \u2014 "),nz=n(Axe,"A",{href:!0});var Vht=s(nz);Jnr=r(Vht,"TFViTModel"),Vht.forEach(t),Ynr=r(Axe," (ViT model)"),Axe.forEach(t),Knr=i(D),W6=n(D,"LI",{});var yxe=s(W6);x_e=n(yxe,"STRONG",{});var Xht=s(x_e);Znr=r(Xht,"vit_mae"),Xht.forEach(t),esr=r(yxe," \u2014 "),sz=n(yxe,"A",{href:!0});var zht=s(sz);osr=r(zht,"TFViTMAEModel"),zht.forEach(t),rsr=r(yxe," (ViTMAE model)"),yxe.forEach(t),tsr=i(D),H6=n(D,"LI",{});var Lxe=s(H6);$_e=n(Lxe,"STRONG",{});var Qht=s($_e);asr=r(Qht,"wav2vec2"),Qht.forEach(t),nsr=r(Lxe," \u2014 "),lz=n(Lxe,"A",{href:!0});var Wht=s(lz);ssr=r(Wht,"TFWav2Vec2Model"),Wht.forEach(t),lsr=r(Lxe," (Wav2Vec2 model)"),Lxe.forEach(t),isr=i(D),U6=n(D,"LI",{});var xxe=s(U6);k_e=n(xxe,"STRONG",{});var Hht=s(k_e);dsr=r(Hht,"xlm"),Hht.forEach(t),csr=r(xxe," \u2014 "),iz=n(xxe,"A",{href:!0});var Uht=s(iz);fsr=r(Uht,"TFXLMModel"),Uht.forEach(t),msr=r(xxe," (XLM model)"),xxe.forEach(t),gsr=i(D),J6=n(D,"LI",{});var $xe=s(J6);S_e=n($xe,"STRONG",{});var Jht=s(S_e);hsr=r(Jht,"xlm-roberta"),Jht.forEach(t),psr=r($xe," \u2014 "),dz=n($xe,"A",{href:!0});var Yht=s(dz);usr=r(Yht,"TFXLMRobertaModel"),Yht.forEach(t),_sr=r($xe," (XLM-RoBERTa model)"),$xe.forEach(t),bsr=i(D),Y6=n(D,"LI",{});var kxe=s(Y6);R_e=n(kxe,"STRONG",{});var Kht=s(R_e);vsr=r(Kht,"xlnet"),Kht.forEach(t),Fsr=r(kxe," \u2014 "),cz=n(kxe,"A",{href:!0});var Zht=s(cz);Tsr=r(Zht,"TFXLNetModel"),Zht.forEach(t),Msr=r(kxe," (XLNet model)"),kxe.forEach(t),D.forEach(t),Esr=i(ll),T(K6.$$.fragment,ll),ll.forEach(t),sl.forEach(t),xPe=i(f),Pd=n(f,"H2",{class:!0});var Rqe=s(Pd);Z6=n(Rqe,"A",{id:!0,class:!0,href:!0});var ept=s(Z6);B_e=n(ept,"SPAN",{});var opt=s(B_e);T(gy.$$.fragment,opt),opt.forEach(t),ept.forEach(t),Csr=i(Rqe),P_e=n(Rqe,"SPAN",{});var rpt=s(P_e);wsr=r(rpt,"TFAutoModelForPreTraining"),rpt.forEach(t),Rqe.forEach(t),$Pe=i(f),Ko=n(f,"DIV",{class:!0});var il=s(Ko);T(hy.$$.fragment,il),Asr=i(il),Id=n(il,"P",{});var pK=s(Id);ysr=r(pK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),fz=n(pK,"A",{href:!0});var tpt=s(fz);Lsr=r(tpt,"from_pretrained()"),tpt.forEach(t),xsr=r(pK," class method or the "),mz=n(pK,"A",{href:!0});var apt=s(mz);$sr=r(apt,"from_config()"),apt.forEach(t),ksr=r(pK,` class
method.`),pK.forEach(t),Ssr=i(il),py=n(il,"P",{});var Bqe=s(py);Rsr=r(Bqe,"This class cannot be instantiated directly using "),I_e=n(Bqe,"CODE",{});var npt=s(I_e);Bsr=r(npt,"__init__()"),npt.forEach(t),Psr=r(Bqe," (throws an error)."),Bqe.forEach(t),Isr=i(il),Ct=n(il,"DIV",{class:!0});var L3=s(Ct);T(uy.$$.fragment,L3),qsr=i(L3),q_e=n(L3,"P",{});var spt=s(q_e);Nsr=r(spt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),spt.forEach(t),jsr=i(L3),qd=n(L3,"P",{});var uK=s(qd);Dsr=r(uK,`Note:
Loading a model from its configuration file does `),N_e=n(uK,"STRONG",{});var lpt=s(N_e);Gsr=r(lpt,"not"),lpt.forEach(t),Osr=r(uK,` load the model weights. It only affects the
model\u2019s configuration. Use `),gz=n(uK,"A",{href:!0});var ipt=s(gz);Vsr=r(ipt,"from_pretrained()"),ipt.forEach(t),Xsr=r(uK," to load the model weights."),uK.forEach(t),zsr=i(L3),T(eT.$$.fragment,L3),L3.forEach(t),Qsr=i(il),wr=n(il,"DIV",{class:!0});var dl=s(wr);T(_y.$$.fragment,dl),Wsr=i(dl),j_e=n(dl,"P",{});var dpt=s(j_e);Hsr=r(dpt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),dpt.forEach(t),Usr=i(dl),Ja=n(dl,"P",{});var x3=s(Ja);Jsr=r(x3,"The model class to instantiate is selected based on the "),D_e=n(x3,"CODE",{});var cpt=s(D_e);Ysr=r(cpt,"model_type"),cpt.forEach(t),Ksr=r(x3,` property of the config object (either
passed as an argument or loaded from `),G_e=n(x3,"CODE",{});var fpt=s(G_e);Zsr=r(fpt,"pretrained_model_name_or_path"),fpt.forEach(t),elr=r(x3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O_e=n(x3,"CODE",{});var mpt=s(O_e);olr=r(mpt,"pretrained_model_name_or_path"),mpt.forEach(t),rlr=r(x3,":"),x3.forEach(t),tlr=i(dl),ne=n(dl,"UL",{});var le=s(ne);oT=n(le,"LI",{});var Sxe=s(oT);V_e=n(Sxe,"STRONG",{});var gpt=s(V_e);alr=r(gpt,"albert"),gpt.forEach(t),nlr=r(Sxe," \u2014 "),hz=n(Sxe,"A",{href:!0});var hpt=s(hz);slr=r(hpt,"TFAlbertForPreTraining"),hpt.forEach(t),llr=r(Sxe," (ALBERT model)"),Sxe.forEach(t),ilr=i(le),rT=n(le,"LI",{});var Rxe=s(rT);X_e=n(Rxe,"STRONG",{});var ppt=s(X_e);dlr=r(ppt,"bart"),ppt.forEach(t),clr=r(Rxe," \u2014 "),pz=n(Rxe,"A",{href:!0});var upt=s(pz);flr=r(upt,"TFBartForConditionalGeneration"),upt.forEach(t),mlr=r(Rxe," (BART model)"),Rxe.forEach(t),glr=i(le),tT=n(le,"LI",{});var Bxe=s(tT);z_e=n(Bxe,"STRONG",{});var _pt=s(z_e);hlr=r(_pt,"bert"),_pt.forEach(t),plr=r(Bxe," \u2014 "),uz=n(Bxe,"A",{href:!0});var bpt=s(uz);ulr=r(bpt,"TFBertForPreTraining"),bpt.forEach(t),_lr=r(Bxe," (BERT model)"),Bxe.forEach(t),blr=i(le),aT=n(le,"LI",{});var Pxe=s(aT);Q_e=n(Pxe,"STRONG",{});var vpt=s(Q_e);vlr=r(vpt,"camembert"),vpt.forEach(t),Flr=r(Pxe," \u2014 "),_z=n(Pxe,"A",{href:!0});var Fpt=s(_z);Tlr=r(Fpt,"TFCamembertForMaskedLM"),Fpt.forEach(t),Mlr=r(Pxe," (CamemBERT model)"),Pxe.forEach(t),Elr=i(le),nT=n(le,"LI",{});var Ixe=s(nT);W_e=n(Ixe,"STRONG",{});var Tpt=s(W_e);Clr=r(Tpt,"ctrl"),Tpt.forEach(t),wlr=r(Ixe," \u2014 "),bz=n(Ixe,"A",{href:!0});var Mpt=s(bz);Alr=r(Mpt,"TFCTRLLMHeadModel"),Mpt.forEach(t),ylr=r(Ixe," (CTRL model)"),Ixe.forEach(t),Llr=i(le),sT=n(le,"LI",{});var qxe=s(sT);H_e=n(qxe,"STRONG",{});var Ept=s(H_e);xlr=r(Ept,"distilbert"),Ept.forEach(t),$lr=r(qxe," \u2014 "),vz=n(qxe,"A",{href:!0});var Cpt=s(vz);klr=r(Cpt,"TFDistilBertForMaskedLM"),Cpt.forEach(t),Slr=r(qxe," (DistilBERT model)"),qxe.forEach(t),Rlr=i(le),lT=n(le,"LI",{});var Nxe=s(lT);U_e=n(Nxe,"STRONG",{});var wpt=s(U_e);Blr=r(wpt,"electra"),wpt.forEach(t),Plr=r(Nxe," \u2014 "),Fz=n(Nxe,"A",{href:!0});var Apt=s(Fz);Ilr=r(Apt,"TFElectraForPreTraining"),Apt.forEach(t),qlr=r(Nxe," (ELECTRA model)"),Nxe.forEach(t),Nlr=i(le),iT=n(le,"LI",{});var jxe=s(iT);J_e=n(jxe,"STRONG",{});var ypt=s(J_e);jlr=r(ypt,"flaubert"),ypt.forEach(t),Dlr=r(jxe," \u2014 "),Tz=n(jxe,"A",{href:!0});var Lpt=s(Tz);Glr=r(Lpt,"TFFlaubertWithLMHeadModel"),Lpt.forEach(t),Olr=r(jxe," (FlauBERT model)"),jxe.forEach(t),Vlr=i(le),dT=n(le,"LI",{});var Dxe=s(dT);Y_e=n(Dxe,"STRONG",{});var xpt=s(Y_e);Xlr=r(xpt,"funnel"),xpt.forEach(t),zlr=r(Dxe," \u2014 "),Mz=n(Dxe,"A",{href:!0});var $pt=s(Mz);Qlr=r($pt,"TFFunnelForPreTraining"),$pt.forEach(t),Wlr=r(Dxe," (Funnel Transformer model)"),Dxe.forEach(t),Hlr=i(le),cT=n(le,"LI",{});var Gxe=s(cT);K_e=n(Gxe,"STRONG",{});var kpt=s(K_e);Ulr=r(kpt,"gpt2"),kpt.forEach(t),Jlr=r(Gxe," \u2014 "),Ez=n(Gxe,"A",{href:!0});var Spt=s(Ez);Ylr=r(Spt,"TFGPT2LMHeadModel"),Spt.forEach(t),Klr=r(Gxe," (OpenAI GPT-2 model)"),Gxe.forEach(t),Zlr=i(le),fT=n(le,"LI",{});var Oxe=s(fT);Z_e=n(Oxe,"STRONG",{});var Rpt=s(Z_e);eir=r(Rpt,"layoutlm"),Rpt.forEach(t),oir=r(Oxe," \u2014 "),Cz=n(Oxe,"A",{href:!0});var Bpt=s(Cz);rir=r(Bpt,"TFLayoutLMForMaskedLM"),Bpt.forEach(t),tir=r(Oxe," (LayoutLM model)"),Oxe.forEach(t),air=i(le),mT=n(le,"LI",{});var Vxe=s(mT);e1e=n(Vxe,"STRONG",{});var Ppt=s(e1e);nir=r(Ppt,"lxmert"),Ppt.forEach(t),sir=r(Vxe," \u2014 "),wz=n(Vxe,"A",{href:!0});var Ipt=s(wz);lir=r(Ipt,"TFLxmertForPreTraining"),Ipt.forEach(t),iir=r(Vxe," (LXMERT model)"),Vxe.forEach(t),dir=i(le),gT=n(le,"LI",{});var Xxe=s(gT);o1e=n(Xxe,"STRONG",{});var qpt=s(o1e);cir=r(qpt,"mobilebert"),qpt.forEach(t),fir=r(Xxe," \u2014 "),Az=n(Xxe,"A",{href:!0});var Npt=s(Az);mir=r(Npt,"TFMobileBertForPreTraining"),Npt.forEach(t),gir=r(Xxe," (MobileBERT model)"),Xxe.forEach(t),hir=i(le),hT=n(le,"LI",{});var zxe=s(hT);r1e=n(zxe,"STRONG",{});var jpt=s(r1e);pir=r(jpt,"mpnet"),jpt.forEach(t),uir=r(zxe," \u2014 "),yz=n(zxe,"A",{href:!0});var Dpt=s(yz);_ir=r(Dpt,"TFMPNetForMaskedLM"),Dpt.forEach(t),bir=r(zxe," (MPNet model)"),zxe.forEach(t),vir=i(le),pT=n(le,"LI",{});var Qxe=s(pT);t1e=n(Qxe,"STRONG",{});var Gpt=s(t1e);Fir=r(Gpt,"openai-gpt"),Gpt.forEach(t),Tir=r(Qxe," \u2014 "),Lz=n(Qxe,"A",{href:!0});var Opt=s(Lz);Mir=r(Opt,"TFOpenAIGPTLMHeadModel"),Opt.forEach(t),Eir=r(Qxe," (OpenAI GPT model)"),Qxe.forEach(t),Cir=i(le),uT=n(le,"LI",{});var Wxe=s(uT);a1e=n(Wxe,"STRONG",{});var Vpt=s(a1e);wir=r(Vpt,"roberta"),Vpt.forEach(t),Air=r(Wxe," \u2014 "),xz=n(Wxe,"A",{href:!0});var Xpt=s(xz);yir=r(Xpt,"TFRobertaForMaskedLM"),Xpt.forEach(t),Lir=r(Wxe," (RoBERTa model)"),Wxe.forEach(t),xir=i(le),_T=n(le,"LI",{});var Hxe=s(_T);n1e=n(Hxe,"STRONG",{});var zpt=s(n1e);$ir=r(zpt,"t5"),zpt.forEach(t),kir=r(Hxe," \u2014 "),$z=n(Hxe,"A",{href:!0});var Qpt=s($z);Sir=r(Qpt,"TFT5ForConditionalGeneration"),Qpt.forEach(t),Rir=r(Hxe," (T5 model)"),Hxe.forEach(t),Bir=i(le),bT=n(le,"LI",{});var Uxe=s(bT);s1e=n(Uxe,"STRONG",{});var Wpt=s(s1e);Pir=r(Wpt,"tapas"),Wpt.forEach(t),Iir=r(Uxe," \u2014 "),kz=n(Uxe,"A",{href:!0});var Hpt=s(kz);qir=r(Hpt,"TFTapasForMaskedLM"),Hpt.forEach(t),Nir=r(Uxe," (TAPAS model)"),Uxe.forEach(t),jir=i(le),vT=n(le,"LI",{});var Jxe=s(vT);l1e=n(Jxe,"STRONG",{});var Upt=s(l1e);Dir=r(Upt,"transfo-xl"),Upt.forEach(t),Gir=r(Jxe," \u2014 "),Sz=n(Jxe,"A",{href:!0});var Jpt=s(Sz);Oir=r(Jpt,"TFTransfoXLLMHeadModel"),Jpt.forEach(t),Vir=r(Jxe," (Transformer-XL model)"),Jxe.forEach(t),Xir=i(le),FT=n(le,"LI",{});var Yxe=s(FT);i1e=n(Yxe,"STRONG",{});var Ypt=s(i1e);zir=r(Ypt,"vit_mae"),Ypt.forEach(t),Qir=r(Yxe," \u2014 "),Rz=n(Yxe,"A",{href:!0});var Kpt=s(Rz);Wir=r(Kpt,"TFViTMAEForPreTraining"),Kpt.forEach(t),Hir=r(Yxe," (ViTMAE model)"),Yxe.forEach(t),Uir=i(le),TT=n(le,"LI",{});var Kxe=s(TT);d1e=n(Kxe,"STRONG",{});var Zpt=s(d1e);Jir=r(Zpt,"xlm"),Zpt.forEach(t),Yir=r(Kxe," \u2014 "),Bz=n(Kxe,"A",{href:!0});var eut=s(Bz);Kir=r(eut,"TFXLMWithLMHeadModel"),eut.forEach(t),Zir=r(Kxe," (XLM model)"),Kxe.forEach(t),edr=i(le),MT=n(le,"LI",{});var Zxe=s(MT);c1e=n(Zxe,"STRONG",{});var out=s(c1e);odr=r(out,"xlm-roberta"),out.forEach(t),rdr=r(Zxe," \u2014 "),Pz=n(Zxe,"A",{href:!0});var rut=s(Pz);tdr=r(rut,"TFXLMRobertaForMaskedLM"),rut.forEach(t),adr=r(Zxe," (XLM-RoBERTa model)"),Zxe.forEach(t),ndr=i(le),ET=n(le,"LI",{});var e$e=s(ET);f1e=n(e$e,"STRONG",{});var tut=s(f1e);sdr=r(tut,"xlnet"),tut.forEach(t),ldr=r(e$e," \u2014 "),Iz=n(e$e,"A",{href:!0});var aut=s(Iz);idr=r(aut,"TFXLNetLMHeadModel"),aut.forEach(t),ddr=r(e$e," (XLNet model)"),e$e.forEach(t),le.forEach(t),cdr=i(dl),T(CT.$$.fragment,dl),dl.forEach(t),il.forEach(t),kPe=i(f),Nd=n(f,"H2",{class:!0});var Pqe=s(Nd);wT=n(Pqe,"A",{id:!0,class:!0,href:!0});var nut=s(wT);m1e=n(nut,"SPAN",{});var sut=s(m1e);T(by.$$.fragment,sut),sut.forEach(t),nut.forEach(t),fdr=i(Pqe),g1e=n(Pqe,"SPAN",{});var lut=s(g1e);mdr=r(lut,"TFAutoModelForCausalLM"),lut.forEach(t),Pqe.forEach(t),SPe=i(f),Zo=n(f,"DIV",{class:!0});var cl=s(Zo);T(vy.$$.fragment,cl),gdr=i(cl),jd=n(cl,"P",{});var _K=s(jd);hdr=r(_K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qz=n(_K,"A",{href:!0});var iut=s(qz);pdr=r(iut,"from_pretrained()"),iut.forEach(t),udr=r(_K," class method or the "),Nz=n(_K,"A",{href:!0});var dut=s(Nz);_dr=r(dut,"from_config()"),dut.forEach(t),bdr=r(_K,` class
method.`),_K.forEach(t),vdr=i(cl),Fy=n(cl,"P",{});var Iqe=s(Fy);Fdr=r(Iqe,"This class cannot be instantiated directly using "),h1e=n(Iqe,"CODE",{});var cut=s(h1e);Tdr=r(cut,"__init__()"),cut.forEach(t),Mdr=r(Iqe," (throws an error)."),Iqe.forEach(t),Edr=i(cl),wt=n(cl,"DIV",{class:!0});var $3=s(wt);T(Ty.$$.fragment,$3),Cdr=i($3),p1e=n($3,"P",{});var fut=s(p1e);wdr=r(fut,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),fut.forEach(t),Adr=i($3),Dd=n($3,"P",{});var bK=s(Dd);ydr=r(bK,`Note:
Loading a model from its configuration file does `),u1e=n(bK,"STRONG",{});var mut=s(u1e);Ldr=r(mut,"not"),mut.forEach(t),xdr=r(bK,` load the model weights. It only affects the
model\u2019s configuration. Use `),jz=n(bK,"A",{href:!0});var gut=s(jz);$dr=r(gut,"from_pretrained()"),gut.forEach(t),kdr=r(bK," to load the model weights."),bK.forEach(t),Sdr=i($3),T(AT.$$.fragment,$3),$3.forEach(t),Rdr=i(cl),Ar=n(cl,"DIV",{class:!0});var fl=s(Ar);T(My.$$.fragment,fl),Bdr=i(fl),_1e=n(fl,"P",{});var hut=s(_1e);Pdr=r(hut,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),hut.forEach(t),Idr=i(fl),Ya=n(fl,"P",{});var k3=s(Ya);qdr=r(k3,"The model class to instantiate is selected based on the "),b1e=n(k3,"CODE",{});var put=s(b1e);Ndr=r(put,"model_type"),put.forEach(t),jdr=r(k3,` property of the config object (either
passed as an argument or loaded from `),v1e=n(k3,"CODE",{});var uut=s(v1e);Ddr=r(uut,"pretrained_model_name_or_path"),uut.forEach(t),Gdr=r(k3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F1e=n(k3,"CODE",{});var _ut=s(F1e);Odr=r(_ut,"pretrained_model_name_or_path"),_ut.forEach(t),Vdr=r(k3,":"),k3.forEach(t),Xdr=i(fl),Te=n(fl,"UL",{});var Ce=s(Te);yT=n(Ce,"LI",{});var o$e=s(yT);T1e=n(o$e,"STRONG",{});var but=s(T1e);zdr=r(but,"bert"),but.forEach(t),Qdr=r(o$e," \u2014 "),Dz=n(o$e,"A",{href:!0});var vut=s(Dz);Wdr=r(vut,"TFBertLMHeadModel"),vut.forEach(t),Hdr=r(o$e," (BERT model)"),o$e.forEach(t),Udr=i(Ce),LT=n(Ce,"LI",{});var r$e=s(LT);M1e=n(r$e,"STRONG",{});var Fut=s(M1e);Jdr=r(Fut,"camembert"),Fut.forEach(t),Ydr=r(r$e," \u2014 "),Gz=n(r$e,"A",{href:!0});var Tut=s(Gz);Kdr=r(Tut,"TFCamembertForCausalLM"),Tut.forEach(t),Zdr=r(r$e," (CamemBERT model)"),r$e.forEach(t),ecr=i(Ce),xT=n(Ce,"LI",{});var t$e=s(xT);E1e=n(t$e,"STRONG",{});var Mut=s(E1e);ocr=r(Mut,"ctrl"),Mut.forEach(t),rcr=r(t$e," \u2014 "),Oz=n(t$e,"A",{href:!0});var Eut=s(Oz);tcr=r(Eut,"TFCTRLLMHeadModel"),Eut.forEach(t),acr=r(t$e," (CTRL model)"),t$e.forEach(t),ncr=i(Ce),$T=n(Ce,"LI",{});var a$e=s($T);C1e=n(a$e,"STRONG",{});var Cut=s(C1e);scr=r(Cut,"gpt2"),Cut.forEach(t),lcr=r(a$e," \u2014 "),Vz=n(a$e,"A",{href:!0});var wut=s(Vz);icr=r(wut,"TFGPT2LMHeadModel"),wut.forEach(t),dcr=r(a$e," (OpenAI GPT-2 model)"),a$e.forEach(t),ccr=i(Ce),kT=n(Ce,"LI",{});var n$e=s(kT);w1e=n(n$e,"STRONG",{});var Aut=s(w1e);fcr=r(Aut,"gptj"),Aut.forEach(t),mcr=r(n$e," \u2014 "),Xz=n(n$e,"A",{href:!0});var yut=s(Xz);gcr=r(yut,"TFGPTJForCausalLM"),yut.forEach(t),hcr=r(n$e," (GPT-J model)"),n$e.forEach(t),pcr=i(Ce),ST=n(Ce,"LI",{});var s$e=s(ST);A1e=n(s$e,"STRONG",{});var Lut=s(A1e);ucr=r(Lut,"openai-gpt"),Lut.forEach(t),_cr=r(s$e," \u2014 "),zz=n(s$e,"A",{href:!0});var xut=s(zz);bcr=r(xut,"TFOpenAIGPTLMHeadModel"),xut.forEach(t),vcr=r(s$e," (OpenAI GPT model)"),s$e.forEach(t),Fcr=i(Ce),RT=n(Ce,"LI",{});var l$e=s(RT);y1e=n(l$e,"STRONG",{});var $ut=s(y1e);Tcr=r($ut,"rembert"),$ut.forEach(t),Mcr=r(l$e," \u2014 "),Qz=n(l$e,"A",{href:!0});var kut=s(Qz);Ecr=r(kut,"TFRemBertForCausalLM"),kut.forEach(t),Ccr=r(l$e," (RemBERT model)"),l$e.forEach(t),wcr=i(Ce),BT=n(Ce,"LI",{});var i$e=s(BT);L1e=n(i$e,"STRONG",{});var Sut=s(L1e);Acr=r(Sut,"roberta"),Sut.forEach(t),ycr=r(i$e," \u2014 "),Wz=n(i$e,"A",{href:!0});var Rut=s(Wz);Lcr=r(Rut,"TFRobertaForCausalLM"),Rut.forEach(t),xcr=r(i$e," (RoBERTa model)"),i$e.forEach(t),$cr=i(Ce),PT=n(Ce,"LI",{});var d$e=s(PT);x1e=n(d$e,"STRONG",{});var But=s(x1e);kcr=r(But,"roformer"),But.forEach(t),Scr=r(d$e," \u2014 "),Hz=n(d$e,"A",{href:!0});var Put=s(Hz);Rcr=r(Put,"TFRoFormerForCausalLM"),Put.forEach(t),Bcr=r(d$e," (RoFormer model)"),d$e.forEach(t),Pcr=i(Ce),IT=n(Ce,"LI",{});var c$e=s(IT);$1e=n(c$e,"STRONG",{});var Iut=s($1e);Icr=r(Iut,"transfo-xl"),Iut.forEach(t),qcr=r(c$e," \u2014 "),Uz=n(c$e,"A",{href:!0});var qut=s(Uz);Ncr=r(qut,"TFTransfoXLLMHeadModel"),qut.forEach(t),jcr=r(c$e," (Transformer-XL model)"),c$e.forEach(t),Dcr=i(Ce),qT=n(Ce,"LI",{});var f$e=s(qT);k1e=n(f$e,"STRONG",{});var Nut=s(k1e);Gcr=r(Nut,"xlm"),Nut.forEach(t),Ocr=r(f$e," \u2014 "),Jz=n(f$e,"A",{href:!0});var jut=s(Jz);Vcr=r(jut,"TFXLMWithLMHeadModel"),jut.forEach(t),Xcr=r(f$e," (XLM model)"),f$e.forEach(t),zcr=i(Ce),NT=n(Ce,"LI",{});var m$e=s(NT);S1e=n(m$e,"STRONG",{});var Dut=s(S1e);Qcr=r(Dut,"xlnet"),Dut.forEach(t),Wcr=r(m$e," \u2014 "),Yz=n(m$e,"A",{href:!0});var Gut=s(Yz);Hcr=r(Gut,"TFXLNetLMHeadModel"),Gut.forEach(t),Ucr=r(m$e," (XLNet model)"),m$e.forEach(t),Ce.forEach(t),Jcr=i(fl),T(jT.$$.fragment,fl),fl.forEach(t),cl.forEach(t),RPe=i(f),Gd=n(f,"H2",{class:!0});var qqe=s(Gd);DT=n(qqe,"A",{id:!0,class:!0,href:!0});var Out=s(DT);R1e=n(Out,"SPAN",{});var Vut=s(R1e);T(Ey.$$.fragment,Vut),Vut.forEach(t),Out.forEach(t),Ycr=i(qqe),B1e=n(qqe,"SPAN",{});var Xut=s(B1e);Kcr=r(Xut,"TFAutoModelForImageClassification"),Xut.forEach(t),qqe.forEach(t),BPe=i(f),er=n(f,"DIV",{class:!0});var ml=s(er);T(Cy.$$.fragment,ml),Zcr=i(ml),Od=n(ml,"P",{});var vK=s(Od);efr=r(vK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Kz=n(vK,"A",{href:!0});var zut=s(Kz);ofr=r(zut,"from_pretrained()"),zut.forEach(t),rfr=r(vK," class method or the "),Zz=n(vK,"A",{href:!0});var Qut=s(Zz);tfr=r(Qut,"from_config()"),Qut.forEach(t),afr=r(vK,` class
method.`),vK.forEach(t),nfr=i(ml),wy=n(ml,"P",{});var Nqe=s(wy);sfr=r(Nqe,"This class cannot be instantiated directly using "),P1e=n(Nqe,"CODE",{});var Wut=s(P1e);lfr=r(Wut,"__init__()"),Wut.forEach(t),ifr=r(Nqe," (throws an error)."),Nqe.forEach(t),dfr=i(ml),At=n(ml,"DIV",{class:!0});var S3=s(At);T(Ay.$$.fragment,S3),cfr=i(S3),I1e=n(S3,"P",{});var Hut=s(I1e);ffr=r(Hut,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Hut.forEach(t),mfr=i(S3),Vd=n(S3,"P",{});var FK=s(Vd);gfr=r(FK,`Note:
Loading a model from its configuration file does `),q1e=n(FK,"STRONG",{});var Uut=s(q1e);hfr=r(Uut,"not"),Uut.forEach(t),pfr=r(FK,` load the model weights. It only affects the
model\u2019s configuration. Use `),eQ=n(FK,"A",{href:!0});var Jut=s(eQ);ufr=r(Jut,"from_pretrained()"),Jut.forEach(t),_fr=r(FK," to load the model weights."),FK.forEach(t),bfr=i(S3),T(GT.$$.fragment,S3),S3.forEach(t),vfr=i(ml),yr=n(ml,"DIV",{class:!0});var gl=s(yr);T(yy.$$.fragment,gl),Ffr=i(gl),N1e=n(gl,"P",{});var Yut=s(N1e);Tfr=r(Yut,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Yut.forEach(t),Mfr=i(gl),Ka=n(gl,"P",{});var R3=s(Ka);Efr=r(R3,"The model class to instantiate is selected based on the "),j1e=n(R3,"CODE",{});var Kut=s(j1e);Cfr=r(Kut,"model_type"),Kut.forEach(t),wfr=r(R3,` property of the config object (either
passed as an argument or loaded from `),D1e=n(R3,"CODE",{});var Zut=s(D1e);Afr=r(Zut,"pretrained_model_name_or_path"),Zut.forEach(t),yfr=r(R3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G1e=n(R3,"CODE",{});var e_t=s(G1e);Lfr=r(e_t,"pretrained_model_name_or_path"),e_t.forEach(t),xfr=r(R3,":"),R3.forEach(t),$fr=i(gl),Za=n(gl,"UL",{});var B3=s(Za);OT=n(B3,"LI",{});var g$e=s(OT);O1e=n(g$e,"STRONG",{});var o_t=s(O1e);kfr=r(o_t,"convnext"),o_t.forEach(t),Sfr=r(g$e," \u2014 "),oQ=n(g$e,"A",{href:!0});var r_t=s(oQ);Rfr=r(r_t,"TFConvNextForImageClassification"),r_t.forEach(t),Bfr=r(g$e," (ConvNext model)"),g$e.forEach(t),Pfr=i(B3),VT=n(B3,"LI",{});var h$e=s(VT);V1e=n(h$e,"STRONG",{});var t_t=s(V1e);Ifr=r(t_t,"data2vec-vision"),t_t.forEach(t),qfr=r(h$e," \u2014 "),rQ=n(h$e,"A",{href:!0});var a_t=s(rQ);Nfr=r(a_t,"TFData2VecVisionForImageClassification"),a_t.forEach(t),jfr=r(h$e," (Data2VecVision model)"),h$e.forEach(t),Dfr=i(B3),XT=n(B3,"LI",{});var p$e=s(XT);X1e=n(p$e,"STRONG",{});var n_t=s(X1e);Gfr=r(n_t,"swin"),n_t.forEach(t),Ofr=r(p$e," \u2014 "),tQ=n(p$e,"A",{href:!0});var s_t=s(tQ);Vfr=r(s_t,"TFSwinForImageClassification"),s_t.forEach(t),Xfr=r(p$e," (Swin model)"),p$e.forEach(t),zfr=i(B3),zT=n(B3,"LI",{});var u$e=s(zT);z1e=n(u$e,"STRONG",{});var l_t=s(z1e);Qfr=r(l_t,"vit"),l_t.forEach(t),Wfr=r(u$e," \u2014 "),aQ=n(u$e,"A",{href:!0});var i_t=s(aQ);Hfr=r(i_t,"TFViTForImageClassification"),i_t.forEach(t),Ufr=r(u$e," (ViT model)"),u$e.forEach(t),B3.forEach(t),Jfr=i(gl),T(QT.$$.fragment,gl),gl.forEach(t),ml.forEach(t),PPe=i(f),Xd=n(f,"H2",{class:!0});var jqe=s(Xd);WT=n(jqe,"A",{id:!0,class:!0,href:!0});var d_t=s(WT);Q1e=n(d_t,"SPAN",{});var c_t=s(Q1e);T(Ly.$$.fragment,c_t),c_t.forEach(t),d_t.forEach(t),Yfr=i(jqe),W1e=n(jqe,"SPAN",{});var f_t=s(W1e);Kfr=r(f_t,"TFAutoModelForMaskedLM"),f_t.forEach(t),jqe.forEach(t),IPe=i(f),or=n(f,"DIV",{class:!0});var hl=s(or);T(xy.$$.fragment,hl),Zfr=i(hl),zd=n(hl,"P",{});var TK=s(zd);emr=r(TK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),nQ=n(TK,"A",{href:!0});var m_t=s(nQ);omr=r(m_t,"from_pretrained()"),m_t.forEach(t),rmr=r(TK," class method or the "),sQ=n(TK,"A",{href:!0});var g_t=s(sQ);tmr=r(g_t,"from_config()"),g_t.forEach(t),amr=r(TK,` class
method.`),TK.forEach(t),nmr=i(hl),$y=n(hl,"P",{});var Dqe=s($y);smr=r(Dqe,"This class cannot be instantiated directly using "),H1e=n(Dqe,"CODE",{});var h_t=s(H1e);lmr=r(h_t,"__init__()"),h_t.forEach(t),imr=r(Dqe," (throws an error)."),Dqe.forEach(t),dmr=i(hl),yt=n(hl,"DIV",{class:!0});var P3=s(yt);T(ky.$$.fragment,P3),cmr=i(P3),U1e=n(P3,"P",{});var p_t=s(U1e);fmr=r(p_t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),p_t.forEach(t),mmr=i(P3),Qd=n(P3,"P",{});var MK=s(Qd);gmr=r(MK,`Note:
Loading a model from its configuration file does `),J1e=n(MK,"STRONG",{});var u_t=s(J1e);hmr=r(u_t,"not"),u_t.forEach(t),pmr=r(MK,` load the model weights. It only affects the
model\u2019s configuration. Use `),lQ=n(MK,"A",{href:!0});var __t=s(lQ);umr=r(__t,"from_pretrained()"),__t.forEach(t),_mr=r(MK," to load the model weights."),MK.forEach(t),bmr=i(P3),T(HT.$$.fragment,P3),P3.forEach(t),vmr=i(hl),Lr=n(hl,"DIV",{class:!0});var pl=s(Lr);T(Sy.$$.fragment,pl),Fmr=i(pl),Y1e=n(pl,"P",{});var b_t=s(Y1e);Tmr=r(b_t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),b_t.forEach(t),Mmr=i(pl),en=n(pl,"P",{});var I3=s(en);Emr=r(I3,"The model class to instantiate is selected based on the "),K1e=n(I3,"CODE",{});var v_t=s(K1e);Cmr=r(v_t,"model_type"),v_t.forEach(t),wmr=r(I3,` property of the config object (either
passed as an argument or loaded from `),Z1e=n(I3,"CODE",{});var F_t=s(Z1e);Amr=r(F_t,"pretrained_model_name_or_path"),F_t.forEach(t),ymr=r(I3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e8e=n(I3,"CODE",{});var T_t=s(e8e);Lmr=r(T_t,"pretrained_model_name_or_path"),T_t.forEach(t),xmr=r(I3,":"),I3.forEach(t),$mr=i(pl),ie=n(pl,"UL",{});var fe=s(ie);UT=n(fe,"LI",{});var _$e=s(UT);o8e=n(_$e,"STRONG",{});var M_t=s(o8e);kmr=r(M_t,"albert"),M_t.forEach(t),Smr=r(_$e," \u2014 "),iQ=n(_$e,"A",{href:!0});var E_t=s(iQ);Rmr=r(E_t,"TFAlbertForMaskedLM"),E_t.forEach(t),Bmr=r(_$e," (ALBERT model)"),_$e.forEach(t),Pmr=i(fe),JT=n(fe,"LI",{});var b$e=s(JT);r8e=n(b$e,"STRONG",{});var C_t=s(r8e);Imr=r(C_t,"bert"),C_t.forEach(t),qmr=r(b$e," \u2014 "),dQ=n(b$e,"A",{href:!0});var w_t=s(dQ);Nmr=r(w_t,"TFBertForMaskedLM"),w_t.forEach(t),jmr=r(b$e," (BERT model)"),b$e.forEach(t),Dmr=i(fe),YT=n(fe,"LI",{});var v$e=s(YT);t8e=n(v$e,"STRONG",{});var A_t=s(t8e);Gmr=r(A_t,"camembert"),A_t.forEach(t),Omr=r(v$e," \u2014 "),cQ=n(v$e,"A",{href:!0});var y_t=s(cQ);Vmr=r(y_t,"TFCamembertForMaskedLM"),y_t.forEach(t),Xmr=r(v$e," (CamemBERT model)"),v$e.forEach(t),zmr=i(fe),KT=n(fe,"LI",{});var F$e=s(KT);a8e=n(F$e,"STRONG",{});var L_t=s(a8e);Qmr=r(L_t,"convbert"),L_t.forEach(t),Wmr=r(F$e," \u2014 "),fQ=n(F$e,"A",{href:!0});var x_t=s(fQ);Hmr=r(x_t,"TFConvBertForMaskedLM"),x_t.forEach(t),Umr=r(F$e," (ConvBERT model)"),F$e.forEach(t),Jmr=i(fe),ZT=n(fe,"LI",{});var T$e=s(ZT);n8e=n(T$e,"STRONG",{});var $_t=s(n8e);Ymr=r($_t,"deberta"),$_t.forEach(t),Kmr=r(T$e," \u2014 "),mQ=n(T$e,"A",{href:!0});var k_t=s(mQ);Zmr=r(k_t,"TFDebertaForMaskedLM"),k_t.forEach(t),egr=r(T$e," (DeBERTa model)"),T$e.forEach(t),ogr=i(fe),e9=n(fe,"LI",{});var M$e=s(e9);s8e=n(M$e,"STRONG",{});var S_t=s(s8e);rgr=r(S_t,"deberta-v2"),S_t.forEach(t),tgr=r(M$e," \u2014 "),gQ=n(M$e,"A",{href:!0});var R_t=s(gQ);agr=r(R_t,"TFDebertaV2ForMaskedLM"),R_t.forEach(t),ngr=r(M$e," (DeBERTa-v2 model)"),M$e.forEach(t),sgr=i(fe),o9=n(fe,"LI",{});var E$e=s(o9);l8e=n(E$e,"STRONG",{});var B_t=s(l8e);lgr=r(B_t,"distilbert"),B_t.forEach(t),igr=r(E$e," \u2014 "),hQ=n(E$e,"A",{href:!0});var P_t=s(hQ);dgr=r(P_t,"TFDistilBertForMaskedLM"),P_t.forEach(t),cgr=r(E$e," (DistilBERT model)"),E$e.forEach(t),fgr=i(fe),r9=n(fe,"LI",{});var C$e=s(r9);i8e=n(C$e,"STRONG",{});var I_t=s(i8e);mgr=r(I_t,"electra"),I_t.forEach(t),ggr=r(C$e," \u2014 "),pQ=n(C$e,"A",{href:!0});var q_t=s(pQ);hgr=r(q_t,"TFElectraForMaskedLM"),q_t.forEach(t),pgr=r(C$e," (ELECTRA model)"),C$e.forEach(t),ugr=i(fe),t9=n(fe,"LI",{});var w$e=s(t9);d8e=n(w$e,"STRONG",{});var N_t=s(d8e);_gr=r(N_t,"flaubert"),N_t.forEach(t),bgr=r(w$e," \u2014 "),uQ=n(w$e,"A",{href:!0});var j_t=s(uQ);vgr=r(j_t,"TFFlaubertWithLMHeadModel"),j_t.forEach(t),Fgr=r(w$e," (FlauBERT model)"),w$e.forEach(t),Tgr=i(fe),a9=n(fe,"LI",{});var A$e=s(a9);c8e=n(A$e,"STRONG",{});var D_t=s(c8e);Mgr=r(D_t,"funnel"),D_t.forEach(t),Egr=r(A$e," \u2014 "),_Q=n(A$e,"A",{href:!0});var G_t=s(_Q);Cgr=r(G_t,"TFFunnelForMaskedLM"),G_t.forEach(t),wgr=r(A$e," (Funnel Transformer model)"),A$e.forEach(t),Agr=i(fe),n9=n(fe,"LI",{});var y$e=s(n9);f8e=n(y$e,"STRONG",{});var O_t=s(f8e);ygr=r(O_t,"layoutlm"),O_t.forEach(t),Lgr=r(y$e," \u2014 "),bQ=n(y$e,"A",{href:!0});var V_t=s(bQ);xgr=r(V_t,"TFLayoutLMForMaskedLM"),V_t.forEach(t),$gr=r(y$e," (LayoutLM model)"),y$e.forEach(t),kgr=i(fe),s9=n(fe,"LI",{});var L$e=s(s9);m8e=n(L$e,"STRONG",{});var X_t=s(m8e);Sgr=r(X_t,"longformer"),X_t.forEach(t),Rgr=r(L$e," \u2014 "),vQ=n(L$e,"A",{href:!0});var z_t=s(vQ);Bgr=r(z_t,"TFLongformerForMaskedLM"),z_t.forEach(t),Pgr=r(L$e," (Longformer model)"),L$e.forEach(t),Igr=i(fe),l9=n(fe,"LI",{});var x$e=s(l9);g8e=n(x$e,"STRONG",{});var Q_t=s(g8e);qgr=r(Q_t,"mobilebert"),Q_t.forEach(t),Ngr=r(x$e," \u2014 "),FQ=n(x$e,"A",{href:!0});var W_t=s(FQ);jgr=r(W_t,"TFMobileBertForMaskedLM"),W_t.forEach(t),Dgr=r(x$e," (MobileBERT model)"),x$e.forEach(t),Ggr=i(fe),i9=n(fe,"LI",{});var $$e=s(i9);h8e=n($$e,"STRONG",{});var H_t=s(h8e);Ogr=r(H_t,"mpnet"),H_t.forEach(t),Vgr=r($$e," \u2014 "),TQ=n($$e,"A",{href:!0});var U_t=s(TQ);Xgr=r(U_t,"TFMPNetForMaskedLM"),U_t.forEach(t),zgr=r($$e," (MPNet model)"),$$e.forEach(t),Qgr=i(fe),d9=n(fe,"LI",{});var k$e=s(d9);p8e=n(k$e,"STRONG",{});var J_t=s(p8e);Wgr=r(J_t,"rembert"),J_t.forEach(t),Hgr=r(k$e," \u2014 "),MQ=n(k$e,"A",{href:!0});var Y_t=s(MQ);Ugr=r(Y_t,"TFRemBertForMaskedLM"),Y_t.forEach(t),Jgr=r(k$e," (RemBERT model)"),k$e.forEach(t),Ygr=i(fe),c9=n(fe,"LI",{});var S$e=s(c9);u8e=n(S$e,"STRONG",{});var K_t=s(u8e);Kgr=r(K_t,"roberta"),K_t.forEach(t),Zgr=r(S$e," \u2014 "),EQ=n(S$e,"A",{href:!0});var Z_t=s(EQ);ehr=r(Z_t,"TFRobertaForMaskedLM"),Z_t.forEach(t),ohr=r(S$e," (RoBERTa model)"),S$e.forEach(t),rhr=i(fe),f9=n(fe,"LI",{});var R$e=s(f9);_8e=n(R$e,"STRONG",{});var e1t=s(_8e);thr=r(e1t,"roformer"),e1t.forEach(t),ahr=r(R$e," \u2014 "),CQ=n(R$e,"A",{href:!0});var o1t=s(CQ);nhr=r(o1t,"TFRoFormerForMaskedLM"),o1t.forEach(t),shr=r(R$e," (RoFormer model)"),R$e.forEach(t),lhr=i(fe),m9=n(fe,"LI",{});var B$e=s(m9);b8e=n(B$e,"STRONG",{});var r1t=s(b8e);ihr=r(r1t,"tapas"),r1t.forEach(t),dhr=r(B$e," \u2014 "),wQ=n(B$e,"A",{href:!0});var t1t=s(wQ);chr=r(t1t,"TFTapasForMaskedLM"),t1t.forEach(t),fhr=r(B$e," (TAPAS model)"),B$e.forEach(t),mhr=i(fe),g9=n(fe,"LI",{});var P$e=s(g9);v8e=n(P$e,"STRONG",{});var a1t=s(v8e);ghr=r(a1t,"xlm"),a1t.forEach(t),hhr=r(P$e," \u2014 "),AQ=n(P$e,"A",{href:!0});var n1t=s(AQ);phr=r(n1t,"TFXLMWithLMHeadModel"),n1t.forEach(t),uhr=r(P$e," (XLM model)"),P$e.forEach(t),_hr=i(fe),h9=n(fe,"LI",{});var I$e=s(h9);F8e=n(I$e,"STRONG",{});var s1t=s(F8e);bhr=r(s1t,"xlm-roberta"),s1t.forEach(t),vhr=r(I$e," \u2014 "),yQ=n(I$e,"A",{href:!0});var l1t=s(yQ);Fhr=r(l1t,"TFXLMRobertaForMaskedLM"),l1t.forEach(t),Thr=r(I$e," (XLM-RoBERTa model)"),I$e.forEach(t),fe.forEach(t),Mhr=i(pl),T(p9.$$.fragment,pl),pl.forEach(t),hl.forEach(t),qPe=i(f),Wd=n(f,"H2",{class:!0});var Gqe=s(Wd);u9=n(Gqe,"A",{id:!0,class:!0,href:!0});var i1t=s(u9);T8e=n(i1t,"SPAN",{});var d1t=s(T8e);T(Ry.$$.fragment,d1t),d1t.forEach(t),i1t.forEach(t),Ehr=i(Gqe),M8e=n(Gqe,"SPAN",{});var c1t=s(M8e);Chr=r(c1t,"TFAutoModelForSeq2SeqLM"),c1t.forEach(t),Gqe.forEach(t),NPe=i(f),rr=n(f,"DIV",{class:!0});var ul=s(rr);T(By.$$.fragment,ul),whr=i(ul),Hd=n(ul,"P",{});var EK=s(Hd);Ahr=r(EK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),LQ=n(EK,"A",{href:!0});var f1t=s(LQ);yhr=r(f1t,"from_pretrained()"),f1t.forEach(t),Lhr=r(EK," class method or the "),xQ=n(EK,"A",{href:!0});var m1t=s(xQ);xhr=r(m1t,"from_config()"),m1t.forEach(t),$hr=r(EK,` class
method.`),EK.forEach(t),khr=i(ul),Py=n(ul,"P",{});var Oqe=s(Py);Shr=r(Oqe,"This class cannot be instantiated directly using "),E8e=n(Oqe,"CODE",{});var g1t=s(E8e);Rhr=r(g1t,"__init__()"),g1t.forEach(t),Bhr=r(Oqe," (throws an error)."),Oqe.forEach(t),Phr=i(ul),Lt=n(ul,"DIV",{class:!0});var q3=s(Lt);T(Iy.$$.fragment,q3),Ihr=i(q3),C8e=n(q3,"P",{});var h1t=s(C8e);qhr=r(h1t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),h1t.forEach(t),Nhr=i(q3),Ud=n(q3,"P",{});var CK=s(Ud);jhr=r(CK,`Note:
Loading a model from its configuration file does `),w8e=n(CK,"STRONG",{});var p1t=s(w8e);Dhr=r(p1t,"not"),p1t.forEach(t),Ghr=r(CK,` load the model weights. It only affects the
model\u2019s configuration. Use `),$Q=n(CK,"A",{href:!0});var u1t=s($Q);Ohr=r(u1t,"from_pretrained()"),u1t.forEach(t),Vhr=r(CK," to load the model weights."),CK.forEach(t),Xhr=i(q3),T(_9.$$.fragment,q3),q3.forEach(t),zhr=i(ul),xr=n(ul,"DIV",{class:!0});var _l=s(xr);T(qy.$$.fragment,_l),Qhr=i(_l),A8e=n(_l,"P",{});var _1t=s(A8e);Whr=r(_1t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),_1t.forEach(t),Hhr=i(_l),on=n(_l,"P",{});var N3=s(on);Uhr=r(N3,"The model class to instantiate is selected based on the "),y8e=n(N3,"CODE",{});var b1t=s(y8e);Jhr=r(b1t,"model_type"),b1t.forEach(t),Yhr=r(N3,` property of the config object (either
passed as an argument or loaded from `),L8e=n(N3,"CODE",{});var v1t=s(L8e);Khr=r(v1t,"pretrained_model_name_or_path"),v1t.forEach(t),Zhr=r(N3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x8e=n(N3,"CODE",{});var F1t=s(x8e);epr=r(F1t,"pretrained_model_name_or_path"),F1t.forEach(t),opr=r(N3,":"),N3.forEach(t),rpr=i(_l),ye=n(_l,"UL",{});var Re=s(ye);b9=n(Re,"LI",{});var q$e=s(b9);$8e=n(q$e,"STRONG",{});var T1t=s($8e);tpr=r(T1t,"bart"),T1t.forEach(t),apr=r(q$e," \u2014 "),kQ=n(q$e,"A",{href:!0});var M1t=s(kQ);npr=r(M1t,"TFBartForConditionalGeneration"),M1t.forEach(t),spr=r(q$e," (BART model)"),q$e.forEach(t),lpr=i(Re),v9=n(Re,"LI",{});var N$e=s(v9);k8e=n(N$e,"STRONG",{});var E1t=s(k8e);ipr=r(E1t,"blenderbot"),E1t.forEach(t),dpr=r(N$e," \u2014 "),SQ=n(N$e,"A",{href:!0});var C1t=s(SQ);cpr=r(C1t,"TFBlenderbotForConditionalGeneration"),C1t.forEach(t),fpr=r(N$e," (Blenderbot model)"),N$e.forEach(t),mpr=i(Re),F9=n(Re,"LI",{});var j$e=s(F9);S8e=n(j$e,"STRONG",{});var w1t=s(S8e);gpr=r(w1t,"blenderbot-small"),w1t.forEach(t),hpr=r(j$e," \u2014 "),RQ=n(j$e,"A",{href:!0});var A1t=s(RQ);ppr=r(A1t,"TFBlenderbotSmallForConditionalGeneration"),A1t.forEach(t),upr=r(j$e," (BlenderbotSmall model)"),j$e.forEach(t),_pr=i(Re),T9=n(Re,"LI",{});var D$e=s(T9);R8e=n(D$e,"STRONG",{});var y1t=s(R8e);bpr=r(y1t,"encoder-decoder"),y1t.forEach(t),vpr=r(D$e," \u2014 "),BQ=n(D$e,"A",{href:!0});var L1t=s(BQ);Fpr=r(L1t,"TFEncoderDecoderModel"),L1t.forEach(t),Tpr=r(D$e," (Encoder decoder model)"),D$e.forEach(t),Mpr=i(Re),M9=n(Re,"LI",{});var G$e=s(M9);B8e=n(G$e,"STRONG",{});var x1t=s(B8e);Epr=r(x1t,"led"),x1t.forEach(t),Cpr=r(G$e," \u2014 "),PQ=n(G$e,"A",{href:!0});var $1t=s(PQ);wpr=r($1t,"TFLEDForConditionalGeneration"),$1t.forEach(t),Apr=r(G$e," (LED model)"),G$e.forEach(t),ypr=i(Re),E9=n(Re,"LI",{});var O$e=s(E9);P8e=n(O$e,"STRONG",{});var k1t=s(P8e);Lpr=r(k1t,"marian"),k1t.forEach(t),xpr=r(O$e," \u2014 "),IQ=n(O$e,"A",{href:!0});var S1t=s(IQ);$pr=r(S1t,"TFMarianMTModel"),S1t.forEach(t),kpr=r(O$e," (Marian model)"),O$e.forEach(t),Spr=i(Re),C9=n(Re,"LI",{});var V$e=s(C9);I8e=n(V$e,"STRONG",{});var R1t=s(I8e);Rpr=r(R1t,"mbart"),R1t.forEach(t),Bpr=r(V$e," \u2014 "),qQ=n(V$e,"A",{href:!0});var B1t=s(qQ);Ppr=r(B1t,"TFMBartForConditionalGeneration"),B1t.forEach(t),Ipr=r(V$e," (mBART model)"),V$e.forEach(t),qpr=i(Re),w9=n(Re,"LI",{});var X$e=s(w9);q8e=n(X$e,"STRONG",{});var P1t=s(q8e);Npr=r(P1t,"mt5"),P1t.forEach(t),jpr=r(X$e," \u2014 "),NQ=n(X$e,"A",{href:!0});var I1t=s(NQ);Dpr=r(I1t,"TFMT5ForConditionalGeneration"),I1t.forEach(t),Gpr=r(X$e," (mT5 model)"),X$e.forEach(t),Opr=i(Re),A9=n(Re,"LI",{});var z$e=s(A9);N8e=n(z$e,"STRONG",{});var q1t=s(N8e);Vpr=r(q1t,"pegasus"),q1t.forEach(t),Xpr=r(z$e," \u2014 "),jQ=n(z$e,"A",{href:!0});var N1t=s(jQ);zpr=r(N1t,"TFPegasusForConditionalGeneration"),N1t.forEach(t),Qpr=r(z$e," (Pegasus model)"),z$e.forEach(t),Wpr=i(Re),y9=n(Re,"LI",{});var Q$e=s(y9);j8e=n(Q$e,"STRONG",{});var j1t=s(j8e);Hpr=r(j1t,"t5"),j1t.forEach(t),Upr=r(Q$e," \u2014 "),DQ=n(Q$e,"A",{href:!0});var D1t=s(DQ);Jpr=r(D1t,"TFT5ForConditionalGeneration"),D1t.forEach(t),Ypr=r(Q$e," (T5 model)"),Q$e.forEach(t),Re.forEach(t),Kpr=i(_l),T(L9.$$.fragment,_l),_l.forEach(t),ul.forEach(t),jPe=i(f),Jd=n(f,"H2",{class:!0});var Vqe=s(Jd);x9=n(Vqe,"A",{id:!0,class:!0,href:!0});var G1t=s(x9);D8e=n(G1t,"SPAN",{});var O1t=s(D8e);T(Ny.$$.fragment,O1t),O1t.forEach(t),G1t.forEach(t),Zpr=i(Vqe),G8e=n(Vqe,"SPAN",{});var V1t=s(G8e);eur=r(V1t,"TFAutoModelForSequenceClassification"),V1t.forEach(t),Vqe.forEach(t),DPe=i(f),tr=n(f,"DIV",{class:!0});var bl=s(tr);T(jy.$$.fragment,bl),our=i(bl),Yd=n(bl,"P",{});var wK=s(Yd);rur=r(wK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),GQ=n(wK,"A",{href:!0});var X1t=s(GQ);tur=r(X1t,"from_pretrained()"),X1t.forEach(t),aur=r(wK," class method or the "),OQ=n(wK,"A",{href:!0});var z1t=s(OQ);nur=r(z1t,"from_config()"),z1t.forEach(t),sur=r(wK,` class
method.`),wK.forEach(t),lur=i(bl),Dy=n(bl,"P",{});var Xqe=s(Dy);iur=r(Xqe,"This class cannot be instantiated directly using "),O8e=n(Xqe,"CODE",{});var Q1t=s(O8e);dur=r(Q1t,"__init__()"),Q1t.forEach(t),cur=r(Xqe," (throws an error)."),Xqe.forEach(t),fur=i(bl),xt=n(bl,"DIV",{class:!0});var j3=s(xt);T(Gy.$$.fragment,j3),mur=i(j3),V8e=n(j3,"P",{});var W1t=s(V8e);gur=r(W1t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),W1t.forEach(t),hur=i(j3),Kd=n(j3,"P",{});var AK=s(Kd);pur=r(AK,`Note:
Loading a model from its configuration file does `),X8e=n(AK,"STRONG",{});var H1t=s(X8e);uur=r(H1t,"not"),H1t.forEach(t),_ur=r(AK,` load the model weights. It only affects the
model\u2019s configuration. Use `),VQ=n(AK,"A",{href:!0});var U1t=s(VQ);bur=r(U1t,"from_pretrained()"),U1t.forEach(t),vur=r(AK," to load the model weights."),AK.forEach(t),Fur=i(j3),T($9.$$.fragment,j3),j3.forEach(t),Tur=i(bl),$r=n(bl,"DIV",{class:!0});var vl=s($r);T(Oy.$$.fragment,vl),Mur=i(vl),z8e=n(vl,"P",{});var J1t=s(z8e);Eur=r(J1t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),J1t.forEach(t),Cur=i(vl),rn=n(vl,"P",{});var D3=s(rn);wur=r(D3,"The model class to instantiate is selected based on the "),Q8e=n(D3,"CODE",{});var Y1t=s(Q8e);Aur=r(Y1t,"model_type"),Y1t.forEach(t),yur=r(D3,` property of the config object (either
passed as an argument or loaded from `),W8e=n(D3,"CODE",{});var K1t=s(W8e);Lur=r(K1t,"pretrained_model_name_or_path"),K1t.forEach(t),xur=r(D3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H8e=n(D3,"CODE",{});var Z1t=s(H8e);$ur=r(Z1t,"pretrained_model_name_or_path"),Z1t.forEach(t),kur=r(D3,":"),D3.forEach(t),Sur=i(vl),Z=n(vl,"UL",{});var re=s(Z);k9=n(re,"LI",{});var W$e=s(k9);U8e=n(W$e,"STRONG",{});var e8t=s(U8e);Rur=r(e8t,"albert"),e8t.forEach(t),Bur=r(W$e," \u2014 "),XQ=n(W$e,"A",{href:!0});var o8t=s(XQ);Pur=r(o8t,"TFAlbertForSequenceClassification"),o8t.forEach(t),Iur=r(W$e," (ALBERT model)"),W$e.forEach(t),qur=i(re),S9=n(re,"LI",{});var H$e=s(S9);J8e=n(H$e,"STRONG",{});var r8t=s(J8e);Nur=r(r8t,"bert"),r8t.forEach(t),jur=r(H$e," \u2014 "),zQ=n(H$e,"A",{href:!0});var t8t=s(zQ);Dur=r(t8t,"TFBertForSequenceClassification"),t8t.forEach(t),Gur=r(H$e," (BERT model)"),H$e.forEach(t),Our=i(re),R9=n(re,"LI",{});var U$e=s(R9);Y8e=n(U$e,"STRONG",{});var a8t=s(Y8e);Vur=r(a8t,"camembert"),a8t.forEach(t),Xur=r(U$e," \u2014 "),QQ=n(U$e,"A",{href:!0});var n8t=s(QQ);zur=r(n8t,"TFCamembertForSequenceClassification"),n8t.forEach(t),Qur=r(U$e," (CamemBERT model)"),U$e.forEach(t),Wur=i(re),B9=n(re,"LI",{});var J$e=s(B9);K8e=n(J$e,"STRONG",{});var s8t=s(K8e);Hur=r(s8t,"convbert"),s8t.forEach(t),Uur=r(J$e," \u2014 "),WQ=n(J$e,"A",{href:!0});var l8t=s(WQ);Jur=r(l8t,"TFConvBertForSequenceClassification"),l8t.forEach(t),Yur=r(J$e," (ConvBERT model)"),J$e.forEach(t),Kur=i(re),P9=n(re,"LI",{});var Y$e=s(P9);Z8e=n(Y$e,"STRONG",{});var i8t=s(Z8e);Zur=r(i8t,"ctrl"),i8t.forEach(t),e_r=r(Y$e," \u2014 "),HQ=n(Y$e,"A",{href:!0});var d8t=s(HQ);o_r=r(d8t,"TFCTRLForSequenceClassification"),d8t.forEach(t),r_r=r(Y$e," (CTRL model)"),Y$e.forEach(t),t_r=i(re),I9=n(re,"LI",{});var K$e=s(I9);ebe=n(K$e,"STRONG",{});var c8t=s(ebe);a_r=r(c8t,"deberta"),c8t.forEach(t),n_r=r(K$e," \u2014 "),UQ=n(K$e,"A",{href:!0});var f8t=s(UQ);s_r=r(f8t,"TFDebertaForSequenceClassification"),f8t.forEach(t),l_r=r(K$e," (DeBERTa model)"),K$e.forEach(t),i_r=i(re),q9=n(re,"LI",{});var Z$e=s(q9);obe=n(Z$e,"STRONG",{});var m8t=s(obe);d_r=r(m8t,"deberta-v2"),m8t.forEach(t),c_r=r(Z$e," \u2014 "),JQ=n(Z$e,"A",{href:!0});var g8t=s(JQ);f_r=r(g8t,"TFDebertaV2ForSequenceClassification"),g8t.forEach(t),m_r=r(Z$e," (DeBERTa-v2 model)"),Z$e.forEach(t),g_r=i(re),N9=n(re,"LI",{});var eke=s(N9);rbe=n(eke,"STRONG",{});var h8t=s(rbe);h_r=r(h8t,"distilbert"),h8t.forEach(t),p_r=r(eke," \u2014 "),YQ=n(eke,"A",{href:!0});var p8t=s(YQ);u_r=r(p8t,"TFDistilBertForSequenceClassification"),p8t.forEach(t),__r=r(eke," (DistilBERT model)"),eke.forEach(t),b_r=i(re),j9=n(re,"LI",{});var oke=s(j9);tbe=n(oke,"STRONG",{});var u8t=s(tbe);v_r=r(u8t,"electra"),u8t.forEach(t),F_r=r(oke," \u2014 "),KQ=n(oke,"A",{href:!0});var _8t=s(KQ);T_r=r(_8t,"TFElectraForSequenceClassification"),_8t.forEach(t),M_r=r(oke," (ELECTRA model)"),oke.forEach(t),E_r=i(re),D9=n(re,"LI",{});var rke=s(D9);abe=n(rke,"STRONG",{});var b8t=s(abe);C_r=r(b8t,"flaubert"),b8t.forEach(t),w_r=r(rke," \u2014 "),ZQ=n(rke,"A",{href:!0});var v8t=s(ZQ);A_r=r(v8t,"TFFlaubertForSequenceClassification"),v8t.forEach(t),y_r=r(rke," (FlauBERT model)"),rke.forEach(t),L_r=i(re),G9=n(re,"LI",{});var tke=s(G9);nbe=n(tke,"STRONG",{});var F8t=s(nbe);x_r=r(F8t,"funnel"),F8t.forEach(t),$_r=r(tke," \u2014 "),eW=n(tke,"A",{href:!0});var T8t=s(eW);k_r=r(T8t,"TFFunnelForSequenceClassification"),T8t.forEach(t),S_r=r(tke," (Funnel Transformer model)"),tke.forEach(t),R_r=i(re),O9=n(re,"LI",{});var ake=s(O9);sbe=n(ake,"STRONG",{});var M8t=s(sbe);B_r=r(M8t,"gpt2"),M8t.forEach(t),P_r=r(ake," \u2014 "),oW=n(ake,"A",{href:!0});var E8t=s(oW);I_r=r(E8t,"TFGPT2ForSequenceClassification"),E8t.forEach(t),q_r=r(ake," (OpenAI GPT-2 model)"),ake.forEach(t),N_r=i(re),V9=n(re,"LI",{});var nke=s(V9);lbe=n(nke,"STRONG",{});var C8t=s(lbe);j_r=r(C8t,"gptj"),C8t.forEach(t),D_r=r(nke," \u2014 "),rW=n(nke,"A",{href:!0});var w8t=s(rW);G_r=r(w8t,"TFGPTJForSequenceClassification"),w8t.forEach(t),O_r=r(nke," (GPT-J model)"),nke.forEach(t),V_r=i(re),X9=n(re,"LI",{});var ske=s(X9);ibe=n(ske,"STRONG",{});var A8t=s(ibe);X_r=r(A8t,"layoutlm"),A8t.forEach(t),z_r=r(ske," \u2014 "),tW=n(ske,"A",{href:!0});var y8t=s(tW);Q_r=r(y8t,"TFLayoutLMForSequenceClassification"),y8t.forEach(t),W_r=r(ske," (LayoutLM model)"),ske.forEach(t),H_r=i(re),z9=n(re,"LI",{});var lke=s(z9);dbe=n(lke,"STRONG",{});var L8t=s(dbe);U_r=r(L8t,"longformer"),L8t.forEach(t),J_r=r(lke," \u2014 "),aW=n(lke,"A",{href:!0});var x8t=s(aW);Y_r=r(x8t,"TFLongformerForSequenceClassification"),x8t.forEach(t),K_r=r(lke," (Longformer model)"),lke.forEach(t),Z_r=i(re),Q9=n(re,"LI",{});var ike=s(Q9);cbe=n(ike,"STRONG",{});var $8t=s(cbe);e1r=r($8t,"mobilebert"),$8t.forEach(t),o1r=r(ike," \u2014 "),nW=n(ike,"A",{href:!0});var k8t=s(nW);r1r=r(k8t,"TFMobileBertForSequenceClassification"),k8t.forEach(t),t1r=r(ike," (MobileBERT model)"),ike.forEach(t),a1r=i(re),W9=n(re,"LI",{});var dke=s(W9);fbe=n(dke,"STRONG",{});var S8t=s(fbe);n1r=r(S8t,"mpnet"),S8t.forEach(t),s1r=r(dke," \u2014 "),sW=n(dke,"A",{href:!0});var R8t=s(sW);l1r=r(R8t,"TFMPNetForSequenceClassification"),R8t.forEach(t),i1r=r(dke," (MPNet model)"),dke.forEach(t),d1r=i(re),H9=n(re,"LI",{});var cke=s(H9);mbe=n(cke,"STRONG",{});var B8t=s(mbe);c1r=r(B8t,"openai-gpt"),B8t.forEach(t),f1r=r(cke," \u2014 "),lW=n(cke,"A",{href:!0});var P8t=s(lW);m1r=r(P8t,"TFOpenAIGPTForSequenceClassification"),P8t.forEach(t),g1r=r(cke," (OpenAI GPT model)"),cke.forEach(t),h1r=i(re),U9=n(re,"LI",{});var fke=s(U9);gbe=n(fke,"STRONG",{});var I8t=s(gbe);p1r=r(I8t,"rembert"),I8t.forEach(t),u1r=r(fke," \u2014 "),iW=n(fke,"A",{href:!0});var q8t=s(iW);_1r=r(q8t,"TFRemBertForSequenceClassification"),q8t.forEach(t),b1r=r(fke," (RemBERT model)"),fke.forEach(t),v1r=i(re),J9=n(re,"LI",{});var mke=s(J9);hbe=n(mke,"STRONG",{});var N8t=s(hbe);F1r=r(N8t,"roberta"),N8t.forEach(t),T1r=r(mke," \u2014 "),dW=n(mke,"A",{href:!0});var j8t=s(dW);M1r=r(j8t,"TFRobertaForSequenceClassification"),j8t.forEach(t),E1r=r(mke," (RoBERTa model)"),mke.forEach(t),C1r=i(re),Y9=n(re,"LI",{});var gke=s(Y9);pbe=n(gke,"STRONG",{});var D8t=s(pbe);w1r=r(D8t,"roformer"),D8t.forEach(t),A1r=r(gke," \u2014 "),cW=n(gke,"A",{href:!0});var G8t=s(cW);y1r=r(G8t,"TFRoFormerForSequenceClassification"),G8t.forEach(t),L1r=r(gke," (RoFormer model)"),gke.forEach(t),x1r=i(re),K9=n(re,"LI",{});var hke=s(K9);ube=n(hke,"STRONG",{});var O8t=s(ube);$1r=r(O8t,"tapas"),O8t.forEach(t),k1r=r(hke," \u2014 "),fW=n(hke,"A",{href:!0});var V8t=s(fW);S1r=r(V8t,"TFTapasForSequenceClassification"),V8t.forEach(t),R1r=r(hke," (TAPAS model)"),hke.forEach(t),B1r=i(re),Z9=n(re,"LI",{});var pke=s(Z9);_be=n(pke,"STRONG",{});var X8t=s(_be);P1r=r(X8t,"transfo-xl"),X8t.forEach(t),I1r=r(pke," \u2014 "),mW=n(pke,"A",{href:!0});var z8t=s(mW);q1r=r(z8t,"TFTransfoXLForSequenceClassification"),z8t.forEach(t),N1r=r(pke," (Transformer-XL model)"),pke.forEach(t),j1r=i(re),eM=n(re,"LI",{});var uke=s(eM);bbe=n(uke,"STRONG",{});var Q8t=s(bbe);D1r=r(Q8t,"xlm"),Q8t.forEach(t),G1r=r(uke," \u2014 "),gW=n(uke,"A",{href:!0});var W8t=s(gW);O1r=r(W8t,"TFXLMForSequenceClassification"),W8t.forEach(t),V1r=r(uke," (XLM model)"),uke.forEach(t),X1r=i(re),oM=n(re,"LI",{});var _ke=s(oM);vbe=n(_ke,"STRONG",{});var H8t=s(vbe);z1r=r(H8t,"xlm-roberta"),H8t.forEach(t),Q1r=r(_ke," \u2014 "),hW=n(_ke,"A",{href:!0});var U8t=s(hW);W1r=r(U8t,"TFXLMRobertaForSequenceClassification"),U8t.forEach(t),H1r=r(_ke," (XLM-RoBERTa model)"),_ke.forEach(t),U1r=i(re),rM=n(re,"LI",{});var bke=s(rM);Fbe=n(bke,"STRONG",{});var J8t=s(Fbe);J1r=r(J8t,"xlnet"),J8t.forEach(t),Y1r=r(bke," \u2014 "),pW=n(bke,"A",{href:!0});var Y8t=s(pW);K1r=r(Y8t,"TFXLNetForSequenceClassification"),Y8t.forEach(t),Z1r=r(bke," (XLNet model)"),bke.forEach(t),re.forEach(t),e8r=i(vl),T(tM.$$.fragment,vl),vl.forEach(t),bl.forEach(t),GPe=i(f),Zd=n(f,"H2",{class:!0});var zqe=s(Zd);aM=n(zqe,"A",{id:!0,class:!0,href:!0});var K8t=s(aM);Tbe=n(K8t,"SPAN",{});var Z8t=s(Tbe);T(Vy.$$.fragment,Z8t),Z8t.forEach(t),K8t.forEach(t),o8r=i(zqe),Mbe=n(zqe,"SPAN",{});var ebt=s(Mbe);r8r=r(ebt,"TFAutoModelForMultipleChoice"),ebt.forEach(t),zqe.forEach(t),OPe=i(f),ar=n(f,"DIV",{class:!0});var Fl=s(ar);T(Xy.$$.fragment,Fl),t8r=i(Fl),ec=n(Fl,"P",{});var yK=s(ec);a8r=r(yK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),uW=n(yK,"A",{href:!0});var obt=s(uW);n8r=r(obt,"from_pretrained()"),obt.forEach(t),s8r=r(yK," class method or the "),_W=n(yK,"A",{href:!0});var rbt=s(_W);l8r=r(rbt,"from_config()"),rbt.forEach(t),i8r=r(yK,` class
method.`),yK.forEach(t),d8r=i(Fl),zy=n(Fl,"P",{});var Qqe=s(zy);c8r=r(Qqe,"This class cannot be instantiated directly using "),Ebe=n(Qqe,"CODE",{});var tbt=s(Ebe);f8r=r(tbt,"__init__()"),tbt.forEach(t),m8r=r(Qqe," (throws an error)."),Qqe.forEach(t),g8r=i(Fl),$t=n(Fl,"DIV",{class:!0});var G3=s($t);T(Qy.$$.fragment,G3),h8r=i(G3),Cbe=n(G3,"P",{});var abt=s(Cbe);p8r=r(abt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),abt.forEach(t),u8r=i(G3),oc=n(G3,"P",{});var LK=s(oc);_8r=r(LK,`Note:
Loading a model from its configuration file does `),wbe=n(LK,"STRONG",{});var nbt=s(wbe);b8r=r(nbt,"not"),nbt.forEach(t),v8r=r(LK,` load the model weights. It only affects the
model\u2019s configuration. Use `),bW=n(LK,"A",{href:!0});var sbt=s(bW);F8r=r(sbt,"from_pretrained()"),sbt.forEach(t),T8r=r(LK," to load the model weights."),LK.forEach(t),M8r=i(G3),T(nM.$$.fragment,G3),G3.forEach(t),E8r=i(Fl),kr=n(Fl,"DIV",{class:!0});var Tl=s(kr);T(Wy.$$.fragment,Tl),C8r=i(Tl),Abe=n(Tl,"P",{});var lbt=s(Abe);w8r=r(lbt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),lbt.forEach(t),A8r=i(Tl),tn=n(Tl,"P",{});var O3=s(tn);y8r=r(O3,"The model class to instantiate is selected based on the "),ybe=n(O3,"CODE",{});var ibt=s(ybe);L8r=r(ibt,"model_type"),ibt.forEach(t),x8r=r(O3,` property of the config object (either
passed as an argument or loaded from `),Lbe=n(O3,"CODE",{});var dbt=s(Lbe);$8r=r(dbt,"pretrained_model_name_or_path"),dbt.forEach(t),k8r=r(O3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xbe=n(O3,"CODE",{});var cbt=s(xbe);S8r=r(cbt,"pretrained_model_name_or_path"),cbt.forEach(t),R8r=r(O3,":"),O3.forEach(t),B8r=i(Tl),pe=n(Tl,"UL",{});var _e=s(pe);sM=n(_e,"LI",{});var vke=s(sM);$be=n(vke,"STRONG",{});var fbt=s($be);P8r=r(fbt,"albert"),fbt.forEach(t),I8r=r(vke," \u2014 "),vW=n(vke,"A",{href:!0});var mbt=s(vW);q8r=r(mbt,"TFAlbertForMultipleChoice"),mbt.forEach(t),N8r=r(vke," (ALBERT model)"),vke.forEach(t),j8r=i(_e),lM=n(_e,"LI",{});var Fke=s(lM);kbe=n(Fke,"STRONG",{});var gbt=s(kbe);D8r=r(gbt,"bert"),gbt.forEach(t),G8r=r(Fke," \u2014 "),FW=n(Fke,"A",{href:!0});var hbt=s(FW);O8r=r(hbt,"TFBertForMultipleChoice"),hbt.forEach(t),V8r=r(Fke," (BERT model)"),Fke.forEach(t),X8r=i(_e),iM=n(_e,"LI",{});var Tke=s(iM);Sbe=n(Tke,"STRONG",{});var pbt=s(Sbe);z8r=r(pbt,"camembert"),pbt.forEach(t),Q8r=r(Tke," \u2014 "),TW=n(Tke,"A",{href:!0});var ubt=s(TW);W8r=r(ubt,"TFCamembertForMultipleChoice"),ubt.forEach(t),H8r=r(Tke," (CamemBERT model)"),Tke.forEach(t),U8r=i(_e),dM=n(_e,"LI",{});var Mke=s(dM);Rbe=n(Mke,"STRONG",{});var _bt=s(Rbe);J8r=r(_bt,"convbert"),_bt.forEach(t),Y8r=r(Mke," \u2014 "),MW=n(Mke,"A",{href:!0});var bbt=s(MW);K8r=r(bbt,"TFConvBertForMultipleChoice"),bbt.forEach(t),Z8r=r(Mke," (ConvBERT model)"),Mke.forEach(t),ebr=i(_e),cM=n(_e,"LI",{});var Eke=s(cM);Bbe=n(Eke,"STRONG",{});var vbt=s(Bbe);obr=r(vbt,"distilbert"),vbt.forEach(t),rbr=r(Eke," \u2014 "),EW=n(Eke,"A",{href:!0});var Fbt=s(EW);tbr=r(Fbt,"TFDistilBertForMultipleChoice"),Fbt.forEach(t),abr=r(Eke," (DistilBERT model)"),Eke.forEach(t),nbr=i(_e),fM=n(_e,"LI",{});var Cke=s(fM);Pbe=n(Cke,"STRONG",{});var Tbt=s(Pbe);sbr=r(Tbt,"electra"),Tbt.forEach(t),lbr=r(Cke," \u2014 "),CW=n(Cke,"A",{href:!0});var Mbt=s(CW);ibr=r(Mbt,"TFElectraForMultipleChoice"),Mbt.forEach(t),dbr=r(Cke," (ELECTRA model)"),Cke.forEach(t),cbr=i(_e),mM=n(_e,"LI",{});var wke=s(mM);Ibe=n(wke,"STRONG",{});var Ebt=s(Ibe);fbr=r(Ebt,"flaubert"),Ebt.forEach(t),mbr=r(wke," \u2014 "),wW=n(wke,"A",{href:!0});var Cbt=s(wW);gbr=r(Cbt,"TFFlaubertForMultipleChoice"),Cbt.forEach(t),hbr=r(wke," (FlauBERT model)"),wke.forEach(t),pbr=i(_e),gM=n(_e,"LI",{});var Ake=s(gM);qbe=n(Ake,"STRONG",{});var wbt=s(qbe);ubr=r(wbt,"funnel"),wbt.forEach(t),_br=r(Ake," \u2014 "),AW=n(Ake,"A",{href:!0});var Abt=s(AW);bbr=r(Abt,"TFFunnelForMultipleChoice"),Abt.forEach(t),vbr=r(Ake," (Funnel Transformer model)"),Ake.forEach(t),Fbr=i(_e),hM=n(_e,"LI",{});var yke=s(hM);Nbe=n(yke,"STRONG",{});var ybt=s(Nbe);Tbr=r(ybt,"longformer"),ybt.forEach(t),Mbr=r(yke," \u2014 "),yW=n(yke,"A",{href:!0});var Lbt=s(yW);Ebr=r(Lbt,"TFLongformerForMultipleChoice"),Lbt.forEach(t),Cbr=r(yke," (Longformer model)"),yke.forEach(t),wbr=i(_e),pM=n(_e,"LI",{});var Lke=s(pM);jbe=n(Lke,"STRONG",{});var xbt=s(jbe);Abr=r(xbt,"mobilebert"),xbt.forEach(t),ybr=r(Lke," \u2014 "),LW=n(Lke,"A",{href:!0});var $bt=s(LW);Lbr=r($bt,"TFMobileBertForMultipleChoice"),$bt.forEach(t),xbr=r(Lke," (MobileBERT model)"),Lke.forEach(t),$br=i(_e),uM=n(_e,"LI",{});var xke=s(uM);Dbe=n(xke,"STRONG",{});var kbt=s(Dbe);kbr=r(kbt,"mpnet"),kbt.forEach(t),Sbr=r(xke," \u2014 "),xW=n(xke,"A",{href:!0});var Sbt=s(xW);Rbr=r(Sbt,"TFMPNetForMultipleChoice"),Sbt.forEach(t),Bbr=r(xke," (MPNet model)"),xke.forEach(t),Pbr=i(_e),_M=n(_e,"LI",{});var $ke=s(_M);Gbe=n($ke,"STRONG",{});var Rbt=s(Gbe);Ibr=r(Rbt,"rembert"),Rbt.forEach(t),qbr=r($ke," \u2014 "),$W=n($ke,"A",{href:!0});var Bbt=s($W);Nbr=r(Bbt,"TFRemBertForMultipleChoice"),Bbt.forEach(t),jbr=r($ke," (RemBERT model)"),$ke.forEach(t),Dbr=i(_e),bM=n(_e,"LI",{});var kke=s(bM);Obe=n(kke,"STRONG",{});var Pbt=s(Obe);Gbr=r(Pbt,"roberta"),Pbt.forEach(t),Obr=r(kke," \u2014 "),kW=n(kke,"A",{href:!0});var Ibt=s(kW);Vbr=r(Ibt,"TFRobertaForMultipleChoice"),Ibt.forEach(t),Xbr=r(kke," (RoBERTa model)"),kke.forEach(t),zbr=i(_e),vM=n(_e,"LI",{});var Ske=s(vM);Vbe=n(Ske,"STRONG",{});var qbt=s(Vbe);Qbr=r(qbt,"roformer"),qbt.forEach(t),Wbr=r(Ske," \u2014 "),SW=n(Ske,"A",{href:!0});var Nbt=s(SW);Hbr=r(Nbt,"TFRoFormerForMultipleChoice"),Nbt.forEach(t),Ubr=r(Ske," (RoFormer model)"),Ske.forEach(t),Jbr=i(_e),FM=n(_e,"LI",{});var Rke=s(FM);Xbe=n(Rke,"STRONG",{});var jbt=s(Xbe);Ybr=r(jbt,"xlm"),jbt.forEach(t),Kbr=r(Rke," \u2014 "),RW=n(Rke,"A",{href:!0});var Dbt=s(RW);Zbr=r(Dbt,"TFXLMForMultipleChoice"),Dbt.forEach(t),e2r=r(Rke," (XLM model)"),Rke.forEach(t),o2r=i(_e),TM=n(_e,"LI",{});var Bke=s(TM);zbe=n(Bke,"STRONG",{});var Gbt=s(zbe);r2r=r(Gbt,"xlm-roberta"),Gbt.forEach(t),t2r=r(Bke," \u2014 "),BW=n(Bke,"A",{href:!0});var Obt=s(BW);a2r=r(Obt,"TFXLMRobertaForMultipleChoice"),Obt.forEach(t),n2r=r(Bke," (XLM-RoBERTa model)"),Bke.forEach(t),s2r=i(_e),MM=n(_e,"LI",{});var Pke=s(MM);Qbe=n(Pke,"STRONG",{});var Vbt=s(Qbe);l2r=r(Vbt,"xlnet"),Vbt.forEach(t),i2r=r(Pke," \u2014 "),PW=n(Pke,"A",{href:!0});var Xbt=s(PW);d2r=r(Xbt,"TFXLNetForMultipleChoice"),Xbt.forEach(t),c2r=r(Pke," (XLNet model)"),Pke.forEach(t),_e.forEach(t),f2r=i(Tl),T(EM.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),VPe=i(f),rc=n(f,"H2",{class:!0});var Wqe=s(rc);CM=n(Wqe,"A",{id:!0,class:!0,href:!0});var zbt=s(CM);Wbe=n(zbt,"SPAN",{});var Qbt=s(Wbe);T(Hy.$$.fragment,Qbt),Qbt.forEach(t),zbt.forEach(t),m2r=i(Wqe),Hbe=n(Wqe,"SPAN",{});var Wbt=s(Hbe);g2r=r(Wbt,"TFAutoModelForTableQuestionAnswering"),Wbt.forEach(t),Wqe.forEach(t),XPe=i(f),nr=n(f,"DIV",{class:!0});var Ml=s(nr);T(Uy.$$.fragment,Ml),h2r=i(Ml),tc=n(Ml,"P",{});var xK=s(tc);p2r=r(xK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),IW=n(xK,"A",{href:!0});var Hbt=s(IW);u2r=r(Hbt,"from_pretrained()"),Hbt.forEach(t),_2r=r(xK," class method or the "),qW=n(xK,"A",{href:!0});var Ubt=s(qW);b2r=r(Ubt,"from_config()"),Ubt.forEach(t),v2r=r(xK,` class
method.`),xK.forEach(t),F2r=i(Ml),Jy=n(Ml,"P",{});var Hqe=s(Jy);T2r=r(Hqe,"This class cannot be instantiated directly using "),Ube=n(Hqe,"CODE",{});var Jbt=s(Ube);M2r=r(Jbt,"__init__()"),Jbt.forEach(t),E2r=r(Hqe," (throws an error)."),Hqe.forEach(t),C2r=i(Ml),kt=n(Ml,"DIV",{class:!0});var V3=s(kt);T(Yy.$$.fragment,V3),w2r=i(V3),Jbe=n(V3,"P",{});var Ybt=s(Jbe);A2r=r(Ybt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Ybt.forEach(t),y2r=i(V3),ac=n(V3,"P",{});var $K=s(ac);L2r=r($K,`Note:
Loading a model from its configuration file does `),Ybe=n($K,"STRONG",{});var Kbt=s(Ybe);x2r=r(Kbt,"not"),Kbt.forEach(t),$2r=r($K,` load the model weights. It only affects the
model\u2019s configuration. Use `),NW=n($K,"A",{href:!0});var Zbt=s(NW);k2r=r(Zbt,"from_pretrained()"),Zbt.forEach(t),S2r=r($K," to load the model weights."),$K.forEach(t),R2r=i(V3),T(wM.$$.fragment,V3),V3.forEach(t),B2r=i(Ml),Sr=n(Ml,"DIV",{class:!0});var El=s(Sr);T(Ky.$$.fragment,El),P2r=i(El),Kbe=n(El,"P",{});var e2t=s(Kbe);I2r=r(e2t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),e2t.forEach(t),q2r=i(El),an=n(El,"P",{});var X3=s(an);N2r=r(X3,"The model class to instantiate is selected based on the "),Zbe=n(X3,"CODE",{});var o2t=s(Zbe);j2r=r(o2t,"model_type"),o2t.forEach(t),D2r=r(X3,` property of the config object (either
passed as an argument or loaded from `),e2e=n(X3,"CODE",{});var r2t=s(e2e);G2r=r(r2t,"pretrained_model_name_or_path"),r2t.forEach(t),O2r=r(X3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o2e=n(X3,"CODE",{});var t2t=s(o2e);V2r=r(t2t,"pretrained_model_name_or_path"),t2t.forEach(t),X2r=r(X3,":"),X3.forEach(t),z2r=i(El),r2e=n(El,"UL",{});var a2t=s(r2e);AM=n(a2t,"LI",{});var Ike=s(AM);t2e=n(Ike,"STRONG",{});var n2t=s(t2e);Q2r=r(n2t,"tapas"),n2t.forEach(t),W2r=r(Ike," \u2014 "),jW=n(Ike,"A",{href:!0});var s2t=s(jW);H2r=r(s2t,"TFTapasForQuestionAnswering"),s2t.forEach(t),U2r=r(Ike," (TAPAS model)"),Ike.forEach(t),a2t.forEach(t),J2r=i(El),T(yM.$$.fragment,El),El.forEach(t),Ml.forEach(t),zPe=i(f),nc=n(f,"H2",{class:!0});var Uqe=s(nc);LM=n(Uqe,"A",{id:!0,class:!0,href:!0});var l2t=s(LM);a2e=n(l2t,"SPAN",{});var i2t=s(a2e);T(Zy.$$.fragment,i2t),i2t.forEach(t),l2t.forEach(t),Y2r=i(Uqe),n2e=n(Uqe,"SPAN",{});var d2t=s(n2e);K2r=r(d2t,"TFAutoModelForTokenClassification"),d2t.forEach(t),Uqe.forEach(t),QPe=i(f),sr=n(f,"DIV",{class:!0});var Cl=s(sr);T(eL.$$.fragment,Cl),Z2r=i(Cl),sc=n(Cl,"P",{});var kK=s(sc);evr=r(kK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),DW=n(kK,"A",{href:!0});var c2t=s(DW);ovr=r(c2t,"from_pretrained()"),c2t.forEach(t),rvr=r(kK," class method or the "),GW=n(kK,"A",{href:!0});var f2t=s(GW);tvr=r(f2t,"from_config()"),f2t.forEach(t),avr=r(kK,` class
method.`),kK.forEach(t),nvr=i(Cl),oL=n(Cl,"P",{});var Jqe=s(oL);svr=r(Jqe,"This class cannot be instantiated directly using "),s2e=n(Jqe,"CODE",{});var m2t=s(s2e);lvr=r(m2t,"__init__()"),m2t.forEach(t),ivr=r(Jqe," (throws an error)."),Jqe.forEach(t),dvr=i(Cl),St=n(Cl,"DIV",{class:!0});var z3=s(St);T(rL.$$.fragment,z3),cvr=i(z3),l2e=n(z3,"P",{});var g2t=s(l2e);fvr=r(g2t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),g2t.forEach(t),mvr=i(z3),lc=n(z3,"P",{});var SK=s(lc);gvr=r(SK,`Note:
Loading a model from its configuration file does `),i2e=n(SK,"STRONG",{});var h2t=s(i2e);hvr=r(h2t,"not"),h2t.forEach(t),pvr=r(SK,` load the model weights. It only affects the
model\u2019s configuration. Use `),OW=n(SK,"A",{href:!0});var p2t=s(OW);uvr=r(p2t,"from_pretrained()"),p2t.forEach(t),_vr=r(SK," to load the model weights."),SK.forEach(t),bvr=i(z3),T(xM.$$.fragment,z3),z3.forEach(t),vvr=i(Cl),Rr=n(Cl,"DIV",{class:!0});var wl=s(Rr);T(tL.$$.fragment,wl),Fvr=i(wl),d2e=n(wl,"P",{});var u2t=s(d2e);Tvr=r(u2t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),u2t.forEach(t),Mvr=i(wl),nn=n(wl,"P",{});var Q3=s(nn);Evr=r(Q3,"The model class to instantiate is selected based on the "),c2e=n(Q3,"CODE",{});var _2t=s(c2e);Cvr=r(_2t,"model_type"),_2t.forEach(t),wvr=r(Q3,` property of the config object (either
passed as an argument or loaded from `),f2e=n(Q3,"CODE",{});var b2t=s(f2e);Avr=r(b2t,"pretrained_model_name_or_path"),b2t.forEach(t),yvr=r(Q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m2e=n(Q3,"CODE",{});var v2t=s(m2e);Lvr=r(v2t,"pretrained_model_name_or_path"),v2t.forEach(t),xvr=r(Q3,":"),Q3.forEach(t),$vr=i(wl),de=n(wl,"UL",{});var me=s(de);$M=n(me,"LI",{});var qke=s($M);g2e=n(qke,"STRONG",{});var F2t=s(g2e);kvr=r(F2t,"albert"),F2t.forEach(t),Svr=r(qke," \u2014 "),VW=n(qke,"A",{href:!0});var T2t=s(VW);Rvr=r(T2t,"TFAlbertForTokenClassification"),T2t.forEach(t),Bvr=r(qke," (ALBERT model)"),qke.forEach(t),Pvr=i(me),kM=n(me,"LI",{});var Nke=s(kM);h2e=n(Nke,"STRONG",{});var M2t=s(h2e);Ivr=r(M2t,"bert"),M2t.forEach(t),qvr=r(Nke," \u2014 "),XW=n(Nke,"A",{href:!0});var E2t=s(XW);Nvr=r(E2t,"TFBertForTokenClassification"),E2t.forEach(t),jvr=r(Nke," (BERT model)"),Nke.forEach(t),Dvr=i(me),SM=n(me,"LI",{});var jke=s(SM);p2e=n(jke,"STRONG",{});var C2t=s(p2e);Gvr=r(C2t,"camembert"),C2t.forEach(t),Ovr=r(jke," \u2014 "),zW=n(jke,"A",{href:!0});var w2t=s(zW);Vvr=r(w2t,"TFCamembertForTokenClassification"),w2t.forEach(t),Xvr=r(jke," (CamemBERT model)"),jke.forEach(t),zvr=i(me),RM=n(me,"LI",{});var Dke=s(RM);u2e=n(Dke,"STRONG",{});var A2t=s(u2e);Qvr=r(A2t,"convbert"),A2t.forEach(t),Wvr=r(Dke," \u2014 "),QW=n(Dke,"A",{href:!0});var y2t=s(QW);Hvr=r(y2t,"TFConvBertForTokenClassification"),y2t.forEach(t),Uvr=r(Dke," (ConvBERT model)"),Dke.forEach(t),Jvr=i(me),BM=n(me,"LI",{});var Gke=s(BM);_2e=n(Gke,"STRONG",{});var L2t=s(_2e);Yvr=r(L2t,"deberta"),L2t.forEach(t),Kvr=r(Gke," \u2014 "),WW=n(Gke,"A",{href:!0});var x2t=s(WW);Zvr=r(x2t,"TFDebertaForTokenClassification"),x2t.forEach(t),eFr=r(Gke," (DeBERTa model)"),Gke.forEach(t),oFr=i(me),PM=n(me,"LI",{});var Oke=s(PM);b2e=n(Oke,"STRONG",{});var $2t=s(b2e);rFr=r($2t,"deberta-v2"),$2t.forEach(t),tFr=r(Oke," \u2014 "),HW=n(Oke,"A",{href:!0});var k2t=s(HW);aFr=r(k2t,"TFDebertaV2ForTokenClassification"),k2t.forEach(t),nFr=r(Oke," (DeBERTa-v2 model)"),Oke.forEach(t),sFr=i(me),IM=n(me,"LI",{});var Vke=s(IM);v2e=n(Vke,"STRONG",{});var S2t=s(v2e);lFr=r(S2t,"distilbert"),S2t.forEach(t),iFr=r(Vke," \u2014 "),UW=n(Vke,"A",{href:!0});var R2t=s(UW);dFr=r(R2t,"TFDistilBertForTokenClassification"),R2t.forEach(t),cFr=r(Vke," (DistilBERT model)"),Vke.forEach(t),fFr=i(me),qM=n(me,"LI",{});var Xke=s(qM);F2e=n(Xke,"STRONG",{});var B2t=s(F2e);mFr=r(B2t,"electra"),B2t.forEach(t),gFr=r(Xke," \u2014 "),JW=n(Xke,"A",{href:!0});var P2t=s(JW);hFr=r(P2t,"TFElectraForTokenClassification"),P2t.forEach(t),pFr=r(Xke," (ELECTRA model)"),Xke.forEach(t),uFr=i(me),NM=n(me,"LI",{});var zke=s(NM);T2e=n(zke,"STRONG",{});var I2t=s(T2e);_Fr=r(I2t,"flaubert"),I2t.forEach(t),bFr=r(zke," \u2014 "),YW=n(zke,"A",{href:!0});var q2t=s(YW);vFr=r(q2t,"TFFlaubertForTokenClassification"),q2t.forEach(t),FFr=r(zke," (FlauBERT model)"),zke.forEach(t),TFr=i(me),jM=n(me,"LI",{});var Qke=s(jM);M2e=n(Qke,"STRONG",{});var N2t=s(M2e);MFr=r(N2t,"funnel"),N2t.forEach(t),EFr=r(Qke," \u2014 "),KW=n(Qke,"A",{href:!0});var j2t=s(KW);CFr=r(j2t,"TFFunnelForTokenClassification"),j2t.forEach(t),wFr=r(Qke," (Funnel Transformer model)"),Qke.forEach(t),AFr=i(me),DM=n(me,"LI",{});var Wke=s(DM);E2e=n(Wke,"STRONG",{});var D2t=s(E2e);yFr=r(D2t,"layoutlm"),D2t.forEach(t),LFr=r(Wke," \u2014 "),ZW=n(Wke,"A",{href:!0});var G2t=s(ZW);xFr=r(G2t,"TFLayoutLMForTokenClassification"),G2t.forEach(t),$Fr=r(Wke," (LayoutLM model)"),Wke.forEach(t),kFr=i(me),GM=n(me,"LI",{});var Hke=s(GM);C2e=n(Hke,"STRONG",{});var O2t=s(C2e);SFr=r(O2t,"longformer"),O2t.forEach(t),RFr=r(Hke," \u2014 "),eH=n(Hke,"A",{href:!0});var V2t=s(eH);BFr=r(V2t,"TFLongformerForTokenClassification"),V2t.forEach(t),PFr=r(Hke," (Longformer model)"),Hke.forEach(t),IFr=i(me),OM=n(me,"LI",{});var Uke=s(OM);w2e=n(Uke,"STRONG",{});var X2t=s(w2e);qFr=r(X2t,"mobilebert"),X2t.forEach(t),NFr=r(Uke," \u2014 "),oH=n(Uke,"A",{href:!0});var z2t=s(oH);jFr=r(z2t,"TFMobileBertForTokenClassification"),z2t.forEach(t),DFr=r(Uke," (MobileBERT model)"),Uke.forEach(t),GFr=i(me),VM=n(me,"LI",{});var Jke=s(VM);A2e=n(Jke,"STRONG",{});var Q2t=s(A2e);OFr=r(Q2t,"mpnet"),Q2t.forEach(t),VFr=r(Jke," \u2014 "),rH=n(Jke,"A",{href:!0});var W2t=s(rH);XFr=r(W2t,"TFMPNetForTokenClassification"),W2t.forEach(t),zFr=r(Jke," (MPNet model)"),Jke.forEach(t),QFr=i(me),XM=n(me,"LI",{});var Yke=s(XM);y2e=n(Yke,"STRONG",{});var H2t=s(y2e);WFr=r(H2t,"rembert"),H2t.forEach(t),HFr=r(Yke," \u2014 "),tH=n(Yke,"A",{href:!0});var U2t=s(tH);UFr=r(U2t,"TFRemBertForTokenClassification"),U2t.forEach(t),JFr=r(Yke," (RemBERT model)"),Yke.forEach(t),YFr=i(me),zM=n(me,"LI",{});var Kke=s(zM);L2e=n(Kke,"STRONG",{});var J2t=s(L2e);KFr=r(J2t,"roberta"),J2t.forEach(t),ZFr=r(Kke," \u2014 "),aH=n(Kke,"A",{href:!0});var Y2t=s(aH);e6r=r(Y2t,"TFRobertaForTokenClassification"),Y2t.forEach(t),o6r=r(Kke," (RoBERTa model)"),Kke.forEach(t),r6r=i(me),QM=n(me,"LI",{});var Zke=s(QM);x2e=n(Zke,"STRONG",{});var K2t=s(x2e);t6r=r(K2t,"roformer"),K2t.forEach(t),a6r=r(Zke," \u2014 "),nH=n(Zke,"A",{href:!0});var Z2t=s(nH);n6r=r(Z2t,"TFRoFormerForTokenClassification"),Z2t.forEach(t),s6r=r(Zke," (RoFormer model)"),Zke.forEach(t),l6r=i(me),WM=n(me,"LI",{});var eSe=s(WM);$2e=n(eSe,"STRONG",{});var evt=s($2e);i6r=r(evt,"xlm"),evt.forEach(t),d6r=r(eSe," \u2014 "),sH=n(eSe,"A",{href:!0});var ovt=s(sH);c6r=r(ovt,"TFXLMForTokenClassification"),ovt.forEach(t),f6r=r(eSe," (XLM model)"),eSe.forEach(t),m6r=i(me),HM=n(me,"LI",{});var oSe=s(HM);k2e=n(oSe,"STRONG",{});var rvt=s(k2e);g6r=r(rvt,"xlm-roberta"),rvt.forEach(t),h6r=r(oSe," \u2014 "),lH=n(oSe,"A",{href:!0});var tvt=s(lH);p6r=r(tvt,"TFXLMRobertaForTokenClassification"),tvt.forEach(t),u6r=r(oSe," (XLM-RoBERTa model)"),oSe.forEach(t),_6r=i(me),UM=n(me,"LI",{});var rSe=s(UM);S2e=n(rSe,"STRONG",{});var avt=s(S2e);b6r=r(avt,"xlnet"),avt.forEach(t),v6r=r(rSe," \u2014 "),iH=n(rSe,"A",{href:!0});var nvt=s(iH);F6r=r(nvt,"TFXLNetForTokenClassification"),nvt.forEach(t),T6r=r(rSe," (XLNet model)"),rSe.forEach(t),me.forEach(t),M6r=i(wl),T(JM.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),WPe=i(f),ic=n(f,"H2",{class:!0});var Yqe=s(ic);YM=n(Yqe,"A",{id:!0,class:!0,href:!0});var svt=s(YM);R2e=n(svt,"SPAN",{});var lvt=s(R2e);T(aL.$$.fragment,lvt),lvt.forEach(t),svt.forEach(t),E6r=i(Yqe),B2e=n(Yqe,"SPAN",{});var ivt=s(B2e);C6r=r(ivt,"TFAutoModelForQuestionAnswering"),ivt.forEach(t),Yqe.forEach(t),HPe=i(f),lr=n(f,"DIV",{class:!0});var Al=s(lr);T(nL.$$.fragment,Al),w6r=i(Al),dc=n(Al,"P",{});var RK=s(dc);A6r=r(RK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),dH=n(RK,"A",{href:!0});var dvt=s(dH);y6r=r(dvt,"from_pretrained()"),dvt.forEach(t),L6r=r(RK," class method or the "),cH=n(RK,"A",{href:!0});var cvt=s(cH);x6r=r(cvt,"from_config()"),cvt.forEach(t),$6r=r(RK,` class
method.`),RK.forEach(t),k6r=i(Al),sL=n(Al,"P",{});var Kqe=s(sL);S6r=r(Kqe,"This class cannot be instantiated directly using "),P2e=n(Kqe,"CODE",{});var fvt=s(P2e);R6r=r(fvt,"__init__()"),fvt.forEach(t),B6r=r(Kqe," (throws an error)."),Kqe.forEach(t),P6r=i(Al),Rt=n(Al,"DIV",{class:!0});var W3=s(Rt);T(lL.$$.fragment,W3),I6r=i(W3),I2e=n(W3,"P",{});var mvt=s(I2e);q6r=r(mvt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),mvt.forEach(t),N6r=i(W3),cc=n(W3,"P",{});var BK=s(cc);j6r=r(BK,`Note:
Loading a model from its configuration file does `),q2e=n(BK,"STRONG",{});var gvt=s(q2e);D6r=r(gvt,"not"),gvt.forEach(t),G6r=r(BK,` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=n(BK,"A",{href:!0});var hvt=s(fH);O6r=r(hvt,"from_pretrained()"),hvt.forEach(t),V6r=r(BK," to load the model weights."),BK.forEach(t),X6r=i(W3),T(KM.$$.fragment,W3),W3.forEach(t),z6r=i(Al),Br=n(Al,"DIV",{class:!0});var yl=s(Br);T(iL.$$.fragment,yl),Q6r=i(yl),N2e=n(yl,"P",{});var pvt=s(N2e);W6r=r(pvt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),pvt.forEach(t),H6r=i(yl),sn=n(yl,"P",{});var H3=s(sn);U6r=r(H3,"The model class to instantiate is selected based on the "),j2e=n(H3,"CODE",{});var uvt=s(j2e);J6r=r(uvt,"model_type"),uvt.forEach(t),Y6r=r(H3,` property of the config object (either
passed as an argument or loaded from `),D2e=n(H3,"CODE",{});var _vt=s(D2e);K6r=r(_vt,"pretrained_model_name_or_path"),_vt.forEach(t),Z6r=r(H3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G2e=n(H3,"CODE",{});var bvt=s(G2e);eTr=r(bvt,"pretrained_model_name_or_path"),bvt.forEach(t),oTr=r(H3,":"),H3.forEach(t),rTr=i(yl),ce=n(yl,"UL",{});var ge=s(ce);ZM=n(ge,"LI",{});var tSe=s(ZM);O2e=n(tSe,"STRONG",{});var vvt=s(O2e);tTr=r(vvt,"albert"),vvt.forEach(t),aTr=r(tSe," \u2014 "),mH=n(tSe,"A",{href:!0});var Fvt=s(mH);nTr=r(Fvt,"TFAlbertForQuestionAnswering"),Fvt.forEach(t),sTr=r(tSe," (ALBERT model)"),tSe.forEach(t),lTr=i(ge),e4=n(ge,"LI",{});var aSe=s(e4);V2e=n(aSe,"STRONG",{});var Tvt=s(V2e);iTr=r(Tvt,"bert"),Tvt.forEach(t),dTr=r(aSe," \u2014 "),gH=n(aSe,"A",{href:!0});var Mvt=s(gH);cTr=r(Mvt,"TFBertForQuestionAnswering"),Mvt.forEach(t),fTr=r(aSe," (BERT model)"),aSe.forEach(t),mTr=i(ge),o4=n(ge,"LI",{});var nSe=s(o4);X2e=n(nSe,"STRONG",{});var Evt=s(X2e);gTr=r(Evt,"camembert"),Evt.forEach(t),hTr=r(nSe," \u2014 "),hH=n(nSe,"A",{href:!0});var Cvt=s(hH);pTr=r(Cvt,"TFCamembertForQuestionAnswering"),Cvt.forEach(t),uTr=r(nSe," (CamemBERT model)"),nSe.forEach(t),_Tr=i(ge),r4=n(ge,"LI",{});var sSe=s(r4);z2e=n(sSe,"STRONG",{});var wvt=s(z2e);bTr=r(wvt,"convbert"),wvt.forEach(t),vTr=r(sSe," \u2014 "),pH=n(sSe,"A",{href:!0});var Avt=s(pH);FTr=r(Avt,"TFConvBertForQuestionAnswering"),Avt.forEach(t),TTr=r(sSe," (ConvBERT model)"),sSe.forEach(t),MTr=i(ge),t4=n(ge,"LI",{});var lSe=s(t4);Q2e=n(lSe,"STRONG",{});var yvt=s(Q2e);ETr=r(yvt,"deberta"),yvt.forEach(t),CTr=r(lSe," \u2014 "),uH=n(lSe,"A",{href:!0});var Lvt=s(uH);wTr=r(Lvt,"TFDebertaForQuestionAnswering"),Lvt.forEach(t),ATr=r(lSe," (DeBERTa model)"),lSe.forEach(t),yTr=i(ge),a4=n(ge,"LI",{});var iSe=s(a4);W2e=n(iSe,"STRONG",{});var xvt=s(W2e);LTr=r(xvt,"deberta-v2"),xvt.forEach(t),xTr=r(iSe," \u2014 "),_H=n(iSe,"A",{href:!0});var $vt=s(_H);$Tr=r($vt,"TFDebertaV2ForQuestionAnswering"),$vt.forEach(t),kTr=r(iSe," (DeBERTa-v2 model)"),iSe.forEach(t),STr=i(ge),n4=n(ge,"LI",{});var dSe=s(n4);H2e=n(dSe,"STRONG",{});var kvt=s(H2e);RTr=r(kvt,"distilbert"),kvt.forEach(t),BTr=r(dSe," \u2014 "),bH=n(dSe,"A",{href:!0});var Svt=s(bH);PTr=r(Svt,"TFDistilBertForQuestionAnswering"),Svt.forEach(t),ITr=r(dSe," (DistilBERT model)"),dSe.forEach(t),qTr=i(ge),s4=n(ge,"LI",{});var cSe=s(s4);U2e=n(cSe,"STRONG",{});var Rvt=s(U2e);NTr=r(Rvt,"electra"),Rvt.forEach(t),jTr=r(cSe," \u2014 "),vH=n(cSe,"A",{href:!0});var Bvt=s(vH);DTr=r(Bvt,"TFElectraForQuestionAnswering"),Bvt.forEach(t),GTr=r(cSe," (ELECTRA model)"),cSe.forEach(t),OTr=i(ge),l4=n(ge,"LI",{});var fSe=s(l4);J2e=n(fSe,"STRONG",{});var Pvt=s(J2e);VTr=r(Pvt,"flaubert"),Pvt.forEach(t),XTr=r(fSe," \u2014 "),FH=n(fSe,"A",{href:!0});var Ivt=s(FH);zTr=r(Ivt,"TFFlaubertForQuestionAnsweringSimple"),Ivt.forEach(t),QTr=r(fSe," (FlauBERT model)"),fSe.forEach(t),WTr=i(ge),i4=n(ge,"LI",{});var mSe=s(i4);Y2e=n(mSe,"STRONG",{});var qvt=s(Y2e);HTr=r(qvt,"funnel"),qvt.forEach(t),UTr=r(mSe," \u2014 "),TH=n(mSe,"A",{href:!0});var Nvt=s(TH);JTr=r(Nvt,"TFFunnelForQuestionAnswering"),Nvt.forEach(t),YTr=r(mSe," (Funnel Transformer model)"),mSe.forEach(t),KTr=i(ge),d4=n(ge,"LI",{});var gSe=s(d4);K2e=n(gSe,"STRONG",{});var jvt=s(K2e);ZTr=r(jvt,"gptj"),jvt.forEach(t),e9r=r(gSe," \u2014 "),MH=n(gSe,"A",{href:!0});var Dvt=s(MH);o9r=r(Dvt,"TFGPTJForQuestionAnswering"),Dvt.forEach(t),r9r=r(gSe," (GPT-J model)"),gSe.forEach(t),t9r=i(ge),c4=n(ge,"LI",{});var hSe=s(c4);Z2e=n(hSe,"STRONG",{});var Gvt=s(Z2e);a9r=r(Gvt,"longformer"),Gvt.forEach(t),n9r=r(hSe," \u2014 "),EH=n(hSe,"A",{href:!0});var Ovt=s(EH);s9r=r(Ovt,"TFLongformerForQuestionAnswering"),Ovt.forEach(t),l9r=r(hSe," (Longformer model)"),hSe.forEach(t),i9r=i(ge),f4=n(ge,"LI",{});var pSe=s(f4);eve=n(pSe,"STRONG",{});var Vvt=s(eve);d9r=r(Vvt,"mobilebert"),Vvt.forEach(t),c9r=r(pSe," \u2014 "),CH=n(pSe,"A",{href:!0});var Xvt=s(CH);f9r=r(Xvt,"TFMobileBertForQuestionAnswering"),Xvt.forEach(t),m9r=r(pSe," (MobileBERT model)"),pSe.forEach(t),g9r=i(ge),m4=n(ge,"LI",{});var uSe=s(m4);ove=n(uSe,"STRONG",{});var zvt=s(ove);h9r=r(zvt,"mpnet"),zvt.forEach(t),p9r=r(uSe," \u2014 "),wH=n(uSe,"A",{href:!0});var Qvt=s(wH);u9r=r(Qvt,"TFMPNetForQuestionAnswering"),Qvt.forEach(t),_9r=r(uSe," (MPNet model)"),uSe.forEach(t),b9r=i(ge),g4=n(ge,"LI",{});var _Se=s(g4);rve=n(_Se,"STRONG",{});var Wvt=s(rve);v9r=r(Wvt,"rembert"),Wvt.forEach(t),F9r=r(_Se," \u2014 "),AH=n(_Se,"A",{href:!0});var Hvt=s(AH);T9r=r(Hvt,"TFRemBertForQuestionAnswering"),Hvt.forEach(t),M9r=r(_Se," (RemBERT model)"),_Se.forEach(t),E9r=i(ge),h4=n(ge,"LI",{});var bSe=s(h4);tve=n(bSe,"STRONG",{});var Uvt=s(tve);C9r=r(Uvt,"roberta"),Uvt.forEach(t),w9r=r(bSe," \u2014 "),yH=n(bSe,"A",{href:!0});var Jvt=s(yH);A9r=r(Jvt,"TFRobertaForQuestionAnswering"),Jvt.forEach(t),y9r=r(bSe," (RoBERTa model)"),bSe.forEach(t),L9r=i(ge),p4=n(ge,"LI",{});var vSe=s(p4);ave=n(vSe,"STRONG",{});var Yvt=s(ave);x9r=r(Yvt,"roformer"),Yvt.forEach(t),$9r=r(vSe," \u2014 "),LH=n(vSe,"A",{href:!0});var Kvt=s(LH);k9r=r(Kvt,"TFRoFormerForQuestionAnswering"),Kvt.forEach(t),S9r=r(vSe," (RoFormer model)"),vSe.forEach(t),R9r=i(ge),u4=n(ge,"LI",{});var FSe=s(u4);nve=n(FSe,"STRONG",{});var Zvt=s(nve);B9r=r(Zvt,"xlm"),Zvt.forEach(t),P9r=r(FSe," \u2014 "),xH=n(FSe,"A",{href:!0});var eFt=s(xH);I9r=r(eFt,"TFXLMForQuestionAnsweringSimple"),eFt.forEach(t),q9r=r(FSe," (XLM model)"),FSe.forEach(t),N9r=i(ge),_4=n(ge,"LI",{});var TSe=s(_4);sve=n(TSe,"STRONG",{});var oFt=s(sve);j9r=r(oFt,"xlm-roberta"),oFt.forEach(t),D9r=r(TSe," \u2014 "),$H=n(TSe,"A",{href:!0});var rFt=s($H);G9r=r(rFt,"TFXLMRobertaForQuestionAnswering"),rFt.forEach(t),O9r=r(TSe," (XLM-RoBERTa model)"),TSe.forEach(t),V9r=i(ge),b4=n(ge,"LI",{});var MSe=s(b4);lve=n(MSe,"STRONG",{});var tFt=s(lve);X9r=r(tFt,"xlnet"),tFt.forEach(t),z9r=r(MSe," \u2014 "),kH=n(MSe,"A",{href:!0});var aFt=s(kH);Q9r=r(aFt,"TFXLNetForQuestionAnsweringSimple"),aFt.forEach(t),W9r=r(MSe," (XLNet model)"),MSe.forEach(t),ge.forEach(t),H9r=i(yl),T(v4.$$.fragment,yl),yl.forEach(t),Al.forEach(t),UPe=i(f),fc=n(f,"H2",{class:!0});var Zqe=s(fc);F4=n(Zqe,"A",{id:!0,class:!0,href:!0});var nFt=s(F4);ive=n(nFt,"SPAN",{});var sFt=s(ive);T(dL.$$.fragment,sFt),sFt.forEach(t),nFt.forEach(t),U9r=i(Zqe),dve=n(Zqe,"SPAN",{});var lFt=s(dve);J9r=r(lFt,"TFAutoModelForVision2Seq"),lFt.forEach(t),Zqe.forEach(t),JPe=i(f),ir=n(f,"DIV",{class:!0});var Ll=s(ir);T(cL.$$.fragment,Ll),Y9r=i(Ll),mc=n(Ll,"P",{});var PK=s(mc);K9r=r(PK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),SH=n(PK,"A",{href:!0});var iFt=s(SH);Z9r=r(iFt,"from_pretrained()"),iFt.forEach(t),eMr=r(PK," class method or the "),RH=n(PK,"A",{href:!0});var dFt=s(RH);oMr=r(dFt,"from_config()"),dFt.forEach(t),rMr=r(PK,` class
method.`),PK.forEach(t),tMr=i(Ll),fL=n(Ll,"P",{});var eNe=s(fL);aMr=r(eNe,"This class cannot be instantiated directly using "),cve=n(eNe,"CODE",{});var cFt=s(cve);nMr=r(cFt,"__init__()"),cFt.forEach(t),sMr=r(eNe," (throws an error)."),eNe.forEach(t),lMr=i(Ll),Bt=n(Ll,"DIV",{class:!0});var U3=s(Bt);T(mL.$$.fragment,U3),iMr=i(U3),fve=n(U3,"P",{});var fFt=s(fve);dMr=r(fFt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),fFt.forEach(t),cMr=i(U3),gc=n(U3,"P",{});var IK=s(gc);fMr=r(IK,`Note:
Loading a model from its configuration file does `),mve=n(IK,"STRONG",{});var mFt=s(mve);mMr=r(mFt,"not"),mFt.forEach(t),gMr=r(IK,` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=n(IK,"A",{href:!0});var gFt=s(BH);hMr=r(gFt,"from_pretrained()"),gFt.forEach(t),pMr=r(IK," to load the model weights."),IK.forEach(t),uMr=i(U3),T(T4.$$.fragment,U3),U3.forEach(t),_Mr=i(Ll),Pr=n(Ll,"DIV",{class:!0});var xl=s(Pr);T(gL.$$.fragment,xl),bMr=i(xl),gve=n(xl,"P",{});var hFt=s(gve);vMr=r(hFt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),hFt.forEach(t),FMr=i(xl),ln=n(xl,"P",{});var J3=s(ln);TMr=r(J3,"The model class to instantiate is selected based on the "),hve=n(J3,"CODE",{});var pFt=s(hve);MMr=r(pFt,"model_type"),pFt.forEach(t),EMr=r(J3,` property of the config object (either
passed as an argument or loaded from `),pve=n(J3,"CODE",{});var uFt=s(pve);CMr=r(uFt,"pretrained_model_name_or_path"),uFt.forEach(t),wMr=r(J3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uve=n(J3,"CODE",{});var _Ft=s(uve);AMr=r(_Ft,"pretrained_model_name_or_path"),_Ft.forEach(t),yMr=r(J3,":"),J3.forEach(t),LMr=i(xl),_ve=n(xl,"UL",{});var bFt=s(_ve);M4=n(bFt,"LI",{});var ESe=s(M4);bve=n(ESe,"STRONG",{});var vFt=s(bve);xMr=r(vFt,"vision-encoder-decoder"),vFt.forEach(t),$Mr=r(ESe," \u2014 "),PH=n(ESe,"A",{href:!0});var FFt=s(PH);kMr=r(FFt,"TFVisionEncoderDecoderModel"),FFt.forEach(t),SMr=r(ESe," (Vision Encoder decoder model)"),ESe.forEach(t),bFt.forEach(t),RMr=i(xl),T(E4.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),YPe=i(f),hc=n(f,"H2",{class:!0});var oNe=s(hc);C4=n(oNe,"A",{id:!0,class:!0,href:!0});var TFt=s(C4);vve=n(TFt,"SPAN",{});var MFt=s(vve);T(hL.$$.fragment,MFt),MFt.forEach(t),TFt.forEach(t),BMr=i(oNe),Fve=n(oNe,"SPAN",{});var EFt=s(Fve);PMr=r(EFt,"TFAutoModelForSpeechSeq2Seq"),EFt.forEach(t),oNe.forEach(t),KPe=i(f),dr=n(f,"DIV",{class:!0});var $l=s(dr);T(pL.$$.fragment,$l),IMr=i($l),pc=n($l,"P",{});var qK=s(pc);qMr=r(qK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),IH=n(qK,"A",{href:!0});var CFt=s(IH);NMr=r(CFt,"from_pretrained()"),CFt.forEach(t),jMr=r(qK," class method or the "),qH=n(qK,"A",{href:!0});var wFt=s(qH);DMr=r(wFt,"from_config()"),wFt.forEach(t),GMr=r(qK,` class
method.`),qK.forEach(t),OMr=i($l),uL=n($l,"P",{});var rNe=s(uL);VMr=r(rNe,"This class cannot be instantiated directly using "),Tve=n(rNe,"CODE",{});var AFt=s(Tve);XMr=r(AFt,"__init__()"),AFt.forEach(t),zMr=r(rNe," (throws an error)."),rNe.forEach(t),QMr=i($l),Pt=n($l,"DIV",{class:!0});var Y3=s(Pt);T(_L.$$.fragment,Y3),WMr=i(Y3),Mve=n(Y3,"P",{});var yFt=s(Mve);HMr=r(yFt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),yFt.forEach(t),UMr=i(Y3),uc=n(Y3,"P",{});var NK=s(uc);JMr=r(NK,`Note:
Loading a model from its configuration file does `),Eve=n(NK,"STRONG",{});var LFt=s(Eve);YMr=r(LFt,"not"),LFt.forEach(t),KMr=r(NK,` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=n(NK,"A",{href:!0});var xFt=s(NH);ZMr=r(xFt,"from_pretrained()"),xFt.forEach(t),e4r=r(NK," to load the model weights."),NK.forEach(t),o4r=i(Y3),T(w4.$$.fragment,Y3),Y3.forEach(t),r4r=i($l),Ir=n($l,"DIV",{class:!0});var kl=s(Ir);T(bL.$$.fragment,kl),t4r=i(kl),Cve=n(kl,"P",{});var $Ft=s(Cve);a4r=r($Ft,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),$Ft.forEach(t),n4r=i(kl),dn=n(kl,"P",{});var K3=s(dn);s4r=r(K3,"The model class to instantiate is selected based on the "),wve=n(K3,"CODE",{});var kFt=s(wve);l4r=r(kFt,"model_type"),kFt.forEach(t),i4r=r(K3,` property of the config object (either
passed as an argument or loaded from `),Ave=n(K3,"CODE",{});var SFt=s(Ave);d4r=r(SFt,"pretrained_model_name_or_path"),SFt.forEach(t),c4r=r(K3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yve=n(K3,"CODE",{});var RFt=s(yve);f4r=r(RFt,"pretrained_model_name_or_path"),RFt.forEach(t),m4r=r(K3,":"),K3.forEach(t),g4r=i(kl),Lve=n(kl,"UL",{});var BFt=s(Lve);A4=n(BFt,"LI",{});var CSe=s(A4);xve=n(CSe,"STRONG",{});var PFt=s(xve);h4r=r(PFt,"speech_to_text"),PFt.forEach(t),p4r=r(CSe," \u2014 "),jH=n(CSe,"A",{href:!0});var IFt=s(jH);u4r=r(IFt,"TFSpeech2TextForConditionalGeneration"),IFt.forEach(t),_4r=r(CSe," (Speech2Text model)"),CSe.forEach(t),BFt.forEach(t),b4r=i(kl),T(y4.$$.fragment,kl),kl.forEach(t),$l.forEach(t),ZPe=i(f),_c=n(f,"H2",{class:!0});var tNe=s(_c);L4=n(tNe,"A",{id:!0,class:!0,href:!0});var qFt=s(L4);$ve=n(qFt,"SPAN",{});var NFt=s($ve);T(vL.$$.fragment,NFt),NFt.forEach(t),qFt.forEach(t),v4r=i(tNe),kve=n(tNe,"SPAN",{});var jFt=s(kve);F4r=r(jFt,"FlaxAutoModel"),jFt.forEach(t),tNe.forEach(t),eIe=i(f),cr=n(f,"DIV",{class:!0});var Sl=s(cr);T(FL.$$.fragment,Sl),T4r=i(Sl),bc=n(Sl,"P",{});var jK=s(bc);M4r=r(jK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),DH=n(jK,"A",{href:!0});var DFt=s(DH);E4r=r(DFt,"from_pretrained()"),DFt.forEach(t),C4r=r(jK," class method or the "),GH=n(jK,"A",{href:!0});var GFt=s(GH);w4r=r(GFt,"from_config()"),GFt.forEach(t),A4r=r(jK,` class
method.`),jK.forEach(t),y4r=i(Sl),TL=n(Sl,"P",{});var aNe=s(TL);L4r=r(aNe,"This class cannot be instantiated directly using "),Sve=n(aNe,"CODE",{});var OFt=s(Sve);x4r=r(OFt,"__init__()"),OFt.forEach(t),$4r=r(aNe," (throws an error)."),aNe.forEach(t),k4r=i(Sl),It=n(Sl,"DIV",{class:!0});var Z3=s(It);T(ML.$$.fragment,Z3),S4r=i(Z3),Rve=n(Z3,"P",{});var VFt=s(Rve);R4r=r(VFt,"Instantiates one of the base model classes of the library from a configuration."),VFt.forEach(t),B4r=i(Z3),vc=n(Z3,"P",{});var DK=s(vc);P4r=r(DK,`Note:
Loading a model from its configuration file does `),Bve=n(DK,"STRONG",{});var XFt=s(Bve);I4r=r(XFt,"not"),XFt.forEach(t),q4r=r(DK,` load the model weights. It only affects the
model\u2019s configuration. Use `),OH=n(DK,"A",{href:!0});var zFt=s(OH);N4r=r(zFt,"from_pretrained()"),zFt.forEach(t),j4r=r(DK," to load the model weights."),DK.forEach(t),D4r=i(Z3),T(x4.$$.fragment,Z3),Z3.forEach(t),G4r=i(Sl),qr=n(Sl,"DIV",{class:!0});var Rl=s(qr);T(EL.$$.fragment,Rl),O4r=i(Rl),Pve=n(Rl,"P",{});var QFt=s(Pve);V4r=r(QFt,"Instantiate one of the base model classes of the library from a pretrained model."),QFt.forEach(t),X4r=i(Rl),cn=n(Rl,"P",{});var ew=s(cn);z4r=r(ew,"The model class to instantiate is selected based on the "),Ive=n(ew,"CODE",{});var WFt=s(Ive);Q4r=r(WFt,"model_type"),WFt.forEach(t),W4r=r(ew,` property of the config object (either
passed as an argument or loaded from `),qve=n(ew,"CODE",{});var HFt=s(qve);H4r=r(HFt,"pretrained_model_name_or_path"),HFt.forEach(t),U4r=r(ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nve=n(ew,"CODE",{});var UFt=s(Nve);J4r=r(UFt,"pretrained_model_name_or_path"),UFt.forEach(t),Y4r=r(ew,":"),ew.forEach(t),K4r=i(Rl),oe=n(Rl,"UL",{});var ae=s(oe);$4=n(ae,"LI",{});var wSe=s($4);jve=n(wSe,"STRONG",{});var JFt=s(jve);Z4r=r(JFt,"albert"),JFt.forEach(t),eEr=r(wSe," \u2014 "),VH=n(wSe,"A",{href:!0});var YFt=s(VH);oEr=r(YFt,"FlaxAlbertModel"),YFt.forEach(t),rEr=r(wSe," (ALBERT model)"),wSe.forEach(t),tEr=i(ae),k4=n(ae,"LI",{});var ASe=s(k4);Dve=n(ASe,"STRONG",{});var KFt=s(Dve);aEr=r(KFt,"bart"),KFt.forEach(t),nEr=r(ASe," \u2014 "),XH=n(ASe,"A",{href:!0});var ZFt=s(XH);sEr=r(ZFt,"FlaxBartModel"),ZFt.forEach(t),lEr=r(ASe," (BART model)"),ASe.forEach(t),iEr=i(ae),S4=n(ae,"LI",{});var ySe=s(S4);Gve=n(ySe,"STRONG",{});var e6t=s(Gve);dEr=r(e6t,"beit"),e6t.forEach(t),cEr=r(ySe," \u2014 "),zH=n(ySe,"A",{href:!0});var o6t=s(zH);fEr=r(o6t,"FlaxBeitModel"),o6t.forEach(t),mEr=r(ySe," (BEiT model)"),ySe.forEach(t),gEr=i(ae),R4=n(ae,"LI",{});var LSe=s(R4);Ove=n(LSe,"STRONG",{});var r6t=s(Ove);hEr=r(r6t,"bert"),r6t.forEach(t),pEr=r(LSe," \u2014 "),QH=n(LSe,"A",{href:!0});var t6t=s(QH);uEr=r(t6t,"FlaxBertModel"),t6t.forEach(t),_Er=r(LSe," (BERT model)"),LSe.forEach(t),bEr=i(ae),B4=n(ae,"LI",{});var xSe=s(B4);Vve=n(xSe,"STRONG",{});var a6t=s(Vve);vEr=r(a6t,"big_bird"),a6t.forEach(t),FEr=r(xSe," \u2014 "),WH=n(xSe,"A",{href:!0});var n6t=s(WH);TEr=r(n6t,"FlaxBigBirdModel"),n6t.forEach(t),MEr=r(xSe," (BigBird model)"),xSe.forEach(t),EEr=i(ae),P4=n(ae,"LI",{});var $Se=s(P4);Xve=n($Se,"STRONG",{});var s6t=s(Xve);CEr=r(s6t,"blenderbot"),s6t.forEach(t),wEr=r($Se," \u2014 "),HH=n($Se,"A",{href:!0});var l6t=s(HH);AEr=r(l6t,"FlaxBlenderbotModel"),l6t.forEach(t),yEr=r($Se," (Blenderbot model)"),$Se.forEach(t),LEr=i(ae),I4=n(ae,"LI",{});var kSe=s(I4);zve=n(kSe,"STRONG",{});var i6t=s(zve);xEr=r(i6t,"blenderbot-small"),i6t.forEach(t),$Er=r(kSe," \u2014 "),UH=n(kSe,"A",{href:!0});var d6t=s(UH);kEr=r(d6t,"FlaxBlenderbotSmallModel"),d6t.forEach(t),SEr=r(kSe," (BlenderbotSmall model)"),kSe.forEach(t),REr=i(ae),q4=n(ae,"LI",{});var SSe=s(q4);Qve=n(SSe,"STRONG",{});var c6t=s(Qve);BEr=r(c6t,"clip"),c6t.forEach(t),PEr=r(SSe," \u2014 "),JH=n(SSe,"A",{href:!0});var f6t=s(JH);IEr=r(f6t,"FlaxCLIPModel"),f6t.forEach(t),qEr=r(SSe," (CLIP model)"),SSe.forEach(t),NEr=i(ae),N4=n(ae,"LI",{});var RSe=s(N4);Wve=n(RSe,"STRONG",{});var m6t=s(Wve);jEr=r(m6t,"distilbert"),m6t.forEach(t),DEr=r(RSe," \u2014 "),YH=n(RSe,"A",{href:!0});var g6t=s(YH);GEr=r(g6t,"FlaxDistilBertModel"),g6t.forEach(t),OEr=r(RSe," (DistilBERT model)"),RSe.forEach(t),VEr=i(ae),j4=n(ae,"LI",{});var BSe=s(j4);Hve=n(BSe,"STRONG",{});var h6t=s(Hve);XEr=r(h6t,"electra"),h6t.forEach(t),zEr=r(BSe," \u2014 "),KH=n(BSe,"A",{href:!0});var p6t=s(KH);QEr=r(p6t,"FlaxElectraModel"),p6t.forEach(t),WEr=r(BSe," (ELECTRA model)"),BSe.forEach(t),HEr=i(ae),D4=n(ae,"LI",{});var PSe=s(D4);Uve=n(PSe,"STRONG",{});var u6t=s(Uve);UEr=r(u6t,"gpt2"),u6t.forEach(t),JEr=r(PSe," \u2014 "),ZH=n(PSe,"A",{href:!0});var _6t=s(ZH);YEr=r(_6t,"FlaxGPT2Model"),_6t.forEach(t),KEr=r(PSe," (OpenAI GPT-2 model)"),PSe.forEach(t),ZEr=i(ae),G4=n(ae,"LI",{});var ISe=s(G4);Jve=n(ISe,"STRONG",{});var b6t=s(Jve);e5r=r(b6t,"gpt_neo"),b6t.forEach(t),o5r=r(ISe," \u2014 "),eU=n(ISe,"A",{href:!0});var v6t=s(eU);r5r=r(v6t,"FlaxGPTNeoModel"),v6t.forEach(t),t5r=r(ISe," (GPT Neo model)"),ISe.forEach(t),a5r=i(ae),O4=n(ae,"LI",{});var qSe=s(O4);Yve=n(qSe,"STRONG",{});var F6t=s(Yve);n5r=r(F6t,"gptj"),F6t.forEach(t),s5r=r(qSe," \u2014 "),oU=n(qSe,"A",{href:!0});var T6t=s(oU);l5r=r(T6t,"FlaxGPTJModel"),T6t.forEach(t),i5r=r(qSe," (GPT-J model)"),qSe.forEach(t),d5r=i(ae),V4=n(ae,"LI",{});var NSe=s(V4);Kve=n(NSe,"STRONG",{});var M6t=s(Kve);c5r=r(M6t,"marian"),M6t.forEach(t),f5r=r(NSe," \u2014 "),rU=n(NSe,"A",{href:!0});var E6t=s(rU);m5r=r(E6t,"FlaxMarianModel"),E6t.forEach(t),g5r=r(NSe," (Marian model)"),NSe.forEach(t),h5r=i(ae),X4=n(ae,"LI",{});var jSe=s(X4);Zve=n(jSe,"STRONG",{});var C6t=s(Zve);p5r=r(C6t,"mbart"),C6t.forEach(t),u5r=r(jSe," \u2014 "),tU=n(jSe,"A",{href:!0});var w6t=s(tU);_5r=r(w6t,"FlaxMBartModel"),w6t.forEach(t),b5r=r(jSe," (mBART model)"),jSe.forEach(t),v5r=i(ae),z4=n(ae,"LI",{});var DSe=s(z4);eFe=n(DSe,"STRONG",{});var A6t=s(eFe);F5r=r(A6t,"mt5"),A6t.forEach(t),T5r=r(DSe," \u2014 "),aU=n(DSe,"A",{href:!0});var y6t=s(aU);M5r=r(y6t,"FlaxMT5Model"),y6t.forEach(t),E5r=r(DSe," (mT5 model)"),DSe.forEach(t),C5r=i(ae),Q4=n(ae,"LI",{});var GSe=s(Q4);oFe=n(GSe,"STRONG",{});var L6t=s(oFe);w5r=r(L6t,"pegasus"),L6t.forEach(t),A5r=r(GSe," \u2014 "),nU=n(GSe,"A",{href:!0});var x6t=s(nU);y5r=r(x6t,"FlaxPegasusModel"),x6t.forEach(t),L5r=r(GSe," (Pegasus model)"),GSe.forEach(t),x5r=i(ae),W4=n(ae,"LI",{});var OSe=s(W4);rFe=n(OSe,"STRONG",{});var $6t=s(rFe);$5r=r($6t,"roberta"),$6t.forEach(t),k5r=r(OSe," \u2014 "),sU=n(OSe,"A",{href:!0});var k6t=s(sU);S5r=r(k6t,"FlaxRobertaModel"),k6t.forEach(t),R5r=r(OSe," (RoBERTa model)"),OSe.forEach(t),B5r=i(ae),H4=n(ae,"LI",{});var VSe=s(H4);tFe=n(VSe,"STRONG",{});var S6t=s(tFe);P5r=r(S6t,"roformer"),S6t.forEach(t),I5r=r(VSe," \u2014 "),lU=n(VSe,"A",{href:!0});var R6t=s(lU);q5r=r(R6t,"FlaxRoFormerModel"),R6t.forEach(t),N5r=r(VSe," (RoFormer model)"),VSe.forEach(t),j5r=i(ae),U4=n(ae,"LI",{});var XSe=s(U4);aFe=n(XSe,"STRONG",{});var B6t=s(aFe);D5r=r(B6t,"t5"),B6t.forEach(t),G5r=r(XSe," \u2014 "),iU=n(XSe,"A",{href:!0});var P6t=s(iU);O5r=r(P6t,"FlaxT5Model"),P6t.forEach(t),V5r=r(XSe," (T5 model)"),XSe.forEach(t),X5r=i(ae),J4=n(ae,"LI",{});var zSe=s(J4);nFe=n(zSe,"STRONG",{});var I6t=s(nFe);z5r=r(I6t,"vision-text-dual-encoder"),I6t.forEach(t),Q5r=r(zSe," \u2014 "),dU=n(zSe,"A",{href:!0});var q6t=s(dU);W5r=r(q6t,"FlaxVisionTextDualEncoderModel"),q6t.forEach(t),H5r=r(zSe," (VisionTextDualEncoder model)"),zSe.forEach(t),U5r=i(ae),Y4=n(ae,"LI",{});var QSe=s(Y4);sFe=n(QSe,"STRONG",{});var N6t=s(sFe);J5r=r(N6t,"vit"),N6t.forEach(t),Y5r=r(QSe," \u2014 "),cU=n(QSe,"A",{href:!0});var j6t=s(cU);K5r=r(j6t,"FlaxViTModel"),j6t.forEach(t),Z5r=r(QSe," (ViT model)"),QSe.forEach(t),eCr=i(ae),K4=n(ae,"LI",{});var WSe=s(K4);lFe=n(WSe,"STRONG",{});var D6t=s(lFe);oCr=r(D6t,"wav2vec2"),D6t.forEach(t),rCr=r(WSe," \u2014 "),fU=n(WSe,"A",{href:!0});var G6t=s(fU);tCr=r(G6t,"FlaxWav2Vec2Model"),G6t.forEach(t),aCr=r(WSe," (Wav2Vec2 model)"),WSe.forEach(t),nCr=i(ae),Z4=n(ae,"LI",{});var HSe=s(Z4);iFe=n(HSe,"STRONG",{});var O6t=s(iFe);sCr=r(O6t,"xglm"),O6t.forEach(t),lCr=r(HSe," \u2014 "),mU=n(HSe,"A",{href:!0});var V6t=s(mU);iCr=r(V6t,"FlaxXGLMModel"),V6t.forEach(t),dCr=r(HSe," (XGLM model)"),HSe.forEach(t),cCr=i(ae),eE=n(ae,"LI",{});var USe=s(eE);dFe=n(USe,"STRONG",{});var X6t=s(dFe);fCr=r(X6t,"xlm-roberta"),X6t.forEach(t),mCr=r(USe," \u2014 "),gU=n(USe,"A",{href:!0});var z6t=s(gU);gCr=r(z6t,"FlaxXLMRobertaModel"),z6t.forEach(t),hCr=r(USe," (XLM-RoBERTa model)"),USe.forEach(t),ae.forEach(t),pCr=i(Rl),T(oE.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),oIe=i(f),Fc=n(f,"H2",{class:!0});var nNe=s(Fc);rE=n(nNe,"A",{id:!0,class:!0,href:!0});var Q6t=s(rE);cFe=n(Q6t,"SPAN",{});var W6t=s(cFe);T(CL.$$.fragment,W6t),W6t.forEach(t),Q6t.forEach(t),uCr=i(nNe),fFe=n(nNe,"SPAN",{});var H6t=s(fFe);_Cr=r(H6t,"FlaxAutoModelForCausalLM"),H6t.forEach(t),nNe.forEach(t),rIe=i(f),fr=n(f,"DIV",{class:!0});var Bl=s(fr);T(wL.$$.fragment,Bl),bCr=i(Bl),Tc=n(Bl,"P",{});var GK=s(Tc);vCr=r(GK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),hU=n(GK,"A",{href:!0});var U6t=s(hU);FCr=r(U6t,"from_pretrained()"),U6t.forEach(t),TCr=r(GK," class method or the "),pU=n(GK,"A",{href:!0});var J6t=s(pU);MCr=r(J6t,"from_config()"),J6t.forEach(t),ECr=r(GK,` class
method.`),GK.forEach(t),CCr=i(Bl),AL=n(Bl,"P",{});var sNe=s(AL);wCr=r(sNe,"This class cannot be instantiated directly using "),mFe=n(sNe,"CODE",{});var Y6t=s(mFe);ACr=r(Y6t,"__init__()"),Y6t.forEach(t),yCr=r(sNe," (throws an error)."),sNe.forEach(t),LCr=i(Bl),qt=n(Bl,"DIV",{class:!0});var ow=s(qt);T(yL.$$.fragment,ow),xCr=i(ow),gFe=n(ow,"P",{});var K6t=s(gFe);$Cr=r(K6t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),K6t.forEach(t),kCr=i(ow),Mc=n(ow,"P",{});var OK=s(Mc);SCr=r(OK,`Note:
Loading a model from its configuration file does `),hFe=n(OK,"STRONG",{});var Z6t=s(hFe);RCr=r(Z6t,"not"),Z6t.forEach(t),BCr=r(OK,` load the model weights. It only affects the
model\u2019s configuration. Use `),uU=n(OK,"A",{href:!0});var eTt=s(uU);PCr=r(eTt,"from_pretrained()"),eTt.forEach(t),ICr=r(OK," to load the model weights."),OK.forEach(t),qCr=i(ow),T(tE.$$.fragment,ow),ow.forEach(t),NCr=i(Bl),Nr=n(Bl,"DIV",{class:!0});var Pl=s(Nr);T(LL.$$.fragment,Pl),jCr=i(Pl),pFe=n(Pl,"P",{});var oTt=s(pFe);DCr=r(oTt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),oTt.forEach(t),GCr=i(Pl),fn=n(Pl,"P",{});var rw=s(fn);OCr=r(rw,"The model class to instantiate is selected based on the "),uFe=n(rw,"CODE",{});var rTt=s(uFe);VCr=r(rTt,"model_type"),rTt.forEach(t),XCr=r(rw,` property of the config object (either
passed as an argument or loaded from `),_Fe=n(rw,"CODE",{});var tTt=s(_Fe);zCr=r(tTt,"pretrained_model_name_or_path"),tTt.forEach(t),QCr=r(rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bFe=n(rw,"CODE",{});var aTt=s(bFe);WCr=r(aTt,"pretrained_model_name_or_path"),aTt.forEach(t),HCr=r(rw,":"),rw.forEach(t),UCr=i(Pl),ke=n(Pl,"UL",{});var Oe=s(ke);aE=n(Oe,"LI",{});var JSe=s(aE);vFe=n(JSe,"STRONG",{});var nTt=s(vFe);JCr=r(nTt,"bart"),nTt.forEach(t),YCr=r(JSe," \u2014 "),_U=n(JSe,"A",{href:!0});var sTt=s(_U);KCr=r(sTt,"FlaxBartForCausalLM"),sTt.forEach(t),ZCr=r(JSe," (BART model)"),JSe.forEach(t),e3r=i(Oe),nE=n(Oe,"LI",{});var YSe=s(nE);FFe=n(YSe,"STRONG",{});var lTt=s(FFe);o3r=r(lTt,"bert"),lTt.forEach(t),r3r=r(YSe," \u2014 "),bU=n(YSe,"A",{href:!0});var iTt=s(bU);t3r=r(iTt,"FlaxBertForCausalLM"),iTt.forEach(t),a3r=r(YSe," (BERT model)"),YSe.forEach(t),n3r=i(Oe),sE=n(Oe,"LI",{});var KSe=s(sE);TFe=n(KSe,"STRONG",{});var dTt=s(TFe);s3r=r(dTt,"big_bird"),dTt.forEach(t),l3r=r(KSe," \u2014 "),vU=n(KSe,"A",{href:!0});var cTt=s(vU);i3r=r(cTt,"FlaxBigBirdForCausalLM"),cTt.forEach(t),d3r=r(KSe," (BigBird model)"),KSe.forEach(t),c3r=i(Oe),lE=n(Oe,"LI",{});var ZSe=s(lE);MFe=n(ZSe,"STRONG",{});var fTt=s(MFe);f3r=r(fTt,"electra"),fTt.forEach(t),m3r=r(ZSe," \u2014 "),FU=n(ZSe,"A",{href:!0});var mTt=s(FU);g3r=r(mTt,"FlaxElectraForCausalLM"),mTt.forEach(t),h3r=r(ZSe," (ELECTRA model)"),ZSe.forEach(t),p3r=i(Oe),iE=n(Oe,"LI",{});var eRe=s(iE);EFe=n(eRe,"STRONG",{});var gTt=s(EFe);u3r=r(gTt,"gpt2"),gTt.forEach(t),_3r=r(eRe," \u2014 "),TU=n(eRe,"A",{href:!0});var hTt=s(TU);b3r=r(hTt,"FlaxGPT2LMHeadModel"),hTt.forEach(t),v3r=r(eRe," (OpenAI GPT-2 model)"),eRe.forEach(t),F3r=i(Oe),dE=n(Oe,"LI",{});var oRe=s(dE);CFe=n(oRe,"STRONG",{});var pTt=s(CFe);T3r=r(pTt,"gpt_neo"),pTt.forEach(t),M3r=r(oRe," \u2014 "),MU=n(oRe,"A",{href:!0});var uTt=s(MU);E3r=r(uTt,"FlaxGPTNeoForCausalLM"),uTt.forEach(t),C3r=r(oRe," (GPT Neo model)"),oRe.forEach(t),w3r=i(Oe),cE=n(Oe,"LI",{});var rRe=s(cE);wFe=n(rRe,"STRONG",{});var _Tt=s(wFe);A3r=r(_Tt,"gptj"),_Tt.forEach(t),y3r=r(rRe," \u2014 "),EU=n(rRe,"A",{href:!0});var bTt=s(EU);L3r=r(bTt,"FlaxGPTJForCausalLM"),bTt.forEach(t),x3r=r(rRe," (GPT-J model)"),rRe.forEach(t),$3r=i(Oe),fE=n(Oe,"LI",{});var tRe=s(fE);AFe=n(tRe,"STRONG",{});var vTt=s(AFe);k3r=r(vTt,"roberta"),vTt.forEach(t),S3r=r(tRe," \u2014 "),CU=n(tRe,"A",{href:!0});var FTt=s(CU);R3r=r(FTt,"FlaxRobertaForCausalLM"),FTt.forEach(t),B3r=r(tRe," (RoBERTa model)"),tRe.forEach(t),P3r=i(Oe),mE=n(Oe,"LI",{});var aRe=s(mE);yFe=n(aRe,"STRONG",{});var TTt=s(yFe);I3r=r(TTt,"xglm"),TTt.forEach(t),q3r=r(aRe," \u2014 "),wU=n(aRe,"A",{href:!0});var MTt=s(wU);N3r=r(MTt,"FlaxXGLMForCausalLM"),MTt.forEach(t),j3r=r(aRe," (XGLM model)"),aRe.forEach(t),Oe.forEach(t),D3r=i(Pl),T(gE.$$.fragment,Pl),Pl.forEach(t),Bl.forEach(t),tIe=i(f),Ec=n(f,"H2",{class:!0});var lNe=s(Ec);hE=n(lNe,"A",{id:!0,class:!0,href:!0});var ETt=s(hE);LFe=n(ETt,"SPAN",{});var CTt=s(LFe);T(xL.$$.fragment,CTt),CTt.forEach(t),ETt.forEach(t),G3r=i(lNe),xFe=n(lNe,"SPAN",{});var wTt=s(xFe);O3r=r(wTt,"FlaxAutoModelForPreTraining"),wTt.forEach(t),lNe.forEach(t),aIe=i(f),mr=n(f,"DIV",{class:!0});var Il=s(mr);T($L.$$.fragment,Il),V3r=i(Il),Cc=n(Il,"P",{});var VK=s(Cc);X3r=r(VK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),AU=n(VK,"A",{href:!0});var ATt=s(AU);z3r=r(ATt,"from_pretrained()"),ATt.forEach(t),Q3r=r(VK," class method or the "),yU=n(VK,"A",{href:!0});var yTt=s(yU);W3r=r(yTt,"from_config()"),yTt.forEach(t),H3r=r(VK,` class
method.`),VK.forEach(t),U3r=i(Il),kL=n(Il,"P",{});var iNe=s(kL);J3r=r(iNe,"This class cannot be instantiated directly using "),$Fe=n(iNe,"CODE",{});var LTt=s($Fe);Y3r=r(LTt,"__init__()"),LTt.forEach(t),K3r=r(iNe," (throws an error)."),iNe.forEach(t),Z3r=i(Il),Nt=n(Il,"DIV",{class:!0});var tw=s(Nt);T(SL.$$.fragment,tw),ewr=i(tw),kFe=n(tw,"P",{});var xTt=s(kFe);owr=r(xTt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),xTt.forEach(t),rwr=i(tw),wc=n(tw,"P",{});var XK=s(wc);twr=r(XK,`Note:
Loading a model from its configuration file does `),SFe=n(XK,"STRONG",{});var $Tt=s(SFe);awr=r($Tt,"not"),$Tt.forEach(t),nwr=r(XK,` load the model weights. It only affects the
model\u2019s configuration. Use `),LU=n(XK,"A",{href:!0});var kTt=s(LU);swr=r(kTt,"from_pretrained()"),kTt.forEach(t),lwr=r(XK," to load the model weights."),XK.forEach(t),iwr=i(tw),T(pE.$$.fragment,tw),tw.forEach(t),dwr=i(Il),jr=n(Il,"DIV",{class:!0});var ql=s(jr);T(RL.$$.fragment,ql),cwr=i(ql),RFe=n(ql,"P",{});var STt=s(RFe);fwr=r(STt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),STt.forEach(t),mwr=i(ql),mn=n(ql,"P",{});var aw=s(mn);gwr=r(aw,"The model class to instantiate is selected based on the "),BFe=n(aw,"CODE",{});var RTt=s(BFe);hwr=r(RTt,"model_type"),RTt.forEach(t),pwr=r(aw,` property of the config object (either
passed as an argument or loaded from `),PFe=n(aw,"CODE",{});var BTt=s(PFe);uwr=r(BTt,"pretrained_model_name_or_path"),BTt.forEach(t),_wr=r(aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IFe=n(aw,"CODE",{});var PTt=s(IFe);bwr=r(PTt,"pretrained_model_name_or_path"),PTt.forEach(t),vwr=r(aw,":"),aw.forEach(t),Fwr=i(ql),Me=n(ql,"UL",{});var we=s(Me);uE=n(we,"LI",{});var nRe=s(uE);qFe=n(nRe,"STRONG",{});var ITt=s(qFe);Twr=r(ITt,"albert"),ITt.forEach(t),Mwr=r(nRe," \u2014 "),xU=n(nRe,"A",{href:!0});var qTt=s(xU);Ewr=r(qTt,"FlaxAlbertForPreTraining"),qTt.forEach(t),Cwr=r(nRe," (ALBERT model)"),nRe.forEach(t),wwr=i(we),_E=n(we,"LI",{});var sRe=s(_E);NFe=n(sRe,"STRONG",{});var NTt=s(NFe);Awr=r(NTt,"bart"),NTt.forEach(t),ywr=r(sRe," \u2014 "),$U=n(sRe,"A",{href:!0});var jTt=s($U);Lwr=r(jTt,"FlaxBartForConditionalGeneration"),jTt.forEach(t),xwr=r(sRe," (BART model)"),sRe.forEach(t),$wr=i(we),bE=n(we,"LI",{});var lRe=s(bE);jFe=n(lRe,"STRONG",{});var DTt=s(jFe);kwr=r(DTt,"bert"),DTt.forEach(t),Swr=r(lRe," \u2014 "),kU=n(lRe,"A",{href:!0});var GTt=s(kU);Rwr=r(GTt,"FlaxBertForPreTraining"),GTt.forEach(t),Bwr=r(lRe," (BERT model)"),lRe.forEach(t),Pwr=i(we),vE=n(we,"LI",{});var iRe=s(vE);DFe=n(iRe,"STRONG",{});var OTt=s(DFe);Iwr=r(OTt,"big_bird"),OTt.forEach(t),qwr=r(iRe," \u2014 "),SU=n(iRe,"A",{href:!0});var VTt=s(SU);Nwr=r(VTt,"FlaxBigBirdForPreTraining"),VTt.forEach(t),jwr=r(iRe," (BigBird model)"),iRe.forEach(t),Dwr=i(we),FE=n(we,"LI",{});var dRe=s(FE);GFe=n(dRe,"STRONG",{});var XTt=s(GFe);Gwr=r(XTt,"electra"),XTt.forEach(t),Owr=r(dRe," \u2014 "),RU=n(dRe,"A",{href:!0});var zTt=s(RU);Vwr=r(zTt,"FlaxElectraForPreTraining"),zTt.forEach(t),Xwr=r(dRe," (ELECTRA model)"),dRe.forEach(t),zwr=i(we),TE=n(we,"LI",{});var cRe=s(TE);OFe=n(cRe,"STRONG",{});var QTt=s(OFe);Qwr=r(QTt,"mbart"),QTt.forEach(t),Wwr=r(cRe," \u2014 "),BU=n(cRe,"A",{href:!0});var WTt=s(BU);Hwr=r(WTt,"FlaxMBartForConditionalGeneration"),WTt.forEach(t),Uwr=r(cRe," (mBART model)"),cRe.forEach(t),Jwr=i(we),ME=n(we,"LI",{});var fRe=s(ME);VFe=n(fRe,"STRONG",{});var HTt=s(VFe);Ywr=r(HTt,"mt5"),HTt.forEach(t),Kwr=r(fRe," \u2014 "),PU=n(fRe,"A",{href:!0});var UTt=s(PU);Zwr=r(UTt,"FlaxMT5ForConditionalGeneration"),UTt.forEach(t),eAr=r(fRe," (mT5 model)"),fRe.forEach(t),oAr=i(we),EE=n(we,"LI",{});var mRe=s(EE);XFe=n(mRe,"STRONG",{});var JTt=s(XFe);rAr=r(JTt,"roberta"),JTt.forEach(t),tAr=r(mRe," \u2014 "),IU=n(mRe,"A",{href:!0});var YTt=s(IU);aAr=r(YTt,"FlaxRobertaForMaskedLM"),YTt.forEach(t),nAr=r(mRe," (RoBERTa model)"),mRe.forEach(t),sAr=i(we),CE=n(we,"LI",{});var gRe=s(CE);zFe=n(gRe,"STRONG",{});var KTt=s(zFe);lAr=r(KTt,"roformer"),KTt.forEach(t),iAr=r(gRe," \u2014 "),qU=n(gRe,"A",{href:!0});var ZTt=s(qU);dAr=r(ZTt,"FlaxRoFormerForMaskedLM"),ZTt.forEach(t),cAr=r(gRe," (RoFormer model)"),gRe.forEach(t),fAr=i(we),wE=n(we,"LI",{});var hRe=s(wE);QFe=n(hRe,"STRONG",{});var e9t=s(QFe);mAr=r(e9t,"t5"),e9t.forEach(t),gAr=r(hRe," \u2014 "),NU=n(hRe,"A",{href:!0});var o9t=s(NU);hAr=r(o9t,"FlaxT5ForConditionalGeneration"),o9t.forEach(t),pAr=r(hRe," (T5 model)"),hRe.forEach(t),uAr=i(we),AE=n(we,"LI",{});var pRe=s(AE);WFe=n(pRe,"STRONG",{});var r9t=s(WFe);_Ar=r(r9t,"wav2vec2"),r9t.forEach(t),bAr=r(pRe," \u2014 "),jU=n(pRe,"A",{href:!0});var t9t=s(jU);vAr=r(t9t,"FlaxWav2Vec2ForPreTraining"),t9t.forEach(t),FAr=r(pRe," (Wav2Vec2 model)"),pRe.forEach(t),TAr=i(we),yE=n(we,"LI",{});var uRe=s(yE);HFe=n(uRe,"STRONG",{});var a9t=s(HFe);MAr=r(a9t,"xlm-roberta"),a9t.forEach(t),EAr=r(uRe," \u2014 "),DU=n(uRe,"A",{href:!0});var n9t=s(DU);CAr=r(n9t,"FlaxXLMRobertaForMaskedLM"),n9t.forEach(t),wAr=r(uRe," (XLM-RoBERTa model)"),uRe.forEach(t),we.forEach(t),AAr=i(ql),T(LE.$$.fragment,ql),ql.forEach(t),Il.forEach(t),nIe=i(f),Ac=n(f,"H2",{class:!0});var dNe=s(Ac);xE=n(dNe,"A",{id:!0,class:!0,href:!0});var s9t=s(xE);UFe=n(s9t,"SPAN",{});var l9t=s(UFe);T(BL.$$.fragment,l9t),l9t.forEach(t),s9t.forEach(t),yAr=i(dNe),JFe=n(dNe,"SPAN",{});var i9t=s(JFe);LAr=r(i9t,"FlaxAutoModelForMaskedLM"),i9t.forEach(t),dNe.forEach(t),sIe=i(f),gr=n(f,"DIV",{class:!0});var Nl=s(gr);T(PL.$$.fragment,Nl),xAr=i(Nl),yc=n(Nl,"P",{});var zK=s(yc);$Ar=r(zK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),GU=n(zK,"A",{href:!0});var d9t=s(GU);kAr=r(d9t,"from_pretrained()"),d9t.forEach(t),SAr=r(zK," class method or the "),OU=n(zK,"A",{href:!0});var c9t=s(OU);RAr=r(c9t,"from_config()"),c9t.forEach(t),BAr=r(zK,` class
method.`),zK.forEach(t),PAr=i(Nl),IL=n(Nl,"P",{});var cNe=s(IL);IAr=r(cNe,"This class cannot be instantiated directly using "),YFe=n(cNe,"CODE",{});var f9t=s(YFe);qAr=r(f9t,"__init__()"),f9t.forEach(t),NAr=r(cNe," (throws an error)."),cNe.forEach(t),jAr=i(Nl),jt=n(Nl,"DIV",{class:!0});var nw=s(jt);T(qL.$$.fragment,nw),DAr=i(nw),KFe=n(nw,"P",{});var m9t=s(KFe);GAr=r(m9t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),m9t.forEach(t),OAr=i(nw),Lc=n(nw,"P",{});var QK=s(Lc);VAr=r(QK,`Note:
Loading a model from its configuration file does `),ZFe=n(QK,"STRONG",{});var g9t=s(ZFe);XAr=r(g9t,"not"),g9t.forEach(t),zAr=r(QK,` load the model weights. It only affects the
model\u2019s configuration. Use `),VU=n(QK,"A",{href:!0});var h9t=s(VU);QAr=r(h9t,"from_pretrained()"),h9t.forEach(t),WAr=r(QK," to load the model weights."),QK.forEach(t),HAr=i(nw),T($E.$$.fragment,nw),nw.forEach(t),UAr=i(Nl),Dr=n(Nl,"DIV",{class:!0});var jl=s(Dr);T(NL.$$.fragment,jl),JAr=i(jl),e6e=n(jl,"P",{});var p9t=s(e6e);YAr=r(p9t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),p9t.forEach(t),KAr=i(jl),gn=n(jl,"P",{});var sw=s(gn);ZAr=r(sw,"The model class to instantiate is selected based on the "),o6e=n(sw,"CODE",{});var u9t=s(o6e);e0r=r(u9t,"model_type"),u9t.forEach(t),o0r=r(sw,` property of the config object (either
passed as an argument or loaded from `),r6e=n(sw,"CODE",{});var _9t=s(r6e);r0r=r(_9t,"pretrained_model_name_or_path"),_9t.forEach(t),t0r=r(sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t6e=n(sw,"CODE",{});var b9t=s(t6e);a0r=r(b9t,"pretrained_model_name_or_path"),b9t.forEach(t),n0r=r(sw,":"),sw.forEach(t),s0r=i(jl),Le=n(jl,"UL",{});var Be=s(Le);kE=n(Be,"LI",{});var _Re=s(kE);a6e=n(_Re,"STRONG",{});var v9t=s(a6e);l0r=r(v9t,"albert"),v9t.forEach(t),i0r=r(_Re," \u2014 "),XU=n(_Re,"A",{href:!0});var F9t=s(XU);d0r=r(F9t,"FlaxAlbertForMaskedLM"),F9t.forEach(t),c0r=r(_Re," (ALBERT model)"),_Re.forEach(t),f0r=i(Be),SE=n(Be,"LI",{});var bRe=s(SE);n6e=n(bRe,"STRONG",{});var T9t=s(n6e);m0r=r(T9t,"bart"),T9t.forEach(t),g0r=r(bRe," \u2014 "),zU=n(bRe,"A",{href:!0});var M9t=s(zU);h0r=r(M9t,"FlaxBartForConditionalGeneration"),M9t.forEach(t),p0r=r(bRe," (BART model)"),bRe.forEach(t),u0r=i(Be),RE=n(Be,"LI",{});var vRe=s(RE);s6e=n(vRe,"STRONG",{});var E9t=s(s6e);_0r=r(E9t,"bert"),E9t.forEach(t),b0r=r(vRe," \u2014 "),QU=n(vRe,"A",{href:!0});var C9t=s(QU);v0r=r(C9t,"FlaxBertForMaskedLM"),C9t.forEach(t),F0r=r(vRe," (BERT model)"),vRe.forEach(t),T0r=i(Be),BE=n(Be,"LI",{});var FRe=s(BE);l6e=n(FRe,"STRONG",{});var w9t=s(l6e);M0r=r(w9t,"big_bird"),w9t.forEach(t),E0r=r(FRe," \u2014 "),WU=n(FRe,"A",{href:!0});var A9t=s(WU);C0r=r(A9t,"FlaxBigBirdForMaskedLM"),A9t.forEach(t),w0r=r(FRe," (BigBird model)"),FRe.forEach(t),A0r=i(Be),PE=n(Be,"LI",{});var TRe=s(PE);i6e=n(TRe,"STRONG",{});var y9t=s(i6e);y0r=r(y9t,"distilbert"),y9t.forEach(t),L0r=r(TRe," \u2014 "),HU=n(TRe,"A",{href:!0});var L9t=s(HU);x0r=r(L9t,"FlaxDistilBertForMaskedLM"),L9t.forEach(t),$0r=r(TRe," (DistilBERT model)"),TRe.forEach(t),k0r=i(Be),IE=n(Be,"LI",{});var MRe=s(IE);d6e=n(MRe,"STRONG",{});var x9t=s(d6e);S0r=r(x9t,"electra"),x9t.forEach(t),R0r=r(MRe," \u2014 "),UU=n(MRe,"A",{href:!0});var $9t=s(UU);B0r=r($9t,"FlaxElectraForMaskedLM"),$9t.forEach(t),P0r=r(MRe," (ELECTRA model)"),MRe.forEach(t),I0r=i(Be),qE=n(Be,"LI",{});var ERe=s(qE);c6e=n(ERe,"STRONG",{});var k9t=s(c6e);q0r=r(k9t,"mbart"),k9t.forEach(t),N0r=r(ERe," \u2014 "),JU=n(ERe,"A",{href:!0});var S9t=s(JU);j0r=r(S9t,"FlaxMBartForConditionalGeneration"),S9t.forEach(t),D0r=r(ERe," (mBART model)"),ERe.forEach(t),G0r=i(Be),NE=n(Be,"LI",{});var CRe=s(NE);f6e=n(CRe,"STRONG",{});var R9t=s(f6e);O0r=r(R9t,"roberta"),R9t.forEach(t),V0r=r(CRe," \u2014 "),YU=n(CRe,"A",{href:!0});var B9t=s(YU);X0r=r(B9t,"FlaxRobertaForMaskedLM"),B9t.forEach(t),z0r=r(CRe," (RoBERTa model)"),CRe.forEach(t),Q0r=i(Be),jE=n(Be,"LI",{});var wRe=s(jE);m6e=n(wRe,"STRONG",{});var P9t=s(m6e);W0r=r(P9t,"roformer"),P9t.forEach(t),H0r=r(wRe," \u2014 "),KU=n(wRe,"A",{href:!0});var I9t=s(KU);U0r=r(I9t,"FlaxRoFormerForMaskedLM"),I9t.forEach(t),J0r=r(wRe," (RoFormer model)"),wRe.forEach(t),Y0r=i(Be),DE=n(Be,"LI",{});var ARe=s(DE);g6e=n(ARe,"STRONG",{});var q9t=s(g6e);K0r=r(q9t,"xlm-roberta"),q9t.forEach(t),Z0r=r(ARe," \u2014 "),ZU=n(ARe,"A",{href:!0});var N9t=s(ZU);eyr=r(N9t,"FlaxXLMRobertaForMaskedLM"),N9t.forEach(t),oyr=r(ARe," (XLM-RoBERTa model)"),ARe.forEach(t),Be.forEach(t),ryr=i(jl),T(GE.$$.fragment,jl),jl.forEach(t),Nl.forEach(t),lIe=i(f),xc=n(f,"H2",{class:!0});var fNe=s(xc);OE=n(fNe,"A",{id:!0,class:!0,href:!0});var j9t=s(OE);h6e=n(j9t,"SPAN",{});var D9t=s(h6e);T(jL.$$.fragment,D9t),D9t.forEach(t),j9t.forEach(t),tyr=i(fNe),p6e=n(fNe,"SPAN",{});var G9t=s(p6e);ayr=r(G9t,"FlaxAutoModelForSeq2SeqLM"),G9t.forEach(t),fNe.forEach(t),iIe=i(f),hr=n(f,"DIV",{class:!0});var Dl=s(hr);T(DL.$$.fragment,Dl),nyr=i(Dl),$c=n(Dl,"P",{});var WK=s($c);syr=r(WK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),eJ=n(WK,"A",{href:!0});var O9t=s(eJ);lyr=r(O9t,"from_pretrained()"),O9t.forEach(t),iyr=r(WK," class method or the "),oJ=n(WK,"A",{href:!0});var V9t=s(oJ);dyr=r(V9t,"from_config()"),V9t.forEach(t),cyr=r(WK,` class
method.`),WK.forEach(t),fyr=i(Dl),GL=n(Dl,"P",{});var mNe=s(GL);myr=r(mNe,"This class cannot be instantiated directly using "),u6e=n(mNe,"CODE",{});var X9t=s(u6e);gyr=r(X9t,"__init__()"),X9t.forEach(t),hyr=r(mNe," (throws an error)."),mNe.forEach(t),pyr=i(Dl),Dt=n(Dl,"DIV",{class:!0});var lw=s(Dt);T(OL.$$.fragment,lw),uyr=i(lw),_6e=n(lw,"P",{});var z9t=s(_6e);_yr=r(z9t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),z9t.forEach(t),byr=i(lw),kc=n(lw,"P",{});var HK=s(kc);vyr=r(HK,`Note:
Loading a model from its configuration file does `),b6e=n(HK,"STRONG",{});var Q9t=s(b6e);Fyr=r(Q9t,"not"),Q9t.forEach(t),Tyr=r(HK,` load the model weights. It only affects the
model\u2019s configuration. Use `),rJ=n(HK,"A",{href:!0});var W9t=s(rJ);Myr=r(W9t,"from_pretrained()"),W9t.forEach(t),Eyr=r(HK," to load the model weights."),HK.forEach(t),Cyr=i(lw),T(VE.$$.fragment,lw),lw.forEach(t),wyr=i(Dl),Gr=n(Dl,"DIV",{class:!0});var Gl=s(Gr);T(VL.$$.fragment,Gl),Ayr=i(Gl),v6e=n(Gl,"P",{});var H9t=s(v6e);yyr=r(H9t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),H9t.forEach(t),Lyr=i(Gl),hn=n(Gl,"P",{});var iw=s(hn);xyr=r(iw,"The model class to instantiate is selected based on the "),F6e=n(iw,"CODE",{});var U9t=s(F6e);$yr=r(U9t,"model_type"),U9t.forEach(t),kyr=r(iw,` property of the config object (either
passed as an argument or loaded from `),T6e=n(iw,"CODE",{});var J9t=s(T6e);Syr=r(J9t,"pretrained_model_name_or_path"),J9t.forEach(t),Ryr=r(iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M6e=n(iw,"CODE",{});var Y9t=s(M6e);Byr=r(Y9t,"pretrained_model_name_or_path"),Y9t.forEach(t),Pyr=r(iw,":"),iw.forEach(t),Iyr=i(Gl),Se=n(Gl,"UL",{});var Ve=s(Se);XE=n(Ve,"LI",{});var yRe=s(XE);E6e=n(yRe,"STRONG",{});var K9t=s(E6e);qyr=r(K9t,"bart"),K9t.forEach(t),Nyr=r(yRe," \u2014 "),tJ=n(yRe,"A",{href:!0});var Z9t=s(tJ);jyr=r(Z9t,"FlaxBartForConditionalGeneration"),Z9t.forEach(t),Dyr=r(yRe," (BART model)"),yRe.forEach(t),Gyr=i(Ve),zE=n(Ve,"LI",{});var LRe=s(zE);C6e=n(LRe,"STRONG",{});var eMt=s(C6e);Oyr=r(eMt,"blenderbot"),eMt.forEach(t),Vyr=r(LRe," \u2014 "),aJ=n(LRe,"A",{href:!0});var oMt=s(aJ);Xyr=r(oMt,"FlaxBlenderbotForConditionalGeneration"),oMt.forEach(t),zyr=r(LRe," (Blenderbot model)"),LRe.forEach(t),Qyr=i(Ve),QE=n(Ve,"LI",{});var xRe=s(QE);w6e=n(xRe,"STRONG",{});var rMt=s(w6e);Wyr=r(rMt,"blenderbot-small"),rMt.forEach(t),Hyr=r(xRe," \u2014 "),nJ=n(xRe,"A",{href:!0});var tMt=s(nJ);Uyr=r(tMt,"FlaxBlenderbotSmallForConditionalGeneration"),tMt.forEach(t),Jyr=r(xRe," (BlenderbotSmall model)"),xRe.forEach(t),Yyr=i(Ve),WE=n(Ve,"LI",{});var $Re=s(WE);A6e=n($Re,"STRONG",{});var aMt=s(A6e);Kyr=r(aMt,"encoder-decoder"),aMt.forEach(t),Zyr=r($Re," \u2014 "),sJ=n($Re,"A",{href:!0});var nMt=s(sJ);eLr=r(nMt,"FlaxEncoderDecoderModel"),nMt.forEach(t),oLr=r($Re," (Encoder decoder model)"),$Re.forEach(t),rLr=i(Ve),HE=n(Ve,"LI",{});var kRe=s(HE);y6e=n(kRe,"STRONG",{});var sMt=s(y6e);tLr=r(sMt,"marian"),sMt.forEach(t),aLr=r(kRe," \u2014 "),lJ=n(kRe,"A",{href:!0});var lMt=s(lJ);nLr=r(lMt,"FlaxMarianMTModel"),lMt.forEach(t),sLr=r(kRe," (Marian model)"),kRe.forEach(t),lLr=i(Ve),UE=n(Ve,"LI",{});var SRe=s(UE);L6e=n(SRe,"STRONG",{});var iMt=s(L6e);iLr=r(iMt,"mbart"),iMt.forEach(t),dLr=r(SRe," \u2014 "),iJ=n(SRe,"A",{href:!0});var dMt=s(iJ);cLr=r(dMt,"FlaxMBartForConditionalGeneration"),dMt.forEach(t),fLr=r(SRe," (mBART model)"),SRe.forEach(t),mLr=i(Ve),JE=n(Ve,"LI",{});var RRe=s(JE);x6e=n(RRe,"STRONG",{});var cMt=s(x6e);gLr=r(cMt,"mt5"),cMt.forEach(t),hLr=r(RRe," \u2014 "),dJ=n(RRe,"A",{href:!0});var fMt=s(dJ);pLr=r(fMt,"FlaxMT5ForConditionalGeneration"),fMt.forEach(t),uLr=r(RRe," (mT5 model)"),RRe.forEach(t),_Lr=i(Ve),YE=n(Ve,"LI",{});var BRe=s(YE);$6e=n(BRe,"STRONG",{});var mMt=s($6e);bLr=r(mMt,"pegasus"),mMt.forEach(t),vLr=r(BRe," \u2014 "),cJ=n(BRe,"A",{href:!0});var gMt=s(cJ);FLr=r(gMt,"FlaxPegasusForConditionalGeneration"),gMt.forEach(t),TLr=r(BRe," (Pegasus model)"),BRe.forEach(t),MLr=i(Ve),KE=n(Ve,"LI",{});var PRe=s(KE);k6e=n(PRe,"STRONG",{});var hMt=s(k6e);ELr=r(hMt,"t5"),hMt.forEach(t),CLr=r(PRe," \u2014 "),fJ=n(PRe,"A",{href:!0});var pMt=s(fJ);wLr=r(pMt,"FlaxT5ForConditionalGeneration"),pMt.forEach(t),ALr=r(PRe," (T5 model)"),PRe.forEach(t),Ve.forEach(t),yLr=i(Gl),T(ZE.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),dIe=i(f),Sc=n(f,"H2",{class:!0});var gNe=s(Sc);e5=n(gNe,"A",{id:!0,class:!0,href:!0});var uMt=s(e5);S6e=n(uMt,"SPAN",{});var _Mt=s(S6e);T(XL.$$.fragment,_Mt),_Mt.forEach(t),uMt.forEach(t),LLr=i(gNe),R6e=n(gNe,"SPAN",{});var bMt=s(R6e);xLr=r(bMt,"FlaxAutoModelForSequenceClassification"),bMt.forEach(t),gNe.forEach(t),cIe=i(f),pr=n(f,"DIV",{class:!0});var Ol=s(pr);T(zL.$$.fragment,Ol),$Lr=i(Ol),Rc=n(Ol,"P",{});var UK=s(Rc);kLr=r(UK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),mJ=n(UK,"A",{href:!0});var vMt=s(mJ);SLr=r(vMt,"from_pretrained()"),vMt.forEach(t),RLr=r(UK," class method or the "),gJ=n(UK,"A",{href:!0});var FMt=s(gJ);BLr=r(FMt,"from_config()"),FMt.forEach(t),PLr=r(UK,` class
method.`),UK.forEach(t),ILr=i(Ol),QL=n(Ol,"P",{});var hNe=s(QL);qLr=r(hNe,"This class cannot be instantiated directly using "),B6e=n(hNe,"CODE",{});var TMt=s(B6e);NLr=r(TMt,"__init__()"),TMt.forEach(t),jLr=r(hNe," (throws an error)."),hNe.forEach(t),DLr=i(Ol),Gt=n(Ol,"DIV",{class:!0});var dw=s(Gt);T(WL.$$.fragment,dw),GLr=i(dw),P6e=n(dw,"P",{});var MMt=s(P6e);OLr=r(MMt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),MMt.forEach(t),VLr=i(dw),Bc=n(dw,"P",{});var JK=s(Bc);XLr=r(JK,`Note:
Loading a model from its configuration file does `),I6e=n(JK,"STRONG",{});var EMt=s(I6e);zLr=r(EMt,"not"),EMt.forEach(t),QLr=r(JK,` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=n(JK,"A",{href:!0});var CMt=s(hJ);WLr=r(CMt,"from_pretrained()"),CMt.forEach(t),HLr=r(JK," to load the model weights."),JK.forEach(t),ULr=i(dw),T(o5.$$.fragment,dw),dw.forEach(t),JLr=i(Ol),Or=n(Ol,"DIV",{class:!0});var Vl=s(Or);T(HL.$$.fragment,Vl),YLr=i(Vl),q6e=n(Vl,"P",{});var wMt=s(q6e);KLr=r(wMt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),wMt.forEach(t),ZLr=i(Vl),pn=n(Vl,"P",{});var cw=s(pn);e7r=r(cw,"The model class to instantiate is selected based on the "),N6e=n(cw,"CODE",{});var AMt=s(N6e);o7r=r(AMt,"model_type"),AMt.forEach(t),r7r=r(cw,` property of the config object (either
passed as an argument or loaded from `),j6e=n(cw,"CODE",{});var yMt=s(j6e);t7r=r(yMt,"pretrained_model_name_or_path"),yMt.forEach(t),a7r=r(cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D6e=n(cw,"CODE",{});var LMt=s(D6e);n7r=r(LMt,"pretrained_model_name_or_path"),LMt.forEach(t),s7r=r(cw,":"),cw.forEach(t),l7r=i(Vl),xe=n(Vl,"UL",{});var Pe=s(xe);r5=n(Pe,"LI",{});var IRe=s(r5);G6e=n(IRe,"STRONG",{});var xMt=s(G6e);i7r=r(xMt,"albert"),xMt.forEach(t),d7r=r(IRe," \u2014 "),pJ=n(IRe,"A",{href:!0});var $Mt=s(pJ);c7r=r($Mt,"FlaxAlbertForSequenceClassification"),$Mt.forEach(t),f7r=r(IRe," (ALBERT model)"),IRe.forEach(t),m7r=i(Pe),t5=n(Pe,"LI",{});var qRe=s(t5);O6e=n(qRe,"STRONG",{});var kMt=s(O6e);g7r=r(kMt,"bart"),kMt.forEach(t),h7r=r(qRe," \u2014 "),uJ=n(qRe,"A",{href:!0});var SMt=s(uJ);p7r=r(SMt,"FlaxBartForSequenceClassification"),SMt.forEach(t),u7r=r(qRe," (BART model)"),qRe.forEach(t),_7r=i(Pe),a5=n(Pe,"LI",{});var NRe=s(a5);V6e=n(NRe,"STRONG",{});var RMt=s(V6e);b7r=r(RMt,"bert"),RMt.forEach(t),v7r=r(NRe," \u2014 "),_J=n(NRe,"A",{href:!0});var BMt=s(_J);F7r=r(BMt,"FlaxBertForSequenceClassification"),BMt.forEach(t),T7r=r(NRe," (BERT model)"),NRe.forEach(t),M7r=i(Pe),n5=n(Pe,"LI",{});var jRe=s(n5);X6e=n(jRe,"STRONG",{});var PMt=s(X6e);E7r=r(PMt,"big_bird"),PMt.forEach(t),C7r=r(jRe," \u2014 "),bJ=n(jRe,"A",{href:!0});var IMt=s(bJ);w7r=r(IMt,"FlaxBigBirdForSequenceClassification"),IMt.forEach(t),A7r=r(jRe," (BigBird model)"),jRe.forEach(t),y7r=i(Pe),s5=n(Pe,"LI",{});var DRe=s(s5);z6e=n(DRe,"STRONG",{});var qMt=s(z6e);L7r=r(qMt,"distilbert"),qMt.forEach(t),x7r=r(DRe," \u2014 "),vJ=n(DRe,"A",{href:!0});var NMt=s(vJ);$7r=r(NMt,"FlaxDistilBertForSequenceClassification"),NMt.forEach(t),k7r=r(DRe," (DistilBERT model)"),DRe.forEach(t),S7r=i(Pe),l5=n(Pe,"LI",{});var GRe=s(l5);Q6e=n(GRe,"STRONG",{});var jMt=s(Q6e);R7r=r(jMt,"electra"),jMt.forEach(t),B7r=r(GRe," \u2014 "),FJ=n(GRe,"A",{href:!0});var DMt=s(FJ);P7r=r(DMt,"FlaxElectraForSequenceClassification"),DMt.forEach(t),I7r=r(GRe," (ELECTRA model)"),GRe.forEach(t),q7r=i(Pe),i5=n(Pe,"LI",{});var ORe=s(i5);W6e=n(ORe,"STRONG",{});var GMt=s(W6e);N7r=r(GMt,"mbart"),GMt.forEach(t),j7r=r(ORe," \u2014 "),TJ=n(ORe,"A",{href:!0});var OMt=s(TJ);D7r=r(OMt,"FlaxMBartForSequenceClassification"),OMt.forEach(t),G7r=r(ORe," (mBART model)"),ORe.forEach(t),O7r=i(Pe),d5=n(Pe,"LI",{});var VRe=s(d5);H6e=n(VRe,"STRONG",{});var VMt=s(H6e);V7r=r(VMt,"roberta"),VMt.forEach(t),X7r=r(VRe," \u2014 "),MJ=n(VRe,"A",{href:!0});var XMt=s(MJ);z7r=r(XMt,"FlaxRobertaForSequenceClassification"),XMt.forEach(t),Q7r=r(VRe," (RoBERTa model)"),VRe.forEach(t),W7r=i(Pe),c5=n(Pe,"LI",{});var XRe=s(c5);U6e=n(XRe,"STRONG",{});var zMt=s(U6e);H7r=r(zMt,"roformer"),zMt.forEach(t),U7r=r(XRe," \u2014 "),EJ=n(XRe,"A",{href:!0});var QMt=s(EJ);J7r=r(QMt,"FlaxRoFormerForSequenceClassification"),QMt.forEach(t),Y7r=r(XRe," (RoFormer model)"),XRe.forEach(t),K7r=i(Pe),f5=n(Pe,"LI",{});var zRe=s(f5);J6e=n(zRe,"STRONG",{});var WMt=s(J6e);Z7r=r(WMt,"xlm-roberta"),WMt.forEach(t),exr=r(zRe," \u2014 "),CJ=n(zRe,"A",{href:!0});var HMt=s(CJ);oxr=r(HMt,"FlaxXLMRobertaForSequenceClassification"),HMt.forEach(t),rxr=r(zRe," (XLM-RoBERTa model)"),zRe.forEach(t),Pe.forEach(t),txr=i(Vl),T(m5.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),fIe=i(f),Pc=n(f,"H2",{class:!0});var pNe=s(Pc);g5=n(pNe,"A",{id:!0,class:!0,href:!0});var UMt=s(g5);Y6e=n(UMt,"SPAN",{});var JMt=s(Y6e);T(UL.$$.fragment,JMt),JMt.forEach(t),UMt.forEach(t),axr=i(pNe),K6e=n(pNe,"SPAN",{});var YMt=s(K6e);nxr=r(YMt,"FlaxAutoModelForQuestionAnswering"),YMt.forEach(t),pNe.forEach(t),mIe=i(f),ur=n(f,"DIV",{class:!0});var Xl=s(ur);T(JL.$$.fragment,Xl),sxr=i(Xl),Ic=n(Xl,"P",{});var YK=s(Ic);lxr=r(YK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),wJ=n(YK,"A",{href:!0});var KMt=s(wJ);ixr=r(KMt,"from_pretrained()"),KMt.forEach(t),dxr=r(YK," class method or the "),AJ=n(YK,"A",{href:!0});var ZMt=s(AJ);cxr=r(ZMt,"from_config()"),ZMt.forEach(t),fxr=r(YK,` class
method.`),YK.forEach(t),mxr=i(Xl),YL=n(Xl,"P",{});var uNe=s(YL);gxr=r(uNe,"This class cannot be instantiated directly using "),Z6e=n(uNe,"CODE",{});var e4t=s(Z6e);hxr=r(e4t,"__init__()"),e4t.forEach(t),pxr=r(uNe," (throws an error)."),uNe.forEach(t),uxr=i(Xl),Ot=n(Xl,"DIV",{class:!0});var fw=s(Ot);T(KL.$$.fragment,fw),_xr=i(fw),eTe=n(fw,"P",{});var o4t=s(eTe);bxr=r(o4t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),o4t.forEach(t),vxr=i(fw),qc=n(fw,"P",{});var KK=s(qc);Fxr=r(KK,`Note:
Loading a model from its configuration file does `),oTe=n(KK,"STRONG",{});var r4t=s(oTe);Txr=r(r4t,"not"),r4t.forEach(t),Mxr=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),yJ=n(KK,"A",{href:!0});var t4t=s(yJ);Exr=r(t4t,"from_pretrained()"),t4t.forEach(t),Cxr=r(KK," to load the model weights."),KK.forEach(t),wxr=i(fw),T(h5.$$.fragment,fw),fw.forEach(t),Axr=i(Xl),Vr=n(Xl,"DIV",{class:!0});var zl=s(Vr);T(ZL.$$.fragment,zl),yxr=i(zl),rTe=n(zl,"P",{});var a4t=s(rTe);Lxr=r(a4t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),a4t.forEach(t),xxr=i(zl),un=n(zl,"P",{});var mw=s(un);$xr=r(mw,"The model class to instantiate is selected based on the "),tTe=n(mw,"CODE",{});var n4t=s(tTe);kxr=r(n4t,"model_type"),n4t.forEach(t),Sxr=r(mw,` property of the config object (either
passed as an argument or loaded from `),aTe=n(mw,"CODE",{});var s4t=s(aTe);Rxr=r(s4t,"pretrained_model_name_or_path"),s4t.forEach(t),Bxr=r(mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nTe=n(mw,"CODE",{});var l4t=s(nTe);Pxr=r(l4t,"pretrained_model_name_or_path"),l4t.forEach(t),Ixr=r(mw,":"),mw.forEach(t),qxr=i(zl),$e=n(zl,"UL",{});var Ie=s($e);p5=n(Ie,"LI",{});var QRe=s(p5);sTe=n(QRe,"STRONG",{});var i4t=s(sTe);Nxr=r(i4t,"albert"),i4t.forEach(t),jxr=r(QRe," \u2014 "),LJ=n(QRe,"A",{href:!0});var d4t=s(LJ);Dxr=r(d4t,"FlaxAlbertForQuestionAnswering"),d4t.forEach(t),Gxr=r(QRe," (ALBERT model)"),QRe.forEach(t),Oxr=i(Ie),u5=n(Ie,"LI",{});var WRe=s(u5);lTe=n(WRe,"STRONG",{});var c4t=s(lTe);Vxr=r(c4t,"bart"),c4t.forEach(t),Xxr=r(WRe," \u2014 "),xJ=n(WRe,"A",{href:!0});var f4t=s(xJ);zxr=r(f4t,"FlaxBartForQuestionAnswering"),f4t.forEach(t),Qxr=r(WRe," (BART model)"),WRe.forEach(t),Wxr=i(Ie),_5=n(Ie,"LI",{});var HRe=s(_5);iTe=n(HRe,"STRONG",{});var m4t=s(iTe);Hxr=r(m4t,"bert"),m4t.forEach(t),Uxr=r(HRe," \u2014 "),$J=n(HRe,"A",{href:!0});var g4t=s($J);Jxr=r(g4t,"FlaxBertForQuestionAnswering"),g4t.forEach(t),Yxr=r(HRe," (BERT model)"),HRe.forEach(t),Kxr=i(Ie),b5=n(Ie,"LI",{});var URe=s(b5);dTe=n(URe,"STRONG",{});var h4t=s(dTe);Zxr=r(h4t,"big_bird"),h4t.forEach(t),e$r=r(URe," \u2014 "),kJ=n(URe,"A",{href:!0});var p4t=s(kJ);o$r=r(p4t,"FlaxBigBirdForQuestionAnswering"),p4t.forEach(t),r$r=r(URe," (BigBird model)"),URe.forEach(t),t$r=i(Ie),v5=n(Ie,"LI",{});var JRe=s(v5);cTe=n(JRe,"STRONG",{});var u4t=s(cTe);a$r=r(u4t,"distilbert"),u4t.forEach(t),n$r=r(JRe," \u2014 "),SJ=n(JRe,"A",{href:!0});var _4t=s(SJ);s$r=r(_4t,"FlaxDistilBertForQuestionAnswering"),_4t.forEach(t),l$r=r(JRe," (DistilBERT model)"),JRe.forEach(t),i$r=i(Ie),F5=n(Ie,"LI",{});var YRe=s(F5);fTe=n(YRe,"STRONG",{});var b4t=s(fTe);d$r=r(b4t,"electra"),b4t.forEach(t),c$r=r(YRe," \u2014 "),RJ=n(YRe,"A",{href:!0});var v4t=s(RJ);f$r=r(v4t,"FlaxElectraForQuestionAnswering"),v4t.forEach(t),m$r=r(YRe," (ELECTRA model)"),YRe.forEach(t),g$r=i(Ie),T5=n(Ie,"LI",{});var KRe=s(T5);mTe=n(KRe,"STRONG",{});var F4t=s(mTe);h$r=r(F4t,"mbart"),F4t.forEach(t),p$r=r(KRe," \u2014 "),BJ=n(KRe,"A",{href:!0});var T4t=s(BJ);u$r=r(T4t,"FlaxMBartForQuestionAnswering"),T4t.forEach(t),_$r=r(KRe," (mBART model)"),KRe.forEach(t),b$r=i(Ie),M5=n(Ie,"LI",{});var ZRe=s(M5);gTe=n(ZRe,"STRONG",{});var M4t=s(gTe);v$r=r(M4t,"roberta"),M4t.forEach(t),F$r=r(ZRe," \u2014 "),PJ=n(ZRe,"A",{href:!0});var E4t=s(PJ);T$r=r(E4t,"FlaxRobertaForQuestionAnswering"),E4t.forEach(t),M$r=r(ZRe," (RoBERTa model)"),ZRe.forEach(t),E$r=i(Ie),E5=n(Ie,"LI",{});var eBe=s(E5);hTe=n(eBe,"STRONG",{});var C4t=s(hTe);C$r=r(C4t,"roformer"),C4t.forEach(t),w$r=r(eBe," \u2014 "),IJ=n(eBe,"A",{href:!0});var w4t=s(IJ);A$r=r(w4t,"FlaxRoFormerForQuestionAnswering"),w4t.forEach(t),y$r=r(eBe," (RoFormer model)"),eBe.forEach(t),L$r=i(Ie),C5=n(Ie,"LI",{});var oBe=s(C5);pTe=n(oBe,"STRONG",{});var A4t=s(pTe);x$r=r(A4t,"xlm-roberta"),A4t.forEach(t),$$r=r(oBe," \u2014 "),qJ=n(oBe,"A",{href:!0});var y4t=s(qJ);k$r=r(y4t,"FlaxXLMRobertaForQuestionAnswering"),y4t.forEach(t),S$r=r(oBe," (XLM-RoBERTa model)"),oBe.forEach(t),Ie.forEach(t),R$r=i(zl),T(w5.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),gIe=i(f),Nc=n(f,"H2",{class:!0});var _Ne=s(Nc);A5=n(_Ne,"A",{id:!0,class:!0,href:!0});var L4t=s(A5);uTe=n(L4t,"SPAN",{});var x4t=s(uTe);T(e7.$$.fragment,x4t),x4t.forEach(t),L4t.forEach(t),B$r=i(_Ne),_Te=n(_Ne,"SPAN",{});var $4t=s(_Te);P$r=r($4t,"FlaxAutoModelForTokenClassification"),$4t.forEach(t),_Ne.forEach(t),hIe=i(f),_r=n(f,"DIV",{class:!0});var Ql=s(_r);T(o7.$$.fragment,Ql),I$r=i(Ql),jc=n(Ql,"P",{});var ZK=s(jc);q$r=r(ZK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),NJ=n(ZK,"A",{href:!0});var k4t=s(NJ);N$r=r(k4t,"from_pretrained()"),k4t.forEach(t),j$r=r(ZK," class method or the "),jJ=n(ZK,"A",{href:!0});var S4t=s(jJ);D$r=r(S4t,"from_config()"),S4t.forEach(t),G$r=r(ZK,` class
method.`),ZK.forEach(t),O$r=i(Ql),r7=n(Ql,"P",{});var bNe=s(r7);V$r=r(bNe,"This class cannot be instantiated directly using "),bTe=n(bNe,"CODE",{});var R4t=s(bTe);X$r=r(R4t,"__init__()"),R4t.forEach(t),z$r=r(bNe," (throws an error)."),bNe.forEach(t),Q$r=i(Ql),Vt=n(Ql,"DIV",{class:!0});var gw=s(Vt);T(t7.$$.fragment,gw),W$r=i(gw),vTe=n(gw,"P",{});var B4t=s(vTe);H$r=r(B4t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),B4t.forEach(t),U$r=i(gw),Dc=n(gw,"P",{});var eZ=s(Dc);J$r=r(eZ,`Note:
Loading a model from its configuration file does `),FTe=n(eZ,"STRONG",{});var P4t=s(FTe);Y$r=r(P4t,"not"),P4t.forEach(t),K$r=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DJ=n(eZ,"A",{href:!0});var I4t=s(DJ);Z$r=r(I4t,"from_pretrained()"),I4t.forEach(t),ekr=r(eZ," to load the model weights."),eZ.forEach(t),okr=i(gw),T(y5.$$.fragment,gw),gw.forEach(t),rkr=i(Ql),Xr=n(Ql,"DIV",{class:!0});var Wl=s(Xr);T(a7.$$.fragment,Wl),tkr=i(Wl),TTe=n(Wl,"P",{});var q4t=s(TTe);akr=r(q4t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),q4t.forEach(t),nkr=i(Wl),_n=n(Wl,"P",{});var hw=s(_n);skr=r(hw,"The model class to instantiate is selected based on the "),MTe=n(hw,"CODE",{});var N4t=s(MTe);lkr=r(N4t,"model_type"),N4t.forEach(t),ikr=r(hw,` property of the config object (either
passed as an argument or loaded from `),ETe=n(hw,"CODE",{});var j4t=s(ETe);dkr=r(j4t,"pretrained_model_name_or_path"),j4t.forEach(t),ckr=r(hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CTe=n(hw,"CODE",{});var D4t=s(CTe);fkr=r(D4t,"pretrained_model_name_or_path"),D4t.forEach(t),mkr=r(hw,":"),hw.forEach(t),gkr=i(Wl),De=n(Wl,"UL",{});var Fo=s(De);L5=n(Fo,"LI",{});var rBe=s(L5);wTe=n(rBe,"STRONG",{});var G4t=s(wTe);hkr=r(G4t,"albert"),G4t.forEach(t),pkr=r(rBe," \u2014 "),GJ=n(rBe,"A",{href:!0});var O4t=s(GJ);ukr=r(O4t,"FlaxAlbertForTokenClassification"),O4t.forEach(t),_kr=r(rBe," (ALBERT model)"),rBe.forEach(t),bkr=i(Fo),x5=n(Fo,"LI",{});var tBe=s(x5);ATe=n(tBe,"STRONG",{});var V4t=s(ATe);vkr=r(V4t,"bert"),V4t.forEach(t),Fkr=r(tBe," \u2014 "),OJ=n(tBe,"A",{href:!0});var X4t=s(OJ);Tkr=r(X4t,"FlaxBertForTokenClassification"),X4t.forEach(t),Mkr=r(tBe," (BERT model)"),tBe.forEach(t),Ekr=i(Fo),$5=n(Fo,"LI",{});var aBe=s($5);yTe=n(aBe,"STRONG",{});var z4t=s(yTe);Ckr=r(z4t,"big_bird"),z4t.forEach(t),wkr=r(aBe," \u2014 "),VJ=n(aBe,"A",{href:!0});var Q4t=s(VJ);Akr=r(Q4t,"FlaxBigBirdForTokenClassification"),Q4t.forEach(t),ykr=r(aBe," (BigBird model)"),aBe.forEach(t),Lkr=i(Fo),k5=n(Fo,"LI",{});var nBe=s(k5);LTe=n(nBe,"STRONG",{});var W4t=s(LTe);xkr=r(W4t,"distilbert"),W4t.forEach(t),$kr=r(nBe," \u2014 "),XJ=n(nBe,"A",{href:!0});var H4t=s(XJ);kkr=r(H4t,"FlaxDistilBertForTokenClassification"),H4t.forEach(t),Skr=r(nBe," (DistilBERT model)"),nBe.forEach(t),Rkr=i(Fo),S5=n(Fo,"LI",{});var sBe=s(S5);xTe=n(sBe,"STRONG",{});var U4t=s(xTe);Bkr=r(U4t,"electra"),U4t.forEach(t),Pkr=r(sBe," \u2014 "),zJ=n(sBe,"A",{href:!0});var J4t=s(zJ);Ikr=r(J4t,"FlaxElectraForTokenClassification"),J4t.forEach(t),qkr=r(sBe," (ELECTRA model)"),sBe.forEach(t),Nkr=i(Fo),R5=n(Fo,"LI",{});var lBe=s(R5);$Te=n(lBe,"STRONG",{});var Y4t=s($Te);jkr=r(Y4t,"roberta"),Y4t.forEach(t),Dkr=r(lBe," \u2014 "),QJ=n(lBe,"A",{href:!0});var K4t=s(QJ);Gkr=r(K4t,"FlaxRobertaForTokenClassification"),K4t.forEach(t),Okr=r(lBe," (RoBERTa model)"),lBe.forEach(t),Vkr=i(Fo),B5=n(Fo,"LI",{});var iBe=s(B5);kTe=n(iBe,"STRONG",{});var Z4t=s(kTe);Xkr=r(Z4t,"roformer"),Z4t.forEach(t),zkr=r(iBe," \u2014 "),WJ=n(iBe,"A",{href:!0});var eEt=s(WJ);Qkr=r(eEt,"FlaxRoFormerForTokenClassification"),eEt.forEach(t),Wkr=r(iBe," (RoFormer model)"),iBe.forEach(t),Hkr=i(Fo),P5=n(Fo,"LI",{});var dBe=s(P5);STe=n(dBe,"STRONG",{});var oEt=s(STe);Ukr=r(oEt,"xlm-roberta"),oEt.forEach(t),Jkr=r(dBe," \u2014 "),HJ=n(dBe,"A",{href:!0});var rEt=s(HJ);Ykr=r(rEt,"FlaxXLMRobertaForTokenClassification"),rEt.forEach(t),Kkr=r(dBe," (XLM-RoBERTa model)"),dBe.forEach(t),Fo.forEach(t),Zkr=i(Wl),T(I5.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),pIe=i(f),Gc=n(f,"H2",{class:!0});var vNe=s(Gc);q5=n(vNe,"A",{id:!0,class:!0,href:!0});var tEt=s(q5);RTe=n(tEt,"SPAN",{});var aEt=s(RTe);T(n7.$$.fragment,aEt),aEt.forEach(t),tEt.forEach(t),eSr=i(vNe),BTe=n(vNe,"SPAN",{});var nEt=s(BTe);oSr=r(nEt,"FlaxAutoModelForMultipleChoice"),nEt.forEach(t),vNe.forEach(t),uIe=i(f),br=n(f,"DIV",{class:!0});var Hl=s(br);T(s7.$$.fragment,Hl),rSr=i(Hl),Oc=n(Hl,"P",{});var oZ=s(Oc);tSr=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),UJ=n(oZ,"A",{href:!0});var sEt=s(UJ);aSr=r(sEt,"from_pretrained()"),sEt.forEach(t),nSr=r(oZ," class method or the "),JJ=n(oZ,"A",{href:!0});var lEt=s(JJ);sSr=r(lEt,"from_config()"),lEt.forEach(t),lSr=r(oZ,` class
method.`),oZ.forEach(t),iSr=i(Hl),l7=n(Hl,"P",{});var FNe=s(l7);dSr=r(FNe,"This class cannot be instantiated directly using "),PTe=n(FNe,"CODE",{});var iEt=s(PTe);cSr=r(iEt,"__init__()"),iEt.forEach(t),fSr=r(FNe," (throws an error)."),FNe.forEach(t),mSr=i(Hl),Xt=n(Hl,"DIV",{class:!0});var pw=s(Xt);T(i7.$$.fragment,pw),gSr=i(pw),ITe=n(pw,"P",{});var dEt=s(ITe);hSr=r(dEt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),dEt.forEach(t),pSr=i(pw),Vc=n(pw,"P",{});var rZ=s(Vc);uSr=r(rZ,`Note:
Loading a model from its configuration file does `),qTe=n(rZ,"STRONG",{});var cEt=s(qTe);_Sr=r(cEt,"not"),cEt.forEach(t),bSr=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YJ=n(rZ,"A",{href:!0});var fEt=s(YJ);vSr=r(fEt,"from_pretrained()"),fEt.forEach(t),FSr=r(rZ," to load the model weights."),rZ.forEach(t),TSr=i(pw),T(N5.$$.fragment,pw),pw.forEach(t),MSr=i(Hl),zr=n(Hl,"DIV",{class:!0});var Ul=s(zr);T(d7.$$.fragment,Ul),ESr=i(Ul),NTe=n(Ul,"P",{});var mEt=s(NTe);CSr=r(mEt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),mEt.forEach(t),wSr=i(Ul),bn=n(Ul,"P",{});var uw=s(bn);ASr=r(uw,"The model class to instantiate is selected based on the "),jTe=n(uw,"CODE",{});var gEt=s(jTe);ySr=r(gEt,"model_type"),gEt.forEach(t),LSr=r(uw,` property of the config object (either
passed as an argument or loaded from `),DTe=n(uw,"CODE",{});var hEt=s(DTe);xSr=r(hEt,"pretrained_model_name_or_path"),hEt.forEach(t),$Sr=r(uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GTe=n(uw,"CODE",{});var pEt=s(GTe);kSr=r(pEt,"pretrained_model_name_or_path"),pEt.forEach(t),SSr=r(uw,":"),uw.forEach(t),RSr=i(Ul),Ge=n(Ul,"UL",{});var To=s(Ge);j5=n(To,"LI",{});var cBe=s(j5);OTe=n(cBe,"STRONG",{});var uEt=s(OTe);BSr=r(uEt,"albert"),uEt.forEach(t),PSr=r(cBe," \u2014 "),KJ=n(cBe,"A",{href:!0});var _Et=s(KJ);ISr=r(_Et,"FlaxAlbertForMultipleChoice"),_Et.forEach(t),qSr=r(cBe," (ALBERT model)"),cBe.forEach(t),NSr=i(To),D5=n(To,"LI",{});var fBe=s(D5);VTe=n(fBe,"STRONG",{});var bEt=s(VTe);jSr=r(bEt,"bert"),bEt.forEach(t),DSr=r(fBe," \u2014 "),ZJ=n(fBe,"A",{href:!0});var vEt=s(ZJ);GSr=r(vEt,"FlaxBertForMultipleChoice"),vEt.forEach(t),OSr=r(fBe," (BERT model)"),fBe.forEach(t),VSr=i(To),G5=n(To,"LI",{});var mBe=s(G5);XTe=n(mBe,"STRONG",{});var FEt=s(XTe);XSr=r(FEt,"big_bird"),FEt.forEach(t),zSr=r(mBe," \u2014 "),eY=n(mBe,"A",{href:!0});var TEt=s(eY);QSr=r(TEt,"FlaxBigBirdForMultipleChoice"),TEt.forEach(t),WSr=r(mBe," (BigBird model)"),mBe.forEach(t),HSr=i(To),O5=n(To,"LI",{});var gBe=s(O5);zTe=n(gBe,"STRONG",{});var MEt=s(zTe);USr=r(MEt,"distilbert"),MEt.forEach(t),JSr=r(gBe," \u2014 "),oY=n(gBe,"A",{href:!0});var EEt=s(oY);YSr=r(EEt,"FlaxDistilBertForMultipleChoice"),EEt.forEach(t),KSr=r(gBe," (DistilBERT model)"),gBe.forEach(t),ZSr=i(To),V5=n(To,"LI",{});var hBe=s(V5);QTe=n(hBe,"STRONG",{});var CEt=s(QTe);eRr=r(CEt,"electra"),CEt.forEach(t),oRr=r(hBe," \u2014 "),rY=n(hBe,"A",{href:!0});var wEt=s(rY);rRr=r(wEt,"FlaxElectraForMultipleChoice"),wEt.forEach(t),tRr=r(hBe," (ELECTRA model)"),hBe.forEach(t),aRr=i(To),X5=n(To,"LI",{});var pBe=s(X5);WTe=n(pBe,"STRONG",{});var AEt=s(WTe);nRr=r(AEt,"roberta"),AEt.forEach(t),sRr=r(pBe," \u2014 "),tY=n(pBe,"A",{href:!0});var yEt=s(tY);lRr=r(yEt,"FlaxRobertaForMultipleChoice"),yEt.forEach(t),iRr=r(pBe," (RoBERTa model)"),pBe.forEach(t),dRr=i(To),z5=n(To,"LI",{});var uBe=s(z5);HTe=n(uBe,"STRONG",{});var LEt=s(HTe);cRr=r(LEt,"roformer"),LEt.forEach(t),fRr=r(uBe," \u2014 "),aY=n(uBe,"A",{href:!0});var xEt=s(aY);mRr=r(xEt,"FlaxRoFormerForMultipleChoice"),xEt.forEach(t),gRr=r(uBe," (RoFormer model)"),uBe.forEach(t),hRr=i(To),Q5=n(To,"LI",{});var _Be=s(Q5);UTe=n(_Be,"STRONG",{});var $Et=s(UTe);pRr=r($Et,"xlm-roberta"),$Et.forEach(t),uRr=r(_Be," \u2014 "),nY=n(_Be,"A",{href:!0});var kEt=s(nY);_Rr=r(kEt,"FlaxXLMRobertaForMultipleChoice"),kEt.forEach(t),bRr=r(_Be," (XLM-RoBERTa model)"),_Be.forEach(t),To.forEach(t),vRr=i(Ul),T(W5.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),_Ie=i(f),Xc=n(f,"H2",{class:!0});var TNe=s(Xc);H5=n(TNe,"A",{id:!0,class:!0,href:!0});var SEt=s(H5);JTe=n(SEt,"SPAN",{});var REt=s(JTe);T(c7.$$.fragment,REt),REt.forEach(t),SEt.forEach(t),FRr=i(TNe),YTe=n(TNe,"SPAN",{});var BEt=s(YTe);TRr=r(BEt,"FlaxAutoModelForNextSentencePrediction"),BEt.forEach(t),TNe.forEach(t),bIe=i(f),vr=n(f,"DIV",{class:!0});var Jl=s(vr);T(f7.$$.fragment,Jl),MRr=i(Jl),zc=n(Jl,"P",{});var tZ=s(zc);ERr=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),sY=n(tZ,"A",{href:!0});var PEt=s(sY);CRr=r(PEt,"from_pretrained()"),PEt.forEach(t),wRr=r(tZ," class method or the "),lY=n(tZ,"A",{href:!0});var IEt=s(lY);ARr=r(IEt,"from_config()"),IEt.forEach(t),yRr=r(tZ,` class
method.`),tZ.forEach(t),LRr=i(Jl),m7=n(Jl,"P",{});var MNe=s(m7);xRr=r(MNe,"This class cannot be instantiated directly using "),KTe=n(MNe,"CODE",{});var qEt=s(KTe);$Rr=r(qEt,"__init__()"),qEt.forEach(t),kRr=r(MNe," (throws an error)."),MNe.forEach(t),SRr=i(Jl),zt=n(Jl,"DIV",{class:!0});var _w=s(zt);T(g7.$$.fragment,_w),RRr=i(_w),ZTe=n(_w,"P",{});var NEt=s(ZTe);BRr=r(NEt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),NEt.forEach(t),PRr=i(_w),Qc=n(_w,"P",{});var aZ=s(Qc);IRr=r(aZ,`Note:
Loading a model from its configuration file does `),e9e=n(aZ,"STRONG",{});var jEt=s(e9e);qRr=r(jEt,"not"),jEt.forEach(t),NRr=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iY=n(aZ,"A",{href:!0});var DEt=s(iY);jRr=r(DEt,"from_pretrained()"),DEt.forEach(t),DRr=r(aZ," to load the model weights."),aZ.forEach(t),GRr=i(_w),T(U5.$$.fragment,_w),_w.forEach(t),ORr=i(Jl),Qr=n(Jl,"DIV",{class:!0});var Yl=s(Qr);T(h7.$$.fragment,Yl),VRr=i(Yl),o9e=n(Yl,"P",{});var GEt=s(o9e);XRr=r(GEt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),GEt.forEach(t),zRr=i(Yl),vn=n(Yl,"P",{});var bw=s(vn);QRr=r(bw,"The model class to instantiate is selected based on the "),r9e=n(bw,"CODE",{});var OEt=s(r9e);WRr=r(OEt,"model_type"),OEt.forEach(t),HRr=r(bw,` property of the config object (either
passed as an argument or loaded from `),t9e=n(bw,"CODE",{});var VEt=s(t9e);URr=r(VEt,"pretrained_model_name_or_path"),VEt.forEach(t),JRr=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a9e=n(bw,"CODE",{});var XEt=s(a9e);YRr=r(XEt,"pretrained_model_name_or_path"),XEt.forEach(t),KRr=r(bw,":"),bw.forEach(t),ZRr=i(Yl),n9e=n(Yl,"UL",{});var zEt=s(n9e);J5=n(zEt,"LI",{});var bBe=s(J5);s9e=n(bBe,"STRONG",{});var QEt=s(s9e);eBr=r(QEt,"bert"),QEt.forEach(t),oBr=r(bBe," \u2014 "),dY=n(bBe,"A",{href:!0});var WEt=s(dY);rBr=r(WEt,"FlaxBertForNextSentencePrediction"),WEt.forEach(t),tBr=r(bBe," (BERT model)"),bBe.forEach(t),zEt.forEach(t),aBr=i(Yl),T(Y5.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),vIe=i(f),Wc=n(f,"H2",{class:!0});var ENe=s(Wc);K5=n(ENe,"A",{id:!0,class:!0,href:!0});var HEt=s(K5);l9e=n(HEt,"SPAN",{});var UEt=s(l9e);T(p7.$$.fragment,UEt),UEt.forEach(t),HEt.forEach(t),nBr=i(ENe),i9e=n(ENe,"SPAN",{});var JEt=s(i9e);sBr=r(JEt,"FlaxAutoModelForImageClassification"),JEt.forEach(t),ENe.forEach(t),FIe=i(f),Fr=n(f,"DIV",{class:!0});var Kl=s(Fr);T(u7.$$.fragment,Kl),lBr=i(Kl),Hc=n(Kl,"P",{});var nZ=s(Hc);iBr=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),cY=n(nZ,"A",{href:!0});var YEt=s(cY);dBr=r(YEt,"from_pretrained()"),YEt.forEach(t),cBr=r(nZ," class method or the "),fY=n(nZ,"A",{href:!0});var KEt=s(fY);fBr=r(KEt,"from_config()"),KEt.forEach(t),mBr=r(nZ,` class
method.`),nZ.forEach(t),gBr=i(Kl),_7=n(Kl,"P",{});var CNe=s(_7);hBr=r(CNe,"This class cannot be instantiated directly using "),d9e=n(CNe,"CODE",{});var ZEt=s(d9e);pBr=r(ZEt,"__init__()"),ZEt.forEach(t),uBr=r(CNe," (throws an error)."),CNe.forEach(t),_Br=i(Kl),Qt=n(Kl,"DIV",{class:!0});var vw=s(Qt);T(b7.$$.fragment,vw),bBr=i(vw),c9e=n(vw,"P",{});var e5t=s(c9e);vBr=r(e5t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),e5t.forEach(t),FBr=i(vw),Uc=n(vw,"P",{});var sZ=s(Uc);TBr=r(sZ,`Note:
Loading a model from its configuration file does `),f9e=n(sZ,"STRONG",{});var o5t=s(f9e);MBr=r(o5t,"not"),o5t.forEach(t),EBr=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mY=n(sZ,"A",{href:!0});var r5t=s(mY);CBr=r(r5t,"from_pretrained()"),r5t.forEach(t),wBr=r(sZ," to load the model weights."),sZ.forEach(t),ABr=i(vw),T(Z5.$$.fragment,vw),vw.forEach(t),yBr=i(Kl),Wr=n(Kl,"DIV",{class:!0});var Zl=s(Wr);T(v7.$$.fragment,Zl),LBr=i(Zl),m9e=n(Zl,"P",{});var t5t=s(m9e);xBr=r(t5t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),t5t.forEach(t),$Br=i(Zl),Fn=n(Zl,"P",{});var Fw=s(Fn);kBr=r(Fw,"The model class to instantiate is selected based on the "),g9e=n(Fw,"CODE",{});var a5t=s(g9e);SBr=r(a5t,"model_type"),a5t.forEach(t),RBr=r(Fw,` property of the config object (either
passed as an argument or loaded from `),h9e=n(Fw,"CODE",{});var n5t=s(h9e);BBr=r(n5t,"pretrained_model_name_or_path"),n5t.forEach(t),PBr=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p9e=n(Fw,"CODE",{});var s5t=s(p9e);IBr=r(s5t,"pretrained_model_name_or_path"),s5t.forEach(t),qBr=r(Fw,":"),Fw.forEach(t),NBr=i(Zl),F7=n(Zl,"UL",{});var wNe=s(F7);eC=n(wNe,"LI",{});var vBe=s(eC);u9e=n(vBe,"STRONG",{});var l5t=s(u9e);jBr=r(l5t,"beit"),l5t.forEach(t),DBr=r(vBe," \u2014 "),gY=n(vBe,"A",{href:!0});var i5t=s(gY);GBr=r(i5t,"FlaxBeitForImageClassification"),i5t.forEach(t),OBr=r(vBe," (BEiT model)"),vBe.forEach(t),VBr=i(wNe),oC=n(wNe,"LI",{});var FBe=s(oC);_9e=n(FBe,"STRONG",{});var d5t=s(_9e);XBr=r(d5t,"vit"),d5t.forEach(t),zBr=r(FBe," \u2014 "),hY=n(FBe,"A",{href:!0});var c5t=s(hY);QBr=r(c5t,"FlaxViTForImageClassification"),c5t.forEach(t),WBr=r(FBe," (ViT model)"),FBe.forEach(t),wNe.forEach(t),HBr=i(Zl),T(rC.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),TIe=i(f),Jc=n(f,"H2",{class:!0});var ANe=s(Jc);tC=n(ANe,"A",{id:!0,class:!0,href:!0});var f5t=s(tC);b9e=n(f5t,"SPAN",{});var m5t=s(b9e);T(T7.$$.fragment,m5t),m5t.forEach(t),f5t.forEach(t),UBr=i(ANe),v9e=n(ANe,"SPAN",{});var g5t=s(v9e);JBr=r(g5t,"FlaxAutoModelForVision2Seq"),g5t.forEach(t),ANe.forEach(t),MIe=i(f),Tr=n(f,"DIV",{class:!0});var ei=s(Tr);T(M7.$$.fragment,ei),YBr=i(ei),Yc=n(ei,"P",{});var lZ=s(Yc);KBr=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),pY=n(lZ,"A",{href:!0});var h5t=s(pY);ZBr=r(h5t,"from_pretrained()"),h5t.forEach(t),ePr=r(lZ," class method or the "),uY=n(lZ,"A",{href:!0});var p5t=s(uY);oPr=r(p5t,"from_config()"),p5t.forEach(t),rPr=r(lZ,` class
method.`),lZ.forEach(t),tPr=i(ei),E7=n(ei,"P",{});var yNe=s(E7);aPr=r(yNe,"This class cannot be instantiated directly using "),F9e=n(yNe,"CODE",{});var u5t=s(F9e);nPr=r(u5t,"__init__()"),u5t.forEach(t),sPr=r(yNe," (throws an error)."),yNe.forEach(t),lPr=i(ei),Wt=n(ei,"DIV",{class:!0});var Tw=s(Wt);T(C7.$$.fragment,Tw),iPr=i(Tw),T9e=n(Tw,"P",{});var _5t=s(T9e);dPr=r(_5t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),_5t.forEach(t),cPr=i(Tw),Kc=n(Tw,"P",{});var iZ=s(Kc);fPr=r(iZ,`Note:
Loading a model from its configuration file does `),M9e=n(iZ,"STRONG",{});var b5t=s(M9e);mPr=r(b5t,"not"),b5t.forEach(t),gPr=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_Y=n(iZ,"A",{href:!0});var v5t=s(_Y);hPr=r(v5t,"from_pretrained()"),v5t.forEach(t),pPr=r(iZ," to load the model weights."),iZ.forEach(t),uPr=i(Tw),T(aC.$$.fragment,Tw),Tw.forEach(t),_Pr=i(ei),Hr=n(ei,"DIV",{class:!0});var oi=s(Hr);T(w7.$$.fragment,oi),bPr=i(oi),E9e=n(oi,"P",{});var F5t=s(E9e);vPr=r(F5t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),F5t.forEach(t),FPr=i(oi),Tn=n(oi,"P",{});var Mw=s(Tn);TPr=r(Mw,"The model class to instantiate is selected based on the "),C9e=n(Mw,"CODE",{});var T5t=s(C9e);MPr=r(T5t,"model_type"),T5t.forEach(t),EPr=r(Mw,` property of the config object (either
passed as an argument or loaded from `),w9e=n(Mw,"CODE",{});var M5t=s(w9e);CPr=r(M5t,"pretrained_model_name_or_path"),M5t.forEach(t),wPr=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A9e=n(Mw,"CODE",{});var E5t=s(A9e);APr=r(E5t,"pretrained_model_name_or_path"),E5t.forEach(t),yPr=r(Mw,":"),Mw.forEach(t),LPr=i(oi),y9e=n(oi,"UL",{});var C5t=s(y9e);nC=n(C5t,"LI",{});var TBe=s(nC);L9e=n(TBe,"STRONG",{});var w5t=s(L9e);xPr=r(w5t,"vision-encoder-decoder"),w5t.forEach(t),$Pr=r(TBe," \u2014 "),bY=n(TBe,"A",{href:!0});var A5t=s(bY);kPr=r(A5t,"FlaxVisionEncoderDecoderModel"),A5t.forEach(t),SPr=r(TBe," (Vision Encoder decoder model)"),TBe.forEach(t),C5t.forEach(t),RPr=i(oi),T(sC.$$.fragment,oi),oi.forEach(t),ei.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(L3t)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(En,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.AutoConfig"),c(wn,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.AutoModel"),c(An,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.AutoTokenizer"),c(ii,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertModel"),c(sf,"id","extending-the-auto-classes"),c(sf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sf,"href","#extending-the-auto-classes"),c(di,"class","relative group"),c(df,"id","transformers.AutoConfig"),c(df,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(df,"href","#transformers.AutoConfig"),c(ci,"class","relative group"),c(Xx,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(zx,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig"),c(Qx,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig"),c(Wx,"href","/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitConfig"),c(Hx,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig"),c(Ux,"href","/docs/transformers/pr_16988/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(Jx,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig"),c(Yx,"href","/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(Kx,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(Zx,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(e$,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig"),c(o$,"href","/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineConfig"),c(r$,"href","/docs/transformers/pr_16988/en/model_doc/clip#transformers.CLIPConfig"),c(t$,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig"),c(a$,"href","/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextConfig"),c(n$,"href","/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLConfig"),c(s$,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(l$,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(i$,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(d$,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaConfig"),c(c$,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(f$,"href","/docs/transformers/pr_16988/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(m$,"href","/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTConfig"),c(g$,"href","/docs/transformers/pr_16988/en/model_doc/detr#transformers.DetrConfig"),c(h$,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig"),c(p$,"href","/docs/transformers/pr_16988/en/model_doc/dpr#transformers.DPRConfig"),c(u$,"href","/docs/transformers/pr_16988/en/model_doc/dpt#transformers.DPTConfig"),c(_$,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig"),c(b$,"href","/docs/transformers/pr_16988/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(v$,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig"),c(F$,"href","/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetConfig"),c(T$,"href","/docs/transformers/pr_16988/en/model_doc/fsmt#transformers.FSMTConfig"),c(M$,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig"),c(E$,"href","/docs/transformers/pr_16988/en/model_doc/glpn#transformers.GLPNConfig"),c(C$,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Config"),c(w$,"href","/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(A$,"href","/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJConfig"),c(y$,"href","/docs/transformers/pr_16988/en/model_doc/hubert#transformers.HubertConfig"),c(L$,"href","/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertConfig"),c(x$,"href","/docs/transformers/pr_16988/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c($$,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(k$,"href","/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(S$,"href","/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDConfig"),c(R$,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig"),c(B$,"href","/docs/transformers/pr_16988/en/model_doc/luke#transformers.LukeConfig"),c(P$,"href","/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertConfig"),c(I$,"href","/docs/transformers/pr_16988/en/model_doc/m2m_100#transformers.M2M100Config"),c(q$,"href","/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianConfig"),c(N$,"href","/docs/transformers/pr_16988/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(j$,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig"),c(D$,"href","/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(G$,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(O$,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig"),c(V$,"href","/docs/transformers/pr_16988/en/model_doc/mt5#transformers.MT5Config"),c(X$,"href","/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(z$,"href","/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Q$,"href","/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusConfig"),c(W$,"href","/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverConfig"),c(H$,"href","/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartConfig"),c(U$,"href","/docs/transformers/pr_16988/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(J$,"href","/docs/transformers/pr_16988/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(Y$,"href","/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(K$,"href","/docs/transformers/pr_16988/en/model_doc/rag#transformers.RagConfig"),c(Z$,"href","/docs/transformers/pr_16988/en/model_doc/realm#transformers.RealmConfig"),c(ek,"href","/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerConfig"),c(ok,"href","/docs/transformers/pr_16988/en/model_doc/regnet#transformers.RegNetConfig"),c(rk,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig"),c(tk,"href","/docs/transformers/pr_16988/en/model_doc/resnet#transformers.ResNetConfig"),c(ak,"href","/docs/transformers/pr_16988/en/model_doc/retribert#transformers.RetriBertConfig"),c(nk,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig"),c(sk,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig"),c(lk,"href","/docs/transformers/pr_16988/en/model_doc/segformer#transformers.SegformerConfig"),c(ik,"href","/docs/transformers/pr_16988/en/model_doc/sew#transformers.SEWConfig"),c(dk,"href","/docs/transformers/pr_16988/en/model_doc/sew-d#transformers.SEWDConfig"),c(ck,"href","/docs/transformers/pr_16988/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(fk,"href","/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(mk,"href","/docs/transformers/pr_16988/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(gk,"href","/docs/transformers/pr_16988/en/model_doc/splinter#transformers.SplinterConfig"),c(hk,"href","/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(pk,"href","/docs/transformers/pr_16988/en/model_doc/swin#transformers.SwinConfig"),c(uk,"href","/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5Config"),c(_k,"href","/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasConfig"),c(bk,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig"),c(vk,"href","/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(Fk,"href","/docs/transformers/pr_16988/en/model_doc/trocr#transformers.TrOCRConfig"),c(Tk,"href","/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(Mk,"href","/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(Ek,"href","/docs/transformers/pr_16988/en/model_doc/van#transformers.VanConfig"),c(Ck,"href","/docs/transformers/pr_16988/en/model_doc/vilt#transformers.ViltConfig"),c(wk,"href","/docs/transformers/pr_16988/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(Ak,"href","/docs/transformers/pr_16988/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(yk,"href","/docs/transformers/pr_16988/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(Lk,"href","/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTConfig"),c(xk,"href","/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c($k,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(kk,"href","/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMConfig"),c(Sk,"href","/docs/transformers/pr_16988/en/model_doc/xglm#transformers.XGLMConfig"),c(Rk,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig"),c(Bk,"href","/docs/transformers/pr_16988/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(Pk,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(Ik,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(qk,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig"),c(Nk,"href","/docs/transformers/pr_16988/en/model_doc/yolos#transformers.YolosConfig"),c(jk,"href","/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoConfig"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lg,"id","transformers.AutoTokenizer"),c(lg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lg,"href","#transformers.AutoTokenizer"),c(mi,"class","relative group"),c(Dk,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(Gk,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertTokenizer"),c(Ok,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Vk,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartTokenizer"),c(Xk,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartTokenizerFast"),c(zk,"href","/docs/transformers/pr_16988/en/model_doc/barthez#transformers.BarthezTokenizer"),c(Qk,"href","/docs/transformers/pr_16988/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(Wk,"href","/docs/transformers/pr_16988/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(Hk,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertTokenizer"),c(Uk,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertTokenizerFast"),c(Jk,"href","/docs/transformers/pr_16988/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(Yk,"href","/docs/transformers/pr_16988/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(Kk,"href","/docs/transformers/pr_16988/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(Zk,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(eS,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(oS,"href","/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(rS,"href","/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(tS,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(aS,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(nS,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(sS,"href","/docs/transformers/pr_16988/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(lS,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertTokenizer"),c(iS,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(dS,"href","/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineTokenizer"),c(cS,"href","/docs/transformers/pr_16988/en/model_doc/clip#transformers.CLIPTokenizer"),c(fS,"href","/docs/transformers/pr_16988/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(mS,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(gS,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(hS,"href","/docs/transformers/pr_16988/en/model_doc/cpm#transformers.CpmTokenizer"),c(pS,"href","/docs/transformers/pr_16988/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(uS,"href","/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(_S,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaTokenizer"),c(bS,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(vS,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaTokenizer"),c(FS,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(TS,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(MS,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(ES,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(CS,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(wS,"href","/docs/transformers/pr_16988/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(AS,"href","/docs/transformers/pr_16988/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(yS,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraTokenizer"),c(LS,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(xS,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c($S,"href","/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetTokenizer"),c(kS,"href","/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(SS,"href","/docs/transformers/pr_16988/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(RS,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelTokenizer"),c(BS,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(PS,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(IS,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(qS,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(NS,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(jS,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(DS,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(GS,"href","/docs/transformers/pr_16988/en/model_doc/herbert#transformers.HerbertTokenizer"),c(OS,"href","/docs/transformers/pr_16988/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(VS,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(XS,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaTokenizer"),c(zS,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(QS,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(WS,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(HS,"href","/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(US,"href","/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(JS,"href","/docs/transformers/pr_16988/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(YS,"href","/docs/transformers/pr_16988/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(KS,"href","/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDTokenizer"),c(ZS,"href","/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDTokenizerFast"),c(eR,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerTokenizer"),c(oR,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(rR,"href","/docs/transformers/pr_16988/en/model_doc/luke#transformers.LukeTokenizer"),c(tR,"href","/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(aR,"href","/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(nR,"href","/docs/transformers/pr_16988/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(sR,"href","/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianTokenizer"),c(lR,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartTokenizer"),c(iR,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(dR,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(cR,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(fR,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertTokenizer"),c(mR,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertTokenizerFast"),c(gR,"href","/docs/transformers/pr_16988/en/model_doc/mluke#transformers.MLukeTokenizer"),c(hR,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(pR,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(uR,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(_R,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(bR,"href","/docs/transformers/pr_16988/en/model_doc/mt5#transformers.T5Tokenizer"),c(vR,"href","/docs/transformers/pr_16988/en/model_doc/mt5#transformers.T5TokenizerFast"),c(FR,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertTokenizer"),c(TR,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(MR,"href","/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(ER,"href","/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(CR,"href","/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(wR,"href","/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(AR,"href","/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(yR,"href","/docs/transformers/pr_16988/en/model_doc/phobert#transformers.PhobertTokenizer"),c(LR,"href","/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartTokenizer"),c(xR,"href","/docs/transformers/pr_16988/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c($R,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertTokenizer"),c(kR,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertTokenizerFast"),c(SR,"href","/docs/transformers/pr_16988/en/model_doc/rag#transformers.RagTokenizer"),c(RR,"href","/docs/transformers/pr_16988/en/model_doc/realm#transformers.RealmTokenizer"),c(BR,"href","/docs/transformers/pr_16988/en/model_doc/realm#transformers.RealmTokenizerFast"),c(PR,"href","/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerTokenizer"),c(IR,"href","/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(qR,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertTokenizer"),c(NR,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(jR,"href","/docs/transformers/pr_16988/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(DR,"href","/docs/transformers/pr_16988/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(GR,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaTokenizer"),c(OR,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(VR,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(XR,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(zR,"href","/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(QR,"href","/docs/transformers/pr_16988/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(WR,"href","/docs/transformers/pr_16988/en/model_doc/splinter#transformers.SplinterTokenizer"),c(HR,"href","/docs/transformers/pr_16988/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(UR,"href","/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(JR,"href","/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(YR,"href","/docs/transformers/pr_16988/en/model_doc/mt5#transformers.T5Tokenizer"),c(KR,"href","/docs/transformers/pr_16988/en/model_doc/mt5#transformers.T5TokenizerFast"),c(ZR,"href","/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasTokenizer"),c(eB,"href","/docs/transformers/pr_16988/en/model_doc/tapex#transformers.TapexTokenizer"),c(oB,"href","/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(rB,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertTokenizer"),c(tB,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertTokenizerFast"),c(aB,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(nB,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(sB,"href","/docs/transformers/pr_16988/en/model_doc/xglm#transformers.XGLMTokenizer"),c(lB,"href","/docs/transformers/pr_16988/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(iB,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMTokenizer"),c(dB,"href","/docs/transformers/pr_16988/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(cB,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(fB,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(mB,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaTokenizer"),c(gB,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(hB,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(pB,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(uB,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertTokenizer"),c(_B,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ng,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jg,"id","transformers.AutoFeatureExtractor"),c(jg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jg,"href","#transformers.AutoFeatureExtractor"),c(gi,"class","relative group"),c(bB,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(vB,"href","/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(FB,"href","/docs/transformers/pr_16988/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(TB,"href","/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(MB,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(EB,"href","/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(CB,"href","/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(wB,"href","/docs/transformers/pr_16988/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(AB,"href","/docs/transformers/pr_16988/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(yB,"href","/docs/transformers/pr_16988/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(LB,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(xB,"href","/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c($B,"href","/docs/transformers/pr_16988/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(kB,"href","/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(SB,"href","/docs/transformers/pr_16988/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(RB,"href","/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(BB,"href","/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(PB,"href","/docs/transformers/pr_16988/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(IB,"href","/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(qB,"href","/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(NB,"href","/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(jB,"href","/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(DB,"href","/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(GB,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(OB,"href","/docs/transformers/pr_16988/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gh,"id","transformers.AutoProcessor"),c(gh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gh,"href","#transformers.AutoProcessor"),c(hi,"class","relative group"),c(VB,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(XB,"href","/docs/transformers/pr_16988/en/model_doc/clip#transformers.CLIPProcessor"),c(zB,"href","/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(QB,"href","/docs/transformers/pr_16988/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(WB,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(HB,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(UB,"href","/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(JB,"href","/docs/transformers/pr_16988/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(YB,"href","/docs/transformers/pr_16988/en/model_doc/trocr#transformers.TrOCRProcessor"),c(KB,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(ZB,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(eP,"href","/docs/transformers/pr_16988/en/model_doc/vilt#transformers.ViltProcessor"),c(oP,"href","/docs/transformers/pr_16988/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(rP,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(tP,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($h,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kh,"id","transformers.AutoModel"),c(kh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kh,"href","#transformers.AutoModel"),c(ui,"class","relative group"),c(aP,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nP,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sP,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lP,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertModel"),c(iP,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartModel"),c(dP,"href","/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitModel"),c(cP,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertModel"),c(fP,"href","/docs/transformers/pr_16988/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(mP,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdModel"),c(gP,"href","/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(hP,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(pP,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(uP,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertModel"),c(_P,"href","/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineModel"),c(bP,"href","/docs/transformers/pr_16988/en/model_doc/clip#transformers.CLIPModel"),c(vP,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertModel"),c(FP,"href","/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextModel"),c(TP,"href","/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLModel"),c(MP,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(EP,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(CP,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(wP,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaModel"),c(AP,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(yP,"href","/docs/transformers/pr_16988/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(LP,"href","/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTModel"),c(xP,"href","/docs/transformers/pr_16988/en/model_doc/detr#transformers.DetrModel"),c($P,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertModel"),c(kP,"href","/docs/transformers/pr_16988/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(SP,"href","/docs/transformers/pr_16988/en/model_doc/dpt#transformers.DPTModel"),c(RP,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraModel"),c(BP,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertModel"),c(PP,"href","/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetModel"),c(IP,"href","/docs/transformers/pr_16988/en/model_doc/fsmt#transformers.FSMTModel"),c(qP,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelModel"),c(NP,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelBaseModel"),c(jP,"href","/docs/transformers/pr_16988/en/model_doc/glpn#transformers.GLPNModel"),c(DP,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Model"),c(GP,"href","/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(OP,"href","/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJModel"),c(VP,"href","/docs/transformers/pr_16988/en/model_doc/hubert#transformers.HubertModel"),c(XP,"href","/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertModel"),c(zP,"href","/docs/transformers/pr_16988/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(QP,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(WP,"href","/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(HP,"href","/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDModel"),c(UP,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerModel"),c(JP,"href","/docs/transformers/pr_16988/en/model_doc/luke#transformers.LukeModel"),c(YP,"href","/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertModel"),c(KP,"href","/docs/transformers/pr_16988/en/model_doc/m2m_100#transformers.M2M100Model"),c(ZP,"href","/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianModel"),c(eI,"href","/docs/transformers/pr_16988/en/model_doc/maskformer#transformers.MaskFormerModel"),c(oI,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartModel"),c(rI,"href","/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(tI,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertModel"),c(aI,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetModel"),c(nI,"href","/docs/transformers/pr_16988/en/model_doc/mt5#transformers.MT5Model"),c(sI,"href","/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerModel"),c(lI,"href","/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(iI,"href","/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusModel"),c(dI,"href","/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverModel"),c(cI,"href","/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartModel"),c(fI,"href","/docs/transformers/pr_16988/en/model_doc/poolformer#transformers.PoolFormerModel"),c(mI,"href","/docs/transformers/pr_16988/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(gI,"href","/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertModel"),c(hI,"href","/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerModel"),c(pI,"href","/docs/transformers/pr_16988/en/model_doc/regnet#transformers.RegNetModel"),c(uI,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertModel"),c(_I,"href","/docs/transformers/pr_16988/en/model_doc/resnet#transformers.ResNetModel"),c(bI,"href","/docs/transformers/pr_16988/en/model_doc/retribert#transformers.RetriBertModel"),c(vI,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaModel"),c(FI,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerModel"),c(TI,"href","/docs/transformers/pr_16988/en/model_doc/segformer#transformers.SegformerModel"),c(MI,"href","/docs/transformers/pr_16988/en/model_doc/sew#transformers.SEWModel"),c(EI,"href","/docs/transformers/pr_16988/en/model_doc/sew-d#transformers.SEWDModel"),c(CI,"href","/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(wI,"href","/docs/transformers/pr_16988/en/model_doc/splinter#transformers.SplinterModel"),c(AI,"href","/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(yI,"href","/docs/transformers/pr_16988/en/model_doc/swin#transformers.SwinModel"),c(LI,"href","/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5Model"),c(xI,"href","/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasModel"),c($I,"href","/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(kI,"href","/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechModel"),c(SI,"href","/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(RI,"href","/docs/transformers/pr_16988/en/model_doc/van#transformers.VanModel"),c(BI,"href","/docs/transformers/pr_16988/en/model_doc/vilt#transformers.ViltModel"),c(PI,"href","/docs/transformers/pr_16988/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(II,"href","/docs/transformers/pr_16988/en/model_doc/visual_bert#transformers.VisualBertModel"),c(qI,"href","/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTModel"),c(NI,"href","/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(jI,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(DI,"href","/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMModel"),c(GI,"href","/docs/transformers/pr_16988/en/model_doc/xglm#transformers.XGLMModel"),c(OI,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMModel"),c(VI,"href","/docs/transformers/pr_16988/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(XI,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(zI,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(QI,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetModel"),c(WI,"href","/docs/transformers/pr_16988/en/model_doc/yolos#transformers.YolosModel"),c(HI,"href","/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tu,"id","transformers.AutoModelForPreTraining"),c(Tu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tu,"href","#transformers.AutoModelForPreTraining"),c(vi,"class","relative group"),c(UI,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JI,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YI,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KI,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertForPreTraining"),c(ZI,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(eq,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForPreTraining"),c(oq,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(rq,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(tq,"href","/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(aq,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(nq,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(sq,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(lq,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(iq,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForPreTraining"),c(dq,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(cq,"href","/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForPreTraining"),c(fq,"href","/docs/transformers/pr_16988/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(mq,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(gq,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(hq,"href","/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(pq,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(uq,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(_q,"href","/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(bq,"href","/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(vq,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(Fq,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Tq,"href","/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Mq,"href","/docs/transformers/pr_16988/en/model_doc/retribert#transformers.RetriBertModel"),c(Eq,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Cq,"href","/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(wq,"href","/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Aq,"href","/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(yq,"href","/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Lq,"href","/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(xq,"href","/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c($q,"href","/docs/transformers/pr_16988/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(kq,"href","/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(Sq,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(Rq,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Bq,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Pq,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Iq,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c_,"id","transformers.AutoModelForCausalLM"),c(c_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c_,"href","#transformers.AutoModelForCausalLM"),c(Mi,"class","relative group"),c(qq,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nq,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jq,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dq,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForCausalLM"),c(Gq,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertLMHeadModel"),c(Oq,"href","/docs/transformers/pr_16988/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(Vq,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(Xq,"href","/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(zq,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(Qq,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Wq,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(Hq,"href","/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Uq,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(Jq,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForCausalLM"),c(Yq,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Kq,"href","/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(Zq,"href","/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(eN,"href","/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianForCausalLM"),c(oN,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartForCausalLM"),c(rN,"href","/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(tN,"href","/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(aN,"href","/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(nN,"href","/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(sN,"href","/docs/transformers/pr_16988/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(lN,"href","/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(iN,"href","/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(dN,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(cN,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(fN,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(mN,"href","/docs/transformers/pr_16988/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(gN,"href","/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(hN,"href","/docs/transformers/pr_16988/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(pN,"href","/docs/transformers/pr_16988/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(uN,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(_N,"href","/docs/transformers/pr_16988/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(bN,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(vN,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(FN,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U_,"id","transformers.AutoModelForMaskedLM"),c(U_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U_,"href","#transformers.AutoModelForMaskedLM"),c(wi,"class","relative group"),c(TN,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MN,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EN,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CN,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(wN,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(AN,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForMaskedLM"),c(yN,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(LN,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(xN,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c($N,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(kN,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(SN,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(RN,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(BN,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(PN,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(IN,"href","/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(qN,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(NN,"href","/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(jN,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(DN,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(GN,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(ON,"href","/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(VN,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(XN,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(zN,"href","/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(QN,"href","/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(WN,"href","/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(HN,"href","/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(UN,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(JN,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(YN,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(KN,"href","/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(ZN,"href","/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(ej,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(oj,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(rj,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(tj,"href","/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B1,"id","transformers.AutoModelForSeq2SeqLM"),c(B1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Li,"class","relative group"),c(aj,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nj,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sj,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lj,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(ij,"href","/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(dj,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(cj,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(fj,"href","/docs/transformers/pr_16988/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(mj,"href","/docs/transformers/pr_16988/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(gj,"href","/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(hj,"href","/docs/transformers/pr_16988/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(pj,"href","/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianMTModel"),c(uj,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(_j,"href","/docs/transformers/pr_16988/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(bj,"href","/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(vj,"href","/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(Fj,"href","/docs/transformers/pr_16988/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(Tj,"href","/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Mj,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Ej,"href","/docs/transformers/pr_16988/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o8,"id","transformers.AutoModelForSequenceClassification"),c(o8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o8,"href","#transformers.AutoModelForSequenceClassification"),c(ki,"class","relative group"),c(Cj,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wj,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Aj,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yj,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(Lj,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForSequenceClassification"),c(xj,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForSequenceClassification"),c($j,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(kj,"href","/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(Sj,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(Rj,"href","/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(Bj,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(Pj,"href","/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(Ij,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(qj,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(Nj,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(jj,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(Dj,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(Gj,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(Oj,"href","/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(Vj,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(Xj,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(zj,"href","/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(Qj,"href","/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(Wj,"href","/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(Hj,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(Uj,"href","/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(Jj,"href","/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDForSequenceClassification"),c(Yj,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(Kj,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(Zj,"href","/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(eD,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(oD,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(rD,"href","/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(tD,"href","/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(aD,"href","/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(nD,"href","/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(sD,"href","/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(lD,"href","/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(iD,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(dD,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(cD,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(fD,"href","/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(mD,"href","/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(gD,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForSequenceClassification"),c(hD,"href","/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(pD,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(uD,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(_D,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(bD,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(vD,"href","/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K8,"id","transformers.AutoModelForMultipleChoice"),c(K8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K8,"href","#transformers.AutoModelForMultipleChoice"),c(Bi,"class","relative group"),c(FD,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TD,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MD,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ED,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(CD,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForMultipleChoice"),c(wD,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(AD,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(yD,"href","/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(LD,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(xD,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c($D,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(kD,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(SD,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(RD,"href","/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(BD,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(PD,"href","/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(ID,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(qD,"href","/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(ND,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(jD,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(DD,"href","/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(GD,"href","/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(OD,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(VD,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(XD,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(zD,"href","/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(QD,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(WD,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(HD,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(UD,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(JD,"href","/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($b,"id","transformers.AutoModelForNextSentencePrediction"),c($b,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($b,"href","#transformers.AutoModelForNextSentencePrediction"),c(qi,"class","relative group"),c(YD,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KD,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZD,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eG,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(oG,"href","/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(rG,"href","/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(tG,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(aG,"href","/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jb,"id","transformers.AutoModelForTokenClassification"),c(jb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jb,"href","#transformers.AutoModelForTokenClassification"),c(Di,"class","relative group"),c(nG,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sG,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lG,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iG,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(dG,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForTokenClassification"),c(cG,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(fG,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(mG,"href","/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineForTokenClassification"),c(gG,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(hG,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(pG,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(uG,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(_G,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(bG,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(vG,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(FG,"href","/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(TG,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(MG,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(EG,"href","/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(CG,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(wG,"href","/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(AG,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(yG,"href","/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(LG,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(xG,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c($G,"href","/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(kG,"href","/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(SG,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(RG,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(BG,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(PG,"href","/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(IG,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(qG,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(NG,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(jG,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(DG,"href","/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M2,"id","transformers.AutoModelForQuestionAnswering"),c(M2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M2,"href","#transformers.AutoModelForQuestionAnswering"),c(Vi,"class","relative group"),c(GG,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OG,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VG,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XG,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(zG,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(QG,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(WG,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(HG,"href","/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(UG,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(JG,"href","/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(YG,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(KG,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(ZG,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(eO,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(oO,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(rO,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(tO,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(aO,"href","/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(nO,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(sO,"href","/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(lO,"href","/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(iO,"href","/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(dO,"href","/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(cO,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(fO,"href","/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(mO,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(gO,"href","/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(hO,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(pO,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(uO,"href","/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(_O,"href","/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(bO,"href","/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(vO,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(FO,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(TO,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(MO,"href","/docs/transformers/pr_16988/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(EO,"href","/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(CO,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(wO,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(AO,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(yO,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(LO,"href","/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fv,"id","transformers.AutoModelForTableQuestionAnswering"),c(fv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Qi,"class","relative group"),c(xO,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($O,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kO,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SO,"href","/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uv,"id","transformers.AutoModelForImageClassification"),c(uv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uv,"href","#transformers.AutoModelForImageClassification"),c(Ui,"class","relative group"),c(RO,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BO,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PO,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IO,"href","/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitForImageClassification"),c(qO,"href","/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(NO,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(jO,"href","/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTForImageClassification"),c(DO,"href","/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(GO,"href","/docs/transformers/pr_16988/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(OO,"href","/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(VO,"href","/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(XO,"href","/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(zO,"href","/docs/transformers/pr_16988/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(QO,"href","/docs/transformers/pr_16988/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(WO,"href","/docs/transformers/pr_16988/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(HO,"href","/docs/transformers/pr_16988/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(UO,"href","/docs/transformers/pr_16988/en/model_doc/swin#transformers.SwinForImageClassification"),c(JO,"href","/docs/transformers/pr_16988/en/model_doc/van#transformers.VanForImageClassification"),c(YO,"href","/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTForImageClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kv,"id","transformers.AutoModelForVision2Seq"),c(kv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kv,"href","#transformers.AutoModelForVision2Seq"),c(Ki,"class","relative group"),c(KO,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZO,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oV,"href","/docs/transformers/pr_16988/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iv,"id","transformers.AutoModelForAudioClassification"),c(Iv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Iv,"href","#transformers.AutoModelForAudioClassification"),c(od,"class","relative group"),c(rV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nV,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(sV,"href","/docs/transformers/pr_16988/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(lV,"href","/docs/transformers/pr_16988/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(iV,"href","/docs/transformers/pr_16988/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(dV,"href","/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(cV,"href","/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(fV,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(mV,"href","/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hv,"id","transformers.AutoModelForAudioFrameClassification"),c(Hv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hv,"href","#transformers.AutoModelForAudioFrameClassification"),c(ad,"class","relative group"),c(gV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uV,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(_V,"href","/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(bV,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(vV,"href","/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rF,"id","transformers.AutoModelForCTC"),c(rF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rF,"href","#transformers.AutoModelForCTC"),c(ld,"class","relative group"),c(FV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EV,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(CV,"href","/docs/transformers/pr_16988/en/model_doc/hubert#transformers.HubertForCTC"),c(wV,"href","/docs/transformers/pr_16988/en/model_doc/sew#transformers.SEWForCTC"),c(AV,"href","/docs/transformers/pr_16988/en/model_doc/sew-d#transformers.SEWDForCTC"),c(yV,"href","/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(LV,"href","/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(xV,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c($V,"href","/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMForCTC"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(hF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(cd,"class","relative group"),c(kV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BV,"href","/docs/transformers/pr_16988/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(PV,"href","/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FF,"id","transformers.AutoModelForAudioXVector"),c(FF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FF,"href","#transformers.AutoModelForAudioXVector"),c(gd,"class","relative group"),c(IV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jV,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(DV,"href","/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(GV,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(OV,"href","/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMForXVector"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LF,"id","transformers.AutoModelForMaskedImageModeling"),c(LF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LF,"href","#transformers.AutoModelForMaskedImageModeling"),c(ud,"class","relative group"),c(VV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QV,"href","/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(WV,"href","/docs/transformers/pr_16988/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(HV,"href","/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PF,"id","transformers.AutoModelForObjectDetection"),c(PF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PF,"href","#transformers.AutoModelForObjectDetection"),c(Fd,"class","relative group"),c(UV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KV,"href","/docs/transformers/pr_16988/en/model_doc/detr#transformers.DetrForObjectDetection"),c(ZV,"href","/docs/transformers/pr_16988/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GF,"id","transformers.AutoModelForImageSegmentation"),c(GF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GF,"href","#transformers.AutoModelForImageSegmentation"),c(Ed,"class","relative group"),c(eX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tX,"href","/docs/transformers/pr_16988/en/model_doc/detr#transformers.DetrForSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QF,"id","transformers.AutoModelForSemanticSegmentation"),c(QF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QF,"href","#transformers.AutoModelForSemanticSegmentation"),c(Ad,"class","relative group"),c(aX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lX,"href","/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(iX,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(dX,"href","/docs/transformers/pr_16988/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(cX,"href","/docs/transformers/pr_16988/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e6,"id","transformers.AutoModelForInstanceSegmentation"),c(e6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e6,"href","#transformers.AutoModelForInstanceSegmentation"),c(xd,"class","relative group"),c(fX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hX,"href","/docs/transformers/pr_16988/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n6,"id","transformers.TFAutoModel"),c(n6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n6,"href","#transformers.TFAutoModel"),c(Sd,"class","relative group"),c(pX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_X,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bX,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertModel"),c(vX,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.TFBartModel"),c(FX,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertModel"),c(TX,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(MX,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(EX,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertModel"),c(CX,"href","/docs/transformers/pr_16988/en/model_doc/clip#transformers.TFCLIPModel"),c(wX,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.TFConvBertModel"),c(AX,"href","/docs/transformers/pr_16988/en/model_doc/convnext#transformers.TFConvNextModel"),c(yX,"href","/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.TFCTRLModel"),c(LX,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(xX,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.TFDebertaModel"),c($X,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(kX,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(SX,"href","/docs/transformers/pr_16988/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(RX,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraModel"),c(BX,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(PX,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelModel"),c(IX,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(qX,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.TFGPT2Model"),c(NX,"href","/docs/transformers/pr_16988/en/model_doc/gptj#transformers.TFGPTJModel"),c(jX,"href","/docs/transformers/pr_16988/en/model_doc/hubert#transformers.TFHubertModel"),c(DX,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(GX,"href","/docs/transformers/pr_16988/en/model_doc/led#transformers.TFLEDModel"),c(OX,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.TFLongformerModel"),c(VX,"href","/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.TFLxmertModel"),c(XX,"href","/docs/transformers/pr_16988/en/model_doc/marian#transformers.TFMarianModel"),c(zX,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.TFMBartModel"),c(QX,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(WX,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetModel"),c(HX,"href","/docs/transformers/pr_16988/en/model_doc/mt5#transformers.TFMT5Model"),c(UX,"href","/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(JX,"href","/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.TFPegasusModel"),c(YX,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertModel"),c(KX,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaModel"),c(ZX,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerModel"),c(ez,"href","/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(oz,"href","/docs/transformers/pr_16988/en/model_doc/swin#transformers.TFSwinModel"),c(rz,"href","/docs/transformers/pr_16988/en/model_doc/t5#transformers.TFT5Model"),c(tz,"href","/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TFTapasModel"),c(az,"href","/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(nz,"href","/docs/transformers/pr_16988/en/model_doc/vit#transformers.TFViTModel"),c(sz,"href","/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(lz,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(iz,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMModel"),c(dz,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(cz,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z6,"id","transformers.TFAutoModelForPreTraining"),c(Z6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z6,"href","#transformers.TFAutoModelForPreTraining"),c(Pd,"class","relative group"),c(fz,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mz,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gz,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hz,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(pz,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(uz,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForPreTraining"),c(_z,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(bz,"href","/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(vz,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(Fz,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(Tz,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(Mz,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(Ez,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(Cz,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(wz,"href","/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(Az,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(yz,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(Lz,"href","/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(xz,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c($z,"href","/docs/transformers/pr_16988/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(kz,"href","/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(Sz,"href","/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(Rz,"href","/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(Bz,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(Pz,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Iz,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wT,"id","transformers.TFAutoModelForCausalLM"),c(wT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wT,"href","#transformers.TFAutoModelForCausalLM"),c(Nd,"class","relative group"),c(qz,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nz,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jz,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dz,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(Gz,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(Oz,"href","/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Vz,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(Xz,"href","/docs/transformers/pr_16988/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(zz,"href","/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(Qz,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(Wz,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(Hz,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(Uz,"href","/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(Jz,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(Yz,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DT,"id","transformers.TFAutoModelForImageClassification"),c(DT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DT,"href","#transformers.TFAutoModelForImageClassification"),c(Gd,"class","relative group"),c(Kz,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zz,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eQ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oQ,"href","/docs/transformers/pr_16988/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(rQ,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(tQ,"href","/docs/transformers/pr_16988/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(aQ,"href","/docs/transformers/pr_16988/en/model_doc/vit#transformers.TFViTForImageClassification"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WT,"id","transformers.TFAutoModelForMaskedLM"),c(WT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WT,"href","#transformers.TFAutoModelForMaskedLM"),c(Xd,"class","relative group"),c(nQ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sQ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lQ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iQ,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(dQ,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(cQ,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(fQ,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(mQ,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(gQ,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(hQ,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(pQ,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(uQ,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(_Q,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(bQ,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(vQ,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(FQ,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(TQ,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(MQ,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(EQ,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(CQ,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(wQ,"href","/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(AQ,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(yQ,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u9,"id","transformers.TFAutoModelForSeq2SeqLM"),c(u9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u9,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Wd,"class","relative group"),c(LQ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xQ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($Q,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kQ,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(SQ,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(RQ,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(BQ,"href","/docs/transformers/pr_16988/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(PQ,"href","/docs/transformers/pr_16988/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(IQ,"href","/docs/transformers/pr_16988/en/model_doc/marian#transformers.TFMarianMTModel"),c(qQ,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(NQ,"href","/docs/transformers/pr_16988/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(jQ,"href","/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(DQ,"href","/docs/transformers/pr_16988/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x9,"id","transformers.TFAutoModelForSequenceClassification"),c(x9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x9,"href","#transformers.TFAutoModelForSequenceClassification"),c(Jd,"class","relative group"),c(GQ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OQ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VQ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XQ,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(zQ,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(QQ,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(WQ,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(HQ,"href","/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(UQ,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(JQ,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(YQ,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(KQ,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(ZQ,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(eW,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(oW,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(rW,"href","/docs/transformers/pr_16988/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(tW,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(aW,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(nW,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(sW,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(lW,"href","/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(iW,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(dW,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(cW,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(fW,"href","/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(mW,"href","/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(gW,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(hW,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(pW,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aM,"id","transformers.TFAutoModelForMultipleChoice"),c(aM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aM,"href","#transformers.TFAutoModelForMultipleChoice"),c(Zd,"class","relative group"),c(uW,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_W,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bW,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vW,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(FW,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(TW,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(MW,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(EW,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(CW,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(wW,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(AW,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(yW,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(LW,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(xW,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c($W,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(kW,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(SW,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(RW,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(BW,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(PW,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CM,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(CM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(rc,"class","relative group"),c(IW,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qW,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NW,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jW,"href","/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LM,"id","transformers.TFAutoModelForTokenClassification"),c(LM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LM,"href","#transformers.TFAutoModelForTokenClassification"),c(nc,"class","relative group"),c(DW,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GW,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OW,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VW,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(XW,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(zW,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(QW,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(WW,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(HW,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(UW,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(JW,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(YW,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(KW,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(ZW,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(eH,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(oH,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(rH,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(tH,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(aH,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(nH,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(sH,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(lH,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(iH,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YM,"id","transformers.TFAutoModelForQuestionAnswering"),c(YM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YM,"href","#transformers.TFAutoModelForQuestionAnswering"),c(ic,"class","relative group"),c(dH,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cH,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fH,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mH,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(gH,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(hH,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(pH,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(uH,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(_H,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(bH,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(vH,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(FH,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(TH,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(MH,"href","/docs/transformers/pr_16988/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(EH,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(CH,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(wH,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(AH,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(yH,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(LH,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(xH,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c($H,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(kH,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F4,"id","transformers.TFAutoModelForVision2Seq"),c(F4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F4,"href","#transformers.TFAutoModelForVision2Seq"),c(fc,"class","relative group"),c(SH,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RH,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BH,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PH,"href","/docs/transformers/pr_16988/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C4,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(C4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C4,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(hc,"class","relative group"),c(IH,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qH,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NH,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jH,"href","/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L4,"id","transformers.FlaxAutoModel"),c(L4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L4,"href","#transformers.FlaxAutoModel"),c(_c,"class","relative group"),c(DH,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GH,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OH,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VH,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertModel"),c(XH,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartModel"),c(zH,"href","/docs/transformers/pr_16988/en/model_doc/beit#transformers.FlaxBeitModel"),c(QH,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertModel"),c(WH,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(HH,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(UH,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(JH,"href","/docs/transformers/pr_16988/en/model_doc/clip#transformers.FlaxCLIPModel"),c(YH,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(KH,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraModel"),c(ZH,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(eU,"href","/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(oU,"href","/docs/transformers/pr_16988/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(rU,"href","/docs/transformers/pr_16988/en/model_doc/marian#transformers.FlaxMarianModel"),c(tU,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.FlaxMBartModel"),c(aU,"href","/docs/transformers/pr_16988/en/model_doc/mt5#transformers.FlaxMT5Model"),c(nU,"href","/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(sU,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(lU,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(iU,"href","/docs/transformers/pr_16988/en/model_doc/t5#transformers.FlaxT5Model"),c(dU,"href","/docs/transformers/pr_16988/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(cU,"href","/docs/transformers/pr_16988/en/model_doc/vit#transformers.FlaxViTModel"),c(fU,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(mU,"href","/docs/transformers/pr_16988/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(gU,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rE,"id","transformers.FlaxAutoModelForCausalLM"),c(rE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rE,"href","#transformers.FlaxAutoModelForCausalLM"),c(Fc,"class","relative group"),c(hU,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pU,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uU,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_U,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(bU,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(vU,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(FU,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(TU,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(MU,"href","/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(EU,"href","/docs/transformers/pr_16988/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(CU,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(wU,"href","/docs/transformers/pr_16988/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hE,"id","transformers.FlaxAutoModelForPreTraining"),c(hE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hE,"href","#transformers.FlaxAutoModelForPreTraining"),c(Ec,"class","relative group"),c(AU,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yU,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LU,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xU,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c($U,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(kU,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(SU,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(RU,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(BU,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(PU,"href","/docs/transformers/pr_16988/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(IU,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(qU,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(NU,"href","/docs/transformers/pr_16988/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(jU,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(DU,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xE,"id","transformers.FlaxAutoModelForMaskedLM"),c(xE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xE,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Ac,"class","relative group"),c(GU,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OU,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VU,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XU,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(zU,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(QU,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(WU,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(HU,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(UU,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(JU,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(YU,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(KU,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(ZU,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OE,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(OE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OE,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(xc,"class","relative group"),c(eJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tJ,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(aJ,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(nJ,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(sJ,"href","/docs/transformers/pr_16988/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(lJ,"href","/docs/transformers/pr_16988/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(iJ,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(dJ,"href","/docs/transformers/pr_16988/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(cJ,"href","/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(fJ,"href","/docs/transformers/pr_16988/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(e5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Sc,"class","relative group"),c(mJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pJ,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(uJ,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(_J,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(bJ,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(vJ,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(FJ,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(TJ,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(MJ,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(EJ,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(CJ,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(g5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Pc,"class","relative group"),c(wJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LJ,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(xJ,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c($J,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(kJ,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(SJ,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(RJ,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(BJ,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(PJ,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(IJ,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(qJ,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A5,"id","transformers.FlaxAutoModelForTokenClassification"),c(A5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A5,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Nc,"class","relative group"),c(NJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GJ,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(OJ,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(VJ,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(XJ,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(zJ,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(QJ,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(WJ,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(HJ,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q5,"id","transformers.FlaxAutoModelForMultipleChoice"),c(q5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q5,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Gc,"class","relative group"),c(UJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KJ,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(ZJ,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(eY,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(oY,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(rY,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(tY,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(aY,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(nY,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H5,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(H5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H5,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Xc,"class","relative group"),c(sY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dY,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K5,"id","transformers.FlaxAutoModelForImageClassification"),c(K5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K5,"href","#transformers.FlaxAutoModelForImageClassification"),c(Wc,"class","relative group"),c(cY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gY,"href","/docs/transformers/pr_16988/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(hY,"href","/docs/transformers/pr_16988/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tC,"id","transformers.FlaxAutoModelForVision2Seq"),c(tC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tC,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Jc,"class","relative group"),c(pY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_Y,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bY,"href","/docs/transformers/pr_16988/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,ri),b(f,rf,_),b(f,Kr,_),e(Kr,ti),e(Kr,ai),e(ai,Ew),e(Kr,tf),b(f,qe,_),b(f,Xe,_),e(Xe,ni),e(Xe,En),e(En,Cw),e(Xe,Cn),e(Xe,wn),e(wn,ww),e(Xe,si),e(Xe,An),e(An,Aw),e(Xe,li),b(f,af,_),M(va,f,_),b(f,ze,_),b(f,Ae,_),e(Ae,Nx),e(Ae,ii),e(ii,jx),e(Ae,Dx),b(f,Eo,_),b(f,Fa,_),e(Fa,Gx),e(Fa,nf),e(nf,Ox),e(Fa,LNe),b(f,MBe,_),b(f,di,_),e(di,sf),e(sf,dZ),M(yw,dZ,null),e(di,xNe),e(di,cZ),e(cZ,$Ne),b(f,EBe,_),b(f,yn,_),e(yn,kNe),e(yn,fZ),e(fZ,SNe),e(yn,RNe),e(yn,mZ),e(mZ,BNe),e(yn,PNe),b(f,CBe,_),M(Lw,f,_),b(f,wBe,_),b(f,Vx,_),e(Vx,INe),b(f,ABe,_),M(lf,f,_),b(f,yBe,_),b(f,ci,_),e(ci,df),e(df,gZ),M(xw,gZ,null),e(ci,qNe),e(ci,hZ),e(hZ,NNe),b(f,LBe,_),b(f,Co,_),M($w,Co,null),e(Co,jNe),e(Co,kw),e(kw,DNe),e(kw,Xx),e(Xx,GNe),e(kw,ONe),e(Co,VNe),e(Co,Sw),e(Sw,XNe),e(Sw,pZ),e(pZ,zNe),e(Sw,QNe),e(Co,WNe),e(Co,Mr),M(Rw,Mr,null),e(Mr,HNe),e(Mr,uZ),e(uZ,UNe),e(Mr,JNe),e(Mr,fi),e(fi,YNe),e(fi,_Z),e(_Z,KNe),e(fi,ZNe),e(fi,bZ),e(bZ,eje),e(fi,oje),e(Mr,rje),e(Mr,A),e(A,cf),e(cf,vZ),e(vZ,tje),e(cf,aje),e(cf,zx),e(zx,nje),e(cf,sje),e(A,lje),e(A,ff),e(ff,FZ),e(FZ,ije),e(ff,dje),e(ff,Qx),e(Qx,cje),e(ff,fje),e(A,mje),e(A,mf),e(mf,TZ),e(TZ,gje),e(mf,hje),e(mf,Wx),e(Wx,pje),e(mf,uje),e(A,_je),e(A,gf),e(gf,MZ),e(MZ,bje),e(gf,vje),e(gf,Hx),e(Hx,Fje),e(gf,Tje),e(A,Mje),e(A,hf),e(hf,EZ),e(EZ,Eje),e(hf,Cje),e(hf,Ux),e(Ux,wje),e(hf,Aje),e(A,yje),e(A,pf),e(pf,CZ),e(CZ,Lje),e(pf,xje),e(pf,Jx),e(Jx,$je),e(pf,kje),e(A,Sje),e(A,uf),e(uf,wZ),e(wZ,Rje),e(uf,Bje),e(uf,Yx),e(Yx,Pje),e(uf,Ije),e(A,qje),e(A,_f),e(_f,AZ),e(AZ,Nje),e(_f,jje),e(_f,Kx),e(Kx,Dje),e(_f,Gje),e(A,Oje),e(A,bf),e(bf,yZ),e(yZ,Vje),e(bf,Xje),e(bf,Zx),e(Zx,zje),e(bf,Qje),e(A,Wje),e(A,vf),e(vf,LZ),e(LZ,Hje),e(vf,Uje),e(vf,e$),e(e$,Jje),e(vf,Yje),e(A,Kje),e(A,Ff),e(Ff,xZ),e(xZ,Zje),e(Ff,eDe),e(Ff,o$),e(o$,oDe),e(Ff,rDe),e(A,tDe),e(A,Tf),e(Tf,$Z),e($Z,aDe),e(Tf,nDe),e(Tf,r$),e(r$,sDe),e(Tf,lDe),e(A,iDe),e(A,Mf),e(Mf,kZ),e(kZ,dDe),e(Mf,cDe),e(Mf,t$),e(t$,fDe),e(Mf,mDe),e(A,gDe),e(A,Ef),e(Ef,SZ),e(SZ,hDe),e(Ef,pDe),e(Ef,a$),e(a$,uDe),e(Ef,_De),e(A,bDe),e(A,Cf),e(Cf,RZ),e(RZ,vDe),e(Cf,FDe),e(Cf,n$),e(n$,TDe),e(Cf,MDe),e(A,EDe),e(A,wf),e(wf,BZ),e(BZ,CDe),e(wf,wDe),e(wf,s$),e(s$,ADe),e(wf,yDe),e(A,LDe),e(A,Af),e(Af,PZ),e(PZ,xDe),e(Af,$De),e(Af,l$),e(l$,kDe),e(Af,SDe),e(A,RDe),e(A,yf),e(yf,IZ),e(IZ,BDe),e(yf,PDe),e(yf,i$),e(i$,IDe),e(yf,qDe),e(A,NDe),e(A,Lf),e(Lf,qZ),e(qZ,jDe),e(Lf,DDe),e(Lf,d$),e(d$,GDe),e(Lf,ODe),e(A,VDe),e(A,xf),e(xf,NZ),e(NZ,XDe),e(xf,zDe),e(xf,c$),e(c$,QDe),e(xf,WDe),e(A,HDe),e(A,$f),e($f,jZ),e(jZ,UDe),e($f,JDe),e($f,f$),e(f$,YDe),e($f,KDe),e(A,ZDe),e(A,kf),e(kf,DZ),e(DZ,eGe),e(kf,oGe),e(kf,m$),e(m$,rGe),e(kf,tGe),e(A,aGe),e(A,Sf),e(Sf,GZ),e(GZ,nGe),e(Sf,sGe),e(Sf,g$),e(g$,lGe),e(Sf,iGe),e(A,dGe),e(A,Rf),e(Rf,OZ),e(OZ,cGe),e(Rf,fGe),e(Rf,h$),e(h$,mGe),e(Rf,gGe),e(A,hGe),e(A,Bf),e(Bf,VZ),e(VZ,pGe),e(Bf,uGe),e(Bf,p$),e(p$,_Ge),e(Bf,bGe),e(A,vGe),e(A,Pf),e(Pf,XZ),e(XZ,FGe),e(Pf,TGe),e(Pf,u$),e(u$,MGe),e(Pf,EGe),e(A,CGe),e(A,If),e(If,zZ),e(zZ,wGe),e(If,AGe),e(If,_$),e(_$,yGe),e(If,LGe),e(A,xGe),e(A,qf),e(qf,QZ),e(QZ,$Ge),e(qf,kGe),e(qf,b$),e(b$,SGe),e(qf,RGe),e(A,BGe),e(A,Nf),e(Nf,WZ),e(WZ,PGe),e(Nf,IGe),e(Nf,v$),e(v$,qGe),e(Nf,NGe),e(A,jGe),e(A,jf),e(jf,HZ),e(HZ,DGe),e(jf,GGe),e(jf,F$),e(F$,OGe),e(jf,VGe),e(A,XGe),e(A,Df),e(Df,UZ),e(UZ,zGe),e(Df,QGe),e(Df,T$),e(T$,WGe),e(Df,HGe),e(A,UGe),e(A,Gf),e(Gf,JZ),e(JZ,JGe),e(Gf,YGe),e(Gf,M$),e(M$,KGe),e(Gf,ZGe),e(A,eOe),e(A,Of),e(Of,YZ),e(YZ,oOe),e(Of,rOe),e(Of,E$),e(E$,tOe),e(Of,aOe),e(A,nOe),e(A,Vf),e(Vf,KZ),e(KZ,sOe),e(Vf,lOe),e(Vf,C$),e(C$,iOe),e(Vf,dOe),e(A,cOe),e(A,Xf),e(Xf,ZZ),e(ZZ,fOe),e(Xf,mOe),e(Xf,w$),e(w$,gOe),e(Xf,hOe),e(A,pOe),e(A,zf),e(zf,eee),e(eee,uOe),e(zf,_Oe),e(zf,A$),e(A$,bOe),e(zf,vOe),e(A,FOe),e(A,Qf),e(Qf,oee),e(oee,TOe),e(Qf,MOe),e(Qf,y$),e(y$,EOe),e(Qf,COe),e(A,wOe),e(A,Wf),e(Wf,ree),e(ree,AOe),e(Wf,yOe),e(Wf,L$),e(L$,LOe),e(Wf,xOe),e(A,$Oe),e(A,Hf),e(Hf,tee),e(tee,kOe),e(Hf,SOe),e(Hf,x$),e(x$,ROe),e(Hf,BOe),e(A,POe),e(A,Uf),e(Uf,aee),e(aee,IOe),e(Uf,qOe),e(Uf,$$),e($$,NOe),e(Uf,jOe),e(A,DOe),e(A,Jf),e(Jf,nee),e(nee,GOe),e(Jf,OOe),e(Jf,k$),e(k$,VOe),e(Jf,XOe),e(A,zOe),e(A,Yf),e(Yf,see),e(see,QOe),e(Yf,WOe),e(Yf,S$),e(S$,HOe),e(Yf,UOe),e(A,JOe),e(A,Kf),e(Kf,lee),e(lee,YOe),e(Kf,KOe),e(Kf,R$),e(R$,ZOe),e(Kf,eVe),e(A,oVe),e(A,Zf),e(Zf,iee),e(iee,rVe),e(Zf,tVe),e(Zf,B$),e(B$,aVe),e(Zf,nVe),e(A,sVe),e(A,em),e(em,dee),e(dee,lVe),e(em,iVe),e(em,P$),e(P$,dVe),e(em,cVe),e(A,fVe),e(A,om),e(om,cee),e(cee,mVe),e(om,gVe),e(om,I$),e(I$,hVe),e(om,pVe),e(A,uVe),e(A,rm),e(rm,fee),e(fee,_Ve),e(rm,bVe),e(rm,q$),e(q$,vVe),e(rm,FVe),e(A,TVe),e(A,tm),e(tm,mee),e(mee,MVe),e(tm,EVe),e(tm,N$),e(N$,CVe),e(tm,wVe),e(A,AVe),e(A,am),e(am,gee),e(gee,yVe),e(am,LVe),e(am,j$),e(j$,xVe),e(am,$Ve),e(A,kVe),e(A,nm),e(nm,hee),e(hee,SVe),e(nm,RVe),e(nm,D$),e(D$,BVe),e(nm,PVe),e(A,IVe),e(A,sm),e(sm,pee),e(pee,qVe),e(sm,NVe),e(sm,G$),e(G$,jVe),e(sm,DVe),e(A,GVe),e(A,lm),e(lm,uee),e(uee,OVe),e(lm,VVe),e(lm,O$),e(O$,XVe),e(lm,zVe),e(A,QVe),e(A,im),e(im,_ee),e(_ee,WVe),e(im,HVe),e(im,V$),e(V$,UVe),e(im,JVe),e(A,YVe),e(A,dm),e(dm,bee),e(bee,KVe),e(dm,ZVe),e(dm,X$),e(X$,eXe),e(dm,oXe),e(A,rXe),e(A,cm),e(cm,vee),e(vee,tXe),e(cm,aXe),e(cm,z$),e(z$,nXe),e(cm,sXe),e(A,lXe),e(A,fm),e(fm,Fee),e(Fee,iXe),e(fm,dXe),e(fm,Q$),e(Q$,cXe),e(fm,fXe),e(A,mXe),e(A,mm),e(mm,Tee),e(Tee,gXe),e(mm,hXe),e(mm,W$),e(W$,pXe),e(mm,uXe),e(A,_Xe),e(A,gm),e(gm,Mee),e(Mee,bXe),e(gm,vXe),e(gm,H$),e(H$,FXe),e(gm,TXe),e(A,MXe),e(A,hm),e(hm,Eee),e(Eee,EXe),e(hm,CXe),e(hm,U$),e(U$,wXe),e(hm,AXe),e(A,yXe),e(A,pm),e(pm,Cee),e(Cee,LXe),e(pm,xXe),e(pm,J$),e(J$,$Xe),e(pm,kXe),e(A,SXe),e(A,um),e(um,wee),e(wee,RXe),e(um,BXe),e(um,Y$),e(Y$,PXe),e(um,IXe),e(A,qXe),e(A,_m),e(_m,Aee),e(Aee,NXe),e(_m,jXe),e(_m,K$),e(K$,DXe),e(_m,GXe),e(A,OXe),e(A,bm),e(bm,yee),e(yee,VXe),e(bm,XXe),e(bm,Z$),e(Z$,zXe),e(bm,QXe),e(A,WXe),e(A,vm),e(vm,Lee),e(Lee,HXe),e(vm,UXe),e(vm,ek),e(ek,JXe),e(vm,YXe),e(A,KXe),e(A,Fm),e(Fm,xee),e(xee,ZXe),e(Fm,eze),e(Fm,ok),e(ok,oze),e(Fm,rze),e(A,tze),e(A,Tm),e(Tm,$ee),e($ee,aze),e(Tm,nze),e(Tm,rk),e(rk,sze),e(Tm,lze),e(A,ize),e(A,Mm),e(Mm,kee),e(kee,dze),e(Mm,cze),e(Mm,tk),e(tk,fze),e(Mm,mze),e(A,gze),e(A,Em),e(Em,See),e(See,hze),e(Em,pze),e(Em,ak),e(ak,uze),e(Em,_ze),e(A,bze),e(A,Cm),e(Cm,Ree),e(Ree,vze),e(Cm,Fze),e(Cm,nk),e(nk,Tze),e(Cm,Mze),e(A,Eze),e(A,wm),e(wm,Bee),e(Bee,Cze),e(wm,wze),e(wm,sk),e(sk,Aze),e(wm,yze),e(A,Lze),e(A,Am),e(Am,Pee),e(Pee,xze),e(Am,$ze),e(Am,lk),e(lk,kze),e(Am,Sze),e(A,Rze),e(A,ym),e(ym,Iee),e(Iee,Bze),e(ym,Pze),e(ym,ik),e(ik,Ize),e(ym,qze),e(A,Nze),e(A,Lm),e(Lm,qee),e(qee,jze),e(Lm,Dze),e(Lm,dk),e(dk,Gze),e(Lm,Oze),e(A,Vze),e(A,xm),e(xm,Nee),e(Nee,Xze),e(xm,zze),e(xm,ck),e(ck,Qze),e(xm,Wze),e(A,Hze),e(A,$m),e($m,jee),e(jee,Uze),e($m,Jze),e($m,fk),e(fk,Yze),e($m,Kze),e(A,Zze),e(A,km),e(km,Dee),e(Dee,eQe),e(km,oQe),e(km,mk),e(mk,rQe),e(km,tQe),e(A,aQe),e(A,Sm),e(Sm,Gee),e(Gee,nQe),e(Sm,sQe),e(Sm,gk),e(gk,lQe),e(Sm,iQe),e(A,dQe),e(A,Rm),e(Rm,Oee),e(Oee,cQe),e(Rm,fQe),e(Rm,hk),e(hk,mQe),e(Rm,gQe),e(A,hQe),e(A,Bm),e(Bm,Vee),e(Vee,pQe),e(Bm,uQe),e(Bm,pk),e(pk,_Qe),e(Bm,bQe),e(A,vQe),e(A,Pm),e(Pm,Xee),e(Xee,FQe),e(Pm,TQe),e(Pm,uk),e(uk,MQe),e(Pm,EQe),e(A,CQe),e(A,Im),e(Im,zee),e(zee,wQe),e(Im,AQe),e(Im,_k),e(_k,yQe),e(Im,LQe),e(A,xQe),e(A,qm),e(qm,Qee),e(Qee,$Qe),e(qm,kQe),e(qm,bk),e(bk,SQe),e(qm,RQe),e(A,BQe),e(A,Nm),e(Nm,Wee),e(Wee,PQe),e(Nm,IQe),e(Nm,vk),e(vk,qQe),e(Nm,NQe),e(A,jQe),e(A,jm),e(jm,Hee),e(Hee,DQe),e(jm,GQe),e(jm,Fk),e(Fk,OQe),e(jm,VQe),e(A,XQe),e(A,Dm),e(Dm,Uee),e(Uee,zQe),e(Dm,QQe),e(Dm,Tk),e(Tk,WQe),e(Dm,HQe),e(A,UQe),e(A,Gm),e(Gm,Jee),e(Jee,JQe),e(Gm,YQe),e(Gm,Mk),e(Mk,KQe),e(Gm,ZQe),e(A,eWe),e(A,Om),e(Om,Yee),e(Yee,oWe),e(Om,rWe),e(Om,Ek),e(Ek,tWe),e(Om,aWe),e(A,nWe),e(A,Vm),e(Vm,Kee),e(Kee,sWe),e(Vm,lWe),e(Vm,Ck),e(Ck,iWe),e(Vm,dWe),e(A,cWe),e(A,Xm),e(Xm,Zee),e(Zee,fWe),e(Xm,mWe),e(Xm,wk),e(wk,gWe),e(Xm,hWe),e(A,pWe),e(A,zm),e(zm,eoe),e(eoe,uWe),e(zm,_We),e(zm,Ak),e(Ak,bWe),e(zm,vWe),e(A,FWe),e(A,Qm),e(Qm,ooe),e(ooe,TWe),e(Qm,MWe),e(Qm,yk),e(yk,EWe),e(Qm,CWe),e(A,wWe),e(A,Wm),e(Wm,roe),e(roe,AWe),e(Wm,yWe),e(Wm,Lk),e(Lk,LWe),e(Wm,xWe),e(A,$We),e(A,Hm),e(Hm,toe),e(toe,kWe),e(Hm,SWe),e(Hm,xk),e(xk,RWe),e(Hm,BWe),e(A,PWe),e(A,Um),e(Um,aoe),e(aoe,IWe),e(Um,qWe),e(Um,$k),e($k,NWe),e(Um,jWe),e(A,DWe),e(A,Jm),e(Jm,noe),e(noe,GWe),e(Jm,OWe),e(Jm,kk),e(kk,VWe),e(Jm,XWe),e(A,zWe),e(A,Ym),e(Ym,soe),e(soe,QWe),e(Ym,WWe),e(Ym,Sk),e(Sk,HWe),e(Ym,UWe),e(A,JWe),e(A,Km),e(Km,loe),e(loe,YWe),e(Km,KWe),e(Km,Rk),e(Rk,ZWe),e(Km,eHe),e(A,oHe),e(A,Zm),e(Zm,ioe),e(ioe,rHe),e(Zm,tHe),e(Zm,Bk),e(Bk,aHe),e(Zm,nHe),e(A,sHe),e(A,eg),e(eg,doe),e(doe,lHe),e(eg,iHe),e(eg,Pk),e(Pk,dHe),e(eg,cHe),e(A,fHe),e(A,og),e(og,coe),e(coe,mHe),e(og,gHe),e(og,Ik),e(Ik,hHe),e(og,pHe),e(A,uHe),e(A,rg),e(rg,foe),e(foe,_He),e(rg,bHe),e(rg,qk),e(qk,vHe),e(rg,FHe),e(A,THe),e(A,tg),e(tg,moe),e(moe,MHe),e(tg,EHe),e(tg,Nk),e(Nk,CHe),e(tg,wHe),e(A,AHe),e(A,ag),e(ag,goe),e(goe,yHe),e(ag,LHe),e(ag,jk),e(jk,xHe),e(ag,$He),e(Mr,kHe),M(ng,Mr,null),e(Co,SHe),e(Co,sg),M(Bw,sg,null),e(sg,RHe),e(sg,hoe),e(hoe,BHe),b(f,xBe,_),b(f,mi,_),e(mi,lg),e(lg,poe),M(Pw,poe,null),e(mi,PHe),e(mi,uoe),e(uoe,IHe),b(f,$Be,_),b(f,wo,_),M(Iw,wo,null),e(wo,qHe),e(wo,qw),e(qw,NHe),e(qw,Dk),e(Dk,jHe),e(qw,DHe),e(wo,GHe),e(wo,Nw),e(Nw,OHe),e(Nw,_oe),e(_oe,VHe),e(Nw,XHe),e(wo,zHe),e(wo,Er),M(jw,Er,null),e(Er,QHe),e(Er,boe),e(boe,WHe),e(Er,HHe),e(Er,Ta),e(Ta,UHe),e(Ta,voe),e(voe,JHe),e(Ta,YHe),e(Ta,Foe),e(Foe,KHe),e(Ta,ZHe),e(Ta,Toe),e(Toe,eUe),e(Ta,oUe),e(Er,rUe),e(Er,k),e(k,Ln),e(Ln,Moe),e(Moe,tUe),e(Ln,aUe),e(Ln,Gk),e(Gk,nUe),e(Ln,sUe),e(Ln,Ok),e(Ok,lUe),e(Ln,iUe),e(k,dUe),e(k,xn),e(xn,Eoe),e(Eoe,cUe),e(xn,fUe),e(xn,Vk),e(Vk,mUe),e(xn,gUe),e(xn,Xk),e(Xk,hUe),e(xn,pUe),e(k,uUe),e(k,$n),e($n,Coe),e(Coe,_Ue),e($n,bUe),e($n,zk),e(zk,vUe),e($n,FUe),e($n,Qk),e(Qk,TUe),e($n,MUe),e(k,EUe),e(k,ig),e(ig,woe),e(woe,CUe),e(ig,wUe),e(ig,Wk),e(Wk,AUe),e(ig,yUe),e(k,LUe),e(k,kn),e(kn,Aoe),e(Aoe,xUe),e(kn,$Ue),e(kn,Hk),e(Hk,kUe),e(kn,SUe),e(kn,Uk),e(Uk,RUe),e(kn,BUe),e(k,PUe),e(k,dg),e(dg,yoe),e(yoe,IUe),e(dg,qUe),e(dg,Jk),e(Jk,NUe),e(dg,jUe),e(k,DUe),e(k,cg),e(cg,Loe),e(Loe,GUe),e(cg,OUe),e(cg,Yk),e(Yk,VUe),e(cg,XUe),e(k,zUe),e(k,fg),e(fg,xoe),e(xoe,QUe),e(fg,WUe),e(fg,Kk),e(Kk,HUe),e(fg,UUe),e(k,JUe),e(k,Sn),e(Sn,$oe),e($oe,YUe),e(Sn,KUe),e(Sn,Zk),e(Zk,ZUe),e(Sn,eJe),e(Sn,eS),e(eS,oJe),e(Sn,rJe),e(k,tJe),e(k,Rn),e(Rn,koe),e(koe,aJe),e(Rn,nJe),e(Rn,oS),e(oS,sJe),e(Rn,lJe),e(Rn,rS),e(rS,iJe),e(Rn,dJe),e(k,cJe),e(k,Bn),e(Bn,Soe),e(Soe,fJe),e(Bn,mJe),e(Bn,tS),e(tS,gJe),e(Bn,hJe),e(Bn,aS),e(aS,pJe),e(Bn,uJe),e(k,_Je),e(k,mg),e(mg,Roe),e(Roe,bJe),e(mg,vJe),e(mg,nS),e(nS,FJe),e(mg,TJe),e(k,MJe),e(k,gg),e(gg,Boe),e(Boe,EJe),e(gg,CJe),e(gg,sS),e(sS,wJe),e(gg,AJe),e(k,yJe),e(k,Pn),e(Pn,Poe),e(Poe,LJe),e(Pn,xJe),e(Pn,lS),e(lS,$Je),e(Pn,kJe),e(Pn,iS),e(iS,SJe),e(Pn,RJe),e(k,BJe),e(k,hg),e(hg,Ioe),e(Ioe,PJe),e(hg,IJe),e(hg,dS),e(dS,qJe),e(hg,NJe),e(k,jJe),e(k,In),e(In,qoe),e(qoe,DJe),e(In,GJe),e(In,cS),e(cS,OJe),e(In,VJe),e(In,fS),e(fS,XJe),e(In,zJe),e(k,QJe),e(k,qn),e(qn,Noe),e(Noe,WJe),e(qn,HJe),e(qn,mS),e(mS,UJe),e(qn,JJe),e(qn,gS),e(gS,YJe),e(qn,KJe),e(k,ZJe),e(k,Nn),e(Nn,joe),e(joe,eYe),e(Nn,oYe),e(Nn,hS),e(hS,rYe),e(Nn,tYe),e(Nn,pS),e(pS,aYe),e(Nn,nYe),e(k,sYe),e(k,pg),e(pg,Doe),e(Doe,lYe),e(pg,iYe),e(pg,uS),e(uS,dYe),e(pg,cYe),e(k,fYe),e(k,jn),e(jn,Goe),e(Goe,mYe),e(jn,gYe),e(jn,_S),e(_S,hYe),e(jn,pYe),e(jn,bS),e(bS,uYe),e(jn,_Ye),e(k,bYe),e(k,Dn),e(Dn,Ooe),e(Ooe,vYe),e(Dn,FYe),e(Dn,vS),e(vS,TYe),e(Dn,MYe),e(Dn,FS),e(FS,EYe),e(Dn,CYe),e(k,wYe),e(k,Gn),e(Gn,Voe),e(Voe,AYe),e(Gn,yYe),e(Gn,TS),e(TS,LYe),e(Gn,xYe),e(Gn,MS),e(MS,$Ye),e(Gn,kYe),e(k,SYe),e(k,On),e(On,Xoe),e(Xoe,RYe),e(On,BYe),e(On,ES),e(ES,PYe),e(On,IYe),e(On,CS),e(CS,qYe),e(On,NYe),e(k,jYe),e(k,Vn),e(Vn,zoe),e(zoe,DYe),e(Vn,GYe),e(Vn,wS),e(wS,OYe),e(Vn,VYe),e(Vn,AS),e(AS,XYe),e(Vn,zYe),e(k,QYe),e(k,Xn),e(Xn,Qoe),e(Qoe,WYe),e(Xn,HYe),e(Xn,yS),e(yS,UYe),e(Xn,JYe),e(Xn,LS),e(LS,YYe),e(Xn,KYe),e(k,ZYe),e(k,ug),e(ug,Woe),e(Woe,eKe),e(ug,oKe),e(ug,xS),e(xS,rKe),e(ug,tKe),e(k,aKe),e(k,zn),e(zn,Hoe),e(Hoe,nKe),e(zn,sKe),e(zn,$S),e($S,lKe),e(zn,iKe),e(zn,kS),e(kS,dKe),e(zn,cKe),e(k,fKe),e(k,_g),e(_g,Uoe),e(Uoe,mKe),e(_g,gKe),e(_g,SS),e(SS,hKe),e(_g,pKe),e(k,uKe),e(k,Qn),e(Qn,Joe),e(Joe,_Ke),e(Qn,bKe),e(Qn,RS),e(RS,vKe),e(Qn,FKe),e(Qn,BS),e(BS,TKe),e(Qn,MKe),e(k,EKe),e(k,Wn),e(Wn,Yoe),e(Yoe,CKe),e(Wn,wKe),e(Wn,PS),e(PS,AKe),e(Wn,yKe),e(Wn,IS),e(IS,LKe),e(Wn,xKe),e(k,$Ke),e(k,Hn),e(Hn,Koe),e(Koe,kKe),e(Hn,SKe),e(Hn,qS),e(qS,RKe),e(Hn,BKe),e(Hn,NS),e(NS,PKe),e(Hn,IKe),e(k,qKe),e(k,Un),e(Un,Zoe),e(Zoe,NKe),e(Un,jKe),e(Un,jS),e(jS,DKe),e(Un,GKe),e(Un,DS),e(DS,OKe),e(Un,VKe),e(k,XKe),e(k,Jn),e(Jn,ere),e(ere,zKe),e(Jn,QKe),e(Jn,GS),e(GS,WKe),e(Jn,HKe),e(Jn,OS),e(OS,UKe),e(Jn,JKe),e(k,YKe),e(k,bg),e(bg,ore),e(ore,KKe),e(bg,ZKe),e(bg,VS),e(VS,eZe),e(bg,oZe),e(k,rZe),e(k,Yn),e(Yn,rre),e(rre,tZe),e(Yn,aZe),e(Yn,XS),e(XS,nZe),e(Yn,sZe),e(Yn,zS),e(zS,lZe),e(Yn,iZe),e(k,dZe),e(k,Kn),e(Kn,tre),e(tre,cZe),e(Kn,fZe),e(Kn,QS),e(QS,mZe),e(Kn,gZe),e(Kn,WS),e(WS,hZe),e(Kn,pZe),e(k,uZe),e(k,Zn),e(Zn,are),e(are,_Ze),e(Zn,bZe),e(Zn,HS),e(HS,vZe),e(Zn,FZe),e(Zn,US),e(US,TZe),e(Zn,MZe),e(k,EZe),e(k,es),e(es,nre),e(nre,CZe),e(es,wZe),e(es,JS),e(JS,AZe),e(es,yZe),e(es,YS),e(YS,LZe),e(es,xZe),e(k,$Ze),e(k,os),e(os,sre),e(sre,kZe),e(os,SZe),e(os,KS),e(KS,RZe),e(os,BZe),e(os,ZS),e(ZS,PZe),e(os,IZe),e(k,qZe),e(k,rs),e(rs,lre),e(lre,NZe),e(rs,jZe),e(rs,eR),e(eR,DZe),e(rs,GZe),e(rs,oR),e(oR,OZe),e(rs,VZe),e(k,XZe),e(k,vg),e(vg,ire),e(ire,zZe),e(vg,QZe),e(vg,rR),e(rR,WZe),e(vg,HZe),e(k,UZe),e(k,ts),e(ts,dre),e(dre,JZe),e(ts,YZe),e(ts,tR),e(tR,KZe),e(ts,ZZe),e(ts,aR),e(aR,eeo),e(ts,oeo),e(k,reo),e(k,Fg),e(Fg,cre),e(cre,teo),e(Fg,aeo),e(Fg,nR),e(nR,neo),e(Fg,seo),e(k,leo),e(k,Tg),e(Tg,fre),e(fre,ieo),e(Tg,deo),e(Tg,sR),e(sR,ceo),e(Tg,feo),e(k,meo),e(k,as),e(as,mre),e(mre,geo),e(as,heo),e(as,lR),e(lR,peo),e(as,ueo),e(as,iR),e(iR,_eo),e(as,beo),e(k,veo),e(k,ns),e(ns,gre),e(gre,Feo),e(ns,Teo),e(ns,dR),e(dR,Meo),e(ns,Eeo),e(ns,cR),e(cR,Ceo),e(ns,weo),e(k,Aeo),e(k,ss),e(ss,hre),e(hre,yeo),e(ss,Leo),e(ss,fR),e(fR,xeo),e(ss,$eo),e(ss,mR),e(mR,keo),e(ss,Seo),e(k,Reo),e(k,Mg),e(Mg,pre),e(pre,Beo),e(Mg,Peo),e(Mg,gR),e(gR,Ieo),e(Mg,qeo),e(k,Neo),e(k,ls),e(ls,ure),e(ure,jeo),e(ls,Deo),e(ls,hR),e(hR,Geo),e(ls,Oeo),e(ls,pR),e(pR,Veo),e(ls,Xeo),e(k,zeo),e(k,is),e(is,_re),e(_re,Qeo),e(is,Weo),e(is,uR),e(uR,Heo),e(is,Ueo),e(is,_R),e(_R,Jeo),e(is,Yeo),e(k,Keo),e(k,ds),e(ds,bre),e(bre,Zeo),e(ds,eoo),e(ds,bR),e(bR,ooo),e(ds,roo),e(ds,vR),e(vR,too),e(ds,aoo),e(k,noo),e(k,cs),e(cs,vre),e(vre,soo),e(cs,loo),e(cs,FR),e(FR,ioo),e(cs,doo),e(cs,TR),e(TR,coo),e(cs,foo),e(k,moo),e(k,fs),e(fs,Fre),e(Fre,goo),e(fs,hoo),e(fs,MR),e(MR,poo),e(fs,uoo),e(fs,ER),e(ER,_oo),e(fs,boo),e(k,voo),e(k,ms),e(ms,Tre),e(Tre,Foo),e(ms,Too),e(ms,CR),e(CR,Moo),e(ms,Eoo),e(ms,wR),e(wR,Coo),e(ms,woo),e(k,Aoo),e(k,Eg),e(Eg,Mre),e(Mre,yoo),e(Eg,Loo),e(Eg,AR),e(AR,xoo),e(Eg,$oo),e(k,koo),e(k,Cg),e(Cg,Ere),e(Ere,Soo),e(Cg,Roo),e(Cg,yR),e(yR,Boo),e(Cg,Poo),e(k,Ioo),e(k,wg),e(wg,Cre),e(Cre,qoo),e(wg,Noo),e(wg,LR),e(LR,joo),e(wg,Doo),e(k,Goo),e(k,Ag),e(Ag,wre),e(wre,Ooo),e(Ag,Voo),e(Ag,xR),e(xR,Xoo),e(Ag,zoo),e(k,Qoo),e(k,gs),e(gs,Are),e(Are,Woo),e(gs,Hoo),e(gs,$R),e($R,Uoo),e(gs,Joo),e(gs,kR),e(kR,Yoo),e(gs,Koo),e(k,Zoo),e(k,yg),e(yg,yre),e(yre,ero),e(yg,oro),e(yg,SR),e(SR,rro),e(yg,tro),e(k,aro),e(k,hs),e(hs,Lre),e(Lre,nro),e(hs,sro),e(hs,RR),e(RR,lro),e(hs,iro),e(hs,BR),e(BR,dro),e(hs,cro),e(k,fro),e(k,ps),e(ps,xre),e(xre,mro),e(ps,gro),e(ps,PR),e(PR,hro),e(ps,pro),e(ps,IR),e(IR,uro),e(ps,_ro),e(k,bro),e(k,us),e(us,$re),e($re,vro),e(us,Fro),e(us,qR),e(qR,Tro),e(us,Mro),e(us,NR),e(NR,Ero),e(us,Cro),e(k,wro),e(k,_s),e(_s,kre),e(kre,Aro),e(_s,yro),e(_s,jR),e(jR,Lro),e(_s,xro),e(_s,DR),e(DR,$ro),e(_s,kro),e(k,Sro),e(k,bs),e(bs,Sre),e(Sre,Rro),e(bs,Bro),e(bs,GR),e(GR,Pro),e(bs,Iro),e(bs,OR),e(OR,qro),e(bs,Nro),e(k,jro),e(k,vs),e(vs,Rre),e(Rre,Dro),e(vs,Gro),e(vs,VR),e(VR,Oro),e(vs,Vro),e(vs,XR),e(XR,Xro),e(vs,zro),e(k,Qro),e(k,Lg),e(Lg,Bre),e(Bre,Wro),e(Lg,Hro),e(Lg,zR),e(zR,Uro),e(Lg,Jro),e(k,Yro),e(k,xg),e(xg,Pre),e(Pre,Kro),e(xg,Zro),e(xg,QR),e(QR,eto),e(xg,oto),e(k,rto),e(k,Fs),e(Fs,Ire),e(Ire,tto),e(Fs,ato),e(Fs,WR),e(WR,nto),e(Fs,sto),e(Fs,HR),e(HR,lto),e(Fs,ito),e(k,dto),e(k,Ts),e(Ts,qre),e(qre,cto),e(Ts,fto),e(Ts,UR),e(UR,mto),e(Ts,gto),e(Ts,JR),e(JR,hto),e(Ts,pto),e(k,uto),e(k,Ms),e(Ms,Nre),e(Nre,_to),e(Ms,bto),e(Ms,YR),e(YR,vto),e(Ms,Fto),e(Ms,KR),e(KR,Tto),e(Ms,Mto),e(k,Eto),e(k,$g),e($g,jre),e(jre,Cto),e($g,wto),e($g,ZR),e(ZR,Ato),e($g,yto),e(k,Lto),e(k,kg),e(kg,Dre),e(Dre,xto),e(kg,$to),e(kg,eB),e(eB,kto),e(kg,Sto),e(k,Rto),e(k,Sg),e(Sg,Gre),e(Gre,Bto),e(Sg,Pto),e(Sg,oB),e(oB,Ito),e(Sg,qto),e(k,Nto),e(k,Es),e(Es,Ore),e(Ore,jto),e(Es,Dto),e(Es,rB),e(rB,Gto),e(Es,Oto),e(Es,tB),e(tB,Vto),e(Es,Xto),e(k,zto),e(k,Rg),e(Rg,Vre),e(Vre,Qto),e(Rg,Wto),e(Rg,aB),e(aB,Hto),e(Rg,Uto),e(k,Jto),e(k,Bg),e(Bg,Xre),e(Xre,Yto),e(Bg,Kto),e(Bg,nB),e(nB,Zto),e(Bg,eao),e(k,oao),e(k,Cs),e(Cs,zre),e(zre,rao),e(Cs,tao),e(Cs,sB),e(sB,aao),e(Cs,nao),e(Cs,lB),e(lB,sao),e(Cs,lao),e(k,iao),e(k,Pg),e(Pg,Qre),e(Qre,dao),e(Pg,cao),e(Pg,iB),e(iB,fao),e(Pg,mao),e(k,gao),e(k,Ig),e(Ig,Wre),e(Wre,hao),e(Ig,pao),e(Ig,dB),e(dB,uao),e(Ig,_ao),e(k,bao),e(k,ws),e(ws,Hre),e(Hre,vao),e(ws,Fao),e(ws,cB),e(cB,Tao),e(ws,Mao),e(ws,fB),e(fB,Eao),e(ws,Cao),e(k,wao),e(k,As),e(As,Ure),e(Ure,Aao),e(As,yao),e(As,mB),e(mB,Lao),e(As,xao),e(As,gB),e(gB,$ao),e(As,kao),e(k,Sao),e(k,ys),e(ys,Jre),e(Jre,Rao),e(ys,Bao),e(ys,hB),e(hB,Pao),e(ys,Iao),e(ys,pB),e(pB,qao),e(ys,Nao),e(k,jao),e(k,Ls),e(Ls,Yre),e(Yre,Dao),e(Ls,Gao),e(Ls,uB),e(uB,Oao),e(Ls,Vao),e(Ls,_B),e(_B,Xao),e(Ls,zao),e(Er,Qao),M(qg,Er,null),e(wo,Wao),e(wo,Ng),M(Dw,Ng,null),e(Ng,Hao),e(Ng,Kre),e(Kre,Uao),b(f,kBe,_),b(f,gi,_),e(gi,jg),e(jg,Zre),M(Gw,Zre,null),e(gi,Jao),e(gi,ete),e(ete,Yao),b(f,SBe,_),b(f,Ao,_),M(Ow,Ao,null),e(Ao,Kao),e(Ao,Vw),e(Vw,Zao),e(Vw,bB),e(bB,eno),e(Vw,ono),e(Ao,rno),e(Ao,Xw),e(Xw,tno),e(Xw,ote),e(ote,ano),e(Xw,nno),e(Ao,sno),e(Ao,Qe),M(zw,Qe,null),e(Qe,lno),e(Qe,rte),e(rte,ino),e(Qe,dno),e(Qe,Ma),e(Ma,cno),e(Ma,tte),e(tte,fno),e(Ma,mno),e(Ma,ate),e(ate,gno),e(Ma,hno),e(Ma,nte),e(nte,pno),e(Ma,uno),e(Qe,_no),e(Qe,te),e(te,Dg),e(Dg,ste),e(ste,bno),e(Dg,vno),e(Dg,vB),e(vB,Fno),e(Dg,Tno),e(te,Mno),e(te,Gg),e(Gg,lte),e(lte,Eno),e(Gg,Cno),e(Gg,FB),e(FB,wno),e(Gg,Ano),e(te,yno),e(te,Og),e(Og,ite),e(ite,Lno),e(Og,xno),e(Og,TB),e(TB,$no),e(Og,kno),e(te,Sno),e(te,Vg),e(Vg,dte),e(dte,Rno),e(Vg,Bno),e(Vg,MB),e(MB,Pno),e(Vg,Ino),e(te,qno),e(te,Xg),e(Xg,cte),e(cte,Nno),e(Xg,jno),e(Xg,EB),e(EB,Dno),e(Xg,Gno),e(te,Ono),e(te,zg),e(zg,fte),e(fte,Vno),e(zg,Xno),e(zg,CB),e(CB,zno),e(zg,Qno),e(te,Wno),e(te,Qg),e(Qg,mte),e(mte,Hno),e(Qg,Uno),e(Qg,wB),e(wB,Jno),e(Qg,Yno),e(te,Kno),e(te,Wg),e(Wg,gte),e(gte,Zno),e(Wg,eso),e(Wg,AB),e(AB,oso),e(Wg,rso),e(te,tso),e(te,Hg),e(Hg,hte),e(hte,aso),e(Hg,nso),e(Hg,yB),e(yB,sso),e(Hg,lso),e(te,iso),e(te,Ug),e(Ug,pte),e(pte,dso),e(Ug,cso),e(Ug,LB),e(LB,fso),e(Ug,mso),e(te,gso),e(te,Jg),e(Jg,ute),e(ute,hso),e(Jg,pso),e(Jg,xB),e(xB,uso),e(Jg,_so),e(te,bso),e(te,Yg),e(Yg,_te),e(_te,vso),e(Yg,Fso),e(Yg,$B),e($B,Tso),e(Yg,Mso),e(te,Eso),e(te,Kg),e(Kg,bte),e(bte,Cso),e(Kg,wso),e(Kg,kB),e(kB,Aso),e(Kg,yso),e(te,Lso),e(te,Zg),e(Zg,vte),e(vte,xso),e(Zg,$so),e(Zg,SB),e(SB,kso),e(Zg,Sso),e(te,Rso),e(te,eh),e(eh,Fte),e(Fte,Bso),e(eh,Pso),e(eh,RB),e(RB,Iso),e(eh,qso),e(te,Nso),e(te,oh),e(oh,Tte),e(Tte,jso),e(oh,Dso),e(oh,BB),e(BB,Gso),e(oh,Oso),e(te,Vso),e(te,rh),e(rh,Mte),e(Mte,Xso),e(rh,zso),e(rh,PB),e(PB,Qso),e(rh,Wso),e(te,Hso),e(te,th),e(th,Ete),e(Ete,Uso),e(th,Jso),e(th,IB),e(IB,Yso),e(th,Kso),e(te,Zso),e(te,ah),e(ah,Cte),e(Cte,elo),e(ah,olo),e(ah,qB),e(qB,rlo),e(ah,tlo),e(te,alo),e(te,nh),e(nh,wte),e(wte,nlo),e(nh,slo),e(nh,NB),e(NB,llo),e(nh,ilo),e(te,dlo),e(te,sh),e(sh,Ate),e(Ate,clo),e(sh,flo),e(sh,jB),e(jB,mlo),e(sh,glo),e(te,hlo),e(te,lh),e(lh,yte),e(yte,plo),e(lh,ulo),e(lh,DB),e(DB,_lo),e(lh,blo),e(te,vlo),e(te,ih),e(ih,Lte),e(Lte,Flo),e(ih,Tlo),e(ih,GB),e(GB,Mlo),e(ih,Elo),e(te,Clo),e(te,dh),e(dh,xte),e(xte,wlo),e(dh,Alo),e(dh,OB),e(OB,ylo),e(dh,Llo),e(Qe,xlo),M(ch,Qe,null),e(Qe,$lo),M(fh,Qe,null),e(Ao,klo),e(Ao,mh),M(Qw,mh,null),e(mh,Slo),e(mh,$te),e($te,Rlo),b(f,RBe,_),b(f,hi,_),e(hi,gh),e(gh,kte),M(Ww,kte,null),e(hi,Blo),e(hi,Ste),e(Ste,Plo),b(f,BBe,_),b(f,yo,_),M(Hw,yo,null),e(yo,Ilo),e(yo,Uw),e(Uw,qlo),e(Uw,VB),e(VB,Nlo),e(Uw,jlo),e(yo,Dlo),e(yo,Jw),e(Jw,Glo),e(Jw,Rte),e(Rte,Olo),e(Jw,Vlo),e(yo,Xlo),e(yo,We),M(Yw,We,null),e(We,zlo),e(We,Bte),e(Bte,Qlo),e(We,Wlo),e(We,pi),e(pi,Hlo),e(pi,Pte),e(Pte,Ulo),e(pi,Jlo),e(pi,Ite),e(Ite,Ylo),e(pi,Klo),e(We,Zlo),e(We,be),e(be,hh),e(hh,qte),e(qte,eio),e(hh,oio),e(hh,XB),e(XB,rio),e(hh,tio),e(be,aio),e(be,ph),e(ph,Nte),e(Nte,nio),e(ph,sio),e(ph,zB),e(zB,lio),e(ph,iio),e(be,dio),e(be,uh),e(uh,jte),e(jte,cio),e(uh,fio),e(uh,QB),e(QB,mio),e(uh,gio),e(be,hio),e(be,_h),e(_h,Dte),e(Dte,pio),e(_h,uio),e(_h,WB),e(WB,_io),e(_h,bio),e(be,vio),e(be,bh),e(bh,Gte),e(Gte,Fio),e(bh,Tio),e(bh,HB),e(HB,Mio),e(bh,Eio),e(be,Cio),e(be,vh),e(vh,Ote),e(Ote,wio),e(vh,Aio),e(vh,UB),e(UB,yio),e(vh,Lio),e(be,xio),e(be,Fh),e(Fh,Vte),e(Vte,$io),e(Fh,kio),e(Fh,JB),e(JB,Sio),e(Fh,Rio),e(be,Bio),e(be,Th),e(Th,Xte),e(Xte,Pio),e(Th,Iio),e(Th,YB),e(YB,qio),e(Th,Nio),e(be,jio),e(be,Mh),e(Mh,zte),e(zte,Dio),e(Mh,Gio),e(Mh,KB),e(KB,Oio),e(Mh,Vio),e(be,Xio),e(be,Eh),e(Eh,Qte),e(Qte,zio),e(Eh,Qio),e(Eh,ZB),e(ZB,Wio),e(Eh,Hio),e(be,Uio),e(be,Ch),e(Ch,Wte),e(Wte,Jio),e(Ch,Yio),e(Ch,eP),e(eP,Kio),e(Ch,Zio),e(be,edo),e(be,wh),e(wh,Hte),e(Hte,odo),e(wh,rdo),e(wh,oP),e(oP,tdo),e(wh,ado),e(be,ndo),e(be,Ah),e(Ah,Ute),e(Ute,sdo),e(Ah,ldo),e(Ah,rP),e(rP,ido),e(Ah,ddo),e(be,cdo),e(be,yh),e(yh,Jte),e(Jte,fdo),e(yh,mdo),e(yh,tP),e(tP,gdo),e(yh,hdo),e(We,pdo),M(Lh,We,null),e(We,udo),M(xh,We,null),e(yo,_do),e(yo,$h),M(Kw,$h,null),e($h,bdo),e($h,Yte),e(Yte,vdo),b(f,PBe,_),b(f,ui,_),e(ui,kh),e(kh,Kte),M(Zw,Kte,null),e(ui,Fdo),e(ui,Zte),e(Zte,Tdo),b(f,IBe,_),b(f,Lo,_),M(eA,Lo,null),e(Lo,Mdo),e(Lo,_i),e(_i,Edo),e(_i,aP),e(aP,Cdo),e(_i,wdo),e(_i,nP),e(nP,Ado),e(_i,ydo),e(Lo,Ldo),e(Lo,oA),e(oA,xdo),e(oA,eae),e(eae,$do),e(oA,kdo),e(Lo,Sdo),e(Lo,Zr),M(rA,Zr,null),e(Zr,Rdo),e(Zr,oae),e(oae,Bdo),e(Zr,Pdo),e(Zr,bi),e(bi,Ido),e(bi,rae),e(rae,qdo),e(bi,Ndo),e(bi,sP),e(sP,jdo),e(bi,Ddo),e(Zr,Gdo),M(Sh,Zr,null),e(Lo,Odo),e(Lo,He),M(tA,He,null),e(He,Vdo),e(He,tae),e(tae,Xdo),e(He,zdo),e(He,Ea),e(Ea,Qdo),e(Ea,aae),e(aae,Wdo),e(Ea,Hdo),e(Ea,nae),e(nae,Udo),e(Ea,Jdo),e(Ea,sae),e(sae,Ydo),e(Ea,Kdo),e(He,Zdo),e(He,x),e(x,Rh),e(Rh,lae),e(lae,eco),e(Rh,oco),e(Rh,lP),e(lP,rco),e(Rh,tco),e(x,aco),e(x,Bh),e(Bh,iae),e(iae,nco),e(Bh,sco),e(Bh,iP),e(iP,lco),e(Bh,ico),e(x,dco),e(x,Ph),e(Ph,dae),e(dae,cco),e(Ph,fco),e(Ph,dP),e(dP,mco),e(Ph,gco),e(x,hco),e(x,Ih),e(Ih,cae),e(cae,pco),e(Ih,uco),e(Ih,cP),e(cP,_co),e(Ih,bco),e(x,vco),e(x,qh),e(qh,fae),e(fae,Fco),e(qh,Tco),e(qh,fP),e(fP,Mco),e(qh,Eco),e(x,Cco),e(x,Nh),e(Nh,mae),e(mae,wco),e(Nh,Aco),e(Nh,mP),e(mP,yco),e(Nh,Lco),e(x,xco),e(x,jh),e(jh,gae),e(gae,$co),e(jh,kco),e(jh,gP),e(gP,Sco),e(jh,Rco),e(x,Bco),e(x,Dh),e(Dh,hae),e(hae,Pco),e(Dh,Ico),e(Dh,hP),e(hP,qco),e(Dh,Nco),e(x,jco),e(x,Gh),e(Gh,pae),e(pae,Dco),e(Gh,Gco),e(Gh,pP),e(pP,Oco),e(Gh,Vco),e(x,Xco),e(x,Oh),e(Oh,uae),e(uae,zco),e(Oh,Qco),e(Oh,uP),e(uP,Wco),e(Oh,Hco),e(x,Uco),e(x,Vh),e(Vh,_ae),e(_ae,Jco),e(Vh,Yco),e(Vh,_P),e(_P,Kco),e(Vh,Zco),e(x,efo),e(x,Xh),e(Xh,bae),e(bae,ofo),e(Xh,rfo),e(Xh,bP),e(bP,tfo),e(Xh,afo),e(x,nfo),e(x,zh),e(zh,vae),e(vae,sfo),e(zh,lfo),e(zh,vP),e(vP,ifo),e(zh,dfo),e(x,cfo),e(x,Qh),e(Qh,Fae),e(Fae,ffo),e(Qh,mfo),e(Qh,FP),e(FP,gfo),e(Qh,hfo),e(x,pfo),e(x,Wh),e(Wh,Tae),e(Tae,ufo),e(Wh,_fo),e(Wh,TP),e(TP,bfo),e(Wh,vfo),e(x,Ffo),e(x,Hh),e(Hh,Mae),e(Mae,Tfo),e(Hh,Mfo),e(Hh,MP),e(MP,Efo),e(Hh,Cfo),e(x,wfo),e(x,Uh),e(Uh,Eae),e(Eae,Afo),e(Uh,yfo),e(Uh,EP),e(EP,Lfo),e(Uh,xfo),e(x,$fo),e(x,Jh),e(Jh,Cae),e(Cae,kfo),e(Jh,Sfo),e(Jh,CP),e(CP,Rfo),e(Jh,Bfo),e(x,Pfo),e(x,Yh),e(Yh,wae),e(wae,Ifo),e(Yh,qfo),e(Yh,wP),e(wP,Nfo),e(Yh,jfo),e(x,Dfo),e(x,Kh),e(Kh,Aae),e(Aae,Gfo),e(Kh,Ofo),e(Kh,AP),e(AP,Vfo),e(Kh,Xfo),e(x,zfo),e(x,Zh),e(Zh,yae),e(yae,Qfo),e(Zh,Wfo),e(Zh,yP),e(yP,Hfo),e(Zh,Ufo),e(x,Jfo),e(x,ep),e(ep,Lae),e(Lae,Yfo),e(ep,Kfo),e(ep,LP),e(LP,Zfo),e(ep,emo),e(x,omo),e(x,op),e(op,xae),e(xae,rmo),e(op,tmo),e(op,xP),e(xP,amo),e(op,nmo),e(x,smo),e(x,rp),e(rp,$ae),e($ae,lmo),e(rp,imo),e(rp,$P),e($P,dmo),e(rp,cmo),e(x,fmo),e(x,tp),e(tp,kae),e(kae,mmo),e(tp,gmo),e(tp,kP),e(kP,hmo),e(tp,pmo),e(x,umo),e(x,ap),e(ap,Sae),e(Sae,_mo),e(ap,bmo),e(ap,SP),e(SP,vmo),e(ap,Fmo),e(x,Tmo),e(x,np),e(np,Rae),e(Rae,Mmo),e(np,Emo),e(np,RP),e(RP,Cmo),e(np,wmo),e(x,Amo),e(x,sp),e(sp,Bae),e(Bae,ymo),e(sp,Lmo),e(sp,BP),e(BP,xmo),e(sp,$mo),e(x,kmo),e(x,lp),e(lp,Pae),e(Pae,Smo),e(lp,Rmo),e(lp,PP),e(PP,Bmo),e(lp,Pmo),e(x,Imo),e(x,ip),e(ip,Iae),e(Iae,qmo),e(ip,Nmo),e(ip,IP),e(IP,jmo),e(ip,Dmo),e(x,Gmo),e(x,xs),e(xs,qae),e(qae,Omo),e(xs,Vmo),e(xs,qP),e(qP,Xmo),e(xs,zmo),e(xs,NP),e(NP,Qmo),e(xs,Wmo),e(x,Hmo),e(x,dp),e(dp,Nae),e(Nae,Umo),e(dp,Jmo),e(dp,jP),e(jP,Ymo),e(dp,Kmo),e(x,Zmo),e(x,cp),e(cp,jae),e(jae,ego),e(cp,ogo),e(cp,DP),e(DP,rgo),e(cp,tgo),e(x,ago),e(x,fp),e(fp,Dae),e(Dae,ngo),e(fp,sgo),e(fp,GP),e(GP,lgo),e(fp,igo),e(x,dgo),e(x,mp),e(mp,Gae),e(Gae,cgo),e(mp,fgo),e(mp,OP),e(OP,mgo),e(mp,ggo),e(x,hgo),e(x,gp),e(gp,Oae),e(Oae,pgo),e(gp,ugo),e(gp,VP),e(VP,_go),e(gp,bgo),e(x,vgo),e(x,hp),e(hp,Vae),e(Vae,Fgo),e(hp,Tgo),e(hp,XP),e(XP,Mgo),e(hp,Ego),e(x,Cgo),e(x,pp),e(pp,Xae),e(Xae,wgo),e(pp,Ago),e(pp,zP),e(zP,ygo),e(pp,Lgo),e(x,xgo),e(x,up),e(up,zae),e(zae,$go),e(up,kgo),e(up,QP),e(QP,Sgo),e(up,Rgo),e(x,Bgo),e(x,_p),e(_p,Qae),e(Qae,Pgo),e(_p,Igo),e(_p,WP),e(WP,qgo),e(_p,Ngo),e(x,jgo),e(x,bp),e(bp,Wae),e(Wae,Dgo),e(bp,Ggo),e(bp,HP),e(HP,Ogo),e(bp,Vgo),e(x,Xgo),e(x,vp),e(vp,Hae),e(Hae,zgo),e(vp,Qgo),e(vp,UP),e(UP,Wgo),e(vp,Hgo),e(x,Ugo),e(x,Fp),e(Fp,Uae),e(Uae,Jgo),e(Fp,Ygo),e(Fp,JP),e(JP,Kgo),e(Fp,Zgo),e(x,eho),e(x,Tp),e(Tp,Jae),e(Jae,oho),e(Tp,rho),e(Tp,YP),e(YP,tho),e(Tp,aho),e(x,nho),e(x,Mp),e(Mp,Yae),e(Yae,sho),e(Mp,lho),e(Mp,KP),e(KP,iho),e(Mp,dho),e(x,cho),e(x,Ep),e(Ep,Kae),e(Kae,fho),e(Ep,mho),e(Ep,ZP),e(ZP,gho),e(Ep,hho),e(x,pho),e(x,Cp),e(Cp,Zae),e(Zae,uho),e(Cp,_ho),e(Cp,eI),e(eI,bho),e(Cp,vho),e(x,Fho),e(x,wp),e(wp,ene),e(ene,Tho),e(wp,Mho),e(wp,oI),e(oI,Eho),e(wp,Cho),e(x,who),e(x,Ap),e(Ap,one),e(one,Aho),e(Ap,yho),e(Ap,rI),e(rI,Lho),e(Ap,xho),e(x,$ho),e(x,yp),e(yp,rne),e(rne,kho),e(yp,Sho),e(yp,tI),e(tI,Rho),e(yp,Bho),e(x,Pho),e(x,Lp),e(Lp,tne),e(tne,Iho),e(Lp,qho),e(Lp,aI),e(aI,Nho),e(Lp,jho),e(x,Dho),e(x,xp),e(xp,ane),e(ane,Gho),e(xp,Oho),e(xp,nI),e(nI,Vho),e(xp,Xho),e(x,zho),e(x,$p),e($p,nne),e(nne,Qho),e($p,Who),e($p,sI),e(sI,Hho),e($p,Uho),e(x,Jho),e(x,kp),e(kp,sne),e(sne,Yho),e(kp,Kho),e(kp,lI),e(lI,Zho),e(kp,epo),e(x,opo),e(x,Sp),e(Sp,lne),e(lne,rpo),e(Sp,tpo),e(Sp,iI),e(iI,apo),e(Sp,npo),e(x,spo),e(x,Rp),e(Rp,ine),e(ine,lpo),e(Rp,ipo),e(Rp,dI),e(dI,dpo),e(Rp,cpo),e(x,fpo),e(x,Bp),e(Bp,dne),e(dne,mpo),e(Bp,gpo),e(Bp,cI),e(cI,hpo),e(Bp,ppo),e(x,upo),e(x,Pp),e(Pp,cne),e(cne,_po),e(Pp,bpo),e(Pp,fI),e(fI,vpo),e(Pp,Fpo),e(x,Tpo),e(x,Ip),e(Ip,fne),e(fne,Mpo),e(Ip,Epo),e(Ip,mI),e(mI,Cpo),e(Ip,wpo),e(x,Apo),e(x,qp),e(qp,mne),e(mne,ypo),e(qp,Lpo),e(qp,gI),e(gI,xpo),e(qp,$po),e(x,kpo),e(x,Np),e(Np,gne),e(gne,Spo),e(Np,Rpo),e(Np,hI),e(hI,Bpo),e(Np,Ppo),e(x,Ipo),e(x,jp),e(jp,hne),e(hne,qpo),e(jp,Npo),e(jp,pI),e(pI,jpo),e(jp,Dpo),e(x,Gpo),e(x,Dp),e(Dp,pne),e(pne,Opo),e(Dp,Vpo),e(Dp,uI),e(uI,Xpo),e(Dp,zpo),e(x,Qpo),e(x,Gp),e(Gp,une),e(une,Wpo),e(Gp,Hpo),e(Gp,_I),e(_I,Upo),e(Gp,Jpo),e(x,Ypo),e(x,Op),e(Op,_ne),e(_ne,Kpo),e(Op,Zpo),e(Op,bI),e(bI,euo),e(Op,ouo),e(x,ruo),e(x,Vp),e(Vp,bne),e(bne,tuo),e(Vp,auo),e(Vp,vI),e(vI,nuo),e(Vp,suo),e(x,luo),e(x,Xp),e(Xp,vne),e(vne,iuo),e(Xp,duo),e(Xp,FI),e(FI,cuo),e(Xp,fuo),e(x,muo),e(x,zp),e(zp,Fne),e(Fne,guo),e(zp,huo),e(zp,TI),e(TI,puo),e(zp,uuo),e(x,_uo),e(x,Qp),e(Qp,Tne),e(Tne,buo),e(Qp,vuo),e(Qp,MI),e(MI,Fuo),e(Qp,Tuo),e(x,Muo),e(x,Wp),e(Wp,Mne),e(Mne,Euo),e(Wp,Cuo),e(Wp,EI),e(EI,wuo),e(Wp,Auo),e(x,yuo),e(x,Hp),e(Hp,Ene),e(Ene,Luo),e(Hp,xuo),e(Hp,CI),e(CI,$uo),e(Hp,kuo),e(x,Suo),e(x,Up),e(Up,Cne),e(Cne,Ruo),e(Up,Buo),e(Up,wI),e(wI,Puo),e(Up,Iuo),e(x,quo),e(x,Jp),e(Jp,wne),e(wne,Nuo),e(Jp,juo),e(Jp,AI),e(AI,Duo),e(Jp,Guo),e(x,Ouo),e(x,Yp),e(Yp,Ane),e(Ane,Vuo),e(Yp,Xuo),e(Yp,yI),e(yI,zuo),e(Yp,Quo),e(x,Wuo),e(x,Kp),e(Kp,yne),e(yne,Huo),e(Kp,Uuo),e(Kp,LI),e(LI,Juo),e(Kp,Yuo),e(x,Kuo),e(x,Zp),e(Zp,Lne),e(Lne,Zuo),e(Zp,e_o),e(Zp,xI),e(xI,o_o),e(Zp,r_o),e(x,t_o),e(x,eu),e(eu,xne),e(xne,a_o),e(eu,n_o),e(eu,$I),e($I,s_o),e(eu,l_o),e(x,i_o),e(x,ou),e(ou,$ne),e($ne,d_o),e(ou,c_o),e(ou,kI),e(kI,f_o),e(ou,m_o),e(x,g_o),e(x,ru),e(ru,kne),e(kne,h_o),e(ru,p_o),e(ru,SI),e(SI,u_o),e(ru,__o),e(x,b_o),e(x,tu),e(tu,Sne),e(Sne,v_o),e(tu,F_o),e(tu,RI),e(RI,T_o),e(tu,M_o),e(x,E_o),e(x,au),e(au,Rne),e(Rne,C_o),e(au,w_o),e(au,BI),e(BI,A_o),e(au,y_o),e(x,L_o),e(x,nu),e(nu,Bne),e(Bne,x_o),e(nu,$_o),e(nu,PI),e(PI,k_o),e(nu,S_o),e(x,R_o),e(x,su),e(su,Pne),e(Pne,B_o),e(su,P_o),e(su,II),e(II,I_o),e(su,q_o),e(x,N_o),e(x,lu),e(lu,Ine),e(Ine,j_o),e(lu,D_o),e(lu,qI),e(qI,G_o),e(lu,O_o),e(x,V_o),e(x,iu),e(iu,qne),e(qne,X_o),e(iu,z_o),e(iu,NI),e(NI,Q_o),e(iu,W_o),e(x,H_o),e(x,du),e(du,Nne),e(Nne,U_o),e(du,J_o),e(du,jI),e(jI,Y_o),e(du,K_o),e(x,Z_o),e(x,cu),e(cu,jne),e(jne,e1o),e(cu,o1o),e(cu,DI),e(DI,r1o),e(cu,t1o),e(x,a1o),e(x,fu),e(fu,Dne),e(Dne,n1o),e(fu,s1o),e(fu,GI),e(GI,l1o),e(fu,i1o),e(x,d1o),e(x,mu),e(mu,Gne),e(Gne,c1o),e(mu,f1o),e(mu,OI),e(OI,m1o),e(mu,g1o),e(x,h1o),e(x,gu),e(gu,One),e(One,p1o),e(gu,u1o),e(gu,VI),e(VI,_1o),e(gu,b1o),e(x,v1o),e(x,hu),e(hu,Vne),e(Vne,F1o),e(hu,T1o),e(hu,XI),e(XI,M1o),e(hu,E1o),e(x,C1o),e(x,pu),e(pu,Xne),e(Xne,w1o),e(pu,A1o),e(pu,zI),e(zI,y1o),e(pu,L1o),e(x,x1o),e(x,uu),e(uu,zne),e(zne,$1o),e(uu,k1o),e(uu,QI),e(QI,S1o),e(uu,R1o),e(x,B1o),e(x,_u),e(_u,Qne),e(Qne,P1o),e(_u,I1o),e(_u,WI),e(WI,q1o),e(_u,N1o),e(x,j1o),e(x,bu),e(bu,Wne),e(Wne,D1o),e(bu,G1o),e(bu,HI),e(HI,O1o),e(bu,V1o),e(He,X1o),e(He,vu),e(vu,z1o),e(vu,Hne),e(Hne,Q1o),e(vu,W1o),e(vu,Une),e(Une,H1o),e(He,U1o),M(Fu,He,null),b(f,qBe,_),b(f,vi,_),e(vi,Tu),e(Tu,Jne),M(aA,Jne,null),e(vi,J1o),e(vi,Yne),e(Yne,Y1o),b(f,NBe,_),b(f,xo,_),M(nA,xo,null),e(xo,K1o),e(xo,Fi),e(Fi,Z1o),e(Fi,UI),e(UI,e8o),e(Fi,o8o),e(Fi,JI),e(JI,r8o),e(Fi,t8o),e(xo,a8o),e(xo,sA),e(sA,n8o),e(sA,Kne),e(Kne,s8o),e(sA,l8o),e(xo,i8o),e(xo,et),M(lA,et,null),e(et,d8o),e(et,Zne),e(Zne,c8o),e(et,f8o),e(et,Ti),e(Ti,m8o),e(Ti,ese),e(ese,g8o),e(Ti,h8o),e(Ti,YI),e(YI,p8o),e(Ti,u8o),e(et,_8o),M(Mu,et,null),e(xo,b8o),e(xo,Ue),M(iA,Ue,null),e(Ue,v8o),e(Ue,ose),e(ose,F8o),e(Ue,T8o),e(Ue,Ca),e(Ca,M8o),e(Ca,rse),e(rse,E8o),e(Ca,C8o),e(Ca,tse),e(tse,w8o),e(Ca,A8o),e(Ca,ase),e(ase,y8o),e(Ca,L8o),e(Ue,x8o),e(Ue,G),e(G,Eu),e(Eu,nse),e(nse,$8o),e(Eu,k8o),e(Eu,KI),e(KI,S8o),e(Eu,R8o),e(G,B8o),e(G,Cu),e(Cu,sse),e(sse,P8o),e(Cu,I8o),e(Cu,ZI),e(ZI,q8o),e(Cu,N8o),e(G,j8o),e(G,wu),e(wu,lse),e(lse,D8o),e(wu,G8o),e(wu,eq),e(eq,O8o),e(wu,V8o),e(G,X8o),e(G,Au),e(Au,ise),e(ise,z8o),e(Au,Q8o),e(Au,oq),e(oq,W8o),e(Au,H8o),e(G,U8o),e(G,yu),e(yu,dse),e(dse,J8o),e(yu,Y8o),e(yu,rq),e(rq,K8o),e(yu,Z8o),e(G,ebo),e(G,Lu),e(Lu,cse),e(cse,obo),e(Lu,rbo),e(Lu,tq),e(tq,tbo),e(Lu,abo),e(G,nbo),e(G,xu),e(xu,fse),e(fse,sbo),e(xu,lbo),e(xu,aq),e(aq,ibo),e(xu,dbo),e(G,cbo),e(G,$u),e($u,mse),e(mse,fbo),e($u,mbo),e($u,nq),e(nq,gbo),e($u,hbo),e(G,pbo),e(G,ku),e(ku,gse),e(gse,ubo),e(ku,_bo),e(ku,sq),e(sq,bbo),e(ku,vbo),e(G,Fbo),e(G,Su),e(Su,hse),e(hse,Tbo),e(Su,Mbo),e(Su,lq),e(lq,Ebo),e(Su,Cbo),e(G,wbo),e(G,Ru),e(Ru,pse),e(pse,Abo),e(Ru,ybo),e(Ru,iq),e(iq,Lbo),e(Ru,xbo),e(G,$bo),e(G,Bu),e(Bu,use),e(use,kbo),e(Bu,Sbo),e(Bu,dq),e(dq,Rbo),e(Bu,Bbo),e(G,Pbo),e(G,Pu),e(Pu,_se),e(_se,Ibo),e(Pu,qbo),e(Pu,cq),e(cq,Nbo),e(Pu,jbo),e(G,Dbo),e(G,Iu),e(Iu,bse),e(bse,Gbo),e(Iu,Obo),e(Iu,fq),e(fq,Vbo),e(Iu,Xbo),e(G,zbo),e(G,qu),e(qu,vse),e(vse,Qbo),e(qu,Wbo),e(qu,mq),e(mq,Hbo),e(qu,Ubo),e(G,Jbo),e(G,Nu),e(Nu,Fse),e(Fse,Ybo),e(Nu,Kbo),e(Nu,gq),e(gq,Zbo),e(Nu,e2o),e(G,o2o),e(G,ju),e(ju,Tse),e(Tse,r2o),e(ju,t2o),e(ju,hq),e(hq,a2o),e(ju,n2o),e(G,s2o),e(G,Du),e(Du,Mse),e(Mse,l2o),e(Du,i2o),e(Du,pq),e(pq,d2o),e(Du,c2o),e(G,f2o),e(G,Gu),e(Gu,Ese),e(Ese,m2o),e(Gu,g2o),e(Gu,uq),e(uq,h2o),e(Gu,p2o),e(G,u2o),e(G,Ou),e(Ou,Cse),e(Cse,_2o),e(Ou,b2o),e(Ou,_q),e(_q,v2o),e(Ou,F2o),e(G,T2o),e(G,Vu),e(Vu,wse),e(wse,M2o),e(Vu,E2o),e(Vu,bq),e(bq,C2o),e(Vu,w2o),e(G,A2o),e(G,Xu),e(Xu,Ase),e(Ase,y2o),e(Xu,L2o),e(Xu,vq),e(vq,x2o),e(Xu,$2o),e(G,k2o),e(G,zu),e(zu,yse),e(yse,S2o),e(zu,R2o),e(zu,Fq),e(Fq,B2o),e(zu,P2o),e(G,I2o),e(G,Qu),e(Qu,Lse),e(Lse,q2o),e(Qu,N2o),e(Qu,Tq),e(Tq,j2o),e(Qu,D2o),e(G,G2o),e(G,Wu),e(Wu,xse),e(xse,O2o),e(Wu,V2o),e(Wu,Mq),e(Mq,X2o),e(Wu,z2o),e(G,Q2o),e(G,Hu),e(Hu,$se),e($se,W2o),e(Hu,H2o),e(Hu,Eq),e(Eq,U2o),e(Hu,J2o),e(G,Y2o),e(G,Uu),e(Uu,kse),e(kse,K2o),e(Uu,Z2o),e(Uu,Cq),e(Cq,evo),e(Uu,ovo),e(G,rvo),e(G,Ju),e(Ju,Sse),e(Sse,tvo),e(Ju,avo),e(Ju,wq),e(wq,nvo),e(Ju,svo),e(G,lvo),e(G,Yu),e(Yu,Rse),e(Rse,ivo),e(Yu,dvo),e(Yu,Aq),e(Aq,cvo),e(Yu,fvo),e(G,mvo),e(G,Ku),e(Ku,Bse),e(Bse,gvo),e(Ku,hvo),e(Ku,yq),e(yq,pvo),e(Ku,uvo),e(G,_vo),e(G,Zu),e(Zu,Pse),e(Pse,bvo),e(Zu,vvo),e(Zu,Lq),e(Lq,Fvo),e(Zu,Tvo),e(G,Mvo),e(G,e_),e(e_,Ise),e(Ise,Evo),e(e_,Cvo),e(e_,xq),e(xq,wvo),e(e_,Avo),e(G,yvo),e(G,o_),e(o_,qse),e(qse,Lvo),e(o_,xvo),e(o_,$q),e($q,$vo),e(o_,kvo),e(G,Svo),e(G,r_),e(r_,Nse),e(Nse,Rvo),e(r_,Bvo),e(r_,kq),e(kq,Pvo),e(r_,Ivo),e(G,qvo),e(G,t_),e(t_,jse),e(jse,Nvo),e(t_,jvo),e(t_,Sq),e(Sq,Dvo),e(t_,Gvo),e(G,Ovo),e(G,a_),e(a_,Dse),e(Dse,Vvo),e(a_,Xvo),e(a_,Rq),e(Rq,zvo),e(a_,Qvo),e(G,Wvo),e(G,n_),e(n_,Gse),e(Gse,Hvo),e(n_,Uvo),e(n_,Bq),e(Bq,Jvo),e(n_,Yvo),e(G,Kvo),e(G,s_),e(s_,Ose),e(Ose,Zvo),e(s_,eFo),e(s_,Pq),e(Pq,oFo),e(s_,rFo),e(G,tFo),e(G,l_),e(l_,Vse),e(Vse,aFo),e(l_,nFo),e(l_,Iq),e(Iq,sFo),e(l_,lFo),e(Ue,iFo),e(Ue,i_),e(i_,dFo),e(i_,Xse),e(Xse,cFo),e(i_,fFo),e(i_,zse),e(zse,mFo),e(Ue,gFo),M(d_,Ue,null),b(f,jBe,_),b(f,Mi,_),e(Mi,c_),e(c_,Qse),M(dA,Qse,null),e(Mi,hFo),e(Mi,Wse),e(Wse,pFo),b(f,DBe,_),b(f,$o,_),M(cA,$o,null),e($o,uFo),e($o,Ei),e(Ei,_Fo),e(Ei,qq),e(qq,bFo),e(Ei,vFo),e(Ei,Nq),e(Nq,FFo),e(Ei,TFo),e($o,MFo),e($o,fA),e(fA,EFo),e(fA,Hse),e(Hse,CFo),e(fA,wFo),e($o,AFo),e($o,ot),M(mA,ot,null),e(ot,yFo),e(ot,Use),e(Use,LFo),e(ot,xFo),e(ot,Ci),e(Ci,$Fo),e(Ci,Jse),e(Jse,kFo),e(Ci,SFo),e(Ci,jq),e(jq,RFo),e(Ci,BFo),e(ot,PFo),M(f_,ot,null),e($o,IFo),e($o,Je),M(gA,Je,null),e(Je,qFo),e(Je,Yse),e(Yse,NFo),e(Je,jFo),e(Je,wa),e(wa,DFo),e(wa,Kse),e(Kse,GFo),e(wa,OFo),e(wa,Zse),e(Zse,VFo),e(wa,XFo),e(wa,ele),e(ele,zFo),e(wa,QFo),e(Je,WFo),e(Je,z),e(z,m_),e(m_,ole),e(ole,HFo),e(m_,UFo),e(m_,Dq),e(Dq,JFo),e(m_,YFo),e(z,KFo),e(z,g_),e(g_,rle),e(rle,ZFo),e(g_,e6o),e(g_,Gq),e(Gq,o6o),e(g_,r6o),e(z,t6o),e(z,h_),e(h_,tle),e(tle,a6o),e(h_,n6o),e(h_,Oq),e(Oq,s6o),e(h_,l6o),e(z,i6o),e(z,p_),e(p_,ale),e(ale,d6o),e(p_,c6o),e(p_,Vq),e(Vq,f6o),e(p_,m6o),e(z,g6o),e(z,u_),e(u_,nle),e(nle,h6o),e(u_,p6o),e(u_,Xq),e(Xq,u6o),e(u_,_6o),e(z,b6o),e(z,__),e(__,sle),e(sle,v6o),e(__,F6o),e(__,zq),e(zq,T6o),e(__,M6o),e(z,E6o),e(z,b_),e(b_,lle),e(lle,C6o),e(b_,w6o),e(b_,Qq),e(Qq,A6o),e(b_,y6o),e(z,L6o),e(z,v_),e(v_,ile),e(ile,x6o),e(v_,$6o),e(v_,Wq),e(Wq,k6o),e(v_,S6o),e(z,R6o),e(z,F_),e(F_,dle),e(dle,B6o),e(F_,P6o),e(F_,Hq),e(Hq,I6o),e(F_,q6o),e(z,N6o),e(z,T_),e(T_,cle),e(cle,j6o),e(T_,D6o),e(T_,Uq),e(Uq,G6o),e(T_,O6o),e(z,V6o),e(z,M_),e(M_,fle),e(fle,X6o),e(M_,z6o),e(M_,Jq),e(Jq,Q6o),e(M_,W6o),e(z,H6o),e(z,E_),e(E_,mle),e(mle,U6o),e(E_,J6o),e(E_,Yq),e(Yq,Y6o),e(E_,K6o),e(z,Z6o),e(z,C_),e(C_,gle),e(gle,eTo),e(C_,oTo),e(C_,Kq),e(Kq,rTo),e(C_,tTo),e(z,aTo),e(z,w_),e(w_,hle),e(hle,nTo),e(w_,sTo),e(w_,Zq),e(Zq,lTo),e(w_,iTo),e(z,dTo),e(z,A_),e(A_,ple),e(ple,cTo),e(A_,fTo),e(A_,eN),e(eN,mTo),e(A_,gTo),e(z,hTo),e(z,y_),e(y_,ule),e(ule,pTo),e(y_,uTo),e(y_,oN),e(oN,_To),e(y_,bTo),e(z,vTo),e(z,L_),e(L_,_le),e(_le,FTo),e(L_,TTo),e(L_,rN),e(rN,MTo),e(L_,ETo),e(z,CTo),e(z,x_),e(x_,ble),e(ble,wTo),e(x_,ATo),e(x_,tN),e(tN,yTo),e(x_,LTo),e(z,xTo),e(z,$_),e($_,vle),e(vle,$To),e($_,kTo),e($_,aN),e(aN,STo),e($_,RTo),e(z,BTo),e(z,k_),e(k_,Fle),e(Fle,PTo),e(k_,ITo),e(k_,nN),e(nN,qTo),e(k_,NTo),e(z,jTo),e(z,S_),e(S_,Tle),e(Tle,DTo),e(S_,GTo),e(S_,sN),e(sN,OTo),e(S_,VTo),e(z,XTo),e(z,R_),e(R_,Mle),e(Mle,zTo),e(R_,QTo),e(R_,lN),e(lN,WTo),e(R_,HTo),e(z,UTo),e(z,B_),e(B_,Ele),e(Ele,JTo),e(B_,YTo),e(B_,iN),e(iN,KTo),e(B_,ZTo),e(z,e9o),e(z,P_),e(P_,Cle),e(Cle,o9o),e(P_,r9o),e(P_,dN),e(dN,t9o),e(P_,a9o),e(z,n9o),e(z,I_),e(I_,wle),e(wle,s9o),e(I_,l9o),e(I_,cN),e(cN,i9o),e(I_,d9o),e(z,c9o),e(z,q_),e(q_,Ale),e(Ale,f9o),e(q_,m9o),e(q_,fN),e(fN,g9o),e(q_,h9o),e(z,p9o),e(z,N_),e(N_,yle),e(yle,u9o),e(N_,_9o),e(N_,mN),e(mN,b9o),e(N_,v9o),e(z,F9o),e(z,j_),e(j_,Lle),e(Lle,T9o),e(j_,M9o),e(j_,gN),e(gN,E9o),e(j_,C9o),e(z,w9o),e(z,D_),e(D_,xle),e(xle,A9o),e(D_,y9o),e(D_,hN),e(hN,L9o),e(D_,x9o),e(z,$9o),e(z,G_),e(G_,$le),e($le,k9o),e(G_,S9o),e(G_,pN),e(pN,R9o),e(G_,B9o),e(z,P9o),e(z,O_),e(O_,kle),e(kle,I9o),e(O_,q9o),e(O_,uN),e(uN,N9o),e(O_,j9o),e(z,D9o),e(z,V_),e(V_,Sle),e(Sle,G9o),e(V_,O9o),e(V_,_N),e(_N,V9o),e(V_,X9o),e(z,z9o),e(z,X_),e(X_,Rle),e(Rle,Q9o),e(X_,W9o),e(X_,bN),e(bN,H9o),e(X_,U9o),e(z,J9o),e(z,z_),e(z_,Ble),e(Ble,Y9o),e(z_,K9o),e(z_,vN),e(vN,Z9o),e(z_,eMo),e(z,oMo),e(z,Q_),e(Q_,Ple),e(Ple,rMo),e(Q_,tMo),e(Q_,FN),e(FN,aMo),e(Q_,nMo),e(Je,sMo),e(Je,W_),e(W_,lMo),e(W_,Ile),e(Ile,iMo),e(W_,dMo),e(W_,qle),e(qle,cMo),e(Je,fMo),M(H_,Je,null),b(f,GBe,_),b(f,wi,_),e(wi,U_),e(U_,Nle),M(hA,Nle,null),e(wi,mMo),e(wi,jle),e(jle,gMo),b(f,OBe,_),b(f,ko,_),M(pA,ko,null),e(ko,hMo),e(ko,Ai),e(Ai,pMo),e(Ai,TN),e(TN,uMo),e(Ai,_Mo),e(Ai,MN),e(MN,bMo),e(Ai,vMo),e(ko,FMo),e(ko,uA),e(uA,TMo),e(uA,Dle),e(Dle,MMo),e(uA,EMo),e(ko,CMo),e(ko,rt),M(_A,rt,null),e(rt,wMo),e(rt,Gle),e(Gle,AMo),e(rt,yMo),e(rt,yi),e(yi,LMo),e(yi,Ole),e(Ole,xMo),e(yi,$Mo),e(yi,EN),e(EN,kMo),e(yi,SMo),e(rt,RMo),M(J_,rt,null),e(ko,BMo),e(ko,Ye),M(bA,Ye,null),e(Ye,PMo),e(Ye,Vle),e(Vle,IMo),e(Ye,qMo),e(Ye,Aa),e(Aa,NMo),e(Aa,Xle),e(Xle,jMo),e(Aa,DMo),e(Aa,zle),e(zle,GMo),e(Aa,OMo),e(Aa,Qle),e(Qle,VMo),e(Aa,XMo),e(Ye,zMo),e(Ye,Q),e(Q,Y_),e(Y_,Wle),e(Wle,QMo),e(Y_,WMo),e(Y_,CN),e(CN,HMo),e(Y_,UMo),e(Q,JMo),e(Q,K_),e(K_,Hle),e(Hle,YMo),e(K_,KMo),e(K_,wN),e(wN,ZMo),e(K_,e4o),e(Q,o4o),e(Q,Z_),e(Z_,Ule),e(Ule,r4o),e(Z_,t4o),e(Z_,AN),e(AN,a4o),e(Z_,n4o),e(Q,s4o),e(Q,e1),e(e1,Jle),e(Jle,l4o),e(e1,i4o),e(e1,yN),e(yN,d4o),e(e1,c4o),e(Q,f4o),e(Q,o1),e(o1,Yle),e(Yle,m4o),e(o1,g4o),e(o1,LN),e(LN,h4o),e(o1,p4o),e(Q,u4o),e(Q,r1),e(r1,Kle),e(Kle,_4o),e(r1,b4o),e(r1,xN),e(xN,v4o),e(r1,F4o),e(Q,T4o),e(Q,t1),e(t1,Zle),e(Zle,M4o),e(t1,E4o),e(t1,$N),e($N,C4o),e(t1,w4o),e(Q,A4o),e(Q,a1),e(a1,eie),e(eie,y4o),e(a1,L4o),e(a1,kN),e(kN,x4o),e(a1,$4o),e(Q,k4o),e(Q,n1),e(n1,oie),e(oie,S4o),e(n1,R4o),e(n1,SN),e(SN,B4o),e(n1,P4o),e(Q,I4o),e(Q,s1),e(s1,rie),e(rie,q4o),e(s1,N4o),e(s1,RN),e(RN,j4o),e(s1,D4o),e(Q,G4o),e(Q,l1),e(l1,tie),e(tie,O4o),e(l1,V4o),e(l1,BN),e(BN,X4o),e(l1,z4o),e(Q,Q4o),e(Q,i1),e(i1,aie),e(aie,W4o),e(i1,H4o),e(i1,PN),e(PN,U4o),e(i1,J4o),e(Q,Y4o),e(Q,d1),e(d1,nie),e(nie,K4o),e(d1,Z4o),e(d1,IN),e(IN,eEo),e(d1,oEo),e(Q,rEo),e(Q,c1),e(c1,sie),e(sie,tEo),e(c1,aEo),e(c1,qN),e(qN,nEo),e(c1,sEo),e(Q,lEo),e(Q,f1),e(f1,lie),e(lie,iEo),e(f1,dEo),e(f1,NN),e(NN,cEo),e(f1,fEo),e(Q,mEo),e(Q,m1),e(m1,iie),e(iie,gEo),e(m1,hEo),e(m1,jN),e(jN,pEo),e(m1,uEo),e(Q,_Eo),e(Q,g1),e(g1,die),e(die,bEo),e(g1,vEo),e(g1,DN),e(DN,FEo),e(g1,TEo),e(Q,MEo),e(Q,h1),e(h1,cie),e(cie,EEo),e(h1,CEo),e(h1,GN),e(GN,wEo),e(h1,AEo),e(Q,yEo),e(Q,p1),e(p1,fie),e(fie,LEo),e(p1,xEo),e(p1,ON),e(ON,$Eo),e(p1,kEo),e(Q,SEo),e(Q,u1),e(u1,mie),e(mie,REo),e(u1,BEo),e(u1,VN),e(VN,PEo),e(u1,IEo),e(Q,qEo),e(Q,_1),e(_1,gie),e(gie,NEo),e(_1,jEo),e(_1,XN),e(XN,DEo),e(_1,GEo),e(Q,OEo),e(Q,b1),e(b1,hie),e(hie,VEo),e(b1,XEo),e(b1,zN),e(zN,zEo),e(b1,QEo),e(Q,WEo),e(Q,v1),e(v1,pie),e(pie,HEo),e(v1,UEo),e(v1,QN),e(QN,JEo),e(v1,YEo),e(Q,KEo),e(Q,F1),e(F1,uie),e(uie,ZEo),e(F1,e5o),e(F1,WN),e(WN,o5o),e(F1,r5o),e(Q,t5o),e(Q,T1),e(T1,_ie),e(_ie,a5o),e(T1,n5o),e(T1,HN),e(HN,s5o),e(T1,l5o),e(Q,i5o),e(Q,M1),e(M1,bie),e(bie,d5o),e(M1,c5o),e(M1,UN),e(UN,f5o),e(M1,m5o),e(Q,g5o),e(Q,E1),e(E1,vie),e(vie,h5o),e(E1,p5o),e(E1,JN),e(JN,u5o),e(E1,_5o),e(Q,b5o),e(Q,C1),e(C1,Fie),e(Fie,v5o),e(C1,F5o),e(C1,YN),e(YN,T5o),e(C1,M5o),e(Q,E5o),e(Q,w1),e(w1,Tie),e(Tie,C5o),e(w1,w5o),e(w1,KN),e(KN,A5o),e(w1,y5o),e(Q,L5o),e(Q,A1),e(A1,Mie),e(Mie,x5o),e(A1,$5o),e(A1,ZN),e(ZN,k5o),e(A1,S5o),e(Q,R5o),e(Q,y1),e(y1,Eie),e(Eie,B5o),e(y1,P5o),e(y1,Cie),e(Cie,I5o),e(y1,q5o),e(Q,N5o),e(Q,L1),e(L1,wie),e(wie,j5o),e(L1,D5o),e(L1,ej),e(ej,G5o),e(L1,O5o),e(Q,V5o),e(Q,x1),e(x1,Aie),e(Aie,X5o),e(x1,z5o),e(x1,oj),e(oj,Q5o),e(x1,W5o),e(Q,H5o),e(Q,$1),e($1,yie),e(yie,U5o),e($1,J5o),e($1,rj),e(rj,Y5o),e($1,K5o),e(Q,Z5o),e(Q,k1),e(k1,Lie),e(Lie,eCo),e(k1,oCo),e(k1,tj),e(tj,rCo),e(k1,tCo),e(Ye,aCo),e(Ye,S1),e(S1,nCo),e(S1,xie),e(xie,sCo),e(S1,lCo),e(S1,$ie),e($ie,iCo),e(Ye,dCo),M(R1,Ye,null),b(f,VBe,_),b(f,Li,_),e(Li,B1),e(B1,kie),M(vA,kie,null),e(Li,cCo),e(Li,Sie),e(Sie,fCo),b(f,XBe,_),b(f,So,_),M(FA,So,null),e(So,mCo),e(So,xi),e(xi,gCo),e(xi,aj),e(aj,hCo),e(xi,pCo),e(xi,nj),e(nj,uCo),e(xi,_Co),e(So,bCo),e(So,TA),e(TA,vCo),e(TA,Rie),e(Rie,FCo),e(TA,TCo),e(So,MCo),e(So,tt),M(MA,tt,null),e(tt,ECo),e(tt,Bie),e(Bie,CCo),e(tt,wCo),e(tt,$i),e($i,ACo),e($i,Pie),e(Pie,yCo),e($i,LCo),e($i,sj),e(sj,xCo),e($i,$Co),e(tt,kCo),M(P1,tt,null),e(So,SCo),e(So,Ke),M(EA,Ke,null),e(Ke,RCo),e(Ke,Iie),e(Iie,BCo),e(Ke,PCo),e(Ke,ya),e(ya,ICo),e(ya,qie),e(qie,qCo),e(ya,NCo),e(ya,Nie),e(Nie,jCo),e(ya,DCo),e(ya,jie),e(jie,GCo),e(ya,OCo),e(Ke,VCo),e(Ke,he),e(he,I1),e(I1,Die),e(Die,XCo),e(I1,zCo),e(I1,lj),e(lj,QCo),e(I1,WCo),e(he,HCo),e(he,q1),e(q1,Gie),e(Gie,UCo),e(q1,JCo),e(q1,ij),e(ij,YCo),e(q1,KCo),e(he,ZCo),e(he,N1),e(N1,Oie),e(Oie,e3o),e(N1,o3o),e(N1,dj),e(dj,r3o),e(N1,t3o),e(he,a3o),e(he,j1),e(j1,Vie),e(Vie,n3o),e(j1,s3o),e(j1,cj),e(cj,l3o),e(j1,i3o),e(he,d3o),e(he,D1),e(D1,Xie),e(Xie,c3o),e(D1,f3o),e(D1,fj),e(fj,m3o),e(D1,g3o),e(he,h3o),e(he,G1),e(G1,zie),e(zie,p3o),e(G1,u3o),e(G1,mj),e(mj,_3o),e(G1,b3o),e(he,v3o),e(he,O1),e(O1,Qie),e(Qie,F3o),e(O1,T3o),e(O1,gj),e(gj,M3o),e(O1,E3o),e(he,C3o),e(he,V1),e(V1,Wie),e(Wie,w3o),e(V1,A3o),e(V1,hj),e(hj,y3o),e(V1,L3o),e(he,x3o),e(he,X1),e(X1,Hie),e(Hie,$3o),e(X1,k3o),e(X1,pj),e(pj,S3o),e(X1,R3o),e(he,B3o),e(he,z1),e(z1,Uie),e(Uie,P3o),e(z1,I3o),e(z1,uj),e(uj,q3o),e(z1,N3o),e(he,j3o),e(he,Q1),e(Q1,Jie),e(Jie,D3o),e(Q1,G3o),e(Q1,_j),e(_j,O3o),e(Q1,V3o),e(he,X3o),e(he,W1),e(W1,Yie),e(Yie,z3o),e(W1,Q3o),e(W1,bj),e(bj,W3o),e(W1,H3o),e(he,U3o),e(he,H1),e(H1,Kie),e(Kie,J3o),e(H1,Y3o),e(H1,vj),e(vj,K3o),e(H1,Z3o),e(he,ewo),e(he,U1),e(U1,Zie),e(Zie,owo),e(U1,rwo),e(U1,Fj),e(Fj,two),e(U1,awo),e(he,nwo),e(he,J1),e(J1,ede),e(ede,swo),e(J1,lwo),e(J1,Tj),e(Tj,iwo),e(J1,dwo),e(he,cwo),e(he,Y1),e(Y1,ode),e(ode,fwo),e(Y1,mwo),e(Y1,Mj),e(Mj,gwo),e(Y1,hwo),e(he,pwo),e(he,K1),e(K1,rde),e(rde,uwo),e(K1,_wo),e(K1,Ej),e(Ej,bwo),e(K1,vwo),e(Ke,Fwo),e(Ke,Z1),e(Z1,Two),e(Z1,tde),e(tde,Mwo),e(Z1,Ewo),e(Z1,ade),e(ade,Cwo),e(Ke,wwo),M(e8,Ke,null),b(f,zBe,_),b(f,ki,_),e(ki,o8),e(o8,nde),M(CA,nde,null),e(ki,Awo),e(ki,sde),e(sde,ywo),b(f,QBe,_),b(f,Ro,_),M(wA,Ro,null),e(Ro,Lwo),e(Ro,Si),e(Si,xwo),e(Si,Cj),e(Cj,$wo),e(Si,kwo),e(Si,wj),e(wj,Swo),e(Si,Rwo),e(Ro,Bwo),e(Ro,AA),e(AA,Pwo),e(AA,lde),e(lde,Iwo),e(AA,qwo),e(Ro,Nwo),e(Ro,at),M(yA,at,null),e(at,jwo),e(at,ide),e(ide,Dwo),e(at,Gwo),e(at,Ri),e(Ri,Owo),e(Ri,dde),e(dde,Vwo),e(Ri,Xwo),e(Ri,Aj),e(Aj,zwo),e(Ri,Qwo),e(at,Wwo),M(r8,at,null),e(Ro,Hwo),e(Ro,Ze),M(LA,Ze,null),e(Ze,Uwo),e(Ze,cde),e(cde,Jwo),e(Ze,Ywo),e(Ze,La),e(La,Kwo),e(La,fde),e(fde,Zwo),e(La,eAo),e(La,mde),e(mde,oAo),e(La,rAo),e(La,gde),e(gde,tAo),e(La,aAo),e(Ze,nAo),e(Ze,q),e(q,t8),e(t8,hde),e(hde,sAo),e(t8,lAo),e(t8,yj),e(yj,iAo),e(t8,dAo),e(q,cAo),e(q,a8),e(a8,pde),e(pde,fAo),e(a8,mAo),e(a8,Lj),e(Lj,gAo),e(a8,hAo),e(q,pAo),e(q,n8),e(n8,ude),e(ude,uAo),e(n8,_Ao),e(n8,xj),e(xj,bAo),e(n8,vAo),e(q,FAo),e(q,s8),e(s8,_de),e(_de,TAo),e(s8,MAo),e(s8,$j),e($j,EAo),e(s8,CAo),e(q,wAo),e(q,l8),e(l8,bde),e(bde,AAo),e(l8,yAo),e(l8,kj),e(kj,LAo),e(l8,xAo),e(q,$Ao),e(q,i8),e(i8,vde),e(vde,kAo),e(i8,SAo),e(i8,Sj),e(Sj,RAo),e(i8,BAo),e(q,PAo),e(q,d8),e(d8,Fde),e(Fde,IAo),e(d8,qAo),e(d8,Rj),e(Rj,NAo),e(d8,jAo),e(q,DAo),e(q,c8),e(c8,Tde),e(Tde,GAo),e(c8,OAo),e(c8,Bj),e(Bj,VAo),e(c8,XAo),e(q,zAo),e(q,f8),e(f8,Mde),e(Mde,QAo),e(f8,WAo),e(f8,Pj),e(Pj,HAo),e(f8,UAo),e(q,JAo),e(q,m8),e(m8,Ede),e(Ede,YAo),e(m8,KAo),e(m8,Ij),e(Ij,ZAo),e(m8,e0o),e(q,o0o),e(q,g8),e(g8,Cde),e(Cde,r0o),e(g8,t0o),e(g8,qj),e(qj,a0o),e(g8,n0o),e(q,s0o),e(q,h8),e(h8,wde),e(wde,l0o),e(h8,i0o),e(h8,Nj),e(Nj,d0o),e(h8,c0o),e(q,f0o),e(q,p8),e(p8,Ade),e(Ade,m0o),e(p8,g0o),e(p8,jj),e(jj,h0o),e(p8,p0o),e(q,u0o),e(q,u8),e(u8,yde),e(yde,_0o),e(u8,b0o),e(u8,Dj),e(Dj,v0o),e(u8,F0o),e(q,T0o),e(q,_8),e(_8,Lde),e(Lde,M0o),e(_8,E0o),e(_8,Gj),e(Gj,C0o),e(_8,w0o),e(q,A0o),e(q,b8),e(b8,xde),e(xde,y0o),e(b8,L0o),e(b8,Oj),e(Oj,x0o),e(b8,$0o),e(q,k0o),e(q,v8),e(v8,$de),e($de,S0o),e(v8,R0o),e(v8,Vj),e(Vj,B0o),e(v8,P0o),e(q,I0o),e(q,F8),e(F8,kde),e(kde,q0o),e(F8,N0o),e(F8,Xj),e(Xj,j0o),e(F8,D0o),e(q,G0o),e(q,T8),e(T8,Sde),e(Sde,O0o),e(T8,V0o),e(T8,zj),e(zj,X0o),e(T8,z0o),e(q,Q0o),e(q,M8),e(M8,Rde),e(Rde,W0o),e(M8,H0o),e(M8,Qj),e(Qj,U0o),e(M8,J0o),e(q,Y0o),e(q,E8),e(E8,Bde),e(Bde,K0o),e(E8,Z0o),e(E8,Wj),e(Wj,eyo),e(E8,oyo),e(q,ryo),e(q,C8),e(C8,Pde),e(Pde,tyo),e(C8,ayo),e(C8,Hj),e(Hj,nyo),e(C8,syo),e(q,lyo),e(q,w8),e(w8,Ide),e(Ide,iyo),e(w8,dyo),e(w8,Uj),e(Uj,cyo),e(w8,fyo),e(q,myo),e(q,A8),e(A8,qde),e(qde,gyo),e(A8,hyo),e(A8,Jj),e(Jj,pyo),e(A8,uyo),e(q,_yo),e(q,y8),e(y8,Nde),e(Nde,byo),e(y8,vyo),e(y8,Yj),e(Yj,Fyo),e(y8,Tyo),e(q,Myo),e(q,L8),e(L8,jde),e(jde,Eyo),e(L8,Cyo),e(L8,Kj),e(Kj,wyo),e(L8,Ayo),e(q,yyo),e(q,x8),e(x8,Dde),e(Dde,Lyo),e(x8,xyo),e(x8,Zj),e(Zj,$yo),e(x8,kyo),e(q,Syo),e(q,$8),e($8,Gde),e(Gde,Ryo),e($8,Byo),e($8,eD),e(eD,Pyo),e($8,Iyo),e(q,qyo),e(q,k8),e(k8,Ode),e(Ode,Nyo),e(k8,jyo),e(k8,oD),e(oD,Dyo),e(k8,Gyo),e(q,Oyo),e(q,S8),e(S8,Vde),e(Vde,Vyo),e(S8,Xyo),e(S8,rD),e(rD,zyo),e(S8,Qyo),e(q,Wyo),e(q,R8),e(R8,Xde),e(Xde,Hyo),e(R8,Uyo),e(R8,tD),e(tD,Jyo),e(R8,Yyo),e(q,Kyo),e(q,B8),e(B8,zde),e(zde,Zyo),e(B8,eLo),e(B8,aD),e(aD,oLo),e(B8,rLo),e(q,tLo),e(q,P8),e(P8,Qde),e(Qde,aLo),e(P8,nLo),e(P8,nD),e(nD,sLo),e(P8,lLo),e(q,iLo),e(q,I8),e(I8,Wde),e(Wde,dLo),e(I8,cLo),e(I8,sD),e(sD,fLo),e(I8,mLo),e(q,gLo),e(q,q8),e(q8,Hde),e(Hde,hLo),e(q8,pLo),e(q8,lD),e(lD,uLo),e(q8,_Lo),e(q,bLo),e(q,N8),e(N8,Ude),e(Ude,vLo),e(N8,FLo),e(N8,iD),e(iD,TLo),e(N8,MLo),e(q,ELo),e(q,j8),e(j8,Jde),e(Jde,CLo),e(j8,wLo),e(j8,dD),e(dD,ALo),e(j8,yLo),e(q,LLo),e(q,D8),e(D8,Yde),e(Yde,xLo),e(D8,$Lo),e(D8,cD),e(cD,kLo),e(D8,SLo),e(q,RLo),e(q,G8),e(G8,Kde),e(Kde,BLo),e(G8,PLo),e(G8,fD),e(fD,ILo),e(G8,qLo),e(q,NLo),e(q,O8),e(O8,Zde),e(Zde,jLo),e(O8,DLo),e(O8,mD),e(mD,GLo),e(O8,OLo),e(q,VLo),e(q,V8),e(V8,ece),e(ece,XLo),e(V8,zLo),e(V8,gD),e(gD,QLo),e(V8,WLo),e(q,HLo),e(q,X8),e(X8,oce),e(oce,ULo),e(X8,JLo),e(X8,hD),e(hD,YLo),e(X8,KLo),e(q,ZLo),e(q,z8),e(z8,rce),e(rce,e7o),e(z8,o7o),e(z8,pD),e(pD,r7o),e(z8,t7o),e(q,a7o),e(q,Q8),e(Q8,tce),e(tce,n7o),e(Q8,s7o),e(Q8,uD),e(uD,l7o),e(Q8,i7o),e(q,d7o),e(q,W8),e(W8,ace),e(ace,c7o),e(W8,f7o),e(W8,_D),e(_D,m7o),e(W8,g7o),e(q,h7o),e(q,H8),e(H8,nce),e(nce,p7o),e(H8,u7o),e(H8,bD),e(bD,_7o),e(H8,b7o),e(q,v7o),e(q,U8),e(U8,sce),e(sce,F7o),e(U8,T7o),e(U8,vD),e(vD,M7o),e(U8,E7o),e(Ze,C7o),e(Ze,J8),e(J8,w7o),e(J8,lce),e(lce,A7o),e(J8,y7o),e(J8,ice),e(ice,L7o),e(Ze,x7o),M(Y8,Ze,null),b(f,WBe,_),b(f,Bi,_),e(Bi,K8),e(K8,dce),M(xA,dce,null),e(Bi,$7o),e(Bi,cce),e(cce,k7o),b(f,HBe,_),b(f,Bo,_),M($A,Bo,null),e(Bo,S7o),e(Bo,Pi),e(Pi,R7o),e(Pi,FD),e(FD,B7o),e(Pi,P7o),e(Pi,TD),e(TD,I7o),e(Pi,q7o),e(Bo,N7o),e(Bo,kA),e(kA,j7o),e(kA,fce),e(fce,D7o),e(kA,G7o),e(Bo,O7o),e(Bo,nt),M(SA,nt,null),e(nt,V7o),e(nt,mce),e(mce,X7o),e(nt,z7o),e(nt,Ii),e(Ii,Q7o),e(Ii,gce),e(gce,W7o),e(Ii,H7o),e(Ii,MD),e(MD,U7o),e(Ii,J7o),e(nt,Y7o),M(Z8,nt,null),e(Bo,K7o),e(Bo,eo),M(RA,eo,null),e(eo,Z7o),e(eo,hce),e(hce,exo),e(eo,oxo),e(eo,xa),e(xa,rxo),e(xa,pce),e(pce,txo),e(xa,axo),e(xa,uce),e(uce,nxo),e(xa,sxo),e(xa,_ce),e(_ce,lxo),e(xa,ixo),e(eo,dxo),e(eo,Y),e(Y,eb),e(eb,bce),e(bce,cxo),e(eb,fxo),e(eb,ED),e(ED,mxo),e(eb,gxo),e(Y,hxo),e(Y,ob),e(ob,vce),e(vce,pxo),e(ob,uxo),e(ob,CD),e(CD,_xo),e(ob,bxo),e(Y,vxo),e(Y,rb),e(rb,Fce),e(Fce,Fxo),e(rb,Txo),e(rb,wD),e(wD,Mxo),e(rb,Exo),e(Y,Cxo),e(Y,tb),e(tb,Tce),e(Tce,wxo),e(tb,Axo),e(tb,AD),e(AD,yxo),e(tb,Lxo),e(Y,xxo),e(Y,ab),e(ab,Mce),e(Mce,$xo),e(ab,kxo),e(ab,yD),e(yD,Sxo),e(ab,Rxo),e(Y,Bxo),e(Y,nb),e(nb,Ece),e(Ece,Pxo),e(nb,Ixo),e(nb,LD),e(LD,qxo),e(nb,Nxo),e(Y,jxo),e(Y,sb),e(sb,Cce),e(Cce,Dxo),e(sb,Gxo),e(sb,xD),e(xD,Oxo),e(sb,Vxo),e(Y,Xxo),e(Y,lb),e(lb,wce),e(wce,zxo),e(lb,Qxo),e(lb,$D),e($D,Wxo),e(lb,Hxo),e(Y,Uxo),e(Y,ib),e(ib,Ace),e(Ace,Jxo),e(ib,Yxo),e(ib,kD),e(kD,Kxo),e(ib,Zxo),e(Y,e$o),e(Y,db),e(db,yce),e(yce,o$o),e(db,r$o),e(db,SD),e(SD,t$o),e(db,a$o),e(Y,n$o),e(Y,cb),e(cb,Lce),e(Lce,s$o),e(cb,l$o),e(cb,RD),e(RD,i$o),e(cb,d$o),e(Y,c$o),e(Y,fb),e(fb,xce),e(xce,f$o),e(fb,m$o),e(fb,BD),e(BD,g$o),e(fb,h$o),e(Y,p$o),e(Y,mb),e(mb,$ce),e($ce,u$o),e(mb,_$o),e(mb,PD),e(PD,b$o),e(mb,v$o),e(Y,F$o),e(Y,gb),e(gb,kce),e(kce,T$o),e(gb,M$o),e(gb,ID),e(ID,E$o),e(gb,C$o),e(Y,w$o),e(Y,hb),e(hb,Sce),e(Sce,A$o),e(hb,y$o),e(hb,qD),e(qD,L$o),e(hb,x$o),e(Y,$$o),e(Y,pb),e(pb,Rce),e(Rce,k$o),e(pb,S$o),e(pb,ND),e(ND,R$o),e(pb,B$o),e(Y,P$o),e(Y,ub),e(ub,Bce),e(Bce,I$o),e(ub,q$o),e(ub,jD),e(jD,N$o),e(ub,j$o),e(Y,D$o),e(Y,_b),e(_b,Pce),e(Pce,G$o),e(_b,O$o),e(_b,DD),e(DD,V$o),e(_b,X$o),e(Y,z$o),e(Y,bb),e(bb,Ice),e(Ice,Q$o),e(bb,W$o),e(bb,GD),e(GD,H$o),e(bb,U$o),e(Y,J$o),e(Y,vb),e(vb,qce),e(qce,Y$o),e(vb,K$o),e(vb,OD),e(OD,Z$o),e(vb,eko),e(Y,oko),e(Y,Fb),e(Fb,Nce),e(Nce,rko),e(Fb,tko),e(Fb,VD),e(VD,ako),e(Fb,nko),e(Y,sko),e(Y,Tb),e(Tb,jce),e(jce,lko),e(Tb,iko),e(Tb,XD),e(XD,dko),e(Tb,cko),e(Y,fko),e(Y,Mb),e(Mb,Dce),e(Dce,mko),e(Mb,gko),e(Mb,zD),e(zD,hko),e(Mb,pko),e(Y,uko),e(Y,Eb),e(Eb,Gce),e(Gce,_ko),e(Eb,bko),e(Eb,QD),e(QD,vko),e(Eb,Fko),e(Y,Tko),e(Y,Cb),e(Cb,Oce),e(Oce,Mko),e(Cb,Eko),e(Cb,WD),e(WD,Cko),e(Cb,wko),e(Y,Ako),e(Y,wb),e(wb,Vce),e(Vce,yko),e(wb,Lko),e(wb,HD),e(HD,xko),e(wb,$ko),e(Y,kko),e(Y,Ab),e(Ab,Xce),e(Xce,Sko),e(Ab,Rko),e(Ab,UD),e(UD,Bko),e(Ab,Pko),e(Y,Iko),e(Y,yb),e(yb,zce),e(zce,qko),e(yb,Nko),e(yb,JD),e(JD,jko),e(yb,Dko),e(eo,Gko),e(eo,Lb),e(Lb,Oko),e(Lb,Qce),e(Qce,Vko),e(Lb,Xko),e(Lb,Wce),e(Wce,zko),e(eo,Qko),M(xb,eo,null),b(f,UBe,_),b(f,qi,_),e(qi,$b),e($b,Hce),M(BA,Hce,null),e(qi,Wko),e(qi,Uce),e(Uce,Hko),b(f,JBe,_),b(f,Po,_),M(PA,Po,null),e(Po,Uko),e(Po,Ni),e(Ni,Jko),e(Ni,YD),e(YD,Yko),e(Ni,Kko),e(Ni,KD),e(KD,Zko),e(Ni,eSo),e(Po,oSo),e(Po,IA),e(IA,rSo),e(IA,Jce),e(Jce,tSo),e(IA,aSo),e(Po,nSo),e(Po,st),M(qA,st,null),e(st,sSo),e(st,Yce),e(Yce,lSo),e(st,iSo),e(st,ji),e(ji,dSo),e(ji,Kce),e(Kce,cSo),e(ji,fSo),e(ji,ZD),e(ZD,mSo),e(ji,gSo),e(st,hSo),M(kb,st,null),e(Po,pSo),e(Po,oo),M(NA,oo,null),e(oo,uSo),e(oo,Zce),e(Zce,_So),e(oo,bSo),e(oo,$a),e($a,vSo),e($a,efe),e(efe,FSo),e($a,TSo),e($a,ofe),e(ofe,MSo),e($a,ESo),e($a,rfe),e(rfe,CSo),e($a,wSo),e(oo,ASo),e(oo,Ur),e(Ur,Sb),e(Sb,tfe),e(tfe,ySo),e(Sb,LSo),e(Sb,eG),e(eG,xSo),e(Sb,$So),e(Ur,kSo),e(Ur,Rb),e(Rb,afe),e(afe,SSo),e(Rb,RSo),e(Rb,oG),e(oG,BSo),e(Rb,PSo),e(Ur,ISo),e(Ur,Bb),e(Bb,nfe),e(nfe,qSo),e(Bb,NSo),e(Bb,rG),e(rG,jSo),e(Bb,DSo),e(Ur,GSo),e(Ur,Pb),e(Pb,sfe),e(sfe,OSo),e(Pb,VSo),e(Pb,tG),e(tG,XSo),e(Pb,zSo),e(Ur,QSo),e(Ur,Ib),e(Ib,lfe),e(lfe,WSo),e(Ib,HSo),e(Ib,aG),e(aG,USo),e(Ib,JSo),e(oo,YSo),e(oo,qb),e(qb,KSo),e(qb,ife),e(ife,ZSo),e(qb,eRo),e(qb,dfe),e(dfe,oRo),e(oo,rRo),M(Nb,oo,null),b(f,YBe,_),b(f,Di,_),e(Di,jb),e(jb,cfe),M(jA,cfe,null),e(Di,tRo),e(Di,ffe),e(ffe,aRo),b(f,KBe,_),b(f,Io,_),M(DA,Io,null),e(Io,nRo),e(Io,Gi),e(Gi,sRo),e(Gi,nG),e(nG,lRo),e(Gi,iRo),e(Gi,sG),e(sG,dRo),e(Gi,cRo),e(Io,fRo),e(Io,GA),e(GA,mRo),e(GA,mfe),e(mfe,gRo),e(GA,hRo),e(Io,pRo),e(Io,lt),M(OA,lt,null),e(lt,uRo),e(lt,gfe),e(gfe,_Ro),e(lt,bRo),e(lt,Oi),e(Oi,vRo),e(Oi,hfe),e(hfe,FRo),e(Oi,TRo),e(Oi,lG),e(lG,MRo),e(Oi,ERo),e(lt,CRo),M(Db,lt,null),e(Io,wRo),e(Io,ro),M(VA,ro,null),e(ro,ARo),e(ro,pfe),e(pfe,yRo),e(ro,LRo),e(ro,ka),e(ka,xRo),e(ka,ufe),e(ufe,$Ro),e(ka,kRo),e(ka,_fe),e(_fe,SRo),e(ka,RRo),e(ka,bfe),e(bfe,BRo),e(ka,PRo),e(ro,IRo),e(ro,U),e(U,Gb),e(Gb,vfe),e(vfe,qRo),e(Gb,NRo),e(Gb,iG),e(iG,jRo),e(Gb,DRo),e(U,GRo),e(U,Ob),e(Ob,Ffe),e(Ffe,ORo),e(Ob,VRo),e(Ob,dG),e(dG,XRo),e(Ob,zRo),e(U,QRo),e(U,Vb),e(Vb,Tfe),e(Tfe,WRo),e(Vb,HRo),e(Vb,cG),e(cG,URo),e(Vb,JRo),e(U,YRo),e(U,Xb),e(Xb,Mfe),e(Mfe,KRo),e(Xb,ZRo),e(Xb,fG),e(fG,eBo),e(Xb,oBo),e(U,rBo),e(U,zb),e(zb,Efe),e(Efe,tBo),e(zb,aBo),e(zb,mG),e(mG,nBo),e(zb,sBo),e(U,lBo),e(U,Qb),e(Qb,Cfe),e(Cfe,iBo),e(Qb,dBo),e(Qb,gG),e(gG,cBo),e(Qb,fBo),e(U,mBo),e(U,Wb),e(Wb,wfe),e(wfe,gBo),e(Wb,hBo),e(Wb,hG),e(hG,pBo),e(Wb,uBo),e(U,_Bo),e(U,Hb),e(Hb,Afe),e(Afe,bBo),e(Hb,vBo),e(Hb,pG),e(pG,FBo),e(Hb,TBo),e(U,MBo),e(U,Ub),e(Ub,yfe),e(yfe,EBo),e(Ub,CBo),e(Ub,uG),e(uG,wBo),e(Ub,ABo),e(U,yBo),e(U,Jb),e(Jb,Lfe),e(Lfe,LBo),e(Jb,xBo),e(Jb,_G),e(_G,$Bo),e(Jb,kBo),e(U,SBo),e(U,Yb),e(Yb,xfe),e(xfe,RBo),e(Yb,BBo),e(Yb,bG),e(bG,PBo),e(Yb,IBo),e(U,qBo),e(U,Kb),e(Kb,$fe),e($fe,NBo),e(Kb,jBo),e(Kb,vG),e(vG,DBo),e(Kb,GBo),e(U,OBo),e(U,Zb),e(Zb,kfe),e(kfe,VBo),e(Zb,XBo),e(Zb,FG),e(FG,zBo),e(Zb,QBo),e(U,WBo),e(U,e2),e(e2,Sfe),e(Sfe,HBo),e(e2,UBo),e(e2,TG),e(TG,JBo),e(e2,YBo),e(U,KBo),e(U,o2),e(o2,Rfe),e(Rfe,ZBo),e(o2,ePo),e(o2,MG),e(MG,oPo),e(o2,rPo),e(U,tPo),e(U,r2),e(r2,Bfe),e(Bfe,aPo),e(r2,nPo),e(r2,EG),e(EG,sPo),e(r2,lPo),e(U,iPo),e(U,t2),e(t2,Pfe),e(Pfe,dPo),e(t2,cPo),e(t2,CG),e(CG,fPo),e(t2,mPo),e(U,gPo),e(U,a2),e(a2,Ife),e(Ife,hPo),e(a2,pPo),e(a2,wG),e(wG,uPo),e(a2,_Po),e(U,bPo),e(U,n2),e(n2,qfe),e(qfe,vPo),e(n2,FPo),e(n2,AG),e(AG,TPo),e(n2,MPo),e(U,EPo),e(U,s2),e(s2,Nfe),e(Nfe,CPo),e(s2,wPo),e(s2,yG),e(yG,APo),e(s2,yPo),e(U,LPo),e(U,l2),e(l2,jfe),e(jfe,xPo),e(l2,$Po),e(l2,LG),e(LG,kPo),e(l2,SPo),e(U,RPo),e(U,i2),e(i2,Dfe),e(Dfe,BPo),e(i2,PPo),e(i2,xG),e(xG,IPo),e(i2,qPo),e(U,NPo),e(U,d2),e(d2,Gfe),e(Gfe,jPo),e(d2,DPo),e(d2,$G),e($G,GPo),e(d2,OPo),e(U,VPo),e(U,c2),e(c2,Ofe),e(Ofe,XPo),e(c2,zPo),e(c2,kG),e(kG,QPo),e(c2,WPo),e(U,HPo),e(U,f2),e(f2,Vfe),e(Vfe,UPo),e(f2,JPo),e(f2,SG),e(SG,YPo),e(f2,KPo),e(U,ZPo),e(U,m2),e(m2,Xfe),e(Xfe,eIo),e(m2,oIo),e(m2,RG),e(RG,rIo),e(m2,tIo),e(U,aIo),e(U,g2),e(g2,zfe),e(zfe,nIo),e(g2,sIo),e(g2,BG),e(BG,lIo),e(g2,iIo),e(U,dIo),e(U,h2),e(h2,Qfe),e(Qfe,cIo),e(h2,fIo),e(h2,PG),e(PG,mIo),e(h2,gIo),e(U,hIo),e(U,p2),e(p2,Wfe),e(Wfe,pIo),e(p2,uIo),e(p2,IG),e(IG,_Io),e(p2,bIo),e(U,vIo),e(U,u2),e(u2,Hfe),e(Hfe,FIo),e(u2,TIo),e(u2,qG),e(qG,MIo),e(u2,EIo),e(U,CIo),e(U,_2),e(_2,Ufe),e(Ufe,wIo),e(_2,AIo),e(_2,NG),e(NG,yIo),e(_2,LIo),e(U,xIo),e(U,b2),e(b2,Jfe),e(Jfe,$Io),e(b2,kIo),e(b2,jG),e(jG,SIo),e(b2,RIo),e(U,BIo),e(U,v2),e(v2,Yfe),e(Yfe,PIo),e(v2,IIo),e(v2,DG),e(DG,qIo),e(v2,NIo),e(ro,jIo),e(ro,F2),e(F2,DIo),e(F2,Kfe),e(Kfe,GIo),e(F2,OIo),e(F2,Zfe),e(Zfe,VIo),e(ro,XIo),M(T2,ro,null),b(f,ZBe,_),b(f,Vi,_),e(Vi,M2),e(M2,eme),M(XA,eme,null),e(Vi,zIo),e(Vi,ome),e(ome,QIo),b(f,ePe,_),b(f,qo,_),M(zA,qo,null),e(qo,WIo),e(qo,Xi),e(Xi,HIo),e(Xi,GG),e(GG,UIo),e(Xi,JIo),e(Xi,OG),e(OG,YIo),e(Xi,KIo),e(qo,ZIo),e(qo,QA),e(QA,eqo),e(QA,rme),e(rme,oqo),e(QA,rqo),e(qo,tqo),e(qo,it),M(WA,it,null),e(it,aqo),e(it,tme),e(tme,nqo),e(it,sqo),e(it,zi),e(zi,lqo),e(zi,ame),e(ame,iqo),e(zi,dqo),e(zi,VG),e(VG,cqo),e(zi,fqo),e(it,mqo),M(E2,it,null),e(qo,gqo),e(qo,to),M(HA,to,null),e(to,hqo),e(to,nme),e(nme,pqo),e(to,uqo),e(to,Sa),e(Sa,_qo),e(Sa,sme),e(sme,bqo),e(Sa,vqo),e(Sa,lme),e(lme,Fqo),e(Sa,Tqo),e(Sa,ime),e(ime,Mqo),e(Sa,Eqo),e(to,Cqo),e(to,O),e(O,C2),e(C2,dme),e(dme,wqo),e(C2,Aqo),e(C2,XG),e(XG,yqo),e(C2,Lqo),e(O,xqo),e(O,w2),e(w2,cme),e(cme,$qo),e(w2,kqo),e(w2,zG),e(zG,Sqo),e(w2,Rqo),e(O,Bqo),e(O,A2),e(A2,fme),e(fme,Pqo),e(A2,Iqo),e(A2,QG),e(QG,qqo),e(A2,Nqo),e(O,jqo),e(O,y2),e(y2,mme),e(mme,Dqo),e(y2,Gqo),e(y2,WG),e(WG,Oqo),e(y2,Vqo),e(O,Xqo),e(O,L2),e(L2,gme),e(gme,zqo),e(L2,Qqo),e(L2,HG),e(HG,Wqo),e(L2,Hqo),e(O,Uqo),e(O,x2),e(x2,hme),e(hme,Jqo),e(x2,Yqo),e(x2,UG),e(UG,Kqo),e(x2,Zqo),e(O,eNo),e(O,$2),e($2,pme),e(pme,oNo),e($2,rNo),e($2,JG),e(JG,tNo),e($2,aNo),e(O,nNo),e(O,k2),e(k2,ume),e(ume,sNo),e(k2,lNo),e(k2,YG),e(YG,iNo),e(k2,dNo),e(O,cNo),e(O,S2),e(S2,_me),e(_me,fNo),e(S2,mNo),e(S2,KG),e(KG,gNo),e(S2,hNo),e(O,pNo),e(O,R2),e(R2,bme),e(bme,uNo),e(R2,_No),e(R2,ZG),e(ZG,bNo),e(R2,vNo),e(O,FNo),e(O,B2),e(B2,vme),e(vme,TNo),e(B2,MNo),e(B2,eO),e(eO,ENo),e(B2,CNo),e(O,wNo),e(O,P2),e(P2,Fme),e(Fme,ANo),e(P2,yNo),e(P2,oO),e(oO,LNo),e(P2,xNo),e(O,$No),e(O,I2),e(I2,Tme),e(Tme,kNo),e(I2,SNo),e(I2,rO),e(rO,RNo),e(I2,BNo),e(O,PNo),e(O,q2),e(q2,Mme),e(Mme,INo),e(q2,qNo),e(q2,tO),e(tO,NNo),e(q2,jNo),e(O,DNo),e(O,N2),e(N2,Eme),e(Eme,GNo),e(N2,ONo),e(N2,aO),e(aO,VNo),e(N2,XNo),e(O,zNo),e(O,j2),e(j2,Cme),e(Cme,QNo),e(j2,WNo),e(j2,nO),e(nO,HNo),e(j2,UNo),e(O,JNo),e(O,D2),e(D2,wme),e(wme,YNo),e(D2,KNo),e(D2,sO),e(sO,ZNo),e(D2,ejo),e(O,ojo),e(O,G2),e(G2,Ame),e(Ame,rjo),e(G2,tjo),e(G2,lO),e(lO,ajo),e(G2,njo),e(O,sjo),e(O,O2),e(O2,yme),e(yme,ljo),e(O2,ijo),e(O2,iO),e(iO,djo),e(O2,cjo),e(O,fjo),e(O,V2),e(V2,Lme),e(Lme,mjo),e(V2,gjo),e(V2,dO),e(dO,hjo),e(V2,pjo),e(O,ujo),e(O,X2),e(X2,xme),e(xme,_jo),e(X2,bjo),e(X2,cO),e(cO,vjo),e(X2,Fjo),e(O,Tjo),e(O,z2),e(z2,$me),e($me,Mjo),e(z2,Ejo),e(z2,fO),e(fO,Cjo),e(z2,wjo),e(O,Ajo),e(O,Q2),e(Q2,kme),e(kme,yjo),e(Q2,Ljo),e(Q2,mO),e(mO,xjo),e(Q2,$jo),e(O,kjo),e(O,W2),e(W2,Sme),e(Sme,Sjo),e(W2,Rjo),e(W2,gO),e(gO,Bjo),e(W2,Pjo),e(O,Ijo),e(O,H2),e(H2,Rme),e(Rme,qjo),e(H2,Njo),e(H2,hO),e(hO,jjo),e(H2,Djo),e(O,Gjo),e(O,U2),e(U2,Bme),e(Bme,Ojo),e(U2,Vjo),e(U2,pO),e(pO,Xjo),e(U2,zjo),e(O,Qjo),e(O,J2),e(J2,Pme),e(Pme,Wjo),e(J2,Hjo),e(J2,uO),e(uO,Ujo),e(J2,Jjo),e(O,Yjo),e(O,Y2),e(Y2,Ime),e(Ime,Kjo),e(Y2,Zjo),e(Y2,_O),e(_O,eDo),e(Y2,oDo),e(O,rDo),e(O,K2),e(K2,qme),e(qme,tDo),e(K2,aDo),e(K2,bO),e(bO,nDo),e(K2,sDo),e(O,lDo),e(O,Z2),e(Z2,Nme),e(Nme,iDo),e(Z2,dDo),e(Z2,vO),e(vO,cDo),e(Z2,fDo),e(O,mDo),e(O,ev),e(ev,jme),e(jme,gDo),e(ev,hDo),e(ev,FO),e(FO,pDo),e(ev,uDo),e(O,_Do),e(O,ov),e(ov,Dme),e(Dme,bDo),e(ov,vDo),e(ov,TO),e(TO,FDo),e(ov,TDo),e(O,MDo),e(O,rv),e(rv,Gme),e(Gme,EDo),e(rv,CDo),e(rv,MO),e(MO,wDo),e(rv,ADo),e(O,yDo),e(O,tv),e(tv,Ome),e(Ome,LDo),e(tv,xDo),e(tv,EO),e(EO,$Do),e(tv,kDo),e(O,SDo),e(O,av),e(av,Vme),e(Vme,RDo),e(av,BDo),e(av,CO),e(CO,PDo),e(av,IDo),e(O,qDo),e(O,nv),e(nv,Xme),e(Xme,NDo),e(nv,jDo),e(nv,wO),e(wO,DDo),e(nv,GDo),e(O,ODo),e(O,sv),e(sv,zme),e(zme,VDo),e(sv,XDo),e(sv,AO),e(AO,zDo),e(sv,QDo),e(O,WDo),e(O,lv),e(lv,Qme),e(Qme,HDo),e(lv,UDo),e(lv,yO),e(yO,JDo),e(lv,YDo),e(O,KDo),e(O,iv),e(iv,Wme),e(Wme,ZDo),e(iv,eGo),e(iv,LO),e(LO,oGo),e(iv,rGo),e(to,tGo),e(to,dv),e(dv,aGo),e(dv,Hme),e(Hme,nGo),e(dv,sGo),e(dv,Ume),e(Ume,lGo),e(to,iGo),M(cv,to,null),b(f,oPe,_),b(f,Qi,_),e(Qi,fv),e(fv,Jme),M(UA,Jme,null),e(Qi,dGo),e(Qi,Yme),e(Yme,cGo),b(f,rPe,_),b(f,No,_),M(JA,No,null),e(No,fGo),e(No,Wi),e(Wi,mGo),e(Wi,xO),e(xO,gGo),e(Wi,hGo),e(Wi,$O),e($O,pGo),e(Wi,uGo),e(No,_Go),e(No,YA),e(YA,bGo),e(YA,Kme),e(Kme,vGo),e(YA,FGo),e(No,TGo),e(No,dt),M(KA,dt,null),e(dt,MGo),e(dt,Zme),e(Zme,EGo),e(dt,CGo),e(dt,Hi),e(Hi,wGo),e(Hi,ege),e(ege,AGo),e(Hi,yGo),e(Hi,kO),e(kO,LGo),e(Hi,xGo),e(dt,$Go),M(mv,dt,null),e(No,kGo),e(No,ao),M(ZA,ao,null),e(ao,SGo),e(ao,oge),e(oge,RGo),e(ao,BGo),e(ao,Ra),e(Ra,PGo),e(Ra,rge),e(rge,IGo),e(Ra,qGo),e(Ra,tge),e(tge,NGo),e(Ra,jGo),e(Ra,age),e(age,DGo),e(Ra,GGo),e(ao,OGo),e(ao,nge),e(nge,gv),e(gv,sge),e(sge,VGo),e(gv,XGo),e(gv,SO),e(SO,zGo),e(gv,QGo),e(ao,WGo),e(ao,hv),e(hv,HGo),e(hv,lge),e(lge,UGo),e(hv,JGo),e(hv,ige),e(ige,YGo),e(ao,KGo),M(pv,ao,null),b(f,tPe,_),b(f,Ui,_),e(Ui,uv),e(uv,dge),M(e0,dge,null),e(Ui,ZGo),e(Ui,cge),e(cge,eOo),b(f,aPe,_),b(f,jo,_),M(o0,jo,null),e(jo,oOo),e(jo,Ji),e(Ji,rOo),e(Ji,RO),e(RO,tOo),e(Ji,aOo),e(Ji,BO),e(BO,nOo),e(Ji,sOo),e(jo,lOo),e(jo,r0),e(r0,iOo),e(r0,fge),e(fge,dOo),e(r0,cOo),e(jo,fOo),e(jo,ct),M(t0,ct,null),e(ct,mOo),e(ct,mge),e(mge,gOo),e(ct,hOo),e(ct,Yi),e(Yi,pOo),e(Yi,gge),e(gge,uOo),e(Yi,_Oo),e(Yi,PO),e(PO,bOo),e(Yi,vOo),e(ct,FOo),M(_v,ct,null),e(jo,TOo),e(jo,no),M(a0,no,null),e(no,MOo),e(no,hge),e(hge,EOo),e(no,COo),e(no,Ba),e(Ba,wOo),e(Ba,pge),e(pge,AOo),e(Ba,yOo),e(Ba,uge),e(uge,LOo),e(Ba,xOo),e(Ba,_ge),e(_ge,$Oo),e(Ba,kOo),e(no,SOo),e(no,ve),e(ve,bv),e(bv,bge),e(bge,ROo),e(bv,BOo),e(bv,IO),e(IO,POo),e(bv,IOo),e(ve,qOo),e(ve,vv),e(vv,vge),e(vge,NOo),e(vv,jOo),e(vv,qO),e(qO,DOo),e(vv,GOo),e(ve,OOo),e(ve,Fv),e(Fv,Fge),e(Fge,VOo),e(Fv,XOo),e(Fv,NO),e(NO,zOo),e(Fv,QOo),e(ve,WOo),e(ve,$s),e($s,Tge),e(Tge,HOo),e($s,UOo),e($s,jO),e(jO,JOo),e($s,YOo),e($s,DO),e(DO,KOo),e($s,ZOo),e(ve,eVo),e(ve,Tv),e(Tv,Mge),e(Mge,oVo),e(Tv,rVo),e(Tv,GO),e(GO,tVo),e(Tv,aVo),e(ve,nVo),e(ve,ft),e(ft,Ege),e(Ege,sVo),e(ft,lVo),e(ft,OO),e(OO,iVo),e(ft,dVo),e(ft,VO),e(VO,cVo),e(ft,fVo),e(ft,XO),e(XO,mVo),e(ft,gVo),e(ve,hVo),e(ve,Mv),e(Mv,Cge),e(Cge,pVo),e(Mv,uVo),e(Mv,zO),e(zO,_Vo),e(Mv,bVo),e(ve,vVo),e(ve,Ev),e(Ev,wge),e(wge,FVo),e(Ev,TVo),e(Ev,QO),e(QO,MVo),e(Ev,EVo),e(ve,CVo),e(ve,Cv),e(Cv,Age),e(Age,wVo),e(Cv,AVo),e(Cv,WO),e(WO,yVo),e(Cv,LVo),e(ve,xVo),e(ve,wv),e(wv,yge),e(yge,$Vo),e(wv,kVo),e(wv,HO),e(HO,SVo),e(wv,RVo),e(ve,BVo),e(ve,Av),e(Av,Lge),e(Lge,PVo),e(Av,IVo),e(Av,UO),e(UO,qVo),e(Av,NVo),e(ve,jVo),e(ve,yv),e(yv,xge),e(xge,DVo),e(yv,GVo),e(yv,JO),e(JO,OVo),e(yv,VVo),e(ve,XVo),e(ve,Lv),e(Lv,$ge),e($ge,zVo),e(Lv,QVo),e(Lv,YO),e(YO,WVo),e(Lv,HVo),e(no,UVo),e(no,xv),e(xv,JVo),e(xv,kge),e(kge,YVo),e(xv,KVo),e(xv,Sge),e(Sge,ZVo),e(no,eXo),M($v,no,null),b(f,nPe,_),b(f,Ki,_),e(Ki,kv),e(kv,Rge),M(n0,Rge,null),e(Ki,oXo),e(Ki,Bge),e(Bge,rXo),b(f,sPe,_),b(f,Do,_),M(s0,Do,null),e(Do,tXo),e(Do,Zi),e(Zi,aXo),e(Zi,KO),e(KO,nXo),e(Zi,sXo),e(Zi,ZO),e(ZO,lXo),e(Zi,iXo),e(Do,dXo),e(Do,l0),e(l0,cXo),e(l0,Pge),e(Pge,fXo),e(l0,mXo),e(Do,gXo),e(Do,mt),M(i0,mt,null),e(mt,hXo),e(mt,Ige),e(Ige,pXo),e(mt,uXo),e(mt,ed),e(ed,_Xo),e(ed,qge),e(qge,bXo),e(ed,vXo),e(ed,eV),e(eV,FXo),e(ed,TXo),e(mt,MXo),M(Sv,mt,null),e(Do,EXo),e(Do,so),M(d0,so,null),e(so,CXo),e(so,Nge),e(Nge,wXo),e(so,AXo),e(so,Pa),e(Pa,yXo),e(Pa,jge),e(jge,LXo),e(Pa,xXo),e(Pa,Dge),e(Dge,$Xo),e(Pa,kXo),e(Pa,Gge),e(Gge,SXo),e(Pa,RXo),e(so,BXo),e(so,Oge),e(Oge,Rv),e(Rv,Vge),e(Vge,PXo),e(Rv,IXo),e(Rv,oV),e(oV,qXo),e(Rv,NXo),e(so,jXo),e(so,Bv),e(Bv,DXo),e(Bv,Xge),e(Xge,GXo),e(Bv,OXo),e(Bv,zge),e(zge,VXo),e(so,XXo),M(Pv,so,null),b(f,lPe,_),b(f,od,_),e(od,Iv),e(Iv,Qge),M(c0,Qge,null),e(od,zXo),e(od,Wge),e(Wge,QXo),b(f,iPe,_),b(f,Go,_),M(f0,Go,null),e(Go,WXo),e(Go,rd),e(rd,HXo),e(rd,rV),e(rV,UXo),e(rd,JXo),e(rd,tV),e(tV,YXo),e(rd,KXo),e(Go,ZXo),e(Go,m0),e(m0,ezo),e(m0,Hge),e(Hge,ozo),e(m0,rzo),e(Go,tzo),e(Go,gt),M(g0,gt,null),e(gt,azo),e(gt,Uge),e(Uge,nzo),e(gt,szo),e(gt,td),e(td,lzo),e(td,Jge),e(Jge,izo),e(td,dzo),e(td,aV),e(aV,czo),e(td,fzo),e(gt,mzo),M(qv,gt,null),e(Go,gzo),e(Go,lo),M(h0,lo,null),e(lo,hzo),e(lo,Yge),e(Yge,pzo),e(lo,uzo),e(lo,Ia),e(Ia,_zo),e(Ia,Kge),e(Kge,bzo),e(Ia,vzo),e(Ia,Zge),e(Zge,Fzo),e(Ia,Tzo),e(Ia,ehe),e(ehe,Mzo),e(Ia,Ezo),e(lo,Czo),e(lo,Ne),e(Ne,Nv),e(Nv,ohe),e(ohe,wzo),e(Nv,Azo),e(Nv,nV),e(nV,yzo),e(Nv,Lzo),e(Ne,xzo),e(Ne,jv),e(jv,rhe),e(rhe,$zo),e(jv,kzo),e(jv,sV),e(sV,Szo),e(jv,Rzo),e(Ne,Bzo),e(Ne,Dv),e(Dv,the),e(the,Pzo),e(Dv,Izo),e(Dv,lV),e(lV,qzo),e(Dv,Nzo),e(Ne,jzo),e(Ne,Gv),e(Gv,ahe),e(ahe,Dzo),e(Gv,Gzo),e(Gv,iV),e(iV,Ozo),e(Gv,Vzo),e(Ne,Xzo),e(Ne,Ov),e(Ov,nhe),e(nhe,zzo),e(Ov,Qzo),e(Ov,dV),e(dV,Wzo),e(Ov,Hzo),e(Ne,Uzo),e(Ne,Vv),e(Vv,she),e(she,Jzo),e(Vv,Yzo),e(Vv,cV),e(cV,Kzo),e(Vv,Zzo),e(Ne,eQo),e(Ne,Xv),e(Xv,lhe),e(lhe,oQo),e(Xv,rQo),e(Xv,fV),e(fV,tQo),e(Xv,aQo),e(Ne,nQo),e(Ne,zv),e(zv,ihe),e(ihe,sQo),e(zv,lQo),e(zv,mV),e(mV,iQo),e(zv,dQo),e(lo,cQo),e(lo,Qv),e(Qv,fQo),e(Qv,dhe),e(dhe,mQo),e(Qv,gQo),e(Qv,che),e(che,hQo),e(lo,pQo),M(Wv,lo,null),b(f,dPe,_),b(f,ad,_),e(ad,Hv),e(Hv,fhe),M(p0,fhe,null),e(ad,uQo),e(ad,mhe),e(mhe,_Qo),b(f,cPe,_),b(f,Oo,_),M(u0,Oo,null),e(Oo,bQo),e(Oo,nd),e(nd,vQo),e(nd,gV),e(gV,FQo),e(nd,TQo),e(nd,hV),e(hV,MQo),e(nd,EQo),e(Oo,CQo),e(Oo,_0),e(_0,wQo),e(_0,ghe),e(ghe,AQo),e(_0,yQo),e(Oo,LQo),e(Oo,ht),M(b0,ht,null),e(ht,xQo),e(ht,hhe),e(hhe,$Qo),e(ht,kQo),e(ht,sd),e(sd,SQo),e(sd,phe),e(phe,RQo),e(sd,BQo),e(sd,pV),e(pV,PQo),e(sd,IQo),e(ht,qQo),M(Uv,ht,null),e(Oo,NQo),e(Oo,io),M(v0,io,null),e(io,jQo),e(io,uhe),e(uhe,DQo),e(io,GQo),e(io,qa),e(qa,OQo),e(qa,_he),e(_he,VQo),e(qa,XQo),e(qa,bhe),e(bhe,zQo),e(qa,QQo),e(qa,vhe),e(vhe,WQo),e(qa,HQo),e(io,UQo),e(io,Na),e(Na,Jv),e(Jv,Fhe),e(Fhe,JQo),e(Jv,YQo),e(Jv,uV),e(uV,KQo),e(Jv,ZQo),e(Na,eWo),e(Na,Yv),e(Yv,The),e(The,oWo),e(Yv,rWo),e(Yv,_V),e(_V,tWo),e(Yv,aWo),e(Na,nWo),e(Na,Kv),e(Kv,Mhe),e(Mhe,sWo),e(Kv,lWo),e(Kv,bV),e(bV,iWo),e(Kv,dWo),e(Na,cWo),e(Na,Zv),e(Zv,Ehe),e(Ehe,fWo),e(Zv,mWo),e(Zv,vV),e(vV,gWo),e(Zv,hWo),e(io,pWo),e(io,eF),e(eF,uWo),e(eF,Che),e(Che,_Wo),e(eF,bWo),e(eF,whe),e(whe,vWo),e(io,FWo),M(oF,io,null),b(f,fPe,_),b(f,ld,_),e(ld,rF),e(rF,Ahe),M(F0,Ahe,null),e(ld,TWo),e(ld,yhe),e(yhe,MWo),b(f,mPe,_),b(f,Vo,_),M(T0,Vo,null),e(Vo,EWo),e(Vo,id),e(id,CWo),e(id,FV),e(FV,wWo),e(id,AWo),e(id,TV),e(TV,yWo),e(id,LWo),e(Vo,xWo),e(Vo,M0),e(M0,$Wo),e(M0,Lhe),e(Lhe,kWo),e(M0,SWo),e(Vo,RWo),e(Vo,pt),M(E0,pt,null),e(pt,BWo),e(pt,xhe),e(xhe,PWo),e(pt,IWo),e(pt,dd),e(dd,qWo),e(dd,$he),e($he,NWo),e(dd,jWo),e(dd,MV),e(MV,DWo),e(dd,GWo),e(pt,OWo),M(tF,pt,null),e(Vo,VWo),e(Vo,co),M(C0,co,null),e(co,XWo),e(co,khe),e(khe,zWo),e(co,QWo),e(co,ja),e(ja,WWo),e(ja,She),e(She,HWo),e(ja,UWo),e(ja,Rhe),e(Rhe,JWo),e(ja,YWo),e(ja,Bhe),e(Bhe,KWo),e(ja,ZWo),e(co,eHo),e(co,je),e(je,aF),e(aF,Phe),e(Phe,oHo),e(aF,rHo),e(aF,EV),e(EV,tHo),e(aF,aHo),e(je,nHo),e(je,nF),e(nF,Ihe),e(Ihe,sHo),e(nF,lHo),e(nF,CV),e(CV,iHo),e(nF,dHo),e(je,cHo),e(je,sF),e(sF,qhe),e(qhe,fHo),e(sF,mHo),e(sF,wV),e(wV,gHo),e(sF,hHo),e(je,pHo),e(je,lF),e(lF,Nhe),e(Nhe,uHo),e(lF,_Ho),e(lF,AV),e(AV,bHo),e(lF,vHo),e(je,FHo),e(je,iF),e(iF,jhe),e(jhe,THo),e(iF,MHo),e(iF,yV),e(yV,EHo),e(iF,CHo),e(je,wHo),e(je,dF),e(dF,Dhe),e(Dhe,AHo),e(dF,yHo),e(dF,LV),e(LV,LHo),e(dF,xHo),e(je,$Ho),e(je,cF),e(cF,Ghe),e(Ghe,kHo),e(cF,SHo),e(cF,xV),e(xV,RHo),e(cF,BHo),e(je,PHo),e(je,fF),e(fF,Ohe),e(Ohe,IHo),e(fF,qHo),e(fF,$V),e($V,NHo),e(fF,jHo),e(co,DHo),e(co,mF),e(mF,GHo),e(mF,Vhe),e(Vhe,OHo),e(mF,VHo),e(mF,Xhe),e(Xhe,XHo),e(co,zHo),M(gF,co,null),b(f,gPe,_),b(f,cd,_),e(cd,hF),e(hF,zhe),M(w0,zhe,null),e(cd,QHo),e(cd,Qhe),e(Qhe,WHo),b(f,hPe,_),b(f,Xo,_),M(A0,Xo,null),e(Xo,HHo),e(Xo,fd),e(fd,UHo),e(fd,kV),e(kV,JHo),e(fd,YHo),e(fd,SV),e(SV,KHo),e(fd,ZHo),e(Xo,eUo),e(Xo,y0),e(y0,oUo),e(y0,Whe),e(Whe,rUo),e(y0,tUo),e(Xo,aUo),e(Xo,ut),M(L0,ut,null),e(ut,nUo),e(ut,Hhe),e(Hhe,sUo),e(ut,lUo),e(ut,md),e(md,iUo),e(md,Uhe),e(Uhe,dUo),e(md,cUo),e(md,RV),e(RV,fUo),e(md,mUo),e(ut,gUo),M(pF,ut,null),e(Xo,hUo),e(Xo,fo),M(x0,fo,null),e(fo,pUo),e(fo,Jhe),e(Jhe,uUo),e(fo,_Uo),e(fo,Da),e(Da,bUo),e(Da,Yhe),e(Yhe,vUo),e(Da,FUo),e(Da,Khe),e(Khe,TUo),e(Da,MUo),e(Da,Zhe),e(Zhe,EUo),e(Da,CUo),e(fo,wUo),e(fo,$0),e($0,uF),e(uF,epe),e(epe,AUo),e(uF,yUo),e(uF,BV),e(BV,LUo),e(uF,xUo),e($0,$Uo),e($0,_F),e(_F,ope),e(ope,kUo),e(_F,SUo),e(_F,PV),e(PV,RUo),e(_F,BUo),e(fo,PUo),e(fo,bF),e(bF,IUo),e(bF,rpe),e(rpe,qUo),e(bF,NUo),e(bF,tpe),e(tpe,jUo),e(fo,DUo),M(vF,fo,null),b(f,pPe,_),b(f,gd,_),e(gd,FF),e(FF,ape),M(k0,ape,null),e(gd,GUo),e(gd,npe),e(npe,OUo),b(f,uPe,_),b(f,zo,_),M(S0,zo,null),e(zo,VUo),e(zo,hd),e(hd,XUo),e(hd,IV),e(IV,zUo),e(hd,QUo),e(hd,qV),e(qV,WUo),e(hd,HUo),e(zo,UUo),e(zo,R0),e(R0,JUo),e(R0,spe),e(spe,YUo),e(R0,KUo),e(zo,ZUo),e(zo,_t),M(B0,_t,null),e(_t,eJo),e(_t,lpe),e(lpe,oJo),e(_t,rJo),e(_t,pd),e(pd,tJo),e(pd,ipe),e(ipe,aJo),e(pd,nJo),e(pd,NV),e(NV,sJo),e(pd,lJo),e(_t,iJo),M(TF,_t,null),e(zo,dJo),e(zo,mo),M(P0,mo,null),e(mo,cJo),e(mo,dpe),e(dpe,fJo),e(mo,mJo),e(mo,Ga),e(Ga,gJo),e(Ga,cpe),e(cpe,hJo),e(Ga,pJo),e(Ga,fpe),e(fpe,uJo),e(Ga,_Jo),e(Ga,mpe),e(mpe,bJo),e(Ga,vJo),e(mo,FJo),e(mo,Oa),e(Oa,MF),e(MF,gpe),e(gpe,TJo),e(MF,MJo),e(MF,jV),e(jV,EJo),e(MF,CJo),e(Oa,wJo),e(Oa,EF),e(EF,hpe),e(hpe,AJo),e(EF,yJo),e(EF,DV),e(DV,LJo),e(EF,xJo),e(Oa,$Jo),e(Oa,CF),e(CF,ppe),e(ppe,kJo),e(CF,SJo),e(CF,GV),e(GV,RJo),e(CF,BJo),e(Oa,PJo),e(Oa,wF),e(wF,upe),e(upe,IJo),e(wF,qJo),e(wF,OV),e(OV,NJo),e(wF,jJo),e(mo,DJo),e(mo,AF),e(AF,GJo),e(AF,_pe),e(_pe,OJo),e(AF,VJo),e(AF,bpe),e(bpe,XJo),e(mo,zJo),M(yF,mo,null),b(f,_Pe,_),b(f,ud,_),e(ud,LF),e(LF,vpe),M(I0,vpe,null),e(ud,QJo),e(ud,Fpe),e(Fpe,WJo),b(f,bPe,_),b(f,Qo,_),M(q0,Qo,null),e(Qo,HJo),e(Qo,_d),e(_d,UJo),e(_d,VV),e(VV,JJo),e(_d,YJo),e(_d,XV),e(XV,KJo),e(_d,ZJo),e(Qo,eYo),e(Qo,N0),e(N0,oYo),e(N0,Tpe),e(Tpe,rYo),e(N0,tYo),e(Qo,aYo),e(Qo,bt),M(j0,bt,null),e(bt,nYo),e(bt,Mpe),e(Mpe,sYo),e(bt,lYo),e(bt,bd),e(bd,iYo),e(bd,Epe),e(Epe,dYo),e(bd,cYo),e(bd,zV),e(zV,fYo),e(bd,mYo),e(bt,gYo),M(xF,bt,null),e(Qo,hYo),e(Qo,go),M(D0,go,null),e(go,pYo),e(go,Cpe),e(Cpe,uYo),e(go,_Yo),e(go,Va),e(Va,bYo),e(Va,wpe),e(wpe,vYo),e(Va,FYo),e(Va,Ape),e(Ape,TYo),e(Va,MYo),e(Va,ype),e(ype,EYo),e(Va,CYo),e(go,wYo),e(go,vd),e(vd,$F),e($F,Lpe),e(Lpe,AYo),e($F,yYo),e($F,QV),e(QV,LYo),e($F,xYo),e(vd,$Yo),e(vd,kF),e(kF,xpe),e(xpe,kYo),e(kF,SYo),e(kF,WV),e(WV,RYo),e(kF,BYo),e(vd,PYo),e(vd,SF),e(SF,$pe),e($pe,IYo),e(SF,qYo),e(SF,HV),e(HV,NYo),e(SF,jYo),e(go,DYo),e(go,RF),e(RF,GYo),e(RF,kpe),e(kpe,OYo),e(RF,VYo),e(RF,Spe),e(Spe,XYo),e(go,zYo),M(BF,go,null),b(f,vPe,_),b(f,Fd,_),e(Fd,PF),e(PF,Rpe),M(G0,Rpe,null),e(Fd,QYo),e(Fd,Bpe),e(Bpe,WYo),b(f,FPe,_),b(f,Wo,_),M(O0,Wo,null),e(Wo,HYo),e(Wo,Td),e(Td,UYo),e(Td,UV),e(UV,JYo),e(Td,YYo),e(Td,JV),e(JV,KYo),e(Td,ZYo),e(Wo,eKo),e(Wo,V0),e(V0,oKo),e(V0,Ppe),e(Ppe,rKo),e(V0,tKo),e(Wo,aKo),e(Wo,vt),M(X0,vt,null),e(vt,nKo),e(vt,Ipe),e(Ipe,sKo),e(vt,lKo),e(vt,Md),e(Md,iKo),e(Md,qpe),e(qpe,dKo),e(Md,cKo),e(Md,YV),e(YV,fKo),e(Md,mKo),e(vt,gKo),M(IF,vt,null),e(Wo,hKo),e(Wo,ho),M(z0,ho,null),e(ho,pKo),e(ho,Npe),e(Npe,uKo),e(ho,_Ko),e(ho,Xa),e(Xa,bKo),e(Xa,jpe),e(jpe,vKo),e(Xa,FKo),e(Xa,Dpe),e(Dpe,TKo),e(Xa,MKo),e(Xa,Gpe),e(Gpe,EKo),e(Xa,CKo),e(ho,wKo),e(ho,Q0),e(Q0,qF),e(qF,Ope),e(Ope,AKo),e(qF,yKo),e(qF,KV),e(KV,LKo),e(qF,xKo),e(Q0,$Ko),e(Q0,NF),e(NF,Vpe),e(Vpe,kKo),e(NF,SKo),e(NF,ZV),e(ZV,RKo),e(NF,BKo),e(ho,PKo),e(ho,jF),e(jF,IKo),e(jF,Xpe),e(Xpe,qKo),e(jF,NKo),e(jF,zpe),e(zpe,jKo),e(ho,DKo),M(DF,ho,null),b(f,TPe,_),b(f,Ed,_),e(Ed,GF),e(GF,Qpe),M(W0,Qpe,null),e(Ed,GKo),e(Ed,Wpe),e(Wpe,OKo),b(f,MPe,_),b(f,Ho,_),M(H0,Ho,null),e(Ho,VKo),e(Ho,Cd),e(Cd,XKo),e(Cd,eX),e(eX,zKo),e(Cd,QKo),e(Cd,oX),e(oX,WKo),e(Cd,HKo),e(Ho,UKo),e(Ho,U0),e(U0,JKo),e(U0,Hpe),e(Hpe,YKo),e(U0,KKo),e(Ho,ZKo),e(Ho,Ft),M(J0,Ft,null),e(Ft,eZo),e(Ft,Upe),e(Upe,oZo),e(Ft,rZo),e(Ft,wd),e(wd,tZo),e(wd,Jpe),e(Jpe,aZo),e(wd,nZo),e(wd,rX),e(rX,sZo),e(wd,lZo),e(Ft,iZo),M(OF,Ft,null),e(Ho,dZo),e(Ho,po),M(Y0,po,null),e(po,cZo),e(po,Ype),e(Ype,fZo),e(po,mZo),e(po,za),e(za,gZo),e(za,Kpe),e(Kpe,hZo),e(za,pZo),e(za,Zpe),e(Zpe,uZo),e(za,_Zo),e(za,eue),e(eue,bZo),e(za,vZo),e(po,FZo),e(po,oue),e(oue,VF),e(VF,rue),e(rue,TZo),e(VF,MZo),e(VF,tX),e(tX,EZo),e(VF,CZo),e(po,wZo),e(po,XF),e(XF,AZo),e(XF,tue),e(tue,yZo),e(XF,LZo),e(XF,aue),e(aue,xZo),e(po,$Zo),M(zF,po,null),b(f,EPe,_),b(f,Ad,_),e(Ad,QF),e(QF,nue),M(K0,nue,null),e(Ad,kZo),e(Ad,sue),e(sue,SZo),b(f,CPe,_),b(f,Uo,_),M(Z0,Uo,null),e(Uo,RZo),e(Uo,yd),e(yd,BZo),e(yd,aX),e(aX,PZo),e(yd,IZo),e(yd,nX),e(nX,qZo),e(yd,NZo),e(Uo,jZo),e(Uo,ey),e(ey,DZo),e(ey,lue),e(lue,GZo),e(ey,OZo),e(Uo,VZo),e(Uo,Tt),M(oy,Tt,null),e(Tt,XZo),e(Tt,iue),e(iue,zZo),e(Tt,QZo),e(Tt,Ld),e(Ld,WZo),e(Ld,due),e(due,HZo),e(Ld,UZo),e(Ld,sX),e(sX,JZo),e(Ld,YZo),e(Tt,KZo),M(WF,Tt,null),e(Uo,ZZo),e(Uo,uo),M(ry,uo,null),e(uo,eer),e(uo,cue),e(cue,oer),e(uo,rer),e(uo,Qa),e(Qa,ter),e(Qa,fue),e(fue,aer),e(Qa,ner),e(Qa,mue),e(mue,ser),e(Qa,ler),e(Qa,gue),e(gue,ier),e(Qa,der),e(uo,cer),e(uo,Wa),e(Wa,HF),e(HF,hue),e(hue,fer),e(HF,mer),e(HF,lX),e(lX,ger),e(HF,her),e(Wa,per),e(Wa,UF),e(UF,pue),e(pue,uer),e(UF,_er),e(UF,iX),e(iX,ber),e(UF,ver),e(Wa,Fer),e(Wa,JF),e(JF,uue),e(uue,Ter),e(JF,Mer),e(JF,dX),e(dX,Eer),e(JF,Cer),e(Wa,wer),e(Wa,YF),e(YF,_ue),e(_ue,Aer),e(YF,yer),e(YF,cX),e(cX,Ler),e(YF,xer),e(uo,$er),e(uo,KF),e(KF,ker),e(KF,bue),e(bue,Ser),e(KF,Rer),e(KF,vue),e(vue,Ber),e(uo,Per),M(ZF,uo,null),b(f,wPe,_),b(f,xd,_),e(xd,e6),e(e6,Fue),M(ty,Fue,null),e(xd,Ier),e(xd,Tue),e(Tue,qer),b(f,APe,_),b(f,Jo,_),M(ay,Jo,null),e(Jo,Ner),e(Jo,$d),e($d,jer),e($d,fX),e(fX,Der),e($d,Ger),e($d,mX),e(mX,Oer),e($d,Ver),e(Jo,Xer),e(Jo,ny),e(ny,zer),e(ny,Mue),e(Mue,Qer),e(ny,Wer),e(Jo,Her),e(Jo,Mt),M(sy,Mt,null),e(Mt,Uer),e(Mt,Eue),e(Eue,Jer),e(Mt,Yer),e(Mt,kd),e(kd,Ker),e(kd,Cue),e(Cue,Zer),e(kd,eor),e(kd,gX),e(gX,oor),e(kd,ror),e(Mt,tor),M(o6,Mt,null),e(Jo,aor),e(Jo,_o),M(ly,_o,null),e(_o,nor),e(_o,wue),e(wue,sor),e(_o,lor),e(_o,Ha),e(Ha,ior),e(Ha,Aue),e(Aue,dor),e(Ha,cor),e(Ha,yue),e(yue,mor),e(Ha,gor),e(Ha,Lue),e(Lue,hor),e(Ha,por),e(_o,uor),e(_o,xue),e(xue,r6),e(r6,$ue),e($ue,_or),e(r6,bor),e(r6,hX),e(hX,vor),e(r6,For),e(_o,Tor),e(_o,t6),e(t6,Mor),e(t6,kue),e(kue,Eor),e(t6,Cor),e(t6,Sue),e(Sue,wor),e(_o,Aor),M(a6,_o,null),b(f,yPe,_),b(f,Sd,_),e(Sd,n6),e(n6,Rue),M(iy,Rue,null),e(Sd,yor),e(Sd,Bue),e(Bue,Lor),b(f,LPe,_),b(f,Yo,_),M(dy,Yo,null),e(Yo,xor),e(Yo,Rd),e(Rd,$or),e(Rd,pX),e(pX,kor),e(Rd,Sor),e(Rd,uX),e(uX,Ror),e(Rd,Bor),e(Yo,Por),e(Yo,cy),e(cy,Ior),e(cy,Pue),e(Pue,qor),e(cy,Nor),e(Yo,jor),e(Yo,Et),M(fy,Et,null),e(Et,Dor),e(Et,Iue),e(Iue,Gor),e(Et,Oor),e(Et,Bd),e(Bd,Vor),e(Bd,que),e(que,Xor),e(Bd,zor),e(Bd,_X),e(_X,Qor),e(Bd,Wor),e(Et,Hor),M(s6,Et,null),e(Yo,Uor),e(Yo,Cr),M(my,Cr,null),e(Cr,Jor),e(Cr,Nue),e(Nue,Yor),e(Cr,Kor),e(Cr,Ua),e(Ua,Zor),e(Ua,jue),e(jue,err),e(Ua,orr),e(Ua,Due),e(Due,rrr),e(Ua,trr),e(Ua,Gue),e(Gue,arr),e(Ua,nrr),e(Cr,srr),e(Cr,N),e(N,l6),e(l6,Oue),e(Oue,lrr),e(l6,irr),e(l6,bX),e(bX,drr),e(l6,crr),e(N,frr),e(N,i6),e(i6,Vue),e(Vue,mrr),e(i6,grr),e(i6,vX),e(vX,hrr),e(i6,prr),e(N,urr),e(N,d6),e(d6,Xue),e(Xue,_rr),e(d6,brr),e(d6,FX),e(FX,vrr),e(d6,Frr),e(N,Trr),e(N,c6),e(c6,zue),e(zue,Mrr),e(c6,Err),e(c6,TX),e(TX,Crr),e(c6,wrr),e(N,Arr),e(N,f6),e(f6,Que),e(Que,yrr),e(f6,Lrr),e(f6,MX),e(MX,xrr),e(f6,$rr),e(N,krr),e(N,m6),e(m6,Wue),e(Wue,Srr),e(m6,Rrr),e(m6,EX),e(EX,Brr),e(m6,Prr),e(N,Irr),e(N,g6),e(g6,Hue),e(Hue,qrr),e(g6,Nrr),e(g6,CX),e(CX,jrr),e(g6,Drr),e(N,Grr),e(N,h6),e(h6,Uue),e(Uue,Orr),e(h6,Vrr),e(h6,wX),e(wX,Xrr),e(h6,zrr),e(N,Qrr),e(N,p6),e(p6,Jue),e(Jue,Wrr),e(p6,Hrr),e(p6,AX),e(AX,Urr),e(p6,Jrr),e(N,Yrr),e(N,u6),e(u6,Yue),e(Yue,Krr),e(u6,Zrr),e(u6,yX),e(yX,etr),e(u6,otr),e(N,rtr),e(N,_6),e(_6,Kue),e(Kue,ttr),e(_6,atr),e(_6,LX),e(LX,ntr),e(_6,str),e(N,ltr),e(N,b6),e(b6,Zue),e(Zue,itr),e(b6,dtr),e(b6,xX),e(xX,ctr),e(b6,ftr),e(N,mtr),e(N,v6),e(v6,e_e),e(e_e,gtr),e(v6,htr),e(v6,$X),e($X,ptr),e(v6,utr),e(N,_tr),e(N,F6),e(F6,o_e),e(o_e,btr),e(F6,vtr),e(F6,kX),e(kX,Ftr),e(F6,Ttr),e(N,Mtr),e(N,T6),e(T6,r_e),e(r_e,Etr),e(T6,Ctr),e(T6,SX),e(SX,wtr),e(T6,Atr),e(N,ytr),e(N,M6),e(M6,t_e),e(t_e,Ltr),e(M6,xtr),e(M6,RX),e(RX,$tr),e(M6,ktr),e(N,Str),e(N,E6),e(E6,a_e),e(a_e,Rtr),e(E6,Btr),e(E6,BX),e(BX,Ptr),e(E6,Itr),e(N,qtr),e(N,ks),e(ks,n_e),e(n_e,Ntr),e(ks,jtr),e(ks,PX),e(PX,Dtr),e(ks,Gtr),e(ks,IX),e(IX,Otr),e(ks,Vtr),e(N,Xtr),e(N,C6),e(C6,s_e),e(s_e,ztr),e(C6,Qtr),e(C6,qX),e(qX,Wtr),e(C6,Htr),e(N,Utr),e(N,w6),e(w6,l_e),e(l_e,Jtr),e(w6,Ytr),e(w6,NX),e(NX,Ktr),e(w6,Ztr),e(N,ear),e(N,A6),e(A6,i_e),e(i_e,oar),e(A6,rar),e(A6,jX),e(jX,tar),e(A6,aar),e(N,nar),e(N,y6),e(y6,d_e),e(d_e,sar),e(y6,lar),e(y6,DX),e(DX,iar),e(y6,dar),e(N,car),e(N,L6),e(L6,c_e),e(c_e,far),e(L6,mar),e(L6,GX),e(GX,gar),e(L6,har),e(N,par),e(N,x6),e(x6,f_e),e(f_e,uar),e(x6,_ar),e(x6,OX),e(OX,bar),e(x6,Far),e(N,Tar),e(N,$6),e($6,m_e),e(m_e,Mar),e($6,Ear),e($6,VX),e(VX,Car),e($6,war),e(N,Aar),e(N,k6),e(k6,g_e),e(g_e,yar),e(k6,Lar),e(k6,XX),e(XX,xar),e(k6,$ar),e(N,kar),e(N,S6),e(S6,h_e),e(h_e,Sar),e(S6,Rar),e(S6,zX),e(zX,Bar),e(S6,Par),e(N,Iar),e(N,R6),e(R6,p_e),e(p_e,qar),e(R6,Nar),e(R6,QX),e(QX,jar),e(R6,Dar),e(N,Gar),e(N,B6),e(B6,u_e),e(u_e,Oar),e(B6,Var),e(B6,WX),e(WX,Xar),e(B6,zar),e(N,Qar),e(N,P6),e(P6,__e),e(__e,War),e(P6,Har),e(P6,HX),e(HX,Uar),e(P6,Jar),e(N,Yar),e(N,I6),e(I6,b_e),e(b_e,Kar),e(I6,Zar),e(I6,UX),e(UX,enr),e(I6,onr),e(N,rnr),e(N,q6),e(q6,v_e),e(v_e,tnr),e(q6,anr),e(q6,JX),e(JX,nnr),e(q6,snr),e(N,lnr),e(N,N6),e(N6,F_e),e(F_e,inr),e(N6,dnr),e(N6,YX),e(YX,cnr),e(N6,fnr),e(N,mnr),e(N,j6),e(j6,T_e),e(T_e,gnr),e(j6,hnr),e(j6,KX),e(KX,pnr),e(j6,unr),e(N,_nr),e(N,D6),e(D6,M_e),e(M_e,bnr),e(D6,vnr),e(D6,ZX),e(ZX,Fnr),e(D6,Tnr),e(N,Mnr),e(N,G6),e(G6,E_e),e(E_e,Enr),e(G6,Cnr),e(G6,ez),e(ez,wnr),e(G6,Anr),e(N,ynr),e(N,O6),e(O6,C_e),e(C_e,Lnr),e(O6,xnr),e(O6,oz),e(oz,$nr),e(O6,knr),e(N,Snr),e(N,V6),e(V6,w_e),e(w_e,Rnr),e(V6,Bnr),e(V6,rz),e(rz,Pnr),e(V6,Inr),e(N,qnr),e(N,X6),e(X6,A_e),e(A_e,Nnr),e(X6,jnr),e(X6,tz),e(tz,Dnr),e(X6,Gnr),e(N,Onr),e(N,z6),e(z6,y_e),e(y_e,Vnr),e(z6,Xnr),e(z6,az),e(az,znr),e(z6,Qnr),e(N,Wnr),e(N,Q6),e(Q6,L_e),e(L_e,Hnr),e(Q6,Unr),e(Q6,nz),e(nz,Jnr),e(Q6,Ynr),e(N,Knr),e(N,W6),e(W6,x_e),e(x_e,Znr),e(W6,esr),e(W6,sz),e(sz,osr),e(W6,rsr),e(N,tsr),e(N,H6),e(H6,$_e),e($_e,asr),e(H6,nsr),e(H6,lz),e(lz,ssr),e(H6,lsr),e(N,isr),e(N,U6),e(U6,k_e),e(k_e,dsr),e(U6,csr),e(U6,iz),e(iz,fsr),e(U6,msr),e(N,gsr),e(N,J6),e(J6,S_e),e(S_e,hsr),e(J6,psr),e(J6,dz),e(dz,usr),e(J6,_sr),e(N,bsr),e(N,Y6),e(Y6,R_e),e(R_e,vsr),e(Y6,Fsr),e(Y6,cz),e(cz,Tsr),e(Y6,Msr),e(Cr,Esr),M(K6,Cr,null),b(f,xPe,_),b(f,Pd,_),e(Pd,Z6),e(Z6,B_e),M(gy,B_e,null),e(Pd,Csr),e(Pd,P_e),e(P_e,wsr),b(f,$Pe,_),b(f,Ko,_),M(hy,Ko,null),e(Ko,Asr),e(Ko,Id),e(Id,ysr),e(Id,fz),e(fz,Lsr),e(Id,xsr),e(Id,mz),e(mz,$sr),e(Id,ksr),e(Ko,Ssr),e(Ko,py),e(py,Rsr),e(py,I_e),e(I_e,Bsr),e(py,Psr),e(Ko,Isr),e(Ko,Ct),M(uy,Ct,null),e(Ct,qsr),e(Ct,q_e),e(q_e,Nsr),e(Ct,jsr),e(Ct,qd),e(qd,Dsr),e(qd,N_e),e(N_e,Gsr),e(qd,Osr),e(qd,gz),e(gz,Vsr),e(qd,Xsr),e(Ct,zsr),M(eT,Ct,null),e(Ko,Qsr),e(Ko,wr),M(_y,wr,null),e(wr,Wsr),e(wr,j_e),e(j_e,Hsr),e(wr,Usr),e(wr,Ja),e(Ja,Jsr),e(Ja,D_e),e(D_e,Ysr),e(Ja,Ksr),e(Ja,G_e),e(G_e,Zsr),e(Ja,elr),e(Ja,O_e),e(O_e,olr),e(Ja,rlr),e(wr,tlr),e(wr,ne),e(ne,oT),e(oT,V_e),e(V_e,alr),e(oT,nlr),e(oT,hz),e(hz,slr),e(oT,llr),e(ne,ilr),e(ne,rT),e(rT,X_e),e(X_e,dlr),e(rT,clr),e(rT,pz),e(pz,flr),e(rT,mlr),e(ne,glr),e(ne,tT),e(tT,z_e),e(z_e,hlr),e(tT,plr),e(tT,uz),e(uz,ulr),e(tT,_lr),e(ne,blr),e(ne,aT),e(aT,Q_e),e(Q_e,vlr),e(aT,Flr),e(aT,_z),e(_z,Tlr),e(aT,Mlr),e(ne,Elr),e(ne,nT),e(nT,W_e),e(W_e,Clr),e(nT,wlr),e(nT,bz),e(bz,Alr),e(nT,ylr),e(ne,Llr),e(ne,sT),e(sT,H_e),e(H_e,xlr),e(sT,$lr),e(sT,vz),e(vz,klr),e(sT,Slr),e(ne,Rlr),e(ne,lT),e(lT,U_e),e(U_e,Blr),e(lT,Plr),e(lT,Fz),e(Fz,Ilr),e(lT,qlr),e(ne,Nlr),e(ne,iT),e(iT,J_e),e(J_e,jlr),e(iT,Dlr),e(iT,Tz),e(Tz,Glr),e(iT,Olr),e(ne,Vlr),e(ne,dT),e(dT,Y_e),e(Y_e,Xlr),e(dT,zlr),e(dT,Mz),e(Mz,Qlr),e(dT,Wlr),e(ne,Hlr),e(ne,cT),e(cT,K_e),e(K_e,Ulr),e(cT,Jlr),e(cT,Ez),e(Ez,Ylr),e(cT,Klr),e(ne,Zlr),e(ne,fT),e(fT,Z_e),e(Z_e,eir),e(fT,oir),e(fT,Cz),e(Cz,rir),e(fT,tir),e(ne,air),e(ne,mT),e(mT,e1e),e(e1e,nir),e(mT,sir),e(mT,wz),e(wz,lir),e(mT,iir),e(ne,dir),e(ne,gT),e(gT,o1e),e(o1e,cir),e(gT,fir),e(gT,Az),e(Az,mir),e(gT,gir),e(ne,hir),e(ne,hT),e(hT,r1e),e(r1e,pir),e(hT,uir),e(hT,yz),e(yz,_ir),e(hT,bir),e(ne,vir),e(ne,pT),e(pT,t1e),e(t1e,Fir),e(pT,Tir),e(pT,Lz),e(Lz,Mir),e(pT,Eir),e(ne,Cir),e(ne,uT),e(uT,a1e),e(a1e,wir),e(uT,Air),e(uT,xz),e(xz,yir),e(uT,Lir),e(ne,xir),e(ne,_T),e(_T,n1e),e(n1e,$ir),e(_T,kir),e(_T,$z),e($z,Sir),e(_T,Rir),e(ne,Bir),e(ne,bT),e(bT,s1e),e(s1e,Pir),e(bT,Iir),e(bT,kz),e(kz,qir),e(bT,Nir),e(ne,jir),e(ne,vT),e(vT,l1e),e(l1e,Dir),e(vT,Gir),e(vT,Sz),e(Sz,Oir),e(vT,Vir),e(ne,Xir),e(ne,FT),e(FT,i1e),e(i1e,zir),e(FT,Qir),e(FT,Rz),e(Rz,Wir),e(FT,Hir),e(ne,Uir),e(ne,TT),e(TT,d1e),e(d1e,Jir),e(TT,Yir),e(TT,Bz),e(Bz,Kir),e(TT,Zir),e(ne,edr),e(ne,MT),e(MT,c1e),e(c1e,odr),e(MT,rdr),e(MT,Pz),e(Pz,tdr),e(MT,adr),e(ne,ndr),e(ne,ET),e(ET,f1e),e(f1e,sdr),e(ET,ldr),e(ET,Iz),e(Iz,idr),e(ET,ddr),e(wr,cdr),M(CT,wr,null),b(f,kPe,_),b(f,Nd,_),e(Nd,wT),e(wT,m1e),M(by,m1e,null),e(Nd,fdr),e(Nd,g1e),e(g1e,mdr),b(f,SPe,_),b(f,Zo,_),M(vy,Zo,null),e(Zo,gdr),e(Zo,jd),e(jd,hdr),e(jd,qz),e(qz,pdr),e(jd,udr),e(jd,Nz),e(Nz,_dr),e(jd,bdr),e(Zo,vdr),e(Zo,Fy),e(Fy,Fdr),e(Fy,h1e),e(h1e,Tdr),e(Fy,Mdr),e(Zo,Edr),e(Zo,wt),M(Ty,wt,null),e(wt,Cdr),e(wt,p1e),e(p1e,wdr),e(wt,Adr),e(wt,Dd),e(Dd,ydr),e(Dd,u1e),e(u1e,Ldr),e(Dd,xdr),e(Dd,jz),e(jz,$dr),e(Dd,kdr),e(wt,Sdr),M(AT,wt,null),e(Zo,Rdr),e(Zo,Ar),M(My,Ar,null),e(Ar,Bdr),e(Ar,_1e),e(_1e,Pdr),e(Ar,Idr),e(Ar,Ya),e(Ya,qdr),e(Ya,b1e),e(b1e,Ndr),e(Ya,jdr),e(Ya,v1e),e(v1e,Ddr),e(Ya,Gdr),e(Ya,F1e),e(F1e,Odr),e(Ya,Vdr),e(Ar,Xdr),e(Ar,Te),e(Te,yT),e(yT,T1e),e(T1e,zdr),e(yT,Qdr),e(yT,Dz),e(Dz,Wdr),e(yT,Hdr),e(Te,Udr),e(Te,LT),e(LT,M1e),e(M1e,Jdr),e(LT,Ydr),e(LT,Gz),e(Gz,Kdr),e(LT,Zdr),e(Te,ecr),e(Te,xT),e(xT,E1e),e(E1e,ocr),e(xT,rcr),e(xT,Oz),e(Oz,tcr),e(xT,acr),e(Te,ncr),e(Te,$T),e($T,C1e),e(C1e,scr),e($T,lcr),e($T,Vz),e(Vz,icr),e($T,dcr),e(Te,ccr),e(Te,kT),e(kT,w1e),e(w1e,fcr),e(kT,mcr),e(kT,Xz),e(Xz,gcr),e(kT,hcr),e(Te,pcr),e(Te,ST),e(ST,A1e),e(A1e,ucr),e(ST,_cr),e(ST,zz),e(zz,bcr),e(ST,vcr),e(Te,Fcr),e(Te,RT),e(RT,y1e),e(y1e,Tcr),e(RT,Mcr),e(RT,Qz),e(Qz,Ecr),e(RT,Ccr),e(Te,wcr),e(Te,BT),e(BT,L1e),e(L1e,Acr),e(BT,ycr),e(BT,Wz),e(Wz,Lcr),e(BT,xcr),e(Te,$cr),e(Te,PT),e(PT,x1e),e(x1e,kcr),e(PT,Scr),e(PT,Hz),e(Hz,Rcr),e(PT,Bcr),e(Te,Pcr),e(Te,IT),e(IT,$1e),e($1e,Icr),e(IT,qcr),e(IT,Uz),e(Uz,Ncr),e(IT,jcr),e(Te,Dcr),e(Te,qT),e(qT,k1e),e(k1e,Gcr),e(qT,Ocr),e(qT,Jz),e(Jz,Vcr),e(qT,Xcr),e(Te,zcr),e(Te,NT),e(NT,S1e),e(S1e,Qcr),e(NT,Wcr),e(NT,Yz),e(Yz,Hcr),e(NT,Ucr),e(Ar,Jcr),M(jT,Ar,null),b(f,RPe,_),b(f,Gd,_),e(Gd,DT),e(DT,R1e),M(Ey,R1e,null),e(Gd,Ycr),e(Gd,B1e),e(B1e,Kcr),b(f,BPe,_),b(f,er,_),M(Cy,er,null),e(er,Zcr),e(er,Od),e(Od,efr),e(Od,Kz),e(Kz,ofr),e(Od,rfr),e(Od,Zz),e(Zz,tfr),e(Od,afr),e(er,nfr),e(er,wy),e(wy,sfr),e(wy,P1e),e(P1e,lfr),e(wy,ifr),e(er,dfr),e(er,At),M(Ay,At,null),e(At,cfr),e(At,I1e),e(I1e,ffr),e(At,mfr),e(At,Vd),e(Vd,gfr),e(Vd,q1e),e(q1e,hfr),e(Vd,pfr),e(Vd,eQ),e(eQ,ufr),e(Vd,_fr),e(At,bfr),M(GT,At,null),e(er,vfr),e(er,yr),M(yy,yr,null),e(yr,Ffr),e(yr,N1e),e(N1e,Tfr),e(yr,Mfr),e(yr,Ka),e(Ka,Efr),e(Ka,j1e),e(j1e,Cfr),e(Ka,wfr),e(Ka,D1e),e(D1e,Afr),e(Ka,yfr),e(Ka,G1e),e(G1e,Lfr),e(Ka,xfr),e(yr,$fr),e(yr,Za),e(Za,OT),e(OT,O1e),e(O1e,kfr),e(OT,Sfr),e(OT,oQ),e(oQ,Rfr),e(OT,Bfr),e(Za,Pfr),e(Za,VT),e(VT,V1e),e(V1e,Ifr),e(VT,qfr),e(VT,rQ),e(rQ,Nfr),e(VT,jfr),e(Za,Dfr),e(Za,XT),e(XT,X1e),e(X1e,Gfr),e(XT,Ofr),e(XT,tQ),e(tQ,Vfr),e(XT,Xfr),e(Za,zfr),e(Za,zT),e(zT,z1e),e(z1e,Qfr),e(zT,Wfr),e(zT,aQ),e(aQ,Hfr),e(zT,Ufr),e(yr,Jfr),M(QT,yr,null),b(f,PPe,_),b(f,Xd,_),e(Xd,WT),e(WT,Q1e),M(Ly,Q1e,null),e(Xd,Yfr),e(Xd,W1e),e(W1e,Kfr),b(f,IPe,_),b(f,or,_),M(xy,or,null),e(or,Zfr),e(or,zd),e(zd,emr),e(zd,nQ),e(nQ,omr),e(zd,rmr),e(zd,sQ),e(sQ,tmr),e(zd,amr),e(or,nmr),e(or,$y),e($y,smr),e($y,H1e),e(H1e,lmr),e($y,imr),e(or,dmr),e(or,yt),M(ky,yt,null),e(yt,cmr),e(yt,U1e),e(U1e,fmr),e(yt,mmr),e(yt,Qd),e(Qd,gmr),e(Qd,J1e),e(J1e,hmr),e(Qd,pmr),e(Qd,lQ),e(lQ,umr),e(Qd,_mr),e(yt,bmr),M(HT,yt,null),e(or,vmr),e(or,Lr),M(Sy,Lr,null),e(Lr,Fmr),e(Lr,Y1e),e(Y1e,Tmr),e(Lr,Mmr),e(Lr,en),e(en,Emr),e(en,K1e),e(K1e,Cmr),e(en,wmr),e(en,Z1e),e(Z1e,Amr),e(en,ymr),e(en,e8e),e(e8e,Lmr),e(en,xmr),e(Lr,$mr),e(Lr,ie),e(ie,UT),e(UT,o8e),e(o8e,kmr),e(UT,Smr),e(UT,iQ),e(iQ,Rmr),e(UT,Bmr),e(ie,Pmr),e(ie,JT),e(JT,r8e),e(r8e,Imr),e(JT,qmr),e(JT,dQ),e(dQ,Nmr),e(JT,jmr),e(ie,Dmr),e(ie,YT),e(YT,t8e),e(t8e,Gmr),e(YT,Omr),e(YT,cQ),e(cQ,Vmr),e(YT,Xmr),e(ie,zmr),e(ie,KT),e(KT,a8e),e(a8e,Qmr),e(KT,Wmr),e(KT,fQ),e(fQ,Hmr),e(KT,Umr),e(ie,Jmr),e(ie,ZT),e(ZT,n8e),e(n8e,Ymr),e(ZT,Kmr),e(ZT,mQ),e(mQ,Zmr),e(ZT,egr),e(ie,ogr),e(ie,e9),e(e9,s8e),e(s8e,rgr),e(e9,tgr),e(e9,gQ),e(gQ,agr),e(e9,ngr),e(ie,sgr),e(ie,o9),e(o9,l8e),e(l8e,lgr),e(o9,igr),e(o9,hQ),e(hQ,dgr),e(o9,cgr),e(ie,fgr),e(ie,r9),e(r9,i8e),e(i8e,mgr),e(r9,ggr),e(r9,pQ),e(pQ,hgr),e(r9,pgr),e(ie,ugr),e(ie,t9),e(t9,d8e),e(d8e,_gr),e(t9,bgr),e(t9,uQ),e(uQ,vgr),e(t9,Fgr),e(ie,Tgr),e(ie,a9),e(a9,c8e),e(c8e,Mgr),e(a9,Egr),e(a9,_Q),e(_Q,Cgr),e(a9,wgr),e(ie,Agr),e(ie,n9),e(n9,f8e),e(f8e,ygr),e(n9,Lgr),e(n9,bQ),e(bQ,xgr),e(n9,$gr),e(ie,kgr),e(ie,s9),e(s9,m8e),e(m8e,Sgr),e(s9,Rgr),e(s9,vQ),e(vQ,Bgr),e(s9,Pgr),e(ie,Igr),e(ie,l9),e(l9,g8e),e(g8e,qgr),e(l9,Ngr),e(l9,FQ),e(FQ,jgr),e(l9,Dgr),e(ie,Ggr),e(ie,i9),e(i9,h8e),e(h8e,Ogr),e(i9,Vgr),e(i9,TQ),e(TQ,Xgr),e(i9,zgr),e(ie,Qgr),e(ie,d9),e(d9,p8e),e(p8e,Wgr),e(d9,Hgr),e(d9,MQ),e(MQ,Ugr),e(d9,Jgr),e(ie,Ygr),e(ie,c9),e(c9,u8e),e(u8e,Kgr),e(c9,Zgr),e(c9,EQ),e(EQ,ehr),e(c9,ohr),e(ie,rhr),e(ie,f9),e(f9,_8e),e(_8e,thr),e(f9,ahr),e(f9,CQ),e(CQ,nhr),e(f9,shr),e(ie,lhr),e(ie,m9),e(m9,b8e),e(b8e,ihr),e(m9,dhr),e(m9,wQ),e(wQ,chr),e(m9,fhr),e(ie,mhr),e(ie,g9),e(g9,v8e),e(v8e,ghr),e(g9,hhr),e(g9,AQ),e(AQ,phr),e(g9,uhr),e(ie,_hr),e(ie,h9),e(h9,F8e),e(F8e,bhr),e(h9,vhr),e(h9,yQ),e(yQ,Fhr),e(h9,Thr),e(Lr,Mhr),M(p9,Lr,null),b(f,qPe,_),b(f,Wd,_),e(Wd,u9),e(u9,T8e),M(Ry,T8e,null),e(Wd,Ehr),e(Wd,M8e),e(M8e,Chr),b(f,NPe,_),b(f,rr,_),M(By,rr,null),e(rr,whr),e(rr,Hd),e(Hd,Ahr),e(Hd,LQ),e(LQ,yhr),e(Hd,Lhr),e(Hd,xQ),e(xQ,xhr),e(Hd,$hr),e(rr,khr),e(rr,Py),e(Py,Shr),e(Py,E8e),e(E8e,Rhr),e(Py,Bhr),e(rr,Phr),e(rr,Lt),M(Iy,Lt,null),e(Lt,Ihr),e(Lt,C8e),e(C8e,qhr),e(Lt,Nhr),e(Lt,Ud),e(Ud,jhr),e(Ud,w8e),e(w8e,Dhr),e(Ud,Ghr),e(Ud,$Q),e($Q,Ohr),e(Ud,Vhr),e(Lt,Xhr),M(_9,Lt,null),e(rr,zhr),e(rr,xr),M(qy,xr,null),e(xr,Qhr),e(xr,A8e),e(A8e,Whr),e(xr,Hhr),e(xr,on),e(on,Uhr),e(on,y8e),e(y8e,Jhr),e(on,Yhr),e(on,L8e),e(L8e,Khr),e(on,Zhr),e(on,x8e),e(x8e,epr),e(on,opr),e(xr,rpr),e(xr,ye),e(ye,b9),e(b9,$8e),e($8e,tpr),e(b9,apr),e(b9,kQ),e(kQ,npr),e(b9,spr),e(ye,lpr),e(ye,v9),e(v9,k8e),e(k8e,ipr),e(v9,dpr),e(v9,SQ),e(SQ,cpr),e(v9,fpr),e(ye,mpr),e(ye,F9),e(F9,S8e),e(S8e,gpr),e(F9,hpr),e(F9,RQ),e(RQ,ppr),e(F9,upr),e(ye,_pr),e(ye,T9),e(T9,R8e),e(R8e,bpr),e(T9,vpr),e(T9,BQ),e(BQ,Fpr),e(T9,Tpr),e(ye,Mpr),e(ye,M9),e(M9,B8e),e(B8e,Epr),e(M9,Cpr),e(M9,PQ),e(PQ,wpr),e(M9,Apr),e(ye,ypr),e(ye,E9),e(E9,P8e),e(P8e,Lpr),e(E9,xpr),e(E9,IQ),e(IQ,$pr),e(E9,kpr),e(ye,Spr),e(ye,C9),e(C9,I8e),e(I8e,Rpr),e(C9,Bpr),e(C9,qQ),e(qQ,Ppr),e(C9,Ipr),e(ye,qpr),e(ye,w9),e(w9,q8e),e(q8e,Npr),e(w9,jpr),e(w9,NQ),e(NQ,Dpr),e(w9,Gpr),e(ye,Opr),e(ye,A9),e(A9,N8e),e(N8e,Vpr),e(A9,Xpr),e(A9,jQ),e(jQ,zpr),e(A9,Qpr),e(ye,Wpr),e(ye,y9),e(y9,j8e),e(j8e,Hpr),e(y9,Upr),e(y9,DQ),e(DQ,Jpr),e(y9,Ypr),e(xr,Kpr),M(L9,xr,null),b(f,jPe,_),b(f,Jd,_),e(Jd,x9),e(x9,D8e),M(Ny,D8e,null),e(Jd,Zpr),e(Jd,G8e),e(G8e,eur),b(f,DPe,_),b(f,tr,_),M(jy,tr,null),e(tr,our),e(tr,Yd),e(Yd,rur),e(Yd,GQ),e(GQ,tur),e(Yd,aur),e(Yd,OQ),e(OQ,nur),e(Yd,sur),e(tr,lur),e(tr,Dy),e(Dy,iur),e(Dy,O8e),e(O8e,dur),e(Dy,cur),e(tr,fur),e(tr,xt),M(Gy,xt,null),e(xt,mur),e(xt,V8e),e(V8e,gur),e(xt,hur),e(xt,Kd),e(Kd,pur),e(Kd,X8e),e(X8e,uur),e(Kd,_ur),e(Kd,VQ),e(VQ,bur),e(Kd,vur),e(xt,Fur),M($9,xt,null),e(tr,Tur),e(tr,$r),M(Oy,$r,null),e($r,Mur),e($r,z8e),e(z8e,Eur),e($r,Cur),e($r,rn),e(rn,wur),e(rn,Q8e),e(Q8e,Aur),e(rn,yur),e(rn,W8e),e(W8e,Lur),e(rn,xur),e(rn,H8e),e(H8e,$ur),e(rn,kur),e($r,Sur),e($r,Z),e(Z,k9),e(k9,U8e),e(U8e,Rur),e(k9,Bur),e(k9,XQ),e(XQ,Pur),e(k9,Iur),e(Z,qur),e(Z,S9),e(S9,J8e),e(J8e,Nur),e(S9,jur),e(S9,zQ),e(zQ,Dur),e(S9,Gur),e(Z,Our),e(Z,R9),e(R9,Y8e),e(Y8e,Vur),e(R9,Xur),e(R9,QQ),e(QQ,zur),e(R9,Qur),e(Z,Wur),e(Z,B9),e(B9,K8e),e(K8e,Hur),e(B9,Uur),e(B9,WQ),e(WQ,Jur),e(B9,Yur),e(Z,Kur),e(Z,P9),e(P9,Z8e),e(Z8e,Zur),e(P9,e_r),e(P9,HQ),e(HQ,o_r),e(P9,r_r),e(Z,t_r),e(Z,I9),e(I9,ebe),e(ebe,a_r),e(I9,n_r),e(I9,UQ),e(UQ,s_r),e(I9,l_r),e(Z,i_r),e(Z,q9),e(q9,obe),e(obe,d_r),e(q9,c_r),e(q9,JQ),e(JQ,f_r),e(q9,m_r),e(Z,g_r),e(Z,N9),e(N9,rbe),e(rbe,h_r),e(N9,p_r),e(N9,YQ),e(YQ,u_r),e(N9,__r),e(Z,b_r),e(Z,j9),e(j9,tbe),e(tbe,v_r),e(j9,F_r),e(j9,KQ),e(KQ,T_r),e(j9,M_r),e(Z,E_r),e(Z,D9),e(D9,abe),e(abe,C_r),e(D9,w_r),e(D9,ZQ),e(ZQ,A_r),e(D9,y_r),e(Z,L_r),e(Z,G9),e(G9,nbe),e(nbe,x_r),e(G9,$_r),e(G9,eW),e(eW,k_r),e(G9,S_r),e(Z,R_r),e(Z,O9),e(O9,sbe),e(sbe,B_r),e(O9,P_r),e(O9,oW),e(oW,I_r),e(O9,q_r),e(Z,N_r),e(Z,V9),e(V9,lbe),e(lbe,j_r),e(V9,D_r),e(V9,rW),e(rW,G_r),e(V9,O_r),e(Z,V_r),e(Z,X9),e(X9,ibe),e(ibe,X_r),e(X9,z_r),e(X9,tW),e(tW,Q_r),e(X9,W_r),e(Z,H_r),e(Z,z9),e(z9,dbe),e(dbe,U_r),e(z9,J_r),e(z9,aW),e(aW,Y_r),e(z9,K_r),e(Z,Z_r),e(Z,Q9),e(Q9,cbe),e(cbe,e1r),e(Q9,o1r),e(Q9,nW),e(nW,r1r),e(Q9,t1r),e(Z,a1r),e(Z,W9),e(W9,fbe),e(fbe,n1r),e(W9,s1r),e(W9,sW),e(sW,l1r),e(W9,i1r),e(Z,d1r),e(Z,H9),e(H9,mbe),e(mbe,c1r),e(H9,f1r),e(H9,lW),e(lW,m1r),e(H9,g1r),e(Z,h1r),e(Z,U9),e(U9,gbe),e(gbe,p1r),e(U9,u1r),e(U9,iW),e(iW,_1r),e(U9,b1r),e(Z,v1r),e(Z,J9),e(J9,hbe),e(hbe,F1r),e(J9,T1r),e(J9,dW),e(dW,M1r),e(J9,E1r),e(Z,C1r),e(Z,Y9),e(Y9,pbe),e(pbe,w1r),e(Y9,A1r),e(Y9,cW),e(cW,y1r),e(Y9,L1r),e(Z,x1r),e(Z,K9),e(K9,ube),e(ube,$1r),e(K9,k1r),e(K9,fW),e(fW,S1r),e(K9,R1r),e(Z,B1r),e(Z,Z9),e(Z9,_be),e(_be,P1r),e(Z9,I1r),e(Z9,mW),e(mW,q1r),e(Z9,N1r),e(Z,j1r),e(Z,eM),e(eM,bbe),e(bbe,D1r),e(eM,G1r),e(eM,gW),e(gW,O1r),e(eM,V1r),e(Z,X1r),e(Z,oM),e(oM,vbe),e(vbe,z1r),e(oM,Q1r),e(oM,hW),e(hW,W1r),e(oM,H1r),e(Z,U1r),e(Z,rM),e(rM,Fbe),e(Fbe,J1r),e(rM,Y1r),e(rM,pW),e(pW,K1r),e(rM,Z1r),e($r,e8r),M(tM,$r,null),b(f,GPe,_),b(f,Zd,_),e(Zd,aM),e(aM,Tbe),M(Vy,Tbe,null),e(Zd,o8r),e(Zd,Mbe),e(Mbe,r8r),b(f,OPe,_),b(f,ar,_),M(Xy,ar,null),e(ar,t8r),e(ar,ec),e(ec,a8r),e(ec,uW),e(uW,n8r),e(ec,s8r),e(ec,_W),e(_W,l8r),e(ec,i8r),e(ar,d8r),e(ar,zy),e(zy,c8r),e(zy,Ebe),e(Ebe,f8r),e(zy,m8r),e(ar,g8r),e(ar,$t),M(Qy,$t,null),e($t,h8r),e($t,Cbe),e(Cbe,p8r),e($t,u8r),e($t,oc),e(oc,_8r),e(oc,wbe),e(wbe,b8r),e(oc,v8r),e(oc,bW),e(bW,F8r),e(oc,T8r),e($t,M8r),M(nM,$t,null),e(ar,E8r),e(ar,kr),M(Wy,kr,null),e(kr,C8r),e(kr,Abe),e(Abe,w8r),e(kr,A8r),e(kr,tn),e(tn,y8r),e(tn,ybe),e(ybe,L8r),e(tn,x8r),e(tn,Lbe),e(Lbe,$8r),e(tn,k8r),e(tn,xbe),e(xbe,S8r),e(tn,R8r),e(kr,B8r),e(kr,pe),e(pe,sM),e(sM,$be),e($be,P8r),e(sM,I8r),e(sM,vW),e(vW,q8r),e(sM,N8r),e(pe,j8r),e(pe,lM),e(lM,kbe),e(kbe,D8r),e(lM,G8r),e(lM,FW),e(FW,O8r),e(lM,V8r),e(pe,X8r),e(pe,iM),e(iM,Sbe),e(Sbe,z8r),e(iM,Q8r),e(iM,TW),e(TW,W8r),e(iM,H8r),e(pe,U8r),e(pe,dM),e(dM,Rbe),e(Rbe,J8r),e(dM,Y8r),e(dM,MW),e(MW,K8r),e(dM,Z8r),e(pe,ebr),e(pe,cM),e(cM,Bbe),e(Bbe,obr),e(cM,rbr),e(cM,EW),e(EW,tbr),e(cM,abr),e(pe,nbr),e(pe,fM),e(fM,Pbe),e(Pbe,sbr),e(fM,lbr),e(fM,CW),e(CW,ibr),e(fM,dbr),e(pe,cbr),e(pe,mM),e(mM,Ibe),e(Ibe,fbr),e(mM,mbr),e(mM,wW),e(wW,gbr),e(mM,hbr),e(pe,pbr),e(pe,gM),e(gM,qbe),e(qbe,ubr),e(gM,_br),e(gM,AW),e(AW,bbr),e(gM,vbr),e(pe,Fbr),e(pe,hM),e(hM,Nbe),e(Nbe,Tbr),e(hM,Mbr),e(hM,yW),e(yW,Ebr),e(hM,Cbr),e(pe,wbr),e(pe,pM),e(pM,jbe),e(jbe,Abr),e(pM,ybr),e(pM,LW),e(LW,Lbr),e(pM,xbr),e(pe,$br),e(pe,uM),e(uM,Dbe),e(Dbe,kbr),e(uM,Sbr),e(uM,xW),e(xW,Rbr),e(uM,Bbr),e(pe,Pbr),e(pe,_M),e(_M,Gbe),e(Gbe,Ibr),e(_M,qbr),e(_M,$W),e($W,Nbr),e(_M,jbr),e(pe,Dbr),e(pe,bM),e(bM,Obe),e(Obe,Gbr),e(bM,Obr),e(bM,kW),e(kW,Vbr),e(bM,Xbr),e(pe,zbr),e(pe,vM),e(vM,Vbe),e(Vbe,Qbr),e(vM,Wbr),e(vM,SW),e(SW,Hbr),e(vM,Ubr),e(pe,Jbr),e(pe,FM),e(FM,Xbe),e(Xbe,Ybr),e(FM,Kbr),e(FM,RW),e(RW,Zbr),e(FM,e2r),e(pe,o2r),e(pe,TM),e(TM,zbe),e(zbe,r2r),e(TM,t2r),e(TM,BW),e(BW,a2r),e(TM,n2r),e(pe,s2r),e(pe,MM),e(MM,Qbe),e(Qbe,l2r),e(MM,i2r),e(MM,PW),e(PW,d2r),e(MM,c2r),e(kr,f2r),M(EM,kr,null),b(f,VPe,_),b(f,rc,_),e(rc,CM),e(CM,Wbe),M(Hy,Wbe,null),e(rc,m2r),e(rc,Hbe),e(Hbe,g2r),b(f,XPe,_),b(f,nr,_),M(Uy,nr,null),e(nr,h2r),e(nr,tc),e(tc,p2r),e(tc,IW),e(IW,u2r),e(tc,_2r),e(tc,qW),e(qW,b2r),e(tc,v2r),e(nr,F2r),e(nr,Jy),e(Jy,T2r),e(Jy,Ube),e(Ube,M2r),e(Jy,E2r),e(nr,C2r),e(nr,kt),M(Yy,kt,null),e(kt,w2r),e(kt,Jbe),e(Jbe,A2r),e(kt,y2r),e(kt,ac),e(ac,L2r),e(ac,Ybe),e(Ybe,x2r),e(ac,$2r),e(ac,NW),e(NW,k2r),e(ac,S2r),e(kt,R2r),M(wM,kt,null),e(nr,B2r),e(nr,Sr),M(Ky,Sr,null),e(Sr,P2r),e(Sr,Kbe),e(Kbe,I2r),e(Sr,q2r),e(Sr,an),e(an,N2r),e(an,Zbe),e(Zbe,j2r),e(an,D2r),e(an,e2e),e(e2e,G2r),e(an,O2r),e(an,o2e),e(o2e,V2r),e(an,X2r),e(Sr,z2r),e(Sr,r2e),e(r2e,AM),e(AM,t2e),e(t2e,Q2r),e(AM,W2r),e(AM,jW),e(jW,H2r),e(AM,U2r),e(Sr,J2r),M(yM,Sr,null),b(f,zPe,_),b(f,nc,_),e(nc,LM),e(LM,a2e),M(Zy,a2e,null),e(nc,Y2r),e(nc,n2e),e(n2e,K2r),b(f,QPe,_),b(f,sr,_),M(eL,sr,null),e(sr,Z2r),e(sr,sc),e(sc,evr),e(sc,DW),e(DW,ovr),e(sc,rvr),e(sc,GW),e(GW,tvr),e(sc,avr),e(sr,nvr),e(sr,oL),e(oL,svr),e(oL,s2e),e(s2e,lvr),e(oL,ivr),e(sr,dvr),e(sr,St),M(rL,St,null),e(St,cvr),e(St,l2e),e(l2e,fvr),e(St,mvr),e(St,lc),e(lc,gvr),e(lc,i2e),e(i2e,hvr),e(lc,pvr),e(lc,OW),e(OW,uvr),e(lc,_vr),e(St,bvr),M(xM,St,null),e(sr,vvr),e(sr,Rr),M(tL,Rr,null),e(Rr,Fvr),e(Rr,d2e),e(d2e,Tvr),e(Rr,Mvr),e(Rr,nn),e(nn,Evr),e(nn,c2e),e(c2e,Cvr),e(nn,wvr),e(nn,f2e),e(f2e,Avr),e(nn,yvr),e(nn,m2e),e(m2e,Lvr),e(nn,xvr),e(Rr,$vr),e(Rr,de),e(de,$M),e($M,g2e),e(g2e,kvr),e($M,Svr),e($M,VW),e(VW,Rvr),e($M,Bvr),e(de,Pvr),e(de,kM),e(kM,h2e),e(h2e,Ivr),e(kM,qvr),e(kM,XW),e(XW,Nvr),e(kM,jvr),e(de,Dvr),e(de,SM),e(SM,p2e),e(p2e,Gvr),e(SM,Ovr),e(SM,zW),e(zW,Vvr),e(SM,Xvr),e(de,zvr),e(de,RM),e(RM,u2e),e(u2e,Qvr),e(RM,Wvr),e(RM,QW),e(QW,Hvr),e(RM,Uvr),e(de,Jvr),e(de,BM),e(BM,_2e),e(_2e,Yvr),e(BM,Kvr),e(BM,WW),e(WW,Zvr),e(BM,eFr),e(de,oFr),e(de,PM),e(PM,b2e),e(b2e,rFr),e(PM,tFr),e(PM,HW),e(HW,aFr),e(PM,nFr),e(de,sFr),e(de,IM),e(IM,v2e),e(v2e,lFr),e(IM,iFr),e(IM,UW),e(UW,dFr),e(IM,cFr),e(de,fFr),e(de,qM),e(qM,F2e),e(F2e,mFr),e(qM,gFr),e(qM,JW),e(JW,hFr),e(qM,pFr),e(de,uFr),e(de,NM),e(NM,T2e),e(T2e,_Fr),e(NM,bFr),e(NM,YW),e(YW,vFr),e(NM,FFr),e(de,TFr),e(de,jM),e(jM,M2e),e(M2e,MFr),e(jM,EFr),e(jM,KW),e(KW,CFr),e(jM,wFr),e(de,AFr),e(de,DM),e(DM,E2e),e(E2e,yFr),e(DM,LFr),e(DM,ZW),e(ZW,xFr),e(DM,$Fr),e(de,kFr),e(de,GM),e(GM,C2e),e(C2e,SFr),e(GM,RFr),e(GM,eH),e(eH,BFr),e(GM,PFr),e(de,IFr),e(de,OM),e(OM,w2e),e(w2e,qFr),e(OM,NFr),e(OM,oH),e(oH,jFr),e(OM,DFr),e(de,GFr),e(de,VM),e(VM,A2e),e(A2e,OFr),e(VM,VFr),e(VM,rH),e(rH,XFr),e(VM,zFr),e(de,QFr),e(de,XM),e(XM,y2e),e(y2e,WFr),e(XM,HFr),e(XM,tH),e(tH,UFr),e(XM,JFr),e(de,YFr),e(de,zM),e(zM,L2e),e(L2e,KFr),e(zM,ZFr),e(zM,aH),e(aH,e6r),e(zM,o6r),e(de,r6r),e(de,QM),e(QM,x2e),e(x2e,t6r),e(QM,a6r),e(QM,nH),e(nH,n6r),e(QM,s6r),e(de,l6r),e(de,WM),e(WM,$2e),e($2e,i6r),e(WM,d6r),e(WM,sH),e(sH,c6r),e(WM,f6r),e(de,m6r),e(de,HM),e(HM,k2e),e(k2e,g6r),e(HM,h6r),e(HM,lH),e(lH,p6r),e(HM,u6r),e(de,_6r),e(de,UM),e(UM,S2e),e(S2e,b6r),e(UM,v6r),e(UM,iH),e(iH,F6r),e(UM,T6r),e(Rr,M6r),M(JM,Rr,null),b(f,WPe,_),b(f,ic,_),e(ic,YM),e(YM,R2e),M(aL,R2e,null),e(ic,E6r),e(ic,B2e),e(B2e,C6r),b(f,HPe,_),b(f,lr,_),M(nL,lr,null),e(lr,w6r),e(lr,dc),e(dc,A6r),e(dc,dH),e(dH,y6r),e(dc,L6r),e(dc,cH),e(cH,x6r),e(dc,$6r),e(lr,k6r),e(lr,sL),e(sL,S6r),e(sL,P2e),e(P2e,R6r),e(sL,B6r),e(lr,P6r),e(lr,Rt),M(lL,Rt,null),e(Rt,I6r),e(Rt,I2e),e(I2e,q6r),e(Rt,N6r),e(Rt,cc),e(cc,j6r),e(cc,q2e),e(q2e,D6r),e(cc,G6r),e(cc,fH),e(fH,O6r),e(cc,V6r),e(Rt,X6r),M(KM,Rt,null),e(lr,z6r),e(lr,Br),M(iL,Br,null),e(Br,Q6r),e(Br,N2e),e(N2e,W6r),e(Br,H6r),e(Br,sn),e(sn,U6r),e(sn,j2e),e(j2e,J6r),e(sn,Y6r),e(sn,D2e),e(D2e,K6r),e(sn,Z6r),e(sn,G2e),e(G2e,eTr),e(sn,oTr),e(Br,rTr),e(Br,ce),e(ce,ZM),e(ZM,O2e),e(O2e,tTr),e(ZM,aTr),e(ZM,mH),e(mH,nTr),e(ZM,sTr),e(ce,lTr),e(ce,e4),e(e4,V2e),e(V2e,iTr),e(e4,dTr),e(e4,gH),e(gH,cTr),e(e4,fTr),e(ce,mTr),e(ce,o4),e(o4,X2e),e(X2e,gTr),e(o4,hTr),e(o4,hH),e(hH,pTr),e(o4,uTr),e(ce,_Tr),e(ce,r4),e(r4,z2e),e(z2e,bTr),e(r4,vTr),e(r4,pH),e(pH,FTr),e(r4,TTr),e(ce,MTr),e(ce,t4),e(t4,Q2e),e(Q2e,ETr),e(t4,CTr),e(t4,uH),e(uH,wTr),e(t4,ATr),e(ce,yTr),e(ce,a4),e(a4,W2e),e(W2e,LTr),e(a4,xTr),e(a4,_H),e(_H,$Tr),e(a4,kTr),e(ce,STr),e(ce,n4),e(n4,H2e),e(H2e,RTr),e(n4,BTr),e(n4,bH),e(bH,PTr),e(n4,ITr),e(ce,qTr),e(ce,s4),e(s4,U2e),e(U2e,NTr),e(s4,jTr),e(s4,vH),e(vH,DTr),e(s4,GTr),e(ce,OTr),e(ce,l4),e(l4,J2e),e(J2e,VTr),e(l4,XTr),e(l4,FH),e(FH,zTr),e(l4,QTr),e(ce,WTr),e(ce,i4),e(i4,Y2e),e(Y2e,HTr),e(i4,UTr),e(i4,TH),e(TH,JTr),e(i4,YTr),e(ce,KTr),e(ce,d4),e(d4,K2e),e(K2e,ZTr),e(d4,e9r),e(d4,MH),e(MH,o9r),e(d4,r9r),e(ce,t9r),e(ce,c4),e(c4,Z2e),e(Z2e,a9r),e(c4,n9r),e(c4,EH),e(EH,s9r),e(c4,l9r),e(ce,i9r),e(ce,f4),e(f4,eve),e(eve,d9r),e(f4,c9r),e(f4,CH),e(CH,f9r),e(f4,m9r),e(ce,g9r),e(ce,m4),e(m4,ove),e(ove,h9r),e(m4,p9r),e(m4,wH),e(wH,u9r),e(m4,_9r),e(ce,b9r),e(ce,g4),e(g4,rve),e(rve,v9r),e(g4,F9r),e(g4,AH),e(AH,T9r),e(g4,M9r),e(ce,E9r),e(ce,h4),e(h4,tve),e(tve,C9r),e(h4,w9r),e(h4,yH),e(yH,A9r),e(h4,y9r),e(ce,L9r),e(ce,p4),e(p4,ave),e(ave,x9r),e(p4,$9r),e(p4,LH),e(LH,k9r),e(p4,S9r),e(ce,R9r),e(ce,u4),e(u4,nve),e(nve,B9r),e(u4,P9r),e(u4,xH),e(xH,I9r),e(u4,q9r),e(ce,N9r),e(ce,_4),e(_4,sve),e(sve,j9r),e(_4,D9r),e(_4,$H),e($H,G9r),e(_4,O9r),e(ce,V9r),e(ce,b4),e(b4,lve),e(lve,X9r),e(b4,z9r),e(b4,kH),e(kH,Q9r),e(b4,W9r),e(Br,H9r),M(v4,Br,null),b(f,UPe,_),b(f,fc,_),e(fc,F4),e(F4,ive),M(dL,ive,null),e(fc,U9r),e(fc,dve),e(dve,J9r),b(f,JPe,_),b(f,ir,_),M(cL,ir,null),e(ir,Y9r),e(ir,mc),e(mc,K9r),e(mc,SH),e(SH,Z9r),e(mc,eMr),e(mc,RH),e(RH,oMr),e(mc,rMr),e(ir,tMr),e(ir,fL),e(fL,aMr),e(fL,cve),e(cve,nMr),e(fL,sMr),e(ir,lMr),e(ir,Bt),M(mL,Bt,null),e(Bt,iMr),e(Bt,fve),e(fve,dMr),e(Bt,cMr),e(Bt,gc),e(gc,fMr),e(gc,mve),e(mve,mMr),e(gc,gMr),e(gc,BH),e(BH,hMr),e(gc,pMr),e(Bt,uMr),M(T4,Bt,null),e(ir,_Mr),e(ir,Pr),M(gL,Pr,null),e(Pr,bMr),e(Pr,gve),e(gve,vMr),e(Pr,FMr),e(Pr,ln),e(ln,TMr),e(ln,hve),e(hve,MMr),e(ln,EMr),e(ln,pve),e(pve,CMr),e(ln,wMr),e(ln,uve),e(uve,AMr),e(ln,yMr),e(Pr,LMr),e(Pr,_ve),e(_ve,M4),e(M4,bve),e(bve,xMr),e(M4,$Mr),e(M4,PH),e(PH,kMr),e(M4,SMr),e(Pr,RMr),M(E4,Pr,null),b(f,YPe,_),b(f,hc,_),e(hc,C4),e(C4,vve),M(hL,vve,null),e(hc,BMr),e(hc,Fve),e(Fve,PMr),b(f,KPe,_),b(f,dr,_),M(pL,dr,null),e(dr,IMr),e(dr,pc),e(pc,qMr),e(pc,IH),e(IH,NMr),e(pc,jMr),e(pc,qH),e(qH,DMr),e(pc,GMr),e(dr,OMr),e(dr,uL),e(uL,VMr),e(uL,Tve),e(Tve,XMr),e(uL,zMr),e(dr,QMr),e(dr,Pt),M(_L,Pt,null),e(Pt,WMr),e(Pt,Mve),e(Mve,HMr),e(Pt,UMr),e(Pt,uc),e(uc,JMr),e(uc,Eve),e(Eve,YMr),e(uc,KMr),e(uc,NH),e(NH,ZMr),e(uc,e4r),e(Pt,o4r),M(w4,Pt,null),e(dr,r4r),e(dr,Ir),M(bL,Ir,null),e(Ir,t4r),e(Ir,Cve),e(Cve,a4r),e(Ir,n4r),e(Ir,dn),e(dn,s4r),e(dn,wve),e(wve,l4r),e(dn,i4r),e(dn,Ave),e(Ave,d4r),e(dn,c4r),e(dn,yve),e(yve,f4r),e(dn,m4r),e(Ir,g4r),e(Ir,Lve),e(Lve,A4),e(A4,xve),e(xve,h4r),e(A4,p4r),e(A4,jH),e(jH,u4r),e(A4,_4r),e(Ir,b4r),M(y4,Ir,null),b(f,ZPe,_),b(f,_c,_),e(_c,L4),e(L4,$ve),M(vL,$ve,null),e(_c,v4r),e(_c,kve),e(kve,F4r),b(f,eIe,_),b(f,cr,_),M(FL,cr,null),e(cr,T4r),e(cr,bc),e(bc,M4r),e(bc,DH),e(DH,E4r),e(bc,C4r),e(bc,GH),e(GH,w4r),e(bc,A4r),e(cr,y4r),e(cr,TL),e(TL,L4r),e(TL,Sve),e(Sve,x4r),e(TL,$4r),e(cr,k4r),e(cr,It),M(ML,It,null),e(It,S4r),e(It,Rve),e(Rve,R4r),e(It,B4r),e(It,vc),e(vc,P4r),e(vc,Bve),e(Bve,I4r),e(vc,q4r),e(vc,OH),e(OH,N4r),e(vc,j4r),e(It,D4r),M(x4,It,null),e(cr,G4r),e(cr,qr),M(EL,qr,null),e(qr,O4r),e(qr,Pve),e(Pve,V4r),e(qr,X4r),e(qr,cn),e(cn,z4r),e(cn,Ive),e(Ive,Q4r),e(cn,W4r),e(cn,qve),e(qve,H4r),e(cn,U4r),e(cn,Nve),e(Nve,J4r),e(cn,Y4r),e(qr,K4r),e(qr,oe),e(oe,$4),e($4,jve),e(jve,Z4r),e($4,eEr),e($4,VH),e(VH,oEr),e($4,rEr),e(oe,tEr),e(oe,k4),e(k4,Dve),e(Dve,aEr),e(k4,nEr),e(k4,XH),e(XH,sEr),e(k4,lEr),e(oe,iEr),e(oe,S4),e(S4,Gve),e(Gve,dEr),e(S4,cEr),e(S4,zH),e(zH,fEr),e(S4,mEr),e(oe,gEr),e(oe,R4),e(R4,Ove),e(Ove,hEr),e(R4,pEr),e(R4,QH),e(QH,uEr),e(R4,_Er),e(oe,bEr),e(oe,B4),e(B4,Vve),e(Vve,vEr),e(B4,FEr),e(B4,WH),e(WH,TEr),e(B4,MEr),e(oe,EEr),e(oe,P4),e(P4,Xve),e(Xve,CEr),e(P4,wEr),e(P4,HH),e(HH,AEr),e(P4,yEr),e(oe,LEr),e(oe,I4),e(I4,zve),e(zve,xEr),e(I4,$Er),e(I4,UH),e(UH,kEr),e(I4,SEr),e(oe,REr),e(oe,q4),e(q4,Qve),e(Qve,BEr),e(q4,PEr),e(q4,JH),e(JH,IEr),e(q4,qEr),e(oe,NEr),e(oe,N4),e(N4,Wve),e(Wve,jEr),e(N4,DEr),e(N4,YH),e(YH,GEr),e(N4,OEr),e(oe,VEr),e(oe,j4),e(j4,Hve),e(Hve,XEr),e(j4,zEr),e(j4,KH),e(KH,QEr),e(j4,WEr),e(oe,HEr),e(oe,D4),e(D4,Uve),e(Uve,UEr),e(D4,JEr),e(D4,ZH),e(ZH,YEr),e(D4,KEr),e(oe,ZEr),e(oe,G4),e(G4,Jve),e(Jve,e5r),e(G4,o5r),e(G4,eU),e(eU,r5r),e(G4,t5r),e(oe,a5r),e(oe,O4),e(O4,Yve),e(Yve,n5r),e(O4,s5r),e(O4,oU),e(oU,l5r),e(O4,i5r),e(oe,d5r),e(oe,V4),e(V4,Kve),e(Kve,c5r),e(V4,f5r),e(V4,rU),e(rU,m5r),e(V4,g5r),e(oe,h5r),e(oe,X4),e(X4,Zve),e(Zve,p5r),e(X4,u5r),e(X4,tU),e(tU,_5r),e(X4,b5r),e(oe,v5r),e(oe,z4),e(z4,eFe),e(eFe,F5r),e(z4,T5r),e(z4,aU),e(aU,M5r),e(z4,E5r),e(oe,C5r),e(oe,Q4),e(Q4,oFe),e(oFe,w5r),e(Q4,A5r),e(Q4,nU),e(nU,y5r),e(Q4,L5r),e(oe,x5r),e(oe,W4),e(W4,rFe),e(rFe,$5r),e(W4,k5r),e(W4,sU),e(sU,S5r),e(W4,R5r),e(oe,B5r),e(oe,H4),e(H4,tFe),e(tFe,P5r),e(H4,I5r),e(H4,lU),e(lU,q5r),e(H4,N5r),e(oe,j5r),e(oe,U4),e(U4,aFe),e(aFe,D5r),e(U4,G5r),e(U4,iU),e(iU,O5r),e(U4,V5r),e(oe,X5r),e(oe,J4),e(J4,nFe),e(nFe,z5r),e(J4,Q5r),e(J4,dU),e(dU,W5r),e(J4,H5r),e(oe,U5r),e(oe,Y4),e(Y4,sFe),e(sFe,J5r),e(Y4,Y5r),e(Y4,cU),e(cU,K5r),e(Y4,Z5r),e(oe,eCr),e(oe,K4),e(K4,lFe),e(lFe,oCr),e(K4,rCr),e(K4,fU),e(fU,tCr),e(K4,aCr),e(oe,nCr),e(oe,Z4),e(Z4,iFe),e(iFe,sCr),e(Z4,lCr),e(Z4,mU),e(mU,iCr),e(Z4,dCr),e(oe,cCr),e(oe,eE),e(eE,dFe),e(dFe,fCr),e(eE,mCr),e(eE,gU),e(gU,gCr),e(eE,hCr),e(qr,pCr),M(oE,qr,null),b(f,oIe,_),b(f,Fc,_),e(Fc,rE),e(rE,cFe),M(CL,cFe,null),e(Fc,uCr),e(Fc,fFe),e(fFe,_Cr),b(f,rIe,_),b(f,fr,_),M(wL,fr,null),e(fr,bCr),e(fr,Tc),e(Tc,vCr),e(Tc,hU),e(hU,FCr),e(Tc,TCr),e(Tc,pU),e(pU,MCr),e(Tc,ECr),e(fr,CCr),e(fr,AL),e(AL,wCr),e(AL,mFe),e(mFe,ACr),e(AL,yCr),e(fr,LCr),e(fr,qt),M(yL,qt,null),e(qt,xCr),e(qt,gFe),e(gFe,$Cr),e(qt,kCr),e(qt,Mc),e(Mc,SCr),e(Mc,hFe),e(hFe,RCr),e(Mc,BCr),e(Mc,uU),e(uU,PCr),e(Mc,ICr),e(qt,qCr),M(tE,qt,null),e(fr,NCr),e(fr,Nr),M(LL,Nr,null),e(Nr,jCr),e(Nr,pFe),e(pFe,DCr),e(Nr,GCr),e(Nr,fn),e(fn,OCr),e(fn,uFe),e(uFe,VCr),e(fn,XCr),e(fn,_Fe),e(_Fe,zCr),e(fn,QCr),e(fn,bFe),e(bFe,WCr),e(fn,HCr),e(Nr,UCr),e(Nr,ke),e(ke,aE),e(aE,vFe),e(vFe,JCr),e(aE,YCr),e(aE,_U),e(_U,KCr),e(aE,ZCr),e(ke,e3r),e(ke,nE),e(nE,FFe),e(FFe,o3r),e(nE,r3r),e(nE,bU),e(bU,t3r),e(nE,a3r),e(ke,n3r),e(ke,sE),e(sE,TFe),e(TFe,s3r),e(sE,l3r),e(sE,vU),e(vU,i3r),e(sE,d3r),e(ke,c3r),e(ke,lE),e(lE,MFe),e(MFe,f3r),e(lE,m3r),e(lE,FU),e(FU,g3r),e(lE,h3r),e(ke,p3r),e(ke,iE),e(iE,EFe),e(EFe,u3r),e(iE,_3r),e(iE,TU),e(TU,b3r),e(iE,v3r),e(ke,F3r),e(ke,dE),e(dE,CFe),e(CFe,T3r),e(dE,M3r),e(dE,MU),e(MU,E3r),e(dE,C3r),e(ke,w3r),e(ke,cE),e(cE,wFe),e(wFe,A3r),e(cE,y3r),e(cE,EU),e(EU,L3r),e(cE,x3r),e(ke,$3r),e(ke,fE),e(fE,AFe),e(AFe,k3r),e(fE,S3r),e(fE,CU),e(CU,R3r),e(fE,B3r),e(ke,P3r),e(ke,mE),e(mE,yFe),e(yFe,I3r),e(mE,q3r),e(mE,wU),e(wU,N3r),e(mE,j3r),e(Nr,D3r),M(gE,Nr,null),b(f,tIe,_),b(f,Ec,_),e(Ec,hE),e(hE,LFe),M(xL,LFe,null),e(Ec,G3r),e(Ec,xFe),e(xFe,O3r),b(f,aIe,_),b(f,mr,_),M($L,mr,null),e(mr,V3r),e(mr,Cc),e(Cc,X3r),e(Cc,AU),e(AU,z3r),e(Cc,Q3r),e(Cc,yU),e(yU,W3r),e(Cc,H3r),e(mr,U3r),e(mr,kL),e(kL,J3r),e(kL,$Fe),e($Fe,Y3r),e(kL,K3r),e(mr,Z3r),e(mr,Nt),M(SL,Nt,null),e(Nt,ewr),e(Nt,kFe),e(kFe,owr),e(Nt,rwr),e(Nt,wc),e(wc,twr),e(wc,SFe),e(SFe,awr),e(wc,nwr),e(wc,LU),e(LU,swr),e(wc,lwr),e(Nt,iwr),M(pE,Nt,null),e(mr,dwr),e(mr,jr),M(RL,jr,null),e(jr,cwr),e(jr,RFe),e(RFe,fwr),e(jr,mwr),e(jr,mn),e(mn,gwr),e(mn,BFe),e(BFe,hwr),e(mn,pwr),e(mn,PFe),e(PFe,uwr),e(mn,_wr),e(mn,IFe),e(IFe,bwr),e(mn,vwr),e(jr,Fwr),e(jr,Me),e(Me,uE),e(uE,qFe),e(qFe,Twr),e(uE,Mwr),e(uE,xU),e(xU,Ewr),e(uE,Cwr),e(Me,wwr),e(Me,_E),e(_E,NFe),e(NFe,Awr),e(_E,ywr),e(_E,$U),e($U,Lwr),e(_E,xwr),e(Me,$wr),e(Me,bE),e(bE,jFe),e(jFe,kwr),e(bE,Swr),e(bE,kU),e(kU,Rwr),e(bE,Bwr),e(Me,Pwr),e(Me,vE),e(vE,DFe),e(DFe,Iwr),e(vE,qwr),e(vE,SU),e(SU,Nwr),e(vE,jwr),e(Me,Dwr),e(Me,FE),e(FE,GFe),e(GFe,Gwr),e(FE,Owr),e(FE,RU),e(RU,Vwr),e(FE,Xwr),e(Me,zwr),e(Me,TE),e(TE,OFe),e(OFe,Qwr),e(TE,Wwr),e(TE,BU),e(BU,Hwr),e(TE,Uwr),e(Me,Jwr),e(Me,ME),e(ME,VFe),e(VFe,Ywr),e(ME,Kwr),e(ME,PU),e(PU,Zwr),e(ME,eAr),e(Me,oAr),e(Me,EE),e(EE,XFe),e(XFe,rAr),e(EE,tAr),e(EE,IU),e(IU,aAr),e(EE,nAr),e(Me,sAr),e(Me,CE),e(CE,zFe),e(zFe,lAr),e(CE,iAr),e(CE,qU),e(qU,dAr),e(CE,cAr),e(Me,fAr),e(Me,wE),e(wE,QFe),e(QFe,mAr),e(wE,gAr),e(wE,NU),e(NU,hAr),e(wE,pAr),e(Me,uAr),e(Me,AE),e(AE,WFe),e(WFe,_Ar),e(AE,bAr),e(AE,jU),e(jU,vAr),e(AE,FAr),e(Me,TAr),e(Me,yE),e(yE,HFe),e(HFe,MAr),e(yE,EAr),e(yE,DU),e(DU,CAr),e(yE,wAr),e(jr,AAr),M(LE,jr,null),b(f,nIe,_),b(f,Ac,_),e(Ac,xE),e(xE,UFe),M(BL,UFe,null),e(Ac,yAr),e(Ac,JFe),e(JFe,LAr),b(f,sIe,_),b(f,gr,_),M(PL,gr,null),e(gr,xAr),e(gr,yc),e(yc,$Ar),e(yc,GU),e(GU,kAr),e(yc,SAr),e(yc,OU),e(OU,RAr),e(yc,BAr),e(gr,PAr),e(gr,IL),e(IL,IAr),e(IL,YFe),e(YFe,qAr),e(IL,NAr),e(gr,jAr),e(gr,jt),M(qL,jt,null),e(jt,DAr),e(jt,KFe),e(KFe,GAr),e(jt,OAr),e(jt,Lc),e(Lc,VAr),e(Lc,ZFe),e(ZFe,XAr),e(Lc,zAr),e(Lc,VU),e(VU,QAr),e(Lc,WAr),e(jt,HAr),M($E,jt,null),e(gr,UAr),e(gr,Dr),M(NL,Dr,null),e(Dr,JAr),e(Dr,e6e),e(e6e,YAr),e(Dr,KAr),e(Dr,gn),e(gn,ZAr),e(gn,o6e),e(o6e,e0r),e(gn,o0r),e(gn,r6e),e(r6e,r0r),e(gn,t0r),e(gn,t6e),e(t6e,a0r),e(gn,n0r),e(Dr,s0r),e(Dr,Le),e(Le,kE),e(kE,a6e),e(a6e,l0r),e(kE,i0r),e(kE,XU),e(XU,d0r),e(kE,c0r),e(Le,f0r),e(Le,SE),e(SE,n6e),e(n6e,m0r),e(SE,g0r),e(SE,zU),e(zU,h0r),e(SE,p0r),e(Le,u0r),e(Le,RE),e(RE,s6e),e(s6e,_0r),e(RE,b0r),e(RE,QU),e(QU,v0r),e(RE,F0r),e(Le,T0r),e(Le,BE),e(BE,l6e),e(l6e,M0r),e(BE,E0r),e(BE,WU),e(WU,C0r),e(BE,w0r),e(Le,A0r),e(Le,PE),e(PE,i6e),e(i6e,y0r),e(PE,L0r),e(PE,HU),e(HU,x0r),e(PE,$0r),e(Le,k0r),e(Le,IE),e(IE,d6e),e(d6e,S0r),e(IE,R0r),e(IE,UU),e(UU,B0r),e(IE,P0r),e(Le,I0r),e(Le,qE),e(qE,c6e),e(c6e,q0r),e(qE,N0r),e(qE,JU),e(JU,j0r),e(qE,D0r),e(Le,G0r),e(Le,NE),e(NE,f6e),e(f6e,O0r),e(NE,V0r),e(NE,YU),e(YU,X0r),e(NE,z0r),e(Le,Q0r),e(Le,jE),e(jE,m6e),e(m6e,W0r),e(jE,H0r),e(jE,KU),e(KU,U0r),e(jE,J0r),e(Le,Y0r),e(Le,DE),e(DE,g6e),e(g6e,K0r),e(DE,Z0r),e(DE,ZU),e(ZU,eyr),e(DE,oyr),e(Dr,ryr),M(GE,Dr,null),b(f,lIe,_),b(f,xc,_),e(xc,OE),e(OE,h6e),M(jL,h6e,null),e(xc,tyr),e(xc,p6e),e(p6e,ayr),b(f,iIe,_),b(f,hr,_),M(DL,hr,null),e(hr,nyr),e(hr,$c),e($c,syr),e($c,eJ),e(eJ,lyr),e($c,iyr),e($c,oJ),e(oJ,dyr),e($c,cyr),e(hr,fyr),e(hr,GL),e(GL,myr),e(GL,u6e),e(u6e,gyr),e(GL,hyr),e(hr,pyr),e(hr,Dt),M(OL,Dt,null),e(Dt,uyr),e(Dt,_6e),e(_6e,_yr),e(Dt,byr),e(Dt,kc),e(kc,vyr),e(kc,b6e),e(b6e,Fyr),e(kc,Tyr),e(kc,rJ),e(rJ,Myr),e(kc,Eyr),e(Dt,Cyr),M(VE,Dt,null),e(hr,wyr),e(hr,Gr),M(VL,Gr,null),e(Gr,Ayr),e(Gr,v6e),e(v6e,yyr),e(Gr,Lyr),e(Gr,hn),e(hn,xyr),e(hn,F6e),e(F6e,$yr),e(hn,kyr),e(hn,T6e),e(T6e,Syr),e(hn,Ryr),e(hn,M6e),e(M6e,Byr),e(hn,Pyr),e(Gr,Iyr),e(Gr,Se),e(Se,XE),e(XE,E6e),e(E6e,qyr),e(XE,Nyr),e(XE,tJ),e(tJ,jyr),e(XE,Dyr),e(Se,Gyr),e(Se,zE),e(zE,C6e),e(C6e,Oyr),e(zE,Vyr),e(zE,aJ),e(aJ,Xyr),e(zE,zyr),e(Se,Qyr),e(Se,QE),e(QE,w6e),e(w6e,Wyr),e(QE,Hyr),e(QE,nJ),e(nJ,Uyr),e(QE,Jyr),e(Se,Yyr),e(Se,WE),e(WE,A6e),e(A6e,Kyr),e(WE,Zyr),e(WE,sJ),e(sJ,eLr),e(WE,oLr),e(Se,rLr),e(Se,HE),e(HE,y6e),e(y6e,tLr),e(HE,aLr),e(HE,lJ),e(lJ,nLr),e(HE,sLr),e(Se,lLr),e(Se,UE),e(UE,L6e),e(L6e,iLr),e(UE,dLr),e(UE,iJ),e(iJ,cLr),e(UE,fLr),e(Se,mLr),e(Se,JE),e(JE,x6e),e(x6e,gLr),e(JE,hLr),e(JE,dJ),e(dJ,pLr),e(JE,uLr),e(Se,_Lr),e(Se,YE),e(YE,$6e),e($6e,bLr),e(YE,vLr),e(YE,cJ),e(cJ,FLr),e(YE,TLr),e(Se,MLr),e(Se,KE),e(KE,k6e),e(k6e,ELr),e(KE,CLr),e(KE,fJ),e(fJ,wLr),e(KE,ALr),e(Gr,yLr),M(ZE,Gr,null),b(f,dIe,_),b(f,Sc,_),e(Sc,e5),e(e5,S6e),M(XL,S6e,null),e(Sc,LLr),e(Sc,R6e),e(R6e,xLr),b(f,cIe,_),b(f,pr,_),M(zL,pr,null),e(pr,$Lr),e(pr,Rc),e(Rc,kLr),e(Rc,mJ),e(mJ,SLr),e(Rc,RLr),e(Rc,gJ),e(gJ,BLr),e(Rc,PLr),e(pr,ILr),e(pr,QL),e(QL,qLr),e(QL,B6e),e(B6e,NLr),e(QL,jLr),e(pr,DLr),e(pr,Gt),M(WL,Gt,null),e(Gt,GLr),e(Gt,P6e),e(P6e,OLr),e(Gt,VLr),e(Gt,Bc),e(Bc,XLr),e(Bc,I6e),e(I6e,zLr),e(Bc,QLr),e(Bc,hJ),e(hJ,WLr),e(Bc,HLr),e(Gt,ULr),M(o5,Gt,null),e(pr,JLr),e(pr,Or),M(HL,Or,null),e(Or,YLr),e(Or,q6e),e(q6e,KLr),e(Or,ZLr),e(Or,pn),e(pn,e7r),e(pn,N6e),e(N6e,o7r),e(pn,r7r),e(pn,j6e),e(j6e,t7r),e(pn,a7r),e(pn,D6e),e(D6e,n7r),e(pn,s7r),e(Or,l7r),e(Or,xe),e(xe,r5),e(r5,G6e),e(G6e,i7r),e(r5,d7r),e(r5,pJ),e(pJ,c7r),e(r5,f7r),e(xe,m7r),e(xe,t5),e(t5,O6e),e(O6e,g7r),e(t5,h7r),e(t5,uJ),e(uJ,p7r),e(t5,u7r),e(xe,_7r),e(xe,a5),e(a5,V6e),e(V6e,b7r),e(a5,v7r),e(a5,_J),e(_J,F7r),e(a5,T7r),e(xe,M7r),e(xe,n5),e(n5,X6e),e(X6e,E7r),e(n5,C7r),e(n5,bJ),e(bJ,w7r),e(n5,A7r),e(xe,y7r),e(xe,s5),e(s5,z6e),e(z6e,L7r),e(s5,x7r),e(s5,vJ),e(vJ,$7r),e(s5,k7r),e(xe,S7r),e(xe,l5),e(l5,Q6e),e(Q6e,R7r),e(l5,B7r),e(l5,FJ),e(FJ,P7r),e(l5,I7r),e(xe,q7r),e(xe,i5),e(i5,W6e),e(W6e,N7r),e(i5,j7r),e(i5,TJ),e(TJ,D7r),e(i5,G7r),e(xe,O7r),e(xe,d5),e(d5,H6e),e(H6e,V7r),e(d5,X7r),e(d5,MJ),e(MJ,z7r),e(d5,Q7r),e(xe,W7r),e(xe,c5),e(c5,U6e),e(U6e,H7r),e(c5,U7r),e(c5,EJ),e(EJ,J7r),e(c5,Y7r),e(xe,K7r),e(xe,f5),e(f5,J6e),e(J6e,Z7r),e(f5,exr),e(f5,CJ),e(CJ,oxr),e(f5,rxr),e(Or,txr),M(m5,Or,null),b(f,fIe,_),b(f,Pc,_),e(Pc,g5),e(g5,Y6e),M(UL,Y6e,null),e(Pc,axr),e(Pc,K6e),e(K6e,nxr),b(f,mIe,_),b(f,ur,_),M(JL,ur,null),e(ur,sxr),e(ur,Ic),e(Ic,lxr),e(Ic,wJ),e(wJ,ixr),e(Ic,dxr),e(Ic,AJ),e(AJ,cxr),e(Ic,fxr),e(ur,mxr),e(ur,YL),e(YL,gxr),e(YL,Z6e),e(Z6e,hxr),e(YL,pxr),e(ur,uxr),e(ur,Ot),M(KL,Ot,null),e(Ot,_xr),e(Ot,eTe),e(eTe,bxr),e(Ot,vxr),e(Ot,qc),e(qc,Fxr),e(qc,oTe),e(oTe,Txr),e(qc,Mxr),e(qc,yJ),e(yJ,Exr),e(qc,Cxr),e(Ot,wxr),M(h5,Ot,null),e(ur,Axr),e(ur,Vr),M(ZL,Vr,null),e(Vr,yxr),e(Vr,rTe),e(rTe,Lxr),e(Vr,xxr),e(Vr,un),e(un,$xr),e(un,tTe),e(tTe,kxr),e(un,Sxr),e(un,aTe),e(aTe,Rxr),e(un,Bxr),e(un,nTe),e(nTe,Pxr),e(un,Ixr),e(Vr,qxr),e(Vr,$e),e($e,p5),e(p5,sTe),e(sTe,Nxr),e(p5,jxr),e(p5,LJ),e(LJ,Dxr),e(p5,Gxr),e($e,Oxr),e($e,u5),e(u5,lTe),e(lTe,Vxr),e(u5,Xxr),e(u5,xJ),e(xJ,zxr),e(u5,Qxr),e($e,Wxr),e($e,_5),e(_5,iTe),e(iTe,Hxr),e(_5,Uxr),e(_5,$J),e($J,Jxr),e(_5,Yxr),e($e,Kxr),e($e,b5),e(b5,dTe),e(dTe,Zxr),e(b5,e$r),e(b5,kJ),e(kJ,o$r),e(b5,r$r),e($e,t$r),e($e,v5),e(v5,cTe),e(cTe,a$r),e(v5,n$r),e(v5,SJ),e(SJ,s$r),e(v5,l$r),e($e,i$r),e($e,F5),e(F5,fTe),e(fTe,d$r),e(F5,c$r),e(F5,RJ),e(RJ,f$r),e(F5,m$r),e($e,g$r),e($e,T5),e(T5,mTe),e(mTe,h$r),e(T5,p$r),e(T5,BJ),e(BJ,u$r),e(T5,_$r),e($e,b$r),e($e,M5),e(M5,gTe),e(gTe,v$r),e(M5,F$r),e(M5,PJ),e(PJ,T$r),e(M5,M$r),e($e,E$r),e($e,E5),e(E5,hTe),e(hTe,C$r),e(E5,w$r),e(E5,IJ),e(IJ,A$r),e(E5,y$r),e($e,L$r),e($e,C5),e(C5,pTe),e(pTe,x$r),e(C5,$$r),e(C5,qJ),e(qJ,k$r),e(C5,S$r),e(Vr,R$r),M(w5,Vr,null),b(f,gIe,_),b(f,Nc,_),e(Nc,A5),e(A5,uTe),M(e7,uTe,null),e(Nc,B$r),e(Nc,_Te),e(_Te,P$r),b(f,hIe,_),b(f,_r,_),M(o7,_r,null),e(_r,I$r),e(_r,jc),e(jc,q$r),e(jc,NJ),e(NJ,N$r),e(jc,j$r),e(jc,jJ),e(jJ,D$r),e(jc,G$r),e(_r,O$r),e(_r,r7),e(r7,V$r),e(r7,bTe),e(bTe,X$r),e(r7,z$r),e(_r,Q$r),e(_r,Vt),M(t7,Vt,null),e(Vt,W$r),e(Vt,vTe),e(vTe,H$r),e(Vt,U$r),e(Vt,Dc),e(Dc,J$r),e(Dc,FTe),e(FTe,Y$r),e(Dc,K$r),e(Dc,DJ),e(DJ,Z$r),e(Dc,ekr),e(Vt,okr),M(y5,Vt,null),e(_r,rkr),e(_r,Xr),M(a7,Xr,null),e(Xr,tkr),e(Xr,TTe),e(TTe,akr),e(Xr,nkr),e(Xr,_n),e(_n,skr),e(_n,MTe),e(MTe,lkr),e(_n,ikr),e(_n,ETe),e(ETe,dkr),e(_n,ckr),e(_n,CTe),e(CTe,fkr),e(_n,mkr),e(Xr,gkr),e(Xr,De),e(De,L5),e(L5,wTe),e(wTe,hkr),e(L5,pkr),e(L5,GJ),e(GJ,ukr),e(L5,_kr),e(De,bkr),e(De,x5),e(x5,ATe),e(ATe,vkr),e(x5,Fkr),e(x5,OJ),e(OJ,Tkr),e(x5,Mkr),e(De,Ekr),e(De,$5),e($5,yTe),e(yTe,Ckr),e($5,wkr),e($5,VJ),e(VJ,Akr),e($5,ykr),e(De,Lkr),e(De,k5),e(k5,LTe),e(LTe,xkr),e(k5,$kr),e(k5,XJ),e(XJ,kkr),e(k5,Skr),e(De,Rkr),e(De,S5),e(S5,xTe),e(xTe,Bkr),e(S5,Pkr),e(S5,zJ),e(zJ,Ikr),e(S5,qkr),e(De,Nkr),e(De,R5),e(R5,$Te),e($Te,jkr),e(R5,Dkr),e(R5,QJ),e(QJ,Gkr),e(R5,Okr),e(De,Vkr),e(De,B5),e(B5,kTe),e(kTe,Xkr),e(B5,zkr),e(B5,WJ),e(WJ,Qkr),e(B5,Wkr),e(De,Hkr),e(De,P5),e(P5,STe),e(STe,Ukr),e(P5,Jkr),e(P5,HJ),e(HJ,Ykr),e(P5,Kkr),e(Xr,Zkr),M(I5,Xr,null),b(f,pIe,_),b(f,Gc,_),e(Gc,q5),e(q5,RTe),M(n7,RTe,null),e(Gc,eSr),e(Gc,BTe),e(BTe,oSr),b(f,uIe,_),b(f,br,_),M(s7,br,null),e(br,rSr),e(br,Oc),e(Oc,tSr),e(Oc,UJ),e(UJ,aSr),e(Oc,nSr),e(Oc,JJ),e(JJ,sSr),e(Oc,lSr),e(br,iSr),e(br,l7),e(l7,dSr),e(l7,PTe),e(PTe,cSr),e(l7,fSr),e(br,mSr),e(br,Xt),M(i7,Xt,null),e(Xt,gSr),e(Xt,ITe),e(ITe,hSr),e(Xt,pSr),e(Xt,Vc),e(Vc,uSr),e(Vc,qTe),e(qTe,_Sr),e(Vc,bSr),e(Vc,YJ),e(YJ,vSr),e(Vc,FSr),e(Xt,TSr),M(N5,Xt,null),e(br,MSr),e(br,zr),M(d7,zr,null),e(zr,ESr),e(zr,NTe),e(NTe,CSr),e(zr,wSr),e(zr,bn),e(bn,ASr),e(bn,jTe),e(jTe,ySr),e(bn,LSr),e(bn,DTe),e(DTe,xSr),e(bn,$Sr),e(bn,GTe),e(GTe,kSr),e(bn,SSr),e(zr,RSr),e(zr,Ge),e(Ge,j5),e(j5,OTe),e(OTe,BSr),e(j5,PSr),e(j5,KJ),e(KJ,ISr),e(j5,qSr),e(Ge,NSr),e(Ge,D5),e(D5,VTe),e(VTe,jSr),e(D5,DSr),e(D5,ZJ),e(ZJ,GSr),e(D5,OSr),e(Ge,VSr),e(Ge,G5),e(G5,XTe),e(XTe,XSr),e(G5,zSr),e(G5,eY),e(eY,QSr),e(G5,WSr),e(Ge,HSr),e(Ge,O5),e(O5,zTe),e(zTe,USr),e(O5,JSr),e(O5,oY),e(oY,YSr),e(O5,KSr),e(Ge,ZSr),e(Ge,V5),e(V5,QTe),e(QTe,eRr),e(V5,oRr),e(V5,rY),e(rY,rRr),e(V5,tRr),e(Ge,aRr),e(Ge,X5),e(X5,WTe),e(WTe,nRr),e(X5,sRr),e(X5,tY),e(tY,lRr),e(X5,iRr),e(Ge,dRr),e(Ge,z5),e(z5,HTe),e(HTe,cRr),e(z5,fRr),e(z5,aY),e(aY,mRr),e(z5,gRr),e(Ge,hRr),e(Ge,Q5),e(Q5,UTe),e(UTe,pRr),e(Q5,uRr),e(Q5,nY),e(nY,_Rr),e(Q5,bRr),e(zr,vRr),M(W5,zr,null),b(f,_Ie,_),b(f,Xc,_),e(Xc,H5),e(H5,JTe),M(c7,JTe,null),e(Xc,FRr),e(Xc,YTe),e(YTe,TRr),b(f,bIe,_),b(f,vr,_),M(f7,vr,null),e(vr,MRr),e(vr,zc),e(zc,ERr),e(zc,sY),e(sY,CRr),e(zc,wRr),e(zc,lY),e(lY,ARr),e(zc,yRr),e(vr,LRr),e(vr,m7),e(m7,xRr),e(m7,KTe),e(KTe,$Rr),e(m7,kRr),e(vr,SRr),e(vr,zt),M(g7,zt,null),e(zt,RRr),e(zt,ZTe),e(ZTe,BRr),e(zt,PRr),e(zt,Qc),e(Qc,IRr),e(Qc,e9e),e(e9e,qRr),e(Qc,NRr),e(Qc,iY),e(iY,jRr),e(Qc,DRr),e(zt,GRr),M(U5,zt,null),e(vr,ORr),e(vr,Qr),M(h7,Qr,null),e(Qr,VRr),e(Qr,o9e),e(o9e,XRr),e(Qr,zRr),e(Qr,vn),e(vn,QRr),e(vn,r9e),e(r9e,WRr),e(vn,HRr),e(vn,t9e),e(t9e,URr),e(vn,JRr),e(vn,a9e),e(a9e,YRr),e(vn,KRr),e(Qr,ZRr),e(Qr,n9e),e(n9e,J5),e(J5,s9e),e(s9e,eBr),e(J5,oBr),e(J5,dY),e(dY,rBr),e(J5,tBr),e(Qr,aBr),M(Y5,Qr,null),b(f,vIe,_),b(f,Wc,_),e(Wc,K5),e(K5,l9e),M(p7,l9e,null),e(Wc,nBr),e(Wc,i9e),e(i9e,sBr),b(f,FIe,_),b(f,Fr,_),M(u7,Fr,null),e(Fr,lBr),e(Fr,Hc),e(Hc,iBr),e(Hc,cY),e(cY,dBr),e(Hc,cBr),e(Hc,fY),e(fY,fBr),e(Hc,mBr),e(Fr,gBr),e(Fr,_7),e(_7,hBr),e(_7,d9e),e(d9e,pBr),e(_7,uBr),e(Fr,_Br),e(Fr,Qt),M(b7,Qt,null),e(Qt,bBr),e(Qt,c9e),e(c9e,vBr),e(Qt,FBr),e(Qt,Uc),e(Uc,TBr),e(Uc,f9e),e(f9e,MBr),e(Uc,EBr),e(Uc,mY),e(mY,CBr),e(Uc,wBr),e(Qt,ABr),M(Z5,Qt,null),e(Fr,yBr),e(Fr,Wr),M(v7,Wr,null),e(Wr,LBr),e(Wr,m9e),e(m9e,xBr),e(Wr,$Br),e(Wr,Fn),e(Fn,kBr),e(Fn,g9e),e(g9e,SBr),e(Fn,RBr),e(Fn,h9e),e(h9e,BBr),e(Fn,PBr),e(Fn,p9e),e(p9e,IBr),e(Fn,qBr),e(Wr,NBr),e(Wr,F7),e(F7,eC),e(eC,u9e),e(u9e,jBr),e(eC,DBr),e(eC,gY),e(gY,GBr),e(eC,OBr),e(F7,VBr),e(F7,oC),e(oC,_9e),e(_9e,XBr),e(oC,zBr),e(oC,hY),e(hY,QBr),e(oC,WBr),e(Wr,HBr),M(rC,Wr,null),b(f,TIe,_),b(f,Jc,_),e(Jc,tC),e(tC,b9e),M(T7,b9e,null),e(Jc,UBr),e(Jc,v9e),e(v9e,JBr),b(f,MIe,_),b(f,Tr,_),M(M7,Tr,null),e(Tr,YBr),e(Tr,Yc),e(Yc,KBr),e(Yc,pY),e(pY,ZBr),e(Yc,ePr),e(Yc,uY),e(uY,oPr),e(Yc,rPr),e(Tr,tPr),e(Tr,E7),e(E7,aPr),e(E7,F9e),e(F9e,nPr),e(E7,sPr),e(Tr,lPr),e(Tr,Wt),M(C7,Wt,null),e(Wt,iPr),e(Wt,T9e),e(T9e,dPr),e(Wt,cPr),e(Wt,Kc),e(Kc,fPr),e(Kc,M9e),e(M9e,mPr),e(Kc,gPr),e(Kc,_Y),e(_Y,hPr),e(Kc,pPr),e(Wt,uPr),M(aC,Wt,null),e(Tr,_Pr),e(Tr,Hr),M(w7,Hr,null),e(Hr,bPr),e(Hr,E9e),e(E9e,vPr),e(Hr,FPr),e(Hr,Tn),e(Tn,TPr),e(Tn,C9e),e(C9e,MPr),e(Tn,EPr),e(Tn,w9e),e(w9e,CPr),e(Tn,wPr),e(Tn,A9e),e(A9e,APr),e(Tn,yPr),e(Hr,LPr),e(Hr,y9e),e(y9e,nC),e(nC,L9e),e(L9e,xPr),e(nC,$Pr),e(nC,bY),e(bY,kPr),e(nC,SPr),e(Hr,RPr),M(sC,Hr,null),EIe=!0},p(f,[_]){const A7={};_&2&&(A7.$$scope={dirty:_,ctx:f}),lf.$set(A7);const x9e={};_&2&&(x9e.$$scope={dirty:_,ctx:f}),ng.$set(x9e);const $9e={};_&2&&($9e.$$scope={dirty:_,ctx:f}),qg.$set($9e);const k9e={};_&2&&(k9e.$$scope={dirty:_,ctx:f}),ch.$set(k9e);const y7={};_&2&&(y7.$$scope={dirty:_,ctx:f}),fh.$set(y7);const S9e={};_&2&&(S9e.$$scope={dirty:_,ctx:f}),Lh.$set(S9e);const Mn={};_&2&&(Mn.$$scope={dirty:_,ctx:f}),xh.$set(Mn);const R9e={};_&2&&(R9e.$$scope={dirty:_,ctx:f}),Sh.$set(R9e);const B9e={};_&2&&(B9e.$$scope={dirty:_,ctx:f}),Fu.$set(B9e);const P9e={};_&2&&(P9e.$$scope={dirty:_,ctx:f}),Mu.$set(P9e);const L7={};_&2&&(L7.$$scope={dirty:_,ctx:f}),d_.$set(L7);const I9e={};_&2&&(I9e.$$scope={dirty:_,ctx:f}),f_.$set(I9e);const x7={};_&2&&(x7.$$scope={dirty:_,ctx:f}),H_.$set(x7);const q9e={};_&2&&(q9e.$$scope={dirty:_,ctx:f}),J_.$set(q9e);const $7={};_&2&&($7.$$scope={dirty:_,ctx:f}),R1.$set($7);const N9e={};_&2&&(N9e.$$scope={dirty:_,ctx:f}),P1.$set(N9e);const j9e={};_&2&&(j9e.$$scope={dirty:_,ctx:f}),e8.$set(j9e);const D9e={};_&2&&(D9e.$$scope={dirty:_,ctx:f}),r8.$set(D9e);const Zc={};_&2&&(Zc.$$scope={dirty:_,ctx:f}),Y8.$set(Zc);const G9e={};_&2&&(G9e.$$scope={dirty:_,ctx:f}),Z8.$set(G9e);const O9e={};_&2&&(O9e.$$scope={dirty:_,ctx:f}),xb.$set(O9e);const V9e={};_&2&&(V9e.$$scope={dirty:_,ctx:f}),kb.$set(V9e);const k7={};_&2&&(k7.$$scope={dirty:_,ctx:f}),Nb.$set(k7);const X9e={};_&2&&(X9e.$$scope={dirty:_,ctx:f}),Db.$set(X9e);const z9e={};_&2&&(z9e.$$scope={dirty:_,ctx:f}),T2.$set(z9e);const Q9e={};_&2&&(Q9e.$$scope={dirty:_,ctx:f}),E2.$set(Q9e);const Jr={};_&2&&(Jr.$$scope={dirty:_,ctx:f}),cv.$set(Jr);const S7={};_&2&&(S7.$$scope={dirty:_,ctx:f}),mv.$set(S7);const W9e={};_&2&&(W9e.$$scope={dirty:_,ctx:f}),pv.$set(W9e);const R7={};_&2&&(R7.$$scope={dirty:_,ctx:f}),_v.$set(R7);const H9e={};_&2&&(H9e.$$scope={dirty:_,ctx:f}),$v.$set(H9e);const Yr={};_&2&&(Yr.$$scope={dirty:_,ctx:f}),Sv.$set(Yr);const U9e={};_&2&&(U9e.$$scope={dirty:_,ctx:f}),Pv.$set(U9e);const ef={};_&2&&(ef.$$scope={dirty:_,ctx:f}),qv.$set(ef);const J9e={};_&2&&(J9e.$$scope={dirty:_,ctx:f}),Wv.$set(J9e);const Y9e={};_&2&&(Y9e.$$scope={dirty:_,ctx:f}),Uv.$set(Y9e);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),oF.$set(y);const lC={};_&2&&(lC.$$scope={dirty:_,ctx:f}),tF.$set(lC);const K9e={};_&2&&(K9e.$$scope={dirty:_,ctx:f}),gF.$set(K9e);const Z9e={};_&2&&(Z9e.$$scope={dirty:_,ctx:f}),pF.$set(Z9e);const iC={};_&2&&(iC.$$scope={dirty:_,ctx:f}),vF.$set(iC);const eMe={};_&2&&(eMe.$$scope={dirty:_,ctx:f}),TF.$set(eMe);const oMe={};_&2&&(oMe.$$scope={dirty:_,ctx:f}),yF.$set(oMe);const dC={};_&2&&(dC.$$scope={dirty:_,ctx:f}),xF.$set(dC);const rMe={};_&2&&(rMe.$$scope={dirty:_,ctx:f}),BF.$set(rMe);const tMe={};_&2&&(tMe.$$scope={dirty:_,ctx:f}),IF.$set(tMe);const cC={};_&2&&(cC.$$scope={dirty:_,ctx:f}),DF.$set(cC);const aMe={};_&2&&(aMe.$$scope={dirty:_,ctx:f}),OF.$set(aMe);const nMe={};_&2&&(nMe.$$scope={dirty:_,ctx:f}),zF.$set(nMe);const fC={};_&2&&(fC.$$scope={dirty:_,ctx:f}),WF.$set(fC);const sMe={};_&2&&(sMe.$$scope={dirty:_,ctx:f}),ZF.$set(sMe);const lMe={};_&2&&(lMe.$$scope={dirty:_,ctx:f}),o6.$set(lMe);const mC={};_&2&&(mC.$$scope={dirty:_,ctx:f}),a6.$set(mC);const iMe={};_&2&&(iMe.$$scope={dirty:_,ctx:f}),s6.$set(iMe);const dMe={};_&2&&(dMe.$$scope={dirty:_,ctx:f}),K6.$set(dMe);const gC={};_&2&&(gC.$$scope={dirty:_,ctx:f}),eT.$set(gC);const cMe={};_&2&&(cMe.$$scope={dirty:_,ctx:f}),CT.$set(cMe);const fMe={};_&2&&(fMe.$$scope={dirty:_,ctx:f}),AT.$set(fMe);const hC={};_&2&&(hC.$$scope={dirty:_,ctx:f}),jT.$set(hC);const mMe={};_&2&&(mMe.$$scope={dirty:_,ctx:f}),GT.$set(mMe);const gMe={};_&2&&(gMe.$$scope={dirty:_,ctx:f}),QT.$set(gMe);const pC={};_&2&&(pC.$$scope={dirty:_,ctx:f}),HT.$set(pC);const hMe={};_&2&&(hMe.$$scope={dirty:_,ctx:f}),p9.$set(hMe);const pMe={};_&2&&(pMe.$$scope={dirty:_,ctx:f}),_9.$set(pMe);const uC={};_&2&&(uC.$$scope={dirty:_,ctx:f}),L9.$set(uC);const uMe={};_&2&&(uMe.$$scope={dirty:_,ctx:f}),$9.$set(uMe);const _Me={};_&2&&(_Me.$$scope={dirty:_,ctx:f}),tM.$set(_Me);const _C={};_&2&&(_C.$$scope={dirty:_,ctx:f}),nM.$set(_C);const bMe={};_&2&&(bMe.$$scope={dirty:_,ctx:f}),EM.$set(bMe);const vMe={};_&2&&(vMe.$$scope={dirty:_,ctx:f}),wM.$set(vMe);const bC={};_&2&&(bC.$$scope={dirty:_,ctx:f}),yM.$set(bC);const FMe={};_&2&&(FMe.$$scope={dirty:_,ctx:f}),xM.$set(FMe);const TMe={};_&2&&(TMe.$$scope={dirty:_,ctx:f}),JM.$set(TMe);const vC={};_&2&&(vC.$$scope={dirty:_,ctx:f}),KM.$set(vC);const MMe={};_&2&&(MMe.$$scope={dirty:_,ctx:f}),v4.$set(MMe);const EMe={};_&2&&(EMe.$$scope={dirty:_,ctx:f}),T4.$set(EMe);const FC={};_&2&&(FC.$$scope={dirty:_,ctx:f}),E4.$set(FC);const CMe={};_&2&&(CMe.$$scope={dirty:_,ctx:f}),w4.$set(CMe);const wMe={};_&2&&(wMe.$$scope={dirty:_,ctx:f}),y4.$set(wMe);const TC={};_&2&&(TC.$$scope={dirty:_,ctx:f}),x4.$set(TC);const AMe={};_&2&&(AMe.$$scope={dirty:_,ctx:f}),oE.$set(AMe);const yMe={};_&2&&(yMe.$$scope={dirty:_,ctx:f}),tE.$set(yMe);const MC={};_&2&&(MC.$$scope={dirty:_,ctx:f}),gE.$set(MC);const LMe={};_&2&&(LMe.$$scope={dirty:_,ctx:f}),pE.$set(LMe);const xMe={};_&2&&(xMe.$$scope={dirty:_,ctx:f}),LE.$set(xMe);const EC={};_&2&&(EC.$$scope={dirty:_,ctx:f}),$E.$set(EC);const $Me={};_&2&&($Me.$$scope={dirty:_,ctx:f}),GE.$set($Me);const kMe={};_&2&&(kMe.$$scope={dirty:_,ctx:f}),VE.$set(kMe);const CC={};_&2&&(CC.$$scope={dirty:_,ctx:f}),ZE.$set(CC);const SMe={};_&2&&(SMe.$$scope={dirty:_,ctx:f}),o5.$set(SMe);const RMe={};_&2&&(RMe.$$scope={dirty:_,ctx:f}),m5.$set(RMe);const wC={};_&2&&(wC.$$scope={dirty:_,ctx:f}),h5.$set(wC);const BMe={};_&2&&(BMe.$$scope={dirty:_,ctx:f}),w5.$set(BMe);const PMe={};_&2&&(PMe.$$scope={dirty:_,ctx:f}),y5.$set(PMe);const AC={};_&2&&(AC.$$scope={dirty:_,ctx:f}),I5.$set(AC);const IMe={};_&2&&(IMe.$$scope={dirty:_,ctx:f}),N5.$set(IMe);const qMe={};_&2&&(qMe.$$scope={dirty:_,ctx:f}),W5.$set(qMe);const yC={};_&2&&(yC.$$scope={dirty:_,ctx:f}),U5.$set(yC);const NMe={};_&2&&(NMe.$$scope={dirty:_,ctx:f}),Y5.$set(NMe);const jMe={};_&2&&(jMe.$$scope={dirty:_,ctx:f}),Z5.$set(jMe);const LC={};_&2&&(LC.$$scope={dirty:_,ctx:f}),rC.$set(LC);const DMe={};_&2&&(DMe.$$scope={dirty:_,ctx:f}),aC.$set(DMe);const GMe={};_&2&&(GMe.$$scope={dirty:_,ctx:f}),sC.$set(GMe)},i(f){EIe||(E(d.$$.fragment,f),E(va.$$.fragment,f),E(yw.$$.fragment,f),E(Lw.$$.fragment,f),E(lf.$$.fragment,f),E(xw.$$.fragment,f),E($w.$$.fragment,f),E(Rw.$$.fragment,f),E(ng.$$.fragment,f),E(Bw.$$.fragment,f),E(Pw.$$.fragment,f),E(Iw.$$.fragment,f),E(jw.$$.fragment,f),E(qg.$$.fragment,f),E(Dw.$$.fragment,f),E(Gw.$$.fragment,f),E(Ow.$$.fragment,f),E(zw.$$.fragment,f),E(ch.$$.fragment,f),E(fh.$$.fragment,f),E(Qw.$$.fragment,f),E(Ww.$$.fragment,f),E(Hw.$$.fragment,f),E(Yw.$$.fragment,f),E(Lh.$$.fragment,f),E(xh.$$.fragment,f),E(Kw.$$.fragment,f),E(Zw.$$.fragment,f),E(eA.$$.fragment,f),E(rA.$$.fragment,f),E(Sh.$$.fragment,f),E(tA.$$.fragment,f),E(Fu.$$.fragment,f),E(aA.$$.fragment,f),E(nA.$$.fragment,f),E(lA.$$.fragment,f),E(Mu.$$.fragment,f),E(iA.$$.fragment,f),E(d_.$$.fragment,f),E(dA.$$.fragment,f),E(cA.$$.fragment,f),E(mA.$$.fragment,f),E(f_.$$.fragment,f),E(gA.$$.fragment,f),E(H_.$$.fragment,f),E(hA.$$.fragment,f),E(pA.$$.fragment,f),E(_A.$$.fragment,f),E(J_.$$.fragment,f),E(bA.$$.fragment,f),E(R1.$$.fragment,f),E(vA.$$.fragment,f),E(FA.$$.fragment,f),E(MA.$$.fragment,f),E(P1.$$.fragment,f),E(EA.$$.fragment,f),E(e8.$$.fragment,f),E(CA.$$.fragment,f),E(wA.$$.fragment,f),E(yA.$$.fragment,f),E(r8.$$.fragment,f),E(LA.$$.fragment,f),E(Y8.$$.fragment,f),E(xA.$$.fragment,f),E($A.$$.fragment,f),E(SA.$$.fragment,f),E(Z8.$$.fragment,f),E(RA.$$.fragment,f),E(xb.$$.fragment,f),E(BA.$$.fragment,f),E(PA.$$.fragment,f),E(qA.$$.fragment,f),E(kb.$$.fragment,f),E(NA.$$.fragment,f),E(Nb.$$.fragment,f),E(jA.$$.fragment,f),E(DA.$$.fragment,f),E(OA.$$.fragment,f),E(Db.$$.fragment,f),E(VA.$$.fragment,f),E(T2.$$.fragment,f),E(XA.$$.fragment,f),E(zA.$$.fragment,f),E(WA.$$.fragment,f),E(E2.$$.fragment,f),E(HA.$$.fragment,f),E(cv.$$.fragment,f),E(UA.$$.fragment,f),E(JA.$$.fragment,f),E(KA.$$.fragment,f),E(mv.$$.fragment,f),E(ZA.$$.fragment,f),E(pv.$$.fragment,f),E(e0.$$.fragment,f),E(o0.$$.fragment,f),E(t0.$$.fragment,f),E(_v.$$.fragment,f),E(a0.$$.fragment,f),E($v.$$.fragment,f),E(n0.$$.fragment,f),E(s0.$$.fragment,f),E(i0.$$.fragment,f),E(Sv.$$.fragment,f),E(d0.$$.fragment,f),E(Pv.$$.fragment,f),E(c0.$$.fragment,f),E(f0.$$.fragment,f),E(g0.$$.fragment,f),E(qv.$$.fragment,f),E(h0.$$.fragment,f),E(Wv.$$.fragment,f),E(p0.$$.fragment,f),E(u0.$$.fragment,f),E(b0.$$.fragment,f),E(Uv.$$.fragment,f),E(v0.$$.fragment,f),E(oF.$$.fragment,f),E(F0.$$.fragment,f),E(T0.$$.fragment,f),E(E0.$$.fragment,f),E(tF.$$.fragment,f),E(C0.$$.fragment,f),E(gF.$$.fragment,f),E(w0.$$.fragment,f),E(A0.$$.fragment,f),E(L0.$$.fragment,f),E(pF.$$.fragment,f),E(x0.$$.fragment,f),E(vF.$$.fragment,f),E(k0.$$.fragment,f),E(S0.$$.fragment,f),E(B0.$$.fragment,f),E(TF.$$.fragment,f),E(P0.$$.fragment,f),E(yF.$$.fragment,f),E(I0.$$.fragment,f),E(q0.$$.fragment,f),E(j0.$$.fragment,f),E(xF.$$.fragment,f),E(D0.$$.fragment,f),E(BF.$$.fragment,f),E(G0.$$.fragment,f),E(O0.$$.fragment,f),E(X0.$$.fragment,f),E(IF.$$.fragment,f),E(z0.$$.fragment,f),E(DF.$$.fragment,f),E(W0.$$.fragment,f),E(H0.$$.fragment,f),E(J0.$$.fragment,f),E(OF.$$.fragment,f),E(Y0.$$.fragment,f),E(zF.$$.fragment,f),E(K0.$$.fragment,f),E(Z0.$$.fragment,f),E(oy.$$.fragment,f),E(WF.$$.fragment,f),E(ry.$$.fragment,f),E(ZF.$$.fragment,f),E(ty.$$.fragment,f),E(ay.$$.fragment,f),E(sy.$$.fragment,f),E(o6.$$.fragment,f),E(ly.$$.fragment,f),E(a6.$$.fragment,f),E(iy.$$.fragment,f),E(dy.$$.fragment,f),E(fy.$$.fragment,f),E(s6.$$.fragment,f),E(my.$$.fragment,f),E(K6.$$.fragment,f),E(gy.$$.fragment,f),E(hy.$$.fragment,f),E(uy.$$.fragment,f),E(eT.$$.fragment,f),E(_y.$$.fragment,f),E(CT.$$.fragment,f),E(by.$$.fragment,f),E(vy.$$.fragment,f),E(Ty.$$.fragment,f),E(AT.$$.fragment,f),E(My.$$.fragment,f),E(jT.$$.fragment,f),E(Ey.$$.fragment,f),E(Cy.$$.fragment,f),E(Ay.$$.fragment,f),E(GT.$$.fragment,f),E(yy.$$.fragment,f),E(QT.$$.fragment,f),E(Ly.$$.fragment,f),E(xy.$$.fragment,f),E(ky.$$.fragment,f),E(HT.$$.fragment,f),E(Sy.$$.fragment,f),E(p9.$$.fragment,f),E(Ry.$$.fragment,f),E(By.$$.fragment,f),E(Iy.$$.fragment,f),E(_9.$$.fragment,f),E(qy.$$.fragment,f),E(L9.$$.fragment,f),E(Ny.$$.fragment,f),E(jy.$$.fragment,f),E(Gy.$$.fragment,f),E($9.$$.fragment,f),E(Oy.$$.fragment,f),E(tM.$$.fragment,f),E(Vy.$$.fragment,f),E(Xy.$$.fragment,f),E(Qy.$$.fragment,f),E(nM.$$.fragment,f),E(Wy.$$.fragment,f),E(EM.$$.fragment,f),E(Hy.$$.fragment,f),E(Uy.$$.fragment,f),E(Yy.$$.fragment,f),E(wM.$$.fragment,f),E(Ky.$$.fragment,f),E(yM.$$.fragment,f),E(Zy.$$.fragment,f),E(eL.$$.fragment,f),E(rL.$$.fragment,f),E(xM.$$.fragment,f),E(tL.$$.fragment,f),E(JM.$$.fragment,f),E(aL.$$.fragment,f),E(nL.$$.fragment,f),E(lL.$$.fragment,f),E(KM.$$.fragment,f),E(iL.$$.fragment,f),E(v4.$$.fragment,f),E(dL.$$.fragment,f),E(cL.$$.fragment,f),E(mL.$$.fragment,f),E(T4.$$.fragment,f),E(gL.$$.fragment,f),E(E4.$$.fragment,f),E(hL.$$.fragment,f),E(pL.$$.fragment,f),E(_L.$$.fragment,f),E(w4.$$.fragment,f),E(bL.$$.fragment,f),E(y4.$$.fragment,f),E(vL.$$.fragment,f),E(FL.$$.fragment,f),E(ML.$$.fragment,f),E(x4.$$.fragment,f),E(EL.$$.fragment,f),E(oE.$$.fragment,f),E(CL.$$.fragment,f),E(wL.$$.fragment,f),E(yL.$$.fragment,f),E(tE.$$.fragment,f),E(LL.$$.fragment,f),E(gE.$$.fragment,f),E(xL.$$.fragment,f),E($L.$$.fragment,f),E(SL.$$.fragment,f),E(pE.$$.fragment,f),E(RL.$$.fragment,f),E(LE.$$.fragment,f),E(BL.$$.fragment,f),E(PL.$$.fragment,f),E(qL.$$.fragment,f),E($E.$$.fragment,f),E(NL.$$.fragment,f),E(GE.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(OL.$$.fragment,f),E(VE.$$.fragment,f),E(VL.$$.fragment,f),E(ZE.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(WL.$$.fragment,f),E(o5.$$.fragment,f),E(HL.$$.fragment,f),E(m5.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(h5.$$.fragment,f),E(ZL.$$.fragment,f),E(w5.$$.fragment,f),E(e7.$$.fragment,f),E(o7.$$.fragment,f),E(t7.$$.fragment,f),E(y5.$$.fragment,f),E(a7.$$.fragment,f),E(I5.$$.fragment,f),E(n7.$$.fragment,f),E(s7.$$.fragment,f),E(i7.$$.fragment,f),E(N5.$$.fragment,f),E(d7.$$.fragment,f),E(W5.$$.fragment,f),E(c7.$$.fragment,f),E(f7.$$.fragment,f),E(g7.$$.fragment,f),E(U5.$$.fragment,f),E(h7.$$.fragment,f),E(Y5.$$.fragment,f),E(p7.$$.fragment,f),E(u7.$$.fragment,f),E(b7.$$.fragment,f),E(Z5.$$.fragment,f),E(v7.$$.fragment,f),E(rC.$$.fragment,f),E(T7.$$.fragment,f),E(M7.$$.fragment,f),E(C7.$$.fragment,f),E(aC.$$.fragment,f),E(w7.$$.fragment,f),E(sC.$$.fragment,f),EIe=!0)},o(f){C(d.$$.fragment,f),C(va.$$.fragment,f),C(yw.$$.fragment,f),C(Lw.$$.fragment,f),C(lf.$$.fragment,f),C(xw.$$.fragment,f),C($w.$$.fragment,f),C(Rw.$$.fragment,f),C(ng.$$.fragment,f),C(Bw.$$.fragment,f),C(Pw.$$.fragment,f),C(Iw.$$.fragment,f),C(jw.$$.fragment,f),C(qg.$$.fragment,f),C(Dw.$$.fragment,f),C(Gw.$$.fragment,f),C(Ow.$$.fragment,f),C(zw.$$.fragment,f),C(ch.$$.fragment,f),C(fh.$$.fragment,f),C(Qw.$$.fragment,f),C(Ww.$$.fragment,f),C(Hw.$$.fragment,f),C(Yw.$$.fragment,f),C(Lh.$$.fragment,f),C(xh.$$.fragment,f),C(Kw.$$.fragment,f),C(Zw.$$.fragment,f),C(eA.$$.fragment,f),C(rA.$$.fragment,f),C(Sh.$$.fragment,f),C(tA.$$.fragment,f),C(Fu.$$.fragment,f),C(aA.$$.fragment,f),C(nA.$$.fragment,f),C(lA.$$.fragment,f),C(Mu.$$.fragment,f),C(iA.$$.fragment,f),C(d_.$$.fragment,f),C(dA.$$.fragment,f),C(cA.$$.fragment,f),C(mA.$$.fragment,f),C(f_.$$.fragment,f),C(gA.$$.fragment,f),C(H_.$$.fragment,f),C(hA.$$.fragment,f),C(pA.$$.fragment,f),C(_A.$$.fragment,f),C(J_.$$.fragment,f),C(bA.$$.fragment,f),C(R1.$$.fragment,f),C(vA.$$.fragment,f),C(FA.$$.fragment,f),C(MA.$$.fragment,f),C(P1.$$.fragment,f),C(EA.$$.fragment,f),C(e8.$$.fragment,f),C(CA.$$.fragment,f),C(wA.$$.fragment,f),C(yA.$$.fragment,f),C(r8.$$.fragment,f),C(LA.$$.fragment,f),C(Y8.$$.fragment,f),C(xA.$$.fragment,f),C($A.$$.fragment,f),C(SA.$$.fragment,f),C(Z8.$$.fragment,f),C(RA.$$.fragment,f),C(xb.$$.fragment,f),C(BA.$$.fragment,f),C(PA.$$.fragment,f),C(qA.$$.fragment,f),C(kb.$$.fragment,f),C(NA.$$.fragment,f),C(Nb.$$.fragment,f),C(jA.$$.fragment,f),C(DA.$$.fragment,f),C(OA.$$.fragment,f),C(Db.$$.fragment,f),C(VA.$$.fragment,f),C(T2.$$.fragment,f),C(XA.$$.fragment,f),C(zA.$$.fragment,f),C(WA.$$.fragment,f),C(E2.$$.fragment,f),C(HA.$$.fragment,f),C(cv.$$.fragment,f),C(UA.$$.fragment,f),C(JA.$$.fragment,f),C(KA.$$.fragment,f),C(mv.$$.fragment,f),C(ZA.$$.fragment,f),C(pv.$$.fragment,f),C(e0.$$.fragment,f),C(o0.$$.fragment,f),C(t0.$$.fragment,f),C(_v.$$.fragment,f),C(a0.$$.fragment,f),C($v.$$.fragment,f),C(n0.$$.fragment,f),C(s0.$$.fragment,f),C(i0.$$.fragment,f),C(Sv.$$.fragment,f),C(d0.$$.fragment,f),C(Pv.$$.fragment,f),C(c0.$$.fragment,f),C(f0.$$.fragment,f),C(g0.$$.fragment,f),C(qv.$$.fragment,f),C(h0.$$.fragment,f),C(Wv.$$.fragment,f),C(p0.$$.fragment,f),C(u0.$$.fragment,f),C(b0.$$.fragment,f),C(Uv.$$.fragment,f),C(v0.$$.fragment,f),C(oF.$$.fragment,f),C(F0.$$.fragment,f),C(T0.$$.fragment,f),C(E0.$$.fragment,f),C(tF.$$.fragment,f),C(C0.$$.fragment,f),C(gF.$$.fragment,f),C(w0.$$.fragment,f),C(A0.$$.fragment,f),C(L0.$$.fragment,f),C(pF.$$.fragment,f),C(x0.$$.fragment,f),C(vF.$$.fragment,f),C(k0.$$.fragment,f),C(S0.$$.fragment,f),C(B0.$$.fragment,f),C(TF.$$.fragment,f),C(P0.$$.fragment,f),C(yF.$$.fragment,f),C(I0.$$.fragment,f),C(q0.$$.fragment,f),C(j0.$$.fragment,f),C(xF.$$.fragment,f),C(D0.$$.fragment,f),C(BF.$$.fragment,f),C(G0.$$.fragment,f),C(O0.$$.fragment,f),C(X0.$$.fragment,f),C(IF.$$.fragment,f),C(z0.$$.fragment,f),C(DF.$$.fragment,f),C(W0.$$.fragment,f),C(H0.$$.fragment,f),C(J0.$$.fragment,f),C(OF.$$.fragment,f),C(Y0.$$.fragment,f),C(zF.$$.fragment,f),C(K0.$$.fragment,f),C(Z0.$$.fragment,f),C(oy.$$.fragment,f),C(WF.$$.fragment,f),C(ry.$$.fragment,f),C(ZF.$$.fragment,f),C(ty.$$.fragment,f),C(ay.$$.fragment,f),C(sy.$$.fragment,f),C(o6.$$.fragment,f),C(ly.$$.fragment,f),C(a6.$$.fragment,f),C(iy.$$.fragment,f),C(dy.$$.fragment,f),C(fy.$$.fragment,f),C(s6.$$.fragment,f),C(my.$$.fragment,f),C(K6.$$.fragment,f),C(gy.$$.fragment,f),C(hy.$$.fragment,f),C(uy.$$.fragment,f),C(eT.$$.fragment,f),C(_y.$$.fragment,f),C(CT.$$.fragment,f),C(by.$$.fragment,f),C(vy.$$.fragment,f),C(Ty.$$.fragment,f),C(AT.$$.fragment,f),C(My.$$.fragment,f),C(jT.$$.fragment,f),C(Ey.$$.fragment,f),C(Cy.$$.fragment,f),C(Ay.$$.fragment,f),C(GT.$$.fragment,f),C(yy.$$.fragment,f),C(QT.$$.fragment,f),C(Ly.$$.fragment,f),C(xy.$$.fragment,f),C(ky.$$.fragment,f),C(HT.$$.fragment,f),C(Sy.$$.fragment,f),C(p9.$$.fragment,f),C(Ry.$$.fragment,f),C(By.$$.fragment,f),C(Iy.$$.fragment,f),C(_9.$$.fragment,f),C(qy.$$.fragment,f),C(L9.$$.fragment,f),C(Ny.$$.fragment,f),C(jy.$$.fragment,f),C(Gy.$$.fragment,f),C($9.$$.fragment,f),C(Oy.$$.fragment,f),C(tM.$$.fragment,f),C(Vy.$$.fragment,f),C(Xy.$$.fragment,f),C(Qy.$$.fragment,f),C(nM.$$.fragment,f),C(Wy.$$.fragment,f),C(EM.$$.fragment,f),C(Hy.$$.fragment,f),C(Uy.$$.fragment,f),C(Yy.$$.fragment,f),C(wM.$$.fragment,f),C(Ky.$$.fragment,f),C(yM.$$.fragment,f),C(Zy.$$.fragment,f),C(eL.$$.fragment,f),C(rL.$$.fragment,f),C(xM.$$.fragment,f),C(tL.$$.fragment,f),C(JM.$$.fragment,f),C(aL.$$.fragment,f),C(nL.$$.fragment,f),C(lL.$$.fragment,f),C(KM.$$.fragment,f),C(iL.$$.fragment,f),C(v4.$$.fragment,f),C(dL.$$.fragment,f),C(cL.$$.fragment,f),C(mL.$$.fragment,f),C(T4.$$.fragment,f),C(gL.$$.fragment,f),C(E4.$$.fragment,f),C(hL.$$.fragment,f),C(pL.$$.fragment,f),C(_L.$$.fragment,f),C(w4.$$.fragment,f),C(bL.$$.fragment,f),C(y4.$$.fragment,f),C(vL.$$.fragment,f),C(FL.$$.fragment,f),C(ML.$$.fragment,f),C(x4.$$.fragment,f),C(EL.$$.fragment,f),C(oE.$$.fragment,f),C(CL.$$.fragment,f),C(wL.$$.fragment,f),C(yL.$$.fragment,f),C(tE.$$.fragment,f),C(LL.$$.fragment,f),C(gE.$$.fragment,f),C(xL.$$.fragment,f),C($L.$$.fragment,f),C(SL.$$.fragment,f),C(pE.$$.fragment,f),C(RL.$$.fragment,f),C(LE.$$.fragment,f),C(BL.$$.fragment,f),C(PL.$$.fragment,f),C(qL.$$.fragment,f),C($E.$$.fragment,f),C(NL.$$.fragment,f),C(GE.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(OL.$$.fragment,f),C(VE.$$.fragment,f),C(VL.$$.fragment,f),C(ZE.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(WL.$$.fragment,f),C(o5.$$.fragment,f),C(HL.$$.fragment,f),C(m5.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(h5.$$.fragment,f),C(ZL.$$.fragment,f),C(w5.$$.fragment,f),C(e7.$$.fragment,f),C(o7.$$.fragment,f),C(t7.$$.fragment,f),C(y5.$$.fragment,f),C(a7.$$.fragment,f),C(I5.$$.fragment,f),C(n7.$$.fragment,f),C(s7.$$.fragment,f),C(i7.$$.fragment,f),C(N5.$$.fragment,f),C(d7.$$.fragment,f),C(W5.$$.fragment,f),C(c7.$$.fragment,f),C(f7.$$.fragment,f),C(g7.$$.fragment,f),C(U5.$$.fragment,f),C(h7.$$.fragment,f),C(Y5.$$.fragment,f),C(p7.$$.fragment,f),C(u7.$$.fragment,f),C(b7.$$.fragment,f),C(Z5.$$.fragment,f),C(v7.$$.fragment,f),C(rC.$$.fragment,f),C(T7.$$.fragment,f),C(M7.$$.fragment,f),C(C7.$$.fragment,f),C(aC.$$.fragment,f),C(w7.$$.fragment,f),C(sC.$$.fragment,f),EIe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(rf),f&&t(Kr),f&&t(qe),f&&t(Xe),f&&t(af),w(va,f),f&&t(ze),f&&t(Ae),f&&t(Eo),f&&t(Fa),f&&t(MBe),f&&t(di),w(yw),f&&t(EBe),f&&t(yn),f&&t(CBe),w(Lw,f),f&&t(wBe),f&&t(Vx),f&&t(ABe),w(lf,f),f&&t(yBe),f&&t(ci),w(xw),f&&t(LBe),f&&t(Co),w($w),w(Rw),w(ng),w(Bw),f&&t(xBe),f&&t(mi),w(Pw),f&&t($Be),f&&t(wo),w(Iw),w(jw),w(qg),w(Dw),f&&t(kBe),f&&t(gi),w(Gw),f&&t(SBe),f&&t(Ao),w(Ow),w(zw),w(ch),w(fh),w(Qw),f&&t(RBe),f&&t(hi),w(Ww),f&&t(BBe),f&&t(yo),w(Hw),w(Yw),w(Lh),w(xh),w(Kw),f&&t(PBe),f&&t(ui),w(Zw),f&&t(IBe),f&&t(Lo),w(eA),w(rA),w(Sh),w(tA),w(Fu),f&&t(qBe),f&&t(vi),w(aA),f&&t(NBe),f&&t(xo),w(nA),w(lA),w(Mu),w(iA),w(d_),f&&t(jBe),f&&t(Mi),w(dA),f&&t(DBe),f&&t($o),w(cA),w(mA),w(f_),w(gA),w(H_),f&&t(GBe),f&&t(wi),w(hA),f&&t(OBe),f&&t(ko),w(pA),w(_A),w(J_),w(bA),w(R1),f&&t(VBe),f&&t(Li),w(vA),f&&t(XBe),f&&t(So),w(FA),w(MA),w(P1),w(EA),w(e8),f&&t(zBe),f&&t(ki),w(CA),f&&t(QBe),f&&t(Ro),w(wA),w(yA),w(r8),w(LA),w(Y8),f&&t(WBe),f&&t(Bi),w(xA),f&&t(HBe),f&&t(Bo),w($A),w(SA),w(Z8),w(RA),w(xb),f&&t(UBe),f&&t(qi),w(BA),f&&t(JBe),f&&t(Po),w(PA),w(qA),w(kb),w(NA),w(Nb),f&&t(YBe),f&&t(Di),w(jA),f&&t(KBe),f&&t(Io),w(DA),w(OA),w(Db),w(VA),w(T2),f&&t(ZBe),f&&t(Vi),w(XA),f&&t(ePe),f&&t(qo),w(zA),w(WA),w(E2),w(HA),w(cv),f&&t(oPe),f&&t(Qi),w(UA),f&&t(rPe),f&&t(No),w(JA),w(KA),w(mv),w(ZA),w(pv),f&&t(tPe),f&&t(Ui),w(e0),f&&t(aPe),f&&t(jo),w(o0),w(t0),w(_v),w(a0),w($v),f&&t(nPe),f&&t(Ki),w(n0),f&&t(sPe),f&&t(Do),w(s0),w(i0),w(Sv),w(d0),w(Pv),f&&t(lPe),f&&t(od),w(c0),f&&t(iPe),f&&t(Go),w(f0),w(g0),w(qv),w(h0),w(Wv),f&&t(dPe),f&&t(ad),w(p0),f&&t(cPe),f&&t(Oo),w(u0),w(b0),w(Uv),w(v0),w(oF),f&&t(fPe),f&&t(ld),w(F0),f&&t(mPe),f&&t(Vo),w(T0),w(E0),w(tF),w(C0),w(gF),f&&t(gPe),f&&t(cd),w(w0),f&&t(hPe),f&&t(Xo),w(A0),w(L0),w(pF),w(x0),w(vF),f&&t(pPe),f&&t(gd),w(k0),f&&t(uPe),f&&t(zo),w(S0),w(B0),w(TF),w(P0),w(yF),f&&t(_Pe),f&&t(ud),w(I0),f&&t(bPe),f&&t(Qo),w(q0),w(j0),w(xF),w(D0),w(BF),f&&t(vPe),f&&t(Fd),w(G0),f&&t(FPe),f&&t(Wo),w(O0),w(X0),w(IF),w(z0),w(DF),f&&t(TPe),f&&t(Ed),w(W0),f&&t(MPe),f&&t(Ho),w(H0),w(J0),w(OF),w(Y0),w(zF),f&&t(EPe),f&&t(Ad),w(K0),f&&t(CPe),f&&t(Uo),w(Z0),w(oy),w(WF),w(ry),w(ZF),f&&t(wPe),f&&t(xd),w(ty),f&&t(APe),f&&t(Jo),w(ay),w(sy),w(o6),w(ly),w(a6),f&&t(yPe),f&&t(Sd),w(iy),f&&t(LPe),f&&t(Yo),w(dy),w(fy),w(s6),w(my),w(K6),f&&t(xPe),f&&t(Pd),w(gy),f&&t($Pe),f&&t(Ko),w(hy),w(uy),w(eT),w(_y),w(CT),f&&t(kPe),f&&t(Nd),w(by),f&&t(SPe),f&&t(Zo),w(vy),w(Ty),w(AT),w(My),w(jT),f&&t(RPe),f&&t(Gd),w(Ey),f&&t(BPe),f&&t(er),w(Cy),w(Ay),w(GT),w(yy),w(QT),f&&t(PPe),f&&t(Xd),w(Ly),f&&t(IPe),f&&t(or),w(xy),w(ky),w(HT),w(Sy),w(p9),f&&t(qPe),f&&t(Wd),w(Ry),f&&t(NPe),f&&t(rr),w(By),w(Iy),w(_9),w(qy),w(L9),f&&t(jPe),f&&t(Jd),w(Ny),f&&t(DPe),f&&t(tr),w(jy),w(Gy),w($9),w(Oy),w(tM),f&&t(GPe),f&&t(Zd),w(Vy),f&&t(OPe),f&&t(ar),w(Xy),w(Qy),w(nM),w(Wy),w(EM),f&&t(VPe),f&&t(rc),w(Hy),f&&t(XPe),f&&t(nr),w(Uy),w(Yy),w(wM),w(Ky),w(yM),f&&t(zPe),f&&t(nc),w(Zy),f&&t(QPe),f&&t(sr),w(eL),w(rL),w(xM),w(tL),w(JM),f&&t(WPe),f&&t(ic),w(aL),f&&t(HPe),f&&t(lr),w(nL),w(lL),w(KM),w(iL),w(v4),f&&t(UPe),f&&t(fc),w(dL),f&&t(JPe),f&&t(ir),w(cL),w(mL),w(T4),w(gL),w(E4),f&&t(YPe),f&&t(hc),w(hL),f&&t(KPe),f&&t(dr),w(pL),w(_L),w(w4),w(bL),w(y4),f&&t(ZPe),f&&t(_c),w(vL),f&&t(eIe),f&&t(cr),w(FL),w(ML),w(x4),w(EL),w(oE),f&&t(oIe),f&&t(Fc),w(CL),f&&t(rIe),f&&t(fr),w(wL),w(yL),w(tE),w(LL),w(gE),f&&t(tIe),f&&t(Ec),w(xL),f&&t(aIe),f&&t(mr),w($L),w(SL),w(pE),w(RL),w(LE),f&&t(nIe),f&&t(Ac),w(BL),f&&t(sIe),f&&t(gr),w(PL),w(qL),w($E),w(NL),w(GE),f&&t(lIe),f&&t(xc),w(jL),f&&t(iIe),f&&t(hr),w(DL),w(OL),w(VE),w(VL),w(ZE),f&&t(dIe),f&&t(Sc),w(XL),f&&t(cIe),f&&t(pr),w(zL),w(WL),w(o5),w(HL),w(m5),f&&t(fIe),f&&t(Pc),w(UL),f&&t(mIe),f&&t(ur),w(JL),w(KL),w(h5),w(ZL),w(w5),f&&t(gIe),f&&t(Nc),w(e7),f&&t(hIe),f&&t(_r),w(o7),w(t7),w(y5),w(a7),w(I5),f&&t(pIe),f&&t(Gc),w(n7),f&&t(uIe),f&&t(br),w(s7),w(i7),w(N5),w(d7),w(W5),f&&t(_Ie),f&&t(Xc),w(c7),f&&t(bIe),f&&t(vr),w(f7),w(g7),w(U5),w(h7),w(Y5),f&&t(vIe),f&&t(Wc),w(p7),f&&t(FIe),f&&t(Fr),w(u7),w(b7),w(Z5),w(v7),w(rC),f&&t(TIe),f&&t(Jc),w(T7),f&&t(MIe),f&&t(Tr),w(M7),w(C7),w(aC),w(w7),w(sC)}}}const L3t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function x3t(L){return k5t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class I3t extends y5t{constructor(g){super();L5t(this,g,x3t,y3t,x5t,{})}}export{I3t as default,L3t as metadata};
