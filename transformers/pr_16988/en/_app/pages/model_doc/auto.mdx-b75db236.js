import{S as y3t,i as L3t,s as x3t,e as a,k as l,w as F,t as o,M as $3t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as k3t,L as I}from"../../chunks/vendor-6b77c823.js";import{T as bqr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function S3t(A){let g,v,p,m,u,d,h,Mo,ii,mf,et,di,ci,Dw,gf,qe,Xe,fi,yn,Gw,Ln,xn,Ow,mi,$n,Vw,gi,hf,Ma;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),ii=a("code"),mf=o("model_type"),et=o(" attribute is set to the same key you use when registering the config (here "),di=a("code"),ci=o('"new-model"'),Dw=o(")."),gf=l(),qe=a("p"),Xe=o("Likewise, if your "),fi=a("code"),yn=o("NewModel"),Gw=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),Ow=o(`, make sure its
`),mi=a("code"),$n=o("config_class"),Vw=o(` attribute is set to the same class you use when registering the model (here
`),gi=a("code"),hf=o("NewModelConfig"),Ma=o(")."),this.h()},l(ze){g=n(ze,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var l$=s(p);m=r(l$,"NewModelConfig"),l$.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var hi=s(d);h=r(hi,"PretrainedConfig"),hi.forEach(t),Mo=r(Ae,`, make sure its
`),ii=n(Ae,"CODE",{});var i$=s(ii);mf=r(i$,"model_type"),i$.forEach(t),et=r(Ae," attribute is set to the same key you use when registering the config (here "),di=n(Ae,"CODE",{});var d$=s(di);ci=r(d$,'"new-model"'),d$.forEach(t),Dw=r(Ae,")."),Ae.forEach(t),gf=i(ze),qe=n(ze,"P",{});var Eo=s(qe);Xe=r(Eo,"Likewise, if your "),fi=n(Eo,"CODE",{});var Ea=s(fi);yn=r(Ea,"NewModel"),Ea.forEach(t),Gw=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var c$=s(Ln);xn=r(c$,"PreTrainedModel"),c$.forEach(t),Ow=r(Eo,`, make sure its
`),mi=n(Eo,"CODE",{});var pf=s(mi);$n=r(pf,"config_class"),pf.forEach(t),Vw=r(Eo,` attribute is set to the same class you use when registering the model (here
`),gi=n(Eo,"CODE",{});var f$=s(gi);hf=r(f$,"NewModelConfig"),f$.forEach(t),Ma=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel")},m(ze,Ae){b(ze,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,ii),e(ii,mf),e(g,et),e(g,di),e(di,ci),e(g,Dw),b(ze,gf,Ae),b(ze,qe,Ae),e(qe,Xe),e(qe,fi),e(fi,yn),e(qe,Gw),e(qe,Ln),e(Ln,xn),e(qe,Ow),e(qe,mi),e(mi,$n),e(qe,Vw),e(qe,gi),e(gi,hf),e(qe,Ma)},d(ze){ze&&t(g),ze&&t(gf),ze&&t(qe)}}}function R3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P3t(A){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function I3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q3t(A){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function N3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ewt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function owt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function twt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function awt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function swt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _wt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Twt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ewt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Awt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ywt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $wt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Swt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Iwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Owt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ywt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _At(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xAt(A){let g,v,p,m,u,d,h,Mo,ii,mf,et,di,ci,Dw,gf,qe,Xe,fi,yn,Gw,Ln,xn,Ow,mi,$n,Vw,gi,hf,Ma,ze,Ae,l$,hi,i$,d$,Eo,Ea,c$,pf,f$,Mje,fPe,pi,uf,jZ,Xw,Eje,DZ,Cje,mPe,kn,wje,GZ,Aje,yje,OZ,Lje,xje,gPe,zw,hPe,m$,$je,pPe,_f,uPe,ui,bf,VZ,Qw,kje,XZ,Sje,_Pe,Co,Ww,Rje,Hw,Bje,g$,Pje,Ije,qje,Uw,Nje,zZ,jje,Dje,Gje,Er,Jw,Oje,QZ,Vje,Xje,_i,zje,WZ,Qje,Wje,HZ,Hje,Uje,Jje,y,vf,UZ,Yje,Kje,h$,Zje,eDe,oDe,Ff,JZ,rDe,tDe,p$,aDe,nDe,sDe,Tf,YZ,lDe,iDe,u$,dDe,cDe,fDe,Mf,KZ,mDe,gDe,_$,hDe,pDe,uDe,Ef,ZZ,_De,bDe,b$,vDe,FDe,TDe,Cf,eee,MDe,EDe,v$,CDe,wDe,ADe,wf,oee,yDe,LDe,F$,xDe,$De,kDe,Af,ree,SDe,RDe,T$,BDe,PDe,IDe,yf,tee,qDe,NDe,M$,jDe,DDe,GDe,Lf,aee,ODe,VDe,E$,XDe,zDe,QDe,xf,nee,WDe,HDe,C$,UDe,JDe,YDe,$f,see,KDe,ZDe,w$,eGe,oGe,rGe,kf,lee,tGe,aGe,A$,nGe,sGe,lGe,Sf,iee,iGe,dGe,y$,cGe,fGe,mGe,Rf,dee,gGe,hGe,L$,pGe,uGe,_Ge,Bf,cee,bGe,vGe,x$,FGe,TGe,MGe,Pf,fee,EGe,CGe,$$,wGe,AGe,yGe,If,mee,LGe,xGe,k$,$Ge,kGe,SGe,qf,gee,RGe,BGe,S$,PGe,IGe,qGe,Nf,hee,NGe,jGe,R$,DGe,GGe,OGe,jf,pee,VGe,XGe,B$,zGe,QGe,WGe,Df,uee,HGe,UGe,P$,JGe,YGe,KGe,Gf,_ee,ZGe,eOe,I$,oOe,rOe,tOe,Of,bee,aOe,nOe,q$,sOe,lOe,iOe,Vf,vee,dOe,cOe,N$,fOe,mOe,gOe,Xf,Fee,hOe,pOe,j$,uOe,_Oe,bOe,zf,Tee,vOe,FOe,D$,TOe,MOe,EOe,Qf,Mee,COe,wOe,G$,AOe,yOe,LOe,Wf,Eee,xOe,$Oe,O$,kOe,SOe,ROe,Hf,Cee,BOe,POe,V$,IOe,qOe,NOe,Uf,wee,jOe,DOe,X$,GOe,OOe,VOe,Jf,Aee,XOe,zOe,z$,QOe,WOe,HOe,Yf,yee,UOe,JOe,Q$,YOe,KOe,ZOe,Kf,Lee,eVe,oVe,W$,rVe,tVe,aVe,Zf,xee,nVe,sVe,H$,lVe,iVe,dVe,em,$ee,cVe,fVe,U$,mVe,gVe,hVe,om,kee,pVe,uVe,J$,_Ve,bVe,vVe,rm,See,FVe,TVe,Y$,MVe,EVe,CVe,tm,Ree,wVe,AVe,K$,yVe,LVe,xVe,am,Bee,$Ve,kVe,Z$,SVe,RVe,BVe,nm,Pee,PVe,IVe,ek,qVe,NVe,jVe,sm,Iee,DVe,GVe,ok,OVe,VVe,XVe,lm,qee,zVe,QVe,rk,WVe,HVe,UVe,im,Nee,JVe,YVe,tk,KVe,ZVe,eXe,dm,jee,oXe,rXe,ak,tXe,aXe,nXe,cm,Dee,sXe,lXe,nk,iXe,dXe,cXe,fm,Gee,fXe,mXe,sk,gXe,hXe,pXe,mm,Oee,uXe,_Xe,lk,bXe,vXe,FXe,gm,Vee,TXe,MXe,ik,EXe,CXe,wXe,hm,Xee,AXe,yXe,dk,LXe,xXe,$Xe,pm,zee,kXe,SXe,ck,RXe,BXe,PXe,um,Qee,IXe,qXe,fk,NXe,jXe,DXe,_m,Wee,GXe,OXe,mk,VXe,XXe,zXe,bm,Hee,QXe,WXe,gk,HXe,UXe,JXe,vm,Uee,YXe,KXe,hk,ZXe,eze,oze,Fm,Jee,rze,tze,pk,aze,nze,sze,Tm,Yee,lze,ize,uk,dze,cze,fze,Mm,Kee,mze,gze,_k,hze,pze,uze,Em,Zee,_ze,bze,bk,vze,Fze,Tze,Cm,eoe,Mze,Eze,vk,Cze,wze,Aze,wm,ooe,yze,Lze,Fk,xze,$ze,kze,Am,roe,Sze,Rze,Tk,Bze,Pze,Ize,ym,toe,qze,Nze,Mk,jze,Dze,Gze,Lm,aoe,Oze,Vze,Ek,Xze,zze,Qze,xm,noe,Wze,Hze,Ck,Uze,Jze,Yze,$m,soe,Kze,Zze,wk,eQe,oQe,rQe,km,loe,tQe,aQe,Ak,nQe,sQe,lQe,Sm,ioe,iQe,dQe,yk,cQe,fQe,mQe,Rm,doe,gQe,hQe,Lk,pQe,uQe,_Qe,Bm,coe,bQe,vQe,xk,FQe,TQe,MQe,Pm,foe,EQe,CQe,$k,wQe,AQe,yQe,Im,moe,LQe,xQe,kk,$Qe,kQe,SQe,qm,goe,RQe,BQe,Sk,PQe,IQe,qQe,Nm,hoe,NQe,jQe,Rk,DQe,GQe,OQe,jm,poe,VQe,XQe,Bk,zQe,QQe,WQe,Dm,uoe,HQe,UQe,Pk,JQe,YQe,KQe,Gm,_oe,ZQe,eWe,Ik,oWe,rWe,tWe,Om,boe,aWe,nWe,qk,sWe,lWe,iWe,Vm,voe,dWe,cWe,Nk,fWe,mWe,gWe,Xm,Foe,hWe,pWe,jk,uWe,_We,bWe,zm,Toe,vWe,FWe,Dk,TWe,MWe,EWe,Qm,Moe,CWe,wWe,Gk,AWe,yWe,LWe,Wm,Eoe,xWe,$We,Ok,kWe,SWe,RWe,Hm,Coe,BWe,PWe,Vk,IWe,qWe,NWe,Um,woe,jWe,DWe,Xk,GWe,OWe,VWe,Jm,Aoe,XWe,zWe,zk,QWe,WWe,HWe,Ym,yoe,UWe,JWe,Qk,YWe,KWe,ZWe,Km,Loe,eHe,oHe,Wk,rHe,tHe,aHe,Zm,xoe,nHe,sHe,Hk,lHe,iHe,dHe,eg,$oe,cHe,fHe,Uk,mHe,gHe,hHe,og,koe,pHe,uHe,Jk,_He,bHe,vHe,rg,Soe,FHe,THe,Yk,MHe,EHe,CHe,tg,Roe,wHe,AHe,Kk,yHe,LHe,xHe,ag,Boe,$He,kHe,Zk,SHe,RHe,BHe,ng,Poe,PHe,IHe,eS,qHe,NHe,jHe,sg,Ioe,DHe,GHe,oS,OHe,VHe,XHe,lg,qoe,zHe,QHe,rS,WHe,HHe,UHe,ig,Noe,JHe,YHe,tS,KHe,ZHe,eUe,dg,joe,oUe,rUe,aS,tUe,aUe,nUe,cg,Doe,sUe,lUe,nS,iUe,dUe,cUe,fg,Goe,fUe,mUe,sS,gUe,hUe,pUe,mg,Ooe,uUe,_Ue,lS,bUe,vUe,FUe,gg,Voe,TUe,MUe,iS,EUe,CUe,wUe,hg,AUe,pg,Yw,yUe,Xoe,LUe,bPe,bi,ug,zoe,Kw,xUe,Qoe,$Ue,vPe,wo,Zw,kUe,eA,SUe,dS,RUe,BUe,PUe,oA,IUe,Woe,qUe,NUe,jUe,Cr,rA,DUe,Hoe,GUe,OUe,Ca,VUe,Uoe,XUe,zUe,Joe,QUe,WUe,Yoe,HUe,UUe,JUe,k,Sn,Koe,YUe,KUe,cS,ZUe,eJe,fS,oJe,rJe,tJe,Rn,Zoe,aJe,nJe,mS,sJe,lJe,gS,iJe,dJe,cJe,Bn,ere,fJe,mJe,hS,gJe,hJe,pS,pJe,uJe,_Je,_g,ore,bJe,vJe,uS,FJe,TJe,MJe,Pn,rre,EJe,CJe,_S,wJe,AJe,bS,yJe,LJe,xJe,bg,tre,$Je,kJe,vS,SJe,RJe,BJe,vg,are,PJe,IJe,FS,qJe,NJe,jJe,Fg,nre,DJe,GJe,TS,OJe,VJe,XJe,In,sre,zJe,QJe,MS,WJe,HJe,ES,UJe,JJe,YJe,qn,lre,KJe,ZJe,CS,eYe,oYe,wS,rYe,tYe,aYe,Nn,ire,nYe,sYe,AS,lYe,iYe,yS,dYe,cYe,fYe,Tg,dre,mYe,gYe,LS,hYe,pYe,uYe,Mg,cre,_Ye,bYe,xS,vYe,FYe,TYe,jn,fre,MYe,EYe,$S,CYe,wYe,kS,AYe,yYe,LYe,Eg,mre,xYe,$Ye,SS,kYe,SYe,RYe,Dn,gre,BYe,PYe,RS,IYe,qYe,BS,NYe,jYe,DYe,Gn,hre,GYe,OYe,PS,VYe,XYe,IS,zYe,QYe,WYe,On,pre,HYe,UYe,qS,JYe,YYe,NS,KYe,ZYe,eKe,Cg,ure,oKe,rKe,jS,tKe,aKe,nKe,Vn,_re,sKe,lKe,DS,iKe,dKe,GS,cKe,fKe,mKe,Xn,bre,gKe,hKe,OS,pKe,uKe,VS,_Ke,bKe,vKe,zn,vre,FKe,TKe,XS,MKe,EKe,zS,CKe,wKe,AKe,Qn,Fre,yKe,LKe,QS,xKe,$Ke,WS,kKe,SKe,RKe,Wn,Tre,BKe,PKe,HS,IKe,qKe,US,NKe,jKe,DKe,Hn,Mre,GKe,OKe,JS,VKe,XKe,YS,zKe,QKe,WKe,wg,Ere,HKe,UKe,KS,JKe,YKe,KKe,Un,Cre,ZKe,eZe,ZS,oZe,rZe,eR,tZe,aZe,nZe,Ag,wre,sZe,lZe,oR,iZe,dZe,cZe,Jn,Are,fZe,mZe,rR,gZe,hZe,tR,pZe,uZe,_Ze,Yn,yre,bZe,vZe,aR,FZe,TZe,nR,MZe,EZe,CZe,Kn,Lre,wZe,AZe,sR,yZe,LZe,lR,xZe,$Ze,kZe,Zn,xre,SZe,RZe,iR,BZe,PZe,dR,IZe,qZe,NZe,es,$re,jZe,DZe,cR,GZe,OZe,fR,VZe,XZe,zZe,yg,kre,QZe,WZe,mR,HZe,UZe,JZe,os,Sre,YZe,KZe,gR,ZZe,eeo,hR,oeo,reo,teo,rs,Rre,aeo,neo,pR,seo,leo,uR,ieo,deo,ceo,ts,Bre,feo,meo,_R,geo,heo,bR,peo,ueo,_eo,as,Pre,beo,veo,vR,Feo,Teo,FR,Meo,Eeo,Ceo,ns,Ire,weo,Aeo,TR,yeo,Leo,MR,xeo,$eo,keo,ss,qre,Seo,Reo,ER,Beo,Peo,CR,Ieo,qeo,Neo,Lg,Nre,jeo,Deo,wR,Geo,Oeo,Veo,ls,jre,Xeo,zeo,AR,Qeo,Weo,yR,Heo,Ueo,Jeo,xg,Dre,Yeo,Keo,LR,Zeo,eoo,ooo,$g,Gre,roo,too,xR,aoo,noo,soo,is,Ore,loo,ioo,$R,doo,coo,kR,foo,moo,goo,ds,Vre,hoo,poo,SR,uoo,_oo,RR,boo,voo,Foo,cs,Xre,Too,Moo,BR,Eoo,Coo,PR,woo,Aoo,yoo,kg,zre,Loo,xoo,IR,$oo,koo,Soo,fs,Qre,Roo,Boo,qR,Poo,Ioo,NR,qoo,Noo,joo,ms,Wre,Doo,Goo,jR,Ooo,Voo,DR,Xoo,zoo,Qoo,gs,Hre,Woo,Hoo,GR,Uoo,Joo,OR,Yoo,Koo,Zoo,hs,Ure,ero,oro,VR,rro,tro,XR,aro,nro,sro,ps,Jre,lro,iro,zR,dro,cro,QR,fro,mro,gro,us,Yre,hro,pro,WR,uro,_ro,HR,bro,vro,Fro,Sg,Kre,Tro,Mro,UR,Ero,Cro,wro,Rg,Zre,Aro,yro,JR,Lro,xro,$ro,Bg,ete,kro,Sro,YR,Rro,Bro,Pro,Pg,ote,Iro,qro,KR,Nro,jro,Dro,_s,rte,Gro,Oro,ZR,Vro,Xro,eB,zro,Qro,Wro,Ig,tte,Hro,Uro,oB,Jro,Yro,Kro,bs,ate,Zro,eto,rB,oto,rto,tB,tto,ato,nto,vs,nte,sto,lto,aB,ito,dto,nB,cto,fto,mto,Fs,ste,gto,hto,sB,pto,uto,lB,_to,bto,vto,Ts,lte,Fto,Tto,iB,Mto,Eto,dB,Cto,wto,Ato,Ms,ite,yto,Lto,cB,xto,$to,fB,kto,Sto,Rto,Es,dte,Bto,Pto,mB,Ito,qto,gB,Nto,jto,Dto,qg,cte,Gto,Oto,hB,Vto,Xto,zto,Ng,fte,Qto,Wto,pB,Hto,Uto,Jto,Cs,mte,Yto,Kto,uB,Zto,eao,_B,oao,rao,tao,ws,gte,aao,nao,bB,sao,lao,vB,iao,dao,cao,As,hte,fao,mao,FB,gao,hao,TB,pao,uao,_ao,jg,pte,bao,vao,MB,Fao,Tao,Mao,Dg,ute,Eao,Cao,EB,wao,Aao,yao,Gg,_te,Lao,xao,CB,$ao,kao,Sao,ys,bte,Rao,Bao,wB,Pao,Iao,AB,qao,Nao,jao,Og,vte,Dao,Gao,yB,Oao,Vao,Xao,Vg,Fte,zao,Qao,LB,Wao,Hao,Uao,Ls,Tte,Jao,Yao,xB,Kao,Zao,$B,eno,ono,rno,Xg,Mte,tno,ano,kB,nno,sno,lno,zg,Ete,ino,dno,SB,cno,fno,mno,xs,Cte,gno,hno,RB,pno,uno,BB,_no,bno,vno,$s,wte,Fno,Tno,PB,Mno,Eno,IB,Cno,wno,Ano,ks,Ate,yno,Lno,qB,xno,$no,NB,kno,Sno,Rno,Ss,yte,Bno,Pno,jB,Ino,qno,DB,Nno,jno,Dno,Qg,Gno,Wg,tA,Ono,Lte,Vno,FPe,vi,Hg,xte,aA,Xno,$te,zno,TPe,Ao,nA,Qno,sA,Wno,GB,Hno,Uno,Jno,lA,Yno,kte,Kno,Zno,eso,Qe,iA,oso,Ste,rso,tso,wa,aso,Rte,nso,sso,Bte,lso,iso,Pte,dso,cso,fso,te,Ug,Ite,mso,gso,OB,hso,pso,uso,Jg,qte,_so,bso,VB,vso,Fso,Tso,Yg,Nte,Mso,Eso,XB,Cso,wso,Aso,Kg,jte,yso,Lso,zB,xso,$so,kso,Zg,Dte,Sso,Rso,QB,Bso,Pso,Iso,eh,Gte,qso,Nso,WB,jso,Dso,Gso,oh,Ote,Oso,Vso,HB,Xso,zso,Qso,rh,Vte,Wso,Hso,UB,Uso,Jso,Yso,th,Xte,Kso,Zso,JB,elo,olo,rlo,ah,zte,tlo,alo,YB,nlo,slo,llo,nh,Qte,ilo,dlo,KB,clo,flo,mlo,sh,Wte,glo,hlo,ZB,plo,ulo,_lo,lh,Hte,blo,vlo,eP,Flo,Tlo,Mlo,ih,Ute,Elo,Clo,oP,wlo,Alo,ylo,dh,Jte,Llo,xlo,rP,$lo,klo,Slo,ch,Yte,Rlo,Blo,tP,Plo,Ilo,qlo,fh,Kte,Nlo,jlo,aP,Dlo,Glo,Olo,mh,Zte,Vlo,Xlo,nP,zlo,Qlo,Wlo,gh,eae,Hlo,Ulo,sP,Jlo,Ylo,Klo,hh,oae,Zlo,eio,lP,oio,rio,tio,ph,rae,aio,nio,iP,sio,lio,iio,uh,tae,dio,cio,dP,fio,mio,gio,_h,aae,hio,pio,cP,uio,_io,bio,bh,nae,vio,Fio,fP,Tio,Mio,Eio,vh,Cio,Fh,wio,Th,dA,Aio,sae,yio,MPe,Fi,Mh,lae,cA,Lio,iae,xio,EPe,yo,fA,$io,mA,kio,mP,Sio,Rio,Bio,gA,Pio,dae,Iio,qio,Nio,We,hA,jio,cae,Dio,Gio,Ti,Oio,fae,Vio,Xio,mae,zio,Qio,Wio,be,Eh,gae,Hio,Uio,gP,Jio,Yio,Kio,Ch,hae,Zio,edo,hP,odo,rdo,tdo,wh,pae,ado,ndo,pP,sdo,ldo,ido,Ah,uae,ddo,cdo,uP,fdo,mdo,gdo,yh,_ae,hdo,pdo,_P,udo,_do,bdo,Lh,bae,vdo,Fdo,bP,Tdo,Mdo,Edo,xh,vae,Cdo,wdo,vP,Ado,ydo,Ldo,$h,Fae,xdo,$do,FP,kdo,Sdo,Rdo,kh,Tae,Bdo,Pdo,TP,Ido,qdo,Ndo,Sh,Mae,jdo,Ddo,MP,Gdo,Odo,Vdo,Rh,Eae,Xdo,zdo,EP,Qdo,Wdo,Hdo,Bh,Cae,Udo,Jdo,CP,Ydo,Kdo,Zdo,Ph,wae,eco,oco,wP,rco,tco,aco,Ih,Aae,nco,sco,AP,lco,ico,dco,qh,cco,Nh,fco,jh,pA,mco,yae,gco,CPe,Mi,Dh,Lae,uA,hco,xae,pco,wPe,Lo,_A,uco,Ei,_co,yP,bco,vco,LP,Fco,Tco,Mco,bA,Eco,$ae,Cco,wco,Aco,ot,vA,yco,kae,Lco,xco,Ci,$co,Sae,kco,Sco,xP,Rco,Bco,Pco,Gh,Ico,He,FA,qco,Rae,Nco,jco,Aa,Dco,Bae,Gco,Oco,Pae,Vco,Xco,Iae,zco,Qco,Wco,x,Oh,qae,Hco,Uco,$P,Jco,Yco,Kco,Vh,Nae,Zco,efo,kP,ofo,rfo,tfo,Xh,jae,afo,nfo,SP,sfo,lfo,ifo,zh,Dae,dfo,cfo,RP,ffo,mfo,gfo,Qh,Gae,hfo,pfo,BP,ufo,_fo,bfo,Wh,Oae,vfo,Ffo,PP,Tfo,Mfo,Efo,Hh,Vae,Cfo,wfo,IP,Afo,yfo,Lfo,Uh,Xae,xfo,$fo,qP,kfo,Sfo,Rfo,Jh,zae,Bfo,Pfo,NP,Ifo,qfo,Nfo,Yh,Qae,jfo,Dfo,jP,Gfo,Ofo,Vfo,Kh,Wae,Xfo,zfo,DP,Qfo,Wfo,Hfo,Zh,Hae,Ufo,Jfo,GP,Yfo,Kfo,Zfo,ep,Uae,emo,omo,OP,rmo,tmo,amo,op,Jae,nmo,smo,VP,lmo,imo,dmo,rp,Yae,cmo,fmo,XP,mmo,gmo,hmo,tp,Kae,pmo,umo,zP,_mo,bmo,vmo,ap,Zae,Fmo,Tmo,QP,Mmo,Emo,Cmo,np,ene,wmo,Amo,WP,ymo,Lmo,xmo,sp,one,$mo,kmo,HP,Smo,Rmo,Bmo,lp,rne,Pmo,Imo,UP,qmo,Nmo,jmo,ip,tne,Dmo,Gmo,JP,Omo,Vmo,Xmo,dp,ane,zmo,Qmo,YP,Wmo,Hmo,Umo,cp,nne,Jmo,Ymo,KP,Kmo,Zmo,ego,fp,sne,ogo,rgo,ZP,tgo,ago,ngo,mp,lne,sgo,lgo,eI,igo,dgo,cgo,gp,ine,fgo,mgo,oI,ggo,hgo,pgo,hp,dne,ugo,_go,rI,bgo,vgo,Fgo,pp,cne,Tgo,Mgo,tI,Ego,Cgo,wgo,up,fne,Ago,ygo,aI,Lgo,xgo,$go,_p,mne,kgo,Sgo,nI,Rgo,Bgo,Pgo,Rs,gne,Igo,qgo,sI,Ngo,jgo,lI,Dgo,Ggo,Ogo,bp,hne,Vgo,Xgo,iI,zgo,Qgo,Wgo,vp,pne,Hgo,Ugo,dI,Jgo,Ygo,Kgo,Fp,une,Zgo,eho,cI,oho,rho,tho,Tp,_ne,aho,nho,fI,sho,lho,iho,Mp,bne,dho,cho,mI,fho,mho,gho,Ep,vne,hho,pho,gI,uho,_ho,bho,Cp,Fne,vho,Fho,hI,Tho,Mho,Eho,wp,Tne,Cho,who,pI,Aho,yho,Lho,Ap,Mne,xho,$ho,uI,kho,Sho,Rho,yp,Ene,Bho,Pho,_I,Iho,qho,Nho,Lp,Cne,jho,Dho,bI,Gho,Oho,Vho,xp,wne,Xho,zho,vI,Qho,Who,Hho,$p,Ane,Uho,Jho,FI,Yho,Kho,Zho,kp,yne,epo,opo,TI,rpo,tpo,apo,Sp,Lne,npo,spo,MI,lpo,ipo,dpo,Rp,xne,cpo,fpo,EI,mpo,gpo,hpo,Bp,$ne,ppo,upo,CI,_po,bpo,vpo,Pp,kne,Fpo,Tpo,wI,Mpo,Epo,Cpo,Ip,Sne,wpo,Apo,AI,ypo,Lpo,xpo,qp,Rne,$po,kpo,yI,Spo,Rpo,Bpo,Np,Bne,Ppo,Ipo,LI,qpo,Npo,jpo,jp,Pne,Dpo,Gpo,xI,Opo,Vpo,Xpo,Dp,Ine,zpo,Qpo,$I,Wpo,Hpo,Upo,Gp,qne,Jpo,Ypo,kI,Kpo,Zpo,euo,Op,Nne,ouo,ruo,SI,tuo,auo,nuo,Vp,jne,suo,luo,RI,iuo,duo,cuo,Xp,Dne,fuo,muo,BI,guo,huo,puo,zp,Gne,uuo,_uo,PI,buo,vuo,Fuo,Qp,One,Tuo,Muo,II,Euo,Cuo,wuo,Wp,Vne,Auo,yuo,qI,Luo,xuo,$uo,Hp,Xne,kuo,Suo,NI,Ruo,Buo,Puo,Up,zne,Iuo,quo,jI,Nuo,juo,Duo,Jp,Qne,Guo,Ouo,DI,Vuo,Xuo,zuo,Yp,Wne,Quo,Wuo,GI,Huo,Uuo,Juo,Kp,Hne,Yuo,Kuo,OI,Zuo,e_o,o_o,Zp,Une,r_o,t_o,VI,a_o,n_o,s_o,eu,Jne,l_o,i_o,XI,d_o,c_o,f_o,ou,Yne,m_o,g_o,zI,h_o,p_o,u_o,ru,Kne,__o,b_o,QI,v_o,F_o,T_o,tu,Zne,M_o,E_o,WI,C_o,w_o,A_o,au,ese,y_o,L_o,HI,x_o,$_o,k_o,nu,ose,S_o,R_o,UI,B_o,P_o,I_o,su,rse,q_o,N_o,JI,j_o,D_o,G_o,lu,tse,O_o,V_o,YI,X_o,z_o,Q_o,iu,ase,W_o,H_o,KI,U_o,J_o,Y_o,du,nse,K_o,Z_o,ZI,e1o,o1o,r1o,cu,sse,t1o,a1o,eq,n1o,s1o,l1o,fu,lse,i1o,d1o,oq,c1o,f1o,m1o,mu,ise,g1o,h1o,rq,p1o,u1o,_1o,gu,dse,b1o,v1o,tq,F1o,T1o,M1o,hu,cse,E1o,C1o,aq,w1o,A1o,y1o,pu,fse,L1o,x1o,nq,$1o,k1o,S1o,uu,mse,R1o,B1o,sq,P1o,I1o,q1o,_u,gse,N1o,j1o,lq,D1o,G1o,O1o,bu,hse,V1o,X1o,iq,z1o,Q1o,W1o,vu,pse,H1o,U1o,dq,J1o,Y1o,K1o,Fu,use,Z1o,e8o,cq,o8o,r8o,t8o,Tu,_se,a8o,n8o,fq,s8o,l8o,i8o,Mu,bse,d8o,c8o,mq,f8o,m8o,g8o,Eu,vse,h8o,p8o,gq,u8o,_8o,b8o,Cu,Fse,v8o,F8o,hq,T8o,M8o,E8o,wu,Tse,C8o,w8o,pq,A8o,y8o,L8o,Au,Mse,x8o,$8o,uq,k8o,S8o,R8o,yu,Ese,B8o,P8o,_q,I8o,q8o,N8o,Lu,j8o,Cse,D8o,G8o,wse,O8o,V8o,xu,APe,wi,$u,Ase,TA,X8o,yse,z8o,yPe,xo,MA,Q8o,Ai,W8o,bq,H8o,U8o,vq,J8o,Y8o,K8o,EA,Z8o,Lse,ebo,obo,rbo,rt,CA,tbo,xse,abo,nbo,yi,sbo,$se,lbo,ibo,Fq,dbo,cbo,fbo,ku,mbo,Ue,wA,gbo,kse,hbo,pbo,ya,ubo,Sse,_bo,bbo,Rse,vbo,Fbo,Bse,Tbo,Mbo,Ebo,G,Su,Pse,Cbo,wbo,Tq,Abo,ybo,Lbo,Ru,Ise,xbo,$bo,Mq,kbo,Sbo,Rbo,Bu,qse,Bbo,Pbo,Eq,Ibo,qbo,Nbo,Pu,Nse,jbo,Dbo,Cq,Gbo,Obo,Vbo,Iu,jse,Xbo,zbo,wq,Qbo,Wbo,Hbo,qu,Dse,Ubo,Jbo,Aq,Ybo,Kbo,Zbo,Nu,Gse,e2o,o2o,yq,r2o,t2o,a2o,ju,Ose,n2o,s2o,Lq,l2o,i2o,d2o,Du,Vse,c2o,f2o,xq,m2o,g2o,h2o,Gu,Xse,p2o,u2o,$q,_2o,b2o,v2o,Ou,zse,F2o,T2o,kq,M2o,E2o,C2o,Vu,Qse,w2o,A2o,Sq,y2o,L2o,x2o,Xu,Wse,$2o,k2o,Rq,S2o,R2o,B2o,zu,Hse,P2o,I2o,Bq,q2o,N2o,j2o,Qu,Use,D2o,G2o,Pq,O2o,V2o,X2o,Wu,Jse,z2o,Q2o,Iq,W2o,H2o,U2o,Hu,Yse,J2o,Y2o,qq,K2o,Z2o,evo,Uu,Kse,ovo,rvo,Nq,tvo,avo,nvo,Ju,Zse,svo,lvo,jq,ivo,dvo,cvo,Yu,ele,fvo,mvo,Dq,gvo,hvo,pvo,Ku,ole,uvo,_vo,Gq,bvo,vvo,Fvo,Zu,rle,Tvo,Mvo,Oq,Evo,Cvo,wvo,e_,tle,Avo,yvo,Vq,Lvo,xvo,$vo,o_,ale,kvo,Svo,Xq,Rvo,Bvo,Pvo,r_,nle,Ivo,qvo,zq,Nvo,jvo,Dvo,t_,sle,Gvo,Ovo,Qq,Vvo,Xvo,zvo,a_,lle,Qvo,Wvo,Wq,Hvo,Uvo,Jvo,n_,ile,Yvo,Kvo,Hq,Zvo,eFo,oFo,s_,dle,rFo,tFo,Uq,aFo,nFo,sFo,l_,cle,lFo,iFo,Jq,dFo,cFo,fFo,i_,fle,mFo,gFo,Yq,hFo,pFo,uFo,d_,mle,_Fo,bFo,Kq,vFo,FFo,TFo,c_,gle,MFo,EFo,Zq,CFo,wFo,AFo,f_,hle,yFo,LFo,eN,xFo,$Fo,kFo,m_,ple,SFo,RFo,oN,BFo,PFo,IFo,g_,ule,qFo,NFo,rN,jFo,DFo,GFo,h_,_le,OFo,VFo,tN,XFo,zFo,QFo,p_,ble,WFo,HFo,aN,UFo,JFo,YFo,u_,vle,KFo,ZFo,nN,e6o,o6o,r6o,__,t6o,Fle,a6o,n6o,Tle,s6o,l6o,b_,LPe,Li,v_,Mle,AA,i6o,Ele,d6o,xPe,$o,yA,c6o,xi,f6o,sN,m6o,g6o,lN,h6o,p6o,u6o,LA,_6o,Cle,b6o,v6o,F6o,tt,xA,T6o,wle,M6o,E6o,$i,C6o,Ale,w6o,A6o,iN,y6o,L6o,x6o,F_,$6o,Je,$A,k6o,yle,S6o,R6o,La,B6o,Lle,P6o,I6o,xle,q6o,N6o,$le,j6o,D6o,G6o,z,T_,kle,O6o,V6o,dN,X6o,z6o,Q6o,M_,Sle,W6o,H6o,cN,U6o,J6o,Y6o,E_,Rle,K6o,Z6o,fN,eTo,oTo,rTo,C_,Ble,tTo,aTo,mN,nTo,sTo,lTo,w_,Ple,iTo,dTo,gN,cTo,fTo,mTo,A_,Ile,gTo,hTo,hN,pTo,uTo,_To,y_,qle,bTo,vTo,pN,FTo,TTo,MTo,L_,Nle,ETo,CTo,uN,wTo,ATo,yTo,x_,jle,LTo,xTo,_N,$To,kTo,STo,$_,Dle,RTo,BTo,bN,PTo,ITo,qTo,k_,Gle,NTo,jTo,vN,DTo,GTo,OTo,S_,Ole,VTo,XTo,FN,zTo,QTo,WTo,R_,Vle,HTo,UTo,TN,JTo,YTo,KTo,B_,Xle,ZTo,e9o,MN,o9o,r9o,t9o,P_,zle,a9o,n9o,EN,s9o,l9o,i9o,I_,Qle,d9o,c9o,CN,f9o,m9o,g9o,q_,Wle,h9o,p9o,wN,u9o,_9o,b9o,N_,Hle,v9o,F9o,AN,T9o,M9o,E9o,j_,Ule,C9o,w9o,yN,A9o,y9o,L9o,D_,Jle,x9o,$9o,LN,k9o,S9o,R9o,G_,Yle,B9o,P9o,xN,I9o,q9o,N9o,O_,Kle,j9o,D9o,$N,G9o,O9o,V9o,V_,Zle,X9o,z9o,kN,Q9o,W9o,H9o,X_,eie,U9o,J9o,SN,Y9o,K9o,Z9o,z_,oie,eMo,oMo,RN,rMo,tMo,aMo,Q_,rie,nMo,sMo,BN,lMo,iMo,dMo,W_,tie,cMo,fMo,PN,mMo,gMo,hMo,H_,aie,pMo,uMo,IN,_Mo,bMo,vMo,U_,nie,FMo,TMo,qN,MMo,EMo,CMo,J_,sie,wMo,AMo,NN,yMo,LMo,xMo,Y_,lie,$Mo,kMo,jN,SMo,RMo,BMo,K_,iie,PMo,IMo,DN,qMo,NMo,jMo,Z_,die,DMo,GMo,GN,OMo,VMo,XMo,e1,cie,zMo,QMo,ON,WMo,HMo,UMo,o1,fie,JMo,YMo,VN,KMo,ZMo,e4o,r1,o4o,mie,r4o,t4o,gie,a4o,n4o,t1,$Pe,ki,a1,hie,kA,s4o,pie,l4o,kPe,ko,SA,i4o,Si,d4o,XN,c4o,f4o,zN,m4o,g4o,h4o,RA,p4o,uie,u4o,_4o,b4o,at,BA,v4o,_ie,F4o,T4o,Ri,M4o,bie,E4o,C4o,QN,w4o,A4o,y4o,n1,L4o,Ye,PA,x4o,vie,$4o,k4o,xa,S4o,Fie,R4o,B4o,Tie,P4o,I4o,Mie,q4o,N4o,j4o,Q,s1,Eie,D4o,G4o,WN,O4o,V4o,X4o,l1,Cie,z4o,Q4o,HN,W4o,H4o,U4o,i1,wie,J4o,Y4o,UN,K4o,Z4o,eEo,d1,Aie,oEo,rEo,JN,tEo,aEo,nEo,c1,yie,sEo,lEo,YN,iEo,dEo,cEo,f1,Lie,fEo,mEo,KN,gEo,hEo,pEo,m1,xie,uEo,_Eo,ZN,bEo,vEo,FEo,g1,$ie,TEo,MEo,ej,EEo,CEo,wEo,h1,kie,AEo,yEo,oj,LEo,xEo,$Eo,p1,Sie,kEo,SEo,rj,REo,BEo,PEo,u1,Rie,IEo,qEo,tj,NEo,jEo,DEo,_1,Bie,GEo,OEo,aj,VEo,XEo,zEo,b1,Pie,QEo,WEo,nj,HEo,UEo,JEo,v1,Iie,YEo,KEo,sj,ZEo,e5o,o5o,F1,qie,r5o,t5o,lj,a5o,n5o,s5o,T1,Nie,l5o,i5o,ij,d5o,c5o,f5o,M1,jie,m5o,g5o,dj,h5o,p5o,u5o,E1,Die,_5o,b5o,cj,v5o,F5o,T5o,C1,Gie,M5o,E5o,fj,C5o,w5o,A5o,w1,Oie,y5o,L5o,mj,x5o,$5o,k5o,A1,Vie,S5o,R5o,gj,B5o,P5o,I5o,y1,Xie,q5o,N5o,hj,j5o,D5o,G5o,L1,zie,O5o,V5o,pj,X5o,z5o,Q5o,x1,Qie,W5o,H5o,uj,U5o,J5o,Y5o,$1,Wie,K5o,Z5o,_j,eCo,oCo,rCo,k1,Hie,tCo,aCo,bj,nCo,sCo,lCo,S1,Uie,iCo,dCo,vj,cCo,fCo,mCo,R1,Jie,gCo,hCo,Fj,pCo,uCo,_Co,B1,Yie,bCo,vCo,Tj,FCo,TCo,MCo,P1,Kie,ECo,CCo,Mj,wCo,ACo,yCo,I1,Zie,LCo,xCo,ede,$Co,kCo,SCo,q1,ode,RCo,BCo,Ej,PCo,ICo,qCo,N1,rde,NCo,jCo,Cj,DCo,GCo,OCo,j1,tde,VCo,XCo,wj,zCo,QCo,WCo,D1,ade,HCo,UCo,Aj,JCo,YCo,KCo,G1,ZCo,nde,e3o,o3o,sde,r3o,t3o,O1,SPe,Bi,V1,lde,IA,a3o,ide,n3o,RPe,So,qA,s3o,Pi,l3o,yj,i3o,d3o,Lj,c3o,f3o,m3o,NA,g3o,dde,h3o,p3o,u3o,nt,jA,_3o,cde,b3o,v3o,Ii,F3o,fde,T3o,M3o,xj,E3o,C3o,w3o,X1,A3o,Ke,DA,y3o,mde,L3o,x3o,$a,$3o,gde,k3o,S3o,hde,R3o,B3o,pde,P3o,I3o,q3o,he,z1,ude,N3o,j3o,$j,D3o,G3o,O3o,Q1,_de,V3o,X3o,kj,z3o,Q3o,W3o,W1,bde,H3o,U3o,Sj,J3o,Y3o,K3o,H1,vde,Z3o,ewo,Rj,owo,rwo,two,U1,Fde,awo,nwo,Bj,swo,lwo,iwo,J1,Tde,dwo,cwo,Pj,fwo,mwo,gwo,Y1,Mde,hwo,pwo,Ij,uwo,_wo,bwo,K1,Ede,vwo,Fwo,qj,Two,Mwo,Ewo,Z1,Cde,Cwo,wwo,Nj,Awo,ywo,Lwo,e8,wde,xwo,$wo,jj,kwo,Swo,Rwo,o8,Ade,Bwo,Pwo,Dj,Iwo,qwo,Nwo,r8,yde,jwo,Dwo,Gj,Gwo,Owo,Vwo,t8,Lde,Xwo,zwo,Oj,Qwo,Wwo,Hwo,a8,xde,Uwo,Jwo,Vj,Ywo,Kwo,Zwo,n8,$de,eAo,oAo,Xj,rAo,tAo,aAo,s8,kde,nAo,sAo,zj,lAo,iAo,dAo,l8,Sde,cAo,fAo,Qj,mAo,gAo,hAo,i8,pAo,Rde,uAo,_Ao,Bde,bAo,vAo,d8,BPe,qi,c8,Pde,GA,FAo,Ide,TAo,PPe,Ro,OA,MAo,Ni,EAo,Wj,CAo,wAo,Hj,AAo,yAo,LAo,VA,xAo,qde,$Ao,kAo,SAo,st,XA,RAo,Nde,BAo,PAo,ji,IAo,jde,qAo,NAo,Uj,jAo,DAo,GAo,f8,OAo,Ze,zA,VAo,Dde,XAo,zAo,ka,QAo,Gde,WAo,HAo,Ode,UAo,JAo,Vde,YAo,KAo,ZAo,q,m8,Xde,e0o,o0o,Jj,r0o,t0o,a0o,g8,zde,n0o,s0o,Yj,l0o,i0o,d0o,h8,Qde,c0o,f0o,Kj,m0o,g0o,h0o,p8,Wde,p0o,u0o,Zj,_0o,b0o,v0o,u8,Hde,F0o,T0o,eD,M0o,E0o,C0o,_8,Ude,w0o,A0o,oD,y0o,L0o,x0o,b8,Jde,$0o,k0o,rD,S0o,R0o,B0o,v8,Yde,P0o,I0o,tD,q0o,N0o,j0o,F8,Kde,D0o,G0o,aD,O0o,V0o,X0o,T8,Zde,z0o,Q0o,nD,W0o,H0o,U0o,M8,ece,J0o,Y0o,sD,K0o,Z0o,eyo,E8,oce,oyo,ryo,lD,tyo,ayo,nyo,C8,rce,syo,lyo,iD,iyo,dyo,cyo,w8,tce,fyo,myo,dD,gyo,hyo,pyo,A8,ace,uyo,_yo,cD,byo,vyo,Fyo,y8,nce,Tyo,Myo,fD,Eyo,Cyo,wyo,L8,sce,Ayo,yyo,mD,Lyo,xyo,$yo,x8,lce,kyo,Syo,gD,Ryo,Byo,Pyo,$8,ice,Iyo,qyo,hD,Nyo,jyo,Dyo,k8,dce,Gyo,Oyo,pD,Vyo,Xyo,zyo,S8,cce,Qyo,Wyo,uD,Hyo,Uyo,Jyo,R8,fce,Yyo,Kyo,_D,Zyo,eLo,oLo,B8,mce,rLo,tLo,bD,aLo,nLo,sLo,P8,gce,lLo,iLo,vD,dLo,cLo,fLo,I8,hce,mLo,gLo,FD,hLo,pLo,uLo,q8,pce,_Lo,bLo,TD,vLo,FLo,TLo,N8,uce,MLo,ELo,MD,CLo,wLo,ALo,j8,_ce,yLo,LLo,ED,xLo,$Lo,kLo,D8,bce,SLo,RLo,CD,BLo,PLo,ILo,G8,vce,qLo,NLo,wD,jLo,DLo,GLo,O8,Fce,OLo,VLo,AD,XLo,zLo,QLo,V8,Tce,WLo,HLo,yD,ULo,JLo,YLo,X8,Mce,KLo,ZLo,LD,exo,oxo,rxo,z8,Ece,txo,axo,xD,nxo,sxo,lxo,Q8,Cce,ixo,dxo,$D,cxo,fxo,mxo,W8,wce,gxo,hxo,kD,pxo,uxo,_xo,H8,Ace,bxo,vxo,SD,Fxo,Txo,Mxo,U8,yce,Exo,Cxo,RD,wxo,Axo,yxo,J8,Lce,Lxo,xxo,BD,$xo,kxo,Sxo,Y8,xce,Rxo,Bxo,PD,Pxo,Ixo,qxo,K8,$ce,Nxo,jxo,ID,Dxo,Gxo,Oxo,Z8,kce,Vxo,Xxo,qD,zxo,Qxo,Wxo,eb,Sce,Hxo,Uxo,ND,Jxo,Yxo,Kxo,ob,Rce,Zxo,e7o,jD,o7o,r7o,t7o,rb,Bce,a7o,n7o,DD,s7o,l7o,i7o,tb,Pce,d7o,c7o,GD,f7o,m7o,g7o,ab,Ice,h7o,p7o,OD,u7o,_7o,b7o,nb,v7o,qce,F7o,T7o,Nce,M7o,E7o,sb,IPe,Di,lb,jce,QA,C7o,Dce,w7o,qPe,Bo,WA,A7o,Gi,y7o,VD,L7o,x7o,XD,$7o,k7o,S7o,HA,R7o,Gce,B7o,P7o,I7o,lt,UA,q7o,Oce,N7o,j7o,Oi,D7o,Vce,G7o,O7o,zD,V7o,X7o,z7o,ib,Q7o,eo,JA,W7o,Xce,H7o,U7o,Sa,J7o,zce,Y7o,K7o,Qce,Z7o,e$o,Wce,o$o,r$o,t$o,Y,db,Hce,a$o,n$o,QD,s$o,l$o,i$o,cb,Uce,d$o,c$o,WD,f$o,m$o,g$o,fb,Jce,h$o,p$o,HD,u$o,_$o,b$o,mb,Yce,v$o,F$o,UD,T$o,M$o,E$o,gb,Kce,C$o,w$o,JD,A$o,y$o,L$o,hb,Zce,x$o,$$o,YD,k$o,S$o,R$o,pb,efe,B$o,P$o,KD,I$o,q$o,N$o,ub,ofe,j$o,D$o,ZD,G$o,O$o,V$o,_b,rfe,X$o,z$o,eG,Q$o,W$o,H$o,bb,tfe,U$o,J$o,oG,Y$o,K$o,Z$o,vb,afe,eko,oko,rG,rko,tko,ako,Fb,nfe,nko,sko,tG,lko,iko,dko,Tb,sfe,cko,fko,aG,mko,gko,hko,Mb,lfe,pko,uko,nG,_ko,bko,vko,Eb,ife,Fko,Tko,sG,Mko,Eko,Cko,Cb,dfe,wko,Ako,lG,yko,Lko,xko,wb,cfe,$ko,kko,iG,Sko,Rko,Bko,Ab,ffe,Pko,Iko,dG,qko,Nko,jko,yb,mfe,Dko,Gko,cG,Oko,Vko,Xko,Lb,gfe,zko,Qko,fG,Wko,Hko,Uko,xb,hfe,Jko,Yko,mG,Kko,Zko,eSo,$b,pfe,oSo,rSo,gG,tSo,aSo,nSo,kb,ufe,sSo,lSo,hG,iSo,dSo,cSo,Sb,_fe,fSo,mSo,pG,gSo,hSo,pSo,Rb,bfe,uSo,_So,uG,bSo,vSo,FSo,Bb,vfe,TSo,MSo,_G,ESo,CSo,wSo,Pb,Ffe,ASo,ySo,bG,LSo,xSo,$So,Ib,Tfe,kSo,SSo,vG,RSo,BSo,PSo,qb,ISo,Mfe,qSo,NSo,Efe,jSo,DSo,Nb,NPe,Vi,jb,Cfe,YA,GSo,wfe,OSo,jPe,Po,KA,VSo,Xi,XSo,FG,zSo,QSo,TG,WSo,HSo,USo,ZA,JSo,Afe,YSo,KSo,ZSo,it,e0,eRo,yfe,oRo,rRo,zi,tRo,Lfe,aRo,nRo,MG,sRo,lRo,iRo,Db,dRo,oo,o0,cRo,xfe,fRo,mRo,Ra,gRo,$fe,hRo,pRo,kfe,uRo,_Ro,Sfe,bRo,vRo,FRo,Yr,Gb,Rfe,TRo,MRo,EG,ERo,CRo,wRo,Ob,Bfe,ARo,yRo,CG,LRo,xRo,$Ro,Vb,Pfe,kRo,SRo,wG,RRo,BRo,PRo,Xb,Ife,IRo,qRo,AG,NRo,jRo,DRo,zb,qfe,GRo,ORo,yG,VRo,XRo,zRo,Qb,QRo,Nfe,WRo,HRo,jfe,URo,JRo,Wb,DPe,Qi,Hb,Dfe,r0,YRo,Gfe,KRo,GPe,Io,t0,ZRo,Wi,eBo,LG,oBo,rBo,xG,tBo,aBo,nBo,a0,sBo,Ofe,lBo,iBo,dBo,dt,n0,cBo,Vfe,fBo,mBo,Hi,gBo,Xfe,hBo,pBo,$G,uBo,_Bo,bBo,Ub,vBo,ro,s0,FBo,zfe,TBo,MBo,Ba,EBo,Qfe,CBo,wBo,Wfe,ABo,yBo,Hfe,LBo,xBo,$Bo,U,Jb,Ufe,kBo,SBo,kG,RBo,BBo,PBo,Yb,Jfe,IBo,qBo,SG,NBo,jBo,DBo,Kb,Yfe,GBo,OBo,RG,VBo,XBo,zBo,Zb,Kfe,QBo,WBo,BG,HBo,UBo,JBo,e2,Zfe,YBo,KBo,PG,ZBo,ePo,oPo,o2,eme,rPo,tPo,IG,aPo,nPo,sPo,r2,ome,lPo,iPo,qG,dPo,cPo,fPo,t2,rme,mPo,gPo,NG,hPo,pPo,uPo,a2,tme,_Po,bPo,jG,vPo,FPo,TPo,n2,ame,MPo,EPo,DG,CPo,wPo,APo,s2,nme,yPo,LPo,GG,xPo,$Po,kPo,l2,sme,SPo,RPo,OG,BPo,PPo,IPo,i2,lme,qPo,NPo,VG,jPo,DPo,GPo,d2,ime,OPo,VPo,XG,XPo,zPo,QPo,c2,dme,WPo,HPo,zG,UPo,JPo,YPo,f2,cme,KPo,ZPo,QG,eIo,oIo,rIo,m2,fme,tIo,aIo,WG,nIo,sIo,lIo,g2,mme,iIo,dIo,HG,cIo,fIo,mIo,h2,gme,gIo,hIo,UG,pIo,uIo,_Io,p2,hme,bIo,vIo,JG,FIo,TIo,MIo,u2,pme,EIo,CIo,YG,wIo,AIo,yIo,_2,ume,LIo,xIo,KG,$Io,kIo,SIo,b2,_me,RIo,BIo,ZG,PIo,IIo,qIo,v2,bme,NIo,jIo,eO,DIo,GIo,OIo,F2,vme,VIo,XIo,oO,zIo,QIo,WIo,T2,Fme,HIo,UIo,rO,JIo,YIo,KIo,M2,Tme,ZIo,eqo,tO,oqo,rqo,tqo,E2,Mme,aqo,nqo,aO,sqo,lqo,iqo,C2,Eme,dqo,cqo,nO,fqo,mqo,gqo,w2,Cme,hqo,pqo,sO,uqo,_qo,bqo,A2,wme,vqo,Fqo,lO,Tqo,Mqo,Eqo,y2,Ame,Cqo,wqo,iO,Aqo,yqo,Lqo,L2,yme,xqo,$qo,dO,kqo,Sqo,Rqo,x2,Bqo,Lme,Pqo,Iqo,xme,qqo,Nqo,$2,OPe,Ui,k2,$me,l0,jqo,kme,Dqo,VPe,qo,i0,Gqo,Ji,Oqo,cO,Vqo,Xqo,fO,zqo,Qqo,Wqo,d0,Hqo,Sme,Uqo,Jqo,Yqo,ct,c0,Kqo,Rme,Zqo,eNo,Yi,oNo,Bme,rNo,tNo,mO,aNo,nNo,sNo,S2,lNo,to,f0,iNo,Pme,dNo,cNo,Pa,fNo,Ime,mNo,gNo,qme,hNo,pNo,Nme,uNo,_No,bNo,O,R2,jme,vNo,FNo,gO,TNo,MNo,ENo,B2,Dme,CNo,wNo,hO,ANo,yNo,LNo,P2,Gme,xNo,$No,pO,kNo,SNo,RNo,I2,Ome,BNo,PNo,uO,INo,qNo,NNo,q2,Vme,jNo,DNo,_O,GNo,ONo,VNo,N2,Xme,XNo,zNo,bO,QNo,WNo,HNo,j2,zme,UNo,JNo,vO,YNo,KNo,ZNo,D2,Qme,ejo,ojo,FO,rjo,tjo,ajo,G2,Wme,njo,sjo,TO,ljo,ijo,djo,O2,Hme,cjo,fjo,MO,mjo,gjo,hjo,V2,Ume,pjo,ujo,EO,_jo,bjo,vjo,X2,Jme,Fjo,Tjo,CO,Mjo,Ejo,Cjo,z2,Yme,wjo,Ajo,wO,yjo,Ljo,xjo,Q2,Kme,$jo,kjo,AO,Sjo,Rjo,Bjo,W2,Zme,Pjo,Ijo,yO,qjo,Njo,jjo,H2,ege,Djo,Gjo,LO,Ojo,Vjo,Xjo,U2,oge,zjo,Qjo,xO,Wjo,Hjo,Ujo,J2,rge,Jjo,Yjo,$O,Kjo,Zjo,eDo,Y2,tge,oDo,rDo,kO,tDo,aDo,nDo,K2,age,sDo,lDo,SO,iDo,dDo,cDo,Z2,nge,fDo,mDo,RO,gDo,hDo,pDo,ev,sge,uDo,_Do,BO,bDo,vDo,FDo,ov,lge,TDo,MDo,PO,EDo,CDo,wDo,rv,ige,ADo,yDo,IO,LDo,xDo,$Do,tv,dge,kDo,SDo,qO,RDo,BDo,PDo,av,cge,IDo,qDo,NO,NDo,jDo,DDo,nv,fge,GDo,ODo,jO,VDo,XDo,zDo,sv,mge,QDo,WDo,DO,HDo,UDo,JDo,lv,gge,YDo,KDo,GO,ZDo,eGo,oGo,iv,hge,rGo,tGo,OO,aGo,nGo,sGo,dv,pge,lGo,iGo,VO,dGo,cGo,fGo,cv,uge,mGo,gGo,XO,hGo,pGo,uGo,fv,_ge,_Go,bGo,zO,vGo,FGo,TGo,mv,bge,MGo,EGo,QO,CGo,wGo,AGo,gv,vge,yGo,LGo,WO,xGo,$Go,kGo,hv,Fge,SGo,RGo,HO,BGo,PGo,IGo,pv,Tge,qGo,NGo,UO,jGo,DGo,GGo,uv,Mge,OGo,VGo,JO,XGo,zGo,QGo,_v,Ege,WGo,HGo,YO,UGo,JGo,YGo,bv,KGo,Cge,ZGo,eOo,wge,oOo,rOo,vv,XPe,Ki,Fv,Age,m0,tOo,yge,aOo,zPe,No,g0,nOo,Zi,sOo,KO,lOo,iOo,ZO,dOo,cOo,fOo,h0,mOo,Lge,gOo,hOo,pOo,ft,p0,uOo,xge,_Oo,bOo,ed,vOo,$ge,FOo,TOo,eV,MOo,EOo,COo,Tv,wOo,ao,u0,AOo,kge,yOo,LOo,Ia,xOo,Sge,$Oo,kOo,Rge,SOo,ROo,Bge,BOo,POo,IOo,Pge,Mv,Ige,qOo,NOo,oV,jOo,DOo,GOo,Ev,OOo,qge,VOo,XOo,Nge,zOo,QOo,Cv,QPe,od,wv,jge,_0,WOo,Dge,HOo,WPe,jo,b0,UOo,rd,JOo,rV,YOo,KOo,tV,ZOo,eVo,oVo,v0,rVo,Gge,tVo,aVo,nVo,mt,F0,sVo,Oge,lVo,iVo,td,dVo,Vge,cVo,fVo,aV,mVo,gVo,hVo,Av,pVo,no,T0,uVo,Xge,_Vo,bVo,qa,vVo,zge,FVo,TVo,Qge,MVo,EVo,Wge,CVo,wVo,AVo,ve,yv,Hge,yVo,LVo,nV,xVo,$Vo,kVo,Lv,Uge,SVo,RVo,sV,BVo,PVo,IVo,xv,Jge,qVo,NVo,lV,jVo,DVo,GVo,Bs,Yge,OVo,VVo,iV,XVo,zVo,dV,QVo,WVo,HVo,$v,Kge,UVo,JVo,cV,YVo,KVo,ZVo,gt,Zge,eXo,oXo,fV,rXo,tXo,mV,aXo,nXo,gV,sXo,lXo,iXo,kv,ehe,dXo,cXo,hV,fXo,mXo,gXo,Sv,ohe,hXo,pXo,pV,uXo,_Xo,bXo,Rv,rhe,vXo,FXo,uV,TXo,MXo,EXo,Bv,the,CXo,wXo,_V,AXo,yXo,LXo,Pv,ahe,xXo,$Xo,bV,kXo,SXo,RXo,Iv,nhe,BXo,PXo,vV,IXo,qXo,NXo,qv,she,jXo,DXo,FV,GXo,OXo,VXo,Nv,XXo,lhe,zXo,QXo,ihe,WXo,HXo,jv,HPe,ad,Dv,dhe,M0,UXo,che,JXo,UPe,Do,E0,YXo,nd,KXo,TV,ZXo,ezo,MV,ozo,rzo,tzo,C0,azo,fhe,nzo,szo,lzo,ht,w0,izo,mhe,dzo,czo,sd,fzo,ghe,mzo,gzo,EV,hzo,pzo,uzo,Gv,_zo,so,A0,bzo,hhe,vzo,Fzo,Na,Tzo,phe,Mzo,Ezo,uhe,Czo,wzo,_he,Azo,yzo,Lzo,bhe,Ov,vhe,xzo,$zo,CV,kzo,Szo,Rzo,Vv,Bzo,Fhe,Pzo,Izo,The,qzo,Nzo,Xv,JPe,ld,zv,Mhe,y0,jzo,Ehe,Dzo,YPe,Go,L0,Gzo,id,Ozo,wV,Vzo,Xzo,AV,zzo,Qzo,Wzo,x0,Hzo,Che,Uzo,Jzo,Yzo,pt,$0,Kzo,whe,Zzo,eQo,dd,oQo,Ahe,rQo,tQo,yV,aQo,nQo,sQo,Qv,lQo,lo,k0,iQo,yhe,dQo,cQo,ja,fQo,Lhe,mQo,gQo,xhe,hQo,pQo,$he,uQo,_Qo,bQo,Ne,Wv,khe,vQo,FQo,LV,TQo,MQo,EQo,Hv,She,CQo,wQo,xV,AQo,yQo,LQo,Uv,Rhe,xQo,$Qo,$V,kQo,SQo,RQo,Jv,Bhe,BQo,PQo,kV,IQo,qQo,NQo,Yv,Phe,jQo,DQo,SV,GQo,OQo,VQo,Kv,Ihe,XQo,zQo,RV,QQo,WQo,HQo,Zv,qhe,UQo,JQo,BV,YQo,KQo,ZQo,eF,Nhe,eWo,oWo,PV,rWo,tWo,aWo,oF,nWo,jhe,sWo,lWo,Dhe,iWo,dWo,rF,KPe,cd,tF,Ghe,S0,cWo,Ohe,fWo,ZPe,Oo,R0,mWo,fd,gWo,IV,hWo,pWo,qV,uWo,_Wo,bWo,B0,vWo,Vhe,FWo,TWo,MWo,ut,P0,EWo,Xhe,CWo,wWo,md,AWo,zhe,yWo,LWo,NV,xWo,$Wo,kWo,aF,SWo,io,I0,RWo,Qhe,BWo,PWo,Da,IWo,Whe,qWo,NWo,Hhe,jWo,DWo,Uhe,GWo,OWo,VWo,Ga,nF,Jhe,XWo,zWo,jV,QWo,WWo,HWo,sF,Yhe,UWo,JWo,DV,YWo,KWo,ZWo,lF,Khe,eHo,oHo,GV,rHo,tHo,aHo,iF,Zhe,nHo,sHo,OV,lHo,iHo,dHo,dF,cHo,epe,fHo,mHo,ope,gHo,hHo,cF,eIe,gd,fF,rpe,q0,pHo,tpe,uHo,oIe,Vo,N0,_Ho,hd,bHo,VV,vHo,FHo,XV,THo,MHo,EHo,j0,CHo,ape,wHo,AHo,yHo,_t,D0,LHo,npe,xHo,$Ho,pd,kHo,spe,SHo,RHo,zV,BHo,PHo,IHo,mF,qHo,co,G0,NHo,lpe,jHo,DHo,Oa,GHo,ipe,OHo,VHo,dpe,XHo,zHo,cpe,QHo,WHo,HHo,je,gF,fpe,UHo,JHo,QV,YHo,KHo,ZHo,hF,mpe,eUo,oUo,WV,rUo,tUo,aUo,pF,gpe,nUo,sUo,HV,lUo,iUo,dUo,uF,hpe,cUo,fUo,UV,mUo,gUo,hUo,_F,ppe,pUo,uUo,JV,_Uo,bUo,vUo,bF,upe,FUo,TUo,YV,MUo,EUo,CUo,vF,_pe,wUo,AUo,KV,yUo,LUo,xUo,FF,bpe,$Uo,kUo,ZV,SUo,RUo,BUo,TF,PUo,vpe,IUo,qUo,Fpe,NUo,jUo,MF,rIe,ud,EF,Tpe,O0,DUo,Mpe,GUo,tIe,Xo,V0,OUo,_d,VUo,eX,XUo,zUo,oX,QUo,WUo,HUo,X0,UUo,Epe,JUo,YUo,KUo,bt,z0,ZUo,Cpe,eJo,oJo,bd,rJo,wpe,tJo,aJo,rX,nJo,sJo,lJo,CF,iJo,fo,Q0,dJo,Ape,cJo,fJo,Va,mJo,ype,gJo,hJo,Lpe,pJo,uJo,xpe,_Jo,bJo,vJo,W0,wF,$pe,FJo,TJo,tX,MJo,EJo,CJo,AF,kpe,wJo,AJo,aX,yJo,LJo,xJo,yF,$Jo,Spe,kJo,SJo,Rpe,RJo,BJo,LF,aIe,vd,xF,Bpe,H0,PJo,Ppe,IJo,nIe,zo,U0,qJo,Fd,NJo,nX,jJo,DJo,sX,GJo,OJo,VJo,J0,XJo,Ipe,zJo,QJo,WJo,vt,Y0,HJo,qpe,UJo,JJo,Td,YJo,Npe,KJo,ZJo,lX,eYo,oYo,rYo,$F,tYo,mo,K0,aYo,jpe,nYo,sYo,Xa,lYo,Dpe,iYo,dYo,Gpe,cYo,fYo,Ope,mYo,gYo,hYo,za,kF,Vpe,pYo,uYo,iX,_Yo,bYo,vYo,SF,Xpe,FYo,TYo,dX,MYo,EYo,CYo,RF,zpe,wYo,AYo,cX,yYo,LYo,xYo,BF,Qpe,$Yo,kYo,fX,SYo,RYo,BYo,PF,PYo,Wpe,IYo,qYo,Hpe,NYo,jYo,IF,sIe,Md,qF,Upe,Z0,DYo,Jpe,GYo,lIe,Qo,ey,OYo,Ed,VYo,mX,XYo,zYo,gX,QYo,WYo,HYo,oy,UYo,Ype,JYo,YYo,KYo,Ft,ry,ZYo,Kpe,eKo,oKo,Cd,rKo,Zpe,tKo,aKo,hX,nKo,sKo,lKo,NF,iKo,go,ty,dKo,eue,cKo,fKo,Qa,mKo,oue,gKo,hKo,rue,pKo,uKo,tue,_Ko,bKo,vKo,wd,jF,aue,FKo,TKo,pX,MKo,EKo,CKo,DF,nue,wKo,AKo,uX,yKo,LKo,xKo,GF,sue,$Ko,kKo,_X,SKo,RKo,BKo,OF,PKo,lue,IKo,qKo,iue,NKo,jKo,VF,iIe,Ad,XF,due,ay,DKo,cue,GKo,dIe,Wo,ny,OKo,yd,VKo,bX,XKo,zKo,vX,QKo,WKo,HKo,sy,UKo,fue,JKo,YKo,KKo,Tt,ly,ZKo,mue,eZo,oZo,Ld,rZo,gue,tZo,aZo,FX,nZo,sZo,lZo,zF,iZo,ho,iy,dZo,hue,cZo,fZo,Wa,mZo,pue,gZo,hZo,uue,pZo,uZo,_ue,_Zo,bZo,vZo,dy,QF,bue,FZo,TZo,TX,MZo,EZo,CZo,WF,vue,wZo,AZo,MX,yZo,LZo,xZo,HF,$Zo,Fue,kZo,SZo,Tue,RZo,BZo,UF,cIe,xd,JF,Mue,cy,PZo,Eue,IZo,fIe,Ho,fy,qZo,$d,NZo,EX,jZo,DZo,CX,GZo,OZo,VZo,my,XZo,Cue,zZo,QZo,WZo,Mt,gy,HZo,wue,UZo,JZo,kd,YZo,Aue,KZo,ZZo,wX,eer,oer,rer,YF,ter,po,hy,aer,yue,ner,ser,Ha,ler,Lue,ier,der,xue,cer,fer,$ue,mer,ger,her,kue,KF,Sue,per,uer,AX,_er,ber,ver,ZF,Fer,Rue,Ter,Mer,Bue,Eer,Cer,e6,mIe,Sd,o6,Pue,py,wer,Iue,Aer,gIe,Uo,uy,yer,Rd,Ler,yX,xer,$er,LX,ker,Ser,Rer,_y,Ber,que,Per,Ier,qer,Et,by,Ner,Nue,jer,Der,Bd,Ger,jue,Oer,Ver,xX,Xer,zer,Qer,r6,Wer,uo,vy,Her,Due,Uer,Jer,Ua,Yer,Gue,Ker,Zer,Oue,eor,oor,Vue,ror,tor,aor,Ja,t6,Xue,nor,sor,$X,lor,ior,dor,a6,zue,cor,mor,kX,gor,hor,por,n6,Que,uor,_or,SX,bor,vor,For,s6,Wue,Tor,Mor,RX,Eor,Cor,wor,l6,Aor,Hue,yor,Lor,Uue,xor,$or,i6,hIe,Pd,d6,Jue,Fy,kor,Yue,Sor,pIe,Jo,Ty,Ror,Id,Bor,BX,Por,Ior,PX,qor,Nor,jor,My,Dor,Kue,Gor,Oor,Vor,Ct,Ey,Xor,Zue,zor,Qor,qd,Wor,e_e,Hor,Uor,IX,Jor,Yor,Kor,c6,Zor,_o,Cy,err,o_e,orr,rrr,Ya,trr,r_e,arr,nrr,t_e,srr,lrr,a_e,irr,drr,crr,n_e,f6,s_e,frr,mrr,qX,grr,hrr,prr,m6,urr,l_e,_rr,brr,i_e,vrr,Frr,g6,uIe,Nd,h6,d_e,wy,Trr,c_e,Mrr,_Ie,Yo,Ay,Err,jd,Crr,NX,wrr,Arr,jX,yrr,Lrr,xrr,yy,$rr,f_e,krr,Srr,Rrr,wt,Ly,Brr,m_e,Prr,Irr,Dd,qrr,g_e,Nrr,jrr,DX,Drr,Grr,Orr,p6,Vrr,wr,xy,Xrr,h_e,zrr,Qrr,Ka,Wrr,p_e,Hrr,Urr,u_e,Jrr,Yrr,__e,Krr,Zrr,etr,N,u6,b_e,otr,rtr,GX,ttr,atr,ntr,_6,v_e,str,ltr,OX,itr,dtr,ctr,b6,F_e,ftr,mtr,VX,gtr,htr,ptr,v6,T_e,utr,_tr,XX,btr,vtr,Ftr,F6,M_e,Ttr,Mtr,zX,Etr,Ctr,wtr,T6,E_e,Atr,ytr,QX,Ltr,xtr,$tr,M6,C_e,ktr,Str,WX,Rtr,Btr,Ptr,E6,w_e,Itr,qtr,HX,Ntr,jtr,Dtr,C6,A_e,Gtr,Otr,UX,Vtr,Xtr,ztr,w6,y_e,Qtr,Wtr,JX,Htr,Utr,Jtr,A6,L_e,Ytr,Ktr,YX,Ztr,ear,oar,y6,x_e,rar,tar,KX,aar,nar,sar,L6,$_e,lar,iar,ZX,dar,car,far,x6,k_e,mar,gar,ez,har,par,uar,$6,S_e,_ar,bar,oz,Far,Tar,Mar,k6,R_e,Ear,Car,rz,war,Aar,yar,S6,B_e,Lar,xar,tz,$ar,kar,Sar,Ps,P_e,Rar,Bar,az,Par,Iar,nz,qar,Nar,jar,R6,I_e,Dar,Gar,sz,Oar,Var,Xar,B6,q_e,zar,Qar,lz,War,Har,Uar,P6,N_e,Jar,Yar,iz,Kar,Zar,enr,I6,j_e,onr,rnr,dz,tnr,anr,nnr,q6,D_e,snr,lnr,cz,inr,dnr,cnr,N6,G_e,fnr,mnr,fz,gnr,hnr,pnr,j6,O_e,unr,_nr,mz,bnr,vnr,Fnr,D6,V_e,Tnr,Mnr,gz,Enr,Cnr,wnr,G6,X_e,Anr,ynr,hz,Lnr,xnr,$nr,O6,z_e,knr,Snr,pz,Rnr,Bnr,Pnr,V6,Q_e,Inr,qnr,uz,Nnr,jnr,Dnr,X6,W_e,Gnr,Onr,_z,Vnr,Xnr,znr,z6,H_e,Qnr,Wnr,bz,Hnr,Unr,Jnr,Q6,U_e,Ynr,Knr,vz,Znr,esr,osr,W6,J_e,rsr,tsr,Fz,asr,nsr,ssr,H6,Y_e,lsr,isr,Tz,dsr,csr,fsr,U6,K_e,msr,gsr,Mz,hsr,psr,usr,J6,Z_e,_sr,bsr,Ez,vsr,Fsr,Tsr,Y6,e1e,Msr,Esr,Cz,Csr,wsr,Asr,K6,o1e,ysr,Lsr,wz,xsr,$sr,ksr,Z6,r1e,Ssr,Rsr,Az,Bsr,Psr,Isr,eT,t1e,qsr,Nsr,yz,jsr,Dsr,Gsr,oT,a1e,Osr,Vsr,Lz,Xsr,zsr,Qsr,rT,n1e,Wsr,Hsr,xz,Usr,Jsr,Ysr,tT,s1e,Ksr,Zsr,$z,elr,olr,rlr,aT,l1e,tlr,alr,kz,nlr,slr,llr,nT,i1e,ilr,dlr,Sz,clr,flr,mlr,sT,d1e,glr,hlr,Rz,plr,ulr,_lr,lT,bIe,Gd,iT,c1e,$y,blr,f1e,vlr,vIe,Ko,ky,Flr,Od,Tlr,Bz,Mlr,Elr,Pz,Clr,wlr,Alr,Sy,ylr,m1e,Llr,xlr,$lr,At,Ry,klr,g1e,Slr,Rlr,Vd,Blr,h1e,Plr,Ilr,Iz,qlr,Nlr,jlr,dT,Dlr,Ar,By,Glr,p1e,Olr,Vlr,Za,Xlr,u1e,zlr,Qlr,_1e,Wlr,Hlr,b1e,Ulr,Jlr,Ylr,ne,cT,v1e,Klr,Zlr,qz,eir,oir,rir,fT,F1e,tir,air,Nz,nir,sir,lir,mT,T1e,iir,dir,jz,cir,fir,mir,gT,M1e,gir,hir,Dz,pir,uir,_ir,hT,E1e,bir,vir,Gz,Fir,Tir,Mir,pT,C1e,Eir,Cir,Oz,wir,Air,yir,uT,w1e,Lir,xir,Vz,$ir,kir,Sir,_T,A1e,Rir,Bir,Xz,Pir,Iir,qir,bT,y1e,Nir,jir,zz,Dir,Gir,Oir,vT,L1e,Vir,Xir,Qz,zir,Qir,Wir,FT,x1e,Hir,Uir,Wz,Jir,Yir,Kir,TT,$1e,Zir,edr,Hz,odr,rdr,tdr,MT,k1e,adr,ndr,Uz,sdr,ldr,idr,ET,S1e,ddr,cdr,Jz,fdr,mdr,gdr,CT,R1e,hdr,pdr,Yz,udr,_dr,bdr,wT,B1e,vdr,Fdr,Kz,Tdr,Mdr,Edr,AT,P1e,Cdr,wdr,Zz,Adr,ydr,Ldr,yT,I1e,xdr,$dr,eQ,kdr,Sdr,Rdr,LT,q1e,Bdr,Pdr,oQ,Idr,qdr,Ndr,xT,N1e,jdr,Ddr,rQ,Gdr,Odr,Vdr,$T,j1e,Xdr,zdr,tQ,Qdr,Wdr,Hdr,kT,D1e,Udr,Jdr,aQ,Ydr,Kdr,Zdr,ST,G1e,ecr,ocr,nQ,rcr,tcr,acr,RT,FIe,Xd,BT,O1e,Py,ncr,V1e,scr,TIe,Zo,Iy,lcr,zd,icr,sQ,dcr,ccr,lQ,fcr,mcr,gcr,qy,hcr,X1e,pcr,ucr,_cr,yt,Ny,bcr,z1e,vcr,Fcr,Qd,Tcr,Q1e,Mcr,Ecr,iQ,Ccr,wcr,Acr,PT,ycr,yr,jy,Lcr,W1e,xcr,$cr,en,kcr,H1e,Scr,Rcr,U1e,Bcr,Pcr,J1e,Icr,qcr,Ncr,Te,IT,Y1e,jcr,Dcr,dQ,Gcr,Ocr,Vcr,qT,K1e,Xcr,zcr,cQ,Qcr,Wcr,Hcr,NT,Z1e,Ucr,Jcr,fQ,Ycr,Kcr,Zcr,jT,e8e,efr,ofr,mQ,rfr,tfr,afr,DT,o8e,nfr,sfr,gQ,lfr,ifr,dfr,GT,r8e,cfr,ffr,hQ,mfr,gfr,hfr,OT,t8e,pfr,ufr,pQ,_fr,bfr,vfr,VT,a8e,Ffr,Tfr,uQ,Mfr,Efr,Cfr,XT,n8e,wfr,Afr,_Q,yfr,Lfr,xfr,zT,s8e,$fr,kfr,bQ,Sfr,Rfr,Bfr,QT,l8e,Pfr,Ifr,vQ,qfr,Nfr,jfr,WT,i8e,Dfr,Gfr,FQ,Ofr,Vfr,Xfr,HT,MIe,Wd,UT,d8e,Dy,zfr,c8e,Qfr,EIe,er,Gy,Wfr,Hd,Hfr,TQ,Ufr,Jfr,MQ,Yfr,Kfr,Zfr,Oy,emr,f8e,omr,rmr,tmr,Lt,Vy,amr,m8e,nmr,smr,Ud,lmr,g8e,imr,dmr,EQ,cmr,fmr,mmr,JT,gmr,Lr,Xy,hmr,h8e,pmr,umr,on,_mr,p8e,bmr,vmr,u8e,Fmr,Tmr,_8e,Mmr,Emr,Cmr,rn,YT,b8e,wmr,Amr,CQ,ymr,Lmr,xmr,KT,v8e,$mr,kmr,wQ,Smr,Rmr,Bmr,ZT,F8e,Pmr,Imr,AQ,qmr,Nmr,jmr,e9,T8e,Dmr,Gmr,yQ,Omr,Vmr,Xmr,o9,CIe,Jd,r9,M8e,zy,zmr,E8e,Qmr,wIe,or,Qy,Wmr,Yd,Hmr,LQ,Umr,Jmr,xQ,Ymr,Kmr,Zmr,Wy,egr,C8e,ogr,rgr,tgr,xt,Hy,agr,w8e,ngr,sgr,Kd,lgr,A8e,igr,dgr,$Q,cgr,fgr,mgr,t9,ggr,xr,Uy,hgr,y8e,pgr,ugr,tn,_gr,L8e,bgr,vgr,x8e,Fgr,Tgr,$8e,Mgr,Egr,Cgr,ie,a9,k8e,wgr,Agr,kQ,ygr,Lgr,xgr,n9,S8e,$gr,kgr,SQ,Sgr,Rgr,Bgr,s9,R8e,Pgr,Igr,RQ,qgr,Ngr,jgr,l9,B8e,Dgr,Ggr,BQ,Ogr,Vgr,Xgr,i9,P8e,zgr,Qgr,PQ,Wgr,Hgr,Ugr,d9,I8e,Jgr,Ygr,IQ,Kgr,Zgr,ehr,c9,q8e,ohr,rhr,qQ,thr,ahr,nhr,f9,N8e,shr,lhr,NQ,ihr,dhr,chr,m9,j8e,fhr,mhr,jQ,ghr,hhr,phr,g9,D8e,uhr,_hr,DQ,bhr,vhr,Fhr,h9,G8e,Thr,Mhr,GQ,Ehr,Chr,whr,p9,O8e,Ahr,yhr,OQ,Lhr,xhr,$hr,u9,V8e,khr,Shr,VQ,Rhr,Bhr,Phr,_9,X8e,Ihr,qhr,XQ,Nhr,jhr,Dhr,b9,z8e,Ghr,Ohr,zQ,Vhr,Xhr,zhr,v9,Q8e,Qhr,Whr,QQ,Hhr,Uhr,Jhr,F9,W8e,Yhr,Khr,WQ,Zhr,epr,opr,T9,H8e,rpr,tpr,HQ,apr,npr,spr,M9,U8e,lpr,ipr,UQ,dpr,cpr,fpr,E9,J8e,mpr,gpr,JQ,hpr,ppr,upr,C9,AIe,Zd,w9,Y8e,Jy,_pr,K8e,bpr,yIe,rr,Yy,vpr,ec,Fpr,YQ,Tpr,Mpr,KQ,Epr,Cpr,wpr,Ky,Apr,Z8e,ypr,Lpr,xpr,$t,Zy,$pr,ebe,kpr,Spr,oc,Rpr,obe,Bpr,Ppr,ZQ,Ipr,qpr,Npr,A9,jpr,$r,eL,Dpr,rbe,Gpr,Opr,an,Vpr,tbe,Xpr,zpr,abe,Qpr,Wpr,nbe,Hpr,Upr,Jpr,ye,y9,sbe,Ypr,Kpr,eW,Zpr,eur,our,L9,lbe,rur,tur,oW,aur,nur,sur,x9,ibe,lur,iur,rW,dur,cur,fur,$9,dbe,mur,gur,tW,hur,pur,uur,k9,cbe,_ur,bur,aW,vur,Fur,Tur,S9,fbe,Mur,Eur,nW,Cur,wur,Aur,R9,mbe,yur,Lur,sW,xur,$ur,kur,B9,gbe,Sur,Rur,lW,Bur,Pur,Iur,P9,hbe,qur,Nur,iW,jur,Dur,Gur,I9,pbe,Our,Vur,dW,Xur,zur,Qur,q9,LIe,rc,N9,ube,oL,Wur,_be,Hur,xIe,tr,rL,Uur,tc,Jur,cW,Yur,Kur,fW,Zur,e_r,o_r,tL,r_r,bbe,t_r,a_r,n_r,kt,aL,s_r,vbe,l_r,i_r,ac,d_r,Fbe,c_r,f_r,mW,m_r,g_r,h_r,j9,p_r,kr,nL,u_r,Tbe,__r,b_r,nn,v_r,Mbe,F_r,T_r,Ebe,M_r,E_r,Cbe,C_r,w_r,A_r,Z,D9,wbe,y_r,L_r,gW,x_r,$_r,k_r,G9,Abe,S_r,R_r,hW,B_r,P_r,I_r,O9,ybe,q_r,N_r,pW,j_r,D_r,G_r,V9,Lbe,O_r,V_r,uW,X_r,z_r,Q_r,X9,xbe,W_r,H_r,_W,U_r,J_r,Y_r,z9,$be,K_r,Z_r,bW,e1r,o1r,r1r,Q9,kbe,t1r,a1r,vW,n1r,s1r,l1r,W9,Sbe,i1r,d1r,FW,c1r,f1r,m1r,H9,Rbe,g1r,h1r,TW,p1r,u1r,_1r,U9,Bbe,b1r,v1r,MW,F1r,T1r,M1r,J9,Pbe,E1r,C1r,EW,w1r,A1r,y1r,Y9,Ibe,L1r,x1r,CW,$1r,k1r,S1r,K9,qbe,R1r,B1r,wW,P1r,I1r,q1r,Z9,Nbe,N1r,j1r,AW,D1r,G1r,O1r,eM,jbe,V1r,X1r,yW,z1r,Q1r,W1r,oM,Dbe,H1r,U1r,LW,J1r,Y1r,K1r,rM,Gbe,Z1r,e8r,xW,o8r,r8r,t8r,tM,Obe,a8r,n8r,$W,s8r,l8r,i8r,aM,Vbe,d8r,c8r,kW,f8r,m8r,g8r,nM,Xbe,h8r,p8r,SW,u8r,_8r,b8r,sM,zbe,v8r,F8r,RW,T8r,M8r,E8r,lM,Qbe,C8r,w8r,BW,A8r,y8r,L8r,iM,Wbe,x8r,$8r,PW,k8r,S8r,R8r,dM,Hbe,B8r,P8r,IW,I8r,q8r,N8r,cM,Ube,j8r,D8r,qW,G8r,O8r,V8r,fM,Jbe,X8r,z8r,NW,Q8r,W8r,H8r,mM,$Ie,nc,gM,Ybe,sL,U8r,Kbe,J8r,kIe,ar,lL,Y8r,sc,K8r,jW,Z8r,ebr,DW,obr,rbr,tbr,iL,abr,Zbe,nbr,sbr,lbr,St,dL,ibr,e2e,dbr,cbr,lc,fbr,o2e,mbr,gbr,GW,hbr,pbr,ubr,hM,_br,Sr,cL,bbr,r2e,vbr,Fbr,sn,Tbr,t2e,Mbr,Ebr,a2e,Cbr,wbr,n2e,Abr,ybr,Lbr,pe,pM,s2e,xbr,$br,OW,kbr,Sbr,Rbr,uM,l2e,Bbr,Pbr,VW,Ibr,qbr,Nbr,_M,i2e,jbr,Dbr,XW,Gbr,Obr,Vbr,bM,d2e,Xbr,zbr,zW,Qbr,Wbr,Hbr,vM,c2e,Ubr,Jbr,QW,Ybr,Kbr,Zbr,FM,f2e,e2r,o2r,WW,r2r,t2r,a2r,TM,m2e,n2r,s2r,HW,l2r,i2r,d2r,MM,g2e,c2r,f2r,UW,m2r,g2r,h2r,EM,h2e,p2r,u2r,JW,_2r,b2r,v2r,CM,p2e,F2r,T2r,YW,M2r,E2r,C2r,wM,u2e,w2r,A2r,KW,y2r,L2r,x2r,AM,_2e,$2r,k2r,ZW,S2r,R2r,B2r,yM,b2e,P2r,I2r,eH,q2r,N2r,j2r,LM,v2e,D2r,G2r,oH,O2r,V2r,X2r,xM,F2e,z2r,Q2r,rH,W2r,H2r,U2r,$M,T2e,J2r,Y2r,tH,K2r,Z2r,evr,kM,M2e,ovr,rvr,aH,tvr,avr,nvr,SM,SIe,ic,RM,E2e,fL,svr,C2e,lvr,RIe,nr,mL,ivr,dc,dvr,nH,cvr,fvr,sH,mvr,gvr,hvr,gL,pvr,w2e,uvr,_vr,bvr,Rt,hL,vvr,A2e,Fvr,Tvr,cc,Mvr,y2e,Evr,Cvr,lH,wvr,Avr,yvr,BM,Lvr,Rr,pL,xvr,L2e,$vr,kvr,ln,Svr,x2e,Rvr,Bvr,$2e,Pvr,Ivr,k2e,qvr,Nvr,jvr,uL,PM,S2e,Dvr,Gvr,iH,Ovr,Vvr,Xvr,IM,R2e,zvr,Qvr,dH,Wvr,Hvr,Uvr,qM,BIe,fc,NM,B2e,_L,Jvr,P2e,Yvr,PIe,sr,bL,Kvr,mc,Zvr,cH,eFr,oFr,fH,rFr,tFr,aFr,vL,nFr,I2e,sFr,lFr,iFr,Bt,FL,dFr,q2e,cFr,fFr,gc,mFr,N2e,gFr,hFr,mH,pFr,uFr,_Fr,jM,bFr,Br,TL,vFr,j2e,FFr,TFr,dn,MFr,D2e,EFr,CFr,G2e,wFr,AFr,O2e,yFr,LFr,xFr,V2e,DM,X2e,$Fr,kFr,gH,SFr,RFr,BFr,GM,IIe,hc,OM,z2e,ML,PFr,Q2e,IFr,qIe,lr,EL,qFr,pc,NFr,hH,jFr,DFr,pH,GFr,OFr,VFr,CL,XFr,W2e,zFr,QFr,WFr,Pt,wL,HFr,H2e,UFr,JFr,uc,YFr,U2e,KFr,ZFr,uH,e6r,o6r,r6r,VM,t6r,Pr,AL,a6r,J2e,n6r,s6r,cn,l6r,Y2e,i6r,d6r,K2e,c6r,f6r,Z2e,m6r,g6r,h6r,de,XM,eve,p6r,u6r,_H,_6r,b6r,v6r,zM,ove,F6r,T6r,bH,M6r,E6r,C6r,QM,rve,w6r,A6r,vH,y6r,L6r,x6r,WM,tve,$6r,k6r,FH,S6r,R6r,B6r,HM,ave,P6r,I6r,TH,q6r,N6r,j6r,UM,nve,D6r,G6r,MH,O6r,V6r,X6r,JM,sve,z6r,Q6r,EH,W6r,H6r,U6r,YM,lve,J6r,Y6r,CH,K6r,Z6r,eTr,KM,ive,oTr,rTr,wH,tTr,aTr,nTr,ZM,dve,sTr,lTr,AH,iTr,dTr,cTr,e4,cve,fTr,mTr,yH,gTr,hTr,pTr,o4,fve,uTr,_Tr,LH,bTr,vTr,FTr,r4,mve,TTr,MTr,xH,ETr,CTr,wTr,t4,gve,ATr,yTr,$H,LTr,xTr,$Tr,a4,hve,kTr,STr,kH,RTr,BTr,PTr,n4,pve,ITr,qTr,SH,NTr,jTr,DTr,s4,uve,GTr,OTr,RH,VTr,XTr,zTr,l4,_ve,QTr,WTr,BH,HTr,UTr,JTr,i4,bve,YTr,KTr,PH,ZTr,e9r,o9r,d4,vve,r9r,t9r,IH,a9r,n9r,s9r,c4,NIe,_c,f4,Fve,yL,l9r,Tve,i9r,jIe,ir,LL,d9r,bc,c9r,qH,f9r,m9r,NH,g9r,h9r,p9r,xL,u9r,Mve,_9r,b9r,v9r,It,$L,F9r,Eve,T9r,M9r,vc,E9r,Cve,C9r,w9r,jH,A9r,y9r,L9r,m4,x9r,Ir,kL,$9r,wve,k9r,S9r,fn,R9r,Ave,B9r,P9r,yve,I9r,q9r,Lve,N9r,j9r,D9r,ce,g4,xve,G9r,O9r,DH,V9r,X9r,z9r,h4,$ve,Q9r,W9r,GH,H9r,U9r,J9r,p4,kve,Y9r,K9r,OH,Z9r,eMr,oMr,u4,Sve,rMr,tMr,VH,aMr,nMr,sMr,_4,Rve,lMr,iMr,XH,dMr,cMr,fMr,b4,Bve,mMr,gMr,zH,hMr,pMr,uMr,v4,Pve,_Mr,bMr,QH,vMr,FMr,TMr,F4,Ive,MMr,EMr,WH,CMr,wMr,AMr,T4,qve,yMr,LMr,HH,xMr,$Mr,kMr,M4,Nve,SMr,RMr,UH,BMr,PMr,IMr,E4,jve,qMr,NMr,JH,jMr,DMr,GMr,C4,Dve,OMr,VMr,YH,XMr,zMr,QMr,w4,Gve,WMr,HMr,KH,UMr,JMr,YMr,A4,Ove,KMr,ZMr,ZH,e4r,o4r,r4r,y4,Vve,t4r,a4r,eU,n4r,s4r,l4r,L4,Xve,i4r,d4r,oU,c4r,f4r,m4r,x4,zve,g4r,h4r,rU,p4r,u4r,_4r,$4,Qve,b4r,v4r,tU,F4r,T4r,M4r,k4,Wve,E4r,C4r,aU,w4r,A4r,y4r,S4,Hve,L4r,x4r,nU,$4r,k4r,S4r,R4,DIe,Fc,B4,Uve,SL,R4r,Jve,B4r,GIe,dr,RL,P4r,Tc,I4r,sU,q4r,N4r,lU,j4r,D4r,G4r,BL,O4r,Yve,V4r,X4r,z4r,qt,PL,Q4r,Kve,W4r,H4r,Mc,U4r,Zve,J4r,Y4r,iU,K4r,Z4r,eEr,P4,oEr,qr,IL,rEr,eFe,tEr,aEr,mn,nEr,oFe,sEr,lEr,rFe,iEr,dEr,tFe,cEr,fEr,mEr,aFe,I4,nFe,gEr,hEr,dU,pEr,uEr,_Er,q4,OIe,Ec,N4,sFe,qL,bEr,lFe,vEr,VIe,cr,NL,FEr,Cc,TEr,cU,MEr,EEr,fU,CEr,wEr,AEr,jL,yEr,iFe,LEr,xEr,$Er,Nt,DL,kEr,dFe,SEr,REr,wc,BEr,cFe,PEr,IEr,mU,qEr,NEr,jEr,j4,DEr,Nr,GL,GEr,fFe,OEr,VEr,gn,XEr,mFe,zEr,QEr,gFe,WEr,HEr,hFe,UEr,JEr,YEr,pFe,D4,uFe,KEr,ZEr,gU,e5r,o5r,r5r,G4,XIe,Ac,O4,_Fe,OL,t5r,bFe,a5r,zIe,fr,VL,n5r,yc,s5r,hU,l5r,i5r,pU,d5r,c5r,f5r,XL,m5r,vFe,g5r,h5r,p5r,jt,zL,u5r,FFe,_5r,b5r,Lc,v5r,TFe,F5r,T5r,uU,M5r,E5r,C5r,V4,w5r,jr,QL,A5r,MFe,y5r,L5r,hn,x5r,EFe,$5r,k5r,CFe,S5r,R5r,wFe,B5r,P5r,I5r,oe,X4,AFe,q5r,N5r,_U,j5r,D5r,G5r,z4,yFe,O5r,V5r,bU,X5r,z5r,Q5r,Q4,LFe,W5r,H5r,vU,U5r,J5r,Y5r,W4,xFe,K5r,Z5r,FU,eCr,oCr,rCr,H4,$Fe,tCr,aCr,TU,nCr,sCr,lCr,U4,kFe,iCr,dCr,MU,cCr,fCr,mCr,J4,SFe,gCr,hCr,EU,pCr,uCr,_Cr,Y4,RFe,bCr,vCr,CU,FCr,TCr,MCr,K4,BFe,ECr,CCr,wU,wCr,ACr,yCr,Z4,PFe,LCr,xCr,AU,$Cr,kCr,SCr,eE,IFe,RCr,BCr,yU,PCr,ICr,qCr,oE,qFe,NCr,jCr,LU,DCr,GCr,OCr,rE,NFe,VCr,XCr,xU,zCr,QCr,WCr,tE,jFe,HCr,UCr,$U,JCr,YCr,KCr,aE,DFe,ZCr,e3r,kU,o3r,r3r,t3r,nE,GFe,a3r,n3r,SU,s3r,l3r,i3r,sE,OFe,d3r,c3r,RU,f3r,m3r,g3r,lE,VFe,h3r,p3r,BU,u3r,_3r,b3r,iE,XFe,v3r,F3r,PU,T3r,M3r,E3r,dE,zFe,C3r,w3r,IU,A3r,y3r,L3r,cE,QFe,x3r,$3r,qU,k3r,S3r,R3r,fE,WFe,B3r,P3r,NU,I3r,q3r,N3r,mE,HFe,j3r,D3r,jU,G3r,O3r,V3r,gE,UFe,X3r,z3r,DU,Q3r,W3r,H3r,hE,JFe,U3r,J3r,GU,Y3r,K3r,Z3r,pE,QIe,xc,uE,YFe,WL,ewr,KFe,owr,WIe,mr,HL,rwr,$c,twr,OU,awr,nwr,VU,swr,lwr,iwr,UL,dwr,ZFe,cwr,fwr,mwr,Dt,JL,gwr,e6e,hwr,pwr,kc,uwr,o6e,_wr,bwr,XU,vwr,Fwr,Twr,_E,Mwr,Dr,YL,Ewr,r6e,Cwr,wwr,pn,Awr,t6e,ywr,Lwr,a6e,xwr,$wr,n6e,kwr,Swr,Rwr,ke,bE,s6e,Bwr,Pwr,zU,Iwr,qwr,Nwr,vE,l6e,jwr,Dwr,QU,Gwr,Owr,Vwr,FE,i6e,Xwr,zwr,WU,Qwr,Wwr,Hwr,TE,d6e,Uwr,Jwr,HU,Ywr,Kwr,Zwr,ME,c6e,eAr,oAr,UU,rAr,tAr,aAr,EE,f6e,nAr,sAr,JU,lAr,iAr,dAr,CE,m6e,cAr,fAr,YU,mAr,gAr,hAr,wE,g6e,pAr,uAr,KU,_Ar,bAr,vAr,AE,h6e,FAr,TAr,ZU,MAr,EAr,CAr,yE,HIe,Sc,LE,p6e,KL,wAr,u6e,AAr,UIe,gr,ZL,yAr,Rc,LAr,eJ,xAr,$Ar,oJ,kAr,SAr,RAr,ex,BAr,_6e,PAr,IAr,qAr,Gt,ox,NAr,b6e,jAr,DAr,Bc,GAr,v6e,OAr,VAr,rJ,XAr,zAr,QAr,xE,WAr,Gr,rx,HAr,F6e,UAr,JAr,un,YAr,T6e,KAr,ZAr,M6e,e0r,o0r,E6e,r0r,t0r,a0r,Me,$E,C6e,n0r,s0r,tJ,l0r,i0r,d0r,kE,w6e,c0r,f0r,aJ,m0r,g0r,h0r,SE,A6e,p0r,u0r,nJ,_0r,b0r,v0r,RE,y6e,F0r,T0r,sJ,M0r,E0r,C0r,BE,L6e,w0r,A0r,lJ,y0r,L0r,x0r,PE,x6e,$0r,k0r,iJ,S0r,R0r,B0r,IE,$6e,P0r,I0r,dJ,q0r,N0r,j0r,qE,k6e,D0r,G0r,cJ,O0r,V0r,X0r,NE,S6e,z0r,Q0r,fJ,W0r,H0r,U0r,jE,R6e,J0r,Y0r,mJ,K0r,Z0r,eyr,DE,B6e,oyr,ryr,gJ,tyr,ayr,nyr,GE,P6e,syr,lyr,hJ,iyr,dyr,cyr,OE,JIe,Pc,VE,I6e,tx,fyr,q6e,myr,YIe,hr,ax,gyr,Ic,hyr,pJ,pyr,uyr,uJ,_yr,byr,vyr,nx,Fyr,N6e,Tyr,Myr,Eyr,Ot,sx,Cyr,j6e,wyr,Ayr,qc,yyr,D6e,Lyr,xyr,_J,$yr,kyr,Syr,XE,Ryr,Or,lx,Byr,G6e,Pyr,Iyr,_n,qyr,O6e,Nyr,jyr,V6e,Dyr,Gyr,X6e,Oyr,Vyr,Xyr,Le,zE,z6e,zyr,Qyr,bJ,Wyr,Hyr,Uyr,QE,Q6e,Jyr,Yyr,vJ,Kyr,Zyr,eLr,WE,W6e,oLr,rLr,FJ,tLr,aLr,nLr,HE,H6e,sLr,lLr,TJ,iLr,dLr,cLr,UE,U6e,fLr,mLr,MJ,gLr,hLr,pLr,JE,J6e,uLr,_Lr,EJ,bLr,vLr,FLr,YE,Y6e,TLr,MLr,CJ,ELr,CLr,wLr,KE,K6e,ALr,yLr,wJ,LLr,xLr,$Lr,ZE,Z6e,kLr,SLr,AJ,RLr,BLr,PLr,e5,eTe,ILr,qLr,yJ,NLr,jLr,DLr,o5,KIe,Nc,r5,oTe,ix,GLr,rTe,OLr,ZIe,pr,dx,VLr,jc,XLr,LJ,zLr,QLr,xJ,WLr,HLr,ULr,cx,JLr,tTe,YLr,KLr,ZLr,Vt,fx,exr,aTe,oxr,rxr,Dc,txr,nTe,axr,nxr,$J,sxr,lxr,ixr,t5,dxr,Vr,mx,cxr,sTe,fxr,mxr,bn,gxr,lTe,hxr,pxr,iTe,uxr,_xr,dTe,bxr,vxr,Fxr,Se,a5,cTe,Txr,Mxr,kJ,Exr,Cxr,wxr,n5,fTe,Axr,yxr,SJ,Lxr,xxr,$xr,s5,mTe,kxr,Sxr,RJ,Rxr,Bxr,Pxr,l5,gTe,Ixr,qxr,BJ,Nxr,jxr,Dxr,i5,hTe,Gxr,Oxr,PJ,Vxr,Xxr,zxr,d5,pTe,Qxr,Wxr,IJ,Hxr,Uxr,Jxr,c5,uTe,Yxr,Kxr,qJ,Zxr,e7r,o7r,f5,_Te,r7r,t7r,NJ,a7r,n7r,s7r,m5,bTe,l7r,i7r,jJ,d7r,c7r,f7r,g5,eqe,Gc,h5,vTe,gx,m7r,FTe,g7r,oqe,ur,hx,h7r,Oc,p7r,DJ,u7r,_7r,GJ,b7r,v7r,F7r,px,T7r,TTe,M7r,E7r,C7r,Xt,ux,w7r,MTe,A7r,y7r,Vc,L7r,ETe,x7r,$7r,OJ,k7r,S7r,R7r,p5,B7r,Xr,_x,P7r,CTe,I7r,q7r,vn,N7r,wTe,j7r,D7r,ATe,G7r,O7r,yTe,V7r,X7r,z7r,xe,u5,LTe,Q7r,W7r,VJ,H7r,U7r,J7r,_5,xTe,Y7r,K7r,XJ,Z7r,e$r,o$r,b5,$Te,r$r,t$r,zJ,a$r,n$r,s$r,v5,kTe,l$r,i$r,QJ,d$r,c$r,f$r,F5,STe,m$r,g$r,WJ,h$r,p$r,u$r,T5,RTe,_$r,b$r,HJ,v$r,F$r,T$r,M5,BTe,M$r,E$r,UJ,C$r,w$r,A$r,E5,PTe,y$r,L$r,JJ,x$r,$$r,k$r,C5,ITe,S$r,R$r,YJ,B$r,P$r,I$r,w5,qTe,q$r,N$r,KJ,j$r,D$r,G$r,A5,rqe,Xc,y5,NTe,bx,O$r,jTe,V$r,tqe,_r,vx,X$r,zc,z$r,ZJ,Q$r,W$r,eY,H$r,U$r,J$r,Fx,Y$r,DTe,K$r,Z$r,ekr,zt,Tx,okr,GTe,rkr,tkr,Qc,akr,OTe,nkr,skr,oY,lkr,ikr,dkr,L5,ckr,zr,Mx,fkr,VTe,mkr,gkr,Fn,hkr,XTe,pkr,ukr,zTe,_kr,bkr,QTe,vkr,Fkr,Tkr,$e,x5,WTe,Mkr,Ekr,rY,Ckr,wkr,Akr,$5,HTe,ykr,Lkr,tY,xkr,$kr,kkr,k5,UTe,Skr,Rkr,aY,Bkr,Pkr,Ikr,S5,JTe,qkr,Nkr,nY,jkr,Dkr,Gkr,R5,YTe,Okr,Vkr,sY,Xkr,zkr,Qkr,B5,KTe,Wkr,Hkr,lY,Ukr,Jkr,Ykr,P5,ZTe,Kkr,Zkr,iY,eSr,oSr,rSr,I5,e9e,tSr,aSr,dY,nSr,sSr,lSr,q5,o9e,iSr,dSr,cY,cSr,fSr,mSr,N5,r9e,gSr,hSr,fY,pSr,uSr,_Sr,j5,aqe,Wc,D5,t9e,Ex,bSr,a9e,vSr,nqe,br,Cx,FSr,Hc,TSr,mY,MSr,ESr,gY,CSr,wSr,ASr,wx,ySr,n9e,LSr,xSr,$Sr,Qt,Ax,kSr,s9e,SSr,RSr,Uc,BSr,l9e,PSr,ISr,hY,qSr,NSr,jSr,G5,DSr,Qr,yx,GSr,i9e,OSr,VSr,Tn,XSr,d9e,zSr,QSr,c9e,WSr,HSr,f9e,USr,JSr,YSr,De,O5,m9e,KSr,ZSr,pY,eRr,oRr,rRr,V5,g9e,tRr,aRr,uY,nRr,sRr,lRr,X5,h9e,iRr,dRr,_Y,cRr,fRr,mRr,z5,p9e,gRr,hRr,bY,pRr,uRr,_Rr,Q5,u9e,bRr,vRr,vY,FRr,TRr,MRr,W5,_9e,ERr,CRr,FY,wRr,ARr,yRr,H5,b9e,LRr,xRr,TY,$Rr,kRr,SRr,U5,v9e,RRr,BRr,MY,PRr,IRr,qRr,J5,sqe,Jc,Y5,F9e,Lx,NRr,T9e,jRr,lqe,vr,xx,DRr,Yc,GRr,EY,ORr,VRr,CY,XRr,zRr,QRr,$x,WRr,M9e,HRr,URr,JRr,Wt,kx,YRr,E9e,KRr,ZRr,Kc,eBr,C9e,oBr,rBr,wY,tBr,aBr,nBr,K5,sBr,Wr,Sx,lBr,w9e,iBr,dBr,Mn,cBr,A9e,fBr,mBr,y9e,gBr,hBr,L9e,pBr,uBr,_Br,Ge,Z5,x9e,bBr,vBr,AY,FBr,TBr,MBr,eC,$9e,EBr,CBr,yY,wBr,ABr,yBr,oC,k9e,LBr,xBr,LY,$Br,kBr,SBr,rC,S9e,RBr,BBr,xY,PBr,IBr,qBr,tC,R9e,NBr,jBr,$Y,DBr,GBr,OBr,aC,B9e,VBr,XBr,kY,zBr,QBr,WBr,nC,P9e,HBr,UBr,SY,JBr,YBr,KBr,sC,I9e,ZBr,ePr,RY,oPr,rPr,tPr,lC,iqe,Zc,iC,q9e,Rx,aPr,N9e,nPr,dqe,Fr,Bx,sPr,ef,lPr,BY,iPr,dPr,PY,cPr,fPr,mPr,Px,gPr,j9e,hPr,pPr,uPr,Ht,Ix,_Pr,D9e,bPr,vPr,of,FPr,G9e,TPr,MPr,IY,EPr,CPr,wPr,dC,APr,Hr,qx,yPr,O9e,LPr,xPr,En,$Pr,V9e,kPr,SPr,X9e,RPr,BPr,z9e,PPr,IPr,qPr,Q9e,cC,W9e,NPr,jPr,qY,DPr,GPr,OPr,fC,cqe,rf,mC,H9e,Nx,VPr,U9e,XPr,fqe,Tr,jx,zPr,tf,QPr,NY,WPr,HPr,jY,UPr,JPr,YPr,Dx,KPr,J9e,ZPr,eIr,oIr,Ut,Gx,rIr,Y9e,tIr,aIr,af,nIr,K9e,sIr,lIr,DY,iIr,dIr,cIr,gC,fIr,Ur,Ox,mIr,Z9e,gIr,hIr,Cn,pIr,eMe,uIr,_Ir,oMe,bIr,vIr,rMe,FIr,TIr,MIr,Vx,hC,tMe,EIr,CIr,GY,wIr,AIr,yIr,pC,aMe,LIr,xIr,OY,$Ir,kIr,SIr,uC,mqe,nf,_C,nMe,Xx,RIr,sMe,BIr,gqe,Mr,zx,PIr,sf,IIr,VY,qIr,NIr,XY,jIr,DIr,GIr,Qx,OIr,lMe,VIr,XIr,zIr,Jt,Wx,QIr,iMe,WIr,HIr,lf,UIr,dMe,JIr,YIr,zY,KIr,ZIr,eqr,bC,oqr,Jr,Hx,rqr,cMe,tqr,aqr,wn,nqr,fMe,sqr,lqr,mMe,iqr,dqr,gMe,cqr,fqr,mqr,hMe,vC,pMe,gqr,hqr,QY,pqr,uqr,_qr,FC,hqe;return d=new ee({}),Ma=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),Xw=new ee({}),zw=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),_f=new bqr({props:{warning:!0,$$slots:{default:[S3t]},$$scope:{ctx:A}}}),Qw=new ee({}),Ww=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/configuration_auto.py#L563"}}),Jw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/configuration_auto.py#L586"}}),hg=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[R3t]},$$scope:{ctx:A}}}),Yw=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/configuration_auto.py#L708"}}),Kw=new ee({}),Zw=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/tokenization_auto.py#L377"}}),rA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16988/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/tokenization_auto.py#L391"}}),Qg=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[B3t]},$$scope:{ctx:A}}}),tA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/tokenization_auto.py#L587"}}),aA=new ee({}),nA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/feature_extraction_auto.py#L177"}}),iA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16988/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/feature_extraction_auto.py#L191"}}),vh=new bqr({props:{$$slots:{default:[P3t]},$$scope:{ctx:A}}}),Fh=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[I3t]},$$scope:{ctx:A}}}),dA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/feature_extraction_auto.py#L318"}}),cA=new ee({}),fA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/processing_auto.py#L76"}}),hA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/processing_auto.py#L90"}}),qh=new bqr({props:{$$slots:{default:[q3t]},$$scope:{ctx:A}}}),Nh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[N3t]},$$scope:{ctx:A}}}),pA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/processing_auto.py#L243"}}),uA=new ee({}),_A=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L716"}}),vA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),Gh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[j3t]},$$scope:{ctx:A}}}),FA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),xu=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[D3t]},$$scope:{ctx:A}}}),TA=new ee({}),MA=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L723"}}),CA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),ku=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[G3t]},$$scope:{ctx:A}}}),wA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),b_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[O3t]},$$scope:{ctx:A}}}),AA=new ee({}),yA=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L738"}}),xA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),F_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[V3t]},$$scope:{ctx:A}}}),$A=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),t1=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[X3t]},$$scope:{ctx:A}}}),kA=new ee({}),SA=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L745"}}),BA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),n1=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[z3t]},$$scope:{ctx:A}}}),PA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),O1=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Q3t]},$$scope:{ctx:A}}}),IA=new ee({}),qA=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L752"}}),jA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),X1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[W3t]},$$scope:{ctx:A}}}),DA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),d8=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[H3t]},$$scope:{ctx:A}}}),GA=new ee({}),OA=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L761"}}),XA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),f8=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[U3t]},$$scope:{ctx:A}}}),zA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),sb=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[J3t]},$$scope:{ctx:A}}}),QA=new ee({}),WA=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L795"}}),UA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),ib=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[Y3t]},$$scope:{ctx:A}}}),JA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),Nb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[K3t]},$$scope:{ctx:A}}}),YA=new ee({}),KA=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L802"}}),e0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),Db=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Z3t]},$$scope:{ctx:A}}}),o0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),Wb=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[ewt]},$$scope:{ctx:A}}}),r0=new ee({}),t0=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L788"}}),n0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),Ub=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[owt]},$$scope:{ctx:A}}}),s0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),$2=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[rwt]},$$scope:{ctx:A}}}),l0=new ee({}),i0=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L770"}}),c0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),S2=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[twt]},$$scope:{ctx:A}}}),f0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),vv=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[awt]},$$scope:{ctx:A}}}),m0=new ee({}),g0=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L777"}}),p0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),Tv=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[nwt]},$$scope:{ctx:A}}}),u0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),Cv=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[swt]},$$scope:{ctx:A}}}),_0=new ee({}),b0=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L811"}}),F0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),Av=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[lwt]},$$scope:{ctx:A}}}),T0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),jv=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[iwt]},$$scope:{ctx:A}}}),M0=new ee({}),E0=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L850"}}),w0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),Gv=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[dwt]},$$scope:{ctx:A}}}),A0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),Xv=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[cwt]},$$scope:{ctx:A}}}),y0=new ee({}),L0=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L857"}}),$0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),Qv=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[fwt]},$$scope:{ctx:A}}}),k0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),rF=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[mwt]},$$scope:{ctx:A}}}),S0=new ee({}),R0=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L880"}}),P0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),aF=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[gwt]},$$scope:{ctx:A}}}),I0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),cF=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[hwt]},$$scope:{ctx:A}}}),q0=new ee({}),N0=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L864"}}),D0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),mF=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[pwt]},$$scope:{ctx:A}}}),G0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),MF=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[uwt]},$$scope:{ctx:A}}}),O0=new ee({}),V0=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L871"}}),z0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),CF=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[_wt]},$$scope:{ctx:A}}}),Q0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),LF=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[bwt]},$$scope:{ctx:A}}}),H0=new ee({}),U0=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L889"}}),Y0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),$F=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[vwt]},$$scope:{ctx:A}}}),K0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),IF=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[Fwt]},$$scope:{ctx:A}}}),Z0=new ee({}),ey=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L896"}}),ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),NF=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[Twt]},$$scope:{ctx:A}}}),ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),VF=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[Mwt]},$$scope:{ctx:A}}}),ay=new ee({}),ny=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L843"}}),ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),zF=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[Ewt]},$$scope:{ctx:A}}}),iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),UF=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[Cwt]},$$scope:{ctx:A}}}),cy=new ee({}),fy=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L818"}}),gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),YF=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[wwt]},$$scope:{ctx:A}}}),hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),e6=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[Awt]},$$scope:{ctx:A}}}),py=new ee({}),uy=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L825"}}),by=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),r6=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[ywt]},$$scope:{ctx:A}}}),vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),i6=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[Lwt]},$$scope:{ctx:A}}}),Fy=new ee({}),Ty=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_auto.py#L834"}}),Ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),c6=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[xwt]},$$scope:{ctx:A}}}),Cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),g6=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[$wt]},$$scope:{ctx:A}}}),wy=new ee({}),Ay=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),Ly=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),p6=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[kwt]},$$scope:{ctx:A}}}),xy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),lT=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[Swt]},$$scope:{ctx:A}}}),$y=new ee({}),ky=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),Ry=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),dT=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[Rwt]},$$scope:{ctx:A}}}),By=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),RT=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Bwt]},$$scope:{ctx:A}}}),Py=new ee({}),Iy=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),Ny=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),PT=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[Pwt]},$$scope:{ctx:A}}}),jy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),HT=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Iwt]},$$scope:{ctx:A}}}),Dy=new ee({}),Gy=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),Vy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),JT=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[qwt]},$$scope:{ctx:A}}}),Xy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),o9=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Nwt]},$$scope:{ctx:A}}}),zy=new ee({}),Qy=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),Hy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),t9=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[jwt]},$$scope:{ctx:A}}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),C9=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Dwt]},$$scope:{ctx:A}}}),Jy=new ee({}),Yy=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),Zy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),A9=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Gwt]},$$scope:{ctx:A}}}),eL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),q9=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Owt]},$$scope:{ctx:A}}}),oL=new ee({}),rL=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),aL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),j9=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Vwt]},$$scope:{ctx:A}}}),nL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),mM=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Xwt]},$$scope:{ctx:A}}}),sL=new ee({}),lL=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),dL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),hM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[zwt]},$$scope:{ctx:A}}}),cL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),SM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Qwt]},$$scope:{ctx:A}}}),fL=new ee({}),mL=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),hL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),BM=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Wwt]},$$scope:{ctx:A}}}),pL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),qM=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Hwt]},$$scope:{ctx:A}}}),_L=new ee({}),bL=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),FL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),jM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Uwt]},$$scope:{ctx:A}}}),TL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),GM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Jwt]},$$scope:{ctx:A}}}),ML=new ee({}),EL=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),wL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),VM=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[Ywt]},$$scope:{ctx:A}}}),AL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),c4=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Kwt]},$$scope:{ctx:A}}}),yL=new ee({}),LL=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),$L=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),m4=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Zwt]},$$scope:{ctx:A}}}),kL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),R4=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[eAt]},$$scope:{ctx:A}}}),SL=new ee({}),RL=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),PL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),P4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[oAt]},$$scope:{ctx:A}}}),IL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),q4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[rAt]},$$scope:{ctx:A}}}),qL=new ee({}),NL=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),DL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),j4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[tAt]},$$scope:{ctx:A}}}),GL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),G4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[aAt]},$$scope:{ctx:A}}}),OL=new ee({}),VL=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),zL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),V4=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[nAt]},$$scope:{ctx:A}}}),QL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),pE=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[sAt]},$$scope:{ctx:A}}}),WL=new ee({}),HL=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),JL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),_E=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[lAt]},$$scope:{ctx:A}}}),YL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),yE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[iAt]},$$scope:{ctx:A}}}),KL=new ee({}),ZL=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),ox=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),xE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[dAt]},$$scope:{ctx:A}}}),rx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),OE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[cAt]},$$scope:{ctx:A}}}),tx=new ee({}),ax=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),sx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),XE=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[fAt]},$$scope:{ctx:A}}}),lx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),o5=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[mAt]},$$scope:{ctx:A}}}),ix=new ee({}),dx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),fx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),t5=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[gAt]},$$scope:{ctx:A}}}),mx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),g5=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[hAt]},$$scope:{ctx:A}}}),gx=new ee({}),hx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),ux=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),p5=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[pAt]},$$scope:{ctx:A}}}),_x=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),A5=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[uAt]},$$scope:{ctx:A}}}),bx=new ee({}),vx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),Tx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),L5=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[_At]},$$scope:{ctx:A}}}),Mx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),j5=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[bAt]},$$scope:{ctx:A}}}),Ex=new ee({}),Cx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),Ax=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),G5=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[vAt]},$$scope:{ctx:A}}}),yx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),J5=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[FAt]},$$scope:{ctx:A}}}),Lx=new ee({}),xx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),kx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),K5=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[TAt]},$$scope:{ctx:A}}}),Sx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),lC=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[MAt]},$$scope:{ctx:A}}}),Rx=new ee({}),Bx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),Ix=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),dC=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[EAt]},$$scope:{ctx:A}}}),qx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),fC=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[CAt]},$$scope:{ctx:A}}}),Nx=new ee({}),jx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),Gx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),gC=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[wAt]},$$scope:{ctx:A}}}),Ox=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),uC=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[AAt]},$$scope:{ctx:A}}}),Xx=new ee({}),zx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),Wx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16988/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16988/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L389"}}),bC=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[yAt]},$$scope:{ctx:A}}}),Hx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16988/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16988/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16988/src/transformers/models/auto/auto_factory.py#L417"}}),FC=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[LAt]},$$scope:{ctx:A}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),ii=o("Auto Classes"),mf=l(),et=a("p"),di=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ci=a("code"),Dw=o("from_pretrained()"),gf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qe=l(),Xe=a("p"),fi=o("Instantiating one of "),yn=a("a"),Gw=o("AutoConfig"),Ln=o(", "),xn=a("a"),Ow=o("AutoModel"),mi=o(`, and
`),$n=a("a"),Vw=o("AutoTokenizer"),gi=o(" will directly create a class of the relevant architecture. For instance"),hf=l(),F(Ma.$$.fragment),ze=l(),Ae=a("p"),l$=o("will create a model that is an instance of "),hi=a("a"),i$=o("BertModel"),d$=o("."),Eo=l(),Ea=a("p"),c$=o("There is one class of "),pf=a("code"),f$=o("AutoModel"),Mje=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),fPe=l(),pi=a("h2"),uf=a("a"),jZ=a("span"),F(Xw.$$.fragment),Eje=l(),DZ=a("span"),Cje=o("Extending the Auto Classes"),mPe=l(),kn=a("p"),wje=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),GZ=a("code"),Aje=o("NewModel"),yje=o(", make sure you have a "),OZ=a("code"),Lje=o("NewModelConfig"),xje=o(` then you can add those to the auto
classes like this:`),gPe=l(),F(zw.$$.fragment),hPe=l(),m$=a("p"),$je=o("You will then be able to use the auto classes like you would usually do!"),pPe=l(),F(_f.$$.fragment),uPe=l(),ui=a("h2"),bf=a("a"),VZ=a("span"),F(Qw.$$.fragment),kje=l(),XZ=a("span"),Sje=o("AutoConfig"),_Pe=l(),Co=a("div"),F(Ww.$$.fragment),Rje=l(),Hw=a("p"),Bje=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),g$=a("a"),Pje=o("from_pretrained()"),Ije=o(" class method."),qje=l(),Uw=a("p"),Nje=o("This class cannot be instantiated directly using "),zZ=a("code"),jje=o("__init__()"),Dje=o(" (throws an error)."),Gje=l(),Er=a("div"),F(Jw.$$.fragment),Oje=l(),QZ=a("p"),Vje=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),Xje=l(),_i=a("p"),zje=o("The configuration class to instantiate is selected based on the "),WZ=a("code"),Qje=o("model_type"),Wje=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),HZ=a("code"),Hje=o("pretrained_model_name_or_path"),Uje=o(":"),Jje=l(),y=a("ul"),vf=a("li"),UZ=a("strong"),Yje=o("albert"),Kje=o(" \u2014 "),h$=a("a"),Zje=o("AlbertConfig"),eDe=o(" (ALBERT model)"),oDe=l(),Ff=a("li"),JZ=a("strong"),rDe=o("bart"),tDe=o(" \u2014 "),p$=a("a"),aDe=o("BartConfig"),nDe=o(" (BART model)"),sDe=l(),Tf=a("li"),YZ=a("strong"),lDe=o("beit"),iDe=o(" \u2014 "),u$=a("a"),dDe=o("BeitConfig"),cDe=o(" (BEiT model)"),fDe=l(),Mf=a("li"),KZ=a("strong"),mDe=o("bert"),gDe=o(" \u2014 "),_$=a("a"),hDe=o("BertConfig"),pDe=o(" (BERT model)"),uDe=l(),Ef=a("li"),ZZ=a("strong"),_De=o("bert-generation"),bDe=o(" \u2014 "),b$=a("a"),vDe=o("BertGenerationConfig"),FDe=o(" (Bert Generation model)"),TDe=l(),Cf=a("li"),eee=a("strong"),MDe=o("big_bird"),EDe=o(" \u2014 "),v$=a("a"),CDe=o("BigBirdConfig"),wDe=o(" (BigBird model)"),ADe=l(),wf=a("li"),oee=a("strong"),yDe=o("bigbird_pegasus"),LDe=o(" \u2014 "),F$=a("a"),xDe=o("BigBirdPegasusConfig"),$De=o(" (BigBirdPegasus model)"),kDe=l(),Af=a("li"),ree=a("strong"),SDe=o("blenderbot"),RDe=o(" \u2014 "),T$=a("a"),BDe=o("BlenderbotConfig"),PDe=o(" (Blenderbot model)"),IDe=l(),yf=a("li"),tee=a("strong"),qDe=o("blenderbot-small"),NDe=o(" \u2014 "),M$=a("a"),jDe=o("BlenderbotSmallConfig"),DDe=o(" (BlenderbotSmall model)"),GDe=l(),Lf=a("li"),aee=a("strong"),ODe=o("camembert"),VDe=o(" \u2014 "),E$=a("a"),XDe=o("CamembertConfig"),zDe=o(" (CamemBERT model)"),QDe=l(),xf=a("li"),nee=a("strong"),WDe=o("canine"),HDe=o(" \u2014 "),C$=a("a"),UDe=o("CanineConfig"),JDe=o(" (Canine model)"),YDe=l(),$f=a("li"),see=a("strong"),KDe=o("clip"),ZDe=o(" \u2014 "),w$=a("a"),eGe=o("CLIPConfig"),oGe=o(" (CLIP model)"),rGe=l(),kf=a("li"),lee=a("strong"),tGe=o("convbert"),aGe=o(" \u2014 "),A$=a("a"),nGe=o("ConvBertConfig"),sGe=o(" (ConvBERT model)"),lGe=l(),Sf=a("li"),iee=a("strong"),iGe=o("convnext"),dGe=o(" \u2014 "),y$=a("a"),cGe=o("ConvNextConfig"),fGe=o(" (ConvNext model)"),mGe=l(),Rf=a("li"),dee=a("strong"),gGe=o("ctrl"),hGe=o(" \u2014 "),L$=a("a"),pGe=o("CTRLConfig"),uGe=o(" (CTRL model)"),_Ge=l(),Bf=a("li"),cee=a("strong"),bGe=o("data2vec-audio"),vGe=o(" \u2014 "),x$=a("a"),FGe=o("Data2VecAudioConfig"),TGe=o(" (Data2VecAudio model)"),MGe=l(),Pf=a("li"),fee=a("strong"),EGe=o("data2vec-text"),CGe=o(" \u2014 "),$$=a("a"),wGe=o("Data2VecTextConfig"),AGe=o(" (Data2VecText model)"),yGe=l(),If=a("li"),mee=a("strong"),LGe=o("data2vec-vision"),xGe=o(" \u2014 "),k$=a("a"),$Ge=o("Data2VecVisionConfig"),kGe=o(" (Data2VecVision model)"),SGe=l(),qf=a("li"),gee=a("strong"),RGe=o("deberta"),BGe=o(" \u2014 "),S$=a("a"),PGe=o("DebertaConfig"),IGe=o(" (DeBERTa model)"),qGe=l(),Nf=a("li"),hee=a("strong"),NGe=o("deberta-v2"),jGe=o(" \u2014 "),R$=a("a"),DGe=o("DebertaV2Config"),GGe=o(" (DeBERTa-v2 model)"),OGe=l(),jf=a("li"),pee=a("strong"),VGe=o("decision_transformer"),XGe=o(" \u2014 "),B$=a("a"),zGe=o("DecisionTransformerConfig"),QGe=o(" (Decision Transformer model)"),WGe=l(),Df=a("li"),uee=a("strong"),HGe=o("deit"),UGe=o(" \u2014 "),P$=a("a"),JGe=o("DeiTConfig"),YGe=o(" (DeiT model)"),KGe=l(),Gf=a("li"),_ee=a("strong"),ZGe=o("detr"),eOe=o(" \u2014 "),I$=a("a"),oOe=o("DetrConfig"),rOe=o(" (DETR model)"),tOe=l(),Of=a("li"),bee=a("strong"),aOe=o("distilbert"),nOe=o(" \u2014 "),q$=a("a"),sOe=o("DistilBertConfig"),lOe=o(" (DistilBERT model)"),iOe=l(),Vf=a("li"),vee=a("strong"),dOe=o("dpr"),cOe=o(" \u2014 "),N$=a("a"),fOe=o("DPRConfig"),mOe=o(" (DPR model)"),gOe=l(),Xf=a("li"),Fee=a("strong"),hOe=o("dpt"),pOe=o(" \u2014 "),j$=a("a"),uOe=o("DPTConfig"),_Oe=o(" (DPT model)"),bOe=l(),zf=a("li"),Tee=a("strong"),vOe=o("electra"),FOe=o(" \u2014 "),D$=a("a"),TOe=o("ElectraConfig"),MOe=o(" (ELECTRA model)"),EOe=l(),Qf=a("li"),Mee=a("strong"),COe=o("encoder-decoder"),wOe=o(" \u2014 "),G$=a("a"),AOe=o("EncoderDecoderConfig"),yOe=o(" (Encoder decoder model)"),LOe=l(),Wf=a("li"),Eee=a("strong"),xOe=o("flaubert"),$Oe=o(" \u2014 "),O$=a("a"),kOe=o("FlaubertConfig"),SOe=o(" (FlauBERT model)"),ROe=l(),Hf=a("li"),Cee=a("strong"),BOe=o("fnet"),POe=o(" \u2014 "),V$=a("a"),IOe=o("FNetConfig"),qOe=o(" (FNet model)"),NOe=l(),Uf=a("li"),wee=a("strong"),jOe=o("fsmt"),DOe=o(" \u2014 "),X$=a("a"),GOe=o("FSMTConfig"),OOe=o(" (FairSeq Machine-Translation model)"),VOe=l(),Jf=a("li"),Aee=a("strong"),XOe=o("funnel"),zOe=o(" \u2014 "),z$=a("a"),QOe=o("FunnelConfig"),WOe=o(" (Funnel Transformer model)"),HOe=l(),Yf=a("li"),yee=a("strong"),UOe=o("glpn"),JOe=o(" \u2014 "),Q$=a("a"),YOe=o("GLPNConfig"),KOe=o(" (GLPN model)"),ZOe=l(),Kf=a("li"),Lee=a("strong"),eVe=o("gpt2"),oVe=o(" \u2014 "),W$=a("a"),rVe=o("GPT2Config"),tVe=o(" (OpenAI GPT-2 model)"),aVe=l(),Zf=a("li"),xee=a("strong"),nVe=o("gpt_neo"),sVe=o(" \u2014 "),H$=a("a"),lVe=o("GPTNeoConfig"),iVe=o(" (GPT Neo model)"),dVe=l(),em=a("li"),$ee=a("strong"),cVe=o("gptj"),fVe=o(" \u2014 "),U$=a("a"),mVe=o("GPTJConfig"),gVe=o(" (GPT-J model)"),hVe=l(),om=a("li"),kee=a("strong"),pVe=o("hubert"),uVe=o(" \u2014 "),J$=a("a"),_Ve=o("HubertConfig"),bVe=o(" (Hubert model)"),vVe=l(),rm=a("li"),See=a("strong"),FVe=o("ibert"),TVe=o(" \u2014 "),Y$=a("a"),MVe=o("IBertConfig"),EVe=o(" (I-BERT model)"),CVe=l(),tm=a("li"),Ree=a("strong"),wVe=o("imagegpt"),AVe=o(" \u2014 "),K$=a("a"),yVe=o("ImageGPTConfig"),LVe=o(" (ImageGPT model)"),xVe=l(),am=a("li"),Bee=a("strong"),$Ve=o("layoutlm"),kVe=o(" \u2014 "),Z$=a("a"),SVe=o("LayoutLMConfig"),RVe=o(" (LayoutLM model)"),BVe=l(),nm=a("li"),Pee=a("strong"),PVe=o("layoutlmv2"),IVe=o(" \u2014 "),ek=a("a"),qVe=o("LayoutLMv2Config"),NVe=o(" (LayoutLMv2 model)"),jVe=l(),sm=a("li"),Iee=a("strong"),DVe=o("led"),GVe=o(" \u2014 "),ok=a("a"),OVe=o("LEDConfig"),VVe=o(" (LED model)"),XVe=l(),lm=a("li"),qee=a("strong"),zVe=o("longformer"),QVe=o(" \u2014 "),rk=a("a"),WVe=o("LongformerConfig"),HVe=o(" (Longformer model)"),UVe=l(),im=a("li"),Nee=a("strong"),JVe=o("luke"),YVe=o(" \u2014 "),tk=a("a"),KVe=o("LukeConfig"),ZVe=o(" (LUKE model)"),eXe=l(),dm=a("li"),jee=a("strong"),oXe=o("lxmert"),rXe=o(" \u2014 "),ak=a("a"),tXe=o("LxmertConfig"),aXe=o(" (LXMERT model)"),nXe=l(),cm=a("li"),Dee=a("strong"),sXe=o("m2m_100"),lXe=o(" \u2014 "),nk=a("a"),iXe=o("M2M100Config"),dXe=o(" (M2M100 model)"),cXe=l(),fm=a("li"),Gee=a("strong"),fXe=o("marian"),mXe=o(" \u2014 "),sk=a("a"),gXe=o("MarianConfig"),hXe=o(" (Marian model)"),pXe=l(),mm=a("li"),Oee=a("strong"),uXe=o("maskformer"),_Xe=o(" \u2014 "),lk=a("a"),bXe=o("MaskFormerConfig"),vXe=o(" (MaskFormer model)"),FXe=l(),gm=a("li"),Vee=a("strong"),TXe=o("mbart"),MXe=o(" \u2014 "),ik=a("a"),EXe=o("MBartConfig"),CXe=o(" (mBART model)"),wXe=l(),hm=a("li"),Xee=a("strong"),AXe=o("megatron-bert"),yXe=o(" \u2014 "),dk=a("a"),LXe=o("MegatronBertConfig"),xXe=o(" (MegatronBert model)"),$Xe=l(),pm=a("li"),zee=a("strong"),kXe=o("mobilebert"),SXe=o(" \u2014 "),ck=a("a"),RXe=o("MobileBertConfig"),BXe=o(" (MobileBERT model)"),PXe=l(),um=a("li"),Qee=a("strong"),IXe=o("mpnet"),qXe=o(" \u2014 "),fk=a("a"),NXe=o("MPNetConfig"),jXe=o(" (MPNet model)"),DXe=l(),_m=a("li"),Wee=a("strong"),GXe=o("mt5"),OXe=o(" \u2014 "),mk=a("a"),VXe=o("MT5Config"),XXe=o(" (mT5 model)"),zXe=l(),bm=a("li"),Hee=a("strong"),QXe=o("nystromformer"),WXe=o(" \u2014 "),gk=a("a"),HXe=o("NystromformerConfig"),UXe=o(" (Nystromformer model)"),JXe=l(),vm=a("li"),Uee=a("strong"),YXe=o("openai-gpt"),KXe=o(" \u2014 "),hk=a("a"),ZXe=o("OpenAIGPTConfig"),eze=o(" (OpenAI GPT model)"),oze=l(),Fm=a("li"),Jee=a("strong"),rze=o("pegasus"),tze=o(" \u2014 "),pk=a("a"),aze=o("PegasusConfig"),nze=o(" (Pegasus model)"),sze=l(),Tm=a("li"),Yee=a("strong"),lze=o("perceiver"),ize=o(" \u2014 "),uk=a("a"),dze=o("PerceiverConfig"),cze=o(" (Perceiver model)"),fze=l(),Mm=a("li"),Kee=a("strong"),mze=o("plbart"),gze=o(" \u2014 "),_k=a("a"),hze=o("PLBartConfig"),pze=o(" (PLBart model)"),uze=l(),Em=a("li"),Zee=a("strong"),_ze=o("poolformer"),bze=o(" \u2014 "),bk=a("a"),vze=o("PoolFormerConfig"),Fze=o(" (PoolFormer model)"),Tze=l(),Cm=a("li"),eoe=a("strong"),Mze=o("prophetnet"),Eze=o(" \u2014 "),vk=a("a"),Cze=o("ProphetNetConfig"),wze=o(" (ProphetNet model)"),Aze=l(),wm=a("li"),ooe=a("strong"),yze=o("qdqbert"),Lze=o(" \u2014 "),Fk=a("a"),xze=o("QDQBertConfig"),$ze=o(" (QDQBert model)"),kze=l(),Am=a("li"),roe=a("strong"),Sze=o("rag"),Rze=o(" \u2014 "),Tk=a("a"),Bze=o("RagConfig"),Pze=o(" (RAG model)"),Ize=l(),ym=a("li"),toe=a("strong"),qze=o("realm"),Nze=o(" \u2014 "),Mk=a("a"),jze=o("RealmConfig"),Dze=o(" (Realm model)"),Gze=l(),Lm=a("li"),aoe=a("strong"),Oze=o("reformer"),Vze=o(" \u2014 "),Ek=a("a"),Xze=o("ReformerConfig"),zze=o(" (Reformer model)"),Qze=l(),xm=a("li"),noe=a("strong"),Wze=o("regnet"),Hze=o(" \u2014 "),Ck=a("a"),Uze=o("RegNetConfig"),Jze=o(" (RegNet model)"),Yze=l(),$m=a("li"),soe=a("strong"),Kze=o("rembert"),Zze=o(" \u2014 "),wk=a("a"),eQe=o("RemBertConfig"),oQe=o(" (RemBERT model)"),rQe=l(),km=a("li"),loe=a("strong"),tQe=o("resnet"),aQe=o(" \u2014 "),Ak=a("a"),nQe=o("ResNetConfig"),sQe=o(" (ResNet model)"),lQe=l(),Sm=a("li"),ioe=a("strong"),iQe=o("retribert"),dQe=o(" \u2014 "),yk=a("a"),cQe=o("RetriBertConfig"),fQe=o(" (RetriBERT model)"),mQe=l(),Rm=a("li"),doe=a("strong"),gQe=o("roberta"),hQe=o(" \u2014 "),Lk=a("a"),pQe=o("RobertaConfig"),uQe=o(" (RoBERTa model)"),_Qe=l(),Bm=a("li"),coe=a("strong"),bQe=o("roformer"),vQe=o(" \u2014 "),xk=a("a"),FQe=o("RoFormerConfig"),TQe=o(" (RoFormer model)"),MQe=l(),Pm=a("li"),foe=a("strong"),EQe=o("segformer"),CQe=o(" \u2014 "),$k=a("a"),wQe=o("SegformerConfig"),AQe=o(" (SegFormer model)"),yQe=l(),Im=a("li"),moe=a("strong"),LQe=o("sew"),xQe=o(" \u2014 "),kk=a("a"),$Qe=o("SEWConfig"),kQe=o(" (SEW model)"),SQe=l(),qm=a("li"),goe=a("strong"),RQe=o("sew-d"),BQe=o(" \u2014 "),Sk=a("a"),PQe=o("SEWDConfig"),IQe=o(" (SEW-D model)"),qQe=l(),Nm=a("li"),hoe=a("strong"),NQe=o("speech-encoder-decoder"),jQe=o(" \u2014 "),Rk=a("a"),DQe=o("SpeechEncoderDecoderConfig"),GQe=o(" (Speech Encoder decoder model)"),OQe=l(),jm=a("li"),poe=a("strong"),VQe=o("speech_to_text"),XQe=o(" \u2014 "),Bk=a("a"),zQe=o("Speech2TextConfig"),QQe=o(" (Speech2Text model)"),WQe=l(),Dm=a("li"),uoe=a("strong"),HQe=o("speech_to_text_2"),UQe=o(" \u2014 "),Pk=a("a"),JQe=o("Speech2Text2Config"),YQe=o(" (Speech2Text2 model)"),KQe=l(),Gm=a("li"),_oe=a("strong"),ZQe=o("splinter"),eWe=o(" \u2014 "),Ik=a("a"),oWe=o("SplinterConfig"),rWe=o(" (Splinter model)"),tWe=l(),Om=a("li"),boe=a("strong"),aWe=o("squeezebert"),nWe=o(" \u2014 "),qk=a("a"),sWe=o("SqueezeBertConfig"),lWe=o(" (SqueezeBERT model)"),iWe=l(),Vm=a("li"),voe=a("strong"),dWe=o("swin"),cWe=o(" \u2014 "),Nk=a("a"),fWe=o("SwinConfig"),mWe=o(" (Swin model)"),gWe=l(),Xm=a("li"),Foe=a("strong"),hWe=o("t5"),pWe=o(" \u2014 "),jk=a("a"),uWe=o("T5Config"),_We=o(" (T5 model)"),bWe=l(),zm=a("li"),Toe=a("strong"),vWe=o("tapas"),FWe=o(" \u2014 "),Dk=a("a"),TWe=o("TapasConfig"),MWe=o(" (TAPAS model)"),EWe=l(),Qm=a("li"),Moe=a("strong"),CWe=o("tapex"),wWe=o(" \u2014 "),Gk=a("a"),AWe=o("BartConfig"),yWe=o(" (TAPEX model)"),LWe=l(),Wm=a("li"),Eoe=a("strong"),xWe=o("transfo-xl"),$We=o(" \u2014 "),Ok=a("a"),kWe=o("TransfoXLConfig"),SWe=o(" (Transformer-XL model)"),RWe=l(),Hm=a("li"),Coe=a("strong"),BWe=o("trocr"),PWe=o(" \u2014 "),Vk=a("a"),IWe=o("TrOCRConfig"),qWe=o(" (TrOCR model)"),NWe=l(),Um=a("li"),woe=a("strong"),jWe=o("unispeech"),DWe=o(" \u2014 "),Xk=a("a"),GWe=o("UniSpeechConfig"),OWe=o(" (UniSpeech model)"),VWe=l(),Jm=a("li"),Aoe=a("strong"),XWe=o("unispeech-sat"),zWe=o(" \u2014 "),zk=a("a"),QWe=o("UniSpeechSatConfig"),WWe=o(" (UniSpeechSat model)"),HWe=l(),Ym=a("li"),yoe=a("strong"),UWe=o("van"),JWe=o(" \u2014 "),Qk=a("a"),YWe=o("VanConfig"),KWe=o(" (VAN model)"),ZWe=l(),Km=a("li"),Loe=a("strong"),eHe=o("vilt"),oHe=o(" \u2014 "),Wk=a("a"),rHe=o("ViltConfig"),tHe=o(" (ViLT model)"),aHe=l(),Zm=a("li"),xoe=a("strong"),nHe=o("vision-encoder-decoder"),sHe=o(" \u2014 "),Hk=a("a"),lHe=o("VisionEncoderDecoderConfig"),iHe=o(" (Vision Encoder decoder model)"),dHe=l(),eg=a("li"),$oe=a("strong"),cHe=o("vision-text-dual-encoder"),fHe=o(" \u2014 "),Uk=a("a"),mHe=o("VisionTextDualEncoderConfig"),gHe=o(" (VisionTextDualEncoder model)"),hHe=l(),og=a("li"),koe=a("strong"),pHe=o("visual_bert"),uHe=o(" \u2014 "),Jk=a("a"),_He=o("VisualBertConfig"),bHe=o(" (VisualBert model)"),vHe=l(),rg=a("li"),Soe=a("strong"),FHe=o("vit"),THe=o(" \u2014 "),Yk=a("a"),MHe=o("ViTConfig"),EHe=o(" (ViT model)"),CHe=l(),tg=a("li"),Roe=a("strong"),wHe=o("vit_mae"),AHe=o(" \u2014 "),Kk=a("a"),yHe=o("ViTMAEConfig"),LHe=o(" (ViTMAE model)"),xHe=l(),ag=a("li"),Boe=a("strong"),$He=o("wav2vec2"),kHe=o(" \u2014 "),Zk=a("a"),SHe=o("Wav2Vec2Config"),RHe=o(" (Wav2Vec2 model)"),BHe=l(),ng=a("li"),Poe=a("strong"),PHe=o("wavlm"),IHe=o(" \u2014 "),eS=a("a"),qHe=o("WavLMConfig"),NHe=o(" (WavLM model)"),jHe=l(),sg=a("li"),Ioe=a("strong"),DHe=o("xglm"),GHe=o(" \u2014 "),oS=a("a"),OHe=o("XGLMConfig"),VHe=o(" (XGLM model)"),XHe=l(),lg=a("li"),qoe=a("strong"),zHe=o("xlm"),QHe=o(" \u2014 "),rS=a("a"),WHe=o("XLMConfig"),HHe=o(" (XLM model)"),UHe=l(),ig=a("li"),Noe=a("strong"),JHe=o("xlm-prophetnet"),YHe=o(" \u2014 "),tS=a("a"),KHe=o("XLMProphetNetConfig"),ZHe=o(" (XLMProphetNet model)"),eUe=l(),dg=a("li"),joe=a("strong"),oUe=o("xlm-roberta"),rUe=o(" \u2014 "),aS=a("a"),tUe=o("XLMRobertaConfig"),aUe=o(" (XLM-RoBERTa model)"),nUe=l(),cg=a("li"),Doe=a("strong"),sUe=o("xlm-roberta-xl"),lUe=o(" \u2014 "),nS=a("a"),iUe=o("XLMRobertaXLConfig"),dUe=o(" (XLM-RoBERTa-XL model)"),cUe=l(),fg=a("li"),Goe=a("strong"),fUe=o("xlnet"),mUe=o(" \u2014 "),sS=a("a"),gUe=o("XLNetConfig"),hUe=o(" (XLNet model)"),pUe=l(),mg=a("li"),Ooe=a("strong"),uUe=o("yolos"),_Ue=o(" \u2014 "),lS=a("a"),bUe=o("YolosConfig"),vUe=o(" (YOLOS model)"),FUe=l(),gg=a("li"),Voe=a("strong"),TUe=o("yoso"),MUe=o(" \u2014 "),iS=a("a"),EUe=o("YosoConfig"),CUe=o(" (YOSO model)"),wUe=l(),F(hg.$$.fragment),AUe=l(),pg=a("div"),F(Yw.$$.fragment),yUe=l(),Xoe=a("p"),LUe=o("Register a new configuration for this class."),bPe=l(),bi=a("h2"),ug=a("a"),zoe=a("span"),F(Kw.$$.fragment),xUe=l(),Qoe=a("span"),$Ue=o("AutoTokenizer"),vPe=l(),wo=a("div"),F(Zw.$$.fragment),kUe=l(),eA=a("p"),SUe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),dS=a("a"),RUe=o("AutoTokenizer.from_pretrained()"),BUe=o(" class method."),PUe=l(),oA=a("p"),IUe=o("This class cannot be instantiated directly using "),Woe=a("code"),qUe=o("__init__()"),NUe=o(" (throws an error)."),jUe=l(),Cr=a("div"),F(rA.$$.fragment),DUe=l(),Hoe=a("p"),GUe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),OUe=l(),Ca=a("p"),VUe=o("The tokenizer class to instantiate is selected based on the "),Uoe=a("code"),XUe=o("model_type"),zUe=o(` property of the config object (either
passed as an argument or loaded from `),Joe=a("code"),QUe=o("pretrained_model_name_or_path"),WUe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yoe=a("code"),HUe=o("pretrained_model_name_or_path"),UUe=o(":"),JUe=l(),k=a("ul"),Sn=a("li"),Koe=a("strong"),YUe=o("albert"),KUe=o(" \u2014 "),cS=a("a"),ZUe=o("AlbertTokenizer"),eJe=o(" or "),fS=a("a"),oJe=o("AlbertTokenizerFast"),rJe=o(" (ALBERT model)"),tJe=l(),Rn=a("li"),Zoe=a("strong"),aJe=o("bart"),nJe=o(" \u2014 "),mS=a("a"),sJe=o("BartTokenizer"),lJe=o(" or "),gS=a("a"),iJe=o("BartTokenizerFast"),dJe=o(" (BART model)"),cJe=l(),Bn=a("li"),ere=a("strong"),fJe=o("barthez"),mJe=o(" \u2014 "),hS=a("a"),gJe=o("BarthezTokenizer"),hJe=o(" or "),pS=a("a"),pJe=o("BarthezTokenizerFast"),uJe=o(" (BARThez model)"),_Je=l(),_g=a("li"),ore=a("strong"),bJe=o("bartpho"),vJe=o(" \u2014 "),uS=a("a"),FJe=o("BartphoTokenizer"),TJe=o(" (BARTpho model)"),MJe=l(),Pn=a("li"),rre=a("strong"),EJe=o("bert"),CJe=o(" \u2014 "),_S=a("a"),wJe=o("BertTokenizer"),AJe=o(" or "),bS=a("a"),yJe=o("BertTokenizerFast"),LJe=o(" (BERT model)"),xJe=l(),bg=a("li"),tre=a("strong"),$Je=o("bert-generation"),kJe=o(" \u2014 "),vS=a("a"),SJe=o("BertGenerationTokenizer"),RJe=o(" (Bert Generation model)"),BJe=l(),vg=a("li"),are=a("strong"),PJe=o("bert-japanese"),IJe=o(" \u2014 "),FS=a("a"),qJe=o("BertJapaneseTokenizer"),NJe=o(" (BertJapanese model)"),jJe=l(),Fg=a("li"),nre=a("strong"),DJe=o("bertweet"),GJe=o(" \u2014 "),TS=a("a"),OJe=o("BertweetTokenizer"),VJe=o(" (Bertweet model)"),XJe=l(),In=a("li"),sre=a("strong"),zJe=o("big_bird"),QJe=o(" \u2014 "),MS=a("a"),WJe=o("BigBirdTokenizer"),HJe=o(" or "),ES=a("a"),UJe=o("BigBirdTokenizerFast"),JJe=o(" (BigBird model)"),YJe=l(),qn=a("li"),lre=a("strong"),KJe=o("bigbird_pegasus"),ZJe=o(" \u2014 "),CS=a("a"),eYe=o("PegasusTokenizer"),oYe=o(" or "),wS=a("a"),rYe=o("PegasusTokenizerFast"),tYe=o(" (BigBirdPegasus model)"),aYe=l(),Nn=a("li"),ire=a("strong"),nYe=o("blenderbot"),sYe=o(" \u2014 "),AS=a("a"),lYe=o("BlenderbotTokenizer"),iYe=o(" or "),yS=a("a"),dYe=o("BlenderbotTokenizerFast"),cYe=o(" (Blenderbot model)"),fYe=l(),Tg=a("li"),dre=a("strong"),mYe=o("blenderbot-small"),gYe=o(" \u2014 "),LS=a("a"),hYe=o("BlenderbotSmallTokenizer"),pYe=o(" (BlenderbotSmall model)"),uYe=l(),Mg=a("li"),cre=a("strong"),_Ye=o("byt5"),bYe=o(" \u2014 "),xS=a("a"),vYe=o("ByT5Tokenizer"),FYe=o(" (ByT5 model)"),TYe=l(),jn=a("li"),fre=a("strong"),MYe=o("camembert"),EYe=o(" \u2014 "),$S=a("a"),CYe=o("CamembertTokenizer"),wYe=o(" or "),kS=a("a"),AYe=o("CamembertTokenizerFast"),yYe=o(" (CamemBERT model)"),LYe=l(),Eg=a("li"),mre=a("strong"),xYe=o("canine"),$Ye=o(" \u2014 "),SS=a("a"),kYe=o("CanineTokenizer"),SYe=o(" (Canine model)"),RYe=l(),Dn=a("li"),gre=a("strong"),BYe=o("clip"),PYe=o(" \u2014 "),RS=a("a"),IYe=o("CLIPTokenizer"),qYe=o(" or "),BS=a("a"),NYe=o("CLIPTokenizerFast"),jYe=o(" (CLIP model)"),DYe=l(),Gn=a("li"),hre=a("strong"),GYe=o("convbert"),OYe=o(" \u2014 "),PS=a("a"),VYe=o("ConvBertTokenizer"),XYe=o(" or "),IS=a("a"),zYe=o("ConvBertTokenizerFast"),QYe=o(" (ConvBERT model)"),WYe=l(),On=a("li"),pre=a("strong"),HYe=o("cpm"),UYe=o(" \u2014 "),qS=a("a"),JYe=o("CpmTokenizer"),YYe=o(" or "),NS=a("a"),KYe=o("CpmTokenizerFast"),ZYe=o(" (CPM model)"),eKe=l(),Cg=a("li"),ure=a("strong"),oKe=o("ctrl"),rKe=o(" \u2014 "),jS=a("a"),tKe=o("CTRLTokenizer"),aKe=o(" (CTRL model)"),nKe=l(),Vn=a("li"),_re=a("strong"),sKe=o("data2vec-text"),lKe=o(" \u2014 "),DS=a("a"),iKe=o("RobertaTokenizer"),dKe=o(" or "),GS=a("a"),cKe=o("RobertaTokenizerFast"),fKe=o(" (Data2VecText model)"),mKe=l(),Xn=a("li"),bre=a("strong"),gKe=o("deberta"),hKe=o(" \u2014 "),OS=a("a"),pKe=o("DebertaTokenizer"),uKe=o(" or "),VS=a("a"),_Ke=o("DebertaTokenizerFast"),bKe=o(" (DeBERTa model)"),vKe=l(),zn=a("li"),vre=a("strong"),FKe=o("deberta-v2"),TKe=o(" \u2014 "),XS=a("a"),MKe=o("DebertaV2Tokenizer"),EKe=o(" or "),zS=a("a"),CKe=o("DebertaV2TokenizerFast"),wKe=o(" (DeBERTa-v2 model)"),AKe=l(),Qn=a("li"),Fre=a("strong"),yKe=o("distilbert"),LKe=o(" \u2014 "),QS=a("a"),xKe=o("DistilBertTokenizer"),$Ke=o(" or "),WS=a("a"),kKe=o("DistilBertTokenizerFast"),SKe=o(" (DistilBERT model)"),RKe=l(),Wn=a("li"),Tre=a("strong"),BKe=o("dpr"),PKe=o(" \u2014 "),HS=a("a"),IKe=o("DPRQuestionEncoderTokenizer"),qKe=o(" or "),US=a("a"),NKe=o("DPRQuestionEncoderTokenizerFast"),jKe=o(" (DPR model)"),DKe=l(),Hn=a("li"),Mre=a("strong"),GKe=o("electra"),OKe=o(" \u2014 "),JS=a("a"),VKe=o("ElectraTokenizer"),XKe=o(" or "),YS=a("a"),zKe=o("ElectraTokenizerFast"),QKe=o(" (ELECTRA model)"),WKe=l(),wg=a("li"),Ere=a("strong"),HKe=o("flaubert"),UKe=o(" \u2014 "),KS=a("a"),JKe=o("FlaubertTokenizer"),YKe=o(" (FlauBERT model)"),KKe=l(),Un=a("li"),Cre=a("strong"),ZKe=o("fnet"),eZe=o(" \u2014 "),ZS=a("a"),oZe=o("FNetTokenizer"),rZe=o(" or "),eR=a("a"),tZe=o("FNetTokenizerFast"),aZe=o(" (FNet model)"),nZe=l(),Ag=a("li"),wre=a("strong"),sZe=o("fsmt"),lZe=o(" \u2014 "),oR=a("a"),iZe=o("FSMTTokenizer"),dZe=o(" (FairSeq Machine-Translation model)"),cZe=l(),Jn=a("li"),Are=a("strong"),fZe=o("funnel"),mZe=o(" \u2014 "),rR=a("a"),gZe=o("FunnelTokenizer"),hZe=o(" or "),tR=a("a"),pZe=o("FunnelTokenizerFast"),uZe=o(" (Funnel Transformer model)"),_Ze=l(),Yn=a("li"),yre=a("strong"),bZe=o("gpt2"),vZe=o(" \u2014 "),aR=a("a"),FZe=o("GPT2Tokenizer"),TZe=o(" or "),nR=a("a"),MZe=o("GPT2TokenizerFast"),EZe=o(" (OpenAI GPT-2 model)"),CZe=l(),Kn=a("li"),Lre=a("strong"),wZe=o("gpt_neo"),AZe=o(" \u2014 "),sR=a("a"),yZe=o("GPT2Tokenizer"),LZe=o(" or "),lR=a("a"),xZe=o("GPT2TokenizerFast"),$Ze=o(" (GPT Neo model)"),kZe=l(),Zn=a("li"),xre=a("strong"),SZe=o("gptj"),RZe=o(" \u2014 "),iR=a("a"),BZe=o("GPT2Tokenizer"),PZe=o(" or "),dR=a("a"),IZe=o("GPT2TokenizerFast"),qZe=o(" (GPT-J model)"),NZe=l(),es=a("li"),$re=a("strong"),jZe=o("herbert"),DZe=o(" \u2014 "),cR=a("a"),GZe=o("HerbertTokenizer"),OZe=o(" or "),fR=a("a"),VZe=o("HerbertTokenizerFast"),XZe=o(" (HerBERT model)"),zZe=l(),yg=a("li"),kre=a("strong"),QZe=o("hubert"),WZe=o(" \u2014 "),mR=a("a"),HZe=o("Wav2Vec2CTCTokenizer"),UZe=o(" (Hubert model)"),JZe=l(),os=a("li"),Sre=a("strong"),YZe=o("ibert"),KZe=o(" \u2014 "),gR=a("a"),ZZe=o("RobertaTokenizer"),eeo=o(" or "),hR=a("a"),oeo=o("RobertaTokenizerFast"),reo=o(" (I-BERT model)"),teo=l(),rs=a("li"),Rre=a("strong"),aeo=o("layoutlm"),neo=o(" \u2014 "),pR=a("a"),seo=o("LayoutLMTokenizer"),leo=o(" or "),uR=a("a"),ieo=o("LayoutLMTokenizerFast"),deo=o(" (LayoutLM model)"),ceo=l(),ts=a("li"),Bre=a("strong"),feo=o("layoutlmv2"),meo=o(" \u2014 "),_R=a("a"),geo=o("LayoutLMv2Tokenizer"),heo=o(" or "),bR=a("a"),peo=o("LayoutLMv2TokenizerFast"),ueo=o(" (LayoutLMv2 model)"),_eo=l(),as=a("li"),Pre=a("strong"),beo=o("layoutxlm"),veo=o(" \u2014 "),vR=a("a"),Feo=o("LayoutXLMTokenizer"),Teo=o(" or "),FR=a("a"),Meo=o("LayoutXLMTokenizerFast"),Eeo=o(" (LayoutXLM model)"),Ceo=l(),ns=a("li"),Ire=a("strong"),weo=o("led"),Aeo=o(" \u2014 "),TR=a("a"),yeo=o("LEDTokenizer"),Leo=o(" or "),MR=a("a"),xeo=o("LEDTokenizerFast"),$eo=o(" (LED model)"),keo=l(),ss=a("li"),qre=a("strong"),Seo=o("longformer"),Reo=o(" \u2014 "),ER=a("a"),Beo=o("LongformerTokenizer"),Peo=o(" or "),CR=a("a"),Ieo=o("LongformerTokenizerFast"),qeo=o(" (Longformer model)"),Neo=l(),Lg=a("li"),Nre=a("strong"),jeo=o("luke"),Deo=o(" \u2014 "),wR=a("a"),Geo=o("LukeTokenizer"),Oeo=o(" (LUKE model)"),Veo=l(),ls=a("li"),jre=a("strong"),Xeo=o("lxmert"),zeo=o(" \u2014 "),AR=a("a"),Qeo=o("LxmertTokenizer"),Weo=o(" or "),yR=a("a"),Heo=o("LxmertTokenizerFast"),Ueo=o(" (LXMERT model)"),Jeo=l(),xg=a("li"),Dre=a("strong"),Yeo=o("m2m_100"),Keo=o(" \u2014 "),LR=a("a"),Zeo=o("M2M100Tokenizer"),eoo=o(" (M2M100 model)"),ooo=l(),$g=a("li"),Gre=a("strong"),roo=o("marian"),too=o(" \u2014 "),xR=a("a"),aoo=o("MarianTokenizer"),noo=o(" (Marian model)"),soo=l(),is=a("li"),Ore=a("strong"),loo=o("mbart"),ioo=o(" \u2014 "),$R=a("a"),doo=o("MBartTokenizer"),coo=o(" or "),kR=a("a"),foo=o("MBartTokenizerFast"),moo=o(" (mBART model)"),goo=l(),ds=a("li"),Vre=a("strong"),hoo=o("mbart50"),poo=o(" \u2014 "),SR=a("a"),uoo=o("MBart50Tokenizer"),_oo=o(" or "),RR=a("a"),boo=o("MBart50TokenizerFast"),voo=o(" (mBART-50 model)"),Foo=l(),cs=a("li"),Xre=a("strong"),Too=o("megatron-bert"),Moo=o(" \u2014 "),BR=a("a"),Eoo=o("BertTokenizer"),Coo=o(" or "),PR=a("a"),woo=o("BertTokenizerFast"),Aoo=o(" (MegatronBert model)"),yoo=l(),kg=a("li"),zre=a("strong"),Loo=o("mluke"),xoo=o(" \u2014 "),IR=a("a"),$oo=o("MLukeTokenizer"),koo=o(" (mLUKE model)"),Soo=l(),fs=a("li"),Qre=a("strong"),Roo=o("mobilebert"),Boo=o(" \u2014 "),qR=a("a"),Poo=o("MobileBertTokenizer"),Ioo=o(" or "),NR=a("a"),qoo=o("MobileBertTokenizerFast"),Noo=o(" (MobileBERT model)"),joo=l(),ms=a("li"),Wre=a("strong"),Doo=o("mpnet"),Goo=o(" \u2014 "),jR=a("a"),Ooo=o("MPNetTokenizer"),Voo=o(" or "),DR=a("a"),Xoo=o("MPNetTokenizerFast"),zoo=o(" (MPNet model)"),Qoo=l(),gs=a("li"),Hre=a("strong"),Woo=o("mt5"),Hoo=o(" \u2014 "),GR=a("a"),Uoo=o("MT5Tokenizer"),Joo=o(" or "),OR=a("a"),Yoo=o("MT5TokenizerFast"),Koo=o(" (mT5 model)"),Zoo=l(),hs=a("li"),Ure=a("strong"),ero=o("nystromformer"),oro=o(" \u2014 "),VR=a("a"),rro=o("AlbertTokenizer"),tro=o(" or "),XR=a("a"),aro=o("AlbertTokenizerFast"),nro=o(" (Nystromformer model)"),sro=l(),ps=a("li"),Jre=a("strong"),lro=o("openai-gpt"),iro=o(" \u2014 "),zR=a("a"),dro=o("OpenAIGPTTokenizer"),cro=o(" or "),QR=a("a"),fro=o("OpenAIGPTTokenizerFast"),mro=o(" (OpenAI GPT model)"),gro=l(),us=a("li"),Yre=a("strong"),hro=o("pegasus"),pro=o(" \u2014 "),WR=a("a"),uro=o("PegasusTokenizer"),_ro=o(" or "),HR=a("a"),bro=o("PegasusTokenizerFast"),vro=o(" (Pegasus model)"),Fro=l(),Sg=a("li"),Kre=a("strong"),Tro=o("perceiver"),Mro=o(" \u2014 "),UR=a("a"),Ero=o("PerceiverTokenizer"),Cro=o(" (Perceiver model)"),wro=l(),Rg=a("li"),Zre=a("strong"),Aro=o("phobert"),yro=o(" \u2014 "),JR=a("a"),Lro=o("PhobertTokenizer"),xro=o(" (PhoBERT model)"),$ro=l(),Bg=a("li"),ete=a("strong"),kro=o("plbart"),Sro=o(" \u2014 "),YR=a("a"),Rro=o("PLBartTokenizer"),Bro=o(" (PLBart model)"),Pro=l(),Pg=a("li"),ote=a("strong"),Iro=o("prophetnet"),qro=o(" \u2014 "),KR=a("a"),Nro=o("ProphetNetTokenizer"),jro=o(" (ProphetNet model)"),Dro=l(),_s=a("li"),rte=a("strong"),Gro=o("qdqbert"),Oro=o(" \u2014 "),ZR=a("a"),Vro=o("BertTokenizer"),Xro=o(" or "),eB=a("a"),zro=o("BertTokenizerFast"),Qro=o(" (QDQBert model)"),Wro=l(),Ig=a("li"),tte=a("strong"),Hro=o("rag"),Uro=o(" \u2014 "),oB=a("a"),Jro=o("RagTokenizer"),Yro=o(" (RAG model)"),Kro=l(),bs=a("li"),ate=a("strong"),Zro=o("realm"),eto=o(" \u2014 "),rB=a("a"),oto=o("RealmTokenizer"),rto=o(" or "),tB=a("a"),tto=o("RealmTokenizerFast"),ato=o(" (Realm model)"),nto=l(),vs=a("li"),nte=a("strong"),sto=o("reformer"),lto=o(" \u2014 "),aB=a("a"),ito=o("ReformerTokenizer"),dto=o(" or "),nB=a("a"),cto=o("ReformerTokenizerFast"),fto=o(" (Reformer model)"),mto=l(),Fs=a("li"),ste=a("strong"),gto=o("rembert"),hto=o(" \u2014 "),sB=a("a"),pto=o("RemBertTokenizer"),uto=o(" or "),lB=a("a"),_to=o("RemBertTokenizerFast"),bto=o(" (RemBERT model)"),vto=l(),Ts=a("li"),lte=a("strong"),Fto=o("retribert"),Tto=o(" \u2014 "),iB=a("a"),Mto=o("RetriBertTokenizer"),Eto=o(" or "),dB=a("a"),Cto=o("RetriBertTokenizerFast"),wto=o(" (RetriBERT model)"),Ato=l(),Ms=a("li"),ite=a("strong"),yto=o("roberta"),Lto=o(" \u2014 "),cB=a("a"),xto=o("RobertaTokenizer"),$to=o(" or "),fB=a("a"),kto=o("RobertaTokenizerFast"),Sto=o(" (RoBERTa model)"),Rto=l(),Es=a("li"),dte=a("strong"),Bto=o("roformer"),Pto=o(" \u2014 "),mB=a("a"),Ito=o("RoFormerTokenizer"),qto=o(" or "),gB=a("a"),Nto=o("RoFormerTokenizerFast"),jto=o(" (RoFormer model)"),Dto=l(),qg=a("li"),cte=a("strong"),Gto=o("speech_to_text"),Oto=o(" \u2014 "),hB=a("a"),Vto=o("Speech2TextTokenizer"),Xto=o(" (Speech2Text model)"),zto=l(),Ng=a("li"),fte=a("strong"),Qto=o("speech_to_text_2"),Wto=o(" \u2014 "),pB=a("a"),Hto=o("Speech2Text2Tokenizer"),Uto=o(" (Speech2Text2 model)"),Jto=l(),Cs=a("li"),mte=a("strong"),Yto=o("splinter"),Kto=o(" \u2014 "),uB=a("a"),Zto=o("SplinterTokenizer"),eao=o(" or "),_B=a("a"),oao=o("SplinterTokenizerFast"),rao=o(" (Splinter model)"),tao=l(),ws=a("li"),gte=a("strong"),aao=o("squeezebert"),nao=o(" \u2014 "),bB=a("a"),sao=o("SqueezeBertTokenizer"),lao=o(" or "),vB=a("a"),iao=o("SqueezeBertTokenizerFast"),dao=o(" (SqueezeBERT model)"),cao=l(),As=a("li"),hte=a("strong"),fao=o("t5"),mao=o(" \u2014 "),FB=a("a"),gao=o("T5Tokenizer"),hao=o(" or "),TB=a("a"),pao=o("T5TokenizerFast"),uao=o(" (T5 model)"),_ao=l(),jg=a("li"),pte=a("strong"),bao=o("tapas"),vao=o(" \u2014 "),MB=a("a"),Fao=o("TapasTokenizer"),Tao=o(" (TAPAS model)"),Mao=l(),Dg=a("li"),ute=a("strong"),Eao=o("tapex"),Cao=o(" \u2014 "),EB=a("a"),wao=o("TapexTokenizer"),Aao=o(" (TAPEX model)"),yao=l(),Gg=a("li"),_te=a("strong"),Lao=o("transfo-xl"),xao=o(" \u2014 "),CB=a("a"),$ao=o("TransfoXLTokenizer"),kao=o(" (Transformer-XL model)"),Sao=l(),ys=a("li"),bte=a("strong"),Rao=o("visual_bert"),Bao=o(" \u2014 "),wB=a("a"),Pao=o("BertTokenizer"),Iao=o(" or "),AB=a("a"),qao=o("BertTokenizerFast"),Nao=o(" (VisualBert model)"),jao=l(),Og=a("li"),vte=a("strong"),Dao=o("wav2vec2"),Gao=o(" \u2014 "),yB=a("a"),Oao=o("Wav2Vec2CTCTokenizer"),Vao=o(" (Wav2Vec2 model)"),Xao=l(),Vg=a("li"),Fte=a("strong"),zao=o("wav2vec2_phoneme"),Qao=o(" \u2014 "),LB=a("a"),Wao=o("Wav2Vec2PhonemeCTCTokenizer"),Hao=o(" (Wav2Vec2Phoneme model)"),Uao=l(),Ls=a("li"),Tte=a("strong"),Jao=o("xglm"),Yao=o(" \u2014 "),xB=a("a"),Kao=o("XGLMTokenizer"),Zao=o(" or "),$B=a("a"),eno=o("XGLMTokenizerFast"),ono=o(" (XGLM model)"),rno=l(),Xg=a("li"),Mte=a("strong"),tno=o("xlm"),ano=o(" \u2014 "),kB=a("a"),nno=o("XLMTokenizer"),sno=o(" (XLM model)"),lno=l(),zg=a("li"),Ete=a("strong"),ino=o("xlm-prophetnet"),dno=o(" \u2014 "),SB=a("a"),cno=o("XLMProphetNetTokenizer"),fno=o(" (XLMProphetNet model)"),mno=l(),xs=a("li"),Cte=a("strong"),gno=o("xlm-roberta"),hno=o(" \u2014 "),RB=a("a"),pno=o("XLMRobertaTokenizer"),uno=o(" or "),BB=a("a"),_no=o("XLMRobertaTokenizerFast"),bno=o(" (XLM-RoBERTa model)"),vno=l(),$s=a("li"),wte=a("strong"),Fno=o("xlm-roberta-xl"),Tno=o(" \u2014 "),PB=a("a"),Mno=o("RobertaTokenizer"),Eno=o(" or "),IB=a("a"),Cno=o("RobertaTokenizerFast"),wno=o(" (XLM-RoBERTa-XL model)"),Ano=l(),ks=a("li"),Ate=a("strong"),yno=o("xlnet"),Lno=o(" \u2014 "),qB=a("a"),xno=o("XLNetTokenizer"),$no=o(" or "),NB=a("a"),kno=o("XLNetTokenizerFast"),Sno=o(" (XLNet model)"),Rno=l(),Ss=a("li"),yte=a("strong"),Bno=o("yoso"),Pno=o(" \u2014 "),jB=a("a"),Ino=o("AlbertTokenizer"),qno=o(" or "),DB=a("a"),Nno=o("AlbertTokenizerFast"),jno=o(" (YOSO model)"),Dno=l(),F(Qg.$$.fragment),Gno=l(),Wg=a("div"),F(tA.$$.fragment),Ono=l(),Lte=a("p"),Vno=o("Register a new tokenizer in this mapping."),FPe=l(),vi=a("h2"),Hg=a("a"),xte=a("span"),F(aA.$$.fragment),Xno=l(),$te=a("span"),zno=o("AutoFeatureExtractor"),TPe=l(),Ao=a("div"),F(nA.$$.fragment),Qno=l(),sA=a("p"),Wno=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),GB=a("a"),Hno=o("AutoFeatureExtractor.from_pretrained()"),Uno=o(" class method."),Jno=l(),lA=a("p"),Yno=o("This class cannot be instantiated directly using "),kte=a("code"),Kno=o("__init__()"),Zno=o(" (throws an error)."),eso=l(),Qe=a("div"),F(iA.$$.fragment),oso=l(),Ste=a("p"),rso=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),tso=l(),wa=a("p"),aso=o("The feature extractor class to instantiate is selected based on the "),Rte=a("code"),nso=o("model_type"),sso=o(` property of the config object
(either passed as an argument or loaded from `),Bte=a("code"),lso=o("pretrained_model_name_or_path"),iso=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Pte=a("code"),dso=o("pretrained_model_name_or_path"),cso=o(":"),fso=l(),te=a("ul"),Ug=a("li"),Ite=a("strong"),mso=o("beit"),gso=o(" \u2014 "),OB=a("a"),hso=o("BeitFeatureExtractor"),pso=o(" (BEiT model)"),uso=l(),Jg=a("li"),qte=a("strong"),_so=o("clip"),bso=o(" \u2014 "),VB=a("a"),vso=o("CLIPFeatureExtractor"),Fso=o(" (CLIP model)"),Tso=l(),Yg=a("li"),Nte=a("strong"),Mso=o("convnext"),Eso=o(" \u2014 "),XB=a("a"),Cso=o("ConvNextFeatureExtractor"),wso=o(" (ConvNext model)"),Aso=l(),Kg=a("li"),jte=a("strong"),yso=o("data2vec-audio"),Lso=o(" \u2014 "),zB=a("a"),xso=o("Wav2Vec2FeatureExtractor"),$so=o(" (Data2VecAudio model)"),kso=l(),Zg=a("li"),Dte=a("strong"),Sso=o("data2vec-vision"),Rso=o(" \u2014 "),QB=a("a"),Bso=o("BeitFeatureExtractor"),Pso=o(" (Data2VecVision model)"),Iso=l(),eh=a("li"),Gte=a("strong"),qso=o("deit"),Nso=o(" \u2014 "),WB=a("a"),jso=o("DeiTFeatureExtractor"),Dso=o(" (DeiT model)"),Gso=l(),oh=a("li"),Ote=a("strong"),Oso=o("detr"),Vso=o(" \u2014 "),HB=a("a"),Xso=o("DetrFeatureExtractor"),zso=o(" (DETR model)"),Qso=l(),rh=a("li"),Vte=a("strong"),Wso=o("dpt"),Hso=o(" \u2014 "),UB=a("a"),Uso=o("DPTFeatureExtractor"),Jso=o(" (DPT model)"),Yso=l(),th=a("li"),Xte=a("strong"),Kso=o("glpn"),Zso=o(" \u2014 "),JB=a("a"),elo=o("GLPNFeatureExtractor"),olo=o(" (GLPN model)"),rlo=l(),ah=a("li"),zte=a("strong"),tlo=o("hubert"),alo=o(" \u2014 "),YB=a("a"),nlo=o("Wav2Vec2FeatureExtractor"),slo=o(" (Hubert model)"),llo=l(),nh=a("li"),Qte=a("strong"),ilo=o("layoutlmv2"),dlo=o(" \u2014 "),KB=a("a"),clo=o("LayoutLMv2FeatureExtractor"),flo=o(" (LayoutLMv2 model)"),mlo=l(),sh=a("li"),Wte=a("strong"),glo=o("maskformer"),hlo=o(" \u2014 "),ZB=a("a"),plo=o("MaskFormerFeatureExtractor"),ulo=o(" (MaskFormer model)"),_lo=l(),lh=a("li"),Hte=a("strong"),blo=o("perceiver"),vlo=o(" \u2014 "),eP=a("a"),Flo=o("PerceiverFeatureExtractor"),Tlo=o(" (Perceiver model)"),Mlo=l(),ih=a("li"),Ute=a("strong"),Elo=o("poolformer"),Clo=o(" \u2014 "),oP=a("a"),wlo=o("PoolFormerFeatureExtractor"),Alo=o(" (PoolFormer model)"),ylo=l(),dh=a("li"),Jte=a("strong"),Llo=o("regnet"),xlo=o(" \u2014 "),rP=a("a"),$lo=o("ConvNextFeatureExtractor"),klo=o(" (RegNet model)"),Slo=l(),ch=a("li"),Yte=a("strong"),Rlo=o("resnet"),Blo=o(" \u2014 "),tP=a("a"),Plo=o("ConvNextFeatureExtractor"),Ilo=o(" (ResNet model)"),qlo=l(),fh=a("li"),Kte=a("strong"),Nlo=o("segformer"),jlo=o(" \u2014 "),aP=a("a"),Dlo=o("SegformerFeatureExtractor"),Glo=o(" (SegFormer model)"),Olo=l(),mh=a("li"),Zte=a("strong"),Vlo=o("speech_to_text"),Xlo=o(" \u2014 "),nP=a("a"),zlo=o("Speech2TextFeatureExtractor"),Qlo=o(" (Speech2Text model)"),Wlo=l(),gh=a("li"),eae=a("strong"),Hlo=o("swin"),Ulo=o(" \u2014 "),sP=a("a"),Jlo=o("ViTFeatureExtractor"),Ylo=o(" (Swin model)"),Klo=l(),hh=a("li"),oae=a("strong"),Zlo=o("van"),eio=o(" \u2014 "),lP=a("a"),oio=o("ConvNextFeatureExtractor"),rio=o(" (VAN model)"),tio=l(),ph=a("li"),rae=a("strong"),aio=o("vit"),nio=o(" \u2014 "),iP=a("a"),sio=o("ViTFeatureExtractor"),lio=o(" (ViT model)"),iio=l(),uh=a("li"),tae=a("strong"),dio=o("vit_mae"),cio=o(" \u2014 "),dP=a("a"),fio=o("ViTFeatureExtractor"),mio=o(" (ViTMAE model)"),gio=l(),_h=a("li"),aae=a("strong"),hio=o("wav2vec2"),pio=o(" \u2014 "),cP=a("a"),uio=o("Wav2Vec2FeatureExtractor"),_io=o(" (Wav2Vec2 model)"),bio=l(),bh=a("li"),nae=a("strong"),vio=o("yolos"),Fio=o(" \u2014 "),fP=a("a"),Tio=o("YolosFeatureExtractor"),Mio=o(" (YOLOS model)"),Eio=l(),F(vh.$$.fragment),Cio=l(),F(Fh.$$.fragment),wio=l(),Th=a("div"),F(dA.$$.fragment),Aio=l(),sae=a("p"),yio=o("Register a new feature extractor for this class."),MPe=l(),Fi=a("h2"),Mh=a("a"),lae=a("span"),F(cA.$$.fragment),Lio=l(),iae=a("span"),xio=o("AutoProcessor"),EPe=l(),yo=a("div"),F(fA.$$.fragment),$io=l(),mA=a("p"),kio=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),mP=a("a"),Sio=o("AutoProcessor.from_pretrained()"),Rio=o(" class method."),Bio=l(),gA=a("p"),Pio=o("This class cannot be instantiated directly using "),dae=a("code"),Iio=o("__init__()"),qio=o(" (throws an error)."),Nio=l(),We=a("div"),F(hA.$$.fragment),jio=l(),cae=a("p"),Dio=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Gio=l(),Ti=a("p"),Oio=o("The processor class to instantiate is selected based on the "),fae=a("code"),Vio=o("model_type"),Xio=o(` property of the config object (either
passed as an argument or loaded from `),mae=a("code"),zio=o("pretrained_model_name_or_path"),Qio=o(" if possible):"),Wio=l(),be=a("ul"),Eh=a("li"),gae=a("strong"),Hio=o("clip"),Uio=o(" \u2014 "),gP=a("a"),Jio=o("CLIPProcessor"),Yio=o(" (CLIP model)"),Kio=l(),Ch=a("li"),hae=a("strong"),Zio=o("layoutlmv2"),edo=o(" \u2014 "),hP=a("a"),odo=o("LayoutLMv2Processor"),rdo=o(" (LayoutLMv2 model)"),tdo=l(),wh=a("li"),pae=a("strong"),ado=o("layoutxlm"),ndo=o(" \u2014 "),pP=a("a"),sdo=o("LayoutXLMProcessor"),ldo=o(" (LayoutXLM model)"),ido=l(),Ah=a("li"),uae=a("strong"),ddo=o("sew"),cdo=o(" \u2014 "),uP=a("a"),fdo=o("Wav2Vec2Processor"),mdo=o(" (SEW model)"),gdo=l(),yh=a("li"),_ae=a("strong"),hdo=o("sew-d"),pdo=o(" \u2014 "),_P=a("a"),udo=o("Wav2Vec2Processor"),_do=o(" (SEW-D model)"),bdo=l(),Lh=a("li"),bae=a("strong"),vdo=o("speech_to_text"),Fdo=o(" \u2014 "),bP=a("a"),Tdo=o("Speech2TextProcessor"),Mdo=o(" (Speech2Text model)"),Edo=l(),xh=a("li"),vae=a("strong"),Cdo=o("speech_to_text_2"),wdo=o(" \u2014 "),vP=a("a"),Ado=o("Speech2Text2Processor"),ydo=o(" (Speech2Text2 model)"),Ldo=l(),$h=a("li"),Fae=a("strong"),xdo=o("trocr"),$do=o(" \u2014 "),FP=a("a"),kdo=o("TrOCRProcessor"),Sdo=o(" (TrOCR model)"),Rdo=l(),kh=a("li"),Tae=a("strong"),Bdo=o("unispeech"),Pdo=o(" \u2014 "),TP=a("a"),Ido=o("Wav2Vec2Processor"),qdo=o(" (UniSpeech model)"),Ndo=l(),Sh=a("li"),Mae=a("strong"),jdo=o("unispeech-sat"),Ddo=o(" \u2014 "),MP=a("a"),Gdo=o("Wav2Vec2Processor"),Odo=o(" (UniSpeechSat model)"),Vdo=l(),Rh=a("li"),Eae=a("strong"),Xdo=o("vilt"),zdo=o(" \u2014 "),EP=a("a"),Qdo=o("ViltProcessor"),Wdo=o(" (ViLT model)"),Hdo=l(),Bh=a("li"),Cae=a("strong"),Udo=o("vision-text-dual-encoder"),Jdo=o(" \u2014 "),CP=a("a"),Ydo=o("VisionTextDualEncoderProcessor"),Kdo=o(" (VisionTextDualEncoder model)"),Zdo=l(),Ph=a("li"),wae=a("strong"),eco=o("wav2vec2"),oco=o(" \u2014 "),wP=a("a"),rco=o("Wav2Vec2Processor"),tco=o(" (Wav2Vec2 model)"),aco=l(),Ih=a("li"),Aae=a("strong"),nco=o("wavlm"),sco=o(" \u2014 "),AP=a("a"),lco=o("Wav2Vec2Processor"),ico=o(" (WavLM model)"),dco=l(),F(qh.$$.fragment),cco=l(),F(Nh.$$.fragment),fco=l(),jh=a("div"),F(pA.$$.fragment),mco=l(),yae=a("p"),gco=o("Register a new processor for this class."),CPe=l(),Mi=a("h2"),Dh=a("a"),Lae=a("span"),F(uA.$$.fragment),hco=l(),xae=a("span"),pco=o("AutoModel"),wPe=l(),Lo=a("div"),F(_A.$$.fragment),uco=l(),Ei=a("p"),_co=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),yP=a("a"),bco=o("from_pretrained()"),vco=o(" class method or the "),LP=a("a"),Fco=o("from_config()"),Tco=o(` class
method.`),Mco=l(),bA=a("p"),Eco=o("This class cannot be instantiated directly using "),$ae=a("code"),Cco=o("__init__()"),wco=o(" (throws an error)."),Aco=l(),ot=a("div"),F(vA.$$.fragment),yco=l(),kae=a("p"),Lco=o("Instantiates one of the base model classes of the library from a configuration."),xco=l(),Ci=a("p"),$co=o(`Note:
Loading a model from its configuration file does `),Sae=a("strong"),kco=o("not"),Sco=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xP=a("a"),Rco=o("from_pretrained()"),Bco=o(" to load the model weights."),Pco=l(),F(Gh.$$.fragment),Ico=l(),He=a("div"),F(FA.$$.fragment),qco=l(),Rae=a("p"),Nco=o("Instantiate one of the base model classes of the library from a pretrained model."),jco=l(),Aa=a("p"),Dco=o("The model class to instantiate is selected based on the "),Bae=a("code"),Gco=o("model_type"),Oco=o(` property of the config object (either
passed as an argument or loaded from `),Pae=a("code"),Vco=o("pretrained_model_name_or_path"),Xco=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iae=a("code"),zco=o("pretrained_model_name_or_path"),Qco=o(":"),Wco=l(),x=a("ul"),Oh=a("li"),qae=a("strong"),Hco=o("albert"),Uco=o(" \u2014 "),$P=a("a"),Jco=o("AlbertModel"),Yco=o(" (ALBERT model)"),Kco=l(),Vh=a("li"),Nae=a("strong"),Zco=o("bart"),efo=o(" \u2014 "),kP=a("a"),ofo=o("BartModel"),rfo=o(" (BART model)"),tfo=l(),Xh=a("li"),jae=a("strong"),afo=o("beit"),nfo=o(" \u2014 "),SP=a("a"),sfo=o("BeitModel"),lfo=o(" (BEiT model)"),ifo=l(),zh=a("li"),Dae=a("strong"),dfo=o("bert"),cfo=o(" \u2014 "),RP=a("a"),ffo=o("BertModel"),mfo=o(" (BERT model)"),gfo=l(),Qh=a("li"),Gae=a("strong"),hfo=o("bert-generation"),pfo=o(" \u2014 "),BP=a("a"),ufo=o("BertGenerationEncoder"),_fo=o(" (Bert Generation model)"),bfo=l(),Wh=a("li"),Oae=a("strong"),vfo=o("big_bird"),Ffo=o(" \u2014 "),PP=a("a"),Tfo=o("BigBirdModel"),Mfo=o(" (BigBird model)"),Efo=l(),Hh=a("li"),Vae=a("strong"),Cfo=o("bigbird_pegasus"),wfo=o(" \u2014 "),IP=a("a"),Afo=o("BigBirdPegasusModel"),yfo=o(" (BigBirdPegasus model)"),Lfo=l(),Uh=a("li"),Xae=a("strong"),xfo=o("blenderbot"),$fo=o(" \u2014 "),qP=a("a"),kfo=o("BlenderbotModel"),Sfo=o(" (Blenderbot model)"),Rfo=l(),Jh=a("li"),zae=a("strong"),Bfo=o("blenderbot-small"),Pfo=o(" \u2014 "),NP=a("a"),Ifo=o("BlenderbotSmallModel"),qfo=o(" (BlenderbotSmall model)"),Nfo=l(),Yh=a("li"),Qae=a("strong"),jfo=o("camembert"),Dfo=o(" \u2014 "),jP=a("a"),Gfo=o("CamembertModel"),Ofo=o(" (CamemBERT model)"),Vfo=l(),Kh=a("li"),Wae=a("strong"),Xfo=o("canine"),zfo=o(" \u2014 "),DP=a("a"),Qfo=o("CanineModel"),Wfo=o(" (Canine model)"),Hfo=l(),Zh=a("li"),Hae=a("strong"),Ufo=o("clip"),Jfo=o(" \u2014 "),GP=a("a"),Yfo=o("CLIPModel"),Kfo=o(" (CLIP model)"),Zfo=l(),ep=a("li"),Uae=a("strong"),emo=o("convbert"),omo=o(" \u2014 "),OP=a("a"),rmo=o("ConvBertModel"),tmo=o(" (ConvBERT model)"),amo=l(),op=a("li"),Jae=a("strong"),nmo=o("convnext"),smo=o(" \u2014 "),VP=a("a"),lmo=o("ConvNextModel"),imo=o(" (ConvNext model)"),dmo=l(),rp=a("li"),Yae=a("strong"),cmo=o("ctrl"),fmo=o(" \u2014 "),XP=a("a"),mmo=o("CTRLModel"),gmo=o(" (CTRL model)"),hmo=l(),tp=a("li"),Kae=a("strong"),pmo=o("data2vec-audio"),umo=o(" \u2014 "),zP=a("a"),_mo=o("Data2VecAudioModel"),bmo=o(" (Data2VecAudio model)"),vmo=l(),ap=a("li"),Zae=a("strong"),Fmo=o("data2vec-text"),Tmo=o(" \u2014 "),QP=a("a"),Mmo=o("Data2VecTextModel"),Emo=o(" (Data2VecText model)"),Cmo=l(),np=a("li"),ene=a("strong"),wmo=o("data2vec-vision"),Amo=o(" \u2014 "),WP=a("a"),ymo=o("Data2VecVisionModel"),Lmo=o(" (Data2VecVision model)"),xmo=l(),sp=a("li"),one=a("strong"),$mo=o("deberta"),kmo=o(" \u2014 "),HP=a("a"),Smo=o("DebertaModel"),Rmo=o(" (DeBERTa model)"),Bmo=l(),lp=a("li"),rne=a("strong"),Pmo=o("deberta-v2"),Imo=o(" \u2014 "),UP=a("a"),qmo=o("DebertaV2Model"),Nmo=o(" (DeBERTa-v2 model)"),jmo=l(),ip=a("li"),tne=a("strong"),Dmo=o("decision_transformer"),Gmo=o(" \u2014 "),JP=a("a"),Omo=o("DecisionTransformerModel"),Vmo=o(" (Decision Transformer model)"),Xmo=l(),dp=a("li"),ane=a("strong"),zmo=o("deit"),Qmo=o(" \u2014 "),YP=a("a"),Wmo=o("DeiTModel"),Hmo=o(" (DeiT model)"),Umo=l(),cp=a("li"),nne=a("strong"),Jmo=o("detr"),Ymo=o(" \u2014 "),KP=a("a"),Kmo=o("DetrModel"),Zmo=o(" (DETR model)"),ego=l(),fp=a("li"),sne=a("strong"),ogo=o("distilbert"),rgo=o(" \u2014 "),ZP=a("a"),tgo=o("DistilBertModel"),ago=o(" (DistilBERT model)"),ngo=l(),mp=a("li"),lne=a("strong"),sgo=o("dpr"),lgo=o(" \u2014 "),eI=a("a"),igo=o("DPRQuestionEncoder"),dgo=o(" (DPR model)"),cgo=l(),gp=a("li"),ine=a("strong"),fgo=o("dpt"),mgo=o(" \u2014 "),oI=a("a"),ggo=o("DPTModel"),hgo=o(" (DPT model)"),pgo=l(),hp=a("li"),dne=a("strong"),ugo=o("electra"),_go=o(" \u2014 "),rI=a("a"),bgo=o("ElectraModel"),vgo=o(" (ELECTRA model)"),Fgo=l(),pp=a("li"),cne=a("strong"),Tgo=o("flaubert"),Mgo=o(" \u2014 "),tI=a("a"),Ego=o("FlaubertModel"),Cgo=o(" (FlauBERT model)"),wgo=l(),up=a("li"),fne=a("strong"),Ago=o("fnet"),ygo=o(" \u2014 "),aI=a("a"),Lgo=o("FNetModel"),xgo=o(" (FNet model)"),$go=l(),_p=a("li"),mne=a("strong"),kgo=o("fsmt"),Sgo=o(" \u2014 "),nI=a("a"),Rgo=o("FSMTModel"),Bgo=o(" (FairSeq Machine-Translation model)"),Pgo=l(),Rs=a("li"),gne=a("strong"),Igo=o("funnel"),qgo=o(" \u2014 "),sI=a("a"),Ngo=o("FunnelModel"),jgo=o(" or "),lI=a("a"),Dgo=o("FunnelBaseModel"),Ggo=o(" (Funnel Transformer model)"),Ogo=l(),bp=a("li"),hne=a("strong"),Vgo=o("glpn"),Xgo=o(" \u2014 "),iI=a("a"),zgo=o("GLPNModel"),Qgo=o(" (GLPN model)"),Wgo=l(),vp=a("li"),pne=a("strong"),Hgo=o("gpt2"),Ugo=o(" \u2014 "),dI=a("a"),Jgo=o("GPT2Model"),Ygo=o(" (OpenAI GPT-2 model)"),Kgo=l(),Fp=a("li"),une=a("strong"),Zgo=o("gpt_neo"),eho=o(" \u2014 "),cI=a("a"),oho=o("GPTNeoModel"),rho=o(" (GPT Neo model)"),tho=l(),Tp=a("li"),_ne=a("strong"),aho=o("gptj"),nho=o(" \u2014 "),fI=a("a"),sho=o("GPTJModel"),lho=o(" (GPT-J model)"),iho=l(),Mp=a("li"),bne=a("strong"),dho=o("hubert"),cho=o(" \u2014 "),mI=a("a"),fho=o("HubertModel"),mho=o(" (Hubert model)"),gho=l(),Ep=a("li"),vne=a("strong"),hho=o("ibert"),pho=o(" \u2014 "),gI=a("a"),uho=o("IBertModel"),_ho=o(" (I-BERT model)"),bho=l(),Cp=a("li"),Fne=a("strong"),vho=o("imagegpt"),Fho=o(" \u2014 "),hI=a("a"),Tho=o("ImageGPTModel"),Mho=o(" (ImageGPT model)"),Eho=l(),wp=a("li"),Tne=a("strong"),Cho=o("layoutlm"),who=o(" \u2014 "),pI=a("a"),Aho=o("LayoutLMModel"),yho=o(" (LayoutLM model)"),Lho=l(),Ap=a("li"),Mne=a("strong"),xho=o("layoutlmv2"),$ho=o(" \u2014 "),uI=a("a"),kho=o("LayoutLMv2Model"),Sho=o(" (LayoutLMv2 model)"),Rho=l(),yp=a("li"),Ene=a("strong"),Bho=o("led"),Pho=o(" \u2014 "),_I=a("a"),Iho=o("LEDModel"),qho=o(" (LED model)"),Nho=l(),Lp=a("li"),Cne=a("strong"),jho=o("longformer"),Dho=o(" \u2014 "),bI=a("a"),Gho=o("LongformerModel"),Oho=o(" (Longformer model)"),Vho=l(),xp=a("li"),wne=a("strong"),Xho=o("luke"),zho=o(" \u2014 "),vI=a("a"),Qho=o("LukeModel"),Who=o(" (LUKE model)"),Hho=l(),$p=a("li"),Ane=a("strong"),Uho=o("lxmert"),Jho=o(" \u2014 "),FI=a("a"),Yho=o("LxmertModel"),Kho=o(" (LXMERT model)"),Zho=l(),kp=a("li"),yne=a("strong"),epo=o("m2m_100"),opo=o(" \u2014 "),TI=a("a"),rpo=o("M2M100Model"),tpo=o(" (M2M100 model)"),apo=l(),Sp=a("li"),Lne=a("strong"),npo=o("marian"),spo=o(" \u2014 "),MI=a("a"),lpo=o("MarianModel"),ipo=o(" (Marian model)"),dpo=l(),Rp=a("li"),xne=a("strong"),cpo=o("maskformer"),fpo=o(" \u2014 "),EI=a("a"),mpo=o("MaskFormerModel"),gpo=o(" (MaskFormer model)"),hpo=l(),Bp=a("li"),$ne=a("strong"),ppo=o("mbart"),upo=o(" \u2014 "),CI=a("a"),_po=o("MBartModel"),bpo=o(" (mBART model)"),vpo=l(),Pp=a("li"),kne=a("strong"),Fpo=o("megatron-bert"),Tpo=o(" \u2014 "),wI=a("a"),Mpo=o("MegatronBertModel"),Epo=o(" (MegatronBert model)"),Cpo=l(),Ip=a("li"),Sne=a("strong"),wpo=o("mobilebert"),Apo=o(" \u2014 "),AI=a("a"),ypo=o("MobileBertModel"),Lpo=o(" (MobileBERT model)"),xpo=l(),qp=a("li"),Rne=a("strong"),$po=o("mpnet"),kpo=o(" \u2014 "),yI=a("a"),Spo=o("MPNetModel"),Rpo=o(" (MPNet model)"),Bpo=l(),Np=a("li"),Bne=a("strong"),Ppo=o("mt5"),Ipo=o(" \u2014 "),LI=a("a"),qpo=o("MT5Model"),Npo=o(" (mT5 model)"),jpo=l(),jp=a("li"),Pne=a("strong"),Dpo=o("nystromformer"),Gpo=o(" \u2014 "),xI=a("a"),Opo=o("NystromformerModel"),Vpo=o(" (Nystromformer model)"),Xpo=l(),Dp=a("li"),Ine=a("strong"),zpo=o("openai-gpt"),Qpo=o(" \u2014 "),$I=a("a"),Wpo=o("OpenAIGPTModel"),Hpo=o(" (OpenAI GPT model)"),Upo=l(),Gp=a("li"),qne=a("strong"),Jpo=o("pegasus"),Ypo=o(" \u2014 "),kI=a("a"),Kpo=o("PegasusModel"),Zpo=o(" (Pegasus model)"),euo=l(),Op=a("li"),Nne=a("strong"),ouo=o("perceiver"),ruo=o(" \u2014 "),SI=a("a"),tuo=o("PerceiverModel"),auo=o(" (Perceiver model)"),nuo=l(),Vp=a("li"),jne=a("strong"),suo=o("plbart"),luo=o(" \u2014 "),RI=a("a"),iuo=o("PLBartModel"),duo=o(" (PLBart model)"),cuo=l(),Xp=a("li"),Dne=a("strong"),fuo=o("poolformer"),muo=o(" \u2014 "),BI=a("a"),guo=o("PoolFormerModel"),huo=o(" (PoolFormer model)"),puo=l(),zp=a("li"),Gne=a("strong"),uuo=o("prophetnet"),_uo=o(" \u2014 "),PI=a("a"),buo=o("ProphetNetModel"),vuo=o(" (ProphetNet model)"),Fuo=l(),Qp=a("li"),One=a("strong"),Tuo=o("qdqbert"),Muo=o(" \u2014 "),II=a("a"),Euo=o("QDQBertModel"),Cuo=o(" (QDQBert model)"),wuo=l(),Wp=a("li"),Vne=a("strong"),Auo=o("reformer"),yuo=o(" \u2014 "),qI=a("a"),Luo=o("ReformerModel"),xuo=o(" (Reformer model)"),$uo=l(),Hp=a("li"),Xne=a("strong"),kuo=o("regnet"),Suo=o(" \u2014 "),NI=a("a"),Ruo=o("RegNetModel"),Buo=o(" (RegNet model)"),Puo=l(),Up=a("li"),zne=a("strong"),Iuo=o("rembert"),quo=o(" \u2014 "),jI=a("a"),Nuo=o("RemBertModel"),juo=o(" (RemBERT model)"),Duo=l(),Jp=a("li"),Qne=a("strong"),Guo=o("resnet"),Ouo=o(" \u2014 "),DI=a("a"),Vuo=o("ResNetModel"),Xuo=o(" (ResNet model)"),zuo=l(),Yp=a("li"),Wne=a("strong"),Quo=o("retribert"),Wuo=o(" \u2014 "),GI=a("a"),Huo=o("RetriBertModel"),Uuo=o(" (RetriBERT model)"),Juo=l(),Kp=a("li"),Hne=a("strong"),Yuo=o("roberta"),Kuo=o(" \u2014 "),OI=a("a"),Zuo=o("RobertaModel"),e_o=o(" (RoBERTa model)"),o_o=l(),Zp=a("li"),Une=a("strong"),r_o=o("roformer"),t_o=o(" \u2014 "),VI=a("a"),a_o=o("RoFormerModel"),n_o=o(" (RoFormer model)"),s_o=l(),eu=a("li"),Jne=a("strong"),l_o=o("segformer"),i_o=o(" \u2014 "),XI=a("a"),d_o=o("SegformerModel"),c_o=o(" (SegFormer model)"),f_o=l(),ou=a("li"),Yne=a("strong"),m_o=o("sew"),g_o=o(" \u2014 "),zI=a("a"),h_o=o("SEWModel"),p_o=o(" (SEW model)"),u_o=l(),ru=a("li"),Kne=a("strong"),__o=o("sew-d"),b_o=o(" \u2014 "),QI=a("a"),v_o=o("SEWDModel"),F_o=o(" (SEW-D model)"),T_o=l(),tu=a("li"),Zne=a("strong"),M_o=o("speech_to_text"),E_o=o(" \u2014 "),WI=a("a"),C_o=o("Speech2TextModel"),w_o=o(" (Speech2Text model)"),A_o=l(),au=a("li"),ese=a("strong"),y_o=o("splinter"),L_o=o(" \u2014 "),HI=a("a"),x_o=o("SplinterModel"),$_o=o(" (Splinter model)"),k_o=l(),nu=a("li"),ose=a("strong"),S_o=o("squeezebert"),R_o=o(" \u2014 "),UI=a("a"),B_o=o("SqueezeBertModel"),P_o=o(" (SqueezeBERT model)"),I_o=l(),su=a("li"),rse=a("strong"),q_o=o("swin"),N_o=o(" \u2014 "),JI=a("a"),j_o=o("SwinModel"),D_o=o(" (Swin model)"),G_o=l(),lu=a("li"),tse=a("strong"),O_o=o("t5"),V_o=o(" \u2014 "),YI=a("a"),X_o=o("T5Model"),z_o=o(" (T5 model)"),Q_o=l(),iu=a("li"),ase=a("strong"),W_o=o("tapas"),H_o=o(" \u2014 "),KI=a("a"),U_o=o("TapasModel"),J_o=o(" (TAPAS model)"),Y_o=l(),du=a("li"),nse=a("strong"),K_o=o("transfo-xl"),Z_o=o(" \u2014 "),ZI=a("a"),e1o=o("TransfoXLModel"),o1o=o(" (Transformer-XL model)"),r1o=l(),cu=a("li"),sse=a("strong"),t1o=o("unispeech"),a1o=o(" \u2014 "),eq=a("a"),n1o=o("UniSpeechModel"),s1o=o(" (UniSpeech model)"),l1o=l(),fu=a("li"),lse=a("strong"),i1o=o("unispeech-sat"),d1o=o(" \u2014 "),oq=a("a"),c1o=o("UniSpeechSatModel"),f1o=o(" (UniSpeechSat model)"),m1o=l(),mu=a("li"),ise=a("strong"),g1o=o("van"),h1o=o(" \u2014 "),rq=a("a"),p1o=o("VanModel"),u1o=o(" (VAN model)"),_1o=l(),gu=a("li"),dse=a("strong"),b1o=o("vilt"),v1o=o(" \u2014 "),tq=a("a"),F1o=o("ViltModel"),T1o=o(" (ViLT model)"),M1o=l(),hu=a("li"),cse=a("strong"),E1o=o("vision-text-dual-encoder"),C1o=o(" \u2014 "),aq=a("a"),w1o=o("VisionTextDualEncoderModel"),A1o=o(" (VisionTextDualEncoder model)"),y1o=l(),pu=a("li"),fse=a("strong"),L1o=o("visual_bert"),x1o=o(" \u2014 "),nq=a("a"),$1o=o("VisualBertModel"),k1o=o(" (VisualBert model)"),S1o=l(),uu=a("li"),mse=a("strong"),R1o=o("vit"),B1o=o(" \u2014 "),sq=a("a"),P1o=o("ViTModel"),I1o=o(" (ViT model)"),q1o=l(),_u=a("li"),gse=a("strong"),N1o=o("vit_mae"),j1o=o(" \u2014 "),lq=a("a"),D1o=o("ViTMAEModel"),G1o=o(" (ViTMAE model)"),O1o=l(),bu=a("li"),hse=a("strong"),V1o=o("wav2vec2"),X1o=o(" \u2014 "),iq=a("a"),z1o=o("Wav2Vec2Model"),Q1o=o(" (Wav2Vec2 model)"),W1o=l(),vu=a("li"),pse=a("strong"),H1o=o("wavlm"),U1o=o(" \u2014 "),dq=a("a"),J1o=o("WavLMModel"),Y1o=o(" (WavLM model)"),K1o=l(),Fu=a("li"),use=a("strong"),Z1o=o("xglm"),e8o=o(" \u2014 "),cq=a("a"),o8o=o("XGLMModel"),r8o=o(" (XGLM model)"),t8o=l(),Tu=a("li"),_se=a("strong"),a8o=o("xlm"),n8o=o(" \u2014 "),fq=a("a"),s8o=o("XLMModel"),l8o=o(" (XLM model)"),i8o=l(),Mu=a("li"),bse=a("strong"),d8o=o("xlm-prophetnet"),c8o=o(" \u2014 "),mq=a("a"),f8o=o("XLMProphetNetModel"),m8o=o(" (XLMProphetNet model)"),g8o=l(),Eu=a("li"),vse=a("strong"),h8o=o("xlm-roberta"),p8o=o(" \u2014 "),gq=a("a"),u8o=o("XLMRobertaModel"),_8o=o(" (XLM-RoBERTa model)"),b8o=l(),Cu=a("li"),Fse=a("strong"),v8o=o("xlm-roberta-xl"),F8o=o(" \u2014 "),hq=a("a"),T8o=o("XLMRobertaXLModel"),M8o=o(" (XLM-RoBERTa-XL model)"),E8o=l(),wu=a("li"),Tse=a("strong"),C8o=o("xlnet"),w8o=o(" \u2014 "),pq=a("a"),A8o=o("XLNetModel"),y8o=o(" (XLNet model)"),L8o=l(),Au=a("li"),Mse=a("strong"),x8o=o("yolos"),$8o=o(" \u2014 "),uq=a("a"),k8o=o("YolosModel"),S8o=o(" (YOLOS model)"),R8o=l(),yu=a("li"),Ese=a("strong"),B8o=o("yoso"),P8o=o(" \u2014 "),_q=a("a"),I8o=o("YosoModel"),q8o=o(" (YOSO model)"),N8o=l(),Lu=a("p"),j8o=o("The model is set in evaluation mode by default using "),Cse=a("code"),D8o=o("model.eval()"),G8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wse=a("code"),O8o=o("model.train()"),V8o=l(),F(xu.$$.fragment),APe=l(),wi=a("h2"),$u=a("a"),Ase=a("span"),F(TA.$$.fragment),X8o=l(),yse=a("span"),z8o=o("AutoModelForPreTraining"),yPe=l(),xo=a("div"),F(MA.$$.fragment),Q8o=l(),Ai=a("p"),W8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),bq=a("a"),H8o=o("from_pretrained()"),U8o=o(" class method or the "),vq=a("a"),J8o=o("from_config()"),Y8o=o(` class
method.`),K8o=l(),EA=a("p"),Z8o=o("This class cannot be instantiated directly using "),Lse=a("code"),ebo=o("__init__()"),obo=o(" (throws an error)."),rbo=l(),rt=a("div"),F(CA.$$.fragment),tbo=l(),xse=a("p"),abo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),nbo=l(),yi=a("p"),sbo=o(`Note:
Loading a model from its configuration file does `),$se=a("strong"),lbo=o("not"),ibo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fq=a("a"),dbo=o("from_pretrained()"),cbo=o(" to load the model weights."),fbo=l(),F(ku.$$.fragment),mbo=l(),Ue=a("div"),F(wA.$$.fragment),gbo=l(),kse=a("p"),hbo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),pbo=l(),ya=a("p"),ubo=o("The model class to instantiate is selected based on the "),Sse=a("code"),_bo=o("model_type"),bbo=o(` property of the config object (either
passed as an argument or loaded from `),Rse=a("code"),vbo=o("pretrained_model_name_or_path"),Fbo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bse=a("code"),Tbo=o("pretrained_model_name_or_path"),Mbo=o(":"),Ebo=l(),G=a("ul"),Su=a("li"),Pse=a("strong"),Cbo=o("albert"),wbo=o(" \u2014 "),Tq=a("a"),Abo=o("AlbertForPreTraining"),ybo=o(" (ALBERT model)"),Lbo=l(),Ru=a("li"),Ise=a("strong"),xbo=o("bart"),$bo=o(" \u2014 "),Mq=a("a"),kbo=o("BartForConditionalGeneration"),Sbo=o(" (BART model)"),Rbo=l(),Bu=a("li"),qse=a("strong"),Bbo=o("bert"),Pbo=o(" \u2014 "),Eq=a("a"),Ibo=o("BertForPreTraining"),qbo=o(" (BERT model)"),Nbo=l(),Pu=a("li"),Nse=a("strong"),jbo=o("big_bird"),Dbo=o(" \u2014 "),Cq=a("a"),Gbo=o("BigBirdForPreTraining"),Obo=o(" (BigBird model)"),Vbo=l(),Iu=a("li"),jse=a("strong"),Xbo=o("camembert"),zbo=o(" \u2014 "),wq=a("a"),Qbo=o("CamembertForMaskedLM"),Wbo=o(" (CamemBERT model)"),Hbo=l(),qu=a("li"),Dse=a("strong"),Ubo=o("ctrl"),Jbo=o(" \u2014 "),Aq=a("a"),Ybo=o("CTRLLMHeadModel"),Kbo=o(" (CTRL model)"),Zbo=l(),Nu=a("li"),Gse=a("strong"),e2o=o("data2vec-text"),o2o=o(" \u2014 "),yq=a("a"),r2o=o("Data2VecTextForMaskedLM"),t2o=o(" (Data2VecText model)"),a2o=l(),ju=a("li"),Ose=a("strong"),n2o=o("deberta"),s2o=o(" \u2014 "),Lq=a("a"),l2o=o("DebertaForMaskedLM"),i2o=o(" (DeBERTa model)"),d2o=l(),Du=a("li"),Vse=a("strong"),c2o=o("deberta-v2"),f2o=o(" \u2014 "),xq=a("a"),m2o=o("DebertaV2ForMaskedLM"),g2o=o(" (DeBERTa-v2 model)"),h2o=l(),Gu=a("li"),Xse=a("strong"),p2o=o("distilbert"),u2o=o(" \u2014 "),$q=a("a"),_2o=o("DistilBertForMaskedLM"),b2o=o(" (DistilBERT model)"),v2o=l(),Ou=a("li"),zse=a("strong"),F2o=o("electra"),T2o=o(" \u2014 "),kq=a("a"),M2o=o("ElectraForPreTraining"),E2o=o(" (ELECTRA model)"),C2o=l(),Vu=a("li"),Qse=a("strong"),w2o=o("flaubert"),A2o=o(" \u2014 "),Sq=a("a"),y2o=o("FlaubertWithLMHeadModel"),L2o=o(" (FlauBERT model)"),x2o=l(),Xu=a("li"),Wse=a("strong"),$2o=o("fnet"),k2o=o(" \u2014 "),Rq=a("a"),S2o=o("FNetForPreTraining"),R2o=o(" (FNet model)"),B2o=l(),zu=a("li"),Hse=a("strong"),P2o=o("fsmt"),I2o=o(" \u2014 "),Bq=a("a"),q2o=o("FSMTForConditionalGeneration"),N2o=o(" (FairSeq Machine-Translation model)"),j2o=l(),Qu=a("li"),Use=a("strong"),D2o=o("funnel"),G2o=o(" \u2014 "),Pq=a("a"),O2o=o("FunnelForPreTraining"),V2o=o(" (Funnel Transformer model)"),X2o=l(),Wu=a("li"),Jse=a("strong"),z2o=o("gpt2"),Q2o=o(" \u2014 "),Iq=a("a"),W2o=o("GPT2LMHeadModel"),H2o=o(" (OpenAI GPT-2 model)"),U2o=l(),Hu=a("li"),Yse=a("strong"),J2o=o("ibert"),Y2o=o(" \u2014 "),qq=a("a"),K2o=o("IBertForMaskedLM"),Z2o=o(" (I-BERT model)"),evo=l(),Uu=a("li"),Kse=a("strong"),ovo=o("layoutlm"),rvo=o(" \u2014 "),Nq=a("a"),tvo=o("LayoutLMForMaskedLM"),avo=o(" (LayoutLM model)"),nvo=l(),Ju=a("li"),Zse=a("strong"),svo=o("longformer"),lvo=o(" \u2014 "),jq=a("a"),ivo=o("LongformerForMaskedLM"),dvo=o(" (Longformer model)"),cvo=l(),Yu=a("li"),ele=a("strong"),fvo=o("lxmert"),mvo=o(" \u2014 "),Dq=a("a"),gvo=o("LxmertForPreTraining"),hvo=o(" (LXMERT model)"),pvo=l(),Ku=a("li"),ole=a("strong"),uvo=o("megatron-bert"),_vo=o(" \u2014 "),Gq=a("a"),bvo=o("MegatronBertForPreTraining"),vvo=o(" (MegatronBert model)"),Fvo=l(),Zu=a("li"),rle=a("strong"),Tvo=o("mobilebert"),Mvo=o(" \u2014 "),Oq=a("a"),Evo=o("MobileBertForPreTraining"),Cvo=o(" (MobileBERT model)"),wvo=l(),e_=a("li"),tle=a("strong"),Avo=o("mpnet"),yvo=o(" \u2014 "),Vq=a("a"),Lvo=o("MPNetForMaskedLM"),xvo=o(" (MPNet model)"),$vo=l(),o_=a("li"),ale=a("strong"),kvo=o("openai-gpt"),Svo=o(" \u2014 "),Xq=a("a"),Rvo=o("OpenAIGPTLMHeadModel"),Bvo=o(" (OpenAI GPT model)"),Pvo=l(),r_=a("li"),nle=a("strong"),Ivo=o("retribert"),qvo=o(" \u2014 "),zq=a("a"),Nvo=o("RetriBertModel"),jvo=o(" (RetriBERT model)"),Dvo=l(),t_=a("li"),sle=a("strong"),Gvo=o("roberta"),Ovo=o(" \u2014 "),Qq=a("a"),Vvo=o("RobertaForMaskedLM"),Xvo=o(" (RoBERTa model)"),zvo=l(),a_=a("li"),lle=a("strong"),Qvo=o("squeezebert"),Wvo=o(" \u2014 "),Wq=a("a"),Hvo=o("SqueezeBertForMaskedLM"),Uvo=o(" (SqueezeBERT model)"),Jvo=l(),n_=a("li"),ile=a("strong"),Yvo=o("t5"),Kvo=o(" \u2014 "),Hq=a("a"),Zvo=o("T5ForConditionalGeneration"),eFo=o(" (T5 model)"),oFo=l(),s_=a("li"),dle=a("strong"),rFo=o("tapas"),tFo=o(" \u2014 "),Uq=a("a"),aFo=o("TapasForMaskedLM"),nFo=o(" (TAPAS model)"),sFo=l(),l_=a("li"),cle=a("strong"),lFo=o("transfo-xl"),iFo=o(" \u2014 "),Jq=a("a"),dFo=o("TransfoXLLMHeadModel"),cFo=o(" (Transformer-XL model)"),fFo=l(),i_=a("li"),fle=a("strong"),mFo=o("unispeech"),gFo=o(" \u2014 "),Yq=a("a"),hFo=o("UniSpeechForPreTraining"),pFo=o(" (UniSpeech model)"),uFo=l(),d_=a("li"),mle=a("strong"),_Fo=o("unispeech-sat"),bFo=o(" \u2014 "),Kq=a("a"),vFo=o("UniSpeechSatForPreTraining"),FFo=o(" (UniSpeechSat model)"),TFo=l(),c_=a("li"),gle=a("strong"),MFo=o("visual_bert"),EFo=o(" \u2014 "),Zq=a("a"),CFo=o("VisualBertForPreTraining"),wFo=o(" (VisualBert model)"),AFo=l(),f_=a("li"),hle=a("strong"),yFo=o("vit_mae"),LFo=o(" \u2014 "),eN=a("a"),xFo=o("ViTMAEForPreTraining"),$Fo=o(" (ViTMAE model)"),kFo=l(),m_=a("li"),ple=a("strong"),SFo=o("wav2vec2"),RFo=o(" \u2014 "),oN=a("a"),BFo=o("Wav2Vec2ForPreTraining"),PFo=o(" (Wav2Vec2 model)"),IFo=l(),g_=a("li"),ule=a("strong"),qFo=o("xlm"),NFo=o(" \u2014 "),rN=a("a"),jFo=o("XLMWithLMHeadModel"),DFo=o(" (XLM model)"),GFo=l(),h_=a("li"),_le=a("strong"),OFo=o("xlm-roberta"),VFo=o(" \u2014 "),tN=a("a"),XFo=o("XLMRobertaForMaskedLM"),zFo=o(" (XLM-RoBERTa model)"),QFo=l(),p_=a("li"),ble=a("strong"),WFo=o("xlm-roberta-xl"),HFo=o(" \u2014 "),aN=a("a"),UFo=o("XLMRobertaXLForMaskedLM"),JFo=o(" (XLM-RoBERTa-XL model)"),YFo=l(),u_=a("li"),vle=a("strong"),KFo=o("xlnet"),ZFo=o(" \u2014 "),nN=a("a"),e6o=o("XLNetLMHeadModel"),o6o=o(" (XLNet model)"),r6o=l(),__=a("p"),t6o=o("The model is set in evaluation mode by default using "),Fle=a("code"),a6o=o("model.eval()"),n6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tle=a("code"),s6o=o("model.train()"),l6o=l(),F(b_.$$.fragment),LPe=l(),Li=a("h2"),v_=a("a"),Mle=a("span"),F(AA.$$.fragment),i6o=l(),Ele=a("span"),d6o=o("AutoModelForCausalLM"),xPe=l(),$o=a("div"),F(yA.$$.fragment),c6o=l(),xi=a("p"),f6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),sN=a("a"),m6o=o("from_pretrained()"),g6o=o(" class method or the "),lN=a("a"),h6o=o("from_config()"),p6o=o(` class
method.`),u6o=l(),LA=a("p"),_6o=o("This class cannot be instantiated directly using "),Cle=a("code"),b6o=o("__init__()"),v6o=o(" (throws an error)."),F6o=l(),tt=a("div"),F(xA.$$.fragment),T6o=l(),wle=a("p"),M6o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),E6o=l(),$i=a("p"),C6o=o(`Note:
Loading a model from its configuration file does `),Ale=a("strong"),w6o=o("not"),A6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iN=a("a"),y6o=o("from_pretrained()"),L6o=o(" to load the model weights."),x6o=l(),F(F_.$$.fragment),$6o=l(),Je=a("div"),F($A.$$.fragment),k6o=l(),yle=a("p"),S6o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),R6o=l(),La=a("p"),B6o=o("The model class to instantiate is selected based on the "),Lle=a("code"),P6o=o("model_type"),I6o=o(` property of the config object (either
passed as an argument or loaded from `),xle=a("code"),q6o=o("pretrained_model_name_or_path"),N6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$le=a("code"),j6o=o("pretrained_model_name_or_path"),D6o=o(":"),G6o=l(),z=a("ul"),T_=a("li"),kle=a("strong"),O6o=o("bart"),V6o=o(" \u2014 "),dN=a("a"),X6o=o("BartForCausalLM"),z6o=o(" (BART model)"),Q6o=l(),M_=a("li"),Sle=a("strong"),W6o=o("bert"),H6o=o(" \u2014 "),cN=a("a"),U6o=o("BertLMHeadModel"),J6o=o(" (BERT model)"),Y6o=l(),E_=a("li"),Rle=a("strong"),K6o=o("bert-generation"),Z6o=o(" \u2014 "),fN=a("a"),eTo=o("BertGenerationDecoder"),oTo=o(" (Bert Generation model)"),rTo=l(),C_=a("li"),Ble=a("strong"),tTo=o("big_bird"),aTo=o(" \u2014 "),mN=a("a"),nTo=o("BigBirdForCausalLM"),sTo=o(" (BigBird model)"),lTo=l(),w_=a("li"),Ple=a("strong"),iTo=o("bigbird_pegasus"),dTo=o(" \u2014 "),gN=a("a"),cTo=o("BigBirdPegasusForCausalLM"),fTo=o(" (BigBirdPegasus model)"),mTo=l(),A_=a("li"),Ile=a("strong"),gTo=o("blenderbot"),hTo=o(" \u2014 "),hN=a("a"),pTo=o("BlenderbotForCausalLM"),uTo=o(" (Blenderbot model)"),_To=l(),y_=a("li"),qle=a("strong"),bTo=o("blenderbot-small"),vTo=o(" \u2014 "),pN=a("a"),FTo=o("BlenderbotSmallForCausalLM"),TTo=o(" (BlenderbotSmall model)"),MTo=l(),L_=a("li"),Nle=a("strong"),ETo=o("camembert"),CTo=o(" \u2014 "),uN=a("a"),wTo=o("CamembertForCausalLM"),ATo=o(" (CamemBERT model)"),yTo=l(),x_=a("li"),jle=a("strong"),LTo=o("ctrl"),xTo=o(" \u2014 "),_N=a("a"),$To=o("CTRLLMHeadModel"),kTo=o(" (CTRL model)"),STo=l(),$_=a("li"),Dle=a("strong"),RTo=o("data2vec-text"),BTo=o(" \u2014 "),bN=a("a"),PTo=o("Data2VecTextForCausalLM"),ITo=o(" (Data2VecText model)"),qTo=l(),k_=a("li"),Gle=a("strong"),NTo=o("electra"),jTo=o(" \u2014 "),vN=a("a"),DTo=o("ElectraForCausalLM"),GTo=o(" (ELECTRA model)"),OTo=l(),S_=a("li"),Ole=a("strong"),VTo=o("gpt2"),XTo=o(" \u2014 "),FN=a("a"),zTo=o("GPT2LMHeadModel"),QTo=o(" (OpenAI GPT-2 model)"),WTo=l(),R_=a("li"),Vle=a("strong"),HTo=o("gpt_neo"),UTo=o(" \u2014 "),TN=a("a"),JTo=o("GPTNeoForCausalLM"),YTo=o(" (GPT Neo model)"),KTo=l(),B_=a("li"),Xle=a("strong"),ZTo=o("gptj"),e9o=o(" \u2014 "),MN=a("a"),o9o=o("GPTJForCausalLM"),r9o=o(" (GPT-J model)"),t9o=l(),P_=a("li"),zle=a("strong"),a9o=o("marian"),n9o=o(" \u2014 "),EN=a("a"),s9o=o("MarianForCausalLM"),l9o=o(" (Marian model)"),i9o=l(),I_=a("li"),Qle=a("strong"),d9o=o("mbart"),c9o=o(" \u2014 "),CN=a("a"),f9o=o("MBartForCausalLM"),m9o=o(" (mBART model)"),g9o=l(),q_=a("li"),Wle=a("strong"),h9o=o("megatron-bert"),p9o=o(" \u2014 "),wN=a("a"),u9o=o("MegatronBertForCausalLM"),_9o=o(" (MegatronBert model)"),b9o=l(),N_=a("li"),Hle=a("strong"),v9o=o("openai-gpt"),F9o=o(" \u2014 "),AN=a("a"),T9o=o("OpenAIGPTLMHeadModel"),M9o=o(" (OpenAI GPT model)"),E9o=l(),j_=a("li"),Ule=a("strong"),C9o=o("pegasus"),w9o=o(" \u2014 "),yN=a("a"),A9o=o("PegasusForCausalLM"),y9o=o(" (Pegasus model)"),L9o=l(),D_=a("li"),Jle=a("strong"),x9o=o("plbart"),$9o=o(" \u2014 "),LN=a("a"),k9o=o("PLBartForCausalLM"),S9o=o(" (PLBart model)"),R9o=l(),G_=a("li"),Yle=a("strong"),B9o=o("prophetnet"),P9o=o(" \u2014 "),xN=a("a"),I9o=o("ProphetNetForCausalLM"),q9o=o(" (ProphetNet model)"),N9o=l(),O_=a("li"),Kle=a("strong"),j9o=o("qdqbert"),D9o=o(" \u2014 "),$N=a("a"),G9o=o("QDQBertLMHeadModel"),O9o=o(" (QDQBert model)"),V9o=l(),V_=a("li"),Zle=a("strong"),X9o=o("reformer"),z9o=o(" \u2014 "),kN=a("a"),Q9o=o("ReformerModelWithLMHead"),W9o=o(" (Reformer model)"),H9o=l(),X_=a("li"),eie=a("strong"),U9o=o("rembert"),J9o=o(" \u2014 "),SN=a("a"),Y9o=o("RemBertForCausalLM"),K9o=o(" (RemBERT model)"),Z9o=l(),z_=a("li"),oie=a("strong"),eMo=o("roberta"),oMo=o(" \u2014 "),RN=a("a"),rMo=o("RobertaForCausalLM"),tMo=o(" (RoBERTa model)"),aMo=l(),Q_=a("li"),rie=a("strong"),nMo=o("roformer"),sMo=o(" \u2014 "),BN=a("a"),lMo=o("RoFormerForCausalLM"),iMo=o(" (RoFormer model)"),dMo=l(),W_=a("li"),tie=a("strong"),cMo=o("speech_to_text_2"),fMo=o(" \u2014 "),PN=a("a"),mMo=o("Speech2Text2ForCausalLM"),gMo=o(" (Speech2Text2 model)"),hMo=l(),H_=a("li"),aie=a("strong"),pMo=o("transfo-xl"),uMo=o(" \u2014 "),IN=a("a"),_Mo=o("TransfoXLLMHeadModel"),bMo=o(" (Transformer-XL model)"),vMo=l(),U_=a("li"),nie=a("strong"),FMo=o("trocr"),TMo=o(" \u2014 "),qN=a("a"),MMo=o("TrOCRForCausalLM"),EMo=o(" (TrOCR model)"),CMo=l(),J_=a("li"),sie=a("strong"),wMo=o("xglm"),AMo=o(" \u2014 "),NN=a("a"),yMo=o("XGLMForCausalLM"),LMo=o(" (XGLM model)"),xMo=l(),Y_=a("li"),lie=a("strong"),$Mo=o("xlm"),kMo=o(" \u2014 "),jN=a("a"),SMo=o("XLMWithLMHeadModel"),RMo=o(" (XLM model)"),BMo=l(),K_=a("li"),iie=a("strong"),PMo=o("xlm-prophetnet"),IMo=o(" \u2014 "),DN=a("a"),qMo=o("XLMProphetNetForCausalLM"),NMo=o(" (XLMProphetNet model)"),jMo=l(),Z_=a("li"),die=a("strong"),DMo=o("xlm-roberta"),GMo=o(" \u2014 "),GN=a("a"),OMo=o("XLMRobertaForCausalLM"),VMo=o(" (XLM-RoBERTa model)"),XMo=l(),e1=a("li"),cie=a("strong"),zMo=o("xlm-roberta-xl"),QMo=o(" \u2014 "),ON=a("a"),WMo=o("XLMRobertaXLForCausalLM"),HMo=o(" (XLM-RoBERTa-XL model)"),UMo=l(),o1=a("li"),fie=a("strong"),JMo=o("xlnet"),YMo=o(" \u2014 "),VN=a("a"),KMo=o("XLNetLMHeadModel"),ZMo=o(" (XLNet model)"),e4o=l(),r1=a("p"),o4o=o("The model is set in evaluation mode by default using "),mie=a("code"),r4o=o("model.eval()"),t4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gie=a("code"),a4o=o("model.train()"),n4o=l(),F(t1.$$.fragment),$Pe=l(),ki=a("h2"),a1=a("a"),hie=a("span"),F(kA.$$.fragment),s4o=l(),pie=a("span"),l4o=o("AutoModelForMaskedLM"),kPe=l(),ko=a("div"),F(SA.$$.fragment),i4o=l(),Si=a("p"),d4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),XN=a("a"),c4o=o("from_pretrained()"),f4o=o(" class method or the "),zN=a("a"),m4o=o("from_config()"),g4o=o(` class
method.`),h4o=l(),RA=a("p"),p4o=o("This class cannot be instantiated directly using "),uie=a("code"),u4o=o("__init__()"),_4o=o(" (throws an error)."),b4o=l(),at=a("div"),F(BA.$$.fragment),v4o=l(),_ie=a("p"),F4o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),T4o=l(),Ri=a("p"),M4o=o(`Note:
Loading a model from its configuration file does `),bie=a("strong"),E4o=o("not"),C4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QN=a("a"),w4o=o("from_pretrained()"),A4o=o(" to load the model weights."),y4o=l(),F(n1.$$.fragment),L4o=l(),Ye=a("div"),F(PA.$$.fragment),x4o=l(),vie=a("p"),$4o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),k4o=l(),xa=a("p"),S4o=o("The model class to instantiate is selected based on the "),Fie=a("code"),R4o=o("model_type"),B4o=o(` property of the config object (either
passed as an argument or loaded from `),Tie=a("code"),P4o=o("pretrained_model_name_or_path"),I4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mie=a("code"),q4o=o("pretrained_model_name_or_path"),N4o=o(":"),j4o=l(),Q=a("ul"),s1=a("li"),Eie=a("strong"),D4o=o("albert"),G4o=o(" \u2014 "),WN=a("a"),O4o=o("AlbertForMaskedLM"),V4o=o(" (ALBERT model)"),X4o=l(),l1=a("li"),Cie=a("strong"),z4o=o("bart"),Q4o=o(" \u2014 "),HN=a("a"),W4o=o("BartForConditionalGeneration"),H4o=o(" (BART model)"),U4o=l(),i1=a("li"),wie=a("strong"),J4o=o("bert"),Y4o=o(" \u2014 "),UN=a("a"),K4o=o("BertForMaskedLM"),Z4o=o(" (BERT model)"),eEo=l(),d1=a("li"),Aie=a("strong"),oEo=o("big_bird"),rEo=o(" \u2014 "),JN=a("a"),tEo=o("BigBirdForMaskedLM"),aEo=o(" (BigBird model)"),nEo=l(),c1=a("li"),yie=a("strong"),sEo=o("camembert"),lEo=o(" \u2014 "),YN=a("a"),iEo=o("CamembertForMaskedLM"),dEo=o(" (CamemBERT model)"),cEo=l(),f1=a("li"),Lie=a("strong"),fEo=o("convbert"),mEo=o(" \u2014 "),KN=a("a"),gEo=o("ConvBertForMaskedLM"),hEo=o(" (ConvBERT model)"),pEo=l(),m1=a("li"),xie=a("strong"),uEo=o("data2vec-text"),_Eo=o(" \u2014 "),ZN=a("a"),bEo=o("Data2VecTextForMaskedLM"),vEo=o(" (Data2VecText model)"),FEo=l(),g1=a("li"),$ie=a("strong"),TEo=o("deberta"),MEo=o(" \u2014 "),ej=a("a"),EEo=o("DebertaForMaskedLM"),CEo=o(" (DeBERTa model)"),wEo=l(),h1=a("li"),kie=a("strong"),AEo=o("deberta-v2"),yEo=o(" \u2014 "),oj=a("a"),LEo=o("DebertaV2ForMaskedLM"),xEo=o(" (DeBERTa-v2 model)"),$Eo=l(),p1=a("li"),Sie=a("strong"),kEo=o("distilbert"),SEo=o(" \u2014 "),rj=a("a"),REo=o("DistilBertForMaskedLM"),BEo=o(" (DistilBERT model)"),PEo=l(),u1=a("li"),Rie=a("strong"),IEo=o("electra"),qEo=o(" \u2014 "),tj=a("a"),NEo=o("ElectraForMaskedLM"),jEo=o(" (ELECTRA model)"),DEo=l(),_1=a("li"),Bie=a("strong"),GEo=o("flaubert"),OEo=o(" \u2014 "),aj=a("a"),VEo=o("FlaubertWithLMHeadModel"),XEo=o(" (FlauBERT model)"),zEo=l(),b1=a("li"),Pie=a("strong"),QEo=o("fnet"),WEo=o(" \u2014 "),nj=a("a"),HEo=o("FNetForMaskedLM"),UEo=o(" (FNet model)"),JEo=l(),v1=a("li"),Iie=a("strong"),YEo=o("funnel"),KEo=o(" \u2014 "),sj=a("a"),ZEo=o("FunnelForMaskedLM"),e5o=o(" (Funnel Transformer model)"),o5o=l(),F1=a("li"),qie=a("strong"),r5o=o("ibert"),t5o=o(" \u2014 "),lj=a("a"),a5o=o("IBertForMaskedLM"),n5o=o(" (I-BERT model)"),s5o=l(),T1=a("li"),Nie=a("strong"),l5o=o("layoutlm"),i5o=o(" \u2014 "),ij=a("a"),d5o=o("LayoutLMForMaskedLM"),c5o=o(" (LayoutLM model)"),f5o=l(),M1=a("li"),jie=a("strong"),m5o=o("longformer"),g5o=o(" \u2014 "),dj=a("a"),h5o=o("LongformerForMaskedLM"),p5o=o(" (Longformer model)"),u5o=l(),E1=a("li"),Die=a("strong"),_5o=o("mbart"),b5o=o(" \u2014 "),cj=a("a"),v5o=o("MBartForConditionalGeneration"),F5o=o(" (mBART model)"),T5o=l(),C1=a("li"),Gie=a("strong"),M5o=o("megatron-bert"),E5o=o(" \u2014 "),fj=a("a"),C5o=o("MegatronBertForMaskedLM"),w5o=o(" (MegatronBert model)"),A5o=l(),w1=a("li"),Oie=a("strong"),y5o=o("mobilebert"),L5o=o(" \u2014 "),mj=a("a"),x5o=o("MobileBertForMaskedLM"),$5o=o(" (MobileBERT model)"),k5o=l(),A1=a("li"),Vie=a("strong"),S5o=o("mpnet"),R5o=o(" \u2014 "),gj=a("a"),B5o=o("MPNetForMaskedLM"),P5o=o(" (MPNet model)"),I5o=l(),y1=a("li"),Xie=a("strong"),q5o=o("nystromformer"),N5o=o(" \u2014 "),hj=a("a"),j5o=o("NystromformerForMaskedLM"),D5o=o(" (Nystromformer model)"),G5o=l(),L1=a("li"),zie=a("strong"),O5o=o("perceiver"),V5o=o(" \u2014 "),pj=a("a"),X5o=o("PerceiverForMaskedLM"),z5o=o(" (Perceiver model)"),Q5o=l(),x1=a("li"),Qie=a("strong"),W5o=o("qdqbert"),H5o=o(" \u2014 "),uj=a("a"),U5o=o("QDQBertForMaskedLM"),J5o=o(" (QDQBert model)"),Y5o=l(),$1=a("li"),Wie=a("strong"),K5o=o("reformer"),Z5o=o(" \u2014 "),_j=a("a"),eCo=o("ReformerForMaskedLM"),oCo=o(" (Reformer model)"),rCo=l(),k1=a("li"),Hie=a("strong"),tCo=o("rembert"),aCo=o(" \u2014 "),bj=a("a"),nCo=o("RemBertForMaskedLM"),sCo=o(" (RemBERT model)"),lCo=l(),S1=a("li"),Uie=a("strong"),iCo=o("roberta"),dCo=o(" \u2014 "),vj=a("a"),cCo=o("RobertaForMaskedLM"),fCo=o(" (RoBERTa model)"),mCo=l(),R1=a("li"),Jie=a("strong"),gCo=o("roformer"),hCo=o(" \u2014 "),Fj=a("a"),pCo=o("RoFormerForMaskedLM"),uCo=o(" (RoFormer model)"),_Co=l(),B1=a("li"),Yie=a("strong"),bCo=o("squeezebert"),vCo=o(" \u2014 "),Tj=a("a"),FCo=o("SqueezeBertForMaskedLM"),TCo=o(" (SqueezeBERT model)"),MCo=l(),P1=a("li"),Kie=a("strong"),ECo=o("tapas"),CCo=o(" \u2014 "),Mj=a("a"),wCo=o("TapasForMaskedLM"),ACo=o(" (TAPAS model)"),yCo=l(),I1=a("li"),Zie=a("strong"),LCo=o("wav2vec2"),xCo=o(" \u2014 "),ede=a("code"),$Co=o("Wav2Vec2ForMaskedLM"),kCo=o(" (Wav2Vec2 model)"),SCo=l(),q1=a("li"),ode=a("strong"),RCo=o("xlm"),BCo=o(" \u2014 "),Ej=a("a"),PCo=o("XLMWithLMHeadModel"),ICo=o(" (XLM model)"),qCo=l(),N1=a("li"),rde=a("strong"),NCo=o("xlm-roberta"),jCo=o(" \u2014 "),Cj=a("a"),DCo=o("XLMRobertaForMaskedLM"),GCo=o(" (XLM-RoBERTa model)"),OCo=l(),j1=a("li"),tde=a("strong"),VCo=o("xlm-roberta-xl"),XCo=o(" \u2014 "),wj=a("a"),zCo=o("XLMRobertaXLForMaskedLM"),QCo=o(" (XLM-RoBERTa-XL model)"),WCo=l(),D1=a("li"),ade=a("strong"),HCo=o("yoso"),UCo=o(" \u2014 "),Aj=a("a"),JCo=o("YosoForMaskedLM"),YCo=o(" (YOSO model)"),KCo=l(),G1=a("p"),ZCo=o("The model is set in evaluation mode by default using "),nde=a("code"),e3o=o("model.eval()"),o3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sde=a("code"),r3o=o("model.train()"),t3o=l(),F(O1.$$.fragment),SPe=l(),Bi=a("h2"),V1=a("a"),lde=a("span"),F(IA.$$.fragment),a3o=l(),ide=a("span"),n3o=o("AutoModelForSeq2SeqLM"),RPe=l(),So=a("div"),F(qA.$$.fragment),s3o=l(),Pi=a("p"),l3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),yj=a("a"),i3o=o("from_pretrained()"),d3o=o(" class method or the "),Lj=a("a"),c3o=o("from_config()"),f3o=o(` class
method.`),m3o=l(),NA=a("p"),g3o=o("This class cannot be instantiated directly using "),dde=a("code"),h3o=o("__init__()"),p3o=o(" (throws an error)."),u3o=l(),nt=a("div"),F(jA.$$.fragment),_3o=l(),cde=a("p"),b3o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),v3o=l(),Ii=a("p"),F3o=o(`Note:
Loading a model from its configuration file does `),fde=a("strong"),T3o=o("not"),M3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xj=a("a"),E3o=o("from_pretrained()"),C3o=o(" to load the model weights."),w3o=l(),F(X1.$$.fragment),A3o=l(),Ke=a("div"),F(DA.$$.fragment),y3o=l(),mde=a("p"),L3o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),x3o=l(),$a=a("p"),$3o=o("The model class to instantiate is selected based on the "),gde=a("code"),k3o=o("model_type"),S3o=o(` property of the config object (either
passed as an argument or loaded from `),hde=a("code"),R3o=o("pretrained_model_name_or_path"),B3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pde=a("code"),P3o=o("pretrained_model_name_or_path"),I3o=o(":"),q3o=l(),he=a("ul"),z1=a("li"),ude=a("strong"),N3o=o("bart"),j3o=o(" \u2014 "),$j=a("a"),D3o=o("BartForConditionalGeneration"),G3o=o(" (BART model)"),O3o=l(),Q1=a("li"),_de=a("strong"),V3o=o("bigbird_pegasus"),X3o=o(" \u2014 "),kj=a("a"),z3o=o("BigBirdPegasusForConditionalGeneration"),Q3o=o(" (BigBirdPegasus model)"),W3o=l(),W1=a("li"),bde=a("strong"),H3o=o("blenderbot"),U3o=o(" \u2014 "),Sj=a("a"),J3o=o("BlenderbotForConditionalGeneration"),Y3o=o(" (Blenderbot model)"),K3o=l(),H1=a("li"),vde=a("strong"),Z3o=o("blenderbot-small"),ewo=o(" \u2014 "),Rj=a("a"),owo=o("BlenderbotSmallForConditionalGeneration"),rwo=o(" (BlenderbotSmall model)"),two=l(),U1=a("li"),Fde=a("strong"),awo=o("encoder-decoder"),nwo=o(" \u2014 "),Bj=a("a"),swo=o("EncoderDecoderModel"),lwo=o(" (Encoder decoder model)"),iwo=l(),J1=a("li"),Tde=a("strong"),dwo=o("fsmt"),cwo=o(" \u2014 "),Pj=a("a"),fwo=o("FSMTForConditionalGeneration"),mwo=o(" (FairSeq Machine-Translation model)"),gwo=l(),Y1=a("li"),Mde=a("strong"),hwo=o("led"),pwo=o(" \u2014 "),Ij=a("a"),uwo=o("LEDForConditionalGeneration"),_wo=o(" (LED model)"),bwo=l(),K1=a("li"),Ede=a("strong"),vwo=o("m2m_100"),Fwo=o(" \u2014 "),qj=a("a"),Two=o("M2M100ForConditionalGeneration"),Mwo=o(" (M2M100 model)"),Ewo=l(),Z1=a("li"),Cde=a("strong"),Cwo=o("marian"),wwo=o(" \u2014 "),Nj=a("a"),Awo=o("MarianMTModel"),ywo=o(" (Marian model)"),Lwo=l(),e8=a("li"),wde=a("strong"),xwo=o("mbart"),$wo=o(" \u2014 "),jj=a("a"),kwo=o("MBartForConditionalGeneration"),Swo=o(" (mBART model)"),Rwo=l(),o8=a("li"),Ade=a("strong"),Bwo=o("mt5"),Pwo=o(" \u2014 "),Dj=a("a"),Iwo=o("MT5ForConditionalGeneration"),qwo=o(" (mT5 model)"),Nwo=l(),r8=a("li"),yde=a("strong"),jwo=o("pegasus"),Dwo=o(" \u2014 "),Gj=a("a"),Gwo=o("PegasusForConditionalGeneration"),Owo=o(" (Pegasus model)"),Vwo=l(),t8=a("li"),Lde=a("strong"),Xwo=o("plbart"),zwo=o(" \u2014 "),Oj=a("a"),Qwo=o("PLBartForConditionalGeneration"),Wwo=o(" (PLBart model)"),Hwo=l(),a8=a("li"),xde=a("strong"),Uwo=o("prophetnet"),Jwo=o(" \u2014 "),Vj=a("a"),Ywo=o("ProphetNetForConditionalGeneration"),Kwo=o(" (ProphetNet model)"),Zwo=l(),n8=a("li"),$de=a("strong"),eAo=o("t5"),oAo=o(" \u2014 "),Xj=a("a"),rAo=o("T5ForConditionalGeneration"),tAo=o(" (T5 model)"),aAo=l(),s8=a("li"),kde=a("strong"),nAo=o("tapex"),sAo=o(" \u2014 "),zj=a("a"),lAo=o("BartForConditionalGeneration"),iAo=o(" (TAPEX model)"),dAo=l(),l8=a("li"),Sde=a("strong"),cAo=o("xlm-prophetnet"),fAo=o(" \u2014 "),Qj=a("a"),mAo=o("XLMProphetNetForConditionalGeneration"),gAo=o(" (XLMProphetNet model)"),hAo=l(),i8=a("p"),pAo=o("The model is set in evaluation mode by default using "),Rde=a("code"),uAo=o("model.eval()"),_Ao=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bde=a("code"),bAo=o("model.train()"),vAo=l(),F(d8.$$.fragment),BPe=l(),qi=a("h2"),c8=a("a"),Pde=a("span"),F(GA.$$.fragment),FAo=l(),Ide=a("span"),TAo=o("AutoModelForSequenceClassification"),PPe=l(),Ro=a("div"),F(OA.$$.fragment),MAo=l(),Ni=a("p"),EAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Wj=a("a"),CAo=o("from_pretrained()"),wAo=o(" class method or the "),Hj=a("a"),AAo=o("from_config()"),yAo=o(` class
method.`),LAo=l(),VA=a("p"),xAo=o("This class cannot be instantiated directly using "),qde=a("code"),$Ao=o("__init__()"),kAo=o(" (throws an error)."),SAo=l(),st=a("div"),F(XA.$$.fragment),RAo=l(),Nde=a("p"),BAo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),PAo=l(),ji=a("p"),IAo=o(`Note:
Loading a model from its configuration file does `),jde=a("strong"),qAo=o("not"),NAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uj=a("a"),jAo=o("from_pretrained()"),DAo=o(" to load the model weights."),GAo=l(),F(f8.$$.fragment),OAo=l(),Ze=a("div"),F(zA.$$.fragment),VAo=l(),Dde=a("p"),XAo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),zAo=l(),ka=a("p"),QAo=o("The model class to instantiate is selected based on the "),Gde=a("code"),WAo=o("model_type"),HAo=o(` property of the config object (either
passed as an argument or loaded from `),Ode=a("code"),UAo=o("pretrained_model_name_or_path"),JAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vde=a("code"),YAo=o("pretrained_model_name_or_path"),KAo=o(":"),ZAo=l(),q=a("ul"),m8=a("li"),Xde=a("strong"),e0o=o("albert"),o0o=o(" \u2014 "),Jj=a("a"),r0o=o("AlbertForSequenceClassification"),t0o=o(" (ALBERT model)"),a0o=l(),g8=a("li"),zde=a("strong"),n0o=o("bart"),s0o=o(" \u2014 "),Yj=a("a"),l0o=o("BartForSequenceClassification"),i0o=o(" (BART model)"),d0o=l(),h8=a("li"),Qde=a("strong"),c0o=o("bert"),f0o=o(" \u2014 "),Kj=a("a"),m0o=o("BertForSequenceClassification"),g0o=o(" (BERT model)"),h0o=l(),p8=a("li"),Wde=a("strong"),p0o=o("big_bird"),u0o=o(" \u2014 "),Zj=a("a"),_0o=o("BigBirdForSequenceClassification"),b0o=o(" (BigBird model)"),v0o=l(),u8=a("li"),Hde=a("strong"),F0o=o("bigbird_pegasus"),T0o=o(" \u2014 "),eD=a("a"),M0o=o("BigBirdPegasusForSequenceClassification"),E0o=o(" (BigBirdPegasus model)"),C0o=l(),_8=a("li"),Ude=a("strong"),w0o=o("camembert"),A0o=o(" \u2014 "),oD=a("a"),y0o=o("CamembertForSequenceClassification"),L0o=o(" (CamemBERT model)"),x0o=l(),b8=a("li"),Jde=a("strong"),$0o=o("canine"),k0o=o(" \u2014 "),rD=a("a"),S0o=o("CanineForSequenceClassification"),R0o=o(" (Canine model)"),B0o=l(),v8=a("li"),Yde=a("strong"),P0o=o("convbert"),I0o=o(" \u2014 "),tD=a("a"),q0o=o("ConvBertForSequenceClassification"),N0o=o(" (ConvBERT model)"),j0o=l(),F8=a("li"),Kde=a("strong"),D0o=o("ctrl"),G0o=o(" \u2014 "),aD=a("a"),O0o=o("CTRLForSequenceClassification"),V0o=o(" (CTRL model)"),X0o=l(),T8=a("li"),Zde=a("strong"),z0o=o("data2vec-text"),Q0o=o(" \u2014 "),nD=a("a"),W0o=o("Data2VecTextForSequenceClassification"),H0o=o(" (Data2VecText model)"),U0o=l(),M8=a("li"),ece=a("strong"),J0o=o("deberta"),Y0o=o(" \u2014 "),sD=a("a"),K0o=o("DebertaForSequenceClassification"),Z0o=o(" (DeBERTa model)"),eyo=l(),E8=a("li"),oce=a("strong"),oyo=o("deberta-v2"),ryo=o(" \u2014 "),lD=a("a"),tyo=o("DebertaV2ForSequenceClassification"),ayo=o(" (DeBERTa-v2 model)"),nyo=l(),C8=a("li"),rce=a("strong"),syo=o("distilbert"),lyo=o(" \u2014 "),iD=a("a"),iyo=o("DistilBertForSequenceClassification"),dyo=o(" (DistilBERT model)"),cyo=l(),w8=a("li"),tce=a("strong"),fyo=o("electra"),myo=o(" \u2014 "),dD=a("a"),gyo=o("ElectraForSequenceClassification"),hyo=o(" (ELECTRA model)"),pyo=l(),A8=a("li"),ace=a("strong"),uyo=o("flaubert"),_yo=o(" \u2014 "),cD=a("a"),byo=o("FlaubertForSequenceClassification"),vyo=o(" (FlauBERT model)"),Fyo=l(),y8=a("li"),nce=a("strong"),Tyo=o("fnet"),Myo=o(" \u2014 "),fD=a("a"),Eyo=o("FNetForSequenceClassification"),Cyo=o(" (FNet model)"),wyo=l(),L8=a("li"),sce=a("strong"),Ayo=o("funnel"),yyo=o(" \u2014 "),mD=a("a"),Lyo=o("FunnelForSequenceClassification"),xyo=o(" (Funnel Transformer model)"),$yo=l(),x8=a("li"),lce=a("strong"),kyo=o("gpt2"),Syo=o(" \u2014 "),gD=a("a"),Ryo=o("GPT2ForSequenceClassification"),Byo=o(" (OpenAI GPT-2 model)"),Pyo=l(),$8=a("li"),ice=a("strong"),Iyo=o("gpt_neo"),qyo=o(" \u2014 "),hD=a("a"),Nyo=o("GPTNeoForSequenceClassification"),jyo=o(" (GPT Neo model)"),Dyo=l(),k8=a("li"),dce=a("strong"),Gyo=o("gptj"),Oyo=o(" \u2014 "),pD=a("a"),Vyo=o("GPTJForSequenceClassification"),Xyo=o(" (GPT-J model)"),zyo=l(),S8=a("li"),cce=a("strong"),Qyo=o("ibert"),Wyo=o(" \u2014 "),uD=a("a"),Hyo=o("IBertForSequenceClassification"),Uyo=o(" (I-BERT model)"),Jyo=l(),R8=a("li"),fce=a("strong"),Yyo=o("layoutlm"),Kyo=o(" \u2014 "),_D=a("a"),Zyo=o("LayoutLMForSequenceClassification"),eLo=o(" (LayoutLM model)"),oLo=l(),B8=a("li"),mce=a("strong"),rLo=o("layoutlmv2"),tLo=o(" \u2014 "),bD=a("a"),aLo=o("LayoutLMv2ForSequenceClassification"),nLo=o(" (LayoutLMv2 model)"),sLo=l(),P8=a("li"),gce=a("strong"),lLo=o("led"),iLo=o(" \u2014 "),vD=a("a"),dLo=o("LEDForSequenceClassification"),cLo=o(" (LED model)"),fLo=l(),I8=a("li"),hce=a("strong"),mLo=o("longformer"),gLo=o(" \u2014 "),FD=a("a"),hLo=o("LongformerForSequenceClassification"),pLo=o(" (Longformer model)"),uLo=l(),q8=a("li"),pce=a("strong"),_Lo=o("mbart"),bLo=o(" \u2014 "),TD=a("a"),vLo=o("MBartForSequenceClassification"),FLo=o(" (mBART model)"),TLo=l(),N8=a("li"),uce=a("strong"),MLo=o("megatron-bert"),ELo=o(" \u2014 "),MD=a("a"),CLo=o("MegatronBertForSequenceClassification"),wLo=o(" (MegatronBert model)"),ALo=l(),j8=a("li"),_ce=a("strong"),yLo=o("mobilebert"),LLo=o(" \u2014 "),ED=a("a"),xLo=o("MobileBertForSequenceClassification"),$Lo=o(" (MobileBERT model)"),kLo=l(),D8=a("li"),bce=a("strong"),SLo=o("mpnet"),RLo=o(" \u2014 "),CD=a("a"),BLo=o("MPNetForSequenceClassification"),PLo=o(" (MPNet model)"),ILo=l(),G8=a("li"),vce=a("strong"),qLo=o("nystromformer"),NLo=o(" \u2014 "),wD=a("a"),jLo=o("NystromformerForSequenceClassification"),DLo=o(" (Nystromformer model)"),GLo=l(),O8=a("li"),Fce=a("strong"),OLo=o("openai-gpt"),VLo=o(" \u2014 "),AD=a("a"),XLo=o("OpenAIGPTForSequenceClassification"),zLo=o(" (OpenAI GPT model)"),QLo=l(),V8=a("li"),Tce=a("strong"),WLo=o("perceiver"),HLo=o(" \u2014 "),yD=a("a"),ULo=o("PerceiverForSequenceClassification"),JLo=o(" (Perceiver model)"),YLo=l(),X8=a("li"),Mce=a("strong"),KLo=o("plbart"),ZLo=o(" \u2014 "),LD=a("a"),exo=o("PLBartForSequenceClassification"),oxo=o(" (PLBart model)"),rxo=l(),z8=a("li"),Ece=a("strong"),txo=o("qdqbert"),axo=o(" \u2014 "),xD=a("a"),nxo=o("QDQBertForSequenceClassification"),sxo=o(" (QDQBert model)"),lxo=l(),Q8=a("li"),Cce=a("strong"),ixo=o("reformer"),dxo=o(" \u2014 "),$D=a("a"),cxo=o("ReformerForSequenceClassification"),fxo=o(" (Reformer model)"),mxo=l(),W8=a("li"),wce=a("strong"),gxo=o("rembert"),hxo=o(" \u2014 "),kD=a("a"),pxo=o("RemBertForSequenceClassification"),uxo=o(" (RemBERT model)"),_xo=l(),H8=a("li"),Ace=a("strong"),bxo=o("roberta"),vxo=o(" \u2014 "),SD=a("a"),Fxo=o("RobertaForSequenceClassification"),Txo=o(" (RoBERTa model)"),Mxo=l(),U8=a("li"),yce=a("strong"),Exo=o("roformer"),Cxo=o(" \u2014 "),RD=a("a"),wxo=o("RoFormerForSequenceClassification"),Axo=o(" (RoFormer model)"),yxo=l(),J8=a("li"),Lce=a("strong"),Lxo=o("squeezebert"),xxo=o(" \u2014 "),BD=a("a"),$xo=o("SqueezeBertForSequenceClassification"),kxo=o(" (SqueezeBERT model)"),Sxo=l(),Y8=a("li"),xce=a("strong"),Rxo=o("tapas"),Bxo=o(" \u2014 "),PD=a("a"),Pxo=o("TapasForSequenceClassification"),Ixo=o(" (TAPAS model)"),qxo=l(),K8=a("li"),$ce=a("strong"),Nxo=o("tapex"),jxo=o(" \u2014 "),ID=a("a"),Dxo=o("BartForSequenceClassification"),Gxo=o(" (TAPEX model)"),Oxo=l(),Z8=a("li"),kce=a("strong"),Vxo=o("transfo-xl"),Xxo=o(" \u2014 "),qD=a("a"),zxo=o("TransfoXLForSequenceClassification"),Qxo=o(" (Transformer-XL model)"),Wxo=l(),eb=a("li"),Sce=a("strong"),Hxo=o("xlm"),Uxo=o(" \u2014 "),ND=a("a"),Jxo=o("XLMForSequenceClassification"),Yxo=o(" (XLM model)"),Kxo=l(),ob=a("li"),Rce=a("strong"),Zxo=o("xlm-roberta"),e7o=o(" \u2014 "),jD=a("a"),o7o=o("XLMRobertaForSequenceClassification"),r7o=o(" (XLM-RoBERTa model)"),t7o=l(),rb=a("li"),Bce=a("strong"),a7o=o("xlm-roberta-xl"),n7o=o(" \u2014 "),DD=a("a"),s7o=o("XLMRobertaXLForSequenceClassification"),l7o=o(" (XLM-RoBERTa-XL model)"),i7o=l(),tb=a("li"),Pce=a("strong"),d7o=o("xlnet"),c7o=o(" \u2014 "),GD=a("a"),f7o=o("XLNetForSequenceClassification"),m7o=o(" (XLNet model)"),g7o=l(),ab=a("li"),Ice=a("strong"),h7o=o("yoso"),p7o=o(" \u2014 "),OD=a("a"),u7o=o("YosoForSequenceClassification"),_7o=o(" (YOSO model)"),b7o=l(),nb=a("p"),v7o=o("The model is set in evaluation mode by default using "),qce=a("code"),F7o=o("model.eval()"),T7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nce=a("code"),M7o=o("model.train()"),E7o=l(),F(sb.$$.fragment),IPe=l(),Di=a("h2"),lb=a("a"),jce=a("span"),F(QA.$$.fragment),C7o=l(),Dce=a("span"),w7o=o("AutoModelForMultipleChoice"),qPe=l(),Bo=a("div"),F(WA.$$.fragment),A7o=l(),Gi=a("p"),y7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),VD=a("a"),L7o=o("from_pretrained()"),x7o=o(" class method or the "),XD=a("a"),$7o=o("from_config()"),k7o=o(` class
method.`),S7o=l(),HA=a("p"),R7o=o("This class cannot be instantiated directly using "),Gce=a("code"),B7o=o("__init__()"),P7o=o(" (throws an error)."),I7o=l(),lt=a("div"),F(UA.$$.fragment),q7o=l(),Oce=a("p"),N7o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),j7o=l(),Oi=a("p"),D7o=o(`Note:
Loading a model from its configuration file does `),Vce=a("strong"),G7o=o("not"),O7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zD=a("a"),V7o=o("from_pretrained()"),X7o=o(" to load the model weights."),z7o=l(),F(ib.$$.fragment),Q7o=l(),eo=a("div"),F(JA.$$.fragment),W7o=l(),Xce=a("p"),H7o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),U7o=l(),Sa=a("p"),J7o=o("The model class to instantiate is selected based on the "),zce=a("code"),Y7o=o("model_type"),K7o=o(` property of the config object (either
passed as an argument or loaded from `),Qce=a("code"),Z7o=o("pretrained_model_name_or_path"),e$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wce=a("code"),o$o=o("pretrained_model_name_or_path"),r$o=o(":"),t$o=l(),Y=a("ul"),db=a("li"),Hce=a("strong"),a$o=o("albert"),n$o=o(" \u2014 "),QD=a("a"),s$o=o("AlbertForMultipleChoice"),l$o=o(" (ALBERT model)"),i$o=l(),cb=a("li"),Uce=a("strong"),d$o=o("bert"),c$o=o(" \u2014 "),WD=a("a"),f$o=o("BertForMultipleChoice"),m$o=o(" (BERT model)"),g$o=l(),fb=a("li"),Jce=a("strong"),h$o=o("big_bird"),p$o=o(" \u2014 "),HD=a("a"),u$o=o("BigBirdForMultipleChoice"),_$o=o(" (BigBird model)"),b$o=l(),mb=a("li"),Yce=a("strong"),v$o=o("camembert"),F$o=o(" \u2014 "),UD=a("a"),T$o=o("CamembertForMultipleChoice"),M$o=o(" (CamemBERT model)"),E$o=l(),gb=a("li"),Kce=a("strong"),C$o=o("canine"),w$o=o(" \u2014 "),JD=a("a"),A$o=o("CanineForMultipleChoice"),y$o=o(" (Canine model)"),L$o=l(),hb=a("li"),Zce=a("strong"),x$o=o("convbert"),$$o=o(" \u2014 "),YD=a("a"),k$o=o("ConvBertForMultipleChoice"),S$o=o(" (ConvBERT model)"),R$o=l(),pb=a("li"),efe=a("strong"),B$o=o("data2vec-text"),P$o=o(" \u2014 "),KD=a("a"),I$o=o("Data2VecTextForMultipleChoice"),q$o=o(" (Data2VecText model)"),N$o=l(),ub=a("li"),ofe=a("strong"),j$o=o("distilbert"),D$o=o(" \u2014 "),ZD=a("a"),G$o=o("DistilBertForMultipleChoice"),O$o=o(" (DistilBERT model)"),V$o=l(),_b=a("li"),rfe=a("strong"),X$o=o("electra"),z$o=o(" \u2014 "),eG=a("a"),Q$o=o("ElectraForMultipleChoice"),W$o=o(" (ELECTRA model)"),H$o=l(),bb=a("li"),tfe=a("strong"),U$o=o("flaubert"),J$o=o(" \u2014 "),oG=a("a"),Y$o=o("FlaubertForMultipleChoice"),K$o=o(" (FlauBERT model)"),Z$o=l(),vb=a("li"),afe=a("strong"),eko=o("fnet"),oko=o(" \u2014 "),rG=a("a"),rko=o("FNetForMultipleChoice"),tko=o(" (FNet model)"),ako=l(),Fb=a("li"),nfe=a("strong"),nko=o("funnel"),sko=o(" \u2014 "),tG=a("a"),lko=o("FunnelForMultipleChoice"),iko=o(" (Funnel Transformer model)"),dko=l(),Tb=a("li"),sfe=a("strong"),cko=o("ibert"),fko=o(" \u2014 "),aG=a("a"),mko=o("IBertForMultipleChoice"),gko=o(" (I-BERT model)"),hko=l(),Mb=a("li"),lfe=a("strong"),pko=o("longformer"),uko=o(" \u2014 "),nG=a("a"),_ko=o("LongformerForMultipleChoice"),bko=o(" (Longformer model)"),vko=l(),Eb=a("li"),ife=a("strong"),Fko=o("megatron-bert"),Tko=o(" \u2014 "),sG=a("a"),Mko=o("MegatronBertForMultipleChoice"),Eko=o(" (MegatronBert model)"),Cko=l(),Cb=a("li"),dfe=a("strong"),wko=o("mobilebert"),Ako=o(" \u2014 "),lG=a("a"),yko=o("MobileBertForMultipleChoice"),Lko=o(" (MobileBERT model)"),xko=l(),wb=a("li"),cfe=a("strong"),$ko=o("mpnet"),kko=o(" \u2014 "),iG=a("a"),Sko=o("MPNetForMultipleChoice"),Rko=o(" (MPNet model)"),Bko=l(),Ab=a("li"),ffe=a("strong"),Pko=o("nystromformer"),Iko=o(" \u2014 "),dG=a("a"),qko=o("NystromformerForMultipleChoice"),Nko=o(" (Nystromformer model)"),jko=l(),yb=a("li"),mfe=a("strong"),Dko=o("qdqbert"),Gko=o(" \u2014 "),cG=a("a"),Oko=o("QDQBertForMultipleChoice"),Vko=o(" (QDQBert model)"),Xko=l(),Lb=a("li"),gfe=a("strong"),zko=o("rembert"),Qko=o(" \u2014 "),fG=a("a"),Wko=o("RemBertForMultipleChoice"),Hko=o(" (RemBERT model)"),Uko=l(),xb=a("li"),hfe=a("strong"),Jko=o("roberta"),Yko=o(" \u2014 "),mG=a("a"),Kko=o("RobertaForMultipleChoice"),Zko=o(" (RoBERTa model)"),eSo=l(),$b=a("li"),pfe=a("strong"),oSo=o("roformer"),rSo=o(" \u2014 "),gG=a("a"),tSo=o("RoFormerForMultipleChoice"),aSo=o(" (RoFormer model)"),nSo=l(),kb=a("li"),ufe=a("strong"),sSo=o("squeezebert"),lSo=o(" \u2014 "),hG=a("a"),iSo=o("SqueezeBertForMultipleChoice"),dSo=o(" (SqueezeBERT model)"),cSo=l(),Sb=a("li"),_fe=a("strong"),fSo=o("xlm"),mSo=o(" \u2014 "),pG=a("a"),gSo=o("XLMForMultipleChoice"),hSo=o(" (XLM model)"),pSo=l(),Rb=a("li"),bfe=a("strong"),uSo=o("xlm-roberta"),_So=o(" \u2014 "),uG=a("a"),bSo=o("XLMRobertaForMultipleChoice"),vSo=o(" (XLM-RoBERTa model)"),FSo=l(),Bb=a("li"),vfe=a("strong"),TSo=o("xlm-roberta-xl"),MSo=o(" \u2014 "),_G=a("a"),ESo=o("XLMRobertaXLForMultipleChoice"),CSo=o(" (XLM-RoBERTa-XL model)"),wSo=l(),Pb=a("li"),Ffe=a("strong"),ASo=o("xlnet"),ySo=o(" \u2014 "),bG=a("a"),LSo=o("XLNetForMultipleChoice"),xSo=o(" (XLNet model)"),$So=l(),Ib=a("li"),Tfe=a("strong"),kSo=o("yoso"),SSo=o(" \u2014 "),vG=a("a"),RSo=o("YosoForMultipleChoice"),BSo=o(" (YOSO model)"),PSo=l(),qb=a("p"),ISo=o("The model is set in evaluation mode by default using "),Mfe=a("code"),qSo=o("model.eval()"),NSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Efe=a("code"),jSo=o("model.train()"),DSo=l(),F(Nb.$$.fragment),NPe=l(),Vi=a("h2"),jb=a("a"),Cfe=a("span"),F(YA.$$.fragment),GSo=l(),wfe=a("span"),OSo=o("AutoModelForNextSentencePrediction"),jPe=l(),Po=a("div"),F(KA.$$.fragment),VSo=l(),Xi=a("p"),XSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),FG=a("a"),zSo=o("from_pretrained()"),QSo=o(" class method or the "),TG=a("a"),WSo=o("from_config()"),HSo=o(` class
method.`),USo=l(),ZA=a("p"),JSo=o("This class cannot be instantiated directly using "),Afe=a("code"),YSo=o("__init__()"),KSo=o(" (throws an error)."),ZSo=l(),it=a("div"),F(e0.$$.fragment),eRo=l(),yfe=a("p"),oRo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),rRo=l(),zi=a("p"),tRo=o(`Note:
Loading a model from its configuration file does `),Lfe=a("strong"),aRo=o("not"),nRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MG=a("a"),sRo=o("from_pretrained()"),lRo=o(" to load the model weights."),iRo=l(),F(Db.$$.fragment),dRo=l(),oo=a("div"),F(o0.$$.fragment),cRo=l(),xfe=a("p"),fRo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),mRo=l(),Ra=a("p"),gRo=o("The model class to instantiate is selected based on the "),$fe=a("code"),hRo=o("model_type"),pRo=o(` property of the config object (either
passed as an argument or loaded from `),kfe=a("code"),uRo=o("pretrained_model_name_or_path"),_Ro=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sfe=a("code"),bRo=o("pretrained_model_name_or_path"),vRo=o(":"),FRo=l(),Yr=a("ul"),Gb=a("li"),Rfe=a("strong"),TRo=o("bert"),MRo=o(" \u2014 "),EG=a("a"),ERo=o("BertForNextSentencePrediction"),CRo=o(" (BERT model)"),wRo=l(),Ob=a("li"),Bfe=a("strong"),ARo=o("fnet"),yRo=o(" \u2014 "),CG=a("a"),LRo=o("FNetForNextSentencePrediction"),xRo=o(" (FNet model)"),$Ro=l(),Vb=a("li"),Pfe=a("strong"),kRo=o("megatron-bert"),SRo=o(" \u2014 "),wG=a("a"),RRo=o("MegatronBertForNextSentencePrediction"),BRo=o(" (MegatronBert model)"),PRo=l(),Xb=a("li"),Ife=a("strong"),IRo=o("mobilebert"),qRo=o(" \u2014 "),AG=a("a"),NRo=o("MobileBertForNextSentencePrediction"),jRo=o(" (MobileBERT model)"),DRo=l(),zb=a("li"),qfe=a("strong"),GRo=o("qdqbert"),ORo=o(" \u2014 "),yG=a("a"),VRo=o("QDQBertForNextSentencePrediction"),XRo=o(" (QDQBert model)"),zRo=l(),Qb=a("p"),QRo=o("The model is set in evaluation mode by default using "),Nfe=a("code"),WRo=o("model.eval()"),HRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jfe=a("code"),URo=o("model.train()"),JRo=l(),F(Wb.$$.fragment),DPe=l(),Qi=a("h2"),Hb=a("a"),Dfe=a("span"),F(r0.$$.fragment),YRo=l(),Gfe=a("span"),KRo=o("AutoModelForTokenClassification"),GPe=l(),Io=a("div"),F(t0.$$.fragment),ZRo=l(),Wi=a("p"),eBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),LG=a("a"),oBo=o("from_pretrained()"),rBo=o(" class method or the "),xG=a("a"),tBo=o("from_config()"),aBo=o(` class
method.`),nBo=l(),a0=a("p"),sBo=o("This class cannot be instantiated directly using "),Ofe=a("code"),lBo=o("__init__()"),iBo=o(" (throws an error)."),dBo=l(),dt=a("div"),F(n0.$$.fragment),cBo=l(),Vfe=a("p"),fBo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),mBo=l(),Hi=a("p"),gBo=o(`Note:
Loading a model from its configuration file does `),Xfe=a("strong"),hBo=o("not"),pBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$G=a("a"),uBo=o("from_pretrained()"),_Bo=o(" to load the model weights."),bBo=l(),F(Ub.$$.fragment),vBo=l(),ro=a("div"),F(s0.$$.fragment),FBo=l(),zfe=a("p"),TBo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),MBo=l(),Ba=a("p"),EBo=o("The model class to instantiate is selected based on the "),Qfe=a("code"),CBo=o("model_type"),wBo=o(` property of the config object (either
passed as an argument or loaded from `),Wfe=a("code"),ABo=o("pretrained_model_name_or_path"),yBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hfe=a("code"),LBo=o("pretrained_model_name_or_path"),xBo=o(":"),$Bo=l(),U=a("ul"),Jb=a("li"),Ufe=a("strong"),kBo=o("albert"),SBo=o(" \u2014 "),kG=a("a"),RBo=o("AlbertForTokenClassification"),BBo=o(" (ALBERT model)"),PBo=l(),Yb=a("li"),Jfe=a("strong"),IBo=o("bert"),qBo=o(" \u2014 "),SG=a("a"),NBo=o("BertForTokenClassification"),jBo=o(" (BERT model)"),DBo=l(),Kb=a("li"),Yfe=a("strong"),GBo=o("big_bird"),OBo=o(" \u2014 "),RG=a("a"),VBo=o("BigBirdForTokenClassification"),XBo=o(" (BigBird model)"),zBo=l(),Zb=a("li"),Kfe=a("strong"),QBo=o("camembert"),WBo=o(" \u2014 "),BG=a("a"),HBo=o("CamembertForTokenClassification"),UBo=o(" (CamemBERT model)"),JBo=l(),e2=a("li"),Zfe=a("strong"),YBo=o("canine"),KBo=o(" \u2014 "),PG=a("a"),ZBo=o("CanineForTokenClassification"),ePo=o(" (Canine model)"),oPo=l(),o2=a("li"),eme=a("strong"),rPo=o("convbert"),tPo=o(" \u2014 "),IG=a("a"),aPo=o("ConvBertForTokenClassification"),nPo=o(" (ConvBERT model)"),sPo=l(),r2=a("li"),ome=a("strong"),lPo=o("data2vec-text"),iPo=o(" \u2014 "),qG=a("a"),dPo=o("Data2VecTextForTokenClassification"),cPo=o(" (Data2VecText model)"),fPo=l(),t2=a("li"),rme=a("strong"),mPo=o("deberta"),gPo=o(" \u2014 "),NG=a("a"),hPo=o("DebertaForTokenClassification"),pPo=o(" (DeBERTa model)"),uPo=l(),a2=a("li"),tme=a("strong"),_Po=o("deberta-v2"),bPo=o(" \u2014 "),jG=a("a"),vPo=o("DebertaV2ForTokenClassification"),FPo=o(" (DeBERTa-v2 model)"),TPo=l(),n2=a("li"),ame=a("strong"),MPo=o("distilbert"),EPo=o(" \u2014 "),DG=a("a"),CPo=o("DistilBertForTokenClassification"),wPo=o(" (DistilBERT model)"),APo=l(),s2=a("li"),nme=a("strong"),yPo=o("electra"),LPo=o(" \u2014 "),GG=a("a"),xPo=o("ElectraForTokenClassification"),$Po=o(" (ELECTRA model)"),kPo=l(),l2=a("li"),sme=a("strong"),SPo=o("flaubert"),RPo=o(" \u2014 "),OG=a("a"),BPo=o("FlaubertForTokenClassification"),PPo=o(" (FlauBERT model)"),IPo=l(),i2=a("li"),lme=a("strong"),qPo=o("fnet"),NPo=o(" \u2014 "),VG=a("a"),jPo=o("FNetForTokenClassification"),DPo=o(" (FNet model)"),GPo=l(),d2=a("li"),ime=a("strong"),OPo=o("funnel"),VPo=o(" \u2014 "),XG=a("a"),XPo=o("FunnelForTokenClassification"),zPo=o(" (Funnel Transformer model)"),QPo=l(),c2=a("li"),dme=a("strong"),WPo=o("gpt2"),HPo=o(" \u2014 "),zG=a("a"),UPo=o("GPT2ForTokenClassification"),JPo=o(" (OpenAI GPT-2 model)"),YPo=l(),f2=a("li"),cme=a("strong"),KPo=o("ibert"),ZPo=o(" \u2014 "),QG=a("a"),eIo=o("IBertForTokenClassification"),oIo=o(" (I-BERT model)"),rIo=l(),m2=a("li"),fme=a("strong"),tIo=o("layoutlm"),aIo=o(" \u2014 "),WG=a("a"),nIo=o("LayoutLMForTokenClassification"),sIo=o(" (LayoutLM model)"),lIo=l(),g2=a("li"),mme=a("strong"),iIo=o("layoutlmv2"),dIo=o(" \u2014 "),HG=a("a"),cIo=o("LayoutLMv2ForTokenClassification"),fIo=o(" (LayoutLMv2 model)"),mIo=l(),h2=a("li"),gme=a("strong"),gIo=o("longformer"),hIo=o(" \u2014 "),UG=a("a"),pIo=o("LongformerForTokenClassification"),uIo=o(" (Longformer model)"),_Io=l(),p2=a("li"),hme=a("strong"),bIo=o("megatron-bert"),vIo=o(" \u2014 "),JG=a("a"),FIo=o("MegatronBertForTokenClassification"),TIo=o(" (MegatronBert model)"),MIo=l(),u2=a("li"),pme=a("strong"),EIo=o("mobilebert"),CIo=o(" \u2014 "),YG=a("a"),wIo=o("MobileBertForTokenClassification"),AIo=o(" (MobileBERT model)"),yIo=l(),_2=a("li"),ume=a("strong"),LIo=o("mpnet"),xIo=o(" \u2014 "),KG=a("a"),$Io=o("MPNetForTokenClassification"),kIo=o(" (MPNet model)"),SIo=l(),b2=a("li"),_me=a("strong"),RIo=o("nystromformer"),BIo=o(" \u2014 "),ZG=a("a"),PIo=o("NystromformerForTokenClassification"),IIo=o(" (Nystromformer model)"),qIo=l(),v2=a("li"),bme=a("strong"),NIo=o("qdqbert"),jIo=o(" \u2014 "),eO=a("a"),DIo=o("QDQBertForTokenClassification"),GIo=o(" (QDQBert model)"),OIo=l(),F2=a("li"),vme=a("strong"),VIo=o("rembert"),XIo=o(" \u2014 "),oO=a("a"),zIo=o("RemBertForTokenClassification"),QIo=o(" (RemBERT model)"),WIo=l(),T2=a("li"),Fme=a("strong"),HIo=o("roberta"),UIo=o(" \u2014 "),rO=a("a"),JIo=o("RobertaForTokenClassification"),YIo=o(" (RoBERTa model)"),KIo=l(),M2=a("li"),Tme=a("strong"),ZIo=o("roformer"),eqo=o(" \u2014 "),tO=a("a"),oqo=o("RoFormerForTokenClassification"),rqo=o(" (RoFormer model)"),tqo=l(),E2=a("li"),Mme=a("strong"),aqo=o("squeezebert"),nqo=o(" \u2014 "),aO=a("a"),sqo=o("SqueezeBertForTokenClassification"),lqo=o(" (SqueezeBERT model)"),iqo=l(),C2=a("li"),Eme=a("strong"),dqo=o("xlm"),cqo=o(" \u2014 "),nO=a("a"),fqo=o("XLMForTokenClassification"),mqo=o(" (XLM model)"),gqo=l(),w2=a("li"),Cme=a("strong"),hqo=o("xlm-roberta"),pqo=o(" \u2014 "),sO=a("a"),uqo=o("XLMRobertaForTokenClassification"),_qo=o(" (XLM-RoBERTa model)"),bqo=l(),A2=a("li"),wme=a("strong"),vqo=o("xlm-roberta-xl"),Fqo=o(" \u2014 "),lO=a("a"),Tqo=o("XLMRobertaXLForTokenClassification"),Mqo=o(" (XLM-RoBERTa-XL model)"),Eqo=l(),y2=a("li"),Ame=a("strong"),Cqo=o("xlnet"),wqo=o(" \u2014 "),iO=a("a"),Aqo=o("XLNetForTokenClassification"),yqo=o(" (XLNet model)"),Lqo=l(),L2=a("li"),yme=a("strong"),xqo=o("yoso"),$qo=o(" \u2014 "),dO=a("a"),kqo=o("YosoForTokenClassification"),Sqo=o(" (YOSO model)"),Rqo=l(),x2=a("p"),Bqo=o("The model is set in evaluation mode by default using "),Lme=a("code"),Pqo=o("model.eval()"),Iqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xme=a("code"),qqo=o("model.train()"),Nqo=l(),F($2.$$.fragment),OPe=l(),Ui=a("h2"),k2=a("a"),$me=a("span"),F(l0.$$.fragment),jqo=l(),kme=a("span"),Dqo=o("AutoModelForQuestionAnswering"),VPe=l(),qo=a("div"),F(i0.$$.fragment),Gqo=l(),Ji=a("p"),Oqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),cO=a("a"),Vqo=o("from_pretrained()"),Xqo=o(" class method or the "),fO=a("a"),zqo=o("from_config()"),Qqo=o(` class
method.`),Wqo=l(),d0=a("p"),Hqo=o("This class cannot be instantiated directly using "),Sme=a("code"),Uqo=o("__init__()"),Jqo=o(" (throws an error)."),Yqo=l(),ct=a("div"),F(c0.$$.fragment),Kqo=l(),Rme=a("p"),Zqo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),eNo=l(),Yi=a("p"),oNo=o(`Note:
Loading a model from its configuration file does `),Bme=a("strong"),rNo=o("not"),tNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mO=a("a"),aNo=o("from_pretrained()"),nNo=o(" to load the model weights."),sNo=l(),F(S2.$$.fragment),lNo=l(),to=a("div"),F(f0.$$.fragment),iNo=l(),Pme=a("p"),dNo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),cNo=l(),Pa=a("p"),fNo=o("The model class to instantiate is selected based on the "),Ime=a("code"),mNo=o("model_type"),gNo=o(` property of the config object (either
passed as an argument or loaded from `),qme=a("code"),hNo=o("pretrained_model_name_or_path"),pNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nme=a("code"),uNo=o("pretrained_model_name_or_path"),_No=o(":"),bNo=l(),O=a("ul"),R2=a("li"),jme=a("strong"),vNo=o("albert"),FNo=o(" \u2014 "),gO=a("a"),TNo=o("AlbertForQuestionAnswering"),MNo=o(" (ALBERT model)"),ENo=l(),B2=a("li"),Dme=a("strong"),CNo=o("bart"),wNo=o(" \u2014 "),hO=a("a"),ANo=o("BartForQuestionAnswering"),yNo=o(" (BART model)"),LNo=l(),P2=a("li"),Gme=a("strong"),xNo=o("bert"),$No=o(" \u2014 "),pO=a("a"),kNo=o("BertForQuestionAnswering"),SNo=o(" (BERT model)"),RNo=l(),I2=a("li"),Ome=a("strong"),BNo=o("big_bird"),PNo=o(" \u2014 "),uO=a("a"),INo=o("BigBirdForQuestionAnswering"),qNo=o(" (BigBird model)"),NNo=l(),q2=a("li"),Vme=a("strong"),jNo=o("bigbird_pegasus"),DNo=o(" \u2014 "),_O=a("a"),GNo=o("BigBirdPegasusForQuestionAnswering"),ONo=o(" (BigBirdPegasus model)"),VNo=l(),N2=a("li"),Xme=a("strong"),XNo=o("camembert"),zNo=o(" \u2014 "),bO=a("a"),QNo=o("CamembertForQuestionAnswering"),WNo=o(" (CamemBERT model)"),HNo=l(),j2=a("li"),zme=a("strong"),UNo=o("canine"),JNo=o(" \u2014 "),vO=a("a"),YNo=o("CanineForQuestionAnswering"),KNo=o(" (Canine model)"),ZNo=l(),D2=a("li"),Qme=a("strong"),ejo=o("convbert"),ojo=o(" \u2014 "),FO=a("a"),rjo=o("ConvBertForQuestionAnswering"),tjo=o(" (ConvBERT model)"),ajo=l(),G2=a("li"),Wme=a("strong"),njo=o("data2vec-text"),sjo=o(" \u2014 "),TO=a("a"),ljo=o("Data2VecTextForQuestionAnswering"),ijo=o(" (Data2VecText model)"),djo=l(),O2=a("li"),Hme=a("strong"),cjo=o("deberta"),fjo=o(" \u2014 "),MO=a("a"),mjo=o("DebertaForQuestionAnswering"),gjo=o(" (DeBERTa model)"),hjo=l(),V2=a("li"),Ume=a("strong"),pjo=o("deberta-v2"),ujo=o(" \u2014 "),EO=a("a"),_jo=o("DebertaV2ForQuestionAnswering"),bjo=o(" (DeBERTa-v2 model)"),vjo=l(),X2=a("li"),Jme=a("strong"),Fjo=o("distilbert"),Tjo=o(" \u2014 "),CO=a("a"),Mjo=o("DistilBertForQuestionAnswering"),Ejo=o(" (DistilBERT model)"),Cjo=l(),z2=a("li"),Yme=a("strong"),wjo=o("electra"),Ajo=o(" \u2014 "),wO=a("a"),yjo=o("ElectraForQuestionAnswering"),Ljo=o(" (ELECTRA model)"),xjo=l(),Q2=a("li"),Kme=a("strong"),$jo=o("flaubert"),kjo=o(" \u2014 "),AO=a("a"),Sjo=o("FlaubertForQuestionAnsweringSimple"),Rjo=o(" (FlauBERT model)"),Bjo=l(),W2=a("li"),Zme=a("strong"),Pjo=o("fnet"),Ijo=o(" \u2014 "),yO=a("a"),qjo=o("FNetForQuestionAnswering"),Njo=o(" (FNet model)"),jjo=l(),H2=a("li"),ege=a("strong"),Djo=o("funnel"),Gjo=o(" \u2014 "),LO=a("a"),Ojo=o("FunnelForQuestionAnswering"),Vjo=o(" (Funnel Transformer model)"),Xjo=l(),U2=a("li"),oge=a("strong"),zjo=o("gptj"),Qjo=o(" \u2014 "),xO=a("a"),Wjo=o("GPTJForQuestionAnswering"),Hjo=o(" (GPT-J model)"),Ujo=l(),J2=a("li"),rge=a("strong"),Jjo=o("ibert"),Yjo=o(" \u2014 "),$O=a("a"),Kjo=o("IBertForQuestionAnswering"),Zjo=o(" (I-BERT model)"),eDo=l(),Y2=a("li"),tge=a("strong"),oDo=o("layoutlmv2"),rDo=o(" \u2014 "),kO=a("a"),tDo=o("LayoutLMv2ForQuestionAnswering"),aDo=o(" (LayoutLMv2 model)"),nDo=l(),K2=a("li"),age=a("strong"),sDo=o("led"),lDo=o(" \u2014 "),SO=a("a"),iDo=o("LEDForQuestionAnswering"),dDo=o(" (LED model)"),cDo=l(),Z2=a("li"),nge=a("strong"),fDo=o("longformer"),mDo=o(" \u2014 "),RO=a("a"),gDo=o("LongformerForQuestionAnswering"),hDo=o(" (Longformer model)"),pDo=l(),ev=a("li"),sge=a("strong"),uDo=o("lxmert"),_Do=o(" \u2014 "),BO=a("a"),bDo=o("LxmertForQuestionAnswering"),vDo=o(" (LXMERT model)"),FDo=l(),ov=a("li"),lge=a("strong"),TDo=o("mbart"),MDo=o(" \u2014 "),PO=a("a"),EDo=o("MBartForQuestionAnswering"),CDo=o(" (mBART model)"),wDo=l(),rv=a("li"),ige=a("strong"),ADo=o("megatron-bert"),yDo=o(" \u2014 "),IO=a("a"),LDo=o("MegatronBertForQuestionAnswering"),xDo=o(" (MegatronBert model)"),$Do=l(),tv=a("li"),dge=a("strong"),kDo=o("mobilebert"),SDo=o(" \u2014 "),qO=a("a"),RDo=o("MobileBertForQuestionAnswering"),BDo=o(" (MobileBERT model)"),PDo=l(),av=a("li"),cge=a("strong"),IDo=o("mpnet"),qDo=o(" \u2014 "),NO=a("a"),NDo=o("MPNetForQuestionAnswering"),jDo=o(" (MPNet model)"),DDo=l(),nv=a("li"),fge=a("strong"),GDo=o("nystromformer"),ODo=o(" \u2014 "),jO=a("a"),VDo=o("NystromformerForQuestionAnswering"),XDo=o(" (Nystromformer model)"),zDo=l(),sv=a("li"),mge=a("strong"),QDo=o("qdqbert"),WDo=o(" \u2014 "),DO=a("a"),HDo=o("QDQBertForQuestionAnswering"),UDo=o(" (QDQBert model)"),JDo=l(),lv=a("li"),gge=a("strong"),YDo=o("reformer"),KDo=o(" \u2014 "),GO=a("a"),ZDo=o("ReformerForQuestionAnswering"),eGo=o(" (Reformer model)"),oGo=l(),iv=a("li"),hge=a("strong"),rGo=o("rembert"),tGo=o(" \u2014 "),OO=a("a"),aGo=o("RemBertForQuestionAnswering"),nGo=o(" (RemBERT model)"),sGo=l(),dv=a("li"),pge=a("strong"),lGo=o("roberta"),iGo=o(" \u2014 "),VO=a("a"),dGo=o("RobertaForQuestionAnswering"),cGo=o(" (RoBERTa model)"),fGo=l(),cv=a("li"),uge=a("strong"),mGo=o("roformer"),gGo=o(" \u2014 "),XO=a("a"),hGo=o("RoFormerForQuestionAnswering"),pGo=o(" (RoFormer model)"),uGo=l(),fv=a("li"),_ge=a("strong"),_Go=o("splinter"),bGo=o(" \u2014 "),zO=a("a"),vGo=o("SplinterForQuestionAnswering"),FGo=o(" (Splinter model)"),TGo=l(),mv=a("li"),bge=a("strong"),MGo=o("squeezebert"),EGo=o(" \u2014 "),QO=a("a"),CGo=o("SqueezeBertForQuestionAnswering"),wGo=o(" (SqueezeBERT model)"),AGo=l(),gv=a("li"),vge=a("strong"),yGo=o("xlm"),LGo=o(" \u2014 "),WO=a("a"),xGo=o("XLMForQuestionAnsweringSimple"),$Go=o(" (XLM model)"),kGo=l(),hv=a("li"),Fge=a("strong"),SGo=o("xlm-roberta"),RGo=o(" \u2014 "),HO=a("a"),BGo=o("XLMRobertaForQuestionAnswering"),PGo=o(" (XLM-RoBERTa model)"),IGo=l(),pv=a("li"),Tge=a("strong"),qGo=o("xlm-roberta-xl"),NGo=o(" \u2014 "),UO=a("a"),jGo=o("XLMRobertaXLForQuestionAnswering"),DGo=o(" (XLM-RoBERTa-XL model)"),GGo=l(),uv=a("li"),Mge=a("strong"),OGo=o("xlnet"),VGo=o(" \u2014 "),JO=a("a"),XGo=o("XLNetForQuestionAnsweringSimple"),zGo=o(" (XLNet model)"),QGo=l(),_v=a("li"),Ege=a("strong"),WGo=o("yoso"),HGo=o(" \u2014 "),YO=a("a"),UGo=o("YosoForQuestionAnswering"),JGo=o(" (YOSO model)"),YGo=l(),bv=a("p"),KGo=o("The model is set in evaluation mode by default using "),Cge=a("code"),ZGo=o("model.eval()"),eOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wge=a("code"),oOo=o("model.train()"),rOo=l(),F(vv.$$.fragment),XPe=l(),Ki=a("h2"),Fv=a("a"),Age=a("span"),F(m0.$$.fragment),tOo=l(),yge=a("span"),aOo=o("AutoModelForTableQuestionAnswering"),zPe=l(),No=a("div"),F(g0.$$.fragment),nOo=l(),Zi=a("p"),sOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),KO=a("a"),lOo=o("from_pretrained()"),iOo=o(" class method or the "),ZO=a("a"),dOo=o("from_config()"),cOo=o(` class
method.`),fOo=l(),h0=a("p"),mOo=o("This class cannot be instantiated directly using "),Lge=a("code"),gOo=o("__init__()"),hOo=o(" (throws an error)."),pOo=l(),ft=a("div"),F(p0.$$.fragment),uOo=l(),xge=a("p"),_Oo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),bOo=l(),ed=a("p"),vOo=o(`Note:
Loading a model from its configuration file does `),$ge=a("strong"),FOo=o("not"),TOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eV=a("a"),MOo=o("from_pretrained()"),EOo=o(" to load the model weights."),COo=l(),F(Tv.$$.fragment),wOo=l(),ao=a("div"),F(u0.$$.fragment),AOo=l(),kge=a("p"),yOo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),LOo=l(),Ia=a("p"),xOo=o("The model class to instantiate is selected based on the "),Sge=a("code"),$Oo=o("model_type"),kOo=o(` property of the config object (either
passed as an argument or loaded from `),Rge=a("code"),SOo=o("pretrained_model_name_or_path"),ROo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bge=a("code"),BOo=o("pretrained_model_name_or_path"),POo=o(":"),IOo=l(),Pge=a("ul"),Mv=a("li"),Ige=a("strong"),qOo=o("tapas"),NOo=o(" \u2014 "),oV=a("a"),jOo=o("TapasForQuestionAnswering"),DOo=o(" (TAPAS model)"),GOo=l(),Ev=a("p"),OOo=o("The model is set in evaluation mode by default using "),qge=a("code"),VOo=o("model.eval()"),XOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nge=a("code"),zOo=o("model.train()"),QOo=l(),F(Cv.$$.fragment),QPe=l(),od=a("h2"),wv=a("a"),jge=a("span"),F(_0.$$.fragment),WOo=l(),Dge=a("span"),HOo=o("AutoModelForImageClassification"),WPe=l(),jo=a("div"),F(b0.$$.fragment),UOo=l(),rd=a("p"),JOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rV=a("a"),YOo=o("from_pretrained()"),KOo=o(" class method or the "),tV=a("a"),ZOo=o("from_config()"),eVo=o(` class
method.`),oVo=l(),v0=a("p"),rVo=o("This class cannot be instantiated directly using "),Gge=a("code"),tVo=o("__init__()"),aVo=o(" (throws an error)."),nVo=l(),mt=a("div"),F(F0.$$.fragment),sVo=l(),Oge=a("p"),lVo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),iVo=l(),td=a("p"),dVo=o(`Note:
Loading a model from its configuration file does `),Vge=a("strong"),cVo=o("not"),fVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aV=a("a"),mVo=o("from_pretrained()"),gVo=o(" to load the model weights."),hVo=l(),F(Av.$$.fragment),pVo=l(),no=a("div"),F(T0.$$.fragment),uVo=l(),Xge=a("p"),_Vo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),bVo=l(),qa=a("p"),vVo=o("The model class to instantiate is selected based on the "),zge=a("code"),FVo=o("model_type"),TVo=o(` property of the config object (either
passed as an argument or loaded from `),Qge=a("code"),MVo=o("pretrained_model_name_or_path"),EVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wge=a("code"),CVo=o("pretrained_model_name_or_path"),wVo=o(":"),AVo=l(),ve=a("ul"),yv=a("li"),Hge=a("strong"),yVo=o("beit"),LVo=o(" \u2014 "),nV=a("a"),xVo=o("BeitForImageClassification"),$Vo=o(" (BEiT model)"),kVo=l(),Lv=a("li"),Uge=a("strong"),SVo=o("convnext"),RVo=o(" \u2014 "),sV=a("a"),BVo=o("ConvNextForImageClassification"),PVo=o(" (ConvNext model)"),IVo=l(),xv=a("li"),Jge=a("strong"),qVo=o("data2vec-vision"),NVo=o(" \u2014 "),lV=a("a"),jVo=o("Data2VecVisionForImageClassification"),DVo=o(" (Data2VecVision model)"),GVo=l(),Bs=a("li"),Yge=a("strong"),OVo=o("deit"),VVo=o(" \u2014 "),iV=a("a"),XVo=o("DeiTForImageClassification"),zVo=o(" or "),dV=a("a"),QVo=o("DeiTForImageClassificationWithTeacher"),WVo=o(" (DeiT model)"),HVo=l(),$v=a("li"),Kge=a("strong"),UVo=o("imagegpt"),JVo=o(" \u2014 "),cV=a("a"),YVo=o("ImageGPTForImageClassification"),KVo=o(" (ImageGPT model)"),ZVo=l(),gt=a("li"),Zge=a("strong"),eXo=o("perceiver"),oXo=o(" \u2014 "),fV=a("a"),rXo=o("PerceiverForImageClassificationLearned"),tXo=o(" or "),mV=a("a"),aXo=o("PerceiverForImageClassificationFourier"),nXo=o(" or "),gV=a("a"),sXo=o("PerceiverForImageClassificationConvProcessing"),lXo=o(" (Perceiver model)"),iXo=l(),kv=a("li"),ehe=a("strong"),dXo=o("poolformer"),cXo=o(" \u2014 "),hV=a("a"),fXo=o("PoolFormerForImageClassification"),mXo=o(" (PoolFormer model)"),gXo=l(),Sv=a("li"),ohe=a("strong"),hXo=o("regnet"),pXo=o(" \u2014 "),pV=a("a"),uXo=o("RegNetForImageClassification"),_Xo=o(" (RegNet model)"),bXo=l(),Rv=a("li"),rhe=a("strong"),vXo=o("resnet"),FXo=o(" \u2014 "),uV=a("a"),TXo=o("ResNetForImageClassification"),MXo=o(" (ResNet model)"),EXo=l(),Bv=a("li"),the=a("strong"),CXo=o("segformer"),wXo=o(" \u2014 "),_V=a("a"),AXo=o("SegformerForImageClassification"),yXo=o(" (SegFormer model)"),LXo=l(),Pv=a("li"),ahe=a("strong"),xXo=o("swin"),$Xo=o(" \u2014 "),bV=a("a"),kXo=o("SwinForImageClassification"),SXo=o(" (Swin model)"),RXo=l(),Iv=a("li"),nhe=a("strong"),BXo=o("van"),PXo=o(" \u2014 "),vV=a("a"),IXo=o("VanForImageClassification"),qXo=o(" (VAN model)"),NXo=l(),qv=a("li"),she=a("strong"),jXo=o("vit"),DXo=o(" \u2014 "),FV=a("a"),GXo=o("ViTForImageClassification"),OXo=o(" (ViT model)"),VXo=l(),Nv=a("p"),XXo=o("The model is set in evaluation mode by default using "),lhe=a("code"),zXo=o("model.eval()"),QXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ihe=a("code"),WXo=o("model.train()"),HXo=l(),F(jv.$$.fragment),HPe=l(),ad=a("h2"),Dv=a("a"),dhe=a("span"),F(M0.$$.fragment),UXo=l(),che=a("span"),JXo=o("AutoModelForVision2Seq"),UPe=l(),Do=a("div"),F(E0.$$.fragment),YXo=l(),nd=a("p"),KXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),TV=a("a"),ZXo=o("from_pretrained()"),ezo=o(" class method or the "),MV=a("a"),ozo=o("from_config()"),rzo=o(` class
method.`),tzo=l(),C0=a("p"),azo=o("This class cannot be instantiated directly using "),fhe=a("code"),nzo=o("__init__()"),szo=o(" (throws an error)."),lzo=l(),ht=a("div"),F(w0.$$.fragment),izo=l(),mhe=a("p"),dzo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),czo=l(),sd=a("p"),fzo=o(`Note:
Loading a model from its configuration file does `),ghe=a("strong"),mzo=o("not"),gzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EV=a("a"),hzo=o("from_pretrained()"),pzo=o(" to load the model weights."),uzo=l(),F(Gv.$$.fragment),_zo=l(),so=a("div"),F(A0.$$.fragment),bzo=l(),hhe=a("p"),vzo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Fzo=l(),Na=a("p"),Tzo=o("The model class to instantiate is selected based on the "),phe=a("code"),Mzo=o("model_type"),Ezo=o(` property of the config object (either
passed as an argument or loaded from `),uhe=a("code"),Czo=o("pretrained_model_name_or_path"),wzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_he=a("code"),Azo=o("pretrained_model_name_or_path"),yzo=o(":"),Lzo=l(),bhe=a("ul"),Ov=a("li"),vhe=a("strong"),xzo=o("vision-encoder-decoder"),$zo=o(" \u2014 "),CV=a("a"),kzo=o("VisionEncoderDecoderModel"),Szo=o(" (Vision Encoder decoder model)"),Rzo=l(),Vv=a("p"),Bzo=o("The model is set in evaluation mode by default using "),Fhe=a("code"),Pzo=o("model.eval()"),Izo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),The=a("code"),qzo=o("model.train()"),Nzo=l(),F(Xv.$$.fragment),JPe=l(),ld=a("h2"),zv=a("a"),Mhe=a("span"),F(y0.$$.fragment),jzo=l(),Ehe=a("span"),Dzo=o("AutoModelForAudioClassification"),YPe=l(),Go=a("div"),F(L0.$$.fragment),Gzo=l(),id=a("p"),Ozo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),wV=a("a"),Vzo=o("from_pretrained()"),Xzo=o(" class method or the "),AV=a("a"),zzo=o("from_config()"),Qzo=o(` class
method.`),Wzo=l(),x0=a("p"),Hzo=o("This class cannot be instantiated directly using "),Che=a("code"),Uzo=o("__init__()"),Jzo=o(" (throws an error)."),Yzo=l(),pt=a("div"),F($0.$$.fragment),Kzo=l(),whe=a("p"),Zzo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),eQo=l(),dd=a("p"),oQo=o(`Note:
Loading a model from its configuration file does `),Ahe=a("strong"),rQo=o("not"),tQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yV=a("a"),aQo=o("from_pretrained()"),nQo=o(" to load the model weights."),sQo=l(),F(Qv.$$.fragment),lQo=l(),lo=a("div"),F(k0.$$.fragment),iQo=l(),yhe=a("p"),dQo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),cQo=l(),ja=a("p"),fQo=o("The model class to instantiate is selected based on the "),Lhe=a("code"),mQo=o("model_type"),gQo=o(` property of the config object (either
passed as an argument or loaded from `),xhe=a("code"),hQo=o("pretrained_model_name_or_path"),pQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$he=a("code"),uQo=o("pretrained_model_name_or_path"),_Qo=o(":"),bQo=l(),Ne=a("ul"),Wv=a("li"),khe=a("strong"),vQo=o("data2vec-audio"),FQo=o(" \u2014 "),LV=a("a"),TQo=o("Data2VecAudioForSequenceClassification"),MQo=o(" (Data2VecAudio model)"),EQo=l(),Hv=a("li"),She=a("strong"),CQo=o("hubert"),wQo=o(" \u2014 "),xV=a("a"),AQo=o("HubertForSequenceClassification"),yQo=o(" (Hubert model)"),LQo=l(),Uv=a("li"),Rhe=a("strong"),xQo=o("sew"),$Qo=o(" \u2014 "),$V=a("a"),kQo=o("SEWForSequenceClassification"),SQo=o(" (SEW model)"),RQo=l(),Jv=a("li"),Bhe=a("strong"),BQo=o("sew-d"),PQo=o(" \u2014 "),kV=a("a"),IQo=o("SEWDForSequenceClassification"),qQo=o(" (SEW-D model)"),NQo=l(),Yv=a("li"),Phe=a("strong"),jQo=o("unispeech"),DQo=o(" \u2014 "),SV=a("a"),GQo=o("UniSpeechForSequenceClassification"),OQo=o(" (UniSpeech model)"),VQo=l(),Kv=a("li"),Ihe=a("strong"),XQo=o("unispeech-sat"),zQo=o(" \u2014 "),RV=a("a"),QQo=o("UniSpeechSatForSequenceClassification"),WQo=o(" (UniSpeechSat model)"),HQo=l(),Zv=a("li"),qhe=a("strong"),UQo=o("wav2vec2"),JQo=o(" \u2014 "),BV=a("a"),YQo=o("Wav2Vec2ForSequenceClassification"),KQo=o(" (Wav2Vec2 model)"),ZQo=l(),eF=a("li"),Nhe=a("strong"),eWo=o("wavlm"),oWo=o(" \u2014 "),PV=a("a"),rWo=o("WavLMForSequenceClassification"),tWo=o(" (WavLM model)"),aWo=l(),oF=a("p"),nWo=o("The model is set in evaluation mode by default using "),jhe=a("code"),sWo=o("model.eval()"),lWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dhe=a("code"),iWo=o("model.train()"),dWo=l(),F(rF.$$.fragment),KPe=l(),cd=a("h2"),tF=a("a"),Ghe=a("span"),F(S0.$$.fragment),cWo=l(),Ohe=a("span"),fWo=o("AutoModelForAudioFrameClassification"),ZPe=l(),Oo=a("div"),F(R0.$$.fragment),mWo=l(),fd=a("p"),gWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),IV=a("a"),hWo=o("from_pretrained()"),pWo=o(" class method or the "),qV=a("a"),uWo=o("from_config()"),_Wo=o(` class
method.`),bWo=l(),B0=a("p"),vWo=o("This class cannot be instantiated directly using "),Vhe=a("code"),FWo=o("__init__()"),TWo=o(" (throws an error)."),MWo=l(),ut=a("div"),F(P0.$$.fragment),EWo=l(),Xhe=a("p"),CWo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),wWo=l(),md=a("p"),AWo=o(`Note:
Loading a model from its configuration file does `),zhe=a("strong"),yWo=o("not"),LWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NV=a("a"),xWo=o("from_pretrained()"),$Wo=o(" to load the model weights."),kWo=l(),F(aF.$$.fragment),SWo=l(),io=a("div"),F(I0.$$.fragment),RWo=l(),Qhe=a("p"),BWo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),PWo=l(),Da=a("p"),IWo=o("The model class to instantiate is selected based on the "),Whe=a("code"),qWo=o("model_type"),NWo=o(` property of the config object (either
passed as an argument or loaded from `),Hhe=a("code"),jWo=o("pretrained_model_name_or_path"),DWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uhe=a("code"),GWo=o("pretrained_model_name_or_path"),OWo=o(":"),VWo=l(),Ga=a("ul"),nF=a("li"),Jhe=a("strong"),XWo=o("data2vec-audio"),zWo=o(" \u2014 "),jV=a("a"),QWo=o("Data2VecAudioForAudioFrameClassification"),WWo=o(" (Data2VecAudio model)"),HWo=l(),sF=a("li"),Yhe=a("strong"),UWo=o("unispeech-sat"),JWo=o(" \u2014 "),DV=a("a"),YWo=o("UniSpeechSatForAudioFrameClassification"),KWo=o(" (UniSpeechSat model)"),ZWo=l(),lF=a("li"),Khe=a("strong"),eHo=o("wav2vec2"),oHo=o(" \u2014 "),GV=a("a"),rHo=o("Wav2Vec2ForAudioFrameClassification"),tHo=o(" (Wav2Vec2 model)"),aHo=l(),iF=a("li"),Zhe=a("strong"),nHo=o("wavlm"),sHo=o(" \u2014 "),OV=a("a"),lHo=o("WavLMForAudioFrameClassification"),iHo=o(" (WavLM model)"),dHo=l(),dF=a("p"),cHo=o("The model is set in evaluation mode by default using "),epe=a("code"),fHo=o("model.eval()"),mHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ope=a("code"),gHo=o("model.train()"),hHo=l(),F(cF.$$.fragment),eIe=l(),gd=a("h2"),fF=a("a"),rpe=a("span"),F(q0.$$.fragment),pHo=l(),tpe=a("span"),uHo=o("AutoModelForCTC"),oIe=l(),Vo=a("div"),F(N0.$$.fragment),_Ho=l(),hd=a("p"),bHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),VV=a("a"),vHo=o("from_pretrained()"),FHo=o(" class method or the "),XV=a("a"),THo=o("from_config()"),MHo=o(` class
method.`),EHo=l(),j0=a("p"),CHo=o("This class cannot be instantiated directly using "),ape=a("code"),wHo=o("__init__()"),AHo=o(" (throws an error)."),yHo=l(),_t=a("div"),F(D0.$$.fragment),LHo=l(),npe=a("p"),xHo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),$Ho=l(),pd=a("p"),kHo=o(`Note:
Loading a model from its configuration file does `),spe=a("strong"),SHo=o("not"),RHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zV=a("a"),BHo=o("from_pretrained()"),PHo=o(" to load the model weights."),IHo=l(),F(mF.$$.fragment),qHo=l(),co=a("div"),F(G0.$$.fragment),NHo=l(),lpe=a("p"),jHo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),DHo=l(),Oa=a("p"),GHo=o("The model class to instantiate is selected based on the "),ipe=a("code"),OHo=o("model_type"),VHo=o(` property of the config object (either
passed as an argument or loaded from `),dpe=a("code"),XHo=o("pretrained_model_name_or_path"),zHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cpe=a("code"),QHo=o("pretrained_model_name_or_path"),WHo=o(":"),HHo=l(),je=a("ul"),gF=a("li"),fpe=a("strong"),UHo=o("data2vec-audio"),JHo=o(" \u2014 "),QV=a("a"),YHo=o("Data2VecAudioForCTC"),KHo=o(" (Data2VecAudio model)"),ZHo=l(),hF=a("li"),mpe=a("strong"),eUo=o("hubert"),oUo=o(" \u2014 "),WV=a("a"),rUo=o("HubertForCTC"),tUo=o(" (Hubert model)"),aUo=l(),pF=a("li"),gpe=a("strong"),nUo=o("sew"),sUo=o(" \u2014 "),HV=a("a"),lUo=o("SEWForCTC"),iUo=o(" (SEW model)"),dUo=l(),uF=a("li"),hpe=a("strong"),cUo=o("sew-d"),fUo=o(" \u2014 "),UV=a("a"),mUo=o("SEWDForCTC"),gUo=o(" (SEW-D model)"),hUo=l(),_F=a("li"),ppe=a("strong"),pUo=o("unispeech"),uUo=o(" \u2014 "),JV=a("a"),_Uo=o("UniSpeechForCTC"),bUo=o(" (UniSpeech model)"),vUo=l(),bF=a("li"),upe=a("strong"),FUo=o("unispeech-sat"),TUo=o(" \u2014 "),YV=a("a"),MUo=o("UniSpeechSatForCTC"),EUo=o(" (UniSpeechSat model)"),CUo=l(),vF=a("li"),_pe=a("strong"),wUo=o("wav2vec2"),AUo=o(" \u2014 "),KV=a("a"),yUo=o("Wav2Vec2ForCTC"),LUo=o(" (Wav2Vec2 model)"),xUo=l(),FF=a("li"),bpe=a("strong"),$Uo=o("wavlm"),kUo=o(" \u2014 "),ZV=a("a"),SUo=o("WavLMForCTC"),RUo=o(" (WavLM model)"),BUo=l(),TF=a("p"),PUo=o("The model is set in evaluation mode by default using "),vpe=a("code"),IUo=o("model.eval()"),qUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fpe=a("code"),NUo=o("model.train()"),jUo=l(),F(MF.$$.fragment),rIe=l(),ud=a("h2"),EF=a("a"),Tpe=a("span"),F(O0.$$.fragment),DUo=l(),Mpe=a("span"),GUo=o("AutoModelForSpeechSeq2Seq"),tIe=l(),Xo=a("div"),F(V0.$$.fragment),OUo=l(),_d=a("p"),VUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),eX=a("a"),XUo=o("from_pretrained()"),zUo=o(" class method or the "),oX=a("a"),QUo=o("from_config()"),WUo=o(` class
method.`),HUo=l(),X0=a("p"),UUo=o("This class cannot be instantiated directly using "),Epe=a("code"),JUo=o("__init__()"),YUo=o(" (throws an error)."),KUo=l(),bt=a("div"),F(z0.$$.fragment),ZUo=l(),Cpe=a("p"),eJo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),oJo=l(),bd=a("p"),rJo=o(`Note:
Loading a model from its configuration file does `),wpe=a("strong"),tJo=o("not"),aJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rX=a("a"),nJo=o("from_pretrained()"),sJo=o(" to load the model weights."),lJo=l(),F(CF.$$.fragment),iJo=l(),fo=a("div"),F(Q0.$$.fragment),dJo=l(),Ape=a("p"),cJo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),fJo=l(),Va=a("p"),mJo=o("The model class to instantiate is selected based on the "),ype=a("code"),gJo=o("model_type"),hJo=o(` property of the config object (either
passed as an argument or loaded from `),Lpe=a("code"),pJo=o("pretrained_model_name_or_path"),uJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xpe=a("code"),_Jo=o("pretrained_model_name_or_path"),bJo=o(":"),vJo=l(),W0=a("ul"),wF=a("li"),$pe=a("strong"),FJo=o("speech-encoder-decoder"),TJo=o(" \u2014 "),tX=a("a"),MJo=o("SpeechEncoderDecoderModel"),EJo=o(" (Speech Encoder decoder model)"),CJo=l(),AF=a("li"),kpe=a("strong"),wJo=o("speech_to_text"),AJo=o(" \u2014 "),aX=a("a"),yJo=o("Speech2TextForConditionalGeneration"),LJo=o(" (Speech2Text model)"),xJo=l(),yF=a("p"),$Jo=o("The model is set in evaluation mode by default using "),Spe=a("code"),kJo=o("model.eval()"),SJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rpe=a("code"),RJo=o("model.train()"),BJo=l(),F(LF.$$.fragment),aIe=l(),vd=a("h2"),xF=a("a"),Bpe=a("span"),F(H0.$$.fragment),PJo=l(),Ppe=a("span"),IJo=o("AutoModelForAudioXVector"),nIe=l(),zo=a("div"),F(U0.$$.fragment),qJo=l(),Fd=a("p"),NJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),nX=a("a"),jJo=o("from_pretrained()"),DJo=o(" class method or the "),sX=a("a"),GJo=o("from_config()"),OJo=o(` class
method.`),VJo=l(),J0=a("p"),XJo=o("This class cannot be instantiated directly using "),Ipe=a("code"),zJo=o("__init__()"),QJo=o(" (throws an error)."),WJo=l(),vt=a("div"),F(Y0.$$.fragment),HJo=l(),qpe=a("p"),UJo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),JJo=l(),Td=a("p"),YJo=o(`Note:
Loading a model from its configuration file does `),Npe=a("strong"),KJo=o("not"),ZJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lX=a("a"),eYo=o("from_pretrained()"),oYo=o(" to load the model weights."),rYo=l(),F($F.$$.fragment),tYo=l(),mo=a("div"),F(K0.$$.fragment),aYo=l(),jpe=a("p"),nYo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),sYo=l(),Xa=a("p"),lYo=o("The model class to instantiate is selected based on the "),Dpe=a("code"),iYo=o("model_type"),dYo=o(` property of the config object (either
passed as an argument or loaded from `),Gpe=a("code"),cYo=o("pretrained_model_name_or_path"),fYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ope=a("code"),mYo=o("pretrained_model_name_or_path"),gYo=o(":"),hYo=l(),za=a("ul"),kF=a("li"),Vpe=a("strong"),pYo=o("data2vec-audio"),uYo=o(" \u2014 "),iX=a("a"),_Yo=o("Data2VecAudioForXVector"),bYo=o(" (Data2VecAudio model)"),vYo=l(),SF=a("li"),Xpe=a("strong"),FYo=o("unispeech-sat"),TYo=o(" \u2014 "),dX=a("a"),MYo=o("UniSpeechSatForXVector"),EYo=o(" (UniSpeechSat model)"),CYo=l(),RF=a("li"),zpe=a("strong"),wYo=o("wav2vec2"),AYo=o(" \u2014 "),cX=a("a"),yYo=o("Wav2Vec2ForXVector"),LYo=o(" (Wav2Vec2 model)"),xYo=l(),BF=a("li"),Qpe=a("strong"),$Yo=o("wavlm"),kYo=o(" \u2014 "),fX=a("a"),SYo=o("WavLMForXVector"),RYo=o(" (WavLM model)"),BYo=l(),PF=a("p"),PYo=o("The model is set in evaluation mode by default using "),Wpe=a("code"),IYo=o("model.eval()"),qYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hpe=a("code"),NYo=o("model.train()"),jYo=l(),F(IF.$$.fragment),sIe=l(),Md=a("h2"),qF=a("a"),Upe=a("span"),F(Z0.$$.fragment),DYo=l(),Jpe=a("span"),GYo=o("AutoModelForMaskedImageModeling"),lIe=l(),Qo=a("div"),F(ey.$$.fragment),OYo=l(),Ed=a("p"),VYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),mX=a("a"),XYo=o("from_pretrained()"),zYo=o(" class method or the "),gX=a("a"),QYo=o("from_config()"),WYo=o(` class
method.`),HYo=l(),oy=a("p"),UYo=o("This class cannot be instantiated directly using "),Ype=a("code"),JYo=o("__init__()"),YYo=o(" (throws an error)."),KYo=l(),Ft=a("div"),F(ry.$$.fragment),ZYo=l(),Kpe=a("p"),eKo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),oKo=l(),Cd=a("p"),rKo=o(`Note:
Loading a model from its configuration file does `),Zpe=a("strong"),tKo=o("not"),aKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hX=a("a"),nKo=o("from_pretrained()"),sKo=o(" to load the model weights."),lKo=l(),F(NF.$$.fragment),iKo=l(),go=a("div"),F(ty.$$.fragment),dKo=l(),eue=a("p"),cKo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),fKo=l(),Qa=a("p"),mKo=o("The model class to instantiate is selected based on the "),oue=a("code"),gKo=o("model_type"),hKo=o(` property of the config object (either
passed as an argument or loaded from `),rue=a("code"),pKo=o("pretrained_model_name_or_path"),uKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tue=a("code"),_Ko=o("pretrained_model_name_or_path"),bKo=o(":"),vKo=l(),wd=a("ul"),jF=a("li"),aue=a("strong"),FKo=o("deit"),TKo=o(" \u2014 "),pX=a("a"),MKo=o("DeiTForMaskedImageModeling"),EKo=o(" (DeiT model)"),CKo=l(),DF=a("li"),nue=a("strong"),wKo=o("swin"),AKo=o(" \u2014 "),uX=a("a"),yKo=o("SwinForMaskedImageModeling"),LKo=o(" (Swin model)"),xKo=l(),GF=a("li"),sue=a("strong"),$Ko=o("vit"),kKo=o(" \u2014 "),_X=a("a"),SKo=o("ViTForMaskedImageModeling"),RKo=o(" (ViT model)"),BKo=l(),OF=a("p"),PKo=o("The model is set in evaluation mode by default using "),lue=a("code"),IKo=o("model.eval()"),qKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iue=a("code"),NKo=o("model.train()"),jKo=l(),F(VF.$$.fragment),iIe=l(),Ad=a("h2"),XF=a("a"),due=a("span"),F(ay.$$.fragment),DKo=l(),cue=a("span"),GKo=o("AutoModelForObjectDetection"),dIe=l(),Wo=a("div"),F(ny.$$.fragment),OKo=l(),yd=a("p"),VKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),bX=a("a"),XKo=o("from_pretrained()"),zKo=o(" class method or the "),vX=a("a"),QKo=o("from_config()"),WKo=o(` class
method.`),HKo=l(),sy=a("p"),UKo=o("This class cannot be instantiated directly using "),fue=a("code"),JKo=o("__init__()"),YKo=o(" (throws an error)."),KKo=l(),Tt=a("div"),F(ly.$$.fragment),ZKo=l(),mue=a("p"),eZo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),oZo=l(),Ld=a("p"),rZo=o(`Note:
Loading a model from its configuration file does `),gue=a("strong"),tZo=o("not"),aZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FX=a("a"),nZo=o("from_pretrained()"),sZo=o(" to load the model weights."),lZo=l(),F(zF.$$.fragment),iZo=l(),ho=a("div"),F(iy.$$.fragment),dZo=l(),hue=a("p"),cZo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),fZo=l(),Wa=a("p"),mZo=o("The model class to instantiate is selected based on the "),pue=a("code"),gZo=o("model_type"),hZo=o(` property of the config object (either
passed as an argument or loaded from `),uue=a("code"),pZo=o("pretrained_model_name_or_path"),uZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ue=a("code"),_Zo=o("pretrained_model_name_or_path"),bZo=o(":"),vZo=l(),dy=a("ul"),QF=a("li"),bue=a("strong"),FZo=o("detr"),TZo=o(" \u2014 "),TX=a("a"),MZo=o("DetrForObjectDetection"),EZo=o(" (DETR model)"),CZo=l(),WF=a("li"),vue=a("strong"),wZo=o("yolos"),AZo=o(" \u2014 "),MX=a("a"),yZo=o("YolosForObjectDetection"),LZo=o(" (YOLOS model)"),xZo=l(),HF=a("p"),$Zo=o("The model is set in evaluation mode by default using "),Fue=a("code"),kZo=o("model.eval()"),SZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tue=a("code"),RZo=o("model.train()"),BZo=l(),F(UF.$$.fragment),cIe=l(),xd=a("h2"),JF=a("a"),Mue=a("span"),F(cy.$$.fragment),PZo=l(),Eue=a("span"),IZo=o("AutoModelForImageSegmentation"),fIe=l(),Ho=a("div"),F(fy.$$.fragment),qZo=l(),$d=a("p"),NZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),EX=a("a"),jZo=o("from_pretrained()"),DZo=o(" class method or the "),CX=a("a"),GZo=o("from_config()"),OZo=o(` class
method.`),VZo=l(),my=a("p"),XZo=o("This class cannot be instantiated directly using "),Cue=a("code"),zZo=o("__init__()"),QZo=o(" (throws an error)."),WZo=l(),Mt=a("div"),F(gy.$$.fragment),HZo=l(),wue=a("p"),UZo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),JZo=l(),kd=a("p"),YZo=o(`Note:
Loading a model from its configuration file does `),Aue=a("strong"),KZo=o("not"),ZZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wX=a("a"),eer=o("from_pretrained()"),oer=o(" to load the model weights."),rer=l(),F(YF.$$.fragment),ter=l(),po=a("div"),F(hy.$$.fragment),aer=l(),yue=a("p"),ner=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),ser=l(),Ha=a("p"),ler=o("The model class to instantiate is selected based on the "),Lue=a("code"),ier=o("model_type"),der=o(` property of the config object (either
passed as an argument or loaded from `),xue=a("code"),cer=o("pretrained_model_name_or_path"),fer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ue=a("code"),mer=o("pretrained_model_name_or_path"),ger=o(":"),her=l(),kue=a("ul"),KF=a("li"),Sue=a("strong"),per=o("detr"),uer=o(" \u2014 "),AX=a("a"),_er=o("DetrForSegmentation"),ber=o(" (DETR model)"),ver=l(),ZF=a("p"),Fer=o("The model is set in evaluation mode by default using "),Rue=a("code"),Ter=o("model.eval()"),Mer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bue=a("code"),Eer=o("model.train()"),Cer=l(),F(e6.$$.fragment),mIe=l(),Sd=a("h2"),o6=a("a"),Pue=a("span"),F(py.$$.fragment),wer=l(),Iue=a("span"),Aer=o("AutoModelForSemanticSegmentation"),gIe=l(),Uo=a("div"),F(uy.$$.fragment),yer=l(),Rd=a("p"),Ler=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),yX=a("a"),xer=o("from_pretrained()"),$er=o(" class method or the "),LX=a("a"),ker=o("from_config()"),Ser=o(` class
method.`),Rer=l(),_y=a("p"),Ber=o("This class cannot be instantiated directly using "),que=a("code"),Per=o("__init__()"),Ier=o(" (throws an error)."),qer=l(),Et=a("div"),F(by.$$.fragment),Ner=l(),Nue=a("p"),jer=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Der=l(),Bd=a("p"),Ger=o(`Note:
Loading a model from its configuration file does `),jue=a("strong"),Oer=o("not"),Ver=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xX=a("a"),Xer=o("from_pretrained()"),zer=o(" to load the model weights."),Qer=l(),F(r6.$$.fragment),Wer=l(),uo=a("div"),F(vy.$$.fragment),Her=l(),Due=a("p"),Uer=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Jer=l(),Ua=a("p"),Yer=o("The model class to instantiate is selected based on the "),Gue=a("code"),Ker=o("model_type"),Zer=o(` property of the config object (either
passed as an argument or loaded from `),Oue=a("code"),eor=o("pretrained_model_name_or_path"),oor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vue=a("code"),ror=o("pretrained_model_name_or_path"),tor=o(":"),aor=l(),Ja=a("ul"),t6=a("li"),Xue=a("strong"),nor=o("beit"),sor=o(" \u2014 "),$X=a("a"),lor=o("BeitForSemanticSegmentation"),ior=o(" (BEiT model)"),dor=l(),a6=a("li"),zue=a("strong"),cor=o("data2vec-vision"),mor=o(" \u2014 "),kX=a("a"),gor=o("Data2VecVisionForSemanticSegmentation"),hor=o(" (Data2VecVision model)"),por=l(),n6=a("li"),Que=a("strong"),uor=o("dpt"),_or=o(" \u2014 "),SX=a("a"),bor=o("DPTForSemanticSegmentation"),vor=o(" (DPT model)"),For=l(),s6=a("li"),Wue=a("strong"),Tor=o("segformer"),Mor=o(" \u2014 "),RX=a("a"),Eor=o("SegformerForSemanticSegmentation"),Cor=o(" (SegFormer model)"),wor=l(),l6=a("p"),Aor=o("The model is set in evaluation mode by default using "),Hue=a("code"),yor=o("model.eval()"),Lor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uue=a("code"),xor=o("model.train()"),$or=l(),F(i6.$$.fragment),hIe=l(),Pd=a("h2"),d6=a("a"),Jue=a("span"),F(Fy.$$.fragment),kor=l(),Yue=a("span"),Sor=o("AutoModelForInstanceSegmentation"),pIe=l(),Jo=a("div"),F(Ty.$$.fragment),Ror=l(),Id=a("p"),Bor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),BX=a("a"),Por=o("from_pretrained()"),Ior=o(" class method or the "),PX=a("a"),qor=o("from_config()"),Nor=o(` class
method.`),jor=l(),My=a("p"),Dor=o("This class cannot be instantiated directly using "),Kue=a("code"),Gor=o("__init__()"),Oor=o(" (throws an error)."),Vor=l(),Ct=a("div"),F(Ey.$$.fragment),Xor=l(),Zue=a("p"),zor=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Qor=l(),qd=a("p"),Wor=o(`Note:
Loading a model from its configuration file does `),e_e=a("strong"),Hor=o("not"),Uor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IX=a("a"),Jor=o("from_pretrained()"),Yor=o(" to load the model weights."),Kor=l(),F(c6.$$.fragment),Zor=l(),_o=a("div"),F(Cy.$$.fragment),err=l(),o_e=a("p"),orr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),rrr=l(),Ya=a("p"),trr=o("The model class to instantiate is selected based on the "),r_e=a("code"),arr=o("model_type"),nrr=o(` property of the config object (either
passed as an argument or loaded from `),t_e=a("code"),srr=o("pretrained_model_name_or_path"),lrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a_e=a("code"),irr=o("pretrained_model_name_or_path"),drr=o(":"),crr=l(),n_e=a("ul"),f6=a("li"),s_e=a("strong"),frr=o("maskformer"),mrr=o(" \u2014 "),qX=a("a"),grr=o("MaskFormerForInstanceSegmentation"),hrr=o(" (MaskFormer model)"),prr=l(),m6=a("p"),urr=o("The model is set in evaluation mode by default using "),l_e=a("code"),_rr=o("model.eval()"),brr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i_e=a("code"),vrr=o("model.train()"),Frr=l(),F(g6.$$.fragment),uIe=l(),Nd=a("h2"),h6=a("a"),d_e=a("span"),F(wy.$$.fragment),Trr=l(),c_e=a("span"),Mrr=o("TFAutoModel"),_Ie=l(),Yo=a("div"),F(Ay.$$.fragment),Err=l(),jd=a("p"),Crr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),NX=a("a"),wrr=o("from_pretrained()"),Arr=o(" class method or the "),jX=a("a"),yrr=o("from_config()"),Lrr=o(` class
method.`),xrr=l(),yy=a("p"),$rr=o("This class cannot be instantiated directly using "),f_e=a("code"),krr=o("__init__()"),Srr=o(" (throws an error)."),Rrr=l(),wt=a("div"),F(Ly.$$.fragment),Brr=l(),m_e=a("p"),Prr=o("Instantiates one of the base model classes of the library from a configuration."),Irr=l(),Dd=a("p"),qrr=o(`Note:
Loading a model from its configuration file does `),g_e=a("strong"),Nrr=o("not"),jrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DX=a("a"),Drr=o("from_pretrained()"),Grr=o(" to load the model weights."),Orr=l(),F(p6.$$.fragment),Vrr=l(),wr=a("div"),F(xy.$$.fragment),Xrr=l(),h_e=a("p"),zrr=o("Instantiate one of the base model classes of the library from a pretrained model."),Qrr=l(),Ka=a("p"),Wrr=o("The model class to instantiate is selected based on the "),p_e=a("code"),Hrr=o("model_type"),Urr=o(` property of the config object (either
passed as an argument or loaded from `),u_e=a("code"),Jrr=o("pretrained_model_name_or_path"),Yrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),__e=a("code"),Krr=o("pretrained_model_name_or_path"),Zrr=o(":"),etr=l(),N=a("ul"),u6=a("li"),b_e=a("strong"),otr=o("albert"),rtr=o(" \u2014 "),GX=a("a"),ttr=o("TFAlbertModel"),atr=o(" (ALBERT model)"),ntr=l(),_6=a("li"),v_e=a("strong"),str=o("bart"),ltr=o(" \u2014 "),OX=a("a"),itr=o("TFBartModel"),dtr=o(" (BART model)"),ctr=l(),b6=a("li"),F_e=a("strong"),ftr=o("bert"),mtr=o(" \u2014 "),VX=a("a"),gtr=o("TFBertModel"),htr=o(" (BERT model)"),ptr=l(),v6=a("li"),T_e=a("strong"),utr=o("blenderbot"),_tr=o(" \u2014 "),XX=a("a"),btr=o("TFBlenderbotModel"),vtr=o(" (Blenderbot model)"),Ftr=l(),F6=a("li"),M_e=a("strong"),Ttr=o("blenderbot-small"),Mtr=o(" \u2014 "),zX=a("a"),Etr=o("TFBlenderbotSmallModel"),Ctr=o(" (BlenderbotSmall model)"),wtr=l(),T6=a("li"),E_e=a("strong"),Atr=o("camembert"),ytr=o(" \u2014 "),QX=a("a"),Ltr=o("TFCamembertModel"),xtr=o(" (CamemBERT model)"),$tr=l(),M6=a("li"),C_e=a("strong"),ktr=o("clip"),Str=o(" \u2014 "),WX=a("a"),Rtr=o("TFCLIPModel"),Btr=o(" (CLIP model)"),Ptr=l(),E6=a("li"),w_e=a("strong"),Itr=o("convbert"),qtr=o(" \u2014 "),HX=a("a"),Ntr=o("TFConvBertModel"),jtr=o(" (ConvBERT model)"),Dtr=l(),C6=a("li"),A_e=a("strong"),Gtr=o("convnext"),Otr=o(" \u2014 "),UX=a("a"),Vtr=o("TFConvNextModel"),Xtr=o(" (ConvNext model)"),ztr=l(),w6=a("li"),y_e=a("strong"),Qtr=o("ctrl"),Wtr=o(" \u2014 "),JX=a("a"),Htr=o("TFCTRLModel"),Utr=o(" (CTRL model)"),Jtr=l(),A6=a("li"),L_e=a("strong"),Ytr=o("data2vec-vision"),Ktr=o(" \u2014 "),YX=a("a"),Ztr=o("TFData2VecVisionModel"),ear=o(" (Data2VecVision model)"),oar=l(),y6=a("li"),x_e=a("strong"),rar=o("deberta"),tar=o(" \u2014 "),KX=a("a"),aar=o("TFDebertaModel"),nar=o(" (DeBERTa model)"),sar=l(),L6=a("li"),$_e=a("strong"),lar=o("deberta-v2"),iar=o(" \u2014 "),ZX=a("a"),dar=o("TFDebertaV2Model"),car=o(" (DeBERTa-v2 model)"),far=l(),x6=a("li"),k_e=a("strong"),mar=o("distilbert"),gar=o(" \u2014 "),ez=a("a"),har=o("TFDistilBertModel"),par=o(" (DistilBERT model)"),uar=l(),$6=a("li"),S_e=a("strong"),_ar=o("dpr"),bar=o(" \u2014 "),oz=a("a"),Far=o("TFDPRQuestionEncoder"),Tar=o(" (DPR model)"),Mar=l(),k6=a("li"),R_e=a("strong"),Ear=o("electra"),Car=o(" \u2014 "),rz=a("a"),war=o("TFElectraModel"),Aar=o(" (ELECTRA model)"),yar=l(),S6=a("li"),B_e=a("strong"),Lar=o("flaubert"),xar=o(" \u2014 "),tz=a("a"),$ar=o("TFFlaubertModel"),kar=o(" (FlauBERT model)"),Sar=l(),Ps=a("li"),P_e=a("strong"),Rar=o("funnel"),Bar=o(" \u2014 "),az=a("a"),Par=o("TFFunnelModel"),Iar=o(" or "),nz=a("a"),qar=o("TFFunnelBaseModel"),Nar=o(" (Funnel Transformer model)"),jar=l(),R6=a("li"),I_e=a("strong"),Dar=o("gpt2"),Gar=o(" \u2014 "),sz=a("a"),Oar=o("TFGPT2Model"),Var=o(" (OpenAI GPT-2 model)"),Xar=l(),B6=a("li"),q_e=a("strong"),zar=o("gptj"),Qar=o(" \u2014 "),lz=a("a"),War=o("TFGPTJModel"),Har=o(" (GPT-J model)"),Uar=l(),P6=a("li"),N_e=a("strong"),Jar=o("hubert"),Yar=o(" \u2014 "),iz=a("a"),Kar=o("TFHubertModel"),Zar=o(" (Hubert model)"),enr=l(),I6=a("li"),j_e=a("strong"),onr=o("layoutlm"),rnr=o(" \u2014 "),dz=a("a"),tnr=o("TFLayoutLMModel"),anr=o(" (LayoutLM model)"),nnr=l(),q6=a("li"),D_e=a("strong"),snr=o("led"),lnr=o(" \u2014 "),cz=a("a"),inr=o("TFLEDModel"),dnr=o(" (LED model)"),cnr=l(),N6=a("li"),G_e=a("strong"),fnr=o("longformer"),mnr=o(" \u2014 "),fz=a("a"),gnr=o("TFLongformerModel"),hnr=o(" (Longformer model)"),pnr=l(),j6=a("li"),O_e=a("strong"),unr=o("lxmert"),_nr=o(" \u2014 "),mz=a("a"),bnr=o("TFLxmertModel"),vnr=o(" (LXMERT model)"),Fnr=l(),D6=a("li"),V_e=a("strong"),Tnr=o("marian"),Mnr=o(" \u2014 "),gz=a("a"),Enr=o("TFMarianModel"),Cnr=o(" (Marian model)"),wnr=l(),G6=a("li"),X_e=a("strong"),Anr=o("mbart"),ynr=o(" \u2014 "),hz=a("a"),Lnr=o("TFMBartModel"),xnr=o(" (mBART model)"),$nr=l(),O6=a("li"),z_e=a("strong"),knr=o("mobilebert"),Snr=o(" \u2014 "),pz=a("a"),Rnr=o("TFMobileBertModel"),Bnr=o(" (MobileBERT model)"),Pnr=l(),V6=a("li"),Q_e=a("strong"),Inr=o("mpnet"),qnr=o(" \u2014 "),uz=a("a"),Nnr=o("TFMPNetModel"),jnr=o(" (MPNet model)"),Dnr=l(),X6=a("li"),W_e=a("strong"),Gnr=o("mt5"),Onr=o(" \u2014 "),_z=a("a"),Vnr=o("TFMT5Model"),Xnr=o(" (mT5 model)"),znr=l(),z6=a("li"),H_e=a("strong"),Qnr=o("openai-gpt"),Wnr=o(" \u2014 "),bz=a("a"),Hnr=o("TFOpenAIGPTModel"),Unr=o(" (OpenAI GPT model)"),Jnr=l(),Q6=a("li"),U_e=a("strong"),Ynr=o("pegasus"),Knr=o(" \u2014 "),vz=a("a"),Znr=o("TFPegasusModel"),esr=o(" (Pegasus model)"),osr=l(),W6=a("li"),J_e=a("strong"),rsr=o("rembert"),tsr=o(" \u2014 "),Fz=a("a"),asr=o("TFRemBertModel"),nsr=o(" (RemBERT model)"),ssr=l(),H6=a("li"),Y_e=a("strong"),lsr=o("roberta"),isr=o(" \u2014 "),Tz=a("a"),dsr=o("TFRobertaModel"),csr=o(" (RoBERTa model)"),fsr=l(),U6=a("li"),K_e=a("strong"),msr=o("roformer"),gsr=o(" \u2014 "),Mz=a("a"),hsr=o("TFRoFormerModel"),psr=o(" (RoFormer model)"),usr=l(),J6=a("li"),Z_e=a("strong"),_sr=o("speech_to_text"),bsr=o(" \u2014 "),Ez=a("a"),vsr=o("TFSpeech2TextModel"),Fsr=o(" (Speech2Text model)"),Tsr=l(),Y6=a("li"),e1e=a("strong"),Msr=o("swin"),Esr=o(" \u2014 "),Cz=a("a"),Csr=o("TFSwinModel"),wsr=o(" (Swin model)"),Asr=l(),K6=a("li"),o1e=a("strong"),ysr=o("t5"),Lsr=o(" \u2014 "),wz=a("a"),xsr=o("TFT5Model"),$sr=o(" (T5 model)"),ksr=l(),Z6=a("li"),r1e=a("strong"),Ssr=o("tapas"),Rsr=o(" \u2014 "),Az=a("a"),Bsr=o("TFTapasModel"),Psr=o(" (TAPAS model)"),Isr=l(),eT=a("li"),t1e=a("strong"),qsr=o("transfo-xl"),Nsr=o(" \u2014 "),yz=a("a"),jsr=o("TFTransfoXLModel"),Dsr=o(" (Transformer-XL model)"),Gsr=l(),oT=a("li"),a1e=a("strong"),Osr=o("vit"),Vsr=o(" \u2014 "),Lz=a("a"),Xsr=o("TFViTModel"),zsr=o(" (ViT model)"),Qsr=l(),rT=a("li"),n1e=a("strong"),Wsr=o("vit_mae"),Hsr=o(" \u2014 "),xz=a("a"),Usr=o("TFViTMAEModel"),Jsr=o(" (ViTMAE model)"),Ysr=l(),tT=a("li"),s1e=a("strong"),Ksr=o("wav2vec2"),Zsr=o(" \u2014 "),$z=a("a"),elr=o("TFWav2Vec2Model"),olr=o(" (Wav2Vec2 model)"),rlr=l(),aT=a("li"),l1e=a("strong"),tlr=o("xlm"),alr=o(" \u2014 "),kz=a("a"),nlr=o("TFXLMModel"),slr=o(" (XLM model)"),llr=l(),nT=a("li"),i1e=a("strong"),ilr=o("xlm-roberta"),dlr=o(" \u2014 "),Sz=a("a"),clr=o("TFXLMRobertaModel"),flr=o(" (XLM-RoBERTa model)"),mlr=l(),sT=a("li"),d1e=a("strong"),glr=o("xlnet"),hlr=o(" \u2014 "),Rz=a("a"),plr=o("TFXLNetModel"),ulr=o(" (XLNet model)"),_lr=l(),F(lT.$$.fragment),bIe=l(),Gd=a("h2"),iT=a("a"),c1e=a("span"),F($y.$$.fragment),blr=l(),f1e=a("span"),vlr=o("TFAutoModelForPreTraining"),vIe=l(),Ko=a("div"),F(ky.$$.fragment),Flr=l(),Od=a("p"),Tlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Bz=a("a"),Mlr=o("from_pretrained()"),Elr=o(" class method or the "),Pz=a("a"),Clr=o("from_config()"),wlr=o(` class
method.`),Alr=l(),Sy=a("p"),ylr=o("This class cannot be instantiated directly using "),m1e=a("code"),Llr=o("__init__()"),xlr=o(" (throws an error)."),$lr=l(),At=a("div"),F(Ry.$$.fragment),klr=l(),g1e=a("p"),Slr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Rlr=l(),Vd=a("p"),Blr=o(`Note:
Loading a model from its configuration file does `),h1e=a("strong"),Plr=o("not"),Ilr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Iz=a("a"),qlr=o("from_pretrained()"),Nlr=o(" to load the model weights."),jlr=l(),F(dT.$$.fragment),Dlr=l(),Ar=a("div"),F(By.$$.fragment),Glr=l(),p1e=a("p"),Olr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Vlr=l(),Za=a("p"),Xlr=o("The model class to instantiate is selected based on the "),u1e=a("code"),zlr=o("model_type"),Qlr=o(` property of the config object (either
passed as an argument or loaded from `),_1e=a("code"),Wlr=o("pretrained_model_name_or_path"),Hlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b1e=a("code"),Ulr=o("pretrained_model_name_or_path"),Jlr=o(":"),Ylr=l(),ne=a("ul"),cT=a("li"),v1e=a("strong"),Klr=o("albert"),Zlr=o(" \u2014 "),qz=a("a"),eir=o("TFAlbertForPreTraining"),oir=o(" (ALBERT model)"),rir=l(),fT=a("li"),F1e=a("strong"),tir=o("bart"),air=o(" \u2014 "),Nz=a("a"),nir=o("TFBartForConditionalGeneration"),sir=o(" (BART model)"),lir=l(),mT=a("li"),T1e=a("strong"),iir=o("bert"),dir=o(" \u2014 "),jz=a("a"),cir=o("TFBertForPreTraining"),fir=o(" (BERT model)"),mir=l(),gT=a("li"),M1e=a("strong"),gir=o("camembert"),hir=o(" \u2014 "),Dz=a("a"),pir=o("TFCamembertForMaskedLM"),uir=o(" (CamemBERT model)"),_ir=l(),hT=a("li"),E1e=a("strong"),bir=o("ctrl"),vir=o(" \u2014 "),Gz=a("a"),Fir=o("TFCTRLLMHeadModel"),Tir=o(" (CTRL model)"),Mir=l(),pT=a("li"),C1e=a("strong"),Eir=o("distilbert"),Cir=o(" \u2014 "),Oz=a("a"),wir=o("TFDistilBertForMaskedLM"),Air=o(" (DistilBERT model)"),yir=l(),uT=a("li"),w1e=a("strong"),Lir=o("electra"),xir=o(" \u2014 "),Vz=a("a"),$ir=o("TFElectraForPreTraining"),kir=o(" (ELECTRA model)"),Sir=l(),_T=a("li"),A1e=a("strong"),Rir=o("flaubert"),Bir=o(" \u2014 "),Xz=a("a"),Pir=o("TFFlaubertWithLMHeadModel"),Iir=o(" (FlauBERT model)"),qir=l(),bT=a("li"),y1e=a("strong"),Nir=o("funnel"),jir=o(" \u2014 "),zz=a("a"),Dir=o("TFFunnelForPreTraining"),Gir=o(" (Funnel Transformer model)"),Oir=l(),vT=a("li"),L1e=a("strong"),Vir=o("gpt2"),Xir=o(" \u2014 "),Qz=a("a"),zir=o("TFGPT2LMHeadModel"),Qir=o(" (OpenAI GPT-2 model)"),Wir=l(),FT=a("li"),x1e=a("strong"),Hir=o("layoutlm"),Uir=o(" \u2014 "),Wz=a("a"),Jir=o("TFLayoutLMForMaskedLM"),Yir=o(" (LayoutLM model)"),Kir=l(),TT=a("li"),$1e=a("strong"),Zir=o("lxmert"),edr=o(" \u2014 "),Hz=a("a"),odr=o("TFLxmertForPreTraining"),rdr=o(" (LXMERT model)"),tdr=l(),MT=a("li"),k1e=a("strong"),adr=o("mobilebert"),ndr=o(" \u2014 "),Uz=a("a"),sdr=o("TFMobileBertForPreTraining"),ldr=o(" (MobileBERT model)"),idr=l(),ET=a("li"),S1e=a("strong"),ddr=o("mpnet"),cdr=o(" \u2014 "),Jz=a("a"),fdr=o("TFMPNetForMaskedLM"),mdr=o(" (MPNet model)"),gdr=l(),CT=a("li"),R1e=a("strong"),hdr=o("openai-gpt"),pdr=o(" \u2014 "),Yz=a("a"),udr=o("TFOpenAIGPTLMHeadModel"),_dr=o(" (OpenAI GPT model)"),bdr=l(),wT=a("li"),B1e=a("strong"),vdr=o("roberta"),Fdr=o(" \u2014 "),Kz=a("a"),Tdr=o("TFRobertaForMaskedLM"),Mdr=o(" (RoBERTa model)"),Edr=l(),AT=a("li"),P1e=a("strong"),Cdr=o("t5"),wdr=o(" \u2014 "),Zz=a("a"),Adr=o("TFT5ForConditionalGeneration"),ydr=o(" (T5 model)"),Ldr=l(),yT=a("li"),I1e=a("strong"),xdr=o("tapas"),$dr=o(" \u2014 "),eQ=a("a"),kdr=o("TFTapasForMaskedLM"),Sdr=o(" (TAPAS model)"),Rdr=l(),LT=a("li"),q1e=a("strong"),Bdr=o("transfo-xl"),Pdr=o(" \u2014 "),oQ=a("a"),Idr=o("TFTransfoXLLMHeadModel"),qdr=o(" (Transformer-XL model)"),Ndr=l(),xT=a("li"),N1e=a("strong"),jdr=o("vit_mae"),Ddr=o(" \u2014 "),rQ=a("a"),Gdr=o("TFViTMAEForPreTraining"),Odr=o(" (ViTMAE model)"),Vdr=l(),$T=a("li"),j1e=a("strong"),Xdr=o("xlm"),zdr=o(" \u2014 "),tQ=a("a"),Qdr=o("TFXLMWithLMHeadModel"),Wdr=o(" (XLM model)"),Hdr=l(),kT=a("li"),D1e=a("strong"),Udr=o("xlm-roberta"),Jdr=o(" \u2014 "),aQ=a("a"),Ydr=o("TFXLMRobertaForMaskedLM"),Kdr=o(" (XLM-RoBERTa model)"),Zdr=l(),ST=a("li"),G1e=a("strong"),ecr=o("xlnet"),ocr=o(" \u2014 "),nQ=a("a"),rcr=o("TFXLNetLMHeadModel"),tcr=o(" (XLNet model)"),acr=l(),F(RT.$$.fragment),FIe=l(),Xd=a("h2"),BT=a("a"),O1e=a("span"),F(Py.$$.fragment),ncr=l(),V1e=a("span"),scr=o("TFAutoModelForCausalLM"),TIe=l(),Zo=a("div"),F(Iy.$$.fragment),lcr=l(),zd=a("p"),icr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),sQ=a("a"),dcr=o("from_pretrained()"),ccr=o(" class method or the "),lQ=a("a"),fcr=o("from_config()"),mcr=o(` class
method.`),gcr=l(),qy=a("p"),hcr=o("This class cannot be instantiated directly using "),X1e=a("code"),pcr=o("__init__()"),ucr=o(" (throws an error)."),_cr=l(),yt=a("div"),F(Ny.$$.fragment),bcr=l(),z1e=a("p"),vcr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Fcr=l(),Qd=a("p"),Tcr=o(`Note:
Loading a model from its configuration file does `),Q1e=a("strong"),Mcr=o("not"),Ecr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iQ=a("a"),Ccr=o("from_pretrained()"),wcr=o(" to load the model weights."),Acr=l(),F(PT.$$.fragment),ycr=l(),yr=a("div"),F(jy.$$.fragment),Lcr=l(),W1e=a("p"),xcr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$cr=l(),en=a("p"),kcr=o("The model class to instantiate is selected based on the "),H1e=a("code"),Scr=o("model_type"),Rcr=o(` property of the config object (either
passed as an argument or loaded from `),U1e=a("code"),Bcr=o("pretrained_model_name_or_path"),Pcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J1e=a("code"),Icr=o("pretrained_model_name_or_path"),qcr=o(":"),Ncr=l(),Te=a("ul"),IT=a("li"),Y1e=a("strong"),jcr=o("bert"),Dcr=o(" \u2014 "),dQ=a("a"),Gcr=o("TFBertLMHeadModel"),Ocr=o(" (BERT model)"),Vcr=l(),qT=a("li"),K1e=a("strong"),Xcr=o("camembert"),zcr=o(" \u2014 "),cQ=a("a"),Qcr=o("TFCamembertForCausalLM"),Wcr=o(" (CamemBERT model)"),Hcr=l(),NT=a("li"),Z1e=a("strong"),Ucr=o("ctrl"),Jcr=o(" \u2014 "),fQ=a("a"),Ycr=o("TFCTRLLMHeadModel"),Kcr=o(" (CTRL model)"),Zcr=l(),jT=a("li"),e8e=a("strong"),efr=o("gpt2"),ofr=o(" \u2014 "),mQ=a("a"),rfr=o("TFGPT2LMHeadModel"),tfr=o(" (OpenAI GPT-2 model)"),afr=l(),DT=a("li"),o8e=a("strong"),nfr=o("gptj"),sfr=o(" \u2014 "),gQ=a("a"),lfr=o("TFGPTJForCausalLM"),ifr=o(" (GPT-J model)"),dfr=l(),GT=a("li"),r8e=a("strong"),cfr=o("openai-gpt"),ffr=o(" \u2014 "),hQ=a("a"),mfr=o("TFOpenAIGPTLMHeadModel"),gfr=o(" (OpenAI GPT model)"),hfr=l(),OT=a("li"),t8e=a("strong"),pfr=o("rembert"),ufr=o(" \u2014 "),pQ=a("a"),_fr=o("TFRemBertForCausalLM"),bfr=o(" (RemBERT model)"),vfr=l(),VT=a("li"),a8e=a("strong"),Ffr=o("roberta"),Tfr=o(" \u2014 "),uQ=a("a"),Mfr=o("TFRobertaForCausalLM"),Efr=o(" (RoBERTa model)"),Cfr=l(),XT=a("li"),n8e=a("strong"),wfr=o("roformer"),Afr=o(" \u2014 "),_Q=a("a"),yfr=o("TFRoFormerForCausalLM"),Lfr=o(" (RoFormer model)"),xfr=l(),zT=a("li"),s8e=a("strong"),$fr=o("transfo-xl"),kfr=o(" \u2014 "),bQ=a("a"),Sfr=o("TFTransfoXLLMHeadModel"),Rfr=o(" (Transformer-XL model)"),Bfr=l(),QT=a("li"),l8e=a("strong"),Pfr=o("xlm"),Ifr=o(" \u2014 "),vQ=a("a"),qfr=o("TFXLMWithLMHeadModel"),Nfr=o(" (XLM model)"),jfr=l(),WT=a("li"),i8e=a("strong"),Dfr=o("xlnet"),Gfr=o(" \u2014 "),FQ=a("a"),Ofr=o("TFXLNetLMHeadModel"),Vfr=o(" (XLNet model)"),Xfr=l(),F(HT.$$.fragment),MIe=l(),Wd=a("h2"),UT=a("a"),d8e=a("span"),F(Dy.$$.fragment),zfr=l(),c8e=a("span"),Qfr=o("TFAutoModelForImageClassification"),EIe=l(),er=a("div"),F(Gy.$$.fragment),Wfr=l(),Hd=a("p"),Hfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),TQ=a("a"),Ufr=o("from_pretrained()"),Jfr=o(" class method or the "),MQ=a("a"),Yfr=o("from_config()"),Kfr=o(` class
method.`),Zfr=l(),Oy=a("p"),emr=o("This class cannot be instantiated directly using "),f8e=a("code"),omr=o("__init__()"),rmr=o(" (throws an error)."),tmr=l(),Lt=a("div"),F(Vy.$$.fragment),amr=l(),m8e=a("p"),nmr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),smr=l(),Ud=a("p"),lmr=o(`Note:
Loading a model from its configuration file does `),g8e=a("strong"),imr=o("not"),dmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EQ=a("a"),cmr=o("from_pretrained()"),fmr=o(" to load the model weights."),mmr=l(),F(JT.$$.fragment),gmr=l(),Lr=a("div"),F(Xy.$$.fragment),hmr=l(),h8e=a("p"),pmr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),umr=l(),on=a("p"),_mr=o("The model class to instantiate is selected based on the "),p8e=a("code"),bmr=o("model_type"),vmr=o(` property of the config object (either
passed as an argument or loaded from `),u8e=a("code"),Fmr=o("pretrained_model_name_or_path"),Tmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_8e=a("code"),Mmr=o("pretrained_model_name_or_path"),Emr=o(":"),Cmr=l(),rn=a("ul"),YT=a("li"),b8e=a("strong"),wmr=o("convnext"),Amr=o(" \u2014 "),CQ=a("a"),ymr=o("TFConvNextForImageClassification"),Lmr=o(" (ConvNext model)"),xmr=l(),KT=a("li"),v8e=a("strong"),$mr=o("data2vec-vision"),kmr=o(" \u2014 "),wQ=a("a"),Smr=o("TFData2VecVisionForImageClassification"),Rmr=o(" (Data2VecVision model)"),Bmr=l(),ZT=a("li"),F8e=a("strong"),Pmr=o("swin"),Imr=o(" \u2014 "),AQ=a("a"),qmr=o("TFSwinForImageClassification"),Nmr=o(" (Swin model)"),jmr=l(),e9=a("li"),T8e=a("strong"),Dmr=o("vit"),Gmr=o(" \u2014 "),yQ=a("a"),Omr=o("TFViTForImageClassification"),Vmr=o(" (ViT model)"),Xmr=l(),F(o9.$$.fragment),CIe=l(),Jd=a("h2"),r9=a("a"),M8e=a("span"),F(zy.$$.fragment),zmr=l(),E8e=a("span"),Qmr=o("TFAutoModelForMaskedLM"),wIe=l(),or=a("div"),F(Qy.$$.fragment),Wmr=l(),Yd=a("p"),Hmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),LQ=a("a"),Umr=o("from_pretrained()"),Jmr=o(" class method or the "),xQ=a("a"),Ymr=o("from_config()"),Kmr=o(` class
method.`),Zmr=l(),Wy=a("p"),egr=o("This class cannot be instantiated directly using "),C8e=a("code"),ogr=o("__init__()"),rgr=o(" (throws an error)."),tgr=l(),xt=a("div"),F(Hy.$$.fragment),agr=l(),w8e=a("p"),ngr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),sgr=l(),Kd=a("p"),lgr=o(`Note:
Loading a model from its configuration file does `),A8e=a("strong"),igr=o("not"),dgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$Q=a("a"),cgr=o("from_pretrained()"),fgr=o(" to load the model weights."),mgr=l(),F(t9.$$.fragment),ggr=l(),xr=a("div"),F(Uy.$$.fragment),hgr=l(),y8e=a("p"),pgr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ugr=l(),tn=a("p"),_gr=o("The model class to instantiate is selected based on the "),L8e=a("code"),bgr=o("model_type"),vgr=o(` property of the config object (either
passed as an argument or loaded from `),x8e=a("code"),Fgr=o("pretrained_model_name_or_path"),Tgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$8e=a("code"),Mgr=o("pretrained_model_name_or_path"),Egr=o(":"),Cgr=l(),ie=a("ul"),a9=a("li"),k8e=a("strong"),wgr=o("albert"),Agr=o(" \u2014 "),kQ=a("a"),ygr=o("TFAlbertForMaskedLM"),Lgr=o(" (ALBERT model)"),xgr=l(),n9=a("li"),S8e=a("strong"),$gr=o("bert"),kgr=o(" \u2014 "),SQ=a("a"),Sgr=o("TFBertForMaskedLM"),Rgr=o(" (BERT model)"),Bgr=l(),s9=a("li"),R8e=a("strong"),Pgr=o("camembert"),Igr=o(" \u2014 "),RQ=a("a"),qgr=o("TFCamembertForMaskedLM"),Ngr=o(" (CamemBERT model)"),jgr=l(),l9=a("li"),B8e=a("strong"),Dgr=o("convbert"),Ggr=o(" \u2014 "),BQ=a("a"),Ogr=o("TFConvBertForMaskedLM"),Vgr=o(" (ConvBERT model)"),Xgr=l(),i9=a("li"),P8e=a("strong"),zgr=o("deberta"),Qgr=o(" \u2014 "),PQ=a("a"),Wgr=o("TFDebertaForMaskedLM"),Hgr=o(" (DeBERTa model)"),Ugr=l(),d9=a("li"),I8e=a("strong"),Jgr=o("deberta-v2"),Ygr=o(" \u2014 "),IQ=a("a"),Kgr=o("TFDebertaV2ForMaskedLM"),Zgr=o(" (DeBERTa-v2 model)"),ehr=l(),c9=a("li"),q8e=a("strong"),ohr=o("distilbert"),rhr=o(" \u2014 "),qQ=a("a"),thr=o("TFDistilBertForMaskedLM"),ahr=o(" (DistilBERT model)"),nhr=l(),f9=a("li"),N8e=a("strong"),shr=o("electra"),lhr=o(" \u2014 "),NQ=a("a"),ihr=o("TFElectraForMaskedLM"),dhr=o(" (ELECTRA model)"),chr=l(),m9=a("li"),j8e=a("strong"),fhr=o("flaubert"),mhr=o(" \u2014 "),jQ=a("a"),ghr=o("TFFlaubertWithLMHeadModel"),hhr=o(" (FlauBERT model)"),phr=l(),g9=a("li"),D8e=a("strong"),uhr=o("funnel"),_hr=o(" \u2014 "),DQ=a("a"),bhr=o("TFFunnelForMaskedLM"),vhr=o(" (Funnel Transformer model)"),Fhr=l(),h9=a("li"),G8e=a("strong"),Thr=o("layoutlm"),Mhr=o(" \u2014 "),GQ=a("a"),Ehr=o("TFLayoutLMForMaskedLM"),Chr=o(" (LayoutLM model)"),whr=l(),p9=a("li"),O8e=a("strong"),Ahr=o("longformer"),yhr=o(" \u2014 "),OQ=a("a"),Lhr=o("TFLongformerForMaskedLM"),xhr=o(" (Longformer model)"),$hr=l(),u9=a("li"),V8e=a("strong"),khr=o("mobilebert"),Shr=o(" \u2014 "),VQ=a("a"),Rhr=o("TFMobileBertForMaskedLM"),Bhr=o(" (MobileBERT model)"),Phr=l(),_9=a("li"),X8e=a("strong"),Ihr=o("mpnet"),qhr=o(" \u2014 "),XQ=a("a"),Nhr=o("TFMPNetForMaskedLM"),jhr=o(" (MPNet model)"),Dhr=l(),b9=a("li"),z8e=a("strong"),Ghr=o("rembert"),Ohr=o(" \u2014 "),zQ=a("a"),Vhr=o("TFRemBertForMaskedLM"),Xhr=o(" (RemBERT model)"),zhr=l(),v9=a("li"),Q8e=a("strong"),Qhr=o("roberta"),Whr=o(" \u2014 "),QQ=a("a"),Hhr=o("TFRobertaForMaskedLM"),Uhr=o(" (RoBERTa model)"),Jhr=l(),F9=a("li"),W8e=a("strong"),Yhr=o("roformer"),Khr=o(" \u2014 "),WQ=a("a"),Zhr=o("TFRoFormerForMaskedLM"),epr=o(" (RoFormer model)"),opr=l(),T9=a("li"),H8e=a("strong"),rpr=o("tapas"),tpr=o(" \u2014 "),HQ=a("a"),apr=o("TFTapasForMaskedLM"),npr=o(" (TAPAS model)"),spr=l(),M9=a("li"),U8e=a("strong"),lpr=o("xlm"),ipr=o(" \u2014 "),UQ=a("a"),dpr=o("TFXLMWithLMHeadModel"),cpr=o(" (XLM model)"),fpr=l(),E9=a("li"),J8e=a("strong"),mpr=o("xlm-roberta"),gpr=o(" \u2014 "),JQ=a("a"),hpr=o("TFXLMRobertaForMaskedLM"),ppr=o(" (XLM-RoBERTa model)"),upr=l(),F(C9.$$.fragment),AIe=l(),Zd=a("h2"),w9=a("a"),Y8e=a("span"),F(Jy.$$.fragment),_pr=l(),K8e=a("span"),bpr=o("TFAutoModelForSeq2SeqLM"),yIe=l(),rr=a("div"),F(Yy.$$.fragment),vpr=l(),ec=a("p"),Fpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),YQ=a("a"),Tpr=o("from_pretrained()"),Mpr=o(" class method or the "),KQ=a("a"),Epr=o("from_config()"),Cpr=o(` class
method.`),wpr=l(),Ky=a("p"),Apr=o("This class cannot be instantiated directly using "),Z8e=a("code"),ypr=o("__init__()"),Lpr=o(" (throws an error)."),xpr=l(),$t=a("div"),F(Zy.$$.fragment),$pr=l(),ebe=a("p"),kpr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Spr=l(),oc=a("p"),Rpr=o(`Note:
Loading a model from its configuration file does `),obe=a("strong"),Bpr=o("not"),Ppr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZQ=a("a"),Ipr=o("from_pretrained()"),qpr=o(" to load the model weights."),Npr=l(),F(A9.$$.fragment),jpr=l(),$r=a("div"),F(eL.$$.fragment),Dpr=l(),rbe=a("p"),Gpr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Opr=l(),an=a("p"),Vpr=o("The model class to instantiate is selected based on the "),tbe=a("code"),Xpr=o("model_type"),zpr=o(` property of the config object (either
passed as an argument or loaded from `),abe=a("code"),Qpr=o("pretrained_model_name_or_path"),Wpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nbe=a("code"),Hpr=o("pretrained_model_name_or_path"),Upr=o(":"),Jpr=l(),ye=a("ul"),y9=a("li"),sbe=a("strong"),Ypr=o("bart"),Kpr=o(" \u2014 "),eW=a("a"),Zpr=o("TFBartForConditionalGeneration"),eur=o(" (BART model)"),our=l(),L9=a("li"),lbe=a("strong"),rur=o("blenderbot"),tur=o(" \u2014 "),oW=a("a"),aur=o("TFBlenderbotForConditionalGeneration"),nur=o(" (Blenderbot model)"),sur=l(),x9=a("li"),ibe=a("strong"),lur=o("blenderbot-small"),iur=o(" \u2014 "),rW=a("a"),dur=o("TFBlenderbotSmallForConditionalGeneration"),cur=o(" (BlenderbotSmall model)"),fur=l(),$9=a("li"),dbe=a("strong"),mur=o("encoder-decoder"),gur=o(" \u2014 "),tW=a("a"),hur=o("TFEncoderDecoderModel"),pur=o(" (Encoder decoder model)"),uur=l(),k9=a("li"),cbe=a("strong"),_ur=o("led"),bur=o(" \u2014 "),aW=a("a"),vur=o("TFLEDForConditionalGeneration"),Fur=o(" (LED model)"),Tur=l(),S9=a("li"),fbe=a("strong"),Mur=o("marian"),Eur=o(" \u2014 "),nW=a("a"),Cur=o("TFMarianMTModel"),wur=o(" (Marian model)"),Aur=l(),R9=a("li"),mbe=a("strong"),yur=o("mbart"),Lur=o(" \u2014 "),sW=a("a"),xur=o("TFMBartForConditionalGeneration"),$ur=o(" (mBART model)"),kur=l(),B9=a("li"),gbe=a("strong"),Sur=o("mt5"),Rur=o(" \u2014 "),lW=a("a"),Bur=o("TFMT5ForConditionalGeneration"),Pur=o(" (mT5 model)"),Iur=l(),P9=a("li"),hbe=a("strong"),qur=o("pegasus"),Nur=o(" \u2014 "),iW=a("a"),jur=o("TFPegasusForConditionalGeneration"),Dur=o(" (Pegasus model)"),Gur=l(),I9=a("li"),pbe=a("strong"),Our=o("t5"),Vur=o(" \u2014 "),dW=a("a"),Xur=o("TFT5ForConditionalGeneration"),zur=o(" (T5 model)"),Qur=l(),F(q9.$$.fragment),LIe=l(),rc=a("h2"),N9=a("a"),ube=a("span"),F(oL.$$.fragment),Wur=l(),_be=a("span"),Hur=o("TFAutoModelForSequenceClassification"),xIe=l(),tr=a("div"),F(rL.$$.fragment),Uur=l(),tc=a("p"),Jur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),cW=a("a"),Yur=o("from_pretrained()"),Kur=o(" class method or the "),fW=a("a"),Zur=o("from_config()"),e_r=o(` class
method.`),o_r=l(),tL=a("p"),r_r=o("This class cannot be instantiated directly using "),bbe=a("code"),t_r=o("__init__()"),a_r=o(" (throws an error)."),n_r=l(),kt=a("div"),F(aL.$$.fragment),s_r=l(),vbe=a("p"),l_r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),i_r=l(),ac=a("p"),d_r=o(`Note:
Loading a model from its configuration file does `),Fbe=a("strong"),c_r=o("not"),f_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mW=a("a"),m_r=o("from_pretrained()"),g_r=o(" to load the model weights."),h_r=l(),F(j9.$$.fragment),p_r=l(),kr=a("div"),F(nL.$$.fragment),u_r=l(),Tbe=a("p"),__r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),b_r=l(),nn=a("p"),v_r=o("The model class to instantiate is selected based on the "),Mbe=a("code"),F_r=o("model_type"),T_r=o(` property of the config object (either
passed as an argument or loaded from `),Ebe=a("code"),M_r=o("pretrained_model_name_or_path"),E_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cbe=a("code"),C_r=o("pretrained_model_name_or_path"),w_r=o(":"),A_r=l(),Z=a("ul"),D9=a("li"),wbe=a("strong"),y_r=o("albert"),L_r=o(" \u2014 "),gW=a("a"),x_r=o("TFAlbertForSequenceClassification"),$_r=o(" (ALBERT model)"),k_r=l(),G9=a("li"),Abe=a("strong"),S_r=o("bert"),R_r=o(" \u2014 "),hW=a("a"),B_r=o("TFBertForSequenceClassification"),P_r=o(" (BERT model)"),I_r=l(),O9=a("li"),ybe=a("strong"),q_r=o("camembert"),N_r=o(" \u2014 "),pW=a("a"),j_r=o("TFCamembertForSequenceClassification"),D_r=o(" (CamemBERT model)"),G_r=l(),V9=a("li"),Lbe=a("strong"),O_r=o("convbert"),V_r=o(" \u2014 "),uW=a("a"),X_r=o("TFConvBertForSequenceClassification"),z_r=o(" (ConvBERT model)"),Q_r=l(),X9=a("li"),xbe=a("strong"),W_r=o("ctrl"),H_r=o(" \u2014 "),_W=a("a"),U_r=o("TFCTRLForSequenceClassification"),J_r=o(" (CTRL model)"),Y_r=l(),z9=a("li"),$be=a("strong"),K_r=o("deberta"),Z_r=o(" \u2014 "),bW=a("a"),e1r=o("TFDebertaForSequenceClassification"),o1r=o(" (DeBERTa model)"),r1r=l(),Q9=a("li"),kbe=a("strong"),t1r=o("deberta-v2"),a1r=o(" \u2014 "),vW=a("a"),n1r=o("TFDebertaV2ForSequenceClassification"),s1r=o(" (DeBERTa-v2 model)"),l1r=l(),W9=a("li"),Sbe=a("strong"),i1r=o("distilbert"),d1r=o(" \u2014 "),FW=a("a"),c1r=o("TFDistilBertForSequenceClassification"),f1r=o(" (DistilBERT model)"),m1r=l(),H9=a("li"),Rbe=a("strong"),g1r=o("electra"),h1r=o(" \u2014 "),TW=a("a"),p1r=o("TFElectraForSequenceClassification"),u1r=o(" (ELECTRA model)"),_1r=l(),U9=a("li"),Bbe=a("strong"),b1r=o("flaubert"),v1r=o(" \u2014 "),MW=a("a"),F1r=o("TFFlaubertForSequenceClassification"),T1r=o(" (FlauBERT model)"),M1r=l(),J9=a("li"),Pbe=a("strong"),E1r=o("funnel"),C1r=o(" \u2014 "),EW=a("a"),w1r=o("TFFunnelForSequenceClassification"),A1r=o(" (Funnel Transformer model)"),y1r=l(),Y9=a("li"),Ibe=a("strong"),L1r=o("gpt2"),x1r=o(" \u2014 "),CW=a("a"),$1r=o("TFGPT2ForSequenceClassification"),k1r=o(" (OpenAI GPT-2 model)"),S1r=l(),K9=a("li"),qbe=a("strong"),R1r=o("gptj"),B1r=o(" \u2014 "),wW=a("a"),P1r=o("TFGPTJForSequenceClassification"),I1r=o(" (GPT-J model)"),q1r=l(),Z9=a("li"),Nbe=a("strong"),N1r=o("layoutlm"),j1r=o(" \u2014 "),AW=a("a"),D1r=o("TFLayoutLMForSequenceClassification"),G1r=o(" (LayoutLM model)"),O1r=l(),eM=a("li"),jbe=a("strong"),V1r=o("longformer"),X1r=o(" \u2014 "),yW=a("a"),z1r=o("TFLongformerForSequenceClassification"),Q1r=o(" (Longformer model)"),W1r=l(),oM=a("li"),Dbe=a("strong"),H1r=o("mobilebert"),U1r=o(" \u2014 "),LW=a("a"),J1r=o("TFMobileBertForSequenceClassification"),Y1r=o(" (MobileBERT model)"),K1r=l(),rM=a("li"),Gbe=a("strong"),Z1r=o("mpnet"),e8r=o(" \u2014 "),xW=a("a"),o8r=o("TFMPNetForSequenceClassification"),r8r=o(" (MPNet model)"),t8r=l(),tM=a("li"),Obe=a("strong"),a8r=o("openai-gpt"),n8r=o(" \u2014 "),$W=a("a"),s8r=o("TFOpenAIGPTForSequenceClassification"),l8r=o(" (OpenAI GPT model)"),i8r=l(),aM=a("li"),Vbe=a("strong"),d8r=o("rembert"),c8r=o(" \u2014 "),kW=a("a"),f8r=o("TFRemBertForSequenceClassification"),m8r=o(" (RemBERT model)"),g8r=l(),nM=a("li"),Xbe=a("strong"),h8r=o("roberta"),p8r=o(" \u2014 "),SW=a("a"),u8r=o("TFRobertaForSequenceClassification"),_8r=o(" (RoBERTa model)"),b8r=l(),sM=a("li"),zbe=a("strong"),v8r=o("roformer"),F8r=o(" \u2014 "),RW=a("a"),T8r=o("TFRoFormerForSequenceClassification"),M8r=o(" (RoFormer model)"),E8r=l(),lM=a("li"),Qbe=a("strong"),C8r=o("tapas"),w8r=o(" \u2014 "),BW=a("a"),A8r=o("TFTapasForSequenceClassification"),y8r=o(" (TAPAS model)"),L8r=l(),iM=a("li"),Wbe=a("strong"),x8r=o("transfo-xl"),$8r=o(" \u2014 "),PW=a("a"),k8r=o("TFTransfoXLForSequenceClassification"),S8r=o(" (Transformer-XL model)"),R8r=l(),dM=a("li"),Hbe=a("strong"),B8r=o("xlm"),P8r=o(" \u2014 "),IW=a("a"),I8r=o("TFXLMForSequenceClassification"),q8r=o(" (XLM model)"),N8r=l(),cM=a("li"),Ube=a("strong"),j8r=o("xlm-roberta"),D8r=o(" \u2014 "),qW=a("a"),G8r=o("TFXLMRobertaForSequenceClassification"),O8r=o(" (XLM-RoBERTa model)"),V8r=l(),fM=a("li"),Jbe=a("strong"),X8r=o("xlnet"),z8r=o(" \u2014 "),NW=a("a"),Q8r=o("TFXLNetForSequenceClassification"),W8r=o(" (XLNet model)"),H8r=l(),F(mM.$$.fragment),$Ie=l(),nc=a("h2"),gM=a("a"),Ybe=a("span"),F(sL.$$.fragment),U8r=l(),Kbe=a("span"),J8r=o("TFAutoModelForMultipleChoice"),kIe=l(),ar=a("div"),F(lL.$$.fragment),Y8r=l(),sc=a("p"),K8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),jW=a("a"),Z8r=o("from_pretrained()"),ebr=o(" class method or the "),DW=a("a"),obr=o("from_config()"),rbr=o(` class
method.`),tbr=l(),iL=a("p"),abr=o("This class cannot be instantiated directly using "),Zbe=a("code"),nbr=o("__init__()"),sbr=o(" (throws an error)."),lbr=l(),St=a("div"),F(dL.$$.fragment),ibr=l(),e2e=a("p"),dbr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),cbr=l(),lc=a("p"),fbr=o(`Note:
Loading a model from its configuration file does `),o2e=a("strong"),mbr=o("not"),gbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=a("a"),hbr=o("from_pretrained()"),pbr=o(" to load the model weights."),ubr=l(),F(hM.$$.fragment),_br=l(),Sr=a("div"),F(cL.$$.fragment),bbr=l(),r2e=a("p"),vbr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Fbr=l(),sn=a("p"),Tbr=o("The model class to instantiate is selected based on the "),t2e=a("code"),Mbr=o("model_type"),Ebr=o(` property of the config object (either
passed as an argument or loaded from `),a2e=a("code"),Cbr=o("pretrained_model_name_or_path"),wbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n2e=a("code"),Abr=o("pretrained_model_name_or_path"),ybr=o(":"),Lbr=l(),pe=a("ul"),pM=a("li"),s2e=a("strong"),xbr=o("albert"),$br=o(" \u2014 "),OW=a("a"),kbr=o("TFAlbertForMultipleChoice"),Sbr=o(" (ALBERT model)"),Rbr=l(),uM=a("li"),l2e=a("strong"),Bbr=o("bert"),Pbr=o(" \u2014 "),VW=a("a"),Ibr=o("TFBertForMultipleChoice"),qbr=o(" (BERT model)"),Nbr=l(),_M=a("li"),i2e=a("strong"),jbr=o("camembert"),Dbr=o(" \u2014 "),XW=a("a"),Gbr=o("TFCamembertForMultipleChoice"),Obr=o(" (CamemBERT model)"),Vbr=l(),bM=a("li"),d2e=a("strong"),Xbr=o("convbert"),zbr=o(" \u2014 "),zW=a("a"),Qbr=o("TFConvBertForMultipleChoice"),Wbr=o(" (ConvBERT model)"),Hbr=l(),vM=a("li"),c2e=a("strong"),Ubr=o("distilbert"),Jbr=o(" \u2014 "),QW=a("a"),Ybr=o("TFDistilBertForMultipleChoice"),Kbr=o(" (DistilBERT model)"),Zbr=l(),FM=a("li"),f2e=a("strong"),e2r=o("electra"),o2r=o(" \u2014 "),WW=a("a"),r2r=o("TFElectraForMultipleChoice"),t2r=o(" (ELECTRA model)"),a2r=l(),TM=a("li"),m2e=a("strong"),n2r=o("flaubert"),s2r=o(" \u2014 "),HW=a("a"),l2r=o("TFFlaubertForMultipleChoice"),i2r=o(" (FlauBERT model)"),d2r=l(),MM=a("li"),g2e=a("strong"),c2r=o("funnel"),f2r=o(" \u2014 "),UW=a("a"),m2r=o("TFFunnelForMultipleChoice"),g2r=o(" (Funnel Transformer model)"),h2r=l(),EM=a("li"),h2e=a("strong"),p2r=o("longformer"),u2r=o(" \u2014 "),JW=a("a"),_2r=o("TFLongformerForMultipleChoice"),b2r=o(" (Longformer model)"),v2r=l(),CM=a("li"),p2e=a("strong"),F2r=o("mobilebert"),T2r=o(" \u2014 "),YW=a("a"),M2r=o("TFMobileBertForMultipleChoice"),E2r=o(" (MobileBERT model)"),C2r=l(),wM=a("li"),u2e=a("strong"),w2r=o("mpnet"),A2r=o(" \u2014 "),KW=a("a"),y2r=o("TFMPNetForMultipleChoice"),L2r=o(" (MPNet model)"),x2r=l(),AM=a("li"),_2e=a("strong"),$2r=o("rembert"),k2r=o(" \u2014 "),ZW=a("a"),S2r=o("TFRemBertForMultipleChoice"),R2r=o(" (RemBERT model)"),B2r=l(),yM=a("li"),b2e=a("strong"),P2r=o("roberta"),I2r=o(" \u2014 "),eH=a("a"),q2r=o("TFRobertaForMultipleChoice"),N2r=o(" (RoBERTa model)"),j2r=l(),LM=a("li"),v2e=a("strong"),D2r=o("roformer"),G2r=o(" \u2014 "),oH=a("a"),O2r=o("TFRoFormerForMultipleChoice"),V2r=o(" (RoFormer model)"),X2r=l(),xM=a("li"),F2e=a("strong"),z2r=o("xlm"),Q2r=o(" \u2014 "),rH=a("a"),W2r=o("TFXLMForMultipleChoice"),H2r=o(" (XLM model)"),U2r=l(),$M=a("li"),T2e=a("strong"),J2r=o("xlm-roberta"),Y2r=o(" \u2014 "),tH=a("a"),K2r=o("TFXLMRobertaForMultipleChoice"),Z2r=o(" (XLM-RoBERTa model)"),evr=l(),kM=a("li"),M2e=a("strong"),ovr=o("xlnet"),rvr=o(" \u2014 "),aH=a("a"),tvr=o("TFXLNetForMultipleChoice"),avr=o(" (XLNet model)"),nvr=l(),F(SM.$$.fragment),SIe=l(),ic=a("h2"),RM=a("a"),E2e=a("span"),F(fL.$$.fragment),svr=l(),C2e=a("span"),lvr=o("TFAutoModelForNextSentencePrediction"),RIe=l(),nr=a("div"),F(mL.$$.fragment),ivr=l(),dc=a("p"),dvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),nH=a("a"),cvr=o("from_pretrained()"),fvr=o(" class method or the "),sH=a("a"),mvr=o("from_config()"),gvr=o(` class
method.`),hvr=l(),gL=a("p"),pvr=o("This class cannot be instantiated directly using "),w2e=a("code"),uvr=o("__init__()"),_vr=o(" (throws an error)."),bvr=l(),Rt=a("div"),F(hL.$$.fragment),vvr=l(),A2e=a("p"),Fvr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Tvr=l(),cc=a("p"),Mvr=o(`Note:
Loading a model from its configuration file does `),y2e=a("strong"),Evr=o("not"),Cvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=a("a"),wvr=o("from_pretrained()"),Avr=o(" to load the model weights."),yvr=l(),F(BM.$$.fragment),Lvr=l(),Rr=a("div"),F(pL.$$.fragment),xvr=l(),L2e=a("p"),$vr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),kvr=l(),ln=a("p"),Svr=o("The model class to instantiate is selected based on the "),x2e=a("code"),Rvr=o("model_type"),Bvr=o(` property of the config object (either
passed as an argument or loaded from `),$2e=a("code"),Pvr=o("pretrained_model_name_or_path"),Ivr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k2e=a("code"),qvr=o("pretrained_model_name_or_path"),Nvr=o(":"),jvr=l(),uL=a("ul"),PM=a("li"),S2e=a("strong"),Dvr=o("bert"),Gvr=o(" \u2014 "),iH=a("a"),Ovr=o("TFBertForNextSentencePrediction"),Vvr=o(" (BERT model)"),Xvr=l(),IM=a("li"),R2e=a("strong"),zvr=o("mobilebert"),Qvr=o(" \u2014 "),dH=a("a"),Wvr=o("TFMobileBertForNextSentencePrediction"),Hvr=o(" (MobileBERT model)"),Uvr=l(),F(qM.$$.fragment),BIe=l(),fc=a("h2"),NM=a("a"),B2e=a("span"),F(_L.$$.fragment),Jvr=l(),P2e=a("span"),Yvr=o("TFAutoModelForTableQuestionAnswering"),PIe=l(),sr=a("div"),F(bL.$$.fragment),Kvr=l(),mc=a("p"),Zvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),cH=a("a"),eFr=o("from_pretrained()"),oFr=o(" class method or the "),fH=a("a"),rFr=o("from_config()"),tFr=o(` class
method.`),aFr=l(),vL=a("p"),nFr=o("This class cannot be instantiated directly using "),I2e=a("code"),sFr=o("__init__()"),lFr=o(" (throws an error)."),iFr=l(),Bt=a("div"),F(FL.$$.fragment),dFr=l(),q2e=a("p"),cFr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),fFr=l(),gc=a("p"),mFr=o(`Note:
Loading a model from its configuration file does `),N2e=a("strong"),gFr=o("not"),hFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mH=a("a"),pFr=o("from_pretrained()"),uFr=o(" to load the model weights."),_Fr=l(),F(jM.$$.fragment),bFr=l(),Br=a("div"),F(TL.$$.fragment),vFr=l(),j2e=a("p"),FFr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),TFr=l(),dn=a("p"),MFr=o("The model class to instantiate is selected based on the "),D2e=a("code"),EFr=o("model_type"),CFr=o(` property of the config object (either
passed as an argument or loaded from `),G2e=a("code"),wFr=o("pretrained_model_name_or_path"),AFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O2e=a("code"),yFr=o("pretrained_model_name_or_path"),LFr=o(":"),xFr=l(),V2e=a("ul"),DM=a("li"),X2e=a("strong"),$Fr=o("tapas"),kFr=o(" \u2014 "),gH=a("a"),SFr=o("TFTapasForQuestionAnswering"),RFr=o(" (TAPAS model)"),BFr=l(),F(GM.$$.fragment),IIe=l(),hc=a("h2"),OM=a("a"),z2e=a("span"),F(ML.$$.fragment),PFr=l(),Q2e=a("span"),IFr=o("TFAutoModelForTokenClassification"),qIe=l(),lr=a("div"),F(EL.$$.fragment),qFr=l(),pc=a("p"),NFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),hH=a("a"),jFr=o("from_pretrained()"),DFr=o(" class method or the "),pH=a("a"),GFr=o("from_config()"),OFr=o(` class
method.`),VFr=l(),CL=a("p"),XFr=o("This class cannot be instantiated directly using "),W2e=a("code"),zFr=o("__init__()"),QFr=o(" (throws an error)."),WFr=l(),Pt=a("div"),F(wL.$$.fragment),HFr=l(),H2e=a("p"),UFr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),JFr=l(),uc=a("p"),YFr=o(`Note:
Loading a model from its configuration file does `),U2e=a("strong"),KFr=o("not"),ZFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uH=a("a"),e6r=o("from_pretrained()"),o6r=o(" to load the model weights."),r6r=l(),F(VM.$$.fragment),t6r=l(),Pr=a("div"),F(AL.$$.fragment),a6r=l(),J2e=a("p"),n6r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),s6r=l(),cn=a("p"),l6r=o("The model class to instantiate is selected based on the "),Y2e=a("code"),i6r=o("model_type"),d6r=o(` property of the config object (either
passed as an argument or loaded from `),K2e=a("code"),c6r=o("pretrained_model_name_or_path"),f6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z2e=a("code"),m6r=o("pretrained_model_name_or_path"),g6r=o(":"),h6r=l(),de=a("ul"),XM=a("li"),eve=a("strong"),p6r=o("albert"),u6r=o(" \u2014 "),_H=a("a"),_6r=o("TFAlbertForTokenClassification"),b6r=o(" (ALBERT model)"),v6r=l(),zM=a("li"),ove=a("strong"),F6r=o("bert"),T6r=o(" \u2014 "),bH=a("a"),M6r=o("TFBertForTokenClassification"),E6r=o(" (BERT model)"),C6r=l(),QM=a("li"),rve=a("strong"),w6r=o("camembert"),A6r=o(" \u2014 "),vH=a("a"),y6r=o("TFCamembertForTokenClassification"),L6r=o(" (CamemBERT model)"),x6r=l(),WM=a("li"),tve=a("strong"),$6r=o("convbert"),k6r=o(" \u2014 "),FH=a("a"),S6r=o("TFConvBertForTokenClassification"),R6r=o(" (ConvBERT model)"),B6r=l(),HM=a("li"),ave=a("strong"),P6r=o("deberta"),I6r=o(" \u2014 "),TH=a("a"),q6r=o("TFDebertaForTokenClassification"),N6r=o(" (DeBERTa model)"),j6r=l(),UM=a("li"),nve=a("strong"),D6r=o("deberta-v2"),G6r=o(" \u2014 "),MH=a("a"),O6r=o("TFDebertaV2ForTokenClassification"),V6r=o(" (DeBERTa-v2 model)"),X6r=l(),JM=a("li"),sve=a("strong"),z6r=o("distilbert"),Q6r=o(" \u2014 "),EH=a("a"),W6r=o("TFDistilBertForTokenClassification"),H6r=o(" (DistilBERT model)"),U6r=l(),YM=a("li"),lve=a("strong"),J6r=o("electra"),Y6r=o(" \u2014 "),CH=a("a"),K6r=o("TFElectraForTokenClassification"),Z6r=o(" (ELECTRA model)"),eTr=l(),KM=a("li"),ive=a("strong"),oTr=o("flaubert"),rTr=o(" \u2014 "),wH=a("a"),tTr=o("TFFlaubertForTokenClassification"),aTr=o(" (FlauBERT model)"),nTr=l(),ZM=a("li"),dve=a("strong"),sTr=o("funnel"),lTr=o(" \u2014 "),AH=a("a"),iTr=o("TFFunnelForTokenClassification"),dTr=o(" (Funnel Transformer model)"),cTr=l(),e4=a("li"),cve=a("strong"),fTr=o("layoutlm"),mTr=o(" \u2014 "),yH=a("a"),gTr=o("TFLayoutLMForTokenClassification"),hTr=o(" (LayoutLM model)"),pTr=l(),o4=a("li"),fve=a("strong"),uTr=o("longformer"),_Tr=o(" \u2014 "),LH=a("a"),bTr=o("TFLongformerForTokenClassification"),vTr=o(" (Longformer model)"),FTr=l(),r4=a("li"),mve=a("strong"),TTr=o("mobilebert"),MTr=o(" \u2014 "),xH=a("a"),ETr=o("TFMobileBertForTokenClassification"),CTr=o(" (MobileBERT model)"),wTr=l(),t4=a("li"),gve=a("strong"),ATr=o("mpnet"),yTr=o(" \u2014 "),$H=a("a"),LTr=o("TFMPNetForTokenClassification"),xTr=o(" (MPNet model)"),$Tr=l(),a4=a("li"),hve=a("strong"),kTr=o("rembert"),STr=o(" \u2014 "),kH=a("a"),RTr=o("TFRemBertForTokenClassification"),BTr=o(" (RemBERT model)"),PTr=l(),n4=a("li"),pve=a("strong"),ITr=o("roberta"),qTr=o(" \u2014 "),SH=a("a"),NTr=o("TFRobertaForTokenClassification"),jTr=o(" (RoBERTa model)"),DTr=l(),s4=a("li"),uve=a("strong"),GTr=o("roformer"),OTr=o(" \u2014 "),RH=a("a"),VTr=o("TFRoFormerForTokenClassification"),XTr=o(" (RoFormer model)"),zTr=l(),l4=a("li"),_ve=a("strong"),QTr=o("xlm"),WTr=o(" \u2014 "),BH=a("a"),HTr=o("TFXLMForTokenClassification"),UTr=o(" (XLM model)"),JTr=l(),i4=a("li"),bve=a("strong"),YTr=o("xlm-roberta"),KTr=o(" \u2014 "),PH=a("a"),ZTr=o("TFXLMRobertaForTokenClassification"),e9r=o(" (XLM-RoBERTa model)"),o9r=l(),d4=a("li"),vve=a("strong"),r9r=o("xlnet"),t9r=o(" \u2014 "),IH=a("a"),a9r=o("TFXLNetForTokenClassification"),n9r=o(" (XLNet model)"),s9r=l(),F(c4.$$.fragment),NIe=l(),_c=a("h2"),f4=a("a"),Fve=a("span"),F(yL.$$.fragment),l9r=l(),Tve=a("span"),i9r=o("TFAutoModelForQuestionAnswering"),jIe=l(),ir=a("div"),F(LL.$$.fragment),d9r=l(),bc=a("p"),c9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),qH=a("a"),f9r=o("from_pretrained()"),m9r=o(" class method or the "),NH=a("a"),g9r=o("from_config()"),h9r=o(` class
method.`),p9r=l(),xL=a("p"),u9r=o("This class cannot be instantiated directly using "),Mve=a("code"),_9r=o("__init__()"),b9r=o(" (throws an error)."),v9r=l(),It=a("div"),F($L.$$.fragment),F9r=l(),Eve=a("p"),T9r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),M9r=l(),vc=a("p"),E9r=o(`Note:
Loading a model from its configuration file does `),Cve=a("strong"),C9r=o("not"),w9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jH=a("a"),A9r=o("from_pretrained()"),y9r=o(" to load the model weights."),L9r=l(),F(m4.$$.fragment),x9r=l(),Ir=a("div"),F(kL.$$.fragment),$9r=l(),wve=a("p"),k9r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),S9r=l(),fn=a("p"),R9r=o("The model class to instantiate is selected based on the "),Ave=a("code"),B9r=o("model_type"),P9r=o(` property of the config object (either
passed as an argument or loaded from `),yve=a("code"),I9r=o("pretrained_model_name_or_path"),q9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lve=a("code"),N9r=o("pretrained_model_name_or_path"),j9r=o(":"),D9r=l(),ce=a("ul"),g4=a("li"),xve=a("strong"),G9r=o("albert"),O9r=o(" \u2014 "),DH=a("a"),V9r=o("TFAlbertForQuestionAnswering"),X9r=o(" (ALBERT model)"),z9r=l(),h4=a("li"),$ve=a("strong"),Q9r=o("bert"),W9r=o(" \u2014 "),GH=a("a"),H9r=o("TFBertForQuestionAnswering"),U9r=o(" (BERT model)"),J9r=l(),p4=a("li"),kve=a("strong"),Y9r=o("camembert"),K9r=o(" \u2014 "),OH=a("a"),Z9r=o("TFCamembertForQuestionAnswering"),eMr=o(" (CamemBERT model)"),oMr=l(),u4=a("li"),Sve=a("strong"),rMr=o("convbert"),tMr=o(" \u2014 "),VH=a("a"),aMr=o("TFConvBertForQuestionAnswering"),nMr=o(" (ConvBERT model)"),sMr=l(),_4=a("li"),Rve=a("strong"),lMr=o("deberta"),iMr=o(" \u2014 "),XH=a("a"),dMr=o("TFDebertaForQuestionAnswering"),cMr=o(" (DeBERTa model)"),fMr=l(),b4=a("li"),Bve=a("strong"),mMr=o("deberta-v2"),gMr=o(" \u2014 "),zH=a("a"),hMr=o("TFDebertaV2ForQuestionAnswering"),pMr=o(" (DeBERTa-v2 model)"),uMr=l(),v4=a("li"),Pve=a("strong"),_Mr=o("distilbert"),bMr=o(" \u2014 "),QH=a("a"),vMr=o("TFDistilBertForQuestionAnswering"),FMr=o(" (DistilBERT model)"),TMr=l(),F4=a("li"),Ive=a("strong"),MMr=o("electra"),EMr=o(" \u2014 "),WH=a("a"),CMr=o("TFElectraForQuestionAnswering"),wMr=o(" (ELECTRA model)"),AMr=l(),T4=a("li"),qve=a("strong"),yMr=o("flaubert"),LMr=o(" \u2014 "),HH=a("a"),xMr=o("TFFlaubertForQuestionAnsweringSimple"),$Mr=o(" (FlauBERT model)"),kMr=l(),M4=a("li"),Nve=a("strong"),SMr=o("funnel"),RMr=o(" \u2014 "),UH=a("a"),BMr=o("TFFunnelForQuestionAnswering"),PMr=o(" (Funnel Transformer model)"),IMr=l(),E4=a("li"),jve=a("strong"),qMr=o("gptj"),NMr=o(" \u2014 "),JH=a("a"),jMr=o("TFGPTJForQuestionAnswering"),DMr=o(" (GPT-J model)"),GMr=l(),C4=a("li"),Dve=a("strong"),OMr=o("longformer"),VMr=o(" \u2014 "),YH=a("a"),XMr=o("TFLongformerForQuestionAnswering"),zMr=o(" (Longformer model)"),QMr=l(),w4=a("li"),Gve=a("strong"),WMr=o("mobilebert"),HMr=o(" \u2014 "),KH=a("a"),UMr=o("TFMobileBertForQuestionAnswering"),JMr=o(" (MobileBERT model)"),YMr=l(),A4=a("li"),Ove=a("strong"),KMr=o("mpnet"),ZMr=o(" \u2014 "),ZH=a("a"),e4r=o("TFMPNetForQuestionAnswering"),o4r=o(" (MPNet model)"),r4r=l(),y4=a("li"),Vve=a("strong"),t4r=o("rembert"),a4r=o(" \u2014 "),eU=a("a"),n4r=o("TFRemBertForQuestionAnswering"),s4r=o(" (RemBERT model)"),l4r=l(),L4=a("li"),Xve=a("strong"),i4r=o("roberta"),d4r=o(" \u2014 "),oU=a("a"),c4r=o("TFRobertaForQuestionAnswering"),f4r=o(" (RoBERTa model)"),m4r=l(),x4=a("li"),zve=a("strong"),g4r=o("roformer"),h4r=o(" \u2014 "),rU=a("a"),p4r=o("TFRoFormerForQuestionAnswering"),u4r=o(" (RoFormer model)"),_4r=l(),$4=a("li"),Qve=a("strong"),b4r=o("xlm"),v4r=o(" \u2014 "),tU=a("a"),F4r=o("TFXLMForQuestionAnsweringSimple"),T4r=o(" (XLM model)"),M4r=l(),k4=a("li"),Wve=a("strong"),E4r=o("xlm-roberta"),C4r=o(" \u2014 "),aU=a("a"),w4r=o("TFXLMRobertaForQuestionAnswering"),A4r=o(" (XLM-RoBERTa model)"),y4r=l(),S4=a("li"),Hve=a("strong"),L4r=o("xlnet"),x4r=o(" \u2014 "),nU=a("a"),$4r=o("TFXLNetForQuestionAnsweringSimple"),k4r=o(" (XLNet model)"),S4r=l(),F(R4.$$.fragment),DIe=l(),Fc=a("h2"),B4=a("a"),Uve=a("span"),F(SL.$$.fragment),R4r=l(),Jve=a("span"),B4r=o("TFAutoModelForVision2Seq"),GIe=l(),dr=a("div"),F(RL.$$.fragment),P4r=l(),Tc=a("p"),I4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),sU=a("a"),q4r=o("from_pretrained()"),N4r=o(" class method or the "),lU=a("a"),j4r=o("from_config()"),D4r=o(` class
method.`),G4r=l(),BL=a("p"),O4r=o("This class cannot be instantiated directly using "),Yve=a("code"),V4r=o("__init__()"),X4r=o(" (throws an error)."),z4r=l(),qt=a("div"),F(PL.$$.fragment),Q4r=l(),Kve=a("p"),W4r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),H4r=l(),Mc=a("p"),U4r=o(`Note:
Loading a model from its configuration file does `),Zve=a("strong"),J4r=o("not"),Y4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iU=a("a"),K4r=o("from_pretrained()"),Z4r=o(" to load the model weights."),eEr=l(),F(P4.$$.fragment),oEr=l(),qr=a("div"),F(IL.$$.fragment),rEr=l(),eFe=a("p"),tEr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),aEr=l(),mn=a("p"),nEr=o("The model class to instantiate is selected based on the "),oFe=a("code"),sEr=o("model_type"),lEr=o(` property of the config object (either
passed as an argument or loaded from `),rFe=a("code"),iEr=o("pretrained_model_name_or_path"),dEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tFe=a("code"),cEr=o("pretrained_model_name_or_path"),fEr=o(":"),mEr=l(),aFe=a("ul"),I4=a("li"),nFe=a("strong"),gEr=o("vision-encoder-decoder"),hEr=o(" \u2014 "),dU=a("a"),pEr=o("TFVisionEncoderDecoderModel"),uEr=o(" (Vision Encoder decoder model)"),_Er=l(),F(q4.$$.fragment),OIe=l(),Ec=a("h2"),N4=a("a"),sFe=a("span"),F(qL.$$.fragment),bEr=l(),lFe=a("span"),vEr=o("TFAutoModelForSpeechSeq2Seq"),VIe=l(),cr=a("div"),F(NL.$$.fragment),FEr=l(),Cc=a("p"),TEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),cU=a("a"),MEr=o("from_pretrained()"),EEr=o(" class method or the "),fU=a("a"),CEr=o("from_config()"),wEr=o(` class
method.`),AEr=l(),jL=a("p"),yEr=o("This class cannot be instantiated directly using "),iFe=a("code"),LEr=o("__init__()"),xEr=o(" (throws an error)."),$Er=l(),Nt=a("div"),F(DL.$$.fragment),kEr=l(),dFe=a("p"),SEr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),REr=l(),wc=a("p"),BEr=o(`Note:
Loading a model from its configuration file does `),cFe=a("strong"),PEr=o("not"),IEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mU=a("a"),qEr=o("from_pretrained()"),NEr=o(" to load the model weights."),jEr=l(),F(j4.$$.fragment),DEr=l(),Nr=a("div"),F(GL.$$.fragment),GEr=l(),fFe=a("p"),OEr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),VEr=l(),gn=a("p"),XEr=o("The model class to instantiate is selected based on the "),mFe=a("code"),zEr=o("model_type"),QEr=o(` property of the config object (either
passed as an argument or loaded from `),gFe=a("code"),WEr=o("pretrained_model_name_or_path"),HEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hFe=a("code"),UEr=o("pretrained_model_name_or_path"),JEr=o(":"),YEr=l(),pFe=a("ul"),D4=a("li"),uFe=a("strong"),KEr=o("speech_to_text"),ZEr=o(" \u2014 "),gU=a("a"),e5r=o("TFSpeech2TextForConditionalGeneration"),o5r=o(" (Speech2Text model)"),r5r=l(),F(G4.$$.fragment),XIe=l(),Ac=a("h2"),O4=a("a"),_Fe=a("span"),F(OL.$$.fragment),t5r=l(),bFe=a("span"),a5r=o("FlaxAutoModel"),zIe=l(),fr=a("div"),F(VL.$$.fragment),n5r=l(),yc=a("p"),s5r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),hU=a("a"),l5r=o("from_pretrained()"),i5r=o(" class method or the "),pU=a("a"),d5r=o("from_config()"),c5r=o(` class
method.`),f5r=l(),XL=a("p"),m5r=o("This class cannot be instantiated directly using "),vFe=a("code"),g5r=o("__init__()"),h5r=o(" (throws an error)."),p5r=l(),jt=a("div"),F(zL.$$.fragment),u5r=l(),FFe=a("p"),_5r=o("Instantiates one of the base model classes of the library from a configuration."),b5r=l(),Lc=a("p"),v5r=o(`Note:
Loading a model from its configuration file does `),TFe=a("strong"),F5r=o("not"),T5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uU=a("a"),M5r=o("from_pretrained()"),E5r=o(" to load the model weights."),C5r=l(),F(V4.$$.fragment),w5r=l(),jr=a("div"),F(QL.$$.fragment),A5r=l(),MFe=a("p"),y5r=o("Instantiate one of the base model classes of the library from a pretrained model."),L5r=l(),hn=a("p"),x5r=o("The model class to instantiate is selected based on the "),EFe=a("code"),$5r=o("model_type"),k5r=o(` property of the config object (either
passed as an argument or loaded from `),CFe=a("code"),S5r=o("pretrained_model_name_or_path"),R5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wFe=a("code"),B5r=o("pretrained_model_name_or_path"),P5r=o(":"),I5r=l(),oe=a("ul"),X4=a("li"),AFe=a("strong"),q5r=o("albert"),N5r=o(" \u2014 "),_U=a("a"),j5r=o("FlaxAlbertModel"),D5r=o(" (ALBERT model)"),G5r=l(),z4=a("li"),yFe=a("strong"),O5r=o("bart"),V5r=o(" \u2014 "),bU=a("a"),X5r=o("FlaxBartModel"),z5r=o(" (BART model)"),Q5r=l(),Q4=a("li"),LFe=a("strong"),W5r=o("beit"),H5r=o(" \u2014 "),vU=a("a"),U5r=o("FlaxBeitModel"),J5r=o(" (BEiT model)"),Y5r=l(),W4=a("li"),xFe=a("strong"),K5r=o("bert"),Z5r=o(" \u2014 "),FU=a("a"),eCr=o("FlaxBertModel"),oCr=o(" (BERT model)"),rCr=l(),H4=a("li"),$Fe=a("strong"),tCr=o("big_bird"),aCr=o(" \u2014 "),TU=a("a"),nCr=o("FlaxBigBirdModel"),sCr=o(" (BigBird model)"),lCr=l(),U4=a("li"),kFe=a("strong"),iCr=o("blenderbot"),dCr=o(" \u2014 "),MU=a("a"),cCr=o("FlaxBlenderbotModel"),fCr=o(" (Blenderbot model)"),mCr=l(),J4=a("li"),SFe=a("strong"),gCr=o("blenderbot-small"),hCr=o(" \u2014 "),EU=a("a"),pCr=o("FlaxBlenderbotSmallModel"),uCr=o(" (BlenderbotSmall model)"),_Cr=l(),Y4=a("li"),RFe=a("strong"),bCr=o("clip"),vCr=o(" \u2014 "),CU=a("a"),FCr=o("FlaxCLIPModel"),TCr=o(" (CLIP model)"),MCr=l(),K4=a("li"),BFe=a("strong"),ECr=o("distilbert"),CCr=o(" \u2014 "),wU=a("a"),wCr=o("FlaxDistilBertModel"),ACr=o(" (DistilBERT model)"),yCr=l(),Z4=a("li"),PFe=a("strong"),LCr=o("electra"),xCr=o(" \u2014 "),AU=a("a"),$Cr=o("FlaxElectraModel"),kCr=o(" (ELECTRA model)"),SCr=l(),eE=a("li"),IFe=a("strong"),RCr=o("gpt2"),BCr=o(" \u2014 "),yU=a("a"),PCr=o("FlaxGPT2Model"),ICr=o(" (OpenAI GPT-2 model)"),qCr=l(),oE=a("li"),qFe=a("strong"),NCr=o("gpt_neo"),jCr=o(" \u2014 "),LU=a("a"),DCr=o("FlaxGPTNeoModel"),GCr=o(" (GPT Neo model)"),OCr=l(),rE=a("li"),NFe=a("strong"),VCr=o("gptj"),XCr=o(" \u2014 "),xU=a("a"),zCr=o("FlaxGPTJModel"),QCr=o(" (GPT-J model)"),WCr=l(),tE=a("li"),jFe=a("strong"),HCr=o("marian"),UCr=o(" \u2014 "),$U=a("a"),JCr=o("FlaxMarianModel"),YCr=o(" (Marian model)"),KCr=l(),aE=a("li"),DFe=a("strong"),ZCr=o("mbart"),e3r=o(" \u2014 "),kU=a("a"),o3r=o("FlaxMBartModel"),r3r=o(" (mBART model)"),t3r=l(),nE=a("li"),GFe=a("strong"),a3r=o("mt5"),n3r=o(" \u2014 "),SU=a("a"),s3r=o("FlaxMT5Model"),l3r=o(" (mT5 model)"),i3r=l(),sE=a("li"),OFe=a("strong"),d3r=o("pegasus"),c3r=o(" \u2014 "),RU=a("a"),f3r=o("FlaxPegasusModel"),m3r=o(" (Pegasus model)"),g3r=l(),lE=a("li"),VFe=a("strong"),h3r=o("roberta"),p3r=o(" \u2014 "),BU=a("a"),u3r=o("FlaxRobertaModel"),_3r=o(" (RoBERTa model)"),b3r=l(),iE=a("li"),XFe=a("strong"),v3r=o("roformer"),F3r=o(" \u2014 "),PU=a("a"),T3r=o("FlaxRoFormerModel"),M3r=o(" (RoFormer model)"),E3r=l(),dE=a("li"),zFe=a("strong"),C3r=o("t5"),w3r=o(" \u2014 "),IU=a("a"),A3r=o("FlaxT5Model"),y3r=o(" (T5 model)"),L3r=l(),cE=a("li"),QFe=a("strong"),x3r=o("vision-text-dual-encoder"),$3r=o(" \u2014 "),qU=a("a"),k3r=o("FlaxVisionTextDualEncoderModel"),S3r=o(" (VisionTextDualEncoder model)"),R3r=l(),fE=a("li"),WFe=a("strong"),B3r=o("vit"),P3r=o(" \u2014 "),NU=a("a"),I3r=o("FlaxViTModel"),q3r=o(" (ViT model)"),N3r=l(),mE=a("li"),HFe=a("strong"),j3r=o("wav2vec2"),D3r=o(" \u2014 "),jU=a("a"),G3r=o("FlaxWav2Vec2Model"),O3r=o(" (Wav2Vec2 model)"),V3r=l(),gE=a("li"),UFe=a("strong"),X3r=o("xglm"),z3r=o(" \u2014 "),DU=a("a"),Q3r=o("FlaxXGLMModel"),W3r=o(" (XGLM model)"),H3r=l(),hE=a("li"),JFe=a("strong"),U3r=o("xlm-roberta"),J3r=o(" \u2014 "),GU=a("a"),Y3r=o("FlaxXLMRobertaModel"),K3r=o(" (XLM-RoBERTa model)"),Z3r=l(),F(pE.$$.fragment),QIe=l(),xc=a("h2"),uE=a("a"),YFe=a("span"),F(WL.$$.fragment),ewr=l(),KFe=a("span"),owr=o("FlaxAutoModelForCausalLM"),WIe=l(),mr=a("div"),F(HL.$$.fragment),rwr=l(),$c=a("p"),twr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),OU=a("a"),awr=o("from_pretrained()"),nwr=o(" class method or the "),VU=a("a"),swr=o("from_config()"),lwr=o(` class
method.`),iwr=l(),UL=a("p"),dwr=o("This class cannot be instantiated directly using "),ZFe=a("code"),cwr=o("__init__()"),fwr=o(" (throws an error)."),mwr=l(),Dt=a("div"),F(JL.$$.fragment),gwr=l(),e6e=a("p"),hwr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),pwr=l(),kc=a("p"),uwr=o(`Note:
Loading a model from its configuration file does `),o6e=a("strong"),_wr=o("not"),bwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XU=a("a"),vwr=o("from_pretrained()"),Fwr=o(" to load the model weights."),Twr=l(),F(_E.$$.fragment),Mwr=l(),Dr=a("div"),F(YL.$$.fragment),Ewr=l(),r6e=a("p"),Cwr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),wwr=l(),pn=a("p"),Awr=o("The model class to instantiate is selected based on the "),t6e=a("code"),ywr=o("model_type"),Lwr=o(` property of the config object (either
passed as an argument or loaded from `),a6e=a("code"),xwr=o("pretrained_model_name_or_path"),$wr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n6e=a("code"),kwr=o("pretrained_model_name_or_path"),Swr=o(":"),Rwr=l(),ke=a("ul"),bE=a("li"),s6e=a("strong"),Bwr=o("bart"),Pwr=o(" \u2014 "),zU=a("a"),Iwr=o("FlaxBartForCausalLM"),qwr=o(" (BART model)"),Nwr=l(),vE=a("li"),l6e=a("strong"),jwr=o("bert"),Dwr=o(" \u2014 "),QU=a("a"),Gwr=o("FlaxBertForCausalLM"),Owr=o(" (BERT model)"),Vwr=l(),FE=a("li"),i6e=a("strong"),Xwr=o("big_bird"),zwr=o(" \u2014 "),WU=a("a"),Qwr=o("FlaxBigBirdForCausalLM"),Wwr=o(" (BigBird model)"),Hwr=l(),TE=a("li"),d6e=a("strong"),Uwr=o("electra"),Jwr=o(" \u2014 "),HU=a("a"),Ywr=o("FlaxElectraForCausalLM"),Kwr=o(" (ELECTRA model)"),Zwr=l(),ME=a("li"),c6e=a("strong"),eAr=o("gpt2"),oAr=o(" \u2014 "),UU=a("a"),rAr=o("FlaxGPT2LMHeadModel"),tAr=o(" (OpenAI GPT-2 model)"),aAr=l(),EE=a("li"),f6e=a("strong"),nAr=o("gpt_neo"),sAr=o(" \u2014 "),JU=a("a"),lAr=o("FlaxGPTNeoForCausalLM"),iAr=o(" (GPT Neo model)"),dAr=l(),CE=a("li"),m6e=a("strong"),cAr=o("gptj"),fAr=o(" \u2014 "),YU=a("a"),mAr=o("FlaxGPTJForCausalLM"),gAr=o(" (GPT-J model)"),hAr=l(),wE=a("li"),g6e=a("strong"),pAr=o("roberta"),uAr=o(" \u2014 "),KU=a("a"),_Ar=o("FlaxRobertaForCausalLM"),bAr=o(" (RoBERTa model)"),vAr=l(),AE=a("li"),h6e=a("strong"),FAr=o("xglm"),TAr=o(" \u2014 "),ZU=a("a"),MAr=o("FlaxXGLMForCausalLM"),EAr=o(" (XGLM model)"),CAr=l(),F(yE.$$.fragment),HIe=l(),Sc=a("h2"),LE=a("a"),p6e=a("span"),F(KL.$$.fragment),wAr=l(),u6e=a("span"),AAr=o("FlaxAutoModelForPreTraining"),UIe=l(),gr=a("div"),F(ZL.$$.fragment),yAr=l(),Rc=a("p"),LAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),eJ=a("a"),xAr=o("from_pretrained()"),$Ar=o(" class method or the "),oJ=a("a"),kAr=o("from_config()"),SAr=o(` class
method.`),RAr=l(),ex=a("p"),BAr=o("This class cannot be instantiated directly using "),_6e=a("code"),PAr=o("__init__()"),IAr=o(" (throws an error)."),qAr=l(),Gt=a("div"),F(ox.$$.fragment),NAr=l(),b6e=a("p"),jAr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),DAr=l(),Bc=a("p"),GAr=o(`Note:
Loading a model from its configuration file does `),v6e=a("strong"),OAr=o("not"),VAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rJ=a("a"),XAr=o("from_pretrained()"),zAr=o(" to load the model weights."),QAr=l(),F(xE.$$.fragment),WAr=l(),Gr=a("div"),F(rx.$$.fragment),HAr=l(),F6e=a("p"),UAr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),JAr=l(),un=a("p"),YAr=o("The model class to instantiate is selected based on the "),T6e=a("code"),KAr=o("model_type"),ZAr=o(` property of the config object (either
passed as an argument or loaded from `),M6e=a("code"),e0r=o("pretrained_model_name_or_path"),o0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E6e=a("code"),r0r=o("pretrained_model_name_or_path"),t0r=o(":"),a0r=l(),Me=a("ul"),$E=a("li"),C6e=a("strong"),n0r=o("albert"),s0r=o(" \u2014 "),tJ=a("a"),l0r=o("FlaxAlbertForPreTraining"),i0r=o(" (ALBERT model)"),d0r=l(),kE=a("li"),w6e=a("strong"),c0r=o("bart"),f0r=o(" \u2014 "),aJ=a("a"),m0r=o("FlaxBartForConditionalGeneration"),g0r=o(" (BART model)"),h0r=l(),SE=a("li"),A6e=a("strong"),p0r=o("bert"),u0r=o(" \u2014 "),nJ=a("a"),_0r=o("FlaxBertForPreTraining"),b0r=o(" (BERT model)"),v0r=l(),RE=a("li"),y6e=a("strong"),F0r=o("big_bird"),T0r=o(" \u2014 "),sJ=a("a"),M0r=o("FlaxBigBirdForPreTraining"),E0r=o(" (BigBird model)"),C0r=l(),BE=a("li"),L6e=a("strong"),w0r=o("electra"),A0r=o(" \u2014 "),lJ=a("a"),y0r=o("FlaxElectraForPreTraining"),L0r=o(" (ELECTRA model)"),x0r=l(),PE=a("li"),x6e=a("strong"),$0r=o("mbart"),k0r=o(" \u2014 "),iJ=a("a"),S0r=o("FlaxMBartForConditionalGeneration"),R0r=o(" (mBART model)"),B0r=l(),IE=a("li"),$6e=a("strong"),P0r=o("mt5"),I0r=o(" \u2014 "),dJ=a("a"),q0r=o("FlaxMT5ForConditionalGeneration"),N0r=o(" (mT5 model)"),j0r=l(),qE=a("li"),k6e=a("strong"),D0r=o("roberta"),G0r=o(" \u2014 "),cJ=a("a"),O0r=o("FlaxRobertaForMaskedLM"),V0r=o(" (RoBERTa model)"),X0r=l(),NE=a("li"),S6e=a("strong"),z0r=o("roformer"),Q0r=o(" \u2014 "),fJ=a("a"),W0r=o("FlaxRoFormerForMaskedLM"),H0r=o(" (RoFormer model)"),U0r=l(),jE=a("li"),R6e=a("strong"),J0r=o("t5"),Y0r=o(" \u2014 "),mJ=a("a"),K0r=o("FlaxT5ForConditionalGeneration"),Z0r=o(" (T5 model)"),eyr=l(),DE=a("li"),B6e=a("strong"),oyr=o("wav2vec2"),ryr=o(" \u2014 "),gJ=a("a"),tyr=o("FlaxWav2Vec2ForPreTraining"),ayr=o(" (Wav2Vec2 model)"),nyr=l(),GE=a("li"),P6e=a("strong"),syr=o("xlm-roberta"),lyr=o(" \u2014 "),hJ=a("a"),iyr=o("FlaxXLMRobertaForMaskedLM"),dyr=o(" (XLM-RoBERTa model)"),cyr=l(),F(OE.$$.fragment),JIe=l(),Pc=a("h2"),VE=a("a"),I6e=a("span"),F(tx.$$.fragment),fyr=l(),q6e=a("span"),myr=o("FlaxAutoModelForMaskedLM"),YIe=l(),hr=a("div"),F(ax.$$.fragment),gyr=l(),Ic=a("p"),hyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),pJ=a("a"),pyr=o("from_pretrained()"),uyr=o(" class method or the "),uJ=a("a"),_yr=o("from_config()"),byr=o(` class
method.`),vyr=l(),nx=a("p"),Fyr=o("This class cannot be instantiated directly using "),N6e=a("code"),Tyr=o("__init__()"),Myr=o(" (throws an error)."),Eyr=l(),Ot=a("div"),F(sx.$$.fragment),Cyr=l(),j6e=a("p"),wyr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Ayr=l(),qc=a("p"),yyr=o(`Note:
Loading a model from its configuration file does `),D6e=a("strong"),Lyr=o("not"),xyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_J=a("a"),$yr=o("from_pretrained()"),kyr=o(" to load the model weights."),Syr=l(),F(XE.$$.fragment),Ryr=l(),Or=a("div"),F(lx.$$.fragment),Byr=l(),G6e=a("p"),Pyr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Iyr=l(),_n=a("p"),qyr=o("The model class to instantiate is selected based on the "),O6e=a("code"),Nyr=o("model_type"),jyr=o(` property of the config object (either
passed as an argument or loaded from `),V6e=a("code"),Dyr=o("pretrained_model_name_or_path"),Gyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X6e=a("code"),Oyr=o("pretrained_model_name_or_path"),Vyr=o(":"),Xyr=l(),Le=a("ul"),zE=a("li"),z6e=a("strong"),zyr=o("albert"),Qyr=o(" \u2014 "),bJ=a("a"),Wyr=o("FlaxAlbertForMaskedLM"),Hyr=o(" (ALBERT model)"),Uyr=l(),QE=a("li"),Q6e=a("strong"),Jyr=o("bart"),Yyr=o(" \u2014 "),vJ=a("a"),Kyr=o("FlaxBartForConditionalGeneration"),Zyr=o(" (BART model)"),eLr=l(),WE=a("li"),W6e=a("strong"),oLr=o("bert"),rLr=o(" \u2014 "),FJ=a("a"),tLr=o("FlaxBertForMaskedLM"),aLr=o(" (BERT model)"),nLr=l(),HE=a("li"),H6e=a("strong"),sLr=o("big_bird"),lLr=o(" \u2014 "),TJ=a("a"),iLr=o("FlaxBigBirdForMaskedLM"),dLr=o(" (BigBird model)"),cLr=l(),UE=a("li"),U6e=a("strong"),fLr=o("distilbert"),mLr=o(" \u2014 "),MJ=a("a"),gLr=o("FlaxDistilBertForMaskedLM"),hLr=o(" (DistilBERT model)"),pLr=l(),JE=a("li"),J6e=a("strong"),uLr=o("electra"),_Lr=o(" \u2014 "),EJ=a("a"),bLr=o("FlaxElectraForMaskedLM"),vLr=o(" (ELECTRA model)"),FLr=l(),YE=a("li"),Y6e=a("strong"),TLr=o("mbart"),MLr=o(" \u2014 "),CJ=a("a"),ELr=o("FlaxMBartForConditionalGeneration"),CLr=o(" (mBART model)"),wLr=l(),KE=a("li"),K6e=a("strong"),ALr=o("roberta"),yLr=o(" \u2014 "),wJ=a("a"),LLr=o("FlaxRobertaForMaskedLM"),xLr=o(" (RoBERTa model)"),$Lr=l(),ZE=a("li"),Z6e=a("strong"),kLr=o("roformer"),SLr=o(" \u2014 "),AJ=a("a"),RLr=o("FlaxRoFormerForMaskedLM"),BLr=o(" (RoFormer model)"),PLr=l(),e5=a("li"),eTe=a("strong"),ILr=o("xlm-roberta"),qLr=o(" \u2014 "),yJ=a("a"),NLr=o("FlaxXLMRobertaForMaskedLM"),jLr=o(" (XLM-RoBERTa model)"),DLr=l(),F(o5.$$.fragment),KIe=l(),Nc=a("h2"),r5=a("a"),oTe=a("span"),F(ix.$$.fragment),GLr=l(),rTe=a("span"),OLr=o("FlaxAutoModelForSeq2SeqLM"),ZIe=l(),pr=a("div"),F(dx.$$.fragment),VLr=l(),jc=a("p"),XLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),LJ=a("a"),zLr=o("from_pretrained()"),QLr=o(" class method or the "),xJ=a("a"),WLr=o("from_config()"),HLr=o(` class
method.`),ULr=l(),cx=a("p"),JLr=o("This class cannot be instantiated directly using "),tTe=a("code"),YLr=o("__init__()"),KLr=o(" (throws an error)."),ZLr=l(),Vt=a("div"),F(fx.$$.fragment),exr=l(),aTe=a("p"),oxr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),rxr=l(),Dc=a("p"),txr=o(`Note:
Loading a model from its configuration file does `),nTe=a("strong"),axr=o("not"),nxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$J=a("a"),sxr=o("from_pretrained()"),lxr=o(" to load the model weights."),ixr=l(),F(t5.$$.fragment),dxr=l(),Vr=a("div"),F(mx.$$.fragment),cxr=l(),sTe=a("p"),fxr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),mxr=l(),bn=a("p"),gxr=o("The model class to instantiate is selected based on the "),lTe=a("code"),hxr=o("model_type"),pxr=o(` property of the config object (either
passed as an argument or loaded from `),iTe=a("code"),uxr=o("pretrained_model_name_or_path"),_xr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dTe=a("code"),bxr=o("pretrained_model_name_or_path"),vxr=o(":"),Fxr=l(),Se=a("ul"),a5=a("li"),cTe=a("strong"),Txr=o("bart"),Mxr=o(" \u2014 "),kJ=a("a"),Exr=o("FlaxBartForConditionalGeneration"),Cxr=o(" (BART model)"),wxr=l(),n5=a("li"),fTe=a("strong"),Axr=o("blenderbot"),yxr=o(" \u2014 "),SJ=a("a"),Lxr=o("FlaxBlenderbotForConditionalGeneration"),xxr=o(" (Blenderbot model)"),$xr=l(),s5=a("li"),mTe=a("strong"),kxr=o("blenderbot-small"),Sxr=o(" \u2014 "),RJ=a("a"),Rxr=o("FlaxBlenderbotSmallForConditionalGeneration"),Bxr=o(" (BlenderbotSmall model)"),Pxr=l(),l5=a("li"),gTe=a("strong"),Ixr=o("encoder-decoder"),qxr=o(" \u2014 "),BJ=a("a"),Nxr=o("FlaxEncoderDecoderModel"),jxr=o(" (Encoder decoder model)"),Dxr=l(),i5=a("li"),hTe=a("strong"),Gxr=o("marian"),Oxr=o(" \u2014 "),PJ=a("a"),Vxr=o("FlaxMarianMTModel"),Xxr=o(" (Marian model)"),zxr=l(),d5=a("li"),pTe=a("strong"),Qxr=o("mbart"),Wxr=o(" \u2014 "),IJ=a("a"),Hxr=o("FlaxMBartForConditionalGeneration"),Uxr=o(" (mBART model)"),Jxr=l(),c5=a("li"),uTe=a("strong"),Yxr=o("mt5"),Kxr=o(" \u2014 "),qJ=a("a"),Zxr=o("FlaxMT5ForConditionalGeneration"),e7r=o(" (mT5 model)"),o7r=l(),f5=a("li"),_Te=a("strong"),r7r=o("pegasus"),t7r=o(" \u2014 "),NJ=a("a"),a7r=o("FlaxPegasusForConditionalGeneration"),n7r=o(" (Pegasus model)"),s7r=l(),m5=a("li"),bTe=a("strong"),l7r=o("t5"),i7r=o(" \u2014 "),jJ=a("a"),d7r=o("FlaxT5ForConditionalGeneration"),c7r=o(" (T5 model)"),f7r=l(),F(g5.$$.fragment),eqe=l(),Gc=a("h2"),h5=a("a"),vTe=a("span"),F(gx.$$.fragment),m7r=l(),FTe=a("span"),g7r=o("FlaxAutoModelForSequenceClassification"),oqe=l(),ur=a("div"),F(hx.$$.fragment),h7r=l(),Oc=a("p"),p7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),DJ=a("a"),u7r=o("from_pretrained()"),_7r=o(" class method or the "),GJ=a("a"),b7r=o("from_config()"),v7r=o(` class
method.`),F7r=l(),px=a("p"),T7r=o("This class cannot be instantiated directly using "),TTe=a("code"),M7r=o("__init__()"),E7r=o(" (throws an error)."),C7r=l(),Xt=a("div"),F(ux.$$.fragment),w7r=l(),MTe=a("p"),A7r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),y7r=l(),Vc=a("p"),L7r=o(`Note:
Loading a model from its configuration file does `),ETe=a("strong"),x7r=o("not"),$7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OJ=a("a"),k7r=o("from_pretrained()"),S7r=o(" to load the model weights."),R7r=l(),F(p5.$$.fragment),B7r=l(),Xr=a("div"),F(_x.$$.fragment),P7r=l(),CTe=a("p"),I7r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),q7r=l(),vn=a("p"),N7r=o("The model class to instantiate is selected based on the "),wTe=a("code"),j7r=o("model_type"),D7r=o(` property of the config object (either
passed as an argument or loaded from `),ATe=a("code"),G7r=o("pretrained_model_name_or_path"),O7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yTe=a("code"),V7r=o("pretrained_model_name_or_path"),X7r=o(":"),z7r=l(),xe=a("ul"),u5=a("li"),LTe=a("strong"),Q7r=o("albert"),W7r=o(" \u2014 "),VJ=a("a"),H7r=o("FlaxAlbertForSequenceClassification"),U7r=o(" (ALBERT model)"),J7r=l(),_5=a("li"),xTe=a("strong"),Y7r=o("bart"),K7r=o(" \u2014 "),XJ=a("a"),Z7r=o("FlaxBartForSequenceClassification"),e$r=o(" (BART model)"),o$r=l(),b5=a("li"),$Te=a("strong"),r$r=o("bert"),t$r=o(" \u2014 "),zJ=a("a"),a$r=o("FlaxBertForSequenceClassification"),n$r=o(" (BERT model)"),s$r=l(),v5=a("li"),kTe=a("strong"),l$r=o("big_bird"),i$r=o(" \u2014 "),QJ=a("a"),d$r=o("FlaxBigBirdForSequenceClassification"),c$r=o(" (BigBird model)"),f$r=l(),F5=a("li"),STe=a("strong"),m$r=o("distilbert"),g$r=o(" \u2014 "),WJ=a("a"),h$r=o("FlaxDistilBertForSequenceClassification"),p$r=o(" (DistilBERT model)"),u$r=l(),T5=a("li"),RTe=a("strong"),_$r=o("electra"),b$r=o(" \u2014 "),HJ=a("a"),v$r=o("FlaxElectraForSequenceClassification"),F$r=o(" (ELECTRA model)"),T$r=l(),M5=a("li"),BTe=a("strong"),M$r=o("mbart"),E$r=o(" \u2014 "),UJ=a("a"),C$r=o("FlaxMBartForSequenceClassification"),w$r=o(" (mBART model)"),A$r=l(),E5=a("li"),PTe=a("strong"),y$r=o("roberta"),L$r=o(" \u2014 "),JJ=a("a"),x$r=o("FlaxRobertaForSequenceClassification"),$$r=o(" (RoBERTa model)"),k$r=l(),C5=a("li"),ITe=a("strong"),S$r=o("roformer"),R$r=o(" \u2014 "),YJ=a("a"),B$r=o("FlaxRoFormerForSequenceClassification"),P$r=o(" (RoFormer model)"),I$r=l(),w5=a("li"),qTe=a("strong"),q$r=o("xlm-roberta"),N$r=o(" \u2014 "),KJ=a("a"),j$r=o("FlaxXLMRobertaForSequenceClassification"),D$r=o(" (XLM-RoBERTa model)"),G$r=l(),F(A5.$$.fragment),rqe=l(),Xc=a("h2"),y5=a("a"),NTe=a("span"),F(bx.$$.fragment),O$r=l(),jTe=a("span"),V$r=o("FlaxAutoModelForQuestionAnswering"),tqe=l(),_r=a("div"),F(vx.$$.fragment),X$r=l(),zc=a("p"),z$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),ZJ=a("a"),Q$r=o("from_pretrained()"),W$r=o(" class method or the "),eY=a("a"),H$r=o("from_config()"),U$r=o(` class
method.`),J$r=l(),Fx=a("p"),Y$r=o("This class cannot be instantiated directly using "),DTe=a("code"),K$r=o("__init__()"),Z$r=o(" (throws an error)."),ekr=l(),zt=a("div"),F(Tx.$$.fragment),okr=l(),GTe=a("p"),rkr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),tkr=l(),Qc=a("p"),akr=o(`Note:
Loading a model from its configuration file does `),OTe=a("strong"),nkr=o("not"),skr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=a("a"),lkr=o("from_pretrained()"),ikr=o(" to load the model weights."),dkr=l(),F(L5.$$.fragment),ckr=l(),zr=a("div"),F(Mx.$$.fragment),fkr=l(),VTe=a("p"),mkr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),gkr=l(),Fn=a("p"),hkr=o("The model class to instantiate is selected based on the "),XTe=a("code"),pkr=o("model_type"),ukr=o(` property of the config object (either
passed as an argument or loaded from `),zTe=a("code"),_kr=o("pretrained_model_name_or_path"),bkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QTe=a("code"),vkr=o("pretrained_model_name_or_path"),Fkr=o(":"),Tkr=l(),$e=a("ul"),x5=a("li"),WTe=a("strong"),Mkr=o("albert"),Ekr=o(" \u2014 "),rY=a("a"),Ckr=o("FlaxAlbertForQuestionAnswering"),wkr=o(" (ALBERT model)"),Akr=l(),$5=a("li"),HTe=a("strong"),ykr=o("bart"),Lkr=o(" \u2014 "),tY=a("a"),xkr=o("FlaxBartForQuestionAnswering"),$kr=o(" (BART model)"),kkr=l(),k5=a("li"),UTe=a("strong"),Skr=o("bert"),Rkr=o(" \u2014 "),aY=a("a"),Bkr=o("FlaxBertForQuestionAnswering"),Pkr=o(" (BERT model)"),Ikr=l(),S5=a("li"),JTe=a("strong"),qkr=o("big_bird"),Nkr=o(" \u2014 "),nY=a("a"),jkr=o("FlaxBigBirdForQuestionAnswering"),Dkr=o(" (BigBird model)"),Gkr=l(),R5=a("li"),YTe=a("strong"),Okr=o("distilbert"),Vkr=o(" \u2014 "),sY=a("a"),Xkr=o("FlaxDistilBertForQuestionAnswering"),zkr=o(" (DistilBERT model)"),Qkr=l(),B5=a("li"),KTe=a("strong"),Wkr=o("electra"),Hkr=o(" \u2014 "),lY=a("a"),Ukr=o("FlaxElectraForQuestionAnswering"),Jkr=o(" (ELECTRA model)"),Ykr=l(),P5=a("li"),ZTe=a("strong"),Kkr=o("mbart"),Zkr=o(" \u2014 "),iY=a("a"),eSr=o("FlaxMBartForQuestionAnswering"),oSr=o(" (mBART model)"),rSr=l(),I5=a("li"),e9e=a("strong"),tSr=o("roberta"),aSr=o(" \u2014 "),dY=a("a"),nSr=o("FlaxRobertaForQuestionAnswering"),sSr=o(" (RoBERTa model)"),lSr=l(),q5=a("li"),o9e=a("strong"),iSr=o("roformer"),dSr=o(" \u2014 "),cY=a("a"),cSr=o("FlaxRoFormerForQuestionAnswering"),fSr=o(" (RoFormer model)"),mSr=l(),N5=a("li"),r9e=a("strong"),gSr=o("xlm-roberta"),hSr=o(" \u2014 "),fY=a("a"),pSr=o("FlaxXLMRobertaForQuestionAnswering"),uSr=o(" (XLM-RoBERTa model)"),_Sr=l(),F(j5.$$.fragment),aqe=l(),Wc=a("h2"),D5=a("a"),t9e=a("span"),F(Ex.$$.fragment),bSr=l(),a9e=a("span"),vSr=o("FlaxAutoModelForTokenClassification"),nqe=l(),br=a("div"),F(Cx.$$.fragment),FSr=l(),Hc=a("p"),TSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),mY=a("a"),MSr=o("from_pretrained()"),ESr=o(" class method or the "),gY=a("a"),CSr=o("from_config()"),wSr=o(` class
method.`),ASr=l(),wx=a("p"),ySr=o("This class cannot be instantiated directly using "),n9e=a("code"),LSr=o("__init__()"),xSr=o(" (throws an error)."),$Sr=l(),Qt=a("div"),F(Ax.$$.fragment),kSr=l(),s9e=a("p"),SSr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),RSr=l(),Uc=a("p"),BSr=o(`Note:
Loading a model from its configuration file does `),l9e=a("strong"),PSr=o("not"),ISr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hY=a("a"),qSr=o("from_pretrained()"),NSr=o(" to load the model weights."),jSr=l(),F(G5.$$.fragment),DSr=l(),Qr=a("div"),F(yx.$$.fragment),GSr=l(),i9e=a("p"),OSr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),VSr=l(),Tn=a("p"),XSr=o("The model class to instantiate is selected based on the "),d9e=a("code"),zSr=o("model_type"),QSr=o(` property of the config object (either
passed as an argument or loaded from `),c9e=a("code"),WSr=o("pretrained_model_name_or_path"),HSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f9e=a("code"),USr=o("pretrained_model_name_or_path"),JSr=o(":"),YSr=l(),De=a("ul"),O5=a("li"),m9e=a("strong"),KSr=o("albert"),ZSr=o(" \u2014 "),pY=a("a"),eRr=o("FlaxAlbertForTokenClassification"),oRr=o(" (ALBERT model)"),rRr=l(),V5=a("li"),g9e=a("strong"),tRr=o("bert"),aRr=o(" \u2014 "),uY=a("a"),nRr=o("FlaxBertForTokenClassification"),sRr=o(" (BERT model)"),lRr=l(),X5=a("li"),h9e=a("strong"),iRr=o("big_bird"),dRr=o(" \u2014 "),_Y=a("a"),cRr=o("FlaxBigBirdForTokenClassification"),fRr=o(" (BigBird model)"),mRr=l(),z5=a("li"),p9e=a("strong"),gRr=o("distilbert"),hRr=o(" \u2014 "),bY=a("a"),pRr=o("FlaxDistilBertForTokenClassification"),uRr=o(" (DistilBERT model)"),_Rr=l(),Q5=a("li"),u9e=a("strong"),bRr=o("electra"),vRr=o(" \u2014 "),vY=a("a"),FRr=o("FlaxElectraForTokenClassification"),TRr=o(" (ELECTRA model)"),MRr=l(),W5=a("li"),_9e=a("strong"),ERr=o("roberta"),CRr=o(" \u2014 "),FY=a("a"),wRr=o("FlaxRobertaForTokenClassification"),ARr=o(" (RoBERTa model)"),yRr=l(),H5=a("li"),b9e=a("strong"),LRr=o("roformer"),xRr=o(" \u2014 "),TY=a("a"),$Rr=o("FlaxRoFormerForTokenClassification"),kRr=o(" (RoFormer model)"),SRr=l(),U5=a("li"),v9e=a("strong"),RRr=o("xlm-roberta"),BRr=o(" \u2014 "),MY=a("a"),PRr=o("FlaxXLMRobertaForTokenClassification"),IRr=o(" (XLM-RoBERTa model)"),qRr=l(),F(J5.$$.fragment),sqe=l(),Jc=a("h2"),Y5=a("a"),F9e=a("span"),F(Lx.$$.fragment),NRr=l(),T9e=a("span"),jRr=o("FlaxAutoModelForMultipleChoice"),lqe=l(),vr=a("div"),F(xx.$$.fragment),DRr=l(),Yc=a("p"),GRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),EY=a("a"),ORr=o("from_pretrained()"),VRr=o(" class method or the "),CY=a("a"),XRr=o("from_config()"),zRr=o(` class
method.`),QRr=l(),$x=a("p"),WRr=o("This class cannot be instantiated directly using "),M9e=a("code"),HRr=o("__init__()"),URr=o(" (throws an error)."),JRr=l(),Wt=a("div"),F(kx.$$.fragment),YRr=l(),E9e=a("p"),KRr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ZRr=l(),Kc=a("p"),eBr=o(`Note:
Loading a model from its configuration file does `),C9e=a("strong"),oBr=o("not"),rBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wY=a("a"),tBr=o("from_pretrained()"),aBr=o(" to load the model weights."),nBr=l(),F(K5.$$.fragment),sBr=l(),Wr=a("div"),F(Sx.$$.fragment),lBr=l(),w9e=a("p"),iBr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),dBr=l(),Mn=a("p"),cBr=o("The model class to instantiate is selected based on the "),A9e=a("code"),fBr=o("model_type"),mBr=o(` property of the config object (either
passed as an argument or loaded from `),y9e=a("code"),gBr=o("pretrained_model_name_or_path"),hBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L9e=a("code"),pBr=o("pretrained_model_name_or_path"),uBr=o(":"),_Br=l(),Ge=a("ul"),Z5=a("li"),x9e=a("strong"),bBr=o("albert"),vBr=o(" \u2014 "),AY=a("a"),FBr=o("FlaxAlbertForMultipleChoice"),TBr=o(" (ALBERT model)"),MBr=l(),eC=a("li"),$9e=a("strong"),EBr=o("bert"),CBr=o(" \u2014 "),yY=a("a"),wBr=o("FlaxBertForMultipleChoice"),ABr=o(" (BERT model)"),yBr=l(),oC=a("li"),k9e=a("strong"),LBr=o("big_bird"),xBr=o(" \u2014 "),LY=a("a"),$Br=o("FlaxBigBirdForMultipleChoice"),kBr=o(" (BigBird model)"),SBr=l(),rC=a("li"),S9e=a("strong"),RBr=o("distilbert"),BBr=o(" \u2014 "),xY=a("a"),PBr=o("FlaxDistilBertForMultipleChoice"),IBr=o(" (DistilBERT model)"),qBr=l(),tC=a("li"),R9e=a("strong"),NBr=o("electra"),jBr=o(" \u2014 "),$Y=a("a"),DBr=o("FlaxElectraForMultipleChoice"),GBr=o(" (ELECTRA model)"),OBr=l(),aC=a("li"),B9e=a("strong"),VBr=o("roberta"),XBr=o(" \u2014 "),kY=a("a"),zBr=o("FlaxRobertaForMultipleChoice"),QBr=o(" (RoBERTa model)"),WBr=l(),nC=a("li"),P9e=a("strong"),HBr=o("roformer"),UBr=o(" \u2014 "),SY=a("a"),JBr=o("FlaxRoFormerForMultipleChoice"),YBr=o(" (RoFormer model)"),KBr=l(),sC=a("li"),I9e=a("strong"),ZBr=o("xlm-roberta"),ePr=o(" \u2014 "),RY=a("a"),oPr=o("FlaxXLMRobertaForMultipleChoice"),rPr=o(" (XLM-RoBERTa model)"),tPr=l(),F(lC.$$.fragment),iqe=l(),Zc=a("h2"),iC=a("a"),q9e=a("span"),F(Rx.$$.fragment),aPr=l(),N9e=a("span"),nPr=o("FlaxAutoModelForNextSentencePrediction"),dqe=l(),Fr=a("div"),F(Bx.$$.fragment),sPr=l(),ef=a("p"),lPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),BY=a("a"),iPr=o("from_pretrained()"),dPr=o(" class method or the "),PY=a("a"),cPr=o("from_config()"),fPr=o(` class
method.`),mPr=l(),Px=a("p"),gPr=o("This class cannot be instantiated directly using "),j9e=a("code"),hPr=o("__init__()"),pPr=o(" (throws an error)."),uPr=l(),Ht=a("div"),F(Ix.$$.fragment),_Pr=l(),D9e=a("p"),bPr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),vPr=l(),of=a("p"),FPr=o(`Note:
Loading a model from its configuration file does `),G9e=a("strong"),TPr=o("not"),MPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IY=a("a"),EPr=o("from_pretrained()"),CPr=o(" to load the model weights."),wPr=l(),F(dC.$$.fragment),APr=l(),Hr=a("div"),F(qx.$$.fragment),yPr=l(),O9e=a("p"),LPr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),xPr=l(),En=a("p"),$Pr=o("The model class to instantiate is selected based on the "),V9e=a("code"),kPr=o("model_type"),SPr=o(` property of the config object (either
passed as an argument or loaded from `),X9e=a("code"),RPr=o("pretrained_model_name_or_path"),BPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z9e=a("code"),PPr=o("pretrained_model_name_or_path"),IPr=o(":"),qPr=l(),Q9e=a("ul"),cC=a("li"),W9e=a("strong"),NPr=o("bert"),jPr=o(" \u2014 "),qY=a("a"),DPr=o("FlaxBertForNextSentencePrediction"),GPr=o(" (BERT model)"),OPr=l(),F(fC.$$.fragment),cqe=l(),rf=a("h2"),mC=a("a"),H9e=a("span"),F(Nx.$$.fragment),VPr=l(),U9e=a("span"),XPr=o("FlaxAutoModelForImageClassification"),fqe=l(),Tr=a("div"),F(jx.$$.fragment),zPr=l(),tf=a("p"),QPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),NY=a("a"),WPr=o("from_pretrained()"),HPr=o(" class method or the "),jY=a("a"),UPr=o("from_config()"),JPr=o(` class
method.`),YPr=l(),Dx=a("p"),KPr=o("This class cannot be instantiated directly using "),J9e=a("code"),ZPr=o("__init__()"),eIr=o(" (throws an error)."),oIr=l(),Ut=a("div"),F(Gx.$$.fragment),rIr=l(),Y9e=a("p"),tIr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),aIr=l(),af=a("p"),nIr=o(`Note:
Loading a model from its configuration file does `),K9e=a("strong"),sIr=o("not"),lIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DY=a("a"),iIr=o("from_pretrained()"),dIr=o(" to load the model weights."),cIr=l(),F(gC.$$.fragment),fIr=l(),Ur=a("div"),F(Ox.$$.fragment),mIr=l(),Z9e=a("p"),gIr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),hIr=l(),Cn=a("p"),pIr=o("The model class to instantiate is selected based on the "),eMe=a("code"),uIr=o("model_type"),_Ir=o(` property of the config object (either
passed as an argument or loaded from `),oMe=a("code"),bIr=o("pretrained_model_name_or_path"),vIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rMe=a("code"),FIr=o("pretrained_model_name_or_path"),TIr=o(":"),MIr=l(),Vx=a("ul"),hC=a("li"),tMe=a("strong"),EIr=o("beit"),CIr=o(" \u2014 "),GY=a("a"),wIr=o("FlaxBeitForImageClassification"),AIr=o(" (BEiT model)"),yIr=l(),pC=a("li"),aMe=a("strong"),LIr=o("vit"),xIr=o(" \u2014 "),OY=a("a"),$Ir=o("FlaxViTForImageClassification"),kIr=o(" (ViT model)"),SIr=l(),F(uC.$$.fragment),mqe=l(),nf=a("h2"),_C=a("a"),nMe=a("span"),F(Xx.$$.fragment),RIr=l(),sMe=a("span"),BIr=o("FlaxAutoModelForVision2Seq"),gqe=l(),Mr=a("div"),F(zx.$$.fragment),PIr=l(),sf=a("p"),IIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),VY=a("a"),qIr=o("from_pretrained()"),NIr=o(" class method or the "),XY=a("a"),jIr=o("from_config()"),DIr=o(` class
method.`),GIr=l(),Qx=a("p"),OIr=o("This class cannot be instantiated directly using "),lMe=a("code"),VIr=o("__init__()"),XIr=o(" (throws an error)."),zIr=l(),Jt=a("div"),F(Wx.$$.fragment),QIr=l(),iMe=a("p"),WIr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),HIr=l(),lf=a("p"),UIr=o(`Note:
Loading a model from its configuration file does `),dMe=a("strong"),JIr=o("not"),YIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zY=a("a"),KIr=o("from_pretrained()"),ZIr=o(" to load the model weights."),eqr=l(),F(bC.$$.fragment),oqr=l(),Jr=a("div"),F(Hx.$$.fragment),rqr=l(),cMe=a("p"),tqr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),aqr=l(),wn=a("p"),nqr=o("The model class to instantiate is selected based on the "),fMe=a("code"),sqr=o("model_type"),lqr=o(` property of the config object (either
passed as an argument or loaded from `),mMe=a("code"),iqr=o("pretrained_model_name_or_path"),dqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gMe=a("code"),cqr=o("pretrained_model_name_or_path"),fqr=o(":"),mqr=l(),hMe=a("ul"),vC=a("li"),pMe=a("strong"),gqr=o("vision-encoder-decoder"),hqr=o(" \u2014 "),QY=a("a"),pqr=o("FlaxVisionEncoderDecoderModel"),uqr=o(" (Vision Encoder decoder model)"),_qr=l(),F(FC.$$.fragment),this.h()},l(f){const _=$3t('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Ux=s(p);m=n(Ux,"A",{id:!0,class:!0,href:!0});var uMe=s(m);u=n(uMe,"SPAN",{});var _Me=s(u);T(d.$$.fragment,_Me),_Me.forEach(t),uMe.forEach(t),h=i(Ux),Mo=n(Ux,"SPAN",{});var bMe=s(Mo);ii=r(bMe,"Auto Classes"),bMe.forEach(t),Ux.forEach(t),mf=i(f),et=n(f,"P",{});var Jx=s(et);di=r(Jx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ci=n(Jx,"CODE",{});var vMe=s(ci);Dw=r(vMe,"from_pretrained()"),vMe.forEach(t),gf=r(Jx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Jx.forEach(t),qe=i(f),Xe=n(f,"P",{});var An=s(Xe);fi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var FMe=s(yn);Gw=r(FMe,"AutoConfig"),FMe.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var TMe=s(xn);Ow=r(TMe,"AutoModel"),TMe.forEach(t),mi=r(An,`, and
`),$n=n(An,"A",{href:!0});var MMe=s($n);Vw=r(MMe,"AutoTokenizer"),MMe.forEach(t),gi=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),hf=i(f),T(Ma.$$.fragment,f),ze=i(f),Ae=n(f,"P",{});var Yx=s(Ae);l$=r(Yx,"will create a model that is an instance of "),hi=n(Yx,"A",{href:!0});var EMe=s(hi);i$=r(EMe,"BertModel"),EMe.forEach(t),d$=r(Yx,"."),Yx.forEach(t),Eo=i(f),Ea=n(f,"P",{});var Kx=s(Ea);c$=r(Kx,"There is one class of "),pf=n(Kx,"CODE",{});var CMe=s(pf);f$=r(CMe,"AutoModel"),CMe.forEach(t),Mje=r(Kx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Kx.forEach(t),fPe=i(f),pi=n(f,"H2",{class:!0});var Zx=s(pi);uf=n(Zx,"A",{id:!0,class:!0,href:!0});var wMe=s(uf);jZ=n(wMe,"SPAN",{});var AMe=s(jZ);T(Xw.$$.fragment,AMe),AMe.forEach(t),wMe.forEach(t),Eje=i(Zx),DZ=n(Zx,"SPAN",{});var yMe=s(DZ);Cje=r(yMe,"Extending the Auto Classes"),yMe.forEach(t),Zx.forEach(t),mPe=i(f),kn=n(f,"P",{});var df=s(kn);wje=r(df,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),GZ=n(df,"CODE",{});var LMe=s(GZ);Aje=r(LMe,"NewModel"),LMe.forEach(t),yje=r(df,", make sure you have a "),OZ=n(df,"CODE",{});var xMe=s(OZ);Lje=r(xMe,"NewModelConfig"),xMe.forEach(t),xje=r(df,` then you can add those to the auto
classes like this:`),df.forEach(t),gPe=i(f),T(zw.$$.fragment,f),hPe=i(f),m$=n(f,"P",{});var $Me=s(m$);$je=r($Me,"You will then be able to use the auto classes like you would usually do!"),$Me.forEach(t),pPe=i(f),T(_f.$$.fragment,f),uPe=i(f),ui=n(f,"H2",{class:!0});var e7=s(ui);bf=n(e7,"A",{id:!0,class:!0,href:!0});var kMe=s(bf);VZ=n(kMe,"SPAN",{});var SMe=s(VZ);T(Qw.$$.fragment,SMe),SMe.forEach(t),kMe.forEach(t),kje=i(e7),XZ=n(e7,"SPAN",{});var RMe=s(XZ);Sje=r(RMe,"AutoConfig"),RMe.forEach(t),e7.forEach(t),_Pe=i(f),Co=n(f,"DIV",{class:!0});var Kr=s(Co);T(Ww.$$.fragment,Kr),Rje=i(Kr),Hw=n(Kr,"P",{});var o7=s(Hw);Bje=r(o7,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),g$=n(o7,"A",{href:!0});var BMe=s(g$);Pje=r(BMe,"from_pretrained()"),BMe.forEach(t),Ije=r(o7," class method."),o7.forEach(t),qje=i(Kr),Uw=n(Kr,"P",{});var r7=s(Uw);Nje=r(r7,"This class cannot be instantiated directly using "),zZ=n(r7,"CODE",{});var PMe=s(zZ);jje=r(PMe,"__init__()"),PMe.forEach(t),Dje=r(r7," (throws an error)."),r7.forEach(t),Gje=i(Kr),Er=n(Kr,"DIV",{class:!0});var Zr=s(Er);T(Jw.$$.fragment,Zr),Oje=i(Zr),QZ=n(Zr,"P",{});var IMe=s(QZ);Vje=r(IMe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),IMe.forEach(t),Xje=i(Zr),_i=n(Zr,"P",{});var cf=s(_i);zje=r(cf,"The configuration class to instantiate is selected based on the "),WZ=n(cf,"CODE",{});var qMe=s(WZ);Qje=r(qMe,"model_type"),qMe.forEach(t),Wje=r(cf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),HZ=n(cf,"CODE",{});var NMe=s(HZ);Hje=r(NMe,"pretrained_model_name_or_path"),NMe.forEach(t),Uje=r(cf,":"),cf.forEach(t),Jje=i(Zr),y=n(Zr,"UL",{});var L=s(y);vf=n(L,"LI",{});var TC=s(vf);UZ=n(TC,"STRONG",{});var jMe=s(UZ);Yje=r(jMe,"albert"),jMe.forEach(t),Kje=r(TC," \u2014 "),h$=n(TC,"A",{href:!0});var DMe=s(h$);Zje=r(DMe,"AlbertConfig"),DMe.forEach(t),eDe=r(TC," (ALBERT model)"),TC.forEach(t),oDe=i(L),Ff=n(L,"LI",{});var MC=s(Ff);JZ=n(MC,"STRONG",{});var GMe=s(JZ);rDe=r(GMe,"bart"),GMe.forEach(t),tDe=r(MC," \u2014 "),p$=n(MC,"A",{href:!0});var OMe=s(p$);aDe=r(OMe,"BartConfig"),OMe.forEach(t),nDe=r(MC," (BART model)"),MC.forEach(t),sDe=i(L),Tf=n(L,"LI",{});var EC=s(Tf);YZ=n(EC,"STRONG",{});var VMe=s(YZ);lDe=r(VMe,"beit"),VMe.forEach(t),iDe=r(EC," \u2014 "),u$=n(EC,"A",{href:!0});var XMe=s(u$);dDe=r(XMe,"BeitConfig"),XMe.forEach(t),cDe=r(EC," (BEiT model)"),EC.forEach(t),fDe=i(L),Mf=n(L,"LI",{});var CC=s(Mf);KZ=n(CC,"STRONG",{});var zMe=s(KZ);mDe=r(zMe,"bert"),zMe.forEach(t),gDe=r(CC," \u2014 "),_$=n(CC,"A",{href:!0});var QMe=s(_$);hDe=r(QMe,"BertConfig"),QMe.forEach(t),pDe=r(CC," (BERT model)"),CC.forEach(t),uDe=i(L),Ef=n(L,"LI",{});var wC=s(Ef);ZZ=n(wC,"STRONG",{});var WMe=s(ZZ);_De=r(WMe,"bert-generation"),WMe.forEach(t),bDe=r(wC," \u2014 "),b$=n(wC,"A",{href:!0});var HMe=s(b$);vDe=r(HMe,"BertGenerationConfig"),HMe.forEach(t),FDe=r(wC," (Bert Generation model)"),wC.forEach(t),TDe=i(L),Cf=n(L,"LI",{});var AC=s(Cf);eee=n(AC,"STRONG",{});var UMe=s(eee);MDe=r(UMe,"big_bird"),UMe.forEach(t),EDe=r(AC," \u2014 "),v$=n(AC,"A",{href:!0});var JMe=s(v$);CDe=r(JMe,"BigBirdConfig"),JMe.forEach(t),wDe=r(AC," (BigBird model)"),AC.forEach(t),ADe=i(L),wf=n(L,"LI",{});var yC=s(wf);oee=n(yC,"STRONG",{});var YMe=s(oee);yDe=r(YMe,"bigbird_pegasus"),YMe.forEach(t),LDe=r(yC," \u2014 "),F$=n(yC,"A",{href:!0});var KMe=s(F$);xDe=r(KMe,"BigBirdPegasusConfig"),KMe.forEach(t),$De=r(yC," (BigBirdPegasus model)"),yC.forEach(t),kDe=i(L),Af=n(L,"LI",{});var LC=s(Af);ree=n(LC,"STRONG",{});var ZMe=s(ree);SDe=r(ZMe,"blenderbot"),ZMe.forEach(t),RDe=r(LC," \u2014 "),T$=n(LC,"A",{href:!0});var e4e=s(T$);BDe=r(e4e,"BlenderbotConfig"),e4e.forEach(t),PDe=r(LC," (Blenderbot model)"),LC.forEach(t),IDe=i(L),yf=n(L,"LI",{});var xC=s(yf);tee=n(xC,"STRONG",{});var o4e=s(tee);qDe=r(o4e,"blenderbot-small"),o4e.forEach(t),NDe=r(xC," \u2014 "),M$=n(xC,"A",{href:!0});var r4e=s(M$);jDe=r(r4e,"BlenderbotSmallConfig"),r4e.forEach(t),DDe=r(xC," (BlenderbotSmall model)"),xC.forEach(t),GDe=i(L),Lf=n(L,"LI",{});var $C=s(Lf);aee=n($C,"STRONG",{});var t4e=s(aee);ODe=r(t4e,"camembert"),t4e.forEach(t),VDe=r($C," \u2014 "),E$=n($C,"A",{href:!0});var a4e=s(E$);XDe=r(a4e,"CamembertConfig"),a4e.forEach(t),zDe=r($C," (CamemBERT model)"),$C.forEach(t),QDe=i(L),xf=n(L,"LI",{});var kC=s(xf);nee=n(kC,"STRONG",{});var n4e=s(nee);WDe=r(n4e,"canine"),n4e.forEach(t),HDe=r(kC," \u2014 "),C$=n(kC,"A",{href:!0});var s4e=s(C$);UDe=r(s4e,"CanineConfig"),s4e.forEach(t),JDe=r(kC," (Canine model)"),kC.forEach(t),YDe=i(L),$f=n(L,"LI",{});var SC=s($f);see=n(SC,"STRONG",{});var l4e=s(see);KDe=r(l4e,"clip"),l4e.forEach(t),ZDe=r(SC," \u2014 "),w$=n(SC,"A",{href:!0});var i4e=s(w$);eGe=r(i4e,"CLIPConfig"),i4e.forEach(t),oGe=r(SC," (CLIP model)"),SC.forEach(t),rGe=i(L),kf=n(L,"LI",{});var RC=s(kf);lee=n(RC,"STRONG",{});var d4e=s(lee);tGe=r(d4e,"convbert"),d4e.forEach(t),aGe=r(RC," \u2014 "),A$=n(RC,"A",{href:!0});var c4e=s(A$);nGe=r(c4e,"ConvBertConfig"),c4e.forEach(t),sGe=r(RC," (ConvBERT model)"),RC.forEach(t),lGe=i(L),Sf=n(L,"LI",{});var BC=s(Sf);iee=n(BC,"STRONG",{});var f4e=s(iee);iGe=r(f4e,"convnext"),f4e.forEach(t),dGe=r(BC," \u2014 "),y$=n(BC,"A",{href:!0});var m4e=s(y$);cGe=r(m4e,"ConvNextConfig"),m4e.forEach(t),fGe=r(BC," (ConvNext model)"),BC.forEach(t),mGe=i(L),Rf=n(L,"LI",{});var PC=s(Rf);dee=n(PC,"STRONG",{});var g4e=s(dee);gGe=r(g4e,"ctrl"),g4e.forEach(t),hGe=r(PC," \u2014 "),L$=n(PC,"A",{href:!0});var h4e=s(L$);pGe=r(h4e,"CTRLConfig"),h4e.forEach(t),uGe=r(PC," (CTRL model)"),PC.forEach(t),_Ge=i(L),Bf=n(L,"LI",{});var IC=s(Bf);cee=n(IC,"STRONG",{});var p4e=s(cee);bGe=r(p4e,"data2vec-audio"),p4e.forEach(t),vGe=r(IC," \u2014 "),x$=n(IC,"A",{href:!0});var u4e=s(x$);FGe=r(u4e,"Data2VecAudioConfig"),u4e.forEach(t),TGe=r(IC," (Data2VecAudio model)"),IC.forEach(t),MGe=i(L),Pf=n(L,"LI",{});var qC=s(Pf);fee=n(qC,"STRONG",{});var _4e=s(fee);EGe=r(_4e,"data2vec-text"),_4e.forEach(t),CGe=r(qC," \u2014 "),$$=n(qC,"A",{href:!0});var b4e=s($$);wGe=r(b4e,"Data2VecTextConfig"),b4e.forEach(t),AGe=r(qC," (Data2VecText model)"),qC.forEach(t),yGe=i(L),If=n(L,"LI",{});var NC=s(If);mee=n(NC,"STRONG",{});var v4e=s(mee);LGe=r(v4e,"data2vec-vision"),v4e.forEach(t),xGe=r(NC," \u2014 "),k$=n(NC,"A",{href:!0});var F4e=s(k$);$Ge=r(F4e,"Data2VecVisionConfig"),F4e.forEach(t),kGe=r(NC," (Data2VecVision model)"),NC.forEach(t),SGe=i(L),qf=n(L,"LI",{});var jC=s(qf);gee=n(jC,"STRONG",{});var T4e=s(gee);RGe=r(T4e,"deberta"),T4e.forEach(t),BGe=r(jC," \u2014 "),S$=n(jC,"A",{href:!0});var M4e=s(S$);PGe=r(M4e,"DebertaConfig"),M4e.forEach(t),IGe=r(jC," (DeBERTa model)"),jC.forEach(t),qGe=i(L),Nf=n(L,"LI",{});var DC=s(Nf);hee=n(DC,"STRONG",{});var E4e=s(hee);NGe=r(E4e,"deberta-v2"),E4e.forEach(t),jGe=r(DC," \u2014 "),R$=n(DC,"A",{href:!0});var C4e=s(R$);DGe=r(C4e,"DebertaV2Config"),C4e.forEach(t),GGe=r(DC," (DeBERTa-v2 model)"),DC.forEach(t),OGe=i(L),jf=n(L,"LI",{});var GC=s(jf);pee=n(GC,"STRONG",{});var w4e=s(pee);VGe=r(w4e,"decision_transformer"),w4e.forEach(t),XGe=r(GC," \u2014 "),B$=n(GC,"A",{href:!0});var A4e=s(B$);zGe=r(A4e,"DecisionTransformerConfig"),A4e.forEach(t),QGe=r(GC," (Decision Transformer model)"),GC.forEach(t),WGe=i(L),Df=n(L,"LI",{});var OC=s(Df);uee=n(OC,"STRONG",{});var y4e=s(uee);HGe=r(y4e,"deit"),y4e.forEach(t),UGe=r(OC," \u2014 "),P$=n(OC,"A",{href:!0});var L4e=s(P$);JGe=r(L4e,"DeiTConfig"),L4e.forEach(t),YGe=r(OC," (DeiT model)"),OC.forEach(t),KGe=i(L),Gf=n(L,"LI",{});var VC=s(Gf);_ee=n(VC,"STRONG",{});var x4e=s(_ee);ZGe=r(x4e,"detr"),x4e.forEach(t),eOe=r(VC," \u2014 "),I$=n(VC,"A",{href:!0});var vqr=s(I$);oOe=r(vqr,"DetrConfig"),vqr.forEach(t),rOe=r(VC," (DETR model)"),VC.forEach(t),tOe=i(L),Of=n(L,"LI",{});var $4e=s(Of);bee=n($4e,"STRONG",{});var Fqr=s(bee);aOe=r(Fqr,"distilbert"),Fqr.forEach(t),nOe=r($4e," \u2014 "),q$=n($4e,"A",{href:!0});var Tqr=s(q$);sOe=r(Tqr,"DistilBertConfig"),Tqr.forEach(t),lOe=r($4e," (DistilBERT model)"),$4e.forEach(t),iOe=i(L),Vf=n(L,"LI",{});var k4e=s(Vf);vee=n(k4e,"STRONG",{});var Mqr=s(vee);dOe=r(Mqr,"dpr"),Mqr.forEach(t),cOe=r(k4e," \u2014 "),N$=n(k4e,"A",{href:!0});var Eqr=s(N$);fOe=r(Eqr,"DPRConfig"),Eqr.forEach(t),mOe=r(k4e," (DPR model)"),k4e.forEach(t),gOe=i(L),Xf=n(L,"LI",{});var S4e=s(Xf);Fee=n(S4e,"STRONG",{});var Cqr=s(Fee);hOe=r(Cqr,"dpt"),Cqr.forEach(t),pOe=r(S4e," \u2014 "),j$=n(S4e,"A",{href:!0});var wqr=s(j$);uOe=r(wqr,"DPTConfig"),wqr.forEach(t),_Oe=r(S4e," (DPT model)"),S4e.forEach(t),bOe=i(L),zf=n(L,"LI",{});var R4e=s(zf);Tee=n(R4e,"STRONG",{});var Aqr=s(Tee);vOe=r(Aqr,"electra"),Aqr.forEach(t),FOe=r(R4e," \u2014 "),D$=n(R4e,"A",{href:!0});var yqr=s(D$);TOe=r(yqr,"ElectraConfig"),yqr.forEach(t),MOe=r(R4e," (ELECTRA model)"),R4e.forEach(t),EOe=i(L),Qf=n(L,"LI",{});var B4e=s(Qf);Mee=n(B4e,"STRONG",{});var Lqr=s(Mee);COe=r(Lqr,"encoder-decoder"),Lqr.forEach(t),wOe=r(B4e," \u2014 "),G$=n(B4e,"A",{href:!0});var xqr=s(G$);AOe=r(xqr,"EncoderDecoderConfig"),xqr.forEach(t),yOe=r(B4e," (Encoder decoder model)"),B4e.forEach(t),LOe=i(L),Wf=n(L,"LI",{});var P4e=s(Wf);Eee=n(P4e,"STRONG",{});var $qr=s(Eee);xOe=r($qr,"flaubert"),$qr.forEach(t),$Oe=r(P4e," \u2014 "),O$=n(P4e,"A",{href:!0});var kqr=s(O$);kOe=r(kqr,"FlaubertConfig"),kqr.forEach(t),SOe=r(P4e," (FlauBERT model)"),P4e.forEach(t),ROe=i(L),Hf=n(L,"LI",{});var I4e=s(Hf);Cee=n(I4e,"STRONG",{});var Sqr=s(Cee);BOe=r(Sqr,"fnet"),Sqr.forEach(t),POe=r(I4e," \u2014 "),V$=n(I4e,"A",{href:!0});var Rqr=s(V$);IOe=r(Rqr,"FNetConfig"),Rqr.forEach(t),qOe=r(I4e," (FNet model)"),I4e.forEach(t),NOe=i(L),Uf=n(L,"LI",{});var q4e=s(Uf);wee=n(q4e,"STRONG",{});var Bqr=s(wee);jOe=r(Bqr,"fsmt"),Bqr.forEach(t),DOe=r(q4e," \u2014 "),X$=n(q4e,"A",{href:!0});var Pqr=s(X$);GOe=r(Pqr,"FSMTConfig"),Pqr.forEach(t),OOe=r(q4e," (FairSeq Machine-Translation model)"),q4e.forEach(t),VOe=i(L),Jf=n(L,"LI",{});var N4e=s(Jf);Aee=n(N4e,"STRONG",{});var Iqr=s(Aee);XOe=r(Iqr,"funnel"),Iqr.forEach(t),zOe=r(N4e," \u2014 "),z$=n(N4e,"A",{href:!0});var qqr=s(z$);QOe=r(qqr,"FunnelConfig"),qqr.forEach(t),WOe=r(N4e," (Funnel Transformer model)"),N4e.forEach(t),HOe=i(L),Yf=n(L,"LI",{});var j4e=s(Yf);yee=n(j4e,"STRONG",{});var Nqr=s(yee);UOe=r(Nqr,"glpn"),Nqr.forEach(t),JOe=r(j4e," \u2014 "),Q$=n(j4e,"A",{href:!0});var jqr=s(Q$);YOe=r(jqr,"GLPNConfig"),jqr.forEach(t),KOe=r(j4e," (GLPN model)"),j4e.forEach(t),ZOe=i(L),Kf=n(L,"LI",{});var D4e=s(Kf);Lee=n(D4e,"STRONG",{});var Dqr=s(Lee);eVe=r(Dqr,"gpt2"),Dqr.forEach(t),oVe=r(D4e," \u2014 "),W$=n(D4e,"A",{href:!0});var Gqr=s(W$);rVe=r(Gqr,"GPT2Config"),Gqr.forEach(t),tVe=r(D4e," (OpenAI GPT-2 model)"),D4e.forEach(t),aVe=i(L),Zf=n(L,"LI",{});var G4e=s(Zf);xee=n(G4e,"STRONG",{});var Oqr=s(xee);nVe=r(Oqr,"gpt_neo"),Oqr.forEach(t),sVe=r(G4e," \u2014 "),H$=n(G4e,"A",{href:!0});var Vqr=s(H$);lVe=r(Vqr,"GPTNeoConfig"),Vqr.forEach(t),iVe=r(G4e," (GPT Neo model)"),G4e.forEach(t),dVe=i(L),em=n(L,"LI",{});var O4e=s(em);$ee=n(O4e,"STRONG",{});var Xqr=s($ee);cVe=r(Xqr,"gptj"),Xqr.forEach(t),fVe=r(O4e," \u2014 "),U$=n(O4e,"A",{href:!0});var zqr=s(U$);mVe=r(zqr,"GPTJConfig"),zqr.forEach(t),gVe=r(O4e," (GPT-J model)"),O4e.forEach(t),hVe=i(L),om=n(L,"LI",{});var V4e=s(om);kee=n(V4e,"STRONG",{});var Qqr=s(kee);pVe=r(Qqr,"hubert"),Qqr.forEach(t),uVe=r(V4e," \u2014 "),J$=n(V4e,"A",{href:!0});var Wqr=s(J$);_Ve=r(Wqr,"HubertConfig"),Wqr.forEach(t),bVe=r(V4e," (Hubert model)"),V4e.forEach(t),vVe=i(L),rm=n(L,"LI",{});var X4e=s(rm);See=n(X4e,"STRONG",{});var Hqr=s(See);FVe=r(Hqr,"ibert"),Hqr.forEach(t),TVe=r(X4e," \u2014 "),Y$=n(X4e,"A",{href:!0});var Uqr=s(Y$);MVe=r(Uqr,"IBertConfig"),Uqr.forEach(t),EVe=r(X4e," (I-BERT model)"),X4e.forEach(t),CVe=i(L),tm=n(L,"LI",{});var z4e=s(tm);Ree=n(z4e,"STRONG",{});var Jqr=s(Ree);wVe=r(Jqr,"imagegpt"),Jqr.forEach(t),AVe=r(z4e," \u2014 "),K$=n(z4e,"A",{href:!0});var Yqr=s(K$);yVe=r(Yqr,"ImageGPTConfig"),Yqr.forEach(t),LVe=r(z4e," (ImageGPT model)"),z4e.forEach(t),xVe=i(L),am=n(L,"LI",{});var Q4e=s(am);Bee=n(Q4e,"STRONG",{});var Kqr=s(Bee);$Ve=r(Kqr,"layoutlm"),Kqr.forEach(t),kVe=r(Q4e," \u2014 "),Z$=n(Q4e,"A",{href:!0});var Zqr=s(Z$);SVe=r(Zqr,"LayoutLMConfig"),Zqr.forEach(t),RVe=r(Q4e," (LayoutLM model)"),Q4e.forEach(t),BVe=i(L),nm=n(L,"LI",{});var W4e=s(nm);Pee=n(W4e,"STRONG",{});var eNr=s(Pee);PVe=r(eNr,"layoutlmv2"),eNr.forEach(t),IVe=r(W4e," \u2014 "),ek=n(W4e,"A",{href:!0});var oNr=s(ek);qVe=r(oNr,"LayoutLMv2Config"),oNr.forEach(t),NVe=r(W4e," (LayoutLMv2 model)"),W4e.forEach(t),jVe=i(L),sm=n(L,"LI",{});var H4e=s(sm);Iee=n(H4e,"STRONG",{});var rNr=s(Iee);DVe=r(rNr,"led"),rNr.forEach(t),GVe=r(H4e," \u2014 "),ok=n(H4e,"A",{href:!0});var tNr=s(ok);OVe=r(tNr,"LEDConfig"),tNr.forEach(t),VVe=r(H4e," (LED model)"),H4e.forEach(t),XVe=i(L),lm=n(L,"LI",{});var U4e=s(lm);qee=n(U4e,"STRONG",{});var aNr=s(qee);zVe=r(aNr,"longformer"),aNr.forEach(t),QVe=r(U4e," \u2014 "),rk=n(U4e,"A",{href:!0});var nNr=s(rk);WVe=r(nNr,"LongformerConfig"),nNr.forEach(t),HVe=r(U4e," (Longformer model)"),U4e.forEach(t),UVe=i(L),im=n(L,"LI",{});var J4e=s(im);Nee=n(J4e,"STRONG",{});var sNr=s(Nee);JVe=r(sNr,"luke"),sNr.forEach(t),YVe=r(J4e," \u2014 "),tk=n(J4e,"A",{href:!0});var lNr=s(tk);KVe=r(lNr,"LukeConfig"),lNr.forEach(t),ZVe=r(J4e," (LUKE model)"),J4e.forEach(t),eXe=i(L),dm=n(L,"LI",{});var Y4e=s(dm);jee=n(Y4e,"STRONG",{});var iNr=s(jee);oXe=r(iNr,"lxmert"),iNr.forEach(t),rXe=r(Y4e," \u2014 "),ak=n(Y4e,"A",{href:!0});var dNr=s(ak);tXe=r(dNr,"LxmertConfig"),dNr.forEach(t),aXe=r(Y4e," (LXMERT model)"),Y4e.forEach(t),nXe=i(L),cm=n(L,"LI",{});var K4e=s(cm);Dee=n(K4e,"STRONG",{});var cNr=s(Dee);sXe=r(cNr,"m2m_100"),cNr.forEach(t),lXe=r(K4e," \u2014 "),nk=n(K4e,"A",{href:!0});var fNr=s(nk);iXe=r(fNr,"M2M100Config"),fNr.forEach(t),dXe=r(K4e," (M2M100 model)"),K4e.forEach(t),cXe=i(L),fm=n(L,"LI",{});var Z4e=s(fm);Gee=n(Z4e,"STRONG",{});var mNr=s(Gee);fXe=r(mNr,"marian"),mNr.forEach(t),mXe=r(Z4e," \u2014 "),sk=n(Z4e,"A",{href:!0});var gNr=s(sk);gXe=r(gNr,"MarianConfig"),gNr.forEach(t),hXe=r(Z4e," (Marian model)"),Z4e.forEach(t),pXe=i(L),mm=n(L,"LI",{});var eEe=s(mm);Oee=n(eEe,"STRONG",{});var hNr=s(Oee);uXe=r(hNr,"maskformer"),hNr.forEach(t),_Xe=r(eEe," \u2014 "),lk=n(eEe,"A",{href:!0});var pNr=s(lk);bXe=r(pNr,"MaskFormerConfig"),pNr.forEach(t),vXe=r(eEe," (MaskFormer model)"),eEe.forEach(t),FXe=i(L),gm=n(L,"LI",{});var oEe=s(gm);Vee=n(oEe,"STRONG",{});var uNr=s(Vee);TXe=r(uNr,"mbart"),uNr.forEach(t),MXe=r(oEe," \u2014 "),ik=n(oEe,"A",{href:!0});var _Nr=s(ik);EXe=r(_Nr,"MBartConfig"),_Nr.forEach(t),CXe=r(oEe," (mBART model)"),oEe.forEach(t),wXe=i(L),hm=n(L,"LI",{});var rEe=s(hm);Xee=n(rEe,"STRONG",{});var bNr=s(Xee);AXe=r(bNr,"megatron-bert"),bNr.forEach(t),yXe=r(rEe," \u2014 "),dk=n(rEe,"A",{href:!0});var vNr=s(dk);LXe=r(vNr,"MegatronBertConfig"),vNr.forEach(t),xXe=r(rEe," (MegatronBert model)"),rEe.forEach(t),$Xe=i(L),pm=n(L,"LI",{});var tEe=s(pm);zee=n(tEe,"STRONG",{});var FNr=s(zee);kXe=r(FNr,"mobilebert"),FNr.forEach(t),SXe=r(tEe," \u2014 "),ck=n(tEe,"A",{href:!0});var TNr=s(ck);RXe=r(TNr,"MobileBertConfig"),TNr.forEach(t),BXe=r(tEe," (MobileBERT model)"),tEe.forEach(t),PXe=i(L),um=n(L,"LI",{});var aEe=s(um);Qee=n(aEe,"STRONG",{});var MNr=s(Qee);IXe=r(MNr,"mpnet"),MNr.forEach(t),qXe=r(aEe," \u2014 "),fk=n(aEe,"A",{href:!0});var ENr=s(fk);NXe=r(ENr,"MPNetConfig"),ENr.forEach(t),jXe=r(aEe," (MPNet model)"),aEe.forEach(t),DXe=i(L),_m=n(L,"LI",{});var nEe=s(_m);Wee=n(nEe,"STRONG",{});var CNr=s(Wee);GXe=r(CNr,"mt5"),CNr.forEach(t),OXe=r(nEe," \u2014 "),mk=n(nEe,"A",{href:!0});var wNr=s(mk);VXe=r(wNr,"MT5Config"),wNr.forEach(t),XXe=r(nEe," (mT5 model)"),nEe.forEach(t),zXe=i(L),bm=n(L,"LI",{});var sEe=s(bm);Hee=n(sEe,"STRONG",{});var ANr=s(Hee);QXe=r(ANr,"nystromformer"),ANr.forEach(t),WXe=r(sEe," \u2014 "),gk=n(sEe,"A",{href:!0});var yNr=s(gk);HXe=r(yNr,"NystromformerConfig"),yNr.forEach(t),UXe=r(sEe," (Nystromformer model)"),sEe.forEach(t),JXe=i(L),vm=n(L,"LI",{});var lEe=s(vm);Uee=n(lEe,"STRONG",{});var LNr=s(Uee);YXe=r(LNr,"openai-gpt"),LNr.forEach(t),KXe=r(lEe," \u2014 "),hk=n(lEe,"A",{href:!0});var xNr=s(hk);ZXe=r(xNr,"OpenAIGPTConfig"),xNr.forEach(t),eze=r(lEe," (OpenAI GPT model)"),lEe.forEach(t),oze=i(L),Fm=n(L,"LI",{});var iEe=s(Fm);Jee=n(iEe,"STRONG",{});var $Nr=s(Jee);rze=r($Nr,"pegasus"),$Nr.forEach(t),tze=r(iEe," \u2014 "),pk=n(iEe,"A",{href:!0});var kNr=s(pk);aze=r(kNr,"PegasusConfig"),kNr.forEach(t),nze=r(iEe," (Pegasus model)"),iEe.forEach(t),sze=i(L),Tm=n(L,"LI",{});var dEe=s(Tm);Yee=n(dEe,"STRONG",{});var SNr=s(Yee);lze=r(SNr,"perceiver"),SNr.forEach(t),ize=r(dEe," \u2014 "),uk=n(dEe,"A",{href:!0});var RNr=s(uk);dze=r(RNr,"PerceiverConfig"),RNr.forEach(t),cze=r(dEe," (Perceiver model)"),dEe.forEach(t),fze=i(L),Mm=n(L,"LI",{});var cEe=s(Mm);Kee=n(cEe,"STRONG",{});var BNr=s(Kee);mze=r(BNr,"plbart"),BNr.forEach(t),gze=r(cEe," \u2014 "),_k=n(cEe,"A",{href:!0});var PNr=s(_k);hze=r(PNr,"PLBartConfig"),PNr.forEach(t),pze=r(cEe," (PLBart model)"),cEe.forEach(t),uze=i(L),Em=n(L,"LI",{});var fEe=s(Em);Zee=n(fEe,"STRONG",{});var INr=s(Zee);_ze=r(INr,"poolformer"),INr.forEach(t),bze=r(fEe," \u2014 "),bk=n(fEe,"A",{href:!0});var qNr=s(bk);vze=r(qNr,"PoolFormerConfig"),qNr.forEach(t),Fze=r(fEe," (PoolFormer model)"),fEe.forEach(t),Tze=i(L),Cm=n(L,"LI",{});var mEe=s(Cm);eoe=n(mEe,"STRONG",{});var NNr=s(eoe);Mze=r(NNr,"prophetnet"),NNr.forEach(t),Eze=r(mEe," \u2014 "),vk=n(mEe,"A",{href:!0});var jNr=s(vk);Cze=r(jNr,"ProphetNetConfig"),jNr.forEach(t),wze=r(mEe," (ProphetNet model)"),mEe.forEach(t),Aze=i(L),wm=n(L,"LI",{});var gEe=s(wm);ooe=n(gEe,"STRONG",{});var DNr=s(ooe);yze=r(DNr,"qdqbert"),DNr.forEach(t),Lze=r(gEe," \u2014 "),Fk=n(gEe,"A",{href:!0});var GNr=s(Fk);xze=r(GNr,"QDQBertConfig"),GNr.forEach(t),$ze=r(gEe," (QDQBert model)"),gEe.forEach(t),kze=i(L),Am=n(L,"LI",{});var hEe=s(Am);roe=n(hEe,"STRONG",{});var ONr=s(roe);Sze=r(ONr,"rag"),ONr.forEach(t),Rze=r(hEe," \u2014 "),Tk=n(hEe,"A",{href:!0});var VNr=s(Tk);Bze=r(VNr,"RagConfig"),VNr.forEach(t),Pze=r(hEe," (RAG model)"),hEe.forEach(t),Ize=i(L),ym=n(L,"LI",{});var pEe=s(ym);toe=n(pEe,"STRONG",{});var XNr=s(toe);qze=r(XNr,"realm"),XNr.forEach(t),Nze=r(pEe," \u2014 "),Mk=n(pEe,"A",{href:!0});var zNr=s(Mk);jze=r(zNr,"RealmConfig"),zNr.forEach(t),Dze=r(pEe," (Realm model)"),pEe.forEach(t),Gze=i(L),Lm=n(L,"LI",{});var uEe=s(Lm);aoe=n(uEe,"STRONG",{});var QNr=s(aoe);Oze=r(QNr,"reformer"),QNr.forEach(t),Vze=r(uEe," \u2014 "),Ek=n(uEe,"A",{href:!0});var WNr=s(Ek);Xze=r(WNr,"ReformerConfig"),WNr.forEach(t),zze=r(uEe," (Reformer model)"),uEe.forEach(t),Qze=i(L),xm=n(L,"LI",{});var _Ee=s(xm);noe=n(_Ee,"STRONG",{});var HNr=s(noe);Wze=r(HNr,"regnet"),HNr.forEach(t),Hze=r(_Ee," \u2014 "),Ck=n(_Ee,"A",{href:!0});var UNr=s(Ck);Uze=r(UNr,"RegNetConfig"),UNr.forEach(t),Jze=r(_Ee," (RegNet model)"),_Ee.forEach(t),Yze=i(L),$m=n(L,"LI",{});var bEe=s($m);soe=n(bEe,"STRONG",{});var JNr=s(soe);Kze=r(JNr,"rembert"),JNr.forEach(t),Zze=r(bEe," \u2014 "),wk=n(bEe,"A",{href:!0});var YNr=s(wk);eQe=r(YNr,"RemBertConfig"),YNr.forEach(t),oQe=r(bEe," (RemBERT model)"),bEe.forEach(t),rQe=i(L),km=n(L,"LI",{});var vEe=s(km);loe=n(vEe,"STRONG",{});var KNr=s(loe);tQe=r(KNr,"resnet"),KNr.forEach(t),aQe=r(vEe," \u2014 "),Ak=n(vEe,"A",{href:!0});var ZNr=s(Ak);nQe=r(ZNr,"ResNetConfig"),ZNr.forEach(t),sQe=r(vEe," (ResNet model)"),vEe.forEach(t),lQe=i(L),Sm=n(L,"LI",{});var FEe=s(Sm);ioe=n(FEe,"STRONG",{});var ejr=s(ioe);iQe=r(ejr,"retribert"),ejr.forEach(t),dQe=r(FEe," \u2014 "),yk=n(FEe,"A",{href:!0});var ojr=s(yk);cQe=r(ojr,"RetriBertConfig"),ojr.forEach(t),fQe=r(FEe," (RetriBERT model)"),FEe.forEach(t),mQe=i(L),Rm=n(L,"LI",{});var TEe=s(Rm);doe=n(TEe,"STRONG",{});var rjr=s(doe);gQe=r(rjr,"roberta"),rjr.forEach(t),hQe=r(TEe," \u2014 "),Lk=n(TEe,"A",{href:!0});var tjr=s(Lk);pQe=r(tjr,"RobertaConfig"),tjr.forEach(t),uQe=r(TEe," (RoBERTa model)"),TEe.forEach(t),_Qe=i(L),Bm=n(L,"LI",{});var MEe=s(Bm);coe=n(MEe,"STRONG",{});var ajr=s(coe);bQe=r(ajr,"roformer"),ajr.forEach(t),vQe=r(MEe," \u2014 "),xk=n(MEe,"A",{href:!0});var njr=s(xk);FQe=r(njr,"RoFormerConfig"),njr.forEach(t),TQe=r(MEe," (RoFormer model)"),MEe.forEach(t),MQe=i(L),Pm=n(L,"LI",{});var EEe=s(Pm);foe=n(EEe,"STRONG",{});var sjr=s(foe);EQe=r(sjr,"segformer"),sjr.forEach(t),CQe=r(EEe," \u2014 "),$k=n(EEe,"A",{href:!0});var ljr=s($k);wQe=r(ljr,"SegformerConfig"),ljr.forEach(t),AQe=r(EEe," (SegFormer model)"),EEe.forEach(t),yQe=i(L),Im=n(L,"LI",{});var CEe=s(Im);moe=n(CEe,"STRONG",{});var ijr=s(moe);LQe=r(ijr,"sew"),ijr.forEach(t),xQe=r(CEe," \u2014 "),kk=n(CEe,"A",{href:!0});var djr=s(kk);$Qe=r(djr,"SEWConfig"),djr.forEach(t),kQe=r(CEe," (SEW model)"),CEe.forEach(t),SQe=i(L),qm=n(L,"LI",{});var wEe=s(qm);goe=n(wEe,"STRONG",{});var cjr=s(goe);RQe=r(cjr,"sew-d"),cjr.forEach(t),BQe=r(wEe," \u2014 "),Sk=n(wEe,"A",{href:!0});var fjr=s(Sk);PQe=r(fjr,"SEWDConfig"),fjr.forEach(t),IQe=r(wEe," (SEW-D model)"),wEe.forEach(t),qQe=i(L),Nm=n(L,"LI",{});var AEe=s(Nm);hoe=n(AEe,"STRONG",{});var mjr=s(hoe);NQe=r(mjr,"speech-encoder-decoder"),mjr.forEach(t),jQe=r(AEe," \u2014 "),Rk=n(AEe,"A",{href:!0});var gjr=s(Rk);DQe=r(gjr,"SpeechEncoderDecoderConfig"),gjr.forEach(t),GQe=r(AEe," (Speech Encoder decoder model)"),AEe.forEach(t),OQe=i(L),jm=n(L,"LI",{});var yEe=s(jm);poe=n(yEe,"STRONG",{});var hjr=s(poe);VQe=r(hjr,"speech_to_text"),hjr.forEach(t),XQe=r(yEe," \u2014 "),Bk=n(yEe,"A",{href:!0});var pjr=s(Bk);zQe=r(pjr,"Speech2TextConfig"),pjr.forEach(t),QQe=r(yEe," (Speech2Text model)"),yEe.forEach(t),WQe=i(L),Dm=n(L,"LI",{});var LEe=s(Dm);uoe=n(LEe,"STRONG",{});var ujr=s(uoe);HQe=r(ujr,"speech_to_text_2"),ujr.forEach(t),UQe=r(LEe," \u2014 "),Pk=n(LEe,"A",{href:!0});var _jr=s(Pk);JQe=r(_jr,"Speech2Text2Config"),_jr.forEach(t),YQe=r(LEe," (Speech2Text2 model)"),LEe.forEach(t),KQe=i(L),Gm=n(L,"LI",{});var xEe=s(Gm);_oe=n(xEe,"STRONG",{});var bjr=s(_oe);ZQe=r(bjr,"splinter"),bjr.forEach(t),eWe=r(xEe," \u2014 "),Ik=n(xEe,"A",{href:!0});var vjr=s(Ik);oWe=r(vjr,"SplinterConfig"),vjr.forEach(t),rWe=r(xEe," (Splinter model)"),xEe.forEach(t),tWe=i(L),Om=n(L,"LI",{});var $Ee=s(Om);boe=n($Ee,"STRONG",{});var Fjr=s(boe);aWe=r(Fjr,"squeezebert"),Fjr.forEach(t),nWe=r($Ee," \u2014 "),qk=n($Ee,"A",{href:!0});var Tjr=s(qk);sWe=r(Tjr,"SqueezeBertConfig"),Tjr.forEach(t),lWe=r($Ee," (SqueezeBERT model)"),$Ee.forEach(t),iWe=i(L),Vm=n(L,"LI",{});var kEe=s(Vm);voe=n(kEe,"STRONG",{});var Mjr=s(voe);dWe=r(Mjr,"swin"),Mjr.forEach(t),cWe=r(kEe," \u2014 "),Nk=n(kEe,"A",{href:!0});var Ejr=s(Nk);fWe=r(Ejr,"SwinConfig"),Ejr.forEach(t),mWe=r(kEe," (Swin model)"),kEe.forEach(t),gWe=i(L),Xm=n(L,"LI",{});var SEe=s(Xm);Foe=n(SEe,"STRONG",{});var Cjr=s(Foe);hWe=r(Cjr,"t5"),Cjr.forEach(t),pWe=r(SEe," \u2014 "),jk=n(SEe,"A",{href:!0});var wjr=s(jk);uWe=r(wjr,"T5Config"),wjr.forEach(t),_We=r(SEe," (T5 model)"),SEe.forEach(t),bWe=i(L),zm=n(L,"LI",{});var REe=s(zm);Toe=n(REe,"STRONG",{});var Ajr=s(Toe);vWe=r(Ajr,"tapas"),Ajr.forEach(t),FWe=r(REe," \u2014 "),Dk=n(REe,"A",{href:!0});var yjr=s(Dk);TWe=r(yjr,"TapasConfig"),yjr.forEach(t),MWe=r(REe," (TAPAS model)"),REe.forEach(t),EWe=i(L),Qm=n(L,"LI",{});var BEe=s(Qm);Moe=n(BEe,"STRONG",{});var Ljr=s(Moe);CWe=r(Ljr,"tapex"),Ljr.forEach(t),wWe=r(BEe," \u2014 "),Gk=n(BEe,"A",{href:!0});var xjr=s(Gk);AWe=r(xjr,"BartConfig"),xjr.forEach(t),yWe=r(BEe," (TAPEX model)"),BEe.forEach(t),LWe=i(L),Wm=n(L,"LI",{});var PEe=s(Wm);Eoe=n(PEe,"STRONG",{});var $jr=s(Eoe);xWe=r($jr,"transfo-xl"),$jr.forEach(t),$We=r(PEe," \u2014 "),Ok=n(PEe,"A",{href:!0});var kjr=s(Ok);kWe=r(kjr,"TransfoXLConfig"),kjr.forEach(t),SWe=r(PEe," (Transformer-XL model)"),PEe.forEach(t),RWe=i(L),Hm=n(L,"LI",{});var IEe=s(Hm);Coe=n(IEe,"STRONG",{});var Sjr=s(Coe);BWe=r(Sjr,"trocr"),Sjr.forEach(t),PWe=r(IEe," \u2014 "),Vk=n(IEe,"A",{href:!0});var Rjr=s(Vk);IWe=r(Rjr,"TrOCRConfig"),Rjr.forEach(t),qWe=r(IEe," (TrOCR model)"),IEe.forEach(t),NWe=i(L),Um=n(L,"LI",{});var qEe=s(Um);woe=n(qEe,"STRONG",{});var Bjr=s(woe);jWe=r(Bjr,"unispeech"),Bjr.forEach(t),DWe=r(qEe," \u2014 "),Xk=n(qEe,"A",{href:!0});var Pjr=s(Xk);GWe=r(Pjr,"UniSpeechConfig"),Pjr.forEach(t),OWe=r(qEe," (UniSpeech model)"),qEe.forEach(t),VWe=i(L),Jm=n(L,"LI",{});var NEe=s(Jm);Aoe=n(NEe,"STRONG",{});var Ijr=s(Aoe);XWe=r(Ijr,"unispeech-sat"),Ijr.forEach(t),zWe=r(NEe," \u2014 "),zk=n(NEe,"A",{href:!0});var qjr=s(zk);QWe=r(qjr,"UniSpeechSatConfig"),qjr.forEach(t),WWe=r(NEe," (UniSpeechSat model)"),NEe.forEach(t),HWe=i(L),Ym=n(L,"LI",{});var jEe=s(Ym);yoe=n(jEe,"STRONG",{});var Njr=s(yoe);UWe=r(Njr,"van"),Njr.forEach(t),JWe=r(jEe," \u2014 "),Qk=n(jEe,"A",{href:!0});var jjr=s(Qk);YWe=r(jjr,"VanConfig"),jjr.forEach(t),KWe=r(jEe," (VAN model)"),jEe.forEach(t),ZWe=i(L),Km=n(L,"LI",{});var DEe=s(Km);Loe=n(DEe,"STRONG",{});var Djr=s(Loe);eHe=r(Djr,"vilt"),Djr.forEach(t),oHe=r(DEe," \u2014 "),Wk=n(DEe,"A",{href:!0});var Gjr=s(Wk);rHe=r(Gjr,"ViltConfig"),Gjr.forEach(t),tHe=r(DEe," (ViLT model)"),DEe.forEach(t),aHe=i(L),Zm=n(L,"LI",{});var GEe=s(Zm);xoe=n(GEe,"STRONG",{});var Ojr=s(xoe);nHe=r(Ojr,"vision-encoder-decoder"),Ojr.forEach(t),sHe=r(GEe," \u2014 "),Hk=n(GEe,"A",{href:!0});var Vjr=s(Hk);lHe=r(Vjr,"VisionEncoderDecoderConfig"),Vjr.forEach(t),iHe=r(GEe," (Vision Encoder decoder model)"),GEe.forEach(t),dHe=i(L),eg=n(L,"LI",{});var OEe=s(eg);$oe=n(OEe,"STRONG",{});var Xjr=s($oe);cHe=r(Xjr,"vision-text-dual-encoder"),Xjr.forEach(t),fHe=r(OEe," \u2014 "),Uk=n(OEe,"A",{href:!0});var zjr=s(Uk);mHe=r(zjr,"VisionTextDualEncoderConfig"),zjr.forEach(t),gHe=r(OEe," (VisionTextDualEncoder model)"),OEe.forEach(t),hHe=i(L),og=n(L,"LI",{});var VEe=s(og);koe=n(VEe,"STRONG",{});var Qjr=s(koe);pHe=r(Qjr,"visual_bert"),Qjr.forEach(t),uHe=r(VEe," \u2014 "),Jk=n(VEe,"A",{href:!0});var Wjr=s(Jk);_He=r(Wjr,"VisualBertConfig"),Wjr.forEach(t),bHe=r(VEe," (VisualBert model)"),VEe.forEach(t),vHe=i(L),rg=n(L,"LI",{});var XEe=s(rg);Soe=n(XEe,"STRONG",{});var Hjr=s(Soe);FHe=r(Hjr,"vit"),Hjr.forEach(t),THe=r(XEe," \u2014 "),Yk=n(XEe,"A",{href:!0});var Ujr=s(Yk);MHe=r(Ujr,"ViTConfig"),Ujr.forEach(t),EHe=r(XEe," (ViT model)"),XEe.forEach(t),CHe=i(L),tg=n(L,"LI",{});var zEe=s(tg);Roe=n(zEe,"STRONG",{});var Jjr=s(Roe);wHe=r(Jjr,"vit_mae"),Jjr.forEach(t),AHe=r(zEe," \u2014 "),Kk=n(zEe,"A",{href:!0});var Yjr=s(Kk);yHe=r(Yjr,"ViTMAEConfig"),Yjr.forEach(t),LHe=r(zEe," (ViTMAE model)"),zEe.forEach(t),xHe=i(L),ag=n(L,"LI",{});var QEe=s(ag);Boe=n(QEe,"STRONG",{});var Kjr=s(Boe);$He=r(Kjr,"wav2vec2"),Kjr.forEach(t),kHe=r(QEe," \u2014 "),Zk=n(QEe,"A",{href:!0});var Zjr=s(Zk);SHe=r(Zjr,"Wav2Vec2Config"),Zjr.forEach(t),RHe=r(QEe," (Wav2Vec2 model)"),QEe.forEach(t),BHe=i(L),ng=n(L,"LI",{});var WEe=s(ng);Poe=n(WEe,"STRONG",{});var eDr=s(Poe);PHe=r(eDr,"wavlm"),eDr.forEach(t),IHe=r(WEe," \u2014 "),eS=n(WEe,"A",{href:!0});var oDr=s(eS);qHe=r(oDr,"WavLMConfig"),oDr.forEach(t),NHe=r(WEe," (WavLM model)"),WEe.forEach(t),jHe=i(L),sg=n(L,"LI",{});var HEe=s(sg);Ioe=n(HEe,"STRONG",{});var rDr=s(Ioe);DHe=r(rDr,"xglm"),rDr.forEach(t),GHe=r(HEe," \u2014 "),oS=n(HEe,"A",{href:!0});var tDr=s(oS);OHe=r(tDr,"XGLMConfig"),tDr.forEach(t),VHe=r(HEe," (XGLM model)"),HEe.forEach(t),XHe=i(L),lg=n(L,"LI",{});var UEe=s(lg);qoe=n(UEe,"STRONG",{});var aDr=s(qoe);zHe=r(aDr,"xlm"),aDr.forEach(t),QHe=r(UEe," \u2014 "),rS=n(UEe,"A",{href:!0});var nDr=s(rS);WHe=r(nDr,"XLMConfig"),nDr.forEach(t),HHe=r(UEe," (XLM model)"),UEe.forEach(t),UHe=i(L),ig=n(L,"LI",{});var JEe=s(ig);Noe=n(JEe,"STRONG",{});var sDr=s(Noe);JHe=r(sDr,"xlm-prophetnet"),sDr.forEach(t),YHe=r(JEe," \u2014 "),tS=n(JEe,"A",{href:!0});var lDr=s(tS);KHe=r(lDr,"XLMProphetNetConfig"),lDr.forEach(t),ZHe=r(JEe," (XLMProphetNet model)"),JEe.forEach(t),eUe=i(L),dg=n(L,"LI",{});var YEe=s(dg);joe=n(YEe,"STRONG",{});var iDr=s(joe);oUe=r(iDr,"xlm-roberta"),iDr.forEach(t),rUe=r(YEe," \u2014 "),aS=n(YEe,"A",{href:!0});var dDr=s(aS);tUe=r(dDr,"XLMRobertaConfig"),dDr.forEach(t),aUe=r(YEe," (XLM-RoBERTa model)"),YEe.forEach(t),nUe=i(L),cg=n(L,"LI",{});var KEe=s(cg);Doe=n(KEe,"STRONG",{});var cDr=s(Doe);sUe=r(cDr,"xlm-roberta-xl"),cDr.forEach(t),lUe=r(KEe," \u2014 "),nS=n(KEe,"A",{href:!0});var fDr=s(nS);iUe=r(fDr,"XLMRobertaXLConfig"),fDr.forEach(t),dUe=r(KEe," (XLM-RoBERTa-XL model)"),KEe.forEach(t),cUe=i(L),fg=n(L,"LI",{});var ZEe=s(fg);Goe=n(ZEe,"STRONG",{});var mDr=s(Goe);fUe=r(mDr,"xlnet"),mDr.forEach(t),mUe=r(ZEe," \u2014 "),sS=n(ZEe,"A",{href:!0});var gDr=s(sS);gUe=r(gDr,"XLNetConfig"),gDr.forEach(t),hUe=r(ZEe," (XLNet model)"),ZEe.forEach(t),pUe=i(L),mg=n(L,"LI",{});var e5e=s(mg);Ooe=n(e5e,"STRONG",{});var hDr=s(Ooe);uUe=r(hDr,"yolos"),hDr.forEach(t),_Ue=r(e5e," \u2014 "),lS=n(e5e,"A",{href:!0});var pDr=s(lS);bUe=r(pDr,"YolosConfig"),pDr.forEach(t),vUe=r(e5e," (YOLOS model)"),e5e.forEach(t),FUe=i(L),gg=n(L,"LI",{});var o5e=s(gg);Voe=n(o5e,"STRONG",{});var uDr=s(Voe);TUe=r(uDr,"yoso"),uDr.forEach(t),MUe=r(o5e," \u2014 "),iS=n(o5e,"A",{href:!0});var _Dr=s(iS);EUe=r(_Dr,"YosoConfig"),_Dr.forEach(t),CUe=r(o5e," (YOSO model)"),o5e.forEach(t),L.forEach(t),wUe=i(Zr),T(hg.$$.fragment,Zr),Zr.forEach(t),AUe=i(Kr),pg=n(Kr,"DIV",{class:!0});var pqe=s(pg);T(Yw.$$.fragment,pqe),yUe=i(pqe),Xoe=n(pqe,"P",{});var bDr=s(Xoe);LUe=r(bDr,"Register a new configuration for this class."),bDr.forEach(t),pqe.forEach(t),Kr.forEach(t),bPe=i(f),bi=n(f,"H2",{class:!0});var uqe=s(bi);ug=n(uqe,"A",{id:!0,class:!0,href:!0});var vDr=s(ug);zoe=n(vDr,"SPAN",{});var FDr=s(zoe);T(Kw.$$.fragment,FDr),FDr.forEach(t),vDr.forEach(t),xUe=i(uqe),Qoe=n(uqe,"SPAN",{});var TDr=s(Qoe);$Ue=r(TDr,"AutoTokenizer"),TDr.forEach(t),uqe.forEach(t),vPe=i(f),wo=n(f,"DIV",{class:!0});var Is=s(wo);T(Zw.$$.fragment,Is),kUe=i(Is),eA=n(Is,"P",{});var _qe=s(eA);SUe=r(_qe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),dS=n(_qe,"A",{href:!0});var MDr=s(dS);RUe=r(MDr,"AutoTokenizer.from_pretrained()"),MDr.forEach(t),BUe=r(_qe," class method."),_qe.forEach(t),PUe=i(Is),oA=n(Is,"P",{});var bqe=s(oA);IUe=r(bqe,"This class cannot be instantiated directly using "),Woe=n(bqe,"CODE",{});var EDr=s(Woe);qUe=r(EDr,"__init__()"),EDr.forEach(t),NUe=r(bqe," (throws an error)."),bqe.forEach(t),jUe=i(Is),Cr=n(Is,"DIV",{class:!0});var qs=s(Cr);T(rA.$$.fragment,qs),DUe=i(qs),Hoe=n(qs,"P",{});var CDr=s(Hoe);GUe=r(CDr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),CDr.forEach(t),OUe=i(qs),Ca=n(qs,"P",{});var XC=s(Ca);VUe=r(XC,"The tokenizer class to instantiate is selected based on the "),Uoe=n(XC,"CODE",{});var wDr=s(Uoe);XUe=r(wDr,"model_type"),wDr.forEach(t),zUe=r(XC,` property of the config object (either
passed as an argument or loaded from `),Joe=n(XC,"CODE",{});var ADr=s(Joe);QUe=r(ADr,"pretrained_model_name_or_path"),ADr.forEach(t),WUe=r(XC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yoe=n(XC,"CODE",{});var yDr=s(Yoe);HUe=r(yDr,"pretrained_model_name_or_path"),yDr.forEach(t),UUe=r(XC,":"),XC.forEach(t),JUe=i(qs),k=n(qs,"UL",{});var S=s(k);Sn=n(S,"LI",{});var t7=s(Sn);Koe=n(t7,"STRONG",{});var LDr=s(Koe);YUe=r(LDr,"albert"),LDr.forEach(t),KUe=r(t7," \u2014 "),cS=n(t7,"A",{href:!0});var xDr=s(cS);ZUe=r(xDr,"AlbertTokenizer"),xDr.forEach(t),eJe=r(t7," or "),fS=n(t7,"A",{href:!0});var $Dr=s(fS);oJe=r($Dr,"AlbertTokenizerFast"),$Dr.forEach(t),rJe=r(t7," (ALBERT model)"),t7.forEach(t),tJe=i(S),Rn=n(S,"LI",{});var a7=s(Rn);Zoe=n(a7,"STRONG",{});var kDr=s(Zoe);aJe=r(kDr,"bart"),kDr.forEach(t),nJe=r(a7," \u2014 "),mS=n(a7,"A",{href:!0});var SDr=s(mS);sJe=r(SDr,"BartTokenizer"),SDr.forEach(t),lJe=r(a7," or "),gS=n(a7,"A",{href:!0});var RDr=s(gS);iJe=r(RDr,"BartTokenizerFast"),RDr.forEach(t),dJe=r(a7," (BART model)"),a7.forEach(t),cJe=i(S),Bn=n(S,"LI",{});var n7=s(Bn);ere=n(n7,"STRONG",{});var BDr=s(ere);fJe=r(BDr,"barthez"),BDr.forEach(t),mJe=r(n7," \u2014 "),hS=n(n7,"A",{href:!0});var PDr=s(hS);gJe=r(PDr,"BarthezTokenizer"),PDr.forEach(t),hJe=r(n7," or "),pS=n(n7,"A",{href:!0});var IDr=s(pS);pJe=r(IDr,"BarthezTokenizerFast"),IDr.forEach(t),uJe=r(n7," (BARThez model)"),n7.forEach(t),_Je=i(S),_g=n(S,"LI",{});var r5e=s(_g);ore=n(r5e,"STRONG",{});var qDr=s(ore);bJe=r(qDr,"bartpho"),qDr.forEach(t),vJe=r(r5e," \u2014 "),uS=n(r5e,"A",{href:!0});var NDr=s(uS);FJe=r(NDr,"BartphoTokenizer"),NDr.forEach(t),TJe=r(r5e," (BARTpho model)"),r5e.forEach(t),MJe=i(S),Pn=n(S,"LI",{});var s7=s(Pn);rre=n(s7,"STRONG",{});var jDr=s(rre);EJe=r(jDr,"bert"),jDr.forEach(t),CJe=r(s7," \u2014 "),_S=n(s7,"A",{href:!0});var DDr=s(_S);wJe=r(DDr,"BertTokenizer"),DDr.forEach(t),AJe=r(s7," or "),bS=n(s7,"A",{href:!0});var GDr=s(bS);yJe=r(GDr,"BertTokenizerFast"),GDr.forEach(t),LJe=r(s7," (BERT model)"),s7.forEach(t),xJe=i(S),bg=n(S,"LI",{});var t5e=s(bg);tre=n(t5e,"STRONG",{});var ODr=s(tre);$Je=r(ODr,"bert-generation"),ODr.forEach(t),kJe=r(t5e," \u2014 "),vS=n(t5e,"A",{href:!0});var VDr=s(vS);SJe=r(VDr,"BertGenerationTokenizer"),VDr.forEach(t),RJe=r(t5e," (Bert Generation model)"),t5e.forEach(t),BJe=i(S),vg=n(S,"LI",{});var a5e=s(vg);are=n(a5e,"STRONG",{});var XDr=s(are);PJe=r(XDr,"bert-japanese"),XDr.forEach(t),IJe=r(a5e," \u2014 "),FS=n(a5e,"A",{href:!0});var zDr=s(FS);qJe=r(zDr,"BertJapaneseTokenizer"),zDr.forEach(t),NJe=r(a5e," (BertJapanese model)"),a5e.forEach(t),jJe=i(S),Fg=n(S,"LI",{});var n5e=s(Fg);nre=n(n5e,"STRONG",{});var QDr=s(nre);DJe=r(QDr,"bertweet"),QDr.forEach(t),GJe=r(n5e," \u2014 "),TS=n(n5e,"A",{href:!0});var WDr=s(TS);OJe=r(WDr,"BertweetTokenizer"),WDr.forEach(t),VJe=r(n5e," (Bertweet model)"),n5e.forEach(t),XJe=i(S),In=n(S,"LI",{});var l7=s(In);sre=n(l7,"STRONG",{});var HDr=s(sre);zJe=r(HDr,"big_bird"),HDr.forEach(t),QJe=r(l7," \u2014 "),MS=n(l7,"A",{href:!0});var UDr=s(MS);WJe=r(UDr,"BigBirdTokenizer"),UDr.forEach(t),HJe=r(l7," or "),ES=n(l7,"A",{href:!0});var JDr=s(ES);UJe=r(JDr,"BigBirdTokenizerFast"),JDr.forEach(t),JJe=r(l7," (BigBird model)"),l7.forEach(t),YJe=i(S),qn=n(S,"LI",{});var i7=s(qn);lre=n(i7,"STRONG",{});var YDr=s(lre);KJe=r(YDr,"bigbird_pegasus"),YDr.forEach(t),ZJe=r(i7," \u2014 "),CS=n(i7,"A",{href:!0});var KDr=s(CS);eYe=r(KDr,"PegasusTokenizer"),KDr.forEach(t),oYe=r(i7," or "),wS=n(i7,"A",{href:!0});var ZDr=s(wS);rYe=r(ZDr,"PegasusTokenizerFast"),ZDr.forEach(t),tYe=r(i7," (BigBirdPegasus model)"),i7.forEach(t),aYe=i(S),Nn=n(S,"LI",{});var d7=s(Nn);ire=n(d7,"STRONG",{});var eGr=s(ire);nYe=r(eGr,"blenderbot"),eGr.forEach(t),sYe=r(d7," \u2014 "),AS=n(d7,"A",{href:!0});var oGr=s(AS);lYe=r(oGr,"BlenderbotTokenizer"),oGr.forEach(t),iYe=r(d7," or "),yS=n(d7,"A",{href:!0});var rGr=s(yS);dYe=r(rGr,"BlenderbotTokenizerFast"),rGr.forEach(t),cYe=r(d7," (Blenderbot model)"),d7.forEach(t),fYe=i(S),Tg=n(S,"LI",{});var s5e=s(Tg);dre=n(s5e,"STRONG",{});var tGr=s(dre);mYe=r(tGr,"blenderbot-small"),tGr.forEach(t),gYe=r(s5e," \u2014 "),LS=n(s5e,"A",{href:!0});var aGr=s(LS);hYe=r(aGr,"BlenderbotSmallTokenizer"),aGr.forEach(t),pYe=r(s5e," (BlenderbotSmall model)"),s5e.forEach(t),uYe=i(S),Mg=n(S,"LI",{});var l5e=s(Mg);cre=n(l5e,"STRONG",{});var nGr=s(cre);_Ye=r(nGr,"byt5"),nGr.forEach(t),bYe=r(l5e," \u2014 "),xS=n(l5e,"A",{href:!0});var sGr=s(xS);vYe=r(sGr,"ByT5Tokenizer"),sGr.forEach(t),FYe=r(l5e," (ByT5 model)"),l5e.forEach(t),TYe=i(S),jn=n(S,"LI",{});var c7=s(jn);fre=n(c7,"STRONG",{});var lGr=s(fre);MYe=r(lGr,"camembert"),lGr.forEach(t),EYe=r(c7," \u2014 "),$S=n(c7,"A",{href:!0});var iGr=s($S);CYe=r(iGr,"CamembertTokenizer"),iGr.forEach(t),wYe=r(c7," or "),kS=n(c7,"A",{href:!0});var dGr=s(kS);AYe=r(dGr,"CamembertTokenizerFast"),dGr.forEach(t),yYe=r(c7," (CamemBERT model)"),c7.forEach(t),LYe=i(S),Eg=n(S,"LI",{});var i5e=s(Eg);mre=n(i5e,"STRONG",{});var cGr=s(mre);xYe=r(cGr,"canine"),cGr.forEach(t),$Ye=r(i5e," \u2014 "),SS=n(i5e,"A",{href:!0});var fGr=s(SS);kYe=r(fGr,"CanineTokenizer"),fGr.forEach(t),SYe=r(i5e," (Canine model)"),i5e.forEach(t),RYe=i(S),Dn=n(S,"LI",{});var f7=s(Dn);gre=n(f7,"STRONG",{});var mGr=s(gre);BYe=r(mGr,"clip"),mGr.forEach(t),PYe=r(f7," \u2014 "),RS=n(f7,"A",{href:!0});var gGr=s(RS);IYe=r(gGr,"CLIPTokenizer"),gGr.forEach(t),qYe=r(f7," or "),BS=n(f7,"A",{href:!0});var hGr=s(BS);NYe=r(hGr,"CLIPTokenizerFast"),hGr.forEach(t),jYe=r(f7," (CLIP model)"),f7.forEach(t),DYe=i(S),Gn=n(S,"LI",{});var m7=s(Gn);hre=n(m7,"STRONG",{});var pGr=s(hre);GYe=r(pGr,"convbert"),pGr.forEach(t),OYe=r(m7," \u2014 "),PS=n(m7,"A",{href:!0});var uGr=s(PS);VYe=r(uGr,"ConvBertTokenizer"),uGr.forEach(t),XYe=r(m7," or "),IS=n(m7,"A",{href:!0});var _Gr=s(IS);zYe=r(_Gr,"ConvBertTokenizerFast"),_Gr.forEach(t),QYe=r(m7," (ConvBERT model)"),m7.forEach(t),WYe=i(S),On=n(S,"LI",{});var g7=s(On);pre=n(g7,"STRONG",{});var bGr=s(pre);HYe=r(bGr,"cpm"),bGr.forEach(t),UYe=r(g7," \u2014 "),qS=n(g7,"A",{href:!0});var vGr=s(qS);JYe=r(vGr,"CpmTokenizer"),vGr.forEach(t),YYe=r(g7," or "),NS=n(g7,"A",{href:!0});var FGr=s(NS);KYe=r(FGr,"CpmTokenizerFast"),FGr.forEach(t),ZYe=r(g7," (CPM model)"),g7.forEach(t),eKe=i(S),Cg=n(S,"LI",{});var d5e=s(Cg);ure=n(d5e,"STRONG",{});var TGr=s(ure);oKe=r(TGr,"ctrl"),TGr.forEach(t),rKe=r(d5e," \u2014 "),jS=n(d5e,"A",{href:!0});var MGr=s(jS);tKe=r(MGr,"CTRLTokenizer"),MGr.forEach(t),aKe=r(d5e," (CTRL model)"),d5e.forEach(t),nKe=i(S),Vn=n(S,"LI",{});var h7=s(Vn);_re=n(h7,"STRONG",{});var EGr=s(_re);sKe=r(EGr,"data2vec-text"),EGr.forEach(t),lKe=r(h7," \u2014 "),DS=n(h7,"A",{href:!0});var CGr=s(DS);iKe=r(CGr,"RobertaTokenizer"),CGr.forEach(t),dKe=r(h7," or "),GS=n(h7,"A",{href:!0});var wGr=s(GS);cKe=r(wGr,"RobertaTokenizerFast"),wGr.forEach(t),fKe=r(h7," (Data2VecText model)"),h7.forEach(t),mKe=i(S),Xn=n(S,"LI",{});var p7=s(Xn);bre=n(p7,"STRONG",{});var AGr=s(bre);gKe=r(AGr,"deberta"),AGr.forEach(t),hKe=r(p7," \u2014 "),OS=n(p7,"A",{href:!0});var yGr=s(OS);pKe=r(yGr,"DebertaTokenizer"),yGr.forEach(t),uKe=r(p7," or "),VS=n(p7,"A",{href:!0});var LGr=s(VS);_Ke=r(LGr,"DebertaTokenizerFast"),LGr.forEach(t),bKe=r(p7," (DeBERTa model)"),p7.forEach(t),vKe=i(S),zn=n(S,"LI",{});var u7=s(zn);vre=n(u7,"STRONG",{});var xGr=s(vre);FKe=r(xGr,"deberta-v2"),xGr.forEach(t),TKe=r(u7," \u2014 "),XS=n(u7,"A",{href:!0});var $Gr=s(XS);MKe=r($Gr,"DebertaV2Tokenizer"),$Gr.forEach(t),EKe=r(u7," or "),zS=n(u7,"A",{href:!0});var kGr=s(zS);CKe=r(kGr,"DebertaV2TokenizerFast"),kGr.forEach(t),wKe=r(u7," (DeBERTa-v2 model)"),u7.forEach(t),AKe=i(S),Qn=n(S,"LI",{});var _7=s(Qn);Fre=n(_7,"STRONG",{});var SGr=s(Fre);yKe=r(SGr,"distilbert"),SGr.forEach(t),LKe=r(_7," \u2014 "),QS=n(_7,"A",{href:!0});var RGr=s(QS);xKe=r(RGr,"DistilBertTokenizer"),RGr.forEach(t),$Ke=r(_7," or "),WS=n(_7,"A",{href:!0});var BGr=s(WS);kKe=r(BGr,"DistilBertTokenizerFast"),BGr.forEach(t),SKe=r(_7," (DistilBERT model)"),_7.forEach(t),RKe=i(S),Wn=n(S,"LI",{});var b7=s(Wn);Tre=n(b7,"STRONG",{});var PGr=s(Tre);BKe=r(PGr,"dpr"),PGr.forEach(t),PKe=r(b7," \u2014 "),HS=n(b7,"A",{href:!0});var IGr=s(HS);IKe=r(IGr,"DPRQuestionEncoderTokenizer"),IGr.forEach(t),qKe=r(b7," or "),US=n(b7,"A",{href:!0});var qGr=s(US);NKe=r(qGr,"DPRQuestionEncoderTokenizerFast"),qGr.forEach(t),jKe=r(b7," (DPR model)"),b7.forEach(t),DKe=i(S),Hn=n(S,"LI",{});var v7=s(Hn);Mre=n(v7,"STRONG",{});var NGr=s(Mre);GKe=r(NGr,"electra"),NGr.forEach(t),OKe=r(v7," \u2014 "),JS=n(v7,"A",{href:!0});var jGr=s(JS);VKe=r(jGr,"ElectraTokenizer"),jGr.forEach(t),XKe=r(v7," or "),YS=n(v7,"A",{href:!0});var DGr=s(YS);zKe=r(DGr,"ElectraTokenizerFast"),DGr.forEach(t),QKe=r(v7," (ELECTRA model)"),v7.forEach(t),WKe=i(S),wg=n(S,"LI",{});var c5e=s(wg);Ere=n(c5e,"STRONG",{});var GGr=s(Ere);HKe=r(GGr,"flaubert"),GGr.forEach(t),UKe=r(c5e," \u2014 "),KS=n(c5e,"A",{href:!0});var OGr=s(KS);JKe=r(OGr,"FlaubertTokenizer"),OGr.forEach(t),YKe=r(c5e," (FlauBERT model)"),c5e.forEach(t),KKe=i(S),Un=n(S,"LI",{});var F7=s(Un);Cre=n(F7,"STRONG",{});var VGr=s(Cre);ZKe=r(VGr,"fnet"),VGr.forEach(t),eZe=r(F7," \u2014 "),ZS=n(F7,"A",{href:!0});var XGr=s(ZS);oZe=r(XGr,"FNetTokenizer"),XGr.forEach(t),rZe=r(F7," or "),eR=n(F7,"A",{href:!0});var zGr=s(eR);tZe=r(zGr,"FNetTokenizerFast"),zGr.forEach(t),aZe=r(F7," (FNet model)"),F7.forEach(t),nZe=i(S),Ag=n(S,"LI",{});var f5e=s(Ag);wre=n(f5e,"STRONG",{});var QGr=s(wre);sZe=r(QGr,"fsmt"),QGr.forEach(t),lZe=r(f5e," \u2014 "),oR=n(f5e,"A",{href:!0});var WGr=s(oR);iZe=r(WGr,"FSMTTokenizer"),WGr.forEach(t),dZe=r(f5e," (FairSeq Machine-Translation model)"),f5e.forEach(t),cZe=i(S),Jn=n(S,"LI",{});var T7=s(Jn);Are=n(T7,"STRONG",{});var HGr=s(Are);fZe=r(HGr,"funnel"),HGr.forEach(t),mZe=r(T7," \u2014 "),rR=n(T7,"A",{href:!0});var UGr=s(rR);gZe=r(UGr,"FunnelTokenizer"),UGr.forEach(t),hZe=r(T7," or "),tR=n(T7,"A",{href:!0});var JGr=s(tR);pZe=r(JGr,"FunnelTokenizerFast"),JGr.forEach(t),uZe=r(T7," (Funnel Transformer model)"),T7.forEach(t),_Ze=i(S),Yn=n(S,"LI",{});var M7=s(Yn);yre=n(M7,"STRONG",{});var YGr=s(yre);bZe=r(YGr,"gpt2"),YGr.forEach(t),vZe=r(M7," \u2014 "),aR=n(M7,"A",{href:!0});var KGr=s(aR);FZe=r(KGr,"GPT2Tokenizer"),KGr.forEach(t),TZe=r(M7," or "),nR=n(M7,"A",{href:!0});var ZGr=s(nR);MZe=r(ZGr,"GPT2TokenizerFast"),ZGr.forEach(t),EZe=r(M7," (OpenAI GPT-2 model)"),M7.forEach(t),CZe=i(S),Kn=n(S,"LI",{});var E7=s(Kn);Lre=n(E7,"STRONG",{});var eOr=s(Lre);wZe=r(eOr,"gpt_neo"),eOr.forEach(t),AZe=r(E7," \u2014 "),sR=n(E7,"A",{href:!0});var oOr=s(sR);yZe=r(oOr,"GPT2Tokenizer"),oOr.forEach(t),LZe=r(E7," or "),lR=n(E7,"A",{href:!0});var rOr=s(lR);xZe=r(rOr,"GPT2TokenizerFast"),rOr.forEach(t),$Ze=r(E7," (GPT Neo model)"),E7.forEach(t),kZe=i(S),Zn=n(S,"LI",{});var C7=s(Zn);xre=n(C7,"STRONG",{});var tOr=s(xre);SZe=r(tOr,"gptj"),tOr.forEach(t),RZe=r(C7," \u2014 "),iR=n(C7,"A",{href:!0});var aOr=s(iR);BZe=r(aOr,"GPT2Tokenizer"),aOr.forEach(t),PZe=r(C7," or "),dR=n(C7,"A",{href:!0});var nOr=s(dR);IZe=r(nOr,"GPT2TokenizerFast"),nOr.forEach(t),qZe=r(C7," (GPT-J model)"),C7.forEach(t),NZe=i(S),es=n(S,"LI",{});var w7=s(es);$re=n(w7,"STRONG",{});var sOr=s($re);jZe=r(sOr,"herbert"),sOr.forEach(t),DZe=r(w7," \u2014 "),cR=n(w7,"A",{href:!0});var lOr=s(cR);GZe=r(lOr,"HerbertTokenizer"),lOr.forEach(t),OZe=r(w7," or "),fR=n(w7,"A",{href:!0});var iOr=s(fR);VZe=r(iOr,"HerbertTokenizerFast"),iOr.forEach(t),XZe=r(w7," (HerBERT model)"),w7.forEach(t),zZe=i(S),yg=n(S,"LI",{});var m5e=s(yg);kre=n(m5e,"STRONG",{});var dOr=s(kre);QZe=r(dOr,"hubert"),dOr.forEach(t),WZe=r(m5e," \u2014 "),mR=n(m5e,"A",{href:!0});var cOr=s(mR);HZe=r(cOr,"Wav2Vec2CTCTokenizer"),cOr.forEach(t),UZe=r(m5e," (Hubert model)"),m5e.forEach(t),JZe=i(S),os=n(S,"LI",{});var A7=s(os);Sre=n(A7,"STRONG",{});var fOr=s(Sre);YZe=r(fOr,"ibert"),fOr.forEach(t),KZe=r(A7," \u2014 "),gR=n(A7,"A",{href:!0});var mOr=s(gR);ZZe=r(mOr,"RobertaTokenizer"),mOr.forEach(t),eeo=r(A7," or "),hR=n(A7,"A",{href:!0});var gOr=s(hR);oeo=r(gOr,"RobertaTokenizerFast"),gOr.forEach(t),reo=r(A7," (I-BERT model)"),A7.forEach(t),teo=i(S),rs=n(S,"LI",{});var y7=s(rs);Rre=n(y7,"STRONG",{});var hOr=s(Rre);aeo=r(hOr,"layoutlm"),hOr.forEach(t),neo=r(y7," \u2014 "),pR=n(y7,"A",{href:!0});var pOr=s(pR);seo=r(pOr,"LayoutLMTokenizer"),pOr.forEach(t),leo=r(y7," or "),uR=n(y7,"A",{href:!0});var uOr=s(uR);ieo=r(uOr,"LayoutLMTokenizerFast"),uOr.forEach(t),deo=r(y7," (LayoutLM model)"),y7.forEach(t),ceo=i(S),ts=n(S,"LI",{});var L7=s(ts);Bre=n(L7,"STRONG",{});var _Or=s(Bre);feo=r(_Or,"layoutlmv2"),_Or.forEach(t),meo=r(L7," \u2014 "),_R=n(L7,"A",{href:!0});var bOr=s(_R);geo=r(bOr,"LayoutLMv2Tokenizer"),bOr.forEach(t),heo=r(L7," or "),bR=n(L7,"A",{href:!0});var vOr=s(bR);peo=r(vOr,"LayoutLMv2TokenizerFast"),vOr.forEach(t),ueo=r(L7," (LayoutLMv2 model)"),L7.forEach(t),_eo=i(S),as=n(S,"LI",{});var x7=s(as);Pre=n(x7,"STRONG",{});var FOr=s(Pre);beo=r(FOr,"layoutxlm"),FOr.forEach(t),veo=r(x7," \u2014 "),vR=n(x7,"A",{href:!0});var TOr=s(vR);Feo=r(TOr,"LayoutXLMTokenizer"),TOr.forEach(t),Teo=r(x7," or "),FR=n(x7,"A",{href:!0});var MOr=s(FR);Meo=r(MOr,"LayoutXLMTokenizerFast"),MOr.forEach(t),Eeo=r(x7," (LayoutXLM model)"),x7.forEach(t),Ceo=i(S),ns=n(S,"LI",{});var $7=s(ns);Ire=n($7,"STRONG",{});var EOr=s(Ire);weo=r(EOr,"led"),EOr.forEach(t),Aeo=r($7," \u2014 "),TR=n($7,"A",{href:!0});var COr=s(TR);yeo=r(COr,"LEDTokenizer"),COr.forEach(t),Leo=r($7," or "),MR=n($7,"A",{href:!0});var wOr=s(MR);xeo=r(wOr,"LEDTokenizerFast"),wOr.forEach(t),$eo=r($7," (LED model)"),$7.forEach(t),keo=i(S),ss=n(S,"LI",{});var k7=s(ss);qre=n(k7,"STRONG",{});var AOr=s(qre);Seo=r(AOr,"longformer"),AOr.forEach(t),Reo=r(k7," \u2014 "),ER=n(k7,"A",{href:!0});var yOr=s(ER);Beo=r(yOr,"LongformerTokenizer"),yOr.forEach(t),Peo=r(k7," or "),CR=n(k7,"A",{href:!0});var LOr=s(CR);Ieo=r(LOr,"LongformerTokenizerFast"),LOr.forEach(t),qeo=r(k7," (Longformer model)"),k7.forEach(t),Neo=i(S),Lg=n(S,"LI",{});var g5e=s(Lg);Nre=n(g5e,"STRONG",{});var xOr=s(Nre);jeo=r(xOr,"luke"),xOr.forEach(t),Deo=r(g5e," \u2014 "),wR=n(g5e,"A",{href:!0});var $Or=s(wR);Geo=r($Or,"LukeTokenizer"),$Or.forEach(t),Oeo=r(g5e," (LUKE model)"),g5e.forEach(t),Veo=i(S),ls=n(S,"LI",{});var S7=s(ls);jre=n(S7,"STRONG",{});var kOr=s(jre);Xeo=r(kOr,"lxmert"),kOr.forEach(t),zeo=r(S7," \u2014 "),AR=n(S7,"A",{href:!0});var SOr=s(AR);Qeo=r(SOr,"LxmertTokenizer"),SOr.forEach(t),Weo=r(S7," or "),yR=n(S7,"A",{href:!0});var ROr=s(yR);Heo=r(ROr,"LxmertTokenizerFast"),ROr.forEach(t),Ueo=r(S7," (LXMERT model)"),S7.forEach(t),Jeo=i(S),xg=n(S,"LI",{});var h5e=s(xg);Dre=n(h5e,"STRONG",{});var BOr=s(Dre);Yeo=r(BOr,"m2m_100"),BOr.forEach(t),Keo=r(h5e," \u2014 "),LR=n(h5e,"A",{href:!0});var POr=s(LR);Zeo=r(POr,"M2M100Tokenizer"),POr.forEach(t),eoo=r(h5e," (M2M100 model)"),h5e.forEach(t),ooo=i(S),$g=n(S,"LI",{});var p5e=s($g);Gre=n(p5e,"STRONG",{});var IOr=s(Gre);roo=r(IOr,"marian"),IOr.forEach(t),too=r(p5e," \u2014 "),xR=n(p5e,"A",{href:!0});var qOr=s(xR);aoo=r(qOr,"MarianTokenizer"),qOr.forEach(t),noo=r(p5e," (Marian model)"),p5e.forEach(t),soo=i(S),is=n(S,"LI",{});var R7=s(is);Ore=n(R7,"STRONG",{});var NOr=s(Ore);loo=r(NOr,"mbart"),NOr.forEach(t),ioo=r(R7," \u2014 "),$R=n(R7,"A",{href:!0});var jOr=s($R);doo=r(jOr,"MBartTokenizer"),jOr.forEach(t),coo=r(R7," or "),kR=n(R7,"A",{href:!0});var DOr=s(kR);foo=r(DOr,"MBartTokenizerFast"),DOr.forEach(t),moo=r(R7," (mBART model)"),R7.forEach(t),goo=i(S),ds=n(S,"LI",{});var B7=s(ds);Vre=n(B7,"STRONG",{});var GOr=s(Vre);hoo=r(GOr,"mbart50"),GOr.forEach(t),poo=r(B7," \u2014 "),SR=n(B7,"A",{href:!0});var OOr=s(SR);uoo=r(OOr,"MBart50Tokenizer"),OOr.forEach(t),_oo=r(B7," or "),RR=n(B7,"A",{href:!0});var VOr=s(RR);boo=r(VOr,"MBart50TokenizerFast"),VOr.forEach(t),voo=r(B7," (mBART-50 model)"),B7.forEach(t),Foo=i(S),cs=n(S,"LI",{});var P7=s(cs);Xre=n(P7,"STRONG",{});var XOr=s(Xre);Too=r(XOr,"megatron-bert"),XOr.forEach(t),Moo=r(P7," \u2014 "),BR=n(P7,"A",{href:!0});var zOr=s(BR);Eoo=r(zOr,"BertTokenizer"),zOr.forEach(t),Coo=r(P7," or "),PR=n(P7,"A",{href:!0});var QOr=s(PR);woo=r(QOr,"BertTokenizerFast"),QOr.forEach(t),Aoo=r(P7," (MegatronBert model)"),P7.forEach(t),yoo=i(S),kg=n(S,"LI",{});var u5e=s(kg);zre=n(u5e,"STRONG",{});var WOr=s(zre);Loo=r(WOr,"mluke"),WOr.forEach(t),xoo=r(u5e," \u2014 "),IR=n(u5e,"A",{href:!0});var HOr=s(IR);$oo=r(HOr,"MLukeTokenizer"),HOr.forEach(t),koo=r(u5e," (mLUKE model)"),u5e.forEach(t),Soo=i(S),fs=n(S,"LI",{});var I7=s(fs);Qre=n(I7,"STRONG",{});var UOr=s(Qre);Roo=r(UOr,"mobilebert"),UOr.forEach(t),Boo=r(I7," \u2014 "),qR=n(I7,"A",{href:!0});var JOr=s(qR);Poo=r(JOr,"MobileBertTokenizer"),JOr.forEach(t),Ioo=r(I7," or "),NR=n(I7,"A",{href:!0});var YOr=s(NR);qoo=r(YOr,"MobileBertTokenizerFast"),YOr.forEach(t),Noo=r(I7," (MobileBERT model)"),I7.forEach(t),joo=i(S),ms=n(S,"LI",{});var q7=s(ms);Wre=n(q7,"STRONG",{});var KOr=s(Wre);Doo=r(KOr,"mpnet"),KOr.forEach(t),Goo=r(q7," \u2014 "),jR=n(q7,"A",{href:!0});var ZOr=s(jR);Ooo=r(ZOr,"MPNetTokenizer"),ZOr.forEach(t),Voo=r(q7," or "),DR=n(q7,"A",{href:!0});var eVr=s(DR);Xoo=r(eVr,"MPNetTokenizerFast"),eVr.forEach(t),zoo=r(q7," (MPNet model)"),q7.forEach(t),Qoo=i(S),gs=n(S,"LI",{});var N7=s(gs);Hre=n(N7,"STRONG",{});var oVr=s(Hre);Woo=r(oVr,"mt5"),oVr.forEach(t),Hoo=r(N7," \u2014 "),GR=n(N7,"A",{href:!0});var rVr=s(GR);Uoo=r(rVr,"MT5Tokenizer"),rVr.forEach(t),Joo=r(N7," or "),OR=n(N7,"A",{href:!0});var tVr=s(OR);Yoo=r(tVr,"MT5TokenizerFast"),tVr.forEach(t),Koo=r(N7," (mT5 model)"),N7.forEach(t),Zoo=i(S),hs=n(S,"LI",{});var j7=s(hs);Ure=n(j7,"STRONG",{});var aVr=s(Ure);ero=r(aVr,"nystromformer"),aVr.forEach(t),oro=r(j7," \u2014 "),VR=n(j7,"A",{href:!0});var nVr=s(VR);rro=r(nVr,"AlbertTokenizer"),nVr.forEach(t),tro=r(j7," or "),XR=n(j7,"A",{href:!0});var sVr=s(XR);aro=r(sVr,"AlbertTokenizerFast"),sVr.forEach(t),nro=r(j7," (Nystromformer model)"),j7.forEach(t),sro=i(S),ps=n(S,"LI",{});var D7=s(ps);Jre=n(D7,"STRONG",{});var lVr=s(Jre);lro=r(lVr,"openai-gpt"),lVr.forEach(t),iro=r(D7," \u2014 "),zR=n(D7,"A",{href:!0});var iVr=s(zR);dro=r(iVr,"OpenAIGPTTokenizer"),iVr.forEach(t),cro=r(D7," or "),QR=n(D7,"A",{href:!0});var dVr=s(QR);fro=r(dVr,"OpenAIGPTTokenizerFast"),dVr.forEach(t),mro=r(D7," (OpenAI GPT model)"),D7.forEach(t),gro=i(S),us=n(S,"LI",{});var G7=s(us);Yre=n(G7,"STRONG",{});var cVr=s(Yre);hro=r(cVr,"pegasus"),cVr.forEach(t),pro=r(G7," \u2014 "),WR=n(G7,"A",{href:!0});var fVr=s(WR);uro=r(fVr,"PegasusTokenizer"),fVr.forEach(t),_ro=r(G7," or "),HR=n(G7,"A",{href:!0});var mVr=s(HR);bro=r(mVr,"PegasusTokenizerFast"),mVr.forEach(t),vro=r(G7," (Pegasus model)"),G7.forEach(t),Fro=i(S),Sg=n(S,"LI",{});var _5e=s(Sg);Kre=n(_5e,"STRONG",{});var gVr=s(Kre);Tro=r(gVr,"perceiver"),gVr.forEach(t),Mro=r(_5e," \u2014 "),UR=n(_5e,"A",{href:!0});var hVr=s(UR);Ero=r(hVr,"PerceiverTokenizer"),hVr.forEach(t),Cro=r(_5e," (Perceiver model)"),_5e.forEach(t),wro=i(S),Rg=n(S,"LI",{});var b5e=s(Rg);Zre=n(b5e,"STRONG",{});var pVr=s(Zre);Aro=r(pVr,"phobert"),pVr.forEach(t),yro=r(b5e," \u2014 "),JR=n(b5e,"A",{href:!0});var uVr=s(JR);Lro=r(uVr,"PhobertTokenizer"),uVr.forEach(t),xro=r(b5e," (PhoBERT model)"),b5e.forEach(t),$ro=i(S),Bg=n(S,"LI",{});var v5e=s(Bg);ete=n(v5e,"STRONG",{});var _Vr=s(ete);kro=r(_Vr,"plbart"),_Vr.forEach(t),Sro=r(v5e," \u2014 "),YR=n(v5e,"A",{href:!0});var bVr=s(YR);Rro=r(bVr,"PLBartTokenizer"),bVr.forEach(t),Bro=r(v5e," (PLBart model)"),v5e.forEach(t),Pro=i(S),Pg=n(S,"LI",{});var F5e=s(Pg);ote=n(F5e,"STRONG",{});var vVr=s(ote);Iro=r(vVr,"prophetnet"),vVr.forEach(t),qro=r(F5e," \u2014 "),KR=n(F5e,"A",{href:!0});var FVr=s(KR);Nro=r(FVr,"ProphetNetTokenizer"),FVr.forEach(t),jro=r(F5e," (ProphetNet model)"),F5e.forEach(t),Dro=i(S),_s=n(S,"LI",{});var O7=s(_s);rte=n(O7,"STRONG",{});var TVr=s(rte);Gro=r(TVr,"qdqbert"),TVr.forEach(t),Oro=r(O7," \u2014 "),ZR=n(O7,"A",{href:!0});var MVr=s(ZR);Vro=r(MVr,"BertTokenizer"),MVr.forEach(t),Xro=r(O7," or "),eB=n(O7,"A",{href:!0});var EVr=s(eB);zro=r(EVr,"BertTokenizerFast"),EVr.forEach(t),Qro=r(O7," (QDQBert model)"),O7.forEach(t),Wro=i(S),Ig=n(S,"LI",{});var T5e=s(Ig);tte=n(T5e,"STRONG",{});var CVr=s(tte);Hro=r(CVr,"rag"),CVr.forEach(t),Uro=r(T5e," \u2014 "),oB=n(T5e,"A",{href:!0});var wVr=s(oB);Jro=r(wVr,"RagTokenizer"),wVr.forEach(t),Yro=r(T5e," (RAG model)"),T5e.forEach(t),Kro=i(S),bs=n(S,"LI",{});var V7=s(bs);ate=n(V7,"STRONG",{});var AVr=s(ate);Zro=r(AVr,"realm"),AVr.forEach(t),eto=r(V7," \u2014 "),rB=n(V7,"A",{href:!0});var yVr=s(rB);oto=r(yVr,"RealmTokenizer"),yVr.forEach(t),rto=r(V7," or "),tB=n(V7,"A",{href:!0});var LVr=s(tB);tto=r(LVr,"RealmTokenizerFast"),LVr.forEach(t),ato=r(V7," (Realm model)"),V7.forEach(t),nto=i(S),vs=n(S,"LI",{});var X7=s(vs);nte=n(X7,"STRONG",{});var xVr=s(nte);sto=r(xVr,"reformer"),xVr.forEach(t),lto=r(X7," \u2014 "),aB=n(X7,"A",{href:!0});var $Vr=s(aB);ito=r($Vr,"ReformerTokenizer"),$Vr.forEach(t),dto=r(X7," or "),nB=n(X7,"A",{href:!0});var kVr=s(nB);cto=r(kVr,"ReformerTokenizerFast"),kVr.forEach(t),fto=r(X7," (Reformer model)"),X7.forEach(t),mto=i(S),Fs=n(S,"LI",{});var z7=s(Fs);ste=n(z7,"STRONG",{});var SVr=s(ste);gto=r(SVr,"rembert"),SVr.forEach(t),hto=r(z7," \u2014 "),sB=n(z7,"A",{href:!0});var RVr=s(sB);pto=r(RVr,"RemBertTokenizer"),RVr.forEach(t),uto=r(z7," or "),lB=n(z7,"A",{href:!0});var BVr=s(lB);_to=r(BVr,"RemBertTokenizerFast"),BVr.forEach(t),bto=r(z7," (RemBERT model)"),z7.forEach(t),vto=i(S),Ts=n(S,"LI",{});var Q7=s(Ts);lte=n(Q7,"STRONG",{});var PVr=s(lte);Fto=r(PVr,"retribert"),PVr.forEach(t),Tto=r(Q7," \u2014 "),iB=n(Q7,"A",{href:!0});var IVr=s(iB);Mto=r(IVr,"RetriBertTokenizer"),IVr.forEach(t),Eto=r(Q7," or "),dB=n(Q7,"A",{href:!0});var qVr=s(dB);Cto=r(qVr,"RetriBertTokenizerFast"),qVr.forEach(t),wto=r(Q7," (RetriBERT model)"),Q7.forEach(t),Ato=i(S),Ms=n(S,"LI",{});var W7=s(Ms);ite=n(W7,"STRONG",{});var NVr=s(ite);yto=r(NVr,"roberta"),NVr.forEach(t),Lto=r(W7," \u2014 "),cB=n(W7,"A",{href:!0});var jVr=s(cB);xto=r(jVr,"RobertaTokenizer"),jVr.forEach(t),$to=r(W7," or "),fB=n(W7,"A",{href:!0});var DVr=s(fB);kto=r(DVr,"RobertaTokenizerFast"),DVr.forEach(t),Sto=r(W7," (RoBERTa model)"),W7.forEach(t),Rto=i(S),Es=n(S,"LI",{});var H7=s(Es);dte=n(H7,"STRONG",{});var GVr=s(dte);Bto=r(GVr,"roformer"),GVr.forEach(t),Pto=r(H7," \u2014 "),mB=n(H7,"A",{href:!0});var OVr=s(mB);Ito=r(OVr,"RoFormerTokenizer"),OVr.forEach(t),qto=r(H7," or "),gB=n(H7,"A",{href:!0});var VVr=s(gB);Nto=r(VVr,"RoFormerTokenizerFast"),VVr.forEach(t),jto=r(H7," (RoFormer model)"),H7.forEach(t),Dto=i(S),qg=n(S,"LI",{});var M5e=s(qg);cte=n(M5e,"STRONG",{});var XVr=s(cte);Gto=r(XVr,"speech_to_text"),XVr.forEach(t),Oto=r(M5e," \u2014 "),hB=n(M5e,"A",{href:!0});var zVr=s(hB);Vto=r(zVr,"Speech2TextTokenizer"),zVr.forEach(t),Xto=r(M5e," (Speech2Text model)"),M5e.forEach(t),zto=i(S),Ng=n(S,"LI",{});var E5e=s(Ng);fte=n(E5e,"STRONG",{});var QVr=s(fte);Qto=r(QVr,"speech_to_text_2"),QVr.forEach(t),Wto=r(E5e," \u2014 "),pB=n(E5e,"A",{href:!0});var WVr=s(pB);Hto=r(WVr,"Speech2Text2Tokenizer"),WVr.forEach(t),Uto=r(E5e," (Speech2Text2 model)"),E5e.forEach(t),Jto=i(S),Cs=n(S,"LI",{});var U7=s(Cs);mte=n(U7,"STRONG",{});var HVr=s(mte);Yto=r(HVr,"splinter"),HVr.forEach(t),Kto=r(U7," \u2014 "),uB=n(U7,"A",{href:!0});var UVr=s(uB);Zto=r(UVr,"SplinterTokenizer"),UVr.forEach(t),eao=r(U7," or "),_B=n(U7,"A",{href:!0});var JVr=s(_B);oao=r(JVr,"SplinterTokenizerFast"),JVr.forEach(t),rao=r(U7," (Splinter model)"),U7.forEach(t),tao=i(S),ws=n(S,"LI",{});var J7=s(ws);gte=n(J7,"STRONG",{});var YVr=s(gte);aao=r(YVr,"squeezebert"),YVr.forEach(t),nao=r(J7," \u2014 "),bB=n(J7,"A",{href:!0});var KVr=s(bB);sao=r(KVr,"SqueezeBertTokenizer"),KVr.forEach(t),lao=r(J7," or "),vB=n(J7,"A",{href:!0});var ZVr=s(vB);iao=r(ZVr,"SqueezeBertTokenizerFast"),ZVr.forEach(t),dao=r(J7," (SqueezeBERT model)"),J7.forEach(t),cao=i(S),As=n(S,"LI",{});var Y7=s(As);hte=n(Y7,"STRONG",{});var eXr=s(hte);fao=r(eXr,"t5"),eXr.forEach(t),mao=r(Y7," \u2014 "),FB=n(Y7,"A",{href:!0});var oXr=s(FB);gao=r(oXr,"T5Tokenizer"),oXr.forEach(t),hao=r(Y7," or "),TB=n(Y7,"A",{href:!0});var rXr=s(TB);pao=r(rXr,"T5TokenizerFast"),rXr.forEach(t),uao=r(Y7," (T5 model)"),Y7.forEach(t),_ao=i(S),jg=n(S,"LI",{});var C5e=s(jg);pte=n(C5e,"STRONG",{});var tXr=s(pte);bao=r(tXr,"tapas"),tXr.forEach(t),vao=r(C5e," \u2014 "),MB=n(C5e,"A",{href:!0});var aXr=s(MB);Fao=r(aXr,"TapasTokenizer"),aXr.forEach(t),Tao=r(C5e," (TAPAS model)"),C5e.forEach(t),Mao=i(S),Dg=n(S,"LI",{});var w5e=s(Dg);ute=n(w5e,"STRONG",{});var nXr=s(ute);Eao=r(nXr,"tapex"),nXr.forEach(t),Cao=r(w5e," \u2014 "),EB=n(w5e,"A",{href:!0});var sXr=s(EB);wao=r(sXr,"TapexTokenizer"),sXr.forEach(t),Aao=r(w5e," (TAPEX model)"),w5e.forEach(t),yao=i(S),Gg=n(S,"LI",{});var A5e=s(Gg);_te=n(A5e,"STRONG",{});var lXr=s(_te);Lao=r(lXr,"transfo-xl"),lXr.forEach(t),xao=r(A5e," \u2014 "),CB=n(A5e,"A",{href:!0});var iXr=s(CB);$ao=r(iXr,"TransfoXLTokenizer"),iXr.forEach(t),kao=r(A5e," (Transformer-XL model)"),A5e.forEach(t),Sao=i(S),ys=n(S,"LI",{});var K7=s(ys);bte=n(K7,"STRONG",{});var dXr=s(bte);Rao=r(dXr,"visual_bert"),dXr.forEach(t),Bao=r(K7," \u2014 "),wB=n(K7,"A",{href:!0});var cXr=s(wB);Pao=r(cXr,"BertTokenizer"),cXr.forEach(t),Iao=r(K7," or "),AB=n(K7,"A",{href:!0});var fXr=s(AB);qao=r(fXr,"BertTokenizerFast"),fXr.forEach(t),Nao=r(K7," (VisualBert model)"),K7.forEach(t),jao=i(S),Og=n(S,"LI",{});var y5e=s(Og);vte=n(y5e,"STRONG",{});var mXr=s(vte);Dao=r(mXr,"wav2vec2"),mXr.forEach(t),Gao=r(y5e," \u2014 "),yB=n(y5e,"A",{href:!0});var gXr=s(yB);Oao=r(gXr,"Wav2Vec2CTCTokenizer"),gXr.forEach(t),Vao=r(y5e," (Wav2Vec2 model)"),y5e.forEach(t),Xao=i(S),Vg=n(S,"LI",{});var L5e=s(Vg);Fte=n(L5e,"STRONG",{});var hXr=s(Fte);zao=r(hXr,"wav2vec2_phoneme"),hXr.forEach(t),Qao=r(L5e," \u2014 "),LB=n(L5e,"A",{href:!0});var pXr=s(LB);Wao=r(pXr,"Wav2Vec2PhonemeCTCTokenizer"),pXr.forEach(t),Hao=r(L5e," (Wav2Vec2Phoneme model)"),L5e.forEach(t),Uao=i(S),Ls=n(S,"LI",{});var Z7=s(Ls);Tte=n(Z7,"STRONG",{});var uXr=s(Tte);Jao=r(uXr,"xglm"),uXr.forEach(t),Yao=r(Z7," \u2014 "),xB=n(Z7,"A",{href:!0});var _Xr=s(xB);Kao=r(_Xr,"XGLMTokenizer"),_Xr.forEach(t),Zao=r(Z7," or "),$B=n(Z7,"A",{href:!0});var bXr=s($B);eno=r(bXr,"XGLMTokenizerFast"),bXr.forEach(t),ono=r(Z7," (XGLM model)"),Z7.forEach(t),rno=i(S),Xg=n(S,"LI",{});var x5e=s(Xg);Mte=n(x5e,"STRONG",{});var vXr=s(Mte);tno=r(vXr,"xlm"),vXr.forEach(t),ano=r(x5e," \u2014 "),kB=n(x5e,"A",{href:!0});var FXr=s(kB);nno=r(FXr,"XLMTokenizer"),FXr.forEach(t),sno=r(x5e," (XLM model)"),x5e.forEach(t),lno=i(S),zg=n(S,"LI",{});var $5e=s(zg);Ete=n($5e,"STRONG",{});var TXr=s(Ete);ino=r(TXr,"xlm-prophetnet"),TXr.forEach(t),dno=r($5e," \u2014 "),SB=n($5e,"A",{href:!0});var MXr=s(SB);cno=r(MXr,"XLMProphetNetTokenizer"),MXr.forEach(t),fno=r($5e," (XLMProphetNet model)"),$5e.forEach(t),mno=i(S),xs=n(S,"LI",{});var e$=s(xs);Cte=n(e$,"STRONG",{});var EXr=s(Cte);gno=r(EXr,"xlm-roberta"),EXr.forEach(t),hno=r(e$," \u2014 "),RB=n(e$,"A",{href:!0});var CXr=s(RB);pno=r(CXr,"XLMRobertaTokenizer"),CXr.forEach(t),uno=r(e$," or "),BB=n(e$,"A",{href:!0});var wXr=s(BB);_no=r(wXr,"XLMRobertaTokenizerFast"),wXr.forEach(t),bno=r(e$," (XLM-RoBERTa model)"),e$.forEach(t),vno=i(S),$s=n(S,"LI",{});var o$=s($s);wte=n(o$,"STRONG",{});var AXr=s(wte);Fno=r(AXr,"xlm-roberta-xl"),AXr.forEach(t),Tno=r(o$," \u2014 "),PB=n(o$,"A",{href:!0});var yXr=s(PB);Mno=r(yXr,"RobertaTokenizer"),yXr.forEach(t),Eno=r(o$," or "),IB=n(o$,"A",{href:!0});var LXr=s(IB);Cno=r(LXr,"RobertaTokenizerFast"),LXr.forEach(t),wno=r(o$," (XLM-RoBERTa-XL model)"),o$.forEach(t),Ano=i(S),ks=n(S,"LI",{});var r$=s(ks);Ate=n(r$,"STRONG",{});var xXr=s(Ate);yno=r(xXr,"xlnet"),xXr.forEach(t),Lno=r(r$," \u2014 "),qB=n(r$,"A",{href:!0});var $Xr=s(qB);xno=r($Xr,"XLNetTokenizer"),$Xr.forEach(t),$no=r(r$," or "),NB=n(r$,"A",{href:!0});var kXr=s(NB);kno=r(kXr,"XLNetTokenizerFast"),kXr.forEach(t),Sno=r(r$," (XLNet model)"),r$.forEach(t),Rno=i(S),Ss=n(S,"LI",{});var t$=s(Ss);yte=n(t$,"STRONG",{});var SXr=s(yte);Bno=r(SXr,"yoso"),SXr.forEach(t),Pno=r(t$," \u2014 "),jB=n(t$,"A",{href:!0});var RXr=s(jB);Ino=r(RXr,"AlbertTokenizer"),RXr.forEach(t),qno=r(t$," or "),DB=n(t$,"A",{href:!0});var BXr=s(DB);Nno=r(BXr,"AlbertTokenizerFast"),BXr.forEach(t),jno=r(t$," (YOSO model)"),t$.forEach(t),S.forEach(t),Dno=i(qs),T(Qg.$$.fragment,qs),qs.forEach(t),Gno=i(Is),Wg=n(Is,"DIV",{class:!0});var vqe=s(Wg);T(tA.$$.fragment,vqe),Ono=i(vqe),Lte=n(vqe,"P",{});var PXr=s(Lte);Vno=r(PXr,"Register a new tokenizer in this mapping."),PXr.forEach(t),vqe.forEach(t),Is.forEach(t),FPe=i(f),vi=n(f,"H2",{class:!0});var Fqe=s(vi);Hg=n(Fqe,"A",{id:!0,class:!0,href:!0});var IXr=s(Hg);xte=n(IXr,"SPAN",{});var qXr=s(xte);T(aA.$$.fragment,qXr),qXr.forEach(t),IXr.forEach(t),Xno=i(Fqe),$te=n(Fqe,"SPAN",{});var NXr=s($te);zno=r(NXr,"AutoFeatureExtractor"),NXr.forEach(t),Fqe.forEach(t),TPe=i(f),Ao=n(f,"DIV",{class:!0});var Ns=s(Ao);T(nA.$$.fragment,Ns),Qno=i(Ns),sA=n(Ns,"P",{});var Tqe=s(sA);Wno=r(Tqe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),GB=n(Tqe,"A",{href:!0});var jXr=s(GB);Hno=r(jXr,"AutoFeatureExtractor.from_pretrained()"),jXr.forEach(t),Uno=r(Tqe," class method."),Tqe.forEach(t),Jno=i(Ns),lA=n(Ns,"P",{});var Mqe=s(lA);Yno=r(Mqe,"This class cannot be instantiated directly using "),kte=n(Mqe,"CODE",{});var DXr=s(kte);Kno=r(DXr,"__init__()"),DXr.forEach(t),Zno=r(Mqe," (throws an error)."),Mqe.forEach(t),eso=i(Ns),Qe=n(Ns,"DIV",{class:!0});var Yt=s(Qe);T(iA.$$.fragment,Yt),oso=i(Yt),Ste=n(Yt,"P",{});var GXr=s(Ste);rso=r(GXr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),GXr.forEach(t),tso=i(Yt),wa=n(Yt,"P",{});var zC=s(wa);aso=r(zC,"The feature extractor class to instantiate is selected based on the "),Rte=n(zC,"CODE",{});var OXr=s(Rte);nso=r(OXr,"model_type"),OXr.forEach(t),sso=r(zC,` property of the config object
(either passed as an argument or loaded from `),Bte=n(zC,"CODE",{});var VXr=s(Bte);lso=r(VXr,"pretrained_model_name_or_path"),VXr.forEach(t),iso=r(zC,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Pte=n(zC,"CODE",{});var XXr=s(Pte);dso=r(XXr,"pretrained_model_name_or_path"),XXr.forEach(t),cso=r(zC,":"),zC.forEach(t),fso=i(Yt),te=n(Yt,"UL",{});var se=s(te);Ug=n(se,"LI",{});var k5e=s(Ug);Ite=n(k5e,"STRONG",{});var zXr=s(Ite);mso=r(zXr,"beit"),zXr.forEach(t),gso=r(k5e," \u2014 "),OB=n(k5e,"A",{href:!0});var QXr=s(OB);hso=r(QXr,"BeitFeatureExtractor"),QXr.forEach(t),pso=r(k5e," (BEiT model)"),k5e.forEach(t),uso=i(se),Jg=n(se,"LI",{});var S5e=s(Jg);qte=n(S5e,"STRONG",{});var WXr=s(qte);_so=r(WXr,"clip"),WXr.forEach(t),bso=r(S5e," \u2014 "),VB=n(S5e,"A",{href:!0});var HXr=s(VB);vso=r(HXr,"CLIPFeatureExtractor"),HXr.forEach(t),Fso=r(S5e," (CLIP model)"),S5e.forEach(t),Tso=i(se),Yg=n(se,"LI",{});var R5e=s(Yg);Nte=n(R5e,"STRONG",{});var UXr=s(Nte);Mso=r(UXr,"convnext"),UXr.forEach(t),Eso=r(R5e," \u2014 "),XB=n(R5e,"A",{href:!0});var JXr=s(XB);Cso=r(JXr,"ConvNextFeatureExtractor"),JXr.forEach(t),wso=r(R5e," (ConvNext model)"),R5e.forEach(t),Aso=i(se),Kg=n(se,"LI",{});var B5e=s(Kg);jte=n(B5e,"STRONG",{});var YXr=s(jte);yso=r(YXr,"data2vec-audio"),YXr.forEach(t),Lso=r(B5e," \u2014 "),zB=n(B5e,"A",{href:!0});var KXr=s(zB);xso=r(KXr,"Wav2Vec2FeatureExtractor"),KXr.forEach(t),$so=r(B5e," (Data2VecAudio model)"),B5e.forEach(t),kso=i(se),Zg=n(se,"LI",{});var P5e=s(Zg);Dte=n(P5e,"STRONG",{});var ZXr=s(Dte);Sso=r(ZXr,"data2vec-vision"),ZXr.forEach(t),Rso=r(P5e," \u2014 "),QB=n(P5e,"A",{href:!0});var ezr=s(QB);Bso=r(ezr,"BeitFeatureExtractor"),ezr.forEach(t),Pso=r(P5e," (Data2VecVision model)"),P5e.forEach(t),Iso=i(se),eh=n(se,"LI",{});var I5e=s(eh);Gte=n(I5e,"STRONG",{});var ozr=s(Gte);qso=r(ozr,"deit"),ozr.forEach(t),Nso=r(I5e," \u2014 "),WB=n(I5e,"A",{href:!0});var rzr=s(WB);jso=r(rzr,"DeiTFeatureExtractor"),rzr.forEach(t),Dso=r(I5e," (DeiT model)"),I5e.forEach(t),Gso=i(se),oh=n(se,"LI",{});var q5e=s(oh);Ote=n(q5e,"STRONG",{});var tzr=s(Ote);Oso=r(tzr,"detr"),tzr.forEach(t),Vso=r(q5e," \u2014 "),HB=n(q5e,"A",{href:!0});var azr=s(HB);Xso=r(azr,"DetrFeatureExtractor"),azr.forEach(t),zso=r(q5e," (DETR model)"),q5e.forEach(t),Qso=i(se),rh=n(se,"LI",{});var N5e=s(rh);Vte=n(N5e,"STRONG",{});var nzr=s(Vte);Wso=r(nzr,"dpt"),nzr.forEach(t),Hso=r(N5e," \u2014 "),UB=n(N5e,"A",{href:!0});var szr=s(UB);Uso=r(szr,"DPTFeatureExtractor"),szr.forEach(t),Jso=r(N5e," (DPT model)"),N5e.forEach(t),Yso=i(se),th=n(se,"LI",{});var j5e=s(th);Xte=n(j5e,"STRONG",{});var lzr=s(Xte);Kso=r(lzr,"glpn"),lzr.forEach(t),Zso=r(j5e," \u2014 "),JB=n(j5e,"A",{href:!0});var izr=s(JB);elo=r(izr,"GLPNFeatureExtractor"),izr.forEach(t),olo=r(j5e," (GLPN model)"),j5e.forEach(t),rlo=i(se),ah=n(se,"LI",{});var D5e=s(ah);zte=n(D5e,"STRONG",{});var dzr=s(zte);tlo=r(dzr,"hubert"),dzr.forEach(t),alo=r(D5e," \u2014 "),YB=n(D5e,"A",{href:!0});var czr=s(YB);nlo=r(czr,"Wav2Vec2FeatureExtractor"),czr.forEach(t),slo=r(D5e," (Hubert model)"),D5e.forEach(t),llo=i(se),nh=n(se,"LI",{});var G5e=s(nh);Qte=n(G5e,"STRONG",{});var fzr=s(Qte);ilo=r(fzr,"layoutlmv2"),fzr.forEach(t),dlo=r(G5e," \u2014 "),KB=n(G5e,"A",{href:!0});var mzr=s(KB);clo=r(mzr,"LayoutLMv2FeatureExtractor"),mzr.forEach(t),flo=r(G5e," (LayoutLMv2 model)"),G5e.forEach(t),mlo=i(se),sh=n(se,"LI",{});var O5e=s(sh);Wte=n(O5e,"STRONG",{});var gzr=s(Wte);glo=r(gzr,"maskformer"),gzr.forEach(t),hlo=r(O5e," \u2014 "),ZB=n(O5e,"A",{href:!0});var hzr=s(ZB);plo=r(hzr,"MaskFormerFeatureExtractor"),hzr.forEach(t),ulo=r(O5e," (MaskFormer model)"),O5e.forEach(t),_lo=i(se),lh=n(se,"LI",{});var V5e=s(lh);Hte=n(V5e,"STRONG",{});var pzr=s(Hte);blo=r(pzr,"perceiver"),pzr.forEach(t),vlo=r(V5e," \u2014 "),eP=n(V5e,"A",{href:!0});var uzr=s(eP);Flo=r(uzr,"PerceiverFeatureExtractor"),uzr.forEach(t),Tlo=r(V5e," (Perceiver model)"),V5e.forEach(t),Mlo=i(se),ih=n(se,"LI",{});var X5e=s(ih);Ute=n(X5e,"STRONG",{});var _zr=s(Ute);Elo=r(_zr,"poolformer"),_zr.forEach(t),Clo=r(X5e," \u2014 "),oP=n(X5e,"A",{href:!0});var bzr=s(oP);wlo=r(bzr,"PoolFormerFeatureExtractor"),bzr.forEach(t),Alo=r(X5e," (PoolFormer model)"),X5e.forEach(t),ylo=i(se),dh=n(se,"LI",{});var z5e=s(dh);Jte=n(z5e,"STRONG",{});var vzr=s(Jte);Llo=r(vzr,"regnet"),vzr.forEach(t),xlo=r(z5e," \u2014 "),rP=n(z5e,"A",{href:!0});var Fzr=s(rP);$lo=r(Fzr,"ConvNextFeatureExtractor"),Fzr.forEach(t),klo=r(z5e," (RegNet model)"),z5e.forEach(t),Slo=i(se),ch=n(se,"LI",{});var Q5e=s(ch);Yte=n(Q5e,"STRONG",{});var Tzr=s(Yte);Rlo=r(Tzr,"resnet"),Tzr.forEach(t),Blo=r(Q5e," \u2014 "),tP=n(Q5e,"A",{href:!0});var Mzr=s(tP);Plo=r(Mzr,"ConvNextFeatureExtractor"),Mzr.forEach(t),Ilo=r(Q5e," (ResNet model)"),Q5e.forEach(t),qlo=i(se),fh=n(se,"LI",{});var W5e=s(fh);Kte=n(W5e,"STRONG",{});var Ezr=s(Kte);Nlo=r(Ezr,"segformer"),Ezr.forEach(t),jlo=r(W5e," \u2014 "),aP=n(W5e,"A",{href:!0});var Czr=s(aP);Dlo=r(Czr,"SegformerFeatureExtractor"),Czr.forEach(t),Glo=r(W5e," (SegFormer model)"),W5e.forEach(t),Olo=i(se),mh=n(se,"LI",{});var H5e=s(mh);Zte=n(H5e,"STRONG",{});var wzr=s(Zte);Vlo=r(wzr,"speech_to_text"),wzr.forEach(t),Xlo=r(H5e," \u2014 "),nP=n(H5e,"A",{href:!0});var Azr=s(nP);zlo=r(Azr,"Speech2TextFeatureExtractor"),Azr.forEach(t),Qlo=r(H5e," (Speech2Text model)"),H5e.forEach(t),Wlo=i(se),gh=n(se,"LI",{});var U5e=s(gh);eae=n(U5e,"STRONG",{});var yzr=s(eae);Hlo=r(yzr,"swin"),yzr.forEach(t),Ulo=r(U5e," \u2014 "),sP=n(U5e,"A",{href:!0});var Lzr=s(sP);Jlo=r(Lzr,"ViTFeatureExtractor"),Lzr.forEach(t),Ylo=r(U5e," (Swin model)"),U5e.forEach(t),Klo=i(se),hh=n(se,"LI",{});var J5e=s(hh);oae=n(J5e,"STRONG",{});var xzr=s(oae);Zlo=r(xzr,"van"),xzr.forEach(t),eio=r(J5e," \u2014 "),lP=n(J5e,"A",{href:!0});var $zr=s(lP);oio=r($zr,"ConvNextFeatureExtractor"),$zr.forEach(t),rio=r(J5e," (VAN model)"),J5e.forEach(t),tio=i(se),ph=n(se,"LI",{});var Y5e=s(ph);rae=n(Y5e,"STRONG",{});var kzr=s(rae);aio=r(kzr,"vit"),kzr.forEach(t),nio=r(Y5e," \u2014 "),iP=n(Y5e,"A",{href:!0});var Szr=s(iP);sio=r(Szr,"ViTFeatureExtractor"),Szr.forEach(t),lio=r(Y5e," (ViT model)"),Y5e.forEach(t),iio=i(se),uh=n(se,"LI",{});var K5e=s(uh);tae=n(K5e,"STRONG",{});var Rzr=s(tae);dio=r(Rzr,"vit_mae"),Rzr.forEach(t),cio=r(K5e," \u2014 "),dP=n(K5e,"A",{href:!0});var Bzr=s(dP);fio=r(Bzr,"ViTFeatureExtractor"),Bzr.forEach(t),mio=r(K5e," (ViTMAE model)"),K5e.forEach(t),gio=i(se),_h=n(se,"LI",{});var Z5e=s(_h);aae=n(Z5e,"STRONG",{});var Pzr=s(aae);hio=r(Pzr,"wav2vec2"),Pzr.forEach(t),pio=r(Z5e," \u2014 "),cP=n(Z5e,"A",{href:!0});var Izr=s(cP);uio=r(Izr,"Wav2Vec2FeatureExtractor"),Izr.forEach(t),_io=r(Z5e," (Wav2Vec2 model)"),Z5e.forEach(t),bio=i(se),bh=n(se,"LI",{});var eCe=s(bh);nae=n(eCe,"STRONG",{});var qzr=s(nae);vio=r(qzr,"yolos"),qzr.forEach(t),Fio=r(eCe," \u2014 "),fP=n(eCe,"A",{href:!0});var Nzr=s(fP);Tio=r(Nzr,"YolosFeatureExtractor"),Nzr.forEach(t),Mio=r(eCe," (YOLOS model)"),eCe.forEach(t),se.forEach(t),Eio=i(Yt),T(vh.$$.fragment,Yt),Cio=i(Yt),T(Fh.$$.fragment,Yt),Yt.forEach(t),wio=i(Ns),Th=n(Ns,"DIV",{class:!0});var Eqe=s(Th);T(dA.$$.fragment,Eqe),Aio=i(Eqe),sae=n(Eqe,"P",{});var jzr=s(sae);yio=r(jzr,"Register a new feature extractor for this class."),jzr.forEach(t),Eqe.forEach(t),Ns.forEach(t),MPe=i(f),Fi=n(f,"H2",{class:!0});var Cqe=s(Fi);Mh=n(Cqe,"A",{id:!0,class:!0,href:!0});var Dzr=s(Mh);lae=n(Dzr,"SPAN",{});var Gzr=s(lae);T(cA.$$.fragment,Gzr),Gzr.forEach(t),Dzr.forEach(t),Lio=i(Cqe),iae=n(Cqe,"SPAN",{});var Ozr=s(iae);xio=r(Ozr,"AutoProcessor"),Ozr.forEach(t),Cqe.forEach(t),EPe=i(f),yo=n(f,"DIV",{class:!0});var js=s(yo);T(fA.$$.fragment,js),$io=i(js),mA=n(js,"P",{});var wqe=s(mA);kio=r(wqe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),mP=n(wqe,"A",{href:!0});var Vzr=s(mP);Sio=r(Vzr,"AutoProcessor.from_pretrained()"),Vzr.forEach(t),Rio=r(wqe," class method."),wqe.forEach(t),Bio=i(js),gA=n(js,"P",{});var Aqe=s(gA);Pio=r(Aqe,"This class cannot be instantiated directly using "),dae=n(Aqe,"CODE",{});var Xzr=s(dae);Iio=r(Xzr,"__init__()"),Xzr.forEach(t),qio=r(Aqe," (throws an error)."),Aqe.forEach(t),Nio=i(js),We=n(js,"DIV",{class:!0});var Kt=s(We);T(hA.$$.fragment,Kt),jio=i(Kt),cae=n(Kt,"P",{});var zzr=s(cae);Dio=r(zzr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),zzr.forEach(t),Gio=i(Kt),Ti=n(Kt,"P",{});var WY=s(Ti);Oio=r(WY,"The processor class to instantiate is selected based on the "),fae=n(WY,"CODE",{});var Qzr=s(fae);Vio=r(Qzr,"model_type"),Qzr.forEach(t),Xio=r(WY,` property of the config object (either
passed as an argument or loaded from `),mae=n(WY,"CODE",{});var Wzr=s(mae);zio=r(Wzr,"pretrained_model_name_or_path"),Wzr.forEach(t),Qio=r(WY," if possible):"),WY.forEach(t),Wio=i(Kt),be=n(Kt,"UL",{});var Fe=s(be);Eh=n(Fe,"LI",{});var oCe=s(Eh);gae=n(oCe,"STRONG",{});var Hzr=s(gae);Hio=r(Hzr,"clip"),Hzr.forEach(t),Uio=r(oCe," \u2014 "),gP=n(oCe,"A",{href:!0});var Uzr=s(gP);Jio=r(Uzr,"CLIPProcessor"),Uzr.forEach(t),Yio=r(oCe," (CLIP model)"),oCe.forEach(t),Kio=i(Fe),Ch=n(Fe,"LI",{});var rCe=s(Ch);hae=n(rCe,"STRONG",{});var Jzr=s(hae);Zio=r(Jzr,"layoutlmv2"),Jzr.forEach(t),edo=r(rCe," \u2014 "),hP=n(rCe,"A",{href:!0});var Yzr=s(hP);odo=r(Yzr,"LayoutLMv2Processor"),Yzr.forEach(t),rdo=r(rCe," (LayoutLMv2 model)"),rCe.forEach(t),tdo=i(Fe),wh=n(Fe,"LI",{});var tCe=s(wh);pae=n(tCe,"STRONG",{});var Kzr=s(pae);ado=r(Kzr,"layoutxlm"),Kzr.forEach(t),ndo=r(tCe," \u2014 "),pP=n(tCe,"A",{href:!0});var Zzr=s(pP);sdo=r(Zzr,"LayoutXLMProcessor"),Zzr.forEach(t),ldo=r(tCe," (LayoutXLM model)"),tCe.forEach(t),ido=i(Fe),Ah=n(Fe,"LI",{});var aCe=s(Ah);uae=n(aCe,"STRONG",{});var eQr=s(uae);ddo=r(eQr,"sew"),eQr.forEach(t),cdo=r(aCe," \u2014 "),uP=n(aCe,"A",{href:!0});var oQr=s(uP);fdo=r(oQr,"Wav2Vec2Processor"),oQr.forEach(t),mdo=r(aCe," (SEW model)"),aCe.forEach(t),gdo=i(Fe),yh=n(Fe,"LI",{});var nCe=s(yh);_ae=n(nCe,"STRONG",{});var rQr=s(_ae);hdo=r(rQr,"sew-d"),rQr.forEach(t),pdo=r(nCe," \u2014 "),_P=n(nCe,"A",{href:!0});var tQr=s(_P);udo=r(tQr,"Wav2Vec2Processor"),tQr.forEach(t),_do=r(nCe," (SEW-D model)"),nCe.forEach(t),bdo=i(Fe),Lh=n(Fe,"LI",{});var sCe=s(Lh);bae=n(sCe,"STRONG",{});var aQr=s(bae);vdo=r(aQr,"speech_to_text"),aQr.forEach(t),Fdo=r(sCe," \u2014 "),bP=n(sCe,"A",{href:!0});var nQr=s(bP);Tdo=r(nQr,"Speech2TextProcessor"),nQr.forEach(t),Mdo=r(sCe," (Speech2Text model)"),sCe.forEach(t),Edo=i(Fe),xh=n(Fe,"LI",{});var lCe=s(xh);vae=n(lCe,"STRONG",{});var sQr=s(vae);Cdo=r(sQr,"speech_to_text_2"),sQr.forEach(t),wdo=r(lCe," \u2014 "),vP=n(lCe,"A",{href:!0});var lQr=s(vP);Ado=r(lQr,"Speech2Text2Processor"),lQr.forEach(t),ydo=r(lCe," (Speech2Text2 model)"),lCe.forEach(t),Ldo=i(Fe),$h=n(Fe,"LI",{});var iCe=s($h);Fae=n(iCe,"STRONG",{});var iQr=s(Fae);xdo=r(iQr,"trocr"),iQr.forEach(t),$do=r(iCe," \u2014 "),FP=n(iCe,"A",{href:!0});var dQr=s(FP);kdo=r(dQr,"TrOCRProcessor"),dQr.forEach(t),Sdo=r(iCe," (TrOCR model)"),iCe.forEach(t),Rdo=i(Fe),kh=n(Fe,"LI",{});var dCe=s(kh);Tae=n(dCe,"STRONG",{});var cQr=s(Tae);Bdo=r(cQr,"unispeech"),cQr.forEach(t),Pdo=r(dCe," \u2014 "),TP=n(dCe,"A",{href:!0});var fQr=s(TP);Ido=r(fQr,"Wav2Vec2Processor"),fQr.forEach(t),qdo=r(dCe," (UniSpeech model)"),dCe.forEach(t),Ndo=i(Fe),Sh=n(Fe,"LI",{});var cCe=s(Sh);Mae=n(cCe,"STRONG",{});var mQr=s(Mae);jdo=r(mQr,"unispeech-sat"),mQr.forEach(t),Ddo=r(cCe," \u2014 "),MP=n(cCe,"A",{href:!0});var gQr=s(MP);Gdo=r(gQr,"Wav2Vec2Processor"),gQr.forEach(t),Odo=r(cCe," (UniSpeechSat model)"),cCe.forEach(t),Vdo=i(Fe),Rh=n(Fe,"LI",{});var fCe=s(Rh);Eae=n(fCe,"STRONG",{});var hQr=s(Eae);Xdo=r(hQr,"vilt"),hQr.forEach(t),zdo=r(fCe," \u2014 "),EP=n(fCe,"A",{href:!0});var pQr=s(EP);Qdo=r(pQr,"ViltProcessor"),pQr.forEach(t),Wdo=r(fCe," (ViLT model)"),fCe.forEach(t),Hdo=i(Fe),Bh=n(Fe,"LI",{});var mCe=s(Bh);Cae=n(mCe,"STRONG",{});var uQr=s(Cae);Udo=r(uQr,"vision-text-dual-encoder"),uQr.forEach(t),Jdo=r(mCe," \u2014 "),CP=n(mCe,"A",{href:!0});var _Qr=s(CP);Ydo=r(_Qr,"VisionTextDualEncoderProcessor"),_Qr.forEach(t),Kdo=r(mCe," (VisionTextDualEncoder model)"),mCe.forEach(t),Zdo=i(Fe),Ph=n(Fe,"LI",{});var gCe=s(Ph);wae=n(gCe,"STRONG",{});var bQr=s(wae);eco=r(bQr,"wav2vec2"),bQr.forEach(t),oco=r(gCe," \u2014 "),wP=n(gCe,"A",{href:!0});var vQr=s(wP);rco=r(vQr,"Wav2Vec2Processor"),vQr.forEach(t),tco=r(gCe," (Wav2Vec2 model)"),gCe.forEach(t),aco=i(Fe),Ih=n(Fe,"LI",{});var hCe=s(Ih);Aae=n(hCe,"STRONG",{});var FQr=s(Aae);nco=r(FQr,"wavlm"),FQr.forEach(t),sco=r(hCe," \u2014 "),AP=n(hCe,"A",{href:!0});var TQr=s(AP);lco=r(TQr,"Wav2Vec2Processor"),TQr.forEach(t),ico=r(hCe," (WavLM model)"),hCe.forEach(t),Fe.forEach(t),dco=i(Kt),T(qh.$$.fragment,Kt),cco=i(Kt),T(Nh.$$.fragment,Kt),Kt.forEach(t),fco=i(js),jh=n(js,"DIV",{class:!0});var yqe=s(jh);T(pA.$$.fragment,yqe),mco=i(yqe),yae=n(yqe,"P",{});var MQr=s(yae);gco=r(MQr,"Register a new processor for this class."),MQr.forEach(t),yqe.forEach(t),js.forEach(t),CPe=i(f),Mi=n(f,"H2",{class:!0});var Lqe=s(Mi);Dh=n(Lqe,"A",{id:!0,class:!0,href:!0});var EQr=s(Dh);Lae=n(EQr,"SPAN",{});var CQr=s(Lae);T(uA.$$.fragment,CQr),CQr.forEach(t),EQr.forEach(t),hco=i(Lqe),xae=n(Lqe,"SPAN",{});var wQr=s(xae);pco=r(wQr,"AutoModel"),wQr.forEach(t),Lqe.forEach(t),wPe=i(f),Lo=n(f,"DIV",{class:!0});var Ds=s(Lo);T(_A.$$.fragment,Ds),uco=i(Ds),Ei=n(Ds,"P",{});var HY=s(Ei);_co=r(HY,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),yP=n(HY,"A",{href:!0});var AQr=s(yP);bco=r(AQr,"from_pretrained()"),AQr.forEach(t),vco=r(HY," class method or the "),LP=n(HY,"A",{href:!0});var yQr=s(LP);Fco=r(yQr,"from_config()"),yQr.forEach(t),Tco=r(HY,` class
method.`),HY.forEach(t),Mco=i(Ds),bA=n(Ds,"P",{});var xqe=s(bA);Eco=r(xqe,"This class cannot be instantiated directly using "),$ae=n(xqe,"CODE",{});var LQr=s($ae);Cco=r(LQr,"__init__()"),LQr.forEach(t),wco=r(xqe," (throws an error)."),xqe.forEach(t),Aco=i(Ds),ot=n(Ds,"DIV",{class:!0});var QC=s(ot);T(vA.$$.fragment,QC),yco=i(QC),kae=n(QC,"P",{});var xQr=s(kae);Lco=r(xQr,"Instantiates one of the base model classes of the library from a configuration."),xQr.forEach(t),xco=i(QC),Ci=n(QC,"P",{});var UY=s(Ci);$co=r(UY,`Note:
Loading a model from its configuration file does `),Sae=n(UY,"STRONG",{});var $Qr=s(Sae);kco=r($Qr,"not"),$Qr.forEach(t),Sco=r(UY,` load the model weights. It only affects the
model\u2019s configuration. Use `),xP=n(UY,"A",{href:!0});var kQr=s(xP);Rco=r(kQr,"from_pretrained()"),kQr.forEach(t),Bco=r(UY," to load the model weights."),UY.forEach(t),Pco=i(QC),T(Gh.$$.fragment,QC),QC.forEach(t),Ico=i(Ds),He=n(Ds,"DIV",{class:!0});var Zt=s(He);T(FA.$$.fragment,Zt),qco=i(Zt),Rae=n(Zt,"P",{});var SQr=s(Rae);Nco=r(SQr,"Instantiate one of the base model classes of the library from a pretrained model."),SQr.forEach(t),jco=i(Zt),Aa=n(Zt,"P",{});var WC=s(Aa);Dco=r(WC,"The model class to instantiate is selected based on the "),Bae=n(WC,"CODE",{});var RQr=s(Bae);Gco=r(RQr,"model_type"),RQr.forEach(t),Oco=r(WC,` property of the config object (either
passed as an argument or loaded from `),Pae=n(WC,"CODE",{});var BQr=s(Pae);Vco=r(BQr,"pretrained_model_name_or_path"),BQr.forEach(t),Xco=r(WC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iae=n(WC,"CODE",{});var PQr=s(Iae);zco=r(PQr,"pretrained_model_name_or_path"),PQr.forEach(t),Qco=r(WC,":"),WC.forEach(t),Wco=i(Zt),x=n(Zt,"UL",{});var $=s(x);Oh=n($,"LI",{});var pCe=s(Oh);qae=n(pCe,"STRONG",{});var IQr=s(qae);Hco=r(IQr,"albert"),IQr.forEach(t),Uco=r(pCe," \u2014 "),$P=n(pCe,"A",{href:!0});var qQr=s($P);Jco=r(qQr,"AlbertModel"),qQr.forEach(t),Yco=r(pCe," (ALBERT model)"),pCe.forEach(t),Kco=i($),Vh=n($,"LI",{});var uCe=s(Vh);Nae=n(uCe,"STRONG",{});var NQr=s(Nae);Zco=r(NQr,"bart"),NQr.forEach(t),efo=r(uCe," \u2014 "),kP=n(uCe,"A",{href:!0});var jQr=s(kP);ofo=r(jQr,"BartModel"),jQr.forEach(t),rfo=r(uCe," (BART model)"),uCe.forEach(t),tfo=i($),Xh=n($,"LI",{});var _Ce=s(Xh);jae=n(_Ce,"STRONG",{});var DQr=s(jae);afo=r(DQr,"beit"),DQr.forEach(t),nfo=r(_Ce," \u2014 "),SP=n(_Ce,"A",{href:!0});var GQr=s(SP);sfo=r(GQr,"BeitModel"),GQr.forEach(t),lfo=r(_Ce," (BEiT model)"),_Ce.forEach(t),ifo=i($),zh=n($,"LI",{});var bCe=s(zh);Dae=n(bCe,"STRONG",{});var OQr=s(Dae);dfo=r(OQr,"bert"),OQr.forEach(t),cfo=r(bCe," \u2014 "),RP=n(bCe,"A",{href:!0});var VQr=s(RP);ffo=r(VQr,"BertModel"),VQr.forEach(t),mfo=r(bCe," (BERT model)"),bCe.forEach(t),gfo=i($),Qh=n($,"LI",{});var vCe=s(Qh);Gae=n(vCe,"STRONG",{});var XQr=s(Gae);hfo=r(XQr,"bert-generation"),XQr.forEach(t),pfo=r(vCe," \u2014 "),BP=n(vCe,"A",{href:!0});var zQr=s(BP);ufo=r(zQr,"BertGenerationEncoder"),zQr.forEach(t),_fo=r(vCe," (Bert Generation model)"),vCe.forEach(t),bfo=i($),Wh=n($,"LI",{});var FCe=s(Wh);Oae=n(FCe,"STRONG",{});var QQr=s(Oae);vfo=r(QQr,"big_bird"),QQr.forEach(t),Ffo=r(FCe," \u2014 "),PP=n(FCe,"A",{href:!0});var WQr=s(PP);Tfo=r(WQr,"BigBirdModel"),WQr.forEach(t),Mfo=r(FCe," (BigBird model)"),FCe.forEach(t),Efo=i($),Hh=n($,"LI",{});var TCe=s(Hh);Vae=n(TCe,"STRONG",{});var HQr=s(Vae);Cfo=r(HQr,"bigbird_pegasus"),HQr.forEach(t),wfo=r(TCe," \u2014 "),IP=n(TCe,"A",{href:!0});var UQr=s(IP);Afo=r(UQr,"BigBirdPegasusModel"),UQr.forEach(t),yfo=r(TCe," (BigBirdPegasus model)"),TCe.forEach(t),Lfo=i($),Uh=n($,"LI",{});var MCe=s(Uh);Xae=n(MCe,"STRONG",{});var JQr=s(Xae);xfo=r(JQr,"blenderbot"),JQr.forEach(t),$fo=r(MCe," \u2014 "),qP=n(MCe,"A",{href:!0});var YQr=s(qP);kfo=r(YQr,"BlenderbotModel"),YQr.forEach(t),Sfo=r(MCe," (Blenderbot model)"),MCe.forEach(t),Rfo=i($),Jh=n($,"LI",{});var ECe=s(Jh);zae=n(ECe,"STRONG",{});var KQr=s(zae);Bfo=r(KQr,"blenderbot-small"),KQr.forEach(t),Pfo=r(ECe," \u2014 "),NP=n(ECe,"A",{href:!0});var ZQr=s(NP);Ifo=r(ZQr,"BlenderbotSmallModel"),ZQr.forEach(t),qfo=r(ECe," (BlenderbotSmall model)"),ECe.forEach(t),Nfo=i($),Yh=n($,"LI",{});var CCe=s(Yh);Qae=n(CCe,"STRONG",{});var eWr=s(Qae);jfo=r(eWr,"camembert"),eWr.forEach(t),Dfo=r(CCe," \u2014 "),jP=n(CCe,"A",{href:!0});var oWr=s(jP);Gfo=r(oWr,"CamembertModel"),oWr.forEach(t),Ofo=r(CCe," (CamemBERT model)"),CCe.forEach(t),Vfo=i($),Kh=n($,"LI",{});var wCe=s(Kh);Wae=n(wCe,"STRONG",{});var rWr=s(Wae);Xfo=r(rWr,"canine"),rWr.forEach(t),zfo=r(wCe," \u2014 "),DP=n(wCe,"A",{href:!0});var tWr=s(DP);Qfo=r(tWr,"CanineModel"),tWr.forEach(t),Wfo=r(wCe," (Canine model)"),wCe.forEach(t),Hfo=i($),Zh=n($,"LI",{});var ACe=s(Zh);Hae=n(ACe,"STRONG",{});var aWr=s(Hae);Ufo=r(aWr,"clip"),aWr.forEach(t),Jfo=r(ACe," \u2014 "),GP=n(ACe,"A",{href:!0});var nWr=s(GP);Yfo=r(nWr,"CLIPModel"),nWr.forEach(t),Kfo=r(ACe," (CLIP model)"),ACe.forEach(t),Zfo=i($),ep=n($,"LI",{});var yCe=s(ep);Uae=n(yCe,"STRONG",{});var sWr=s(Uae);emo=r(sWr,"convbert"),sWr.forEach(t),omo=r(yCe," \u2014 "),OP=n(yCe,"A",{href:!0});var lWr=s(OP);rmo=r(lWr,"ConvBertModel"),lWr.forEach(t),tmo=r(yCe," (ConvBERT model)"),yCe.forEach(t),amo=i($),op=n($,"LI",{});var LCe=s(op);Jae=n(LCe,"STRONG",{});var iWr=s(Jae);nmo=r(iWr,"convnext"),iWr.forEach(t),smo=r(LCe," \u2014 "),VP=n(LCe,"A",{href:!0});var dWr=s(VP);lmo=r(dWr,"ConvNextModel"),dWr.forEach(t),imo=r(LCe," (ConvNext model)"),LCe.forEach(t),dmo=i($),rp=n($,"LI",{});var xCe=s(rp);Yae=n(xCe,"STRONG",{});var cWr=s(Yae);cmo=r(cWr,"ctrl"),cWr.forEach(t),fmo=r(xCe," \u2014 "),XP=n(xCe,"A",{href:!0});var fWr=s(XP);mmo=r(fWr,"CTRLModel"),fWr.forEach(t),gmo=r(xCe," (CTRL model)"),xCe.forEach(t),hmo=i($),tp=n($,"LI",{});var $Ce=s(tp);Kae=n($Ce,"STRONG",{});var mWr=s(Kae);pmo=r(mWr,"data2vec-audio"),mWr.forEach(t),umo=r($Ce," \u2014 "),zP=n($Ce,"A",{href:!0});var gWr=s(zP);_mo=r(gWr,"Data2VecAudioModel"),gWr.forEach(t),bmo=r($Ce," (Data2VecAudio model)"),$Ce.forEach(t),vmo=i($),ap=n($,"LI",{});var kCe=s(ap);Zae=n(kCe,"STRONG",{});var hWr=s(Zae);Fmo=r(hWr,"data2vec-text"),hWr.forEach(t),Tmo=r(kCe," \u2014 "),QP=n(kCe,"A",{href:!0});var pWr=s(QP);Mmo=r(pWr,"Data2VecTextModel"),pWr.forEach(t),Emo=r(kCe," (Data2VecText model)"),kCe.forEach(t),Cmo=i($),np=n($,"LI",{});var SCe=s(np);ene=n(SCe,"STRONG",{});var uWr=s(ene);wmo=r(uWr,"data2vec-vision"),uWr.forEach(t),Amo=r(SCe," \u2014 "),WP=n(SCe,"A",{href:!0});var _Wr=s(WP);ymo=r(_Wr,"Data2VecVisionModel"),_Wr.forEach(t),Lmo=r(SCe," (Data2VecVision model)"),SCe.forEach(t),xmo=i($),sp=n($,"LI",{});var RCe=s(sp);one=n(RCe,"STRONG",{});var bWr=s(one);$mo=r(bWr,"deberta"),bWr.forEach(t),kmo=r(RCe," \u2014 "),HP=n(RCe,"A",{href:!0});var vWr=s(HP);Smo=r(vWr,"DebertaModel"),vWr.forEach(t),Rmo=r(RCe," (DeBERTa model)"),RCe.forEach(t),Bmo=i($),lp=n($,"LI",{});var BCe=s(lp);rne=n(BCe,"STRONG",{});var FWr=s(rne);Pmo=r(FWr,"deberta-v2"),FWr.forEach(t),Imo=r(BCe," \u2014 "),UP=n(BCe,"A",{href:!0});var TWr=s(UP);qmo=r(TWr,"DebertaV2Model"),TWr.forEach(t),Nmo=r(BCe," (DeBERTa-v2 model)"),BCe.forEach(t),jmo=i($),ip=n($,"LI",{});var PCe=s(ip);tne=n(PCe,"STRONG",{});var MWr=s(tne);Dmo=r(MWr,"decision_transformer"),MWr.forEach(t),Gmo=r(PCe," \u2014 "),JP=n(PCe,"A",{href:!0});var EWr=s(JP);Omo=r(EWr,"DecisionTransformerModel"),EWr.forEach(t),Vmo=r(PCe," (Decision Transformer model)"),PCe.forEach(t),Xmo=i($),dp=n($,"LI",{});var ICe=s(dp);ane=n(ICe,"STRONG",{});var CWr=s(ane);zmo=r(CWr,"deit"),CWr.forEach(t),Qmo=r(ICe," \u2014 "),YP=n(ICe,"A",{href:!0});var wWr=s(YP);Wmo=r(wWr,"DeiTModel"),wWr.forEach(t),Hmo=r(ICe," (DeiT model)"),ICe.forEach(t),Umo=i($),cp=n($,"LI",{});var qCe=s(cp);nne=n(qCe,"STRONG",{});var AWr=s(nne);Jmo=r(AWr,"detr"),AWr.forEach(t),Ymo=r(qCe," \u2014 "),KP=n(qCe,"A",{href:!0});var yWr=s(KP);Kmo=r(yWr,"DetrModel"),yWr.forEach(t),Zmo=r(qCe," (DETR model)"),qCe.forEach(t),ego=i($),fp=n($,"LI",{});var NCe=s(fp);sne=n(NCe,"STRONG",{});var LWr=s(sne);ogo=r(LWr,"distilbert"),LWr.forEach(t),rgo=r(NCe," \u2014 "),ZP=n(NCe,"A",{href:!0});var xWr=s(ZP);tgo=r(xWr,"DistilBertModel"),xWr.forEach(t),ago=r(NCe," (DistilBERT model)"),NCe.forEach(t),ngo=i($),mp=n($,"LI",{});var jCe=s(mp);lne=n(jCe,"STRONG",{});var $Wr=s(lne);sgo=r($Wr,"dpr"),$Wr.forEach(t),lgo=r(jCe," \u2014 "),eI=n(jCe,"A",{href:!0});var kWr=s(eI);igo=r(kWr,"DPRQuestionEncoder"),kWr.forEach(t),dgo=r(jCe," (DPR model)"),jCe.forEach(t),cgo=i($),gp=n($,"LI",{});var DCe=s(gp);ine=n(DCe,"STRONG",{});var SWr=s(ine);fgo=r(SWr,"dpt"),SWr.forEach(t),mgo=r(DCe," \u2014 "),oI=n(DCe,"A",{href:!0});var RWr=s(oI);ggo=r(RWr,"DPTModel"),RWr.forEach(t),hgo=r(DCe," (DPT model)"),DCe.forEach(t),pgo=i($),hp=n($,"LI",{});var GCe=s(hp);dne=n(GCe,"STRONG",{});var BWr=s(dne);ugo=r(BWr,"electra"),BWr.forEach(t),_go=r(GCe," \u2014 "),rI=n(GCe,"A",{href:!0});var PWr=s(rI);bgo=r(PWr,"ElectraModel"),PWr.forEach(t),vgo=r(GCe," (ELECTRA model)"),GCe.forEach(t),Fgo=i($),pp=n($,"LI",{});var OCe=s(pp);cne=n(OCe,"STRONG",{});var IWr=s(cne);Tgo=r(IWr,"flaubert"),IWr.forEach(t),Mgo=r(OCe," \u2014 "),tI=n(OCe,"A",{href:!0});var qWr=s(tI);Ego=r(qWr,"FlaubertModel"),qWr.forEach(t),Cgo=r(OCe," (FlauBERT model)"),OCe.forEach(t),wgo=i($),up=n($,"LI",{});var VCe=s(up);fne=n(VCe,"STRONG",{});var NWr=s(fne);Ago=r(NWr,"fnet"),NWr.forEach(t),ygo=r(VCe," \u2014 "),aI=n(VCe,"A",{href:!0});var jWr=s(aI);Lgo=r(jWr,"FNetModel"),jWr.forEach(t),xgo=r(VCe," (FNet model)"),VCe.forEach(t),$go=i($),_p=n($,"LI",{});var XCe=s(_p);mne=n(XCe,"STRONG",{});var DWr=s(mne);kgo=r(DWr,"fsmt"),DWr.forEach(t),Sgo=r(XCe," \u2014 "),nI=n(XCe,"A",{href:!0});var GWr=s(nI);Rgo=r(GWr,"FSMTModel"),GWr.forEach(t),Bgo=r(XCe," (FairSeq Machine-Translation model)"),XCe.forEach(t),Pgo=i($),Rs=n($,"LI",{});var a$=s(Rs);gne=n(a$,"STRONG",{});var OWr=s(gne);Igo=r(OWr,"funnel"),OWr.forEach(t),qgo=r(a$," \u2014 "),sI=n(a$,"A",{href:!0});var VWr=s(sI);Ngo=r(VWr,"FunnelModel"),VWr.forEach(t),jgo=r(a$," or "),lI=n(a$,"A",{href:!0});var XWr=s(lI);Dgo=r(XWr,"FunnelBaseModel"),XWr.forEach(t),Ggo=r(a$," (Funnel Transformer model)"),a$.forEach(t),Ogo=i($),bp=n($,"LI",{});var zCe=s(bp);hne=n(zCe,"STRONG",{});var zWr=s(hne);Vgo=r(zWr,"glpn"),zWr.forEach(t),Xgo=r(zCe," \u2014 "),iI=n(zCe,"A",{href:!0});var QWr=s(iI);zgo=r(QWr,"GLPNModel"),QWr.forEach(t),Qgo=r(zCe," (GLPN model)"),zCe.forEach(t),Wgo=i($),vp=n($,"LI",{});var QCe=s(vp);pne=n(QCe,"STRONG",{});var WWr=s(pne);Hgo=r(WWr,"gpt2"),WWr.forEach(t),Ugo=r(QCe," \u2014 "),dI=n(QCe,"A",{href:!0});var HWr=s(dI);Jgo=r(HWr,"GPT2Model"),HWr.forEach(t),Ygo=r(QCe," (OpenAI GPT-2 model)"),QCe.forEach(t),Kgo=i($),Fp=n($,"LI",{});var WCe=s(Fp);une=n(WCe,"STRONG",{});var UWr=s(une);Zgo=r(UWr,"gpt_neo"),UWr.forEach(t),eho=r(WCe," \u2014 "),cI=n(WCe,"A",{href:!0});var JWr=s(cI);oho=r(JWr,"GPTNeoModel"),JWr.forEach(t),rho=r(WCe," (GPT Neo model)"),WCe.forEach(t),tho=i($),Tp=n($,"LI",{});var HCe=s(Tp);_ne=n(HCe,"STRONG",{});var YWr=s(_ne);aho=r(YWr,"gptj"),YWr.forEach(t),nho=r(HCe," \u2014 "),fI=n(HCe,"A",{href:!0});var KWr=s(fI);sho=r(KWr,"GPTJModel"),KWr.forEach(t),lho=r(HCe," (GPT-J model)"),HCe.forEach(t),iho=i($),Mp=n($,"LI",{});var UCe=s(Mp);bne=n(UCe,"STRONG",{});var ZWr=s(bne);dho=r(ZWr,"hubert"),ZWr.forEach(t),cho=r(UCe," \u2014 "),mI=n(UCe,"A",{href:!0});var eHr=s(mI);fho=r(eHr,"HubertModel"),eHr.forEach(t),mho=r(UCe," (Hubert model)"),UCe.forEach(t),gho=i($),Ep=n($,"LI",{});var JCe=s(Ep);vne=n(JCe,"STRONG",{});var oHr=s(vne);hho=r(oHr,"ibert"),oHr.forEach(t),pho=r(JCe," \u2014 "),gI=n(JCe,"A",{href:!0});var rHr=s(gI);uho=r(rHr,"IBertModel"),rHr.forEach(t),_ho=r(JCe," (I-BERT model)"),JCe.forEach(t),bho=i($),Cp=n($,"LI",{});var YCe=s(Cp);Fne=n(YCe,"STRONG",{});var tHr=s(Fne);vho=r(tHr,"imagegpt"),tHr.forEach(t),Fho=r(YCe," \u2014 "),hI=n(YCe,"A",{href:!0});var aHr=s(hI);Tho=r(aHr,"ImageGPTModel"),aHr.forEach(t),Mho=r(YCe," (ImageGPT model)"),YCe.forEach(t),Eho=i($),wp=n($,"LI",{});var KCe=s(wp);Tne=n(KCe,"STRONG",{});var nHr=s(Tne);Cho=r(nHr,"layoutlm"),nHr.forEach(t),who=r(KCe," \u2014 "),pI=n(KCe,"A",{href:!0});var sHr=s(pI);Aho=r(sHr,"LayoutLMModel"),sHr.forEach(t),yho=r(KCe," (LayoutLM model)"),KCe.forEach(t),Lho=i($),Ap=n($,"LI",{});var ZCe=s(Ap);Mne=n(ZCe,"STRONG",{});var lHr=s(Mne);xho=r(lHr,"layoutlmv2"),lHr.forEach(t),$ho=r(ZCe," \u2014 "),uI=n(ZCe,"A",{href:!0});var iHr=s(uI);kho=r(iHr,"LayoutLMv2Model"),iHr.forEach(t),Sho=r(ZCe," (LayoutLMv2 model)"),ZCe.forEach(t),Rho=i($),yp=n($,"LI",{});var e3e=s(yp);Ene=n(e3e,"STRONG",{});var dHr=s(Ene);Bho=r(dHr,"led"),dHr.forEach(t),Pho=r(e3e," \u2014 "),_I=n(e3e,"A",{href:!0});var cHr=s(_I);Iho=r(cHr,"LEDModel"),cHr.forEach(t),qho=r(e3e," (LED model)"),e3e.forEach(t),Nho=i($),Lp=n($,"LI",{});var o3e=s(Lp);Cne=n(o3e,"STRONG",{});var fHr=s(Cne);jho=r(fHr,"longformer"),fHr.forEach(t),Dho=r(o3e," \u2014 "),bI=n(o3e,"A",{href:!0});var mHr=s(bI);Gho=r(mHr,"LongformerModel"),mHr.forEach(t),Oho=r(o3e," (Longformer model)"),o3e.forEach(t),Vho=i($),xp=n($,"LI",{});var r3e=s(xp);wne=n(r3e,"STRONG",{});var gHr=s(wne);Xho=r(gHr,"luke"),gHr.forEach(t),zho=r(r3e," \u2014 "),vI=n(r3e,"A",{href:!0});var hHr=s(vI);Qho=r(hHr,"LukeModel"),hHr.forEach(t),Who=r(r3e," (LUKE model)"),r3e.forEach(t),Hho=i($),$p=n($,"LI",{});var t3e=s($p);Ane=n(t3e,"STRONG",{});var pHr=s(Ane);Uho=r(pHr,"lxmert"),pHr.forEach(t),Jho=r(t3e," \u2014 "),FI=n(t3e,"A",{href:!0});var uHr=s(FI);Yho=r(uHr,"LxmertModel"),uHr.forEach(t),Kho=r(t3e," (LXMERT model)"),t3e.forEach(t),Zho=i($),kp=n($,"LI",{});var a3e=s(kp);yne=n(a3e,"STRONG",{});var _Hr=s(yne);epo=r(_Hr,"m2m_100"),_Hr.forEach(t),opo=r(a3e," \u2014 "),TI=n(a3e,"A",{href:!0});var bHr=s(TI);rpo=r(bHr,"M2M100Model"),bHr.forEach(t),tpo=r(a3e," (M2M100 model)"),a3e.forEach(t),apo=i($),Sp=n($,"LI",{});var n3e=s(Sp);Lne=n(n3e,"STRONG",{});var vHr=s(Lne);npo=r(vHr,"marian"),vHr.forEach(t),spo=r(n3e," \u2014 "),MI=n(n3e,"A",{href:!0});var FHr=s(MI);lpo=r(FHr,"MarianModel"),FHr.forEach(t),ipo=r(n3e," (Marian model)"),n3e.forEach(t),dpo=i($),Rp=n($,"LI",{});var s3e=s(Rp);xne=n(s3e,"STRONG",{});var THr=s(xne);cpo=r(THr,"maskformer"),THr.forEach(t),fpo=r(s3e," \u2014 "),EI=n(s3e,"A",{href:!0});var MHr=s(EI);mpo=r(MHr,"MaskFormerModel"),MHr.forEach(t),gpo=r(s3e," (MaskFormer model)"),s3e.forEach(t),hpo=i($),Bp=n($,"LI",{});var l3e=s(Bp);$ne=n(l3e,"STRONG",{});var EHr=s($ne);ppo=r(EHr,"mbart"),EHr.forEach(t),upo=r(l3e," \u2014 "),CI=n(l3e,"A",{href:!0});var CHr=s(CI);_po=r(CHr,"MBartModel"),CHr.forEach(t),bpo=r(l3e," (mBART model)"),l3e.forEach(t),vpo=i($),Pp=n($,"LI",{});var i3e=s(Pp);kne=n(i3e,"STRONG",{});var wHr=s(kne);Fpo=r(wHr,"megatron-bert"),wHr.forEach(t),Tpo=r(i3e," \u2014 "),wI=n(i3e,"A",{href:!0});var AHr=s(wI);Mpo=r(AHr,"MegatronBertModel"),AHr.forEach(t),Epo=r(i3e," (MegatronBert model)"),i3e.forEach(t),Cpo=i($),Ip=n($,"LI",{});var d3e=s(Ip);Sne=n(d3e,"STRONG",{});var yHr=s(Sne);wpo=r(yHr,"mobilebert"),yHr.forEach(t),Apo=r(d3e," \u2014 "),AI=n(d3e,"A",{href:!0});var LHr=s(AI);ypo=r(LHr,"MobileBertModel"),LHr.forEach(t),Lpo=r(d3e," (MobileBERT model)"),d3e.forEach(t),xpo=i($),qp=n($,"LI",{});var c3e=s(qp);Rne=n(c3e,"STRONG",{});var xHr=s(Rne);$po=r(xHr,"mpnet"),xHr.forEach(t),kpo=r(c3e," \u2014 "),yI=n(c3e,"A",{href:!0});var $Hr=s(yI);Spo=r($Hr,"MPNetModel"),$Hr.forEach(t),Rpo=r(c3e," (MPNet model)"),c3e.forEach(t),Bpo=i($),Np=n($,"LI",{});var f3e=s(Np);Bne=n(f3e,"STRONG",{});var kHr=s(Bne);Ppo=r(kHr,"mt5"),kHr.forEach(t),Ipo=r(f3e," \u2014 "),LI=n(f3e,"A",{href:!0});var SHr=s(LI);qpo=r(SHr,"MT5Model"),SHr.forEach(t),Npo=r(f3e," (mT5 model)"),f3e.forEach(t),jpo=i($),jp=n($,"LI",{});var m3e=s(jp);Pne=n(m3e,"STRONG",{});var RHr=s(Pne);Dpo=r(RHr,"nystromformer"),RHr.forEach(t),Gpo=r(m3e," \u2014 "),xI=n(m3e,"A",{href:!0});var BHr=s(xI);Opo=r(BHr,"NystromformerModel"),BHr.forEach(t),Vpo=r(m3e," (Nystromformer model)"),m3e.forEach(t),Xpo=i($),Dp=n($,"LI",{});var g3e=s(Dp);Ine=n(g3e,"STRONG",{});var PHr=s(Ine);zpo=r(PHr,"openai-gpt"),PHr.forEach(t),Qpo=r(g3e," \u2014 "),$I=n(g3e,"A",{href:!0});var IHr=s($I);Wpo=r(IHr,"OpenAIGPTModel"),IHr.forEach(t),Hpo=r(g3e," (OpenAI GPT model)"),g3e.forEach(t),Upo=i($),Gp=n($,"LI",{});var h3e=s(Gp);qne=n(h3e,"STRONG",{});var qHr=s(qne);Jpo=r(qHr,"pegasus"),qHr.forEach(t),Ypo=r(h3e," \u2014 "),kI=n(h3e,"A",{href:!0});var NHr=s(kI);Kpo=r(NHr,"PegasusModel"),NHr.forEach(t),Zpo=r(h3e," (Pegasus model)"),h3e.forEach(t),euo=i($),Op=n($,"LI",{});var p3e=s(Op);Nne=n(p3e,"STRONG",{});var jHr=s(Nne);ouo=r(jHr,"perceiver"),jHr.forEach(t),ruo=r(p3e," \u2014 "),SI=n(p3e,"A",{href:!0});var DHr=s(SI);tuo=r(DHr,"PerceiverModel"),DHr.forEach(t),auo=r(p3e," (Perceiver model)"),p3e.forEach(t),nuo=i($),Vp=n($,"LI",{});var u3e=s(Vp);jne=n(u3e,"STRONG",{});var GHr=s(jne);suo=r(GHr,"plbart"),GHr.forEach(t),luo=r(u3e," \u2014 "),RI=n(u3e,"A",{href:!0});var OHr=s(RI);iuo=r(OHr,"PLBartModel"),OHr.forEach(t),duo=r(u3e," (PLBart model)"),u3e.forEach(t),cuo=i($),Xp=n($,"LI",{});var _3e=s(Xp);Dne=n(_3e,"STRONG",{});var VHr=s(Dne);fuo=r(VHr,"poolformer"),VHr.forEach(t),muo=r(_3e," \u2014 "),BI=n(_3e,"A",{href:!0});var XHr=s(BI);guo=r(XHr,"PoolFormerModel"),XHr.forEach(t),huo=r(_3e," (PoolFormer model)"),_3e.forEach(t),puo=i($),zp=n($,"LI",{});var b3e=s(zp);Gne=n(b3e,"STRONG",{});var zHr=s(Gne);uuo=r(zHr,"prophetnet"),zHr.forEach(t),_uo=r(b3e," \u2014 "),PI=n(b3e,"A",{href:!0});var QHr=s(PI);buo=r(QHr,"ProphetNetModel"),QHr.forEach(t),vuo=r(b3e," (ProphetNet model)"),b3e.forEach(t),Fuo=i($),Qp=n($,"LI",{});var v3e=s(Qp);One=n(v3e,"STRONG",{});var WHr=s(One);Tuo=r(WHr,"qdqbert"),WHr.forEach(t),Muo=r(v3e," \u2014 "),II=n(v3e,"A",{href:!0});var HHr=s(II);Euo=r(HHr,"QDQBertModel"),HHr.forEach(t),Cuo=r(v3e," (QDQBert model)"),v3e.forEach(t),wuo=i($),Wp=n($,"LI",{});var F3e=s(Wp);Vne=n(F3e,"STRONG",{});var UHr=s(Vne);Auo=r(UHr,"reformer"),UHr.forEach(t),yuo=r(F3e," \u2014 "),qI=n(F3e,"A",{href:!0});var JHr=s(qI);Luo=r(JHr,"ReformerModel"),JHr.forEach(t),xuo=r(F3e," (Reformer model)"),F3e.forEach(t),$uo=i($),Hp=n($,"LI",{});var T3e=s(Hp);Xne=n(T3e,"STRONG",{});var YHr=s(Xne);kuo=r(YHr,"regnet"),YHr.forEach(t),Suo=r(T3e," \u2014 "),NI=n(T3e,"A",{href:!0});var KHr=s(NI);Ruo=r(KHr,"RegNetModel"),KHr.forEach(t),Buo=r(T3e," (RegNet model)"),T3e.forEach(t),Puo=i($),Up=n($,"LI",{});var M3e=s(Up);zne=n(M3e,"STRONG",{});var ZHr=s(zne);Iuo=r(ZHr,"rembert"),ZHr.forEach(t),quo=r(M3e," \u2014 "),jI=n(M3e,"A",{href:!0});var eUr=s(jI);Nuo=r(eUr,"RemBertModel"),eUr.forEach(t),juo=r(M3e," (RemBERT model)"),M3e.forEach(t),Duo=i($),Jp=n($,"LI",{});var E3e=s(Jp);Qne=n(E3e,"STRONG",{});var oUr=s(Qne);Guo=r(oUr,"resnet"),oUr.forEach(t),Ouo=r(E3e," \u2014 "),DI=n(E3e,"A",{href:!0});var rUr=s(DI);Vuo=r(rUr,"ResNetModel"),rUr.forEach(t),Xuo=r(E3e," (ResNet model)"),E3e.forEach(t),zuo=i($),Yp=n($,"LI",{});var C3e=s(Yp);Wne=n(C3e,"STRONG",{});var tUr=s(Wne);Quo=r(tUr,"retribert"),tUr.forEach(t),Wuo=r(C3e," \u2014 "),GI=n(C3e,"A",{href:!0});var aUr=s(GI);Huo=r(aUr,"RetriBertModel"),aUr.forEach(t),Uuo=r(C3e," (RetriBERT model)"),C3e.forEach(t),Juo=i($),Kp=n($,"LI",{});var w3e=s(Kp);Hne=n(w3e,"STRONG",{});var nUr=s(Hne);Yuo=r(nUr,"roberta"),nUr.forEach(t),Kuo=r(w3e," \u2014 "),OI=n(w3e,"A",{href:!0});var sUr=s(OI);Zuo=r(sUr,"RobertaModel"),sUr.forEach(t),e_o=r(w3e," (RoBERTa model)"),w3e.forEach(t),o_o=i($),Zp=n($,"LI",{});var A3e=s(Zp);Une=n(A3e,"STRONG",{});var lUr=s(Une);r_o=r(lUr,"roformer"),lUr.forEach(t),t_o=r(A3e," \u2014 "),VI=n(A3e,"A",{href:!0});var iUr=s(VI);a_o=r(iUr,"RoFormerModel"),iUr.forEach(t),n_o=r(A3e," (RoFormer model)"),A3e.forEach(t),s_o=i($),eu=n($,"LI",{});var y3e=s(eu);Jne=n(y3e,"STRONG",{});var dUr=s(Jne);l_o=r(dUr,"segformer"),dUr.forEach(t),i_o=r(y3e," \u2014 "),XI=n(y3e,"A",{href:!0});var cUr=s(XI);d_o=r(cUr,"SegformerModel"),cUr.forEach(t),c_o=r(y3e," (SegFormer model)"),y3e.forEach(t),f_o=i($),ou=n($,"LI",{});var L3e=s(ou);Yne=n(L3e,"STRONG",{});var fUr=s(Yne);m_o=r(fUr,"sew"),fUr.forEach(t),g_o=r(L3e," \u2014 "),zI=n(L3e,"A",{href:!0});var mUr=s(zI);h_o=r(mUr,"SEWModel"),mUr.forEach(t),p_o=r(L3e," (SEW model)"),L3e.forEach(t),u_o=i($),ru=n($,"LI",{});var x3e=s(ru);Kne=n(x3e,"STRONG",{});var gUr=s(Kne);__o=r(gUr,"sew-d"),gUr.forEach(t),b_o=r(x3e," \u2014 "),QI=n(x3e,"A",{href:!0});var hUr=s(QI);v_o=r(hUr,"SEWDModel"),hUr.forEach(t),F_o=r(x3e," (SEW-D model)"),x3e.forEach(t),T_o=i($),tu=n($,"LI",{});var $3e=s(tu);Zne=n($3e,"STRONG",{});var pUr=s(Zne);M_o=r(pUr,"speech_to_text"),pUr.forEach(t),E_o=r($3e," \u2014 "),WI=n($3e,"A",{href:!0});var uUr=s(WI);C_o=r(uUr,"Speech2TextModel"),uUr.forEach(t),w_o=r($3e," (Speech2Text model)"),$3e.forEach(t),A_o=i($),au=n($,"LI",{});var k3e=s(au);ese=n(k3e,"STRONG",{});var _Ur=s(ese);y_o=r(_Ur,"splinter"),_Ur.forEach(t),L_o=r(k3e," \u2014 "),HI=n(k3e,"A",{href:!0});var bUr=s(HI);x_o=r(bUr,"SplinterModel"),bUr.forEach(t),$_o=r(k3e," (Splinter model)"),k3e.forEach(t),k_o=i($),nu=n($,"LI",{});var S3e=s(nu);ose=n(S3e,"STRONG",{});var vUr=s(ose);S_o=r(vUr,"squeezebert"),vUr.forEach(t),R_o=r(S3e," \u2014 "),UI=n(S3e,"A",{href:!0});var FUr=s(UI);B_o=r(FUr,"SqueezeBertModel"),FUr.forEach(t),P_o=r(S3e," (SqueezeBERT model)"),S3e.forEach(t),I_o=i($),su=n($,"LI",{});var R3e=s(su);rse=n(R3e,"STRONG",{});var TUr=s(rse);q_o=r(TUr,"swin"),TUr.forEach(t),N_o=r(R3e," \u2014 "),JI=n(R3e,"A",{href:!0});var MUr=s(JI);j_o=r(MUr,"SwinModel"),MUr.forEach(t),D_o=r(R3e," (Swin model)"),R3e.forEach(t),G_o=i($),lu=n($,"LI",{});var B3e=s(lu);tse=n(B3e,"STRONG",{});var EUr=s(tse);O_o=r(EUr,"t5"),EUr.forEach(t),V_o=r(B3e," \u2014 "),YI=n(B3e,"A",{href:!0});var CUr=s(YI);X_o=r(CUr,"T5Model"),CUr.forEach(t),z_o=r(B3e," (T5 model)"),B3e.forEach(t),Q_o=i($),iu=n($,"LI",{});var P3e=s(iu);ase=n(P3e,"STRONG",{});var wUr=s(ase);W_o=r(wUr,"tapas"),wUr.forEach(t),H_o=r(P3e," \u2014 "),KI=n(P3e,"A",{href:!0});var AUr=s(KI);U_o=r(AUr,"TapasModel"),AUr.forEach(t),J_o=r(P3e," (TAPAS model)"),P3e.forEach(t),Y_o=i($),du=n($,"LI",{});var I3e=s(du);nse=n(I3e,"STRONG",{});var yUr=s(nse);K_o=r(yUr,"transfo-xl"),yUr.forEach(t),Z_o=r(I3e," \u2014 "),ZI=n(I3e,"A",{href:!0});var LUr=s(ZI);e1o=r(LUr,"TransfoXLModel"),LUr.forEach(t),o1o=r(I3e," (Transformer-XL model)"),I3e.forEach(t),r1o=i($),cu=n($,"LI",{});var q3e=s(cu);sse=n(q3e,"STRONG",{});var xUr=s(sse);t1o=r(xUr,"unispeech"),xUr.forEach(t),a1o=r(q3e," \u2014 "),eq=n(q3e,"A",{href:!0});var $Ur=s(eq);n1o=r($Ur,"UniSpeechModel"),$Ur.forEach(t),s1o=r(q3e," (UniSpeech model)"),q3e.forEach(t),l1o=i($),fu=n($,"LI",{});var N3e=s(fu);lse=n(N3e,"STRONG",{});var kUr=s(lse);i1o=r(kUr,"unispeech-sat"),kUr.forEach(t),d1o=r(N3e," \u2014 "),oq=n(N3e,"A",{href:!0});var SUr=s(oq);c1o=r(SUr,"UniSpeechSatModel"),SUr.forEach(t),f1o=r(N3e," (UniSpeechSat model)"),N3e.forEach(t),m1o=i($),mu=n($,"LI",{});var j3e=s(mu);ise=n(j3e,"STRONG",{});var RUr=s(ise);g1o=r(RUr,"van"),RUr.forEach(t),h1o=r(j3e," \u2014 "),rq=n(j3e,"A",{href:!0});var BUr=s(rq);p1o=r(BUr,"VanModel"),BUr.forEach(t),u1o=r(j3e," (VAN model)"),j3e.forEach(t),_1o=i($),gu=n($,"LI",{});var D3e=s(gu);dse=n(D3e,"STRONG",{});var PUr=s(dse);b1o=r(PUr,"vilt"),PUr.forEach(t),v1o=r(D3e," \u2014 "),tq=n(D3e,"A",{href:!0});var IUr=s(tq);F1o=r(IUr,"ViltModel"),IUr.forEach(t),T1o=r(D3e," (ViLT model)"),D3e.forEach(t),M1o=i($),hu=n($,"LI",{});var G3e=s(hu);cse=n(G3e,"STRONG",{});var qUr=s(cse);E1o=r(qUr,"vision-text-dual-encoder"),qUr.forEach(t),C1o=r(G3e," \u2014 "),aq=n(G3e,"A",{href:!0});var NUr=s(aq);w1o=r(NUr,"VisionTextDualEncoderModel"),NUr.forEach(t),A1o=r(G3e," (VisionTextDualEncoder model)"),G3e.forEach(t),y1o=i($),pu=n($,"LI",{});var O3e=s(pu);fse=n(O3e,"STRONG",{});var jUr=s(fse);L1o=r(jUr,"visual_bert"),jUr.forEach(t),x1o=r(O3e," \u2014 "),nq=n(O3e,"A",{href:!0});var DUr=s(nq);$1o=r(DUr,"VisualBertModel"),DUr.forEach(t),k1o=r(O3e," (VisualBert model)"),O3e.forEach(t),S1o=i($),uu=n($,"LI",{});var V3e=s(uu);mse=n(V3e,"STRONG",{});var GUr=s(mse);R1o=r(GUr,"vit"),GUr.forEach(t),B1o=r(V3e," \u2014 "),sq=n(V3e,"A",{href:!0});var OUr=s(sq);P1o=r(OUr,"ViTModel"),OUr.forEach(t),I1o=r(V3e," (ViT model)"),V3e.forEach(t),q1o=i($),_u=n($,"LI",{});var X3e=s(_u);gse=n(X3e,"STRONG",{});var VUr=s(gse);N1o=r(VUr,"vit_mae"),VUr.forEach(t),j1o=r(X3e," \u2014 "),lq=n(X3e,"A",{href:!0});var XUr=s(lq);D1o=r(XUr,"ViTMAEModel"),XUr.forEach(t),G1o=r(X3e," (ViTMAE model)"),X3e.forEach(t),O1o=i($),bu=n($,"LI",{});var z3e=s(bu);hse=n(z3e,"STRONG",{});var zUr=s(hse);V1o=r(zUr,"wav2vec2"),zUr.forEach(t),X1o=r(z3e," \u2014 "),iq=n(z3e,"A",{href:!0});var QUr=s(iq);z1o=r(QUr,"Wav2Vec2Model"),QUr.forEach(t),Q1o=r(z3e," (Wav2Vec2 model)"),z3e.forEach(t),W1o=i($),vu=n($,"LI",{});var Q3e=s(vu);pse=n(Q3e,"STRONG",{});var WUr=s(pse);H1o=r(WUr,"wavlm"),WUr.forEach(t),U1o=r(Q3e," \u2014 "),dq=n(Q3e,"A",{href:!0});var HUr=s(dq);J1o=r(HUr,"WavLMModel"),HUr.forEach(t),Y1o=r(Q3e," (WavLM model)"),Q3e.forEach(t),K1o=i($),Fu=n($,"LI",{});var W3e=s(Fu);use=n(W3e,"STRONG",{});var UUr=s(use);Z1o=r(UUr,"xglm"),UUr.forEach(t),e8o=r(W3e," \u2014 "),cq=n(W3e,"A",{href:!0});var JUr=s(cq);o8o=r(JUr,"XGLMModel"),JUr.forEach(t),r8o=r(W3e," (XGLM model)"),W3e.forEach(t),t8o=i($),Tu=n($,"LI",{});var H3e=s(Tu);_se=n(H3e,"STRONG",{});var YUr=s(_se);a8o=r(YUr,"xlm"),YUr.forEach(t),n8o=r(H3e," \u2014 "),fq=n(H3e,"A",{href:!0});var KUr=s(fq);s8o=r(KUr,"XLMModel"),KUr.forEach(t),l8o=r(H3e," (XLM model)"),H3e.forEach(t),i8o=i($),Mu=n($,"LI",{});var U3e=s(Mu);bse=n(U3e,"STRONG",{});var ZUr=s(bse);d8o=r(ZUr,"xlm-prophetnet"),ZUr.forEach(t),c8o=r(U3e," \u2014 "),mq=n(U3e,"A",{href:!0});var eJr=s(mq);f8o=r(eJr,"XLMProphetNetModel"),eJr.forEach(t),m8o=r(U3e," (XLMProphetNet model)"),U3e.forEach(t),g8o=i($),Eu=n($,"LI",{});var J3e=s(Eu);vse=n(J3e,"STRONG",{});var oJr=s(vse);h8o=r(oJr,"xlm-roberta"),oJr.forEach(t),p8o=r(J3e," \u2014 "),gq=n(J3e,"A",{href:!0});var rJr=s(gq);u8o=r(rJr,"XLMRobertaModel"),rJr.forEach(t),_8o=r(J3e," (XLM-RoBERTa model)"),J3e.forEach(t),b8o=i($),Cu=n($,"LI",{});var Y3e=s(Cu);Fse=n(Y3e,"STRONG",{});var tJr=s(Fse);v8o=r(tJr,"xlm-roberta-xl"),tJr.forEach(t),F8o=r(Y3e," \u2014 "),hq=n(Y3e,"A",{href:!0});var aJr=s(hq);T8o=r(aJr,"XLMRobertaXLModel"),aJr.forEach(t),M8o=r(Y3e," (XLM-RoBERTa-XL model)"),Y3e.forEach(t),E8o=i($),wu=n($,"LI",{});var K3e=s(wu);Tse=n(K3e,"STRONG",{});var nJr=s(Tse);C8o=r(nJr,"xlnet"),nJr.forEach(t),w8o=r(K3e," \u2014 "),pq=n(K3e,"A",{href:!0});var sJr=s(pq);A8o=r(sJr,"XLNetModel"),sJr.forEach(t),y8o=r(K3e," (XLNet model)"),K3e.forEach(t),L8o=i($),Au=n($,"LI",{});var Z3e=s(Au);Mse=n(Z3e,"STRONG",{});var lJr=s(Mse);x8o=r(lJr,"yolos"),lJr.forEach(t),$8o=r(Z3e," \u2014 "),uq=n(Z3e,"A",{href:!0});var iJr=s(uq);k8o=r(iJr,"YolosModel"),iJr.forEach(t),S8o=r(Z3e," (YOLOS model)"),Z3e.forEach(t),R8o=i($),yu=n($,"LI",{});var ewe=s(yu);Ese=n(ewe,"STRONG",{});var dJr=s(Ese);B8o=r(dJr,"yoso"),dJr.forEach(t),P8o=r(ewe," \u2014 "),_q=n(ewe,"A",{href:!0});var cJr=s(_q);I8o=r(cJr,"YosoModel"),cJr.forEach(t),q8o=r(ewe," (YOSO model)"),ewe.forEach(t),$.forEach(t),N8o=i(Zt),Lu=n(Zt,"P",{});var owe=s(Lu);j8o=r(owe,"The model is set in evaluation mode by default using "),Cse=n(owe,"CODE",{});var fJr=s(Cse);D8o=r(fJr,"model.eval()"),fJr.forEach(t),G8o=r(owe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wse=n(owe,"CODE",{});var mJr=s(wse);O8o=r(mJr,"model.train()"),mJr.forEach(t),owe.forEach(t),V8o=i(Zt),T(xu.$$.fragment,Zt),Zt.forEach(t),Ds.forEach(t),APe=i(f),wi=n(f,"H2",{class:!0});var $qe=s(wi);$u=n($qe,"A",{id:!0,class:!0,href:!0});var gJr=s($u);Ase=n(gJr,"SPAN",{});var hJr=s(Ase);T(TA.$$.fragment,hJr),hJr.forEach(t),gJr.forEach(t),X8o=i($qe),yse=n($qe,"SPAN",{});var pJr=s(yse);z8o=r(pJr,"AutoModelForPreTraining"),pJr.forEach(t),$qe.forEach(t),yPe=i(f),xo=n(f,"DIV",{class:!0});var Gs=s(xo);T(MA.$$.fragment,Gs),Q8o=i(Gs),Ai=n(Gs,"P",{});var JY=s(Ai);W8o=r(JY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),bq=n(JY,"A",{href:!0});var uJr=s(bq);H8o=r(uJr,"from_pretrained()"),uJr.forEach(t),U8o=r(JY," class method or the "),vq=n(JY,"A",{href:!0});var _Jr=s(vq);J8o=r(_Jr,"from_config()"),_Jr.forEach(t),Y8o=r(JY,` class
method.`),JY.forEach(t),K8o=i(Gs),EA=n(Gs,"P",{});var kqe=s(EA);Z8o=r(kqe,"This class cannot be instantiated directly using "),Lse=n(kqe,"CODE",{});var bJr=s(Lse);ebo=r(bJr,"__init__()"),bJr.forEach(t),obo=r(kqe," (throws an error)."),kqe.forEach(t),rbo=i(Gs),rt=n(Gs,"DIV",{class:!0});var HC=s(rt);T(CA.$$.fragment,HC),tbo=i(HC),xse=n(HC,"P",{});var vJr=s(xse);abo=r(vJr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),vJr.forEach(t),nbo=i(HC),yi=n(HC,"P",{});var YY=s(yi);sbo=r(YY,`Note:
Loading a model from its configuration file does `),$se=n(YY,"STRONG",{});var FJr=s($se);lbo=r(FJr,"not"),FJr.forEach(t),ibo=r(YY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fq=n(YY,"A",{href:!0});var TJr=s(Fq);dbo=r(TJr,"from_pretrained()"),TJr.forEach(t),cbo=r(YY," to load the model weights."),YY.forEach(t),fbo=i(HC),T(ku.$$.fragment,HC),HC.forEach(t),mbo=i(Gs),Ue=n(Gs,"DIV",{class:!0});var ea=s(Ue);T(wA.$$.fragment,ea),gbo=i(ea),kse=n(ea,"P",{});var MJr=s(kse);hbo=r(MJr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),MJr.forEach(t),pbo=i(ea),ya=n(ea,"P",{});var UC=s(ya);ubo=r(UC,"The model class to instantiate is selected based on the "),Sse=n(UC,"CODE",{});var EJr=s(Sse);_bo=r(EJr,"model_type"),EJr.forEach(t),bbo=r(UC,` property of the config object (either
passed as an argument or loaded from `),Rse=n(UC,"CODE",{});var CJr=s(Rse);vbo=r(CJr,"pretrained_model_name_or_path"),CJr.forEach(t),Fbo=r(UC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bse=n(UC,"CODE",{});var wJr=s(Bse);Tbo=r(wJr,"pretrained_model_name_or_path"),wJr.forEach(t),Mbo=r(UC,":"),UC.forEach(t),Ebo=i(ea),G=n(ea,"UL",{});var V=s(G);Su=n(V,"LI",{});var rwe=s(Su);Pse=n(rwe,"STRONG",{});var AJr=s(Pse);Cbo=r(AJr,"albert"),AJr.forEach(t),wbo=r(rwe," \u2014 "),Tq=n(rwe,"A",{href:!0});var yJr=s(Tq);Abo=r(yJr,"AlbertForPreTraining"),yJr.forEach(t),ybo=r(rwe," (ALBERT model)"),rwe.forEach(t),Lbo=i(V),Ru=n(V,"LI",{});var twe=s(Ru);Ise=n(twe,"STRONG",{});var LJr=s(Ise);xbo=r(LJr,"bart"),LJr.forEach(t),$bo=r(twe," \u2014 "),Mq=n(twe,"A",{href:!0});var xJr=s(Mq);kbo=r(xJr,"BartForConditionalGeneration"),xJr.forEach(t),Sbo=r(twe," (BART model)"),twe.forEach(t),Rbo=i(V),Bu=n(V,"LI",{});var awe=s(Bu);qse=n(awe,"STRONG",{});var $Jr=s(qse);Bbo=r($Jr,"bert"),$Jr.forEach(t),Pbo=r(awe," \u2014 "),Eq=n(awe,"A",{href:!0});var kJr=s(Eq);Ibo=r(kJr,"BertForPreTraining"),kJr.forEach(t),qbo=r(awe," (BERT model)"),awe.forEach(t),Nbo=i(V),Pu=n(V,"LI",{});var nwe=s(Pu);Nse=n(nwe,"STRONG",{});var SJr=s(Nse);jbo=r(SJr,"big_bird"),SJr.forEach(t),Dbo=r(nwe," \u2014 "),Cq=n(nwe,"A",{href:!0});var RJr=s(Cq);Gbo=r(RJr,"BigBirdForPreTraining"),RJr.forEach(t),Obo=r(nwe," (BigBird model)"),nwe.forEach(t),Vbo=i(V),Iu=n(V,"LI",{});var swe=s(Iu);jse=n(swe,"STRONG",{});var BJr=s(jse);Xbo=r(BJr,"camembert"),BJr.forEach(t),zbo=r(swe," \u2014 "),wq=n(swe,"A",{href:!0});var PJr=s(wq);Qbo=r(PJr,"CamembertForMaskedLM"),PJr.forEach(t),Wbo=r(swe," (CamemBERT model)"),swe.forEach(t),Hbo=i(V),qu=n(V,"LI",{});var lwe=s(qu);Dse=n(lwe,"STRONG",{});var IJr=s(Dse);Ubo=r(IJr,"ctrl"),IJr.forEach(t),Jbo=r(lwe," \u2014 "),Aq=n(lwe,"A",{href:!0});var qJr=s(Aq);Ybo=r(qJr,"CTRLLMHeadModel"),qJr.forEach(t),Kbo=r(lwe," (CTRL model)"),lwe.forEach(t),Zbo=i(V),Nu=n(V,"LI",{});var iwe=s(Nu);Gse=n(iwe,"STRONG",{});var NJr=s(Gse);e2o=r(NJr,"data2vec-text"),NJr.forEach(t),o2o=r(iwe," \u2014 "),yq=n(iwe,"A",{href:!0});var jJr=s(yq);r2o=r(jJr,"Data2VecTextForMaskedLM"),jJr.forEach(t),t2o=r(iwe," (Data2VecText model)"),iwe.forEach(t),a2o=i(V),ju=n(V,"LI",{});var dwe=s(ju);Ose=n(dwe,"STRONG",{});var DJr=s(Ose);n2o=r(DJr,"deberta"),DJr.forEach(t),s2o=r(dwe," \u2014 "),Lq=n(dwe,"A",{href:!0});var GJr=s(Lq);l2o=r(GJr,"DebertaForMaskedLM"),GJr.forEach(t),i2o=r(dwe," (DeBERTa model)"),dwe.forEach(t),d2o=i(V),Du=n(V,"LI",{});var cwe=s(Du);Vse=n(cwe,"STRONG",{});var OJr=s(Vse);c2o=r(OJr,"deberta-v2"),OJr.forEach(t),f2o=r(cwe," \u2014 "),xq=n(cwe,"A",{href:!0});var VJr=s(xq);m2o=r(VJr,"DebertaV2ForMaskedLM"),VJr.forEach(t),g2o=r(cwe," (DeBERTa-v2 model)"),cwe.forEach(t),h2o=i(V),Gu=n(V,"LI",{});var fwe=s(Gu);Xse=n(fwe,"STRONG",{});var XJr=s(Xse);p2o=r(XJr,"distilbert"),XJr.forEach(t),u2o=r(fwe," \u2014 "),$q=n(fwe,"A",{href:!0});var zJr=s($q);_2o=r(zJr,"DistilBertForMaskedLM"),zJr.forEach(t),b2o=r(fwe," (DistilBERT model)"),fwe.forEach(t),v2o=i(V),Ou=n(V,"LI",{});var mwe=s(Ou);zse=n(mwe,"STRONG",{});var QJr=s(zse);F2o=r(QJr,"electra"),QJr.forEach(t),T2o=r(mwe," \u2014 "),kq=n(mwe,"A",{href:!0});var WJr=s(kq);M2o=r(WJr,"ElectraForPreTraining"),WJr.forEach(t),E2o=r(mwe," (ELECTRA model)"),mwe.forEach(t),C2o=i(V),Vu=n(V,"LI",{});var gwe=s(Vu);Qse=n(gwe,"STRONG",{});var HJr=s(Qse);w2o=r(HJr,"flaubert"),HJr.forEach(t),A2o=r(gwe," \u2014 "),Sq=n(gwe,"A",{href:!0});var UJr=s(Sq);y2o=r(UJr,"FlaubertWithLMHeadModel"),UJr.forEach(t),L2o=r(gwe," (FlauBERT model)"),gwe.forEach(t),x2o=i(V),Xu=n(V,"LI",{});var hwe=s(Xu);Wse=n(hwe,"STRONG",{});var JJr=s(Wse);$2o=r(JJr,"fnet"),JJr.forEach(t),k2o=r(hwe," \u2014 "),Rq=n(hwe,"A",{href:!0});var YJr=s(Rq);S2o=r(YJr,"FNetForPreTraining"),YJr.forEach(t),R2o=r(hwe," (FNet model)"),hwe.forEach(t),B2o=i(V),zu=n(V,"LI",{});var pwe=s(zu);Hse=n(pwe,"STRONG",{});var KJr=s(Hse);P2o=r(KJr,"fsmt"),KJr.forEach(t),I2o=r(pwe," \u2014 "),Bq=n(pwe,"A",{href:!0});var ZJr=s(Bq);q2o=r(ZJr,"FSMTForConditionalGeneration"),ZJr.forEach(t),N2o=r(pwe," (FairSeq Machine-Translation model)"),pwe.forEach(t),j2o=i(V),Qu=n(V,"LI",{});var uwe=s(Qu);Use=n(uwe,"STRONG",{});var eYr=s(Use);D2o=r(eYr,"funnel"),eYr.forEach(t),G2o=r(uwe," \u2014 "),Pq=n(uwe,"A",{href:!0});var oYr=s(Pq);O2o=r(oYr,"FunnelForPreTraining"),oYr.forEach(t),V2o=r(uwe," (Funnel Transformer model)"),uwe.forEach(t),X2o=i(V),Wu=n(V,"LI",{});var _we=s(Wu);Jse=n(_we,"STRONG",{});var rYr=s(Jse);z2o=r(rYr,"gpt2"),rYr.forEach(t),Q2o=r(_we," \u2014 "),Iq=n(_we,"A",{href:!0});var tYr=s(Iq);W2o=r(tYr,"GPT2LMHeadModel"),tYr.forEach(t),H2o=r(_we," (OpenAI GPT-2 model)"),_we.forEach(t),U2o=i(V),Hu=n(V,"LI",{});var bwe=s(Hu);Yse=n(bwe,"STRONG",{});var aYr=s(Yse);J2o=r(aYr,"ibert"),aYr.forEach(t),Y2o=r(bwe," \u2014 "),qq=n(bwe,"A",{href:!0});var nYr=s(qq);K2o=r(nYr,"IBertForMaskedLM"),nYr.forEach(t),Z2o=r(bwe," (I-BERT model)"),bwe.forEach(t),evo=i(V),Uu=n(V,"LI",{});var vwe=s(Uu);Kse=n(vwe,"STRONG",{});var sYr=s(Kse);ovo=r(sYr,"layoutlm"),sYr.forEach(t),rvo=r(vwe," \u2014 "),Nq=n(vwe,"A",{href:!0});var lYr=s(Nq);tvo=r(lYr,"LayoutLMForMaskedLM"),lYr.forEach(t),avo=r(vwe," (LayoutLM model)"),vwe.forEach(t),nvo=i(V),Ju=n(V,"LI",{});var Fwe=s(Ju);Zse=n(Fwe,"STRONG",{});var iYr=s(Zse);svo=r(iYr,"longformer"),iYr.forEach(t),lvo=r(Fwe," \u2014 "),jq=n(Fwe,"A",{href:!0});var dYr=s(jq);ivo=r(dYr,"LongformerForMaskedLM"),dYr.forEach(t),dvo=r(Fwe," (Longformer model)"),Fwe.forEach(t),cvo=i(V),Yu=n(V,"LI",{});var Twe=s(Yu);ele=n(Twe,"STRONG",{});var cYr=s(ele);fvo=r(cYr,"lxmert"),cYr.forEach(t),mvo=r(Twe," \u2014 "),Dq=n(Twe,"A",{href:!0});var fYr=s(Dq);gvo=r(fYr,"LxmertForPreTraining"),fYr.forEach(t),hvo=r(Twe," (LXMERT model)"),Twe.forEach(t),pvo=i(V),Ku=n(V,"LI",{});var Mwe=s(Ku);ole=n(Mwe,"STRONG",{});var mYr=s(ole);uvo=r(mYr,"megatron-bert"),mYr.forEach(t),_vo=r(Mwe," \u2014 "),Gq=n(Mwe,"A",{href:!0});var gYr=s(Gq);bvo=r(gYr,"MegatronBertForPreTraining"),gYr.forEach(t),vvo=r(Mwe," (MegatronBert model)"),Mwe.forEach(t),Fvo=i(V),Zu=n(V,"LI",{});var Ewe=s(Zu);rle=n(Ewe,"STRONG",{});var hYr=s(rle);Tvo=r(hYr,"mobilebert"),hYr.forEach(t),Mvo=r(Ewe," \u2014 "),Oq=n(Ewe,"A",{href:!0});var pYr=s(Oq);Evo=r(pYr,"MobileBertForPreTraining"),pYr.forEach(t),Cvo=r(Ewe," (MobileBERT model)"),Ewe.forEach(t),wvo=i(V),e_=n(V,"LI",{});var Cwe=s(e_);tle=n(Cwe,"STRONG",{});var uYr=s(tle);Avo=r(uYr,"mpnet"),uYr.forEach(t),yvo=r(Cwe," \u2014 "),Vq=n(Cwe,"A",{href:!0});var _Yr=s(Vq);Lvo=r(_Yr,"MPNetForMaskedLM"),_Yr.forEach(t),xvo=r(Cwe," (MPNet model)"),Cwe.forEach(t),$vo=i(V),o_=n(V,"LI",{});var wwe=s(o_);ale=n(wwe,"STRONG",{});var bYr=s(ale);kvo=r(bYr,"openai-gpt"),bYr.forEach(t),Svo=r(wwe," \u2014 "),Xq=n(wwe,"A",{href:!0});var vYr=s(Xq);Rvo=r(vYr,"OpenAIGPTLMHeadModel"),vYr.forEach(t),Bvo=r(wwe," (OpenAI GPT model)"),wwe.forEach(t),Pvo=i(V),r_=n(V,"LI",{});var Awe=s(r_);nle=n(Awe,"STRONG",{});var FYr=s(nle);Ivo=r(FYr,"retribert"),FYr.forEach(t),qvo=r(Awe," \u2014 "),zq=n(Awe,"A",{href:!0});var TYr=s(zq);Nvo=r(TYr,"RetriBertModel"),TYr.forEach(t),jvo=r(Awe," (RetriBERT model)"),Awe.forEach(t),Dvo=i(V),t_=n(V,"LI",{});var ywe=s(t_);sle=n(ywe,"STRONG",{});var MYr=s(sle);Gvo=r(MYr,"roberta"),MYr.forEach(t),Ovo=r(ywe," \u2014 "),Qq=n(ywe,"A",{href:!0});var EYr=s(Qq);Vvo=r(EYr,"RobertaForMaskedLM"),EYr.forEach(t),Xvo=r(ywe," (RoBERTa model)"),ywe.forEach(t),zvo=i(V),a_=n(V,"LI",{});var Lwe=s(a_);lle=n(Lwe,"STRONG",{});var CYr=s(lle);Qvo=r(CYr,"squeezebert"),CYr.forEach(t),Wvo=r(Lwe," \u2014 "),Wq=n(Lwe,"A",{href:!0});var wYr=s(Wq);Hvo=r(wYr,"SqueezeBertForMaskedLM"),wYr.forEach(t),Uvo=r(Lwe," (SqueezeBERT model)"),Lwe.forEach(t),Jvo=i(V),n_=n(V,"LI",{});var xwe=s(n_);ile=n(xwe,"STRONG",{});var AYr=s(ile);Yvo=r(AYr,"t5"),AYr.forEach(t),Kvo=r(xwe," \u2014 "),Hq=n(xwe,"A",{href:!0});var yYr=s(Hq);Zvo=r(yYr,"T5ForConditionalGeneration"),yYr.forEach(t),eFo=r(xwe," (T5 model)"),xwe.forEach(t),oFo=i(V),s_=n(V,"LI",{});var $we=s(s_);dle=n($we,"STRONG",{});var LYr=s(dle);rFo=r(LYr,"tapas"),LYr.forEach(t),tFo=r($we," \u2014 "),Uq=n($we,"A",{href:!0});var xYr=s(Uq);aFo=r(xYr,"TapasForMaskedLM"),xYr.forEach(t),nFo=r($we," (TAPAS model)"),$we.forEach(t),sFo=i(V),l_=n(V,"LI",{});var kwe=s(l_);cle=n(kwe,"STRONG",{});var $Yr=s(cle);lFo=r($Yr,"transfo-xl"),$Yr.forEach(t),iFo=r(kwe," \u2014 "),Jq=n(kwe,"A",{href:!0});var kYr=s(Jq);dFo=r(kYr,"TransfoXLLMHeadModel"),kYr.forEach(t),cFo=r(kwe," (Transformer-XL model)"),kwe.forEach(t),fFo=i(V),i_=n(V,"LI",{});var Swe=s(i_);fle=n(Swe,"STRONG",{});var SYr=s(fle);mFo=r(SYr,"unispeech"),SYr.forEach(t),gFo=r(Swe," \u2014 "),Yq=n(Swe,"A",{href:!0});var RYr=s(Yq);hFo=r(RYr,"UniSpeechForPreTraining"),RYr.forEach(t),pFo=r(Swe," (UniSpeech model)"),Swe.forEach(t),uFo=i(V),d_=n(V,"LI",{});var Rwe=s(d_);mle=n(Rwe,"STRONG",{});var BYr=s(mle);_Fo=r(BYr,"unispeech-sat"),BYr.forEach(t),bFo=r(Rwe," \u2014 "),Kq=n(Rwe,"A",{href:!0});var PYr=s(Kq);vFo=r(PYr,"UniSpeechSatForPreTraining"),PYr.forEach(t),FFo=r(Rwe," (UniSpeechSat model)"),Rwe.forEach(t),TFo=i(V),c_=n(V,"LI",{});var Bwe=s(c_);gle=n(Bwe,"STRONG",{});var IYr=s(gle);MFo=r(IYr,"visual_bert"),IYr.forEach(t),EFo=r(Bwe," \u2014 "),Zq=n(Bwe,"A",{href:!0});var qYr=s(Zq);CFo=r(qYr,"VisualBertForPreTraining"),qYr.forEach(t),wFo=r(Bwe," (VisualBert model)"),Bwe.forEach(t),AFo=i(V),f_=n(V,"LI",{});var Pwe=s(f_);hle=n(Pwe,"STRONG",{});var NYr=s(hle);yFo=r(NYr,"vit_mae"),NYr.forEach(t),LFo=r(Pwe," \u2014 "),eN=n(Pwe,"A",{href:!0});var jYr=s(eN);xFo=r(jYr,"ViTMAEForPreTraining"),jYr.forEach(t),$Fo=r(Pwe," (ViTMAE model)"),Pwe.forEach(t),kFo=i(V),m_=n(V,"LI",{});var Iwe=s(m_);ple=n(Iwe,"STRONG",{});var DYr=s(ple);SFo=r(DYr,"wav2vec2"),DYr.forEach(t),RFo=r(Iwe," \u2014 "),oN=n(Iwe,"A",{href:!0});var GYr=s(oN);BFo=r(GYr,"Wav2Vec2ForPreTraining"),GYr.forEach(t),PFo=r(Iwe," (Wav2Vec2 model)"),Iwe.forEach(t),IFo=i(V),g_=n(V,"LI",{});var qwe=s(g_);ule=n(qwe,"STRONG",{});var OYr=s(ule);qFo=r(OYr,"xlm"),OYr.forEach(t),NFo=r(qwe," \u2014 "),rN=n(qwe,"A",{href:!0});var VYr=s(rN);jFo=r(VYr,"XLMWithLMHeadModel"),VYr.forEach(t),DFo=r(qwe," (XLM model)"),qwe.forEach(t),GFo=i(V),h_=n(V,"LI",{});var Nwe=s(h_);_le=n(Nwe,"STRONG",{});var XYr=s(_le);OFo=r(XYr,"xlm-roberta"),XYr.forEach(t),VFo=r(Nwe," \u2014 "),tN=n(Nwe,"A",{href:!0});var zYr=s(tN);XFo=r(zYr,"XLMRobertaForMaskedLM"),zYr.forEach(t),zFo=r(Nwe," (XLM-RoBERTa model)"),Nwe.forEach(t),QFo=i(V),p_=n(V,"LI",{});var jwe=s(p_);ble=n(jwe,"STRONG",{});var QYr=s(ble);WFo=r(QYr,"xlm-roberta-xl"),QYr.forEach(t),HFo=r(jwe," \u2014 "),aN=n(jwe,"A",{href:!0});var WYr=s(aN);UFo=r(WYr,"XLMRobertaXLForMaskedLM"),WYr.forEach(t),JFo=r(jwe," (XLM-RoBERTa-XL model)"),jwe.forEach(t),YFo=i(V),u_=n(V,"LI",{});var Dwe=s(u_);vle=n(Dwe,"STRONG",{});var HYr=s(vle);KFo=r(HYr,"xlnet"),HYr.forEach(t),ZFo=r(Dwe," \u2014 "),nN=n(Dwe,"A",{href:!0});var UYr=s(nN);e6o=r(UYr,"XLNetLMHeadModel"),UYr.forEach(t),o6o=r(Dwe," (XLNet model)"),Dwe.forEach(t),V.forEach(t),r6o=i(ea),__=n(ea,"P",{});var Gwe=s(__);t6o=r(Gwe,"The model is set in evaluation mode by default using "),Fle=n(Gwe,"CODE",{});var JYr=s(Fle);a6o=r(JYr,"model.eval()"),JYr.forEach(t),n6o=r(Gwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tle=n(Gwe,"CODE",{});var YYr=s(Tle);s6o=r(YYr,"model.train()"),YYr.forEach(t),Gwe.forEach(t),l6o=i(ea),T(b_.$$.fragment,ea),ea.forEach(t),Gs.forEach(t),LPe=i(f),Li=n(f,"H2",{class:!0});var Sqe=s(Li);v_=n(Sqe,"A",{id:!0,class:!0,href:!0});var KYr=s(v_);Mle=n(KYr,"SPAN",{});var ZYr=s(Mle);T(AA.$$.fragment,ZYr),ZYr.forEach(t),KYr.forEach(t),i6o=i(Sqe),Ele=n(Sqe,"SPAN",{});var eKr=s(Ele);d6o=r(eKr,"AutoModelForCausalLM"),eKr.forEach(t),Sqe.forEach(t),xPe=i(f),$o=n(f,"DIV",{class:!0});var Os=s($o);T(yA.$$.fragment,Os),c6o=i(Os),xi=n(Os,"P",{});var KY=s(xi);f6o=r(KY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),sN=n(KY,"A",{href:!0});var oKr=s(sN);m6o=r(oKr,"from_pretrained()"),oKr.forEach(t),g6o=r(KY," class method or the "),lN=n(KY,"A",{href:!0});var rKr=s(lN);h6o=r(rKr,"from_config()"),rKr.forEach(t),p6o=r(KY,` class
method.`),KY.forEach(t),u6o=i(Os),LA=n(Os,"P",{});var Rqe=s(LA);_6o=r(Rqe,"This class cannot be instantiated directly using "),Cle=n(Rqe,"CODE",{});var tKr=s(Cle);b6o=r(tKr,"__init__()"),tKr.forEach(t),v6o=r(Rqe," (throws an error)."),Rqe.forEach(t),F6o=i(Os),tt=n(Os,"DIV",{class:!0});var JC=s(tt);T(xA.$$.fragment,JC),T6o=i(JC),wle=n(JC,"P",{});var aKr=s(wle);M6o=r(aKr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),aKr.forEach(t),E6o=i(JC),$i=n(JC,"P",{});var ZY=s($i);C6o=r(ZY,`Note:
Loading a model from its configuration file does `),Ale=n(ZY,"STRONG",{});var nKr=s(Ale);w6o=r(nKr,"not"),nKr.forEach(t),A6o=r(ZY,` load the model weights. It only affects the
model\u2019s configuration. Use `),iN=n(ZY,"A",{href:!0});var sKr=s(iN);y6o=r(sKr,"from_pretrained()"),sKr.forEach(t),L6o=r(ZY," to load the model weights."),ZY.forEach(t),x6o=i(JC),T(F_.$$.fragment,JC),JC.forEach(t),$6o=i(Os),Je=n(Os,"DIV",{class:!0});var oa=s(Je);T($A.$$.fragment,oa),k6o=i(oa),yle=n(oa,"P",{});var lKr=s(yle);S6o=r(lKr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),lKr.forEach(t),R6o=i(oa),La=n(oa,"P",{});var YC=s(La);B6o=r(YC,"The model class to instantiate is selected based on the "),Lle=n(YC,"CODE",{});var iKr=s(Lle);P6o=r(iKr,"model_type"),iKr.forEach(t),I6o=r(YC,` property of the config object (either
passed as an argument or loaded from `),xle=n(YC,"CODE",{});var dKr=s(xle);q6o=r(dKr,"pretrained_model_name_or_path"),dKr.forEach(t),N6o=r(YC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$le=n(YC,"CODE",{});var cKr=s($le);j6o=r(cKr,"pretrained_model_name_or_path"),cKr.forEach(t),D6o=r(YC,":"),YC.forEach(t),G6o=i(oa),z=n(oa,"UL",{});var W=s(z);T_=n(W,"LI",{});var Owe=s(T_);kle=n(Owe,"STRONG",{});var fKr=s(kle);O6o=r(fKr,"bart"),fKr.forEach(t),V6o=r(Owe," \u2014 "),dN=n(Owe,"A",{href:!0});var mKr=s(dN);X6o=r(mKr,"BartForCausalLM"),mKr.forEach(t),z6o=r(Owe," (BART model)"),Owe.forEach(t),Q6o=i(W),M_=n(W,"LI",{});var Vwe=s(M_);Sle=n(Vwe,"STRONG",{});var gKr=s(Sle);W6o=r(gKr,"bert"),gKr.forEach(t),H6o=r(Vwe," \u2014 "),cN=n(Vwe,"A",{href:!0});var hKr=s(cN);U6o=r(hKr,"BertLMHeadModel"),hKr.forEach(t),J6o=r(Vwe," (BERT model)"),Vwe.forEach(t),Y6o=i(W),E_=n(W,"LI",{});var Xwe=s(E_);Rle=n(Xwe,"STRONG",{});var pKr=s(Rle);K6o=r(pKr,"bert-generation"),pKr.forEach(t),Z6o=r(Xwe," \u2014 "),fN=n(Xwe,"A",{href:!0});var uKr=s(fN);eTo=r(uKr,"BertGenerationDecoder"),uKr.forEach(t),oTo=r(Xwe," (Bert Generation model)"),Xwe.forEach(t),rTo=i(W),C_=n(W,"LI",{});var zwe=s(C_);Ble=n(zwe,"STRONG",{});var _Kr=s(Ble);tTo=r(_Kr,"big_bird"),_Kr.forEach(t),aTo=r(zwe," \u2014 "),mN=n(zwe,"A",{href:!0});var bKr=s(mN);nTo=r(bKr,"BigBirdForCausalLM"),bKr.forEach(t),sTo=r(zwe," (BigBird model)"),zwe.forEach(t),lTo=i(W),w_=n(W,"LI",{});var Qwe=s(w_);Ple=n(Qwe,"STRONG",{});var vKr=s(Ple);iTo=r(vKr,"bigbird_pegasus"),vKr.forEach(t),dTo=r(Qwe," \u2014 "),gN=n(Qwe,"A",{href:!0});var FKr=s(gN);cTo=r(FKr,"BigBirdPegasusForCausalLM"),FKr.forEach(t),fTo=r(Qwe," (BigBirdPegasus model)"),Qwe.forEach(t),mTo=i(W),A_=n(W,"LI",{});var Wwe=s(A_);Ile=n(Wwe,"STRONG",{});var TKr=s(Ile);gTo=r(TKr,"blenderbot"),TKr.forEach(t),hTo=r(Wwe," \u2014 "),hN=n(Wwe,"A",{href:!0});var MKr=s(hN);pTo=r(MKr,"BlenderbotForCausalLM"),MKr.forEach(t),uTo=r(Wwe," (Blenderbot model)"),Wwe.forEach(t),_To=i(W),y_=n(W,"LI",{});var Hwe=s(y_);qle=n(Hwe,"STRONG",{});var EKr=s(qle);bTo=r(EKr,"blenderbot-small"),EKr.forEach(t),vTo=r(Hwe," \u2014 "),pN=n(Hwe,"A",{href:!0});var CKr=s(pN);FTo=r(CKr,"BlenderbotSmallForCausalLM"),CKr.forEach(t),TTo=r(Hwe," (BlenderbotSmall model)"),Hwe.forEach(t),MTo=i(W),L_=n(W,"LI",{});var Uwe=s(L_);Nle=n(Uwe,"STRONG",{});var wKr=s(Nle);ETo=r(wKr,"camembert"),wKr.forEach(t),CTo=r(Uwe," \u2014 "),uN=n(Uwe,"A",{href:!0});var AKr=s(uN);wTo=r(AKr,"CamembertForCausalLM"),AKr.forEach(t),ATo=r(Uwe," (CamemBERT model)"),Uwe.forEach(t),yTo=i(W),x_=n(W,"LI",{});var Jwe=s(x_);jle=n(Jwe,"STRONG",{});var yKr=s(jle);LTo=r(yKr,"ctrl"),yKr.forEach(t),xTo=r(Jwe," \u2014 "),_N=n(Jwe,"A",{href:!0});var LKr=s(_N);$To=r(LKr,"CTRLLMHeadModel"),LKr.forEach(t),kTo=r(Jwe," (CTRL model)"),Jwe.forEach(t),STo=i(W),$_=n(W,"LI",{});var Ywe=s($_);Dle=n(Ywe,"STRONG",{});var xKr=s(Dle);RTo=r(xKr,"data2vec-text"),xKr.forEach(t),BTo=r(Ywe," \u2014 "),bN=n(Ywe,"A",{href:!0});var $Kr=s(bN);PTo=r($Kr,"Data2VecTextForCausalLM"),$Kr.forEach(t),ITo=r(Ywe," (Data2VecText model)"),Ywe.forEach(t),qTo=i(W),k_=n(W,"LI",{});var Kwe=s(k_);Gle=n(Kwe,"STRONG",{});var kKr=s(Gle);NTo=r(kKr,"electra"),kKr.forEach(t),jTo=r(Kwe," \u2014 "),vN=n(Kwe,"A",{href:!0});var SKr=s(vN);DTo=r(SKr,"ElectraForCausalLM"),SKr.forEach(t),GTo=r(Kwe," (ELECTRA model)"),Kwe.forEach(t),OTo=i(W),S_=n(W,"LI",{});var Zwe=s(S_);Ole=n(Zwe,"STRONG",{});var RKr=s(Ole);VTo=r(RKr,"gpt2"),RKr.forEach(t),XTo=r(Zwe," \u2014 "),FN=n(Zwe,"A",{href:!0});var BKr=s(FN);zTo=r(BKr,"GPT2LMHeadModel"),BKr.forEach(t),QTo=r(Zwe," (OpenAI GPT-2 model)"),Zwe.forEach(t),WTo=i(W),R_=n(W,"LI",{});var eAe=s(R_);Vle=n(eAe,"STRONG",{});var PKr=s(Vle);HTo=r(PKr,"gpt_neo"),PKr.forEach(t),UTo=r(eAe," \u2014 "),TN=n(eAe,"A",{href:!0});var IKr=s(TN);JTo=r(IKr,"GPTNeoForCausalLM"),IKr.forEach(t),YTo=r(eAe," (GPT Neo model)"),eAe.forEach(t),KTo=i(W),B_=n(W,"LI",{});var oAe=s(B_);Xle=n(oAe,"STRONG",{});var qKr=s(Xle);ZTo=r(qKr,"gptj"),qKr.forEach(t),e9o=r(oAe," \u2014 "),MN=n(oAe,"A",{href:!0});var NKr=s(MN);o9o=r(NKr,"GPTJForCausalLM"),NKr.forEach(t),r9o=r(oAe," (GPT-J model)"),oAe.forEach(t),t9o=i(W),P_=n(W,"LI",{});var rAe=s(P_);zle=n(rAe,"STRONG",{});var jKr=s(zle);a9o=r(jKr,"marian"),jKr.forEach(t),n9o=r(rAe," \u2014 "),EN=n(rAe,"A",{href:!0});var DKr=s(EN);s9o=r(DKr,"MarianForCausalLM"),DKr.forEach(t),l9o=r(rAe," (Marian model)"),rAe.forEach(t),i9o=i(W),I_=n(W,"LI",{});var tAe=s(I_);Qle=n(tAe,"STRONG",{});var GKr=s(Qle);d9o=r(GKr,"mbart"),GKr.forEach(t),c9o=r(tAe," \u2014 "),CN=n(tAe,"A",{href:!0});var OKr=s(CN);f9o=r(OKr,"MBartForCausalLM"),OKr.forEach(t),m9o=r(tAe," (mBART model)"),tAe.forEach(t),g9o=i(W),q_=n(W,"LI",{});var aAe=s(q_);Wle=n(aAe,"STRONG",{});var VKr=s(Wle);h9o=r(VKr,"megatron-bert"),VKr.forEach(t),p9o=r(aAe," \u2014 "),wN=n(aAe,"A",{href:!0});var XKr=s(wN);u9o=r(XKr,"MegatronBertForCausalLM"),XKr.forEach(t),_9o=r(aAe," (MegatronBert model)"),aAe.forEach(t),b9o=i(W),N_=n(W,"LI",{});var nAe=s(N_);Hle=n(nAe,"STRONG",{});var zKr=s(Hle);v9o=r(zKr,"openai-gpt"),zKr.forEach(t),F9o=r(nAe," \u2014 "),AN=n(nAe,"A",{href:!0});var QKr=s(AN);T9o=r(QKr,"OpenAIGPTLMHeadModel"),QKr.forEach(t),M9o=r(nAe," (OpenAI GPT model)"),nAe.forEach(t),E9o=i(W),j_=n(W,"LI",{});var sAe=s(j_);Ule=n(sAe,"STRONG",{});var WKr=s(Ule);C9o=r(WKr,"pegasus"),WKr.forEach(t),w9o=r(sAe," \u2014 "),yN=n(sAe,"A",{href:!0});var HKr=s(yN);A9o=r(HKr,"PegasusForCausalLM"),HKr.forEach(t),y9o=r(sAe," (Pegasus model)"),sAe.forEach(t),L9o=i(W),D_=n(W,"LI",{});var lAe=s(D_);Jle=n(lAe,"STRONG",{});var UKr=s(Jle);x9o=r(UKr,"plbart"),UKr.forEach(t),$9o=r(lAe," \u2014 "),LN=n(lAe,"A",{href:!0});var JKr=s(LN);k9o=r(JKr,"PLBartForCausalLM"),JKr.forEach(t),S9o=r(lAe," (PLBart model)"),lAe.forEach(t),R9o=i(W),G_=n(W,"LI",{});var iAe=s(G_);Yle=n(iAe,"STRONG",{});var YKr=s(Yle);B9o=r(YKr,"prophetnet"),YKr.forEach(t),P9o=r(iAe," \u2014 "),xN=n(iAe,"A",{href:!0});var KKr=s(xN);I9o=r(KKr,"ProphetNetForCausalLM"),KKr.forEach(t),q9o=r(iAe," (ProphetNet model)"),iAe.forEach(t),N9o=i(W),O_=n(W,"LI",{});var dAe=s(O_);Kle=n(dAe,"STRONG",{});var ZKr=s(Kle);j9o=r(ZKr,"qdqbert"),ZKr.forEach(t),D9o=r(dAe," \u2014 "),$N=n(dAe,"A",{href:!0});var eZr=s($N);G9o=r(eZr,"QDQBertLMHeadModel"),eZr.forEach(t),O9o=r(dAe," (QDQBert model)"),dAe.forEach(t),V9o=i(W),V_=n(W,"LI",{});var cAe=s(V_);Zle=n(cAe,"STRONG",{});var oZr=s(Zle);X9o=r(oZr,"reformer"),oZr.forEach(t),z9o=r(cAe," \u2014 "),kN=n(cAe,"A",{href:!0});var rZr=s(kN);Q9o=r(rZr,"ReformerModelWithLMHead"),rZr.forEach(t),W9o=r(cAe," (Reformer model)"),cAe.forEach(t),H9o=i(W),X_=n(W,"LI",{});var fAe=s(X_);eie=n(fAe,"STRONG",{});var tZr=s(eie);U9o=r(tZr,"rembert"),tZr.forEach(t),J9o=r(fAe," \u2014 "),SN=n(fAe,"A",{href:!0});var aZr=s(SN);Y9o=r(aZr,"RemBertForCausalLM"),aZr.forEach(t),K9o=r(fAe," (RemBERT model)"),fAe.forEach(t),Z9o=i(W),z_=n(W,"LI",{});var mAe=s(z_);oie=n(mAe,"STRONG",{});var nZr=s(oie);eMo=r(nZr,"roberta"),nZr.forEach(t),oMo=r(mAe," \u2014 "),RN=n(mAe,"A",{href:!0});var sZr=s(RN);rMo=r(sZr,"RobertaForCausalLM"),sZr.forEach(t),tMo=r(mAe," (RoBERTa model)"),mAe.forEach(t),aMo=i(W),Q_=n(W,"LI",{});var gAe=s(Q_);rie=n(gAe,"STRONG",{});var lZr=s(rie);nMo=r(lZr,"roformer"),lZr.forEach(t),sMo=r(gAe," \u2014 "),BN=n(gAe,"A",{href:!0});var iZr=s(BN);lMo=r(iZr,"RoFormerForCausalLM"),iZr.forEach(t),iMo=r(gAe," (RoFormer model)"),gAe.forEach(t),dMo=i(W),W_=n(W,"LI",{});var hAe=s(W_);tie=n(hAe,"STRONG",{});var dZr=s(tie);cMo=r(dZr,"speech_to_text_2"),dZr.forEach(t),fMo=r(hAe," \u2014 "),PN=n(hAe,"A",{href:!0});var cZr=s(PN);mMo=r(cZr,"Speech2Text2ForCausalLM"),cZr.forEach(t),gMo=r(hAe," (Speech2Text2 model)"),hAe.forEach(t),hMo=i(W),H_=n(W,"LI",{});var pAe=s(H_);aie=n(pAe,"STRONG",{});var fZr=s(aie);pMo=r(fZr,"transfo-xl"),fZr.forEach(t),uMo=r(pAe," \u2014 "),IN=n(pAe,"A",{href:!0});var mZr=s(IN);_Mo=r(mZr,"TransfoXLLMHeadModel"),mZr.forEach(t),bMo=r(pAe," (Transformer-XL model)"),pAe.forEach(t),vMo=i(W),U_=n(W,"LI",{});var uAe=s(U_);nie=n(uAe,"STRONG",{});var gZr=s(nie);FMo=r(gZr,"trocr"),gZr.forEach(t),TMo=r(uAe," \u2014 "),qN=n(uAe,"A",{href:!0});var hZr=s(qN);MMo=r(hZr,"TrOCRForCausalLM"),hZr.forEach(t),EMo=r(uAe," (TrOCR model)"),uAe.forEach(t),CMo=i(W),J_=n(W,"LI",{});var _Ae=s(J_);sie=n(_Ae,"STRONG",{});var pZr=s(sie);wMo=r(pZr,"xglm"),pZr.forEach(t),AMo=r(_Ae," \u2014 "),NN=n(_Ae,"A",{href:!0});var uZr=s(NN);yMo=r(uZr,"XGLMForCausalLM"),uZr.forEach(t),LMo=r(_Ae," (XGLM model)"),_Ae.forEach(t),xMo=i(W),Y_=n(W,"LI",{});var bAe=s(Y_);lie=n(bAe,"STRONG",{});var _Zr=s(lie);$Mo=r(_Zr,"xlm"),_Zr.forEach(t),kMo=r(bAe," \u2014 "),jN=n(bAe,"A",{href:!0});var bZr=s(jN);SMo=r(bZr,"XLMWithLMHeadModel"),bZr.forEach(t),RMo=r(bAe," (XLM model)"),bAe.forEach(t),BMo=i(W),K_=n(W,"LI",{});var vAe=s(K_);iie=n(vAe,"STRONG",{});var vZr=s(iie);PMo=r(vZr,"xlm-prophetnet"),vZr.forEach(t),IMo=r(vAe," \u2014 "),DN=n(vAe,"A",{href:!0});var FZr=s(DN);qMo=r(FZr,"XLMProphetNetForCausalLM"),FZr.forEach(t),NMo=r(vAe," (XLMProphetNet model)"),vAe.forEach(t),jMo=i(W),Z_=n(W,"LI",{});var FAe=s(Z_);die=n(FAe,"STRONG",{});var TZr=s(die);DMo=r(TZr,"xlm-roberta"),TZr.forEach(t),GMo=r(FAe," \u2014 "),GN=n(FAe,"A",{href:!0});var MZr=s(GN);OMo=r(MZr,"XLMRobertaForCausalLM"),MZr.forEach(t),VMo=r(FAe," (XLM-RoBERTa model)"),FAe.forEach(t),XMo=i(W),e1=n(W,"LI",{});var TAe=s(e1);cie=n(TAe,"STRONG",{});var EZr=s(cie);zMo=r(EZr,"xlm-roberta-xl"),EZr.forEach(t),QMo=r(TAe," \u2014 "),ON=n(TAe,"A",{href:!0});var CZr=s(ON);WMo=r(CZr,"XLMRobertaXLForCausalLM"),CZr.forEach(t),HMo=r(TAe," (XLM-RoBERTa-XL model)"),TAe.forEach(t),UMo=i(W),o1=n(W,"LI",{});var MAe=s(o1);fie=n(MAe,"STRONG",{});var wZr=s(fie);JMo=r(wZr,"xlnet"),wZr.forEach(t),YMo=r(MAe," \u2014 "),VN=n(MAe,"A",{href:!0});var AZr=s(VN);KMo=r(AZr,"XLNetLMHeadModel"),AZr.forEach(t),ZMo=r(MAe," (XLNet model)"),MAe.forEach(t),W.forEach(t),e4o=i(oa),r1=n(oa,"P",{});var EAe=s(r1);o4o=r(EAe,"The model is set in evaluation mode by default using "),mie=n(EAe,"CODE",{});var yZr=s(mie);r4o=r(yZr,"model.eval()"),yZr.forEach(t),t4o=r(EAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gie=n(EAe,"CODE",{});var LZr=s(gie);a4o=r(LZr,"model.train()"),LZr.forEach(t),EAe.forEach(t),n4o=i(oa),T(t1.$$.fragment,oa),oa.forEach(t),Os.forEach(t),$Pe=i(f),ki=n(f,"H2",{class:!0});var Bqe=s(ki);a1=n(Bqe,"A",{id:!0,class:!0,href:!0});var xZr=s(a1);hie=n(xZr,"SPAN",{});var $Zr=s(hie);T(kA.$$.fragment,$Zr),$Zr.forEach(t),xZr.forEach(t),s4o=i(Bqe),pie=n(Bqe,"SPAN",{});var kZr=s(pie);l4o=r(kZr,"AutoModelForMaskedLM"),kZr.forEach(t),Bqe.forEach(t),kPe=i(f),ko=n(f,"DIV",{class:!0});var Vs=s(ko);T(SA.$$.fragment,Vs),i4o=i(Vs),Si=n(Vs,"P",{});var eK=s(Si);d4o=r(eK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),XN=n(eK,"A",{href:!0});var SZr=s(XN);c4o=r(SZr,"from_pretrained()"),SZr.forEach(t),f4o=r(eK," class method or the "),zN=n(eK,"A",{href:!0});var RZr=s(zN);m4o=r(RZr,"from_config()"),RZr.forEach(t),g4o=r(eK,` class
method.`),eK.forEach(t),h4o=i(Vs),RA=n(Vs,"P",{});var Pqe=s(RA);p4o=r(Pqe,"This class cannot be instantiated directly using "),uie=n(Pqe,"CODE",{});var BZr=s(uie);u4o=r(BZr,"__init__()"),BZr.forEach(t),_4o=r(Pqe," (throws an error)."),Pqe.forEach(t),b4o=i(Vs),at=n(Vs,"DIV",{class:!0});var KC=s(at);T(BA.$$.fragment,KC),v4o=i(KC),_ie=n(KC,"P",{});var PZr=s(_ie);F4o=r(PZr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),PZr.forEach(t),T4o=i(KC),Ri=n(KC,"P",{});var oK=s(Ri);M4o=r(oK,`Note:
Loading a model from its configuration file does `),bie=n(oK,"STRONG",{});var IZr=s(bie);E4o=r(IZr,"not"),IZr.forEach(t),C4o=r(oK,` load the model weights. It only affects the
model\u2019s configuration. Use `),QN=n(oK,"A",{href:!0});var qZr=s(QN);w4o=r(qZr,"from_pretrained()"),qZr.forEach(t),A4o=r(oK," to load the model weights."),oK.forEach(t),y4o=i(KC),T(n1.$$.fragment,KC),KC.forEach(t),L4o=i(Vs),Ye=n(Vs,"DIV",{class:!0});var ra=s(Ye);T(PA.$$.fragment,ra),x4o=i(ra),vie=n(ra,"P",{});var NZr=s(vie);$4o=r(NZr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),NZr.forEach(t),k4o=i(ra),xa=n(ra,"P",{});var ZC=s(xa);S4o=r(ZC,"The model class to instantiate is selected based on the "),Fie=n(ZC,"CODE",{});var jZr=s(Fie);R4o=r(jZr,"model_type"),jZr.forEach(t),B4o=r(ZC,` property of the config object (either
passed as an argument or loaded from `),Tie=n(ZC,"CODE",{});var DZr=s(Tie);P4o=r(DZr,"pretrained_model_name_or_path"),DZr.forEach(t),I4o=r(ZC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mie=n(ZC,"CODE",{});var GZr=s(Mie);q4o=r(GZr,"pretrained_model_name_or_path"),GZr.forEach(t),N4o=r(ZC,":"),ZC.forEach(t),j4o=i(ra),Q=n(ra,"UL",{});var H=s(Q);s1=n(H,"LI",{});var CAe=s(s1);Eie=n(CAe,"STRONG",{});var OZr=s(Eie);D4o=r(OZr,"albert"),OZr.forEach(t),G4o=r(CAe," \u2014 "),WN=n(CAe,"A",{href:!0});var VZr=s(WN);O4o=r(VZr,"AlbertForMaskedLM"),VZr.forEach(t),V4o=r(CAe," (ALBERT model)"),CAe.forEach(t),X4o=i(H),l1=n(H,"LI",{});var wAe=s(l1);Cie=n(wAe,"STRONG",{});var XZr=s(Cie);z4o=r(XZr,"bart"),XZr.forEach(t),Q4o=r(wAe," \u2014 "),HN=n(wAe,"A",{href:!0});var zZr=s(HN);W4o=r(zZr,"BartForConditionalGeneration"),zZr.forEach(t),H4o=r(wAe," (BART model)"),wAe.forEach(t),U4o=i(H),i1=n(H,"LI",{});var AAe=s(i1);wie=n(AAe,"STRONG",{});var QZr=s(wie);J4o=r(QZr,"bert"),QZr.forEach(t),Y4o=r(AAe," \u2014 "),UN=n(AAe,"A",{href:!0});var WZr=s(UN);K4o=r(WZr,"BertForMaskedLM"),WZr.forEach(t),Z4o=r(AAe," (BERT model)"),AAe.forEach(t),eEo=i(H),d1=n(H,"LI",{});var yAe=s(d1);Aie=n(yAe,"STRONG",{});var HZr=s(Aie);oEo=r(HZr,"big_bird"),HZr.forEach(t),rEo=r(yAe," \u2014 "),JN=n(yAe,"A",{href:!0});var UZr=s(JN);tEo=r(UZr,"BigBirdForMaskedLM"),UZr.forEach(t),aEo=r(yAe," (BigBird model)"),yAe.forEach(t),nEo=i(H),c1=n(H,"LI",{});var LAe=s(c1);yie=n(LAe,"STRONG",{});var JZr=s(yie);sEo=r(JZr,"camembert"),JZr.forEach(t),lEo=r(LAe," \u2014 "),YN=n(LAe,"A",{href:!0});var YZr=s(YN);iEo=r(YZr,"CamembertForMaskedLM"),YZr.forEach(t),dEo=r(LAe," (CamemBERT model)"),LAe.forEach(t),cEo=i(H),f1=n(H,"LI",{});var xAe=s(f1);Lie=n(xAe,"STRONG",{});var KZr=s(Lie);fEo=r(KZr,"convbert"),KZr.forEach(t),mEo=r(xAe," \u2014 "),KN=n(xAe,"A",{href:!0});var ZZr=s(KN);gEo=r(ZZr,"ConvBertForMaskedLM"),ZZr.forEach(t),hEo=r(xAe," (ConvBERT model)"),xAe.forEach(t),pEo=i(H),m1=n(H,"LI",{});var $Ae=s(m1);xie=n($Ae,"STRONG",{});var eet=s(xie);uEo=r(eet,"data2vec-text"),eet.forEach(t),_Eo=r($Ae," \u2014 "),ZN=n($Ae,"A",{href:!0});var oet=s(ZN);bEo=r(oet,"Data2VecTextForMaskedLM"),oet.forEach(t),vEo=r($Ae," (Data2VecText model)"),$Ae.forEach(t),FEo=i(H),g1=n(H,"LI",{});var kAe=s(g1);$ie=n(kAe,"STRONG",{});var ret=s($ie);TEo=r(ret,"deberta"),ret.forEach(t),MEo=r(kAe," \u2014 "),ej=n(kAe,"A",{href:!0});var tet=s(ej);EEo=r(tet,"DebertaForMaskedLM"),tet.forEach(t),CEo=r(kAe," (DeBERTa model)"),kAe.forEach(t),wEo=i(H),h1=n(H,"LI",{});var SAe=s(h1);kie=n(SAe,"STRONG",{});var aet=s(kie);AEo=r(aet,"deberta-v2"),aet.forEach(t),yEo=r(SAe," \u2014 "),oj=n(SAe,"A",{href:!0});var net=s(oj);LEo=r(net,"DebertaV2ForMaskedLM"),net.forEach(t),xEo=r(SAe," (DeBERTa-v2 model)"),SAe.forEach(t),$Eo=i(H),p1=n(H,"LI",{});var RAe=s(p1);Sie=n(RAe,"STRONG",{});var set=s(Sie);kEo=r(set,"distilbert"),set.forEach(t),SEo=r(RAe," \u2014 "),rj=n(RAe,"A",{href:!0});var iet=s(rj);REo=r(iet,"DistilBertForMaskedLM"),iet.forEach(t),BEo=r(RAe," (DistilBERT model)"),RAe.forEach(t),PEo=i(H),u1=n(H,"LI",{});var BAe=s(u1);Rie=n(BAe,"STRONG",{});var det=s(Rie);IEo=r(det,"electra"),det.forEach(t),qEo=r(BAe," \u2014 "),tj=n(BAe,"A",{href:!0});var cet=s(tj);NEo=r(cet,"ElectraForMaskedLM"),cet.forEach(t),jEo=r(BAe," (ELECTRA model)"),BAe.forEach(t),DEo=i(H),_1=n(H,"LI",{});var PAe=s(_1);Bie=n(PAe,"STRONG",{});var fet=s(Bie);GEo=r(fet,"flaubert"),fet.forEach(t),OEo=r(PAe," \u2014 "),aj=n(PAe,"A",{href:!0});var met=s(aj);VEo=r(met,"FlaubertWithLMHeadModel"),met.forEach(t),XEo=r(PAe," (FlauBERT model)"),PAe.forEach(t),zEo=i(H),b1=n(H,"LI",{});var IAe=s(b1);Pie=n(IAe,"STRONG",{});var get=s(Pie);QEo=r(get,"fnet"),get.forEach(t),WEo=r(IAe," \u2014 "),nj=n(IAe,"A",{href:!0});var het=s(nj);HEo=r(het,"FNetForMaskedLM"),het.forEach(t),UEo=r(IAe," (FNet model)"),IAe.forEach(t),JEo=i(H),v1=n(H,"LI",{});var qAe=s(v1);Iie=n(qAe,"STRONG",{});var pet=s(Iie);YEo=r(pet,"funnel"),pet.forEach(t),KEo=r(qAe," \u2014 "),sj=n(qAe,"A",{href:!0});var uet=s(sj);ZEo=r(uet,"FunnelForMaskedLM"),uet.forEach(t),e5o=r(qAe," (Funnel Transformer model)"),qAe.forEach(t),o5o=i(H),F1=n(H,"LI",{});var NAe=s(F1);qie=n(NAe,"STRONG",{});var _et=s(qie);r5o=r(_et,"ibert"),_et.forEach(t),t5o=r(NAe," \u2014 "),lj=n(NAe,"A",{href:!0});var bet=s(lj);a5o=r(bet,"IBertForMaskedLM"),bet.forEach(t),n5o=r(NAe," (I-BERT model)"),NAe.forEach(t),s5o=i(H),T1=n(H,"LI",{});var jAe=s(T1);Nie=n(jAe,"STRONG",{});var vet=s(Nie);l5o=r(vet,"layoutlm"),vet.forEach(t),i5o=r(jAe," \u2014 "),ij=n(jAe,"A",{href:!0});var Fet=s(ij);d5o=r(Fet,"LayoutLMForMaskedLM"),Fet.forEach(t),c5o=r(jAe," (LayoutLM model)"),jAe.forEach(t),f5o=i(H),M1=n(H,"LI",{});var DAe=s(M1);jie=n(DAe,"STRONG",{});var Tet=s(jie);m5o=r(Tet,"longformer"),Tet.forEach(t),g5o=r(DAe," \u2014 "),dj=n(DAe,"A",{href:!0});var Met=s(dj);h5o=r(Met,"LongformerForMaskedLM"),Met.forEach(t),p5o=r(DAe," (Longformer model)"),DAe.forEach(t),u5o=i(H),E1=n(H,"LI",{});var GAe=s(E1);Die=n(GAe,"STRONG",{});var Eet=s(Die);_5o=r(Eet,"mbart"),Eet.forEach(t),b5o=r(GAe," \u2014 "),cj=n(GAe,"A",{href:!0});var Cet=s(cj);v5o=r(Cet,"MBartForConditionalGeneration"),Cet.forEach(t),F5o=r(GAe," (mBART model)"),GAe.forEach(t),T5o=i(H),C1=n(H,"LI",{});var OAe=s(C1);Gie=n(OAe,"STRONG",{});var wet=s(Gie);M5o=r(wet,"megatron-bert"),wet.forEach(t),E5o=r(OAe," \u2014 "),fj=n(OAe,"A",{href:!0});var Aet=s(fj);C5o=r(Aet,"MegatronBertForMaskedLM"),Aet.forEach(t),w5o=r(OAe," (MegatronBert model)"),OAe.forEach(t),A5o=i(H),w1=n(H,"LI",{});var VAe=s(w1);Oie=n(VAe,"STRONG",{});var yet=s(Oie);y5o=r(yet,"mobilebert"),yet.forEach(t),L5o=r(VAe," \u2014 "),mj=n(VAe,"A",{href:!0});var Let=s(mj);x5o=r(Let,"MobileBertForMaskedLM"),Let.forEach(t),$5o=r(VAe," (MobileBERT model)"),VAe.forEach(t),k5o=i(H),A1=n(H,"LI",{});var XAe=s(A1);Vie=n(XAe,"STRONG",{});var xet=s(Vie);S5o=r(xet,"mpnet"),xet.forEach(t),R5o=r(XAe," \u2014 "),gj=n(XAe,"A",{href:!0});var $et=s(gj);B5o=r($et,"MPNetForMaskedLM"),$et.forEach(t),P5o=r(XAe," (MPNet model)"),XAe.forEach(t),I5o=i(H),y1=n(H,"LI",{});var zAe=s(y1);Xie=n(zAe,"STRONG",{});var ket=s(Xie);q5o=r(ket,"nystromformer"),ket.forEach(t),N5o=r(zAe," \u2014 "),hj=n(zAe,"A",{href:!0});var Set=s(hj);j5o=r(Set,"NystromformerForMaskedLM"),Set.forEach(t),D5o=r(zAe," (Nystromformer model)"),zAe.forEach(t),G5o=i(H),L1=n(H,"LI",{});var QAe=s(L1);zie=n(QAe,"STRONG",{});var Ret=s(zie);O5o=r(Ret,"perceiver"),Ret.forEach(t),V5o=r(QAe," \u2014 "),pj=n(QAe,"A",{href:!0});var Bet=s(pj);X5o=r(Bet,"PerceiverForMaskedLM"),Bet.forEach(t),z5o=r(QAe," (Perceiver model)"),QAe.forEach(t),Q5o=i(H),x1=n(H,"LI",{});var WAe=s(x1);Qie=n(WAe,"STRONG",{});var Pet=s(Qie);W5o=r(Pet,"qdqbert"),Pet.forEach(t),H5o=r(WAe," \u2014 "),uj=n(WAe,"A",{href:!0});var Iet=s(uj);U5o=r(Iet,"QDQBertForMaskedLM"),Iet.forEach(t),J5o=r(WAe," (QDQBert model)"),WAe.forEach(t),Y5o=i(H),$1=n(H,"LI",{});var HAe=s($1);Wie=n(HAe,"STRONG",{});var qet=s(Wie);K5o=r(qet,"reformer"),qet.forEach(t),Z5o=r(HAe," \u2014 "),_j=n(HAe,"A",{href:!0});var Net=s(_j);eCo=r(Net,"ReformerForMaskedLM"),Net.forEach(t),oCo=r(HAe," (Reformer model)"),HAe.forEach(t),rCo=i(H),k1=n(H,"LI",{});var UAe=s(k1);Hie=n(UAe,"STRONG",{});var jet=s(Hie);tCo=r(jet,"rembert"),jet.forEach(t),aCo=r(UAe," \u2014 "),bj=n(UAe,"A",{href:!0});var Det=s(bj);nCo=r(Det,"RemBertForMaskedLM"),Det.forEach(t),sCo=r(UAe," (RemBERT model)"),UAe.forEach(t),lCo=i(H),S1=n(H,"LI",{});var JAe=s(S1);Uie=n(JAe,"STRONG",{});var Get=s(Uie);iCo=r(Get,"roberta"),Get.forEach(t),dCo=r(JAe," \u2014 "),vj=n(JAe,"A",{href:!0});var Oet=s(vj);cCo=r(Oet,"RobertaForMaskedLM"),Oet.forEach(t),fCo=r(JAe," (RoBERTa model)"),JAe.forEach(t),mCo=i(H),R1=n(H,"LI",{});var YAe=s(R1);Jie=n(YAe,"STRONG",{});var Vet=s(Jie);gCo=r(Vet,"roformer"),Vet.forEach(t),hCo=r(YAe," \u2014 "),Fj=n(YAe,"A",{href:!0});var Xet=s(Fj);pCo=r(Xet,"RoFormerForMaskedLM"),Xet.forEach(t),uCo=r(YAe," (RoFormer model)"),YAe.forEach(t),_Co=i(H),B1=n(H,"LI",{});var KAe=s(B1);Yie=n(KAe,"STRONG",{});var zet=s(Yie);bCo=r(zet,"squeezebert"),zet.forEach(t),vCo=r(KAe," \u2014 "),Tj=n(KAe,"A",{href:!0});var Qet=s(Tj);FCo=r(Qet,"SqueezeBertForMaskedLM"),Qet.forEach(t),TCo=r(KAe," (SqueezeBERT model)"),KAe.forEach(t),MCo=i(H),P1=n(H,"LI",{});var ZAe=s(P1);Kie=n(ZAe,"STRONG",{});var Wet=s(Kie);ECo=r(Wet,"tapas"),Wet.forEach(t),CCo=r(ZAe," \u2014 "),Mj=n(ZAe,"A",{href:!0});var Het=s(Mj);wCo=r(Het,"TapasForMaskedLM"),Het.forEach(t),ACo=r(ZAe," (TAPAS model)"),ZAe.forEach(t),yCo=i(H),I1=n(H,"LI",{});var e0e=s(I1);Zie=n(e0e,"STRONG",{});var Uet=s(Zie);LCo=r(Uet,"wav2vec2"),Uet.forEach(t),xCo=r(e0e," \u2014 "),ede=n(e0e,"CODE",{});var Jet=s(ede);$Co=r(Jet,"Wav2Vec2ForMaskedLM"),Jet.forEach(t),kCo=r(e0e," (Wav2Vec2 model)"),e0e.forEach(t),SCo=i(H),q1=n(H,"LI",{});var o0e=s(q1);ode=n(o0e,"STRONG",{});var Yet=s(ode);RCo=r(Yet,"xlm"),Yet.forEach(t),BCo=r(o0e," \u2014 "),Ej=n(o0e,"A",{href:!0});var Ket=s(Ej);PCo=r(Ket,"XLMWithLMHeadModel"),Ket.forEach(t),ICo=r(o0e," (XLM model)"),o0e.forEach(t),qCo=i(H),N1=n(H,"LI",{});var r0e=s(N1);rde=n(r0e,"STRONG",{});var Zet=s(rde);NCo=r(Zet,"xlm-roberta"),Zet.forEach(t),jCo=r(r0e," \u2014 "),Cj=n(r0e,"A",{href:!0});var eot=s(Cj);DCo=r(eot,"XLMRobertaForMaskedLM"),eot.forEach(t),GCo=r(r0e," (XLM-RoBERTa model)"),r0e.forEach(t),OCo=i(H),j1=n(H,"LI",{});var t0e=s(j1);tde=n(t0e,"STRONG",{});var oot=s(tde);VCo=r(oot,"xlm-roberta-xl"),oot.forEach(t),XCo=r(t0e," \u2014 "),wj=n(t0e,"A",{href:!0});var rot=s(wj);zCo=r(rot,"XLMRobertaXLForMaskedLM"),rot.forEach(t),QCo=r(t0e," (XLM-RoBERTa-XL model)"),t0e.forEach(t),WCo=i(H),D1=n(H,"LI",{});var a0e=s(D1);ade=n(a0e,"STRONG",{});var tot=s(ade);HCo=r(tot,"yoso"),tot.forEach(t),UCo=r(a0e," \u2014 "),Aj=n(a0e,"A",{href:!0});var aot=s(Aj);JCo=r(aot,"YosoForMaskedLM"),aot.forEach(t),YCo=r(a0e," (YOSO model)"),a0e.forEach(t),H.forEach(t),KCo=i(ra),G1=n(ra,"P",{});var n0e=s(G1);ZCo=r(n0e,"The model is set in evaluation mode by default using "),nde=n(n0e,"CODE",{});var not=s(nde);e3o=r(not,"model.eval()"),not.forEach(t),o3o=r(n0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sde=n(n0e,"CODE",{});var sot=s(sde);r3o=r(sot,"model.train()"),sot.forEach(t),n0e.forEach(t),t3o=i(ra),T(O1.$$.fragment,ra),ra.forEach(t),Vs.forEach(t),SPe=i(f),Bi=n(f,"H2",{class:!0});var Iqe=s(Bi);V1=n(Iqe,"A",{id:!0,class:!0,href:!0});var lot=s(V1);lde=n(lot,"SPAN",{});var iot=s(lde);T(IA.$$.fragment,iot),iot.forEach(t),lot.forEach(t),a3o=i(Iqe),ide=n(Iqe,"SPAN",{});var dot=s(ide);n3o=r(dot,"AutoModelForSeq2SeqLM"),dot.forEach(t),Iqe.forEach(t),RPe=i(f),So=n(f,"DIV",{class:!0});var Xs=s(So);T(qA.$$.fragment,Xs),s3o=i(Xs),Pi=n(Xs,"P",{});var rK=s(Pi);l3o=r(rK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),yj=n(rK,"A",{href:!0});var cot=s(yj);i3o=r(cot,"from_pretrained()"),cot.forEach(t),d3o=r(rK," class method or the "),Lj=n(rK,"A",{href:!0});var fot=s(Lj);c3o=r(fot,"from_config()"),fot.forEach(t),f3o=r(rK,` class
method.`),rK.forEach(t),m3o=i(Xs),NA=n(Xs,"P",{});var qqe=s(NA);g3o=r(qqe,"This class cannot be instantiated directly using "),dde=n(qqe,"CODE",{});var mot=s(dde);h3o=r(mot,"__init__()"),mot.forEach(t),p3o=r(qqe," (throws an error)."),qqe.forEach(t),u3o=i(Xs),nt=n(Xs,"DIV",{class:!0});var e3=s(nt);T(jA.$$.fragment,e3),_3o=i(e3),cde=n(e3,"P",{});var got=s(cde);b3o=r(got,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),got.forEach(t),v3o=i(e3),Ii=n(e3,"P",{});var tK=s(Ii);F3o=r(tK,`Note:
Loading a model from its configuration file does `),fde=n(tK,"STRONG",{});var hot=s(fde);T3o=r(hot,"not"),hot.forEach(t),M3o=r(tK,` load the model weights. It only affects the
model\u2019s configuration. Use `),xj=n(tK,"A",{href:!0});var pot=s(xj);E3o=r(pot,"from_pretrained()"),pot.forEach(t),C3o=r(tK," to load the model weights."),tK.forEach(t),w3o=i(e3),T(X1.$$.fragment,e3),e3.forEach(t),A3o=i(Xs),Ke=n(Xs,"DIV",{class:!0});var ta=s(Ke);T(DA.$$.fragment,ta),y3o=i(ta),mde=n(ta,"P",{});var uot=s(mde);L3o=r(uot,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),uot.forEach(t),x3o=i(ta),$a=n(ta,"P",{});var o3=s($a);$3o=r(o3,"The model class to instantiate is selected based on the "),gde=n(o3,"CODE",{});var _ot=s(gde);k3o=r(_ot,"model_type"),_ot.forEach(t),S3o=r(o3,` property of the config object (either
passed as an argument or loaded from `),hde=n(o3,"CODE",{});var bot=s(hde);R3o=r(bot,"pretrained_model_name_or_path"),bot.forEach(t),B3o=r(o3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pde=n(o3,"CODE",{});var vot=s(pde);P3o=r(vot,"pretrained_model_name_or_path"),vot.forEach(t),I3o=r(o3,":"),o3.forEach(t),q3o=i(ta),he=n(ta,"UL",{});var ue=s(he);z1=n(ue,"LI",{});var s0e=s(z1);ude=n(s0e,"STRONG",{});var Fot=s(ude);N3o=r(Fot,"bart"),Fot.forEach(t),j3o=r(s0e," \u2014 "),$j=n(s0e,"A",{href:!0});var Tot=s($j);D3o=r(Tot,"BartForConditionalGeneration"),Tot.forEach(t),G3o=r(s0e," (BART model)"),s0e.forEach(t),O3o=i(ue),Q1=n(ue,"LI",{});var l0e=s(Q1);_de=n(l0e,"STRONG",{});var Mot=s(_de);V3o=r(Mot,"bigbird_pegasus"),Mot.forEach(t),X3o=r(l0e," \u2014 "),kj=n(l0e,"A",{href:!0});var Eot=s(kj);z3o=r(Eot,"BigBirdPegasusForConditionalGeneration"),Eot.forEach(t),Q3o=r(l0e," (BigBirdPegasus model)"),l0e.forEach(t),W3o=i(ue),W1=n(ue,"LI",{});var i0e=s(W1);bde=n(i0e,"STRONG",{});var Cot=s(bde);H3o=r(Cot,"blenderbot"),Cot.forEach(t),U3o=r(i0e," \u2014 "),Sj=n(i0e,"A",{href:!0});var wot=s(Sj);J3o=r(wot,"BlenderbotForConditionalGeneration"),wot.forEach(t),Y3o=r(i0e," (Blenderbot model)"),i0e.forEach(t),K3o=i(ue),H1=n(ue,"LI",{});var d0e=s(H1);vde=n(d0e,"STRONG",{});var Aot=s(vde);Z3o=r(Aot,"blenderbot-small"),Aot.forEach(t),ewo=r(d0e," \u2014 "),Rj=n(d0e,"A",{href:!0});var yot=s(Rj);owo=r(yot,"BlenderbotSmallForConditionalGeneration"),yot.forEach(t),rwo=r(d0e," (BlenderbotSmall model)"),d0e.forEach(t),two=i(ue),U1=n(ue,"LI",{});var c0e=s(U1);Fde=n(c0e,"STRONG",{});var Lot=s(Fde);awo=r(Lot,"encoder-decoder"),Lot.forEach(t),nwo=r(c0e," \u2014 "),Bj=n(c0e,"A",{href:!0});var xot=s(Bj);swo=r(xot,"EncoderDecoderModel"),xot.forEach(t),lwo=r(c0e," (Encoder decoder model)"),c0e.forEach(t),iwo=i(ue),J1=n(ue,"LI",{});var f0e=s(J1);Tde=n(f0e,"STRONG",{});var $ot=s(Tde);dwo=r($ot,"fsmt"),$ot.forEach(t),cwo=r(f0e," \u2014 "),Pj=n(f0e,"A",{href:!0});var kot=s(Pj);fwo=r(kot,"FSMTForConditionalGeneration"),kot.forEach(t),mwo=r(f0e," (FairSeq Machine-Translation model)"),f0e.forEach(t),gwo=i(ue),Y1=n(ue,"LI",{});var m0e=s(Y1);Mde=n(m0e,"STRONG",{});var Sot=s(Mde);hwo=r(Sot,"led"),Sot.forEach(t),pwo=r(m0e," \u2014 "),Ij=n(m0e,"A",{href:!0});var Rot=s(Ij);uwo=r(Rot,"LEDForConditionalGeneration"),Rot.forEach(t),_wo=r(m0e," (LED model)"),m0e.forEach(t),bwo=i(ue),K1=n(ue,"LI",{});var g0e=s(K1);Ede=n(g0e,"STRONG",{});var Bot=s(Ede);vwo=r(Bot,"m2m_100"),Bot.forEach(t),Fwo=r(g0e," \u2014 "),qj=n(g0e,"A",{href:!0});var Pot=s(qj);Two=r(Pot,"M2M100ForConditionalGeneration"),Pot.forEach(t),Mwo=r(g0e," (M2M100 model)"),g0e.forEach(t),Ewo=i(ue),Z1=n(ue,"LI",{});var h0e=s(Z1);Cde=n(h0e,"STRONG",{});var Iot=s(Cde);Cwo=r(Iot,"marian"),Iot.forEach(t),wwo=r(h0e," \u2014 "),Nj=n(h0e,"A",{href:!0});var qot=s(Nj);Awo=r(qot,"MarianMTModel"),qot.forEach(t),ywo=r(h0e," (Marian model)"),h0e.forEach(t),Lwo=i(ue),e8=n(ue,"LI",{});var p0e=s(e8);wde=n(p0e,"STRONG",{});var Not=s(wde);xwo=r(Not,"mbart"),Not.forEach(t),$wo=r(p0e," \u2014 "),jj=n(p0e,"A",{href:!0});var jot=s(jj);kwo=r(jot,"MBartForConditionalGeneration"),jot.forEach(t),Swo=r(p0e," (mBART model)"),p0e.forEach(t),Rwo=i(ue),o8=n(ue,"LI",{});var u0e=s(o8);Ade=n(u0e,"STRONG",{});var Dot=s(Ade);Bwo=r(Dot,"mt5"),Dot.forEach(t),Pwo=r(u0e," \u2014 "),Dj=n(u0e,"A",{href:!0});var Got=s(Dj);Iwo=r(Got,"MT5ForConditionalGeneration"),Got.forEach(t),qwo=r(u0e," (mT5 model)"),u0e.forEach(t),Nwo=i(ue),r8=n(ue,"LI",{});var _0e=s(r8);yde=n(_0e,"STRONG",{});var Oot=s(yde);jwo=r(Oot,"pegasus"),Oot.forEach(t),Dwo=r(_0e," \u2014 "),Gj=n(_0e,"A",{href:!0});var Vot=s(Gj);Gwo=r(Vot,"PegasusForConditionalGeneration"),Vot.forEach(t),Owo=r(_0e," (Pegasus model)"),_0e.forEach(t),Vwo=i(ue),t8=n(ue,"LI",{});var b0e=s(t8);Lde=n(b0e,"STRONG",{});var Xot=s(Lde);Xwo=r(Xot,"plbart"),Xot.forEach(t),zwo=r(b0e," \u2014 "),Oj=n(b0e,"A",{href:!0});var zot=s(Oj);Qwo=r(zot,"PLBartForConditionalGeneration"),zot.forEach(t),Wwo=r(b0e," (PLBart model)"),b0e.forEach(t),Hwo=i(ue),a8=n(ue,"LI",{});var v0e=s(a8);xde=n(v0e,"STRONG",{});var Qot=s(xde);Uwo=r(Qot,"prophetnet"),Qot.forEach(t),Jwo=r(v0e," \u2014 "),Vj=n(v0e,"A",{href:!0});var Wot=s(Vj);Ywo=r(Wot,"ProphetNetForConditionalGeneration"),Wot.forEach(t),Kwo=r(v0e," (ProphetNet model)"),v0e.forEach(t),Zwo=i(ue),n8=n(ue,"LI",{});var F0e=s(n8);$de=n(F0e,"STRONG",{});var Hot=s($de);eAo=r(Hot,"t5"),Hot.forEach(t),oAo=r(F0e," \u2014 "),Xj=n(F0e,"A",{href:!0});var Uot=s(Xj);rAo=r(Uot,"T5ForConditionalGeneration"),Uot.forEach(t),tAo=r(F0e," (T5 model)"),F0e.forEach(t),aAo=i(ue),s8=n(ue,"LI",{});var T0e=s(s8);kde=n(T0e,"STRONG",{});var Jot=s(kde);nAo=r(Jot,"tapex"),Jot.forEach(t),sAo=r(T0e," \u2014 "),zj=n(T0e,"A",{href:!0});var Yot=s(zj);lAo=r(Yot,"BartForConditionalGeneration"),Yot.forEach(t),iAo=r(T0e," (TAPEX model)"),T0e.forEach(t),dAo=i(ue),l8=n(ue,"LI",{});var M0e=s(l8);Sde=n(M0e,"STRONG",{});var Kot=s(Sde);cAo=r(Kot,"xlm-prophetnet"),Kot.forEach(t),fAo=r(M0e," \u2014 "),Qj=n(M0e,"A",{href:!0});var Zot=s(Qj);mAo=r(Zot,"XLMProphetNetForConditionalGeneration"),Zot.forEach(t),gAo=r(M0e," (XLMProphetNet model)"),M0e.forEach(t),ue.forEach(t),hAo=i(ta),i8=n(ta,"P",{});var E0e=s(i8);pAo=r(E0e,"The model is set in evaluation mode by default using "),Rde=n(E0e,"CODE",{});var ert=s(Rde);uAo=r(ert,"model.eval()"),ert.forEach(t),_Ao=r(E0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bde=n(E0e,"CODE",{});var ort=s(Bde);bAo=r(ort,"model.train()"),ort.forEach(t),E0e.forEach(t),vAo=i(ta),T(d8.$$.fragment,ta),ta.forEach(t),Xs.forEach(t),BPe=i(f),qi=n(f,"H2",{class:!0});var Nqe=s(qi);c8=n(Nqe,"A",{id:!0,class:!0,href:!0});var rrt=s(c8);Pde=n(rrt,"SPAN",{});var trt=s(Pde);T(GA.$$.fragment,trt),trt.forEach(t),rrt.forEach(t),FAo=i(Nqe),Ide=n(Nqe,"SPAN",{});var art=s(Ide);TAo=r(art,"AutoModelForSequenceClassification"),art.forEach(t),Nqe.forEach(t),PPe=i(f),Ro=n(f,"DIV",{class:!0});var zs=s(Ro);T(OA.$$.fragment,zs),MAo=i(zs),Ni=n(zs,"P",{});var aK=s(Ni);EAo=r(aK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Wj=n(aK,"A",{href:!0});var nrt=s(Wj);CAo=r(nrt,"from_pretrained()"),nrt.forEach(t),wAo=r(aK," class method or the "),Hj=n(aK,"A",{href:!0});var srt=s(Hj);AAo=r(srt,"from_config()"),srt.forEach(t),yAo=r(aK,` class
method.`),aK.forEach(t),LAo=i(zs),VA=n(zs,"P",{});var jqe=s(VA);xAo=r(jqe,"This class cannot be instantiated directly using "),qde=n(jqe,"CODE",{});var lrt=s(qde);$Ao=r(lrt,"__init__()"),lrt.forEach(t),kAo=r(jqe," (throws an error)."),jqe.forEach(t),SAo=i(zs),st=n(zs,"DIV",{class:!0});var r3=s(st);T(XA.$$.fragment,r3),RAo=i(r3),Nde=n(r3,"P",{});var irt=s(Nde);BAo=r(irt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),irt.forEach(t),PAo=i(r3),ji=n(r3,"P",{});var nK=s(ji);IAo=r(nK,`Note:
Loading a model from its configuration file does `),jde=n(nK,"STRONG",{});var drt=s(jde);qAo=r(drt,"not"),drt.forEach(t),NAo=r(nK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uj=n(nK,"A",{href:!0});var crt=s(Uj);jAo=r(crt,"from_pretrained()"),crt.forEach(t),DAo=r(nK," to load the model weights."),nK.forEach(t),GAo=i(r3),T(f8.$$.fragment,r3),r3.forEach(t),OAo=i(zs),Ze=n(zs,"DIV",{class:!0});var aa=s(Ze);T(zA.$$.fragment,aa),VAo=i(aa),Dde=n(aa,"P",{});var frt=s(Dde);XAo=r(frt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),frt.forEach(t),zAo=i(aa),ka=n(aa,"P",{});var t3=s(ka);QAo=r(t3,"The model class to instantiate is selected based on the "),Gde=n(t3,"CODE",{});var mrt=s(Gde);WAo=r(mrt,"model_type"),mrt.forEach(t),HAo=r(t3,` property of the config object (either
passed as an argument or loaded from `),Ode=n(t3,"CODE",{});var grt=s(Ode);UAo=r(grt,"pretrained_model_name_or_path"),grt.forEach(t),JAo=r(t3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vde=n(t3,"CODE",{});var hrt=s(Vde);YAo=r(hrt,"pretrained_model_name_or_path"),hrt.forEach(t),KAo=r(t3,":"),t3.forEach(t),ZAo=i(aa),q=n(aa,"UL",{});var j=s(q);m8=n(j,"LI",{});var C0e=s(m8);Xde=n(C0e,"STRONG",{});var prt=s(Xde);e0o=r(prt,"albert"),prt.forEach(t),o0o=r(C0e," \u2014 "),Jj=n(C0e,"A",{href:!0});var urt=s(Jj);r0o=r(urt,"AlbertForSequenceClassification"),urt.forEach(t),t0o=r(C0e," (ALBERT model)"),C0e.forEach(t),a0o=i(j),g8=n(j,"LI",{});var w0e=s(g8);zde=n(w0e,"STRONG",{});var _rt=s(zde);n0o=r(_rt,"bart"),_rt.forEach(t),s0o=r(w0e," \u2014 "),Yj=n(w0e,"A",{href:!0});var brt=s(Yj);l0o=r(brt,"BartForSequenceClassification"),brt.forEach(t),i0o=r(w0e," (BART model)"),w0e.forEach(t),d0o=i(j),h8=n(j,"LI",{});var A0e=s(h8);Qde=n(A0e,"STRONG",{});var vrt=s(Qde);c0o=r(vrt,"bert"),vrt.forEach(t),f0o=r(A0e," \u2014 "),Kj=n(A0e,"A",{href:!0});var Frt=s(Kj);m0o=r(Frt,"BertForSequenceClassification"),Frt.forEach(t),g0o=r(A0e," (BERT model)"),A0e.forEach(t),h0o=i(j),p8=n(j,"LI",{});var y0e=s(p8);Wde=n(y0e,"STRONG",{});var Trt=s(Wde);p0o=r(Trt,"big_bird"),Trt.forEach(t),u0o=r(y0e," \u2014 "),Zj=n(y0e,"A",{href:!0});var Mrt=s(Zj);_0o=r(Mrt,"BigBirdForSequenceClassification"),Mrt.forEach(t),b0o=r(y0e," (BigBird model)"),y0e.forEach(t),v0o=i(j),u8=n(j,"LI",{});var L0e=s(u8);Hde=n(L0e,"STRONG",{});var Ert=s(Hde);F0o=r(Ert,"bigbird_pegasus"),Ert.forEach(t),T0o=r(L0e," \u2014 "),eD=n(L0e,"A",{href:!0});var Crt=s(eD);M0o=r(Crt,"BigBirdPegasusForSequenceClassification"),Crt.forEach(t),E0o=r(L0e," (BigBirdPegasus model)"),L0e.forEach(t),C0o=i(j),_8=n(j,"LI",{});var x0e=s(_8);Ude=n(x0e,"STRONG",{});var wrt=s(Ude);w0o=r(wrt,"camembert"),wrt.forEach(t),A0o=r(x0e," \u2014 "),oD=n(x0e,"A",{href:!0});var Art=s(oD);y0o=r(Art,"CamembertForSequenceClassification"),Art.forEach(t),L0o=r(x0e," (CamemBERT model)"),x0e.forEach(t),x0o=i(j),b8=n(j,"LI",{});var $0e=s(b8);Jde=n($0e,"STRONG",{});var yrt=s(Jde);$0o=r(yrt,"canine"),yrt.forEach(t),k0o=r($0e," \u2014 "),rD=n($0e,"A",{href:!0});var Lrt=s(rD);S0o=r(Lrt,"CanineForSequenceClassification"),Lrt.forEach(t),R0o=r($0e," (Canine model)"),$0e.forEach(t),B0o=i(j),v8=n(j,"LI",{});var k0e=s(v8);Yde=n(k0e,"STRONG",{});var xrt=s(Yde);P0o=r(xrt,"convbert"),xrt.forEach(t),I0o=r(k0e," \u2014 "),tD=n(k0e,"A",{href:!0});var $rt=s(tD);q0o=r($rt,"ConvBertForSequenceClassification"),$rt.forEach(t),N0o=r(k0e," (ConvBERT model)"),k0e.forEach(t),j0o=i(j),F8=n(j,"LI",{});var S0e=s(F8);Kde=n(S0e,"STRONG",{});var krt=s(Kde);D0o=r(krt,"ctrl"),krt.forEach(t),G0o=r(S0e," \u2014 "),aD=n(S0e,"A",{href:!0});var Srt=s(aD);O0o=r(Srt,"CTRLForSequenceClassification"),Srt.forEach(t),V0o=r(S0e," (CTRL model)"),S0e.forEach(t),X0o=i(j),T8=n(j,"LI",{});var R0e=s(T8);Zde=n(R0e,"STRONG",{});var Rrt=s(Zde);z0o=r(Rrt,"data2vec-text"),Rrt.forEach(t),Q0o=r(R0e," \u2014 "),nD=n(R0e,"A",{href:!0});var Brt=s(nD);W0o=r(Brt,"Data2VecTextForSequenceClassification"),Brt.forEach(t),H0o=r(R0e," (Data2VecText model)"),R0e.forEach(t),U0o=i(j),M8=n(j,"LI",{});var B0e=s(M8);ece=n(B0e,"STRONG",{});var Prt=s(ece);J0o=r(Prt,"deberta"),Prt.forEach(t),Y0o=r(B0e," \u2014 "),sD=n(B0e,"A",{href:!0});var Irt=s(sD);K0o=r(Irt,"DebertaForSequenceClassification"),Irt.forEach(t),Z0o=r(B0e," (DeBERTa model)"),B0e.forEach(t),eyo=i(j),E8=n(j,"LI",{});var P0e=s(E8);oce=n(P0e,"STRONG",{});var qrt=s(oce);oyo=r(qrt,"deberta-v2"),qrt.forEach(t),ryo=r(P0e," \u2014 "),lD=n(P0e,"A",{href:!0});var Nrt=s(lD);tyo=r(Nrt,"DebertaV2ForSequenceClassification"),Nrt.forEach(t),ayo=r(P0e," (DeBERTa-v2 model)"),P0e.forEach(t),nyo=i(j),C8=n(j,"LI",{});var I0e=s(C8);rce=n(I0e,"STRONG",{});var jrt=s(rce);syo=r(jrt,"distilbert"),jrt.forEach(t),lyo=r(I0e," \u2014 "),iD=n(I0e,"A",{href:!0});var Drt=s(iD);iyo=r(Drt,"DistilBertForSequenceClassification"),Drt.forEach(t),dyo=r(I0e," (DistilBERT model)"),I0e.forEach(t),cyo=i(j),w8=n(j,"LI",{});var q0e=s(w8);tce=n(q0e,"STRONG",{});var Grt=s(tce);fyo=r(Grt,"electra"),Grt.forEach(t),myo=r(q0e," \u2014 "),dD=n(q0e,"A",{href:!0});var Ort=s(dD);gyo=r(Ort,"ElectraForSequenceClassification"),Ort.forEach(t),hyo=r(q0e," (ELECTRA model)"),q0e.forEach(t),pyo=i(j),A8=n(j,"LI",{});var N0e=s(A8);ace=n(N0e,"STRONG",{});var Vrt=s(ace);uyo=r(Vrt,"flaubert"),Vrt.forEach(t),_yo=r(N0e," \u2014 "),cD=n(N0e,"A",{href:!0});var Xrt=s(cD);byo=r(Xrt,"FlaubertForSequenceClassification"),Xrt.forEach(t),vyo=r(N0e," (FlauBERT model)"),N0e.forEach(t),Fyo=i(j),y8=n(j,"LI",{});var j0e=s(y8);nce=n(j0e,"STRONG",{});var zrt=s(nce);Tyo=r(zrt,"fnet"),zrt.forEach(t),Myo=r(j0e," \u2014 "),fD=n(j0e,"A",{href:!0});var Qrt=s(fD);Eyo=r(Qrt,"FNetForSequenceClassification"),Qrt.forEach(t),Cyo=r(j0e," (FNet model)"),j0e.forEach(t),wyo=i(j),L8=n(j,"LI",{});var D0e=s(L8);sce=n(D0e,"STRONG",{});var Wrt=s(sce);Ayo=r(Wrt,"funnel"),Wrt.forEach(t),yyo=r(D0e," \u2014 "),mD=n(D0e,"A",{href:!0});var Hrt=s(mD);Lyo=r(Hrt,"FunnelForSequenceClassification"),Hrt.forEach(t),xyo=r(D0e," (Funnel Transformer model)"),D0e.forEach(t),$yo=i(j),x8=n(j,"LI",{});var G0e=s(x8);lce=n(G0e,"STRONG",{});var Urt=s(lce);kyo=r(Urt,"gpt2"),Urt.forEach(t),Syo=r(G0e," \u2014 "),gD=n(G0e,"A",{href:!0});var Jrt=s(gD);Ryo=r(Jrt,"GPT2ForSequenceClassification"),Jrt.forEach(t),Byo=r(G0e," (OpenAI GPT-2 model)"),G0e.forEach(t),Pyo=i(j),$8=n(j,"LI",{});var O0e=s($8);ice=n(O0e,"STRONG",{});var Yrt=s(ice);Iyo=r(Yrt,"gpt_neo"),Yrt.forEach(t),qyo=r(O0e," \u2014 "),hD=n(O0e,"A",{href:!0});var Krt=s(hD);Nyo=r(Krt,"GPTNeoForSequenceClassification"),Krt.forEach(t),jyo=r(O0e," (GPT Neo model)"),O0e.forEach(t),Dyo=i(j),k8=n(j,"LI",{});var V0e=s(k8);dce=n(V0e,"STRONG",{});var Zrt=s(dce);Gyo=r(Zrt,"gptj"),Zrt.forEach(t),Oyo=r(V0e," \u2014 "),pD=n(V0e,"A",{href:!0});var ett=s(pD);Vyo=r(ett,"GPTJForSequenceClassification"),ett.forEach(t),Xyo=r(V0e," (GPT-J model)"),V0e.forEach(t),zyo=i(j),S8=n(j,"LI",{});var X0e=s(S8);cce=n(X0e,"STRONG",{});var ott=s(cce);Qyo=r(ott,"ibert"),ott.forEach(t),Wyo=r(X0e," \u2014 "),uD=n(X0e,"A",{href:!0});var rtt=s(uD);Hyo=r(rtt,"IBertForSequenceClassification"),rtt.forEach(t),Uyo=r(X0e," (I-BERT model)"),X0e.forEach(t),Jyo=i(j),R8=n(j,"LI",{});var z0e=s(R8);fce=n(z0e,"STRONG",{});var ttt=s(fce);Yyo=r(ttt,"layoutlm"),ttt.forEach(t),Kyo=r(z0e," \u2014 "),_D=n(z0e,"A",{href:!0});var att=s(_D);Zyo=r(att,"LayoutLMForSequenceClassification"),att.forEach(t),eLo=r(z0e," (LayoutLM model)"),z0e.forEach(t),oLo=i(j),B8=n(j,"LI",{});var Q0e=s(B8);mce=n(Q0e,"STRONG",{});var ntt=s(mce);rLo=r(ntt,"layoutlmv2"),ntt.forEach(t),tLo=r(Q0e," \u2014 "),bD=n(Q0e,"A",{href:!0});var stt=s(bD);aLo=r(stt,"LayoutLMv2ForSequenceClassification"),stt.forEach(t),nLo=r(Q0e," (LayoutLMv2 model)"),Q0e.forEach(t),sLo=i(j),P8=n(j,"LI",{});var W0e=s(P8);gce=n(W0e,"STRONG",{});var ltt=s(gce);lLo=r(ltt,"led"),ltt.forEach(t),iLo=r(W0e," \u2014 "),vD=n(W0e,"A",{href:!0});var itt=s(vD);dLo=r(itt,"LEDForSequenceClassification"),itt.forEach(t),cLo=r(W0e," (LED model)"),W0e.forEach(t),fLo=i(j),I8=n(j,"LI",{});var H0e=s(I8);hce=n(H0e,"STRONG",{});var dtt=s(hce);mLo=r(dtt,"longformer"),dtt.forEach(t),gLo=r(H0e," \u2014 "),FD=n(H0e,"A",{href:!0});var ctt=s(FD);hLo=r(ctt,"LongformerForSequenceClassification"),ctt.forEach(t),pLo=r(H0e," (Longformer model)"),H0e.forEach(t),uLo=i(j),q8=n(j,"LI",{});var U0e=s(q8);pce=n(U0e,"STRONG",{});var ftt=s(pce);_Lo=r(ftt,"mbart"),ftt.forEach(t),bLo=r(U0e," \u2014 "),TD=n(U0e,"A",{href:!0});var mtt=s(TD);vLo=r(mtt,"MBartForSequenceClassification"),mtt.forEach(t),FLo=r(U0e," (mBART model)"),U0e.forEach(t),TLo=i(j),N8=n(j,"LI",{});var J0e=s(N8);uce=n(J0e,"STRONG",{});var gtt=s(uce);MLo=r(gtt,"megatron-bert"),gtt.forEach(t),ELo=r(J0e," \u2014 "),MD=n(J0e,"A",{href:!0});var htt=s(MD);CLo=r(htt,"MegatronBertForSequenceClassification"),htt.forEach(t),wLo=r(J0e," (MegatronBert model)"),J0e.forEach(t),ALo=i(j),j8=n(j,"LI",{});var Y0e=s(j8);_ce=n(Y0e,"STRONG",{});var ptt=s(_ce);yLo=r(ptt,"mobilebert"),ptt.forEach(t),LLo=r(Y0e," \u2014 "),ED=n(Y0e,"A",{href:!0});var utt=s(ED);xLo=r(utt,"MobileBertForSequenceClassification"),utt.forEach(t),$Lo=r(Y0e," (MobileBERT model)"),Y0e.forEach(t),kLo=i(j),D8=n(j,"LI",{});var K0e=s(D8);bce=n(K0e,"STRONG",{});var _tt=s(bce);SLo=r(_tt,"mpnet"),_tt.forEach(t),RLo=r(K0e," \u2014 "),CD=n(K0e,"A",{href:!0});var btt=s(CD);BLo=r(btt,"MPNetForSequenceClassification"),btt.forEach(t),PLo=r(K0e," (MPNet model)"),K0e.forEach(t),ILo=i(j),G8=n(j,"LI",{});var Z0e=s(G8);vce=n(Z0e,"STRONG",{});var vtt=s(vce);qLo=r(vtt,"nystromformer"),vtt.forEach(t),NLo=r(Z0e," \u2014 "),wD=n(Z0e,"A",{href:!0});var Ftt=s(wD);jLo=r(Ftt,"NystromformerForSequenceClassification"),Ftt.forEach(t),DLo=r(Z0e," (Nystromformer model)"),Z0e.forEach(t),GLo=i(j),O8=n(j,"LI",{});var eye=s(O8);Fce=n(eye,"STRONG",{});var Ttt=s(Fce);OLo=r(Ttt,"openai-gpt"),Ttt.forEach(t),VLo=r(eye," \u2014 "),AD=n(eye,"A",{href:!0});var Mtt=s(AD);XLo=r(Mtt,"OpenAIGPTForSequenceClassification"),Mtt.forEach(t),zLo=r(eye," (OpenAI GPT model)"),eye.forEach(t),QLo=i(j),V8=n(j,"LI",{});var oye=s(V8);Tce=n(oye,"STRONG",{});var Ett=s(Tce);WLo=r(Ett,"perceiver"),Ett.forEach(t),HLo=r(oye," \u2014 "),yD=n(oye,"A",{href:!0});var Ctt=s(yD);ULo=r(Ctt,"PerceiverForSequenceClassification"),Ctt.forEach(t),JLo=r(oye," (Perceiver model)"),oye.forEach(t),YLo=i(j),X8=n(j,"LI",{});var rye=s(X8);Mce=n(rye,"STRONG",{});var wtt=s(Mce);KLo=r(wtt,"plbart"),wtt.forEach(t),ZLo=r(rye," \u2014 "),LD=n(rye,"A",{href:!0});var Att=s(LD);exo=r(Att,"PLBartForSequenceClassification"),Att.forEach(t),oxo=r(rye," (PLBart model)"),rye.forEach(t),rxo=i(j),z8=n(j,"LI",{});var tye=s(z8);Ece=n(tye,"STRONG",{});var ytt=s(Ece);txo=r(ytt,"qdqbert"),ytt.forEach(t),axo=r(tye," \u2014 "),xD=n(tye,"A",{href:!0});var Ltt=s(xD);nxo=r(Ltt,"QDQBertForSequenceClassification"),Ltt.forEach(t),sxo=r(tye," (QDQBert model)"),tye.forEach(t),lxo=i(j),Q8=n(j,"LI",{});var aye=s(Q8);Cce=n(aye,"STRONG",{});var xtt=s(Cce);ixo=r(xtt,"reformer"),xtt.forEach(t),dxo=r(aye," \u2014 "),$D=n(aye,"A",{href:!0});var $tt=s($D);cxo=r($tt,"ReformerForSequenceClassification"),$tt.forEach(t),fxo=r(aye," (Reformer model)"),aye.forEach(t),mxo=i(j),W8=n(j,"LI",{});var nye=s(W8);wce=n(nye,"STRONG",{});var ktt=s(wce);gxo=r(ktt,"rembert"),ktt.forEach(t),hxo=r(nye," \u2014 "),kD=n(nye,"A",{href:!0});var Stt=s(kD);pxo=r(Stt,"RemBertForSequenceClassification"),Stt.forEach(t),uxo=r(nye," (RemBERT model)"),nye.forEach(t),_xo=i(j),H8=n(j,"LI",{});var sye=s(H8);Ace=n(sye,"STRONG",{});var Rtt=s(Ace);bxo=r(Rtt,"roberta"),Rtt.forEach(t),vxo=r(sye," \u2014 "),SD=n(sye,"A",{href:!0});var Btt=s(SD);Fxo=r(Btt,"RobertaForSequenceClassification"),Btt.forEach(t),Txo=r(sye," (RoBERTa model)"),sye.forEach(t),Mxo=i(j),U8=n(j,"LI",{});var lye=s(U8);yce=n(lye,"STRONG",{});var Ptt=s(yce);Exo=r(Ptt,"roformer"),Ptt.forEach(t),Cxo=r(lye," \u2014 "),RD=n(lye,"A",{href:!0});var Itt=s(RD);wxo=r(Itt,"RoFormerForSequenceClassification"),Itt.forEach(t),Axo=r(lye," (RoFormer model)"),lye.forEach(t),yxo=i(j),J8=n(j,"LI",{});var iye=s(J8);Lce=n(iye,"STRONG",{});var qtt=s(Lce);Lxo=r(qtt,"squeezebert"),qtt.forEach(t),xxo=r(iye," \u2014 "),BD=n(iye,"A",{href:!0});var Ntt=s(BD);$xo=r(Ntt,"SqueezeBertForSequenceClassification"),Ntt.forEach(t),kxo=r(iye," (SqueezeBERT model)"),iye.forEach(t),Sxo=i(j),Y8=n(j,"LI",{});var dye=s(Y8);xce=n(dye,"STRONG",{});var jtt=s(xce);Rxo=r(jtt,"tapas"),jtt.forEach(t),Bxo=r(dye," \u2014 "),PD=n(dye,"A",{href:!0});var Dtt=s(PD);Pxo=r(Dtt,"TapasForSequenceClassification"),Dtt.forEach(t),Ixo=r(dye," (TAPAS model)"),dye.forEach(t),qxo=i(j),K8=n(j,"LI",{});var cye=s(K8);$ce=n(cye,"STRONG",{});var Gtt=s($ce);Nxo=r(Gtt,"tapex"),Gtt.forEach(t),jxo=r(cye," \u2014 "),ID=n(cye,"A",{href:!0});var Ott=s(ID);Dxo=r(Ott,"BartForSequenceClassification"),Ott.forEach(t),Gxo=r(cye," (TAPEX model)"),cye.forEach(t),Oxo=i(j),Z8=n(j,"LI",{});var fye=s(Z8);kce=n(fye,"STRONG",{});var Vtt=s(kce);Vxo=r(Vtt,"transfo-xl"),Vtt.forEach(t),Xxo=r(fye," \u2014 "),qD=n(fye,"A",{href:!0});var Xtt=s(qD);zxo=r(Xtt,"TransfoXLForSequenceClassification"),Xtt.forEach(t),Qxo=r(fye," (Transformer-XL model)"),fye.forEach(t),Wxo=i(j),eb=n(j,"LI",{});var mye=s(eb);Sce=n(mye,"STRONG",{});var ztt=s(Sce);Hxo=r(ztt,"xlm"),ztt.forEach(t),Uxo=r(mye," \u2014 "),ND=n(mye,"A",{href:!0});var Qtt=s(ND);Jxo=r(Qtt,"XLMForSequenceClassification"),Qtt.forEach(t),Yxo=r(mye," (XLM model)"),mye.forEach(t),Kxo=i(j),ob=n(j,"LI",{});var gye=s(ob);Rce=n(gye,"STRONG",{});var Wtt=s(Rce);Zxo=r(Wtt,"xlm-roberta"),Wtt.forEach(t),e7o=r(gye," \u2014 "),jD=n(gye,"A",{href:!0});var Htt=s(jD);o7o=r(Htt,"XLMRobertaForSequenceClassification"),Htt.forEach(t),r7o=r(gye," (XLM-RoBERTa model)"),gye.forEach(t),t7o=i(j),rb=n(j,"LI",{});var hye=s(rb);Bce=n(hye,"STRONG",{});var Utt=s(Bce);a7o=r(Utt,"xlm-roberta-xl"),Utt.forEach(t),n7o=r(hye," \u2014 "),DD=n(hye,"A",{href:!0});var Jtt=s(DD);s7o=r(Jtt,"XLMRobertaXLForSequenceClassification"),Jtt.forEach(t),l7o=r(hye," (XLM-RoBERTa-XL model)"),hye.forEach(t),i7o=i(j),tb=n(j,"LI",{});var pye=s(tb);Pce=n(pye,"STRONG",{});var Ytt=s(Pce);d7o=r(Ytt,"xlnet"),Ytt.forEach(t),c7o=r(pye," \u2014 "),GD=n(pye,"A",{href:!0});var Ktt=s(GD);f7o=r(Ktt,"XLNetForSequenceClassification"),Ktt.forEach(t),m7o=r(pye," (XLNet model)"),pye.forEach(t),g7o=i(j),ab=n(j,"LI",{});var uye=s(ab);Ice=n(uye,"STRONG",{});var Ztt=s(Ice);h7o=r(Ztt,"yoso"),Ztt.forEach(t),p7o=r(uye," \u2014 "),OD=n(uye,"A",{href:!0});var eat=s(OD);u7o=r(eat,"YosoForSequenceClassification"),eat.forEach(t),_7o=r(uye," (YOSO model)"),uye.forEach(t),j.forEach(t),b7o=i(aa),nb=n(aa,"P",{});var _ye=s(nb);v7o=r(_ye,"The model is set in evaluation mode by default using "),qce=n(_ye,"CODE",{});var oat=s(qce);F7o=r(oat,"model.eval()"),oat.forEach(t),T7o=r(_ye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nce=n(_ye,"CODE",{});var rat=s(Nce);M7o=r(rat,"model.train()"),rat.forEach(t),_ye.forEach(t),E7o=i(aa),T(sb.$$.fragment,aa),aa.forEach(t),zs.forEach(t),IPe=i(f),Di=n(f,"H2",{class:!0});var Dqe=s(Di);lb=n(Dqe,"A",{id:!0,class:!0,href:!0});var tat=s(lb);jce=n(tat,"SPAN",{});var aat=s(jce);T(QA.$$.fragment,aat),aat.forEach(t),tat.forEach(t),C7o=i(Dqe),Dce=n(Dqe,"SPAN",{});var nat=s(Dce);w7o=r(nat,"AutoModelForMultipleChoice"),nat.forEach(t),Dqe.forEach(t),qPe=i(f),Bo=n(f,"DIV",{class:!0});var Qs=s(Bo);T(WA.$$.fragment,Qs),A7o=i(Qs),Gi=n(Qs,"P",{});var sK=s(Gi);y7o=r(sK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),VD=n(sK,"A",{href:!0});var sat=s(VD);L7o=r(sat,"from_pretrained()"),sat.forEach(t),x7o=r(sK," class method or the "),XD=n(sK,"A",{href:!0});var lat=s(XD);$7o=r(lat,"from_config()"),lat.forEach(t),k7o=r(sK,` class
method.`),sK.forEach(t),S7o=i(Qs),HA=n(Qs,"P",{});var Gqe=s(HA);R7o=r(Gqe,"This class cannot be instantiated directly using "),Gce=n(Gqe,"CODE",{});var iat=s(Gce);B7o=r(iat,"__init__()"),iat.forEach(t),P7o=r(Gqe," (throws an error)."),Gqe.forEach(t),I7o=i(Qs),lt=n(Qs,"DIV",{class:!0});var a3=s(lt);T(UA.$$.fragment,a3),q7o=i(a3),Oce=n(a3,"P",{});var dat=s(Oce);N7o=r(dat,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),dat.forEach(t),j7o=i(a3),Oi=n(a3,"P",{});var lK=s(Oi);D7o=r(lK,`Note:
Loading a model from its configuration file does `),Vce=n(lK,"STRONG",{});var cat=s(Vce);G7o=r(cat,"not"),cat.forEach(t),O7o=r(lK,` load the model weights. It only affects the
model\u2019s configuration. Use `),zD=n(lK,"A",{href:!0});var fat=s(zD);V7o=r(fat,"from_pretrained()"),fat.forEach(t),X7o=r(lK," to load the model weights."),lK.forEach(t),z7o=i(a3),T(ib.$$.fragment,a3),a3.forEach(t),Q7o=i(Qs),eo=n(Qs,"DIV",{class:!0});var na=s(eo);T(JA.$$.fragment,na),W7o=i(na),Xce=n(na,"P",{});var mat=s(Xce);H7o=r(mat,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),mat.forEach(t),U7o=i(na),Sa=n(na,"P",{});var n3=s(Sa);J7o=r(n3,"The model class to instantiate is selected based on the "),zce=n(n3,"CODE",{});var gat=s(zce);Y7o=r(gat,"model_type"),gat.forEach(t),K7o=r(n3,` property of the config object (either
passed as an argument or loaded from `),Qce=n(n3,"CODE",{});var hat=s(Qce);Z7o=r(hat,"pretrained_model_name_or_path"),hat.forEach(t),e$o=r(n3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wce=n(n3,"CODE",{});var pat=s(Wce);o$o=r(pat,"pretrained_model_name_or_path"),pat.forEach(t),r$o=r(n3,":"),n3.forEach(t),t$o=i(na),Y=n(na,"UL",{});var K=s(Y);db=n(K,"LI",{});var bye=s(db);Hce=n(bye,"STRONG",{});var uat=s(Hce);a$o=r(uat,"albert"),uat.forEach(t),n$o=r(bye," \u2014 "),QD=n(bye,"A",{href:!0});var _at=s(QD);s$o=r(_at,"AlbertForMultipleChoice"),_at.forEach(t),l$o=r(bye," (ALBERT model)"),bye.forEach(t),i$o=i(K),cb=n(K,"LI",{});var vye=s(cb);Uce=n(vye,"STRONG",{});var bat=s(Uce);d$o=r(bat,"bert"),bat.forEach(t),c$o=r(vye," \u2014 "),WD=n(vye,"A",{href:!0});var vat=s(WD);f$o=r(vat,"BertForMultipleChoice"),vat.forEach(t),m$o=r(vye," (BERT model)"),vye.forEach(t),g$o=i(K),fb=n(K,"LI",{});var Fye=s(fb);Jce=n(Fye,"STRONG",{});var Fat=s(Jce);h$o=r(Fat,"big_bird"),Fat.forEach(t),p$o=r(Fye," \u2014 "),HD=n(Fye,"A",{href:!0});var Tat=s(HD);u$o=r(Tat,"BigBirdForMultipleChoice"),Tat.forEach(t),_$o=r(Fye," (BigBird model)"),Fye.forEach(t),b$o=i(K),mb=n(K,"LI",{});var Tye=s(mb);Yce=n(Tye,"STRONG",{});var Mat=s(Yce);v$o=r(Mat,"camembert"),Mat.forEach(t),F$o=r(Tye," \u2014 "),UD=n(Tye,"A",{href:!0});var Eat=s(UD);T$o=r(Eat,"CamembertForMultipleChoice"),Eat.forEach(t),M$o=r(Tye," (CamemBERT model)"),Tye.forEach(t),E$o=i(K),gb=n(K,"LI",{});var Mye=s(gb);Kce=n(Mye,"STRONG",{});var Cat=s(Kce);C$o=r(Cat,"canine"),Cat.forEach(t),w$o=r(Mye," \u2014 "),JD=n(Mye,"A",{href:!0});var wat=s(JD);A$o=r(wat,"CanineForMultipleChoice"),wat.forEach(t),y$o=r(Mye," (Canine model)"),Mye.forEach(t),L$o=i(K),hb=n(K,"LI",{});var Eye=s(hb);Zce=n(Eye,"STRONG",{});var Aat=s(Zce);x$o=r(Aat,"convbert"),Aat.forEach(t),$$o=r(Eye," \u2014 "),YD=n(Eye,"A",{href:!0});var yat=s(YD);k$o=r(yat,"ConvBertForMultipleChoice"),yat.forEach(t),S$o=r(Eye," (ConvBERT model)"),Eye.forEach(t),R$o=i(K),pb=n(K,"LI",{});var Cye=s(pb);efe=n(Cye,"STRONG",{});var Lat=s(efe);B$o=r(Lat,"data2vec-text"),Lat.forEach(t),P$o=r(Cye," \u2014 "),KD=n(Cye,"A",{href:!0});var xat=s(KD);I$o=r(xat,"Data2VecTextForMultipleChoice"),xat.forEach(t),q$o=r(Cye," (Data2VecText model)"),Cye.forEach(t),N$o=i(K),ub=n(K,"LI",{});var wye=s(ub);ofe=n(wye,"STRONG",{});var $at=s(ofe);j$o=r($at,"distilbert"),$at.forEach(t),D$o=r(wye," \u2014 "),ZD=n(wye,"A",{href:!0});var kat=s(ZD);G$o=r(kat,"DistilBertForMultipleChoice"),kat.forEach(t),O$o=r(wye," (DistilBERT model)"),wye.forEach(t),V$o=i(K),_b=n(K,"LI",{});var Aye=s(_b);rfe=n(Aye,"STRONG",{});var Sat=s(rfe);X$o=r(Sat,"electra"),Sat.forEach(t),z$o=r(Aye," \u2014 "),eG=n(Aye,"A",{href:!0});var Rat=s(eG);Q$o=r(Rat,"ElectraForMultipleChoice"),Rat.forEach(t),W$o=r(Aye," (ELECTRA model)"),Aye.forEach(t),H$o=i(K),bb=n(K,"LI",{});var yye=s(bb);tfe=n(yye,"STRONG",{});var Bat=s(tfe);U$o=r(Bat,"flaubert"),Bat.forEach(t),J$o=r(yye," \u2014 "),oG=n(yye,"A",{href:!0});var Pat=s(oG);Y$o=r(Pat,"FlaubertForMultipleChoice"),Pat.forEach(t),K$o=r(yye," (FlauBERT model)"),yye.forEach(t),Z$o=i(K),vb=n(K,"LI",{});var Lye=s(vb);afe=n(Lye,"STRONG",{});var Iat=s(afe);eko=r(Iat,"fnet"),Iat.forEach(t),oko=r(Lye," \u2014 "),rG=n(Lye,"A",{href:!0});var qat=s(rG);rko=r(qat,"FNetForMultipleChoice"),qat.forEach(t),tko=r(Lye," (FNet model)"),Lye.forEach(t),ako=i(K),Fb=n(K,"LI",{});var xye=s(Fb);nfe=n(xye,"STRONG",{});var Nat=s(nfe);nko=r(Nat,"funnel"),Nat.forEach(t),sko=r(xye," \u2014 "),tG=n(xye,"A",{href:!0});var jat=s(tG);lko=r(jat,"FunnelForMultipleChoice"),jat.forEach(t),iko=r(xye," (Funnel Transformer model)"),xye.forEach(t),dko=i(K),Tb=n(K,"LI",{});var $ye=s(Tb);sfe=n($ye,"STRONG",{});var Dat=s(sfe);cko=r(Dat,"ibert"),Dat.forEach(t),fko=r($ye," \u2014 "),aG=n($ye,"A",{href:!0});var Gat=s(aG);mko=r(Gat,"IBertForMultipleChoice"),Gat.forEach(t),gko=r($ye," (I-BERT model)"),$ye.forEach(t),hko=i(K),Mb=n(K,"LI",{});var kye=s(Mb);lfe=n(kye,"STRONG",{});var Oat=s(lfe);pko=r(Oat,"longformer"),Oat.forEach(t),uko=r(kye," \u2014 "),nG=n(kye,"A",{href:!0});var Vat=s(nG);_ko=r(Vat,"LongformerForMultipleChoice"),Vat.forEach(t),bko=r(kye," (Longformer model)"),kye.forEach(t),vko=i(K),Eb=n(K,"LI",{});var Sye=s(Eb);ife=n(Sye,"STRONG",{});var Xat=s(ife);Fko=r(Xat,"megatron-bert"),Xat.forEach(t),Tko=r(Sye," \u2014 "),sG=n(Sye,"A",{href:!0});var zat=s(sG);Mko=r(zat,"MegatronBertForMultipleChoice"),zat.forEach(t),Eko=r(Sye," (MegatronBert model)"),Sye.forEach(t),Cko=i(K),Cb=n(K,"LI",{});var Rye=s(Cb);dfe=n(Rye,"STRONG",{});var Qat=s(dfe);wko=r(Qat,"mobilebert"),Qat.forEach(t),Ako=r(Rye," \u2014 "),lG=n(Rye,"A",{href:!0});var Wat=s(lG);yko=r(Wat,"MobileBertForMultipleChoice"),Wat.forEach(t),Lko=r(Rye," (MobileBERT model)"),Rye.forEach(t),xko=i(K),wb=n(K,"LI",{});var Bye=s(wb);cfe=n(Bye,"STRONG",{});var Hat=s(cfe);$ko=r(Hat,"mpnet"),Hat.forEach(t),kko=r(Bye," \u2014 "),iG=n(Bye,"A",{href:!0});var Uat=s(iG);Sko=r(Uat,"MPNetForMultipleChoice"),Uat.forEach(t),Rko=r(Bye," (MPNet model)"),Bye.forEach(t),Bko=i(K),Ab=n(K,"LI",{});var Pye=s(Ab);ffe=n(Pye,"STRONG",{});var Jat=s(ffe);Pko=r(Jat,"nystromformer"),Jat.forEach(t),Iko=r(Pye," \u2014 "),dG=n(Pye,"A",{href:!0});var Yat=s(dG);qko=r(Yat,"NystromformerForMultipleChoice"),Yat.forEach(t),Nko=r(Pye," (Nystromformer model)"),Pye.forEach(t),jko=i(K),yb=n(K,"LI",{});var Iye=s(yb);mfe=n(Iye,"STRONG",{});var Kat=s(mfe);Dko=r(Kat,"qdqbert"),Kat.forEach(t),Gko=r(Iye," \u2014 "),cG=n(Iye,"A",{href:!0});var Zat=s(cG);Oko=r(Zat,"QDQBertForMultipleChoice"),Zat.forEach(t),Vko=r(Iye," (QDQBert model)"),Iye.forEach(t),Xko=i(K),Lb=n(K,"LI",{});var qye=s(Lb);gfe=n(qye,"STRONG",{});var ent=s(gfe);zko=r(ent,"rembert"),ent.forEach(t),Qko=r(qye," \u2014 "),fG=n(qye,"A",{href:!0});var ont=s(fG);Wko=r(ont,"RemBertForMultipleChoice"),ont.forEach(t),Hko=r(qye," (RemBERT model)"),qye.forEach(t),Uko=i(K),xb=n(K,"LI",{});var Nye=s(xb);hfe=n(Nye,"STRONG",{});var rnt=s(hfe);Jko=r(rnt,"roberta"),rnt.forEach(t),Yko=r(Nye," \u2014 "),mG=n(Nye,"A",{href:!0});var tnt=s(mG);Kko=r(tnt,"RobertaForMultipleChoice"),tnt.forEach(t),Zko=r(Nye," (RoBERTa model)"),Nye.forEach(t),eSo=i(K),$b=n(K,"LI",{});var jye=s($b);pfe=n(jye,"STRONG",{});var ant=s(pfe);oSo=r(ant,"roformer"),ant.forEach(t),rSo=r(jye," \u2014 "),gG=n(jye,"A",{href:!0});var nnt=s(gG);tSo=r(nnt,"RoFormerForMultipleChoice"),nnt.forEach(t),aSo=r(jye," (RoFormer model)"),jye.forEach(t),nSo=i(K),kb=n(K,"LI",{});var Dye=s(kb);ufe=n(Dye,"STRONG",{});var snt=s(ufe);sSo=r(snt,"squeezebert"),snt.forEach(t),lSo=r(Dye," \u2014 "),hG=n(Dye,"A",{href:!0});var lnt=s(hG);iSo=r(lnt,"SqueezeBertForMultipleChoice"),lnt.forEach(t),dSo=r(Dye," (SqueezeBERT model)"),Dye.forEach(t),cSo=i(K),Sb=n(K,"LI",{});var Gye=s(Sb);_fe=n(Gye,"STRONG",{});var int=s(_fe);fSo=r(int,"xlm"),int.forEach(t),mSo=r(Gye," \u2014 "),pG=n(Gye,"A",{href:!0});var dnt=s(pG);gSo=r(dnt,"XLMForMultipleChoice"),dnt.forEach(t),hSo=r(Gye," (XLM model)"),Gye.forEach(t),pSo=i(K),Rb=n(K,"LI",{});var Oye=s(Rb);bfe=n(Oye,"STRONG",{});var cnt=s(bfe);uSo=r(cnt,"xlm-roberta"),cnt.forEach(t),_So=r(Oye," \u2014 "),uG=n(Oye,"A",{href:!0});var fnt=s(uG);bSo=r(fnt,"XLMRobertaForMultipleChoice"),fnt.forEach(t),vSo=r(Oye," (XLM-RoBERTa model)"),Oye.forEach(t),FSo=i(K),Bb=n(K,"LI",{});var Vye=s(Bb);vfe=n(Vye,"STRONG",{});var mnt=s(vfe);TSo=r(mnt,"xlm-roberta-xl"),mnt.forEach(t),MSo=r(Vye," \u2014 "),_G=n(Vye,"A",{href:!0});var gnt=s(_G);ESo=r(gnt,"XLMRobertaXLForMultipleChoice"),gnt.forEach(t),CSo=r(Vye," (XLM-RoBERTa-XL model)"),Vye.forEach(t),wSo=i(K),Pb=n(K,"LI",{});var Xye=s(Pb);Ffe=n(Xye,"STRONG",{});var hnt=s(Ffe);ASo=r(hnt,"xlnet"),hnt.forEach(t),ySo=r(Xye," \u2014 "),bG=n(Xye,"A",{href:!0});var pnt=s(bG);LSo=r(pnt,"XLNetForMultipleChoice"),pnt.forEach(t),xSo=r(Xye," (XLNet model)"),Xye.forEach(t),$So=i(K),Ib=n(K,"LI",{});var zye=s(Ib);Tfe=n(zye,"STRONG",{});var unt=s(Tfe);kSo=r(unt,"yoso"),unt.forEach(t),SSo=r(zye," \u2014 "),vG=n(zye,"A",{href:!0});var _nt=s(vG);RSo=r(_nt,"YosoForMultipleChoice"),_nt.forEach(t),BSo=r(zye," (YOSO model)"),zye.forEach(t),K.forEach(t),PSo=i(na),qb=n(na,"P",{});var Qye=s(qb);ISo=r(Qye,"The model is set in evaluation mode by default using "),Mfe=n(Qye,"CODE",{});var bnt=s(Mfe);qSo=r(bnt,"model.eval()"),bnt.forEach(t),NSo=r(Qye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Efe=n(Qye,"CODE",{});var vnt=s(Efe);jSo=r(vnt,"model.train()"),vnt.forEach(t),Qye.forEach(t),DSo=i(na),T(Nb.$$.fragment,na),na.forEach(t),Qs.forEach(t),NPe=i(f),Vi=n(f,"H2",{class:!0});var Oqe=s(Vi);jb=n(Oqe,"A",{id:!0,class:!0,href:!0});var Fnt=s(jb);Cfe=n(Fnt,"SPAN",{});var Tnt=s(Cfe);T(YA.$$.fragment,Tnt),Tnt.forEach(t),Fnt.forEach(t),GSo=i(Oqe),wfe=n(Oqe,"SPAN",{});var Mnt=s(wfe);OSo=r(Mnt,"AutoModelForNextSentencePrediction"),Mnt.forEach(t),Oqe.forEach(t),jPe=i(f),Po=n(f,"DIV",{class:!0});var Ws=s(Po);T(KA.$$.fragment,Ws),VSo=i(Ws),Xi=n(Ws,"P",{});var iK=s(Xi);XSo=r(iK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),FG=n(iK,"A",{href:!0});var Ent=s(FG);zSo=r(Ent,"from_pretrained()"),Ent.forEach(t),QSo=r(iK," class method or the "),TG=n(iK,"A",{href:!0});var Cnt=s(TG);WSo=r(Cnt,"from_config()"),Cnt.forEach(t),HSo=r(iK,` class
method.`),iK.forEach(t),USo=i(Ws),ZA=n(Ws,"P",{});var Vqe=s(ZA);JSo=r(Vqe,"This class cannot be instantiated directly using "),Afe=n(Vqe,"CODE",{});var wnt=s(Afe);YSo=r(wnt,"__init__()"),wnt.forEach(t),KSo=r(Vqe," (throws an error)."),Vqe.forEach(t),ZSo=i(Ws),it=n(Ws,"DIV",{class:!0});var s3=s(it);T(e0.$$.fragment,s3),eRo=i(s3),yfe=n(s3,"P",{});var Ant=s(yfe);oRo=r(Ant,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Ant.forEach(t),rRo=i(s3),zi=n(s3,"P",{});var dK=s(zi);tRo=r(dK,`Note:
Loading a model from its configuration file does `),Lfe=n(dK,"STRONG",{});var ynt=s(Lfe);aRo=r(ynt,"not"),ynt.forEach(t),nRo=r(dK,` load the model weights. It only affects the
model\u2019s configuration. Use `),MG=n(dK,"A",{href:!0});var Lnt=s(MG);sRo=r(Lnt,"from_pretrained()"),Lnt.forEach(t),lRo=r(dK," to load the model weights."),dK.forEach(t),iRo=i(s3),T(Db.$$.fragment,s3),s3.forEach(t),dRo=i(Ws),oo=n(Ws,"DIV",{class:!0});var sa=s(oo);T(o0.$$.fragment,sa),cRo=i(sa),xfe=n(sa,"P",{});var xnt=s(xfe);fRo=r(xnt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),xnt.forEach(t),mRo=i(sa),Ra=n(sa,"P",{});var l3=s(Ra);gRo=r(l3,"The model class to instantiate is selected based on the "),$fe=n(l3,"CODE",{});var $nt=s($fe);hRo=r($nt,"model_type"),$nt.forEach(t),pRo=r(l3,` property of the config object (either
passed as an argument or loaded from `),kfe=n(l3,"CODE",{});var knt=s(kfe);uRo=r(knt,"pretrained_model_name_or_path"),knt.forEach(t),_Ro=r(l3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sfe=n(l3,"CODE",{});var Snt=s(Sfe);bRo=r(Snt,"pretrained_model_name_or_path"),Snt.forEach(t),vRo=r(l3,":"),l3.forEach(t),FRo=i(sa),Yr=n(sa,"UL",{});var Hs=s(Yr);Gb=n(Hs,"LI",{});var Wye=s(Gb);Rfe=n(Wye,"STRONG",{});var Rnt=s(Rfe);TRo=r(Rnt,"bert"),Rnt.forEach(t),MRo=r(Wye," \u2014 "),EG=n(Wye,"A",{href:!0});var Bnt=s(EG);ERo=r(Bnt,"BertForNextSentencePrediction"),Bnt.forEach(t),CRo=r(Wye," (BERT model)"),Wye.forEach(t),wRo=i(Hs),Ob=n(Hs,"LI",{});var Hye=s(Ob);Bfe=n(Hye,"STRONG",{});var Pnt=s(Bfe);ARo=r(Pnt,"fnet"),Pnt.forEach(t),yRo=r(Hye," \u2014 "),CG=n(Hye,"A",{href:!0});var Int=s(CG);LRo=r(Int,"FNetForNextSentencePrediction"),Int.forEach(t),xRo=r(Hye," (FNet model)"),Hye.forEach(t),$Ro=i(Hs),Vb=n(Hs,"LI",{});var Uye=s(Vb);Pfe=n(Uye,"STRONG",{});var qnt=s(Pfe);kRo=r(qnt,"megatron-bert"),qnt.forEach(t),SRo=r(Uye," \u2014 "),wG=n(Uye,"A",{href:!0});var Nnt=s(wG);RRo=r(Nnt,"MegatronBertForNextSentencePrediction"),Nnt.forEach(t),BRo=r(Uye," (MegatronBert model)"),Uye.forEach(t),PRo=i(Hs),Xb=n(Hs,"LI",{});var Jye=s(Xb);Ife=n(Jye,"STRONG",{});var jnt=s(Ife);IRo=r(jnt,"mobilebert"),jnt.forEach(t),qRo=r(Jye," \u2014 "),AG=n(Jye,"A",{href:!0});var Dnt=s(AG);NRo=r(Dnt,"MobileBertForNextSentencePrediction"),Dnt.forEach(t),jRo=r(Jye," (MobileBERT model)"),Jye.forEach(t),DRo=i(Hs),zb=n(Hs,"LI",{});var Yye=s(zb);qfe=n(Yye,"STRONG",{});var Gnt=s(qfe);GRo=r(Gnt,"qdqbert"),Gnt.forEach(t),ORo=r(Yye," \u2014 "),yG=n(Yye,"A",{href:!0});var Ont=s(yG);VRo=r(Ont,"QDQBertForNextSentencePrediction"),Ont.forEach(t),XRo=r(Yye," (QDQBert model)"),Yye.forEach(t),Hs.forEach(t),zRo=i(sa),Qb=n(sa,"P",{});var Kye=s(Qb);QRo=r(Kye,"The model is set in evaluation mode by default using "),Nfe=n(Kye,"CODE",{});var Vnt=s(Nfe);WRo=r(Vnt,"model.eval()"),Vnt.forEach(t),HRo=r(Kye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jfe=n(Kye,"CODE",{});var Xnt=s(jfe);URo=r(Xnt,"model.train()"),Xnt.forEach(t),Kye.forEach(t),JRo=i(sa),T(Wb.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),DPe=i(f),Qi=n(f,"H2",{class:!0});var Xqe=s(Qi);Hb=n(Xqe,"A",{id:!0,class:!0,href:!0});var znt=s(Hb);Dfe=n(znt,"SPAN",{});var Qnt=s(Dfe);T(r0.$$.fragment,Qnt),Qnt.forEach(t),znt.forEach(t),YRo=i(Xqe),Gfe=n(Xqe,"SPAN",{});var Wnt=s(Gfe);KRo=r(Wnt,"AutoModelForTokenClassification"),Wnt.forEach(t),Xqe.forEach(t),GPe=i(f),Io=n(f,"DIV",{class:!0});var Us=s(Io);T(t0.$$.fragment,Us),ZRo=i(Us),Wi=n(Us,"P",{});var cK=s(Wi);eBo=r(cK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),LG=n(cK,"A",{href:!0});var Hnt=s(LG);oBo=r(Hnt,"from_pretrained()"),Hnt.forEach(t),rBo=r(cK," class method or the "),xG=n(cK,"A",{href:!0});var Unt=s(xG);tBo=r(Unt,"from_config()"),Unt.forEach(t),aBo=r(cK,` class
method.`),cK.forEach(t),nBo=i(Us),a0=n(Us,"P",{});var zqe=s(a0);sBo=r(zqe,"This class cannot be instantiated directly using "),Ofe=n(zqe,"CODE",{});var Jnt=s(Ofe);lBo=r(Jnt,"__init__()"),Jnt.forEach(t),iBo=r(zqe," (throws an error)."),zqe.forEach(t),dBo=i(Us),dt=n(Us,"DIV",{class:!0});var i3=s(dt);T(n0.$$.fragment,i3),cBo=i(i3),Vfe=n(i3,"P",{});var Ynt=s(Vfe);fBo=r(Ynt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Ynt.forEach(t),mBo=i(i3),Hi=n(i3,"P",{});var fK=s(Hi);gBo=r(fK,`Note:
Loading a model from its configuration file does `),Xfe=n(fK,"STRONG",{});var Knt=s(Xfe);hBo=r(Knt,"not"),Knt.forEach(t),pBo=r(fK,` load the model weights. It only affects the
model\u2019s configuration. Use `),$G=n(fK,"A",{href:!0});var Znt=s($G);uBo=r(Znt,"from_pretrained()"),Znt.forEach(t),_Bo=r(fK," to load the model weights."),fK.forEach(t),bBo=i(i3),T(Ub.$$.fragment,i3),i3.forEach(t),vBo=i(Us),ro=n(Us,"DIV",{class:!0});var la=s(ro);T(s0.$$.fragment,la),FBo=i(la),zfe=n(la,"P",{});var est=s(zfe);TBo=r(est,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),est.forEach(t),MBo=i(la),Ba=n(la,"P",{});var d3=s(Ba);EBo=r(d3,"The model class to instantiate is selected based on the "),Qfe=n(d3,"CODE",{});var ost=s(Qfe);CBo=r(ost,"model_type"),ost.forEach(t),wBo=r(d3,` property of the config object (either
passed as an argument or loaded from `),Wfe=n(d3,"CODE",{});var rst=s(Wfe);ABo=r(rst,"pretrained_model_name_or_path"),rst.forEach(t),yBo=r(d3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hfe=n(d3,"CODE",{});var tst=s(Hfe);LBo=r(tst,"pretrained_model_name_or_path"),tst.forEach(t),xBo=r(d3,":"),d3.forEach(t),$Bo=i(la),U=n(la,"UL",{});var J=s(U);Jb=n(J,"LI",{});var Zye=s(Jb);Ufe=n(Zye,"STRONG",{});var ast=s(Ufe);kBo=r(ast,"albert"),ast.forEach(t),SBo=r(Zye," \u2014 "),kG=n(Zye,"A",{href:!0});var nst=s(kG);RBo=r(nst,"AlbertForTokenClassification"),nst.forEach(t),BBo=r(Zye," (ALBERT model)"),Zye.forEach(t),PBo=i(J),Yb=n(J,"LI",{});var eLe=s(Yb);Jfe=n(eLe,"STRONG",{});var sst=s(Jfe);IBo=r(sst,"bert"),sst.forEach(t),qBo=r(eLe," \u2014 "),SG=n(eLe,"A",{href:!0});var lst=s(SG);NBo=r(lst,"BertForTokenClassification"),lst.forEach(t),jBo=r(eLe," (BERT model)"),eLe.forEach(t),DBo=i(J),Kb=n(J,"LI",{});var oLe=s(Kb);Yfe=n(oLe,"STRONG",{});var ist=s(Yfe);GBo=r(ist,"big_bird"),ist.forEach(t),OBo=r(oLe," \u2014 "),RG=n(oLe,"A",{href:!0});var dst=s(RG);VBo=r(dst,"BigBirdForTokenClassification"),dst.forEach(t),XBo=r(oLe," (BigBird model)"),oLe.forEach(t),zBo=i(J),Zb=n(J,"LI",{});var rLe=s(Zb);Kfe=n(rLe,"STRONG",{});var cst=s(Kfe);QBo=r(cst,"camembert"),cst.forEach(t),WBo=r(rLe," \u2014 "),BG=n(rLe,"A",{href:!0});var fst=s(BG);HBo=r(fst,"CamembertForTokenClassification"),fst.forEach(t),UBo=r(rLe," (CamemBERT model)"),rLe.forEach(t),JBo=i(J),e2=n(J,"LI",{});var tLe=s(e2);Zfe=n(tLe,"STRONG",{});var mst=s(Zfe);YBo=r(mst,"canine"),mst.forEach(t),KBo=r(tLe," \u2014 "),PG=n(tLe,"A",{href:!0});var gst=s(PG);ZBo=r(gst,"CanineForTokenClassification"),gst.forEach(t),ePo=r(tLe," (Canine model)"),tLe.forEach(t),oPo=i(J),o2=n(J,"LI",{});var aLe=s(o2);eme=n(aLe,"STRONG",{});var hst=s(eme);rPo=r(hst,"convbert"),hst.forEach(t),tPo=r(aLe," \u2014 "),IG=n(aLe,"A",{href:!0});var pst=s(IG);aPo=r(pst,"ConvBertForTokenClassification"),pst.forEach(t),nPo=r(aLe," (ConvBERT model)"),aLe.forEach(t),sPo=i(J),r2=n(J,"LI",{});var nLe=s(r2);ome=n(nLe,"STRONG",{});var ust=s(ome);lPo=r(ust,"data2vec-text"),ust.forEach(t),iPo=r(nLe," \u2014 "),qG=n(nLe,"A",{href:!0});var _st=s(qG);dPo=r(_st,"Data2VecTextForTokenClassification"),_st.forEach(t),cPo=r(nLe," (Data2VecText model)"),nLe.forEach(t),fPo=i(J),t2=n(J,"LI",{});var sLe=s(t2);rme=n(sLe,"STRONG",{});var bst=s(rme);mPo=r(bst,"deberta"),bst.forEach(t),gPo=r(sLe," \u2014 "),NG=n(sLe,"A",{href:!0});var vst=s(NG);hPo=r(vst,"DebertaForTokenClassification"),vst.forEach(t),pPo=r(sLe," (DeBERTa model)"),sLe.forEach(t),uPo=i(J),a2=n(J,"LI",{});var lLe=s(a2);tme=n(lLe,"STRONG",{});var Fst=s(tme);_Po=r(Fst,"deberta-v2"),Fst.forEach(t),bPo=r(lLe," \u2014 "),jG=n(lLe,"A",{href:!0});var Tst=s(jG);vPo=r(Tst,"DebertaV2ForTokenClassification"),Tst.forEach(t),FPo=r(lLe," (DeBERTa-v2 model)"),lLe.forEach(t),TPo=i(J),n2=n(J,"LI",{});var iLe=s(n2);ame=n(iLe,"STRONG",{});var Mst=s(ame);MPo=r(Mst,"distilbert"),Mst.forEach(t),EPo=r(iLe," \u2014 "),DG=n(iLe,"A",{href:!0});var Est=s(DG);CPo=r(Est,"DistilBertForTokenClassification"),Est.forEach(t),wPo=r(iLe," (DistilBERT model)"),iLe.forEach(t),APo=i(J),s2=n(J,"LI",{});var dLe=s(s2);nme=n(dLe,"STRONG",{});var Cst=s(nme);yPo=r(Cst,"electra"),Cst.forEach(t),LPo=r(dLe," \u2014 "),GG=n(dLe,"A",{href:!0});var wst=s(GG);xPo=r(wst,"ElectraForTokenClassification"),wst.forEach(t),$Po=r(dLe," (ELECTRA model)"),dLe.forEach(t),kPo=i(J),l2=n(J,"LI",{});var cLe=s(l2);sme=n(cLe,"STRONG",{});var Ast=s(sme);SPo=r(Ast,"flaubert"),Ast.forEach(t),RPo=r(cLe," \u2014 "),OG=n(cLe,"A",{href:!0});var yst=s(OG);BPo=r(yst,"FlaubertForTokenClassification"),yst.forEach(t),PPo=r(cLe," (FlauBERT model)"),cLe.forEach(t),IPo=i(J),i2=n(J,"LI",{});var fLe=s(i2);lme=n(fLe,"STRONG",{});var Lst=s(lme);qPo=r(Lst,"fnet"),Lst.forEach(t),NPo=r(fLe," \u2014 "),VG=n(fLe,"A",{href:!0});var xst=s(VG);jPo=r(xst,"FNetForTokenClassification"),xst.forEach(t),DPo=r(fLe," (FNet model)"),fLe.forEach(t),GPo=i(J),d2=n(J,"LI",{});var mLe=s(d2);ime=n(mLe,"STRONG",{});var $st=s(ime);OPo=r($st,"funnel"),$st.forEach(t),VPo=r(mLe," \u2014 "),XG=n(mLe,"A",{href:!0});var kst=s(XG);XPo=r(kst,"FunnelForTokenClassification"),kst.forEach(t),zPo=r(mLe," (Funnel Transformer model)"),mLe.forEach(t),QPo=i(J),c2=n(J,"LI",{});var gLe=s(c2);dme=n(gLe,"STRONG",{});var Sst=s(dme);WPo=r(Sst,"gpt2"),Sst.forEach(t),HPo=r(gLe," \u2014 "),zG=n(gLe,"A",{href:!0});var Rst=s(zG);UPo=r(Rst,"GPT2ForTokenClassification"),Rst.forEach(t),JPo=r(gLe," (OpenAI GPT-2 model)"),gLe.forEach(t),YPo=i(J),f2=n(J,"LI",{});var hLe=s(f2);cme=n(hLe,"STRONG",{});var Bst=s(cme);KPo=r(Bst,"ibert"),Bst.forEach(t),ZPo=r(hLe," \u2014 "),QG=n(hLe,"A",{href:!0});var Pst=s(QG);eIo=r(Pst,"IBertForTokenClassification"),Pst.forEach(t),oIo=r(hLe," (I-BERT model)"),hLe.forEach(t),rIo=i(J),m2=n(J,"LI",{});var pLe=s(m2);fme=n(pLe,"STRONG",{});var Ist=s(fme);tIo=r(Ist,"layoutlm"),Ist.forEach(t),aIo=r(pLe," \u2014 "),WG=n(pLe,"A",{href:!0});var qst=s(WG);nIo=r(qst,"LayoutLMForTokenClassification"),qst.forEach(t),sIo=r(pLe," (LayoutLM model)"),pLe.forEach(t),lIo=i(J),g2=n(J,"LI",{});var uLe=s(g2);mme=n(uLe,"STRONG",{});var Nst=s(mme);iIo=r(Nst,"layoutlmv2"),Nst.forEach(t),dIo=r(uLe," \u2014 "),HG=n(uLe,"A",{href:!0});var jst=s(HG);cIo=r(jst,"LayoutLMv2ForTokenClassification"),jst.forEach(t),fIo=r(uLe," (LayoutLMv2 model)"),uLe.forEach(t),mIo=i(J),h2=n(J,"LI",{});var _Le=s(h2);gme=n(_Le,"STRONG",{});var Dst=s(gme);gIo=r(Dst,"longformer"),Dst.forEach(t),hIo=r(_Le," \u2014 "),UG=n(_Le,"A",{href:!0});var Gst=s(UG);pIo=r(Gst,"LongformerForTokenClassification"),Gst.forEach(t),uIo=r(_Le," (Longformer model)"),_Le.forEach(t),_Io=i(J),p2=n(J,"LI",{});var bLe=s(p2);hme=n(bLe,"STRONG",{});var Ost=s(hme);bIo=r(Ost,"megatron-bert"),Ost.forEach(t),vIo=r(bLe," \u2014 "),JG=n(bLe,"A",{href:!0});var Vst=s(JG);FIo=r(Vst,"MegatronBertForTokenClassification"),Vst.forEach(t),TIo=r(bLe," (MegatronBert model)"),bLe.forEach(t),MIo=i(J),u2=n(J,"LI",{});var vLe=s(u2);pme=n(vLe,"STRONG",{});var Xst=s(pme);EIo=r(Xst,"mobilebert"),Xst.forEach(t),CIo=r(vLe," \u2014 "),YG=n(vLe,"A",{href:!0});var zst=s(YG);wIo=r(zst,"MobileBertForTokenClassification"),zst.forEach(t),AIo=r(vLe," (MobileBERT model)"),vLe.forEach(t),yIo=i(J),_2=n(J,"LI",{});var FLe=s(_2);ume=n(FLe,"STRONG",{});var Qst=s(ume);LIo=r(Qst,"mpnet"),Qst.forEach(t),xIo=r(FLe," \u2014 "),KG=n(FLe,"A",{href:!0});var Wst=s(KG);$Io=r(Wst,"MPNetForTokenClassification"),Wst.forEach(t),kIo=r(FLe," (MPNet model)"),FLe.forEach(t),SIo=i(J),b2=n(J,"LI",{});var TLe=s(b2);_me=n(TLe,"STRONG",{});var Hst=s(_me);RIo=r(Hst,"nystromformer"),Hst.forEach(t),BIo=r(TLe," \u2014 "),ZG=n(TLe,"A",{href:!0});var Ust=s(ZG);PIo=r(Ust,"NystromformerForTokenClassification"),Ust.forEach(t),IIo=r(TLe," (Nystromformer model)"),TLe.forEach(t),qIo=i(J),v2=n(J,"LI",{});var MLe=s(v2);bme=n(MLe,"STRONG",{});var Jst=s(bme);NIo=r(Jst,"qdqbert"),Jst.forEach(t),jIo=r(MLe," \u2014 "),eO=n(MLe,"A",{href:!0});var Yst=s(eO);DIo=r(Yst,"QDQBertForTokenClassification"),Yst.forEach(t),GIo=r(MLe," (QDQBert model)"),MLe.forEach(t),OIo=i(J),F2=n(J,"LI",{});var ELe=s(F2);vme=n(ELe,"STRONG",{});var Kst=s(vme);VIo=r(Kst,"rembert"),Kst.forEach(t),XIo=r(ELe," \u2014 "),oO=n(ELe,"A",{href:!0});var Zst=s(oO);zIo=r(Zst,"RemBertForTokenClassification"),Zst.forEach(t),QIo=r(ELe," (RemBERT model)"),ELe.forEach(t),WIo=i(J),T2=n(J,"LI",{});var CLe=s(T2);Fme=n(CLe,"STRONG",{});var elt=s(Fme);HIo=r(elt,"roberta"),elt.forEach(t),UIo=r(CLe," \u2014 "),rO=n(CLe,"A",{href:!0});var olt=s(rO);JIo=r(olt,"RobertaForTokenClassification"),olt.forEach(t),YIo=r(CLe," (RoBERTa model)"),CLe.forEach(t),KIo=i(J),M2=n(J,"LI",{});var wLe=s(M2);Tme=n(wLe,"STRONG",{});var rlt=s(Tme);ZIo=r(rlt,"roformer"),rlt.forEach(t),eqo=r(wLe," \u2014 "),tO=n(wLe,"A",{href:!0});var tlt=s(tO);oqo=r(tlt,"RoFormerForTokenClassification"),tlt.forEach(t),rqo=r(wLe," (RoFormer model)"),wLe.forEach(t),tqo=i(J),E2=n(J,"LI",{});var ALe=s(E2);Mme=n(ALe,"STRONG",{});var alt=s(Mme);aqo=r(alt,"squeezebert"),alt.forEach(t),nqo=r(ALe," \u2014 "),aO=n(ALe,"A",{href:!0});var nlt=s(aO);sqo=r(nlt,"SqueezeBertForTokenClassification"),nlt.forEach(t),lqo=r(ALe," (SqueezeBERT model)"),ALe.forEach(t),iqo=i(J),C2=n(J,"LI",{});var yLe=s(C2);Eme=n(yLe,"STRONG",{});var slt=s(Eme);dqo=r(slt,"xlm"),slt.forEach(t),cqo=r(yLe," \u2014 "),nO=n(yLe,"A",{href:!0});var llt=s(nO);fqo=r(llt,"XLMForTokenClassification"),llt.forEach(t),mqo=r(yLe," (XLM model)"),yLe.forEach(t),gqo=i(J),w2=n(J,"LI",{});var LLe=s(w2);Cme=n(LLe,"STRONG",{});var ilt=s(Cme);hqo=r(ilt,"xlm-roberta"),ilt.forEach(t),pqo=r(LLe," \u2014 "),sO=n(LLe,"A",{href:!0});var dlt=s(sO);uqo=r(dlt,"XLMRobertaForTokenClassification"),dlt.forEach(t),_qo=r(LLe," (XLM-RoBERTa model)"),LLe.forEach(t),bqo=i(J),A2=n(J,"LI",{});var xLe=s(A2);wme=n(xLe,"STRONG",{});var clt=s(wme);vqo=r(clt,"xlm-roberta-xl"),clt.forEach(t),Fqo=r(xLe," \u2014 "),lO=n(xLe,"A",{href:!0});var flt=s(lO);Tqo=r(flt,"XLMRobertaXLForTokenClassification"),flt.forEach(t),Mqo=r(xLe," (XLM-RoBERTa-XL model)"),xLe.forEach(t),Eqo=i(J),y2=n(J,"LI",{});var $Le=s(y2);Ame=n($Le,"STRONG",{});var mlt=s(Ame);Cqo=r(mlt,"xlnet"),mlt.forEach(t),wqo=r($Le," \u2014 "),iO=n($Le,"A",{href:!0});var glt=s(iO);Aqo=r(glt,"XLNetForTokenClassification"),glt.forEach(t),yqo=r($Le," (XLNet model)"),$Le.forEach(t),Lqo=i(J),L2=n(J,"LI",{});var kLe=s(L2);yme=n(kLe,"STRONG",{});var hlt=s(yme);xqo=r(hlt,"yoso"),hlt.forEach(t),$qo=r(kLe," \u2014 "),dO=n(kLe,"A",{href:!0});var plt=s(dO);kqo=r(plt,"YosoForTokenClassification"),plt.forEach(t),Sqo=r(kLe," (YOSO model)"),kLe.forEach(t),J.forEach(t),Rqo=i(la),x2=n(la,"P",{});var SLe=s(x2);Bqo=r(SLe,"The model is set in evaluation mode by default using "),Lme=n(SLe,"CODE",{});var ult=s(Lme);Pqo=r(ult,"model.eval()"),ult.forEach(t),Iqo=r(SLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xme=n(SLe,"CODE",{});var _lt=s(xme);qqo=r(_lt,"model.train()"),_lt.forEach(t),SLe.forEach(t),Nqo=i(la),T($2.$$.fragment,la),la.forEach(t),Us.forEach(t),OPe=i(f),Ui=n(f,"H2",{class:!0});var Qqe=s(Ui);k2=n(Qqe,"A",{id:!0,class:!0,href:!0});var blt=s(k2);$me=n(blt,"SPAN",{});var vlt=s($me);T(l0.$$.fragment,vlt),vlt.forEach(t),blt.forEach(t),jqo=i(Qqe),kme=n(Qqe,"SPAN",{});var Flt=s(kme);Dqo=r(Flt,"AutoModelForQuestionAnswering"),Flt.forEach(t),Qqe.forEach(t),VPe=i(f),qo=n(f,"DIV",{class:!0});var Js=s(qo);T(i0.$$.fragment,Js),Gqo=i(Js),Ji=n(Js,"P",{});var mK=s(Ji);Oqo=r(mK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),cO=n(mK,"A",{href:!0});var Tlt=s(cO);Vqo=r(Tlt,"from_pretrained()"),Tlt.forEach(t),Xqo=r(mK," class method or the "),fO=n(mK,"A",{href:!0});var Mlt=s(fO);zqo=r(Mlt,"from_config()"),Mlt.forEach(t),Qqo=r(mK,` class
method.`),mK.forEach(t),Wqo=i(Js),d0=n(Js,"P",{});var Wqe=s(d0);Hqo=r(Wqe,"This class cannot be instantiated directly using "),Sme=n(Wqe,"CODE",{});var Elt=s(Sme);Uqo=r(Elt,"__init__()"),Elt.forEach(t),Jqo=r(Wqe," (throws an error)."),Wqe.forEach(t),Yqo=i(Js),ct=n(Js,"DIV",{class:!0});var c3=s(ct);T(c0.$$.fragment,c3),Kqo=i(c3),Rme=n(c3,"P",{});var Clt=s(Rme);Zqo=r(Clt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Clt.forEach(t),eNo=i(c3),Yi=n(c3,"P",{});var gK=s(Yi);oNo=r(gK,`Note:
Loading a model from its configuration file does `),Bme=n(gK,"STRONG",{});var wlt=s(Bme);rNo=r(wlt,"not"),wlt.forEach(t),tNo=r(gK,` load the model weights. It only affects the
model\u2019s configuration. Use `),mO=n(gK,"A",{href:!0});var Alt=s(mO);aNo=r(Alt,"from_pretrained()"),Alt.forEach(t),nNo=r(gK," to load the model weights."),gK.forEach(t),sNo=i(c3),T(S2.$$.fragment,c3),c3.forEach(t),lNo=i(Js),to=n(Js,"DIV",{class:!0});var ia=s(to);T(f0.$$.fragment,ia),iNo=i(ia),Pme=n(ia,"P",{});var ylt=s(Pme);dNo=r(ylt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ylt.forEach(t),cNo=i(ia),Pa=n(ia,"P",{});var f3=s(Pa);fNo=r(f3,"The model class to instantiate is selected based on the "),Ime=n(f3,"CODE",{});var Llt=s(Ime);mNo=r(Llt,"model_type"),Llt.forEach(t),gNo=r(f3,` property of the config object (either
passed as an argument or loaded from `),qme=n(f3,"CODE",{});var xlt=s(qme);hNo=r(xlt,"pretrained_model_name_or_path"),xlt.forEach(t),pNo=r(f3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nme=n(f3,"CODE",{});var $lt=s(Nme);uNo=r($lt,"pretrained_model_name_or_path"),$lt.forEach(t),_No=r(f3,":"),f3.forEach(t),bNo=i(ia),O=n(ia,"UL",{});var X=s(O);R2=n(X,"LI",{});var RLe=s(R2);jme=n(RLe,"STRONG",{});var klt=s(jme);vNo=r(klt,"albert"),klt.forEach(t),FNo=r(RLe," \u2014 "),gO=n(RLe,"A",{href:!0});var Slt=s(gO);TNo=r(Slt,"AlbertForQuestionAnswering"),Slt.forEach(t),MNo=r(RLe," (ALBERT model)"),RLe.forEach(t),ENo=i(X),B2=n(X,"LI",{});var BLe=s(B2);Dme=n(BLe,"STRONG",{});var Rlt=s(Dme);CNo=r(Rlt,"bart"),Rlt.forEach(t),wNo=r(BLe," \u2014 "),hO=n(BLe,"A",{href:!0});var Blt=s(hO);ANo=r(Blt,"BartForQuestionAnswering"),Blt.forEach(t),yNo=r(BLe," (BART model)"),BLe.forEach(t),LNo=i(X),P2=n(X,"LI",{});var PLe=s(P2);Gme=n(PLe,"STRONG",{});var Plt=s(Gme);xNo=r(Plt,"bert"),Plt.forEach(t),$No=r(PLe," \u2014 "),pO=n(PLe,"A",{href:!0});var Ilt=s(pO);kNo=r(Ilt,"BertForQuestionAnswering"),Ilt.forEach(t),SNo=r(PLe," (BERT model)"),PLe.forEach(t),RNo=i(X),I2=n(X,"LI",{});var ILe=s(I2);Ome=n(ILe,"STRONG",{});var qlt=s(Ome);BNo=r(qlt,"big_bird"),qlt.forEach(t),PNo=r(ILe," \u2014 "),uO=n(ILe,"A",{href:!0});var Nlt=s(uO);INo=r(Nlt,"BigBirdForQuestionAnswering"),Nlt.forEach(t),qNo=r(ILe," (BigBird model)"),ILe.forEach(t),NNo=i(X),q2=n(X,"LI",{});var qLe=s(q2);Vme=n(qLe,"STRONG",{});var jlt=s(Vme);jNo=r(jlt,"bigbird_pegasus"),jlt.forEach(t),DNo=r(qLe," \u2014 "),_O=n(qLe,"A",{href:!0});var Dlt=s(_O);GNo=r(Dlt,"BigBirdPegasusForQuestionAnswering"),Dlt.forEach(t),ONo=r(qLe," (BigBirdPegasus model)"),qLe.forEach(t),VNo=i(X),N2=n(X,"LI",{});var NLe=s(N2);Xme=n(NLe,"STRONG",{});var Glt=s(Xme);XNo=r(Glt,"camembert"),Glt.forEach(t),zNo=r(NLe," \u2014 "),bO=n(NLe,"A",{href:!0});var Olt=s(bO);QNo=r(Olt,"CamembertForQuestionAnswering"),Olt.forEach(t),WNo=r(NLe," (CamemBERT model)"),NLe.forEach(t),HNo=i(X),j2=n(X,"LI",{});var jLe=s(j2);zme=n(jLe,"STRONG",{});var Vlt=s(zme);UNo=r(Vlt,"canine"),Vlt.forEach(t),JNo=r(jLe," \u2014 "),vO=n(jLe,"A",{href:!0});var Xlt=s(vO);YNo=r(Xlt,"CanineForQuestionAnswering"),Xlt.forEach(t),KNo=r(jLe," (Canine model)"),jLe.forEach(t),ZNo=i(X),D2=n(X,"LI",{});var DLe=s(D2);Qme=n(DLe,"STRONG",{});var zlt=s(Qme);ejo=r(zlt,"convbert"),zlt.forEach(t),ojo=r(DLe," \u2014 "),FO=n(DLe,"A",{href:!0});var Qlt=s(FO);rjo=r(Qlt,"ConvBertForQuestionAnswering"),Qlt.forEach(t),tjo=r(DLe," (ConvBERT model)"),DLe.forEach(t),ajo=i(X),G2=n(X,"LI",{});var GLe=s(G2);Wme=n(GLe,"STRONG",{});var Wlt=s(Wme);njo=r(Wlt,"data2vec-text"),Wlt.forEach(t),sjo=r(GLe," \u2014 "),TO=n(GLe,"A",{href:!0});var Hlt=s(TO);ljo=r(Hlt,"Data2VecTextForQuestionAnswering"),Hlt.forEach(t),ijo=r(GLe," (Data2VecText model)"),GLe.forEach(t),djo=i(X),O2=n(X,"LI",{});var OLe=s(O2);Hme=n(OLe,"STRONG",{});var Ult=s(Hme);cjo=r(Ult,"deberta"),Ult.forEach(t),fjo=r(OLe," \u2014 "),MO=n(OLe,"A",{href:!0});var Jlt=s(MO);mjo=r(Jlt,"DebertaForQuestionAnswering"),Jlt.forEach(t),gjo=r(OLe," (DeBERTa model)"),OLe.forEach(t),hjo=i(X),V2=n(X,"LI",{});var VLe=s(V2);Ume=n(VLe,"STRONG",{});var Ylt=s(Ume);pjo=r(Ylt,"deberta-v2"),Ylt.forEach(t),ujo=r(VLe," \u2014 "),EO=n(VLe,"A",{href:!0});var Klt=s(EO);_jo=r(Klt,"DebertaV2ForQuestionAnswering"),Klt.forEach(t),bjo=r(VLe," (DeBERTa-v2 model)"),VLe.forEach(t),vjo=i(X),X2=n(X,"LI",{});var XLe=s(X2);Jme=n(XLe,"STRONG",{});var Zlt=s(Jme);Fjo=r(Zlt,"distilbert"),Zlt.forEach(t),Tjo=r(XLe," \u2014 "),CO=n(XLe,"A",{href:!0});var eit=s(CO);Mjo=r(eit,"DistilBertForQuestionAnswering"),eit.forEach(t),Ejo=r(XLe," (DistilBERT model)"),XLe.forEach(t),Cjo=i(X),z2=n(X,"LI",{});var zLe=s(z2);Yme=n(zLe,"STRONG",{});var oit=s(Yme);wjo=r(oit,"electra"),oit.forEach(t),Ajo=r(zLe," \u2014 "),wO=n(zLe,"A",{href:!0});var rit=s(wO);yjo=r(rit,"ElectraForQuestionAnswering"),rit.forEach(t),Ljo=r(zLe," (ELECTRA model)"),zLe.forEach(t),xjo=i(X),Q2=n(X,"LI",{});var QLe=s(Q2);Kme=n(QLe,"STRONG",{});var tit=s(Kme);$jo=r(tit,"flaubert"),tit.forEach(t),kjo=r(QLe," \u2014 "),AO=n(QLe,"A",{href:!0});var ait=s(AO);Sjo=r(ait,"FlaubertForQuestionAnsweringSimple"),ait.forEach(t),Rjo=r(QLe," (FlauBERT model)"),QLe.forEach(t),Bjo=i(X),W2=n(X,"LI",{});var WLe=s(W2);Zme=n(WLe,"STRONG",{});var nit=s(Zme);Pjo=r(nit,"fnet"),nit.forEach(t),Ijo=r(WLe," \u2014 "),yO=n(WLe,"A",{href:!0});var sit=s(yO);qjo=r(sit,"FNetForQuestionAnswering"),sit.forEach(t),Njo=r(WLe," (FNet model)"),WLe.forEach(t),jjo=i(X),H2=n(X,"LI",{});var HLe=s(H2);ege=n(HLe,"STRONG",{});var lit=s(ege);Djo=r(lit,"funnel"),lit.forEach(t),Gjo=r(HLe," \u2014 "),LO=n(HLe,"A",{href:!0});var iit=s(LO);Ojo=r(iit,"FunnelForQuestionAnswering"),iit.forEach(t),Vjo=r(HLe," (Funnel Transformer model)"),HLe.forEach(t),Xjo=i(X),U2=n(X,"LI",{});var ULe=s(U2);oge=n(ULe,"STRONG",{});var dit=s(oge);zjo=r(dit,"gptj"),dit.forEach(t),Qjo=r(ULe," \u2014 "),xO=n(ULe,"A",{href:!0});var cit=s(xO);Wjo=r(cit,"GPTJForQuestionAnswering"),cit.forEach(t),Hjo=r(ULe," (GPT-J model)"),ULe.forEach(t),Ujo=i(X),J2=n(X,"LI",{});var JLe=s(J2);rge=n(JLe,"STRONG",{});var fit=s(rge);Jjo=r(fit,"ibert"),fit.forEach(t),Yjo=r(JLe," \u2014 "),$O=n(JLe,"A",{href:!0});var mit=s($O);Kjo=r(mit,"IBertForQuestionAnswering"),mit.forEach(t),Zjo=r(JLe," (I-BERT model)"),JLe.forEach(t),eDo=i(X),Y2=n(X,"LI",{});var YLe=s(Y2);tge=n(YLe,"STRONG",{});var git=s(tge);oDo=r(git,"layoutlmv2"),git.forEach(t),rDo=r(YLe," \u2014 "),kO=n(YLe,"A",{href:!0});var hit=s(kO);tDo=r(hit,"LayoutLMv2ForQuestionAnswering"),hit.forEach(t),aDo=r(YLe," (LayoutLMv2 model)"),YLe.forEach(t),nDo=i(X),K2=n(X,"LI",{});var KLe=s(K2);age=n(KLe,"STRONG",{});var pit=s(age);sDo=r(pit,"led"),pit.forEach(t),lDo=r(KLe," \u2014 "),SO=n(KLe,"A",{href:!0});var uit=s(SO);iDo=r(uit,"LEDForQuestionAnswering"),uit.forEach(t),dDo=r(KLe," (LED model)"),KLe.forEach(t),cDo=i(X),Z2=n(X,"LI",{});var ZLe=s(Z2);nge=n(ZLe,"STRONG",{});var _it=s(nge);fDo=r(_it,"longformer"),_it.forEach(t),mDo=r(ZLe," \u2014 "),RO=n(ZLe,"A",{href:!0});var bit=s(RO);gDo=r(bit,"LongformerForQuestionAnswering"),bit.forEach(t),hDo=r(ZLe," (Longformer model)"),ZLe.forEach(t),pDo=i(X),ev=n(X,"LI",{});var exe=s(ev);sge=n(exe,"STRONG",{});var vit=s(sge);uDo=r(vit,"lxmert"),vit.forEach(t),_Do=r(exe," \u2014 "),BO=n(exe,"A",{href:!0});var Fit=s(BO);bDo=r(Fit,"LxmertForQuestionAnswering"),Fit.forEach(t),vDo=r(exe," (LXMERT model)"),exe.forEach(t),FDo=i(X),ov=n(X,"LI",{});var oxe=s(ov);lge=n(oxe,"STRONG",{});var Tit=s(lge);TDo=r(Tit,"mbart"),Tit.forEach(t),MDo=r(oxe," \u2014 "),PO=n(oxe,"A",{href:!0});var Mit=s(PO);EDo=r(Mit,"MBartForQuestionAnswering"),Mit.forEach(t),CDo=r(oxe," (mBART model)"),oxe.forEach(t),wDo=i(X),rv=n(X,"LI",{});var rxe=s(rv);ige=n(rxe,"STRONG",{});var Eit=s(ige);ADo=r(Eit,"megatron-bert"),Eit.forEach(t),yDo=r(rxe," \u2014 "),IO=n(rxe,"A",{href:!0});var Cit=s(IO);LDo=r(Cit,"MegatronBertForQuestionAnswering"),Cit.forEach(t),xDo=r(rxe," (MegatronBert model)"),rxe.forEach(t),$Do=i(X),tv=n(X,"LI",{});var txe=s(tv);dge=n(txe,"STRONG",{});var wit=s(dge);kDo=r(wit,"mobilebert"),wit.forEach(t),SDo=r(txe," \u2014 "),qO=n(txe,"A",{href:!0});var Ait=s(qO);RDo=r(Ait,"MobileBertForQuestionAnswering"),Ait.forEach(t),BDo=r(txe," (MobileBERT model)"),txe.forEach(t),PDo=i(X),av=n(X,"LI",{});var axe=s(av);cge=n(axe,"STRONG",{});var yit=s(cge);IDo=r(yit,"mpnet"),yit.forEach(t),qDo=r(axe," \u2014 "),NO=n(axe,"A",{href:!0});var Lit=s(NO);NDo=r(Lit,"MPNetForQuestionAnswering"),Lit.forEach(t),jDo=r(axe," (MPNet model)"),axe.forEach(t),DDo=i(X),nv=n(X,"LI",{});var nxe=s(nv);fge=n(nxe,"STRONG",{});var xit=s(fge);GDo=r(xit,"nystromformer"),xit.forEach(t),ODo=r(nxe," \u2014 "),jO=n(nxe,"A",{href:!0});var $it=s(jO);VDo=r($it,"NystromformerForQuestionAnswering"),$it.forEach(t),XDo=r(nxe," (Nystromformer model)"),nxe.forEach(t),zDo=i(X),sv=n(X,"LI",{});var sxe=s(sv);mge=n(sxe,"STRONG",{});var kit=s(mge);QDo=r(kit,"qdqbert"),kit.forEach(t),WDo=r(sxe," \u2014 "),DO=n(sxe,"A",{href:!0});var Sit=s(DO);HDo=r(Sit,"QDQBertForQuestionAnswering"),Sit.forEach(t),UDo=r(sxe," (QDQBert model)"),sxe.forEach(t),JDo=i(X),lv=n(X,"LI",{});var lxe=s(lv);gge=n(lxe,"STRONG",{});var Rit=s(gge);YDo=r(Rit,"reformer"),Rit.forEach(t),KDo=r(lxe," \u2014 "),GO=n(lxe,"A",{href:!0});var Bit=s(GO);ZDo=r(Bit,"ReformerForQuestionAnswering"),Bit.forEach(t),eGo=r(lxe," (Reformer model)"),lxe.forEach(t),oGo=i(X),iv=n(X,"LI",{});var ixe=s(iv);hge=n(ixe,"STRONG",{});var Pit=s(hge);rGo=r(Pit,"rembert"),Pit.forEach(t),tGo=r(ixe," \u2014 "),OO=n(ixe,"A",{href:!0});var Iit=s(OO);aGo=r(Iit,"RemBertForQuestionAnswering"),Iit.forEach(t),nGo=r(ixe," (RemBERT model)"),ixe.forEach(t),sGo=i(X),dv=n(X,"LI",{});var dxe=s(dv);pge=n(dxe,"STRONG",{});var qit=s(pge);lGo=r(qit,"roberta"),qit.forEach(t),iGo=r(dxe," \u2014 "),VO=n(dxe,"A",{href:!0});var Nit=s(VO);dGo=r(Nit,"RobertaForQuestionAnswering"),Nit.forEach(t),cGo=r(dxe," (RoBERTa model)"),dxe.forEach(t),fGo=i(X),cv=n(X,"LI",{});var cxe=s(cv);uge=n(cxe,"STRONG",{});var jit=s(uge);mGo=r(jit,"roformer"),jit.forEach(t),gGo=r(cxe," \u2014 "),XO=n(cxe,"A",{href:!0});var Dit=s(XO);hGo=r(Dit,"RoFormerForQuestionAnswering"),Dit.forEach(t),pGo=r(cxe," (RoFormer model)"),cxe.forEach(t),uGo=i(X),fv=n(X,"LI",{});var fxe=s(fv);_ge=n(fxe,"STRONG",{});var Git=s(_ge);_Go=r(Git,"splinter"),Git.forEach(t),bGo=r(fxe," \u2014 "),zO=n(fxe,"A",{href:!0});var Oit=s(zO);vGo=r(Oit,"SplinterForQuestionAnswering"),Oit.forEach(t),FGo=r(fxe," (Splinter model)"),fxe.forEach(t),TGo=i(X),mv=n(X,"LI",{});var mxe=s(mv);bge=n(mxe,"STRONG",{});var Vit=s(bge);MGo=r(Vit,"squeezebert"),Vit.forEach(t),EGo=r(mxe," \u2014 "),QO=n(mxe,"A",{href:!0});var Xit=s(QO);CGo=r(Xit,"SqueezeBertForQuestionAnswering"),Xit.forEach(t),wGo=r(mxe," (SqueezeBERT model)"),mxe.forEach(t),AGo=i(X),gv=n(X,"LI",{});var gxe=s(gv);vge=n(gxe,"STRONG",{});var zit=s(vge);yGo=r(zit,"xlm"),zit.forEach(t),LGo=r(gxe," \u2014 "),WO=n(gxe,"A",{href:!0});var Qit=s(WO);xGo=r(Qit,"XLMForQuestionAnsweringSimple"),Qit.forEach(t),$Go=r(gxe," (XLM model)"),gxe.forEach(t),kGo=i(X),hv=n(X,"LI",{});var hxe=s(hv);Fge=n(hxe,"STRONG",{});var Wit=s(Fge);SGo=r(Wit,"xlm-roberta"),Wit.forEach(t),RGo=r(hxe," \u2014 "),HO=n(hxe,"A",{href:!0});var Hit=s(HO);BGo=r(Hit,"XLMRobertaForQuestionAnswering"),Hit.forEach(t),PGo=r(hxe," (XLM-RoBERTa model)"),hxe.forEach(t),IGo=i(X),pv=n(X,"LI",{});var pxe=s(pv);Tge=n(pxe,"STRONG",{});var Uit=s(Tge);qGo=r(Uit,"xlm-roberta-xl"),Uit.forEach(t),NGo=r(pxe," \u2014 "),UO=n(pxe,"A",{href:!0});var Jit=s(UO);jGo=r(Jit,"XLMRobertaXLForQuestionAnswering"),Jit.forEach(t),DGo=r(pxe," (XLM-RoBERTa-XL model)"),pxe.forEach(t),GGo=i(X),uv=n(X,"LI",{});var uxe=s(uv);Mge=n(uxe,"STRONG",{});var Yit=s(Mge);OGo=r(Yit,"xlnet"),Yit.forEach(t),VGo=r(uxe," \u2014 "),JO=n(uxe,"A",{href:!0});var Kit=s(JO);XGo=r(Kit,"XLNetForQuestionAnsweringSimple"),Kit.forEach(t),zGo=r(uxe," (XLNet model)"),uxe.forEach(t),QGo=i(X),_v=n(X,"LI",{});var _xe=s(_v);Ege=n(_xe,"STRONG",{});var Zit=s(Ege);WGo=r(Zit,"yoso"),Zit.forEach(t),HGo=r(_xe," \u2014 "),YO=n(_xe,"A",{href:!0});var edt=s(YO);UGo=r(edt,"YosoForQuestionAnswering"),edt.forEach(t),JGo=r(_xe," (YOSO model)"),_xe.forEach(t),X.forEach(t),YGo=i(ia),bv=n(ia,"P",{});var bxe=s(bv);KGo=r(bxe,"The model is set in evaluation mode by default using "),Cge=n(bxe,"CODE",{});var odt=s(Cge);ZGo=r(odt,"model.eval()"),odt.forEach(t),eOo=r(bxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wge=n(bxe,"CODE",{});var rdt=s(wge);oOo=r(rdt,"model.train()"),rdt.forEach(t),bxe.forEach(t),rOo=i(ia),T(vv.$$.fragment,ia),ia.forEach(t),Js.forEach(t),XPe=i(f),Ki=n(f,"H2",{class:!0});var Hqe=s(Ki);Fv=n(Hqe,"A",{id:!0,class:!0,href:!0});var tdt=s(Fv);Age=n(tdt,"SPAN",{});var adt=s(Age);T(m0.$$.fragment,adt),adt.forEach(t),tdt.forEach(t),tOo=i(Hqe),yge=n(Hqe,"SPAN",{});var ndt=s(yge);aOo=r(ndt,"AutoModelForTableQuestionAnswering"),ndt.forEach(t),Hqe.forEach(t),zPe=i(f),No=n(f,"DIV",{class:!0});var Ys=s(No);T(g0.$$.fragment,Ys),nOo=i(Ys),Zi=n(Ys,"P",{});var hK=s(Zi);sOo=r(hK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),KO=n(hK,"A",{href:!0});var sdt=s(KO);lOo=r(sdt,"from_pretrained()"),sdt.forEach(t),iOo=r(hK," class method or the "),ZO=n(hK,"A",{href:!0});var ldt=s(ZO);dOo=r(ldt,"from_config()"),ldt.forEach(t),cOo=r(hK,` class
method.`),hK.forEach(t),fOo=i(Ys),h0=n(Ys,"P",{});var Uqe=s(h0);mOo=r(Uqe,"This class cannot be instantiated directly using "),Lge=n(Uqe,"CODE",{});var idt=s(Lge);gOo=r(idt,"__init__()"),idt.forEach(t),hOo=r(Uqe," (throws an error)."),Uqe.forEach(t),pOo=i(Ys),ft=n(Ys,"DIV",{class:!0});var m3=s(ft);T(p0.$$.fragment,m3),uOo=i(m3),xge=n(m3,"P",{});var ddt=s(xge);_Oo=r(ddt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),ddt.forEach(t),bOo=i(m3),ed=n(m3,"P",{});var pK=s(ed);vOo=r(pK,`Note:
Loading a model from its configuration file does `),$ge=n(pK,"STRONG",{});var cdt=s($ge);FOo=r(cdt,"not"),cdt.forEach(t),TOo=r(pK,` load the model weights. It only affects the
model\u2019s configuration. Use `),eV=n(pK,"A",{href:!0});var fdt=s(eV);MOo=r(fdt,"from_pretrained()"),fdt.forEach(t),EOo=r(pK," to load the model weights."),pK.forEach(t),COo=i(m3),T(Tv.$$.fragment,m3),m3.forEach(t),wOo=i(Ys),ao=n(Ys,"DIV",{class:!0});var da=s(ao);T(u0.$$.fragment,da),AOo=i(da),kge=n(da,"P",{});var mdt=s(kge);yOo=r(mdt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),mdt.forEach(t),LOo=i(da),Ia=n(da,"P",{});var g3=s(Ia);xOo=r(g3,"The model class to instantiate is selected based on the "),Sge=n(g3,"CODE",{});var gdt=s(Sge);$Oo=r(gdt,"model_type"),gdt.forEach(t),kOo=r(g3,` property of the config object (either
passed as an argument or loaded from `),Rge=n(g3,"CODE",{});var hdt=s(Rge);SOo=r(hdt,"pretrained_model_name_or_path"),hdt.forEach(t),ROo=r(g3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bge=n(g3,"CODE",{});var pdt=s(Bge);BOo=r(pdt,"pretrained_model_name_or_path"),pdt.forEach(t),POo=r(g3,":"),g3.forEach(t),IOo=i(da),Pge=n(da,"UL",{});var udt=s(Pge);Mv=n(udt,"LI",{});var vxe=s(Mv);Ige=n(vxe,"STRONG",{});var _dt=s(Ige);qOo=r(_dt,"tapas"),_dt.forEach(t),NOo=r(vxe," \u2014 "),oV=n(vxe,"A",{href:!0});var bdt=s(oV);jOo=r(bdt,"TapasForQuestionAnswering"),bdt.forEach(t),DOo=r(vxe," (TAPAS model)"),vxe.forEach(t),udt.forEach(t),GOo=i(da),Ev=n(da,"P",{});var Fxe=s(Ev);OOo=r(Fxe,"The model is set in evaluation mode by default using "),qge=n(Fxe,"CODE",{});var vdt=s(qge);VOo=r(vdt,"model.eval()"),vdt.forEach(t),XOo=r(Fxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nge=n(Fxe,"CODE",{});var Fdt=s(Nge);zOo=r(Fdt,"model.train()"),Fdt.forEach(t),Fxe.forEach(t),QOo=i(da),T(Cv.$$.fragment,da),da.forEach(t),Ys.forEach(t),QPe=i(f),od=n(f,"H2",{class:!0});var Jqe=s(od);wv=n(Jqe,"A",{id:!0,class:!0,href:!0});var Tdt=s(wv);jge=n(Tdt,"SPAN",{});var Mdt=s(jge);T(_0.$$.fragment,Mdt),Mdt.forEach(t),Tdt.forEach(t),WOo=i(Jqe),Dge=n(Jqe,"SPAN",{});var Edt=s(Dge);HOo=r(Edt,"AutoModelForImageClassification"),Edt.forEach(t),Jqe.forEach(t),WPe=i(f),jo=n(f,"DIV",{class:!0});var Ks=s(jo);T(b0.$$.fragment,Ks),UOo=i(Ks),rd=n(Ks,"P",{});var uK=s(rd);JOo=r(uK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rV=n(uK,"A",{href:!0});var Cdt=s(rV);YOo=r(Cdt,"from_pretrained()"),Cdt.forEach(t),KOo=r(uK," class method or the "),tV=n(uK,"A",{href:!0});var wdt=s(tV);ZOo=r(wdt,"from_config()"),wdt.forEach(t),eVo=r(uK,` class
method.`),uK.forEach(t),oVo=i(Ks),v0=n(Ks,"P",{});var Yqe=s(v0);rVo=r(Yqe,"This class cannot be instantiated directly using "),Gge=n(Yqe,"CODE",{});var Adt=s(Gge);tVo=r(Adt,"__init__()"),Adt.forEach(t),aVo=r(Yqe," (throws an error)."),Yqe.forEach(t),nVo=i(Ks),mt=n(Ks,"DIV",{class:!0});var h3=s(mt);T(F0.$$.fragment,h3),sVo=i(h3),Oge=n(h3,"P",{});var ydt=s(Oge);lVo=r(ydt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ydt.forEach(t),iVo=i(h3),td=n(h3,"P",{});var _K=s(td);dVo=r(_K,`Note:
Loading a model from its configuration file does `),Vge=n(_K,"STRONG",{});var Ldt=s(Vge);cVo=r(Ldt,"not"),Ldt.forEach(t),fVo=r(_K,` load the model weights. It only affects the
model\u2019s configuration. Use `),aV=n(_K,"A",{href:!0});var xdt=s(aV);mVo=r(xdt,"from_pretrained()"),xdt.forEach(t),gVo=r(_K," to load the model weights."),_K.forEach(t),hVo=i(h3),T(Av.$$.fragment,h3),h3.forEach(t),pVo=i(Ks),no=n(Ks,"DIV",{class:!0});var ca=s(no);T(T0.$$.fragment,ca),uVo=i(ca),Xge=n(ca,"P",{});var $dt=s(Xge);_Vo=r($dt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),$dt.forEach(t),bVo=i(ca),qa=n(ca,"P",{});var p3=s(qa);vVo=r(p3,"The model class to instantiate is selected based on the "),zge=n(p3,"CODE",{});var kdt=s(zge);FVo=r(kdt,"model_type"),kdt.forEach(t),TVo=r(p3,` property of the config object (either
passed as an argument or loaded from `),Qge=n(p3,"CODE",{});var Sdt=s(Qge);MVo=r(Sdt,"pretrained_model_name_or_path"),Sdt.forEach(t),EVo=r(p3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wge=n(p3,"CODE",{});var Rdt=s(Wge);CVo=r(Rdt,"pretrained_model_name_or_path"),Rdt.forEach(t),wVo=r(p3,":"),p3.forEach(t),AVo=i(ca),ve=n(ca,"UL",{});var Ee=s(ve);yv=n(Ee,"LI",{});var Txe=s(yv);Hge=n(Txe,"STRONG",{});var Bdt=s(Hge);yVo=r(Bdt,"beit"),Bdt.forEach(t),LVo=r(Txe," \u2014 "),nV=n(Txe,"A",{href:!0});var Pdt=s(nV);xVo=r(Pdt,"BeitForImageClassification"),Pdt.forEach(t),$Vo=r(Txe," (BEiT model)"),Txe.forEach(t),kVo=i(Ee),Lv=n(Ee,"LI",{});var Mxe=s(Lv);Uge=n(Mxe,"STRONG",{});var Idt=s(Uge);SVo=r(Idt,"convnext"),Idt.forEach(t),RVo=r(Mxe," \u2014 "),sV=n(Mxe,"A",{href:!0});var qdt=s(sV);BVo=r(qdt,"ConvNextForImageClassification"),qdt.forEach(t),PVo=r(Mxe," (ConvNext model)"),Mxe.forEach(t),IVo=i(Ee),xv=n(Ee,"LI",{});var Exe=s(xv);Jge=n(Exe,"STRONG",{});var Ndt=s(Jge);qVo=r(Ndt,"data2vec-vision"),Ndt.forEach(t),NVo=r(Exe," \u2014 "),lV=n(Exe,"A",{href:!0});var jdt=s(lV);jVo=r(jdt,"Data2VecVisionForImageClassification"),jdt.forEach(t),DVo=r(Exe," (Data2VecVision model)"),Exe.forEach(t),GVo=i(Ee),Bs=n(Ee,"LI",{});var n$=s(Bs);Yge=n(n$,"STRONG",{});var Ddt=s(Yge);OVo=r(Ddt,"deit"),Ddt.forEach(t),VVo=r(n$," \u2014 "),iV=n(n$,"A",{href:!0});var Gdt=s(iV);XVo=r(Gdt,"DeiTForImageClassification"),Gdt.forEach(t),zVo=r(n$," or "),dV=n(n$,"A",{href:!0});var Odt=s(dV);QVo=r(Odt,"DeiTForImageClassificationWithTeacher"),Odt.forEach(t),WVo=r(n$," (DeiT model)"),n$.forEach(t),HVo=i(Ee),$v=n(Ee,"LI",{});var Cxe=s($v);Kge=n(Cxe,"STRONG",{});var Vdt=s(Kge);UVo=r(Vdt,"imagegpt"),Vdt.forEach(t),JVo=r(Cxe," \u2014 "),cV=n(Cxe,"A",{href:!0});var Xdt=s(cV);YVo=r(Xdt,"ImageGPTForImageClassification"),Xdt.forEach(t),KVo=r(Cxe," (ImageGPT model)"),Cxe.forEach(t),ZVo=i(Ee),gt=n(Ee,"LI",{});var ff=s(gt);Zge=n(ff,"STRONG",{});var zdt=s(Zge);eXo=r(zdt,"perceiver"),zdt.forEach(t),oXo=r(ff," \u2014 "),fV=n(ff,"A",{href:!0});var Qdt=s(fV);rXo=r(Qdt,"PerceiverForImageClassificationLearned"),Qdt.forEach(t),tXo=r(ff," or "),mV=n(ff,"A",{href:!0});var Wdt=s(mV);aXo=r(Wdt,"PerceiverForImageClassificationFourier"),Wdt.forEach(t),nXo=r(ff," or "),gV=n(ff,"A",{href:!0});var Hdt=s(gV);sXo=r(Hdt,"PerceiverForImageClassificationConvProcessing"),Hdt.forEach(t),lXo=r(ff," (Perceiver model)"),ff.forEach(t),iXo=i(Ee),kv=n(Ee,"LI",{});var wxe=s(kv);ehe=n(wxe,"STRONG",{});var Udt=s(ehe);dXo=r(Udt,"poolformer"),Udt.forEach(t),cXo=r(wxe," \u2014 "),hV=n(wxe,"A",{href:!0});var Jdt=s(hV);fXo=r(Jdt,"PoolFormerForImageClassification"),Jdt.forEach(t),mXo=r(wxe," (PoolFormer model)"),wxe.forEach(t),gXo=i(Ee),Sv=n(Ee,"LI",{});var Axe=s(Sv);ohe=n(Axe,"STRONG",{});var Ydt=s(ohe);hXo=r(Ydt,"regnet"),Ydt.forEach(t),pXo=r(Axe," \u2014 "),pV=n(Axe,"A",{href:!0});var Kdt=s(pV);uXo=r(Kdt,"RegNetForImageClassification"),Kdt.forEach(t),_Xo=r(Axe," (RegNet model)"),Axe.forEach(t),bXo=i(Ee),Rv=n(Ee,"LI",{});var yxe=s(Rv);rhe=n(yxe,"STRONG",{});var Zdt=s(rhe);vXo=r(Zdt,"resnet"),Zdt.forEach(t),FXo=r(yxe," \u2014 "),uV=n(yxe,"A",{href:!0});var ect=s(uV);TXo=r(ect,"ResNetForImageClassification"),ect.forEach(t),MXo=r(yxe," (ResNet model)"),yxe.forEach(t),EXo=i(Ee),Bv=n(Ee,"LI",{});var Lxe=s(Bv);the=n(Lxe,"STRONG",{});var oct=s(the);CXo=r(oct,"segformer"),oct.forEach(t),wXo=r(Lxe," \u2014 "),_V=n(Lxe,"A",{href:!0});var rct=s(_V);AXo=r(rct,"SegformerForImageClassification"),rct.forEach(t),yXo=r(Lxe," (SegFormer model)"),Lxe.forEach(t),LXo=i(Ee),Pv=n(Ee,"LI",{});var xxe=s(Pv);ahe=n(xxe,"STRONG",{});var tct=s(ahe);xXo=r(tct,"swin"),tct.forEach(t),$Xo=r(xxe," \u2014 "),bV=n(xxe,"A",{href:!0});var act=s(bV);kXo=r(act,"SwinForImageClassification"),act.forEach(t),SXo=r(xxe," (Swin model)"),xxe.forEach(t),RXo=i(Ee),Iv=n(Ee,"LI",{});var $xe=s(Iv);nhe=n($xe,"STRONG",{});var nct=s(nhe);BXo=r(nct,"van"),nct.forEach(t),PXo=r($xe," \u2014 "),vV=n($xe,"A",{href:!0});var sct=s(vV);IXo=r(sct,"VanForImageClassification"),sct.forEach(t),qXo=r($xe," (VAN model)"),$xe.forEach(t),NXo=i(Ee),qv=n(Ee,"LI",{});var kxe=s(qv);she=n(kxe,"STRONG",{});var lct=s(she);jXo=r(lct,"vit"),lct.forEach(t),DXo=r(kxe," \u2014 "),FV=n(kxe,"A",{href:!0});var ict=s(FV);GXo=r(ict,"ViTForImageClassification"),ict.forEach(t),OXo=r(kxe," (ViT model)"),kxe.forEach(t),Ee.forEach(t),VXo=i(ca),Nv=n(ca,"P",{});var Sxe=s(Nv);XXo=r(Sxe,"The model is set in evaluation mode by default using "),lhe=n(Sxe,"CODE",{});var dct=s(lhe);zXo=r(dct,"model.eval()"),dct.forEach(t),QXo=r(Sxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ihe=n(Sxe,"CODE",{});var cct=s(ihe);WXo=r(cct,"model.train()"),cct.forEach(t),Sxe.forEach(t),HXo=i(ca),T(jv.$$.fragment,ca),ca.forEach(t),Ks.forEach(t),HPe=i(f),ad=n(f,"H2",{class:!0});var Kqe=s(ad);Dv=n(Kqe,"A",{id:!0,class:!0,href:!0});var fct=s(Dv);dhe=n(fct,"SPAN",{});var mct=s(dhe);T(M0.$$.fragment,mct),mct.forEach(t),fct.forEach(t),UXo=i(Kqe),che=n(Kqe,"SPAN",{});var gct=s(che);JXo=r(gct,"AutoModelForVision2Seq"),gct.forEach(t),Kqe.forEach(t),UPe=i(f),Do=n(f,"DIV",{class:!0});var Zs=s(Do);T(E0.$$.fragment,Zs),YXo=i(Zs),nd=n(Zs,"P",{});var bK=s(nd);KXo=r(bK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),TV=n(bK,"A",{href:!0});var hct=s(TV);ZXo=r(hct,"from_pretrained()"),hct.forEach(t),ezo=r(bK," class method or the "),MV=n(bK,"A",{href:!0});var pct=s(MV);ozo=r(pct,"from_config()"),pct.forEach(t),rzo=r(bK,` class
method.`),bK.forEach(t),tzo=i(Zs),C0=n(Zs,"P",{});var Zqe=s(C0);azo=r(Zqe,"This class cannot be instantiated directly using "),fhe=n(Zqe,"CODE",{});var uct=s(fhe);nzo=r(uct,"__init__()"),uct.forEach(t),szo=r(Zqe," (throws an error)."),Zqe.forEach(t),lzo=i(Zs),ht=n(Zs,"DIV",{class:!0});var u3=s(ht);T(w0.$$.fragment,u3),izo=i(u3),mhe=n(u3,"P",{});var _ct=s(mhe);dzo=r(_ct,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),_ct.forEach(t),czo=i(u3),sd=n(u3,"P",{});var vK=s(sd);fzo=r(vK,`Note:
Loading a model from its configuration file does `),ghe=n(vK,"STRONG",{});var bct=s(ghe);mzo=r(bct,"not"),bct.forEach(t),gzo=r(vK,` load the model weights. It only affects the
model\u2019s configuration. Use `),EV=n(vK,"A",{href:!0});var vct=s(EV);hzo=r(vct,"from_pretrained()"),vct.forEach(t),pzo=r(vK," to load the model weights."),vK.forEach(t),uzo=i(u3),T(Gv.$$.fragment,u3),u3.forEach(t),_zo=i(Zs),so=n(Zs,"DIV",{class:!0});var fa=s(so);T(A0.$$.fragment,fa),bzo=i(fa),hhe=n(fa,"P",{});var Fct=s(hhe);vzo=r(Fct,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Fct.forEach(t),Fzo=i(fa),Na=n(fa,"P",{});var _3=s(Na);Tzo=r(_3,"The model class to instantiate is selected based on the "),phe=n(_3,"CODE",{});var Tct=s(phe);Mzo=r(Tct,"model_type"),Tct.forEach(t),Ezo=r(_3,` property of the config object (either
passed as an argument or loaded from `),uhe=n(_3,"CODE",{});var Mct=s(uhe);Czo=r(Mct,"pretrained_model_name_or_path"),Mct.forEach(t),wzo=r(_3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_he=n(_3,"CODE",{});var Ect=s(_he);Azo=r(Ect,"pretrained_model_name_or_path"),Ect.forEach(t),yzo=r(_3,":"),_3.forEach(t),Lzo=i(fa),bhe=n(fa,"UL",{});var Cct=s(bhe);Ov=n(Cct,"LI",{});var Rxe=s(Ov);vhe=n(Rxe,"STRONG",{});var wct=s(vhe);xzo=r(wct,"vision-encoder-decoder"),wct.forEach(t),$zo=r(Rxe," \u2014 "),CV=n(Rxe,"A",{href:!0});var Act=s(CV);kzo=r(Act,"VisionEncoderDecoderModel"),Act.forEach(t),Szo=r(Rxe," (Vision Encoder decoder model)"),Rxe.forEach(t),Cct.forEach(t),Rzo=i(fa),Vv=n(fa,"P",{});var Bxe=s(Vv);Bzo=r(Bxe,"The model is set in evaluation mode by default using "),Fhe=n(Bxe,"CODE",{});var yct=s(Fhe);Pzo=r(yct,"model.eval()"),yct.forEach(t),Izo=r(Bxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),The=n(Bxe,"CODE",{});var Lct=s(The);qzo=r(Lct,"model.train()"),Lct.forEach(t),Bxe.forEach(t),Nzo=i(fa),T(Xv.$$.fragment,fa),fa.forEach(t),Zs.forEach(t),JPe=i(f),ld=n(f,"H2",{class:!0});var eNe=s(ld);zv=n(eNe,"A",{id:!0,class:!0,href:!0});var xct=s(zv);Mhe=n(xct,"SPAN",{});var $ct=s(Mhe);T(y0.$$.fragment,$ct),$ct.forEach(t),xct.forEach(t),jzo=i(eNe),Ehe=n(eNe,"SPAN",{});var kct=s(Ehe);Dzo=r(kct,"AutoModelForAudioClassification"),kct.forEach(t),eNe.forEach(t),YPe=i(f),Go=n(f,"DIV",{class:!0});var el=s(Go);T(L0.$$.fragment,el),Gzo=i(el),id=n(el,"P",{});var FK=s(id);Ozo=r(FK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),wV=n(FK,"A",{href:!0});var Sct=s(wV);Vzo=r(Sct,"from_pretrained()"),Sct.forEach(t),Xzo=r(FK," class method or the "),AV=n(FK,"A",{href:!0});var Rct=s(AV);zzo=r(Rct,"from_config()"),Rct.forEach(t),Qzo=r(FK,` class
method.`),FK.forEach(t),Wzo=i(el),x0=n(el,"P",{});var oNe=s(x0);Hzo=r(oNe,"This class cannot be instantiated directly using "),Che=n(oNe,"CODE",{});var Bct=s(Che);Uzo=r(Bct,"__init__()"),Bct.forEach(t),Jzo=r(oNe," (throws an error)."),oNe.forEach(t),Yzo=i(el),pt=n(el,"DIV",{class:!0});var b3=s(pt);T($0.$$.fragment,b3),Kzo=i(b3),whe=n(b3,"P",{});var Pct=s(whe);Zzo=r(Pct,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Pct.forEach(t),eQo=i(b3),dd=n(b3,"P",{});var TK=s(dd);oQo=r(TK,`Note:
Loading a model from its configuration file does `),Ahe=n(TK,"STRONG",{});var Ict=s(Ahe);rQo=r(Ict,"not"),Ict.forEach(t),tQo=r(TK,` load the model weights. It only affects the
model\u2019s configuration. Use `),yV=n(TK,"A",{href:!0});var qct=s(yV);aQo=r(qct,"from_pretrained()"),qct.forEach(t),nQo=r(TK," to load the model weights."),TK.forEach(t),sQo=i(b3),T(Qv.$$.fragment,b3),b3.forEach(t),lQo=i(el),lo=n(el,"DIV",{class:!0});var ma=s(lo);T(k0.$$.fragment,ma),iQo=i(ma),yhe=n(ma,"P",{});var Nct=s(yhe);dQo=r(Nct,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Nct.forEach(t),cQo=i(ma),ja=n(ma,"P",{});var v3=s(ja);fQo=r(v3,"The model class to instantiate is selected based on the "),Lhe=n(v3,"CODE",{});var jct=s(Lhe);mQo=r(jct,"model_type"),jct.forEach(t),gQo=r(v3,` property of the config object (either
passed as an argument or loaded from `),xhe=n(v3,"CODE",{});var Dct=s(xhe);hQo=r(Dct,"pretrained_model_name_or_path"),Dct.forEach(t),pQo=r(v3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$he=n(v3,"CODE",{});var Gct=s($he);uQo=r(Gct,"pretrained_model_name_or_path"),Gct.forEach(t),_Qo=r(v3,":"),v3.forEach(t),bQo=i(ma),Ne=n(ma,"UL",{});var bo=s(Ne);Wv=n(bo,"LI",{});var Pxe=s(Wv);khe=n(Pxe,"STRONG",{});var Oct=s(khe);vQo=r(Oct,"data2vec-audio"),Oct.forEach(t),FQo=r(Pxe," \u2014 "),LV=n(Pxe,"A",{href:!0});var Vct=s(LV);TQo=r(Vct,"Data2VecAudioForSequenceClassification"),Vct.forEach(t),MQo=r(Pxe," (Data2VecAudio model)"),Pxe.forEach(t),EQo=i(bo),Hv=n(bo,"LI",{});var Ixe=s(Hv);She=n(Ixe,"STRONG",{});var Xct=s(She);CQo=r(Xct,"hubert"),Xct.forEach(t),wQo=r(Ixe," \u2014 "),xV=n(Ixe,"A",{href:!0});var zct=s(xV);AQo=r(zct,"HubertForSequenceClassification"),zct.forEach(t),yQo=r(Ixe," (Hubert model)"),Ixe.forEach(t),LQo=i(bo),Uv=n(bo,"LI",{});var qxe=s(Uv);Rhe=n(qxe,"STRONG",{});var Qct=s(Rhe);xQo=r(Qct,"sew"),Qct.forEach(t),$Qo=r(qxe," \u2014 "),$V=n(qxe,"A",{href:!0});var Wct=s($V);kQo=r(Wct,"SEWForSequenceClassification"),Wct.forEach(t),SQo=r(qxe," (SEW model)"),qxe.forEach(t),RQo=i(bo),Jv=n(bo,"LI",{});var Nxe=s(Jv);Bhe=n(Nxe,"STRONG",{});var Hct=s(Bhe);BQo=r(Hct,"sew-d"),Hct.forEach(t),PQo=r(Nxe," \u2014 "),kV=n(Nxe,"A",{href:!0});var Uct=s(kV);IQo=r(Uct,"SEWDForSequenceClassification"),Uct.forEach(t),qQo=r(Nxe," (SEW-D model)"),Nxe.forEach(t),NQo=i(bo),Yv=n(bo,"LI",{});var jxe=s(Yv);Phe=n(jxe,"STRONG",{});var Jct=s(Phe);jQo=r(Jct,"unispeech"),Jct.forEach(t),DQo=r(jxe," \u2014 "),SV=n(jxe,"A",{href:!0});var Yct=s(SV);GQo=r(Yct,"UniSpeechForSequenceClassification"),Yct.forEach(t),OQo=r(jxe," (UniSpeech model)"),jxe.forEach(t),VQo=i(bo),Kv=n(bo,"LI",{});var Dxe=s(Kv);Ihe=n(Dxe,"STRONG",{});var Kct=s(Ihe);XQo=r(Kct,"unispeech-sat"),Kct.forEach(t),zQo=r(Dxe," \u2014 "),RV=n(Dxe,"A",{href:!0});var Zct=s(RV);QQo=r(Zct,"UniSpeechSatForSequenceClassification"),Zct.forEach(t),WQo=r(Dxe," (UniSpeechSat model)"),Dxe.forEach(t),HQo=i(bo),Zv=n(bo,"LI",{});var Gxe=s(Zv);qhe=n(Gxe,"STRONG",{});var eft=s(qhe);UQo=r(eft,"wav2vec2"),eft.forEach(t),JQo=r(Gxe," \u2014 "),BV=n(Gxe,"A",{href:!0});var oft=s(BV);YQo=r(oft,"Wav2Vec2ForSequenceClassification"),oft.forEach(t),KQo=r(Gxe," (Wav2Vec2 model)"),Gxe.forEach(t),ZQo=i(bo),eF=n(bo,"LI",{});var Oxe=s(eF);Nhe=n(Oxe,"STRONG",{});var rft=s(Nhe);eWo=r(rft,"wavlm"),rft.forEach(t),oWo=r(Oxe," \u2014 "),PV=n(Oxe,"A",{href:!0});var tft=s(PV);rWo=r(tft,"WavLMForSequenceClassification"),tft.forEach(t),tWo=r(Oxe," (WavLM model)"),Oxe.forEach(t),bo.forEach(t),aWo=i(ma),oF=n(ma,"P",{});var Vxe=s(oF);nWo=r(Vxe,"The model is set in evaluation mode by default using "),jhe=n(Vxe,"CODE",{});var aft=s(jhe);sWo=r(aft,"model.eval()"),aft.forEach(t),lWo=r(Vxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dhe=n(Vxe,"CODE",{});var nft=s(Dhe);iWo=r(nft,"model.train()"),nft.forEach(t),Vxe.forEach(t),dWo=i(ma),T(rF.$$.fragment,ma),ma.forEach(t),el.forEach(t),KPe=i(f),cd=n(f,"H2",{class:!0});var rNe=s(cd);tF=n(rNe,"A",{id:!0,class:!0,href:!0});var sft=s(tF);Ghe=n(sft,"SPAN",{});var lft=s(Ghe);T(S0.$$.fragment,lft),lft.forEach(t),sft.forEach(t),cWo=i(rNe),Ohe=n(rNe,"SPAN",{});var ift=s(Ohe);fWo=r(ift,"AutoModelForAudioFrameClassification"),ift.forEach(t),rNe.forEach(t),ZPe=i(f),Oo=n(f,"DIV",{class:!0});var ol=s(Oo);T(R0.$$.fragment,ol),mWo=i(ol),fd=n(ol,"P",{});var MK=s(fd);gWo=r(MK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),IV=n(MK,"A",{href:!0});var dft=s(IV);hWo=r(dft,"from_pretrained()"),dft.forEach(t),pWo=r(MK," class method or the "),qV=n(MK,"A",{href:!0});var cft=s(qV);uWo=r(cft,"from_config()"),cft.forEach(t),_Wo=r(MK,` class
method.`),MK.forEach(t),bWo=i(ol),B0=n(ol,"P",{});var tNe=s(B0);vWo=r(tNe,"This class cannot be instantiated directly using "),Vhe=n(tNe,"CODE",{});var fft=s(Vhe);FWo=r(fft,"__init__()"),fft.forEach(t),TWo=r(tNe," (throws an error)."),tNe.forEach(t),MWo=i(ol),ut=n(ol,"DIV",{class:!0});var F3=s(ut);T(P0.$$.fragment,F3),EWo=i(F3),Xhe=n(F3,"P",{});var mft=s(Xhe);CWo=r(mft,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),mft.forEach(t),wWo=i(F3),md=n(F3,"P",{});var EK=s(md);AWo=r(EK,`Note:
Loading a model from its configuration file does `),zhe=n(EK,"STRONG",{});var gft=s(zhe);yWo=r(gft,"not"),gft.forEach(t),LWo=r(EK,` load the model weights. It only affects the
model\u2019s configuration. Use `),NV=n(EK,"A",{href:!0});var hft=s(NV);xWo=r(hft,"from_pretrained()"),hft.forEach(t),$Wo=r(EK," to load the model weights."),EK.forEach(t),kWo=i(F3),T(aF.$$.fragment,F3),F3.forEach(t),SWo=i(ol),io=n(ol,"DIV",{class:!0});var ga=s(io);T(I0.$$.fragment,ga),RWo=i(ga),Qhe=n(ga,"P",{});var pft=s(Qhe);BWo=r(pft,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),pft.forEach(t),PWo=i(ga),Da=n(ga,"P",{});var T3=s(Da);IWo=r(T3,"The model class to instantiate is selected based on the "),Whe=n(T3,"CODE",{});var uft=s(Whe);qWo=r(uft,"model_type"),uft.forEach(t),NWo=r(T3,` property of the config object (either
passed as an argument or loaded from `),Hhe=n(T3,"CODE",{});var _ft=s(Hhe);jWo=r(_ft,"pretrained_model_name_or_path"),_ft.forEach(t),DWo=r(T3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uhe=n(T3,"CODE",{});var bft=s(Uhe);GWo=r(bft,"pretrained_model_name_or_path"),bft.forEach(t),OWo=r(T3,":"),T3.forEach(t),VWo=i(ga),Ga=n(ga,"UL",{});var M3=s(Ga);nF=n(M3,"LI",{});var Xxe=s(nF);Jhe=n(Xxe,"STRONG",{});var vft=s(Jhe);XWo=r(vft,"data2vec-audio"),vft.forEach(t),zWo=r(Xxe," \u2014 "),jV=n(Xxe,"A",{href:!0});var Fft=s(jV);QWo=r(Fft,"Data2VecAudioForAudioFrameClassification"),Fft.forEach(t),WWo=r(Xxe," (Data2VecAudio model)"),Xxe.forEach(t),HWo=i(M3),sF=n(M3,"LI",{});var zxe=s(sF);Yhe=n(zxe,"STRONG",{});var Tft=s(Yhe);UWo=r(Tft,"unispeech-sat"),Tft.forEach(t),JWo=r(zxe," \u2014 "),DV=n(zxe,"A",{href:!0});var Mft=s(DV);YWo=r(Mft,"UniSpeechSatForAudioFrameClassification"),Mft.forEach(t),KWo=r(zxe," (UniSpeechSat model)"),zxe.forEach(t),ZWo=i(M3),lF=n(M3,"LI",{});var Qxe=s(lF);Khe=n(Qxe,"STRONG",{});var Eft=s(Khe);eHo=r(Eft,"wav2vec2"),Eft.forEach(t),oHo=r(Qxe," \u2014 "),GV=n(Qxe,"A",{href:!0});var Cft=s(GV);rHo=r(Cft,"Wav2Vec2ForAudioFrameClassification"),Cft.forEach(t),tHo=r(Qxe," (Wav2Vec2 model)"),Qxe.forEach(t),aHo=i(M3),iF=n(M3,"LI",{});var Wxe=s(iF);Zhe=n(Wxe,"STRONG",{});var wft=s(Zhe);nHo=r(wft,"wavlm"),wft.forEach(t),sHo=r(Wxe," \u2014 "),OV=n(Wxe,"A",{href:!0});var Aft=s(OV);lHo=r(Aft,"WavLMForAudioFrameClassification"),Aft.forEach(t),iHo=r(Wxe," (WavLM model)"),Wxe.forEach(t),M3.forEach(t),dHo=i(ga),dF=n(ga,"P",{});var Hxe=s(dF);cHo=r(Hxe,"The model is set in evaluation mode by default using "),epe=n(Hxe,"CODE",{});var yft=s(epe);fHo=r(yft,"model.eval()"),yft.forEach(t),mHo=r(Hxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ope=n(Hxe,"CODE",{});var Lft=s(ope);gHo=r(Lft,"model.train()"),Lft.forEach(t),Hxe.forEach(t),hHo=i(ga),T(cF.$$.fragment,ga),ga.forEach(t),ol.forEach(t),eIe=i(f),gd=n(f,"H2",{class:!0});var aNe=s(gd);fF=n(aNe,"A",{id:!0,class:!0,href:!0});var xft=s(fF);rpe=n(xft,"SPAN",{});var $ft=s(rpe);T(q0.$$.fragment,$ft),$ft.forEach(t),xft.forEach(t),pHo=i(aNe),tpe=n(aNe,"SPAN",{});var kft=s(tpe);uHo=r(kft,"AutoModelForCTC"),kft.forEach(t),aNe.forEach(t),oIe=i(f),Vo=n(f,"DIV",{class:!0});var rl=s(Vo);T(N0.$$.fragment,rl),_Ho=i(rl),hd=n(rl,"P",{});var CK=s(hd);bHo=r(CK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),VV=n(CK,"A",{href:!0});var Sft=s(VV);vHo=r(Sft,"from_pretrained()"),Sft.forEach(t),FHo=r(CK," class method or the "),XV=n(CK,"A",{href:!0});var Rft=s(XV);THo=r(Rft,"from_config()"),Rft.forEach(t),MHo=r(CK,` class
method.`),CK.forEach(t),EHo=i(rl),j0=n(rl,"P",{});var nNe=s(j0);CHo=r(nNe,"This class cannot be instantiated directly using "),ape=n(nNe,"CODE",{});var Bft=s(ape);wHo=r(Bft,"__init__()"),Bft.forEach(t),AHo=r(nNe," (throws an error)."),nNe.forEach(t),yHo=i(rl),_t=n(rl,"DIV",{class:!0});var E3=s(_t);T(D0.$$.fragment,E3),LHo=i(E3),npe=n(E3,"P",{});var Pft=s(npe);xHo=r(Pft,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Pft.forEach(t),$Ho=i(E3),pd=n(E3,"P",{});var wK=s(pd);kHo=r(wK,`Note:
Loading a model from its configuration file does `),spe=n(wK,"STRONG",{});var Ift=s(spe);SHo=r(Ift,"not"),Ift.forEach(t),RHo=r(wK,` load the model weights. It only affects the
model\u2019s configuration. Use `),zV=n(wK,"A",{href:!0});var qft=s(zV);BHo=r(qft,"from_pretrained()"),qft.forEach(t),PHo=r(wK," to load the model weights."),wK.forEach(t),IHo=i(E3),T(mF.$$.fragment,E3),E3.forEach(t),qHo=i(rl),co=n(rl,"DIV",{class:!0});var ha=s(co);T(G0.$$.fragment,ha),NHo=i(ha),lpe=n(ha,"P",{});var Nft=s(lpe);jHo=r(Nft,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Nft.forEach(t),DHo=i(ha),Oa=n(ha,"P",{});var C3=s(Oa);GHo=r(C3,"The model class to instantiate is selected based on the "),ipe=n(C3,"CODE",{});var jft=s(ipe);OHo=r(jft,"model_type"),jft.forEach(t),VHo=r(C3,` property of the config object (either
passed as an argument or loaded from `),dpe=n(C3,"CODE",{});var Dft=s(dpe);XHo=r(Dft,"pretrained_model_name_or_path"),Dft.forEach(t),zHo=r(C3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cpe=n(C3,"CODE",{});var Gft=s(cpe);QHo=r(Gft,"pretrained_model_name_or_path"),Gft.forEach(t),WHo=r(C3,":"),C3.forEach(t),HHo=i(ha),je=n(ha,"UL",{});var vo=s(je);gF=n(vo,"LI",{});var Uxe=s(gF);fpe=n(Uxe,"STRONG",{});var Oft=s(fpe);UHo=r(Oft,"data2vec-audio"),Oft.forEach(t),JHo=r(Uxe," \u2014 "),QV=n(Uxe,"A",{href:!0});var Vft=s(QV);YHo=r(Vft,"Data2VecAudioForCTC"),Vft.forEach(t),KHo=r(Uxe," (Data2VecAudio model)"),Uxe.forEach(t),ZHo=i(vo),hF=n(vo,"LI",{});var Jxe=s(hF);mpe=n(Jxe,"STRONG",{});var Xft=s(mpe);eUo=r(Xft,"hubert"),Xft.forEach(t),oUo=r(Jxe," \u2014 "),WV=n(Jxe,"A",{href:!0});var zft=s(WV);rUo=r(zft,"HubertForCTC"),zft.forEach(t),tUo=r(Jxe," (Hubert model)"),Jxe.forEach(t),aUo=i(vo),pF=n(vo,"LI",{});var Yxe=s(pF);gpe=n(Yxe,"STRONG",{});var Qft=s(gpe);nUo=r(Qft,"sew"),Qft.forEach(t),sUo=r(Yxe," \u2014 "),HV=n(Yxe,"A",{href:!0});var Wft=s(HV);lUo=r(Wft,"SEWForCTC"),Wft.forEach(t),iUo=r(Yxe," (SEW model)"),Yxe.forEach(t),dUo=i(vo),uF=n(vo,"LI",{});var Kxe=s(uF);hpe=n(Kxe,"STRONG",{});var Hft=s(hpe);cUo=r(Hft,"sew-d"),Hft.forEach(t),fUo=r(Kxe," \u2014 "),UV=n(Kxe,"A",{href:!0});var Uft=s(UV);mUo=r(Uft,"SEWDForCTC"),Uft.forEach(t),gUo=r(Kxe," (SEW-D model)"),Kxe.forEach(t),hUo=i(vo),_F=n(vo,"LI",{});var Zxe=s(_F);ppe=n(Zxe,"STRONG",{});var Jft=s(ppe);pUo=r(Jft,"unispeech"),Jft.forEach(t),uUo=r(Zxe," \u2014 "),JV=n(Zxe,"A",{href:!0});var Yft=s(JV);_Uo=r(Yft,"UniSpeechForCTC"),Yft.forEach(t),bUo=r(Zxe," (UniSpeech model)"),Zxe.forEach(t),vUo=i(vo),bF=n(vo,"LI",{});var e7e=s(bF);upe=n(e7e,"STRONG",{});var Kft=s(upe);FUo=r(Kft,"unispeech-sat"),Kft.forEach(t),TUo=r(e7e," \u2014 "),YV=n(e7e,"A",{href:!0});var Zft=s(YV);MUo=r(Zft,"UniSpeechSatForCTC"),Zft.forEach(t),EUo=r(e7e," (UniSpeechSat model)"),e7e.forEach(t),CUo=i(vo),vF=n(vo,"LI",{});var o7e=s(vF);_pe=n(o7e,"STRONG",{});var emt=s(_pe);wUo=r(emt,"wav2vec2"),emt.forEach(t),AUo=r(o7e," \u2014 "),KV=n(o7e,"A",{href:!0});var omt=s(KV);yUo=r(omt,"Wav2Vec2ForCTC"),omt.forEach(t),LUo=r(o7e," (Wav2Vec2 model)"),o7e.forEach(t),xUo=i(vo),FF=n(vo,"LI",{});var r7e=s(FF);bpe=n(r7e,"STRONG",{});var rmt=s(bpe);$Uo=r(rmt,"wavlm"),rmt.forEach(t),kUo=r(r7e," \u2014 "),ZV=n(r7e,"A",{href:!0});var tmt=s(ZV);SUo=r(tmt,"WavLMForCTC"),tmt.forEach(t),RUo=r(r7e," (WavLM model)"),r7e.forEach(t),vo.forEach(t),BUo=i(ha),TF=n(ha,"P",{});var t7e=s(TF);PUo=r(t7e,"The model is set in evaluation mode by default using "),vpe=n(t7e,"CODE",{});var amt=s(vpe);IUo=r(amt,"model.eval()"),amt.forEach(t),qUo=r(t7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fpe=n(t7e,"CODE",{});var nmt=s(Fpe);NUo=r(nmt,"model.train()"),nmt.forEach(t),t7e.forEach(t),jUo=i(ha),T(MF.$$.fragment,ha),ha.forEach(t),rl.forEach(t),rIe=i(f),ud=n(f,"H2",{class:!0});var sNe=s(ud);EF=n(sNe,"A",{id:!0,class:!0,href:!0});var smt=s(EF);Tpe=n(smt,"SPAN",{});var lmt=s(Tpe);T(O0.$$.fragment,lmt),lmt.forEach(t),smt.forEach(t),DUo=i(sNe),Mpe=n(sNe,"SPAN",{});var imt=s(Mpe);GUo=r(imt,"AutoModelForSpeechSeq2Seq"),imt.forEach(t),sNe.forEach(t),tIe=i(f),Xo=n(f,"DIV",{class:!0});var tl=s(Xo);T(V0.$$.fragment,tl),OUo=i(tl),_d=n(tl,"P",{});var AK=s(_d);VUo=r(AK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),eX=n(AK,"A",{href:!0});var dmt=s(eX);XUo=r(dmt,"from_pretrained()"),dmt.forEach(t),zUo=r(AK," class method or the "),oX=n(AK,"A",{href:!0});var cmt=s(oX);QUo=r(cmt,"from_config()"),cmt.forEach(t),WUo=r(AK,` class
method.`),AK.forEach(t),HUo=i(tl),X0=n(tl,"P",{});var lNe=s(X0);UUo=r(lNe,"This class cannot be instantiated directly using "),Epe=n(lNe,"CODE",{});var fmt=s(Epe);JUo=r(fmt,"__init__()"),fmt.forEach(t),YUo=r(lNe," (throws an error)."),lNe.forEach(t),KUo=i(tl),bt=n(tl,"DIV",{class:!0});var w3=s(bt);T(z0.$$.fragment,w3),ZUo=i(w3),Cpe=n(w3,"P",{});var mmt=s(Cpe);eJo=r(mmt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),mmt.forEach(t),oJo=i(w3),bd=n(w3,"P",{});var yK=s(bd);rJo=r(yK,`Note:
Loading a model from its configuration file does `),wpe=n(yK,"STRONG",{});var gmt=s(wpe);tJo=r(gmt,"not"),gmt.forEach(t),aJo=r(yK,` load the model weights. It only affects the
model\u2019s configuration. Use `),rX=n(yK,"A",{href:!0});var hmt=s(rX);nJo=r(hmt,"from_pretrained()"),hmt.forEach(t),sJo=r(yK," to load the model weights."),yK.forEach(t),lJo=i(w3),T(CF.$$.fragment,w3),w3.forEach(t),iJo=i(tl),fo=n(tl,"DIV",{class:!0});var pa=s(fo);T(Q0.$$.fragment,pa),dJo=i(pa),Ape=n(pa,"P",{});var pmt=s(Ape);cJo=r(pmt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),pmt.forEach(t),fJo=i(pa),Va=n(pa,"P",{});var A3=s(Va);mJo=r(A3,"The model class to instantiate is selected based on the "),ype=n(A3,"CODE",{});var umt=s(ype);gJo=r(umt,"model_type"),umt.forEach(t),hJo=r(A3,` property of the config object (either
passed as an argument or loaded from `),Lpe=n(A3,"CODE",{});var _mt=s(Lpe);pJo=r(_mt,"pretrained_model_name_or_path"),_mt.forEach(t),uJo=r(A3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xpe=n(A3,"CODE",{});var bmt=s(xpe);_Jo=r(bmt,"pretrained_model_name_or_path"),bmt.forEach(t),bJo=r(A3,":"),A3.forEach(t),vJo=i(pa),W0=n(pa,"UL",{});var iNe=s(W0);wF=n(iNe,"LI",{});var a7e=s(wF);$pe=n(a7e,"STRONG",{});var vmt=s($pe);FJo=r(vmt,"speech-encoder-decoder"),vmt.forEach(t),TJo=r(a7e," \u2014 "),tX=n(a7e,"A",{href:!0});var Fmt=s(tX);MJo=r(Fmt,"SpeechEncoderDecoderModel"),Fmt.forEach(t),EJo=r(a7e," (Speech Encoder decoder model)"),a7e.forEach(t),CJo=i(iNe),AF=n(iNe,"LI",{});var n7e=s(AF);kpe=n(n7e,"STRONG",{});var Tmt=s(kpe);wJo=r(Tmt,"speech_to_text"),Tmt.forEach(t),AJo=r(n7e," \u2014 "),aX=n(n7e,"A",{href:!0});var Mmt=s(aX);yJo=r(Mmt,"Speech2TextForConditionalGeneration"),Mmt.forEach(t),LJo=r(n7e," (Speech2Text model)"),n7e.forEach(t),iNe.forEach(t),xJo=i(pa),yF=n(pa,"P",{});var s7e=s(yF);$Jo=r(s7e,"The model is set in evaluation mode by default using "),Spe=n(s7e,"CODE",{});var Emt=s(Spe);kJo=r(Emt,"model.eval()"),Emt.forEach(t),SJo=r(s7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rpe=n(s7e,"CODE",{});var Cmt=s(Rpe);RJo=r(Cmt,"model.train()"),Cmt.forEach(t),s7e.forEach(t),BJo=i(pa),T(LF.$$.fragment,pa),pa.forEach(t),tl.forEach(t),aIe=i(f),vd=n(f,"H2",{class:!0});var dNe=s(vd);xF=n(dNe,"A",{id:!0,class:!0,href:!0});var wmt=s(xF);Bpe=n(wmt,"SPAN",{});var Amt=s(Bpe);T(H0.$$.fragment,Amt),Amt.forEach(t),wmt.forEach(t),PJo=i(dNe),Ppe=n(dNe,"SPAN",{});var ymt=s(Ppe);IJo=r(ymt,"AutoModelForAudioXVector"),ymt.forEach(t),dNe.forEach(t),nIe=i(f),zo=n(f,"DIV",{class:!0});var al=s(zo);T(U0.$$.fragment,al),qJo=i(al),Fd=n(al,"P",{});var LK=s(Fd);NJo=r(LK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),nX=n(LK,"A",{href:!0});var Lmt=s(nX);jJo=r(Lmt,"from_pretrained()"),Lmt.forEach(t),DJo=r(LK," class method or the "),sX=n(LK,"A",{href:!0});var xmt=s(sX);GJo=r(xmt,"from_config()"),xmt.forEach(t),OJo=r(LK,` class
method.`),LK.forEach(t),VJo=i(al),J0=n(al,"P",{});var cNe=s(J0);XJo=r(cNe,"This class cannot be instantiated directly using "),Ipe=n(cNe,"CODE",{});var $mt=s(Ipe);zJo=r($mt,"__init__()"),$mt.forEach(t),QJo=r(cNe," (throws an error)."),cNe.forEach(t),WJo=i(al),vt=n(al,"DIV",{class:!0});var y3=s(vt);T(Y0.$$.fragment,y3),HJo=i(y3),qpe=n(y3,"P",{});var kmt=s(qpe);UJo=r(kmt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),kmt.forEach(t),JJo=i(y3),Td=n(y3,"P",{});var xK=s(Td);YJo=r(xK,`Note:
Loading a model from its configuration file does `),Npe=n(xK,"STRONG",{});var Smt=s(Npe);KJo=r(Smt,"not"),Smt.forEach(t),ZJo=r(xK,` load the model weights. It only affects the
model\u2019s configuration. Use `),lX=n(xK,"A",{href:!0});var Rmt=s(lX);eYo=r(Rmt,"from_pretrained()"),Rmt.forEach(t),oYo=r(xK," to load the model weights."),xK.forEach(t),rYo=i(y3),T($F.$$.fragment,y3),y3.forEach(t),tYo=i(al),mo=n(al,"DIV",{class:!0});var ua=s(mo);T(K0.$$.fragment,ua),aYo=i(ua),jpe=n(ua,"P",{});var Bmt=s(jpe);nYo=r(Bmt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Bmt.forEach(t),sYo=i(ua),Xa=n(ua,"P",{});var L3=s(Xa);lYo=r(L3,"The model class to instantiate is selected based on the "),Dpe=n(L3,"CODE",{});var Pmt=s(Dpe);iYo=r(Pmt,"model_type"),Pmt.forEach(t),dYo=r(L3,` property of the config object (either
passed as an argument or loaded from `),Gpe=n(L3,"CODE",{});var Imt=s(Gpe);cYo=r(Imt,"pretrained_model_name_or_path"),Imt.forEach(t),fYo=r(L3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ope=n(L3,"CODE",{});var qmt=s(Ope);mYo=r(qmt,"pretrained_model_name_or_path"),qmt.forEach(t),gYo=r(L3,":"),L3.forEach(t),hYo=i(ua),za=n(ua,"UL",{});var x3=s(za);kF=n(x3,"LI",{});var l7e=s(kF);Vpe=n(l7e,"STRONG",{});var Nmt=s(Vpe);pYo=r(Nmt,"data2vec-audio"),Nmt.forEach(t),uYo=r(l7e," \u2014 "),iX=n(l7e,"A",{href:!0});var jmt=s(iX);_Yo=r(jmt,"Data2VecAudioForXVector"),jmt.forEach(t),bYo=r(l7e," (Data2VecAudio model)"),l7e.forEach(t),vYo=i(x3),SF=n(x3,"LI",{});var i7e=s(SF);Xpe=n(i7e,"STRONG",{});var Dmt=s(Xpe);FYo=r(Dmt,"unispeech-sat"),Dmt.forEach(t),TYo=r(i7e," \u2014 "),dX=n(i7e,"A",{href:!0});var Gmt=s(dX);MYo=r(Gmt,"UniSpeechSatForXVector"),Gmt.forEach(t),EYo=r(i7e," (UniSpeechSat model)"),i7e.forEach(t),CYo=i(x3),RF=n(x3,"LI",{});var d7e=s(RF);zpe=n(d7e,"STRONG",{});var Omt=s(zpe);wYo=r(Omt,"wav2vec2"),Omt.forEach(t),AYo=r(d7e," \u2014 "),cX=n(d7e,"A",{href:!0});var Vmt=s(cX);yYo=r(Vmt,"Wav2Vec2ForXVector"),Vmt.forEach(t),LYo=r(d7e," (Wav2Vec2 model)"),d7e.forEach(t),xYo=i(x3),BF=n(x3,"LI",{});var c7e=s(BF);Qpe=n(c7e,"STRONG",{});var Xmt=s(Qpe);$Yo=r(Xmt,"wavlm"),Xmt.forEach(t),kYo=r(c7e," \u2014 "),fX=n(c7e,"A",{href:!0});var zmt=s(fX);SYo=r(zmt,"WavLMForXVector"),zmt.forEach(t),RYo=r(c7e," (WavLM model)"),c7e.forEach(t),x3.forEach(t),BYo=i(ua),PF=n(ua,"P",{});var f7e=s(PF);PYo=r(f7e,"The model is set in evaluation mode by default using "),Wpe=n(f7e,"CODE",{});var Qmt=s(Wpe);IYo=r(Qmt,"model.eval()"),Qmt.forEach(t),qYo=r(f7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hpe=n(f7e,"CODE",{});var Wmt=s(Hpe);NYo=r(Wmt,"model.train()"),Wmt.forEach(t),f7e.forEach(t),jYo=i(ua),T(IF.$$.fragment,ua),ua.forEach(t),al.forEach(t),sIe=i(f),Md=n(f,"H2",{class:!0});var fNe=s(Md);qF=n(fNe,"A",{id:!0,class:!0,href:!0});var Hmt=s(qF);Upe=n(Hmt,"SPAN",{});var Umt=s(Upe);T(Z0.$$.fragment,Umt),Umt.forEach(t),Hmt.forEach(t),DYo=i(fNe),Jpe=n(fNe,"SPAN",{});var Jmt=s(Jpe);GYo=r(Jmt,"AutoModelForMaskedImageModeling"),Jmt.forEach(t),fNe.forEach(t),lIe=i(f),Qo=n(f,"DIV",{class:!0});var nl=s(Qo);T(ey.$$.fragment,nl),OYo=i(nl),Ed=n(nl,"P",{});var $K=s(Ed);VYo=r($K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),mX=n($K,"A",{href:!0});var Ymt=s(mX);XYo=r(Ymt,"from_pretrained()"),Ymt.forEach(t),zYo=r($K," class method or the "),gX=n($K,"A",{href:!0});var Kmt=s(gX);QYo=r(Kmt,"from_config()"),Kmt.forEach(t),WYo=r($K,` class
method.`),$K.forEach(t),HYo=i(nl),oy=n(nl,"P",{});var mNe=s(oy);UYo=r(mNe,"This class cannot be instantiated directly using "),Ype=n(mNe,"CODE",{});var Zmt=s(Ype);JYo=r(Zmt,"__init__()"),Zmt.forEach(t),YYo=r(mNe," (throws an error)."),mNe.forEach(t),KYo=i(nl),Ft=n(nl,"DIV",{class:!0});var $3=s(Ft);T(ry.$$.fragment,$3),ZYo=i($3),Kpe=n($3,"P",{});var egt=s(Kpe);eKo=r(egt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),egt.forEach(t),oKo=i($3),Cd=n($3,"P",{});var kK=s(Cd);rKo=r(kK,`Note:
Loading a model from its configuration file does `),Zpe=n(kK,"STRONG",{});var ogt=s(Zpe);tKo=r(ogt,"not"),ogt.forEach(t),aKo=r(kK,` load the model weights. It only affects the
model\u2019s configuration. Use `),hX=n(kK,"A",{href:!0});var rgt=s(hX);nKo=r(rgt,"from_pretrained()"),rgt.forEach(t),sKo=r(kK," to load the model weights."),kK.forEach(t),lKo=i($3),T(NF.$$.fragment,$3),$3.forEach(t),iKo=i(nl),go=n(nl,"DIV",{class:!0});var _a=s(go);T(ty.$$.fragment,_a),dKo=i(_a),eue=n(_a,"P",{});var tgt=s(eue);cKo=r(tgt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),tgt.forEach(t),fKo=i(_a),Qa=n(_a,"P",{});var k3=s(Qa);mKo=r(k3,"The model class to instantiate is selected based on the "),oue=n(k3,"CODE",{});var agt=s(oue);gKo=r(agt,"model_type"),agt.forEach(t),hKo=r(k3,` property of the config object (either
passed as an argument or loaded from `),rue=n(k3,"CODE",{});var ngt=s(rue);pKo=r(ngt,"pretrained_model_name_or_path"),ngt.forEach(t),uKo=r(k3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tue=n(k3,"CODE",{});var sgt=s(tue);_Ko=r(sgt,"pretrained_model_name_or_path"),sgt.forEach(t),bKo=r(k3,":"),k3.forEach(t),vKo=i(_a),wd=n(_a,"UL",{});var SK=s(wd);jF=n(SK,"LI",{});var m7e=s(jF);aue=n(m7e,"STRONG",{});var lgt=s(aue);FKo=r(lgt,"deit"),lgt.forEach(t),TKo=r(m7e," \u2014 "),pX=n(m7e,"A",{href:!0});var igt=s(pX);MKo=r(igt,"DeiTForMaskedImageModeling"),igt.forEach(t),EKo=r(m7e," (DeiT model)"),m7e.forEach(t),CKo=i(SK),DF=n(SK,"LI",{});var g7e=s(DF);nue=n(g7e,"STRONG",{});var dgt=s(nue);wKo=r(dgt,"swin"),dgt.forEach(t),AKo=r(g7e," \u2014 "),uX=n(g7e,"A",{href:!0});var cgt=s(uX);yKo=r(cgt,"SwinForMaskedImageModeling"),cgt.forEach(t),LKo=r(g7e," (Swin model)"),g7e.forEach(t),xKo=i(SK),GF=n(SK,"LI",{});var h7e=s(GF);sue=n(h7e,"STRONG",{});var fgt=s(sue);$Ko=r(fgt,"vit"),fgt.forEach(t),kKo=r(h7e," \u2014 "),_X=n(h7e,"A",{href:!0});var mgt=s(_X);SKo=r(mgt,"ViTForMaskedImageModeling"),mgt.forEach(t),RKo=r(h7e," (ViT model)"),h7e.forEach(t),SK.forEach(t),BKo=i(_a),OF=n(_a,"P",{});var p7e=s(OF);PKo=r(p7e,"The model is set in evaluation mode by default using "),lue=n(p7e,"CODE",{});var ggt=s(lue);IKo=r(ggt,"model.eval()"),ggt.forEach(t),qKo=r(p7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iue=n(p7e,"CODE",{});var hgt=s(iue);NKo=r(hgt,"model.train()"),hgt.forEach(t),p7e.forEach(t),jKo=i(_a),T(VF.$$.fragment,_a),_a.forEach(t),nl.forEach(t),iIe=i(f),Ad=n(f,"H2",{class:!0});var gNe=s(Ad);XF=n(gNe,"A",{id:!0,class:!0,href:!0});var pgt=s(XF);due=n(pgt,"SPAN",{});var ugt=s(due);T(ay.$$.fragment,ugt),ugt.forEach(t),pgt.forEach(t),DKo=i(gNe),cue=n(gNe,"SPAN",{});var _gt=s(cue);GKo=r(_gt,"AutoModelForObjectDetection"),_gt.forEach(t),gNe.forEach(t),dIe=i(f),Wo=n(f,"DIV",{class:!0});var sl=s(Wo);T(ny.$$.fragment,sl),OKo=i(sl),yd=n(sl,"P",{});var RK=s(yd);VKo=r(RK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),bX=n(RK,"A",{href:!0});var bgt=s(bX);XKo=r(bgt,"from_pretrained()"),bgt.forEach(t),zKo=r(RK," class method or the "),vX=n(RK,"A",{href:!0});var vgt=s(vX);QKo=r(vgt,"from_config()"),vgt.forEach(t),WKo=r(RK,` class
method.`),RK.forEach(t),HKo=i(sl),sy=n(sl,"P",{});var hNe=s(sy);UKo=r(hNe,"This class cannot be instantiated directly using "),fue=n(hNe,"CODE",{});var Fgt=s(fue);JKo=r(Fgt,"__init__()"),Fgt.forEach(t),YKo=r(hNe," (throws an error)."),hNe.forEach(t),KKo=i(sl),Tt=n(sl,"DIV",{class:!0});var S3=s(Tt);T(ly.$$.fragment,S3),ZKo=i(S3),mue=n(S3,"P",{});var Tgt=s(mue);eZo=r(Tgt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Tgt.forEach(t),oZo=i(S3),Ld=n(S3,"P",{});var BK=s(Ld);rZo=r(BK,`Note:
Loading a model from its configuration file does `),gue=n(BK,"STRONG",{});var Mgt=s(gue);tZo=r(Mgt,"not"),Mgt.forEach(t),aZo=r(BK,` load the model weights. It only affects the
model\u2019s configuration. Use `),FX=n(BK,"A",{href:!0});var Egt=s(FX);nZo=r(Egt,"from_pretrained()"),Egt.forEach(t),sZo=r(BK," to load the model weights."),BK.forEach(t),lZo=i(S3),T(zF.$$.fragment,S3),S3.forEach(t),iZo=i(sl),ho=n(sl,"DIV",{class:!0});var ba=s(ho);T(iy.$$.fragment,ba),dZo=i(ba),hue=n(ba,"P",{});var Cgt=s(hue);cZo=r(Cgt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Cgt.forEach(t),fZo=i(ba),Wa=n(ba,"P",{});var R3=s(Wa);mZo=r(R3,"The model class to instantiate is selected based on the "),pue=n(R3,"CODE",{});var wgt=s(pue);gZo=r(wgt,"model_type"),wgt.forEach(t),hZo=r(R3,` property of the config object (either
passed as an argument or loaded from `),uue=n(R3,"CODE",{});var Agt=s(uue);pZo=r(Agt,"pretrained_model_name_or_path"),Agt.forEach(t),uZo=r(R3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ue=n(R3,"CODE",{});var ygt=s(_ue);_Zo=r(ygt,"pretrained_model_name_or_path"),ygt.forEach(t),bZo=r(R3,":"),R3.forEach(t),vZo=i(ba),dy=n(ba,"UL",{});var pNe=s(dy);QF=n(pNe,"LI",{});var u7e=s(QF);bue=n(u7e,"STRONG",{});var Lgt=s(bue);FZo=r(Lgt,"detr"),Lgt.forEach(t),TZo=r(u7e," \u2014 "),TX=n(u7e,"A",{href:!0});var xgt=s(TX);MZo=r(xgt,"DetrForObjectDetection"),xgt.forEach(t),EZo=r(u7e," (DETR model)"),u7e.forEach(t),CZo=i(pNe),WF=n(pNe,"LI",{});var _7e=s(WF);vue=n(_7e,"STRONG",{});var $gt=s(vue);wZo=r($gt,"yolos"),$gt.forEach(t),AZo=r(_7e," \u2014 "),MX=n(_7e,"A",{href:!0});var kgt=s(MX);yZo=r(kgt,"YolosForObjectDetection"),kgt.forEach(t),LZo=r(_7e," (YOLOS model)"),_7e.forEach(t),pNe.forEach(t),xZo=i(ba),HF=n(ba,"P",{});var b7e=s(HF);$Zo=r(b7e,"The model is set in evaluation mode by default using "),Fue=n(b7e,"CODE",{});var Sgt=s(Fue);kZo=r(Sgt,"model.eval()"),Sgt.forEach(t),SZo=r(b7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tue=n(b7e,"CODE",{});var Rgt=s(Tue);RZo=r(Rgt,"model.train()"),Rgt.forEach(t),b7e.forEach(t),BZo=i(ba),T(UF.$$.fragment,ba),ba.forEach(t),sl.forEach(t),cIe=i(f),xd=n(f,"H2",{class:!0});var uNe=s(xd);JF=n(uNe,"A",{id:!0,class:!0,href:!0});var Bgt=s(JF);Mue=n(Bgt,"SPAN",{});var Pgt=s(Mue);T(cy.$$.fragment,Pgt),Pgt.forEach(t),Bgt.forEach(t),PZo=i(uNe),Eue=n(uNe,"SPAN",{});var Igt=s(Eue);IZo=r(Igt,"AutoModelForImageSegmentation"),Igt.forEach(t),uNe.forEach(t),fIe=i(f),Ho=n(f,"DIV",{class:!0});var ll=s(Ho);T(fy.$$.fragment,ll),qZo=i(ll),$d=n(ll,"P",{});var PK=s($d);NZo=r(PK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),EX=n(PK,"A",{href:!0});var qgt=s(EX);jZo=r(qgt,"from_pretrained()"),qgt.forEach(t),DZo=r(PK," class method or the "),CX=n(PK,"A",{href:!0});var Ngt=s(CX);GZo=r(Ngt,"from_config()"),Ngt.forEach(t),OZo=r(PK,` class
method.`),PK.forEach(t),VZo=i(ll),my=n(ll,"P",{});var _Ne=s(my);XZo=r(_Ne,"This class cannot be instantiated directly using "),Cue=n(_Ne,"CODE",{});var jgt=s(Cue);zZo=r(jgt,"__init__()"),jgt.forEach(t),QZo=r(_Ne," (throws an error)."),_Ne.forEach(t),WZo=i(ll),Mt=n(ll,"DIV",{class:!0});var B3=s(Mt);T(gy.$$.fragment,B3),HZo=i(B3),wue=n(B3,"P",{});var Dgt=s(wue);UZo=r(Dgt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Dgt.forEach(t),JZo=i(B3),kd=n(B3,"P",{});var IK=s(kd);YZo=r(IK,`Note:
Loading a model from its configuration file does `),Aue=n(IK,"STRONG",{});var Ggt=s(Aue);KZo=r(Ggt,"not"),Ggt.forEach(t),ZZo=r(IK,` load the model weights. It only affects the
model\u2019s configuration. Use `),wX=n(IK,"A",{href:!0});var Ogt=s(wX);eer=r(Ogt,"from_pretrained()"),Ogt.forEach(t),oer=r(IK," to load the model weights."),IK.forEach(t),rer=i(B3),T(YF.$$.fragment,B3),B3.forEach(t),ter=i(ll),po=n(ll,"DIV",{class:!0});var va=s(po);T(hy.$$.fragment,va),aer=i(va),yue=n(va,"P",{});var Vgt=s(yue);ner=r(Vgt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Vgt.forEach(t),ser=i(va),Ha=n(va,"P",{});var P3=s(Ha);ler=r(P3,"The model class to instantiate is selected based on the "),Lue=n(P3,"CODE",{});var Xgt=s(Lue);ier=r(Xgt,"model_type"),Xgt.forEach(t),der=r(P3,` property of the config object (either
passed as an argument or loaded from `),xue=n(P3,"CODE",{});var zgt=s(xue);cer=r(zgt,"pretrained_model_name_or_path"),zgt.forEach(t),fer=r(P3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ue=n(P3,"CODE",{});var Qgt=s($ue);mer=r(Qgt,"pretrained_model_name_or_path"),Qgt.forEach(t),ger=r(P3,":"),P3.forEach(t),her=i(va),kue=n(va,"UL",{});var Wgt=s(kue);KF=n(Wgt,"LI",{});var v7e=s(KF);Sue=n(v7e,"STRONG",{});var Hgt=s(Sue);per=r(Hgt,"detr"),Hgt.forEach(t),uer=r(v7e," \u2014 "),AX=n(v7e,"A",{href:!0});var Ugt=s(AX);_er=r(Ugt,"DetrForSegmentation"),Ugt.forEach(t),ber=r(v7e," (DETR model)"),v7e.forEach(t),Wgt.forEach(t),ver=i(va),ZF=n(va,"P",{});var F7e=s(ZF);Fer=r(F7e,"The model is set in evaluation mode by default using "),Rue=n(F7e,"CODE",{});var Jgt=s(Rue);Ter=r(Jgt,"model.eval()"),Jgt.forEach(t),Mer=r(F7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bue=n(F7e,"CODE",{});var Ygt=s(Bue);Eer=r(Ygt,"model.train()"),Ygt.forEach(t),F7e.forEach(t),Cer=i(va),T(e6.$$.fragment,va),va.forEach(t),ll.forEach(t),mIe=i(f),Sd=n(f,"H2",{class:!0});var bNe=s(Sd);o6=n(bNe,"A",{id:!0,class:!0,href:!0});var Kgt=s(o6);Pue=n(Kgt,"SPAN",{});var Zgt=s(Pue);T(py.$$.fragment,Zgt),Zgt.forEach(t),Kgt.forEach(t),wer=i(bNe),Iue=n(bNe,"SPAN",{});var eht=s(Iue);Aer=r(eht,"AutoModelForSemanticSegmentation"),eht.forEach(t),bNe.forEach(t),gIe=i(f),Uo=n(f,"DIV",{class:!0});var il=s(Uo);T(uy.$$.fragment,il),yer=i(il),Rd=n(il,"P",{});var qK=s(Rd);Ler=r(qK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),yX=n(qK,"A",{href:!0});var oht=s(yX);xer=r(oht,"from_pretrained()"),oht.forEach(t),$er=r(qK," class method or the "),LX=n(qK,"A",{href:!0});var rht=s(LX);ker=r(rht,"from_config()"),rht.forEach(t),Ser=r(qK,` class
method.`),qK.forEach(t),Rer=i(il),_y=n(il,"P",{});var vNe=s(_y);Ber=r(vNe,"This class cannot be instantiated directly using "),que=n(vNe,"CODE",{});var tht=s(que);Per=r(tht,"__init__()"),tht.forEach(t),Ier=r(vNe," (throws an error)."),vNe.forEach(t),qer=i(il),Et=n(il,"DIV",{class:!0});var I3=s(Et);T(by.$$.fragment,I3),Ner=i(I3),Nue=n(I3,"P",{});var aht=s(Nue);jer=r(aht,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),aht.forEach(t),Der=i(I3),Bd=n(I3,"P",{});var NK=s(Bd);Ger=r(NK,`Note:
Loading a model from its configuration file does `),jue=n(NK,"STRONG",{});var nht=s(jue);Oer=r(nht,"not"),nht.forEach(t),Ver=r(NK,` load the model weights. It only affects the
model\u2019s configuration. Use `),xX=n(NK,"A",{href:!0});var sht=s(xX);Xer=r(sht,"from_pretrained()"),sht.forEach(t),zer=r(NK," to load the model weights."),NK.forEach(t),Qer=i(I3),T(r6.$$.fragment,I3),I3.forEach(t),Wer=i(il),uo=n(il,"DIV",{class:!0});var Fa=s(uo);T(vy.$$.fragment,Fa),Her=i(Fa),Due=n(Fa,"P",{});var lht=s(Due);Uer=r(lht,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),lht.forEach(t),Jer=i(Fa),Ua=n(Fa,"P",{});var q3=s(Ua);Yer=r(q3,"The model class to instantiate is selected based on the "),Gue=n(q3,"CODE",{});var iht=s(Gue);Ker=r(iht,"model_type"),iht.forEach(t),Zer=r(q3,` property of the config object (either
passed as an argument or loaded from `),Oue=n(q3,"CODE",{});var dht=s(Oue);eor=r(dht,"pretrained_model_name_or_path"),dht.forEach(t),oor=r(q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vue=n(q3,"CODE",{});var cht=s(Vue);ror=r(cht,"pretrained_model_name_or_path"),cht.forEach(t),tor=r(q3,":"),q3.forEach(t),aor=i(Fa),Ja=n(Fa,"UL",{});var N3=s(Ja);t6=n(N3,"LI",{});var T7e=s(t6);Xue=n(T7e,"STRONG",{});var fht=s(Xue);nor=r(fht,"beit"),fht.forEach(t),sor=r(T7e," \u2014 "),$X=n(T7e,"A",{href:!0});var mht=s($X);lor=r(mht,"BeitForSemanticSegmentation"),mht.forEach(t),ior=r(T7e," (BEiT model)"),T7e.forEach(t),dor=i(N3),a6=n(N3,"LI",{});var M7e=s(a6);zue=n(M7e,"STRONG",{});var ght=s(zue);cor=r(ght,"data2vec-vision"),ght.forEach(t),mor=r(M7e," \u2014 "),kX=n(M7e,"A",{href:!0});var hht=s(kX);gor=r(hht,"Data2VecVisionForSemanticSegmentation"),hht.forEach(t),hor=r(M7e," (Data2VecVision model)"),M7e.forEach(t),por=i(N3),n6=n(N3,"LI",{});var E7e=s(n6);Que=n(E7e,"STRONG",{});var pht=s(Que);uor=r(pht,"dpt"),pht.forEach(t),_or=r(E7e," \u2014 "),SX=n(E7e,"A",{href:!0});var uht=s(SX);bor=r(uht,"DPTForSemanticSegmentation"),uht.forEach(t),vor=r(E7e," (DPT model)"),E7e.forEach(t),For=i(N3),s6=n(N3,"LI",{});var C7e=s(s6);Wue=n(C7e,"STRONG",{});var _ht=s(Wue);Tor=r(_ht,"segformer"),_ht.forEach(t),Mor=r(C7e," \u2014 "),RX=n(C7e,"A",{href:!0});var bht=s(RX);Eor=r(bht,"SegformerForSemanticSegmentation"),bht.forEach(t),Cor=r(C7e," (SegFormer model)"),C7e.forEach(t),N3.forEach(t),wor=i(Fa),l6=n(Fa,"P",{});var w7e=s(l6);Aor=r(w7e,"The model is set in evaluation mode by default using "),Hue=n(w7e,"CODE",{});var vht=s(Hue);yor=r(vht,"model.eval()"),vht.forEach(t),Lor=r(w7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uue=n(w7e,"CODE",{});var Fht=s(Uue);xor=r(Fht,"model.train()"),Fht.forEach(t),w7e.forEach(t),$or=i(Fa),T(i6.$$.fragment,Fa),Fa.forEach(t),il.forEach(t),hIe=i(f),Pd=n(f,"H2",{class:!0});var FNe=s(Pd);d6=n(FNe,"A",{id:!0,class:!0,href:!0});var Tht=s(d6);Jue=n(Tht,"SPAN",{});var Mht=s(Jue);T(Fy.$$.fragment,Mht),Mht.forEach(t),Tht.forEach(t),kor=i(FNe),Yue=n(FNe,"SPAN",{});var Eht=s(Yue);Sor=r(Eht,"AutoModelForInstanceSegmentation"),Eht.forEach(t),FNe.forEach(t),pIe=i(f),Jo=n(f,"DIV",{class:!0});var dl=s(Jo);T(Ty.$$.fragment,dl),Ror=i(dl),Id=n(dl,"P",{});var jK=s(Id);Bor=r(jK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),BX=n(jK,"A",{href:!0});var Cht=s(BX);Por=r(Cht,"from_pretrained()"),Cht.forEach(t),Ior=r(jK," class method or the "),PX=n(jK,"A",{href:!0});var wht=s(PX);qor=r(wht,"from_config()"),wht.forEach(t),Nor=r(jK,` class
method.`),jK.forEach(t),jor=i(dl),My=n(dl,"P",{});var TNe=s(My);Dor=r(TNe,"This class cannot be instantiated directly using "),Kue=n(TNe,"CODE",{});var Aht=s(Kue);Gor=r(Aht,"__init__()"),Aht.forEach(t),Oor=r(TNe," (throws an error)."),TNe.forEach(t),Vor=i(dl),Ct=n(dl,"DIV",{class:!0});var j3=s(Ct);T(Ey.$$.fragment,j3),Xor=i(j3),Zue=n(j3,"P",{});var yht=s(Zue);zor=r(yht,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),yht.forEach(t),Qor=i(j3),qd=n(j3,"P",{});var DK=s(qd);Wor=r(DK,`Note:
Loading a model from its configuration file does `),e_e=n(DK,"STRONG",{});var Lht=s(e_e);Hor=r(Lht,"not"),Lht.forEach(t),Uor=r(DK,` load the model weights. It only affects the
model\u2019s configuration. Use `),IX=n(DK,"A",{href:!0});var xht=s(IX);Jor=r(xht,"from_pretrained()"),xht.forEach(t),Yor=r(DK," to load the model weights."),DK.forEach(t),Kor=i(j3),T(c6.$$.fragment,j3),j3.forEach(t),Zor=i(dl),_o=n(dl,"DIV",{class:!0});var Ta=s(_o);T(Cy.$$.fragment,Ta),err=i(Ta),o_e=n(Ta,"P",{});var $ht=s(o_e);orr=r($ht,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),$ht.forEach(t),rrr=i(Ta),Ya=n(Ta,"P",{});var D3=s(Ya);trr=r(D3,"The model class to instantiate is selected based on the "),r_e=n(D3,"CODE",{});var kht=s(r_e);arr=r(kht,"model_type"),kht.forEach(t),nrr=r(D3,` property of the config object (either
passed as an argument or loaded from `),t_e=n(D3,"CODE",{});var Sht=s(t_e);srr=r(Sht,"pretrained_model_name_or_path"),Sht.forEach(t),lrr=r(D3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a_e=n(D3,"CODE",{});var Rht=s(a_e);irr=r(Rht,"pretrained_model_name_or_path"),Rht.forEach(t),drr=r(D3,":"),D3.forEach(t),crr=i(Ta),n_e=n(Ta,"UL",{});var Bht=s(n_e);f6=n(Bht,"LI",{});var A7e=s(f6);s_e=n(A7e,"STRONG",{});var Pht=s(s_e);frr=r(Pht,"maskformer"),Pht.forEach(t),mrr=r(A7e," \u2014 "),qX=n(A7e,"A",{href:!0});var Iht=s(qX);grr=r(Iht,"MaskFormerForInstanceSegmentation"),Iht.forEach(t),hrr=r(A7e," (MaskFormer model)"),A7e.forEach(t),Bht.forEach(t),prr=i(Ta),m6=n(Ta,"P",{});var y7e=s(m6);urr=r(y7e,"The model is set in evaluation mode by default using "),l_e=n(y7e,"CODE",{});var qht=s(l_e);_rr=r(qht,"model.eval()"),qht.forEach(t),brr=r(y7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i_e=n(y7e,"CODE",{});var Nht=s(i_e);vrr=r(Nht,"model.train()"),Nht.forEach(t),y7e.forEach(t),Frr=i(Ta),T(g6.$$.fragment,Ta),Ta.forEach(t),dl.forEach(t),uIe=i(f),Nd=n(f,"H2",{class:!0});var MNe=s(Nd);h6=n(MNe,"A",{id:!0,class:!0,href:!0});var jht=s(h6);d_e=n(jht,"SPAN",{});var Dht=s(d_e);T(wy.$$.fragment,Dht),Dht.forEach(t),jht.forEach(t),Trr=i(MNe),c_e=n(MNe,"SPAN",{});var Ght=s(c_e);Mrr=r(Ght,"TFAutoModel"),Ght.forEach(t),MNe.forEach(t),_Ie=i(f),Yo=n(f,"DIV",{class:!0});var cl=s(Yo);T(Ay.$$.fragment,cl),Err=i(cl),jd=n(cl,"P",{});var GK=s(jd);Crr=r(GK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),NX=n(GK,"A",{href:!0});var Oht=s(NX);wrr=r(Oht,"from_pretrained()"),Oht.forEach(t),Arr=r(GK," class method or the "),jX=n(GK,"A",{href:!0});var Vht=s(jX);yrr=r(Vht,"from_config()"),Vht.forEach(t),Lrr=r(GK,` class
method.`),GK.forEach(t),xrr=i(cl),yy=n(cl,"P",{});var ENe=s(yy);$rr=r(ENe,"This class cannot be instantiated directly using "),f_e=n(ENe,"CODE",{});var Xht=s(f_e);krr=r(Xht,"__init__()"),Xht.forEach(t),Srr=r(ENe," (throws an error)."),ENe.forEach(t),Rrr=i(cl),wt=n(cl,"DIV",{class:!0});var G3=s(wt);T(Ly.$$.fragment,G3),Brr=i(G3),m_e=n(G3,"P",{});var zht=s(m_e);Prr=r(zht,"Instantiates one of the base model classes of the library from a configuration."),zht.forEach(t),Irr=i(G3),Dd=n(G3,"P",{});var OK=s(Dd);qrr=r(OK,`Note:
Loading a model from its configuration file does `),g_e=n(OK,"STRONG",{});var Qht=s(g_e);Nrr=r(Qht,"not"),Qht.forEach(t),jrr=r(OK,` load the model weights. It only affects the
model\u2019s configuration. Use `),DX=n(OK,"A",{href:!0});var Wht=s(DX);Drr=r(Wht,"from_pretrained()"),Wht.forEach(t),Grr=r(OK," to load the model weights."),OK.forEach(t),Orr=i(G3),T(p6.$$.fragment,G3),G3.forEach(t),Vrr=i(cl),wr=n(cl,"DIV",{class:!0});var fl=s(wr);T(xy.$$.fragment,fl),Xrr=i(fl),h_e=n(fl,"P",{});var Hht=s(h_e);zrr=r(Hht,"Instantiate one of the base model classes of the library from a pretrained model."),Hht.forEach(t),Qrr=i(fl),Ka=n(fl,"P",{});var O3=s(Ka);Wrr=r(O3,"The model class to instantiate is selected based on the "),p_e=n(O3,"CODE",{});var Uht=s(p_e);Hrr=r(Uht,"model_type"),Uht.forEach(t),Urr=r(O3,` property of the config object (either
passed as an argument or loaded from `),u_e=n(O3,"CODE",{});var Jht=s(u_e);Jrr=r(Jht,"pretrained_model_name_or_path"),Jht.forEach(t),Yrr=r(O3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),__e=n(O3,"CODE",{});var Yht=s(__e);Krr=r(Yht,"pretrained_model_name_or_path"),Yht.forEach(t),Zrr=r(O3,":"),O3.forEach(t),etr=i(fl),N=n(fl,"UL",{});var D=s(N);u6=n(D,"LI",{});var L7e=s(u6);b_e=n(L7e,"STRONG",{});var Kht=s(b_e);otr=r(Kht,"albert"),Kht.forEach(t),rtr=r(L7e," \u2014 "),GX=n(L7e,"A",{href:!0});var Zht=s(GX);ttr=r(Zht,"TFAlbertModel"),Zht.forEach(t),atr=r(L7e," (ALBERT model)"),L7e.forEach(t),ntr=i(D),_6=n(D,"LI",{});var x7e=s(_6);v_e=n(x7e,"STRONG",{});var ept=s(v_e);str=r(ept,"bart"),ept.forEach(t),ltr=r(x7e," \u2014 "),OX=n(x7e,"A",{href:!0});var opt=s(OX);itr=r(opt,"TFBartModel"),opt.forEach(t),dtr=r(x7e," (BART model)"),x7e.forEach(t),ctr=i(D),b6=n(D,"LI",{});var $7e=s(b6);F_e=n($7e,"STRONG",{});var rpt=s(F_e);ftr=r(rpt,"bert"),rpt.forEach(t),mtr=r($7e," \u2014 "),VX=n($7e,"A",{href:!0});var tpt=s(VX);gtr=r(tpt,"TFBertModel"),tpt.forEach(t),htr=r($7e," (BERT model)"),$7e.forEach(t),ptr=i(D),v6=n(D,"LI",{});var k7e=s(v6);T_e=n(k7e,"STRONG",{});var apt=s(T_e);utr=r(apt,"blenderbot"),apt.forEach(t),_tr=r(k7e," \u2014 "),XX=n(k7e,"A",{href:!0});var npt=s(XX);btr=r(npt,"TFBlenderbotModel"),npt.forEach(t),vtr=r(k7e," (Blenderbot model)"),k7e.forEach(t),Ftr=i(D),F6=n(D,"LI",{});var S7e=s(F6);M_e=n(S7e,"STRONG",{});var spt=s(M_e);Ttr=r(spt,"blenderbot-small"),spt.forEach(t),Mtr=r(S7e," \u2014 "),zX=n(S7e,"A",{href:!0});var lpt=s(zX);Etr=r(lpt,"TFBlenderbotSmallModel"),lpt.forEach(t),Ctr=r(S7e," (BlenderbotSmall model)"),S7e.forEach(t),wtr=i(D),T6=n(D,"LI",{});var R7e=s(T6);E_e=n(R7e,"STRONG",{});var ipt=s(E_e);Atr=r(ipt,"camembert"),ipt.forEach(t),ytr=r(R7e," \u2014 "),QX=n(R7e,"A",{href:!0});var dpt=s(QX);Ltr=r(dpt,"TFCamembertModel"),dpt.forEach(t),xtr=r(R7e," (CamemBERT model)"),R7e.forEach(t),$tr=i(D),M6=n(D,"LI",{});var B7e=s(M6);C_e=n(B7e,"STRONG",{});var cpt=s(C_e);ktr=r(cpt,"clip"),cpt.forEach(t),Str=r(B7e," \u2014 "),WX=n(B7e,"A",{href:!0});var fpt=s(WX);Rtr=r(fpt,"TFCLIPModel"),fpt.forEach(t),Btr=r(B7e," (CLIP model)"),B7e.forEach(t),Ptr=i(D),E6=n(D,"LI",{});var P7e=s(E6);w_e=n(P7e,"STRONG",{});var mpt=s(w_e);Itr=r(mpt,"convbert"),mpt.forEach(t),qtr=r(P7e," \u2014 "),HX=n(P7e,"A",{href:!0});var gpt=s(HX);Ntr=r(gpt,"TFConvBertModel"),gpt.forEach(t),jtr=r(P7e," (ConvBERT model)"),P7e.forEach(t),Dtr=i(D),C6=n(D,"LI",{});var I7e=s(C6);A_e=n(I7e,"STRONG",{});var hpt=s(A_e);Gtr=r(hpt,"convnext"),hpt.forEach(t),Otr=r(I7e," \u2014 "),UX=n(I7e,"A",{href:!0});var ppt=s(UX);Vtr=r(ppt,"TFConvNextModel"),ppt.forEach(t),Xtr=r(I7e," (ConvNext model)"),I7e.forEach(t),ztr=i(D),w6=n(D,"LI",{});var q7e=s(w6);y_e=n(q7e,"STRONG",{});var upt=s(y_e);Qtr=r(upt,"ctrl"),upt.forEach(t),Wtr=r(q7e," \u2014 "),JX=n(q7e,"A",{href:!0});var _pt=s(JX);Htr=r(_pt,"TFCTRLModel"),_pt.forEach(t),Utr=r(q7e," (CTRL model)"),q7e.forEach(t),Jtr=i(D),A6=n(D,"LI",{});var N7e=s(A6);L_e=n(N7e,"STRONG",{});var bpt=s(L_e);Ytr=r(bpt,"data2vec-vision"),bpt.forEach(t),Ktr=r(N7e," \u2014 "),YX=n(N7e,"A",{href:!0});var vpt=s(YX);Ztr=r(vpt,"TFData2VecVisionModel"),vpt.forEach(t),ear=r(N7e," (Data2VecVision model)"),N7e.forEach(t),oar=i(D),y6=n(D,"LI",{});var j7e=s(y6);x_e=n(j7e,"STRONG",{});var Fpt=s(x_e);rar=r(Fpt,"deberta"),Fpt.forEach(t),tar=r(j7e," \u2014 "),KX=n(j7e,"A",{href:!0});var Tpt=s(KX);aar=r(Tpt,"TFDebertaModel"),Tpt.forEach(t),nar=r(j7e," (DeBERTa model)"),j7e.forEach(t),sar=i(D),L6=n(D,"LI",{});var D7e=s(L6);$_e=n(D7e,"STRONG",{});var Mpt=s($_e);lar=r(Mpt,"deberta-v2"),Mpt.forEach(t),iar=r(D7e," \u2014 "),ZX=n(D7e,"A",{href:!0});var Ept=s(ZX);dar=r(Ept,"TFDebertaV2Model"),Ept.forEach(t),car=r(D7e," (DeBERTa-v2 model)"),D7e.forEach(t),far=i(D),x6=n(D,"LI",{});var G7e=s(x6);k_e=n(G7e,"STRONG",{});var Cpt=s(k_e);mar=r(Cpt,"distilbert"),Cpt.forEach(t),gar=r(G7e," \u2014 "),ez=n(G7e,"A",{href:!0});var wpt=s(ez);har=r(wpt,"TFDistilBertModel"),wpt.forEach(t),par=r(G7e," (DistilBERT model)"),G7e.forEach(t),uar=i(D),$6=n(D,"LI",{});var O7e=s($6);S_e=n(O7e,"STRONG",{});var Apt=s(S_e);_ar=r(Apt,"dpr"),Apt.forEach(t),bar=r(O7e," \u2014 "),oz=n(O7e,"A",{href:!0});var ypt=s(oz);Far=r(ypt,"TFDPRQuestionEncoder"),ypt.forEach(t),Tar=r(O7e," (DPR model)"),O7e.forEach(t),Mar=i(D),k6=n(D,"LI",{});var V7e=s(k6);R_e=n(V7e,"STRONG",{});var Lpt=s(R_e);Ear=r(Lpt,"electra"),Lpt.forEach(t),Car=r(V7e," \u2014 "),rz=n(V7e,"A",{href:!0});var xpt=s(rz);war=r(xpt,"TFElectraModel"),xpt.forEach(t),Aar=r(V7e," (ELECTRA model)"),V7e.forEach(t),yar=i(D),S6=n(D,"LI",{});var X7e=s(S6);B_e=n(X7e,"STRONG",{});var $pt=s(B_e);Lar=r($pt,"flaubert"),$pt.forEach(t),xar=r(X7e," \u2014 "),tz=n(X7e,"A",{href:!0});var kpt=s(tz);$ar=r(kpt,"TFFlaubertModel"),kpt.forEach(t),kar=r(X7e," (FlauBERT model)"),X7e.forEach(t),Sar=i(D),Ps=n(D,"LI",{});var s$=s(Ps);P_e=n(s$,"STRONG",{});var Spt=s(P_e);Rar=r(Spt,"funnel"),Spt.forEach(t),Bar=r(s$," \u2014 "),az=n(s$,"A",{href:!0});var Rpt=s(az);Par=r(Rpt,"TFFunnelModel"),Rpt.forEach(t),Iar=r(s$," or "),nz=n(s$,"A",{href:!0});var Bpt=s(nz);qar=r(Bpt,"TFFunnelBaseModel"),Bpt.forEach(t),Nar=r(s$," (Funnel Transformer model)"),s$.forEach(t),jar=i(D),R6=n(D,"LI",{});var z7e=s(R6);I_e=n(z7e,"STRONG",{});var Ppt=s(I_e);Dar=r(Ppt,"gpt2"),Ppt.forEach(t),Gar=r(z7e," \u2014 "),sz=n(z7e,"A",{href:!0});var Ipt=s(sz);Oar=r(Ipt,"TFGPT2Model"),Ipt.forEach(t),Var=r(z7e," (OpenAI GPT-2 model)"),z7e.forEach(t),Xar=i(D),B6=n(D,"LI",{});var Q7e=s(B6);q_e=n(Q7e,"STRONG",{});var qpt=s(q_e);zar=r(qpt,"gptj"),qpt.forEach(t),Qar=r(Q7e," \u2014 "),lz=n(Q7e,"A",{href:!0});var Npt=s(lz);War=r(Npt,"TFGPTJModel"),Npt.forEach(t),Har=r(Q7e," (GPT-J model)"),Q7e.forEach(t),Uar=i(D),P6=n(D,"LI",{});var W7e=s(P6);N_e=n(W7e,"STRONG",{});var jpt=s(N_e);Jar=r(jpt,"hubert"),jpt.forEach(t),Yar=r(W7e," \u2014 "),iz=n(W7e,"A",{href:!0});var Dpt=s(iz);Kar=r(Dpt,"TFHubertModel"),Dpt.forEach(t),Zar=r(W7e," (Hubert model)"),W7e.forEach(t),enr=i(D),I6=n(D,"LI",{});var H7e=s(I6);j_e=n(H7e,"STRONG",{});var Gpt=s(j_e);onr=r(Gpt,"layoutlm"),Gpt.forEach(t),rnr=r(H7e," \u2014 "),dz=n(H7e,"A",{href:!0});var Opt=s(dz);tnr=r(Opt,"TFLayoutLMModel"),Opt.forEach(t),anr=r(H7e," (LayoutLM model)"),H7e.forEach(t),nnr=i(D),q6=n(D,"LI",{});var U7e=s(q6);D_e=n(U7e,"STRONG",{});var Vpt=s(D_e);snr=r(Vpt,"led"),Vpt.forEach(t),lnr=r(U7e," \u2014 "),cz=n(U7e,"A",{href:!0});var Xpt=s(cz);inr=r(Xpt,"TFLEDModel"),Xpt.forEach(t),dnr=r(U7e," (LED model)"),U7e.forEach(t),cnr=i(D),N6=n(D,"LI",{});var J7e=s(N6);G_e=n(J7e,"STRONG",{});var zpt=s(G_e);fnr=r(zpt,"longformer"),zpt.forEach(t),mnr=r(J7e," \u2014 "),fz=n(J7e,"A",{href:!0});var Qpt=s(fz);gnr=r(Qpt,"TFLongformerModel"),Qpt.forEach(t),hnr=r(J7e," (Longformer model)"),J7e.forEach(t),pnr=i(D),j6=n(D,"LI",{});var Y7e=s(j6);O_e=n(Y7e,"STRONG",{});var Wpt=s(O_e);unr=r(Wpt,"lxmert"),Wpt.forEach(t),_nr=r(Y7e," \u2014 "),mz=n(Y7e,"A",{href:!0});var Hpt=s(mz);bnr=r(Hpt,"TFLxmertModel"),Hpt.forEach(t),vnr=r(Y7e," (LXMERT model)"),Y7e.forEach(t),Fnr=i(D),D6=n(D,"LI",{});var K7e=s(D6);V_e=n(K7e,"STRONG",{});var Upt=s(V_e);Tnr=r(Upt,"marian"),Upt.forEach(t),Mnr=r(K7e," \u2014 "),gz=n(K7e,"A",{href:!0});var Jpt=s(gz);Enr=r(Jpt,"TFMarianModel"),Jpt.forEach(t),Cnr=r(K7e," (Marian model)"),K7e.forEach(t),wnr=i(D),G6=n(D,"LI",{});var Z7e=s(G6);X_e=n(Z7e,"STRONG",{});var Ypt=s(X_e);Anr=r(Ypt,"mbart"),Ypt.forEach(t),ynr=r(Z7e," \u2014 "),hz=n(Z7e,"A",{href:!0});var Kpt=s(hz);Lnr=r(Kpt,"TFMBartModel"),Kpt.forEach(t),xnr=r(Z7e," (mBART model)"),Z7e.forEach(t),$nr=i(D),O6=n(D,"LI",{});var e$e=s(O6);z_e=n(e$e,"STRONG",{});var Zpt=s(z_e);knr=r(Zpt,"mobilebert"),Zpt.forEach(t),Snr=r(e$e," \u2014 "),pz=n(e$e,"A",{href:!0});var eut=s(pz);Rnr=r(eut,"TFMobileBertModel"),eut.forEach(t),Bnr=r(e$e," (MobileBERT model)"),e$e.forEach(t),Pnr=i(D),V6=n(D,"LI",{});var o$e=s(V6);Q_e=n(o$e,"STRONG",{});var out=s(Q_e);Inr=r(out,"mpnet"),out.forEach(t),qnr=r(o$e," \u2014 "),uz=n(o$e,"A",{href:!0});var rut=s(uz);Nnr=r(rut,"TFMPNetModel"),rut.forEach(t),jnr=r(o$e," (MPNet model)"),o$e.forEach(t),Dnr=i(D),X6=n(D,"LI",{});var r$e=s(X6);W_e=n(r$e,"STRONG",{});var tut=s(W_e);Gnr=r(tut,"mt5"),tut.forEach(t),Onr=r(r$e," \u2014 "),_z=n(r$e,"A",{href:!0});var aut=s(_z);Vnr=r(aut,"TFMT5Model"),aut.forEach(t),Xnr=r(r$e," (mT5 model)"),r$e.forEach(t),znr=i(D),z6=n(D,"LI",{});var t$e=s(z6);H_e=n(t$e,"STRONG",{});var nut=s(H_e);Qnr=r(nut,"openai-gpt"),nut.forEach(t),Wnr=r(t$e," \u2014 "),bz=n(t$e,"A",{href:!0});var sut=s(bz);Hnr=r(sut,"TFOpenAIGPTModel"),sut.forEach(t),Unr=r(t$e," (OpenAI GPT model)"),t$e.forEach(t),Jnr=i(D),Q6=n(D,"LI",{});var a$e=s(Q6);U_e=n(a$e,"STRONG",{});var lut=s(U_e);Ynr=r(lut,"pegasus"),lut.forEach(t),Knr=r(a$e," \u2014 "),vz=n(a$e,"A",{href:!0});var iut=s(vz);Znr=r(iut,"TFPegasusModel"),iut.forEach(t),esr=r(a$e," (Pegasus model)"),a$e.forEach(t),osr=i(D),W6=n(D,"LI",{});var n$e=s(W6);J_e=n(n$e,"STRONG",{});var dut=s(J_e);rsr=r(dut,"rembert"),dut.forEach(t),tsr=r(n$e," \u2014 "),Fz=n(n$e,"A",{href:!0});var cut=s(Fz);asr=r(cut,"TFRemBertModel"),cut.forEach(t),nsr=r(n$e," (RemBERT model)"),n$e.forEach(t),ssr=i(D),H6=n(D,"LI",{});var s$e=s(H6);Y_e=n(s$e,"STRONG",{});var fut=s(Y_e);lsr=r(fut,"roberta"),fut.forEach(t),isr=r(s$e," \u2014 "),Tz=n(s$e,"A",{href:!0});var mut=s(Tz);dsr=r(mut,"TFRobertaModel"),mut.forEach(t),csr=r(s$e," (RoBERTa model)"),s$e.forEach(t),fsr=i(D),U6=n(D,"LI",{});var l$e=s(U6);K_e=n(l$e,"STRONG",{});var gut=s(K_e);msr=r(gut,"roformer"),gut.forEach(t),gsr=r(l$e," \u2014 "),Mz=n(l$e,"A",{href:!0});var hut=s(Mz);hsr=r(hut,"TFRoFormerModel"),hut.forEach(t),psr=r(l$e," (RoFormer model)"),l$e.forEach(t),usr=i(D),J6=n(D,"LI",{});var i$e=s(J6);Z_e=n(i$e,"STRONG",{});var put=s(Z_e);_sr=r(put,"speech_to_text"),put.forEach(t),bsr=r(i$e," \u2014 "),Ez=n(i$e,"A",{href:!0});var uut=s(Ez);vsr=r(uut,"TFSpeech2TextModel"),uut.forEach(t),Fsr=r(i$e," (Speech2Text model)"),i$e.forEach(t),Tsr=i(D),Y6=n(D,"LI",{});var d$e=s(Y6);e1e=n(d$e,"STRONG",{});var _ut=s(e1e);Msr=r(_ut,"swin"),_ut.forEach(t),Esr=r(d$e," \u2014 "),Cz=n(d$e,"A",{href:!0});var but=s(Cz);Csr=r(but,"TFSwinModel"),but.forEach(t),wsr=r(d$e," (Swin model)"),d$e.forEach(t),Asr=i(D),K6=n(D,"LI",{});var c$e=s(K6);o1e=n(c$e,"STRONG",{});var vut=s(o1e);ysr=r(vut,"t5"),vut.forEach(t),Lsr=r(c$e," \u2014 "),wz=n(c$e,"A",{href:!0});var Fut=s(wz);xsr=r(Fut,"TFT5Model"),Fut.forEach(t),$sr=r(c$e," (T5 model)"),c$e.forEach(t),ksr=i(D),Z6=n(D,"LI",{});var f$e=s(Z6);r1e=n(f$e,"STRONG",{});var Tut=s(r1e);Ssr=r(Tut,"tapas"),Tut.forEach(t),Rsr=r(f$e," \u2014 "),Az=n(f$e,"A",{href:!0});var Mut=s(Az);Bsr=r(Mut,"TFTapasModel"),Mut.forEach(t),Psr=r(f$e," (TAPAS model)"),f$e.forEach(t),Isr=i(D),eT=n(D,"LI",{});var m$e=s(eT);t1e=n(m$e,"STRONG",{});var Eut=s(t1e);qsr=r(Eut,"transfo-xl"),Eut.forEach(t),Nsr=r(m$e," \u2014 "),yz=n(m$e,"A",{href:!0});var Cut=s(yz);jsr=r(Cut,"TFTransfoXLModel"),Cut.forEach(t),Dsr=r(m$e," (Transformer-XL model)"),m$e.forEach(t),Gsr=i(D),oT=n(D,"LI",{});var g$e=s(oT);a1e=n(g$e,"STRONG",{});var wut=s(a1e);Osr=r(wut,"vit"),wut.forEach(t),Vsr=r(g$e," \u2014 "),Lz=n(g$e,"A",{href:!0});var Aut=s(Lz);Xsr=r(Aut,"TFViTModel"),Aut.forEach(t),zsr=r(g$e," (ViT model)"),g$e.forEach(t),Qsr=i(D),rT=n(D,"LI",{});var h$e=s(rT);n1e=n(h$e,"STRONG",{});var yut=s(n1e);Wsr=r(yut,"vit_mae"),yut.forEach(t),Hsr=r(h$e," \u2014 "),xz=n(h$e,"A",{href:!0});var Lut=s(xz);Usr=r(Lut,"TFViTMAEModel"),Lut.forEach(t),Jsr=r(h$e," (ViTMAE model)"),h$e.forEach(t),Ysr=i(D),tT=n(D,"LI",{});var p$e=s(tT);s1e=n(p$e,"STRONG",{});var xut=s(s1e);Ksr=r(xut,"wav2vec2"),xut.forEach(t),Zsr=r(p$e," \u2014 "),$z=n(p$e,"A",{href:!0});var $ut=s($z);elr=r($ut,"TFWav2Vec2Model"),$ut.forEach(t),olr=r(p$e," (Wav2Vec2 model)"),p$e.forEach(t),rlr=i(D),aT=n(D,"LI",{});var u$e=s(aT);l1e=n(u$e,"STRONG",{});var kut=s(l1e);tlr=r(kut,"xlm"),kut.forEach(t),alr=r(u$e," \u2014 "),kz=n(u$e,"A",{href:!0});var Sut=s(kz);nlr=r(Sut,"TFXLMModel"),Sut.forEach(t),slr=r(u$e," (XLM model)"),u$e.forEach(t),llr=i(D),nT=n(D,"LI",{});var _$e=s(nT);i1e=n(_$e,"STRONG",{});var Rut=s(i1e);ilr=r(Rut,"xlm-roberta"),Rut.forEach(t),dlr=r(_$e," \u2014 "),Sz=n(_$e,"A",{href:!0});var But=s(Sz);clr=r(But,"TFXLMRobertaModel"),But.forEach(t),flr=r(_$e," (XLM-RoBERTa model)"),_$e.forEach(t),mlr=i(D),sT=n(D,"LI",{});var b$e=s(sT);d1e=n(b$e,"STRONG",{});var Put=s(d1e);glr=r(Put,"xlnet"),Put.forEach(t),hlr=r(b$e," \u2014 "),Rz=n(b$e,"A",{href:!0});var Iut=s(Rz);plr=r(Iut,"TFXLNetModel"),Iut.forEach(t),ulr=r(b$e," (XLNet model)"),b$e.forEach(t),D.forEach(t),_lr=i(fl),T(lT.$$.fragment,fl),fl.forEach(t),cl.forEach(t),bIe=i(f),Gd=n(f,"H2",{class:!0});var CNe=s(Gd);iT=n(CNe,"A",{id:!0,class:!0,href:!0});var qut=s(iT);c1e=n(qut,"SPAN",{});var Nut=s(c1e);T($y.$$.fragment,Nut),Nut.forEach(t),qut.forEach(t),blr=i(CNe),f1e=n(CNe,"SPAN",{});var jut=s(f1e);vlr=r(jut,"TFAutoModelForPreTraining"),jut.forEach(t),CNe.forEach(t),vIe=i(f),Ko=n(f,"DIV",{class:!0});var ml=s(Ko);T(ky.$$.fragment,ml),Flr=i(ml),Od=n(ml,"P",{});var VK=s(Od);Tlr=r(VK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Bz=n(VK,"A",{href:!0});var Dut=s(Bz);Mlr=r(Dut,"from_pretrained()"),Dut.forEach(t),Elr=r(VK," class method or the "),Pz=n(VK,"A",{href:!0});var Gut=s(Pz);Clr=r(Gut,"from_config()"),Gut.forEach(t),wlr=r(VK,` class
method.`),VK.forEach(t),Alr=i(ml),Sy=n(ml,"P",{});var wNe=s(Sy);ylr=r(wNe,"This class cannot be instantiated directly using "),m1e=n(wNe,"CODE",{});var Out=s(m1e);Llr=r(Out,"__init__()"),Out.forEach(t),xlr=r(wNe," (throws an error)."),wNe.forEach(t),$lr=i(ml),At=n(ml,"DIV",{class:!0});var V3=s(At);T(Ry.$$.fragment,V3),klr=i(V3),g1e=n(V3,"P",{});var Vut=s(g1e);Slr=r(Vut,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Vut.forEach(t),Rlr=i(V3),Vd=n(V3,"P",{});var XK=s(Vd);Blr=r(XK,`Note:
Loading a model from its configuration file does `),h1e=n(XK,"STRONG",{});var Xut=s(h1e);Plr=r(Xut,"not"),Xut.forEach(t),Ilr=r(XK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Iz=n(XK,"A",{href:!0});var zut=s(Iz);qlr=r(zut,"from_pretrained()"),zut.forEach(t),Nlr=r(XK," to load the model weights."),XK.forEach(t),jlr=i(V3),T(dT.$$.fragment,V3),V3.forEach(t),Dlr=i(ml),Ar=n(ml,"DIV",{class:!0});var gl=s(Ar);T(By.$$.fragment,gl),Glr=i(gl),p1e=n(gl,"P",{});var Qut=s(p1e);Olr=r(Qut,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Qut.forEach(t),Vlr=i(gl),Za=n(gl,"P",{});var X3=s(Za);Xlr=r(X3,"The model class to instantiate is selected based on the "),u1e=n(X3,"CODE",{});var Wut=s(u1e);zlr=r(Wut,"model_type"),Wut.forEach(t),Qlr=r(X3,` property of the config object (either
passed as an argument or loaded from `),_1e=n(X3,"CODE",{});var Hut=s(_1e);Wlr=r(Hut,"pretrained_model_name_or_path"),Hut.forEach(t),Hlr=r(X3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b1e=n(X3,"CODE",{});var Uut=s(b1e);Ulr=r(Uut,"pretrained_model_name_or_path"),Uut.forEach(t),Jlr=r(X3,":"),X3.forEach(t),Ylr=i(gl),ne=n(gl,"UL",{});var le=s(ne);cT=n(le,"LI",{});var v$e=s(cT);v1e=n(v$e,"STRONG",{});var Jut=s(v1e);Klr=r(Jut,"albert"),Jut.forEach(t),Zlr=r(v$e," \u2014 "),qz=n(v$e,"A",{href:!0});var Yut=s(qz);eir=r(Yut,"TFAlbertForPreTraining"),Yut.forEach(t),oir=r(v$e," (ALBERT model)"),v$e.forEach(t),rir=i(le),fT=n(le,"LI",{});var F$e=s(fT);F1e=n(F$e,"STRONG",{});var Kut=s(F1e);tir=r(Kut,"bart"),Kut.forEach(t),air=r(F$e," \u2014 "),Nz=n(F$e,"A",{href:!0});var Zut=s(Nz);nir=r(Zut,"TFBartForConditionalGeneration"),Zut.forEach(t),sir=r(F$e," (BART model)"),F$e.forEach(t),lir=i(le),mT=n(le,"LI",{});var T$e=s(mT);T1e=n(T$e,"STRONG",{});var e_t=s(T1e);iir=r(e_t,"bert"),e_t.forEach(t),dir=r(T$e," \u2014 "),jz=n(T$e,"A",{href:!0});var o_t=s(jz);cir=r(o_t,"TFBertForPreTraining"),o_t.forEach(t),fir=r(T$e," (BERT model)"),T$e.forEach(t),mir=i(le),gT=n(le,"LI",{});var M$e=s(gT);M1e=n(M$e,"STRONG",{});var r_t=s(M1e);gir=r(r_t,"camembert"),r_t.forEach(t),hir=r(M$e," \u2014 "),Dz=n(M$e,"A",{href:!0});var t_t=s(Dz);pir=r(t_t,"TFCamembertForMaskedLM"),t_t.forEach(t),uir=r(M$e," (CamemBERT model)"),M$e.forEach(t),_ir=i(le),hT=n(le,"LI",{});var E$e=s(hT);E1e=n(E$e,"STRONG",{});var a_t=s(E1e);bir=r(a_t,"ctrl"),a_t.forEach(t),vir=r(E$e," \u2014 "),Gz=n(E$e,"A",{href:!0});var n_t=s(Gz);Fir=r(n_t,"TFCTRLLMHeadModel"),n_t.forEach(t),Tir=r(E$e," (CTRL model)"),E$e.forEach(t),Mir=i(le),pT=n(le,"LI",{});var C$e=s(pT);C1e=n(C$e,"STRONG",{});var s_t=s(C1e);Eir=r(s_t,"distilbert"),s_t.forEach(t),Cir=r(C$e," \u2014 "),Oz=n(C$e,"A",{href:!0});var l_t=s(Oz);wir=r(l_t,"TFDistilBertForMaskedLM"),l_t.forEach(t),Air=r(C$e," (DistilBERT model)"),C$e.forEach(t),yir=i(le),uT=n(le,"LI",{});var w$e=s(uT);w1e=n(w$e,"STRONG",{});var i_t=s(w1e);Lir=r(i_t,"electra"),i_t.forEach(t),xir=r(w$e," \u2014 "),Vz=n(w$e,"A",{href:!0});var d_t=s(Vz);$ir=r(d_t,"TFElectraForPreTraining"),d_t.forEach(t),kir=r(w$e," (ELECTRA model)"),w$e.forEach(t),Sir=i(le),_T=n(le,"LI",{});var A$e=s(_T);A1e=n(A$e,"STRONG",{});var c_t=s(A1e);Rir=r(c_t,"flaubert"),c_t.forEach(t),Bir=r(A$e," \u2014 "),Xz=n(A$e,"A",{href:!0});var f_t=s(Xz);Pir=r(f_t,"TFFlaubertWithLMHeadModel"),f_t.forEach(t),Iir=r(A$e," (FlauBERT model)"),A$e.forEach(t),qir=i(le),bT=n(le,"LI",{});var y$e=s(bT);y1e=n(y$e,"STRONG",{});var m_t=s(y1e);Nir=r(m_t,"funnel"),m_t.forEach(t),jir=r(y$e," \u2014 "),zz=n(y$e,"A",{href:!0});var g_t=s(zz);Dir=r(g_t,"TFFunnelForPreTraining"),g_t.forEach(t),Gir=r(y$e," (Funnel Transformer model)"),y$e.forEach(t),Oir=i(le),vT=n(le,"LI",{});var L$e=s(vT);L1e=n(L$e,"STRONG",{});var h_t=s(L1e);Vir=r(h_t,"gpt2"),h_t.forEach(t),Xir=r(L$e," \u2014 "),Qz=n(L$e,"A",{href:!0});var p_t=s(Qz);zir=r(p_t,"TFGPT2LMHeadModel"),p_t.forEach(t),Qir=r(L$e," (OpenAI GPT-2 model)"),L$e.forEach(t),Wir=i(le),FT=n(le,"LI",{});var x$e=s(FT);x1e=n(x$e,"STRONG",{});var u_t=s(x1e);Hir=r(u_t,"layoutlm"),u_t.forEach(t),Uir=r(x$e," \u2014 "),Wz=n(x$e,"A",{href:!0});var __t=s(Wz);Jir=r(__t,"TFLayoutLMForMaskedLM"),__t.forEach(t),Yir=r(x$e," (LayoutLM model)"),x$e.forEach(t),Kir=i(le),TT=n(le,"LI",{});var $$e=s(TT);$1e=n($$e,"STRONG",{});var b_t=s($1e);Zir=r(b_t,"lxmert"),b_t.forEach(t),edr=r($$e," \u2014 "),Hz=n($$e,"A",{href:!0});var v_t=s(Hz);odr=r(v_t,"TFLxmertForPreTraining"),v_t.forEach(t),rdr=r($$e," (LXMERT model)"),$$e.forEach(t),tdr=i(le),MT=n(le,"LI",{});var k$e=s(MT);k1e=n(k$e,"STRONG",{});var F_t=s(k1e);adr=r(F_t,"mobilebert"),F_t.forEach(t),ndr=r(k$e," \u2014 "),Uz=n(k$e,"A",{href:!0});var T_t=s(Uz);sdr=r(T_t,"TFMobileBertForPreTraining"),T_t.forEach(t),ldr=r(k$e," (MobileBERT model)"),k$e.forEach(t),idr=i(le),ET=n(le,"LI",{});var S$e=s(ET);S1e=n(S$e,"STRONG",{});var M_t=s(S1e);ddr=r(M_t,"mpnet"),M_t.forEach(t),cdr=r(S$e," \u2014 "),Jz=n(S$e,"A",{href:!0});var E_t=s(Jz);fdr=r(E_t,"TFMPNetForMaskedLM"),E_t.forEach(t),mdr=r(S$e," (MPNet model)"),S$e.forEach(t),gdr=i(le),CT=n(le,"LI",{});var R$e=s(CT);R1e=n(R$e,"STRONG",{});var C_t=s(R1e);hdr=r(C_t,"openai-gpt"),C_t.forEach(t),pdr=r(R$e," \u2014 "),Yz=n(R$e,"A",{href:!0});var w_t=s(Yz);udr=r(w_t,"TFOpenAIGPTLMHeadModel"),w_t.forEach(t),_dr=r(R$e," (OpenAI GPT model)"),R$e.forEach(t),bdr=i(le),wT=n(le,"LI",{});var B$e=s(wT);B1e=n(B$e,"STRONG",{});var A_t=s(B1e);vdr=r(A_t,"roberta"),A_t.forEach(t),Fdr=r(B$e," \u2014 "),Kz=n(B$e,"A",{href:!0});var y_t=s(Kz);Tdr=r(y_t,"TFRobertaForMaskedLM"),y_t.forEach(t),Mdr=r(B$e," (RoBERTa model)"),B$e.forEach(t),Edr=i(le),AT=n(le,"LI",{});var P$e=s(AT);P1e=n(P$e,"STRONG",{});var L_t=s(P1e);Cdr=r(L_t,"t5"),L_t.forEach(t),wdr=r(P$e," \u2014 "),Zz=n(P$e,"A",{href:!0});var x_t=s(Zz);Adr=r(x_t,"TFT5ForConditionalGeneration"),x_t.forEach(t),ydr=r(P$e," (T5 model)"),P$e.forEach(t),Ldr=i(le),yT=n(le,"LI",{});var I$e=s(yT);I1e=n(I$e,"STRONG",{});var $_t=s(I1e);xdr=r($_t,"tapas"),$_t.forEach(t),$dr=r(I$e," \u2014 "),eQ=n(I$e,"A",{href:!0});var k_t=s(eQ);kdr=r(k_t,"TFTapasForMaskedLM"),k_t.forEach(t),Sdr=r(I$e," (TAPAS model)"),I$e.forEach(t),Rdr=i(le),LT=n(le,"LI",{});var q$e=s(LT);q1e=n(q$e,"STRONG",{});var S_t=s(q1e);Bdr=r(S_t,"transfo-xl"),S_t.forEach(t),Pdr=r(q$e," \u2014 "),oQ=n(q$e,"A",{href:!0});var R_t=s(oQ);Idr=r(R_t,"TFTransfoXLLMHeadModel"),R_t.forEach(t),qdr=r(q$e," (Transformer-XL model)"),q$e.forEach(t),Ndr=i(le),xT=n(le,"LI",{});var N$e=s(xT);N1e=n(N$e,"STRONG",{});var B_t=s(N1e);jdr=r(B_t,"vit_mae"),B_t.forEach(t),Ddr=r(N$e," \u2014 "),rQ=n(N$e,"A",{href:!0});var P_t=s(rQ);Gdr=r(P_t,"TFViTMAEForPreTraining"),P_t.forEach(t),Odr=r(N$e," (ViTMAE model)"),N$e.forEach(t),Vdr=i(le),$T=n(le,"LI",{});var j$e=s($T);j1e=n(j$e,"STRONG",{});var I_t=s(j1e);Xdr=r(I_t,"xlm"),I_t.forEach(t),zdr=r(j$e," \u2014 "),tQ=n(j$e,"A",{href:!0});var q_t=s(tQ);Qdr=r(q_t,"TFXLMWithLMHeadModel"),q_t.forEach(t),Wdr=r(j$e," (XLM model)"),j$e.forEach(t),Hdr=i(le),kT=n(le,"LI",{});var D$e=s(kT);D1e=n(D$e,"STRONG",{});var N_t=s(D1e);Udr=r(N_t,"xlm-roberta"),N_t.forEach(t),Jdr=r(D$e," \u2014 "),aQ=n(D$e,"A",{href:!0});var j_t=s(aQ);Ydr=r(j_t,"TFXLMRobertaForMaskedLM"),j_t.forEach(t),Kdr=r(D$e," (XLM-RoBERTa model)"),D$e.forEach(t),Zdr=i(le),ST=n(le,"LI",{});var G$e=s(ST);G1e=n(G$e,"STRONG",{});var D_t=s(G1e);ecr=r(D_t,"xlnet"),D_t.forEach(t),ocr=r(G$e," \u2014 "),nQ=n(G$e,"A",{href:!0});var G_t=s(nQ);rcr=r(G_t,"TFXLNetLMHeadModel"),G_t.forEach(t),tcr=r(G$e," (XLNet model)"),G$e.forEach(t),le.forEach(t),acr=i(gl),T(RT.$$.fragment,gl),gl.forEach(t),ml.forEach(t),FIe=i(f),Xd=n(f,"H2",{class:!0});var ANe=s(Xd);BT=n(ANe,"A",{id:!0,class:!0,href:!0});var O_t=s(BT);O1e=n(O_t,"SPAN",{});var V_t=s(O1e);T(Py.$$.fragment,V_t),V_t.forEach(t),O_t.forEach(t),ncr=i(ANe),V1e=n(ANe,"SPAN",{});var X_t=s(V1e);scr=r(X_t,"TFAutoModelForCausalLM"),X_t.forEach(t),ANe.forEach(t),TIe=i(f),Zo=n(f,"DIV",{class:!0});var hl=s(Zo);T(Iy.$$.fragment,hl),lcr=i(hl),zd=n(hl,"P",{});var zK=s(zd);icr=r(zK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),sQ=n(zK,"A",{href:!0});var z_t=s(sQ);dcr=r(z_t,"from_pretrained()"),z_t.forEach(t),ccr=r(zK," class method or the "),lQ=n(zK,"A",{href:!0});var Q_t=s(lQ);fcr=r(Q_t,"from_config()"),Q_t.forEach(t),mcr=r(zK,` class
method.`),zK.forEach(t),gcr=i(hl),qy=n(hl,"P",{});var yNe=s(qy);hcr=r(yNe,"This class cannot be instantiated directly using "),X1e=n(yNe,"CODE",{});var W_t=s(X1e);pcr=r(W_t,"__init__()"),W_t.forEach(t),ucr=r(yNe," (throws an error)."),yNe.forEach(t),_cr=i(hl),yt=n(hl,"DIV",{class:!0});var z3=s(yt);T(Ny.$$.fragment,z3),bcr=i(z3),z1e=n(z3,"P",{});var H_t=s(z1e);vcr=r(H_t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),H_t.forEach(t),Fcr=i(z3),Qd=n(z3,"P",{});var QK=s(Qd);Tcr=r(QK,`Note:
Loading a model from its configuration file does `),Q1e=n(QK,"STRONG",{});var U_t=s(Q1e);Mcr=r(U_t,"not"),U_t.forEach(t),Ecr=r(QK,` load the model weights. It only affects the
model\u2019s configuration. Use `),iQ=n(QK,"A",{href:!0});var J_t=s(iQ);Ccr=r(J_t,"from_pretrained()"),J_t.forEach(t),wcr=r(QK," to load the model weights."),QK.forEach(t),Acr=i(z3),T(PT.$$.fragment,z3),z3.forEach(t),ycr=i(hl),yr=n(hl,"DIV",{class:!0});var pl=s(yr);T(jy.$$.fragment,pl),Lcr=i(pl),W1e=n(pl,"P",{});var Y_t=s(W1e);xcr=r(Y_t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Y_t.forEach(t),$cr=i(pl),en=n(pl,"P",{});var Q3=s(en);kcr=r(Q3,"The model class to instantiate is selected based on the "),H1e=n(Q3,"CODE",{});var K_t=s(H1e);Scr=r(K_t,"model_type"),K_t.forEach(t),Rcr=r(Q3,` property of the config object (either
passed as an argument or loaded from `),U1e=n(Q3,"CODE",{});var Z_t=s(U1e);Bcr=r(Z_t,"pretrained_model_name_or_path"),Z_t.forEach(t),Pcr=r(Q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J1e=n(Q3,"CODE",{});var e1t=s(J1e);Icr=r(e1t,"pretrained_model_name_or_path"),e1t.forEach(t),qcr=r(Q3,":"),Q3.forEach(t),Ncr=i(pl),Te=n(pl,"UL",{});var Ce=s(Te);IT=n(Ce,"LI",{});var O$e=s(IT);Y1e=n(O$e,"STRONG",{});var o1t=s(Y1e);jcr=r(o1t,"bert"),o1t.forEach(t),Dcr=r(O$e," \u2014 "),dQ=n(O$e,"A",{href:!0});var r1t=s(dQ);Gcr=r(r1t,"TFBertLMHeadModel"),r1t.forEach(t),Ocr=r(O$e," (BERT model)"),O$e.forEach(t),Vcr=i(Ce),qT=n(Ce,"LI",{});var V$e=s(qT);K1e=n(V$e,"STRONG",{});var t1t=s(K1e);Xcr=r(t1t,"camembert"),t1t.forEach(t),zcr=r(V$e," \u2014 "),cQ=n(V$e,"A",{href:!0});var a1t=s(cQ);Qcr=r(a1t,"TFCamembertForCausalLM"),a1t.forEach(t),Wcr=r(V$e," (CamemBERT model)"),V$e.forEach(t),Hcr=i(Ce),NT=n(Ce,"LI",{});var X$e=s(NT);Z1e=n(X$e,"STRONG",{});var n1t=s(Z1e);Ucr=r(n1t,"ctrl"),n1t.forEach(t),Jcr=r(X$e," \u2014 "),fQ=n(X$e,"A",{href:!0});var s1t=s(fQ);Ycr=r(s1t,"TFCTRLLMHeadModel"),s1t.forEach(t),Kcr=r(X$e," (CTRL model)"),X$e.forEach(t),Zcr=i(Ce),jT=n(Ce,"LI",{});var z$e=s(jT);e8e=n(z$e,"STRONG",{});var l1t=s(e8e);efr=r(l1t,"gpt2"),l1t.forEach(t),ofr=r(z$e," \u2014 "),mQ=n(z$e,"A",{href:!0});var i1t=s(mQ);rfr=r(i1t,"TFGPT2LMHeadModel"),i1t.forEach(t),tfr=r(z$e," (OpenAI GPT-2 model)"),z$e.forEach(t),afr=i(Ce),DT=n(Ce,"LI",{});var Q$e=s(DT);o8e=n(Q$e,"STRONG",{});var d1t=s(o8e);nfr=r(d1t,"gptj"),d1t.forEach(t),sfr=r(Q$e," \u2014 "),gQ=n(Q$e,"A",{href:!0});var c1t=s(gQ);lfr=r(c1t,"TFGPTJForCausalLM"),c1t.forEach(t),ifr=r(Q$e," (GPT-J model)"),Q$e.forEach(t),dfr=i(Ce),GT=n(Ce,"LI",{});var W$e=s(GT);r8e=n(W$e,"STRONG",{});var f1t=s(r8e);cfr=r(f1t,"openai-gpt"),f1t.forEach(t),ffr=r(W$e," \u2014 "),hQ=n(W$e,"A",{href:!0});var m1t=s(hQ);mfr=r(m1t,"TFOpenAIGPTLMHeadModel"),m1t.forEach(t),gfr=r(W$e," (OpenAI GPT model)"),W$e.forEach(t),hfr=i(Ce),OT=n(Ce,"LI",{});var H$e=s(OT);t8e=n(H$e,"STRONG",{});var g1t=s(t8e);pfr=r(g1t,"rembert"),g1t.forEach(t),ufr=r(H$e," \u2014 "),pQ=n(H$e,"A",{href:!0});var h1t=s(pQ);_fr=r(h1t,"TFRemBertForCausalLM"),h1t.forEach(t),bfr=r(H$e," (RemBERT model)"),H$e.forEach(t),vfr=i(Ce),VT=n(Ce,"LI",{});var U$e=s(VT);a8e=n(U$e,"STRONG",{});var p1t=s(a8e);Ffr=r(p1t,"roberta"),p1t.forEach(t),Tfr=r(U$e," \u2014 "),uQ=n(U$e,"A",{href:!0});var u1t=s(uQ);Mfr=r(u1t,"TFRobertaForCausalLM"),u1t.forEach(t),Efr=r(U$e," (RoBERTa model)"),U$e.forEach(t),Cfr=i(Ce),XT=n(Ce,"LI",{});var J$e=s(XT);n8e=n(J$e,"STRONG",{});var _1t=s(n8e);wfr=r(_1t,"roformer"),_1t.forEach(t),Afr=r(J$e," \u2014 "),_Q=n(J$e,"A",{href:!0});var b1t=s(_Q);yfr=r(b1t,"TFRoFormerForCausalLM"),b1t.forEach(t),Lfr=r(J$e," (RoFormer model)"),J$e.forEach(t),xfr=i(Ce),zT=n(Ce,"LI",{});var Y$e=s(zT);s8e=n(Y$e,"STRONG",{});var v1t=s(s8e);$fr=r(v1t,"transfo-xl"),v1t.forEach(t),kfr=r(Y$e," \u2014 "),bQ=n(Y$e,"A",{href:!0});var F1t=s(bQ);Sfr=r(F1t,"TFTransfoXLLMHeadModel"),F1t.forEach(t),Rfr=r(Y$e," (Transformer-XL model)"),Y$e.forEach(t),Bfr=i(Ce),QT=n(Ce,"LI",{});var K$e=s(QT);l8e=n(K$e,"STRONG",{});var T1t=s(l8e);Pfr=r(T1t,"xlm"),T1t.forEach(t),Ifr=r(K$e," \u2014 "),vQ=n(K$e,"A",{href:!0});var M1t=s(vQ);qfr=r(M1t,"TFXLMWithLMHeadModel"),M1t.forEach(t),Nfr=r(K$e," (XLM model)"),K$e.forEach(t),jfr=i(Ce),WT=n(Ce,"LI",{});var Z$e=s(WT);i8e=n(Z$e,"STRONG",{});var E1t=s(i8e);Dfr=r(E1t,"xlnet"),E1t.forEach(t),Gfr=r(Z$e," \u2014 "),FQ=n(Z$e,"A",{href:!0});var C1t=s(FQ);Ofr=r(C1t,"TFXLNetLMHeadModel"),C1t.forEach(t),Vfr=r(Z$e," (XLNet model)"),Z$e.forEach(t),Ce.forEach(t),Xfr=i(pl),T(HT.$$.fragment,pl),pl.forEach(t),hl.forEach(t),MIe=i(f),Wd=n(f,"H2",{class:!0});var LNe=s(Wd);UT=n(LNe,"A",{id:!0,class:!0,href:!0});var w1t=s(UT);d8e=n(w1t,"SPAN",{});var A1t=s(d8e);T(Dy.$$.fragment,A1t),A1t.forEach(t),w1t.forEach(t),zfr=i(LNe),c8e=n(LNe,"SPAN",{});var y1t=s(c8e);Qfr=r(y1t,"TFAutoModelForImageClassification"),y1t.forEach(t),LNe.forEach(t),EIe=i(f),er=n(f,"DIV",{class:!0});var ul=s(er);T(Gy.$$.fragment,ul),Wfr=i(ul),Hd=n(ul,"P",{});var WK=s(Hd);Hfr=r(WK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),TQ=n(WK,"A",{href:!0});var L1t=s(TQ);Ufr=r(L1t,"from_pretrained()"),L1t.forEach(t),Jfr=r(WK," class method or the "),MQ=n(WK,"A",{href:!0});var x1t=s(MQ);Yfr=r(x1t,"from_config()"),x1t.forEach(t),Kfr=r(WK,` class
method.`),WK.forEach(t),Zfr=i(ul),Oy=n(ul,"P",{});var xNe=s(Oy);emr=r(xNe,"This class cannot be instantiated directly using "),f8e=n(xNe,"CODE",{});var $1t=s(f8e);omr=r($1t,"__init__()"),$1t.forEach(t),rmr=r(xNe," (throws an error)."),xNe.forEach(t),tmr=i(ul),Lt=n(ul,"DIV",{class:!0});var W3=s(Lt);T(Vy.$$.fragment,W3),amr=i(W3),m8e=n(W3,"P",{});var k1t=s(m8e);nmr=r(k1t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),k1t.forEach(t),smr=i(W3),Ud=n(W3,"P",{});var HK=s(Ud);lmr=r(HK,`Note:
Loading a model from its configuration file does `),g8e=n(HK,"STRONG",{});var S1t=s(g8e);imr=r(S1t,"not"),S1t.forEach(t),dmr=r(HK,` load the model weights. It only affects the
model\u2019s configuration. Use `),EQ=n(HK,"A",{href:!0});var R1t=s(EQ);cmr=r(R1t,"from_pretrained()"),R1t.forEach(t),fmr=r(HK," to load the model weights."),HK.forEach(t),mmr=i(W3),T(JT.$$.fragment,W3),W3.forEach(t),gmr=i(ul),Lr=n(ul,"DIV",{class:!0});var _l=s(Lr);T(Xy.$$.fragment,_l),hmr=i(_l),h8e=n(_l,"P",{});var B1t=s(h8e);pmr=r(B1t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),B1t.forEach(t),umr=i(_l),on=n(_l,"P",{});var H3=s(on);_mr=r(H3,"The model class to instantiate is selected based on the "),p8e=n(H3,"CODE",{});var P1t=s(p8e);bmr=r(P1t,"model_type"),P1t.forEach(t),vmr=r(H3,` property of the config object (either
passed as an argument or loaded from `),u8e=n(H3,"CODE",{});var I1t=s(u8e);Fmr=r(I1t,"pretrained_model_name_or_path"),I1t.forEach(t),Tmr=r(H3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_8e=n(H3,"CODE",{});var q1t=s(_8e);Mmr=r(q1t,"pretrained_model_name_or_path"),q1t.forEach(t),Emr=r(H3,":"),H3.forEach(t),Cmr=i(_l),rn=n(_l,"UL",{});var U3=s(rn);YT=n(U3,"LI",{});var eke=s(YT);b8e=n(eke,"STRONG",{});var N1t=s(b8e);wmr=r(N1t,"convnext"),N1t.forEach(t),Amr=r(eke," \u2014 "),CQ=n(eke,"A",{href:!0});var j1t=s(CQ);ymr=r(j1t,"TFConvNextForImageClassification"),j1t.forEach(t),Lmr=r(eke," (ConvNext model)"),eke.forEach(t),xmr=i(U3),KT=n(U3,"LI",{});var oke=s(KT);v8e=n(oke,"STRONG",{});var D1t=s(v8e);$mr=r(D1t,"data2vec-vision"),D1t.forEach(t),kmr=r(oke," \u2014 "),wQ=n(oke,"A",{href:!0});var G1t=s(wQ);Smr=r(G1t,"TFData2VecVisionForImageClassification"),G1t.forEach(t),Rmr=r(oke," (Data2VecVision model)"),oke.forEach(t),Bmr=i(U3),ZT=n(U3,"LI",{});var rke=s(ZT);F8e=n(rke,"STRONG",{});var O1t=s(F8e);Pmr=r(O1t,"swin"),O1t.forEach(t),Imr=r(rke," \u2014 "),AQ=n(rke,"A",{href:!0});var V1t=s(AQ);qmr=r(V1t,"TFSwinForImageClassification"),V1t.forEach(t),Nmr=r(rke," (Swin model)"),rke.forEach(t),jmr=i(U3),e9=n(U3,"LI",{});var tke=s(e9);T8e=n(tke,"STRONG",{});var X1t=s(T8e);Dmr=r(X1t,"vit"),X1t.forEach(t),Gmr=r(tke," \u2014 "),yQ=n(tke,"A",{href:!0});var z1t=s(yQ);Omr=r(z1t,"TFViTForImageClassification"),z1t.forEach(t),Vmr=r(tke," (ViT model)"),tke.forEach(t),U3.forEach(t),Xmr=i(_l),T(o9.$$.fragment,_l),_l.forEach(t),ul.forEach(t),CIe=i(f),Jd=n(f,"H2",{class:!0});var $Ne=s(Jd);r9=n($Ne,"A",{id:!0,class:!0,href:!0});var Q1t=s(r9);M8e=n(Q1t,"SPAN",{});var W1t=s(M8e);T(zy.$$.fragment,W1t),W1t.forEach(t),Q1t.forEach(t),zmr=i($Ne),E8e=n($Ne,"SPAN",{});var H1t=s(E8e);Qmr=r(H1t,"TFAutoModelForMaskedLM"),H1t.forEach(t),$Ne.forEach(t),wIe=i(f),or=n(f,"DIV",{class:!0});var bl=s(or);T(Qy.$$.fragment,bl),Wmr=i(bl),Yd=n(bl,"P",{});var UK=s(Yd);Hmr=r(UK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),LQ=n(UK,"A",{href:!0});var U1t=s(LQ);Umr=r(U1t,"from_pretrained()"),U1t.forEach(t),Jmr=r(UK," class method or the "),xQ=n(UK,"A",{href:!0});var J1t=s(xQ);Ymr=r(J1t,"from_config()"),J1t.forEach(t),Kmr=r(UK,` class
method.`),UK.forEach(t),Zmr=i(bl),Wy=n(bl,"P",{});var kNe=s(Wy);egr=r(kNe,"This class cannot be instantiated directly using "),C8e=n(kNe,"CODE",{});var Y1t=s(C8e);ogr=r(Y1t,"__init__()"),Y1t.forEach(t),rgr=r(kNe," (throws an error)."),kNe.forEach(t),tgr=i(bl),xt=n(bl,"DIV",{class:!0});var J3=s(xt);T(Hy.$$.fragment,J3),agr=i(J3),w8e=n(J3,"P",{});var K1t=s(w8e);ngr=r(K1t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),K1t.forEach(t),sgr=i(J3),Kd=n(J3,"P",{});var JK=s(Kd);lgr=r(JK,`Note:
Loading a model from its configuration file does `),A8e=n(JK,"STRONG",{});var Z1t=s(A8e);igr=r(Z1t,"not"),Z1t.forEach(t),dgr=r(JK,` load the model weights. It only affects the
model\u2019s configuration. Use `),$Q=n(JK,"A",{href:!0});var e8t=s($Q);cgr=r(e8t,"from_pretrained()"),e8t.forEach(t),fgr=r(JK," to load the model weights."),JK.forEach(t),mgr=i(J3),T(t9.$$.fragment,J3),J3.forEach(t),ggr=i(bl),xr=n(bl,"DIV",{class:!0});var vl=s(xr);T(Uy.$$.fragment,vl),hgr=i(vl),y8e=n(vl,"P",{});var o8t=s(y8e);pgr=r(o8t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),o8t.forEach(t),ugr=i(vl),tn=n(vl,"P",{});var Y3=s(tn);_gr=r(Y3,"The model class to instantiate is selected based on the "),L8e=n(Y3,"CODE",{});var r8t=s(L8e);bgr=r(r8t,"model_type"),r8t.forEach(t),vgr=r(Y3,` property of the config object (either
passed as an argument or loaded from `),x8e=n(Y3,"CODE",{});var t8t=s(x8e);Fgr=r(t8t,"pretrained_model_name_or_path"),t8t.forEach(t),Tgr=r(Y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$8e=n(Y3,"CODE",{});var a8t=s($8e);Mgr=r(a8t,"pretrained_model_name_or_path"),a8t.forEach(t),Egr=r(Y3,":"),Y3.forEach(t),Cgr=i(vl),ie=n(vl,"UL",{});var fe=s(ie);a9=n(fe,"LI",{});var ake=s(a9);k8e=n(ake,"STRONG",{});var n8t=s(k8e);wgr=r(n8t,"albert"),n8t.forEach(t),Agr=r(ake," \u2014 "),kQ=n(ake,"A",{href:!0});var s8t=s(kQ);ygr=r(s8t,"TFAlbertForMaskedLM"),s8t.forEach(t),Lgr=r(ake," (ALBERT model)"),ake.forEach(t),xgr=i(fe),n9=n(fe,"LI",{});var nke=s(n9);S8e=n(nke,"STRONG",{});var l8t=s(S8e);$gr=r(l8t,"bert"),l8t.forEach(t),kgr=r(nke," \u2014 "),SQ=n(nke,"A",{href:!0});var i8t=s(SQ);Sgr=r(i8t,"TFBertForMaskedLM"),i8t.forEach(t),Rgr=r(nke," (BERT model)"),nke.forEach(t),Bgr=i(fe),s9=n(fe,"LI",{});var ske=s(s9);R8e=n(ske,"STRONG",{});var d8t=s(R8e);Pgr=r(d8t,"camembert"),d8t.forEach(t),Igr=r(ske," \u2014 "),RQ=n(ske,"A",{href:!0});var c8t=s(RQ);qgr=r(c8t,"TFCamembertForMaskedLM"),c8t.forEach(t),Ngr=r(ske," (CamemBERT model)"),ske.forEach(t),jgr=i(fe),l9=n(fe,"LI",{});var lke=s(l9);B8e=n(lke,"STRONG",{});var f8t=s(B8e);Dgr=r(f8t,"convbert"),f8t.forEach(t),Ggr=r(lke," \u2014 "),BQ=n(lke,"A",{href:!0});var m8t=s(BQ);Ogr=r(m8t,"TFConvBertForMaskedLM"),m8t.forEach(t),Vgr=r(lke," (ConvBERT model)"),lke.forEach(t),Xgr=i(fe),i9=n(fe,"LI",{});var ike=s(i9);P8e=n(ike,"STRONG",{});var g8t=s(P8e);zgr=r(g8t,"deberta"),g8t.forEach(t),Qgr=r(ike," \u2014 "),PQ=n(ike,"A",{href:!0});var h8t=s(PQ);Wgr=r(h8t,"TFDebertaForMaskedLM"),h8t.forEach(t),Hgr=r(ike," (DeBERTa model)"),ike.forEach(t),Ugr=i(fe),d9=n(fe,"LI",{});var dke=s(d9);I8e=n(dke,"STRONG",{});var p8t=s(I8e);Jgr=r(p8t,"deberta-v2"),p8t.forEach(t),Ygr=r(dke," \u2014 "),IQ=n(dke,"A",{href:!0});var u8t=s(IQ);Kgr=r(u8t,"TFDebertaV2ForMaskedLM"),u8t.forEach(t),Zgr=r(dke," (DeBERTa-v2 model)"),dke.forEach(t),ehr=i(fe),c9=n(fe,"LI",{});var cke=s(c9);q8e=n(cke,"STRONG",{});var _8t=s(q8e);ohr=r(_8t,"distilbert"),_8t.forEach(t),rhr=r(cke," \u2014 "),qQ=n(cke,"A",{href:!0});var b8t=s(qQ);thr=r(b8t,"TFDistilBertForMaskedLM"),b8t.forEach(t),ahr=r(cke," (DistilBERT model)"),cke.forEach(t),nhr=i(fe),f9=n(fe,"LI",{});var fke=s(f9);N8e=n(fke,"STRONG",{});var v8t=s(N8e);shr=r(v8t,"electra"),v8t.forEach(t),lhr=r(fke," \u2014 "),NQ=n(fke,"A",{href:!0});var F8t=s(NQ);ihr=r(F8t,"TFElectraForMaskedLM"),F8t.forEach(t),dhr=r(fke," (ELECTRA model)"),fke.forEach(t),chr=i(fe),m9=n(fe,"LI",{});var mke=s(m9);j8e=n(mke,"STRONG",{});var T8t=s(j8e);fhr=r(T8t,"flaubert"),T8t.forEach(t),mhr=r(mke," \u2014 "),jQ=n(mke,"A",{href:!0});var M8t=s(jQ);ghr=r(M8t,"TFFlaubertWithLMHeadModel"),M8t.forEach(t),hhr=r(mke," (FlauBERT model)"),mke.forEach(t),phr=i(fe),g9=n(fe,"LI",{});var gke=s(g9);D8e=n(gke,"STRONG",{});var E8t=s(D8e);uhr=r(E8t,"funnel"),E8t.forEach(t),_hr=r(gke," \u2014 "),DQ=n(gke,"A",{href:!0});var C8t=s(DQ);bhr=r(C8t,"TFFunnelForMaskedLM"),C8t.forEach(t),vhr=r(gke," (Funnel Transformer model)"),gke.forEach(t),Fhr=i(fe),h9=n(fe,"LI",{});var hke=s(h9);G8e=n(hke,"STRONG",{});var w8t=s(G8e);Thr=r(w8t,"layoutlm"),w8t.forEach(t),Mhr=r(hke," \u2014 "),GQ=n(hke,"A",{href:!0});var A8t=s(GQ);Ehr=r(A8t,"TFLayoutLMForMaskedLM"),A8t.forEach(t),Chr=r(hke," (LayoutLM model)"),hke.forEach(t),whr=i(fe),p9=n(fe,"LI",{});var pke=s(p9);O8e=n(pke,"STRONG",{});var y8t=s(O8e);Ahr=r(y8t,"longformer"),y8t.forEach(t),yhr=r(pke," \u2014 "),OQ=n(pke,"A",{href:!0});var L8t=s(OQ);Lhr=r(L8t,"TFLongformerForMaskedLM"),L8t.forEach(t),xhr=r(pke," (Longformer model)"),pke.forEach(t),$hr=i(fe),u9=n(fe,"LI",{});var uke=s(u9);V8e=n(uke,"STRONG",{});var x8t=s(V8e);khr=r(x8t,"mobilebert"),x8t.forEach(t),Shr=r(uke," \u2014 "),VQ=n(uke,"A",{href:!0});var $8t=s(VQ);Rhr=r($8t,"TFMobileBertForMaskedLM"),$8t.forEach(t),Bhr=r(uke," (MobileBERT model)"),uke.forEach(t),Phr=i(fe),_9=n(fe,"LI",{});var _ke=s(_9);X8e=n(_ke,"STRONG",{});var k8t=s(X8e);Ihr=r(k8t,"mpnet"),k8t.forEach(t),qhr=r(_ke," \u2014 "),XQ=n(_ke,"A",{href:!0});var S8t=s(XQ);Nhr=r(S8t,"TFMPNetForMaskedLM"),S8t.forEach(t),jhr=r(_ke," (MPNet model)"),_ke.forEach(t),Dhr=i(fe),b9=n(fe,"LI",{});var bke=s(b9);z8e=n(bke,"STRONG",{});var R8t=s(z8e);Ghr=r(R8t,"rembert"),R8t.forEach(t),Ohr=r(bke," \u2014 "),zQ=n(bke,"A",{href:!0});var B8t=s(zQ);Vhr=r(B8t,"TFRemBertForMaskedLM"),B8t.forEach(t),Xhr=r(bke," (RemBERT model)"),bke.forEach(t),zhr=i(fe),v9=n(fe,"LI",{});var vke=s(v9);Q8e=n(vke,"STRONG",{});var P8t=s(Q8e);Qhr=r(P8t,"roberta"),P8t.forEach(t),Whr=r(vke," \u2014 "),QQ=n(vke,"A",{href:!0});var I8t=s(QQ);Hhr=r(I8t,"TFRobertaForMaskedLM"),I8t.forEach(t),Uhr=r(vke," (RoBERTa model)"),vke.forEach(t),Jhr=i(fe),F9=n(fe,"LI",{});var Fke=s(F9);W8e=n(Fke,"STRONG",{});var q8t=s(W8e);Yhr=r(q8t,"roformer"),q8t.forEach(t),Khr=r(Fke," \u2014 "),WQ=n(Fke,"A",{href:!0});var N8t=s(WQ);Zhr=r(N8t,"TFRoFormerForMaskedLM"),N8t.forEach(t),epr=r(Fke," (RoFormer model)"),Fke.forEach(t),opr=i(fe),T9=n(fe,"LI",{});var Tke=s(T9);H8e=n(Tke,"STRONG",{});var j8t=s(H8e);rpr=r(j8t,"tapas"),j8t.forEach(t),tpr=r(Tke," \u2014 "),HQ=n(Tke,"A",{href:!0});var D8t=s(HQ);apr=r(D8t,"TFTapasForMaskedLM"),D8t.forEach(t),npr=r(Tke," (TAPAS model)"),Tke.forEach(t),spr=i(fe),M9=n(fe,"LI",{});var Mke=s(M9);U8e=n(Mke,"STRONG",{});var G8t=s(U8e);lpr=r(G8t,"xlm"),G8t.forEach(t),ipr=r(Mke," \u2014 "),UQ=n(Mke,"A",{href:!0});var O8t=s(UQ);dpr=r(O8t,"TFXLMWithLMHeadModel"),O8t.forEach(t),cpr=r(Mke," (XLM model)"),Mke.forEach(t),fpr=i(fe),E9=n(fe,"LI",{});var Eke=s(E9);J8e=n(Eke,"STRONG",{});var V8t=s(J8e);mpr=r(V8t,"xlm-roberta"),V8t.forEach(t),gpr=r(Eke," \u2014 "),JQ=n(Eke,"A",{href:!0});var X8t=s(JQ);hpr=r(X8t,"TFXLMRobertaForMaskedLM"),X8t.forEach(t),ppr=r(Eke," (XLM-RoBERTa model)"),Eke.forEach(t),fe.forEach(t),upr=i(vl),T(C9.$$.fragment,vl),vl.forEach(t),bl.forEach(t),AIe=i(f),Zd=n(f,"H2",{class:!0});var SNe=s(Zd);w9=n(SNe,"A",{id:!0,class:!0,href:!0});var z8t=s(w9);Y8e=n(z8t,"SPAN",{});var Q8t=s(Y8e);T(Jy.$$.fragment,Q8t),Q8t.forEach(t),z8t.forEach(t),_pr=i(SNe),K8e=n(SNe,"SPAN",{});var W8t=s(K8e);bpr=r(W8t,"TFAutoModelForSeq2SeqLM"),W8t.forEach(t),SNe.forEach(t),yIe=i(f),rr=n(f,"DIV",{class:!0});var Fl=s(rr);T(Yy.$$.fragment,Fl),vpr=i(Fl),ec=n(Fl,"P",{});var YK=s(ec);Fpr=r(YK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),YQ=n(YK,"A",{href:!0});var H8t=s(YQ);Tpr=r(H8t,"from_pretrained()"),H8t.forEach(t),Mpr=r(YK," class method or the "),KQ=n(YK,"A",{href:!0});var U8t=s(KQ);Epr=r(U8t,"from_config()"),U8t.forEach(t),Cpr=r(YK,` class
method.`),YK.forEach(t),wpr=i(Fl),Ky=n(Fl,"P",{});var RNe=s(Ky);Apr=r(RNe,"This class cannot be instantiated directly using "),Z8e=n(RNe,"CODE",{});var J8t=s(Z8e);ypr=r(J8t,"__init__()"),J8t.forEach(t),Lpr=r(RNe," (throws an error)."),RNe.forEach(t),xpr=i(Fl),$t=n(Fl,"DIV",{class:!0});var K3=s($t);T(Zy.$$.fragment,K3),$pr=i(K3),ebe=n(K3,"P",{});var Y8t=s(ebe);kpr=r(Y8t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Y8t.forEach(t),Spr=i(K3),oc=n(K3,"P",{});var KK=s(oc);Rpr=r(KK,`Note:
Loading a model from its configuration file does `),obe=n(KK,"STRONG",{});var K8t=s(obe);Bpr=r(K8t,"not"),K8t.forEach(t),Ppr=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZQ=n(KK,"A",{href:!0});var Z8t=s(ZQ);Ipr=r(Z8t,"from_pretrained()"),Z8t.forEach(t),qpr=r(KK," to load the model weights."),KK.forEach(t),Npr=i(K3),T(A9.$$.fragment,K3),K3.forEach(t),jpr=i(Fl),$r=n(Fl,"DIV",{class:!0});var Tl=s($r);T(eL.$$.fragment,Tl),Dpr=i(Tl),rbe=n(Tl,"P",{});var ebt=s(rbe);Gpr=r(ebt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ebt.forEach(t),Opr=i(Tl),an=n(Tl,"P",{});var Z3=s(an);Vpr=r(Z3,"The model class to instantiate is selected based on the "),tbe=n(Z3,"CODE",{});var obt=s(tbe);Xpr=r(obt,"model_type"),obt.forEach(t),zpr=r(Z3,` property of the config object (either
passed as an argument or loaded from `),abe=n(Z3,"CODE",{});var rbt=s(abe);Qpr=r(rbt,"pretrained_model_name_or_path"),rbt.forEach(t),Wpr=r(Z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nbe=n(Z3,"CODE",{});var tbt=s(nbe);Hpr=r(tbt,"pretrained_model_name_or_path"),tbt.forEach(t),Upr=r(Z3,":"),Z3.forEach(t),Jpr=i(Tl),ye=n(Tl,"UL",{});var Re=s(ye);y9=n(Re,"LI",{});var Cke=s(y9);sbe=n(Cke,"STRONG",{});var abt=s(sbe);Ypr=r(abt,"bart"),abt.forEach(t),Kpr=r(Cke," \u2014 "),eW=n(Cke,"A",{href:!0});var nbt=s(eW);Zpr=r(nbt,"TFBartForConditionalGeneration"),nbt.forEach(t),eur=r(Cke," (BART model)"),Cke.forEach(t),our=i(Re),L9=n(Re,"LI",{});var wke=s(L9);lbe=n(wke,"STRONG",{});var sbt=s(lbe);rur=r(sbt,"blenderbot"),sbt.forEach(t),tur=r(wke," \u2014 "),oW=n(wke,"A",{href:!0});var lbt=s(oW);aur=r(lbt,"TFBlenderbotForConditionalGeneration"),lbt.forEach(t),nur=r(wke," (Blenderbot model)"),wke.forEach(t),sur=i(Re),x9=n(Re,"LI",{});var Ake=s(x9);ibe=n(Ake,"STRONG",{});var ibt=s(ibe);lur=r(ibt,"blenderbot-small"),ibt.forEach(t),iur=r(Ake," \u2014 "),rW=n(Ake,"A",{href:!0});var dbt=s(rW);dur=r(dbt,"TFBlenderbotSmallForConditionalGeneration"),dbt.forEach(t),cur=r(Ake," (BlenderbotSmall model)"),Ake.forEach(t),fur=i(Re),$9=n(Re,"LI",{});var yke=s($9);dbe=n(yke,"STRONG",{});var cbt=s(dbe);mur=r(cbt,"encoder-decoder"),cbt.forEach(t),gur=r(yke," \u2014 "),tW=n(yke,"A",{href:!0});var fbt=s(tW);hur=r(fbt,"TFEncoderDecoderModel"),fbt.forEach(t),pur=r(yke," (Encoder decoder model)"),yke.forEach(t),uur=i(Re),k9=n(Re,"LI",{});var Lke=s(k9);cbe=n(Lke,"STRONG",{});var mbt=s(cbe);_ur=r(mbt,"led"),mbt.forEach(t),bur=r(Lke," \u2014 "),aW=n(Lke,"A",{href:!0});var gbt=s(aW);vur=r(gbt,"TFLEDForConditionalGeneration"),gbt.forEach(t),Fur=r(Lke," (LED model)"),Lke.forEach(t),Tur=i(Re),S9=n(Re,"LI",{});var xke=s(S9);fbe=n(xke,"STRONG",{});var hbt=s(fbe);Mur=r(hbt,"marian"),hbt.forEach(t),Eur=r(xke," \u2014 "),nW=n(xke,"A",{href:!0});var pbt=s(nW);Cur=r(pbt,"TFMarianMTModel"),pbt.forEach(t),wur=r(xke," (Marian model)"),xke.forEach(t),Aur=i(Re),R9=n(Re,"LI",{});var $ke=s(R9);mbe=n($ke,"STRONG",{});var ubt=s(mbe);yur=r(ubt,"mbart"),ubt.forEach(t),Lur=r($ke," \u2014 "),sW=n($ke,"A",{href:!0});var _bt=s(sW);xur=r(_bt,"TFMBartForConditionalGeneration"),_bt.forEach(t),$ur=r($ke," (mBART model)"),$ke.forEach(t),kur=i(Re),B9=n(Re,"LI",{});var kke=s(B9);gbe=n(kke,"STRONG",{});var bbt=s(gbe);Sur=r(bbt,"mt5"),bbt.forEach(t),Rur=r(kke," \u2014 "),lW=n(kke,"A",{href:!0});var vbt=s(lW);Bur=r(vbt,"TFMT5ForConditionalGeneration"),vbt.forEach(t),Pur=r(kke," (mT5 model)"),kke.forEach(t),Iur=i(Re),P9=n(Re,"LI",{});var Ske=s(P9);hbe=n(Ske,"STRONG",{});var Fbt=s(hbe);qur=r(Fbt,"pegasus"),Fbt.forEach(t),Nur=r(Ske," \u2014 "),iW=n(Ske,"A",{href:!0});var Tbt=s(iW);jur=r(Tbt,"TFPegasusForConditionalGeneration"),Tbt.forEach(t),Dur=r(Ske," (Pegasus model)"),Ske.forEach(t),Gur=i(Re),I9=n(Re,"LI",{});var Rke=s(I9);pbe=n(Rke,"STRONG",{});var Mbt=s(pbe);Our=r(Mbt,"t5"),Mbt.forEach(t),Vur=r(Rke," \u2014 "),dW=n(Rke,"A",{href:!0});var Ebt=s(dW);Xur=r(Ebt,"TFT5ForConditionalGeneration"),Ebt.forEach(t),zur=r(Rke," (T5 model)"),Rke.forEach(t),Re.forEach(t),Qur=i(Tl),T(q9.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),LIe=i(f),rc=n(f,"H2",{class:!0});var BNe=s(rc);N9=n(BNe,"A",{id:!0,class:!0,href:!0});var Cbt=s(N9);ube=n(Cbt,"SPAN",{});var wbt=s(ube);T(oL.$$.fragment,wbt),wbt.forEach(t),Cbt.forEach(t),Wur=i(BNe),_be=n(BNe,"SPAN",{});var Abt=s(_be);Hur=r(Abt,"TFAutoModelForSequenceClassification"),Abt.forEach(t),BNe.forEach(t),xIe=i(f),tr=n(f,"DIV",{class:!0});var Ml=s(tr);T(rL.$$.fragment,Ml),Uur=i(Ml),tc=n(Ml,"P",{});var ZK=s(tc);Jur=r(ZK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),cW=n(ZK,"A",{href:!0});var ybt=s(cW);Yur=r(ybt,"from_pretrained()"),ybt.forEach(t),Kur=r(ZK," class method or the "),fW=n(ZK,"A",{href:!0});var Lbt=s(fW);Zur=r(Lbt,"from_config()"),Lbt.forEach(t),e_r=r(ZK,` class
method.`),ZK.forEach(t),o_r=i(Ml),tL=n(Ml,"P",{});var PNe=s(tL);r_r=r(PNe,"This class cannot be instantiated directly using "),bbe=n(PNe,"CODE",{});var xbt=s(bbe);t_r=r(xbt,"__init__()"),xbt.forEach(t),a_r=r(PNe," (throws an error)."),PNe.forEach(t),n_r=i(Ml),kt=n(Ml,"DIV",{class:!0});var ew=s(kt);T(aL.$$.fragment,ew),s_r=i(ew),vbe=n(ew,"P",{});var $bt=s(vbe);l_r=r($bt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),$bt.forEach(t),i_r=i(ew),ac=n(ew,"P",{});var eZ=s(ac);d_r=r(eZ,`Note:
Loading a model from its configuration file does `),Fbe=n(eZ,"STRONG",{});var kbt=s(Fbe);c_r=r(kbt,"not"),kbt.forEach(t),f_r=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mW=n(eZ,"A",{href:!0});var Sbt=s(mW);m_r=r(Sbt,"from_pretrained()"),Sbt.forEach(t),g_r=r(eZ," to load the model weights."),eZ.forEach(t),h_r=i(ew),T(j9.$$.fragment,ew),ew.forEach(t),p_r=i(Ml),kr=n(Ml,"DIV",{class:!0});var El=s(kr);T(nL.$$.fragment,El),u_r=i(El),Tbe=n(El,"P",{});var Rbt=s(Tbe);__r=r(Rbt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Rbt.forEach(t),b_r=i(El),nn=n(El,"P",{});var ow=s(nn);v_r=r(ow,"The model class to instantiate is selected based on the "),Mbe=n(ow,"CODE",{});var Bbt=s(Mbe);F_r=r(Bbt,"model_type"),Bbt.forEach(t),T_r=r(ow,` property of the config object (either
passed as an argument or loaded from `),Ebe=n(ow,"CODE",{});var Pbt=s(Ebe);M_r=r(Pbt,"pretrained_model_name_or_path"),Pbt.forEach(t),E_r=r(ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cbe=n(ow,"CODE",{});var Ibt=s(Cbe);C_r=r(Ibt,"pretrained_model_name_or_path"),Ibt.forEach(t),w_r=r(ow,":"),ow.forEach(t),A_r=i(El),Z=n(El,"UL",{});var re=s(Z);D9=n(re,"LI",{});var Bke=s(D9);wbe=n(Bke,"STRONG",{});var qbt=s(wbe);y_r=r(qbt,"albert"),qbt.forEach(t),L_r=r(Bke," \u2014 "),gW=n(Bke,"A",{href:!0});var Nbt=s(gW);x_r=r(Nbt,"TFAlbertForSequenceClassification"),Nbt.forEach(t),$_r=r(Bke," (ALBERT model)"),Bke.forEach(t),k_r=i(re),G9=n(re,"LI",{});var Pke=s(G9);Abe=n(Pke,"STRONG",{});var jbt=s(Abe);S_r=r(jbt,"bert"),jbt.forEach(t),R_r=r(Pke," \u2014 "),hW=n(Pke,"A",{href:!0});var Dbt=s(hW);B_r=r(Dbt,"TFBertForSequenceClassification"),Dbt.forEach(t),P_r=r(Pke," (BERT model)"),Pke.forEach(t),I_r=i(re),O9=n(re,"LI",{});var Ike=s(O9);ybe=n(Ike,"STRONG",{});var Gbt=s(ybe);q_r=r(Gbt,"camembert"),Gbt.forEach(t),N_r=r(Ike," \u2014 "),pW=n(Ike,"A",{href:!0});var Obt=s(pW);j_r=r(Obt,"TFCamembertForSequenceClassification"),Obt.forEach(t),D_r=r(Ike," (CamemBERT model)"),Ike.forEach(t),G_r=i(re),V9=n(re,"LI",{});var qke=s(V9);Lbe=n(qke,"STRONG",{});var Vbt=s(Lbe);O_r=r(Vbt,"convbert"),Vbt.forEach(t),V_r=r(qke," \u2014 "),uW=n(qke,"A",{href:!0});var Xbt=s(uW);X_r=r(Xbt,"TFConvBertForSequenceClassification"),Xbt.forEach(t),z_r=r(qke," (ConvBERT model)"),qke.forEach(t),Q_r=i(re),X9=n(re,"LI",{});var Nke=s(X9);xbe=n(Nke,"STRONG",{});var zbt=s(xbe);W_r=r(zbt,"ctrl"),zbt.forEach(t),H_r=r(Nke," \u2014 "),_W=n(Nke,"A",{href:!0});var Qbt=s(_W);U_r=r(Qbt,"TFCTRLForSequenceClassification"),Qbt.forEach(t),J_r=r(Nke," (CTRL model)"),Nke.forEach(t),Y_r=i(re),z9=n(re,"LI",{});var jke=s(z9);$be=n(jke,"STRONG",{});var Wbt=s($be);K_r=r(Wbt,"deberta"),Wbt.forEach(t),Z_r=r(jke," \u2014 "),bW=n(jke,"A",{href:!0});var Hbt=s(bW);e1r=r(Hbt,"TFDebertaForSequenceClassification"),Hbt.forEach(t),o1r=r(jke," (DeBERTa model)"),jke.forEach(t),r1r=i(re),Q9=n(re,"LI",{});var Dke=s(Q9);kbe=n(Dke,"STRONG",{});var Ubt=s(kbe);t1r=r(Ubt,"deberta-v2"),Ubt.forEach(t),a1r=r(Dke," \u2014 "),vW=n(Dke,"A",{href:!0});var Jbt=s(vW);n1r=r(Jbt,"TFDebertaV2ForSequenceClassification"),Jbt.forEach(t),s1r=r(Dke," (DeBERTa-v2 model)"),Dke.forEach(t),l1r=i(re),W9=n(re,"LI",{});var Gke=s(W9);Sbe=n(Gke,"STRONG",{});var Ybt=s(Sbe);i1r=r(Ybt,"distilbert"),Ybt.forEach(t),d1r=r(Gke," \u2014 "),FW=n(Gke,"A",{href:!0});var Kbt=s(FW);c1r=r(Kbt,"TFDistilBertForSequenceClassification"),Kbt.forEach(t),f1r=r(Gke," (DistilBERT model)"),Gke.forEach(t),m1r=i(re),H9=n(re,"LI",{});var Oke=s(H9);Rbe=n(Oke,"STRONG",{});var Zbt=s(Rbe);g1r=r(Zbt,"electra"),Zbt.forEach(t),h1r=r(Oke," \u2014 "),TW=n(Oke,"A",{href:!0});var e2t=s(TW);p1r=r(e2t,"TFElectraForSequenceClassification"),e2t.forEach(t),u1r=r(Oke," (ELECTRA model)"),Oke.forEach(t),_1r=i(re),U9=n(re,"LI",{});var Vke=s(U9);Bbe=n(Vke,"STRONG",{});var o2t=s(Bbe);b1r=r(o2t,"flaubert"),o2t.forEach(t),v1r=r(Vke," \u2014 "),MW=n(Vke,"A",{href:!0});var r2t=s(MW);F1r=r(r2t,"TFFlaubertForSequenceClassification"),r2t.forEach(t),T1r=r(Vke," (FlauBERT model)"),Vke.forEach(t),M1r=i(re),J9=n(re,"LI",{});var Xke=s(J9);Pbe=n(Xke,"STRONG",{});var t2t=s(Pbe);E1r=r(t2t,"funnel"),t2t.forEach(t),C1r=r(Xke," \u2014 "),EW=n(Xke,"A",{href:!0});var a2t=s(EW);w1r=r(a2t,"TFFunnelForSequenceClassification"),a2t.forEach(t),A1r=r(Xke," (Funnel Transformer model)"),Xke.forEach(t),y1r=i(re),Y9=n(re,"LI",{});var zke=s(Y9);Ibe=n(zke,"STRONG",{});var n2t=s(Ibe);L1r=r(n2t,"gpt2"),n2t.forEach(t),x1r=r(zke," \u2014 "),CW=n(zke,"A",{href:!0});var s2t=s(CW);$1r=r(s2t,"TFGPT2ForSequenceClassification"),s2t.forEach(t),k1r=r(zke," (OpenAI GPT-2 model)"),zke.forEach(t),S1r=i(re),K9=n(re,"LI",{});var Qke=s(K9);qbe=n(Qke,"STRONG",{});var l2t=s(qbe);R1r=r(l2t,"gptj"),l2t.forEach(t),B1r=r(Qke," \u2014 "),wW=n(Qke,"A",{href:!0});var i2t=s(wW);P1r=r(i2t,"TFGPTJForSequenceClassification"),i2t.forEach(t),I1r=r(Qke," (GPT-J model)"),Qke.forEach(t),q1r=i(re),Z9=n(re,"LI",{});var Wke=s(Z9);Nbe=n(Wke,"STRONG",{});var d2t=s(Nbe);N1r=r(d2t,"layoutlm"),d2t.forEach(t),j1r=r(Wke," \u2014 "),AW=n(Wke,"A",{href:!0});var c2t=s(AW);D1r=r(c2t,"TFLayoutLMForSequenceClassification"),c2t.forEach(t),G1r=r(Wke," (LayoutLM model)"),Wke.forEach(t),O1r=i(re),eM=n(re,"LI",{});var Hke=s(eM);jbe=n(Hke,"STRONG",{});var f2t=s(jbe);V1r=r(f2t,"longformer"),f2t.forEach(t),X1r=r(Hke," \u2014 "),yW=n(Hke,"A",{href:!0});var m2t=s(yW);z1r=r(m2t,"TFLongformerForSequenceClassification"),m2t.forEach(t),Q1r=r(Hke," (Longformer model)"),Hke.forEach(t),W1r=i(re),oM=n(re,"LI",{});var Uke=s(oM);Dbe=n(Uke,"STRONG",{});var g2t=s(Dbe);H1r=r(g2t,"mobilebert"),g2t.forEach(t),U1r=r(Uke," \u2014 "),LW=n(Uke,"A",{href:!0});var h2t=s(LW);J1r=r(h2t,"TFMobileBertForSequenceClassification"),h2t.forEach(t),Y1r=r(Uke," (MobileBERT model)"),Uke.forEach(t),K1r=i(re),rM=n(re,"LI",{});var Jke=s(rM);Gbe=n(Jke,"STRONG",{});var p2t=s(Gbe);Z1r=r(p2t,"mpnet"),p2t.forEach(t),e8r=r(Jke," \u2014 "),xW=n(Jke,"A",{href:!0});var u2t=s(xW);o8r=r(u2t,"TFMPNetForSequenceClassification"),u2t.forEach(t),r8r=r(Jke," (MPNet model)"),Jke.forEach(t),t8r=i(re),tM=n(re,"LI",{});var Yke=s(tM);Obe=n(Yke,"STRONG",{});var _2t=s(Obe);a8r=r(_2t,"openai-gpt"),_2t.forEach(t),n8r=r(Yke," \u2014 "),$W=n(Yke,"A",{href:!0});var b2t=s($W);s8r=r(b2t,"TFOpenAIGPTForSequenceClassification"),b2t.forEach(t),l8r=r(Yke," (OpenAI GPT model)"),Yke.forEach(t),i8r=i(re),aM=n(re,"LI",{});var Kke=s(aM);Vbe=n(Kke,"STRONG",{});var v2t=s(Vbe);d8r=r(v2t,"rembert"),v2t.forEach(t),c8r=r(Kke," \u2014 "),kW=n(Kke,"A",{href:!0});var F2t=s(kW);f8r=r(F2t,"TFRemBertForSequenceClassification"),F2t.forEach(t),m8r=r(Kke," (RemBERT model)"),Kke.forEach(t),g8r=i(re),nM=n(re,"LI",{});var Zke=s(nM);Xbe=n(Zke,"STRONG",{});var T2t=s(Xbe);h8r=r(T2t,"roberta"),T2t.forEach(t),p8r=r(Zke," \u2014 "),SW=n(Zke,"A",{href:!0});var M2t=s(SW);u8r=r(M2t,"TFRobertaForSequenceClassification"),M2t.forEach(t),_8r=r(Zke," (RoBERTa model)"),Zke.forEach(t),b8r=i(re),sM=n(re,"LI",{});var eSe=s(sM);zbe=n(eSe,"STRONG",{});var E2t=s(zbe);v8r=r(E2t,"roformer"),E2t.forEach(t),F8r=r(eSe," \u2014 "),RW=n(eSe,"A",{href:!0});var C2t=s(RW);T8r=r(C2t,"TFRoFormerForSequenceClassification"),C2t.forEach(t),M8r=r(eSe," (RoFormer model)"),eSe.forEach(t),E8r=i(re),lM=n(re,"LI",{});var oSe=s(lM);Qbe=n(oSe,"STRONG",{});var w2t=s(Qbe);C8r=r(w2t,"tapas"),w2t.forEach(t),w8r=r(oSe," \u2014 "),BW=n(oSe,"A",{href:!0});var A2t=s(BW);A8r=r(A2t,"TFTapasForSequenceClassification"),A2t.forEach(t),y8r=r(oSe," (TAPAS model)"),oSe.forEach(t),L8r=i(re),iM=n(re,"LI",{});var rSe=s(iM);Wbe=n(rSe,"STRONG",{});var y2t=s(Wbe);x8r=r(y2t,"transfo-xl"),y2t.forEach(t),$8r=r(rSe," \u2014 "),PW=n(rSe,"A",{href:!0});var L2t=s(PW);k8r=r(L2t,"TFTransfoXLForSequenceClassification"),L2t.forEach(t),S8r=r(rSe," (Transformer-XL model)"),rSe.forEach(t),R8r=i(re),dM=n(re,"LI",{});var tSe=s(dM);Hbe=n(tSe,"STRONG",{});var x2t=s(Hbe);B8r=r(x2t,"xlm"),x2t.forEach(t),P8r=r(tSe," \u2014 "),IW=n(tSe,"A",{href:!0});var $2t=s(IW);I8r=r($2t,"TFXLMForSequenceClassification"),$2t.forEach(t),q8r=r(tSe," (XLM model)"),tSe.forEach(t),N8r=i(re),cM=n(re,"LI",{});var aSe=s(cM);Ube=n(aSe,"STRONG",{});var k2t=s(Ube);j8r=r(k2t,"xlm-roberta"),k2t.forEach(t),D8r=r(aSe," \u2014 "),qW=n(aSe,"A",{href:!0});var S2t=s(qW);G8r=r(S2t,"TFXLMRobertaForSequenceClassification"),S2t.forEach(t),O8r=r(aSe," (XLM-RoBERTa model)"),aSe.forEach(t),V8r=i(re),fM=n(re,"LI",{});var nSe=s(fM);Jbe=n(nSe,"STRONG",{});var R2t=s(Jbe);X8r=r(R2t,"xlnet"),R2t.forEach(t),z8r=r(nSe," \u2014 "),NW=n(nSe,"A",{href:!0});var B2t=s(NW);Q8r=r(B2t,"TFXLNetForSequenceClassification"),B2t.forEach(t),W8r=r(nSe," (XLNet model)"),nSe.forEach(t),re.forEach(t),H8r=i(El),T(mM.$$.fragment,El),El.forEach(t),Ml.forEach(t),$Ie=i(f),nc=n(f,"H2",{class:!0});var INe=s(nc);gM=n(INe,"A",{id:!0,class:!0,href:!0});var P2t=s(gM);Ybe=n(P2t,"SPAN",{});var I2t=s(Ybe);T(sL.$$.fragment,I2t),I2t.forEach(t),P2t.forEach(t),U8r=i(INe),Kbe=n(INe,"SPAN",{});var q2t=s(Kbe);J8r=r(q2t,"TFAutoModelForMultipleChoice"),q2t.forEach(t),INe.forEach(t),kIe=i(f),ar=n(f,"DIV",{class:!0});var Cl=s(ar);T(lL.$$.fragment,Cl),Y8r=i(Cl),sc=n(Cl,"P",{});var oZ=s(sc);K8r=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),jW=n(oZ,"A",{href:!0});var N2t=s(jW);Z8r=r(N2t,"from_pretrained()"),N2t.forEach(t),ebr=r(oZ," class method or the "),DW=n(oZ,"A",{href:!0});var j2t=s(DW);obr=r(j2t,"from_config()"),j2t.forEach(t),rbr=r(oZ,` class
method.`),oZ.forEach(t),tbr=i(Cl),iL=n(Cl,"P",{});var qNe=s(iL);abr=r(qNe,"This class cannot be instantiated directly using "),Zbe=n(qNe,"CODE",{});var D2t=s(Zbe);nbr=r(D2t,"__init__()"),D2t.forEach(t),sbr=r(qNe," (throws an error)."),qNe.forEach(t),lbr=i(Cl),St=n(Cl,"DIV",{class:!0});var rw=s(St);T(dL.$$.fragment,rw),ibr=i(rw),e2e=n(rw,"P",{});var G2t=s(e2e);dbr=r(G2t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),G2t.forEach(t),cbr=i(rw),lc=n(rw,"P",{});var rZ=s(lc);fbr=r(rZ,`Note:
Loading a model from its configuration file does `),o2e=n(rZ,"STRONG",{});var O2t=s(o2e);mbr=r(O2t,"not"),O2t.forEach(t),gbr=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=n(rZ,"A",{href:!0});var V2t=s(GW);hbr=r(V2t,"from_pretrained()"),V2t.forEach(t),pbr=r(rZ," to load the model weights."),rZ.forEach(t),ubr=i(rw),T(hM.$$.fragment,rw),rw.forEach(t),_br=i(Cl),Sr=n(Cl,"DIV",{class:!0});var wl=s(Sr);T(cL.$$.fragment,wl),bbr=i(wl),r2e=n(wl,"P",{});var X2t=s(r2e);vbr=r(X2t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),X2t.forEach(t),Fbr=i(wl),sn=n(wl,"P",{});var tw=s(sn);Tbr=r(tw,"The model class to instantiate is selected based on the "),t2e=n(tw,"CODE",{});var z2t=s(t2e);Mbr=r(z2t,"model_type"),z2t.forEach(t),Ebr=r(tw,` property of the config object (either
passed as an argument or loaded from `),a2e=n(tw,"CODE",{});var Q2t=s(a2e);Cbr=r(Q2t,"pretrained_model_name_or_path"),Q2t.forEach(t),wbr=r(tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n2e=n(tw,"CODE",{});var W2t=s(n2e);Abr=r(W2t,"pretrained_model_name_or_path"),W2t.forEach(t),ybr=r(tw,":"),tw.forEach(t),Lbr=i(wl),pe=n(wl,"UL",{});var _e=s(pe);pM=n(_e,"LI",{});var sSe=s(pM);s2e=n(sSe,"STRONG",{});var H2t=s(s2e);xbr=r(H2t,"albert"),H2t.forEach(t),$br=r(sSe," \u2014 "),OW=n(sSe,"A",{href:!0});var U2t=s(OW);kbr=r(U2t,"TFAlbertForMultipleChoice"),U2t.forEach(t),Sbr=r(sSe," (ALBERT model)"),sSe.forEach(t),Rbr=i(_e),uM=n(_e,"LI",{});var lSe=s(uM);l2e=n(lSe,"STRONG",{});var J2t=s(l2e);Bbr=r(J2t,"bert"),J2t.forEach(t),Pbr=r(lSe," \u2014 "),VW=n(lSe,"A",{href:!0});var Y2t=s(VW);Ibr=r(Y2t,"TFBertForMultipleChoice"),Y2t.forEach(t),qbr=r(lSe," (BERT model)"),lSe.forEach(t),Nbr=i(_e),_M=n(_e,"LI",{});var iSe=s(_M);i2e=n(iSe,"STRONG",{});var K2t=s(i2e);jbr=r(K2t,"camembert"),K2t.forEach(t),Dbr=r(iSe," \u2014 "),XW=n(iSe,"A",{href:!0});var Z2t=s(XW);Gbr=r(Z2t,"TFCamembertForMultipleChoice"),Z2t.forEach(t),Obr=r(iSe," (CamemBERT model)"),iSe.forEach(t),Vbr=i(_e),bM=n(_e,"LI",{});var dSe=s(bM);d2e=n(dSe,"STRONG",{});var evt=s(d2e);Xbr=r(evt,"convbert"),evt.forEach(t),zbr=r(dSe," \u2014 "),zW=n(dSe,"A",{href:!0});var ovt=s(zW);Qbr=r(ovt,"TFConvBertForMultipleChoice"),ovt.forEach(t),Wbr=r(dSe," (ConvBERT model)"),dSe.forEach(t),Hbr=i(_e),vM=n(_e,"LI",{});var cSe=s(vM);c2e=n(cSe,"STRONG",{});var rvt=s(c2e);Ubr=r(rvt,"distilbert"),rvt.forEach(t),Jbr=r(cSe," \u2014 "),QW=n(cSe,"A",{href:!0});var tvt=s(QW);Ybr=r(tvt,"TFDistilBertForMultipleChoice"),tvt.forEach(t),Kbr=r(cSe," (DistilBERT model)"),cSe.forEach(t),Zbr=i(_e),FM=n(_e,"LI",{});var fSe=s(FM);f2e=n(fSe,"STRONG",{});var avt=s(f2e);e2r=r(avt,"electra"),avt.forEach(t),o2r=r(fSe," \u2014 "),WW=n(fSe,"A",{href:!0});var nvt=s(WW);r2r=r(nvt,"TFElectraForMultipleChoice"),nvt.forEach(t),t2r=r(fSe," (ELECTRA model)"),fSe.forEach(t),a2r=i(_e),TM=n(_e,"LI",{});var mSe=s(TM);m2e=n(mSe,"STRONG",{});var svt=s(m2e);n2r=r(svt,"flaubert"),svt.forEach(t),s2r=r(mSe," \u2014 "),HW=n(mSe,"A",{href:!0});var lvt=s(HW);l2r=r(lvt,"TFFlaubertForMultipleChoice"),lvt.forEach(t),i2r=r(mSe," (FlauBERT model)"),mSe.forEach(t),d2r=i(_e),MM=n(_e,"LI",{});var gSe=s(MM);g2e=n(gSe,"STRONG",{});var ivt=s(g2e);c2r=r(ivt,"funnel"),ivt.forEach(t),f2r=r(gSe," \u2014 "),UW=n(gSe,"A",{href:!0});var dvt=s(UW);m2r=r(dvt,"TFFunnelForMultipleChoice"),dvt.forEach(t),g2r=r(gSe," (Funnel Transformer model)"),gSe.forEach(t),h2r=i(_e),EM=n(_e,"LI",{});var hSe=s(EM);h2e=n(hSe,"STRONG",{});var cvt=s(h2e);p2r=r(cvt,"longformer"),cvt.forEach(t),u2r=r(hSe," \u2014 "),JW=n(hSe,"A",{href:!0});var fvt=s(JW);_2r=r(fvt,"TFLongformerForMultipleChoice"),fvt.forEach(t),b2r=r(hSe," (Longformer model)"),hSe.forEach(t),v2r=i(_e),CM=n(_e,"LI",{});var pSe=s(CM);p2e=n(pSe,"STRONG",{});var mvt=s(p2e);F2r=r(mvt,"mobilebert"),mvt.forEach(t),T2r=r(pSe," \u2014 "),YW=n(pSe,"A",{href:!0});var gvt=s(YW);M2r=r(gvt,"TFMobileBertForMultipleChoice"),gvt.forEach(t),E2r=r(pSe," (MobileBERT model)"),pSe.forEach(t),C2r=i(_e),wM=n(_e,"LI",{});var uSe=s(wM);u2e=n(uSe,"STRONG",{});var hvt=s(u2e);w2r=r(hvt,"mpnet"),hvt.forEach(t),A2r=r(uSe," \u2014 "),KW=n(uSe,"A",{href:!0});var pvt=s(KW);y2r=r(pvt,"TFMPNetForMultipleChoice"),pvt.forEach(t),L2r=r(uSe," (MPNet model)"),uSe.forEach(t),x2r=i(_e),AM=n(_e,"LI",{});var _Se=s(AM);_2e=n(_Se,"STRONG",{});var uvt=s(_2e);$2r=r(uvt,"rembert"),uvt.forEach(t),k2r=r(_Se," \u2014 "),ZW=n(_Se,"A",{href:!0});var _vt=s(ZW);S2r=r(_vt,"TFRemBertForMultipleChoice"),_vt.forEach(t),R2r=r(_Se," (RemBERT model)"),_Se.forEach(t),B2r=i(_e),yM=n(_e,"LI",{});var bSe=s(yM);b2e=n(bSe,"STRONG",{});var bvt=s(b2e);P2r=r(bvt,"roberta"),bvt.forEach(t),I2r=r(bSe," \u2014 "),eH=n(bSe,"A",{href:!0});var vvt=s(eH);q2r=r(vvt,"TFRobertaForMultipleChoice"),vvt.forEach(t),N2r=r(bSe," (RoBERTa model)"),bSe.forEach(t),j2r=i(_e),LM=n(_e,"LI",{});var vSe=s(LM);v2e=n(vSe,"STRONG",{});var Fvt=s(v2e);D2r=r(Fvt,"roformer"),Fvt.forEach(t),G2r=r(vSe," \u2014 "),oH=n(vSe,"A",{href:!0});var Tvt=s(oH);O2r=r(Tvt,"TFRoFormerForMultipleChoice"),Tvt.forEach(t),V2r=r(vSe," (RoFormer model)"),vSe.forEach(t),X2r=i(_e),xM=n(_e,"LI",{});var FSe=s(xM);F2e=n(FSe,"STRONG",{});var Mvt=s(F2e);z2r=r(Mvt,"xlm"),Mvt.forEach(t),Q2r=r(FSe," \u2014 "),rH=n(FSe,"A",{href:!0});var Evt=s(rH);W2r=r(Evt,"TFXLMForMultipleChoice"),Evt.forEach(t),H2r=r(FSe," (XLM model)"),FSe.forEach(t),U2r=i(_e),$M=n(_e,"LI",{});var TSe=s($M);T2e=n(TSe,"STRONG",{});var Cvt=s(T2e);J2r=r(Cvt,"xlm-roberta"),Cvt.forEach(t),Y2r=r(TSe," \u2014 "),tH=n(TSe,"A",{href:!0});var wvt=s(tH);K2r=r(wvt,"TFXLMRobertaForMultipleChoice"),wvt.forEach(t),Z2r=r(TSe," (XLM-RoBERTa model)"),TSe.forEach(t),evr=i(_e),kM=n(_e,"LI",{});var MSe=s(kM);M2e=n(MSe,"STRONG",{});var Avt=s(M2e);ovr=r(Avt,"xlnet"),Avt.forEach(t),rvr=r(MSe," \u2014 "),aH=n(MSe,"A",{href:!0});var yvt=s(aH);tvr=r(yvt,"TFXLNetForMultipleChoice"),yvt.forEach(t),avr=r(MSe," (XLNet model)"),MSe.forEach(t),_e.forEach(t),nvr=i(wl),T(SM.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),SIe=i(f),ic=n(f,"H2",{class:!0});var NNe=s(ic);RM=n(NNe,"A",{id:!0,class:!0,href:!0});var Lvt=s(RM);E2e=n(Lvt,"SPAN",{});var xvt=s(E2e);T(fL.$$.fragment,xvt),xvt.forEach(t),Lvt.forEach(t),svr=i(NNe),C2e=n(NNe,"SPAN",{});var $vt=s(C2e);lvr=r($vt,"TFAutoModelForNextSentencePrediction"),$vt.forEach(t),NNe.forEach(t),RIe=i(f),nr=n(f,"DIV",{class:!0});var Al=s(nr);T(mL.$$.fragment,Al),ivr=i(Al),dc=n(Al,"P",{});var tZ=s(dc);dvr=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),nH=n(tZ,"A",{href:!0});var kvt=s(nH);cvr=r(kvt,"from_pretrained()"),kvt.forEach(t),fvr=r(tZ," class method or the "),sH=n(tZ,"A",{href:!0});var Svt=s(sH);mvr=r(Svt,"from_config()"),Svt.forEach(t),gvr=r(tZ,` class
method.`),tZ.forEach(t),hvr=i(Al),gL=n(Al,"P",{});var jNe=s(gL);pvr=r(jNe,"This class cannot be instantiated directly using "),w2e=n(jNe,"CODE",{});var Rvt=s(w2e);uvr=r(Rvt,"__init__()"),Rvt.forEach(t),_vr=r(jNe," (throws an error)."),jNe.forEach(t),bvr=i(Al),Rt=n(Al,"DIV",{class:!0});var aw=s(Rt);T(hL.$$.fragment,aw),vvr=i(aw),A2e=n(aw,"P",{});var Bvt=s(A2e);Fvr=r(Bvt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Bvt.forEach(t),Tvr=i(aw),cc=n(aw,"P",{});var aZ=s(cc);Mvr=r(aZ,`Note:
Loading a model from its configuration file does `),y2e=n(aZ,"STRONG",{});var Pvt=s(y2e);Evr=r(Pvt,"not"),Pvt.forEach(t),Cvr=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=n(aZ,"A",{href:!0});var Ivt=s(lH);wvr=r(Ivt,"from_pretrained()"),Ivt.forEach(t),Avr=r(aZ," to load the model weights."),aZ.forEach(t),yvr=i(aw),T(BM.$$.fragment,aw),aw.forEach(t),Lvr=i(Al),Rr=n(Al,"DIV",{class:!0});var yl=s(Rr);T(pL.$$.fragment,yl),xvr=i(yl),L2e=n(yl,"P",{});var qvt=s(L2e);$vr=r(qvt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),qvt.forEach(t),kvr=i(yl),ln=n(yl,"P",{});var nw=s(ln);Svr=r(nw,"The model class to instantiate is selected based on the "),x2e=n(nw,"CODE",{});var Nvt=s(x2e);Rvr=r(Nvt,"model_type"),Nvt.forEach(t),Bvr=r(nw,` property of the config object (either
passed as an argument or loaded from `),$2e=n(nw,"CODE",{});var jvt=s($2e);Pvr=r(jvt,"pretrained_model_name_or_path"),jvt.forEach(t),Ivr=r(nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k2e=n(nw,"CODE",{});var Dvt=s(k2e);qvr=r(Dvt,"pretrained_model_name_or_path"),Dvt.forEach(t),Nvr=r(nw,":"),nw.forEach(t),jvr=i(yl),uL=n(yl,"UL",{});var DNe=s(uL);PM=n(DNe,"LI",{});var ESe=s(PM);S2e=n(ESe,"STRONG",{});var Gvt=s(S2e);Dvr=r(Gvt,"bert"),Gvt.forEach(t),Gvr=r(ESe," \u2014 "),iH=n(ESe,"A",{href:!0});var Ovt=s(iH);Ovr=r(Ovt,"TFBertForNextSentencePrediction"),Ovt.forEach(t),Vvr=r(ESe," (BERT model)"),ESe.forEach(t),Xvr=i(DNe),IM=n(DNe,"LI",{});var CSe=s(IM);R2e=n(CSe,"STRONG",{});var Vvt=s(R2e);zvr=r(Vvt,"mobilebert"),Vvt.forEach(t),Qvr=r(CSe," \u2014 "),dH=n(CSe,"A",{href:!0});var Xvt=s(dH);Wvr=r(Xvt,"TFMobileBertForNextSentencePrediction"),Xvt.forEach(t),Hvr=r(CSe," (MobileBERT model)"),CSe.forEach(t),DNe.forEach(t),Uvr=i(yl),T(qM.$$.fragment,yl),yl.forEach(t),Al.forEach(t),BIe=i(f),fc=n(f,"H2",{class:!0});var GNe=s(fc);NM=n(GNe,"A",{id:!0,class:!0,href:!0});var zvt=s(NM);B2e=n(zvt,"SPAN",{});var Qvt=s(B2e);T(_L.$$.fragment,Qvt),Qvt.forEach(t),zvt.forEach(t),Jvr=i(GNe),P2e=n(GNe,"SPAN",{});var Wvt=s(P2e);Yvr=r(Wvt,"TFAutoModelForTableQuestionAnswering"),Wvt.forEach(t),GNe.forEach(t),PIe=i(f),sr=n(f,"DIV",{class:!0});var Ll=s(sr);T(bL.$$.fragment,Ll),Kvr=i(Ll),mc=n(Ll,"P",{});var nZ=s(mc);Zvr=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),cH=n(nZ,"A",{href:!0});var Hvt=s(cH);eFr=r(Hvt,"from_pretrained()"),Hvt.forEach(t),oFr=r(nZ," class method or the "),fH=n(nZ,"A",{href:!0});var Uvt=s(fH);rFr=r(Uvt,"from_config()"),Uvt.forEach(t),tFr=r(nZ,` class
method.`),nZ.forEach(t),aFr=i(Ll),vL=n(Ll,"P",{});var ONe=s(vL);nFr=r(ONe,"This class cannot be instantiated directly using "),I2e=n(ONe,"CODE",{});var Jvt=s(I2e);sFr=r(Jvt,"__init__()"),Jvt.forEach(t),lFr=r(ONe," (throws an error)."),ONe.forEach(t),iFr=i(Ll),Bt=n(Ll,"DIV",{class:!0});var sw=s(Bt);T(FL.$$.fragment,sw),dFr=i(sw),q2e=n(sw,"P",{});var Yvt=s(q2e);cFr=r(Yvt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Yvt.forEach(t),fFr=i(sw),gc=n(sw,"P",{});var sZ=s(gc);mFr=r(sZ,`Note:
Loading a model from its configuration file does `),N2e=n(sZ,"STRONG",{});var Kvt=s(N2e);gFr=r(Kvt,"not"),Kvt.forEach(t),hFr=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mH=n(sZ,"A",{href:!0});var Zvt=s(mH);pFr=r(Zvt,"from_pretrained()"),Zvt.forEach(t),uFr=r(sZ," to load the model weights."),sZ.forEach(t),_Fr=i(sw),T(jM.$$.fragment,sw),sw.forEach(t),bFr=i(Ll),Br=n(Ll,"DIV",{class:!0});var xl=s(Br);T(TL.$$.fragment,xl),vFr=i(xl),j2e=n(xl,"P",{});var eFt=s(j2e);FFr=r(eFt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),eFt.forEach(t),TFr=i(xl),dn=n(xl,"P",{});var lw=s(dn);MFr=r(lw,"The model class to instantiate is selected based on the "),D2e=n(lw,"CODE",{});var oFt=s(D2e);EFr=r(oFt,"model_type"),oFt.forEach(t),CFr=r(lw,` property of the config object (either
passed as an argument or loaded from `),G2e=n(lw,"CODE",{});var rFt=s(G2e);wFr=r(rFt,"pretrained_model_name_or_path"),rFt.forEach(t),AFr=r(lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O2e=n(lw,"CODE",{});var tFt=s(O2e);yFr=r(tFt,"pretrained_model_name_or_path"),tFt.forEach(t),LFr=r(lw,":"),lw.forEach(t),xFr=i(xl),V2e=n(xl,"UL",{});var aFt=s(V2e);DM=n(aFt,"LI",{});var wSe=s(DM);X2e=n(wSe,"STRONG",{});var nFt=s(X2e);$Fr=r(nFt,"tapas"),nFt.forEach(t),kFr=r(wSe," \u2014 "),gH=n(wSe,"A",{href:!0});var sFt=s(gH);SFr=r(sFt,"TFTapasForQuestionAnswering"),sFt.forEach(t),RFr=r(wSe," (TAPAS model)"),wSe.forEach(t),aFt.forEach(t),BFr=i(xl),T(GM.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),IIe=i(f),hc=n(f,"H2",{class:!0});var VNe=s(hc);OM=n(VNe,"A",{id:!0,class:!0,href:!0});var lFt=s(OM);z2e=n(lFt,"SPAN",{});var iFt=s(z2e);T(ML.$$.fragment,iFt),iFt.forEach(t),lFt.forEach(t),PFr=i(VNe),Q2e=n(VNe,"SPAN",{});var dFt=s(Q2e);IFr=r(dFt,"TFAutoModelForTokenClassification"),dFt.forEach(t),VNe.forEach(t),qIe=i(f),lr=n(f,"DIV",{class:!0});var $l=s(lr);T(EL.$$.fragment,$l),qFr=i($l),pc=n($l,"P",{});var lZ=s(pc);NFr=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),hH=n(lZ,"A",{href:!0});var cFt=s(hH);jFr=r(cFt,"from_pretrained()"),cFt.forEach(t),DFr=r(lZ," class method or the "),pH=n(lZ,"A",{href:!0});var fFt=s(pH);GFr=r(fFt,"from_config()"),fFt.forEach(t),OFr=r(lZ,` class
method.`),lZ.forEach(t),VFr=i($l),CL=n($l,"P",{});var XNe=s(CL);XFr=r(XNe,"This class cannot be instantiated directly using "),W2e=n(XNe,"CODE",{});var mFt=s(W2e);zFr=r(mFt,"__init__()"),mFt.forEach(t),QFr=r(XNe," (throws an error)."),XNe.forEach(t),WFr=i($l),Pt=n($l,"DIV",{class:!0});var iw=s(Pt);T(wL.$$.fragment,iw),HFr=i(iw),H2e=n(iw,"P",{});var gFt=s(H2e);UFr=r(gFt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),gFt.forEach(t),JFr=i(iw),uc=n(iw,"P",{});var iZ=s(uc);YFr=r(iZ,`Note:
Loading a model from its configuration file does `),U2e=n(iZ,"STRONG",{});var hFt=s(U2e);KFr=r(hFt,"not"),hFt.forEach(t),ZFr=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uH=n(iZ,"A",{href:!0});var pFt=s(uH);e6r=r(pFt,"from_pretrained()"),pFt.forEach(t),o6r=r(iZ," to load the model weights."),iZ.forEach(t),r6r=i(iw),T(VM.$$.fragment,iw),iw.forEach(t),t6r=i($l),Pr=n($l,"DIV",{class:!0});var kl=s(Pr);T(AL.$$.fragment,kl),a6r=i(kl),J2e=n(kl,"P",{});var uFt=s(J2e);n6r=r(uFt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),uFt.forEach(t),s6r=i(kl),cn=n(kl,"P",{});var dw=s(cn);l6r=r(dw,"The model class to instantiate is selected based on the "),Y2e=n(dw,"CODE",{});var _Ft=s(Y2e);i6r=r(_Ft,"model_type"),_Ft.forEach(t),d6r=r(dw,` property of the config object (either
passed as an argument or loaded from `),K2e=n(dw,"CODE",{});var bFt=s(K2e);c6r=r(bFt,"pretrained_model_name_or_path"),bFt.forEach(t),f6r=r(dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z2e=n(dw,"CODE",{});var vFt=s(Z2e);m6r=r(vFt,"pretrained_model_name_or_path"),vFt.forEach(t),g6r=r(dw,":"),dw.forEach(t),h6r=i(kl),de=n(kl,"UL",{});var me=s(de);XM=n(me,"LI",{});var ASe=s(XM);eve=n(ASe,"STRONG",{});var FFt=s(eve);p6r=r(FFt,"albert"),FFt.forEach(t),u6r=r(ASe," \u2014 "),_H=n(ASe,"A",{href:!0});var TFt=s(_H);_6r=r(TFt,"TFAlbertForTokenClassification"),TFt.forEach(t),b6r=r(ASe," (ALBERT model)"),ASe.forEach(t),v6r=i(me),zM=n(me,"LI",{});var ySe=s(zM);ove=n(ySe,"STRONG",{});var MFt=s(ove);F6r=r(MFt,"bert"),MFt.forEach(t),T6r=r(ySe," \u2014 "),bH=n(ySe,"A",{href:!0});var EFt=s(bH);M6r=r(EFt,"TFBertForTokenClassification"),EFt.forEach(t),E6r=r(ySe," (BERT model)"),ySe.forEach(t),C6r=i(me),QM=n(me,"LI",{});var LSe=s(QM);rve=n(LSe,"STRONG",{});var CFt=s(rve);w6r=r(CFt,"camembert"),CFt.forEach(t),A6r=r(LSe," \u2014 "),vH=n(LSe,"A",{href:!0});var wFt=s(vH);y6r=r(wFt,"TFCamembertForTokenClassification"),wFt.forEach(t),L6r=r(LSe," (CamemBERT model)"),LSe.forEach(t),x6r=i(me),WM=n(me,"LI",{});var xSe=s(WM);tve=n(xSe,"STRONG",{});var AFt=s(tve);$6r=r(AFt,"convbert"),AFt.forEach(t),k6r=r(xSe," \u2014 "),FH=n(xSe,"A",{href:!0});var yFt=s(FH);S6r=r(yFt,"TFConvBertForTokenClassification"),yFt.forEach(t),R6r=r(xSe," (ConvBERT model)"),xSe.forEach(t),B6r=i(me),HM=n(me,"LI",{});var $Se=s(HM);ave=n($Se,"STRONG",{});var LFt=s(ave);P6r=r(LFt,"deberta"),LFt.forEach(t),I6r=r($Se," \u2014 "),TH=n($Se,"A",{href:!0});var xFt=s(TH);q6r=r(xFt,"TFDebertaForTokenClassification"),xFt.forEach(t),N6r=r($Se," (DeBERTa model)"),$Se.forEach(t),j6r=i(me),UM=n(me,"LI",{});var kSe=s(UM);nve=n(kSe,"STRONG",{});var $Ft=s(nve);D6r=r($Ft,"deberta-v2"),$Ft.forEach(t),G6r=r(kSe," \u2014 "),MH=n(kSe,"A",{href:!0});var kFt=s(MH);O6r=r(kFt,"TFDebertaV2ForTokenClassification"),kFt.forEach(t),V6r=r(kSe," (DeBERTa-v2 model)"),kSe.forEach(t),X6r=i(me),JM=n(me,"LI",{});var SSe=s(JM);sve=n(SSe,"STRONG",{});var SFt=s(sve);z6r=r(SFt,"distilbert"),SFt.forEach(t),Q6r=r(SSe," \u2014 "),EH=n(SSe,"A",{href:!0});var RFt=s(EH);W6r=r(RFt,"TFDistilBertForTokenClassification"),RFt.forEach(t),H6r=r(SSe," (DistilBERT model)"),SSe.forEach(t),U6r=i(me),YM=n(me,"LI",{});var RSe=s(YM);lve=n(RSe,"STRONG",{});var BFt=s(lve);J6r=r(BFt,"electra"),BFt.forEach(t),Y6r=r(RSe," \u2014 "),CH=n(RSe,"A",{href:!0});var PFt=s(CH);K6r=r(PFt,"TFElectraForTokenClassification"),PFt.forEach(t),Z6r=r(RSe," (ELECTRA model)"),RSe.forEach(t),eTr=i(me),KM=n(me,"LI",{});var BSe=s(KM);ive=n(BSe,"STRONG",{});var IFt=s(ive);oTr=r(IFt,"flaubert"),IFt.forEach(t),rTr=r(BSe," \u2014 "),wH=n(BSe,"A",{href:!0});var qFt=s(wH);tTr=r(qFt,"TFFlaubertForTokenClassification"),qFt.forEach(t),aTr=r(BSe," (FlauBERT model)"),BSe.forEach(t),nTr=i(me),ZM=n(me,"LI",{});var PSe=s(ZM);dve=n(PSe,"STRONG",{});var NFt=s(dve);sTr=r(NFt,"funnel"),NFt.forEach(t),lTr=r(PSe," \u2014 "),AH=n(PSe,"A",{href:!0});var jFt=s(AH);iTr=r(jFt,"TFFunnelForTokenClassification"),jFt.forEach(t),dTr=r(PSe," (Funnel Transformer model)"),PSe.forEach(t),cTr=i(me),e4=n(me,"LI",{});var ISe=s(e4);cve=n(ISe,"STRONG",{});var DFt=s(cve);fTr=r(DFt,"layoutlm"),DFt.forEach(t),mTr=r(ISe," \u2014 "),yH=n(ISe,"A",{href:!0});var GFt=s(yH);gTr=r(GFt,"TFLayoutLMForTokenClassification"),GFt.forEach(t),hTr=r(ISe," (LayoutLM model)"),ISe.forEach(t),pTr=i(me),o4=n(me,"LI",{});var qSe=s(o4);fve=n(qSe,"STRONG",{});var OFt=s(fve);uTr=r(OFt,"longformer"),OFt.forEach(t),_Tr=r(qSe," \u2014 "),LH=n(qSe,"A",{href:!0});var VFt=s(LH);bTr=r(VFt,"TFLongformerForTokenClassification"),VFt.forEach(t),vTr=r(qSe," (Longformer model)"),qSe.forEach(t),FTr=i(me),r4=n(me,"LI",{});var NSe=s(r4);mve=n(NSe,"STRONG",{});var XFt=s(mve);TTr=r(XFt,"mobilebert"),XFt.forEach(t),MTr=r(NSe," \u2014 "),xH=n(NSe,"A",{href:!0});var zFt=s(xH);ETr=r(zFt,"TFMobileBertForTokenClassification"),zFt.forEach(t),CTr=r(NSe," (MobileBERT model)"),NSe.forEach(t),wTr=i(me),t4=n(me,"LI",{});var jSe=s(t4);gve=n(jSe,"STRONG",{});var QFt=s(gve);ATr=r(QFt,"mpnet"),QFt.forEach(t),yTr=r(jSe," \u2014 "),$H=n(jSe,"A",{href:!0});var WFt=s($H);LTr=r(WFt,"TFMPNetForTokenClassification"),WFt.forEach(t),xTr=r(jSe," (MPNet model)"),jSe.forEach(t),$Tr=i(me),a4=n(me,"LI",{});var DSe=s(a4);hve=n(DSe,"STRONG",{});var HFt=s(hve);kTr=r(HFt,"rembert"),HFt.forEach(t),STr=r(DSe," \u2014 "),kH=n(DSe,"A",{href:!0});var UFt=s(kH);RTr=r(UFt,"TFRemBertForTokenClassification"),UFt.forEach(t),BTr=r(DSe," (RemBERT model)"),DSe.forEach(t),PTr=i(me),n4=n(me,"LI",{});var GSe=s(n4);pve=n(GSe,"STRONG",{});var JFt=s(pve);ITr=r(JFt,"roberta"),JFt.forEach(t),qTr=r(GSe," \u2014 "),SH=n(GSe,"A",{href:!0});var YFt=s(SH);NTr=r(YFt,"TFRobertaForTokenClassification"),YFt.forEach(t),jTr=r(GSe," (RoBERTa model)"),GSe.forEach(t),DTr=i(me),s4=n(me,"LI",{});var OSe=s(s4);uve=n(OSe,"STRONG",{});var KFt=s(uve);GTr=r(KFt,"roformer"),KFt.forEach(t),OTr=r(OSe," \u2014 "),RH=n(OSe,"A",{href:!0});var ZFt=s(RH);VTr=r(ZFt,"TFRoFormerForTokenClassification"),ZFt.forEach(t),XTr=r(OSe," (RoFormer model)"),OSe.forEach(t),zTr=i(me),l4=n(me,"LI",{});var VSe=s(l4);_ve=n(VSe,"STRONG",{});var e6t=s(_ve);QTr=r(e6t,"xlm"),e6t.forEach(t),WTr=r(VSe," \u2014 "),BH=n(VSe,"A",{href:!0});var o6t=s(BH);HTr=r(o6t,"TFXLMForTokenClassification"),o6t.forEach(t),UTr=r(VSe," (XLM model)"),VSe.forEach(t),JTr=i(me),i4=n(me,"LI",{});var XSe=s(i4);bve=n(XSe,"STRONG",{});var r6t=s(bve);YTr=r(r6t,"xlm-roberta"),r6t.forEach(t),KTr=r(XSe," \u2014 "),PH=n(XSe,"A",{href:!0});var t6t=s(PH);ZTr=r(t6t,"TFXLMRobertaForTokenClassification"),t6t.forEach(t),e9r=r(XSe," (XLM-RoBERTa model)"),XSe.forEach(t),o9r=i(me),d4=n(me,"LI",{});var zSe=s(d4);vve=n(zSe,"STRONG",{});var a6t=s(vve);r9r=r(a6t,"xlnet"),a6t.forEach(t),t9r=r(zSe," \u2014 "),IH=n(zSe,"A",{href:!0});var n6t=s(IH);a9r=r(n6t,"TFXLNetForTokenClassification"),n6t.forEach(t),n9r=r(zSe," (XLNet model)"),zSe.forEach(t),me.forEach(t),s9r=i(kl),T(c4.$$.fragment,kl),kl.forEach(t),$l.forEach(t),NIe=i(f),_c=n(f,"H2",{class:!0});var zNe=s(_c);f4=n(zNe,"A",{id:!0,class:!0,href:!0});var s6t=s(f4);Fve=n(s6t,"SPAN",{});var l6t=s(Fve);T(yL.$$.fragment,l6t),l6t.forEach(t),s6t.forEach(t),l9r=i(zNe),Tve=n(zNe,"SPAN",{});var i6t=s(Tve);i9r=r(i6t,"TFAutoModelForQuestionAnswering"),i6t.forEach(t),zNe.forEach(t),jIe=i(f),ir=n(f,"DIV",{class:!0});var Sl=s(ir);T(LL.$$.fragment,Sl),d9r=i(Sl),bc=n(Sl,"P",{});var dZ=s(bc);c9r=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),qH=n(dZ,"A",{href:!0});var d6t=s(qH);f9r=r(d6t,"from_pretrained()"),d6t.forEach(t),m9r=r(dZ," class method or the "),NH=n(dZ,"A",{href:!0});var c6t=s(NH);g9r=r(c6t,"from_config()"),c6t.forEach(t),h9r=r(dZ,` class
method.`),dZ.forEach(t),p9r=i(Sl),xL=n(Sl,"P",{});var QNe=s(xL);u9r=r(QNe,"This class cannot be instantiated directly using "),Mve=n(QNe,"CODE",{});var f6t=s(Mve);_9r=r(f6t,"__init__()"),f6t.forEach(t),b9r=r(QNe," (throws an error)."),QNe.forEach(t),v9r=i(Sl),It=n(Sl,"DIV",{class:!0});var cw=s(It);T($L.$$.fragment,cw),F9r=i(cw),Eve=n(cw,"P",{});var m6t=s(Eve);T9r=r(m6t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),m6t.forEach(t),M9r=i(cw),vc=n(cw,"P",{});var cZ=s(vc);E9r=r(cZ,`Note:
Loading a model from its configuration file does `),Cve=n(cZ,"STRONG",{});var g6t=s(Cve);C9r=r(g6t,"not"),g6t.forEach(t),w9r=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jH=n(cZ,"A",{href:!0});var h6t=s(jH);A9r=r(h6t,"from_pretrained()"),h6t.forEach(t),y9r=r(cZ," to load the model weights."),cZ.forEach(t),L9r=i(cw),T(m4.$$.fragment,cw),cw.forEach(t),x9r=i(Sl),Ir=n(Sl,"DIV",{class:!0});var Rl=s(Ir);T(kL.$$.fragment,Rl),$9r=i(Rl),wve=n(Rl,"P",{});var p6t=s(wve);k9r=r(p6t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),p6t.forEach(t),S9r=i(Rl),fn=n(Rl,"P",{});var fw=s(fn);R9r=r(fw,"The model class to instantiate is selected based on the "),Ave=n(fw,"CODE",{});var u6t=s(Ave);B9r=r(u6t,"model_type"),u6t.forEach(t),P9r=r(fw,` property of the config object (either
passed as an argument or loaded from `),yve=n(fw,"CODE",{});var _6t=s(yve);I9r=r(_6t,"pretrained_model_name_or_path"),_6t.forEach(t),q9r=r(fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lve=n(fw,"CODE",{});var b6t=s(Lve);N9r=r(b6t,"pretrained_model_name_or_path"),b6t.forEach(t),j9r=r(fw,":"),fw.forEach(t),D9r=i(Rl),ce=n(Rl,"UL",{});var ge=s(ce);g4=n(ge,"LI",{});var QSe=s(g4);xve=n(QSe,"STRONG",{});var v6t=s(xve);G9r=r(v6t,"albert"),v6t.forEach(t),O9r=r(QSe," \u2014 "),DH=n(QSe,"A",{href:!0});var F6t=s(DH);V9r=r(F6t,"TFAlbertForQuestionAnswering"),F6t.forEach(t),X9r=r(QSe," (ALBERT model)"),QSe.forEach(t),z9r=i(ge),h4=n(ge,"LI",{});var WSe=s(h4);$ve=n(WSe,"STRONG",{});var T6t=s($ve);Q9r=r(T6t,"bert"),T6t.forEach(t),W9r=r(WSe," \u2014 "),GH=n(WSe,"A",{href:!0});var M6t=s(GH);H9r=r(M6t,"TFBertForQuestionAnswering"),M6t.forEach(t),U9r=r(WSe," (BERT model)"),WSe.forEach(t),J9r=i(ge),p4=n(ge,"LI",{});var HSe=s(p4);kve=n(HSe,"STRONG",{});var E6t=s(kve);Y9r=r(E6t,"camembert"),E6t.forEach(t),K9r=r(HSe," \u2014 "),OH=n(HSe,"A",{href:!0});var C6t=s(OH);Z9r=r(C6t,"TFCamembertForQuestionAnswering"),C6t.forEach(t),eMr=r(HSe," (CamemBERT model)"),HSe.forEach(t),oMr=i(ge),u4=n(ge,"LI",{});var USe=s(u4);Sve=n(USe,"STRONG",{});var w6t=s(Sve);rMr=r(w6t,"convbert"),w6t.forEach(t),tMr=r(USe," \u2014 "),VH=n(USe,"A",{href:!0});var A6t=s(VH);aMr=r(A6t,"TFConvBertForQuestionAnswering"),A6t.forEach(t),nMr=r(USe," (ConvBERT model)"),USe.forEach(t),sMr=i(ge),_4=n(ge,"LI",{});var JSe=s(_4);Rve=n(JSe,"STRONG",{});var y6t=s(Rve);lMr=r(y6t,"deberta"),y6t.forEach(t),iMr=r(JSe," \u2014 "),XH=n(JSe,"A",{href:!0});var L6t=s(XH);dMr=r(L6t,"TFDebertaForQuestionAnswering"),L6t.forEach(t),cMr=r(JSe," (DeBERTa model)"),JSe.forEach(t),fMr=i(ge),b4=n(ge,"LI",{});var YSe=s(b4);Bve=n(YSe,"STRONG",{});var x6t=s(Bve);mMr=r(x6t,"deberta-v2"),x6t.forEach(t),gMr=r(YSe," \u2014 "),zH=n(YSe,"A",{href:!0});var $6t=s(zH);hMr=r($6t,"TFDebertaV2ForQuestionAnswering"),$6t.forEach(t),pMr=r(YSe," (DeBERTa-v2 model)"),YSe.forEach(t),uMr=i(ge),v4=n(ge,"LI",{});var KSe=s(v4);Pve=n(KSe,"STRONG",{});var k6t=s(Pve);_Mr=r(k6t,"distilbert"),k6t.forEach(t),bMr=r(KSe," \u2014 "),QH=n(KSe,"A",{href:!0});var S6t=s(QH);vMr=r(S6t,"TFDistilBertForQuestionAnswering"),S6t.forEach(t),FMr=r(KSe," (DistilBERT model)"),KSe.forEach(t),TMr=i(ge),F4=n(ge,"LI",{});var ZSe=s(F4);Ive=n(ZSe,"STRONG",{});var R6t=s(Ive);MMr=r(R6t,"electra"),R6t.forEach(t),EMr=r(ZSe," \u2014 "),WH=n(ZSe,"A",{href:!0});var B6t=s(WH);CMr=r(B6t,"TFElectraForQuestionAnswering"),B6t.forEach(t),wMr=r(ZSe," (ELECTRA model)"),ZSe.forEach(t),AMr=i(ge),T4=n(ge,"LI",{});var eRe=s(T4);qve=n(eRe,"STRONG",{});var P6t=s(qve);yMr=r(P6t,"flaubert"),P6t.forEach(t),LMr=r(eRe," \u2014 "),HH=n(eRe,"A",{href:!0});var I6t=s(HH);xMr=r(I6t,"TFFlaubertForQuestionAnsweringSimple"),I6t.forEach(t),$Mr=r(eRe," (FlauBERT model)"),eRe.forEach(t),kMr=i(ge),M4=n(ge,"LI",{});var oRe=s(M4);Nve=n(oRe,"STRONG",{});var q6t=s(Nve);SMr=r(q6t,"funnel"),q6t.forEach(t),RMr=r(oRe," \u2014 "),UH=n(oRe,"A",{href:!0});var N6t=s(UH);BMr=r(N6t,"TFFunnelForQuestionAnswering"),N6t.forEach(t),PMr=r(oRe," (Funnel Transformer model)"),oRe.forEach(t),IMr=i(ge),E4=n(ge,"LI",{});var rRe=s(E4);jve=n(rRe,"STRONG",{});var j6t=s(jve);qMr=r(j6t,"gptj"),j6t.forEach(t),NMr=r(rRe," \u2014 "),JH=n(rRe,"A",{href:!0});var D6t=s(JH);jMr=r(D6t,"TFGPTJForQuestionAnswering"),D6t.forEach(t),DMr=r(rRe," (GPT-J model)"),rRe.forEach(t),GMr=i(ge),C4=n(ge,"LI",{});var tRe=s(C4);Dve=n(tRe,"STRONG",{});var G6t=s(Dve);OMr=r(G6t,"longformer"),G6t.forEach(t),VMr=r(tRe," \u2014 "),YH=n(tRe,"A",{href:!0});var O6t=s(YH);XMr=r(O6t,"TFLongformerForQuestionAnswering"),O6t.forEach(t),zMr=r(tRe," (Longformer model)"),tRe.forEach(t),QMr=i(ge),w4=n(ge,"LI",{});var aRe=s(w4);Gve=n(aRe,"STRONG",{});var V6t=s(Gve);WMr=r(V6t,"mobilebert"),V6t.forEach(t),HMr=r(aRe," \u2014 "),KH=n(aRe,"A",{href:!0});var X6t=s(KH);UMr=r(X6t,"TFMobileBertForQuestionAnswering"),X6t.forEach(t),JMr=r(aRe," (MobileBERT model)"),aRe.forEach(t),YMr=i(ge),A4=n(ge,"LI",{});var nRe=s(A4);Ove=n(nRe,"STRONG",{});var z6t=s(Ove);KMr=r(z6t,"mpnet"),z6t.forEach(t),ZMr=r(nRe," \u2014 "),ZH=n(nRe,"A",{href:!0});var Q6t=s(ZH);e4r=r(Q6t,"TFMPNetForQuestionAnswering"),Q6t.forEach(t),o4r=r(nRe," (MPNet model)"),nRe.forEach(t),r4r=i(ge),y4=n(ge,"LI",{});var sRe=s(y4);Vve=n(sRe,"STRONG",{});var W6t=s(Vve);t4r=r(W6t,"rembert"),W6t.forEach(t),a4r=r(sRe," \u2014 "),eU=n(sRe,"A",{href:!0});var H6t=s(eU);n4r=r(H6t,"TFRemBertForQuestionAnswering"),H6t.forEach(t),s4r=r(sRe," (RemBERT model)"),sRe.forEach(t),l4r=i(ge),L4=n(ge,"LI",{});var lRe=s(L4);Xve=n(lRe,"STRONG",{});var U6t=s(Xve);i4r=r(U6t,"roberta"),U6t.forEach(t),d4r=r(lRe," \u2014 "),oU=n(lRe,"A",{href:!0});var J6t=s(oU);c4r=r(J6t,"TFRobertaForQuestionAnswering"),J6t.forEach(t),f4r=r(lRe," (RoBERTa model)"),lRe.forEach(t),m4r=i(ge),x4=n(ge,"LI",{});var iRe=s(x4);zve=n(iRe,"STRONG",{});var Y6t=s(zve);g4r=r(Y6t,"roformer"),Y6t.forEach(t),h4r=r(iRe," \u2014 "),rU=n(iRe,"A",{href:!0});var K6t=s(rU);p4r=r(K6t,"TFRoFormerForQuestionAnswering"),K6t.forEach(t),u4r=r(iRe," (RoFormer model)"),iRe.forEach(t),_4r=i(ge),$4=n(ge,"LI",{});var dRe=s($4);Qve=n(dRe,"STRONG",{});var Z6t=s(Qve);b4r=r(Z6t,"xlm"),Z6t.forEach(t),v4r=r(dRe," \u2014 "),tU=n(dRe,"A",{href:!0});var eTt=s(tU);F4r=r(eTt,"TFXLMForQuestionAnsweringSimple"),eTt.forEach(t),T4r=r(dRe," (XLM model)"),dRe.forEach(t),M4r=i(ge),k4=n(ge,"LI",{});var cRe=s(k4);Wve=n(cRe,"STRONG",{});var oTt=s(Wve);E4r=r(oTt,"xlm-roberta"),oTt.forEach(t),C4r=r(cRe," \u2014 "),aU=n(cRe,"A",{href:!0});var rTt=s(aU);w4r=r(rTt,"TFXLMRobertaForQuestionAnswering"),rTt.forEach(t),A4r=r(cRe," (XLM-RoBERTa model)"),cRe.forEach(t),y4r=i(ge),S4=n(ge,"LI",{});var fRe=s(S4);Hve=n(fRe,"STRONG",{});var tTt=s(Hve);L4r=r(tTt,"xlnet"),tTt.forEach(t),x4r=r(fRe," \u2014 "),nU=n(fRe,"A",{href:!0});var aTt=s(nU);$4r=r(aTt,"TFXLNetForQuestionAnsweringSimple"),aTt.forEach(t),k4r=r(fRe," (XLNet model)"),fRe.forEach(t),ge.forEach(t),S4r=i(Rl),T(R4.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),DIe=i(f),Fc=n(f,"H2",{class:!0});var WNe=s(Fc);B4=n(WNe,"A",{id:!0,class:!0,href:!0});var nTt=s(B4);Uve=n(nTt,"SPAN",{});var sTt=s(Uve);T(SL.$$.fragment,sTt),sTt.forEach(t),nTt.forEach(t),R4r=i(WNe),Jve=n(WNe,"SPAN",{});var lTt=s(Jve);B4r=r(lTt,"TFAutoModelForVision2Seq"),lTt.forEach(t),WNe.forEach(t),GIe=i(f),dr=n(f,"DIV",{class:!0});var Bl=s(dr);T(RL.$$.fragment,Bl),P4r=i(Bl),Tc=n(Bl,"P",{});var fZ=s(Tc);I4r=r(fZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),sU=n(fZ,"A",{href:!0});var iTt=s(sU);q4r=r(iTt,"from_pretrained()"),iTt.forEach(t),N4r=r(fZ," class method or the "),lU=n(fZ,"A",{href:!0});var dTt=s(lU);j4r=r(dTt,"from_config()"),dTt.forEach(t),D4r=r(fZ,` class
method.`),fZ.forEach(t),G4r=i(Bl),BL=n(Bl,"P",{});var HNe=s(BL);O4r=r(HNe,"This class cannot be instantiated directly using "),Yve=n(HNe,"CODE",{});var cTt=s(Yve);V4r=r(cTt,"__init__()"),cTt.forEach(t),X4r=r(HNe," (throws an error)."),HNe.forEach(t),z4r=i(Bl),qt=n(Bl,"DIV",{class:!0});var mw=s(qt);T(PL.$$.fragment,mw),Q4r=i(mw),Kve=n(mw,"P",{});var fTt=s(Kve);W4r=r(fTt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),fTt.forEach(t),H4r=i(mw),Mc=n(mw,"P",{});var mZ=s(Mc);U4r=r(mZ,`Note:
Loading a model from its configuration file does `),Zve=n(mZ,"STRONG",{});var mTt=s(Zve);J4r=r(mTt,"not"),mTt.forEach(t),Y4r=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iU=n(mZ,"A",{href:!0});var gTt=s(iU);K4r=r(gTt,"from_pretrained()"),gTt.forEach(t),Z4r=r(mZ," to load the model weights."),mZ.forEach(t),eEr=i(mw),T(P4.$$.fragment,mw),mw.forEach(t),oEr=i(Bl),qr=n(Bl,"DIV",{class:!0});var Pl=s(qr);T(IL.$$.fragment,Pl),rEr=i(Pl),eFe=n(Pl,"P",{});var hTt=s(eFe);tEr=r(hTt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),hTt.forEach(t),aEr=i(Pl),mn=n(Pl,"P",{});var gw=s(mn);nEr=r(gw,"The model class to instantiate is selected based on the "),oFe=n(gw,"CODE",{});var pTt=s(oFe);sEr=r(pTt,"model_type"),pTt.forEach(t),lEr=r(gw,` property of the config object (either
passed as an argument or loaded from `),rFe=n(gw,"CODE",{});var uTt=s(rFe);iEr=r(uTt,"pretrained_model_name_or_path"),uTt.forEach(t),dEr=r(gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tFe=n(gw,"CODE",{});var _Tt=s(tFe);cEr=r(_Tt,"pretrained_model_name_or_path"),_Tt.forEach(t),fEr=r(gw,":"),gw.forEach(t),mEr=i(Pl),aFe=n(Pl,"UL",{});var bTt=s(aFe);I4=n(bTt,"LI",{});var mRe=s(I4);nFe=n(mRe,"STRONG",{});var vTt=s(nFe);gEr=r(vTt,"vision-encoder-decoder"),vTt.forEach(t),hEr=r(mRe," \u2014 "),dU=n(mRe,"A",{href:!0});var FTt=s(dU);pEr=r(FTt,"TFVisionEncoderDecoderModel"),FTt.forEach(t),uEr=r(mRe," (Vision Encoder decoder model)"),mRe.forEach(t),bTt.forEach(t),_Er=i(Pl),T(q4.$$.fragment,Pl),Pl.forEach(t),Bl.forEach(t),OIe=i(f),Ec=n(f,"H2",{class:!0});var UNe=s(Ec);N4=n(UNe,"A",{id:!0,class:!0,href:!0});var TTt=s(N4);sFe=n(TTt,"SPAN",{});var MTt=s(sFe);T(qL.$$.fragment,MTt),MTt.forEach(t),TTt.forEach(t),bEr=i(UNe),lFe=n(UNe,"SPAN",{});var ETt=s(lFe);vEr=r(ETt,"TFAutoModelForSpeechSeq2Seq"),ETt.forEach(t),UNe.forEach(t),VIe=i(f),cr=n(f,"DIV",{class:!0});var Il=s(cr);T(NL.$$.fragment,Il),FEr=i(Il),Cc=n(Il,"P",{});var gZ=s(Cc);TEr=r(gZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),cU=n(gZ,"A",{href:!0});var CTt=s(cU);MEr=r(CTt,"from_pretrained()"),CTt.forEach(t),EEr=r(gZ," class method or the "),fU=n(gZ,"A",{href:!0});var wTt=s(fU);CEr=r(wTt,"from_config()"),wTt.forEach(t),wEr=r(gZ,` class
method.`),gZ.forEach(t),AEr=i(Il),jL=n(Il,"P",{});var JNe=s(jL);yEr=r(JNe,"This class cannot be instantiated directly using "),iFe=n(JNe,"CODE",{});var ATt=s(iFe);LEr=r(ATt,"__init__()"),ATt.forEach(t),xEr=r(JNe," (throws an error)."),JNe.forEach(t),$Er=i(Il),Nt=n(Il,"DIV",{class:!0});var hw=s(Nt);T(DL.$$.fragment,hw),kEr=i(hw),dFe=n(hw,"P",{});var yTt=s(dFe);SEr=r(yTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),yTt.forEach(t),REr=i(hw),wc=n(hw,"P",{});var hZ=s(wc);BEr=r(hZ,`Note:
Loading a model from its configuration file does `),cFe=n(hZ,"STRONG",{});var LTt=s(cFe);PEr=r(LTt,"not"),LTt.forEach(t),IEr=r(hZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mU=n(hZ,"A",{href:!0});var xTt=s(mU);qEr=r(xTt,"from_pretrained()"),xTt.forEach(t),NEr=r(hZ," to load the model weights."),hZ.forEach(t),jEr=i(hw),T(j4.$$.fragment,hw),hw.forEach(t),DEr=i(Il),Nr=n(Il,"DIV",{class:!0});var ql=s(Nr);T(GL.$$.fragment,ql),GEr=i(ql),fFe=n(ql,"P",{});var $Tt=s(fFe);OEr=r($Tt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),$Tt.forEach(t),VEr=i(ql),gn=n(ql,"P",{});var pw=s(gn);XEr=r(pw,"The model class to instantiate is selected based on the "),mFe=n(pw,"CODE",{});var kTt=s(mFe);zEr=r(kTt,"model_type"),kTt.forEach(t),QEr=r(pw,` property of the config object (either
passed as an argument or loaded from `),gFe=n(pw,"CODE",{});var STt=s(gFe);WEr=r(STt,"pretrained_model_name_or_path"),STt.forEach(t),HEr=r(pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hFe=n(pw,"CODE",{});var RTt=s(hFe);UEr=r(RTt,"pretrained_model_name_or_path"),RTt.forEach(t),JEr=r(pw,":"),pw.forEach(t),YEr=i(ql),pFe=n(ql,"UL",{});var BTt=s(pFe);D4=n(BTt,"LI",{});var gRe=s(D4);uFe=n(gRe,"STRONG",{});var PTt=s(uFe);KEr=r(PTt,"speech_to_text"),PTt.forEach(t),ZEr=r(gRe," \u2014 "),gU=n(gRe,"A",{href:!0});var ITt=s(gU);e5r=r(ITt,"TFSpeech2TextForConditionalGeneration"),ITt.forEach(t),o5r=r(gRe," (Speech2Text model)"),gRe.forEach(t),BTt.forEach(t),r5r=i(ql),T(G4.$$.fragment,ql),ql.forEach(t),Il.forEach(t),XIe=i(f),Ac=n(f,"H2",{class:!0});var YNe=s(Ac);O4=n(YNe,"A",{id:!0,class:!0,href:!0});var qTt=s(O4);_Fe=n(qTt,"SPAN",{});var NTt=s(_Fe);T(OL.$$.fragment,NTt),NTt.forEach(t),qTt.forEach(t),t5r=i(YNe),bFe=n(YNe,"SPAN",{});var jTt=s(bFe);a5r=r(jTt,"FlaxAutoModel"),jTt.forEach(t),YNe.forEach(t),zIe=i(f),fr=n(f,"DIV",{class:!0});var Nl=s(fr);T(VL.$$.fragment,Nl),n5r=i(Nl),yc=n(Nl,"P",{});var pZ=s(yc);s5r=r(pZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),hU=n(pZ,"A",{href:!0});var DTt=s(hU);l5r=r(DTt,"from_pretrained()"),DTt.forEach(t),i5r=r(pZ," class method or the "),pU=n(pZ,"A",{href:!0});var GTt=s(pU);d5r=r(GTt,"from_config()"),GTt.forEach(t),c5r=r(pZ,` class
method.`),pZ.forEach(t),f5r=i(Nl),XL=n(Nl,"P",{});var KNe=s(XL);m5r=r(KNe,"This class cannot be instantiated directly using "),vFe=n(KNe,"CODE",{});var OTt=s(vFe);g5r=r(OTt,"__init__()"),OTt.forEach(t),h5r=r(KNe," (throws an error)."),KNe.forEach(t),p5r=i(Nl),jt=n(Nl,"DIV",{class:!0});var uw=s(jt);T(zL.$$.fragment,uw),u5r=i(uw),FFe=n(uw,"P",{});var VTt=s(FFe);_5r=r(VTt,"Instantiates one of the base model classes of the library from a configuration."),VTt.forEach(t),b5r=i(uw),Lc=n(uw,"P",{});var uZ=s(Lc);v5r=r(uZ,`Note:
Loading a model from its configuration file does `),TFe=n(uZ,"STRONG",{});var XTt=s(TFe);F5r=r(XTt,"not"),XTt.forEach(t),T5r=r(uZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uU=n(uZ,"A",{href:!0});var zTt=s(uU);M5r=r(zTt,"from_pretrained()"),zTt.forEach(t),E5r=r(uZ," to load the model weights."),uZ.forEach(t),C5r=i(uw),T(V4.$$.fragment,uw),uw.forEach(t),w5r=i(Nl),jr=n(Nl,"DIV",{class:!0});var jl=s(jr);T(QL.$$.fragment,jl),A5r=i(jl),MFe=n(jl,"P",{});var QTt=s(MFe);y5r=r(QTt,"Instantiate one of the base model classes of the library from a pretrained model."),QTt.forEach(t),L5r=i(jl),hn=n(jl,"P",{});var _w=s(hn);x5r=r(_w,"The model class to instantiate is selected based on the "),EFe=n(_w,"CODE",{});var WTt=s(EFe);$5r=r(WTt,"model_type"),WTt.forEach(t),k5r=r(_w,` property of the config object (either
passed as an argument or loaded from `),CFe=n(_w,"CODE",{});var HTt=s(CFe);S5r=r(HTt,"pretrained_model_name_or_path"),HTt.forEach(t),R5r=r(_w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wFe=n(_w,"CODE",{});var UTt=s(wFe);B5r=r(UTt,"pretrained_model_name_or_path"),UTt.forEach(t),P5r=r(_w,":"),_w.forEach(t),I5r=i(jl),oe=n(jl,"UL",{});var ae=s(oe);X4=n(ae,"LI",{});var hRe=s(X4);AFe=n(hRe,"STRONG",{});var JTt=s(AFe);q5r=r(JTt,"albert"),JTt.forEach(t),N5r=r(hRe," \u2014 "),_U=n(hRe,"A",{href:!0});var YTt=s(_U);j5r=r(YTt,"FlaxAlbertModel"),YTt.forEach(t),D5r=r(hRe," (ALBERT model)"),hRe.forEach(t),G5r=i(ae),z4=n(ae,"LI",{});var pRe=s(z4);yFe=n(pRe,"STRONG",{});var KTt=s(yFe);O5r=r(KTt,"bart"),KTt.forEach(t),V5r=r(pRe," \u2014 "),bU=n(pRe,"A",{href:!0});var ZTt=s(bU);X5r=r(ZTt,"FlaxBartModel"),ZTt.forEach(t),z5r=r(pRe," (BART model)"),pRe.forEach(t),Q5r=i(ae),Q4=n(ae,"LI",{});var uRe=s(Q4);LFe=n(uRe,"STRONG",{});var e9t=s(LFe);W5r=r(e9t,"beit"),e9t.forEach(t),H5r=r(uRe," \u2014 "),vU=n(uRe,"A",{href:!0});var o9t=s(vU);U5r=r(o9t,"FlaxBeitModel"),o9t.forEach(t),J5r=r(uRe," (BEiT model)"),uRe.forEach(t),Y5r=i(ae),W4=n(ae,"LI",{});var _Re=s(W4);xFe=n(_Re,"STRONG",{});var r9t=s(xFe);K5r=r(r9t,"bert"),r9t.forEach(t),Z5r=r(_Re," \u2014 "),FU=n(_Re,"A",{href:!0});var t9t=s(FU);eCr=r(t9t,"FlaxBertModel"),t9t.forEach(t),oCr=r(_Re," (BERT model)"),_Re.forEach(t),rCr=i(ae),H4=n(ae,"LI",{});var bRe=s(H4);$Fe=n(bRe,"STRONG",{});var a9t=s($Fe);tCr=r(a9t,"big_bird"),a9t.forEach(t),aCr=r(bRe," \u2014 "),TU=n(bRe,"A",{href:!0});var n9t=s(TU);nCr=r(n9t,"FlaxBigBirdModel"),n9t.forEach(t),sCr=r(bRe," (BigBird model)"),bRe.forEach(t),lCr=i(ae),U4=n(ae,"LI",{});var vRe=s(U4);kFe=n(vRe,"STRONG",{});var s9t=s(kFe);iCr=r(s9t,"blenderbot"),s9t.forEach(t),dCr=r(vRe," \u2014 "),MU=n(vRe,"A",{href:!0});var l9t=s(MU);cCr=r(l9t,"FlaxBlenderbotModel"),l9t.forEach(t),fCr=r(vRe," (Blenderbot model)"),vRe.forEach(t),mCr=i(ae),J4=n(ae,"LI",{});var FRe=s(J4);SFe=n(FRe,"STRONG",{});var i9t=s(SFe);gCr=r(i9t,"blenderbot-small"),i9t.forEach(t),hCr=r(FRe," \u2014 "),EU=n(FRe,"A",{href:!0});var d9t=s(EU);pCr=r(d9t,"FlaxBlenderbotSmallModel"),d9t.forEach(t),uCr=r(FRe," (BlenderbotSmall model)"),FRe.forEach(t),_Cr=i(ae),Y4=n(ae,"LI",{});var TRe=s(Y4);RFe=n(TRe,"STRONG",{});var c9t=s(RFe);bCr=r(c9t,"clip"),c9t.forEach(t),vCr=r(TRe," \u2014 "),CU=n(TRe,"A",{href:!0});var f9t=s(CU);FCr=r(f9t,"FlaxCLIPModel"),f9t.forEach(t),TCr=r(TRe," (CLIP model)"),TRe.forEach(t),MCr=i(ae),K4=n(ae,"LI",{});var MRe=s(K4);BFe=n(MRe,"STRONG",{});var m9t=s(BFe);ECr=r(m9t,"distilbert"),m9t.forEach(t),CCr=r(MRe," \u2014 "),wU=n(MRe,"A",{href:!0});var g9t=s(wU);wCr=r(g9t,"FlaxDistilBertModel"),g9t.forEach(t),ACr=r(MRe," (DistilBERT model)"),MRe.forEach(t),yCr=i(ae),Z4=n(ae,"LI",{});var ERe=s(Z4);PFe=n(ERe,"STRONG",{});var h9t=s(PFe);LCr=r(h9t,"electra"),h9t.forEach(t),xCr=r(ERe," \u2014 "),AU=n(ERe,"A",{href:!0});var p9t=s(AU);$Cr=r(p9t,"FlaxElectraModel"),p9t.forEach(t),kCr=r(ERe," (ELECTRA model)"),ERe.forEach(t),SCr=i(ae),eE=n(ae,"LI",{});var CRe=s(eE);IFe=n(CRe,"STRONG",{});var u9t=s(IFe);RCr=r(u9t,"gpt2"),u9t.forEach(t),BCr=r(CRe," \u2014 "),yU=n(CRe,"A",{href:!0});var _9t=s(yU);PCr=r(_9t,"FlaxGPT2Model"),_9t.forEach(t),ICr=r(CRe," (OpenAI GPT-2 model)"),CRe.forEach(t),qCr=i(ae),oE=n(ae,"LI",{});var wRe=s(oE);qFe=n(wRe,"STRONG",{});var b9t=s(qFe);NCr=r(b9t,"gpt_neo"),b9t.forEach(t),jCr=r(wRe," \u2014 "),LU=n(wRe,"A",{href:!0});var v9t=s(LU);DCr=r(v9t,"FlaxGPTNeoModel"),v9t.forEach(t),GCr=r(wRe," (GPT Neo model)"),wRe.forEach(t),OCr=i(ae),rE=n(ae,"LI",{});var ARe=s(rE);NFe=n(ARe,"STRONG",{});var F9t=s(NFe);VCr=r(F9t,"gptj"),F9t.forEach(t),XCr=r(ARe," \u2014 "),xU=n(ARe,"A",{href:!0});var T9t=s(xU);zCr=r(T9t,"FlaxGPTJModel"),T9t.forEach(t),QCr=r(ARe," (GPT-J model)"),ARe.forEach(t),WCr=i(ae),tE=n(ae,"LI",{});var yRe=s(tE);jFe=n(yRe,"STRONG",{});var M9t=s(jFe);HCr=r(M9t,"marian"),M9t.forEach(t),UCr=r(yRe," \u2014 "),$U=n(yRe,"A",{href:!0});var E9t=s($U);JCr=r(E9t,"FlaxMarianModel"),E9t.forEach(t),YCr=r(yRe," (Marian model)"),yRe.forEach(t),KCr=i(ae),aE=n(ae,"LI",{});var LRe=s(aE);DFe=n(LRe,"STRONG",{});var C9t=s(DFe);ZCr=r(C9t,"mbart"),C9t.forEach(t),e3r=r(LRe," \u2014 "),kU=n(LRe,"A",{href:!0});var w9t=s(kU);o3r=r(w9t,"FlaxMBartModel"),w9t.forEach(t),r3r=r(LRe," (mBART model)"),LRe.forEach(t),t3r=i(ae),nE=n(ae,"LI",{});var xRe=s(nE);GFe=n(xRe,"STRONG",{});var A9t=s(GFe);a3r=r(A9t,"mt5"),A9t.forEach(t),n3r=r(xRe," \u2014 "),SU=n(xRe,"A",{href:!0});var y9t=s(SU);s3r=r(y9t,"FlaxMT5Model"),y9t.forEach(t),l3r=r(xRe," (mT5 model)"),xRe.forEach(t),i3r=i(ae),sE=n(ae,"LI",{});var $Re=s(sE);OFe=n($Re,"STRONG",{});var L9t=s(OFe);d3r=r(L9t,"pegasus"),L9t.forEach(t),c3r=r($Re," \u2014 "),RU=n($Re,"A",{href:!0});var x9t=s(RU);f3r=r(x9t,"FlaxPegasusModel"),x9t.forEach(t),m3r=r($Re," (Pegasus model)"),$Re.forEach(t),g3r=i(ae),lE=n(ae,"LI",{});var kRe=s(lE);VFe=n(kRe,"STRONG",{});var $9t=s(VFe);h3r=r($9t,"roberta"),$9t.forEach(t),p3r=r(kRe," \u2014 "),BU=n(kRe,"A",{href:!0});var k9t=s(BU);u3r=r(k9t,"FlaxRobertaModel"),k9t.forEach(t),_3r=r(kRe," (RoBERTa model)"),kRe.forEach(t),b3r=i(ae),iE=n(ae,"LI",{});var SRe=s(iE);XFe=n(SRe,"STRONG",{});var S9t=s(XFe);v3r=r(S9t,"roformer"),S9t.forEach(t),F3r=r(SRe," \u2014 "),PU=n(SRe,"A",{href:!0});var R9t=s(PU);T3r=r(R9t,"FlaxRoFormerModel"),R9t.forEach(t),M3r=r(SRe," (RoFormer model)"),SRe.forEach(t),E3r=i(ae),dE=n(ae,"LI",{});var RRe=s(dE);zFe=n(RRe,"STRONG",{});var B9t=s(zFe);C3r=r(B9t,"t5"),B9t.forEach(t),w3r=r(RRe," \u2014 "),IU=n(RRe,"A",{href:!0});var P9t=s(IU);A3r=r(P9t,"FlaxT5Model"),P9t.forEach(t),y3r=r(RRe," (T5 model)"),RRe.forEach(t),L3r=i(ae),cE=n(ae,"LI",{});var BRe=s(cE);QFe=n(BRe,"STRONG",{});var I9t=s(QFe);x3r=r(I9t,"vision-text-dual-encoder"),I9t.forEach(t),$3r=r(BRe," \u2014 "),qU=n(BRe,"A",{href:!0});var q9t=s(qU);k3r=r(q9t,"FlaxVisionTextDualEncoderModel"),q9t.forEach(t),S3r=r(BRe," (VisionTextDualEncoder model)"),BRe.forEach(t),R3r=i(ae),fE=n(ae,"LI",{});var PRe=s(fE);WFe=n(PRe,"STRONG",{});var N9t=s(WFe);B3r=r(N9t,"vit"),N9t.forEach(t),P3r=r(PRe," \u2014 "),NU=n(PRe,"A",{href:!0});var j9t=s(NU);I3r=r(j9t,"FlaxViTModel"),j9t.forEach(t),q3r=r(PRe," (ViT model)"),PRe.forEach(t),N3r=i(ae),mE=n(ae,"LI",{});var IRe=s(mE);HFe=n(IRe,"STRONG",{});var D9t=s(HFe);j3r=r(D9t,"wav2vec2"),D9t.forEach(t),D3r=r(IRe," \u2014 "),jU=n(IRe,"A",{href:!0});var G9t=s(jU);G3r=r(G9t,"FlaxWav2Vec2Model"),G9t.forEach(t),O3r=r(IRe," (Wav2Vec2 model)"),IRe.forEach(t),V3r=i(ae),gE=n(ae,"LI",{});var qRe=s(gE);UFe=n(qRe,"STRONG",{});var O9t=s(UFe);X3r=r(O9t,"xglm"),O9t.forEach(t),z3r=r(qRe," \u2014 "),DU=n(qRe,"A",{href:!0});var V9t=s(DU);Q3r=r(V9t,"FlaxXGLMModel"),V9t.forEach(t),W3r=r(qRe," (XGLM model)"),qRe.forEach(t),H3r=i(ae),hE=n(ae,"LI",{});var NRe=s(hE);JFe=n(NRe,"STRONG",{});var X9t=s(JFe);U3r=r(X9t,"xlm-roberta"),X9t.forEach(t),J3r=r(NRe," \u2014 "),GU=n(NRe,"A",{href:!0});var z9t=s(GU);Y3r=r(z9t,"FlaxXLMRobertaModel"),z9t.forEach(t),K3r=r(NRe," (XLM-RoBERTa model)"),NRe.forEach(t),ae.forEach(t),Z3r=i(jl),T(pE.$$.fragment,jl),jl.forEach(t),Nl.forEach(t),QIe=i(f),xc=n(f,"H2",{class:!0});var ZNe=s(xc);uE=n(ZNe,"A",{id:!0,class:!0,href:!0});var Q9t=s(uE);YFe=n(Q9t,"SPAN",{});var W9t=s(YFe);T(WL.$$.fragment,W9t),W9t.forEach(t),Q9t.forEach(t),ewr=i(ZNe),KFe=n(ZNe,"SPAN",{});var H9t=s(KFe);owr=r(H9t,"FlaxAutoModelForCausalLM"),H9t.forEach(t),ZNe.forEach(t),WIe=i(f),mr=n(f,"DIV",{class:!0});var Dl=s(mr);T(HL.$$.fragment,Dl),rwr=i(Dl),$c=n(Dl,"P",{});var _Z=s($c);twr=r(_Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),OU=n(_Z,"A",{href:!0});var U9t=s(OU);awr=r(U9t,"from_pretrained()"),U9t.forEach(t),nwr=r(_Z," class method or the "),VU=n(_Z,"A",{href:!0});var J9t=s(VU);swr=r(J9t,"from_config()"),J9t.forEach(t),lwr=r(_Z,` class
method.`),_Z.forEach(t),iwr=i(Dl),UL=n(Dl,"P",{});var eje=s(UL);dwr=r(eje,"This class cannot be instantiated directly using "),ZFe=n(eje,"CODE",{});var Y9t=s(ZFe);cwr=r(Y9t,"__init__()"),Y9t.forEach(t),fwr=r(eje," (throws an error)."),eje.forEach(t),mwr=i(Dl),Dt=n(Dl,"DIV",{class:!0});var bw=s(Dt);T(JL.$$.fragment,bw),gwr=i(bw),e6e=n(bw,"P",{});var K9t=s(e6e);hwr=r(K9t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),K9t.forEach(t),pwr=i(bw),kc=n(bw,"P",{});var bZ=s(kc);uwr=r(bZ,`Note:
Loading a model from its configuration file does `),o6e=n(bZ,"STRONG",{});var Z9t=s(o6e);_wr=r(Z9t,"not"),Z9t.forEach(t),bwr=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XU=n(bZ,"A",{href:!0});var eMt=s(XU);vwr=r(eMt,"from_pretrained()"),eMt.forEach(t),Fwr=r(bZ," to load the model weights."),bZ.forEach(t),Twr=i(bw),T(_E.$$.fragment,bw),bw.forEach(t),Mwr=i(Dl),Dr=n(Dl,"DIV",{class:!0});var Gl=s(Dr);T(YL.$$.fragment,Gl),Ewr=i(Gl),r6e=n(Gl,"P",{});var oMt=s(r6e);Cwr=r(oMt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),oMt.forEach(t),wwr=i(Gl),pn=n(Gl,"P",{});var vw=s(pn);Awr=r(vw,"The model class to instantiate is selected based on the "),t6e=n(vw,"CODE",{});var rMt=s(t6e);ywr=r(rMt,"model_type"),rMt.forEach(t),Lwr=r(vw,` property of the config object (either
passed as an argument or loaded from `),a6e=n(vw,"CODE",{});var tMt=s(a6e);xwr=r(tMt,"pretrained_model_name_or_path"),tMt.forEach(t),$wr=r(vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n6e=n(vw,"CODE",{});var aMt=s(n6e);kwr=r(aMt,"pretrained_model_name_or_path"),aMt.forEach(t),Swr=r(vw,":"),vw.forEach(t),Rwr=i(Gl),ke=n(Gl,"UL",{});var Oe=s(ke);bE=n(Oe,"LI",{});var jRe=s(bE);s6e=n(jRe,"STRONG",{});var nMt=s(s6e);Bwr=r(nMt,"bart"),nMt.forEach(t),Pwr=r(jRe," \u2014 "),zU=n(jRe,"A",{href:!0});var sMt=s(zU);Iwr=r(sMt,"FlaxBartForCausalLM"),sMt.forEach(t),qwr=r(jRe," (BART model)"),jRe.forEach(t),Nwr=i(Oe),vE=n(Oe,"LI",{});var DRe=s(vE);l6e=n(DRe,"STRONG",{});var lMt=s(l6e);jwr=r(lMt,"bert"),lMt.forEach(t),Dwr=r(DRe," \u2014 "),QU=n(DRe,"A",{href:!0});var iMt=s(QU);Gwr=r(iMt,"FlaxBertForCausalLM"),iMt.forEach(t),Owr=r(DRe," (BERT model)"),DRe.forEach(t),Vwr=i(Oe),FE=n(Oe,"LI",{});var GRe=s(FE);i6e=n(GRe,"STRONG",{});var dMt=s(i6e);Xwr=r(dMt,"big_bird"),dMt.forEach(t),zwr=r(GRe," \u2014 "),WU=n(GRe,"A",{href:!0});var cMt=s(WU);Qwr=r(cMt,"FlaxBigBirdForCausalLM"),cMt.forEach(t),Wwr=r(GRe," (BigBird model)"),GRe.forEach(t),Hwr=i(Oe),TE=n(Oe,"LI",{});var ORe=s(TE);d6e=n(ORe,"STRONG",{});var fMt=s(d6e);Uwr=r(fMt,"electra"),fMt.forEach(t),Jwr=r(ORe," \u2014 "),HU=n(ORe,"A",{href:!0});var mMt=s(HU);Ywr=r(mMt,"FlaxElectraForCausalLM"),mMt.forEach(t),Kwr=r(ORe," (ELECTRA model)"),ORe.forEach(t),Zwr=i(Oe),ME=n(Oe,"LI",{});var VRe=s(ME);c6e=n(VRe,"STRONG",{});var gMt=s(c6e);eAr=r(gMt,"gpt2"),gMt.forEach(t),oAr=r(VRe," \u2014 "),UU=n(VRe,"A",{href:!0});var hMt=s(UU);rAr=r(hMt,"FlaxGPT2LMHeadModel"),hMt.forEach(t),tAr=r(VRe," (OpenAI GPT-2 model)"),VRe.forEach(t),aAr=i(Oe),EE=n(Oe,"LI",{});var XRe=s(EE);f6e=n(XRe,"STRONG",{});var pMt=s(f6e);nAr=r(pMt,"gpt_neo"),pMt.forEach(t),sAr=r(XRe," \u2014 "),JU=n(XRe,"A",{href:!0});var uMt=s(JU);lAr=r(uMt,"FlaxGPTNeoForCausalLM"),uMt.forEach(t),iAr=r(XRe," (GPT Neo model)"),XRe.forEach(t),dAr=i(Oe),CE=n(Oe,"LI",{});var zRe=s(CE);m6e=n(zRe,"STRONG",{});var _Mt=s(m6e);cAr=r(_Mt,"gptj"),_Mt.forEach(t),fAr=r(zRe," \u2014 "),YU=n(zRe,"A",{href:!0});var bMt=s(YU);mAr=r(bMt,"FlaxGPTJForCausalLM"),bMt.forEach(t),gAr=r(zRe," (GPT-J model)"),zRe.forEach(t),hAr=i(Oe),wE=n(Oe,"LI",{});var QRe=s(wE);g6e=n(QRe,"STRONG",{});var vMt=s(g6e);pAr=r(vMt,"roberta"),vMt.forEach(t),uAr=r(QRe," \u2014 "),KU=n(QRe,"A",{href:!0});var FMt=s(KU);_Ar=r(FMt,"FlaxRobertaForCausalLM"),FMt.forEach(t),bAr=r(QRe," (RoBERTa model)"),QRe.forEach(t),vAr=i(Oe),AE=n(Oe,"LI",{});var WRe=s(AE);h6e=n(WRe,"STRONG",{});var TMt=s(h6e);FAr=r(TMt,"xglm"),TMt.forEach(t),TAr=r(WRe," \u2014 "),ZU=n(WRe,"A",{href:!0});var MMt=s(ZU);MAr=r(MMt,"FlaxXGLMForCausalLM"),MMt.forEach(t),EAr=r(WRe," (XGLM model)"),WRe.forEach(t),Oe.forEach(t),CAr=i(Gl),T(yE.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),HIe=i(f),Sc=n(f,"H2",{class:!0});var oje=s(Sc);LE=n(oje,"A",{id:!0,class:!0,href:!0});var EMt=s(LE);p6e=n(EMt,"SPAN",{});var CMt=s(p6e);T(KL.$$.fragment,CMt),CMt.forEach(t),EMt.forEach(t),wAr=i(oje),u6e=n(oje,"SPAN",{});var wMt=s(u6e);AAr=r(wMt,"FlaxAutoModelForPreTraining"),wMt.forEach(t),oje.forEach(t),UIe=i(f),gr=n(f,"DIV",{class:!0});var Ol=s(gr);T(ZL.$$.fragment,Ol),yAr=i(Ol),Rc=n(Ol,"P",{});var vZ=s(Rc);LAr=r(vZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),eJ=n(vZ,"A",{href:!0});var AMt=s(eJ);xAr=r(AMt,"from_pretrained()"),AMt.forEach(t),$Ar=r(vZ," class method or the "),oJ=n(vZ,"A",{href:!0});var yMt=s(oJ);kAr=r(yMt,"from_config()"),yMt.forEach(t),SAr=r(vZ,` class
method.`),vZ.forEach(t),RAr=i(Ol),ex=n(Ol,"P",{});var rje=s(ex);BAr=r(rje,"This class cannot be instantiated directly using "),_6e=n(rje,"CODE",{});var LMt=s(_6e);PAr=r(LMt,"__init__()"),LMt.forEach(t),IAr=r(rje," (throws an error)."),rje.forEach(t),qAr=i(Ol),Gt=n(Ol,"DIV",{class:!0});var Fw=s(Gt);T(ox.$$.fragment,Fw),NAr=i(Fw),b6e=n(Fw,"P",{});var xMt=s(b6e);jAr=r(xMt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),xMt.forEach(t),DAr=i(Fw),Bc=n(Fw,"P",{});var FZ=s(Bc);GAr=r(FZ,`Note:
Loading a model from its configuration file does `),v6e=n(FZ,"STRONG",{});var $Mt=s(v6e);OAr=r($Mt,"not"),$Mt.forEach(t),VAr=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rJ=n(FZ,"A",{href:!0});var kMt=s(rJ);XAr=r(kMt,"from_pretrained()"),kMt.forEach(t),zAr=r(FZ," to load the model weights."),FZ.forEach(t),QAr=i(Fw),T(xE.$$.fragment,Fw),Fw.forEach(t),WAr=i(Ol),Gr=n(Ol,"DIV",{class:!0});var Vl=s(Gr);T(rx.$$.fragment,Vl),HAr=i(Vl),F6e=n(Vl,"P",{});var SMt=s(F6e);UAr=r(SMt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),SMt.forEach(t),JAr=i(Vl),un=n(Vl,"P",{});var Tw=s(un);YAr=r(Tw,"The model class to instantiate is selected based on the "),T6e=n(Tw,"CODE",{});var RMt=s(T6e);KAr=r(RMt,"model_type"),RMt.forEach(t),ZAr=r(Tw,` property of the config object (either
passed as an argument or loaded from `),M6e=n(Tw,"CODE",{});var BMt=s(M6e);e0r=r(BMt,"pretrained_model_name_or_path"),BMt.forEach(t),o0r=r(Tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E6e=n(Tw,"CODE",{});var PMt=s(E6e);r0r=r(PMt,"pretrained_model_name_or_path"),PMt.forEach(t),t0r=r(Tw,":"),Tw.forEach(t),a0r=i(Vl),Me=n(Vl,"UL",{});var we=s(Me);$E=n(we,"LI",{});var HRe=s($E);C6e=n(HRe,"STRONG",{});var IMt=s(C6e);n0r=r(IMt,"albert"),IMt.forEach(t),s0r=r(HRe," \u2014 "),tJ=n(HRe,"A",{href:!0});var qMt=s(tJ);l0r=r(qMt,"FlaxAlbertForPreTraining"),qMt.forEach(t),i0r=r(HRe," (ALBERT model)"),HRe.forEach(t),d0r=i(we),kE=n(we,"LI",{});var URe=s(kE);w6e=n(URe,"STRONG",{});var NMt=s(w6e);c0r=r(NMt,"bart"),NMt.forEach(t),f0r=r(URe," \u2014 "),aJ=n(URe,"A",{href:!0});var jMt=s(aJ);m0r=r(jMt,"FlaxBartForConditionalGeneration"),jMt.forEach(t),g0r=r(URe," (BART model)"),URe.forEach(t),h0r=i(we),SE=n(we,"LI",{});var JRe=s(SE);A6e=n(JRe,"STRONG",{});var DMt=s(A6e);p0r=r(DMt,"bert"),DMt.forEach(t),u0r=r(JRe," \u2014 "),nJ=n(JRe,"A",{href:!0});var GMt=s(nJ);_0r=r(GMt,"FlaxBertForPreTraining"),GMt.forEach(t),b0r=r(JRe," (BERT model)"),JRe.forEach(t),v0r=i(we),RE=n(we,"LI",{});var YRe=s(RE);y6e=n(YRe,"STRONG",{});var OMt=s(y6e);F0r=r(OMt,"big_bird"),OMt.forEach(t),T0r=r(YRe," \u2014 "),sJ=n(YRe,"A",{href:!0});var VMt=s(sJ);M0r=r(VMt,"FlaxBigBirdForPreTraining"),VMt.forEach(t),E0r=r(YRe," (BigBird model)"),YRe.forEach(t),C0r=i(we),BE=n(we,"LI",{});var KRe=s(BE);L6e=n(KRe,"STRONG",{});var XMt=s(L6e);w0r=r(XMt,"electra"),XMt.forEach(t),A0r=r(KRe," \u2014 "),lJ=n(KRe,"A",{href:!0});var zMt=s(lJ);y0r=r(zMt,"FlaxElectraForPreTraining"),zMt.forEach(t),L0r=r(KRe," (ELECTRA model)"),KRe.forEach(t),x0r=i(we),PE=n(we,"LI",{});var ZRe=s(PE);x6e=n(ZRe,"STRONG",{});var QMt=s(x6e);$0r=r(QMt,"mbart"),QMt.forEach(t),k0r=r(ZRe," \u2014 "),iJ=n(ZRe,"A",{href:!0});var WMt=s(iJ);S0r=r(WMt,"FlaxMBartForConditionalGeneration"),WMt.forEach(t),R0r=r(ZRe," (mBART model)"),ZRe.forEach(t),B0r=i(we),IE=n(we,"LI",{});var eBe=s(IE);$6e=n(eBe,"STRONG",{});var HMt=s($6e);P0r=r(HMt,"mt5"),HMt.forEach(t),I0r=r(eBe," \u2014 "),dJ=n(eBe,"A",{href:!0});var UMt=s(dJ);q0r=r(UMt,"FlaxMT5ForConditionalGeneration"),UMt.forEach(t),N0r=r(eBe," (mT5 model)"),eBe.forEach(t),j0r=i(we),qE=n(we,"LI",{});var oBe=s(qE);k6e=n(oBe,"STRONG",{});var JMt=s(k6e);D0r=r(JMt,"roberta"),JMt.forEach(t),G0r=r(oBe," \u2014 "),cJ=n(oBe,"A",{href:!0});var YMt=s(cJ);O0r=r(YMt,"FlaxRobertaForMaskedLM"),YMt.forEach(t),V0r=r(oBe," (RoBERTa model)"),oBe.forEach(t),X0r=i(we),NE=n(we,"LI",{});var rBe=s(NE);S6e=n(rBe,"STRONG",{});var KMt=s(S6e);z0r=r(KMt,"roformer"),KMt.forEach(t),Q0r=r(rBe," \u2014 "),fJ=n(rBe,"A",{href:!0});var ZMt=s(fJ);W0r=r(ZMt,"FlaxRoFormerForMaskedLM"),ZMt.forEach(t),H0r=r(rBe," (RoFormer model)"),rBe.forEach(t),U0r=i(we),jE=n(we,"LI",{});var tBe=s(jE);R6e=n(tBe,"STRONG",{});var e4t=s(R6e);J0r=r(e4t,"t5"),e4t.forEach(t),Y0r=r(tBe," \u2014 "),mJ=n(tBe,"A",{href:!0});var o4t=s(mJ);K0r=r(o4t,"FlaxT5ForConditionalGeneration"),o4t.forEach(t),Z0r=r(tBe," (T5 model)"),tBe.forEach(t),eyr=i(we),DE=n(we,"LI",{});var aBe=s(DE);B6e=n(aBe,"STRONG",{});var r4t=s(B6e);oyr=r(r4t,"wav2vec2"),r4t.forEach(t),ryr=r(aBe," \u2014 "),gJ=n(aBe,"A",{href:!0});var t4t=s(gJ);tyr=r(t4t,"FlaxWav2Vec2ForPreTraining"),t4t.forEach(t),ayr=r(aBe," (Wav2Vec2 model)"),aBe.forEach(t),nyr=i(we),GE=n(we,"LI",{});var nBe=s(GE);P6e=n(nBe,"STRONG",{});var a4t=s(P6e);syr=r(a4t,"xlm-roberta"),a4t.forEach(t),lyr=r(nBe," \u2014 "),hJ=n(nBe,"A",{href:!0});var n4t=s(hJ);iyr=r(n4t,"FlaxXLMRobertaForMaskedLM"),n4t.forEach(t),dyr=r(nBe," (XLM-RoBERTa model)"),nBe.forEach(t),we.forEach(t),cyr=i(Vl),T(OE.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),JIe=i(f),Pc=n(f,"H2",{class:!0});var tje=s(Pc);VE=n(tje,"A",{id:!0,class:!0,href:!0});var s4t=s(VE);I6e=n(s4t,"SPAN",{});var l4t=s(I6e);T(tx.$$.fragment,l4t),l4t.forEach(t),s4t.forEach(t),fyr=i(tje),q6e=n(tje,"SPAN",{});var i4t=s(q6e);myr=r(i4t,"FlaxAutoModelForMaskedLM"),i4t.forEach(t),tje.forEach(t),YIe=i(f),hr=n(f,"DIV",{class:!0});var Xl=s(hr);T(ax.$$.fragment,Xl),gyr=i(Xl),Ic=n(Xl,"P",{});var TZ=s(Ic);hyr=r(TZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),pJ=n(TZ,"A",{href:!0});var d4t=s(pJ);pyr=r(d4t,"from_pretrained()"),d4t.forEach(t),uyr=r(TZ," class method or the "),uJ=n(TZ,"A",{href:!0});var c4t=s(uJ);_yr=r(c4t,"from_config()"),c4t.forEach(t),byr=r(TZ,` class
method.`),TZ.forEach(t),vyr=i(Xl),nx=n(Xl,"P",{});var aje=s(nx);Fyr=r(aje,"This class cannot be instantiated directly using "),N6e=n(aje,"CODE",{});var f4t=s(N6e);Tyr=r(f4t,"__init__()"),f4t.forEach(t),Myr=r(aje," (throws an error)."),aje.forEach(t),Eyr=i(Xl),Ot=n(Xl,"DIV",{class:!0});var Mw=s(Ot);T(sx.$$.fragment,Mw),Cyr=i(Mw),j6e=n(Mw,"P",{});var m4t=s(j6e);wyr=r(m4t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),m4t.forEach(t),Ayr=i(Mw),qc=n(Mw,"P",{});var MZ=s(qc);yyr=r(MZ,`Note:
Loading a model from its configuration file does `),D6e=n(MZ,"STRONG",{});var g4t=s(D6e);Lyr=r(g4t,"not"),g4t.forEach(t),xyr=r(MZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_J=n(MZ,"A",{href:!0});var h4t=s(_J);$yr=r(h4t,"from_pretrained()"),h4t.forEach(t),kyr=r(MZ," to load the model weights."),MZ.forEach(t),Syr=i(Mw),T(XE.$$.fragment,Mw),Mw.forEach(t),Ryr=i(Xl),Or=n(Xl,"DIV",{class:!0});var zl=s(Or);T(lx.$$.fragment,zl),Byr=i(zl),G6e=n(zl,"P",{});var p4t=s(G6e);Pyr=r(p4t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),p4t.forEach(t),Iyr=i(zl),_n=n(zl,"P",{});var Ew=s(_n);qyr=r(Ew,"The model class to instantiate is selected based on the "),O6e=n(Ew,"CODE",{});var u4t=s(O6e);Nyr=r(u4t,"model_type"),u4t.forEach(t),jyr=r(Ew,` property of the config object (either
passed as an argument or loaded from `),V6e=n(Ew,"CODE",{});var _4t=s(V6e);Dyr=r(_4t,"pretrained_model_name_or_path"),_4t.forEach(t),Gyr=r(Ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X6e=n(Ew,"CODE",{});var b4t=s(X6e);Oyr=r(b4t,"pretrained_model_name_or_path"),b4t.forEach(t),Vyr=r(Ew,":"),Ew.forEach(t),Xyr=i(zl),Le=n(zl,"UL",{});var Be=s(Le);zE=n(Be,"LI",{});var sBe=s(zE);z6e=n(sBe,"STRONG",{});var v4t=s(z6e);zyr=r(v4t,"albert"),v4t.forEach(t),Qyr=r(sBe," \u2014 "),bJ=n(sBe,"A",{href:!0});var F4t=s(bJ);Wyr=r(F4t,"FlaxAlbertForMaskedLM"),F4t.forEach(t),Hyr=r(sBe," (ALBERT model)"),sBe.forEach(t),Uyr=i(Be),QE=n(Be,"LI",{});var lBe=s(QE);Q6e=n(lBe,"STRONG",{});var T4t=s(Q6e);Jyr=r(T4t,"bart"),T4t.forEach(t),Yyr=r(lBe," \u2014 "),vJ=n(lBe,"A",{href:!0});var M4t=s(vJ);Kyr=r(M4t,"FlaxBartForConditionalGeneration"),M4t.forEach(t),Zyr=r(lBe," (BART model)"),lBe.forEach(t),eLr=i(Be),WE=n(Be,"LI",{});var iBe=s(WE);W6e=n(iBe,"STRONG",{});var E4t=s(W6e);oLr=r(E4t,"bert"),E4t.forEach(t),rLr=r(iBe," \u2014 "),FJ=n(iBe,"A",{href:!0});var C4t=s(FJ);tLr=r(C4t,"FlaxBertForMaskedLM"),C4t.forEach(t),aLr=r(iBe," (BERT model)"),iBe.forEach(t),nLr=i(Be),HE=n(Be,"LI",{});var dBe=s(HE);H6e=n(dBe,"STRONG",{});var w4t=s(H6e);sLr=r(w4t,"big_bird"),w4t.forEach(t),lLr=r(dBe," \u2014 "),TJ=n(dBe,"A",{href:!0});var A4t=s(TJ);iLr=r(A4t,"FlaxBigBirdForMaskedLM"),A4t.forEach(t),dLr=r(dBe," (BigBird model)"),dBe.forEach(t),cLr=i(Be),UE=n(Be,"LI",{});var cBe=s(UE);U6e=n(cBe,"STRONG",{});var y4t=s(U6e);fLr=r(y4t,"distilbert"),y4t.forEach(t),mLr=r(cBe," \u2014 "),MJ=n(cBe,"A",{href:!0});var L4t=s(MJ);gLr=r(L4t,"FlaxDistilBertForMaskedLM"),L4t.forEach(t),hLr=r(cBe," (DistilBERT model)"),cBe.forEach(t),pLr=i(Be),JE=n(Be,"LI",{});var fBe=s(JE);J6e=n(fBe,"STRONG",{});var x4t=s(J6e);uLr=r(x4t,"electra"),x4t.forEach(t),_Lr=r(fBe," \u2014 "),EJ=n(fBe,"A",{href:!0});var $4t=s(EJ);bLr=r($4t,"FlaxElectraForMaskedLM"),$4t.forEach(t),vLr=r(fBe," (ELECTRA model)"),fBe.forEach(t),FLr=i(Be),YE=n(Be,"LI",{});var mBe=s(YE);Y6e=n(mBe,"STRONG",{});var k4t=s(Y6e);TLr=r(k4t,"mbart"),k4t.forEach(t),MLr=r(mBe," \u2014 "),CJ=n(mBe,"A",{href:!0});var S4t=s(CJ);ELr=r(S4t,"FlaxMBartForConditionalGeneration"),S4t.forEach(t),CLr=r(mBe," (mBART model)"),mBe.forEach(t),wLr=i(Be),KE=n(Be,"LI",{});var gBe=s(KE);K6e=n(gBe,"STRONG",{});var R4t=s(K6e);ALr=r(R4t,"roberta"),R4t.forEach(t),yLr=r(gBe," \u2014 "),wJ=n(gBe,"A",{href:!0});var B4t=s(wJ);LLr=r(B4t,"FlaxRobertaForMaskedLM"),B4t.forEach(t),xLr=r(gBe," (RoBERTa model)"),gBe.forEach(t),$Lr=i(Be),ZE=n(Be,"LI",{});var hBe=s(ZE);Z6e=n(hBe,"STRONG",{});var P4t=s(Z6e);kLr=r(P4t,"roformer"),P4t.forEach(t),SLr=r(hBe," \u2014 "),AJ=n(hBe,"A",{href:!0});var I4t=s(AJ);RLr=r(I4t,"FlaxRoFormerForMaskedLM"),I4t.forEach(t),BLr=r(hBe," (RoFormer model)"),hBe.forEach(t),PLr=i(Be),e5=n(Be,"LI",{});var pBe=s(e5);eTe=n(pBe,"STRONG",{});var q4t=s(eTe);ILr=r(q4t,"xlm-roberta"),q4t.forEach(t),qLr=r(pBe," \u2014 "),yJ=n(pBe,"A",{href:!0});var N4t=s(yJ);NLr=r(N4t,"FlaxXLMRobertaForMaskedLM"),N4t.forEach(t),jLr=r(pBe," (XLM-RoBERTa model)"),pBe.forEach(t),Be.forEach(t),DLr=i(zl),T(o5.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),KIe=i(f),Nc=n(f,"H2",{class:!0});var nje=s(Nc);r5=n(nje,"A",{id:!0,class:!0,href:!0});var j4t=s(r5);oTe=n(j4t,"SPAN",{});var D4t=s(oTe);T(ix.$$.fragment,D4t),D4t.forEach(t),j4t.forEach(t),GLr=i(nje),rTe=n(nje,"SPAN",{});var G4t=s(rTe);OLr=r(G4t,"FlaxAutoModelForSeq2SeqLM"),G4t.forEach(t),nje.forEach(t),ZIe=i(f),pr=n(f,"DIV",{class:!0});var Ql=s(pr);T(dx.$$.fragment,Ql),VLr=i(Ql),jc=n(Ql,"P",{});var EZ=s(jc);XLr=r(EZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),LJ=n(EZ,"A",{href:!0});var O4t=s(LJ);zLr=r(O4t,"from_pretrained()"),O4t.forEach(t),QLr=r(EZ," class method or the "),xJ=n(EZ,"A",{href:!0});var V4t=s(xJ);WLr=r(V4t,"from_config()"),V4t.forEach(t),HLr=r(EZ,` class
method.`),EZ.forEach(t),ULr=i(Ql),cx=n(Ql,"P",{});var sje=s(cx);JLr=r(sje,"This class cannot be instantiated directly using "),tTe=n(sje,"CODE",{});var X4t=s(tTe);YLr=r(X4t,"__init__()"),X4t.forEach(t),KLr=r(sje," (throws an error)."),sje.forEach(t),ZLr=i(Ql),Vt=n(Ql,"DIV",{class:!0});var Cw=s(Vt);T(fx.$$.fragment,Cw),exr=i(Cw),aTe=n(Cw,"P",{});var z4t=s(aTe);oxr=r(z4t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),z4t.forEach(t),rxr=i(Cw),Dc=n(Cw,"P",{});var CZ=s(Dc);txr=r(CZ,`Note:
Loading a model from its configuration file does `),nTe=n(CZ,"STRONG",{});var Q4t=s(nTe);axr=r(Q4t,"not"),Q4t.forEach(t),nxr=r(CZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$J=n(CZ,"A",{href:!0});var W4t=s($J);sxr=r(W4t,"from_pretrained()"),W4t.forEach(t),lxr=r(CZ," to load the model weights."),CZ.forEach(t),ixr=i(Cw),T(t5.$$.fragment,Cw),Cw.forEach(t),dxr=i(Ql),Vr=n(Ql,"DIV",{class:!0});var Wl=s(Vr);T(mx.$$.fragment,Wl),cxr=i(Wl),sTe=n(Wl,"P",{});var H4t=s(sTe);fxr=r(H4t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),H4t.forEach(t),mxr=i(Wl),bn=n(Wl,"P",{});var ww=s(bn);gxr=r(ww,"The model class to instantiate is selected based on the "),lTe=n(ww,"CODE",{});var U4t=s(lTe);hxr=r(U4t,"model_type"),U4t.forEach(t),pxr=r(ww,` property of the config object (either
passed as an argument or loaded from `),iTe=n(ww,"CODE",{});var J4t=s(iTe);uxr=r(J4t,"pretrained_model_name_or_path"),J4t.forEach(t),_xr=r(ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dTe=n(ww,"CODE",{});var Y4t=s(dTe);bxr=r(Y4t,"pretrained_model_name_or_path"),Y4t.forEach(t),vxr=r(ww,":"),ww.forEach(t),Fxr=i(Wl),Se=n(Wl,"UL",{});var Ve=s(Se);a5=n(Ve,"LI",{});var uBe=s(a5);cTe=n(uBe,"STRONG",{});var K4t=s(cTe);Txr=r(K4t,"bart"),K4t.forEach(t),Mxr=r(uBe," \u2014 "),kJ=n(uBe,"A",{href:!0});var Z4t=s(kJ);Exr=r(Z4t,"FlaxBartForConditionalGeneration"),Z4t.forEach(t),Cxr=r(uBe," (BART model)"),uBe.forEach(t),wxr=i(Ve),n5=n(Ve,"LI",{});var _Be=s(n5);fTe=n(_Be,"STRONG",{});var eEt=s(fTe);Axr=r(eEt,"blenderbot"),eEt.forEach(t),yxr=r(_Be," \u2014 "),SJ=n(_Be,"A",{href:!0});var oEt=s(SJ);Lxr=r(oEt,"FlaxBlenderbotForConditionalGeneration"),oEt.forEach(t),xxr=r(_Be," (Blenderbot model)"),_Be.forEach(t),$xr=i(Ve),s5=n(Ve,"LI",{});var bBe=s(s5);mTe=n(bBe,"STRONG",{});var rEt=s(mTe);kxr=r(rEt,"blenderbot-small"),rEt.forEach(t),Sxr=r(bBe," \u2014 "),RJ=n(bBe,"A",{href:!0});var tEt=s(RJ);Rxr=r(tEt,"FlaxBlenderbotSmallForConditionalGeneration"),tEt.forEach(t),Bxr=r(bBe," (BlenderbotSmall model)"),bBe.forEach(t),Pxr=i(Ve),l5=n(Ve,"LI",{});var vBe=s(l5);gTe=n(vBe,"STRONG",{});var aEt=s(gTe);Ixr=r(aEt,"encoder-decoder"),aEt.forEach(t),qxr=r(vBe," \u2014 "),BJ=n(vBe,"A",{href:!0});var nEt=s(BJ);Nxr=r(nEt,"FlaxEncoderDecoderModel"),nEt.forEach(t),jxr=r(vBe," (Encoder decoder model)"),vBe.forEach(t),Dxr=i(Ve),i5=n(Ve,"LI",{});var FBe=s(i5);hTe=n(FBe,"STRONG",{});var sEt=s(hTe);Gxr=r(sEt,"marian"),sEt.forEach(t),Oxr=r(FBe," \u2014 "),PJ=n(FBe,"A",{href:!0});var lEt=s(PJ);Vxr=r(lEt,"FlaxMarianMTModel"),lEt.forEach(t),Xxr=r(FBe," (Marian model)"),FBe.forEach(t),zxr=i(Ve),d5=n(Ve,"LI",{});var TBe=s(d5);pTe=n(TBe,"STRONG",{});var iEt=s(pTe);Qxr=r(iEt,"mbart"),iEt.forEach(t),Wxr=r(TBe," \u2014 "),IJ=n(TBe,"A",{href:!0});var dEt=s(IJ);Hxr=r(dEt,"FlaxMBartForConditionalGeneration"),dEt.forEach(t),Uxr=r(TBe," (mBART model)"),TBe.forEach(t),Jxr=i(Ve),c5=n(Ve,"LI",{});var MBe=s(c5);uTe=n(MBe,"STRONG",{});var cEt=s(uTe);Yxr=r(cEt,"mt5"),cEt.forEach(t),Kxr=r(MBe," \u2014 "),qJ=n(MBe,"A",{href:!0});var fEt=s(qJ);Zxr=r(fEt,"FlaxMT5ForConditionalGeneration"),fEt.forEach(t),e7r=r(MBe," (mT5 model)"),MBe.forEach(t),o7r=i(Ve),f5=n(Ve,"LI",{});var EBe=s(f5);_Te=n(EBe,"STRONG",{});var mEt=s(_Te);r7r=r(mEt,"pegasus"),mEt.forEach(t),t7r=r(EBe," \u2014 "),NJ=n(EBe,"A",{href:!0});var gEt=s(NJ);a7r=r(gEt,"FlaxPegasusForConditionalGeneration"),gEt.forEach(t),n7r=r(EBe," (Pegasus model)"),EBe.forEach(t),s7r=i(Ve),m5=n(Ve,"LI",{});var CBe=s(m5);bTe=n(CBe,"STRONG",{});var hEt=s(bTe);l7r=r(hEt,"t5"),hEt.forEach(t),i7r=r(CBe," \u2014 "),jJ=n(CBe,"A",{href:!0});var pEt=s(jJ);d7r=r(pEt,"FlaxT5ForConditionalGeneration"),pEt.forEach(t),c7r=r(CBe," (T5 model)"),CBe.forEach(t),Ve.forEach(t),f7r=i(Wl),T(g5.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),eqe=i(f),Gc=n(f,"H2",{class:!0});var lje=s(Gc);h5=n(lje,"A",{id:!0,class:!0,href:!0});var uEt=s(h5);vTe=n(uEt,"SPAN",{});var _Et=s(vTe);T(gx.$$.fragment,_Et),_Et.forEach(t),uEt.forEach(t),m7r=i(lje),FTe=n(lje,"SPAN",{});var bEt=s(FTe);g7r=r(bEt,"FlaxAutoModelForSequenceClassification"),bEt.forEach(t),lje.forEach(t),oqe=i(f),ur=n(f,"DIV",{class:!0});var Hl=s(ur);T(hx.$$.fragment,Hl),h7r=i(Hl),Oc=n(Hl,"P",{});var wZ=s(Oc);p7r=r(wZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),DJ=n(wZ,"A",{href:!0});var vEt=s(DJ);u7r=r(vEt,"from_pretrained()"),vEt.forEach(t),_7r=r(wZ," class method or the "),GJ=n(wZ,"A",{href:!0});var FEt=s(GJ);b7r=r(FEt,"from_config()"),FEt.forEach(t),v7r=r(wZ,` class
method.`),wZ.forEach(t),F7r=i(Hl),px=n(Hl,"P",{});var ije=s(px);T7r=r(ije,"This class cannot be instantiated directly using "),TTe=n(ije,"CODE",{});var TEt=s(TTe);M7r=r(TEt,"__init__()"),TEt.forEach(t),E7r=r(ije," (throws an error)."),ije.forEach(t),C7r=i(Hl),Xt=n(Hl,"DIV",{class:!0});var Aw=s(Xt);T(ux.$$.fragment,Aw),w7r=i(Aw),MTe=n(Aw,"P",{});var MEt=s(MTe);A7r=r(MEt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),MEt.forEach(t),y7r=i(Aw),Vc=n(Aw,"P",{});var AZ=s(Vc);L7r=r(AZ,`Note:
Loading a model from its configuration file does `),ETe=n(AZ,"STRONG",{});var EEt=s(ETe);x7r=r(EEt,"not"),EEt.forEach(t),$7r=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OJ=n(AZ,"A",{href:!0});var CEt=s(OJ);k7r=r(CEt,"from_pretrained()"),CEt.forEach(t),S7r=r(AZ," to load the model weights."),AZ.forEach(t),R7r=i(Aw),T(p5.$$.fragment,Aw),Aw.forEach(t),B7r=i(Hl),Xr=n(Hl,"DIV",{class:!0});var Ul=s(Xr);T(_x.$$.fragment,Ul),P7r=i(Ul),CTe=n(Ul,"P",{});var wEt=s(CTe);I7r=r(wEt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),wEt.forEach(t),q7r=i(Ul),vn=n(Ul,"P",{});var yw=s(vn);N7r=r(yw,"The model class to instantiate is selected based on the "),wTe=n(yw,"CODE",{});var AEt=s(wTe);j7r=r(AEt,"model_type"),AEt.forEach(t),D7r=r(yw,` property of the config object (either
passed as an argument or loaded from `),ATe=n(yw,"CODE",{});var yEt=s(ATe);G7r=r(yEt,"pretrained_model_name_or_path"),yEt.forEach(t),O7r=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yTe=n(yw,"CODE",{});var LEt=s(yTe);V7r=r(LEt,"pretrained_model_name_or_path"),LEt.forEach(t),X7r=r(yw,":"),yw.forEach(t),z7r=i(Ul),xe=n(Ul,"UL",{});var Pe=s(xe);u5=n(Pe,"LI",{});var wBe=s(u5);LTe=n(wBe,"STRONG",{});var xEt=s(LTe);Q7r=r(xEt,"albert"),xEt.forEach(t),W7r=r(wBe," \u2014 "),VJ=n(wBe,"A",{href:!0});var $Et=s(VJ);H7r=r($Et,"FlaxAlbertForSequenceClassification"),$Et.forEach(t),U7r=r(wBe," (ALBERT model)"),wBe.forEach(t),J7r=i(Pe),_5=n(Pe,"LI",{});var ABe=s(_5);xTe=n(ABe,"STRONG",{});var kEt=s(xTe);Y7r=r(kEt,"bart"),kEt.forEach(t),K7r=r(ABe," \u2014 "),XJ=n(ABe,"A",{href:!0});var SEt=s(XJ);Z7r=r(SEt,"FlaxBartForSequenceClassification"),SEt.forEach(t),e$r=r(ABe," (BART model)"),ABe.forEach(t),o$r=i(Pe),b5=n(Pe,"LI",{});var yBe=s(b5);$Te=n(yBe,"STRONG",{});var REt=s($Te);r$r=r(REt,"bert"),REt.forEach(t),t$r=r(yBe," \u2014 "),zJ=n(yBe,"A",{href:!0});var BEt=s(zJ);a$r=r(BEt,"FlaxBertForSequenceClassification"),BEt.forEach(t),n$r=r(yBe," (BERT model)"),yBe.forEach(t),s$r=i(Pe),v5=n(Pe,"LI",{});var LBe=s(v5);kTe=n(LBe,"STRONG",{});var PEt=s(kTe);l$r=r(PEt,"big_bird"),PEt.forEach(t),i$r=r(LBe," \u2014 "),QJ=n(LBe,"A",{href:!0});var IEt=s(QJ);d$r=r(IEt,"FlaxBigBirdForSequenceClassification"),IEt.forEach(t),c$r=r(LBe," (BigBird model)"),LBe.forEach(t),f$r=i(Pe),F5=n(Pe,"LI",{});var xBe=s(F5);STe=n(xBe,"STRONG",{});var qEt=s(STe);m$r=r(qEt,"distilbert"),qEt.forEach(t),g$r=r(xBe," \u2014 "),WJ=n(xBe,"A",{href:!0});var NEt=s(WJ);h$r=r(NEt,"FlaxDistilBertForSequenceClassification"),NEt.forEach(t),p$r=r(xBe," (DistilBERT model)"),xBe.forEach(t),u$r=i(Pe),T5=n(Pe,"LI",{});var $Be=s(T5);RTe=n($Be,"STRONG",{});var jEt=s(RTe);_$r=r(jEt,"electra"),jEt.forEach(t),b$r=r($Be," \u2014 "),HJ=n($Be,"A",{href:!0});var DEt=s(HJ);v$r=r(DEt,"FlaxElectraForSequenceClassification"),DEt.forEach(t),F$r=r($Be," (ELECTRA model)"),$Be.forEach(t),T$r=i(Pe),M5=n(Pe,"LI",{});var kBe=s(M5);BTe=n(kBe,"STRONG",{});var GEt=s(BTe);M$r=r(GEt,"mbart"),GEt.forEach(t),E$r=r(kBe," \u2014 "),UJ=n(kBe,"A",{href:!0});var OEt=s(UJ);C$r=r(OEt,"FlaxMBartForSequenceClassification"),OEt.forEach(t),w$r=r(kBe," (mBART model)"),kBe.forEach(t),A$r=i(Pe),E5=n(Pe,"LI",{});var SBe=s(E5);PTe=n(SBe,"STRONG",{});var VEt=s(PTe);y$r=r(VEt,"roberta"),VEt.forEach(t),L$r=r(SBe," \u2014 "),JJ=n(SBe,"A",{href:!0});var XEt=s(JJ);x$r=r(XEt,"FlaxRobertaForSequenceClassification"),XEt.forEach(t),$$r=r(SBe," (RoBERTa model)"),SBe.forEach(t),k$r=i(Pe),C5=n(Pe,"LI",{});var RBe=s(C5);ITe=n(RBe,"STRONG",{});var zEt=s(ITe);S$r=r(zEt,"roformer"),zEt.forEach(t),R$r=r(RBe," \u2014 "),YJ=n(RBe,"A",{href:!0});var QEt=s(YJ);B$r=r(QEt,"FlaxRoFormerForSequenceClassification"),QEt.forEach(t),P$r=r(RBe," (RoFormer model)"),RBe.forEach(t),I$r=i(Pe),w5=n(Pe,"LI",{});var BBe=s(w5);qTe=n(BBe,"STRONG",{});var WEt=s(qTe);q$r=r(WEt,"xlm-roberta"),WEt.forEach(t),N$r=r(BBe," \u2014 "),KJ=n(BBe,"A",{href:!0});var HEt=s(KJ);j$r=r(HEt,"FlaxXLMRobertaForSequenceClassification"),HEt.forEach(t),D$r=r(BBe," (XLM-RoBERTa model)"),BBe.forEach(t),Pe.forEach(t),G$r=i(Ul),T(A5.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),rqe=i(f),Xc=n(f,"H2",{class:!0});var dje=s(Xc);y5=n(dje,"A",{id:!0,class:!0,href:!0});var UEt=s(y5);NTe=n(UEt,"SPAN",{});var JEt=s(NTe);T(bx.$$.fragment,JEt),JEt.forEach(t),UEt.forEach(t),O$r=i(dje),jTe=n(dje,"SPAN",{});var YEt=s(jTe);V$r=r(YEt,"FlaxAutoModelForQuestionAnswering"),YEt.forEach(t),dje.forEach(t),tqe=i(f),_r=n(f,"DIV",{class:!0});var Jl=s(_r);T(vx.$$.fragment,Jl),X$r=i(Jl),zc=n(Jl,"P",{});var yZ=s(zc);z$r=r(yZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),ZJ=n(yZ,"A",{href:!0});var KEt=s(ZJ);Q$r=r(KEt,"from_pretrained()"),KEt.forEach(t),W$r=r(yZ," class method or the "),eY=n(yZ,"A",{href:!0});var ZEt=s(eY);H$r=r(ZEt,"from_config()"),ZEt.forEach(t),U$r=r(yZ,` class
method.`),yZ.forEach(t),J$r=i(Jl),Fx=n(Jl,"P",{});var cje=s(Fx);Y$r=r(cje,"This class cannot be instantiated directly using "),DTe=n(cje,"CODE",{});var e5t=s(DTe);K$r=r(e5t,"__init__()"),e5t.forEach(t),Z$r=r(cje," (throws an error)."),cje.forEach(t),ekr=i(Jl),zt=n(Jl,"DIV",{class:!0});var Lw=s(zt);T(Tx.$$.fragment,Lw),okr=i(Lw),GTe=n(Lw,"P",{});var o5t=s(GTe);rkr=r(o5t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),o5t.forEach(t),tkr=i(Lw),Qc=n(Lw,"P",{});var LZ=s(Qc);akr=r(LZ,`Note:
Loading a model from its configuration file does `),OTe=n(LZ,"STRONG",{});var r5t=s(OTe);nkr=r(r5t,"not"),r5t.forEach(t),skr=r(LZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=n(LZ,"A",{href:!0});var t5t=s(oY);lkr=r(t5t,"from_pretrained()"),t5t.forEach(t),ikr=r(LZ," to load the model weights."),LZ.forEach(t),dkr=i(Lw),T(L5.$$.fragment,Lw),Lw.forEach(t),ckr=i(Jl),zr=n(Jl,"DIV",{class:!0});var Yl=s(zr);T(Mx.$$.fragment,Yl),fkr=i(Yl),VTe=n(Yl,"P",{});var a5t=s(VTe);mkr=r(a5t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),a5t.forEach(t),gkr=i(Yl),Fn=n(Yl,"P",{});var xw=s(Fn);hkr=r(xw,"The model class to instantiate is selected based on the "),XTe=n(xw,"CODE",{});var n5t=s(XTe);pkr=r(n5t,"model_type"),n5t.forEach(t),ukr=r(xw,` property of the config object (either
passed as an argument or loaded from `),zTe=n(xw,"CODE",{});var s5t=s(zTe);_kr=r(s5t,"pretrained_model_name_or_path"),s5t.forEach(t),bkr=r(xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QTe=n(xw,"CODE",{});var l5t=s(QTe);vkr=r(l5t,"pretrained_model_name_or_path"),l5t.forEach(t),Fkr=r(xw,":"),xw.forEach(t),Tkr=i(Yl),$e=n(Yl,"UL",{});var Ie=s($e);x5=n(Ie,"LI",{});var PBe=s(x5);WTe=n(PBe,"STRONG",{});var i5t=s(WTe);Mkr=r(i5t,"albert"),i5t.forEach(t),Ekr=r(PBe," \u2014 "),rY=n(PBe,"A",{href:!0});var d5t=s(rY);Ckr=r(d5t,"FlaxAlbertForQuestionAnswering"),d5t.forEach(t),wkr=r(PBe," (ALBERT model)"),PBe.forEach(t),Akr=i(Ie),$5=n(Ie,"LI",{});var IBe=s($5);HTe=n(IBe,"STRONG",{});var c5t=s(HTe);ykr=r(c5t,"bart"),c5t.forEach(t),Lkr=r(IBe," \u2014 "),tY=n(IBe,"A",{href:!0});var f5t=s(tY);xkr=r(f5t,"FlaxBartForQuestionAnswering"),f5t.forEach(t),$kr=r(IBe," (BART model)"),IBe.forEach(t),kkr=i(Ie),k5=n(Ie,"LI",{});var qBe=s(k5);UTe=n(qBe,"STRONG",{});var m5t=s(UTe);Skr=r(m5t,"bert"),m5t.forEach(t),Rkr=r(qBe," \u2014 "),aY=n(qBe,"A",{href:!0});var g5t=s(aY);Bkr=r(g5t,"FlaxBertForQuestionAnswering"),g5t.forEach(t),Pkr=r(qBe," (BERT model)"),qBe.forEach(t),Ikr=i(Ie),S5=n(Ie,"LI",{});var NBe=s(S5);JTe=n(NBe,"STRONG",{});var h5t=s(JTe);qkr=r(h5t,"big_bird"),h5t.forEach(t),Nkr=r(NBe," \u2014 "),nY=n(NBe,"A",{href:!0});var p5t=s(nY);jkr=r(p5t,"FlaxBigBirdForQuestionAnswering"),p5t.forEach(t),Dkr=r(NBe," (BigBird model)"),NBe.forEach(t),Gkr=i(Ie),R5=n(Ie,"LI",{});var jBe=s(R5);YTe=n(jBe,"STRONG",{});var u5t=s(YTe);Okr=r(u5t,"distilbert"),u5t.forEach(t),Vkr=r(jBe," \u2014 "),sY=n(jBe,"A",{href:!0});var _5t=s(sY);Xkr=r(_5t,"FlaxDistilBertForQuestionAnswering"),_5t.forEach(t),zkr=r(jBe," (DistilBERT model)"),jBe.forEach(t),Qkr=i(Ie),B5=n(Ie,"LI",{});var DBe=s(B5);KTe=n(DBe,"STRONG",{});var b5t=s(KTe);Wkr=r(b5t,"electra"),b5t.forEach(t),Hkr=r(DBe," \u2014 "),lY=n(DBe,"A",{href:!0});var v5t=s(lY);Ukr=r(v5t,"FlaxElectraForQuestionAnswering"),v5t.forEach(t),Jkr=r(DBe," (ELECTRA model)"),DBe.forEach(t),Ykr=i(Ie),P5=n(Ie,"LI",{});var GBe=s(P5);ZTe=n(GBe,"STRONG",{});var F5t=s(ZTe);Kkr=r(F5t,"mbart"),F5t.forEach(t),Zkr=r(GBe," \u2014 "),iY=n(GBe,"A",{href:!0});var T5t=s(iY);eSr=r(T5t,"FlaxMBartForQuestionAnswering"),T5t.forEach(t),oSr=r(GBe," (mBART model)"),GBe.forEach(t),rSr=i(Ie),I5=n(Ie,"LI",{});var OBe=s(I5);e9e=n(OBe,"STRONG",{});var M5t=s(e9e);tSr=r(M5t,"roberta"),M5t.forEach(t),aSr=r(OBe," \u2014 "),dY=n(OBe,"A",{href:!0});var E5t=s(dY);nSr=r(E5t,"FlaxRobertaForQuestionAnswering"),E5t.forEach(t),sSr=r(OBe," (RoBERTa model)"),OBe.forEach(t),lSr=i(Ie),q5=n(Ie,"LI",{});var VBe=s(q5);o9e=n(VBe,"STRONG",{});var C5t=s(o9e);iSr=r(C5t,"roformer"),C5t.forEach(t),dSr=r(VBe," \u2014 "),cY=n(VBe,"A",{href:!0});var w5t=s(cY);cSr=r(w5t,"FlaxRoFormerForQuestionAnswering"),w5t.forEach(t),fSr=r(VBe," (RoFormer model)"),VBe.forEach(t),mSr=i(Ie),N5=n(Ie,"LI",{});var XBe=s(N5);r9e=n(XBe,"STRONG",{});var A5t=s(r9e);gSr=r(A5t,"xlm-roberta"),A5t.forEach(t),hSr=r(XBe," \u2014 "),fY=n(XBe,"A",{href:!0});var y5t=s(fY);pSr=r(y5t,"FlaxXLMRobertaForQuestionAnswering"),y5t.forEach(t),uSr=r(XBe," (XLM-RoBERTa model)"),XBe.forEach(t),Ie.forEach(t),_Sr=i(Yl),T(j5.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),aqe=i(f),Wc=n(f,"H2",{class:!0});var fje=s(Wc);D5=n(fje,"A",{id:!0,class:!0,href:!0});var L5t=s(D5);t9e=n(L5t,"SPAN",{});var x5t=s(t9e);T(Ex.$$.fragment,x5t),x5t.forEach(t),L5t.forEach(t),bSr=i(fje),a9e=n(fje,"SPAN",{});var $5t=s(a9e);vSr=r($5t,"FlaxAutoModelForTokenClassification"),$5t.forEach(t),fje.forEach(t),nqe=i(f),br=n(f,"DIV",{class:!0});var Kl=s(br);T(Cx.$$.fragment,Kl),FSr=i(Kl),Hc=n(Kl,"P",{});var xZ=s(Hc);TSr=r(xZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),mY=n(xZ,"A",{href:!0});var k5t=s(mY);MSr=r(k5t,"from_pretrained()"),k5t.forEach(t),ESr=r(xZ," class method or the "),gY=n(xZ,"A",{href:!0});var S5t=s(gY);CSr=r(S5t,"from_config()"),S5t.forEach(t),wSr=r(xZ,` class
method.`),xZ.forEach(t),ASr=i(Kl),wx=n(Kl,"P",{});var mje=s(wx);ySr=r(mje,"This class cannot be instantiated directly using "),n9e=n(mje,"CODE",{});var R5t=s(n9e);LSr=r(R5t,"__init__()"),R5t.forEach(t),xSr=r(mje," (throws an error)."),mje.forEach(t),$Sr=i(Kl),Qt=n(Kl,"DIV",{class:!0});var $w=s(Qt);T(Ax.$$.fragment,$w),kSr=i($w),s9e=n($w,"P",{});var B5t=s(s9e);SSr=r(B5t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),B5t.forEach(t),RSr=i($w),Uc=n($w,"P",{});var $Z=s(Uc);BSr=r($Z,`Note:
Loading a model from its configuration file does `),l9e=n($Z,"STRONG",{});var P5t=s(l9e);PSr=r(P5t,"not"),P5t.forEach(t),ISr=r($Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),hY=n($Z,"A",{href:!0});var I5t=s(hY);qSr=r(I5t,"from_pretrained()"),I5t.forEach(t),NSr=r($Z," to load the model weights."),$Z.forEach(t),jSr=i($w),T(G5.$$.fragment,$w),$w.forEach(t),DSr=i(Kl),Qr=n(Kl,"DIV",{class:!0});var Zl=s(Qr);T(yx.$$.fragment,Zl),GSr=i(Zl),i9e=n(Zl,"P",{});var q5t=s(i9e);OSr=r(q5t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),q5t.forEach(t),VSr=i(Zl),Tn=n(Zl,"P",{});var kw=s(Tn);XSr=r(kw,"The model class to instantiate is selected based on the "),d9e=n(kw,"CODE",{});var N5t=s(d9e);zSr=r(N5t,"model_type"),N5t.forEach(t),QSr=r(kw,` property of the config object (either
passed as an argument or loaded from `),c9e=n(kw,"CODE",{});var j5t=s(c9e);WSr=r(j5t,"pretrained_model_name_or_path"),j5t.forEach(t),HSr=r(kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f9e=n(kw,"CODE",{});var D5t=s(f9e);USr=r(D5t,"pretrained_model_name_or_path"),D5t.forEach(t),JSr=r(kw,":"),kw.forEach(t),YSr=i(Zl),De=n(Zl,"UL",{});var Fo=s(De);O5=n(Fo,"LI",{});var zBe=s(O5);m9e=n(zBe,"STRONG",{});var G5t=s(m9e);KSr=r(G5t,"albert"),G5t.forEach(t),ZSr=r(zBe," \u2014 "),pY=n(zBe,"A",{href:!0});var O5t=s(pY);eRr=r(O5t,"FlaxAlbertForTokenClassification"),O5t.forEach(t),oRr=r(zBe," (ALBERT model)"),zBe.forEach(t),rRr=i(Fo),V5=n(Fo,"LI",{});var QBe=s(V5);g9e=n(QBe,"STRONG",{});var V5t=s(g9e);tRr=r(V5t,"bert"),V5t.forEach(t),aRr=r(QBe," \u2014 "),uY=n(QBe,"A",{href:!0});var X5t=s(uY);nRr=r(X5t,"FlaxBertForTokenClassification"),X5t.forEach(t),sRr=r(QBe," (BERT model)"),QBe.forEach(t),lRr=i(Fo),X5=n(Fo,"LI",{});var WBe=s(X5);h9e=n(WBe,"STRONG",{});var z5t=s(h9e);iRr=r(z5t,"big_bird"),z5t.forEach(t),dRr=r(WBe," \u2014 "),_Y=n(WBe,"A",{href:!0});var Q5t=s(_Y);cRr=r(Q5t,"FlaxBigBirdForTokenClassification"),Q5t.forEach(t),fRr=r(WBe," (BigBird model)"),WBe.forEach(t),mRr=i(Fo),z5=n(Fo,"LI",{});var HBe=s(z5);p9e=n(HBe,"STRONG",{});var W5t=s(p9e);gRr=r(W5t,"distilbert"),W5t.forEach(t),hRr=r(HBe," \u2014 "),bY=n(HBe,"A",{href:!0});var H5t=s(bY);pRr=r(H5t,"FlaxDistilBertForTokenClassification"),H5t.forEach(t),uRr=r(HBe," (DistilBERT model)"),HBe.forEach(t),_Rr=i(Fo),Q5=n(Fo,"LI",{});var UBe=s(Q5);u9e=n(UBe,"STRONG",{});var U5t=s(u9e);bRr=r(U5t,"electra"),U5t.forEach(t),vRr=r(UBe," \u2014 "),vY=n(UBe,"A",{href:!0});var J5t=s(vY);FRr=r(J5t,"FlaxElectraForTokenClassification"),J5t.forEach(t),TRr=r(UBe," (ELECTRA model)"),UBe.forEach(t),MRr=i(Fo),W5=n(Fo,"LI",{});var JBe=s(W5);_9e=n(JBe,"STRONG",{});var Y5t=s(_9e);ERr=r(Y5t,"roberta"),Y5t.forEach(t),CRr=r(JBe," \u2014 "),FY=n(JBe,"A",{href:!0});var K5t=s(FY);wRr=r(K5t,"FlaxRobertaForTokenClassification"),K5t.forEach(t),ARr=r(JBe," (RoBERTa model)"),JBe.forEach(t),yRr=i(Fo),H5=n(Fo,"LI",{});var YBe=s(H5);b9e=n(YBe,"STRONG",{});var Z5t=s(b9e);LRr=r(Z5t,"roformer"),Z5t.forEach(t),xRr=r(YBe," \u2014 "),TY=n(YBe,"A",{href:!0});var eCt=s(TY);$Rr=r(eCt,"FlaxRoFormerForTokenClassification"),eCt.forEach(t),kRr=r(YBe," (RoFormer model)"),YBe.forEach(t),SRr=i(Fo),U5=n(Fo,"LI",{});var KBe=s(U5);v9e=n(KBe,"STRONG",{});var oCt=s(v9e);RRr=r(oCt,"xlm-roberta"),oCt.forEach(t),BRr=r(KBe," \u2014 "),MY=n(KBe,"A",{href:!0});var rCt=s(MY);PRr=r(rCt,"FlaxXLMRobertaForTokenClassification"),rCt.forEach(t),IRr=r(KBe," (XLM-RoBERTa model)"),KBe.forEach(t),Fo.forEach(t),qRr=i(Zl),T(J5.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),sqe=i(f),Jc=n(f,"H2",{class:!0});var gje=s(Jc);Y5=n(gje,"A",{id:!0,class:!0,href:!0});var tCt=s(Y5);F9e=n(tCt,"SPAN",{});var aCt=s(F9e);T(Lx.$$.fragment,aCt),aCt.forEach(t),tCt.forEach(t),NRr=i(gje),T9e=n(gje,"SPAN",{});var nCt=s(T9e);jRr=r(nCt,"FlaxAutoModelForMultipleChoice"),nCt.forEach(t),gje.forEach(t),lqe=i(f),vr=n(f,"DIV",{class:!0});var ei=s(vr);T(xx.$$.fragment,ei),DRr=i(ei),Yc=n(ei,"P",{});var kZ=s(Yc);GRr=r(kZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),EY=n(kZ,"A",{href:!0});var sCt=s(EY);ORr=r(sCt,"from_pretrained()"),sCt.forEach(t),VRr=r(kZ," class method or the "),CY=n(kZ,"A",{href:!0});var lCt=s(CY);XRr=r(lCt,"from_config()"),lCt.forEach(t),zRr=r(kZ,` class
method.`),kZ.forEach(t),QRr=i(ei),$x=n(ei,"P",{});var hje=s($x);WRr=r(hje,"This class cannot be instantiated directly using "),M9e=n(hje,"CODE",{});var iCt=s(M9e);HRr=r(iCt,"__init__()"),iCt.forEach(t),URr=r(hje," (throws an error)."),hje.forEach(t),JRr=i(ei),Wt=n(ei,"DIV",{class:!0});var Sw=s(Wt);T(kx.$$.fragment,Sw),YRr=i(Sw),E9e=n(Sw,"P",{});var dCt=s(E9e);KRr=r(dCt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),dCt.forEach(t),ZRr=i(Sw),Kc=n(Sw,"P",{});var SZ=s(Kc);eBr=r(SZ,`Note:
Loading a model from its configuration file does `),C9e=n(SZ,"STRONG",{});var cCt=s(C9e);oBr=r(cCt,"not"),cCt.forEach(t),rBr=r(SZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wY=n(SZ,"A",{href:!0});var fCt=s(wY);tBr=r(fCt,"from_pretrained()"),fCt.forEach(t),aBr=r(SZ," to load the model weights."),SZ.forEach(t),nBr=i(Sw),T(K5.$$.fragment,Sw),Sw.forEach(t),sBr=i(ei),Wr=n(ei,"DIV",{class:!0});var oi=s(Wr);T(Sx.$$.fragment,oi),lBr=i(oi),w9e=n(oi,"P",{});var mCt=s(w9e);iBr=r(mCt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),mCt.forEach(t),dBr=i(oi),Mn=n(oi,"P",{});var Rw=s(Mn);cBr=r(Rw,"The model class to instantiate is selected based on the "),A9e=n(Rw,"CODE",{});var gCt=s(A9e);fBr=r(gCt,"model_type"),gCt.forEach(t),mBr=r(Rw,` property of the config object (either
passed as an argument or loaded from `),y9e=n(Rw,"CODE",{});var hCt=s(y9e);gBr=r(hCt,"pretrained_model_name_or_path"),hCt.forEach(t),hBr=r(Rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L9e=n(Rw,"CODE",{});var pCt=s(L9e);pBr=r(pCt,"pretrained_model_name_or_path"),pCt.forEach(t),uBr=r(Rw,":"),Rw.forEach(t),_Br=i(oi),Ge=n(oi,"UL",{});var To=s(Ge);Z5=n(To,"LI",{});var ZBe=s(Z5);x9e=n(ZBe,"STRONG",{});var uCt=s(x9e);bBr=r(uCt,"albert"),uCt.forEach(t),vBr=r(ZBe," \u2014 "),AY=n(ZBe,"A",{href:!0});var _Ct=s(AY);FBr=r(_Ct,"FlaxAlbertForMultipleChoice"),_Ct.forEach(t),TBr=r(ZBe," (ALBERT model)"),ZBe.forEach(t),MBr=i(To),eC=n(To,"LI",{});var ePe=s(eC);$9e=n(ePe,"STRONG",{});var bCt=s($9e);EBr=r(bCt,"bert"),bCt.forEach(t),CBr=r(ePe," \u2014 "),yY=n(ePe,"A",{href:!0});var vCt=s(yY);wBr=r(vCt,"FlaxBertForMultipleChoice"),vCt.forEach(t),ABr=r(ePe," (BERT model)"),ePe.forEach(t),yBr=i(To),oC=n(To,"LI",{});var oPe=s(oC);k9e=n(oPe,"STRONG",{});var FCt=s(k9e);LBr=r(FCt,"big_bird"),FCt.forEach(t),xBr=r(oPe," \u2014 "),LY=n(oPe,"A",{href:!0});var TCt=s(LY);$Br=r(TCt,"FlaxBigBirdForMultipleChoice"),TCt.forEach(t),kBr=r(oPe," (BigBird model)"),oPe.forEach(t),SBr=i(To),rC=n(To,"LI",{});var rPe=s(rC);S9e=n(rPe,"STRONG",{});var MCt=s(S9e);RBr=r(MCt,"distilbert"),MCt.forEach(t),BBr=r(rPe," \u2014 "),xY=n(rPe,"A",{href:!0});var ECt=s(xY);PBr=r(ECt,"FlaxDistilBertForMultipleChoice"),ECt.forEach(t),IBr=r(rPe," (DistilBERT model)"),rPe.forEach(t),qBr=i(To),tC=n(To,"LI",{});var tPe=s(tC);R9e=n(tPe,"STRONG",{});var CCt=s(R9e);NBr=r(CCt,"electra"),CCt.forEach(t),jBr=r(tPe," \u2014 "),$Y=n(tPe,"A",{href:!0});var wCt=s($Y);DBr=r(wCt,"FlaxElectraForMultipleChoice"),wCt.forEach(t),GBr=r(tPe," (ELECTRA model)"),tPe.forEach(t),OBr=i(To),aC=n(To,"LI",{});var aPe=s(aC);B9e=n(aPe,"STRONG",{});var ACt=s(B9e);VBr=r(ACt,"roberta"),ACt.forEach(t),XBr=r(aPe," \u2014 "),kY=n(aPe,"A",{href:!0});var yCt=s(kY);zBr=r(yCt,"FlaxRobertaForMultipleChoice"),yCt.forEach(t),QBr=r(aPe," (RoBERTa model)"),aPe.forEach(t),WBr=i(To),nC=n(To,"LI",{});var nPe=s(nC);P9e=n(nPe,"STRONG",{});var LCt=s(P9e);HBr=r(LCt,"roformer"),LCt.forEach(t),UBr=r(nPe," \u2014 "),SY=n(nPe,"A",{href:!0});var xCt=s(SY);JBr=r(xCt,"FlaxRoFormerForMultipleChoice"),xCt.forEach(t),YBr=r(nPe," (RoFormer model)"),nPe.forEach(t),KBr=i(To),sC=n(To,"LI",{});var sPe=s(sC);I9e=n(sPe,"STRONG",{});var $Ct=s(I9e);ZBr=r($Ct,"xlm-roberta"),$Ct.forEach(t),ePr=r(sPe," \u2014 "),RY=n(sPe,"A",{href:!0});var kCt=s(RY);oPr=r(kCt,"FlaxXLMRobertaForMultipleChoice"),kCt.forEach(t),rPr=r(sPe," (XLM-RoBERTa model)"),sPe.forEach(t),To.forEach(t),tPr=i(oi),T(lC.$$.fragment,oi),oi.forEach(t),ei.forEach(t),iqe=i(f),Zc=n(f,"H2",{class:!0});var pje=s(Zc);iC=n(pje,"A",{id:!0,class:!0,href:!0});var SCt=s(iC);q9e=n(SCt,"SPAN",{});var RCt=s(q9e);T(Rx.$$.fragment,RCt),RCt.forEach(t),SCt.forEach(t),aPr=i(pje),N9e=n(pje,"SPAN",{});var BCt=s(N9e);nPr=r(BCt,"FlaxAutoModelForNextSentencePrediction"),BCt.forEach(t),pje.forEach(t),dqe=i(f),Fr=n(f,"DIV",{class:!0});var ri=s(Fr);T(Bx.$$.fragment,ri),sPr=i(ri),ef=n(ri,"P",{});var RZ=s(ef);lPr=r(RZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),BY=n(RZ,"A",{href:!0});var PCt=s(BY);iPr=r(PCt,"from_pretrained()"),PCt.forEach(t),dPr=r(RZ," class method or the "),PY=n(RZ,"A",{href:!0});var ICt=s(PY);cPr=r(ICt,"from_config()"),ICt.forEach(t),fPr=r(RZ,` class
method.`),RZ.forEach(t),mPr=i(ri),Px=n(ri,"P",{});var uje=s(Px);gPr=r(uje,"This class cannot be instantiated directly using "),j9e=n(uje,"CODE",{});var qCt=s(j9e);hPr=r(qCt,"__init__()"),qCt.forEach(t),pPr=r(uje," (throws an error)."),uje.forEach(t),uPr=i(ri),Ht=n(ri,"DIV",{class:!0});var Bw=s(Ht);T(Ix.$$.fragment,Bw),_Pr=i(Bw),D9e=n(Bw,"P",{});var NCt=s(D9e);bPr=r(NCt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),NCt.forEach(t),vPr=i(Bw),of=n(Bw,"P",{});var BZ=s(of);FPr=r(BZ,`Note:
Loading a model from its configuration file does `),G9e=n(BZ,"STRONG",{});var jCt=s(G9e);TPr=r(jCt,"not"),jCt.forEach(t),MPr=r(BZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IY=n(BZ,"A",{href:!0});var DCt=s(IY);EPr=r(DCt,"from_pretrained()"),DCt.forEach(t),CPr=r(BZ," to load the model weights."),BZ.forEach(t),wPr=i(Bw),T(dC.$$.fragment,Bw),Bw.forEach(t),APr=i(ri),Hr=n(ri,"DIV",{class:!0});var ti=s(Hr);T(qx.$$.fragment,ti),yPr=i(ti),O9e=n(ti,"P",{});var GCt=s(O9e);LPr=r(GCt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),GCt.forEach(t),xPr=i(ti),En=n(ti,"P",{});var Pw=s(En);$Pr=r(Pw,"The model class to instantiate is selected based on the "),V9e=n(Pw,"CODE",{});var OCt=s(V9e);kPr=r(OCt,"model_type"),OCt.forEach(t),SPr=r(Pw,` property of the config object (either
passed as an argument or loaded from `),X9e=n(Pw,"CODE",{});var VCt=s(X9e);RPr=r(VCt,"pretrained_model_name_or_path"),VCt.forEach(t),BPr=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z9e=n(Pw,"CODE",{});var XCt=s(z9e);PPr=r(XCt,"pretrained_model_name_or_path"),XCt.forEach(t),IPr=r(Pw,":"),Pw.forEach(t),qPr=i(ti),Q9e=n(ti,"UL",{});var zCt=s(Q9e);cC=n(zCt,"LI",{});var lPe=s(cC);W9e=n(lPe,"STRONG",{});var QCt=s(W9e);NPr=r(QCt,"bert"),QCt.forEach(t),jPr=r(lPe," \u2014 "),qY=n(lPe,"A",{href:!0});var WCt=s(qY);DPr=r(WCt,"FlaxBertForNextSentencePrediction"),WCt.forEach(t),GPr=r(lPe," (BERT model)"),lPe.forEach(t),zCt.forEach(t),OPr=i(ti),T(fC.$$.fragment,ti),ti.forEach(t),ri.forEach(t),cqe=i(f),rf=n(f,"H2",{class:!0});var _je=s(rf);mC=n(_je,"A",{id:!0,class:!0,href:!0});var HCt=s(mC);H9e=n(HCt,"SPAN",{});var UCt=s(H9e);T(Nx.$$.fragment,UCt),UCt.forEach(t),HCt.forEach(t),VPr=i(_je),U9e=n(_je,"SPAN",{});var JCt=s(U9e);XPr=r(JCt,"FlaxAutoModelForImageClassification"),JCt.forEach(t),_je.forEach(t),fqe=i(f),Tr=n(f,"DIV",{class:!0});var ai=s(Tr);T(jx.$$.fragment,ai),zPr=i(ai),tf=n(ai,"P",{});var PZ=s(tf);QPr=r(PZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),NY=n(PZ,"A",{href:!0});var YCt=s(NY);WPr=r(YCt,"from_pretrained()"),YCt.forEach(t),HPr=r(PZ," class method or the "),jY=n(PZ,"A",{href:!0});var KCt=s(jY);UPr=r(KCt,"from_config()"),KCt.forEach(t),JPr=r(PZ,` class
method.`),PZ.forEach(t),YPr=i(ai),Dx=n(ai,"P",{});var bje=s(Dx);KPr=r(bje,"This class cannot be instantiated directly using "),J9e=n(bje,"CODE",{});var ZCt=s(J9e);ZPr=r(ZCt,"__init__()"),ZCt.forEach(t),eIr=r(bje," (throws an error)."),bje.forEach(t),oIr=i(ai),Ut=n(ai,"DIV",{class:!0});var Iw=s(Ut);T(Gx.$$.fragment,Iw),rIr=i(Iw),Y9e=n(Iw,"P",{});var e3t=s(Y9e);tIr=r(e3t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),e3t.forEach(t),aIr=i(Iw),af=n(Iw,"P",{});var IZ=s(af);nIr=r(IZ,`Note:
Loading a model from its configuration file does `),K9e=n(IZ,"STRONG",{});var o3t=s(K9e);sIr=r(o3t,"not"),o3t.forEach(t),lIr=r(IZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DY=n(IZ,"A",{href:!0});var r3t=s(DY);iIr=r(r3t,"from_pretrained()"),r3t.forEach(t),dIr=r(IZ," to load the model weights."),IZ.forEach(t),cIr=i(Iw),T(gC.$$.fragment,Iw),Iw.forEach(t),fIr=i(ai),Ur=n(ai,"DIV",{class:!0});var ni=s(Ur);T(Ox.$$.fragment,ni),mIr=i(ni),Z9e=n(ni,"P",{});var t3t=s(Z9e);gIr=r(t3t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),t3t.forEach(t),hIr=i(ni),Cn=n(ni,"P",{});var qw=s(Cn);pIr=r(qw,"The model class to instantiate is selected based on the "),eMe=n(qw,"CODE",{});var a3t=s(eMe);uIr=r(a3t,"model_type"),a3t.forEach(t),_Ir=r(qw,` property of the config object (either
passed as an argument or loaded from `),oMe=n(qw,"CODE",{});var n3t=s(oMe);bIr=r(n3t,"pretrained_model_name_or_path"),n3t.forEach(t),vIr=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rMe=n(qw,"CODE",{});var s3t=s(rMe);FIr=r(s3t,"pretrained_model_name_or_path"),s3t.forEach(t),TIr=r(qw,":"),qw.forEach(t),MIr=i(ni),Vx=n(ni,"UL",{});var vje=s(Vx);hC=n(vje,"LI",{});var iPe=s(hC);tMe=n(iPe,"STRONG",{});var l3t=s(tMe);EIr=r(l3t,"beit"),l3t.forEach(t),CIr=r(iPe," \u2014 "),GY=n(iPe,"A",{href:!0});var i3t=s(GY);wIr=r(i3t,"FlaxBeitForImageClassification"),i3t.forEach(t),AIr=r(iPe," (BEiT model)"),iPe.forEach(t),yIr=i(vje),pC=n(vje,"LI",{});var dPe=s(pC);aMe=n(dPe,"STRONG",{});var d3t=s(aMe);LIr=r(d3t,"vit"),d3t.forEach(t),xIr=r(dPe," \u2014 "),OY=n(dPe,"A",{href:!0});var c3t=s(OY);$Ir=r(c3t,"FlaxViTForImageClassification"),c3t.forEach(t),kIr=r(dPe," (ViT model)"),dPe.forEach(t),vje.forEach(t),SIr=i(ni),T(uC.$$.fragment,ni),ni.forEach(t),ai.forEach(t),mqe=i(f),nf=n(f,"H2",{class:!0});var Fje=s(nf);_C=n(Fje,"A",{id:!0,class:!0,href:!0});var f3t=s(_C);nMe=n(f3t,"SPAN",{});var m3t=s(nMe);T(Xx.$$.fragment,m3t),m3t.forEach(t),f3t.forEach(t),RIr=i(Fje),sMe=n(Fje,"SPAN",{});var g3t=s(sMe);BIr=r(g3t,"FlaxAutoModelForVision2Seq"),g3t.forEach(t),Fje.forEach(t),gqe=i(f),Mr=n(f,"DIV",{class:!0});var si=s(Mr);T(zx.$$.fragment,si),PIr=i(si),sf=n(si,"P",{});var qZ=s(sf);IIr=r(qZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),VY=n(qZ,"A",{href:!0});var h3t=s(VY);qIr=r(h3t,"from_pretrained()"),h3t.forEach(t),NIr=r(qZ," class method or the "),XY=n(qZ,"A",{href:!0});var p3t=s(XY);jIr=r(p3t,"from_config()"),p3t.forEach(t),DIr=r(qZ,` class
method.`),qZ.forEach(t),GIr=i(si),Qx=n(si,"P",{});var Tje=s(Qx);OIr=r(Tje,"This class cannot be instantiated directly using "),lMe=n(Tje,"CODE",{});var u3t=s(lMe);VIr=r(u3t,"__init__()"),u3t.forEach(t),XIr=r(Tje," (throws an error)."),Tje.forEach(t),zIr=i(si),Jt=n(si,"DIV",{class:!0});var Nw=s(Jt);T(Wx.$$.fragment,Nw),QIr=i(Nw),iMe=n(Nw,"P",{});var _3t=s(iMe);WIr=r(_3t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),_3t.forEach(t),HIr=i(Nw),lf=n(Nw,"P",{});var NZ=s(lf);UIr=r(NZ,`Note:
Loading a model from its configuration file does `),dMe=n(NZ,"STRONG",{});var b3t=s(dMe);JIr=r(b3t,"not"),b3t.forEach(t),YIr=r(NZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zY=n(NZ,"A",{href:!0});var v3t=s(zY);KIr=r(v3t,"from_pretrained()"),v3t.forEach(t),ZIr=r(NZ," to load the model weights."),NZ.forEach(t),eqr=i(Nw),T(bC.$$.fragment,Nw),Nw.forEach(t),oqr=i(si),Jr=n(si,"DIV",{class:!0});var li=s(Jr);T(Hx.$$.fragment,li),rqr=i(li),cMe=n(li,"P",{});var F3t=s(cMe);tqr=r(F3t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),F3t.forEach(t),aqr=i(li),wn=n(li,"P",{});var jw=s(wn);nqr=r(jw,"The model class to instantiate is selected based on the "),fMe=n(jw,"CODE",{});var T3t=s(fMe);sqr=r(T3t,"model_type"),T3t.forEach(t),lqr=r(jw,` property of the config object (either
passed as an argument or loaded from `),mMe=n(jw,"CODE",{});var M3t=s(mMe);iqr=r(M3t,"pretrained_model_name_or_path"),M3t.forEach(t),dqr=r(jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gMe=n(jw,"CODE",{});var E3t=s(gMe);cqr=r(E3t,"pretrained_model_name_or_path"),E3t.forEach(t),fqr=r(jw,":"),jw.forEach(t),mqr=i(li),hMe=n(li,"UL",{});var C3t=s(hMe);vC=n(C3t,"LI",{});var cPe=s(vC);pMe=n(cPe,"STRONG",{});var w3t=s(pMe);gqr=r(w3t,"vision-encoder-decoder"),w3t.forEach(t),hqr=r(cPe," \u2014 "),QY=n(cPe,"A",{href:!0});var A3t=s(QY);pqr=r(A3t,"FlaxVisionEncoderDecoderModel"),A3t.forEach(t),uqr=r(cPe," (Vision Encoder decoder model)"),cPe.forEach(t),C3t.forEach(t),_qr=i(li),T(FC.$$.fragment,li),li.forEach(t),si.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify($At)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.AutoTokenizer"),c(hi,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertModel"),c(uf,"id","extending-the-auto-classes"),c(uf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uf,"href","#extending-the-auto-classes"),c(pi,"class","relative group"),c(bf,"id","transformers.AutoConfig"),c(bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bf,"href","#transformers.AutoConfig"),c(ui,"class","relative group"),c(g$,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(h$,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertConfig"),c(p$,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig"),c(u$,"href","/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitConfig"),c(_$,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertConfig"),c(b$,"href","/docs/transformers/pr_16988/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(v$,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdConfig"),c(F$,"href","/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(T$,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(M$,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(E$,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertConfig"),c(C$,"href","/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineConfig"),c(w$,"href","/docs/transformers/pr_16988/en/model_doc/clip#transformers.CLIPConfig"),c(A$,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertConfig"),c(y$,"href","/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextConfig"),c(L$,"href","/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLConfig"),c(x$,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c($$,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(k$,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(S$,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaConfig"),c(R$,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(B$,"href","/docs/transformers/pr_16988/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(P$,"href","/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTConfig"),c(I$,"href","/docs/transformers/pr_16988/en/model_doc/detr#transformers.DetrConfig"),c(q$,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertConfig"),c(N$,"href","/docs/transformers/pr_16988/en/model_doc/dpr#transformers.DPRConfig"),c(j$,"href","/docs/transformers/pr_16988/en/model_doc/dpt#transformers.DPTConfig"),c(D$,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraConfig"),c(G$,"href","/docs/transformers/pr_16988/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(O$,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertConfig"),c(V$,"href","/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetConfig"),c(X$,"href","/docs/transformers/pr_16988/en/model_doc/fsmt#transformers.FSMTConfig"),c(z$,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelConfig"),c(Q$,"href","/docs/transformers/pr_16988/en/model_doc/glpn#transformers.GLPNConfig"),c(W$,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Config"),c(H$,"href","/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(U$,"href","/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJConfig"),c(J$,"href","/docs/transformers/pr_16988/en/model_doc/hubert#transformers.HubertConfig"),c(Y$,"href","/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertConfig"),c(K$,"href","/docs/transformers/pr_16988/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Z$,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(ek,"href","/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(ok,"href","/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDConfig"),c(rk,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerConfig"),c(tk,"href","/docs/transformers/pr_16988/en/model_doc/luke#transformers.LukeConfig"),c(ak,"href","/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertConfig"),c(nk,"href","/docs/transformers/pr_16988/en/model_doc/m2m_100#transformers.M2M100Config"),c(sk,"href","/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianConfig"),c(lk,"href","/docs/transformers/pr_16988/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(ik,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartConfig"),c(dk,"href","/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(ck,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(fk,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetConfig"),c(mk,"href","/docs/transformers/pr_16988/en/model_doc/mt5#transformers.MT5Config"),c(gk,"href","/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(hk,"href","/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(pk,"href","/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusConfig"),c(uk,"href","/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverConfig"),c(_k,"href","/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartConfig"),c(bk,"href","/docs/transformers/pr_16988/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(vk,"href","/docs/transformers/pr_16988/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(Fk,"href","/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(Tk,"href","/docs/transformers/pr_16988/en/model_doc/rag#transformers.RagConfig"),c(Mk,"href","/docs/transformers/pr_16988/en/model_doc/realm#transformers.RealmConfig"),c(Ek,"href","/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerConfig"),c(Ck,"href","/docs/transformers/pr_16988/en/model_doc/regnet#transformers.RegNetConfig"),c(wk,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertConfig"),c(Ak,"href","/docs/transformers/pr_16988/en/model_doc/resnet#transformers.ResNetConfig"),c(yk,"href","/docs/transformers/pr_16988/en/model_doc/retribert#transformers.RetriBertConfig"),c(Lk,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaConfig"),c(xk,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerConfig"),c($k,"href","/docs/transformers/pr_16988/en/model_doc/segformer#transformers.SegformerConfig"),c(kk,"href","/docs/transformers/pr_16988/en/model_doc/sew#transformers.SEWConfig"),c(Sk,"href","/docs/transformers/pr_16988/en/model_doc/sew-d#transformers.SEWDConfig"),c(Rk,"href","/docs/transformers/pr_16988/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(Bk,"href","/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(Pk,"href","/docs/transformers/pr_16988/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(Ik,"href","/docs/transformers/pr_16988/en/model_doc/splinter#transformers.SplinterConfig"),c(qk,"href","/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(Nk,"href","/docs/transformers/pr_16988/en/model_doc/swin#transformers.SwinConfig"),c(jk,"href","/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5Config"),c(Dk,"href","/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasConfig"),c(Gk,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartConfig"),c(Ok,"href","/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(Vk,"href","/docs/transformers/pr_16988/en/model_doc/trocr#transformers.TrOCRConfig"),c(Xk,"href","/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(zk,"href","/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(Qk,"href","/docs/transformers/pr_16988/en/model_doc/van#transformers.VanConfig"),c(Wk,"href","/docs/transformers/pr_16988/en/model_doc/vilt#transformers.ViltConfig"),c(Hk,"href","/docs/transformers/pr_16988/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(Uk,"href","/docs/transformers/pr_16988/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(Jk,"href","/docs/transformers/pr_16988/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(Yk,"href","/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTConfig"),c(Kk,"href","/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(Zk,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(eS,"href","/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMConfig"),c(oS,"href","/docs/transformers/pr_16988/en/model_doc/xglm#transformers.XGLMConfig"),c(rS,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMConfig"),c(tS,"href","/docs/transformers/pr_16988/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(aS,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(nS,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(sS,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetConfig"),c(lS,"href","/docs/transformers/pr_16988/en/model_doc/yolos#transformers.YolosConfig"),c(iS,"href","/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ug,"id","transformers.AutoTokenizer"),c(ug,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ug,"href","#transformers.AutoTokenizer"),c(bi,"class","relative group"),c(dS,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(cS,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertTokenizer"),c(fS,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(mS,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartTokenizer"),c(gS,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartTokenizerFast"),c(hS,"href","/docs/transformers/pr_16988/en/model_doc/barthez#transformers.BarthezTokenizer"),c(pS,"href","/docs/transformers/pr_16988/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(uS,"href","/docs/transformers/pr_16988/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(_S,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertTokenizer"),c(bS,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertTokenizerFast"),c(vS,"href","/docs/transformers/pr_16988/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(FS,"href","/docs/transformers/pr_16988/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(TS,"href","/docs/transformers/pr_16988/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(MS,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(ES,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(CS,"href","/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(wS,"href","/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(AS,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(yS,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(LS,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(xS,"href","/docs/transformers/pr_16988/en/model_doc/byt5#transformers.ByT5Tokenizer"),c($S,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertTokenizer"),c(kS,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(SS,"href","/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineTokenizer"),c(RS,"href","/docs/transformers/pr_16988/en/model_doc/clip#transformers.CLIPTokenizer"),c(BS,"href","/docs/transformers/pr_16988/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(PS,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(IS,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(qS,"href","/docs/transformers/pr_16988/en/model_doc/cpm#transformers.CpmTokenizer"),c(NS,"href","/docs/transformers/pr_16988/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(jS,"href","/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(DS,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaTokenizer"),c(GS,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(OS,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaTokenizer"),c(VS,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(XS,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(zS,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(QS,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(WS,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(HS,"href","/docs/transformers/pr_16988/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(US,"href","/docs/transformers/pr_16988/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(JS,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraTokenizer"),c(YS,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(KS,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(ZS,"href","/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetTokenizer"),c(eR,"href","/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(oR,"href","/docs/transformers/pr_16988/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(rR,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelTokenizer"),c(tR,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(aR,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(nR,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(sR,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(lR,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(iR,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(dR,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(cR,"href","/docs/transformers/pr_16988/en/model_doc/herbert#transformers.HerbertTokenizer"),c(fR,"href","/docs/transformers/pr_16988/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(mR,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(gR,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaTokenizer"),c(hR,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(pR,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(uR,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(_R,"href","/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(bR,"href","/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(vR,"href","/docs/transformers/pr_16988/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(FR,"href","/docs/transformers/pr_16988/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(TR,"href","/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDTokenizer"),c(MR,"href","/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDTokenizerFast"),c(ER,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerTokenizer"),c(CR,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(wR,"href","/docs/transformers/pr_16988/en/model_doc/luke#transformers.LukeTokenizer"),c(AR,"href","/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(yR,"href","/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(LR,"href","/docs/transformers/pr_16988/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(xR,"href","/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianTokenizer"),c($R,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartTokenizer"),c(kR,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(SR,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(RR,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(BR,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertTokenizer"),c(PR,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertTokenizerFast"),c(IR,"href","/docs/transformers/pr_16988/en/model_doc/mluke#transformers.MLukeTokenizer"),c(qR,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(NR,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(jR,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(DR,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(GR,"href","/docs/transformers/pr_16988/en/model_doc/mt5#transformers.T5Tokenizer"),c(OR,"href","/docs/transformers/pr_16988/en/model_doc/mt5#transformers.T5TokenizerFast"),c(VR,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertTokenizer"),c(XR,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(zR,"href","/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(QR,"href","/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(WR,"href","/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(HR,"href","/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(UR,"href","/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(JR,"href","/docs/transformers/pr_16988/en/model_doc/phobert#transformers.PhobertTokenizer"),c(YR,"href","/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartTokenizer"),c(KR,"href","/docs/transformers/pr_16988/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(ZR,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertTokenizer"),c(eB,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertTokenizerFast"),c(oB,"href","/docs/transformers/pr_16988/en/model_doc/rag#transformers.RagTokenizer"),c(rB,"href","/docs/transformers/pr_16988/en/model_doc/realm#transformers.RealmTokenizer"),c(tB,"href","/docs/transformers/pr_16988/en/model_doc/realm#transformers.RealmTokenizerFast"),c(aB,"href","/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerTokenizer"),c(nB,"href","/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(sB,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertTokenizer"),c(lB,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(iB,"href","/docs/transformers/pr_16988/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(dB,"href","/docs/transformers/pr_16988/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(cB,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaTokenizer"),c(fB,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(mB,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(gB,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(hB,"href","/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(pB,"href","/docs/transformers/pr_16988/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(uB,"href","/docs/transformers/pr_16988/en/model_doc/splinter#transformers.SplinterTokenizer"),c(_B,"href","/docs/transformers/pr_16988/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(bB,"href","/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(vB,"href","/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(FB,"href","/docs/transformers/pr_16988/en/model_doc/mt5#transformers.T5Tokenizer"),c(TB,"href","/docs/transformers/pr_16988/en/model_doc/mt5#transformers.T5TokenizerFast"),c(MB,"href","/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasTokenizer"),c(EB,"href","/docs/transformers/pr_16988/en/model_doc/tapex#transformers.TapexTokenizer"),c(CB,"href","/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(wB,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertTokenizer"),c(AB,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertTokenizerFast"),c(yB,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(LB,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(xB,"href","/docs/transformers/pr_16988/en/model_doc/xglm#transformers.XGLMTokenizer"),c($B,"href","/docs/transformers/pr_16988/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(kB,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMTokenizer"),c(SB,"href","/docs/transformers/pr_16988/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(RB,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(BB,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(PB,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaTokenizer"),c(IB,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(qB,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(NB,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(jB,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertTokenizer"),c(DB,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hg,"id","transformers.AutoFeatureExtractor"),c(Hg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hg,"href","#transformers.AutoFeatureExtractor"),c(vi,"class","relative group"),c(GB,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(OB,"href","/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(VB,"href","/docs/transformers/pr_16988/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(XB,"href","/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(zB,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(QB,"href","/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(WB,"href","/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(HB,"href","/docs/transformers/pr_16988/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(UB,"href","/docs/transformers/pr_16988/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(JB,"href","/docs/transformers/pr_16988/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(YB,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(KB,"href","/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(ZB,"href","/docs/transformers/pr_16988/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(eP,"href","/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(oP,"href","/docs/transformers/pr_16988/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(rP,"href","/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(tP,"href","/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(aP,"href","/docs/transformers/pr_16988/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(nP,"href","/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(sP,"href","/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(lP,"href","/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(iP,"href","/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(dP,"href","/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(cP,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(fP,"href","/docs/transformers/pr_16988/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Th,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mh,"id","transformers.AutoProcessor"),c(Mh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mh,"href","#transformers.AutoProcessor"),c(Fi,"class","relative group"),c(mP,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(gP,"href","/docs/transformers/pr_16988/en/model_doc/clip#transformers.CLIPProcessor"),c(hP,"href","/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(pP,"href","/docs/transformers/pr_16988/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(uP,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(_P,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(bP,"href","/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(vP,"href","/docs/transformers/pr_16988/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(FP,"href","/docs/transformers/pr_16988/en/model_doc/trocr#transformers.TrOCRProcessor"),c(TP,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(MP,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(EP,"href","/docs/transformers/pr_16988/en/model_doc/vilt#transformers.ViltProcessor"),c(CP,"href","/docs/transformers/pr_16988/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(wP,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(AP,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dh,"id","transformers.AutoModel"),c(Dh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Dh,"href","#transformers.AutoModel"),c(Mi,"class","relative group"),c(yP,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LP,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xP,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($P,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertModel"),c(kP,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartModel"),c(SP,"href","/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitModel"),c(RP,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertModel"),c(BP,"href","/docs/transformers/pr_16988/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(PP,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdModel"),c(IP,"href","/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(qP,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(NP,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(jP,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertModel"),c(DP,"href","/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineModel"),c(GP,"href","/docs/transformers/pr_16988/en/model_doc/clip#transformers.CLIPModel"),c(OP,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertModel"),c(VP,"href","/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextModel"),c(XP,"href","/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLModel"),c(zP,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(QP,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(WP,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(HP,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaModel"),c(UP,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(JP,"href","/docs/transformers/pr_16988/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(YP,"href","/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTModel"),c(KP,"href","/docs/transformers/pr_16988/en/model_doc/detr#transformers.DetrModel"),c(ZP,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertModel"),c(eI,"href","/docs/transformers/pr_16988/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(oI,"href","/docs/transformers/pr_16988/en/model_doc/dpt#transformers.DPTModel"),c(rI,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraModel"),c(tI,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertModel"),c(aI,"href","/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetModel"),c(nI,"href","/docs/transformers/pr_16988/en/model_doc/fsmt#transformers.FSMTModel"),c(sI,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelModel"),c(lI,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelBaseModel"),c(iI,"href","/docs/transformers/pr_16988/en/model_doc/glpn#transformers.GLPNModel"),c(dI,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2Model"),c(cI,"href","/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(fI,"href","/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJModel"),c(mI,"href","/docs/transformers/pr_16988/en/model_doc/hubert#transformers.HubertModel"),c(gI,"href","/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertModel"),c(hI,"href","/docs/transformers/pr_16988/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(pI,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(uI,"href","/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(_I,"href","/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDModel"),c(bI,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerModel"),c(vI,"href","/docs/transformers/pr_16988/en/model_doc/luke#transformers.LukeModel"),c(FI,"href","/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertModel"),c(TI,"href","/docs/transformers/pr_16988/en/model_doc/m2m_100#transformers.M2M100Model"),c(MI,"href","/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianModel"),c(EI,"href","/docs/transformers/pr_16988/en/model_doc/maskformer#transformers.MaskFormerModel"),c(CI,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartModel"),c(wI,"href","/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(AI,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertModel"),c(yI,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetModel"),c(LI,"href","/docs/transformers/pr_16988/en/model_doc/mt5#transformers.MT5Model"),c(xI,"href","/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerModel"),c($I,"href","/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(kI,"href","/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusModel"),c(SI,"href","/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverModel"),c(RI,"href","/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartModel"),c(BI,"href","/docs/transformers/pr_16988/en/model_doc/poolformer#transformers.PoolFormerModel"),c(PI,"href","/docs/transformers/pr_16988/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(II,"href","/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertModel"),c(qI,"href","/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerModel"),c(NI,"href","/docs/transformers/pr_16988/en/model_doc/regnet#transformers.RegNetModel"),c(jI,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertModel"),c(DI,"href","/docs/transformers/pr_16988/en/model_doc/resnet#transformers.ResNetModel"),c(GI,"href","/docs/transformers/pr_16988/en/model_doc/retribert#transformers.RetriBertModel"),c(OI,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaModel"),c(VI,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerModel"),c(XI,"href","/docs/transformers/pr_16988/en/model_doc/segformer#transformers.SegformerModel"),c(zI,"href","/docs/transformers/pr_16988/en/model_doc/sew#transformers.SEWModel"),c(QI,"href","/docs/transformers/pr_16988/en/model_doc/sew-d#transformers.SEWDModel"),c(WI,"href","/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(HI,"href","/docs/transformers/pr_16988/en/model_doc/splinter#transformers.SplinterModel"),c(UI,"href","/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(JI,"href","/docs/transformers/pr_16988/en/model_doc/swin#transformers.SwinModel"),c(YI,"href","/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5Model"),c(KI,"href","/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasModel"),c(ZI,"href","/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(eq,"href","/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechModel"),c(oq,"href","/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(rq,"href","/docs/transformers/pr_16988/en/model_doc/van#transformers.VanModel"),c(tq,"href","/docs/transformers/pr_16988/en/model_doc/vilt#transformers.ViltModel"),c(aq,"href","/docs/transformers/pr_16988/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(nq,"href","/docs/transformers/pr_16988/en/model_doc/visual_bert#transformers.VisualBertModel"),c(sq,"href","/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTModel"),c(lq,"href","/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(iq,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(dq,"href","/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMModel"),c(cq,"href","/docs/transformers/pr_16988/en/model_doc/xglm#transformers.XGLMModel"),c(fq,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMModel"),c(mq,"href","/docs/transformers/pr_16988/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(gq,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(hq,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(pq,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetModel"),c(uq,"href","/docs/transformers/pr_16988/en/model_doc/yolos#transformers.YolosModel"),c(_q,"href","/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($u,"id","transformers.AutoModelForPreTraining"),c($u,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($u,"href","#transformers.AutoModelForPreTraining"),c(wi,"class","relative group"),c(bq,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vq,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Fq,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tq,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Mq,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Eq,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForPreTraining"),c(Cq,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(wq,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Aq,"href","/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(yq,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Lq,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(xq,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c($q,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(kq,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForPreTraining"),c(Sq,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Rq,"href","/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForPreTraining"),c(Bq,"href","/docs/transformers/pr_16988/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Pq,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(Iq,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(qq,"href","/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Nq,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(jq,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Dq,"href","/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(Gq,"href","/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(Oq,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(Vq,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Xq,"href","/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(zq,"href","/docs/transformers/pr_16988/en/model_doc/retribert#transformers.RetriBertModel"),c(Qq,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Wq,"href","/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Hq,"href","/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Uq,"href","/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Jq,"href","/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Yq,"href","/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(Kq,"href","/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(Zq,"href","/docs/transformers/pr_16988/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(eN,"href","/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(oN,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(rN,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(tN,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(aN,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(nN,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v_,"id","transformers.AutoModelForCausalLM"),c(v_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v_,"href","#transformers.AutoModelForCausalLM"),c(Li,"class","relative group"),c(sN,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lN,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iN,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dN,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForCausalLM"),c(cN,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertLMHeadModel"),c(fN,"href","/docs/transformers/pr_16988/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(mN,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(gN,"href","/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(hN,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(pN,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(uN,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(_N,"href","/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(bN,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(vN,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForCausalLM"),c(FN,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(TN,"href","/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(MN,"href","/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(EN,"href","/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianForCausalLM"),c(CN,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartForCausalLM"),c(wN,"href","/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(AN,"href","/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(yN,"href","/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(LN,"href","/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(xN,"href","/docs/transformers/pr_16988/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c($N,"href","/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(kN,"href","/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(SN,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(RN,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(BN,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(PN,"href","/docs/transformers/pr_16988/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(IN,"href","/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(qN,"href","/docs/transformers/pr_16988/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(NN,"href","/docs/transformers/pr_16988/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(jN,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(DN,"href","/docs/transformers/pr_16988/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(GN,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(ON,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(VN,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a1,"id","transformers.AutoModelForMaskedLM"),c(a1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a1,"href","#transformers.AutoModelForMaskedLM"),c(ki,"class","relative group"),c(XN,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zN,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QN,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WN,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(HN,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(UN,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForMaskedLM"),c(JN,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(YN,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(KN,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(ZN,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(ej,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(oj,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(rj,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(tj,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(aj,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(nj,"href","/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(sj,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(lj,"href","/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(ij,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(dj,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(cj,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(fj,"href","/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(mj,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(gj,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(hj,"href","/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(pj,"href","/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(uj,"href","/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(_j,"href","/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(bj,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(vj,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Fj,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(Tj,"href","/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Mj,"href","/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Ej,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Cj,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(wj,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Aj,"href","/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V1,"id","transformers.AutoModelForSeq2SeqLM"),c(V1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Bi,"class","relative group"),c(yj,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lj,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xj,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($j,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(kj,"href","/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(Sj,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(Rj,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(Bj,"href","/docs/transformers/pr_16988/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(Pj,"href","/docs/transformers/pr_16988/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Ij,"href","/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(qj,"href","/docs/transformers/pr_16988/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(Nj,"href","/docs/transformers/pr_16988/en/model_doc/marian#transformers.MarianMTModel"),c(jj,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Dj,"href","/docs/transformers/pr_16988/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(Gj,"href","/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(Oj,"href","/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(Vj,"href","/docs/transformers/pr_16988/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(Xj,"href","/docs/transformers/pr_16988/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(zj,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Qj,"href","/docs/transformers/pr_16988/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c8,"id","transformers.AutoModelForSequenceClassification"),c(c8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c8,"href","#transformers.AutoModelForSequenceClassification"),c(qi,"class","relative group"),c(Wj,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hj,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Uj,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jj,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(Yj,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForSequenceClassification"),c(Kj,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForSequenceClassification"),c(Zj,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(eD,"href","/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(oD,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(rD,"href","/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(tD,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(aD,"href","/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(nD,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(sD,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(lD,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(iD,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(dD,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(cD,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(fD,"href","/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(mD,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(gD,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(hD,"href","/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(pD,"href","/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(uD,"href","/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(_D,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(bD,"href","/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(vD,"href","/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDForSequenceClassification"),c(FD,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(TD,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(MD,"href","/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(ED,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(CD,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(wD,"href","/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(AD,"href","/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(yD,"href","/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(LD,"href","/docs/transformers/pr_16988/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(xD,"href","/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c($D,"href","/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(kD,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(SD,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(RD,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(BD,"href","/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(PD,"href","/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(ID,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForSequenceClassification"),c(qD,"href","/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(ND,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(jD,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(DD,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(GD,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(OD,"href","/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lb,"id","transformers.AutoModelForMultipleChoice"),c(lb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lb,"href","#transformers.AutoModelForMultipleChoice"),c(Di,"class","relative group"),c(VD,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XD,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zD,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QD,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(WD,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForMultipleChoice"),c(HD,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(UD,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(JD,"href","/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(YD,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(KD,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(ZD,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(eG,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(oG,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(rG,"href","/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(tG,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(aG,"href","/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(nG,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(sG,"href","/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(lG,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(iG,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(dG,"href","/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(cG,"href","/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(fG,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(mG,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(gG,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(hG,"href","/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(pG,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(uG,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(_G,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(bG,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(vG,"href","/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jb,"id","transformers.AutoModelForNextSentencePrediction"),c(jb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jb,"href","#transformers.AutoModelForNextSentencePrediction"),c(Vi,"class","relative group"),c(FG,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TG,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MG,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EG,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(CG,"href","/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(wG,"href","/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(AG,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(yG,"href","/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hb,"id","transformers.AutoModelForTokenClassification"),c(Hb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hb,"href","#transformers.AutoModelForTokenClassification"),c(Qi,"class","relative group"),c(LG,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xG,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($G,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kG,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(SG,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForTokenClassification"),c(RG,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(BG,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(PG,"href","/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineForTokenClassification"),c(IG,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(qG,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(NG,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(jG,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(DG,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(GG,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(OG,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(VG,"href","/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(XG,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(zG,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(QG,"href","/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(WG,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(HG,"href","/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(UG,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(JG,"href","/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(YG,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(KG,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(ZG,"href","/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(eO,"href","/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(oO,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(rO,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(tO,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(aO,"href","/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(nO,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(sO,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(lO,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(iO,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(dO,"href","/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k2,"id","transformers.AutoModelForQuestionAnswering"),c(k2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k2,"href","#transformers.AutoModelForQuestionAnswering"),c(Ui,"class","relative group"),c(cO,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fO,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mO,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gO,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(hO,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(pO,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(uO,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(_O,"href","/docs/transformers/pr_16988/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(bO,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(vO,"href","/docs/transformers/pr_16988/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(FO,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(TO,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(MO,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(EO,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(CO,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(wO,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(AO,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(yO,"href","/docs/transformers/pr_16988/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(LO,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(xO,"href","/docs/transformers/pr_16988/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c($O,"href","/docs/transformers/pr_16988/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(kO,"href","/docs/transformers/pr_16988/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(SO,"href","/docs/transformers/pr_16988/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(RO,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(BO,"href","/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(PO,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(IO,"href","/docs/transformers/pr_16988/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(qO,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(NO,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(jO,"href","/docs/transformers/pr_16988/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(DO,"href","/docs/transformers/pr_16988/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(GO,"href","/docs/transformers/pr_16988/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(OO,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(VO,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(XO,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(zO,"href","/docs/transformers/pr_16988/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(QO,"href","/docs/transformers/pr_16988/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(WO,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(HO,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(UO,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(JO,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(YO,"href","/docs/transformers/pr_16988/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fv,"id","transformers.AutoModelForTableQuestionAnswering"),c(Fv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Ki,"class","relative group"),c(KO,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZO,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oV,"href","/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wv,"id","transformers.AutoModelForImageClassification"),c(wv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wv,"href","#transformers.AutoModelForImageClassification"),c(od,"class","relative group"),c(rV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nV,"href","/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitForImageClassification"),c(sV,"href","/docs/transformers/pr_16988/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(lV,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(iV,"href","/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTForImageClassification"),c(dV,"href","/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(cV,"href","/docs/transformers/pr_16988/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(fV,"href","/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(mV,"href","/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(gV,"href","/docs/transformers/pr_16988/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(hV,"href","/docs/transformers/pr_16988/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(pV,"href","/docs/transformers/pr_16988/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(uV,"href","/docs/transformers/pr_16988/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(_V,"href","/docs/transformers/pr_16988/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(bV,"href","/docs/transformers/pr_16988/en/model_doc/swin#transformers.SwinForImageClassification"),c(vV,"href","/docs/transformers/pr_16988/en/model_doc/van#transformers.VanForImageClassification"),c(FV,"href","/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTForImageClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dv,"id","transformers.AutoModelForVision2Seq"),c(Dv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Dv,"href","#transformers.AutoModelForVision2Seq"),c(ad,"class","relative group"),c(TV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CV,"href","/docs/transformers/pr_16988/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zv,"id","transformers.AutoModelForAudioClassification"),c(zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zv,"href","#transformers.AutoModelForAudioClassification"),c(ld,"class","relative group"),c(wV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LV,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(xV,"href","/docs/transformers/pr_16988/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c($V,"href","/docs/transformers/pr_16988/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(kV,"href","/docs/transformers/pr_16988/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(SV,"href","/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(RV,"href","/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(BV,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(PV,"href","/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tF,"id","transformers.AutoModelForAudioFrameClassification"),c(tF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tF,"href","#transformers.AutoModelForAudioFrameClassification"),c(cd,"class","relative group"),c(IV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jV,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(DV,"href","/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(GV,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(OV,"href","/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fF,"id","transformers.AutoModelForCTC"),c(fF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fF,"href","#transformers.AutoModelForCTC"),c(gd,"class","relative group"),c(VV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zV,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QV,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(WV,"href","/docs/transformers/pr_16988/en/model_doc/hubert#transformers.HubertForCTC"),c(HV,"href","/docs/transformers/pr_16988/en/model_doc/sew#transformers.SEWForCTC"),c(UV,"href","/docs/transformers/pr_16988/en/model_doc/sew-d#transformers.SEWDForCTC"),c(JV,"href","/docs/transformers/pr_16988/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(YV,"href","/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(KV,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(ZV,"href","/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMForCTC"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(EF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(ud,"class","relative group"),c(eX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tX,"href","/docs/transformers/pr_16988/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(aX,"href","/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xF,"id","transformers.AutoModelForAudioXVector"),c(xF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xF,"href","#transformers.AutoModelForAudioXVector"),c(vd,"class","relative group"),c(nX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iX,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(dX,"href","/docs/transformers/pr_16988/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(cX,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(fX,"href","/docs/transformers/pr_16988/en/model_doc/wavlm#transformers.WavLMForXVector"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qF,"id","transformers.AutoModelForMaskedImageModeling"),c(qF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qF,"href","#transformers.AutoModelForMaskedImageModeling"),c(Md,"class","relative group"),c(mX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pX,"href","/docs/transformers/pr_16988/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(uX,"href","/docs/transformers/pr_16988/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(_X,"href","/docs/transformers/pr_16988/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XF,"id","transformers.AutoModelForObjectDetection"),c(XF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XF,"href","#transformers.AutoModelForObjectDetection"),c(Ad,"class","relative group"),c(bX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TX,"href","/docs/transformers/pr_16988/en/model_doc/detr#transformers.DetrForObjectDetection"),c(MX,"href","/docs/transformers/pr_16988/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JF,"id","transformers.AutoModelForImageSegmentation"),c(JF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JF,"href","#transformers.AutoModelForImageSegmentation"),c(xd,"class","relative group"),c(EX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AX,"href","/docs/transformers/pr_16988/en/model_doc/detr#transformers.DetrForSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o6,"id","transformers.AutoModelForSemanticSegmentation"),c(o6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o6,"href","#transformers.AutoModelForSemanticSegmentation"),c(Sd,"class","relative group"),c(yX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($X,"href","/docs/transformers/pr_16988/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(kX,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(SX,"href","/docs/transformers/pr_16988/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(RX,"href","/docs/transformers/pr_16988/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d6,"id","transformers.AutoModelForInstanceSegmentation"),c(d6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d6,"href","#transformers.AutoModelForInstanceSegmentation"),c(Pd,"class","relative group"),c(BX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qX,"href","/docs/transformers/pr_16988/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h6,"id","transformers.TFAutoModel"),c(h6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h6,"href","#transformers.TFAutoModel"),c(Nd,"class","relative group"),c(NX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DX,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GX,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertModel"),c(OX,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.TFBartModel"),c(VX,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertModel"),c(XX,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(zX,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(QX,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertModel"),c(WX,"href","/docs/transformers/pr_16988/en/model_doc/clip#transformers.TFCLIPModel"),c(HX,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.TFConvBertModel"),c(UX,"href","/docs/transformers/pr_16988/en/model_doc/convnext#transformers.TFConvNextModel"),c(JX,"href","/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.TFCTRLModel"),c(YX,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(KX,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.TFDebertaModel"),c(ZX,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(ez,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(oz,"href","/docs/transformers/pr_16988/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(rz,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraModel"),c(tz,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(az,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelModel"),c(nz,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(sz,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.TFGPT2Model"),c(lz,"href","/docs/transformers/pr_16988/en/model_doc/gptj#transformers.TFGPTJModel"),c(iz,"href","/docs/transformers/pr_16988/en/model_doc/hubert#transformers.TFHubertModel"),c(dz,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(cz,"href","/docs/transformers/pr_16988/en/model_doc/led#transformers.TFLEDModel"),c(fz,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.TFLongformerModel"),c(mz,"href","/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.TFLxmertModel"),c(gz,"href","/docs/transformers/pr_16988/en/model_doc/marian#transformers.TFMarianModel"),c(hz,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.TFMBartModel"),c(pz,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(uz,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetModel"),c(_z,"href","/docs/transformers/pr_16988/en/model_doc/mt5#transformers.TFMT5Model"),c(bz,"href","/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(vz,"href","/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.TFPegasusModel"),c(Fz,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertModel"),c(Tz,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaModel"),c(Mz,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerModel"),c(Ez,"href","/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(Cz,"href","/docs/transformers/pr_16988/en/model_doc/swin#transformers.TFSwinModel"),c(wz,"href","/docs/transformers/pr_16988/en/model_doc/t5#transformers.TFT5Model"),c(Az,"href","/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TFTapasModel"),c(yz,"href","/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(Lz,"href","/docs/transformers/pr_16988/en/model_doc/vit#transformers.TFViTModel"),c(xz,"href","/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c($z,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(kz,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMModel"),c(Sz,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(Rz,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iT,"id","transformers.TFAutoModelForPreTraining"),c(iT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iT,"href","#transformers.TFAutoModelForPreTraining"),c(Gd,"class","relative group"),c(Bz,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pz,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Iz,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qz,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(Nz,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(jz,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForPreTraining"),c(Dz,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(Gz,"href","/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Oz,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(Vz,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(Xz,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(zz,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(Qz,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(Wz,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(Hz,"href","/docs/transformers/pr_16988/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(Uz,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(Jz,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(Yz,"href","/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(Kz,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(Zz,"href","/docs/transformers/pr_16988/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(eQ,"href","/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(oQ,"href","/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(rQ,"href","/docs/transformers/pr_16988/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(tQ,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(aQ,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(nQ,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BT,"id","transformers.TFAutoModelForCausalLM"),c(BT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BT,"href","#transformers.TFAutoModelForCausalLM"),c(Xd,"class","relative group"),c(sQ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lQ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iQ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dQ,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(cQ,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(fQ,"href","/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(mQ,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(gQ,"href","/docs/transformers/pr_16988/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(hQ,"href","/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(pQ,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(uQ,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(_Q,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(bQ,"href","/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(vQ,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(FQ,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UT,"id","transformers.TFAutoModelForImageClassification"),c(UT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UT,"href","#transformers.TFAutoModelForImageClassification"),c(Wd,"class","relative group"),c(TQ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MQ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EQ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CQ,"href","/docs/transformers/pr_16988/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(wQ,"href","/docs/transformers/pr_16988/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(AQ,"href","/docs/transformers/pr_16988/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(yQ,"href","/docs/transformers/pr_16988/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r9,"id","transformers.TFAutoModelForMaskedLM"),c(r9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r9,"href","#transformers.TFAutoModelForMaskedLM"),c(Jd,"class","relative group"),c(LQ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xQ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($Q,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kQ,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(SQ,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(RQ,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(BQ,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(PQ,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(IQ,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(qQ,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(NQ,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(jQ,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(DQ,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(GQ,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(OQ,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(VQ,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(XQ,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(zQ,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(QQ,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(WQ,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(HQ,"href","/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(UQ,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(JQ,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w9,"id","transformers.TFAutoModelForSeq2SeqLM"),c(w9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w9,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Zd,"class","relative group"),c(YQ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KQ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZQ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eW,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(oW,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(rW,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(tW,"href","/docs/transformers/pr_16988/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(aW,"href","/docs/transformers/pr_16988/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(nW,"href","/docs/transformers/pr_16988/en/model_doc/marian#transformers.TFMarianMTModel"),c(sW,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(lW,"href","/docs/transformers/pr_16988/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(iW,"href","/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(dW,"href","/docs/transformers/pr_16988/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N9,"id","transformers.TFAutoModelForSequenceClassification"),c(N9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N9,"href","#transformers.TFAutoModelForSequenceClassification"),c(rc,"class","relative group"),c(cW,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fW,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mW,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gW,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(hW,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(pW,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(uW,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(_W,"href","/docs/transformers/pr_16988/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(bW,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(vW,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(FW,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(TW,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(MW,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(EW,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(CW,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(wW,"href","/docs/transformers/pr_16988/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(AW,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(yW,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(LW,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(xW,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c($W,"href","/docs/transformers/pr_16988/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(kW,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(SW,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(RW,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(BW,"href","/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(PW,"href","/docs/transformers/pr_16988/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(IW,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(qW,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(NW,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gM,"id","transformers.TFAutoModelForMultipleChoice"),c(gM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gM,"href","#transformers.TFAutoModelForMultipleChoice"),c(nc,"class","relative group"),c(jW,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DW,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GW,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OW,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(VW,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(XW,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(zW,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(QW,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(WW,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(HW,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(UW,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(JW,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(YW,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(KW,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(ZW,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(eH,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(oH,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(rH,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(tH,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(aH,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RM,"id","transformers.TFAutoModelForNextSentencePrediction"),c(RM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RM,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(ic,"class","relative group"),c(nH,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sH,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lH,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iH,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(dH,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NM,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(NM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(fc,"class","relative group"),c(cH,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fH,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mH,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gH,"href","/docs/transformers/pr_16988/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OM,"id","transformers.TFAutoModelForTokenClassification"),c(OM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OM,"href","#transformers.TFAutoModelForTokenClassification"),c(hc,"class","relative group"),c(hH,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pH,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uH,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_H,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(bH,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(vH,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(FH,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(TH,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(MH,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(EH,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(CH,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(wH,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(AH,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(yH,"href","/docs/transformers/pr_16988/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(LH,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(xH,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c($H,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(kH,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(SH,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(RH,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(BH,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(PH,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(IH,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f4,"id","transformers.TFAutoModelForQuestionAnswering"),c(f4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(_c,"class","relative group"),c(qH,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NH,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jH,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DH,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(GH,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(OH,"href","/docs/transformers/pr_16988/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(VH,"href","/docs/transformers/pr_16988/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(XH,"href","/docs/transformers/pr_16988/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(zH,"href","/docs/transformers/pr_16988/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(QH,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(WH,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(HH,"href","/docs/transformers/pr_16988/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(UH,"href","/docs/transformers/pr_16988/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(JH,"href","/docs/transformers/pr_16988/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(YH,"href","/docs/transformers/pr_16988/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(KH,"href","/docs/transformers/pr_16988/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(ZH,"href","/docs/transformers/pr_16988/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(eU,"href","/docs/transformers/pr_16988/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(oU,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(rU,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(tU,"href","/docs/transformers/pr_16988/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(aU,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(nU,"href","/docs/transformers/pr_16988/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B4,"id","transformers.TFAutoModelForVision2Seq"),c(B4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B4,"href","#transformers.TFAutoModelForVision2Seq"),c(Fc,"class","relative group"),c(sU,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lU,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iU,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dU,"href","/docs/transformers/pr_16988/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N4,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(N4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N4,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ec,"class","relative group"),c(cU,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fU,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mU,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gU,"href","/docs/transformers/pr_16988/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O4,"id","transformers.FlaxAutoModel"),c(O4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O4,"href","#transformers.FlaxAutoModel"),c(Ac,"class","relative group"),c(hU,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pU,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uU,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_U,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertModel"),c(bU,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartModel"),c(vU,"href","/docs/transformers/pr_16988/en/model_doc/beit#transformers.FlaxBeitModel"),c(FU,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertModel"),c(TU,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(MU,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(EU,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(CU,"href","/docs/transformers/pr_16988/en/model_doc/clip#transformers.FlaxCLIPModel"),c(wU,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(AU,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraModel"),c(yU,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(LU,"href","/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(xU,"href","/docs/transformers/pr_16988/en/model_doc/gptj#transformers.FlaxGPTJModel"),c($U,"href","/docs/transformers/pr_16988/en/model_doc/marian#transformers.FlaxMarianModel"),c(kU,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.FlaxMBartModel"),c(SU,"href","/docs/transformers/pr_16988/en/model_doc/mt5#transformers.FlaxMT5Model"),c(RU,"href","/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(BU,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(PU,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(IU,"href","/docs/transformers/pr_16988/en/model_doc/t5#transformers.FlaxT5Model"),c(qU,"href","/docs/transformers/pr_16988/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(NU,"href","/docs/transformers/pr_16988/en/model_doc/vit#transformers.FlaxViTModel"),c(jU,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(DU,"href","/docs/transformers/pr_16988/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(GU,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uE,"id","transformers.FlaxAutoModelForCausalLM"),c(uE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uE,"href","#transformers.FlaxAutoModelForCausalLM"),c(xc,"class","relative group"),c(OU,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VU,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XU,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zU,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(QU,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(WU,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(HU,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(UU,"href","/docs/transformers/pr_16988/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(JU,"href","/docs/transformers/pr_16988/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(YU,"href","/docs/transformers/pr_16988/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(KU,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(ZU,"href","/docs/transformers/pr_16988/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LE,"id","transformers.FlaxAutoModelForPreTraining"),c(LE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LE,"href","#transformers.FlaxAutoModelForPreTraining"),c(Sc,"class","relative group"),c(eJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tJ,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(aJ,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(nJ,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(sJ,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(lJ,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(iJ,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(dJ,"href","/docs/transformers/pr_16988/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(cJ,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(fJ,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(mJ,"href","/docs/transformers/pr_16988/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(gJ,"href","/docs/transformers/pr_16988/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(hJ,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VE,"id","transformers.FlaxAutoModelForMaskedLM"),c(VE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VE,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Pc,"class","relative group"),c(pJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_J,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bJ,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(vJ,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(FJ,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(TJ,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(MJ,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(EJ,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(CJ,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(wJ,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(AJ,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(yJ,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(r5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Nc,"class","relative group"),c(LJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($J,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kJ,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(SJ,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(RJ,"href","/docs/transformers/pr_16988/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(BJ,"href","/docs/transformers/pr_16988/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(PJ,"href","/docs/transformers/pr_16988/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(IJ,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(qJ,"href","/docs/transformers/pr_16988/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(NJ,"href","/docs/transformers/pr_16988/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(jJ,"href","/docs/transformers/pr_16988/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(h5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Gc,"class","relative group"),c(DJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VJ,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(XJ,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(zJ,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(QJ,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(WJ,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(HJ,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(UJ,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(JJ,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(YJ,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(KJ,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(y5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Xc,"class","relative group"),c(ZJ,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rY,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(tY,"href","/docs/transformers/pr_16988/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(aY,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(nY,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(sY,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(lY,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(iY,"href","/docs/transformers/pr_16988/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(dY,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(cY,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(fY,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D5,"id","transformers.FlaxAutoModelForTokenClassification"),c(D5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D5,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Wc,"class","relative group"),c(mY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pY,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(uY,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(_Y,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(bY,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(vY,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(FY,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(TY,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(MY,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y5,"id","transformers.FlaxAutoModelForMultipleChoice"),c(Y5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y5,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Jc,"class","relative group"),c(EY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AY,"href","/docs/transformers/pr_16988/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(yY,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(LY,"href","/docs/transformers/pr_16988/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(xY,"href","/docs/transformers/pr_16988/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c($Y,"href","/docs/transformers/pr_16988/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(kY,"href","/docs/transformers/pr_16988/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(SY,"href","/docs/transformers/pr_16988/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(RY,"href","/docs/transformers/pr_16988/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iC,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(iC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iC,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Zc,"class","relative group"),c(BY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qY,"href","/docs/transformers/pr_16988/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mC,"id","transformers.FlaxAutoModelForImageClassification"),c(mC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mC,"href","#transformers.FlaxAutoModelForImageClassification"),c(rf,"class","relative group"),c(NY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GY,"href","/docs/transformers/pr_16988/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(OY,"href","/docs/transformers/pr_16988/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_C,"id","transformers.FlaxAutoModelForVision2Seq"),c(_C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_C,"href","#transformers.FlaxAutoModelForVision2Seq"),c(nf,"class","relative group"),c(VY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zY,"href","/docs/transformers/pr_16988/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QY,"href","/docs/transformers/pr_16988/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,ii),b(f,mf,_),b(f,et,_),e(et,di),e(et,ci),e(ci,Dw),e(et,gf),b(f,qe,_),b(f,Xe,_),e(Xe,fi),e(Xe,yn),e(yn,Gw),e(Xe,Ln),e(Xe,xn),e(xn,Ow),e(Xe,mi),e(Xe,$n),e($n,Vw),e(Xe,gi),b(f,hf,_),M(Ma,f,_),b(f,ze,_),b(f,Ae,_),e(Ae,l$),e(Ae,hi),e(hi,i$),e(Ae,d$),b(f,Eo,_),b(f,Ea,_),e(Ea,c$),e(Ea,pf),e(pf,f$),e(Ea,Mje),b(f,fPe,_),b(f,pi,_),e(pi,uf),e(uf,jZ),M(Xw,jZ,null),e(pi,Eje),e(pi,DZ),e(DZ,Cje),b(f,mPe,_),b(f,kn,_),e(kn,wje),e(kn,GZ),e(GZ,Aje),e(kn,yje),e(kn,OZ),e(OZ,Lje),e(kn,xje),b(f,gPe,_),M(zw,f,_),b(f,hPe,_),b(f,m$,_),e(m$,$je),b(f,pPe,_),M(_f,f,_),b(f,uPe,_),b(f,ui,_),e(ui,bf),e(bf,VZ),M(Qw,VZ,null),e(ui,kje),e(ui,XZ),e(XZ,Sje),b(f,_Pe,_),b(f,Co,_),M(Ww,Co,null),e(Co,Rje),e(Co,Hw),e(Hw,Bje),e(Hw,g$),e(g$,Pje),e(Hw,Ije),e(Co,qje),e(Co,Uw),e(Uw,Nje),e(Uw,zZ),e(zZ,jje),e(Uw,Dje),e(Co,Gje),e(Co,Er),M(Jw,Er,null),e(Er,Oje),e(Er,QZ),e(QZ,Vje),e(Er,Xje),e(Er,_i),e(_i,zje),e(_i,WZ),e(WZ,Qje),e(_i,Wje),e(_i,HZ),e(HZ,Hje),e(_i,Uje),e(Er,Jje),e(Er,y),e(y,vf),e(vf,UZ),e(UZ,Yje),e(vf,Kje),e(vf,h$),e(h$,Zje),e(vf,eDe),e(y,oDe),e(y,Ff),e(Ff,JZ),e(JZ,rDe),e(Ff,tDe),e(Ff,p$),e(p$,aDe),e(Ff,nDe),e(y,sDe),e(y,Tf),e(Tf,YZ),e(YZ,lDe),e(Tf,iDe),e(Tf,u$),e(u$,dDe),e(Tf,cDe),e(y,fDe),e(y,Mf),e(Mf,KZ),e(KZ,mDe),e(Mf,gDe),e(Mf,_$),e(_$,hDe),e(Mf,pDe),e(y,uDe),e(y,Ef),e(Ef,ZZ),e(ZZ,_De),e(Ef,bDe),e(Ef,b$),e(b$,vDe),e(Ef,FDe),e(y,TDe),e(y,Cf),e(Cf,eee),e(eee,MDe),e(Cf,EDe),e(Cf,v$),e(v$,CDe),e(Cf,wDe),e(y,ADe),e(y,wf),e(wf,oee),e(oee,yDe),e(wf,LDe),e(wf,F$),e(F$,xDe),e(wf,$De),e(y,kDe),e(y,Af),e(Af,ree),e(ree,SDe),e(Af,RDe),e(Af,T$),e(T$,BDe),e(Af,PDe),e(y,IDe),e(y,yf),e(yf,tee),e(tee,qDe),e(yf,NDe),e(yf,M$),e(M$,jDe),e(yf,DDe),e(y,GDe),e(y,Lf),e(Lf,aee),e(aee,ODe),e(Lf,VDe),e(Lf,E$),e(E$,XDe),e(Lf,zDe),e(y,QDe),e(y,xf),e(xf,nee),e(nee,WDe),e(xf,HDe),e(xf,C$),e(C$,UDe),e(xf,JDe),e(y,YDe),e(y,$f),e($f,see),e(see,KDe),e($f,ZDe),e($f,w$),e(w$,eGe),e($f,oGe),e(y,rGe),e(y,kf),e(kf,lee),e(lee,tGe),e(kf,aGe),e(kf,A$),e(A$,nGe),e(kf,sGe),e(y,lGe),e(y,Sf),e(Sf,iee),e(iee,iGe),e(Sf,dGe),e(Sf,y$),e(y$,cGe),e(Sf,fGe),e(y,mGe),e(y,Rf),e(Rf,dee),e(dee,gGe),e(Rf,hGe),e(Rf,L$),e(L$,pGe),e(Rf,uGe),e(y,_Ge),e(y,Bf),e(Bf,cee),e(cee,bGe),e(Bf,vGe),e(Bf,x$),e(x$,FGe),e(Bf,TGe),e(y,MGe),e(y,Pf),e(Pf,fee),e(fee,EGe),e(Pf,CGe),e(Pf,$$),e($$,wGe),e(Pf,AGe),e(y,yGe),e(y,If),e(If,mee),e(mee,LGe),e(If,xGe),e(If,k$),e(k$,$Ge),e(If,kGe),e(y,SGe),e(y,qf),e(qf,gee),e(gee,RGe),e(qf,BGe),e(qf,S$),e(S$,PGe),e(qf,IGe),e(y,qGe),e(y,Nf),e(Nf,hee),e(hee,NGe),e(Nf,jGe),e(Nf,R$),e(R$,DGe),e(Nf,GGe),e(y,OGe),e(y,jf),e(jf,pee),e(pee,VGe),e(jf,XGe),e(jf,B$),e(B$,zGe),e(jf,QGe),e(y,WGe),e(y,Df),e(Df,uee),e(uee,HGe),e(Df,UGe),e(Df,P$),e(P$,JGe),e(Df,YGe),e(y,KGe),e(y,Gf),e(Gf,_ee),e(_ee,ZGe),e(Gf,eOe),e(Gf,I$),e(I$,oOe),e(Gf,rOe),e(y,tOe),e(y,Of),e(Of,bee),e(bee,aOe),e(Of,nOe),e(Of,q$),e(q$,sOe),e(Of,lOe),e(y,iOe),e(y,Vf),e(Vf,vee),e(vee,dOe),e(Vf,cOe),e(Vf,N$),e(N$,fOe),e(Vf,mOe),e(y,gOe),e(y,Xf),e(Xf,Fee),e(Fee,hOe),e(Xf,pOe),e(Xf,j$),e(j$,uOe),e(Xf,_Oe),e(y,bOe),e(y,zf),e(zf,Tee),e(Tee,vOe),e(zf,FOe),e(zf,D$),e(D$,TOe),e(zf,MOe),e(y,EOe),e(y,Qf),e(Qf,Mee),e(Mee,COe),e(Qf,wOe),e(Qf,G$),e(G$,AOe),e(Qf,yOe),e(y,LOe),e(y,Wf),e(Wf,Eee),e(Eee,xOe),e(Wf,$Oe),e(Wf,O$),e(O$,kOe),e(Wf,SOe),e(y,ROe),e(y,Hf),e(Hf,Cee),e(Cee,BOe),e(Hf,POe),e(Hf,V$),e(V$,IOe),e(Hf,qOe),e(y,NOe),e(y,Uf),e(Uf,wee),e(wee,jOe),e(Uf,DOe),e(Uf,X$),e(X$,GOe),e(Uf,OOe),e(y,VOe),e(y,Jf),e(Jf,Aee),e(Aee,XOe),e(Jf,zOe),e(Jf,z$),e(z$,QOe),e(Jf,WOe),e(y,HOe),e(y,Yf),e(Yf,yee),e(yee,UOe),e(Yf,JOe),e(Yf,Q$),e(Q$,YOe),e(Yf,KOe),e(y,ZOe),e(y,Kf),e(Kf,Lee),e(Lee,eVe),e(Kf,oVe),e(Kf,W$),e(W$,rVe),e(Kf,tVe),e(y,aVe),e(y,Zf),e(Zf,xee),e(xee,nVe),e(Zf,sVe),e(Zf,H$),e(H$,lVe),e(Zf,iVe),e(y,dVe),e(y,em),e(em,$ee),e($ee,cVe),e(em,fVe),e(em,U$),e(U$,mVe),e(em,gVe),e(y,hVe),e(y,om),e(om,kee),e(kee,pVe),e(om,uVe),e(om,J$),e(J$,_Ve),e(om,bVe),e(y,vVe),e(y,rm),e(rm,See),e(See,FVe),e(rm,TVe),e(rm,Y$),e(Y$,MVe),e(rm,EVe),e(y,CVe),e(y,tm),e(tm,Ree),e(Ree,wVe),e(tm,AVe),e(tm,K$),e(K$,yVe),e(tm,LVe),e(y,xVe),e(y,am),e(am,Bee),e(Bee,$Ve),e(am,kVe),e(am,Z$),e(Z$,SVe),e(am,RVe),e(y,BVe),e(y,nm),e(nm,Pee),e(Pee,PVe),e(nm,IVe),e(nm,ek),e(ek,qVe),e(nm,NVe),e(y,jVe),e(y,sm),e(sm,Iee),e(Iee,DVe),e(sm,GVe),e(sm,ok),e(ok,OVe),e(sm,VVe),e(y,XVe),e(y,lm),e(lm,qee),e(qee,zVe),e(lm,QVe),e(lm,rk),e(rk,WVe),e(lm,HVe),e(y,UVe),e(y,im),e(im,Nee),e(Nee,JVe),e(im,YVe),e(im,tk),e(tk,KVe),e(im,ZVe),e(y,eXe),e(y,dm),e(dm,jee),e(jee,oXe),e(dm,rXe),e(dm,ak),e(ak,tXe),e(dm,aXe),e(y,nXe),e(y,cm),e(cm,Dee),e(Dee,sXe),e(cm,lXe),e(cm,nk),e(nk,iXe),e(cm,dXe),e(y,cXe),e(y,fm),e(fm,Gee),e(Gee,fXe),e(fm,mXe),e(fm,sk),e(sk,gXe),e(fm,hXe),e(y,pXe),e(y,mm),e(mm,Oee),e(Oee,uXe),e(mm,_Xe),e(mm,lk),e(lk,bXe),e(mm,vXe),e(y,FXe),e(y,gm),e(gm,Vee),e(Vee,TXe),e(gm,MXe),e(gm,ik),e(ik,EXe),e(gm,CXe),e(y,wXe),e(y,hm),e(hm,Xee),e(Xee,AXe),e(hm,yXe),e(hm,dk),e(dk,LXe),e(hm,xXe),e(y,$Xe),e(y,pm),e(pm,zee),e(zee,kXe),e(pm,SXe),e(pm,ck),e(ck,RXe),e(pm,BXe),e(y,PXe),e(y,um),e(um,Qee),e(Qee,IXe),e(um,qXe),e(um,fk),e(fk,NXe),e(um,jXe),e(y,DXe),e(y,_m),e(_m,Wee),e(Wee,GXe),e(_m,OXe),e(_m,mk),e(mk,VXe),e(_m,XXe),e(y,zXe),e(y,bm),e(bm,Hee),e(Hee,QXe),e(bm,WXe),e(bm,gk),e(gk,HXe),e(bm,UXe),e(y,JXe),e(y,vm),e(vm,Uee),e(Uee,YXe),e(vm,KXe),e(vm,hk),e(hk,ZXe),e(vm,eze),e(y,oze),e(y,Fm),e(Fm,Jee),e(Jee,rze),e(Fm,tze),e(Fm,pk),e(pk,aze),e(Fm,nze),e(y,sze),e(y,Tm),e(Tm,Yee),e(Yee,lze),e(Tm,ize),e(Tm,uk),e(uk,dze),e(Tm,cze),e(y,fze),e(y,Mm),e(Mm,Kee),e(Kee,mze),e(Mm,gze),e(Mm,_k),e(_k,hze),e(Mm,pze),e(y,uze),e(y,Em),e(Em,Zee),e(Zee,_ze),e(Em,bze),e(Em,bk),e(bk,vze),e(Em,Fze),e(y,Tze),e(y,Cm),e(Cm,eoe),e(eoe,Mze),e(Cm,Eze),e(Cm,vk),e(vk,Cze),e(Cm,wze),e(y,Aze),e(y,wm),e(wm,ooe),e(ooe,yze),e(wm,Lze),e(wm,Fk),e(Fk,xze),e(wm,$ze),e(y,kze),e(y,Am),e(Am,roe),e(roe,Sze),e(Am,Rze),e(Am,Tk),e(Tk,Bze),e(Am,Pze),e(y,Ize),e(y,ym),e(ym,toe),e(toe,qze),e(ym,Nze),e(ym,Mk),e(Mk,jze),e(ym,Dze),e(y,Gze),e(y,Lm),e(Lm,aoe),e(aoe,Oze),e(Lm,Vze),e(Lm,Ek),e(Ek,Xze),e(Lm,zze),e(y,Qze),e(y,xm),e(xm,noe),e(noe,Wze),e(xm,Hze),e(xm,Ck),e(Ck,Uze),e(xm,Jze),e(y,Yze),e(y,$m),e($m,soe),e(soe,Kze),e($m,Zze),e($m,wk),e(wk,eQe),e($m,oQe),e(y,rQe),e(y,km),e(km,loe),e(loe,tQe),e(km,aQe),e(km,Ak),e(Ak,nQe),e(km,sQe),e(y,lQe),e(y,Sm),e(Sm,ioe),e(ioe,iQe),e(Sm,dQe),e(Sm,yk),e(yk,cQe),e(Sm,fQe),e(y,mQe),e(y,Rm),e(Rm,doe),e(doe,gQe),e(Rm,hQe),e(Rm,Lk),e(Lk,pQe),e(Rm,uQe),e(y,_Qe),e(y,Bm),e(Bm,coe),e(coe,bQe),e(Bm,vQe),e(Bm,xk),e(xk,FQe),e(Bm,TQe),e(y,MQe),e(y,Pm),e(Pm,foe),e(foe,EQe),e(Pm,CQe),e(Pm,$k),e($k,wQe),e(Pm,AQe),e(y,yQe),e(y,Im),e(Im,moe),e(moe,LQe),e(Im,xQe),e(Im,kk),e(kk,$Qe),e(Im,kQe),e(y,SQe),e(y,qm),e(qm,goe),e(goe,RQe),e(qm,BQe),e(qm,Sk),e(Sk,PQe),e(qm,IQe),e(y,qQe),e(y,Nm),e(Nm,hoe),e(hoe,NQe),e(Nm,jQe),e(Nm,Rk),e(Rk,DQe),e(Nm,GQe),e(y,OQe),e(y,jm),e(jm,poe),e(poe,VQe),e(jm,XQe),e(jm,Bk),e(Bk,zQe),e(jm,QQe),e(y,WQe),e(y,Dm),e(Dm,uoe),e(uoe,HQe),e(Dm,UQe),e(Dm,Pk),e(Pk,JQe),e(Dm,YQe),e(y,KQe),e(y,Gm),e(Gm,_oe),e(_oe,ZQe),e(Gm,eWe),e(Gm,Ik),e(Ik,oWe),e(Gm,rWe),e(y,tWe),e(y,Om),e(Om,boe),e(boe,aWe),e(Om,nWe),e(Om,qk),e(qk,sWe),e(Om,lWe),e(y,iWe),e(y,Vm),e(Vm,voe),e(voe,dWe),e(Vm,cWe),e(Vm,Nk),e(Nk,fWe),e(Vm,mWe),e(y,gWe),e(y,Xm),e(Xm,Foe),e(Foe,hWe),e(Xm,pWe),e(Xm,jk),e(jk,uWe),e(Xm,_We),e(y,bWe),e(y,zm),e(zm,Toe),e(Toe,vWe),e(zm,FWe),e(zm,Dk),e(Dk,TWe),e(zm,MWe),e(y,EWe),e(y,Qm),e(Qm,Moe),e(Moe,CWe),e(Qm,wWe),e(Qm,Gk),e(Gk,AWe),e(Qm,yWe),e(y,LWe),e(y,Wm),e(Wm,Eoe),e(Eoe,xWe),e(Wm,$We),e(Wm,Ok),e(Ok,kWe),e(Wm,SWe),e(y,RWe),e(y,Hm),e(Hm,Coe),e(Coe,BWe),e(Hm,PWe),e(Hm,Vk),e(Vk,IWe),e(Hm,qWe),e(y,NWe),e(y,Um),e(Um,woe),e(woe,jWe),e(Um,DWe),e(Um,Xk),e(Xk,GWe),e(Um,OWe),e(y,VWe),e(y,Jm),e(Jm,Aoe),e(Aoe,XWe),e(Jm,zWe),e(Jm,zk),e(zk,QWe),e(Jm,WWe),e(y,HWe),e(y,Ym),e(Ym,yoe),e(yoe,UWe),e(Ym,JWe),e(Ym,Qk),e(Qk,YWe),e(Ym,KWe),e(y,ZWe),e(y,Km),e(Km,Loe),e(Loe,eHe),e(Km,oHe),e(Km,Wk),e(Wk,rHe),e(Km,tHe),e(y,aHe),e(y,Zm),e(Zm,xoe),e(xoe,nHe),e(Zm,sHe),e(Zm,Hk),e(Hk,lHe),e(Zm,iHe),e(y,dHe),e(y,eg),e(eg,$oe),e($oe,cHe),e(eg,fHe),e(eg,Uk),e(Uk,mHe),e(eg,gHe),e(y,hHe),e(y,og),e(og,koe),e(koe,pHe),e(og,uHe),e(og,Jk),e(Jk,_He),e(og,bHe),e(y,vHe),e(y,rg),e(rg,Soe),e(Soe,FHe),e(rg,THe),e(rg,Yk),e(Yk,MHe),e(rg,EHe),e(y,CHe),e(y,tg),e(tg,Roe),e(Roe,wHe),e(tg,AHe),e(tg,Kk),e(Kk,yHe),e(tg,LHe),e(y,xHe),e(y,ag),e(ag,Boe),e(Boe,$He),e(ag,kHe),e(ag,Zk),e(Zk,SHe),e(ag,RHe),e(y,BHe),e(y,ng),e(ng,Poe),e(Poe,PHe),e(ng,IHe),e(ng,eS),e(eS,qHe),e(ng,NHe),e(y,jHe),e(y,sg),e(sg,Ioe),e(Ioe,DHe),e(sg,GHe),e(sg,oS),e(oS,OHe),e(sg,VHe),e(y,XHe),e(y,lg),e(lg,qoe),e(qoe,zHe),e(lg,QHe),e(lg,rS),e(rS,WHe),e(lg,HHe),e(y,UHe),e(y,ig),e(ig,Noe),e(Noe,JHe),e(ig,YHe),e(ig,tS),e(tS,KHe),e(ig,ZHe),e(y,eUe),e(y,dg),e(dg,joe),e(joe,oUe),e(dg,rUe),e(dg,aS),e(aS,tUe),e(dg,aUe),e(y,nUe),e(y,cg),e(cg,Doe),e(Doe,sUe),e(cg,lUe),e(cg,nS),e(nS,iUe),e(cg,dUe),e(y,cUe),e(y,fg),e(fg,Goe),e(Goe,fUe),e(fg,mUe),e(fg,sS),e(sS,gUe),e(fg,hUe),e(y,pUe),e(y,mg),e(mg,Ooe),e(Ooe,uUe),e(mg,_Ue),e(mg,lS),e(lS,bUe),e(mg,vUe),e(y,FUe),e(y,gg),e(gg,Voe),e(Voe,TUe),e(gg,MUe),e(gg,iS),e(iS,EUe),e(gg,CUe),e(Er,wUe),M(hg,Er,null),e(Co,AUe),e(Co,pg),M(Yw,pg,null),e(pg,yUe),e(pg,Xoe),e(Xoe,LUe),b(f,bPe,_),b(f,bi,_),e(bi,ug),e(ug,zoe),M(Kw,zoe,null),e(bi,xUe),e(bi,Qoe),e(Qoe,$Ue),b(f,vPe,_),b(f,wo,_),M(Zw,wo,null),e(wo,kUe),e(wo,eA),e(eA,SUe),e(eA,dS),e(dS,RUe),e(eA,BUe),e(wo,PUe),e(wo,oA),e(oA,IUe),e(oA,Woe),e(Woe,qUe),e(oA,NUe),e(wo,jUe),e(wo,Cr),M(rA,Cr,null),e(Cr,DUe),e(Cr,Hoe),e(Hoe,GUe),e(Cr,OUe),e(Cr,Ca),e(Ca,VUe),e(Ca,Uoe),e(Uoe,XUe),e(Ca,zUe),e(Ca,Joe),e(Joe,QUe),e(Ca,WUe),e(Ca,Yoe),e(Yoe,HUe),e(Ca,UUe),e(Cr,JUe),e(Cr,k),e(k,Sn),e(Sn,Koe),e(Koe,YUe),e(Sn,KUe),e(Sn,cS),e(cS,ZUe),e(Sn,eJe),e(Sn,fS),e(fS,oJe),e(Sn,rJe),e(k,tJe),e(k,Rn),e(Rn,Zoe),e(Zoe,aJe),e(Rn,nJe),e(Rn,mS),e(mS,sJe),e(Rn,lJe),e(Rn,gS),e(gS,iJe),e(Rn,dJe),e(k,cJe),e(k,Bn),e(Bn,ere),e(ere,fJe),e(Bn,mJe),e(Bn,hS),e(hS,gJe),e(Bn,hJe),e(Bn,pS),e(pS,pJe),e(Bn,uJe),e(k,_Je),e(k,_g),e(_g,ore),e(ore,bJe),e(_g,vJe),e(_g,uS),e(uS,FJe),e(_g,TJe),e(k,MJe),e(k,Pn),e(Pn,rre),e(rre,EJe),e(Pn,CJe),e(Pn,_S),e(_S,wJe),e(Pn,AJe),e(Pn,bS),e(bS,yJe),e(Pn,LJe),e(k,xJe),e(k,bg),e(bg,tre),e(tre,$Je),e(bg,kJe),e(bg,vS),e(vS,SJe),e(bg,RJe),e(k,BJe),e(k,vg),e(vg,are),e(are,PJe),e(vg,IJe),e(vg,FS),e(FS,qJe),e(vg,NJe),e(k,jJe),e(k,Fg),e(Fg,nre),e(nre,DJe),e(Fg,GJe),e(Fg,TS),e(TS,OJe),e(Fg,VJe),e(k,XJe),e(k,In),e(In,sre),e(sre,zJe),e(In,QJe),e(In,MS),e(MS,WJe),e(In,HJe),e(In,ES),e(ES,UJe),e(In,JJe),e(k,YJe),e(k,qn),e(qn,lre),e(lre,KJe),e(qn,ZJe),e(qn,CS),e(CS,eYe),e(qn,oYe),e(qn,wS),e(wS,rYe),e(qn,tYe),e(k,aYe),e(k,Nn),e(Nn,ire),e(ire,nYe),e(Nn,sYe),e(Nn,AS),e(AS,lYe),e(Nn,iYe),e(Nn,yS),e(yS,dYe),e(Nn,cYe),e(k,fYe),e(k,Tg),e(Tg,dre),e(dre,mYe),e(Tg,gYe),e(Tg,LS),e(LS,hYe),e(Tg,pYe),e(k,uYe),e(k,Mg),e(Mg,cre),e(cre,_Ye),e(Mg,bYe),e(Mg,xS),e(xS,vYe),e(Mg,FYe),e(k,TYe),e(k,jn),e(jn,fre),e(fre,MYe),e(jn,EYe),e(jn,$S),e($S,CYe),e(jn,wYe),e(jn,kS),e(kS,AYe),e(jn,yYe),e(k,LYe),e(k,Eg),e(Eg,mre),e(mre,xYe),e(Eg,$Ye),e(Eg,SS),e(SS,kYe),e(Eg,SYe),e(k,RYe),e(k,Dn),e(Dn,gre),e(gre,BYe),e(Dn,PYe),e(Dn,RS),e(RS,IYe),e(Dn,qYe),e(Dn,BS),e(BS,NYe),e(Dn,jYe),e(k,DYe),e(k,Gn),e(Gn,hre),e(hre,GYe),e(Gn,OYe),e(Gn,PS),e(PS,VYe),e(Gn,XYe),e(Gn,IS),e(IS,zYe),e(Gn,QYe),e(k,WYe),e(k,On),e(On,pre),e(pre,HYe),e(On,UYe),e(On,qS),e(qS,JYe),e(On,YYe),e(On,NS),e(NS,KYe),e(On,ZYe),e(k,eKe),e(k,Cg),e(Cg,ure),e(ure,oKe),e(Cg,rKe),e(Cg,jS),e(jS,tKe),e(Cg,aKe),e(k,nKe),e(k,Vn),e(Vn,_re),e(_re,sKe),e(Vn,lKe),e(Vn,DS),e(DS,iKe),e(Vn,dKe),e(Vn,GS),e(GS,cKe),e(Vn,fKe),e(k,mKe),e(k,Xn),e(Xn,bre),e(bre,gKe),e(Xn,hKe),e(Xn,OS),e(OS,pKe),e(Xn,uKe),e(Xn,VS),e(VS,_Ke),e(Xn,bKe),e(k,vKe),e(k,zn),e(zn,vre),e(vre,FKe),e(zn,TKe),e(zn,XS),e(XS,MKe),e(zn,EKe),e(zn,zS),e(zS,CKe),e(zn,wKe),e(k,AKe),e(k,Qn),e(Qn,Fre),e(Fre,yKe),e(Qn,LKe),e(Qn,QS),e(QS,xKe),e(Qn,$Ke),e(Qn,WS),e(WS,kKe),e(Qn,SKe),e(k,RKe),e(k,Wn),e(Wn,Tre),e(Tre,BKe),e(Wn,PKe),e(Wn,HS),e(HS,IKe),e(Wn,qKe),e(Wn,US),e(US,NKe),e(Wn,jKe),e(k,DKe),e(k,Hn),e(Hn,Mre),e(Mre,GKe),e(Hn,OKe),e(Hn,JS),e(JS,VKe),e(Hn,XKe),e(Hn,YS),e(YS,zKe),e(Hn,QKe),e(k,WKe),e(k,wg),e(wg,Ere),e(Ere,HKe),e(wg,UKe),e(wg,KS),e(KS,JKe),e(wg,YKe),e(k,KKe),e(k,Un),e(Un,Cre),e(Cre,ZKe),e(Un,eZe),e(Un,ZS),e(ZS,oZe),e(Un,rZe),e(Un,eR),e(eR,tZe),e(Un,aZe),e(k,nZe),e(k,Ag),e(Ag,wre),e(wre,sZe),e(Ag,lZe),e(Ag,oR),e(oR,iZe),e(Ag,dZe),e(k,cZe),e(k,Jn),e(Jn,Are),e(Are,fZe),e(Jn,mZe),e(Jn,rR),e(rR,gZe),e(Jn,hZe),e(Jn,tR),e(tR,pZe),e(Jn,uZe),e(k,_Ze),e(k,Yn),e(Yn,yre),e(yre,bZe),e(Yn,vZe),e(Yn,aR),e(aR,FZe),e(Yn,TZe),e(Yn,nR),e(nR,MZe),e(Yn,EZe),e(k,CZe),e(k,Kn),e(Kn,Lre),e(Lre,wZe),e(Kn,AZe),e(Kn,sR),e(sR,yZe),e(Kn,LZe),e(Kn,lR),e(lR,xZe),e(Kn,$Ze),e(k,kZe),e(k,Zn),e(Zn,xre),e(xre,SZe),e(Zn,RZe),e(Zn,iR),e(iR,BZe),e(Zn,PZe),e(Zn,dR),e(dR,IZe),e(Zn,qZe),e(k,NZe),e(k,es),e(es,$re),e($re,jZe),e(es,DZe),e(es,cR),e(cR,GZe),e(es,OZe),e(es,fR),e(fR,VZe),e(es,XZe),e(k,zZe),e(k,yg),e(yg,kre),e(kre,QZe),e(yg,WZe),e(yg,mR),e(mR,HZe),e(yg,UZe),e(k,JZe),e(k,os),e(os,Sre),e(Sre,YZe),e(os,KZe),e(os,gR),e(gR,ZZe),e(os,eeo),e(os,hR),e(hR,oeo),e(os,reo),e(k,teo),e(k,rs),e(rs,Rre),e(Rre,aeo),e(rs,neo),e(rs,pR),e(pR,seo),e(rs,leo),e(rs,uR),e(uR,ieo),e(rs,deo),e(k,ceo),e(k,ts),e(ts,Bre),e(Bre,feo),e(ts,meo),e(ts,_R),e(_R,geo),e(ts,heo),e(ts,bR),e(bR,peo),e(ts,ueo),e(k,_eo),e(k,as),e(as,Pre),e(Pre,beo),e(as,veo),e(as,vR),e(vR,Feo),e(as,Teo),e(as,FR),e(FR,Meo),e(as,Eeo),e(k,Ceo),e(k,ns),e(ns,Ire),e(Ire,weo),e(ns,Aeo),e(ns,TR),e(TR,yeo),e(ns,Leo),e(ns,MR),e(MR,xeo),e(ns,$eo),e(k,keo),e(k,ss),e(ss,qre),e(qre,Seo),e(ss,Reo),e(ss,ER),e(ER,Beo),e(ss,Peo),e(ss,CR),e(CR,Ieo),e(ss,qeo),e(k,Neo),e(k,Lg),e(Lg,Nre),e(Nre,jeo),e(Lg,Deo),e(Lg,wR),e(wR,Geo),e(Lg,Oeo),e(k,Veo),e(k,ls),e(ls,jre),e(jre,Xeo),e(ls,zeo),e(ls,AR),e(AR,Qeo),e(ls,Weo),e(ls,yR),e(yR,Heo),e(ls,Ueo),e(k,Jeo),e(k,xg),e(xg,Dre),e(Dre,Yeo),e(xg,Keo),e(xg,LR),e(LR,Zeo),e(xg,eoo),e(k,ooo),e(k,$g),e($g,Gre),e(Gre,roo),e($g,too),e($g,xR),e(xR,aoo),e($g,noo),e(k,soo),e(k,is),e(is,Ore),e(Ore,loo),e(is,ioo),e(is,$R),e($R,doo),e(is,coo),e(is,kR),e(kR,foo),e(is,moo),e(k,goo),e(k,ds),e(ds,Vre),e(Vre,hoo),e(ds,poo),e(ds,SR),e(SR,uoo),e(ds,_oo),e(ds,RR),e(RR,boo),e(ds,voo),e(k,Foo),e(k,cs),e(cs,Xre),e(Xre,Too),e(cs,Moo),e(cs,BR),e(BR,Eoo),e(cs,Coo),e(cs,PR),e(PR,woo),e(cs,Aoo),e(k,yoo),e(k,kg),e(kg,zre),e(zre,Loo),e(kg,xoo),e(kg,IR),e(IR,$oo),e(kg,koo),e(k,Soo),e(k,fs),e(fs,Qre),e(Qre,Roo),e(fs,Boo),e(fs,qR),e(qR,Poo),e(fs,Ioo),e(fs,NR),e(NR,qoo),e(fs,Noo),e(k,joo),e(k,ms),e(ms,Wre),e(Wre,Doo),e(ms,Goo),e(ms,jR),e(jR,Ooo),e(ms,Voo),e(ms,DR),e(DR,Xoo),e(ms,zoo),e(k,Qoo),e(k,gs),e(gs,Hre),e(Hre,Woo),e(gs,Hoo),e(gs,GR),e(GR,Uoo),e(gs,Joo),e(gs,OR),e(OR,Yoo),e(gs,Koo),e(k,Zoo),e(k,hs),e(hs,Ure),e(Ure,ero),e(hs,oro),e(hs,VR),e(VR,rro),e(hs,tro),e(hs,XR),e(XR,aro),e(hs,nro),e(k,sro),e(k,ps),e(ps,Jre),e(Jre,lro),e(ps,iro),e(ps,zR),e(zR,dro),e(ps,cro),e(ps,QR),e(QR,fro),e(ps,mro),e(k,gro),e(k,us),e(us,Yre),e(Yre,hro),e(us,pro),e(us,WR),e(WR,uro),e(us,_ro),e(us,HR),e(HR,bro),e(us,vro),e(k,Fro),e(k,Sg),e(Sg,Kre),e(Kre,Tro),e(Sg,Mro),e(Sg,UR),e(UR,Ero),e(Sg,Cro),e(k,wro),e(k,Rg),e(Rg,Zre),e(Zre,Aro),e(Rg,yro),e(Rg,JR),e(JR,Lro),e(Rg,xro),e(k,$ro),e(k,Bg),e(Bg,ete),e(ete,kro),e(Bg,Sro),e(Bg,YR),e(YR,Rro),e(Bg,Bro),e(k,Pro),e(k,Pg),e(Pg,ote),e(ote,Iro),e(Pg,qro),e(Pg,KR),e(KR,Nro),e(Pg,jro),e(k,Dro),e(k,_s),e(_s,rte),e(rte,Gro),e(_s,Oro),e(_s,ZR),e(ZR,Vro),e(_s,Xro),e(_s,eB),e(eB,zro),e(_s,Qro),e(k,Wro),e(k,Ig),e(Ig,tte),e(tte,Hro),e(Ig,Uro),e(Ig,oB),e(oB,Jro),e(Ig,Yro),e(k,Kro),e(k,bs),e(bs,ate),e(ate,Zro),e(bs,eto),e(bs,rB),e(rB,oto),e(bs,rto),e(bs,tB),e(tB,tto),e(bs,ato),e(k,nto),e(k,vs),e(vs,nte),e(nte,sto),e(vs,lto),e(vs,aB),e(aB,ito),e(vs,dto),e(vs,nB),e(nB,cto),e(vs,fto),e(k,mto),e(k,Fs),e(Fs,ste),e(ste,gto),e(Fs,hto),e(Fs,sB),e(sB,pto),e(Fs,uto),e(Fs,lB),e(lB,_to),e(Fs,bto),e(k,vto),e(k,Ts),e(Ts,lte),e(lte,Fto),e(Ts,Tto),e(Ts,iB),e(iB,Mto),e(Ts,Eto),e(Ts,dB),e(dB,Cto),e(Ts,wto),e(k,Ato),e(k,Ms),e(Ms,ite),e(ite,yto),e(Ms,Lto),e(Ms,cB),e(cB,xto),e(Ms,$to),e(Ms,fB),e(fB,kto),e(Ms,Sto),e(k,Rto),e(k,Es),e(Es,dte),e(dte,Bto),e(Es,Pto),e(Es,mB),e(mB,Ito),e(Es,qto),e(Es,gB),e(gB,Nto),e(Es,jto),e(k,Dto),e(k,qg),e(qg,cte),e(cte,Gto),e(qg,Oto),e(qg,hB),e(hB,Vto),e(qg,Xto),e(k,zto),e(k,Ng),e(Ng,fte),e(fte,Qto),e(Ng,Wto),e(Ng,pB),e(pB,Hto),e(Ng,Uto),e(k,Jto),e(k,Cs),e(Cs,mte),e(mte,Yto),e(Cs,Kto),e(Cs,uB),e(uB,Zto),e(Cs,eao),e(Cs,_B),e(_B,oao),e(Cs,rao),e(k,tao),e(k,ws),e(ws,gte),e(gte,aao),e(ws,nao),e(ws,bB),e(bB,sao),e(ws,lao),e(ws,vB),e(vB,iao),e(ws,dao),e(k,cao),e(k,As),e(As,hte),e(hte,fao),e(As,mao),e(As,FB),e(FB,gao),e(As,hao),e(As,TB),e(TB,pao),e(As,uao),e(k,_ao),e(k,jg),e(jg,pte),e(pte,bao),e(jg,vao),e(jg,MB),e(MB,Fao),e(jg,Tao),e(k,Mao),e(k,Dg),e(Dg,ute),e(ute,Eao),e(Dg,Cao),e(Dg,EB),e(EB,wao),e(Dg,Aao),e(k,yao),e(k,Gg),e(Gg,_te),e(_te,Lao),e(Gg,xao),e(Gg,CB),e(CB,$ao),e(Gg,kao),e(k,Sao),e(k,ys),e(ys,bte),e(bte,Rao),e(ys,Bao),e(ys,wB),e(wB,Pao),e(ys,Iao),e(ys,AB),e(AB,qao),e(ys,Nao),e(k,jao),e(k,Og),e(Og,vte),e(vte,Dao),e(Og,Gao),e(Og,yB),e(yB,Oao),e(Og,Vao),e(k,Xao),e(k,Vg),e(Vg,Fte),e(Fte,zao),e(Vg,Qao),e(Vg,LB),e(LB,Wao),e(Vg,Hao),e(k,Uao),e(k,Ls),e(Ls,Tte),e(Tte,Jao),e(Ls,Yao),e(Ls,xB),e(xB,Kao),e(Ls,Zao),e(Ls,$B),e($B,eno),e(Ls,ono),e(k,rno),e(k,Xg),e(Xg,Mte),e(Mte,tno),e(Xg,ano),e(Xg,kB),e(kB,nno),e(Xg,sno),e(k,lno),e(k,zg),e(zg,Ete),e(Ete,ino),e(zg,dno),e(zg,SB),e(SB,cno),e(zg,fno),e(k,mno),e(k,xs),e(xs,Cte),e(Cte,gno),e(xs,hno),e(xs,RB),e(RB,pno),e(xs,uno),e(xs,BB),e(BB,_no),e(xs,bno),e(k,vno),e(k,$s),e($s,wte),e(wte,Fno),e($s,Tno),e($s,PB),e(PB,Mno),e($s,Eno),e($s,IB),e(IB,Cno),e($s,wno),e(k,Ano),e(k,ks),e(ks,Ate),e(Ate,yno),e(ks,Lno),e(ks,qB),e(qB,xno),e(ks,$no),e(ks,NB),e(NB,kno),e(ks,Sno),e(k,Rno),e(k,Ss),e(Ss,yte),e(yte,Bno),e(Ss,Pno),e(Ss,jB),e(jB,Ino),e(Ss,qno),e(Ss,DB),e(DB,Nno),e(Ss,jno),e(Cr,Dno),M(Qg,Cr,null),e(wo,Gno),e(wo,Wg),M(tA,Wg,null),e(Wg,Ono),e(Wg,Lte),e(Lte,Vno),b(f,FPe,_),b(f,vi,_),e(vi,Hg),e(Hg,xte),M(aA,xte,null),e(vi,Xno),e(vi,$te),e($te,zno),b(f,TPe,_),b(f,Ao,_),M(nA,Ao,null),e(Ao,Qno),e(Ao,sA),e(sA,Wno),e(sA,GB),e(GB,Hno),e(sA,Uno),e(Ao,Jno),e(Ao,lA),e(lA,Yno),e(lA,kte),e(kte,Kno),e(lA,Zno),e(Ao,eso),e(Ao,Qe),M(iA,Qe,null),e(Qe,oso),e(Qe,Ste),e(Ste,rso),e(Qe,tso),e(Qe,wa),e(wa,aso),e(wa,Rte),e(Rte,nso),e(wa,sso),e(wa,Bte),e(Bte,lso),e(wa,iso),e(wa,Pte),e(Pte,dso),e(wa,cso),e(Qe,fso),e(Qe,te),e(te,Ug),e(Ug,Ite),e(Ite,mso),e(Ug,gso),e(Ug,OB),e(OB,hso),e(Ug,pso),e(te,uso),e(te,Jg),e(Jg,qte),e(qte,_so),e(Jg,bso),e(Jg,VB),e(VB,vso),e(Jg,Fso),e(te,Tso),e(te,Yg),e(Yg,Nte),e(Nte,Mso),e(Yg,Eso),e(Yg,XB),e(XB,Cso),e(Yg,wso),e(te,Aso),e(te,Kg),e(Kg,jte),e(jte,yso),e(Kg,Lso),e(Kg,zB),e(zB,xso),e(Kg,$so),e(te,kso),e(te,Zg),e(Zg,Dte),e(Dte,Sso),e(Zg,Rso),e(Zg,QB),e(QB,Bso),e(Zg,Pso),e(te,Iso),e(te,eh),e(eh,Gte),e(Gte,qso),e(eh,Nso),e(eh,WB),e(WB,jso),e(eh,Dso),e(te,Gso),e(te,oh),e(oh,Ote),e(Ote,Oso),e(oh,Vso),e(oh,HB),e(HB,Xso),e(oh,zso),e(te,Qso),e(te,rh),e(rh,Vte),e(Vte,Wso),e(rh,Hso),e(rh,UB),e(UB,Uso),e(rh,Jso),e(te,Yso),e(te,th),e(th,Xte),e(Xte,Kso),e(th,Zso),e(th,JB),e(JB,elo),e(th,olo),e(te,rlo),e(te,ah),e(ah,zte),e(zte,tlo),e(ah,alo),e(ah,YB),e(YB,nlo),e(ah,slo),e(te,llo),e(te,nh),e(nh,Qte),e(Qte,ilo),e(nh,dlo),e(nh,KB),e(KB,clo),e(nh,flo),e(te,mlo),e(te,sh),e(sh,Wte),e(Wte,glo),e(sh,hlo),e(sh,ZB),e(ZB,plo),e(sh,ulo),e(te,_lo),e(te,lh),e(lh,Hte),e(Hte,blo),e(lh,vlo),e(lh,eP),e(eP,Flo),e(lh,Tlo),e(te,Mlo),e(te,ih),e(ih,Ute),e(Ute,Elo),e(ih,Clo),e(ih,oP),e(oP,wlo),e(ih,Alo),e(te,ylo),e(te,dh),e(dh,Jte),e(Jte,Llo),e(dh,xlo),e(dh,rP),e(rP,$lo),e(dh,klo),e(te,Slo),e(te,ch),e(ch,Yte),e(Yte,Rlo),e(ch,Blo),e(ch,tP),e(tP,Plo),e(ch,Ilo),e(te,qlo),e(te,fh),e(fh,Kte),e(Kte,Nlo),e(fh,jlo),e(fh,aP),e(aP,Dlo),e(fh,Glo),e(te,Olo),e(te,mh),e(mh,Zte),e(Zte,Vlo),e(mh,Xlo),e(mh,nP),e(nP,zlo),e(mh,Qlo),e(te,Wlo),e(te,gh),e(gh,eae),e(eae,Hlo),e(gh,Ulo),e(gh,sP),e(sP,Jlo),e(gh,Ylo),e(te,Klo),e(te,hh),e(hh,oae),e(oae,Zlo),e(hh,eio),e(hh,lP),e(lP,oio),e(hh,rio),e(te,tio),e(te,ph),e(ph,rae),e(rae,aio),e(ph,nio),e(ph,iP),e(iP,sio),e(ph,lio),e(te,iio),e(te,uh),e(uh,tae),e(tae,dio),e(uh,cio),e(uh,dP),e(dP,fio),e(uh,mio),e(te,gio),e(te,_h),e(_h,aae),e(aae,hio),e(_h,pio),e(_h,cP),e(cP,uio),e(_h,_io),e(te,bio),e(te,bh),e(bh,nae),e(nae,vio),e(bh,Fio),e(bh,fP),e(fP,Tio),e(bh,Mio),e(Qe,Eio),M(vh,Qe,null),e(Qe,Cio),M(Fh,Qe,null),e(Ao,wio),e(Ao,Th),M(dA,Th,null),e(Th,Aio),e(Th,sae),e(sae,yio),b(f,MPe,_),b(f,Fi,_),e(Fi,Mh),e(Mh,lae),M(cA,lae,null),e(Fi,Lio),e(Fi,iae),e(iae,xio),b(f,EPe,_),b(f,yo,_),M(fA,yo,null),e(yo,$io),e(yo,mA),e(mA,kio),e(mA,mP),e(mP,Sio),e(mA,Rio),e(yo,Bio),e(yo,gA),e(gA,Pio),e(gA,dae),e(dae,Iio),e(gA,qio),e(yo,Nio),e(yo,We),M(hA,We,null),e(We,jio),e(We,cae),e(cae,Dio),e(We,Gio),e(We,Ti),e(Ti,Oio),e(Ti,fae),e(fae,Vio),e(Ti,Xio),e(Ti,mae),e(mae,zio),e(Ti,Qio),e(We,Wio),e(We,be),e(be,Eh),e(Eh,gae),e(gae,Hio),e(Eh,Uio),e(Eh,gP),e(gP,Jio),e(Eh,Yio),e(be,Kio),e(be,Ch),e(Ch,hae),e(hae,Zio),e(Ch,edo),e(Ch,hP),e(hP,odo),e(Ch,rdo),e(be,tdo),e(be,wh),e(wh,pae),e(pae,ado),e(wh,ndo),e(wh,pP),e(pP,sdo),e(wh,ldo),e(be,ido),e(be,Ah),e(Ah,uae),e(uae,ddo),e(Ah,cdo),e(Ah,uP),e(uP,fdo),e(Ah,mdo),e(be,gdo),e(be,yh),e(yh,_ae),e(_ae,hdo),e(yh,pdo),e(yh,_P),e(_P,udo),e(yh,_do),e(be,bdo),e(be,Lh),e(Lh,bae),e(bae,vdo),e(Lh,Fdo),e(Lh,bP),e(bP,Tdo),e(Lh,Mdo),e(be,Edo),e(be,xh),e(xh,vae),e(vae,Cdo),e(xh,wdo),e(xh,vP),e(vP,Ado),e(xh,ydo),e(be,Ldo),e(be,$h),e($h,Fae),e(Fae,xdo),e($h,$do),e($h,FP),e(FP,kdo),e($h,Sdo),e(be,Rdo),e(be,kh),e(kh,Tae),e(Tae,Bdo),e(kh,Pdo),e(kh,TP),e(TP,Ido),e(kh,qdo),e(be,Ndo),e(be,Sh),e(Sh,Mae),e(Mae,jdo),e(Sh,Ddo),e(Sh,MP),e(MP,Gdo),e(Sh,Odo),e(be,Vdo),e(be,Rh),e(Rh,Eae),e(Eae,Xdo),e(Rh,zdo),e(Rh,EP),e(EP,Qdo),e(Rh,Wdo),e(be,Hdo),e(be,Bh),e(Bh,Cae),e(Cae,Udo),e(Bh,Jdo),e(Bh,CP),e(CP,Ydo),e(Bh,Kdo),e(be,Zdo),e(be,Ph),e(Ph,wae),e(wae,eco),e(Ph,oco),e(Ph,wP),e(wP,rco),e(Ph,tco),e(be,aco),e(be,Ih),e(Ih,Aae),e(Aae,nco),e(Ih,sco),e(Ih,AP),e(AP,lco),e(Ih,ico),e(We,dco),M(qh,We,null),e(We,cco),M(Nh,We,null),e(yo,fco),e(yo,jh),M(pA,jh,null),e(jh,mco),e(jh,yae),e(yae,gco),b(f,CPe,_),b(f,Mi,_),e(Mi,Dh),e(Dh,Lae),M(uA,Lae,null),e(Mi,hco),e(Mi,xae),e(xae,pco),b(f,wPe,_),b(f,Lo,_),M(_A,Lo,null),e(Lo,uco),e(Lo,Ei),e(Ei,_co),e(Ei,yP),e(yP,bco),e(Ei,vco),e(Ei,LP),e(LP,Fco),e(Ei,Tco),e(Lo,Mco),e(Lo,bA),e(bA,Eco),e(bA,$ae),e($ae,Cco),e(bA,wco),e(Lo,Aco),e(Lo,ot),M(vA,ot,null),e(ot,yco),e(ot,kae),e(kae,Lco),e(ot,xco),e(ot,Ci),e(Ci,$co),e(Ci,Sae),e(Sae,kco),e(Ci,Sco),e(Ci,xP),e(xP,Rco),e(Ci,Bco),e(ot,Pco),M(Gh,ot,null),e(Lo,Ico),e(Lo,He),M(FA,He,null),e(He,qco),e(He,Rae),e(Rae,Nco),e(He,jco),e(He,Aa),e(Aa,Dco),e(Aa,Bae),e(Bae,Gco),e(Aa,Oco),e(Aa,Pae),e(Pae,Vco),e(Aa,Xco),e(Aa,Iae),e(Iae,zco),e(Aa,Qco),e(He,Wco),e(He,x),e(x,Oh),e(Oh,qae),e(qae,Hco),e(Oh,Uco),e(Oh,$P),e($P,Jco),e(Oh,Yco),e(x,Kco),e(x,Vh),e(Vh,Nae),e(Nae,Zco),e(Vh,efo),e(Vh,kP),e(kP,ofo),e(Vh,rfo),e(x,tfo),e(x,Xh),e(Xh,jae),e(jae,afo),e(Xh,nfo),e(Xh,SP),e(SP,sfo),e(Xh,lfo),e(x,ifo),e(x,zh),e(zh,Dae),e(Dae,dfo),e(zh,cfo),e(zh,RP),e(RP,ffo),e(zh,mfo),e(x,gfo),e(x,Qh),e(Qh,Gae),e(Gae,hfo),e(Qh,pfo),e(Qh,BP),e(BP,ufo),e(Qh,_fo),e(x,bfo),e(x,Wh),e(Wh,Oae),e(Oae,vfo),e(Wh,Ffo),e(Wh,PP),e(PP,Tfo),e(Wh,Mfo),e(x,Efo),e(x,Hh),e(Hh,Vae),e(Vae,Cfo),e(Hh,wfo),e(Hh,IP),e(IP,Afo),e(Hh,yfo),e(x,Lfo),e(x,Uh),e(Uh,Xae),e(Xae,xfo),e(Uh,$fo),e(Uh,qP),e(qP,kfo),e(Uh,Sfo),e(x,Rfo),e(x,Jh),e(Jh,zae),e(zae,Bfo),e(Jh,Pfo),e(Jh,NP),e(NP,Ifo),e(Jh,qfo),e(x,Nfo),e(x,Yh),e(Yh,Qae),e(Qae,jfo),e(Yh,Dfo),e(Yh,jP),e(jP,Gfo),e(Yh,Ofo),e(x,Vfo),e(x,Kh),e(Kh,Wae),e(Wae,Xfo),e(Kh,zfo),e(Kh,DP),e(DP,Qfo),e(Kh,Wfo),e(x,Hfo),e(x,Zh),e(Zh,Hae),e(Hae,Ufo),e(Zh,Jfo),e(Zh,GP),e(GP,Yfo),e(Zh,Kfo),e(x,Zfo),e(x,ep),e(ep,Uae),e(Uae,emo),e(ep,omo),e(ep,OP),e(OP,rmo),e(ep,tmo),e(x,amo),e(x,op),e(op,Jae),e(Jae,nmo),e(op,smo),e(op,VP),e(VP,lmo),e(op,imo),e(x,dmo),e(x,rp),e(rp,Yae),e(Yae,cmo),e(rp,fmo),e(rp,XP),e(XP,mmo),e(rp,gmo),e(x,hmo),e(x,tp),e(tp,Kae),e(Kae,pmo),e(tp,umo),e(tp,zP),e(zP,_mo),e(tp,bmo),e(x,vmo),e(x,ap),e(ap,Zae),e(Zae,Fmo),e(ap,Tmo),e(ap,QP),e(QP,Mmo),e(ap,Emo),e(x,Cmo),e(x,np),e(np,ene),e(ene,wmo),e(np,Amo),e(np,WP),e(WP,ymo),e(np,Lmo),e(x,xmo),e(x,sp),e(sp,one),e(one,$mo),e(sp,kmo),e(sp,HP),e(HP,Smo),e(sp,Rmo),e(x,Bmo),e(x,lp),e(lp,rne),e(rne,Pmo),e(lp,Imo),e(lp,UP),e(UP,qmo),e(lp,Nmo),e(x,jmo),e(x,ip),e(ip,tne),e(tne,Dmo),e(ip,Gmo),e(ip,JP),e(JP,Omo),e(ip,Vmo),e(x,Xmo),e(x,dp),e(dp,ane),e(ane,zmo),e(dp,Qmo),e(dp,YP),e(YP,Wmo),e(dp,Hmo),e(x,Umo),e(x,cp),e(cp,nne),e(nne,Jmo),e(cp,Ymo),e(cp,KP),e(KP,Kmo),e(cp,Zmo),e(x,ego),e(x,fp),e(fp,sne),e(sne,ogo),e(fp,rgo),e(fp,ZP),e(ZP,tgo),e(fp,ago),e(x,ngo),e(x,mp),e(mp,lne),e(lne,sgo),e(mp,lgo),e(mp,eI),e(eI,igo),e(mp,dgo),e(x,cgo),e(x,gp),e(gp,ine),e(ine,fgo),e(gp,mgo),e(gp,oI),e(oI,ggo),e(gp,hgo),e(x,pgo),e(x,hp),e(hp,dne),e(dne,ugo),e(hp,_go),e(hp,rI),e(rI,bgo),e(hp,vgo),e(x,Fgo),e(x,pp),e(pp,cne),e(cne,Tgo),e(pp,Mgo),e(pp,tI),e(tI,Ego),e(pp,Cgo),e(x,wgo),e(x,up),e(up,fne),e(fne,Ago),e(up,ygo),e(up,aI),e(aI,Lgo),e(up,xgo),e(x,$go),e(x,_p),e(_p,mne),e(mne,kgo),e(_p,Sgo),e(_p,nI),e(nI,Rgo),e(_p,Bgo),e(x,Pgo),e(x,Rs),e(Rs,gne),e(gne,Igo),e(Rs,qgo),e(Rs,sI),e(sI,Ngo),e(Rs,jgo),e(Rs,lI),e(lI,Dgo),e(Rs,Ggo),e(x,Ogo),e(x,bp),e(bp,hne),e(hne,Vgo),e(bp,Xgo),e(bp,iI),e(iI,zgo),e(bp,Qgo),e(x,Wgo),e(x,vp),e(vp,pne),e(pne,Hgo),e(vp,Ugo),e(vp,dI),e(dI,Jgo),e(vp,Ygo),e(x,Kgo),e(x,Fp),e(Fp,une),e(une,Zgo),e(Fp,eho),e(Fp,cI),e(cI,oho),e(Fp,rho),e(x,tho),e(x,Tp),e(Tp,_ne),e(_ne,aho),e(Tp,nho),e(Tp,fI),e(fI,sho),e(Tp,lho),e(x,iho),e(x,Mp),e(Mp,bne),e(bne,dho),e(Mp,cho),e(Mp,mI),e(mI,fho),e(Mp,mho),e(x,gho),e(x,Ep),e(Ep,vne),e(vne,hho),e(Ep,pho),e(Ep,gI),e(gI,uho),e(Ep,_ho),e(x,bho),e(x,Cp),e(Cp,Fne),e(Fne,vho),e(Cp,Fho),e(Cp,hI),e(hI,Tho),e(Cp,Mho),e(x,Eho),e(x,wp),e(wp,Tne),e(Tne,Cho),e(wp,who),e(wp,pI),e(pI,Aho),e(wp,yho),e(x,Lho),e(x,Ap),e(Ap,Mne),e(Mne,xho),e(Ap,$ho),e(Ap,uI),e(uI,kho),e(Ap,Sho),e(x,Rho),e(x,yp),e(yp,Ene),e(Ene,Bho),e(yp,Pho),e(yp,_I),e(_I,Iho),e(yp,qho),e(x,Nho),e(x,Lp),e(Lp,Cne),e(Cne,jho),e(Lp,Dho),e(Lp,bI),e(bI,Gho),e(Lp,Oho),e(x,Vho),e(x,xp),e(xp,wne),e(wne,Xho),e(xp,zho),e(xp,vI),e(vI,Qho),e(xp,Who),e(x,Hho),e(x,$p),e($p,Ane),e(Ane,Uho),e($p,Jho),e($p,FI),e(FI,Yho),e($p,Kho),e(x,Zho),e(x,kp),e(kp,yne),e(yne,epo),e(kp,opo),e(kp,TI),e(TI,rpo),e(kp,tpo),e(x,apo),e(x,Sp),e(Sp,Lne),e(Lne,npo),e(Sp,spo),e(Sp,MI),e(MI,lpo),e(Sp,ipo),e(x,dpo),e(x,Rp),e(Rp,xne),e(xne,cpo),e(Rp,fpo),e(Rp,EI),e(EI,mpo),e(Rp,gpo),e(x,hpo),e(x,Bp),e(Bp,$ne),e($ne,ppo),e(Bp,upo),e(Bp,CI),e(CI,_po),e(Bp,bpo),e(x,vpo),e(x,Pp),e(Pp,kne),e(kne,Fpo),e(Pp,Tpo),e(Pp,wI),e(wI,Mpo),e(Pp,Epo),e(x,Cpo),e(x,Ip),e(Ip,Sne),e(Sne,wpo),e(Ip,Apo),e(Ip,AI),e(AI,ypo),e(Ip,Lpo),e(x,xpo),e(x,qp),e(qp,Rne),e(Rne,$po),e(qp,kpo),e(qp,yI),e(yI,Spo),e(qp,Rpo),e(x,Bpo),e(x,Np),e(Np,Bne),e(Bne,Ppo),e(Np,Ipo),e(Np,LI),e(LI,qpo),e(Np,Npo),e(x,jpo),e(x,jp),e(jp,Pne),e(Pne,Dpo),e(jp,Gpo),e(jp,xI),e(xI,Opo),e(jp,Vpo),e(x,Xpo),e(x,Dp),e(Dp,Ine),e(Ine,zpo),e(Dp,Qpo),e(Dp,$I),e($I,Wpo),e(Dp,Hpo),e(x,Upo),e(x,Gp),e(Gp,qne),e(qne,Jpo),e(Gp,Ypo),e(Gp,kI),e(kI,Kpo),e(Gp,Zpo),e(x,euo),e(x,Op),e(Op,Nne),e(Nne,ouo),e(Op,ruo),e(Op,SI),e(SI,tuo),e(Op,auo),e(x,nuo),e(x,Vp),e(Vp,jne),e(jne,suo),e(Vp,luo),e(Vp,RI),e(RI,iuo),e(Vp,duo),e(x,cuo),e(x,Xp),e(Xp,Dne),e(Dne,fuo),e(Xp,muo),e(Xp,BI),e(BI,guo),e(Xp,huo),e(x,puo),e(x,zp),e(zp,Gne),e(Gne,uuo),e(zp,_uo),e(zp,PI),e(PI,buo),e(zp,vuo),e(x,Fuo),e(x,Qp),e(Qp,One),e(One,Tuo),e(Qp,Muo),e(Qp,II),e(II,Euo),e(Qp,Cuo),e(x,wuo),e(x,Wp),e(Wp,Vne),e(Vne,Auo),e(Wp,yuo),e(Wp,qI),e(qI,Luo),e(Wp,xuo),e(x,$uo),e(x,Hp),e(Hp,Xne),e(Xne,kuo),e(Hp,Suo),e(Hp,NI),e(NI,Ruo),e(Hp,Buo),e(x,Puo),e(x,Up),e(Up,zne),e(zne,Iuo),e(Up,quo),e(Up,jI),e(jI,Nuo),e(Up,juo),e(x,Duo),e(x,Jp),e(Jp,Qne),e(Qne,Guo),e(Jp,Ouo),e(Jp,DI),e(DI,Vuo),e(Jp,Xuo),e(x,zuo),e(x,Yp),e(Yp,Wne),e(Wne,Quo),e(Yp,Wuo),e(Yp,GI),e(GI,Huo),e(Yp,Uuo),e(x,Juo),e(x,Kp),e(Kp,Hne),e(Hne,Yuo),e(Kp,Kuo),e(Kp,OI),e(OI,Zuo),e(Kp,e_o),e(x,o_o),e(x,Zp),e(Zp,Une),e(Une,r_o),e(Zp,t_o),e(Zp,VI),e(VI,a_o),e(Zp,n_o),e(x,s_o),e(x,eu),e(eu,Jne),e(Jne,l_o),e(eu,i_o),e(eu,XI),e(XI,d_o),e(eu,c_o),e(x,f_o),e(x,ou),e(ou,Yne),e(Yne,m_o),e(ou,g_o),e(ou,zI),e(zI,h_o),e(ou,p_o),e(x,u_o),e(x,ru),e(ru,Kne),e(Kne,__o),e(ru,b_o),e(ru,QI),e(QI,v_o),e(ru,F_o),e(x,T_o),e(x,tu),e(tu,Zne),e(Zne,M_o),e(tu,E_o),e(tu,WI),e(WI,C_o),e(tu,w_o),e(x,A_o),e(x,au),e(au,ese),e(ese,y_o),e(au,L_o),e(au,HI),e(HI,x_o),e(au,$_o),e(x,k_o),e(x,nu),e(nu,ose),e(ose,S_o),e(nu,R_o),e(nu,UI),e(UI,B_o),e(nu,P_o),e(x,I_o),e(x,su),e(su,rse),e(rse,q_o),e(su,N_o),e(su,JI),e(JI,j_o),e(su,D_o),e(x,G_o),e(x,lu),e(lu,tse),e(tse,O_o),e(lu,V_o),e(lu,YI),e(YI,X_o),e(lu,z_o),e(x,Q_o),e(x,iu),e(iu,ase),e(ase,W_o),e(iu,H_o),e(iu,KI),e(KI,U_o),e(iu,J_o),e(x,Y_o),e(x,du),e(du,nse),e(nse,K_o),e(du,Z_o),e(du,ZI),e(ZI,e1o),e(du,o1o),e(x,r1o),e(x,cu),e(cu,sse),e(sse,t1o),e(cu,a1o),e(cu,eq),e(eq,n1o),e(cu,s1o),e(x,l1o),e(x,fu),e(fu,lse),e(lse,i1o),e(fu,d1o),e(fu,oq),e(oq,c1o),e(fu,f1o),e(x,m1o),e(x,mu),e(mu,ise),e(ise,g1o),e(mu,h1o),e(mu,rq),e(rq,p1o),e(mu,u1o),e(x,_1o),e(x,gu),e(gu,dse),e(dse,b1o),e(gu,v1o),e(gu,tq),e(tq,F1o),e(gu,T1o),e(x,M1o),e(x,hu),e(hu,cse),e(cse,E1o),e(hu,C1o),e(hu,aq),e(aq,w1o),e(hu,A1o),e(x,y1o),e(x,pu),e(pu,fse),e(fse,L1o),e(pu,x1o),e(pu,nq),e(nq,$1o),e(pu,k1o),e(x,S1o),e(x,uu),e(uu,mse),e(mse,R1o),e(uu,B1o),e(uu,sq),e(sq,P1o),e(uu,I1o),e(x,q1o),e(x,_u),e(_u,gse),e(gse,N1o),e(_u,j1o),e(_u,lq),e(lq,D1o),e(_u,G1o),e(x,O1o),e(x,bu),e(bu,hse),e(hse,V1o),e(bu,X1o),e(bu,iq),e(iq,z1o),e(bu,Q1o),e(x,W1o),e(x,vu),e(vu,pse),e(pse,H1o),e(vu,U1o),e(vu,dq),e(dq,J1o),e(vu,Y1o),e(x,K1o),e(x,Fu),e(Fu,use),e(use,Z1o),e(Fu,e8o),e(Fu,cq),e(cq,o8o),e(Fu,r8o),e(x,t8o),e(x,Tu),e(Tu,_se),e(_se,a8o),e(Tu,n8o),e(Tu,fq),e(fq,s8o),e(Tu,l8o),e(x,i8o),e(x,Mu),e(Mu,bse),e(bse,d8o),e(Mu,c8o),e(Mu,mq),e(mq,f8o),e(Mu,m8o),e(x,g8o),e(x,Eu),e(Eu,vse),e(vse,h8o),e(Eu,p8o),e(Eu,gq),e(gq,u8o),e(Eu,_8o),e(x,b8o),e(x,Cu),e(Cu,Fse),e(Fse,v8o),e(Cu,F8o),e(Cu,hq),e(hq,T8o),e(Cu,M8o),e(x,E8o),e(x,wu),e(wu,Tse),e(Tse,C8o),e(wu,w8o),e(wu,pq),e(pq,A8o),e(wu,y8o),e(x,L8o),e(x,Au),e(Au,Mse),e(Mse,x8o),e(Au,$8o),e(Au,uq),e(uq,k8o),e(Au,S8o),e(x,R8o),e(x,yu),e(yu,Ese),e(Ese,B8o),e(yu,P8o),e(yu,_q),e(_q,I8o),e(yu,q8o),e(He,N8o),e(He,Lu),e(Lu,j8o),e(Lu,Cse),e(Cse,D8o),e(Lu,G8o),e(Lu,wse),e(wse,O8o),e(He,V8o),M(xu,He,null),b(f,APe,_),b(f,wi,_),e(wi,$u),e($u,Ase),M(TA,Ase,null),e(wi,X8o),e(wi,yse),e(yse,z8o),b(f,yPe,_),b(f,xo,_),M(MA,xo,null),e(xo,Q8o),e(xo,Ai),e(Ai,W8o),e(Ai,bq),e(bq,H8o),e(Ai,U8o),e(Ai,vq),e(vq,J8o),e(Ai,Y8o),e(xo,K8o),e(xo,EA),e(EA,Z8o),e(EA,Lse),e(Lse,ebo),e(EA,obo),e(xo,rbo),e(xo,rt),M(CA,rt,null),e(rt,tbo),e(rt,xse),e(xse,abo),e(rt,nbo),e(rt,yi),e(yi,sbo),e(yi,$se),e($se,lbo),e(yi,ibo),e(yi,Fq),e(Fq,dbo),e(yi,cbo),e(rt,fbo),M(ku,rt,null),e(xo,mbo),e(xo,Ue),M(wA,Ue,null),e(Ue,gbo),e(Ue,kse),e(kse,hbo),e(Ue,pbo),e(Ue,ya),e(ya,ubo),e(ya,Sse),e(Sse,_bo),e(ya,bbo),e(ya,Rse),e(Rse,vbo),e(ya,Fbo),e(ya,Bse),e(Bse,Tbo),e(ya,Mbo),e(Ue,Ebo),e(Ue,G),e(G,Su),e(Su,Pse),e(Pse,Cbo),e(Su,wbo),e(Su,Tq),e(Tq,Abo),e(Su,ybo),e(G,Lbo),e(G,Ru),e(Ru,Ise),e(Ise,xbo),e(Ru,$bo),e(Ru,Mq),e(Mq,kbo),e(Ru,Sbo),e(G,Rbo),e(G,Bu),e(Bu,qse),e(qse,Bbo),e(Bu,Pbo),e(Bu,Eq),e(Eq,Ibo),e(Bu,qbo),e(G,Nbo),e(G,Pu),e(Pu,Nse),e(Nse,jbo),e(Pu,Dbo),e(Pu,Cq),e(Cq,Gbo),e(Pu,Obo),e(G,Vbo),e(G,Iu),e(Iu,jse),e(jse,Xbo),e(Iu,zbo),e(Iu,wq),e(wq,Qbo),e(Iu,Wbo),e(G,Hbo),e(G,qu),e(qu,Dse),e(Dse,Ubo),e(qu,Jbo),e(qu,Aq),e(Aq,Ybo),e(qu,Kbo),e(G,Zbo),e(G,Nu),e(Nu,Gse),e(Gse,e2o),e(Nu,o2o),e(Nu,yq),e(yq,r2o),e(Nu,t2o),e(G,a2o),e(G,ju),e(ju,Ose),e(Ose,n2o),e(ju,s2o),e(ju,Lq),e(Lq,l2o),e(ju,i2o),e(G,d2o),e(G,Du),e(Du,Vse),e(Vse,c2o),e(Du,f2o),e(Du,xq),e(xq,m2o),e(Du,g2o),e(G,h2o),e(G,Gu),e(Gu,Xse),e(Xse,p2o),e(Gu,u2o),e(Gu,$q),e($q,_2o),e(Gu,b2o),e(G,v2o),e(G,Ou),e(Ou,zse),e(zse,F2o),e(Ou,T2o),e(Ou,kq),e(kq,M2o),e(Ou,E2o),e(G,C2o),e(G,Vu),e(Vu,Qse),e(Qse,w2o),e(Vu,A2o),e(Vu,Sq),e(Sq,y2o),e(Vu,L2o),e(G,x2o),e(G,Xu),e(Xu,Wse),e(Wse,$2o),e(Xu,k2o),e(Xu,Rq),e(Rq,S2o),e(Xu,R2o),e(G,B2o),e(G,zu),e(zu,Hse),e(Hse,P2o),e(zu,I2o),e(zu,Bq),e(Bq,q2o),e(zu,N2o),e(G,j2o),e(G,Qu),e(Qu,Use),e(Use,D2o),e(Qu,G2o),e(Qu,Pq),e(Pq,O2o),e(Qu,V2o),e(G,X2o),e(G,Wu),e(Wu,Jse),e(Jse,z2o),e(Wu,Q2o),e(Wu,Iq),e(Iq,W2o),e(Wu,H2o),e(G,U2o),e(G,Hu),e(Hu,Yse),e(Yse,J2o),e(Hu,Y2o),e(Hu,qq),e(qq,K2o),e(Hu,Z2o),e(G,evo),e(G,Uu),e(Uu,Kse),e(Kse,ovo),e(Uu,rvo),e(Uu,Nq),e(Nq,tvo),e(Uu,avo),e(G,nvo),e(G,Ju),e(Ju,Zse),e(Zse,svo),e(Ju,lvo),e(Ju,jq),e(jq,ivo),e(Ju,dvo),e(G,cvo),e(G,Yu),e(Yu,ele),e(ele,fvo),e(Yu,mvo),e(Yu,Dq),e(Dq,gvo),e(Yu,hvo),e(G,pvo),e(G,Ku),e(Ku,ole),e(ole,uvo),e(Ku,_vo),e(Ku,Gq),e(Gq,bvo),e(Ku,vvo),e(G,Fvo),e(G,Zu),e(Zu,rle),e(rle,Tvo),e(Zu,Mvo),e(Zu,Oq),e(Oq,Evo),e(Zu,Cvo),e(G,wvo),e(G,e_),e(e_,tle),e(tle,Avo),e(e_,yvo),e(e_,Vq),e(Vq,Lvo),e(e_,xvo),e(G,$vo),e(G,o_),e(o_,ale),e(ale,kvo),e(o_,Svo),e(o_,Xq),e(Xq,Rvo),e(o_,Bvo),e(G,Pvo),e(G,r_),e(r_,nle),e(nle,Ivo),e(r_,qvo),e(r_,zq),e(zq,Nvo),e(r_,jvo),e(G,Dvo),e(G,t_),e(t_,sle),e(sle,Gvo),e(t_,Ovo),e(t_,Qq),e(Qq,Vvo),e(t_,Xvo),e(G,zvo),e(G,a_),e(a_,lle),e(lle,Qvo),e(a_,Wvo),e(a_,Wq),e(Wq,Hvo),e(a_,Uvo),e(G,Jvo),e(G,n_),e(n_,ile),e(ile,Yvo),e(n_,Kvo),e(n_,Hq),e(Hq,Zvo),e(n_,eFo),e(G,oFo),e(G,s_),e(s_,dle),e(dle,rFo),e(s_,tFo),e(s_,Uq),e(Uq,aFo),e(s_,nFo),e(G,sFo),e(G,l_),e(l_,cle),e(cle,lFo),e(l_,iFo),e(l_,Jq),e(Jq,dFo),e(l_,cFo),e(G,fFo),e(G,i_),e(i_,fle),e(fle,mFo),e(i_,gFo),e(i_,Yq),e(Yq,hFo),e(i_,pFo),e(G,uFo),e(G,d_),e(d_,mle),e(mle,_Fo),e(d_,bFo),e(d_,Kq),e(Kq,vFo),e(d_,FFo),e(G,TFo),e(G,c_),e(c_,gle),e(gle,MFo),e(c_,EFo),e(c_,Zq),e(Zq,CFo),e(c_,wFo),e(G,AFo),e(G,f_),e(f_,hle),e(hle,yFo),e(f_,LFo),e(f_,eN),e(eN,xFo),e(f_,$Fo),e(G,kFo),e(G,m_),e(m_,ple),e(ple,SFo),e(m_,RFo),e(m_,oN),e(oN,BFo),e(m_,PFo),e(G,IFo),e(G,g_),e(g_,ule),e(ule,qFo),e(g_,NFo),e(g_,rN),e(rN,jFo),e(g_,DFo),e(G,GFo),e(G,h_),e(h_,_le),e(_le,OFo),e(h_,VFo),e(h_,tN),e(tN,XFo),e(h_,zFo),e(G,QFo),e(G,p_),e(p_,ble),e(ble,WFo),e(p_,HFo),e(p_,aN),e(aN,UFo),e(p_,JFo),e(G,YFo),e(G,u_),e(u_,vle),e(vle,KFo),e(u_,ZFo),e(u_,nN),e(nN,e6o),e(u_,o6o),e(Ue,r6o),e(Ue,__),e(__,t6o),e(__,Fle),e(Fle,a6o),e(__,n6o),e(__,Tle),e(Tle,s6o),e(Ue,l6o),M(b_,Ue,null),b(f,LPe,_),b(f,Li,_),e(Li,v_),e(v_,Mle),M(AA,Mle,null),e(Li,i6o),e(Li,Ele),e(Ele,d6o),b(f,xPe,_),b(f,$o,_),M(yA,$o,null),e($o,c6o),e($o,xi),e(xi,f6o),e(xi,sN),e(sN,m6o),e(xi,g6o),e(xi,lN),e(lN,h6o),e(xi,p6o),e($o,u6o),e($o,LA),e(LA,_6o),e(LA,Cle),e(Cle,b6o),e(LA,v6o),e($o,F6o),e($o,tt),M(xA,tt,null),e(tt,T6o),e(tt,wle),e(wle,M6o),e(tt,E6o),e(tt,$i),e($i,C6o),e($i,Ale),e(Ale,w6o),e($i,A6o),e($i,iN),e(iN,y6o),e($i,L6o),e(tt,x6o),M(F_,tt,null),e($o,$6o),e($o,Je),M($A,Je,null),e(Je,k6o),e(Je,yle),e(yle,S6o),e(Je,R6o),e(Je,La),e(La,B6o),e(La,Lle),e(Lle,P6o),e(La,I6o),e(La,xle),e(xle,q6o),e(La,N6o),e(La,$le),e($le,j6o),e(La,D6o),e(Je,G6o),e(Je,z),e(z,T_),e(T_,kle),e(kle,O6o),e(T_,V6o),e(T_,dN),e(dN,X6o),e(T_,z6o),e(z,Q6o),e(z,M_),e(M_,Sle),e(Sle,W6o),e(M_,H6o),e(M_,cN),e(cN,U6o),e(M_,J6o),e(z,Y6o),e(z,E_),e(E_,Rle),e(Rle,K6o),e(E_,Z6o),e(E_,fN),e(fN,eTo),e(E_,oTo),e(z,rTo),e(z,C_),e(C_,Ble),e(Ble,tTo),e(C_,aTo),e(C_,mN),e(mN,nTo),e(C_,sTo),e(z,lTo),e(z,w_),e(w_,Ple),e(Ple,iTo),e(w_,dTo),e(w_,gN),e(gN,cTo),e(w_,fTo),e(z,mTo),e(z,A_),e(A_,Ile),e(Ile,gTo),e(A_,hTo),e(A_,hN),e(hN,pTo),e(A_,uTo),e(z,_To),e(z,y_),e(y_,qle),e(qle,bTo),e(y_,vTo),e(y_,pN),e(pN,FTo),e(y_,TTo),e(z,MTo),e(z,L_),e(L_,Nle),e(Nle,ETo),e(L_,CTo),e(L_,uN),e(uN,wTo),e(L_,ATo),e(z,yTo),e(z,x_),e(x_,jle),e(jle,LTo),e(x_,xTo),e(x_,_N),e(_N,$To),e(x_,kTo),e(z,STo),e(z,$_),e($_,Dle),e(Dle,RTo),e($_,BTo),e($_,bN),e(bN,PTo),e($_,ITo),e(z,qTo),e(z,k_),e(k_,Gle),e(Gle,NTo),e(k_,jTo),e(k_,vN),e(vN,DTo),e(k_,GTo),e(z,OTo),e(z,S_),e(S_,Ole),e(Ole,VTo),e(S_,XTo),e(S_,FN),e(FN,zTo),e(S_,QTo),e(z,WTo),e(z,R_),e(R_,Vle),e(Vle,HTo),e(R_,UTo),e(R_,TN),e(TN,JTo),e(R_,YTo),e(z,KTo),e(z,B_),e(B_,Xle),e(Xle,ZTo),e(B_,e9o),e(B_,MN),e(MN,o9o),e(B_,r9o),e(z,t9o),e(z,P_),e(P_,zle),e(zle,a9o),e(P_,n9o),e(P_,EN),e(EN,s9o),e(P_,l9o),e(z,i9o),e(z,I_),e(I_,Qle),e(Qle,d9o),e(I_,c9o),e(I_,CN),e(CN,f9o),e(I_,m9o),e(z,g9o),e(z,q_),e(q_,Wle),e(Wle,h9o),e(q_,p9o),e(q_,wN),e(wN,u9o),e(q_,_9o),e(z,b9o),e(z,N_),e(N_,Hle),e(Hle,v9o),e(N_,F9o),e(N_,AN),e(AN,T9o),e(N_,M9o),e(z,E9o),e(z,j_),e(j_,Ule),e(Ule,C9o),e(j_,w9o),e(j_,yN),e(yN,A9o),e(j_,y9o),e(z,L9o),e(z,D_),e(D_,Jle),e(Jle,x9o),e(D_,$9o),e(D_,LN),e(LN,k9o),e(D_,S9o),e(z,R9o),e(z,G_),e(G_,Yle),e(Yle,B9o),e(G_,P9o),e(G_,xN),e(xN,I9o),e(G_,q9o),e(z,N9o),e(z,O_),e(O_,Kle),e(Kle,j9o),e(O_,D9o),e(O_,$N),e($N,G9o),e(O_,O9o),e(z,V9o),e(z,V_),e(V_,Zle),e(Zle,X9o),e(V_,z9o),e(V_,kN),e(kN,Q9o),e(V_,W9o),e(z,H9o),e(z,X_),e(X_,eie),e(eie,U9o),e(X_,J9o),e(X_,SN),e(SN,Y9o),e(X_,K9o),e(z,Z9o),e(z,z_),e(z_,oie),e(oie,eMo),e(z_,oMo),e(z_,RN),e(RN,rMo),e(z_,tMo),e(z,aMo),e(z,Q_),e(Q_,rie),e(rie,nMo),e(Q_,sMo),e(Q_,BN),e(BN,lMo),e(Q_,iMo),e(z,dMo),e(z,W_),e(W_,tie),e(tie,cMo),e(W_,fMo),e(W_,PN),e(PN,mMo),e(W_,gMo),e(z,hMo),e(z,H_),e(H_,aie),e(aie,pMo),e(H_,uMo),e(H_,IN),e(IN,_Mo),e(H_,bMo),e(z,vMo),e(z,U_),e(U_,nie),e(nie,FMo),e(U_,TMo),e(U_,qN),e(qN,MMo),e(U_,EMo),e(z,CMo),e(z,J_),e(J_,sie),e(sie,wMo),e(J_,AMo),e(J_,NN),e(NN,yMo),e(J_,LMo),e(z,xMo),e(z,Y_),e(Y_,lie),e(lie,$Mo),e(Y_,kMo),e(Y_,jN),e(jN,SMo),e(Y_,RMo),e(z,BMo),e(z,K_),e(K_,iie),e(iie,PMo),e(K_,IMo),e(K_,DN),e(DN,qMo),e(K_,NMo),e(z,jMo),e(z,Z_),e(Z_,die),e(die,DMo),e(Z_,GMo),e(Z_,GN),e(GN,OMo),e(Z_,VMo),e(z,XMo),e(z,e1),e(e1,cie),e(cie,zMo),e(e1,QMo),e(e1,ON),e(ON,WMo),e(e1,HMo),e(z,UMo),e(z,o1),e(o1,fie),e(fie,JMo),e(o1,YMo),e(o1,VN),e(VN,KMo),e(o1,ZMo),e(Je,e4o),e(Je,r1),e(r1,o4o),e(r1,mie),e(mie,r4o),e(r1,t4o),e(r1,gie),e(gie,a4o),e(Je,n4o),M(t1,Je,null),b(f,$Pe,_),b(f,ki,_),e(ki,a1),e(a1,hie),M(kA,hie,null),e(ki,s4o),e(ki,pie),e(pie,l4o),b(f,kPe,_),b(f,ko,_),M(SA,ko,null),e(ko,i4o),e(ko,Si),e(Si,d4o),e(Si,XN),e(XN,c4o),e(Si,f4o),e(Si,zN),e(zN,m4o),e(Si,g4o),e(ko,h4o),e(ko,RA),e(RA,p4o),e(RA,uie),e(uie,u4o),e(RA,_4o),e(ko,b4o),e(ko,at),M(BA,at,null),e(at,v4o),e(at,_ie),e(_ie,F4o),e(at,T4o),e(at,Ri),e(Ri,M4o),e(Ri,bie),e(bie,E4o),e(Ri,C4o),e(Ri,QN),e(QN,w4o),e(Ri,A4o),e(at,y4o),M(n1,at,null),e(ko,L4o),e(ko,Ye),M(PA,Ye,null),e(Ye,x4o),e(Ye,vie),e(vie,$4o),e(Ye,k4o),e(Ye,xa),e(xa,S4o),e(xa,Fie),e(Fie,R4o),e(xa,B4o),e(xa,Tie),e(Tie,P4o),e(xa,I4o),e(xa,Mie),e(Mie,q4o),e(xa,N4o),e(Ye,j4o),e(Ye,Q),e(Q,s1),e(s1,Eie),e(Eie,D4o),e(s1,G4o),e(s1,WN),e(WN,O4o),e(s1,V4o),e(Q,X4o),e(Q,l1),e(l1,Cie),e(Cie,z4o),e(l1,Q4o),e(l1,HN),e(HN,W4o),e(l1,H4o),e(Q,U4o),e(Q,i1),e(i1,wie),e(wie,J4o),e(i1,Y4o),e(i1,UN),e(UN,K4o),e(i1,Z4o),e(Q,eEo),e(Q,d1),e(d1,Aie),e(Aie,oEo),e(d1,rEo),e(d1,JN),e(JN,tEo),e(d1,aEo),e(Q,nEo),e(Q,c1),e(c1,yie),e(yie,sEo),e(c1,lEo),e(c1,YN),e(YN,iEo),e(c1,dEo),e(Q,cEo),e(Q,f1),e(f1,Lie),e(Lie,fEo),e(f1,mEo),e(f1,KN),e(KN,gEo),e(f1,hEo),e(Q,pEo),e(Q,m1),e(m1,xie),e(xie,uEo),e(m1,_Eo),e(m1,ZN),e(ZN,bEo),e(m1,vEo),e(Q,FEo),e(Q,g1),e(g1,$ie),e($ie,TEo),e(g1,MEo),e(g1,ej),e(ej,EEo),e(g1,CEo),e(Q,wEo),e(Q,h1),e(h1,kie),e(kie,AEo),e(h1,yEo),e(h1,oj),e(oj,LEo),e(h1,xEo),e(Q,$Eo),e(Q,p1),e(p1,Sie),e(Sie,kEo),e(p1,SEo),e(p1,rj),e(rj,REo),e(p1,BEo),e(Q,PEo),e(Q,u1),e(u1,Rie),e(Rie,IEo),e(u1,qEo),e(u1,tj),e(tj,NEo),e(u1,jEo),e(Q,DEo),e(Q,_1),e(_1,Bie),e(Bie,GEo),e(_1,OEo),e(_1,aj),e(aj,VEo),e(_1,XEo),e(Q,zEo),e(Q,b1),e(b1,Pie),e(Pie,QEo),e(b1,WEo),e(b1,nj),e(nj,HEo),e(b1,UEo),e(Q,JEo),e(Q,v1),e(v1,Iie),e(Iie,YEo),e(v1,KEo),e(v1,sj),e(sj,ZEo),e(v1,e5o),e(Q,o5o),e(Q,F1),e(F1,qie),e(qie,r5o),e(F1,t5o),e(F1,lj),e(lj,a5o),e(F1,n5o),e(Q,s5o),e(Q,T1),e(T1,Nie),e(Nie,l5o),e(T1,i5o),e(T1,ij),e(ij,d5o),e(T1,c5o),e(Q,f5o),e(Q,M1),e(M1,jie),e(jie,m5o),e(M1,g5o),e(M1,dj),e(dj,h5o),e(M1,p5o),e(Q,u5o),e(Q,E1),e(E1,Die),e(Die,_5o),e(E1,b5o),e(E1,cj),e(cj,v5o),e(E1,F5o),e(Q,T5o),e(Q,C1),e(C1,Gie),e(Gie,M5o),e(C1,E5o),e(C1,fj),e(fj,C5o),e(C1,w5o),e(Q,A5o),e(Q,w1),e(w1,Oie),e(Oie,y5o),e(w1,L5o),e(w1,mj),e(mj,x5o),e(w1,$5o),e(Q,k5o),e(Q,A1),e(A1,Vie),e(Vie,S5o),e(A1,R5o),e(A1,gj),e(gj,B5o),e(A1,P5o),e(Q,I5o),e(Q,y1),e(y1,Xie),e(Xie,q5o),e(y1,N5o),e(y1,hj),e(hj,j5o),e(y1,D5o),e(Q,G5o),e(Q,L1),e(L1,zie),e(zie,O5o),e(L1,V5o),e(L1,pj),e(pj,X5o),e(L1,z5o),e(Q,Q5o),e(Q,x1),e(x1,Qie),e(Qie,W5o),e(x1,H5o),e(x1,uj),e(uj,U5o),e(x1,J5o),e(Q,Y5o),e(Q,$1),e($1,Wie),e(Wie,K5o),e($1,Z5o),e($1,_j),e(_j,eCo),e($1,oCo),e(Q,rCo),e(Q,k1),e(k1,Hie),e(Hie,tCo),e(k1,aCo),e(k1,bj),e(bj,nCo),e(k1,sCo),e(Q,lCo),e(Q,S1),e(S1,Uie),e(Uie,iCo),e(S1,dCo),e(S1,vj),e(vj,cCo),e(S1,fCo),e(Q,mCo),e(Q,R1),e(R1,Jie),e(Jie,gCo),e(R1,hCo),e(R1,Fj),e(Fj,pCo),e(R1,uCo),e(Q,_Co),e(Q,B1),e(B1,Yie),e(Yie,bCo),e(B1,vCo),e(B1,Tj),e(Tj,FCo),e(B1,TCo),e(Q,MCo),e(Q,P1),e(P1,Kie),e(Kie,ECo),e(P1,CCo),e(P1,Mj),e(Mj,wCo),e(P1,ACo),e(Q,yCo),e(Q,I1),e(I1,Zie),e(Zie,LCo),e(I1,xCo),e(I1,ede),e(ede,$Co),e(I1,kCo),e(Q,SCo),e(Q,q1),e(q1,ode),e(ode,RCo),e(q1,BCo),e(q1,Ej),e(Ej,PCo),e(q1,ICo),e(Q,qCo),e(Q,N1),e(N1,rde),e(rde,NCo),e(N1,jCo),e(N1,Cj),e(Cj,DCo),e(N1,GCo),e(Q,OCo),e(Q,j1),e(j1,tde),e(tde,VCo),e(j1,XCo),e(j1,wj),e(wj,zCo),e(j1,QCo),e(Q,WCo),e(Q,D1),e(D1,ade),e(ade,HCo),e(D1,UCo),e(D1,Aj),e(Aj,JCo),e(D1,YCo),e(Ye,KCo),e(Ye,G1),e(G1,ZCo),e(G1,nde),e(nde,e3o),e(G1,o3o),e(G1,sde),e(sde,r3o),e(Ye,t3o),M(O1,Ye,null),b(f,SPe,_),b(f,Bi,_),e(Bi,V1),e(V1,lde),M(IA,lde,null),e(Bi,a3o),e(Bi,ide),e(ide,n3o),b(f,RPe,_),b(f,So,_),M(qA,So,null),e(So,s3o),e(So,Pi),e(Pi,l3o),e(Pi,yj),e(yj,i3o),e(Pi,d3o),e(Pi,Lj),e(Lj,c3o),e(Pi,f3o),e(So,m3o),e(So,NA),e(NA,g3o),e(NA,dde),e(dde,h3o),e(NA,p3o),e(So,u3o),e(So,nt),M(jA,nt,null),e(nt,_3o),e(nt,cde),e(cde,b3o),e(nt,v3o),e(nt,Ii),e(Ii,F3o),e(Ii,fde),e(fde,T3o),e(Ii,M3o),e(Ii,xj),e(xj,E3o),e(Ii,C3o),e(nt,w3o),M(X1,nt,null),e(So,A3o),e(So,Ke),M(DA,Ke,null),e(Ke,y3o),e(Ke,mde),e(mde,L3o),e(Ke,x3o),e(Ke,$a),e($a,$3o),e($a,gde),e(gde,k3o),e($a,S3o),e($a,hde),e(hde,R3o),e($a,B3o),e($a,pde),e(pde,P3o),e($a,I3o),e(Ke,q3o),e(Ke,he),e(he,z1),e(z1,ude),e(ude,N3o),e(z1,j3o),e(z1,$j),e($j,D3o),e(z1,G3o),e(he,O3o),e(he,Q1),e(Q1,_de),e(_de,V3o),e(Q1,X3o),e(Q1,kj),e(kj,z3o),e(Q1,Q3o),e(he,W3o),e(he,W1),e(W1,bde),e(bde,H3o),e(W1,U3o),e(W1,Sj),e(Sj,J3o),e(W1,Y3o),e(he,K3o),e(he,H1),e(H1,vde),e(vde,Z3o),e(H1,ewo),e(H1,Rj),e(Rj,owo),e(H1,rwo),e(he,two),e(he,U1),e(U1,Fde),e(Fde,awo),e(U1,nwo),e(U1,Bj),e(Bj,swo),e(U1,lwo),e(he,iwo),e(he,J1),e(J1,Tde),e(Tde,dwo),e(J1,cwo),e(J1,Pj),e(Pj,fwo),e(J1,mwo),e(he,gwo),e(he,Y1),e(Y1,Mde),e(Mde,hwo),e(Y1,pwo),e(Y1,Ij),e(Ij,uwo),e(Y1,_wo),e(he,bwo),e(he,K1),e(K1,Ede),e(Ede,vwo),e(K1,Fwo),e(K1,qj),e(qj,Two),e(K1,Mwo),e(he,Ewo),e(he,Z1),e(Z1,Cde),e(Cde,Cwo),e(Z1,wwo),e(Z1,Nj),e(Nj,Awo),e(Z1,ywo),e(he,Lwo),e(he,e8),e(e8,wde),e(wde,xwo),e(e8,$wo),e(e8,jj),e(jj,kwo),e(e8,Swo),e(he,Rwo),e(he,o8),e(o8,Ade),e(Ade,Bwo),e(o8,Pwo),e(o8,Dj),e(Dj,Iwo),e(o8,qwo),e(he,Nwo),e(he,r8),e(r8,yde),e(yde,jwo),e(r8,Dwo),e(r8,Gj),e(Gj,Gwo),e(r8,Owo),e(he,Vwo),e(he,t8),e(t8,Lde),e(Lde,Xwo),e(t8,zwo),e(t8,Oj),e(Oj,Qwo),e(t8,Wwo),e(he,Hwo),e(he,a8),e(a8,xde),e(xde,Uwo),e(a8,Jwo),e(a8,Vj),e(Vj,Ywo),e(a8,Kwo),e(he,Zwo),e(he,n8),e(n8,$de),e($de,eAo),e(n8,oAo),e(n8,Xj),e(Xj,rAo),e(n8,tAo),e(he,aAo),e(he,s8),e(s8,kde),e(kde,nAo),e(s8,sAo),e(s8,zj),e(zj,lAo),e(s8,iAo),e(he,dAo),e(he,l8),e(l8,Sde),e(Sde,cAo),e(l8,fAo),e(l8,Qj),e(Qj,mAo),e(l8,gAo),e(Ke,hAo),e(Ke,i8),e(i8,pAo),e(i8,Rde),e(Rde,uAo),e(i8,_Ao),e(i8,Bde),e(Bde,bAo),e(Ke,vAo),M(d8,Ke,null),b(f,BPe,_),b(f,qi,_),e(qi,c8),e(c8,Pde),M(GA,Pde,null),e(qi,FAo),e(qi,Ide),e(Ide,TAo),b(f,PPe,_),b(f,Ro,_),M(OA,Ro,null),e(Ro,MAo),e(Ro,Ni),e(Ni,EAo),e(Ni,Wj),e(Wj,CAo),e(Ni,wAo),e(Ni,Hj),e(Hj,AAo),e(Ni,yAo),e(Ro,LAo),e(Ro,VA),e(VA,xAo),e(VA,qde),e(qde,$Ao),e(VA,kAo),e(Ro,SAo),e(Ro,st),M(XA,st,null),e(st,RAo),e(st,Nde),e(Nde,BAo),e(st,PAo),e(st,ji),e(ji,IAo),e(ji,jde),e(jde,qAo),e(ji,NAo),e(ji,Uj),e(Uj,jAo),e(ji,DAo),e(st,GAo),M(f8,st,null),e(Ro,OAo),e(Ro,Ze),M(zA,Ze,null),e(Ze,VAo),e(Ze,Dde),e(Dde,XAo),e(Ze,zAo),e(Ze,ka),e(ka,QAo),e(ka,Gde),e(Gde,WAo),e(ka,HAo),e(ka,Ode),e(Ode,UAo),e(ka,JAo),e(ka,Vde),e(Vde,YAo),e(ka,KAo),e(Ze,ZAo),e(Ze,q),e(q,m8),e(m8,Xde),e(Xde,e0o),e(m8,o0o),e(m8,Jj),e(Jj,r0o),e(m8,t0o),e(q,a0o),e(q,g8),e(g8,zde),e(zde,n0o),e(g8,s0o),e(g8,Yj),e(Yj,l0o),e(g8,i0o),e(q,d0o),e(q,h8),e(h8,Qde),e(Qde,c0o),e(h8,f0o),e(h8,Kj),e(Kj,m0o),e(h8,g0o),e(q,h0o),e(q,p8),e(p8,Wde),e(Wde,p0o),e(p8,u0o),e(p8,Zj),e(Zj,_0o),e(p8,b0o),e(q,v0o),e(q,u8),e(u8,Hde),e(Hde,F0o),e(u8,T0o),e(u8,eD),e(eD,M0o),e(u8,E0o),e(q,C0o),e(q,_8),e(_8,Ude),e(Ude,w0o),e(_8,A0o),e(_8,oD),e(oD,y0o),e(_8,L0o),e(q,x0o),e(q,b8),e(b8,Jde),e(Jde,$0o),e(b8,k0o),e(b8,rD),e(rD,S0o),e(b8,R0o),e(q,B0o),e(q,v8),e(v8,Yde),e(Yde,P0o),e(v8,I0o),e(v8,tD),e(tD,q0o),e(v8,N0o),e(q,j0o),e(q,F8),e(F8,Kde),e(Kde,D0o),e(F8,G0o),e(F8,aD),e(aD,O0o),e(F8,V0o),e(q,X0o),e(q,T8),e(T8,Zde),e(Zde,z0o),e(T8,Q0o),e(T8,nD),e(nD,W0o),e(T8,H0o),e(q,U0o),e(q,M8),e(M8,ece),e(ece,J0o),e(M8,Y0o),e(M8,sD),e(sD,K0o),e(M8,Z0o),e(q,eyo),e(q,E8),e(E8,oce),e(oce,oyo),e(E8,ryo),e(E8,lD),e(lD,tyo),e(E8,ayo),e(q,nyo),e(q,C8),e(C8,rce),e(rce,syo),e(C8,lyo),e(C8,iD),e(iD,iyo),e(C8,dyo),e(q,cyo),e(q,w8),e(w8,tce),e(tce,fyo),e(w8,myo),e(w8,dD),e(dD,gyo),e(w8,hyo),e(q,pyo),e(q,A8),e(A8,ace),e(ace,uyo),e(A8,_yo),e(A8,cD),e(cD,byo),e(A8,vyo),e(q,Fyo),e(q,y8),e(y8,nce),e(nce,Tyo),e(y8,Myo),e(y8,fD),e(fD,Eyo),e(y8,Cyo),e(q,wyo),e(q,L8),e(L8,sce),e(sce,Ayo),e(L8,yyo),e(L8,mD),e(mD,Lyo),e(L8,xyo),e(q,$yo),e(q,x8),e(x8,lce),e(lce,kyo),e(x8,Syo),e(x8,gD),e(gD,Ryo),e(x8,Byo),e(q,Pyo),e(q,$8),e($8,ice),e(ice,Iyo),e($8,qyo),e($8,hD),e(hD,Nyo),e($8,jyo),e(q,Dyo),e(q,k8),e(k8,dce),e(dce,Gyo),e(k8,Oyo),e(k8,pD),e(pD,Vyo),e(k8,Xyo),e(q,zyo),e(q,S8),e(S8,cce),e(cce,Qyo),e(S8,Wyo),e(S8,uD),e(uD,Hyo),e(S8,Uyo),e(q,Jyo),e(q,R8),e(R8,fce),e(fce,Yyo),e(R8,Kyo),e(R8,_D),e(_D,Zyo),e(R8,eLo),e(q,oLo),e(q,B8),e(B8,mce),e(mce,rLo),e(B8,tLo),e(B8,bD),e(bD,aLo),e(B8,nLo),e(q,sLo),e(q,P8),e(P8,gce),e(gce,lLo),e(P8,iLo),e(P8,vD),e(vD,dLo),e(P8,cLo),e(q,fLo),e(q,I8),e(I8,hce),e(hce,mLo),e(I8,gLo),e(I8,FD),e(FD,hLo),e(I8,pLo),e(q,uLo),e(q,q8),e(q8,pce),e(pce,_Lo),e(q8,bLo),e(q8,TD),e(TD,vLo),e(q8,FLo),e(q,TLo),e(q,N8),e(N8,uce),e(uce,MLo),e(N8,ELo),e(N8,MD),e(MD,CLo),e(N8,wLo),e(q,ALo),e(q,j8),e(j8,_ce),e(_ce,yLo),e(j8,LLo),e(j8,ED),e(ED,xLo),e(j8,$Lo),e(q,kLo),e(q,D8),e(D8,bce),e(bce,SLo),e(D8,RLo),e(D8,CD),e(CD,BLo),e(D8,PLo),e(q,ILo),e(q,G8),e(G8,vce),e(vce,qLo),e(G8,NLo),e(G8,wD),e(wD,jLo),e(G8,DLo),e(q,GLo),e(q,O8),e(O8,Fce),e(Fce,OLo),e(O8,VLo),e(O8,AD),e(AD,XLo),e(O8,zLo),e(q,QLo),e(q,V8),e(V8,Tce),e(Tce,WLo),e(V8,HLo),e(V8,yD),e(yD,ULo),e(V8,JLo),e(q,YLo),e(q,X8),e(X8,Mce),e(Mce,KLo),e(X8,ZLo),e(X8,LD),e(LD,exo),e(X8,oxo),e(q,rxo),e(q,z8),e(z8,Ece),e(Ece,txo),e(z8,axo),e(z8,xD),e(xD,nxo),e(z8,sxo),e(q,lxo),e(q,Q8),e(Q8,Cce),e(Cce,ixo),e(Q8,dxo),e(Q8,$D),e($D,cxo),e(Q8,fxo),e(q,mxo),e(q,W8),e(W8,wce),e(wce,gxo),e(W8,hxo),e(W8,kD),e(kD,pxo),e(W8,uxo),e(q,_xo),e(q,H8),e(H8,Ace),e(Ace,bxo),e(H8,vxo),e(H8,SD),e(SD,Fxo),e(H8,Txo),e(q,Mxo),e(q,U8),e(U8,yce),e(yce,Exo),e(U8,Cxo),e(U8,RD),e(RD,wxo),e(U8,Axo),e(q,yxo),e(q,J8),e(J8,Lce),e(Lce,Lxo),e(J8,xxo),e(J8,BD),e(BD,$xo),e(J8,kxo),e(q,Sxo),e(q,Y8),e(Y8,xce),e(xce,Rxo),e(Y8,Bxo),e(Y8,PD),e(PD,Pxo),e(Y8,Ixo),e(q,qxo),e(q,K8),e(K8,$ce),e($ce,Nxo),e(K8,jxo),e(K8,ID),e(ID,Dxo),e(K8,Gxo),e(q,Oxo),e(q,Z8),e(Z8,kce),e(kce,Vxo),e(Z8,Xxo),e(Z8,qD),e(qD,zxo),e(Z8,Qxo),e(q,Wxo),e(q,eb),e(eb,Sce),e(Sce,Hxo),e(eb,Uxo),e(eb,ND),e(ND,Jxo),e(eb,Yxo),e(q,Kxo),e(q,ob),e(ob,Rce),e(Rce,Zxo),e(ob,e7o),e(ob,jD),e(jD,o7o),e(ob,r7o),e(q,t7o),e(q,rb),e(rb,Bce),e(Bce,a7o),e(rb,n7o),e(rb,DD),e(DD,s7o),e(rb,l7o),e(q,i7o),e(q,tb),e(tb,Pce),e(Pce,d7o),e(tb,c7o),e(tb,GD),e(GD,f7o),e(tb,m7o),e(q,g7o),e(q,ab),e(ab,Ice),e(Ice,h7o),e(ab,p7o),e(ab,OD),e(OD,u7o),e(ab,_7o),e(Ze,b7o),e(Ze,nb),e(nb,v7o),e(nb,qce),e(qce,F7o),e(nb,T7o),e(nb,Nce),e(Nce,M7o),e(Ze,E7o),M(sb,Ze,null),b(f,IPe,_),b(f,Di,_),e(Di,lb),e(lb,jce),M(QA,jce,null),e(Di,C7o),e(Di,Dce),e(Dce,w7o),b(f,qPe,_),b(f,Bo,_),M(WA,Bo,null),e(Bo,A7o),e(Bo,Gi),e(Gi,y7o),e(Gi,VD),e(VD,L7o),e(Gi,x7o),e(Gi,XD),e(XD,$7o),e(Gi,k7o),e(Bo,S7o),e(Bo,HA),e(HA,R7o),e(HA,Gce),e(Gce,B7o),e(HA,P7o),e(Bo,I7o),e(Bo,lt),M(UA,lt,null),e(lt,q7o),e(lt,Oce),e(Oce,N7o),e(lt,j7o),e(lt,Oi),e(Oi,D7o),e(Oi,Vce),e(Vce,G7o),e(Oi,O7o),e(Oi,zD),e(zD,V7o),e(Oi,X7o),e(lt,z7o),M(ib,lt,null),e(Bo,Q7o),e(Bo,eo),M(JA,eo,null),e(eo,W7o),e(eo,Xce),e(Xce,H7o),e(eo,U7o),e(eo,Sa),e(Sa,J7o),e(Sa,zce),e(zce,Y7o),e(Sa,K7o),e(Sa,Qce),e(Qce,Z7o),e(Sa,e$o),e(Sa,Wce),e(Wce,o$o),e(Sa,r$o),e(eo,t$o),e(eo,Y),e(Y,db),e(db,Hce),e(Hce,a$o),e(db,n$o),e(db,QD),e(QD,s$o),e(db,l$o),e(Y,i$o),e(Y,cb),e(cb,Uce),e(Uce,d$o),e(cb,c$o),e(cb,WD),e(WD,f$o),e(cb,m$o),e(Y,g$o),e(Y,fb),e(fb,Jce),e(Jce,h$o),e(fb,p$o),e(fb,HD),e(HD,u$o),e(fb,_$o),e(Y,b$o),e(Y,mb),e(mb,Yce),e(Yce,v$o),e(mb,F$o),e(mb,UD),e(UD,T$o),e(mb,M$o),e(Y,E$o),e(Y,gb),e(gb,Kce),e(Kce,C$o),e(gb,w$o),e(gb,JD),e(JD,A$o),e(gb,y$o),e(Y,L$o),e(Y,hb),e(hb,Zce),e(Zce,x$o),e(hb,$$o),e(hb,YD),e(YD,k$o),e(hb,S$o),e(Y,R$o),e(Y,pb),e(pb,efe),e(efe,B$o),e(pb,P$o),e(pb,KD),e(KD,I$o),e(pb,q$o),e(Y,N$o),e(Y,ub),e(ub,ofe),e(ofe,j$o),e(ub,D$o),e(ub,ZD),e(ZD,G$o),e(ub,O$o),e(Y,V$o),e(Y,_b),e(_b,rfe),e(rfe,X$o),e(_b,z$o),e(_b,eG),e(eG,Q$o),e(_b,W$o),e(Y,H$o),e(Y,bb),e(bb,tfe),e(tfe,U$o),e(bb,J$o),e(bb,oG),e(oG,Y$o),e(bb,K$o),e(Y,Z$o),e(Y,vb),e(vb,afe),e(afe,eko),e(vb,oko),e(vb,rG),e(rG,rko),e(vb,tko),e(Y,ako),e(Y,Fb),e(Fb,nfe),e(nfe,nko),e(Fb,sko),e(Fb,tG),e(tG,lko),e(Fb,iko),e(Y,dko),e(Y,Tb),e(Tb,sfe),e(sfe,cko),e(Tb,fko),e(Tb,aG),e(aG,mko),e(Tb,gko),e(Y,hko),e(Y,Mb),e(Mb,lfe),e(lfe,pko),e(Mb,uko),e(Mb,nG),e(nG,_ko),e(Mb,bko),e(Y,vko),e(Y,Eb),e(Eb,ife),e(ife,Fko),e(Eb,Tko),e(Eb,sG),e(sG,Mko),e(Eb,Eko),e(Y,Cko),e(Y,Cb),e(Cb,dfe),e(dfe,wko),e(Cb,Ako),e(Cb,lG),e(lG,yko),e(Cb,Lko),e(Y,xko),e(Y,wb),e(wb,cfe),e(cfe,$ko),e(wb,kko),e(wb,iG),e(iG,Sko),e(wb,Rko),e(Y,Bko),e(Y,Ab),e(Ab,ffe),e(ffe,Pko),e(Ab,Iko),e(Ab,dG),e(dG,qko),e(Ab,Nko),e(Y,jko),e(Y,yb),e(yb,mfe),e(mfe,Dko),e(yb,Gko),e(yb,cG),e(cG,Oko),e(yb,Vko),e(Y,Xko),e(Y,Lb),e(Lb,gfe),e(gfe,zko),e(Lb,Qko),e(Lb,fG),e(fG,Wko),e(Lb,Hko),e(Y,Uko),e(Y,xb),e(xb,hfe),e(hfe,Jko),e(xb,Yko),e(xb,mG),e(mG,Kko),e(xb,Zko),e(Y,eSo),e(Y,$b),e($b,pfe),e(pfe,oSo),e($b,rSo),e($b,gG),e(gG,tSo),e($b,aSo),e(Y,nSo),e(Y,kb),e(kb,ufe),e(ufe,sSo),e(kb,lSo),e(kb,hG),e(hG,iSo),e(kb,dSo),e(Y,cSo),e(Y,Sb),e(Sb,_fe),e(_fe,fSo),e(Sb,mSo),e(Sb,pG),e(pG,gSo),e(Sb,hSo),e(Y,pSo),e(Y,Rb),e(Rb,bfe),e(bfe,uSo),e(Rb,_So),e(Rb,uG),e(uG,bSo),e(Rb,vSo),e(Y,FSo),e(Y,Bb),e(Bb,vfe),e(vfe,TSo),e(Bb,MSo),e(Bb,_G),e(_G,ESo),e(Bb,CSo),e(Y,wSo),e(Y,Pb),e(Pb,Ffe),e(Ffe,ASo),e(Pb,ySo),e(Pb,bG),e(bG,LSo),e(Pb,xSo),e(Y,$So),e(Y,Ib),e(Ib,Tfe),e(Tfe,kSo),e(Ib,SSo),e(Ib,vG),e(vG,RSo),e(Ib,BSo),e(eo,PSo),e(eo,qb),e(qb,ISo),e(qb,Mfe),e(Mfe,qSo),e(qb,NSo),e(qb,Efe),e(Efe,jSo),e(eo,DSo),M(Nb,eo,null),b(f,NPe,_),b(f,Vi,_),e(Vi,jb),e(jb,Cfe),M(YA,Cfe,null),e(Vi,GSo),e(Vi,wfe),e(wfe,OSo),b(f,jPe,_),b(f,Po,_),M(KA,Po,null),e(Po,VSo),e(Po,Xi),e(Xi,XSo),e(Xi,FG),e(FG,zSo),e(Xi,QSo),e(Xi,TG),e(TG,WSo),e(Xi,HSo),e(Po,USo),e(Po,ZA),e(ZA,JSo),e(ZA,Afe),e(Afe,YSo),e(ZA,KSo),e(Po,ZSo),e(Po,it),M(e0,it,null),e(it,eRo),e(it,yfe),e(yfe,oRo),e(it,rRo),e(it,zi),e(zi,tRo),e(zi,Lfe),e(Lfe,aRo),e(zi,nRo),e(zi,MG),e(MG,sRo),e(zi,lRo),e(it,iRo),M(Db,it,null),e(Po,dRo),e(Po,oo),M(o0,oo,null),e(oo,cRo),e(oo,xfe),e(xfe,fRo),e(oo,mRo),e(oo,Ra),e(Ra,gRo),e(Ra,$fe),e($fe,hRo),e(Ra,pRo),e(Ra,kfe),e(kfe,uRo),e(Ra,_Ro),e(Ra,Sfe),e(Sfe,bRo),e(Ra,vRo),e(oo,FRo),e(oo,Yr),e(Yr,Gb),e(Gb,Rfe),e(Rfe,TRo),e(Gb,MRo),e(Gb,EG),e(EG,ERo),e(Gb,CRo),e(Yr,wRo),e(Yr,Ob),e(Ob,Bfe),e(Bfe,ARo),e(Ob,yRo),e(Ob,CG),e(CG,LRo),e(Ob,xRo),e(Yr,$Ro),e(Yr,Vb),e(Vb,Pfe),e(Pfe,kRo),e(Vb,SRo),e(Vb,wG),e(wG,RRo),e(Vb,BRo),e(Yr,PRo),e(Yr,Xb),e(Xb,Ife),e(Ife,IRo),e(Xb,qRo),e(Xb,AG),e(AG,NRo),e(Xb,jRo),e(Yr,DRo),e(Yr,zb),e(zb,qfe),e(qfe,GRo),e(zb,ORo),e(zb,yG),e(yG,VRo),e(zb,XRo),e(oo,zRo),e(oo,Qb),e(Qb,QRo),e(Qb,Nfe),e(Nfe,WRo),e(Qb,HRo),e(Qb,jfe),e(jfe,URo),e(oo,JRo),M(Wb,oo,null),b(f,DPe,_),b(f,Qi,_),e(Qi,Hb),e(Hb,Dfe),M(r0,Dfe,null),e(Qi,YRo),e(Qi,Gfe),e(Gfe,KRo),b(f,GPe,_),b(f,Io,_),M(t0,Io,null),e(Io,ZRo),e(Io,Wi),e(Wi,eBo),e(Wi,LG),e(LG,oBo),e(Wi,rBo),e(Wi,xG),e(xG,tBo),e(Wi,aBo),e(Io,nBo),e(Io,a0),e(a0,sBo),e(a0,Ofe),e(Ofe,lBo),e(a0,iBo),e(Io,dBo),e(Io,dt),M(n0,dt,null),e(dt,cBo),e(dt,Vfe),e(Vfe,fBo),e(dt,mBo),e(dt,Hi),e(Hi,gBo),e(Hi,Xfe),e(Xfe,hBo),e(Hi,pBo),e(Hi,$G),e($G,uBo),e(Hi,_Bo),e(dt,bBo),M(Ub,dt,null),e(Io,vBo),e(Io,ro),M(s0,ro,null),e(ro,FBo),e(ro,zfe),e(zfe,TBo),e(ro,MBo),e(ro,Ba),e(Ba,EBo),e(Ba,Qfe),e(Qfe,CBo),e(Ba,wBo),e(Ba,Wfe),e(Wfe,ABo),e(Ba,yBo),e(Ba,Hfe),e(Hfe,LBo),e(Ba,xBo),e(ro,$Bo),e(ro,U),e(U,Jb),e(Jb,Ufe),e(Ufe,kBo),e(Jb,SBo),e(Jb,kG),e(kG,RBo),e(Jb,BBo),e(U,PBo),e(U,Yb),e(Yb,Jfe),e(Jfe,IBo),e(Yb,qBo),e(Yb,SG),e(SG,NBo),e(Yb,jBo),e(U,DBo),e(U,Kb),e(Kb,Yfe),e(Yfe,GBo),e(Kb,OBo),e(Kb,RG),e(RG,VBo),e(Kb,XBo),e(U,zBo),e(U,Zb),e(Zb,Kfe),e(Kfe,QBo),e(Zb,WBo),e(Zb,BG),e(BG,HBo),e(Zb,UBo),e(U,JBo),e(U,e2),e(e2,Zfe),e(Zfe,YBo),e(e2,KBo),e(e2,PG),e(PG,ZBo),e(e2,ePo),e(U,oPo),e(U,o2),e(o2,eme),e(eme,rPo),e(o2,tPo),e(o2,IG),e(IG,aPo),e(o2,nPo),e(U,sPo),e(U,r2),e(r2,ome),e(ome,lPo),e(r2,iPo),e(r2,qG),e(qG,dPo),e(r2,cPo),e(U,fPo),e(U,t2),e(t2,rme),e(rme,mPo),e(t2,gPo),e(t2,NG),e(NG,hPo),e(t2,pPo),e(U,uPo),e(U,a2),e(a2,tme),e(tme,_Po),e(a2,bPo),e(a2,jG),e(jG,vPo),e(a2,FPo),e(U,TPo),e(U,n2),e(n2,ame),e(ame,MPo),e(n2,EPo),e(n2,DG),e(DG,CPo),e(n2,wPo),e(U,APo),e(U,s2),e(s2,nme),e(nme,yPo),e(s2,LPo),e(s2,GG),e(GG,xPo),e(s2,$Po),e(U,kPo),e(U,l2),e(l2,sme),e(sme,SPo),e(l2,RPo),e(l2,OG),e(OG,BPo),e(l2,PPo),e(U,IPo),e(U,i2),e(i2,lme),e(lme,qPo),e(i2,NPo),e(i2,VG),e(VG,jPo),e(i2,DPo),e(U,GPo),e(U,d2),e(d2,ime),e(ime,OPo),e(d2,VPo),e(d2,XG),e(XG,XPo),e(d2,zPo),e(U,QPo),e(U,c2),e(c2,dme),e(dme,WPo),e(c2,HPo),e(c2,zG),e(zG,UPo),e(c2,JPo),e(U,YPo),e(U,f2),e(f2,cme),e(cme,KPo),e(f2,ZPo),e(f2,QG),e(QG,eIo),e(f2,oIo),e(U,rIo),e(U,m2),e(m2,fme),e(fme,tIo),e(m2,aIo),e(m2,WG),e(WG,nIo),e(m2,sIo),e(U,lIo),e(U,g2),e(g2,mme),e(mme,iIo),e(g2,dIo),e(g2,HG),e(HG,cIo),e(g2,fIo),e(U,mIo),e(U,h2),e(h2,gme),e(gme,gIo),e(h2,hIo),e(h2,UG),e(UG,pIo),e(h2,uIo),e(U,_Io),e(U,p2),e(p2,hme),e(hme,bIo),e(p2,vIo),e(p2,JG),e(JG,FIo),e(p2,TIo),e(U,MIo),e(U,u2),e(u2,pme),e(pme,EIo),e(u2,CIo),e(u2,YG),e(YG,wIo),e(u2,AIo),e(U,yIo),e(U,_2),e(_2,ume),e(ume,LIo),e(_2,xIo),e(_2,KG),e(KG,$Io),e(_2,kIo),e(U,SIo),e(U,b2),e(b2,_me),e(_me,RIo),e(b2,BIo),e(b2,ZG),e(ZG,PIo),e(b2,IIo),e(U,qIo),e(U,v2),e(v2,bme),e(bme,NIo),e(v2,jIo),e(v2,eO),e(eO,DIo),e(v2,GIo),e(U,OIo),e(U,F2),e(F2,vme),e(vme,VIo),e(F2,XIo),e(F2,oO),e(oO,zIo),e(F2,QIo),e(U,WIo),e(U,T2),e(T2,Fme),e(Fme,HIo),e(T2,UIo),e(T2,rO),e(rO,JIo),e(T2,YIo),e(U,KIo),e(U,M2),e(M2,Tme),e(Tme,ZIo),e(M2,eqo),e(M2,tO),e(tO,oqo),e(M2,rqo),e(U,tqo),e(U,E2),e(E2,Mme),e(Mme,aqo),e(E2,nqo),e(E2,aO),e(aO,sqo),e(E2,lqo),e(U,iqo),e(U,C2),e(C2,Eme),e(Eme,dqo),e(C2,cqo),e(C2,nO),e(nO,fqo),e(C2,mqo),e(U,gqo),e(U,w2),e(w2,Cme),e(Cme,hqo),e(w2,pqo),e(w2,sO),e(sO,uqo),e(w2,_qo),e(U,bqo),e(U,A2),e(A2,wme),e(wme,vqo),e(A2,Fqo),e(A2,lO),e(lO,Tqo),e(A2,Mqo),e(U,Eqo),e(U,y2),e(y2,Ame),e(Ame,Cqo),e(y2,wqo),e(y2,iO),e(iO,Aqo),e(y2,yqo),e(U,Lqo),e(U,L2),e(L2,yme),e(yme,xqo),e(L2,$qo),e(L2,dO),e(dO,kqo),e(L2,Sqo),e(ro,Rqo),e(ro,x2),e(x2,Bqo),e(x2,Lme),e(Lme,Pqo),e(x2,Iqo),e(x2,xme),e(xme,qqo),e(ro,Nqo),M($2,ro,null),b(f,OPe,_),b(f,Ui,_),e(Ui,k2),e(k2,$me),M(l0,$me,null),e(Ui,jqo),e(Ui,kme),e(kme,Dqo),b(f,VPe,_),b(f,qo,_),M(i0,qo,null),e(qo,Gqo),e(qo,Ji),e(Ji,Oqo),e(Ji,cO),e(cO,Vqo),e(Ji,Xqo),e(Ji,fO),e(fO,zqo),e(Ji,Qqo),e(qo,Wqo),e(qo,d0),e(d0,Hqo),e(d0,Sme),e(Sme,Uqo),e(d0,Jqo),e(qo,Yqo),e(qo,ct),M(c0,ct,null),e(ct,Kqo),e(ct,Rme),e(Rme,Zqo),e(ct,eNo),e(ct,Yi),e(Yi,oNo),e(Yi,Bme),e(Bme,rNo),e(Yi,tNo),e(Yi,mO),e(mO,aNo),e(Yi,nNo),e(ct,sNo),M(S2,ct,null),e(qo,lNo),e(qo,to),M(f0,to,null),e(to,iNo),e(to,Pme),e(Pme,dNo),e(to,cNo),e(to,Pa),e(Pa,fNo),e(Pa,Ime),e(Ime,mNo),e(Pa,gNo),e(Pa,qme),e(qme,hNo),e(Pa,pNo),e(Pa,Nme),e(Nme,uNo),e(Pa,_No),e(to,bNo),e(to,O),e(O,R2),e(R2,jme),e(jme,vNo),e(R2,FNo),e(R2,gO),e(gO,TNo),e(R2,MNo),e(O,ENo),e(O,B2),e(B2,Dme),e(Dme,CNo),e(B2,wNo),e(B2,hO),e(hO,ANo),e(B2,yNo),e(O,LNo),e(O,P2),e(P2,Gme),e(Gme,xNo),e(P2,$No),e(P2,pO),e(pO,kNo),e(P2,SNo),e(O,RNo),e(O,I2),e(I2,Ome),e(Ome,BNo),e(I2,PNo),e(I2,uO),e(uO,INo),e(I2,qNo),e(O,NNo),e(O,q2),e(q2,Vme),e(Vme,jNo),e(q2,DNo),e(q2,_O),e(_O,GNo),e(q2,ONo),e(O,VNo),e(O,N2),e(N2,Xme),e(Xme,XNo),e(N2,zNo),e(N2,bO),e(bO,QNo),e(N2,WNo),e(O,HNo),e(O,j2),e(j2,zme),e(zme,UNo),e(j2,JNo),e(j2,vO),e(vO,YNo),e(j2,KNo),e(O,ZNo),e(O,D2),e(D2,Qme),e(Qme,ejo),e(D2,ojo),e(D2,FO),e(FO,rjo),e(D2,tjo),e(O,ajo),e(O,G2),e(G2,Wme),e(Wme,njo),e(G2,sjo),e(G2,TO),e(TO,ljo),e(G2,ijo),e(O,djo),e(O,O2),e(O2,Hme),e(Hme,cjo),e(O2,fjo),e(O2,MO),e(MO,mjo),e(O2,gjo),e(O,hjo),e(O,V2),e(V2,Ume),e(Ume,pjo),e(V2,ujo),e(V2,EO),e(EO,_jo),e(V2,bjo),e(O,vjo),e(O,X2),e(X2,Jme),e(Jme,Fjo),e(X2,Tjo),e(X2,CO),e(CO,Mjo),e(X2,Ejo),e(O,Cjo),e(O,z2),e(z2,Yme),e(Yme,wjo),e(z2,Ajo),e(z2,wO),e(wO,yjo),e(z2,Ljo),e(O,xjo),e(O,Q2),e(Q2,Kme),e(Kme,$jo),e(Q2,kjo),e(Q2,AO),e(AO,Sjo),e(Q2,Rjo),e(O,Bjo),e(O,W2),e(W2,Zme),e(Zme,Pjo),e(W2,Ijo),e(W2,yO),e(yO,qjo),e(W2,Njo),e(O,jjo),e(O,H2),e(H2,ege),e(ege,Djo),e(H2,Gjo),e(H2,LO),e(LO,Ojo),e(H2,Vjo),e(O,Xjo),e(O,U2),e(U2,oge),e(oge,zjo),e(U2,Qjo),e(U2,xO),e(xO,Wjo),e(U2,Hjo),e(O,Ujo),e(O,J2),e(J2,rge),e(rge,Jjo),e(J2,Yjo),e(J2,$O),e($O,Kjo),e(J2,Zjo),e(O,eDo),e(O,Y2),e(Y2,tge),e(tge,oDo),e(Y2,rDo),e(Y2,kO),e(kO,tDo),e(Y2,aDo),e(O,nDo),e(O,K2),e(K2,age),e(age,sDo),e(K2,lDo),e(K2,SO),e(SO,iDo),e(K2,dDo),e(O,cDo),e(O,Z2),e(Z2,nge),e(nge,fDo),e(Z2,mDo),e(Z2,RO),e(RO,gDo),e(Z2,hDo),e(O,pDo),e(O,ev),e(ev,sge),e(sge,uDo),e(ev,_Do),e(ev,BO),e(BO,bDo),e(ev,vDo),e(O,FDo),e(O,ov),e(ov,lge),e(lge,TDo),e(ov,MDo),e(ov,PO),e(PO,EDo),e(ov,CDo),e(O,wDo),e(O,rv),e(rv,ige),e(ige,ADo),e(rv,yDo),e(rv,IO),e(IO,LDo),e(rv,xDo),e(O,$Do),e(O,tv),e(tv,dge),e(dge,kDo),e(tv,SDo),e(tv,qO),e(qO,RDo),e(tv,BDo),e(O,PDo),e(O,av),e(av,cge),e(cge,IDo),e(av,qDo),e(av,NO),e(NO,NDo),e(av,jDo),e(O,DDo),e(O,nv),e(nv,fge),e(fge,GDo),e(nv,ODo),e(nv,jO),e(jO,VDo),e(nv,XDo),e(O,zDo),e(O,sv),e(sv,mge),e(mge,QDo),e(sv,WDo),e(sv,DO),e(DO,HDo),e(sv,UDo),e(O,JDo),e(O,lv),e(lv,gge),e(gge,YDo),e(lv,KDo),e(lv,GO),e(GO,ZDo),e(lv,eGo),e(O,oGo),e(O,iv),e(iv,hge),e(hge,rGo),e(iv,tGo),e(iv,OO),e(OO,aGo),e(iv,nGo),e(O,sGo),e(O,dv),e(dv,pge),e(pge,lGo),e(dv,iGo),e(dv,VO),e(VO,dGo),e(dv,cGo),e(O,fGo),e(O,cv),e(cv,uge),e(uge,mGo),e(cv,gGo),e(cv,XO),e(XO,hGo),e(cv,pGo),e(O,uGo),e(O,fv),e(fv,_ge),e(_ge,_Go),e(fv,bGo),e(fv,zO),e(zO,vGo),e(fv,FGo),e(O,TGo),e(O,mv),e(mv,bge),e(bge,MGo),e(mv,EGo),e(mv,QO),e(QO,CGo),e(mv,wGo),e(O,AGo),e(O,gv),e(gv,vge),e(vge,yGo),e(gv,LGo),e(gv,WO),e(WO,xGo),e(gv,$Go),e(O,kGo),e(O,hv),e(hv,Fge),e(Fge,SGo),e(hv,RGo),e(hv,HO),e(HO,BGo),e(hv,PGo),e(O,IGo),e(O,pv),e(pv,Tge),e(Tge,qGo),e(pv,NGo),e(pv,UO),e(UO,jGo),e(pv,DGo),e(O,GGo),e(O,uv),e(uv,Mge),e(Mge,OGo),e(uv,VGo),e(uv,JO),e(JO,XGo),e(uv,zGo),e(O,QGo),e(O,_v),e(_v,Ege),e(Ege,WGo),e(_v,HGo),e(_v,YO),e(YO,UGo),e(_v,JGo),e(to,YGo),e(to,bv),e(bv,KGo),e(bv,Cge),e(Cge,ZGo),e(bv,eOo),e(bv,wge),e(wge,oOo),e(to,rOo),M(vv,to,null),b(f,XPe,_),b(f,Ki,_),e(Ki,Fv),e(Fv,Age),M(m0,Age,null),e(Ki,tOo),e(Ki,yge),e(yge,aOo),b(f,zPe,_),b(f,No,_),M(g0,No,null),e(No,nOo),e(No,Zi),e(Zi,sOo),e(Zi,KO),e(KO,lOo),e(Zi,iOo),e(Zi,ZO),e(ZO,dOo),e(Zi,cOo),e(No,fOo),e(No,h0),e(h0,mOo),e(h0,Lge),e(Lge,gOo),e(h0,hOo),e(No,pOo),e(No,ft),M(p0,ft,null),e(ft,uOo),e(ft,xge),e(xge,_Oo),e(ft,bOo),e(ft,ed),e(ed,vOo),e(ed,$ge),e($ge,FOo),e(ed,TOo),e(ed,eV),e(eV,MOo),e(ed,EOo),e(ft,COo),M(Tv,ft,null),e(No,wOo),e(No,ao),M(u0,ao,null),e(ao,AOo),e(ao,kge),e(kge,yOo),e(ao,LOo),e(ao,Ia),e(Ia,xOo),e(Ia,Sge),e(Sge,$Oo),e(Ia,kOo),e(Ia,Rge),e(Rge,SOo),e(Ia,ROo),e(Ia,Bge),e(Bge,BOo),e(Ia,POo),e(ao,IOo),e(ao,Pge),e(Pge,Mv),e(Mv,Ige),e(Ige,qOo),e(Mv,NOo),e(Mv,oV),e(oV,jOo),e(Mv,DOo),e(ao,GOo),e(ao,Ev),e(Ev,OOo),e(Ev,qge),e(qge,VOo),e(Ev,XOo),e(Ev,Nge),e(Nge,zOo),e(ao,QOo),M(Cv,ao,null),b(f,QPe,_),b(f,od,_),e(od,wv),e(wv,jge),M(_0,jge,null),e(od,WOo),e(od,Dge),e(Dge,HOo),b(f,WPe,_),b(f,jo,_),M(b0,jo,null),e(jo,UOo),e(jo,rd),e(rd,JOo),e(rd,rV),e(rV,YOo),e(rd,KOo),e(rd,tV),e(tV,ZOo),e(rd,eVo),e(jo,oVo),e(jo,v0),e(v0,rVo),e(v0,Gge),e(Gge,tVo),e(v0,aVo),e(jo,nVo),e(jo,mt),M(F0,mt,null),e(mt,sVo),e(mt,Oge),e(Oge,lVo),e(mt,iVo),e(mt,td),e(td,dVo),e(td,Vge),e(Vge,cVo),e(td,fVo),e(td,aV),e(aV,mVo),e(td,gVo),e(mt,hVo),M(Av,mt,null),e(jo,pVo),e(jo,no),M(T0,no,null),e(no,uVo),e(no,Xge),e(Xge,_Vo),e(no,bVo),e(no,qa),e(qa,vVo),e(qa,zge),e(zge,FVo),e(qa,TVo),e(qa,Qge),e(Qge,MVo),e(qa,EVo),e(qa,Wge),e(Wge,CVo),e(qa,wVo),e(no,AVo),e(no,ve),e(ve,yv),e(yv,Hge),e(Hge,yVo),e(yv,LVo),e(yv,nV),e(nV,xVo),e(yv,$Vo),e(ve,kVo),e(ve,Lv),e(Lv,Uge),e(Uge,SVo),e(Lv,RVo),e(Lv,sV),e(sV,BVo),e(Lv,PVo),e(ve,IVo),e(ve,xv),e(xv,Jge),e(Jge,qVo),e(xv,NVo),e(xv,lV),e(lV,jVo),e(xv,DVo),e(ve,GVo),e(ve,Bs),e(Bs,Yge),e(Yge,OVo),e(Bs,VVo),e(Bs,iV),e(iV,XVo),e(Bs,zVo),e(Bs,dV),e(dV,QVo),e(Bs,WVo),e(ve,HVo),e(ve,$v),e($v,Kge),e(Kge,UVo),e($v,JVo),e($v,cV),e(cV,YVo),e($v,KVo),e(ve,ZVo),e(ve,gt),e(gt,Zge),e(Zge,eXo),e(gt,oXo),e(gt,fV),e(fV,rXo),e(gt,tXo),e(gt,mV),e(mV,aXo),e(gt,nXo),e(gt,gV),e(gV,sXo),e(gt,lXo),e(ve,iXo),e(ve,kv),e(kv,ehe),e(ehe,dXo),e(kv,cXo),e(kv,hV),e(hV,fXo),e(kv,mXo),e(ve,gXo),e(ve,Sv),e(Sv,ohe),e(ohe,hXo),e(Sv,pXo),e(Sv,pV),e(pV,uXo),e(Sv,_Xo),e(ve,bXo),e(ve,Rv),e(Rv,rhe),e(rhe,vXo),e(Rv,FXo),e(Rv,uV),e(uV,TXo),e(Rv,MXo),e(ve,EXo),e(ve,Bv),e(Bv,the),e(the,CXo),e(Bv,wXo),e(Bv,_V),e(_V,AXo),e(Bv,yXo),e(ve,LXo),e(ve,Pv),e(Pv,ahe),e(ahe,xXo),e(Pv,$Xo),e(Pv,bV),e(bV,kXo),e(Pv,SXo),e(ve,RXo),e(ve,Iv),e(Iv,nhe),e(nhe,BXo),e(Iv,PXo),e(Iv,vV),e(vV,IXo),e(Iv,qXo),e(ve,NXo),e(ve,qv),e(qv,she),e(she,jXo),e(qv,DXo),e(qv,FV),e(FV,GXo),e(qv,OXo),e(no,VXo),e(no,Nv),e(Nv,XXo),e(Nv,lhe),e(lhe,zXo),e(Nv,QXo),e(Nv,ihe),e(ihe,WXo),e(no,HXo),M(jv,no,null),b(f,HPe,_),b(f,ad,_),e(ad,Dv),e(Dv,dhe),M(M0,dhe,null),e(ad,UXo),e(ad,che),e(che,JXo),b(f,UPe,_),b(f,Do,_),M(E0,Do,null),e(Do,YXo),e(Do,nd),e(nd,KXo),e(nd,TV),e(TV,ZXo),e(nd,ezo),e(nd,MV),e(MV,ozo),e(nd,rzo),e(Do,tzo),e(Do,C0),e(C0,azo),e(C0,fhe),e(fhe,nzo),e(C0,szo),e(Do,lzo),e(Do,ht),M(w0,ht,null),e(ht,izo),e(ht,mhe),e(mhe,dzo),e(ht,czo),e(ht,sd),e(sd,fzo),e(sd,ghe),e(ghe,mzo),e(sd,gzo),e(sd,EV),e(EV,hzo),e(sd,pzo),e(ht,uzo),M(Gv,ht,null),e(Do,_zo),e(Do,so),M(A0,so,null),e(so,bzo),e(so,hhe),e(hhe,vzo),e(so,Fzo),e(so,Na),e(Na,Tzo),e(Na,phe),e(phe,Mzo),e(Na,Ezo),e(Na,uhe),e(uhe,Czo),e(Na,wzo),e(Na,_he),e(_he,Azo),e(Na,yzo),e(so,Lzo),e(so,bhe),e(bhe,Ov),e(Ov,vhe),e(vhe,xzo),e(Ov,$zo),e(Ov,CV),e(CV,kzo),e(Ov,Szo),e(so,Rzo),e(so,Vv),e(Vv,Bzo),e(Vv,Fhe),e(Fhe,Pzo),e(Vv,Izo),e(Vv,The),e(The,qzo),e(so,Nzo),M(Xv,so,null),b(f,JPe,_),b(f,ld,_),e(ld,zv),e(zv,Mhe),M(y0,Mhe,null),e(ld,jzo),e(ld,Ehe),e(Ehe,Dzo),b(f,YPe,_),b(f,Go,_),M(L0,Go,null),e(Go,Gzo),e(Go,id),e(id,Ozo),e(id,wV),e(wV,Vzo),e(id,Xzo),e(id,AV),e(AV,zzo),e(id,Qzo),e(Go,Wzo),e(Go,x0),e(x0,Hzo),e(x0,Che),e(Che,Uzo),e(x0,Jzo),e(Go,Yzo),e(Go,pt),M($0,pt,null),e(pt,Kzo),e(pt,whe),e(whe,Zzo),e(pt,eQo),e(pt,dd),e(dd,oQo),e(dd,Ahe),e(Ahe,rQo),e(dd,tQo),e(dd,yV),e(yV,aQo),e(dd,nQo),e(pt,sQo),M(Qv,pt,null),e(Go,lQo),e(Go,lo),M(k0,lo,null),e(lo,iQo),e(lo,yhe),e(yhe,dQo),e(lo,cQo),e(lo,ja),e(ja,fQo),e(ja,Lhe),e(Lhe,mQo),e(ja,gQo),e(ja,xhe),e(xhe,hQo),e(ja,pQo),e(ja,$he),e($he,uQo),e(ja,_Qo),e(lo,bQo),e(lo,Ne),e(Ne,Wv),e(Wv,khe),e(khe,vQo),e(Wv,FQo),e(Wv,LV),e(LV,TQo),e(Wv,MQo),e(Ne,EQo),e(Ne,Hv),e(Hv,She),e(She,CQo),e(Hv,wQo),e(Hv,xV),e(xV,AQo),e(Hv,yQo),e(Ne,LQo),e(Ne,Uv),e(Uv,Rhe),e(Rhe,xQo),e(Uv,$Qo),e(Uv,$V),e($V,kQo),e(Uv,SQo),e(Ne,RQo),e(Ne,Jv),e(Jv,Bhe),e(Bhe,BQo),e(Jv,PQo),e(Jv,kV),e(kV,IQo),e(Jv,qQo),e(Ne,NQo),e(Ne,Yv),e(Yv,Phe),e(Phe,jQo),e(Yv,DQo),e(Yv,SV),e(SV,GQo),e(Yv,OQo),e(Ne,VQo),e(Ne,Kv),e(Kv,Ihe),e(Ihe,XQo),e(Kv,zQo),e(Kv,RV),e(RV,QQo),e(Kv,WQo),e(Ne,HQo),e(Ne,Zv),e(Zv,qhe),e(qhe,UQo),e(Zv,JQo),e(Zv,BV),e(BV,YQo),e(Zv,KQo),e(Ne,ZQo),e(Ne,eF),e(eF,Nhe),e(Nhe,eWo),e(eF,oWo),e(eF,PV),e(PV,rWo),e(eF,tWo),e(lo,aWo),e(lo,oF),e(oF,nWo),e(oF,jhe),e(jhe,sWo),e(oF,lWo),e(oF,Dhe),e(Dhe,iWo),e(lo,dWo),M(rF,lo,null),b(f,KPe,_),b(f,cd,_),e(cd,tF),e(tF,Ghe),M(S0,Ghe,null),e(cd,cWo),e(cd,Ohe),e(Ohe,fWo),b(f,ZPe,_),b(f,Oo,_),M(R0,Oo,null),e(Oo,mWo),e(Oo,fd),e(fd,gWo),e(fd,IV),e(IV,hWo),e(fd,pWo),e(fd,qV),e(qV,uWo),e(fd,_Wo),e(Oo,bWo),e(Oo,B0),e(B0,vWo),e(B0,Vhe),e(Vhe,FWo),e(B0,TWo),e(Oo,MWo),e(Oo,ut),M(P0,ut,null),e(ut,EWo),e(ut,Xhe),e(Xhe,CWo),e(ut,wWo),e(ut,md),e(md,AWo),e(md,zhe),e(zhe,yWo),e(md,LWo),e(md,NV),e(NV,xWo),e(md,$Wo),e(ut,kWo),M(aF,ut,null),e(Oo,SWo),e(Oo,io),M(I0,io,null),e(io,RWo),e(io,Qhe),e(Qhe,BWo),e(io,PWo),e(io,Da),e(Da,IWo),e(Da,Whe),e(Whe,qWo),e(Da,NWo),e(Da,Hhe),e(Hhe,jWo),e(Da,DWo),e(Da,Uhe),e(Uhe,GWo),e(Da,OWo),e(io,VWo),e(io,Ga),e(Ga,nF),e(nF,Jhe),e(Jhe,XWo),e(nF,zWo),e(nF,jV),e(jV,QWo),e(nF,WWo),e(Ga,HWo),e(Ga,sF),e(sF,Yhe),e(Yhe,UWo),e(sF,JWo),e(sF,DV),e(DV,YWo),e(sF,KWo),e(Ga,ZWo),e(Ga,lF),e(lF,Khe),e(Khe,eHo),e(lF,oHo),e(lF,GV),e(GV,rHo),e(lF,tHo),e(Ga,aHo),e(Ga,iF),e(iF,Zhe),e(Zhe,nHo),e(iF,sHo),e(iF,OV),e(OV,lHo),e(iF,iHo),e(io,dHo),e(io,dF),e(dF,cHo),e(dF,epe),e(epe,fHo),e(dF,mHo),e(dF,ope),e(ope,gHo),e(io,hHo),M(cF,io,null),b(f,eIe,_),b(f,gd,_),e(gd,fF),e(fF,rpe),M(q0,rpe,null),e(gd,pHo),e(gd,tpe),e(tpe,uHo),b(f,oIe,_),b(f,Vo,_),M(N0,Vo,null),e(Vo,_Ho),e(Vo,hd),e(hd,bHo),e(hd,VV),e(VV,vHo),e(hd,FHo),e(hd,XV),e(XV,THo),e(hd,MHo),e(Vo,EHo),e(Vo,j0),e(j0,CHo),e(j0,ape),e(ape,wHo),e(j0,AHo),e(Vo,yHo),e(Vo,_t),M(D0,_t,null),e(_t,LHo),e(_t,npe),e(npe,xHo),e(_t,$Ho),e(_t,pd),e(pd,kHo),e(pd,spe),e(spe,SHo),e(pd,RHo),e(pd,zV),e(zV,BHo),e(pd,PHo),e(_t,IHo),M(mF,_t,null),e(Vo,qHo),e(Vo,co),M(G0,co,null),e(co,NHo),e(co,lpe),e(lpe,jHo),e(co,DHo),e(co,Oa),e(Oa,GHo),e(Oa,ipe),e(ipe,OHo),e(Oa,VHo),e(Oa,dpe),e(dpe,XHo),e(Oa,zHo),e(Oa,cpe),e(cpe,QHo),e(Oa,WHo),e(co,HHo),e(co,je),e(je,gF),e(gF,fpe),e(fpe,UHo),e(gF,JHo),e(gF,QV),e(QV,YHo),e(gF,KHo),e(je,ZHo),e(je,hF),e(hF,mpe),e(mpe,eUo),e(hF,oUo),e(hF,WV),e(WV,rUo),e(hF,tUo),e(je,aUo),e(je,pF),e(pF,gpe),e(gpe,nUo),e(pF,sUo),e(pF,HV),e(HV,lUo),e(pF,iUo),e(je,dUo),e(je,uF),e(uF,hpe),e(hpe,cUo),e(uF,fUo),e(uF,UV),e(UV,mUo),e(uF,gUo),e(je,hUo),e(je,_F),e(_F,ppe),e(ppe,pUo),e(_F,uUo),e(_F,JV),e(JV,_Uo),e(_F,bUo),e(je,vUo),e(je,bF),e(bF,upe),e(upe,FUo),e(bF,TUo),e(bF,YV),e(YV,MUo),e(bF,EUo),e(je,CUo),e(je,vF),e(vF,_pe),e(_pe,wUo),e(vF,AUo),e(vF,KV),e(KV,yUo),e(vF,LUo),e(je,xUo),e(je,FF),e(FF,bpe),e(bpe,$Uo),e(FF,kUo),e(FF,ZV),e(ZV,SUo),e(FF,RUo),e(co,BUo),e(co,TF),e(TF,PUo),e(TF,vpe),e(vpe,IUo),e(TF,qUo),e(TF,Fpe),e(Fpe,NUo),e(co,jUo),M(MF,co,null),b(f,rIe,_),b(f,ud,_),e(ud,EF),e(EF,Tpe),M(O0,Tpe,null),e(ud,DUo),e(ud,Mpe),e(Mpe,GUo),b(f,tIe,_),b(f,Xo,_),M(V0,Xo,null),e(Xo,OUo),e(Xo,_d),e(_d,VUo),e(_d,eX),e(eX,XUo),e(_d,zUo),e(_d,oX),e(oX,QUo),e(_d,WUo),e(Xo,HUo),e(Xo,X0),e(X0,UUo),e(X0,Epe),e(Epe,JUo),e(X0,YUo),e(Xo,KUo),e(Xo,bt),M(z0,bt,null),e(bt,ZUo),e(bt,Cpe),e(Cpe,eJo),e(bt,oJo),e(bt,bd),e(bd,rJo),e(bd,wpe),e(wpe,tJo),e(bd,aJo),e(bd,rX),e(rX,nJo),e(bd,sJo),e(bt,lJo),M(CF,bt,null),e(Xo,iJo),e(Xo,fo),M(Q0,fo,null),e(fo,dJo),e(fo,Ape),e(Ape,cJo),e(fo,fJo),e(fo,Va),e(Va,mJo),e(Va,ype),e(ype,gJo),e(Va,hJo),e(Va,Lpe),e(Lpe,pJo),e(Va,uJo),e(Va,xpe),e(xpe,_Jo),e(Va,bJo),e(fo,vJo),e(fo,W0),e(W0,wF),e(wF,$pe),e($pe,FJo),e(wF,TJo),e(wF,tX),e(tX,MJo),e(wF,EJo),e(W0,CJo),e(W0,AF),e(AF,kpe),e(kpe,wJo),e(AF,AJo),e(AF,aX),e(aX,yJo),e(AF,LJo),e(fo,xJo),e(fo,yF),e(yF,$Jo),e(yF,Spe),e(Spe,kJo),e(yF,SJo),e(yF,Rpe),e(Rpe,RJo),e(fo,BJo),M(LF,fo,null),b(f,aIe,_),b(f,vd,_),e(vd,xF),e(xF,Bpe),M(H0,Bpe,null),e(vd,PJo),e(vd,Ppe),e(Ppe,IJo),b(f,nIe,_),b(f,zo,_),M(U0,zo,null),e(zo,qJo),e(zo,Fd),e(Fd,NJo),e(Fd,nX),e(nX,jJo),e(Fd,DJo),e(Fd,sX),e(sX,GJo),e(Fd,OJo),e(zo,VJo),e(zo,J0),e(J0,XJo),e(J0,Ipe),e(Ipe,zJo),e(J0,QJo),e(zo,WJo),e(zo,vt),M(Y0,vt,null),e(vt,HJo),e(vt,qpe),e(qpe,UJo),e(vt,JJo),e(vt,Td),e(Td,YJo),e(Td,Npe),e(Npe,KJo),e(Td,ZJo),e(Td,lX),e(lX,eYo),e(Td,oYo),e(vt,rYo),M($F,vt,null),e(zo,tYo),e(zo,mo),M(K0,mo,null),e(mo,aYo),e(mo,jpe),e(jpe,nYo),e(mo,sYo),e(mo,Xa),e(Xa,lYo),e(Xa,Dpe),e(Dpe,iYo),e(Xa,dYo),e(Xa,Gpe),e(Gpe,cYo),e(Xa,fYo),e(Xa,Ope),e(Ope,mYo),e(Xa,gYo),e(mo,hYo),e(mo,za),e(za,kF),e(kF,Vpe),e(Vpe,pYo),e(kF,uYo),e(kF,iX),e(iX,_Yo),e(kF,bYo),e(za,vYo),e(za,SF),e(SF,Xpe),e(Xpe,FYo),e(SF,TYo),e(SF,dX),e(dX,MYo),e(SF,EYo),e(za,CYo),e(za,RF),e(RF,zpe),e(zpe,wYo),e(RF,AYo),e(RF,cX),e(cX,yYo),e(RF,LYo),e(za,xYo),e(za,BF),e(BF,Qpe),e(Qpe,$Yo),e(BF,kYo),e(BF,fX),e(fX,SYo),e(BF,RYo),e(mo,BYo),e(mo,PF),e(PF,PYo),e(PF,Wpe),e(Wpe,IYo),e(PF,qYo),e(PF,Hpe),e(Hpe,NYo),e(mo,jYo),M(IF,mo,null),b(f,sIe,_),b(f,Md,_),e(Md,qF),e(qF,Upe),M(Z0,Upe,null),e(Md,DYo),e(Md,Jpe),e(Jpe,GYo),b(f,lIe,_),b(f,Qo,_),M(ey,Qo,null),e(Qo,OYo),e(Qo,Ed),e(Ed,VYo),e(Ed,mX),e(mX,XYo),e(Ed,zYo),e(Ed,gX),e(gX,QYo),e(Ed,WYo),e(Qo,HYo),e(Qo,oy),e(oy,UYo),e(oy,Ype),e(Ype,JYo),e(oy,YYo),e(Qo,KYo),e(Qo,Ft),M(ry,Ft,null),e(Ft,ZYo),e(Ft,Kpe),e(Kpe,eKo),e(Ft,oKo),e(Ft,Cd),e(Cd,rKo),e(Cd,Zpe),e(Zpe,tKo),e(Cd,aKo),e(Cd,hX),e(hX,nKo),e(Cd,sKo),e(Ft,lKo),M(NF,Ft,null),e(Qo,iKo),e(Qo,go),M(ty,go,null),e(go,dKo),e(go,eue),e(eue,cKo),e(go,fKo),e(go,Qa),e(Qa,mKo),e(Qa,oue),e(oue,gKo),e(Qa,hKo),e(Qa,rue),e(rue,pKo),e(Qa,uKo),e(Qa,tue),e(tue,_Ko),e(Qa,bKo),e(go,vKo),e(go,wd),e(wd,jF),e(jF,aue),e(aue,FKo),e(jF,TKo),e(jF,pX),e(pX,MKo),e(jF,EKo),e(wd,CKo),e(wd,DF),e(DF,nue),e(nue,wKo),e(DF,AKo),e(DF,uX),e(uX,yKo),e(DF,LKo),e(wd,xKo),e(wd,GF),e(GF,sue),e(sue,$Ko),e(GF,kKo),e(GF,_X),e(_X,SKo),e(GF,RKo),e(go,BKo),e(go,OF),e(OF,PKo),e(OF,lue),e(lue,IKo),e(OF,qKo),e(OF,iue),e(iue,NKo),e(go,jKo),M(VF,go,null),b(f,iIe,_),b(f,Ad,_),e(Ad,XF),e(XF,due),M(ay,due,null),e(Ad,DKo),e(Ad,cue),e(cue,GKo),b(f,dIe,_),b(f,Wo,_),M(ny,Wo,null),e(Wo,OKo),e(Wo,yd),e(yd,VKo),e(yd,bX),e(bX,XKo),e(yd,zKo),e(yd,vX),e(vX,QKo),e(yd,WKo),e(Wo,HKo),e(Wo,sy),e(sy,UKo),e(sy,fue),e(fue,JKo),e(sy,YKo),e(Wo,KKo),e(Wo,Tt),M(ly,Tt,null),e(Tt,ZKo),e(Tt,mue),e(mue,eZo),e(Tt,oZo),e(Tt,Ld),e(Ld,rZo),e(Ld,gue),e(gue,tZo),e(Ld,aZo),e(Ld,FX),e(FX,nZo),e(Ld,sZo),e(Tt,lZo),M(zF,Tt,null),e(Wo,iZo),e(Wo,ho),M(iy,ho,null),e(ho,dZo),e(ho,hue),e(hue,cZo),e(ho,fZo),e(ho,Wa),e(Wa,mZo),e(Wa,pue),e(pue,gZo),e(Wa,hZo),e(Wa,uue),e(uue,pZo),e(Wa,uZo),e(Wa,_ue),e(_ue,_Zo),e(Wa,bZo),e(ho,vZo),e(ho,dy),e(dy,QF),e(QF,bue),e(bue,FZo),e(QF,TZo),e(QF,TX),e(TX,MZo),e(QF,EZo),e(dy,CZo),e(dy,WF),e(WF,vue),e(vue,wZo),e(WF,AZo),e(WF,MX),e(MX,yZo),e(WF,LZo),e(ho,xZo),e(ho,HF),e(HF,$Zo),e(HF,Fue),e(Fue,kZo),e(HF,SZo),e(HF,Tue),e(Tue,RZo),e(ho,BZo),M(UF,ho,null),b(f,cIe,_),b(f,xd,_),e(xd,JF),e(JF,Mue),M(cy,Mue,null),e(xd,PZo),e(xd,Eue),e(Eue,IZo),b(f,fIe,_),b(f,Ho,_),M(fy,Ho,null),e(Ho,qZo),e(Ho,$d),e($d,NZo),e($d,EX),e(EX,jZo),e($d,DZo),e($d,CX),e(CX,GZo),e($d,OZo),e(Ho,VZo),e(Ho,my),e(my,XZo),e(my,Cue),e(Cue,zZo),e(my,QZo),e(Ho,WZo),e(Ho,Mt),M(gy,Mt,null),e(Mt,HZo),e(Mt,wue),e(wue,UZo),e(Mt,JZo),e(Mt,kd),e(kd,YZo),e(kd,Aue),e(Aue,KZo),e(kd,ZZo),e(kd,wX),e(wX,eer),e(kd,oer),e(Mt,rer),M(YF,Mt,null),e(Ho,ter),e(Ho,po),M(hy,po,null),e(po,aer),e(po,yue),e(yue,ner),e(po,ser),e(po,Ha),e(Ha,ler),e(Ha,Lue),e(Lue,ier),e(Ha,der),e(Ha,xue),e(xue,cer),e(Ha,fer),e(Ha,$ue),e($ue,mer),e(Ha,ger),e(po,her),e(po,kue),e(kue,KF),e(KF,Sue),e(Sue,per),e(KF,uer),e(KF,AX),e(AX,_er),e(KF,ber),e(po,ver),e(po,ZF),e(ZF,Fer),e(ZF,Rue),e(Rue,Ter),e(ZF,Mer),e(ZF,Bue),e(Bue,Eer),e(po,Cer),M(e6,po,null),b(f,mIe,_),b(f,Sd,_),e(Sd,o6),e(o6,Pue),M(py,Pue,null),e(Sd,wer),e(Sd,Iue),e(Iue,Aer),b(f,gIe,_),b(f,Uo,_),M(uy,Uo,null),e(Uo,yer),e(Uo,Rd),e(Rd,Ler),e(Rd,yX),e(yX,xer),e(Rd,$er),e(Rd,LX),e(LX,ker),e(Rd,Ser),e(Uo,Rer),e(Uo,_y),e(_y,Ber),e(_y,que),e(que,Per),e(_y,Ier),e(Uo,qer),e(Uo,Et),M(by,Et,null),e(Et,Ner),e(Et,Nue),e(Nue,jer),e(Et,Der),e(Et,Bd),e(Bd,Ger),e(Bd,jue),e(jue,Oer),e(Bd,Ver),e(Bd,xX),e(xX,Xer),e(Bd,zer),e(Et,Qer),M(r6,Et,null),e(Uo,Wer),e(Uo,uo),M(vy,uo,null),e(uo,Her),e(uo,Due),e(Due,Uer),e(uo,Jer),e(uo,Ua),e(Ua,Yer),e(Ua,Gue),e(Gue,Ker),e(Ua,Zer),e(Ua,Oue),e(Oue,eor),e(Ua,oor),e(Ua,Vue),e(Vue,ror),e(Ua,tor),e(uo,aor),e(uo,Ja),e(Ja,t6),e(t6,Xue),e(Xue,nor),e(t6,sor),e(t6,$X),e($X,lor),e(t6,ior),e(Ja,dor),e(Ja,a6),e(a6,zue),e(zue,cor),e(a6,mor),e(a6,kX),e(kX,gor),e(a6,hor),e(Ja,por),e(Ja,n6),e(n6,Que),e(Que,uor),e(n6,_or),e(n6,SX),e(SX,bor),e(n6,vor),e(Ja,For),e(Ja,s6),e(s6,Wue),e(Wue,Tor),e(s6,Mor),e(s6,RX),e(RX,Eor),e(s6,Cor),e(uo,wor),e(uo,l6),e(l6,Aor),e(l6,Hue),e(Hue,yor),e(l6,Lor),e(l6,Uue),e(Uue,xor),e(uo,$or),M(i6,uo,null),b(f,hIe,_),b(f,Pd,_),e(Pd,d6),e(d6,Jue),M(Fy,Jue,null),e(Pd,kor),e(Pd,Yue),e(Yue,Sor),b(f,pIe,_),b(f,Jo,_),M(Ty,Jo,null),e(Jo,Ror),e(Jo,Id),e(Id,Bor),e(Id,BX),e(BX,Por),e(Id,Ior),e(Id,PX),e(PX,qor),e(Id,Nor),e(Jo,jor),e(Jo,My),e(My,Dor),e(My,Kue),e(Kue,Gor),e(My,Oor),e(Jo,Vor),e(Jo,Ct),M(Ey,Ct,null),e(Ct,Xor),e(Ct,Zue),e(Zue,zor),e(Ct,Qor),e(Ct,qd),e(qd,Wor),e(qd,e_e),e(e_e,Hor),e(qd,Uor),e(qd,IX),e(IX,Jor),e(qd,Yor),e(Ct,Kor),M(c6,Ct,null),e(Jo,Zor),e(Jo,_o),M(Cy,_o,null),e(_o,err),e(_o,o_e),e(o_e,orr),e(_o,rrr),e(_o,Ya),e(Ya,trr),e(Ya,r_e),e(r_e,arr),e(Ya,nrr),e(Ya,t_e),e(t_e,srr),e(Ya,lrr),e(Ya,a_e),e(a_e,irr),e(Ya,drr),e(_o,crr),e(_o,n_e),e(n_e,f6),e(f6,s_e),e(s_e,frr),e(f6,mrr),e(f6,qX),e(qX,grr),e(f6,hrr),e(_o,prr),e(_o,m6),e(m6,urr),e(m6,l_e),e(l_e,_rr),e(m6,brr),e(m6,i_e),e(i_e,vrr),e(_o,Frr),M(g6,_o,null),b(f,uIe,_),b(f,Nd,_),e(Nd,h6),e(h6,d_e),M(wy,d_e,null),e(Nd,Trr),e(Nd,c_e),e(c_e,Mrr),b(f,_Ie,_),b(f,Yo,_),M(Ay,Yo,null),e(Yo,Err),e(Yo,jd),e(jd,Crr),e(jd,NX),e(NX,wrr),e(jd,Arr),e(jd,jX),e(jX,yrr),e(jd,Lrr),e(Yo,xrr),e(Yo,yy),e(yy,$rr),e(yy,f_e),e(f_e,krr),e(yy,Srr),e(Yo,Rrr),e(Yo,wt),M(Ly,wt,null),e(wt,Brr),e(wt,m_e),e(m_e,Prr),e(wt,Irr),e(wt,Dd),e(Dd,qrr),e(Dd,g_e),e(g_e,Nrr),e(Dd,jrr),e(Dd,DX),e(DX,Drr),e(Dd,Grr),e(wt,Orr),M(p6,wt,null),e(Yo,Vrr),e(Yo,wr),M(xy,wr,null),e(wr,Xrr),e(wr,h_e),e(h_e,zrr),e(wr,Qrr),e(wr,Ka),e(Ka,Wrr),e(Ka,p_e),e(p_e,Hrr),e(Ka,Urr),e(Ka,u_e),e(u_e,Jrr),e(Ka,Yrr),e(Ka,__e),e(__e,Krr),e(Ka,Zrr),e(wr,etr),e(wr,N),e(N,u6),e(u6,b_e),e(b_e,otr),e(u6,rtr),e(u6,GX),e(GX,ttr),e(u6,atr),e(N,ntr),e(N,_6),e(_6,v_e),e(v_e,str),e(_6,ltr),e(_6,OX),e(OX,itr),e(_6,dtr),e(N,ctr),e(N,b6),e(b6,F_e),e(F_e,ftr),e(b6,mtr),e(b6,VX),e(VX,gtr),e(b6,htr),e(N,ptr),e(N,v6),e(v6,T_e),e(T_e,utr),e(v6,_tr),e(v6,XX),e(XX,btr),e(v6,vtr),e(N,Ftr),e(N,F6),e(F6,M_e),e(M_e,Ttr),e(F6,Mtr),e(F6,zX),e(zX,Etr),e(F6,Ctr),e(N,wtr),e(N,T6),e(T6,E_e),e(E_e,Atr),e(T6,ytr),e(T6,QX),e(QX,Ltr),e(T6,xtr),e(N,$tr),e(N,M6),e(M6,C_e),e(C_e,ktr),e(M6,Str),e(M6,WX),e(WX,Rtr),e(M6,Btr),e(N,Ptr),e(N,E6),e(E6,w_e),e(w_e,Itr),e(E6,qtr),e(E6,HX),e(HX,Ntr),e(E6,jtr),e(N,Dtr),e(N,C6),e(C6,A_e),e(A_e,Gtr),e(C6,Otr),e(C6,UX),e(UX,Vtr),e(C6,Xtr),e(N,ztr),e(N,w6),e(w6,y_e),e(y_e,Qtr),e(w6,Wtr),e(w6,JX),e(JX,Htr),e(w6,Utr),e(N,Jtr),e(N,A6),e(A6,L_e),e(L_e,Ytr),e(A6,Ktr),e(A6,YX),e(YX,Ztr),e(A6,ear),e(N,oar),e(N,y6),e(y6,x_e),e(x_e,rar),e(y6,tar),e(y6,KX),e(KX,aar),e(y6,nar),e(N,sar),e(N,L6),e(L6,$_e),e($_e,lar),e(L6,iar),e(L6,ZX),e(ZX,dar),e(L6,car),e(N,far),e(N,x6),e(x6,k_e),e(k_e,mar),e(x6,gar),e(x6,ez),e(ez,har),e(x6,par),e(N,uar),e(N,$6),e($6,S_e),e(S_e,_ar),e($6,bar),e($6,oz),e(oz,Far),e($6,Tar),e(N,Mar),e(N,k6),e(k6,R_e),e(R_e,Ear),e(k6,Car),e(k6,rz),e(rz,war),e(k6,Aar),e(N,yar),e(N,S6),e(S6,B_e),e(B_e,Lar),e(S6,xar),e(S6,tz),e(tz,$ar),e(S6,kar),e(N,Sar),e(N,Ps),e(Ps,P_e),e(P_e,Rar),e(Ps,Bar),e(Ps,az),e(az,Par),e(Ps,Iar),e(Ps,nz),e(nz,qar),e(Ps,Nar),e(N,jar),e(N,R6),e(R6,I_e),e(I_e,Dar),e(R6,Gar),e(R6,sz),e(sz,Oar),e(R6,Var),e(N,Xar),e(N,B6),e(B6,q_e),e(q_e,zar),e(B6,Qar),e(B6,lz),e(lz,War),e(B6,Har),e(N,Uar),e(N,P6),e(P6,N_e),e(N_e,Jar),e(P6,Yar),e(P6,iz),e(iz,Kar),e(P6,Zar),e(N,enr),e(N,I6),e(I6,j_e),e(j_e,onr),e(I6,rnr),e(I6,dz),e(dz,tnr),e(I6,anr),e(N,nnr),e(N,q6),e(q6,D_e),e(D_e,snr),e(q6,lnr),e(q6,cz),e(cz,inr),e(q6,dnr),e(N,cnr),e(N,N6),e(N6,G_e),e(G_e,fnr),e(N6,mnr),e(N6,fz),e(fz,gnr),e(N6,hnr),e(N,pnr),e(N,j6),e(j6,O_e),e(O_e,unr),e(j6,_nr),e(j6,mz),e(mz,bnr),e(j6,vnr),e(N,Fnr),e(N,D6),e(D6,V_e),e(V_e,Tnr),e(D6,Mnr),e(D6,gz),e(gz,Enr),e(D6,Cnr),e(N,wnr),e(N,G6),e(G6,X_e),e(X_e,Anr),e(G6,ynr),e(G6,hz),e(hz,Lnr),e(G6,xnr),e(N,$nr),e(N,O6),e(O6,z_e),e(z_e,knr),e(O6,Snr),e(O6,pz),e(pz,Rnr),e(O6,Bnr),e(N,Pnr),e(N,V6),e(V6,Q_e),e(Q_e,Inr),e(V6,qnr),e(V6,uz),e(uz,Nnr),e(V6,jnr),e(N,Dnr),e(N,X6),e(X6,W_e),e(W_e,Gnr),e(X6,Onr),e(X6,_z),e(_z,Vnr),e(X6,Xnr),e(N,znr),e(N,z6),e(z6,H_e),e(H_e,Qnr),e(z6,Wnr),e(z6,bz),e(bz,Hnr),e(z6,Unr),e(N,Jnr),e(N,Q6),e(Q6,U_e),e(U_e,Ynr),e(Q6,Knr),e(Q6,vz),e(vz,Znr),e(Q6,esr),e(N,osr),e(N,W6),e(W6,J_e),e(J_e,rsr),e(W6,tsr),e(W6,Fz),e(Fz,asr),e(W6,nsr),e(N,ssr),e(N,H6),e(H6,Y_e),e(Y_e,lsr),e(H6,isr),e(H6,Tz),e(Tz,dsr),e(H6,csr),e(N,fsr),e(N,U6),e(U6,K_e),e(K_e,msr),e(U6,gsr),e(U6,Mz),e(Mz,hsr),e(U6,psr),e(N,usr),e(N,J6),e(J6,Z_e),e(Z_e,_sr),e(J6,bsr),e(J6,Ez),e(Ez,vsr),e(J6,Fsr),e(N,Tsr),e(N,Y6),e(Y6,e1e),e(e1e,Msr),e(Y6,Esr),e(Y6,Cz),e(Cz,Csr),e(Y6,wsr),e(N,Asr),e(N,K6),e(K6,o1e),e(o1e,ysr),e(K6,Lsr),e(K6,wz),e(wz,xsr),e(K6,$sr),e(N,ksr),e(N,Z6),e(Z6,r1e),e(r1e,Ssr),e(Z6,Rsr),e(Z6,Az),e(Az,Bsr),e(Z6,Psr),e(N,Isr),e(N,eT),e(eT,t1e),e(t1e,qsr),e(eT,Nsr),e(eT,yz),e(yz,jsr),e(eT,Dsr),e(N,Gsr),e(N,oT),e(oT,a1e),e(a1e,Osr),e(oT,Vsr),e(oT,Lz),e(Lz,Xsr),e(oT,zsr),e(N,Qsr),e(N,rT),e(rT,n1e),e(n1e,Wsr),e(rT,Hsr),e(rT,xz),e(xz,Usr),e(rT,Jsr),e(N,Ysr),e(N,tT),e(tT,s1e),e(s1e,Ksr),e(tT,Zsr),e(tT,$z),e($z,elr),e(tT,olr),e(N,rlr),e(N,aT),e(aT,l1e),e(l1e,tlr),e(aT,alr),e(aT,kz),e(kz,nlr),e(aT,slr),e(N,llr),e(N,nT),e(nT,i1e),e(i1e,ilr),e(nT,dlr),e(nT,Sz),e(Sz,clr),e(nT,flr),e(N,mlr),e(N,sT),e(sT,d1e),e(d1e,glr),e(sT,hlr),e(sT,Rz),e(Rz,plr),e(sT,ulr),e(wr,_lr),M(lT,wr,null),b(f,bIe,_),b(f,Gd,_),e(Gd,iT),e(iT,c1e),M($y,c1e,null),e(Gd,blr),e(Gd,f1e),e(f1e,vlr),b(f,vIe,_),b(f,Ko,_),M(ky,Ko,null),e(Ko,Flr),e(Ko,Od),e(Od,Tlr),e(Od,Bz),e(Bz,Mlr),e(Od,Elr),e(Od,Pz),e(Pz,Clr),e(Od,wlr),e(Ko,Alr),e(Ko,Sy),e(Sy,ylr),e(Sy,m1e),e(m1e,Llr),e(Sy,xlr),e(Ko,$lr),e(Ko,At),M(Ry,At,null),e(At,klr),e(At,g1e),e(g1e,Slr),e(At,Rlr),e(At,Vd),e(Vd,Blr),e(Vd,h1e),e(h1e,Plr),e(Vd,Ilr),e(Vd,Iz),e(Iz,qlr),e(Vd,Nlr),e(At,jlr),M(dT,At,null),e(Ko,Dlr),e(Ko,Ar),M(By,Ar,null),e(Ar,Glr),e(Ar,p1e),e(p1e,Olr),e(Ar,Vlr),e(Ar,Za),e(Za,Xlr),e(Za,u1e),e(u1e,zlr),e(Za,Qlr),e(Za,_1e),e(_1e,Wlr),e(Za,Hlr),e(Za,b1e),e(b1e,Ulr),e(Za,Jlr),e(Ar,Ylr),e(Ar,ne),e(ne,cT),e(cT,v1e),e(v1e,Klr),e(cT,Zlr),e(cT,qz),e(qz,eir),e(cT,oir),e(ne,rir),e(ne,fT),e(fT,F1e),e(F1e,tir),e(fT,air),e(fT,Nz),e(Nz,nir),e(fT,sir),e(ne,lir),e(ne,mT),e(mT,T1e),e(T1e,iir),e(mT,dir),e(mT,jz),e(jz,cir),e(mT,fir),e(ne,mir),e(ne,gT),e(gT,M1e),e(M1e,gir),e(gT,hir),e(gT,Dz),e(Dz,pir),e(gT,uir),e(ne,_ir),e(ne,hT),e(hT,E1e),e(E1e,bir),e(hT,vir),e(hT,Gz),e(Gz,Fir),e(hT,Tir),e(ne,Mir),e(ne,pT),e(pT,C1e),e(C1e,Eir),e(pT,Cir),e(pT,Oz),e(Oz,wir),e(pT,Air),e(ne,yir),e(ne,uT),e(uT,w1e),e(w1e,Lir),e(uT,xir),e(uT,Vz),e(Vz,$ir),e(uT,kir),e(ne,Sir),e(ne,_T),e(_T,A1e),e(A1e,Rir),e(_T,Bir),e(_T,Xz),e(Xz,Pir),e(_T,Iir),e(ne,qir),e(ne,bT),e(bT,y1e),e(y1e,Nir),e(bT,jir),e(bT,zz),e(zz,Dir),e(bT,Gir),e(ne,Oir),e(ne,vT),e(vT,L1e),e(L1e,Vir),e(vT,Xir),e(vT,Qz),e(Qz,zir),e(vT,Qir),e(ne,Wir),e(ne,FT),e(FT,x1e),e(x1e,Hir),e(FT,Uir),e(FT,Wz),e(Wz,Jir),e(FT,Yir),e(ne,Kir),e(ne,TT),e(TT,$1e),e($1e,Zir),e(TT,edr),e(TT,Hz),e(Hz,odr),e(TT,rdr),e(ne,tdr),e(ne,MT),e(MT,k1e),e(k1e,adr),e(MT,ndr),e(MT,Uz),e(Uz,sdr),e(MT,ldr),e(ne,idr),e(ne,ET),e(ET,S1e),e(S1e,ddr),e(ET,cdr),e(ET,Jz),e(Jz,fdr),e(ET,mdr),e(ne,gdr),e(ne,CT),e(CT,R1e),e(R1e,hdr),e(CT,pdr),e(CT,Yz),e(Yz,udr),e(CT,_dr),e(ne,bdr),e(ne,wT),e(wT,B1e),e(B1e,vdr),e(wT,Fdr),e(wT,Kz),e(Kz,Tdr),e(wT,Mdr),e(ne,Edr),e(ne,AT),e(AT,P1e),e(P1e,Cdr),e(AT,wdr),e(AT,Zz),e(Zz,Adr),e(AT,ydr),e(ne,Ldr),e(ne,yT),e(yT,I1e),e(I1e,xdr),e(yT,$dr),e(yT,eQ),e(eQ,kdr),e(yT,Sdr),e(ne,Rdr),e(ne,LT),e(LT,q1e),e(q1e,Bdr),e(LT,Pdr),e(LT,oQ),e(oQ,Idr),e(LT,qdr),e(ne,Ndr),e(ne,xT),e(xT,N1e),e(N1e,jdr),e(xT,Ddr),e(xT,rQ),e(rQ,Gdr),e(xT,Odr),e(ne,Vdr),e(ne,$T),e($T,j1e),e(j1e,Xdr),e($T,zdr),e($T,tQ),e(tQ,Qdr),e($T,Wdr),e(ne,Hdr),e(ne,kT),e(kT,D1e),e(D1e,Udr),e(kT,Jdr),e(kT,aQ),e(aQ,Ydr),e(kT,Kdr),e(ne,Zdr),e(ne,ST),e(ST,G1e),e(G1e,ecr),e(ST,ocr),e(ST,nQ),e(nQ,rcr),e(ST,tcr),e(Ar,acr),M(RT,Ar,null),b(f,FIe,_),b(f,Xd,_),e(Xd,BT),e(BT,O1e),M(Py,O1e,null),e(Xd,ncr),e(Xd,V1e),e(V1e,scr),b(f,TIe,_),b(f,Zo,_),M(Iy,Zo,null),e(Zo,lcr),e(Zo,zd),e(zd,icr),e(zd,sQ),e(sQ,dcr),e(zd,ccr),e(zd,lQ),e(lQ,fcr),e(zd,mcr),e(Zo,gcr),e(Zo,qy),e(qy,hcr),e(qy,X1e),e(X1e,pcr),e(qy,ucr),e(Zo,_cr),e(Zo,yt),M(Ny,yt,null),e(yt,bcr),e(yt,z1e),e(z1e,vcr),e(yt,Fcr),e(yt,Qd),e(Qd,Tcr),e(Qd,Q1e),e(Q1e,Mcr),e(Qd,Ecr),e(Qd,iQ),e(iQ,Ccr),e(Qd,wcr),e(yt,Acr),M(PT,yt,null),e(Zo,ycr),e(Zo,yr),M(jy,yr,null),e(yr,Lcr),e(yr,W1e),e(W1e,xcr),e(yr,$cr),e(yr,en),e(en,kcr),e(en,H1e),e(H1e,Scr),e(en,Rcr),e(en,U1e),e(U1e,Bcr),e(en,Pcr),e(en,J1e),e(J1e,Icr),e(en,qcr),e(yr,Ncr),e(yr,Te),e(Te,IT),e(IT,Y1e),e(Y1e,jcr),e(IT,Dcr),e(IT,dQ),e(dQ,Gcr),e(IT,Ocr),e(Te,Vcr),e(Te,qT),e(qT,K1e),e(K1e,Xcr),e(qT,zcr),e(qT,cQ),e(cQ,Qcr),e(qT,Wcr),e(Te,Hcr),e(Te,NT),e(NT,Z1e),e(Z1e,Ucr),e(NT,Jcr),e(NT,fQ),e(fQ,Ycr),e(NT,Kcr),e(Te,Zcr),e(Te,jT),e(jT,e8e),e(e8e,efr),e(jT,ofr),e(jT,mQ),e(mQ,rfr),e(jT,tfr),e(Te,afr),e(Te,DT),e(DT,o8e),e(o8e,nfr),e(DT,sfr),e(DT,gQ),e(gQ,lfr),e(DT,ifr),e(Te,dfr),e(Te,GT),e(GT,r8e),e(r8e,cfr),e(GT,ffr),e(GT,hQ),e(hQ,mfr),e(GT,gfr),e(Te,hfr),e(Te,OT),e(OT,t8e),e(t8e,pfr),e(OT,ufr),e(OT,pQ),e(pQ,_fr),e(OT,bfr),e(Te,vfr),e(Te,VT),e(VT,a8e),e(a8e,Ffr),e(VT,Tfr),e(VT,uQ),e(uQ,Mfr),e(VT,Efr),e(Te,Cfr),e(Te,XT),e(XT,n8e),e(n8e,wfr),e(XT,Afr),e(XT,_Q),e(_Q,yfr),e(XT,Lfr),e(Te,xfr),e(Te,zT),e(zT,s8e),e(s8e,$fr),e(zT,kfr),e(zT,bQ),e(bQ,Sfr),e(zT,Rfr),e(Te,Bfr),e(Te,QT),e(QT,l8e),e(l8e,Pfr),e(QT,Ifr),e(QT,vQ),e(vQ,qfr),e(QT,Nfr),e(Te,jfr),e(Te,WT),e(WT,i8e),e(i8e,Dfr),e(WT,Gfr),e(WT,FQ),e(FQ,Ofr),e(WT,Vfr),e(yr,Xfr),M(HT,yr,null),b(f,MIe,_),b(f,Wd,_),e(Wd,UT),e(UT,d8e),M(Dy,d8e,null),e(Wd,zfr),e(Wd,c8e),e(c8e,Qfr),b(f,EIe,_),b(f,er,_),M(Gy,er,null),e(er,Wfr),e(er,Hd),e(Hd,Hfr),e(Hd,TQ),e(TQ,Ufr),e(Hd,Jfr),e(Hd,MQ),e(MQ,Yfr),e(Hd,Kfr),e(er,Zfr),e(er,Oy),e(Oy,emr),e(Oy,f8e),e(f8e,omr),e(Oy,rmr),e(er,tmr),e(er,Lt),M(Vy,Lt,null),e(Lt,amr),e(Lt,m8e),e(m8e,nmr),e(Lt,smr),e(Lt,Ud),e(Ud,lmr),e(Ud,g8e),e(g8e,imr),e(Ud,dmr),e(Ud,EQ),e(EQ,cmr),e(Ud,fmr),e(Lt,mmr),M(JT,Lt,null),e(er,gmr),e(er,Lr),M(Xy,Lr,null),e(Lr,hmr),e(Lr,h8e),e(h8e,pmr),e(Lr,umr),e(Lr,on),e(on,_mr),e(on,p8e),e(p8e,bmr),e(on,vmr),e(on,u8e),e(u8e,Fmr),e(on,Tmr),e(on,_8e),e(_8e,Mmr),e(on,Emr),e(Lr,Cmr),e(Lr,rn),e(rn,YT),e(YT,b8e),e(b8e,wmr),e(YT,Amr),e(YT,CQ),e(CQ,ymr),e(YT,Lmr),e(rn,xmr),e(rn,KT),e(KT,v8e),e(v8e,$mr),e(KT,kmr),e(KT,wQ),e(wQ,Smr),e(KT,Rmr),e(rn,Bmr),e(rn,ZT),e(ZT,F8e),e(F8e,Pmr),e(ZT,Imr),e(ZT,AQ),e(AQ,qmr),e(ZT,Nmr),e(rn,jmr),e(rn,e9),e(e9,T8e),e(T8e,Dmr),e(e9,Gmr),e(e9,yQ),e(yQ,Omr),e(e9,Vmr),e(Lr,Xmr),M(o9,Lr,null),b(f,CIe,_),b(f,Jd,_),e(Jd,r9),e(r9,M8e),M(zy,M8e,null),e(Jd,zmr),e(Jd,E8e),e(E8e,Qmr),b(f,wIe,_),b(f,or,_),M(Qy,or,null),e(or,Wmr),e(or,Yd),e(Yd,Hmr),e(Yd,LQ),e(LQ,Umr),e(Yd,Jmr),e(Yd,xQ),e(xQ,Ymr),e(Yd,Kmr),e(or,Zmr),e(or,Wy),e(Wy,egr),e(Wy,C8e),e(C8e,ogr),e(Wy,rgr),e(or,tgr),e(or,xt),M(Hy,xt,null),e(xt,agr),e(xt,w8e),e(w8e,ngr),e(xt,sgr),e(xt,Kd),e(Kd,lgr),e(Kd,A8e),e(A8e,igr),e(Kd,dgr),e(Kd,$Q),e($Q,cgr),e(Kd,fgr),e(xt,mgr),M(t9,xt,null),e(or,ggr),e(or,xr),M(Uy,xr,null),e(xr,hgr),e(xr,y8e),e(y8e,pgr),e(xr,ugr),e(xr,tn),e(tn,_gr),e(tn,L8e),e(L8e,bgr),e(tn,vgr),e(tn,x8e),e(x8e,Fgr),e(tn,Tgr),e(tn,$8e),e($8e,Mgr),e(tn,Egr),e(xr,Cgr),e(xr,ie),e(ie,a9),e(a9,k8e),e(k8e,wgr),e(a9,Agr),e(a9,kQ),e(kQ,ygr),e(a9,Lgr),e(ie,xgr),e(ie,n9),e(n9,S8e),e(S8e,$gr),e(n9,kgr),e(n9,SQ),e(SQ,Sgr),e(n9,Rgr),e(ie,Bgr),e(ie,s9),e(s9,R8e),e(R8e,Pgr),e(s9,Igr),e(s9,RQ),e(RQ,qgr),e(s9,Ngr),e(ie,jgr),e(ie,l9),e(l9,B8e),e(B8e,Dgr),e(l9,Ggr),e(l9,BQ),e(BQ,Ogr),e(l9,Vgr),e(ie,Xgr),e(ie,i9),e(i9,P8e),e(P8e,zgr),e(i9,Qgr),e(i9,PQ),e(PQ,Wgr),e(i9,Hgr),e(ie,Ugr),e(ie,d9),e(d9,I8e),e(I8e,Jgr),e(d9,Ygr),e(d9,IQ),e(IQ,Kgr),e(d9,Zgr),e(ie,ehr),e(ie,c9),e(c9,q8e),e(q8e,ohr),e(c9,rhr),e(c9,qQ),e(qQ,thr),e(c9,ahr),e(ie,nhr),e(ie,f9),e(f9,N8e),e(N8e,shr),e(f9,lhr),e(f9,NQ),e(NQ,ihr),e(f9,dhr),e(ie,chr),e(ie,m9),e(m9,j8e),e(j8e,fhr),e(m9,mhr),e(m9,jQ),e(jQ,ghr),e(m9,hhr),e(ie,phr),e(ie,g9),e(g9,D8e),e(D8e,uhr),e(g9,_hr),e(g9,DQ),e(DQ,bhr),e(g9,vhr),e(ie,Fhr),e(ie,h9),e(h9,G8e),e(G8e,Thr),e(h9,Mhr),e(h9,GQ),e(GQ,Ehr),e(h9,Chr),e(ie,whr),e(ie,p9),e(p9,O8e),e(O8e,Ahr),e(p9,yhr),e(p9,OQ),e(OQ,Lhr),e(p9,xhr),e(ie,$hr),e(ie,u9),e(u9,V8e),e(V8e,khr),e(u9,Shr),e(u9,VQ),e(VQ,Rhr),e(u9,Bhr),e(ie,Phr),e(ie,_9),e(_9,X8e),e(X8e,Ihr),e(_9,qhr),e(_9,XQ),e(XQ,Nhr),e(_9,jhr),e(ie,Dhr),e(ie,b9),e(b9,z8e),e(z8e,Ghr),e(b9,Ohr),e(b9,zQ),e(zQ,Vhr),e(b9,Xhr),e(ie,zhr),e(ie,v9),e(v9,Q8e),e(Q8e,Qhr),e(v9,Whr),e(v9,QQ),e(QQ,Hhr),e(v9,Uhr),e(ie,Jhr),e(ie,F9),e(F9,W8e),e(W8e,Yhr),e(F9,Khr),e(F9,WQ),e(WQ,Zhr),e(F9,epr),e(ie,opr),e(ie,T9),e(T9,H8e),e(H8e,rpr),e(T9,tpr),e(T9,HQ),e(HQ,apr),e(T9,npr),e(ie,spr),e(ie,M9),e(M9,U8e),e(U8e,lpr),e(M9,ipr),e(M9,UQ),e(UQ,dpr),e(M9,cpr),e(ie,fpr),e(ie,E9),e(E9,J8e),e(J8e,mpr),e(E9,gpr),e(E9,JQ),e(JQ,hpr),e(E9,ppr),e(xr,upr),M(C9,xr,null),b(f,AIe,_),b(f,Zd,_),e(Zd,w9),e(w9,Y8e),M(Jy,Y8e,null),e(Zd,_pr),e(Zd,K8e),e(K8e,bpr),b(f,yIe,_),b(f,rr,_),M(Yy,rr,null),e(rr,vpr),e(rr,ec),e(ec,Fpr),e(ec,YQ),e(YQ,Tpr),e(ec,Mpr),e(ec,KQ),e(KQ,Epr),e(ec,Cpr),e(rr,wpr),e(rr,Ky),e(Ky,Apr),e(Ky,Z8e),e(Z8e,ypr),e(Ky,Lpr),e(rr,xpr),e(rr,$t),M(Zy,$t,null),e($t,$pr),e($t,ebe),e(ebe,kpr),e($t,Spr),e($t,oc),e(oc,Rpr),e(oc,obe),e(obe,Bpr),e(oc,Ppr),e(oc,ZQ),e(ZQ,Ipr),e(oc,qpr),e($t,Npr),M(A9,$t,null),e(rr,jpr),e(rr,$r),M(eL,$r,null),e($r,Dpr),e($r,rbe),e(rbe,Gpr),e($r,Opr),e($r,an),e(an,Vpr),e(an,tbe),e(tbe,Xpr),e(an,zpr),e(an,abe),e(abe,Qpr),e(an,Wpr),e(an,nbe),e(nbe,Hpr),e(an,Upr),e($r,Jpr),e($r,ye),e(ye,y9),e(y9,sbe),e(sbe,Ypr),e(y9,Kpr),e(y9,eW),e(eW,Zpr),e(y9,eur),e(ye,our),e(ye,L9),e(L9,lbe),e(lbe,rur),e(L9,tur),e(L9,oW),e(oW,aur),e(L9,nur),e(ye,sur),e(ye,x9),e(x9,ibe),e(ibe,lur),e(x9,iur),e(x9,rW),e(rW,dur),e(x9,cur),e(ye,fur),e(ye,$9),e($9,dbe),e(dbe,mur),e($9,gur),e($9,tW),e(tW,hur),e($9,pur),e(ye,uur),e(ye,k9),e(k9,cbe),e(cbe,_ur),e(k9,bur),e(k9,aW),e(aW,vur),e(k9,Fur),e(ye,Tur),e(ye,S9),e(S9,fbe),e(fbe,Mur),e(S9,Eur),e(S9,nW),e(nW,Cur),e(S9,wur),e(ye,Aur),e(ye,R9),e(R9,mbe),e(mbe,yur),e(R9,Lur),e(R9,sW),e(sW,xur),e(R9,$ur),e(ye,kur),e(ye,B9),e(B9,gbe),e(gbe,Sur),e(B9,Rur),e(B9,lW),e(lW,Bur),e(B9,Pur),e(ye,Iur),e(ye,P9),e(P9,hbe),e(hbe,qur),e(P9,Nur),e(P9,iW),e(iW,jur),e(P9,Dur),e(ye,Gur),e(ye,I9),e(I9,pbe),e(pbe,Our),e(I9,Vur),e(I9,dW),e(dW,Xur),e(I9,zur),e($r,Qur),M(q9,$r,null),b(f,LIe,_),b(f,rc,_),e(rc,N9),e(N9,ube),M(oL,ube,null),e(rc,Wur),e(rc,_be),e(_be,Hur),b(f,xIe,_),b(f,tr,_),M(rL,tr,null),e(tr,Uur),e(tr,tc),e(tc,Jur),e(tc,cW),e(cW,Yur),e(tc,Kur),e(tc,fW),e(fW,Zur),e(tc,e_r),e(tr,o_r),e(tr,tL),e(tL,r_r),e(tL,bbe),e(bbe,t_r),e(tL,a_r),e(tr,n_r),e(tr,kt),M(aL,kt,null),e(kt,s_r),e(kt,vbe),e(vbe,l_r),e(kt,i_r),e(kt,ac),e(ac,d_r),e(ac,Fbe),e(Fbe,c_r),e(ac,f_r),e(ac,mW),e(mW,m_r),e(ac,g_r),e(kt,h_r),M(j9,kt,null),e(tr,p_r),e(tr,kr),M(nL,kr,null),e(kr,u_r),e(kr,Tbe),e(Tbe,__r),e(kr,b_r),e(kr,nn),e(nn,v_r),e(nn,Mbe),e(Mbe,F_r),e(nn,T_r),e(nn,Ebe),e(Ebe,M_r),e(nn,E_r),e(nn,Cbe),e(Cbe,C_r),e(nn,w_r),e(kr,A_r),e(kr,Z),e(Z,D9),e(D9,wbe),e(wbe,y_r),e(D9,L_r),e(D9,gW),e(gW,x_r),e(D9,$_r),e(Z,k_r),e(Z,G9),e(G9,Abe),e(Abe,S_r),e(G9,R_r),e(G9,hW),e(hW,B_r),e(G9,P_r),e(Z,I_r),e(Z,O9),e(O9,ybe),e(ybe,q_r),e(O9,N_r),e(O9,pW),e(pW,j_r),e(O9,D_r),e(Z,G_r),e(Z,V9),e(V9,Lbe),e(Lbe,O_r),e(V9,V_r),e(V9,uW),e(uW,X_r),e(V9,z_r),e(Z,Q_r),e(Z,X9),e(X9,xbe),e(xbe,W_r),e(X9,H_r),e(X9,_W),e(_W,U_r),e(X9,J_r),e(Z,Y_r),e(Z,z9),e(z9,$be),e($be,K_r),e(z9,Z_r),e(z9,bW),e(bW,e1r),e(z9,o1r),e(Z,r1r),e(Z,Q9),e(Q9,kbe),e(kbe,t1r),e(Q9,a1r),e(Q9,vW),e(vW,n1r),e(Q9,s1r),e(Z,l1r),e(Z,W9),e(W9,Sbe),e(Sbe,i1r),e(W9,d1r),e(W9,FW),e(FW,c1r),e(W9,f1r),e(Z,m1r),e(Z,H9),e(H9,Rbe),e(Rbe,g1r),e(H9,h1r),e(H9,TW),e(TW,p1r),e(H9,u1r),e(Z,_1r),e(Z,U9),e(U9,Bbe),e(Bbe,b1r),e(U9,v1r),e(U9,MW),e(MW,F1r),e(U9,T1r),e(Z,M1r),e(Z,J9),e(J9,Pbe),e(Pbe,E1r),e(J9,C1r),e(J9,EW),e(EW,w1r),e(J9,A1r),e(Z,y1r),e(Z,Y9),e(Y9,Ibe),e(Ibe,L1r),e(Y9,x1r),e(Y9,CW),e(CW,$1r),e(Y9,k1r),e(Z,S1r),e(Z,K9),e(K9,qbe),e(qbe,R1r),e(K9,B1r),e(K9,wW),e(wW,P1r),e(K9,I1r),e(Z,q1r),e(Z,Z9),e(Z9,Nbe),e(Nbe,N1r),e(Z9,j1r),e(Z9,AW),e(AW,D1r),e(Z9,G1r),e(Z,O1r),e(Z,eM),e(eM,jbe),e(jbe,V1r),e(eM,X1r),e(eM,yW),e(yW,z1r),e(eM,Q1r),e(Z,W1r),e(Z,oM),e(oM,Dbe),e(Dbe,H1r),e(oM,U1r),e(oM,LW),e(LW,J1r),e(oM,Y1r),e(Z,K1r),e(Z,rM),e(rM,Gbe),e(Gbe,Z1r),e(rM,e8r),e(rM,xW),e(xW,o8r),e(rM,r8r),e(Z,t8r),e(Z,tM),e(tM,Obe),e(Obe,a8r),e(tM,n8r),e(tM,$W),e($W,s8r),e(tM,l8r),e(Z,i8r),e(Z,aM),e(aM,Vbe),e(Vbe,d8r),e(aM,c8r),e(aM,kW),e(kW,f8r),e(aM,m8r),e(Z,g8r),e(Z,nM),e(nM,Xbe),e(Xbe,h8r),e(nM,p8r),e(nM,SW),e(SW,u8r),e(nM,_8r),e(Z,b8r),e(Z,sM),e(sM,zbe),e(zbe,v8r),e(sM,F8r),e(sM,RW),e(RW,T8r),e(sM,M8r),e(Z,E8r),e(Z,lM),e(lM,Qbe),e(Qbe,C8r),e(lM,w8r),e(lM,BW),e(BW,A8r),e(lM,y8r),e(Z,L8r),e(Z,iM),e(iM,Wbe),e(Wbe,x8r),e(iM,$8r),e(iM,PW),e(PW,k8r),e(iM,S8r),e(Z,R8r),e(Z,dM),e(dM,Hbe),e(Hbe,B8r),e(dM,P8r),e(dM,IW),e(IW,I8r),e(dM,q8r),e(Z,N8r),e(Z,cM),e(cM,Ube),e(Ube,j8r),e(cM,D8r),e(cM,qW),e(qW,G8r),e(cM,O8r),e(Z,V8r),e(Z,fM),e(fM,Jbe),e(Jbe,X8r),e(fM,z8r),e(fM,NW),e(NW,Q8r),e(fM,W8r),e(kr,H8r),M(mM,kr,null),b(f,$Ie,_),b(f,nc,_),e(nc,gM),e(gM,Ybe),M(sL,Ybe,null),e(nc,U8r),e(nc,Kbe),e(Kbe,J8r),b(f,kIe,_),b(f,ar,_),M(lL,ar,null),e(ar,Y8r),e(ar,sc),e(sc,K8r),e(sc,jW),e(jW,Z8r),e(sc,ebr),e(sc,DW),e(DW,obr),e(sc,rbr),e(ar,tbr),e(ar,iL),e(iL,abr),e(iL,Zbe),e(Zbe,nbr),e(iL,sbr),e(ar,lbr),e(ar,St),M(dL,St,null),e(St,ibr),e(St,e2e),e(e2e,dbr),e(St,cbr),e(St,lc),e(lc,fbr),e(lc,o2e),e(o2e,mbr),e(lc,gbr),e(lc,GW),e(GW,hbr),e(lc,pbr),e(St,ubr),M(hM,St,null),e(ar,_br),e(ar,Sr),M(cL,Sr,null),e(Sr,bbr),e(Sr,r2e),e(r2e,vbr),e(Sr,Fbr),e(Sr,sn),e(sn,Tbr),e(sn,t2e),e(t2e,Mbr),e(sn,Ebr),e(sn,a2e),e(a2e,Cbr),e(sn,wbr),e(sn,n2e),e(n2e,Abr),e(sn,ybr),e(Sr,Lbr),e(Sr,pe),e(pe,pM),e(pM,s2e),e(s2e,xbr),e(pM,$br),e(pM,OW),e(OW,kbr),e(pM,Sbr),e(pe,Rbr),e(pe,uM),e(uM,l2e),e(l2e,Bbr),e(uM,Pbr),e(uM,VW),e(VW,Ibr),e(uM,qbr),e(pe,Nbr),e(pe,_M),e(_M,i2e),e(i2e,jbr),e(_M,Dbr),e(_M,XW),e(XW,Gbr),e(_M,Obr),e(pe,Vbr),e(pe,bM),e(bM,d2e),e(d2e,Xbr),e(bM,zbr),e(bM,zW),e(zW,Qbr),e(bM,Wbr),e(pe,Hbr),e(pe,vM),e(vM,c2e),e(c2e,Ubr),e(vM,Jbr),e(vM,QW),e(QW,Ybr),e(vM,Kbr),e(pe,Zbr),e(pe,FM),e(FM,f2e),e(f2e,e2r),e(FM,o2r),e(FM,WW),e(WW,r2r),e(FM,t2r),e(pe,a2r),e(pe,TM),e(TM,m2e),e(m2e,n2r),e(TM,s2r),e(TM,HW),e(HW,l2r),e(TM,i2r),e(pe,d2r),e(pe,MM),e(MM,g2e),e(g2e,c2r),e(MM,f2r),e(MM,UW),e(UW,m2r),e(MM,g2r),e(pe,h2r),e(pe,EM),e(EM,h2e),e(h2e,p2r),e(EM,u2r),e(EM,JW),e(JW,_2r),e(EM,b2r),e(pe,v2r),e(pe,CM),e(CM,p2e),e(p2e,F2r),e(CM,T2r),e(CM,YW),e(YW,M2r),e(CM,E2r),e(pe,C2r),e(pe,wM),e(wM,u2e),e(u2e,w2r),e(wM,A2r),e(wM,KW),e(KW,y2r),e(wM,L2r),e(pe,x2r),e(pe,AM),e(AM,_2e),e(_2e,$2r),e(AM,k2r),e(AM,ZW),e(ZW,S2r),e(AM,R2r),e(pe,B2r),e(pe,yM),e(yM,b2e),e(b2e,P2r),e(yM,I2r),e(yM,eH),e(eH,q2r),e(yM,N2r),e(pe,j2r),e(pe,LM),e(LM,v2e),e(v2e,D2r),e(LM,G2r),e(LM,oH),e(oH,O2r),e(LM,V2r),e(pe,X2r),e(pe,xM),e(xM,F2e),e(F2e,z2r),e(xM,Q2r),e(xM,rH),e(rH,W2r),e(xM,H2r),e(pe,U2r),e(pe,$M),e($M,T2e),e(T2e,J2r),e($M,Y2r),e($M,tH),e(tH,K2r),e($M,Z2r),e(pe,evr),e(pe,kM),e(kM,M2e),e(M2e,ovr),e(kM,rvr),e(kM,aH),e(aH,tvr),e(kM,avr),e(Sr,nvr),M(SM,Sr,null),b(f,SIe,_),b(f,ic,_),e(ic,RM),e(RM,E2e),M(fL,E2e,null),e(ic,svr),e(ic,C2e),e(C2e,lvr),b(f,RIe,_),b(f,nr,_),M(mL,nr,null),e(nr,ivr),e(nr,dc),e(dc,dvr),e(dc,nH),e(nH,cvr),e(dc,fvr),e(dc,sH),e(sH,mvr),e(dc,gvr),e(nr,hvr),e(nr,gL),e(gL,pvr),e(gL,w2e),e(w2e,uvr),e(gL,_vr),e(nr,bvr),e(nr,Rt),M(hL,Rt,null),e(Rt,vvr),e(Rt,A2e),e(A2e,Fvr),e(Rt,Tvr),e(Rt,cc),e(cc,Mvr),e(cc,y2e),e(y2e,Evr),e(cc,Cvr),e(cc,lH),e(lH,wvr),e(cc,Avr),e(Rt,yvr),M(BM,Rt,null),e(nr,Lvr),e(nr,Rr),M(pL,Rr,null),e(Rr,xvr),e(Rr,L2e),e(L2e,$vr),e(Rr,kvr),e(Rr,ln),e(ln,Svr),e(ln,x2e),e(x2e,Rvr),e(ln,Bvr),e(ln,$2e),e($2e,Pvr),e(ln,Ivr),e(ln,k2e),e(k2e,qvr),e(ln,Nvr),e(Rr,jvr),e(Rr,uL),e(uL,PM),e(PM,S2e),e(S2e,Dvr),e(PM,Gvr),e(PM,iH),e(iH,Ovr),e(PM,Vvr),e(uL,Xvr),e(uL,IM),e(IM,R2e),e(R2e,zvr),e(IM,Qvr),e(IM,dH),e(dH,Wvr),e(IM,Hvr),e(Rr,Uvr),M(qM,Rr,null),b(f,BIe,_),b(f,fc,_),e(fc,NM),e(NM,B2e),M(_L,B2e,null),e(fc,Jvr),e(fc,P2e),e(P2e,Yvr),b(f,PIe,_),b(f,sr,_),M(bL,sr,null),e(sr,Kvr),e(sr,mc),e(mc,Zvr),e(mc,cH),e(cH,eFr),e(mc,oFr),e(mc,fH),e(fH,rFr),e(mc,tFr),e(sr,aFr),e(sr,vL),e(vL,nFr),e(vL,I2e),e(I2e,sFr),e(vL,lFr),e(sr,iFr),e(sr,Bt),M(FL,Bt,null),e(Bt,dFr),e(Bt,q2e),e(q2e,cFr),e(Bt,fFr),e(Bt,gc),e(gc,mFr),e(gc,N2e),e(N2e,gFr),e(gc,hFr),e(gc,mH),e(mH,pFr),e(gc,uFr),e(Bt,_Fr),M(jM,Bt,null),e(sr,bFr),e(sr,Br),M(TL,Br,null),e(Br,vFr),e(Br,j2e),e(j2e,FFr),e(Br,TFr),e(Br,dn),e(dn,MFr),e(dn,D2e),e(D2e,EFr),e(dn,CFr),e(dn,G2e),e(G2e,wFr),e(dn,AFr),e(dn,O2e),e(O2e,yFr),e(dn,LFr),e(Br,xFr),e(Br,V2e),e(V2e,DM),e(DM,X2e),e(X2e,$Fr),e(DM,kFr),e(DM,gH),e(gH,SFr),e(DM,RFr),e(Br,BFr),M(GM,Br,null),b(f,IIe,_),b(f,hc,_),e(hc,OM),e(OM,z2e),M(ML,z2e,null),e(hc,PFr),e(hc,Q2e),e(Q2e,IFr),b(f,qIe,_),b(f,lr,_),M(EL,lr,null),e(lr,qFr),e(lr,pc),e(pc,NFr),e(pc,hH),e(hH,jFr),e(pc,DFr),e(pc,pH),e(pH,GFr),e(pc,OFr),e(lr,VFr),e(lr,CL),e(CL,XFr),e(CL,W2e),e(W2e,zFr),e(CL,QFr),e(lr,WFr),e(lr,Pt),M(wL,Pt,null),e(Pt,HFr),e(Pt,H2e),e(H2e,UFr),e(Pt,JFr),e(Pt,uc),e(uc,YFr),e(uc,U2e),e(U2e,KFr),e(uc,ZFr),e(uc,uH),e(uH,e6r),e(uc,o6r),e(Pt,r6r),M(VM,Pt,null),e(lr,t6r),e(lr,Pr),M(AL,Pr,null),e(Pr,a6r),e(Pr,J2e),e(J2e,n6r),e(Pr,s6r),e(Pr,cn),e(cn,l6r),e(cn,Y2e),e(Y2e,i6r),e(cn,d6r),e(cn,K2e),e(K2e,c6r),e(cn,f6r),e(cn,Z2e),e(Z2e,m6r),e(cn,g6r),e(Pr,h6r),e(Pr,de),e(de,XM),e(XM,eve),e(eve,p6r),e(XM,u6r),e(XM,_H),e(_H,_6r),e(XM,b6r),e(de,v6r),e(de,zM),e(zM,ove),e(ove,F6r),e(zM,T6r),e(zM,bH),e(bH,M6r),e(zM,E6r),e(de,C6r),e(de,QM),e(QM,rve),e(rve,w6r),e(QM,A6r),e(QM,vH),e(vH,y6r),e(QM,L6r),e(de,x6r),e(de,WM),e(WM,tve),e(tve,$6r),e(WM,k6r),e(WM,FH),e(FH,S6r),e(WM,R6r),e(de,B6r),e(de,HM),e(HM,ave),e(ave,P6r),e(HM,I6r),e(HM,TH),e(TH,q6r),e(HM,N6r),e(de,j6r),e(de,UM),e(UM,nve),e(nve,D6r),e(UM,G6r),e(UM,MH),e(MH,O6r),e(UM,V6r),e(de,X6r),e(de,JM),e(JM,sve),e(sve,z6r),e(JM,Q6r),e(JM,EH),e(EH,W6r),e(JM,H6r),e(de,U6r),e(de,YM),e(YM,lve),e(lve,J6r),e(YM,Y6r),e(YM,CH),e(CH,K6r),e(YM,Z6r),e(de,eTr),e(de,KM),e(KM,ive),e(ive,oTr),e(KM,rTr),e(KM,wH),e(wH,tTr),e(KM,aTr),e(de,nTr),e(de,ZM),e(ZM,dve),e(dve,sTr),e(ZM,lTr),e(ZM,AH),e(AH,iTr),e(ZM,dTr),e(de,cTr),e(de,e4),e(e4,cve),e(cve,fTr),e(e4,mTr),e(e4,yH),e(yH,gTr),e(e4,hTr),e(de,pTr),e(de,o4),e(o4,fve),e(fve,uTr),e(o4,_Tr),e(o4,LH),e(LH,bTr),e(o4,vTr),e(de,FTr),e(de,r4),e(r4,mve),e(mve,TTr),e(r4,MTr),e(r4,xH),e(xH,ETr),e(r4,CTr),e(de,wTr),e(de,t4),e(t4,gve),e(gve,ATr),e(t4,yTr),e(t4,$H),e($H,LTr),e(t4,xTr),e(de,$Tr),e(de,a4),e(a4,hve),e(hve,kTr),e(a4,STr),e(a4,kH),e(kH,RTr),e(a4,BTr),e(de,PTr),e(de,n4),e(n4,pve),e(pve,ITr),e(n4,qTr),e(n4,SH),e(SH,NTr),e(n4,jTr),e(de,DTr),e(de,s4),e(s4,uve),e(uve,GTr),e(s4,OTr),e(s4,RH),e(RH,VTr),e(s4,XTr),e(de,zTr),e(de,l4),e(l4,_ve),e(_ve,QTr),e(l4,WTr),e(l4,BH),e(BH,HTr),e(l4,UTr),e(de,JTr),e(de,i4),e(i4,bve),e(bve,YTr),e(i4,KTr),e(i4,PH),e(PH,ZTr),e(i4,e9r),e(de,o9r),e(de,d4),e(d4,vve),e(vve,r9r),e(d4,t9r),e(d4,IH),e(IH,a9r),e(d4,n9r),e(Pr,s9r),M(c4,Pr,null),b(f,NIe,_),b(f,_c,_),e(_c,f4),e(f4,Fve),M(yL,Fve,null),e(_c,l9r),e(_c,Tve),e(Tve,i9r),b(f,jIe,_),b(f,ir,_),M(LL,ir,null),e(ir,d9r),e(ir,bc),e(bc,c9r),e(bc,qH),e(qH,f9r),e(bc,m9r),e(bc,NH),e(NH,g9r),e(bc,h9r),e(ir,p9r),e(ir,xL),e(xL,u9r),e(xL,Mve),e(Mve,_9r),e(xL,b9r),e(ir,v9r),e(ir,It),M($L,It,null),e(It,F9r),e(It,Eve),e(Eve,T9r),e(It,M9r),e(It,vc),e(vc,E9r),e(vc,Cve),e(Cve,C9r),e(vc,w9r),e(vc,jH),e(jH,A9r),e(vc,y9r),e(It,L9r),M(m4,It,null),e(ir,x9r),e(ir,Ir),M(kL,Ir,null),e(Ir,$9r),e(Ir,wve),e(wve,k9r),e(Ir,S9r),e(Ir,fn),e(fn,R9r),e(fn,Ave),e(Ave,B9r),e(fn,P9r),e(fn,yve),e(yve,I9r),e(fn,q9r),e(fn,Lve),e(Lve,N9r),e(fn,j9r),e(Ir,D9r),e(Ir,ce),e(ce,g4),e(g4,xve),e(xve,G9r),e(g4,O9r),e(g4,DH),e(DH,V9r),e(g4,X9r),e(ce,z9r),e(ce,h4),e(h4,$ve),e($ve,Q9r),e(h4,W9r),e(h4,GH),e(GH,H9r),e(h4,U9r),e(ce,J9r),e(ce,p4),e(p4,kve),e(kve,Y9r),e(p4,K9r),e(p4,OH),e(OH,Z9r),e(p4,eMr),e(ce,oMr),e(ce,u4),e(u4,Sve),e(Sve,rMr),e(u4,tMr),e(u4,VH),e(VH,aMr),e(u4,nMr),e(ce,sMr),e(ce,_4),e(_4,Rve),e(Rve,lMr),e(_4,iMr),e(_4,XH),e(XH,dMr),e(_4,cMr),e(ce,fMr),e(ce,b4),e(b4,Bve),e(Bve,mMr),e(b4,gMr),e(b4,zH),e(zH,hMr),e(b4,pMr),e(ce,uMr),e(ce,v4),e(v4,Pve),e(Pve,_Mr),e(v4,bMr),e(v4,QH),e(QH,vMr),e(v4,FMr),e(ce,TMr),e(ce,F4),e(F4,Ive),e(Ive,MMr),e(F4,EMr),e(F4,WH),e(WH,CMr),e(F4,wMr),e(ce,AMr),e(ce,T4),e(T4,qve),e(qve,yMr),e(T4,LMr),e(T4,HH),e(HH,xMr),e(T4,$Mr),e(ce,kMr),e(ce,M4),e(M4,Nve),e(Nve,SMr),e(M4,RMr),e(M4,UH),e(UH,BMr),e(M4,PMr),e(ce,IMr),e(ce,E4),e(E4,jve),e(jve,qMr),e(E4,NMr),e(E4,JH),e(JH,jMr),e(E4,DMr),e(ce,GMr),e(ce,C4),e(C4,Dve),e(Dve,OMr),e(C4,VMr),e(C4,YH),e(YH,XMr),e(C4,zMr),e(ce,QMr),e(ce,w4),e(w4,Gve),e(Gve,WMr),e(w4,HMr),e(w4,KH),e(KH,UMr),e(w4,JMr),e(ce,YMr),e(ce,A4),e(A4,Ove),e(Ove,KMr),e(A4,ZMr),e(A4,ZH),e(ZH,e4r),e(A4,o4r),e(ce,r4r),e(ce,y4),e(y4,Vve),e(Vve,t4r),e(y4,a4r),e(y4,eU),e(eU,n4r),e(y4,s4r),e(ce,l4r),e(ce,L4),e(L4,Xve),e(Xve,i4r),e(L4,d4r),e(L4,oU),e(oU,c4r),e(L4,f4r),e(ce,m4r),e(ce,x4),e(x4,zve),e(zve,g4r),e(x4,h4r),e(x4,rU),e(rU,p4r),e(x4,u4r),e(ce,_4r),e(ce,$4),e($4,Qve),e(Qve,b4r),e($4,v4r),e($4,tU),e(tU,F4r),e($4,T4r),e(ce,M4r),e(ce,k4),e(k4,Wve),e(Wve,E4r),e(k4,C4r),e(k4,aU),e(aU,w4r),e(k4,A4r),e(ce,y4r),e(ce,S4),e(S4,Hve),e(Hve,L4r),e(S4,x4r),e(S4,nU),e(nU,$4r),e(S4,k4r),e(Ir,S4r),M(R4,Ir,null),b(f,DIe,_),b(f,Fc,_),e(Fc,B4),e(B4,Uve),M(SL,Uve,null),e(Fc,R4r),e(Fc,Jve),e(Jve,B4r),b(f,GIe,_),b(f,dr,_),M(RL,dr,null),e(dr,P4r),e(dr,Tc),e(Tc,I4r),e(Tc,sU),e(sU,q4r),e(Tc,N4r),e(Tc,lU),e(lU,j4r),e(Tc,D4r),e(dr,G4r),e(dr,BL),e(BL,O4r),e(BL,Yve),e(Yve,V4r),e(BL,X4r),e(dr,z4r),e(dr,qt),M(PL,qt,null),e(qt,Q4r),e(qt,Kve),e(Kve,W4r),e(qt,H4r),e(qt,Mc),e(Mc,U4r),e(Mc,Zve),e(Zve,J4r),e(Mc,Y4r),e(Mc,iU),e(iU,K4r),e(Mc,Z4r),e(qt,eEr),M(P4,qt,null),e(dr,oEr),e(dr,qr),M(IL,qr,null),e(qr,rEr),e(qr,eFe),e(eFe,tEr),e(qr,aEr),e(qr,mn),e(mn,nEr),e(mn,oFe),e(oFe,sEr),e(mn,lEr),e(mn,rFe),e(rFe,iEr),e(mn,dEr),e(mn,tFe),e(tFe,cEr),e(mn,fEr),e(qr,mEr),e(qr,aFe),e(aFe,I4),e(I4,nFe),e(nFe,gEr),e(I4,hEr),e(I4,dU),e(dU,pEr),e(I4,uEr),e(qr,_Er),M(q4,qr,null),b(f,OIe,_),b(f,Ec,_),e(Ec,N4),e(N4,sFe),M(qL,sFe,null),e(Ec,bEr),e(Ec,lFe),e(lFe,vEr),b(f,VIe,_),b(f,cr,_),M(NL,cr,null),e(cr,FEr),e(cr,Cc),e(Cc,TEr),e(Cc,cU),e(cU,MEr),e(Cc,EEr),e(Cc,fU),e(fU,CEr),e(Cc,wEr),e(cr,AEr),e(cr,jL),e(jL,yEr),e(jL,iFe),e(iFe,LEr),e(jL,xEr),e(cr,$Er),e(cr,Nt),M(DL,Nt,null),e(Nt,kEr),e(Nt,dFe),e(dFe,SEr),e(Nt,REr),e(Nt,wc),e(wc,BEr),e(wc,cFe),e(cFe,PEr),e(wc,IEr),e(wc,mU),e(mU,qEr),e(wc,NEr),e(Nt,jEr),M(j4,Nt,null),e(cr,DEr),e(cr,Nr),M(GL,Nr,null),e(Nr,GEr),e(Nr,fFe),e(fFe,OEr),e(Nr,VEr),e(Nr,gn),e(gn,XEr),e(gn,mFe),e(mFe,zEr),e(gn,QEr),e(gn,gFe),e(gFe,WEr),e(gn,HEr),e(gn,hFe),e(hFe,UEr),e(gn,JEr),e(Nr,YEr),e(Nr,pFe),e(pFe,D4),e(D4,uFe),e(uFe,KEr),e(D4,ZEr),e(D4,gU),e(gU,e5r),e(D4,o5r),e(Nr,r5r),M(G4,Nr,null),b(f,XIe,_),b(f,Ac,_),e(Ac,O4),e(O4,_Fe),M(OL,_Fe,null),e(Ac,t5r),e(Ac,bFe),e(bFe,a5r),b(f,zIe,_),b(f,fr,_),M(VL,fr,null),e(fr,n5r),e(fr,yc),e(yc,s5r),e(yc,hU),e(hU,l5r),e(yc,i5r),e(yc,pU),e(pU,d5r),e(yc,c5r),e(fr,f5r),e(fr,XL),e(XL,m5r),e(XL,vFe),e(vFe,g5r),e(XL,h5r),e(fr,p5r),e(fr,jt),M(zL,jt,null),e(jt,u5r),e(jt,FFe),e(FFe,_5r),e(jt,b5r),e(jt,Lc),e(Lc,v5r),e(Lc,TFe),e(TFe,F5r),e(Lc,T5r),e(Lc,uU),e(uU,M5r),e(Lc,E5r),e(jt,C5r),M(V4,jt,null),e(fr,w5r),e(fr,jr),M(QL,jr,null),e(jr,A5r),e(jr,MFe),e(MFe,y5r),e(jr,L5r),e(jr,hn),e(hn,x5r),e(hn,EFe),e(EFe,$5r),e(hn,k5r),e(hn,CFe),e(CFe,S5r),e(hn,R5r),e(hn,wFe),e(wFe,B5r),e(hn,P5r),e(jr,I5r),e(jr,oe),e(oe,X4),e(X4,AFe),e(AFe,q5r),e(X4,N5r),e(X4,_U),e(_U,j5r),e(X4,D5r),e(oe,G5r),e(oe,z4),e(z4,yFe),e(yFe,O5r),e(z4,V5r),e(z4,bU),e(bU,X5r),e(z4,z5r),e(oe,Q5r),e(oe,Q4),e(Q4,LFe),e(LFe,W5r),e(Q4,H5r),e(Q4,vU),e(vU,U5r),e(Q4,J5r),e(oe,Y5r),e(oe,W4),e(W4,xFe),e(xFe,K5r),e(W4,Z5r),e(W4,FU),e(FU,eCr),e(W4,oCr),e(oe,rCr),e(oe,H4),e(H4,$Fe),e($Fe,tCr),e(H4,aCr),e(H4,TU),e(TU,nCr),e(H4,sCr),e(oe,lCr),e(oe,U4),e(U4,kFe),e(kFe,iCr),e(U4,dCr),e(U4,MU),e(MU,cCr),e(U4,fCr),e(oe,mCr),e(oe,J4),e(J4,SFe),e(SFe,gCr),e(J4,hCr),e(J4,EU),e(EU,pCr),e(J4,uCr),e(oe,_Cr),e(oe,Y4),e(Y4,RFe),e(RFe,bCr),e(Y4,vCr),e(Y4,CU),e(CU,FCr),e(Y4,TCr),e(oe,MCr),e(oe,K4),e(K4,BFe),e(BFe,ECr),e(K4,CCr),e(K4,wU),e(wU,wCr),e(K4,ACr),e(oe,yCr),e(oe,Z4),e(Z4,PFe),e(PFe,LCr),e(Z4,xCr),e(Z4,AU),e(AU,$Cr),e(Z4,kCr),e(oe,SCr),e(oe,eE),e(eE,IFe),e(IFe,RCr),e(eE,BCr),e(eE,yU),e(yU,PCr),e(eE,ICr),e(oe,qCr),e(oe,oE),e(oE,qFe),e(qFe,NCr),e(oE,jCr),e(oE,LU),e(LU,DCr),e(oE,GCr),e(oe,OCr),e(oe,rE),e(rE,NFe),e(NFe,VCr),e(rE,XCr),e(rE,xU),e(xU,zCr),e(rE,QCr),e(oe,WCr),e(oe,tE),e(tE,jFe),e(jFe,HCr),e(tE,UCr),e(tE,$U),e($U,JCr),e(tE,YCr),e(oe,KCr),e(oe,aE),e(aE,DFe),e(DFe,ZCr),e(aE,e3r),e(aE,kU),e(kU,o3r),e(aE,r3r),e(oe,t3r),e(oe,nE),e(nE,GFe),e(GFe,a3r),e(nE,n3r),e(nE,SU),e(SU,s3r),e(nE,l3r),e(oe,i3r),e(oe,sE),e(sE,OFe),e(OFe,d3r),e(sE,c3r),e(sE,RU),e(RU,f3r),e(sE,m3r),e(oe,g3r),e(oe,lE),e(lE,VFe),e(VFe,h3r),e(lE,p3r),e(lE,BU),e(BU,u3r),e(lE,_3r),e(oe,b3r),e(oe,iE),e(iE,XFe),e(XFe,v3r),e(iE,F3r),e(iE,PU),e(PU,T3r),e(iE,M3r),e(oe,E3r),e(oe,dE),e(dE,zFe),e(zFe,C3r),e(dE,w3r),e(dE,IU),e(IU,A3r),e(dE,y3r),e(oe,L3r),e(oe,cE),e(cE,QFe),e(QFe,x3r),e(cE,$3r),e(cE,qU),e(qU,k3r),e(cE,S3r),e(oe,R3r),e(oe,fE),e(fE,WFe),e(WFe,B3r),e(fE,P3r),e(fE,NU),e(NU,I3r),e(fE,q3r),e(oe,N3r),e(oe,mE),e(mE,HFe),e(HFe,j3r),e(mE,D3r),e(mE,jU),e(jU,G3r),e(mE,O3r),e(oe,V3r),e(oe,gE),e(gE,UFe),e(UFe,X3r),e(gE,z3r),e(gE,DU),e(DU,Q3r),e(gE,W3r),e(oe,H3r),e(oe,hE),e(hE,JFe),e(JFe,U3r),e(hE,J3r),e(hE,GU),e(GU,Y3r),e(hE,K3r),e(jr,Z3r),M(pE,jr,null),b(f,QIe,_),b(f,xc,_),e(xc,uE),e(uE,YFe),M(WL,YFe,null),e(xc,ewr),e(xc,KFe),e(KFe,owr),b(f,WIe,_),b(f,mr,_),M(HL,mr,null),e(mr,rwr),e(mr,$c),e($c,twr),e($c,OU),e(OU,awr),e($c,nwr),e($c,VU),e(VU,swr),e($c,lwr),e(mr,iwr),e(mr,UL),e(UL,dwr),e(UL,ZFe),e(ZFe,cwr),e(UL,fwr),e(mr,mwr),e(mr,Dt),M(JL,Dt,null),e(Dt,gwr),e(Dt,e6e),e(e6e,hwr),e(Dt,pwr),e(Dt,kc),e(kc,uwr),e(kc,o6e),e(o6e,_wr),e(kc,bwr),e(kc,XU),e(XU,vwr),e(kc,Fwr),e(Dt,Twr),M(_E,Dt,null),e(mr,Mwr),e(mr,Dr),M(YL,Dr,null),e(Dr,Ewr),e(Dr,r6e),e(r6e,Cwr),e(Dr,wwr),e(Dr,pn),e(pn,Awr),e(pn,t6e),e(t6e,ywr),e(pn,Lwr),e(pn,a6e),e(a6e,xwr),e(pn,$wr),e(pn,n6e),e(n6e,kwr),e(pn,Swr),e(Dr,Rwr),e(Dr,ke),e(ke,bE),e(bE,s6e),e(s6e,Bwr),e(bE,Pwr),e(bE,zU),e(zU,Iwr),e(bE,qwr),e(ke,Nwr),e(ke,vE),e(vE,l6e),e(l6e,jwr),e(vE,Dwr),e(vE,QU),e(QU,Gwr),e(vE,Owr),e(ke,Vwr),e(ke,FE),e(FE,i6e),e(i6e,Xwr),e(FE,zwr),e(FE,WU),e(WU,Qwr),e(FE,Wwr),e(ke,Hwr),e(ke,TE),e(TE,d6e),e(d6e,Uwr),e(TE,Jwr),e(TE,HU),e(HU,Ywr),e(TE,Kwr),e(ke,Zwr),e(ke,ME),e(ME,c6e),e(c6e,eAr),e(ME,oAr),e(ME,UU),e(UU,rAr),e(ME,tAr),e(ke,aAr),e(ke,EE),e(EE,f6e),e(f6e,nAr),e(EE,sAr),e(EE,JU),e(JU,lAr),e(EE,iAr),e(ke,dAr),e(ke,CE),e(CE,m6e),e(m6e,cAr),e(CE,fAr),e(CE,YU),e(YU,mAr),e(CE,gAr),e(ke,hAr),e(ke,wE),e(wE,g6e),e(g6e,pAr),e(wE,uAr),e(wE,KU),e(KU,_Ar),e(wE,bAr),e(ke,vAr),e(ke,AE),e(AE,h6e),e(h6e,FAr),e(AE,TAr),e(AE,ZU),e(ZU,MAr),e(AE,EAr),e(Dr,CAr),M(yE,Dr,null),b(f,HIe,_),b(f,Sc,_),e(Sc,LE),e(LE,p6e),M(KL,p6e,null),e(Sc,wAr),e(Sc,u6e),e(u6e,AAr),b(f,UIe,_),b(f,gr,_),M(ZL,gr,null),e(gr,yAr),e(gr,Rc),e(Rc,LAr),e(Rc,eJ),e(eJ,xAr),e(Rc,$Ar),e(Rc,oJ),e(oJ,kAr),e(Rc,SAr),e(gr,RAr),e(gr,ex),e(ex,BAr),e(ex,_6e),e(_6e,PAr),e(ex,IAr),e(gr,qAr),e(gr,Gt),M(ox,Gt,null),e(Gt,NAr),e(Gt,b6e),e(b6e,jAr),e(Gt,DAr),e(Gt,Bc),e(Bc,GAr),e(Bc,v6e),e(v6e,OAr),e(Bc,VAr),e(Bc,rJ),e(rJ,XAr),e(Bc,zAr),e(Gt,QAr),M(xE,Gt,null),e(gr,WAr),e(gr,Gr),M(rx,Gr,null),e(Gr,HAr),e(Gr,F6e),e(F6e,UAr),e(Gr,JAr),e(Gr,un),e(un,YAr),e(un,T6e),e(T6e,KAr),e(un,ZAr),e(un,M6e),e(M6e,e0r),e(un,o0r),e(un,E6e),e(E6e,r0r),e(un,t0r),e(Gr,a0r),e(Gr,Me),e(Me,$E),e($E,C6e),e(C6e,n0r),e($E,s0r),e($E,tJ),e(tJ,l0r),e($E,i0r),e(Me,d0r),e(Me,kE),e(kE,w6e),e(w6e,c0r),e(kE,f0r),e(kE,aJ),e(aJ,m0r),e(kE,g0r),e(Me,h0r),e(Me,SE),e(SE,A6e),e(A6e,p0r),e(SE,u0r),e(SE,nJ),e(nJ,_0r),e(SE,b0r),e(Me,v0r),e(Me,RE),e(RE,y6e),e(y6e,F0r),e(RE,T0r),e(RE,sJ),e(sJ,M0r),e(RE,E0r),e(Me,C0r),e(Me,BE),e(BE,L6e),e(L6e,w0r),e(BE,A0r),e(BE,lJ),e(lJ,y0r),e(BE,L0r),e(Me,x0r),e(Me,PE),e(PE,x6e),e(x6e,$0r),e(PE,k0r),e(PE,iJ),e(iJ,S0r),e(PE,R0r),e(Me,B0r),e(Me,IE),e(IE,$6e),e($6e,P0r),e(IE,I0r),e(IE,dJ),e(dJ,q0r),e(IE,N0r),e(Me,j0r),e(Me,qE),e(qE,k6e),e(k6e,D0r),e(qE,G0r),e(qE,cJ),e(cJ,O0r),e(qE,V0r),e(Me,X0r),e(Me,NE),e(NE,S6e),e(S6e,z0r),e(NE,Q0r),e(NE,fJ),e(fJ,W0r),e(NE,H0r),e(Me,U0r),e(Me,jE),e(jE,R6e),e(R6e,J0r),e(jE,Y0r),e(jE,mJ),e(mJ,K0r),e(jE,Z0r),e(Me,eyr),e(Me,DE),e(DE,B6e),e(B6e,oyr),e(DE,ryr),e(DE,gJ),e(gJ,tyr),e(DE,ayr),e(Me,nyr),e(Me,GE),e(GE,P6e),e(P6e,syr),e(GE,lyr),e(GE,hJ),e(hJ,iyr),e(GE,dyr),e(Gr,cyr),M(OE,Gr,null),b(f,JIe,_),b(f,Pc,_),e(Pc,VE),e(VE,I6e),M(tx,I6e,null),e(Pc,fyr),e(Pc,q6e),e(q6e,myr),b(f,YIe,_),b(f,hr,_),M(ax,hr,null),e(hr,gyr),e(hr,Ic),e(Ic,hyr),e(Ic,pJ),e(pJ,pyr),e(Ic,uyr),e(Ic,uJ),e(uJ,_yr),e(Ic,byr),e(hr,vyr),e(hr,nx),e(nx,Fyr),e(nx,N6e),e(N6e,Tyr),e(nx,Myr),e(hr,Eyr),e(hr,Ot),M(sx,Ot,null),e(Ot,Cyr),e(Ot,j6e),e(j6e,wyr),e(Ot,Ayr),e(Ot,qc),e(qc,yyr),e(qc,D6e),e(D6e,Lyr),e(qc,xyr),e(qc,_J),e(_J,$yr),e(qc,kyr),e(Ot,Syr),M(XE,Ot,null),e(hr,Ryr),e(hr,Or),M(lx,Or,null),e(Or,Byr),e(Or,G6e),e(G6e,Pyr),e(Or,Iyr),e(Or,_n),e(_n,qyr),e(_n,O6e),e(O6e,Nyr),e(_n,jyr),e(_n,V6e),e(V6e,Dyr),e(_n,Gyr),e(_n,X6e),e(X6e,Oyr),e(_n,Vyr),e(Or,Xyr),e(Or,Le),e(Le,zE),e(zE,z6e),e(z6e,zyr),e(zE,Qyr),e(zE,bJ),e(bJ,Wyr),e(zE,Hyr),e(Le,Uyr),e(Le,QE),e(QE,Q6e),e(Q6e,Jyr),e(QE,Yyr),e(QE,vJ),e(vJ,Kyr),e(QE,Zyr),e(Le,eLr),e(Le,WE),e(WE,W6e),e(W6e,oLr),e(WE,rLr),e(WE,FJ),e(FJ,tLr),e(WE,aLr),e(Le,nLr),e(Le,HE),e(HE,H6e),e(H6e,sLr),e(HE,lLr),e(HE,TJ),e(TJ,iLr),e(HE,dLr),e(Le,cLr),e(Le,UE),e(UE,U6e),e(U6e,fLr),e(UE,mLr),e(UE,MJ),e(MJ,gLr),e(UE,hLr),e(Le,pLr),e(Le,JE),e(JE,J6e),e(J6e,uLr),e(JE,_Lr),e(JE,EJ),e(EJ,bLr),e(JE,vLr),e(Le,FLr),e(Le,YE),e(YE,Y6e),e(Y6e,TLr),e(YE,MLr),e(YE,CJ),e(CJ,ELr),e(YE,CLr),e(Le,wLr),e(Le,KE),e(KE,K6e),e(K6e,ALr),e(KE,yLr),e(KE,wJ),e(wJ,LLr),e(KE,xLr),e(Le,$Lr),e(Le,ZE),e(ZE,Z6e),e(Z6e,kLr),e(ZE,SLr),e(ZE,AJ),e(AJ,RLr),e(ZE,BLr),e(Le,PLr),e(Le,e5),e(e5,eTe),e(eTe,ILr),e(e5,qLr),e(e5,yJ),e(yJ,NLr),e(e5,jLr),e(Or,DLr),M(o5,Or,null),b(f,KIe,_),b(f,Nc,_),e(Nc,r5),e(r5,oTe),M(ix,oTe,null),e(Nc,GLr),e(Nc,rTe),e(rTe,OLr),b(f,ZIe,_),b(f,pr,_),M(dx,pr,null),e(pr,VLr),e(pr,jc),e(jc,XLr),e(jc,LJ),e(LJ,zLr),e(jc,QLr),e(jc,xJ),e(xJ,WLr),e(jc,HLr),e(pr,ULr),e(pr,cx),e(cx,JLr),e(cx,tTe),e(tTe,YLr),e(cx,KLr),e(pr,ZLr),e(pr,Vt),M(fx,Vt,null),e(Vt,exr),e(Vt,aTe),e(aTe,oxr),e(Vt,rxr),e(Vt,Dc),e(Dc,txr),e(Dc,nTe),e(nTe,axr),e(Dc,nxr),e(Dc,$J),e($J,sxr),e(Dc,lxr),e(Vt,ixr),M(t5,Vt,null),e(pr,dxr),e(pr,Vr),M(mx,Vr,null),e(Vr,cxr),e(Vr,sTe),e(sTe,fxr),e(Vr,mxr),e(Vr,bn),e(bn,gxr),e(bn,lTe),e(lTe,hxr),e(bn,pxr),e(bn,iTe),e(iTe,uxr),e(bn,_xr),e(bn,dTe),e(dTe,bxr),e(bn,vxr),e(Vr,Fxr),e(Vr,Se),e(Se,a5),e(a5,cTe),e(cTe,Txr),e(a5,Mxr),e(a5,kJ),e(kJ,Exr),e(a5,Cxr),e(Se,wxr),e(Se,n5),e(n5,fTe),e(fTe,Axr),e(n5,yxr),e(n5,SJ),e(SJ,Lxr),e(n5,xxr),e(Se,$xr),e(Se,s5),e(s5,mTe),e(mTe,kxr),e(s5,Sxr),e(s5,RJ),e(RJ,Rxr),e(s5,Bxr),e(Se,Pxr),e(Se,l5),e(l5,gTe),e(gTe,Ixr),e(l5,qxr),e(l5,BJ),e(BJ,Nxr),e(l5,jxr),e(Se,Dxr),e(Se,i5),e(i5,hTe),e(hTe,Gxr),e(i5,Oxr),e(i5,PJ),e(PJ,Vxr),e(i5,Xxr),e(Se,zxr),e(Se,d5),e(d5,pTe),e(pTe,Qxr),e(d5,Wxr),e(d5,IJ),e(IJ,Hxr),e(d5,Uxr),e(Se,Jxr),e(Se,c5),e(c5,uTe),e(uTe,Yxr),e(c5,Kxr),e(c5,qJ),e(qJ,Zxr),e(c5,e7r),e(Se,o7r),e(Se,f5),e(f5,_Te),e(_Te,r7r),e(f5,t7r),e(f5,NJ),e(NJ,a7r),e(f5,n7r),e(Se,s7r),e(Se,m5),e(m5,bTe),e(bTe,l7r),e(m5,i7r),e(m5,jJ),e(jJ,d7r),e(m5,c7r),e(Vr,f7r),M(g5,Vr,null),b(f,eqe,_),b(f,Gc,_),e(Gc,h5),e(h5,vTe),M(gx,vTe,null),e(Gc,m7r),e(Gc,FTe),e(FTe,g7r),b(f,oqe,_),b(f,ur,_),M(hx,ur,null),e(ur,h7r),e(ur,Oc),e(Oc,p7r),e(Oc,DJ),e(DJ,u7r),e(Oc,_7r),e(Oc,GJ),e(GJ,b7r),e(Oc,v7r),e(ur,F7r),e(ur,px),e(px,T7r),e(px,TTe),e(TTe,M7r),e(px,E7r),e(ur,C7r),e(ur,Xt),M(ux,Xt,null),e(Xt,w7r),e(Xt,MTe),e(MTe,A7r),e(Xt,y7r),e(Xt,Vc),e(Vc,L7r),e(Vc,ETe),e(ETe,x7r),e(Vc,$7r),e(Vc,OJ),e(OJ,k7r),e(Vc,S7r),e(Xt,R7r),M(p5,Xt,null),e(ur,B7r),e(ur,Xr),M(_x,Xr,null),e(Xr,P7r),e(Xr,CTe),e(CTe,I7r),e(Xr,q7r),e(Xr,vn),e(vn,N7r),e(vn,wTe),e(wTe,j7r),e(vn,D7r),e(vn,ATe),e(ATe,G7r),e(vn,O7r),e(vn,yTe),e(yTe,V7r),e(vn,X7r),e(Xr,z7r),e(Xr,xe),e(xe,u5),e(u5,LTe),e(LTe,Q7r),e(u5,W7r),e(u5,VJ),e(VJ,H7r),e(u5,U7r),e(xe,J7r),e(xe,_5),e(_5,xTe),e(xTe,Y7r),e(_5,K7r),e(_5,XJ),e(XJ,Z7r),e(_5,e$r),e(xe,o$r),e(xe,b5),e(b5,$Te),e($Te,r$r),e(b5,t$r),e(b5,zJ),e(zJ,a$r),e(b5,n$r),e(xe,s$r),e(xe,v5),e(v5,kTe),e(kTe,l$r),e(v5,i$r),e(v5,QJ),e(QJ,d$r),e(v5,c$r),e(xe,f$r),e(xe,F5),e(F5,STe),e(STe,m$r),e(F5,g$r),e(F5,WJ),e(WJ,h$r),e(F5,p$r),e(xe,u$r),e(xe,T5),e(T5,RTe),e(RTe,_$r),e(T5,b$r),e(T5,HJ),e(HJ,v$r),e(T5,F$r),e(xe,T$r),e(xe,M5),e(M5,BTe),e(BTe,M$r),e(M5,E$r),e(M5,UJ),e(UJ,C$r),e(M5,w$r),e(xe,A$r),e(xe,E5),e(E5,PTe),e(PTe,y$r),e(E5,L$r),e(E5,JJ),e(JJ,x$r),e(E5,$$r),e(xe,k$r),e(xe,C5),e(C5,ITe),e(ITe,S$r),e(C5,R$r),e(C5,YJ),e(YJ,B$r),e(C5,P$r),e(xe,I$r),e(xe,w5),e(w5,qTe),e(qTe,q$r),e(w5,N$r),e(w5,KJ),e(KJ,j$r),e(w5,D$r),e(Xr,G$r),M(A5,Xr,null),b(f,rqe,_),b(f,Xc,_),e(Xc,y5),e(y5,NTe),M(bx,NTe,null),e(Xc,O$r),e(Xc,jTe),e(jTe,V$r),b(f,tqe,_),b(f,_r,_),M(vx,_r,null),e(_r,X$r),e(_r,zc),e(zc,z$r),e(zc,ZJ),e(ZJ,Q$r),e(zc,W$r),e(zc,eY),e(eY,H$r),e(zc,U$r),e(_r,J$r),e(_r,Fx),e(Fx,Y$r),e(Fx,DTe),e(DTe,K$r),e(Fx,Z$r),e(_r,ekr),e(_r,zt),M(Tx,zt,null),e(zt,okr),e(zt,GTe),e(GTe,rkr),e(zt,tkr),e(zt,Qc),e(Qc,akr),e(Qc,OTe),e(OTe,nkr),e(Qc,skr),e(Qc,oY),e(oY,lkr),e(Qc,ikr),e(zt,dkr),M(L5,zt,null),e(_r,ckr),e(_r,zr),M(Mx,zr,null),e(zr,fkr),e(zr,VTe),e(VTe,mkr),e(zr,gkr),e(zr,Fn),e(Fn,hkr),e(Fn,XTe),e(XTe,pkr),e(Fn,ukr),e(Fn,zTe),e(zTe,_kr),e(Fn,bkr),e(Fn,QTe),e(QTe,vkr),e(Fn,Fkr),e(zr,Tkr),e(zr,$e),e($e,x5),e(x5,WTe),e(WTe,Mkr),e(x5,Ekr),e(x5,rY),e(rY,Ckr),e(x5,wkr),e($e,Akr),e($e,$5),e($5,HTe),e(HTe,ykr),e($5,Lkr),e($5,tY),e(tY,xkr),e($5,$kr),e($e,kkr),e($e,k5),e(k5,UTe),e(UTe,Skr),e(k5,Rkr),e(k5,aY),e(aY,Bkr),e(k5,Pkr),e($e,Ikr),e($e,S5),e(S5,JTe),e(JTe,qkr),e(S5,Nkr),e(S5,nY),e(nY,jkr),e(S5,Dkr),e($e,Gkr),e($e,R5),e(R5,YTe),e(YTe,Okr),e(R5,Vkr),e(R5,sY),e(sY,Xkr),e(R5,zkr),e($e,Qkr),e($e,B5),e(B5,KTe),e(KTe,Wkr),e(B5,Hkr),e(B5,lY),e(lY,Ukr),e(B5,Jkr),e($e,Ykr),e($e,P5),e(P5,ZTe),e(ZTe,Kkr),e(P5,Zkr),e(P5,iY),e(iY,eSr),e(P5,oSr),e($e,rSr),e($e,I5),e(I5,e9e),e(e9e,tSr),e(I5,aSr),e(I5,dY),e(dY,nSr),e(I5,sSr),e($e,lSr),e($e,q5),e(q5,o9e),e(o9e,iSr),e(q5,dSr),e(q5,cY),e(cY,cSr),e(q5,fSr),e($e,mSr),e($e,N5),e(N5,r9e),e(r9e,gSr),e(N5,hSr),e(N5,fY),e(fY,pSr),e(N5,uSr),e(zr,_Sr),M(j5,zr,null),b(f,aqe,_),b(f,Wc,_),e(Wc,D5),e(D5,t9e),M(Ex,t9e,null),e(Wc,bSr),e(Wc,a9e),e(a9e,vSr),b(f,nqe,_),b(f,br,_),M(Cx,br,null),e(br,FSr),e(br,Hc),e(Hc,TSr),e(Hc,mY),e(mY,MSr),e(Hc,ESr),e(Hc,gY),e(gY,CSr),e(Hc,wSr),e(br,ASr),e(br,wx),e(wx,ySr),e(wx,n9e),e(n9e,LSr),e(wx,xSr),e(br,$Sr),e(br,Qt),M(Ax,Qt,null),e(Qt,kSr),e(Qt,s9e),e(s9e,SSr),e(Qt,RSr),e(Qt,Uc),e(Uc,BSr),e(Uc,l9e),e(l9e,PSr),e(Uc,ISr),e(Uc,hY),e(hY,qSr),e(Uc,NSr),e(Qt,jSr),M(G5,Qt,null),e(br,DSr),e(br,Qr),M(yx,Qr,null),e(Qr,GSr),e(Qr,i9e),e(i9e,OSr),e(Qr,VSr),e(Qr,Tn),e(Tn,XSr),e(Tn,d9e),e(d9e,zSr),e(Tn,QSr),e(Tn,c9e),e(c9e,WSr),e(Tn,HSr),e(Tn,f9e),e(f9e,USr),e(Tn,JSr),e(Qr,YSr),e(Qr,De),e(De,O5),e(O5,m9e),e(m9e,KSr),e(O5,ZSr),e(O5,pY),e(pY,eRr),e(O5,oRr),e(De,rRr),e(De,V5),e(V5,g9e),e(g9e,tRr),e(V5,aRr),e(V5,uY),e(uY,nRr),e(V5,sRr),e(De,lRr),e(De,X5),e(X5,h9e),e(h9e,iRr),e(X5,dRr),e(X5,_Y),e(_Y,cRr),e(X5,fRr),e(De,mRr),e(De,z5),e(z5,p9e),e(p9e,gRr),e(z5,hRr),e(z5,bY),e(bY,pRr),e(z5,uRr),e(De,_Rr),e(De,Q5),e(Q5,u9e),e(u9e,bRr),e(Q5,vRr),e(Q5,vY),e(vY,FRr),e(Q5,TRr),e(De,MRr),e(De,W5),e(W5,_9e),e(_9e,ERr),e(W5,CRr),e(W5,FY),e(FY,wRr),e(W5,ARr),e(De,yRr),e(De,H5),e(H5,b9e),e(b9e,LRr),e(H5,xRr),e(H5,TY),e(TY,$Rr),e(H5,kRr),e(De,SRr),e(De,U5),e(U5,v9e),e(v9e,RRr),e(U5,BRr),e(U5,MY),e(MY,PRr),e(U5,IRr),e(Qr,qRr),M(J5,Qr,null),b(f,sqe,_),b(f,Jc,_),e(Jc,Y5),e(Y5,F9e),M(Lx,F9e,null),e(Jc,NRr),e(Jc,T9e),e(T9e,jRr),b(f,lqe,_),b(f,vr,_),M(xx,vr,null),e(vr,DRr),e(vr,Yc),e(Yc,GRr),e(Yc,EY),e(EY,ORr),e(Yc,VRr),e(Yc,CY),e(CY,XRr),e(Yc,zRr),e(vr,QRr),e(vr,$x),e($x,WRr),e($x,M9e),e(M9e,HRr),e($x,URr),e(vr,JRr),e(vr,Wt),M(kx,Wt,null),e(Wt,YRr),e(Wt,E9e),e(E9e,KRr),e(Wt,ZRr),e(Wt,Kc),e(Kc,eBr),e(Kc,C9e),e(C9e,oBr),e(Kc,rBr),e(Kc,wY),e(wY,tBr),e(Kc,aBr),e(Wt,nBr),M(K5,Wt,null),e(vr,sBr),e(vr,Wr),M(Sx,Wr,null),e(Wr,lBr),e(Wr,w9e),e(w9e,iBr),e(Wr,dBr),e(Wr,Mn),e(Mn,cBr),e(Mn,A9e),e(A9e,fBr),e(Mn,mBr),e(Mn,y9e),e(y9e,gBr),e(Mn,hBr),e(Mn,L9e),e(L9e,pBr),e(Mn,uBr),e(Wr,_Br),e(Wr,Ge),e(Ge,Z5),e(Z5,x9e),e(x9e,bBr),e(Z5,vBr),e(Z5,AY),e(AY,FBr),e(Z5,TBr),e(Ge,MBr),e(Ge,eC),e(eC,$9e),e($9e,EBr),e(eC,CBr),e(eC,yY),e(yY,wBr),e(eC,ABr),e(Ge,yBr),e(Ge,oC),e(oC,k9e),e(k9e,LBr),e(oC,xBr),e(oC,LY),e(LY,$Br),e(oC,kBr),e(Ge,SBr),e(Ge,rC),e(rC,S9e),e(S9e,RBr),e(rC,BBr),e(rC,xY),e(xY,PBr),e(rC,IBr),e(Ge,qBr),e(Ge,tC),e(tC,R9e),e(R9e,NBr),e(tC,jBr),e(tC,$Y),e($Y,DBr),e(tC,GBr),e(Ge,OBr),e(Ge,aC),e(aC,B9e),e(B9e,VBr),e(aC,XBr),e(aC,kY),e(kY,zBr),e(aC,QBr),e(Ge,WBr),e(Ge,nC),e(nC,P9e),e(P9e,HBr),e(nC,UBr),e(nC,SY),e(SY,JBr),e(nC,YBr),e(Ge,KBr),e(Ge,sC),e(sC,I9e),e(I9e,ZBr),e(sC,ePr),e(sC,RY),e(RY,oPr),e(sC,rPr),e(Wr,tPr),M(lC,Wr,null),b(f,iqe,_),b(f,Zc,_),e(Zc,iC),e(iC,q9e),M(Rx,q9e,null),e(Zc,aPr),e(Zc,N9e),e(N9e,nPr),b(f,dqe,_),b(f,Fr,_),M(Bx,Fr,null),e(Fr,sPr),e(Fr,ef),e(ef,lPr),e(ef,BY),e(BY,iPr),e(ef,dPr),e(ef,PY),e(PY,cPr),e(ef,fPr),e(Fr,mPr),e(Fr,Px),e(Px,gPr),e(Px,j9e),e(j9e,hPr),e(Px,pPr),e(Fr,uPr),e(Fr,Ht),M(Ix,Ht,null),e(Ht,_Pr),e(Ht,D9e),e(D9e,bPr),e(Ht,vPr),e(Ht,of),e(of,FPr),e(of,G9e),e(G9e,TPr),e(of,MPr),e(of,IY),e(IY,EPr),e(of,CPr),e(Ht,wPr),M(dC,Ht,null),e(Fr,APr),e(Fr,Hr),M(qx,Hr,null),e(Hr,yPr),e(Hr,O9e),e(O9e,LPr),e(Hr,xPr),e(Hr,En),e(En,$Pr),e(En,V9e),e(V9e,kPr),e(En,SPr),e(En,X9e),e(X9e,RPr),e(En,BPr),e(En,z9e),e(z9e,PPr),e(En,IPr),e(Hr,qPr),e(Hr,Q9e),e(Q9e,cC),e(cC,W9e),e(W9e,NPr),e(cC,jPr),e(cC,qY),e(qY,DPr),e(cC,GPr),e(Hr,OPr),M(fC,Hr,null),b(f,cqe,_),b(f,rf,_),e(rf,mC),e(mC,H9e),M(Nx,H9e,null),e(rf,VPr),e(rf,U9e),e(U9e,XPr),b(f,fqe,_),b(f,Tr,_),M(jx,Tr,null),e(Tr,zPr),e(Tr,tf),e(tf,QPr),e(tf,NY),e(NY,WPr),e(tf,HPr),e(tf,jY),e(jY,UPr),e(tf,JPr),e(Tr,YPr),e(Tr,Dx),e(Dx,KPr),e(Dx,J9e),e(J9e,ZPr),e(Dx,eIr),e(Tr,oIr),e(Tr,Ut),M(Gx,Ut,null),e(Ut,rIr),e(Ut,Y9e),e(Y9e,tIr),e(Ut,aIr),e(Ut,af),e(af,nIr),e(af,K9e),e(K9e,sIr),e(af,lIr),e(af,DY),e(DY,iIr),e(af,dIr),e(Ut,cIr),M(gC,Ut,null),e(Tr,fIr),e(Tr,Ur),M(Ox,Ur,null),e(Ur,mIr),e(Ur,Z9e),e(Z9e,gIr),e(Ur,hIr),e(Ur,Cn),e(Cn,pIr),e(Cn,eMe),e(eMe,uIr),e(Cn,_Ir),e(Cn,oMe),e(oMe,bIr),e(Cn,vIr),e(Cn,rMe),e(rMe,FIr),e(Cn,TIr),e(Ur,MIr),e(Ur,Vx),e(Vx,hC),e(hC,tMe),e(tMe,EIr),e(hC,CIr),e(hC,GY),e(GY,wIr),e(hC,AIr),e(Vx,yIr),e(Vx,pC),e(pC,aMe),e(aMe,LIr),e(pC,xIr),e(pC,OY),e(OY,$Ir),e(pC,kIr),e(Ur,SIr),M(uC,Ur,null),b(f,mqe,_),b(f,nf,_),e(nf,_C),e(_C,nMe),M(Xx,nMe,null),e(nf,RIr),e(nf,sMe),e(sMe,BIr),b(f,gqe,_),b(f,Mr,_),M(zx,Mr,null),e(Mr,PIr),e(Mr,sf),e(sf,IIr),e(sf,VY),e(VY,qIr),e(sf,NIr),e(sf,XY),e(XY,jIr),e(sf,DIr),e(Mr,GIr),e(Mr,Qx),e(Qx,OIr),e(Qx,lMe),e(lMe,VIr),e(Qx,XIr),e(Mr,zIr),e(Mr,Jt),M(Wx,Jt,null),e(Jt,QIr),e(Jt,iMe),e(iMe,WIr),e(Jt,HIr),e(Jt,lf),e(lf,UIr),e(lf,dMe),e(dMe,JIr),e(lf,YIr),e(lf,zY),e(zY,KIr),e(lf,ZIr),e(Jt,eqr),M(bC,Jt,null),e(Mr,oqr),e(Mr,Jr),M(Hx,Jr,null),e(Jr,rqr),e(Jr,cMe),e(cMe,tqr),e(Jr,aqr),e(Jr,wn),e(wn,nqr),e(wn,fMe),e(fMe,sqr),e(wn,lqr),e(wn,mMe),e(mMe,iqr),e(wn,dqr),e(wn,gMe),e(gMe,cqr),e(wn,fqr),e(Jr,mqr),e(Jr,hMe),e(hMe,vC),e(vC,pMe),e(pMe,gqr),e(vC,hqr),e(vC,QY),e(QY,pqr),e(vC,uqr),e(Jr,_qr),M(FC,Jr,null),hqe=!0},p(f,[_]){const Ux={};_&2&&(Ux.$$scope={dirty:_,ctx:f}),_f.$set(Ux);const uMe={};_&2&&(uMe.$$scope={dirty:_,ctx:f}),hg.$set(uMe);const _Me={};_&2&&(_Me.$$scope={dirty:_,ctx:f}),Qg.$set(_Me);const bMe={};_&2&&(bMe.$$scope={dirty:_,ctx:f}),vh.$set(bMe);const Jx={};_&2&&(Jx.$$scope={dirty:_,ctx:f}),Fh.$set(Jx);const vMe={};_&2&&(vMe.$$scope={dirty:_,ctx:f}),qh.$set(vMe);const An={};_&2&&(An.$$scope={dirty:_,ctx:f}),Nh.$set(An);const FMe={};_&2&&(FMe.$$scope={dirty:_,ctx:f}),Gh.$set(FMe);const TMe={};_&2&&(TMe.$$scope={dirty:_,ctx:f}),xu.$set(TMe);const MMe={};_&2&&(MMe.$$scope={dirty:_,ctx:f}),ku.$set(MMe);const Yx={};_&2&&(Yx.$$scope={dirty:_,ctx:f}),b_.$set(Yx);const EMe={};_&2&&(EMe.$$scope={dirty:_,ctx:f}),F_.$set(EMe);const Kx={};_&2&&(Kx.$$scope={dirty:_,ctx:f}),t1.$set(Kx);const CMe={};_&2&&(CMe.$$scope={dirty:_,ctx:f}),n1.$set(CMe);const Zx={};_&2&&(Zx.$$scope={dirty:_,ctx:f}),O1.$set(Zx);const wMe={};_&2&&(wMe.$$scope={dirty:_,ctx:f}),X1.$set(wMe);const AMe={};_&2&&(AMe.$$scope={dirty:_,ctx:f}),d8.$set(AMe);const yMe={};_&2&&(yMe.$$scope={dirty:_,ctx:f}),f8.$set(yMe);const df={};_&2&&(df.$$scope={dirty:_,ctx:f}),sb.$set(df);const LMe={};_&2&&(LMe.$$scope={dirty:_,ctx:f}),ib.$set(LMe);const xMe={};_&2&&(xMe.$$scope={dirty:_,ctx:f}),Nb.$set(xMe);const $Me={};_&2&&($Me.$$scope={dirty:_,ctx:f}),Db.$set($Me);const e7={};_&2&&(e7.$$scope={dirty:_,ctx:f}),Wb.$set(e7);const kMe={};_&2&&(kMe.$$scope={dirty:_,ctx:f}),Ub.$set(kMe);const SMe={};_&2&&(SMe.$$scope={dirty:_,ctx:f}),$2.$set(SMe);const RMe={};_&2&&(RMe.$$scope={dirty:_,ctx:f}),S2.$set(RMe);const Kr={};_&2&&(Kr.$$scope={dirty:_,ctx:f}),vv.$set(Kr);const o7={};_&2&&(o7.$$scope={dirty:_,ctx:f}),Tv.$set(o7);const BMe={};_&2&&(BMe.$$scope={dirty:_,ctx:f}),Cv.$set(BMe);const r7={};_&2&&(r7.$$scope={dirty:_,ctx:f}),Av.$set(r7);const PMe={};_&2&&(PMe.$$scope={dirty:_,ctx:f}),jv.$set(PMe);const Zr={};_&2&&(Zr.$$scope={dirty:_,ctx:f}),Gv.$set(Zr);const IMe={};_&2&&(IMe.$$scope={dirty:_,ctx:f}),Xv.$set(IMe);const cf={};_&2&&(cf.$$scope={dirty:_,ctx:f}),Qv.$set(cf);const qMe={};_&2&&(qMe.$$scope={dirty:_,ctx:f}),rF.$set(qMe);const NMe={};_&2&&(NMe.$$scope={dirty:_,ctx:f}),aF.$set(NMe);const L={};_&2&&(L.$$scope={dirty:_,ctx:f}),cF.$set(L);const TC={};_&2&&(TC.$$scope={dirty:_,ctx:f}),mF.$set(TC);const jMe={};_&2&&(jMe.$$scope={dirty:_,ctx:f}),MF.$set(jMe);const DMe={};_&2&&(DMe.$$scope={dirty:_,ctx:f}),CF.$set(DMe);const MC={};_&2&&(MC.$$scope={dirty:_,ctx:f}),LF.$set(MC);const GMe={};_&2&&(GMe.$$scope={dirty:_,ctx:f}),$F.$set(GMe);const OMe={};_&2&&(OMe.$$scope={dirty:_,ctx:f}),IF.$set(OMe);const EC={};_&2&&(EC.$$scope={dirty:_,ctx:f}),NF.$set(EC);const VMe={};_&2&&(VMe.$$scope={dirty:_,ctx:f}),VF.$set(VMe);const XMe={};_&2&&(XMe.$$scope={dirty:_,ctx:f}),zF.$set(XMe);const CC={};_&2&&(CC.$$scope={dirty:_,ctx:f}),UF.$set(CC);const zMe={};_&2&&(zMe.$$scope={dirty:_,ctx:f}),YF.$set(zMe);const QMe={};_&2&&(QMe.$$scope={dirty:_,ctx:f}),e6.$set(QMe);const wC={};_&2&&(wC.$$scope={dirty:_,ctx:f}),r6.$set(wC);const WMe={};_&2&&(WMe.$$scope={dirty:_,ctx:f}),i6.$set(WMe);const HMe={};_&2&&(HMe.$$scope={dirty:_,ctx:f}),c6.$set(HMe);const AC={};_&2&&(AC.$$scope={dirty:_,ctx:f}),g6.$set(AC);const UMe={};_&2&&(UMe.$$scope={dirty:_,ctx:f}),p6.$set(UMe);const JMe={};_&2&&(JMe.$$scope={dirty:_,ctx:f}),lT.$set(JMe);const yC={};_&2&&(yC.$$scope={dirty:_,ctx:f}),dT.$set(yC);const YMe={};_&2&&(YMe.$$scope={dirty:_,ctx:f}),RT.$set(YMe);const KMe={};_&2&&(KMe.$$scope={dirty:_,ctx:f}),PT.$set(KMe);const LC={};_&2&&(LC.$$scope={dirty:_,ctx:f}),HT.$set(LC);const ZMe={};_&2&&(ZMe.$$scope={dirty:_,ctx:f}),JT.$set(ZMe);const e4e={};_&2&&(e4e.$$scope={dirty:_,ctx:f}),o9.$set(e4e);const xC={};_&2&&(xC.$$scope={dirty:_,ctx:f}),t9.$set(xC);const o4e={};_&2&&(o4e.$$scope={dirty:_,ctx:f}),C9.$set(o4e);const r4e={};_&2&&(r4e.$$scope={dirty:_,ctx:f}),A9.$set(r4e);const $C={};_&2&&($C.$$scope={dirty:_,ctx:f}),q9.$set($C);const t4e={};_&2&&(t4e.$$scope={dirty:_,ctx:f}),j9.$set(t4e);const a4e={};_&2&&(a4e.$$scope={dirty:_,ctx:f}),mM.$set(a4e);const kC={};_&2&&(kC.$$scope={dirty:_,ctx:f}),hM.$set(kC);const n4e={};_&2&&(n4e.$$scope={dirty:_,ctx:f}),SM.$set(n4e);const s4e={};_&2&&(s4e.$$scope={dirty:_,ctx:f}),BM.$set(s4e);const SC={};_&2&&(SC.$$scope={dirty:_,ctx:f}),qM.$set(SC);const l4e={};_&2&&(l4e.$$scope={dirty:_,ctx:f}),jM.$set(l4e);const i4e={};_&2&&(i4e.$$scope={dirty:_,ctx:f}),GM.$set(i4e);const RC={};_&2&&(RC.$$scope={dirty:_,ctx:f}),VM.$set(RC);const d4e={};_&2&&(d4e.$$scope={dirty:_,ctx:f}),c4.$set(d4e);const c4e={};_&2&&(c4e.$$scope={dirty:_,ctx:f}),m4.$set(c4e);const BC={};_&2&&(BC.$$scope={dirty:_,ctx:f}),R4.$set(BC);const f4e={};_&2&&(f4e.$$scope={dirty:_,ctx:f}),P4.$set(f4e);const m4e={};_&2&&(m4e.$$scope={dirty:_,ctx:f}),q4.$set(m4e);const PC={};_&2&&(PC.$$scope={dirty:_,ctx:f}),j4.$set(PC);const g4e={};_&2&&(g4e.$$scope={dirty:_,ctx:f}),G4.$set(g4e);const h4e={};_&2&&(h4e.$$scope={dirty:_,ctx:f}),V4.$set(h4e);const IC={};_&2&&(IC.$$scope={dirty:_,ctx:f}),pE.$set(IC);const p4e={};_&2&&(p4e.$$scope={dirty:_,ctx:f}),_E.$set(p4e);const u4e={};_&2&&(u4e.$$scope={dirty:_,ctx:f}),yE.$set(u4e);const qC={};_&2&&(qC.$$scope={dirty:_,ctx:f}),xE.$set(qC);const _4e={};_&2&&(_4e.$$scope={dirty:_,ctx:f}),OE.$set(_4e);const b4e={};_&2&&(b4e.$$scope={dirty:_,ctx:f}),XE.$set(b4e);const NC={};_&2&&(NC.$$scope={dirty:_,ctx:f}),o5.$set(NC);const v4e={};_&2&&(v4e.$$scope={dirty:_,ctx:f}),t5.$set(v4e);const F4e={};_&2&&(F4e.$$scope={dirty:_,ctx:f}),g5.$set(F4e);const jC={};_&2&&(jC.$$scope={dirty:_,ctx:f}),p5.$set(jC);const T4e={};_&2&&(T4e.$$scope={dirty:_,ctx:f}),A5.$set(T4e);const M4e={};_&2&&(M4e.$$scope={dirty:_,ctx:f}),L5.$set(M4e);const DC={};_&2&&(DC.$$scope={dirty:_,ctx:f}),j5.$set(DC);const E4e={};_&2&&(E4e.$$scope={dirty:_,ctx:f}),G5.$set(E4e);const C4e={};_&2&&(C4e.$$scope={dirty:_,ctx:f}),J5.$set(C4e);const GC={};_&2&&(GC.$$scope={dirty:_,ctx:f}),K5.$set(GC);const w4e={};_&2&&(w4e.$$scope={dirty:_,ctx:f}),lC.$set(w4e);const A4e={};_&2&&(A4e.$$scope={dirty:_,ctx:f}),dC.$set(A4e);const OC={};_&2&&(OC.$$scope={dirty:_,ctx:f}),fC.$set(OC);const y4e={};_&2&&(y4e.$$scope={dirty:_,ctx:f}),gC.$set(y4e);const L4e={};_&2&&(L4e.$$scope={dirty:_,ctx:f}),uC.$set(L4e);const VC={};_&2&&(VC.$$scope={dirty:_,ctx:f}),bC.$set(VC);const x4e={};_&2&&(x4e.$$scope={dirty:_,ctx:f}),FC.$set(x4e)},i(f){hqe||(E(d.$$.fragment,f),E(Ma.$$.fragment,f),E(Xw.$$.fragment,f),E(zw.$$.fragment,f),E(_f.$$.fragment,f),E(Qw.$$.fragment,f),E(Ww.$$.fragment,f),E(Jw.$$.fragment,f),E(hg.$$.fragment,f),E(Yw.$$.fragment,f),E(Kw.$$.fragment,f),E(Zw.$$.fragment,f),E(rA.$$.fragment,f),E(Qg.$$.fragment,f),E(tA.$$.fragment,f),E(aA.$$.fragment,f),E(nA.$$.fragment,f),E(iA.$$.fragment,f),E(vh.$$.fragment,f),E(Fh.$$.fragment,f),E(dA.$$.fragment,f),E(cA.$$.fragment,f),E(fA.$$.fragment,f),E(hA.$$.fragment,f),E(qh.$$.fragment,f),E(Nh.$$.fragment,f),E(pA.$$.fragment,f),E(uA.$$.fragment,f),E(_A.$$.fragment,f),E(vA.$$.fragment,f),E(Gh.$$.fragment,f),E(FA.$$.fragment,f),E(xu.$$.fragment,f),E(TA.$$.fragment,f),E(MA.$$.fragment,f),E(CA.$$.fragment,f),E(ku.$$.fragment,f),E(wA.$$.fragment,f),E(b_.$$.fragment,f),E(AA.$$.fragment,f),E(yA.$$.fragment,f),E(xA.$$.fragment,f),E(F_.$$.fragment,f),E($A.$$.fragment,f),E(t1.$$.fragment,f),E(kA.$$.fragment,f),E(SA.$$.fragment,f),E(BA.$$.fragment,f),E(n1.$$.fragment,f),E(PA.$$.fragment,f),E(O1.$$.fragment,f),E(IA.$$.fragment,f),E(qA.$$.fragment,f),E(jA.$$.fragment,f),E(X1.$$.fragment,f),E(DA.$$.fragment,f),E(d8.$$.fragment,f),E(GA.$$.fragment,f),E(OA.$$.fragment,f),E(XA.$$.fragment,f),E(f8.$$.fragment,f),E(zA.$$.fragment,f),E(sb.$$.fragment,f),E(QA.$$.fragment,f),E(WA.$$.fragment,f),E(UA.$$.fragment,f),E(ib.$$.fragment,f),E(JA.$$.fragment,f),E(Nb.$$.fragment,f),E(YA.$$.fragment,f),E(KA.$$.fragment,f),E(e0.$$.fragment,f),E(Db.$$.fragment,f),E(o0.$$.fragment,f),E(Wb.$$.fragment,f),E(r0.$$.fragment,f),E(t0.$$.fragment,f),E(n0.$$.fragment,f),E(Ub.$$.fragment,f),E(s0.$$.fragment,f),E($2.$$.fragment,f),E(l0.$$.fragment,f),E(i0.$$.fragment,f),E(c0.$$.fragment,f),E(S2.$$.fragment,f),E(f0.$$.fragment,f),E(vv.$$.fragment,f),E(m0.$$.fragment,f),E(g0.$$.fragment,f),E(p0.$$.fragment,f),E(Tv.$$.fragment,f),E(u0.$$.fragment,f),E(Cv.$$.fragment,f),E(_0.$$.fragment,f),E(b0.$$.fragment,f),E(F0.$$.fragment,f),E(Av.$$.fragment,f),E(T0.$$.fragment,f),E(jv.$$.fragment,f),E(M0.$$.fragment,f),E(E0.$$.fragment,f),E(w0.$$.fragment,f),E(Gv.$$.fragment,f),E(A0.$$.fragment,f),E(Xv.$$.fragment,f),E(y0.$$.fragment,f),E(L0.$$.fragment,f),E($0.$$.fragment,f),E(Qv.$$.fragment,f),E(k0.$$.fragment,f),E(rF.$$.fragment,f),E(S0.$$.fragment,f),E(R0.$$.fragment,f),E(P0.$$.fragment,f),E(aF.$$.fragment,f),E(I0.$$.fragment,f),E(cF.$$.fragment,f),E(q0.$$.fragment,f),E(N0.$$.fragment,f),E(D0.$$.fragment,f),E(mF.$$.fragment,f),E(G0.$$.fragment,f),E(MF.$$.fragment,f),E(O0.$$.fragment,f),E(V0.$$.fragment,f),E(z0.$$.fragment,f),E(CF.$$.fragment,f),E(Q0.$$.fragment,f),E(LF.$$.fragment,f),E(H0.$$.fragment,f),E(U0.$$.fragment,f),E(Y0.$$.fragment,f),E($F.$$.fragment,f),E(K0.$$.fragment,f),E(IF.$$.fragment,f),E(Z0.$$.fragment,f),E(ey.$$.fragment,f),E(ry.$$.fragment,f),E(NF.$$.fragment,f),E(ty.$$.fragment,f),E(VF.$$.fragment,f),E(ay.$$.fragment,f),E(ny.$$.fragment,f),E(ly.$$.fragment,f),E(zF.$$.fragment,f),E(iy.$$.fragment,f),E(UF.$$.fragment,f),E(cy.$$.fragment,f),E(fy.$$.fragment,f),E(gy.$$.fragment,f),E(YF.$$.fragment,f),E(hy.$$.fragment,f),E(e6.$$.fragment,f),E(py.$$.fragment,f),E(uy.$$.fragment,f),E(by.$$.fragment,f),E(r6.$$.fragment,f),E(vy.$$.fragment,f),E(i6.$$.fragment,f),E(Fy.$$.fragment,f),E(Ty.$$.fragment,f),E(Ey.$$.fragment,f),E(c6.$$.fragment,f),E(Cy.$$.fragment,f),E(g6.$$.fragment,f),E(wy.$$.fragment,f),E(Ay.$$.fragment,f),E(Ly.$$.fragment,f),E(p6.$$.fragment,f),E(xy.$$.fragment,f),E(lT.$$.fragment,f),E($y.$$.fragment,f),E(ky.$$.fragment,f),E(Ry.$$.fragment,f),E(dT.$$.fragment,f),E(By.$$.fragment,f),E(RT.$$.fragment,f),E(Py.$$.fragment,f),E(Iy.$$.fragment,f),E(Ny.$$.fragment,f),E(PT.$$.fragment,f),E(jy.$$.fragment,f),E(HT.$$.fragment,f),E(Dy.$$.fragment,f),E(Gy.$$.fragment,f),E(Vy.$$.fragment,f),E(JT.$$.fragment,f),E(Xy.$$.fragment,f),E(o9.$$.fragment,f),E(zy.$$.fragment,f),E(Qy.$$.fragment,f),E(Hy.$$.fragment,f),E(t9.$$.fragment,f),E(Uy.$$.fragment,f),E(C9.$$.fragment,f),E(Jy.$$.fragment,f),E(Yy.$$.fragment,f),E(Zy.$$.fragment,f),E(A9.$$.fragment,f),E(eL.$$.fragment,f),E(q9.$$.fragment,f),E(oL.$$.fragment,f),E(rL.$$.fragment,f),E(aL.$$.fragment,f),E(j9.$$.fragment,f),E(nL.$$.fragment,f),E(mM.$$.fragment,f),E(sL.$$.fragment,f),E(lL.$$.fragment,f),E(dL.$$.fragment,f),E(hM.$$.fragment,f),E(cL.$$.fragment,f),E(SM.$$.fragment,f),E(fL.$$.fragment,f),E(mL.$$.fragment,f),E(hL.$$.fragment,f),E(BM.$$.fragment,f),E(pL.$$.fragment,f),E(qM.$$.fragment,f),E(_L.$$.fragment,f),E(bL.$$.fragment,f),E(FL.$$.fragment,f),E(jM.$$.fragment,f),E(TL.$$.fragment,f),E(GM.$$.fragment,f),E(ML.$$.fragment,f),E(EL.$$.fragment,f),E(wL.$$.fragment,f),E(VM.$$.fragment,f),E(AL.$$.fragment,f),E(c4.$$.fragment,f),E(yL.$$.fragment,f),E(LL.$$.fragment,f),E($L.$$.fragment,f),E(m4.$$.fragment,f),E(kL.$$.fragment,f),E(R4.$$.fragment,f),E(SL.$$.fragment,f),E(RL.$$.fragment,f),E(PL.$$.fragment,f),E(P4.$$.fragment,f),E(IL.$$.fragment,f),E(q4.$$.fragment,f),E(qL.$$.fragment,f),E(NL.$$.fragment,f),E(DL.$$.fragment,f),E(j4.$$.fragment,f),E(GL.$$.fragment,f),E(G4.$$.fragment,f),E(OL.$$.fragment,f),E(VL.$$.fragment,f),E(zL.$$.fragment,f),E(V4.$$.fragment,f),E(QL.$$.fragment,f),E(pE.$$.fragment,f),E(WL.$$.fragment,f),E(HL.$$.fragment,f),E(JL.$$.fragment,f),E(_E.$$.fragment,f),E(YL.$$.fragment,f),E(yE.$$.fragment,f),E(KL.$$.fragment,f),E(ZL.$$.fragment,f),E(ox.$$.fragment,f),E(xE.$$.fragment,f),E(rx.$$.fragment,f),E(OE.$$.fragment,f),E(tx.$$.fragment,f),E(ax.$$.fragment,f),E(sx.$$.fragment,f),E(XE.$$.fragment,f),E(lx.$$.fragment,f),E(o5.$$.fragment,f),E(ix.$$.fragment,f),E(dx.$$.fragment,f),E(fx.$$.fragment,f),E(t5.$$.fragment,f),E(mx.$$.fragment,f),E(g5.$$.fragment,f),E(gx.$$.fragment,f),E(hx.$$.fragment,f),E(ux.$$.fragment,f),E(p5.$$.fragment,f),E(_x.$$.fragment,f),E(A5.$$.fragment,f),E(bx.$$.fragment,f),E(vx.$$.fragment,f),E(Tx.$$.fragment,f),E(L5.$$.fragment,f),E(Mx.$$.fragment,f),E(j5.$$.fragment,f),E(Ex.$$.fragment,f),E(Cx.$$.fragment,f),E(Ax.$$.fragment,f),E(G5.$$.fragment,f),E(yx.$$.fragment,f),E(J5.$$.fragment,f),E(Lx.$$.fragment,f),E(xx.$$.fragment,f),E(kx.$$.fragment,f),E(K5.$$.fragment,f),E(Sx.$$.fragment,f),E(lC.$$.fragment,f),E(Rx.$$.fragment,f),E(Bx.$$.fragment,f),E(Ix.$$.fragment,f),E(dC.$$.fragment,f),E(qx.$$.fragment,f),E(fC.$$.fragment,f),E(Nx.$$.fragment,f),E(jx.$$.fragment,f),E(Gx.$$.fragment,f),E(gC.$$.fragment,f),E(Ox.$$.fragment,f),E(uC.$$.fragment,f),E(Xx.$$.fragment,f),E(zx.$$.fragment,f),E(Wx.$$.fragment,f),E(bC.$$.fragment,f),E(Hx.$$.fragment,f),E(FC.$$.fragment,f),hqe=!0)},o(f){C(d.$$.fragment,f),C(Ma.$$.fragment,f),C(Xw.$$.fragment,f),C(zw.$$.fragment,f),C(_f.$$.fragment,f),C(Qw.$$.fragment,f),C(Ww.$$.fragment,f),C(Jw.$$.fragment,f),C(hg.$$.fragment,f),C(Yw.$$.fragment,f),C(Kw.$$.fragment,f),C(Zw.$$.fragment,f),C(rA.$$.fragment,f),C(Qg.$$.fragment,f),C(tA.$$.fragment,f),C(aA.$$.fragment,f),C(nA.$$.fragment,f),C(iA.$$.fragment,f),C(vh.$$.fragment,f),C(Fh.$$.fragment,f),C(dA.$$.fragment,f),C(cA.$$.fragment,f),C(fA.$$.fragment,f),C(hA.$$.fragment,f),C(qh.$$.fragment,f),C(Nh.$$.fragment,f),C(pA.$$.fragment,f),C(uA.$$.fragment,f),C(_A.$$.fragment,f),C(vA.$$.fragment,f),C(Gh.$$.fragment,f),C(FA.$$.fragment,f),C(xu.$$.fragment,f),C(TA.$$.fragment,f),C(MA.$$.fragment,f),C(CA.$$.fragment,f),C(ku.$$.fragment,f),C(wA.$$.fragment,f),C(b_.$$.fragment,f),C(AA.$$.fragment,f),C(yA.$$.fragment,f),C(xA.$$.fragment,f),C(F_.$$.fragment,f),C($A.$$.fragment,f),C(t1.$$.fragment,f),C(kA.$$.fragment,f),C(SA.$$.fragment,f),C(BA.$$.fragment,f),C(n1.$$.fragment,f),C(PA.$$.fragment,f),C(O1.$$.fragment,f),C(IA.$$.fragment,f),C(qA.$$.fragment,f),C(jA.$$.fragment,f),C(X1.$$.fragment,f),C(DA.$$.fragment,f),C(d8.$$.fragment,f),C(GA.$$.fragment,f),C(OA.$$.fragment,f),C(XA.$$.fragment,f),C(f8.$$.fragment,f),C(zA.$$.fragment,f),C(sb.$$.fragment,f),C(QA.$$.fragment,f),C(WA.$$.fragment,f),C(UA.$$.fragment,f),C(ib.$$.fragment,f),C(JA.$$.fragment,f),C(Nb.$$.fragment,f),C(YA.$$.fragment,f),C(KA.$$.fragment,f),C(e0.$$.fragment,f),C(Db.$$.fragment,f),C(o0.$$.fragment,f),C(Wb.$$.fragment,f),C(r0.$$.fragment,f),C(t0.$$.fragment,f),C(n0.$$.fragment,f),C(Ub.$$.fragment,f),C(s0.$$.fragment,f),C($2.$$.fragment,f),C(l0.$$.fragment,f),C(i0.$$.fragment,f),C(c0.$$.fragment,f),C(S2.$$.fragment,f),C(f0.$$.fragment,f),C(vv.$$.fragment,f),C(m0.$$.fragment,f),C(g0.$$.fragment,f),C(p0.$$.fragment,f),C(Tv.$$.fragment,f),C(u0.$$.fragment,f),C(Cv.$$.fragment,f),C(_0.$$.fragment,f),C(b0.$$.fragment,f),C(F0.$$.fragment,f),C(Av.$$.fragment,f),C(T0.$$.fragment,f),C(jv.$$.fragment,f),C(M0.$$.fragment,f),C(E0.$$.fragment,f),C(w0.$$.fragment,f),C(Gv.$$.fragment,f),C(A0.$$.fragment,f),C(Xv.$$.fragment,f),C(y0.$$.fragment,f),C(L0.$$.fragment,f),C($0.$$.fragment,f),C(Qv.$$.fragment,f),C(k0.$$.fragment,f),C(rF.$$.fragment,f),C(S0.$$.fragment,f),C(R0.$$.fragment,f),C(P0.$$.fragment,f),C(aF.$$.fragment,f),C(I0.$$.fragment,f),C(cF.$$.fragment,f),C(q0.$$.fragment,f),C(N0.$$.fragment,f),C(D0.$$.fragment,f),C(mF.$$.fragment,f),C(G0.$$.fragment,f),C(MF.$$.fragment,f),C(O0.$$.fragment,f),C(V0.$$.fragment,f),C(z0.$$.fragment,f),C(CF.$$.fragment,f),C(Q0.$$.fragment,f),C(LF.$$.fragment,f),C(H0.$$.fragment,f),C(U0.$$.fragment,f),C(Y0.$$.fragment,f),C($F.$$.fragment,f),C(K0.$$.fragment,f),C(IF.$$.fragment,f),C(Z0.$$.fragment,f),C(ey.$$.fragment,f),C(ry.$$.fragment,f),C(NF.$$.fragment,f),C(ty.$$.fragment,f),C(VF.$$.fragment,f),C(ay.$$.fragment,f),C(ny.$$.fragment,f),C(ly.$$.fragment,f),C(zF.$$.fragment,f),C(iy.$$.fragment,f),C(UF.$$.fragment,f),C(cy.$$.fragment,f),C(fy.$$.fragment,f),C(gy.$$.fragment,f),C(YF.$$.fragment,f),C(hy.$$.fragment,f),C(e6.$$.fragment,f),C(py.$$.fragment,f),C(uy.$$.fragment,f),C(by.$$.fragment,f),C(r6.$$.fragment,f),C(vy.$$.fragment,f),C(i6.$$.fragment,f),C(Fy.$$.fragment,f),C(Ty.$$.fragment,f),C(Ey.$$.fragment,f),C(c6.$$.fragment,f),C(Cy.$$.fragment,f),C(g6.$$.fragment,f),C(wy.$$.fragment,f),C(Ay.$$.fragment,f),C(Ly.$$.fragment,f),C(p6.$$.fragment,f),C(xy.$$.fragment,f),C(lT.$$.fragment,f),C($y.$$.fragment,f),C(ky.$$.fragment,f),C(Ry.$$.fragment,f),C(dT.$$.fragment,f),C(By.$$.fragment,f),C(RT.$$.fragment,f),C(Py.$$.fragment,f),C(Iy.$$.fragment,f),C(Ny.$$.fragment,f),C(PT.$$.fragment,f),C(jy.$$.fragment,f),C(HT.$$.fragment,f),C(Dy.$$.fragment,f),C(Gy.$$.fragment,f),C(Vy.$$.fragment,f),C(JT.$$.fragment,f),C(Xy.$$.fragment,f),C(o9.$$.fragment,f),C(zy.$$.fragment,f),C(Qy.$$.fragment,f),C(Hy.$$.fragment,f),C(t9.$$.fragment,f),C(Uy.$$.fragment,f),C(C9.$$.fragment,f),C(Jy.$$.fragment,f),C(Yy.$$.fragment,f),C(Zy.$$.fragment,f),C(A9.$$.fragment,f),C(eL.$$.fragment,f),C(q9.$$.fragment,f),C(oL.$$.fragment,f),C(rL.$$.fragment,f),C(aL.$$.fragment,f),C(j9.$$.fragment,f),C(nL.$$.fragment,f),C(mM.$$.fragment,f),C(sL.$$.fragment,f),C(lL.$$.fragment,f),C(dL.$$.fragment,f),C(hM.$$.fragment,f),C(cL.$$.fragment,f),C(SM.$$.fragment,f),C(fL.$$.fragment,f),C(mL.$$.fragment,f),C(hL.$$.fragment,f),C(BM.$$.fragment,f),C(pL.$$.fragment,f),C(qM.$$.fragment,f),C(_L.$$.fragment,f),C(bL.$$.fragment,f),C(FL.$$.fragment,f),C(jM.$$.fragment,f),C(TL.$$.fragment,f),C(GM.$$.fragment,f),C(ML.$$.fragment,f),C(EL.$$.fragment,f),C(wL.$$.fragment,f),C(VM.$$.fragment,f),C(AL.$$.fragment,f),C(c4.$$.fragment,f),C(yL.$$.fragment,f),C(LL.$$.fragment,f),C($L.$$.fragment,f),C(m4.$$.fragment,f),C(kL.$$.fragment,f),C(R4.$$.fragment,f),C(SL.$$.fragment,f),C(RL.$$.fragment,f),C(PL.$$.fragment,f),C(P4.$$.fragment,f),C(IL.$$.fragment,f),C(q4.$$.fragment,f),C(qL.$$.fragment,f),C(NL.$$.fragment,f),C(DL.$$.fragment,f),C(j4.$$.fragment,f),C(GL.$$.fragment,f),C(G4.$$.fragment,f),C(OL.$$.fragment,f),C(VL.$$.fragment,f),C(zL.$$.fragment,f),C(V4.$$.fragment,f),C(QL.$$.fragment,f),C(pE.$$.fragment,f),C(WL.$$.fragment,f),C(HL.$$.fragment,f),C(JL.$$.fragment,f),C(_E.$$.fragment,f),C(YL.$$.fragment,f),C(yE.$$.fragment,f),C(KL.$$.fragment,f),C(ZL.$$.fragment,f),C(ox.$$.fragment,f),C(xE.$$.fragment,f),C(rx.$$.fragment,f),C(OE.$$.fragment,f),C(tx.$$.fragment,f),C(ax.$$.fragment,f),C(sx.$$.fragment,f),C(XE.$$.fragment,f),C(lx.$$.fragment,f),C(o5.$$.fragment,f),C(ix.$$.fragment,f),C(dx.$$.fragment,f),C(fx.$$.fragment,f),C(t5.$$.fragment,f),C(mx.$$.fragment,f),C(g5.$$.fragment,f),C(gx.$$.fragment,f),C(hx.$$.fragment,f),C(ux.$$.fragment,f),C(p5.$$.fragment,f),C(_x.$$.fragment,f),C(A5.$$.fragment,f),C(bx.$$.fragment,f),C(vx.$$.fragment,f),C(Tx.$$.fragment,f),C(L5.$$.fragment,f),C(Mx.$$.fragment,f),C(j5.$$.fragment,f),C(Ex.$$.fragment,f),C(Cx.$$.fragment,f),C(Ax.$$.fragment,f),C(G5.$$.fragment,f),C(yx.$$.fragment,f),C(J5.$$.fragment,f),C(Lx.$$.fragment,f),C(xx.$$.fragment,f),C(kx.$$.fragment,f),C(K5.$$.fragment,f),C(Sx.$$.fragment,f),C(lC.$$.fragment,f),C(Rx.$$.fragment,f),C(Bx.$$.fragment,f),C(Ix.$$.fragment,f),C(dC.$$.fragment,f),C(qx.$$.fragment,f),C(fC.$$.fragment,f),C(Nx.$$.fragment,f),C(jx.$$.fragment,f),C(Gx.$$.fragment,f),C(gC.$$.fragment,f),C(Ox.$$.fragment,f),C(uC.$$.fragment,f),C(Xx.$$.fragment,f),C(zx.$$.fragment,f),C(Wx.$$.fragment,f),C(bC.$$.fragment,f),C(Hx.$$.fragment,f),C(FC.$$.fragment,f),hqe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(mf),f&&t(et),f&&t(qe),f&&t(Xe),f&&t(hf),w(Ma,f),f&&t(ze),f&&t(Ae),f&&t(Eo),f&&t(Ea),f&&t(fPe),f&&t(pi),w(Xw),f&&t(mPe),f&&t(kn),f&&t(gPe),w(zw,f),f&&t(hPe),f&&t(m$),f&&t(pPe),w(_f,f),f&&t(uPe),f&&t(ui),w(Qw),f&&t(_Pe),f&&t(Co),w(Ww),w(Jw),w(hg),w(Yw),f&&t(bPe),f&&t(bi),w(Kw),f&&t(vPe),f&&t(wo),w(Zw),w(rA),w(Qg),w(tA),f&&t(FPe),f&&t(vi),w(aA),f&&t(TPe),f&&t(Ao),w(nA),w(iA),w(vh),w(Fh),w(dA),f&&t(MPe),f&&t(Fi),w(cA),f&&t(EPe),f&&t(yo),w(fA),w(hA),w(qh),w(Nh),w(pA),f&&t(CPe),f&&t(Mi),w(uA),f&&t(wPe),f&&t(Lo),w(_A),w(vA),w(Gh),w(FA),w(xu),f&&t(APe),f&&t(wi),w(TA),f&&t(yPe),f&&t(xo),w(MA),w(CA),w(ku),w(wA),w(b_),f&&t(LPe),f&&t(Li),w(AA),f&&t(xPe),f&&t($o),w(yA),w(xA),w(F_),w($A),w(t1),f&&t($Pe),f&&t(ki),w(kA),f&&t(kPe),f&&t(ko),w(SA),w(BA),w(n1),w(PA),w(O1),f&&t(SPe),f&&t(Bi),w(IA),f&&t(RPe),f&&t(So),w(qA),w(jA),w(X1),w(DA),w(d8),f&&t(BPe),f&&t(qi),w(GA),f&&t(PPe),f&&t(Ro),w(OA),w(XA),w(f8),w(zA),w(sb),f&&t(IPe),f&&t(Di),w(QA),f&&t(qPe),f&&t(Bo),w(WA),w(UA),w(ib),w(JA),w(Nb),f&&t(NPe),f&&t(Vi),w(YA),f&&t(jPe),f&&t(Po),w(KA),w(e0),w(Db),w(o0),w(Wb),f&&t(DPe),f&&t(Qi),w(r0),f&&t(GPe),f&&t(Io),w(t0),w(n0),w(Ub),w(s0),w($2),f&&t(OPe),f&&t(Ui),w(l0),f&&t(VPe),f&&t(qo),w(i0),w(c0),w(S2),w(f0),w(vv),f&&t(XPe),f&&t(Ki),w(m0),f&&t(zPe),f&&t(No),w(g0),w(p0),w(Tv),w(u0),w(Cv),f&&t(QPe),f&&t(od),w(_0),f&&t(WPe),f&&t(jo),w(b0),w(F0),w(Av),w(T0),w(jv),f&&t(HPe),f&&t(ad),w(M0),f&&t(UPe),f&&t(Do),w(E0),w(w0),w(Gv),w(A0),w(Xv),f&&t(JPe),f&&t(ld),w(y0),f&&t(YPe),f&&t(Go),w(L0),w($0),w(Qv),w(k0),w(rF),f&&t(KPe),f&&t(cd),w(S0),f&&t(ZPe),f&&t(Oo),w(R0),w(P0),w(aF),w(I0),w(cF),f&&t(eIe),f&&t(gd),w(q0),f&&t(oIe),f&&t(Vo),w(N0),w(D0),w(mF),w(G0),w(MF),f&&t(rIe),f&&t(ud),w(O0),f&&t(tIe),f&&t(Xo),w(V0),w(z0),w(CF),w(Q0),w(LF),f&&t(aIe),f&&t(vd),w(H0),f&&t(nIe),f&&t(zo),w(U0),w(Y0),w($F),w(K0),w(IF),f&&t(sIe),f&&t(Md),w(Z0),f&&t(lIe),f&&t(Qo),w(ey),w(ry),w(NF),w(ty),w(VF),f&&t(iIe),f&&t(Ad),w(ay),f&&t(dIe),f&&t(Wo),w(ny),w(ly),w(zF),w(iy),w(UF),f&&t(cIe),f&&t(xd),w(cy),f&&t(fIe),f&&t(Ho),w(fy),w(gy),w(YF),w(hy),w(e6),f&&t(mIe),f&&t(Sd),w(py),f&&t(gIe),f&&t(Uo),w(uy),w(by),w(r6),w(vy),w(i6),f&&t(hIe),f&&t(Pd),w(Fy),f&&t(pIe),f&&t(Jo),w(Ty),w(Ey),w(c6),w(Cy),w(g6),f&&t(uIe),f&&t(Nd),w(wy),f&&t(_Ie),f&&t(Yo),w(Ay),w(Ly),w(p6),w(xy),w(lT),f&&t(bIe),f&&t(Gd),w($y),f&&t(vIe),f&&t(Ko),w(ky),w(Ry),w(dT),w(By),w(RT),f&&t(FIe),f&&t(Xd),w(Py),f&&t(TIe),f&&t(Zo),w(Iy),w(Ny),w(PT),w(jy),w(HT),f&&t(MIe),f&&t(Wd),w(Dy),f&&t(EIe),f&&t(er),w(Gy),w(Vy),w(JT),w(Xy),w(o9),f&&t(CIe),f&&t(Jd),w(zy),f&&t(wIe),f&&t(or),w(Qy),w(Hy),w(t9),w(Uy),w(C9),f&&t(AIe),f&&t(Zd),w(Jy),f&&t(yIe),f&&t(rr),w(Yy),w(Zy),w(A9),w(eL),w(q9),f&&t(LIe),f&&t(rc),w(oL),f&&t(xIe),f&&t(tr),w(rL),w(aL),w(j9),w(nL),w(mM),f&&t($Ie),f&&t(nc),w(sL),f&&t(kIe),f&&t(ar),w(lL),w(dL),w(hM),w(cL),w(SM),f&&t(SIe),f&&t(ic),w(fL),f&&t(RIe),f&&t(nr),w(mL),w(hL),w(BM),w(pL),w(qM),f&&t(BIe),f&&t(fc),w(_L),f&&t(PIe),f&&t(sr),w(bL),w(FL),w(jM),w(TL),w(GM),f&&t(IIe),f&&t(hc),w(ML),f&&t(qIe),f&&t(lr),w(EL),w(wL),w(VM),w(AL),w(c4),f&&t(NIe),f&&t(_c),w(yL),f&&t(jIe),f&&t(ir),w(LL),w($L),w(m4),w(kL),w(R4),f&&t(DIe),f&&t(Fc),w(SL),f&&t(GIe),f&&t(dr),w(RL),w(PL),w(P4),w(IL),w(q4),f&&t(OIe),f&&t(Ec),w(qL),f&&t(VIe),f&&t(cr),w(NL),w(DL),w(j4),w(GL),w(G4),f&&t(XIe),f&&t(Ac),w(OL),f&&t(zIe),f&&t(fr),w(VL),w(zL),w(V4),w(QL),w(pE),f&&t(QIe),f&&t(xc),w(WL),f&&t(WIe),f&&t(mr),w(HL),w(JL),w(_E),w(YL),w(yE),f&&t(HIe),f&&t(Sc),w(KL),f&&t(UIe),f&&t(gr),w(ZL),w(ox),w(xE),w(rx),w(OE),f&&t(JIe),f&&t(Pc),w(tx),f&&t(YIe),f&&t(hr),w(ax),w(sx),w(XE),w(lx),w(o5),f&&t(KIe),f&&t(Nc),w(ix),f&&t(ZIe),f&&t(pr),w(dx),w(fx),w(t5),w(mx),w(g5),f&&t(eqe),f&&t(Gc),w(gx),f&&t(oqe),f&&t(ur),w(hx),w(ux),w(p5),w(_x),w(A5),f&&t(rqe),f&&t(Xc),w(bx),f&&t(tqe),f&&t(_r),w(vx),w(Tx),w(L5),w(Mx),w(j5),f&&t(aqe),f&&t(Wc),w(Ex),f&&t(nqe),f&&t(br),w(Cx),w(Ax),w(G5),w(yx),w(J5),f&&t(sqe),f&&t(Jc),w(Lx),f&&t(lqe),f&&t(vr),w(xx),w(kx),w(K5),w(Sx),w(lC),f&&t(iqe),f&&t(Zc),w(Rx),f&&t(dqe),f&&t(Fr),w(Bx),w(Ix),w(dC),w(qx),w(fC),f&&t(cqe),f&&t(rf),w(Nx),f&&t(fqe),f&&t(Tr),w(jx),w(Gx),w(gC),w(Ox),w(uC),f&&t(mqe),f&&t(nf),w(Xx),f&&t(gqe),f&&t(Mr),w(zx),w(Wx),w(bC),w(Hx),w(FC)}}}const $At={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function kAt(A){return k3t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class NAt extends y3t{constructor(g){super();L3t(this,g,kAt,xAt,x3t,{})}}export{NAt as default,$At as metadata};
